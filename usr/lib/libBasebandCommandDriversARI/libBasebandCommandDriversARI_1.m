void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v35 = (uint64_t *)v10[1];
            if (!v35)
              break;
            do
            {
              v10 = v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((unsigned __int8 *)v13 + 28);
          *((_BYTE *)v12 + 28) = v14;
          v15 = *((_DWORD *)v13 + 8);
          *((_BYTE *)v12 + 36) = *((_BYTE *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          v16 = *v8;
          v17 = (uint64_t **)(a1 + 8);
          v18 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v17;
          *v18 = v12;
          v19 = **(_QWORD **)a1;
          if (v19)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v23 = (uint64_t *)v10[1];
                  if (!v23)
                    break;
                  do
                  {
                    v10 = v23;
                    v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v20 = (_QWORD *)v13[1];
          if (v20)
          {
            do
            {
              v4 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v21 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28))
              break;
            v16 = (uint64_t *)*v16;
            v18 = v17;
            if (!*v17)
              goto LABEL_14;
          }
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
        v18 = v17 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v17;
        v17[1] = v12;
        v19 = **(_QWORD **)a1;
        if (!v19)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v19;
        v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(_QWORD *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      v29 = *v25;
      v30 = (uint64_t **)(a1 + 8);
      v31 = (uint64_t **)(a1 + 8);
      if (*v25)
        break;
LABEL_54:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)a1;
      if (v32)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(_QWORD *)(a1 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v21 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v21);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28))
          break;
        v29 = (uint64_t **)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_54;
      }
      v29 = (uint64_t **)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)a1;
    if (!v32)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v32;
    v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v3;
  xpc_object_t object;

  if (MEMORY[0x22E2A4C30](*a1) != MEMORY[0x24BDACFA0])
    return "Unknown";
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v3 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v3 < 5)
    return off_24F036CC8[v3];
  else
    return "Unknown";
}

void sub_227AD2198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v4;
  xpc_object_t object;

  if (MEMORY[0x22E2A4C30](*a1) != MEMORY[0x24BDACFA0])
    return 5;
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v4 >= 5)
    return 5;
  else
    return v4;
}

void sub_227AD2254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v5) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(0);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if (v1 > 2)
    return "unknown";
  else
    return off_24F036CF0[v1];
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v3) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  int v5;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_24F036B70;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x22E2A4C30](*a1) == MEMORY[0x24BDACFA0] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v5 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_227AD26A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_24F036B70;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(_BYTE *)(a2 + 8) = 0;
    result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v5) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(1);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v3) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_24F036BB8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x22E2A4C30](*a1) == MEMORY[0x24BDACFA0] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_227AD2A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_24F036BB8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v5) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(2);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v3) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_24F036C00;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x22E2A4C30](*a1) == MEMORY[0x24BDACFA0] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_227AD2E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_24F036C00;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v5) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(3);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*(_BYTE *)(a1 + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v3) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_24F036C48;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x22E2A4C30](*a1) == MEMORY[0x24BDACFA0] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_227AD3244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_24F036C48;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v5) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(4);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*(_BYTE *)(a1 + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x22E2A4C30](v3) == MEMORY[0x24BDACFA0])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_24F036C90;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x22E2A4C30](*a1) == MEMORY[0x24BDACFA0] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_227AD3628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_24F036C90;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  if (result <= 2)
  {
    *(_BYTE *)(a2 + 23) = 4;
    *(_DWORD *)a2 = ((_DWORD)result << 16) + 1378894420;
    *(_BYTE *)(a2 + 4) = 0;
  }
  return result;
}

{
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  switch((int)result)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "1000msec");
      break;
    case 1:
      *(_DWORD *)(a2 + 3) = 1667593069;
      *(_DWORD *)a2 = 1831874609;
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 5;
      strcpy((char *)a2, "1msec");
      break;
    case 10:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "ModemSkin");
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierBG");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierCG");
      break;
    case 13:
      *(_BYTE *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 5915974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t abm::convertBasebandCPMSPowerBudgetScale(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  unsigned __int8 v4;
  uint64_t result;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int *v10;
  int v11;
  int v12;
  _QWORD *v14;
  unsigned __int16 *v15;
  uint64_t v18;
  int v19;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  switch(v1)
  {
    case 3:
      if (v2 >= 0)
        v3 = a1;
      else
        v3 = *(unsigned __int16 **)a1;
      if (bswap32(*v3) >> 16 == 17989)
      {
        if (*((_BYTE *)v3 + 2) == 90)
          v4 = 13;
        else
          v4 = -1;
        result = v4;
      }
      else
      {
        result = 255;
      }
      break;
    case 5:
      if (v2 >= 0)
        v6 = a1;
      else
        v6 = *(unsigned __int16 **)a1;
      v7 = *(_DWORD *)v6;
      v8 = *((unsigned __int8 *)v6 + 4);
      if (v7 != 1702063409 || v8 != 99)
        goto LABEL_50;
      result = 2;
      break;
    case 7:
      if (v2 >= 0)
        v10 = (int *)a1;
      else
        v10 = *(int **)a1;
      v11 = *v10;
      v12 = *(int *)((char *)v10 + 3);
      if (v11 != 1831874609 || v12 != 1667593069)
        goto LABEL_50;
      result = 1;
      break;
    case 8:
      if (v2 >= 0)
        v14 = a1;
      else
        v14 = *(_QWORD **)a1;
      if (*v14 != 0x6365736D30303031)
        goto LABEL_50;
      result = 0;
      break;
    case 9:
      if (v2 >= 0)
        v15 = a1;
      else
        v15 = *(unsigned __int16 **)a1;
      if (*(_QWORD *)v15 == 0x696B536D65646F4DLL && *((_BYTE *)v15 + 8) == 110)
      {
        result = 10;
      }
      else if (*(_QWORD *)v15 == 0x42726569676E6154 && *((_BYTE *)v15 + 8) == 71)
      {
        result = 11;
      }
      else
      {
        v18 = *(_QWORD *)v15;
        v19 = *((unsigned __int8 *)v15 + 8);
        if (v18 != 0x43726569676E6154 || v19 != 71)
          goto LABEL_50;
        result = 12;
      }
      break;
    default:
LABEL_50:
      result = 255;
      break;
  }
  return result;
}

void radio::ARICommandDriver::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD v45[2];
  dispatch_object_t object;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x1A8uLL);
  v9 = (std::__shared_weak_count *)a1[1];
  v47 = *a1;
  v48 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a2;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v45[0] = v13;
  v45[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  radio::ARICommandDriver::ARICommandDriver((uint64_t)v8, (uint64_t)&v47, &object, (uint64_t)v45);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_24F0378C0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v17;
  v19 = (std::__shared_weak_count *)*((_QWORD *)v8 + 10);
  if (v19)
  {
    if (v19->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    do
      v23 = __ldxr(v18);
    while (__stxr(v23 + 1, v18));
    v24 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v17;
  }
  do
    v26 = __ldaxr(v18);
  while (__stlxr(v26 - 1, v18));
  if (v26)
  {
LABEL_21:
    v27 = (_QWORD *)*a4;
    if (!*(_QWORD *)(*a4 + 56))
      goto LABEL_35;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  v27 = (_QWORD *)*a4;
  if (!*(_QWORD *)(*a4 + 56))
    goto LABEL_35;
LABEL_22:
  v28 = (std::__shared_weak_count *)v27[10];
  if (!v28 || (v29 = v27[9], (v30 = std::__shared_weak_count::lock(v28)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v31 = v30;
  v49 = v29;
  v50 = (uint64_t)v30;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v27 + 1));
  v54 = v29;
  v55 = v31;
  v49 = 0;
  v50 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v32 = v55;
  if (v55)
  {
    v33 = (unint64_t *)&v55->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v36 = (unint64_t *)(v50 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_35:
  if (v14)
  {
    v38 = (unint64_t *)&v14->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (object)
    dispatch_release(object);
  v40 = v48;
  if (v48)
  {
    v41 = (unint64_t *)&v48->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *a4;
  v44 = (uint64_t *)(*a4 + 72);
  v49 = MEMORY[0x24BDAC760];
  v50 = 0x40000000;
  v51 = ___ZN5radio16ARICommandDriver4initEv_block_invoke;
  v52 = &__block_descriptor_tmp_9_3;
  v53 = v43;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v44, (uint64_t)&v49);
}

void sub_227AD3CF0()
{
  __break(1u);
}

void sub_227AD3D34()
{
  __cxa_end_catch();
  JUMPOUT(0x227AD3D5CLL);
}

void sub_227AD3D44()
{
  JUMPOUT(0x227AD3D60);
}

void radio::ARICommandDriver::init(radio::ARICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_3;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t radio::ARICommandDriver::ARICommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  radio::OpMode *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v19;
  std::__shared_weak_count *v20;
  NSObject *object;
  std::__shared_weak_count *v22;

  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v22 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  v20 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  radio::CommandDriver::CommandDriver();
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v14 = (radio::OpMode *)object;
  if (object)
    dispatch_release(object);
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_QWORD *)a1 = off_24F036D98;
  *(_DWORD *)(a1 + 288) = 255;
  radio::OpMode::create(v14);
  v17 = *(NSObject **)(a1 + 88);
  v19 = v17;
  if (v17)
    dispatch_retain(v17);
  radio::CommandDriver::getName((radio::CommandDriver *)a1);
  ice::Client::create();
  if (v19)
    dispatch_release(v19);
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  return a1;
}

void sub_227AD3F8C(_Unwind_Exception *a1)
{
  void **v1;

  radio::CommandDriver::~CommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_227AD3FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_227AD3FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  void **v9;
  uint64_t v10;

  if (object)
    dispatch_release(object);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v10);
  radio::CommandDriver::~CommandDriver(v9);
  _Unwind_Resume(a1);
}

void radio::CommandDriver::~CommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  const void *v12;
  _QWORD *v13;
  radio::CommandDriver *v14;
  uint64_t v15;
  _QWORD *v16;
  radio::CommandDriver *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  const void *v36;
  radio::CommandDriver *v37;
  const void *v38;
  radio::CommandDriver *v39;

  *this = off_24F037600;
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  v2 = (std::__shared_weak_count *)this[32];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)this[30];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)this[28];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = this[26];
  if (v11)
    dispatch_release(v11);
  v12 = this[25];
  if (v12)
    _Block_release(v12);
  if (this[24])
  {
    v13 = this[22];
    v14 = (radio::CommandDriver *)this[23];
    v15 = *(_QWORD *)v14;
    *(_QWORD *)(v15 + 8) = v13[1];
    *(_QWORD *)v13[1] = v15;
    this[24] = 0;
    if (v14 != (radio::CommandDriver *)(this + 22))
    {
      do
      {
        v37 = (radio::CommandDriver *)*((_QWORD *)v14 + 1);
        v36 = (const void *)*((_QWORD *)v14 + 2);
        if (v36)
          _Block_release(v36);
        operator delete(v14);
        v14 = v37;
      }
      while (v37 != (radio::CommandDriver *)(this + 22));
    }
  }
  if (this[21])
  {
    v16 = this[19];
    v17 = (radio::CommandDriver *)this[20];
    v18 = *(_QWORD *)v17;
    *(_QWORD *)(v18 + 8) = v16[1];
    *(_QWORD *)v16[1] = v18;
    this[21] = 0;
    if (v17 != (radio::CommandDriver *)(this + 19))
    {
      do
      {
        v39 = (radio::CommandDriver *)*((_QWORD *)v17 + 1);
        v38 = (const void *)*((_QWORD *)v17 + 2);
        if (v38)
          _Block_release(v38);
        operator delete(v17);
        v17 = v39;
      }
      while (v39 != (radio::CommandDriver *)(this + 19));
    }
  }
  this[16] = &off_24F0377A0;
  v19 = (unsigned int *)this[18];
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
      v23 = v19 + 3;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
    }
  }
  this[13] = &off_24F037810;
  v26 = (unsigned int *)this[15];
  if (v26)
  {
    v27 = v26 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 16))(v26);
      v30 = v26 + 3;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 24))(v26);
    }
  }
  *this = off_24F037880;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v33 = this[12];
  if (v33)
    dispatch_release(v33);
  v34 = this[11];
  if (v34)
    dispatch_release(v34);
  v35 = (std::__shared_weak_count *)this[10];
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
}

void radio::ARICommandDriver::~ARICommandDriver(radio::ARICommandDriver *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint8_t v9[16];

  *(_QWORD *)this = off_24F036D98;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v9, 2u);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 50));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 47));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 43));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
      if (v6)
        goto LABEL_8;
LABEL_11:
      radio::CommandDriver::~CommandDriver((void **)this);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v6)
    goto LABEL_11;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_11;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::CommandDriver::~CommandDriver((void **)this);
}

{
  void *v1;

  radio::ARICommandDriver::~ARICommandDriver(this);
  operator delete(v1);
}

uint64_t ___ZN5radio16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t **v4;
  int *v5;
  uint64_t **v6;
  _QWORD *v7;
  int *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int *v21;
  uint64_t **v22;
  _QWORD *v23;
  int *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t **v36;
  int *v37;
  uint64_t **v38;
  _QWORD *v39;
  int *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t **v46;
  _QWORD *v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  int *v53;
  uint64_t **v54;
  _QWORD *v55;
  int *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  _QWORD *v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  uint64_t **v68;
  int *v69;
  uint64_t **v70;
  _QWORD *v71;
  int *v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t **v78;
  _QWORD *v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  int *v85;
  uint64_t **v86;
  _QWORD *v87;
  int *v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  _QWORD *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  void *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD v111[5];
  _QWORD v112[5];
  _QWORD v113[5];
  uint8_t buf[8];
  uint64_t v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  std::__shared_weak_count *v119;
  _QWORD aBlock[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = *(_DWORD *)(v1 + 288);
  v4 = (uint64_t **)(v1 + 344);
  v5 = *(int **)(v1 + 344);
  v6 = (uint64_t **)(v1 + 344);
  v7 = (_QWORD *)(v1 + 344);
  if (v5)
  {
    v8 = *(int **)(v1 + 344);
    while (1)
    {
      while (1)
      {
        v7 = v8;
        v9 = v8[7];
        if (v9 < 2)
          break;
        v8 = (int *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v9 == 1)
        break;
      v8 = (int *)v7[1];
      if (!v8)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v10 = v7;
    v7 = operator new(0x28uLL);
    *(_QWORD *)((char *)v7 + 28) = 1;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    *v6 = v7;
    v11 = **(_QWORD **)(v1 + 336);
    v12 = v7;
    if (v11)
    {
      *(_QWORD *)(v1 + 336) = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v12);
    v5 = *(int **)(v1 + 344);
    ++*(_QWORD *)(v1 + 352);
  }
  *((_DWORD *)v7 + 8) = v3;
  v13 = *(_DWORD *)(v1 + 288);
  v14 = (uint64_t **)(v1 + 344);
  v15 = (_QWORD *)(v1 + 344);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v15 = v5;
        v16 = v5[7];
        if (v16 < 3)
          break;
        v5 = (int *)*v15;
        v14 = (uint64_t **)v15;
        if (!*v15)
          goto LABEL_20;
      }
      if (v16 == 2)
        break;
      v5 = (int *)v15[1];
      if (!v5)
      {
        v14 = (uint64_t **)(v15 + 1);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    v17 = v15;
    v15 = operator new(0x28uLL);
    *(_QWORD *)((char *)v15 + 28) = 2;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = v17;
    *v14 = v15;
    v18 = **(_QWORD **)(v1 + 336);
    v19 = v15;
    if (v18)
    {
      *(_QWORD *)(v1 + 336) = v18;
      v19 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v19);
    ++*(_QWORD *)(v1 + 352);
  }
  *((_DWORD *)v15 + 8) = v13;
  v20 = *(_DWORD *)(v1 + 288);
  v21 = *(int **)(v1 + 344);
  v22 = (uint64_t **)(v1 + 344);
  v23 = (_QWORD *)(v1 + 344);
  if (v21)
  {
    v24 = *(int **)(v1 + 344);
    while (1)
    {
      while (1)
      {
        v23 = v24;
        v25 = v24[7];
        if (v25 < 4)
          break;
        v24 = (int *)*v23;
        v22 = (uint64_t **)v23;
        if (!*v23)
          goto LABEL_30;
      }
      if (v25 == 3)
        break;
      v24 = (int *)v23[1];
      if (!v24)
      {
        v22 = (uint64_t **)(v23 + 1);
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    v26 = v23;
    v23 = operator new(0x28uLL);
    *(_QWORD *)((char *)v23 + 28) = 3;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v26;
    *v22 = v23;
    v27 = **(_QWORD **)(v1 + 336);
    v28 = v23;
    if (v27)
    {
      *(_QWORD *)(v1 + 336) = v27;
      v28 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v28);
    v21 = *(int **)(v1 + 344);
    ++*(_QWORD *)(v1 + 352);
  }
  *((_DWORD *)v23 + 8) = v20;
  v29 = *(_DWORD *)(v1 + 288);
  v30 = (_QWORD *)(v1 + 344);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        v30 = v21;
        v31 = v21[7];
        if (v31 < 1)
          break;
        v21 = (int *)*v30;
        v4 = (uint64_t **)v30;
        if (!*v30)
          goto LABEL_40;
      }
      if ((v31 & 0x80000000) == 0)
        break;
      v21 = (int *)v30[1];
      if (!v21)
      {
        v4 = (uint64_t **)(v30 + 1);
        goto LABEL_40;
      }
    }
  }
  else
  {
LABEL_40:
    v32 = v30;
    v30 = operator new(0x28uLL);
    *((_DWORD *)v30 + 7) = 0;
    *((_DWORD *)v30 + 8) = 0;
    *v30 = 0;
    v30[1] = 0;
    v30[2] = v32;
    *v4 = v30;
    v33 = **(_QWORD **)(v1 + 336);
    v34 = v30;
    if (v33)
    {
      *(_QWORD *)(v1 + 336) = v33;
      v34 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v34);
    ++*(_QWORD *)(v1 + 352);
  }
  *((_DWORD *)v30 + 8) = v29;
  v35 = *(_DWORD *)(v1 + 288);
  *(_DWORD *)(v1 + 360) = v35;
  v36 = (uint64_t **)(v1 + 376);
  v37 = *(int **)(v1 + 376);
  v38 = (uint64_t **)(v1 + 376);
  v39 = (_QWORD *)(v1 + 376);
  if (v37)
  {
    v40 = *(int **)(v1 + 376);
    while (1)
    {
      while (1)
      {
        v39 = v40;
        v41 = v40[7];
        if (v41 < 2)
          break;
        v40 = (int *)*v39;
        v38 = (uint64_t **)v39;
        if (!*v39)
          goto LABEL_50;
      }
      if (v41 == 1)
        break;
      v40 = (int *)v39[1];
      if (!v40)
      {
        v38 = (uint64_t **)(v39 + 1);
        goto LABEL_50;
      }
    }
  }
  else
  {
LABEL_50:
    v42 = v39;
    v39 = operator new(0x28uLL);
    *(_QWORD *)((char *)v39 + 28) = 1;
    *v39 = 0;
    v39[1] = 0;
    v39[2] = v42;
    *v38 = v39;
    v43 = **(_QWORD **)(v1 + 368);
    v44 = v39;
    if (v43)
    {
      *(_QWORD *)(v1 + 368) = v43;
      v44 = *v38;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v44);
    v37 = *(int **)(v1 + 376);
    ++*(_QWORD *)(v1 + 384);
  }
  *((_DWORD *)v39 + 8) = v35;
  v45 = *(_DWORD *)(v1 + 288);
  v46 = (uint64_t **)(v1 + 376);
  v47 = (_QWORD *)(v1 + 376);
  if (v37)
  {
    while (1)
    {
      while (1)
      {
        v47 = v37;
        v48 = v37[7];
        if (v48 < 3)
          break;
        v37 = (int *)*v47;
        v46 = (uint64_t **)v47;
        if (!*v47)
          goto LABEL_60;
      }
      if (v48 == 2)
        break;
      v37 = (int *)v47[1];
      if (!v37)
      {
        v46 = (uint64_t **)(v47 + 1);
        goto LABEL_60;
      }
    }
  }
  else
  {
LABEL_60:
    v49 = v47;
    v47 = operator new(0x28uLL);
    *(_QWORD *)((char *)v47 + 28) = 2;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = v49;
    *v46 = v47;
    v50 = **(_QWORD **)(v1 + 368);
    v51 = v47;
    if (v50)
    {
      *(_QWORD *)(v1 + 368) = v50;
      v51 = *v46;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v51);
    ++*(_QWORD *)(v1 + 384);
  }
  *((_DWORD *)v47 + 8) = v45;
  v52 = *(_DWORD *)(v1 + 288);
  v53 = *(int **)(v1 + 376);
  v54 = (uint64_t **)(v1 + 376);
  v55 = (_QWORD *)(v1 + 376);
  if (v53)
  {
    v56 = *(int **)(v1 + 376);
    while (1)
    {
      while (1)
      {
        v55 = v56;
        v57 = v56[7];
        if (v57 < 4)
          break;
        v56 = (int *)*v55;
        v54 = (uint64_t **)v55;
        if (!*v55)
          goto LABEL_70;
      }
      if (v57 == 3)
        break;
      v56 = (int *)v55[1];
      if (!v56)
      {
        v54 = (uint64_t **)(v55 + 1);
        goto LABEL_70;
      }
    }
  }
  else
  {
LABEL_70:
    v58 = v55;
    v55 = operator new(0x28uLL);
    *(_QWORD *)((char *)v55 + 28) = 3;
    *v55 = 0;
    v55[1] = 0;
    v55[2] = v58;
    *v54 = v55;
    v59 = **(_QWORD **)(v1 + 368);
    v60 = v55;
    if (v59)
    {
      *(_QWORD *)(v1 + 368) = v59;
      v60 = *v54;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v60);
    v53 = *(int **)(v1 + 376);
    ++*(_QWORD *)(v1 + 384);
  }
  *((_DWORD *)v55 + 8) = v52;
  v61 = *(_DWORD *)(v1 + 288);
  v62 = (_QWORD *)(v1 + 376);
  if (v53)
  {
    while (1)
    {
      while (1)
      {
        v62 = v53;
        v63 = v53[7];
        if (v63 < 1)
          break;
        v53 = (int *)*v62;
        v36 = (uint64_t **)v62;
        if (!*v62)
          goto LABEL_80;
      }
      if ((v63 & 0x80000000) == 0)
        break;
      v53 = (int *)v62[1];
      if (!v53)
      {
        v36 = (uint64_t **)(v62 + 1);
        goto LABEL_80;
      }
    }
  }
  else
  {
LABEL_80:
    v64 = v62;
    v62 = operator new(0x28uLL);
    *((_DWORD *)v62 + 7) = 0;
    *((_DWORD *)v62 + 8) = 0;
    *v62 = 0;
    v62[1] = 0;
    v62[2] = v64;
    *v36 = v62;
    v65 = **(_QWORD **)(v1 + 368);
    v66 = v62;
    if (v65)
    {
      *(_QWORD *)(v1 + 368) = v65;
      v66 = *v36;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v66);
    ++*(_QWORD *)(v1 + 384);
  }
  *((_DWORD *)v62 + 8) = v61;
  v67 = *(_DWORD *)(v1 + 288);
  v68 = (uint64_t **)(v1 + 400);
  v69 = *(int **)(v1 + 400);
  v70 = (uint64_t **)(v1 + 400);
  v71 = (_QWORD *)(v1 + 400);
  if (v69)
  {
    v72 = *(int **)(v1 + 400);
    while (1)
    {
      while (1)
      {
        v71 = v72;
        v73 = v72[7];
        if (v73 < 2)
          break;
        v72 = (int *)*v71;
        v70 = (uint64_t **)v71;
        if (!*v71)
          goto LABEL_90;
      }
      if (v73 == 1)
        break;
      v72 = (int *)v71[1];
      if (!v72)
      {
        v70 = (uint64_t **)(v71 + 1);
        goto LABEL_90;
      }
    }
  }
  else
  {
LABEL_90:
    v74 = v71;
    v71 = operator new(0x28uLL);
    *(_QWORD *)((char *)v71 + 28) = 1;
    *v71 = 0;
    v71[1] = 0;
    v71[2] = v74;
    *v70 = v71;
    v75 = **(_QWORD **)(v1 + 392);
    v76 = v71;
    if (v75)
    {
      *(_QWORD *)(v1 + 392) = v75;
      v76 = *v70;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v76);
    v69 = *(int **)(v1 + 400);
    ++*(_QWORD *)(v1 + 408);
  }
  *((_DWORD *)v71 + 8) = v67;
  v77 = *(_DWORD *)(v1 + 288);
  v78 = (uint64_t **)(v1 + 400);
  v79 = (_QWORD *)(v1 + 400);
  if (v69)
  {
    while (1)
    {
      while (1)
      {
        v79 = v69;
        v80 = v69[7];
        if (v80 < 3)
          break;
        v69 = (int *)*v79;
        v78 = (uint64_t **)v79;
        if (!*v79)
          goto LABEL_100;
      }
      if (v80 == 2)
        break;
      v69 = (int *)v79[1];
      if (!v69)
      {
        v78 = (uint64_t **)(v79 + 1);
        goto LABEL_100;
      }
    }
  }
  else
  {
LABEL_100:
    v81 = v79;
    v79 = operator new(0x28uLL);
    *(_QWORD *)((char *)v79 + 28) = 2;
    *v79 = 0;
    v79[1] = 0;
    v79[2] = v81;
    *v78 = v79;
    v82 = **(_QWORD **)(v1 + 392);
    v83 = v79;
    if (v82)
    {
      *(_QWORD *)(v1 + 392) = v82;
      v83 = *v78;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v83);
    ++*(_QWORD *)(v1 + 408);
  }
  *((_DWORD *)v79 + 8) = v77;
  v84 = *(_DWORD *)(v1 + 288);
  v85 = *(int **)(v1 + 400);
  v86 = (uint64_t **)(v1 + 400);
  v87 = (_QWORD *)(v1 + 400);
  if (v85)
  {
    v88 = *(int **)(v1 + 400);
    while (1)
    {
      while (1)
      {
        v87 = v88;
        v89 = v88[7];
        if (v89 < 4)
          break;
        v88 = (int *)*v87;
        v86 = (uint64_t **)v87;
        if (!*v87)
          goto LABEL_110;
      }
      if (v89 == 3)
        break;
      v88 = (int *)v87[1];
      if (!v88)
      {
        v86 = (uint64_t **)(v87 + 1);
        goto LABEL_110;
      }
    }
  }
  else
  {
LABEL_110:
    v90 = v87;
    v87 = operator new(0x28uLL);
    *(_QWORD *)((char *)v87 + 28) = 3;
    *v87 = 0;
    v87[1] = 0;
    v87[2] = v90;
    *v86 = v87;
    v91 = **(_QWORD **)(v1 + 392);
    v92 = v87;
    if (v91)
    {
      *(_QWORD *)(v1 + 392) = v91;
      v92 = *v86;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v92);
    v85 = *(int **)(v1 + 400);
    ++*(_QWORD *)(v1 + 408);
  }
  *((_DWORD *)v87 + 8) = v84;
  v93 = *(_DWORD *)(v1 + 288);
  v94 = (_QWORD *)(v1 + 400);
  if (v85)
  {
    while (1)
    {
      while (1)
      {
        v94 = v85;
        v95 = v85[7];
        if (v95 < 1)
          break;
        v85 = (int *)*v94;
        v68 = (uint64_t **)v94;
        if (!*v94)
          goto LABEL_120;
      }
      if ((v95 & 0x80000000) == 0)
        break;
      v85 = (int *)v94[1];
      if (!v85)
      {
        v68 = (uint64_t **)(v94 + 1);
        goto LABEL_120;
      }
    }
  }
  else
  {
LABEL_120:
    v96 = v94;
    v94 = operator new(0x28uLL);
    *((_DWORD *)v94 + 7) = 0;
    *((_DWORD *)v94 + 8) = 0;
    *v94 = 0;
    v94[1] = 0;
    v94[2] = v96;
    *v68 = v94;
    v97 = **(_QWORD **)(v1 + 392);
    v98 = v94;
    if (v97)
    {
      *(_QWORD *)(v1 + 392) = v97;
      v98 = *v68;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v98);
    ++*(_QWORD *)(v1 + 408);
  }
  *((_DWORD *)v94 + 8) = v93;
  *(_DWORD *)(v1 + 420) = 0;
  v99 = *(_QWORD *)(v1 + 312);
  v100 = MEMORY[0x24BDAC760];
  v113[0] = MEMORY[0x24BDAC760];
  v113[1] = 0x40000000;
  v113[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke_2;
  v113[3] = &__block_descriptor_tmp_8;
  v113[4] = v1;
  *(_QWORD *)buf = v113;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v99, 0, (uint64_t *)buf);
  v101 = *(_QWORD *)(v1 + 312);
  v112[0] = v100;
  v112[1] = 0x40000000;
  v112[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke_3;
  v112[3] = &__block_descriptor_tmp_4_4;
  v112[4] = v1;
  *(_QWORD *)buf = v112;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v101, 1, (uint64_t *)buf);
  v102 = (std::__shared_weak_count *)operator new(0x20uLL);
  v102->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v102->__shared_owners_;
  v102->__shared_weak_owners_ = 0;
  v102->__vftable = (std::__shared_weak_count_vtbl *)off_24F037940;
  v102[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  *(_QWORD *)buf = v100;
  v115 = 1174405120;
  v116 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v117 = &__block_descriptor_tmp_76_0;
  v118 = &v102[1].__vftable;
  v119 = v102;
  do
    v104 = __ldxr(p_shared_owners);
  while (__stxr(v104 + 1, p_shared_owners));
  aBlock[0] = v100;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = buf;
  v105 = _Block_copy(aBlock);
  v106 = v119;
  if (v119)
  {
    v107 = (unint64_t *)&v119->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  do
    v109 = __ldaxr(p_shared_owners);
  while (__stlxr(v109 - 1, p_shared_owners));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
  *(_QWORD *)buf = v105;
  ice::Client::regIndicationInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  ice::Client::setIndShouldWake(*(ice::Client **)(v1 + 312));
  v111[0] = v100;
  v111[1] = 0x40000000;
  v111[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke_5;
  v111[3] = &__block_descriptor_tmp_8_2;
  v111[4] = v1;
  *(_QWORD *)buf = v100;
  v115 = 0x40000000;
  v116 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v117 = &unk_24F037988;
  v118 = v111;
  *(_QWORD *)buf = _Block_copy(buf);
  ice::Client::regIndicationInternal();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  ice::Client::setIndShouldWake(*(ice::Client **)(v1 + 312));
  return ice::Client::start(*(ice::Client **)(v1 + 312));
}

void sub_227AD4DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio16ARICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  radio::CommandDriver *v1;
  NSObject *v2;
  _QWORD v3[2];
  uint8_t buf[16];

  v1 = *(radio::CommandDriver **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Started", buf, 2u);
  }
  radio::CommandDriver::handleClientStateChanged_sync(v1);
  v3[0] = 0;
  v3[1] = 0;
  radio::ARICommandDriver::getOperatingMode((uint64_t)v1, (uint64_t)v3);
}

void sub_227AD4EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::getOperatingMode(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_18_5;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t ___ZN5radio16ARICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_debug_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEBUG, "#D Stopped", v4, 2u);
  }
  radio::CommandDriver::handleClientStateChanged_sync((radio::CommandDriver *)v1);
  result = radio::CommandDriver::handleOperatingModeChanged_sync();
  *(_BYTE *)(v1 + 328) = 0;
  return result;
}

void ___ZN5radio16ARICommandDriver4initEv_block_invoke_5(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  __int128 v3;
  _BOOL4 v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v21;
  NSObject *v22;
  CFTypeID v23;
  uint64_t v24;
  __CFDictionary *v25;
  __int128 v26;
  pthread_mutex_t *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  char *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  CFTypeRef *v59;
  CFTypeRef v60;
  uint64_t v61;
  void (*v62)(uint64_t, CFTypeRef *);
  uint64_t v63;
  uint64_t i;
  uint64_t v65;
  CFTypeRef *v66;
  CFTypeRef v67;
  uint64_t v68;
  void (*v69)(uint64_t, CFTypeRef *);
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  __CFDictionary *v77;
  _OWORD v78[4];
  __int128 v79;
  __int128 v80;
  CFTypeRef v81;
  _QWORD v82[4];
  __int128 v83;
  __int128 v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  unsigned int *v89;
  __int128 v90;
  __int128 v91;
  CFTypeRef cf;
  std::runtime_error v93;
  _BYTE v94[32];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *__p[2];
  pthread_mutex_t *v104[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  CFTypeRef *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v79 = v3;
  v80 = v3;
  v78[2] = v3;
  v78[3] = v3;
  v78[0] = v3;
  v78[1] = v3;
  AriSdk::ARI_CsiBSPBBDumpInd_SDK::ARI_CsiBSPBBDumpInd_SDK((AriSdk::ARI_CsiBSPBBDumpInd_SDK *)v78, a2);
  if (AriSdk::ARI_CsiBSPBBDumpInd_SDK::unpack((AriSdk::ARI_CsiBSPBBDumpInd_SDK *)v78))
  {
    v4 = 1;
    v5 = 0xAAAAAAAAAAAAAAAALL;
    v6 = 0x7AAAAAAAAAAAAAALL;
    v7 = 0x6E776F6E6B6E75;
    goto LABEL_19;
  }
  v8 = v79;
  v9 = *((_QWORD *)&v79 + 1) - v79;
  if (*((_QWORD *)&v79 + 1) - (_QWORD)v79 >= 0x7FFFFFFFFFFFFFF8uLL)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 > 0x16)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v18 = v17 + 1;
    v10 = operator new(v17 + 1);
    *(_QWORD *)&v94[8] = v9;
    *(_QWORD *)&v94[16] = v18 | 0x8000000000000000;
    *(_QWORD *)v94 = v10;
    if ((_QWORD)v8 != *((_QWORD *)&v8 + 1))
      goto LABEL_6;
LABEL_15:
    v11 = v10;
    goto LABEL_18;
  }
  v94[23] = BYTE8(v79) - v79;
  v10 = v94;
  if ((_QWORD)v79 == *((_QWORD *)&v79 + 1))
    goto LABEL_15;
LABEL_6:
  if (v9 < 0x20 || (unint64_t)&v10[-v8] < 0x20)
  {
    v11 = v10;
    v12 = (char *)v8;
  }
  else
  {
    v11 = &v10[v9 & 0xFFFFFFFFFFFFFFE0];
    v12 = (char *)(v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
    v13 = (__int128 *)(v8 + 16);
    v14 = v10 + 16;
    v15 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 32;
    }
    while (v15);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_18;
  }
  do
  {
    v19 = *v12++;
    *v11++ = v19;
  }
  while (v12 != *((char **)&v8 + 1));
LABEL_18:
  *v11 = 0;
  v5 = *(_QWORD *)&v94[8];
  v7 = *(_QWORD *)v94;
  v6 = *(_QWORD *)&v94[16];
  v4 = **((_DWORD **)&v80 + 1) != 0;
LABEL_19:
  v77 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v21 = Mutable;
  if (Mutable)
    v77 = Mutable;
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v94, (const std::string::value_type *)v7, v5);
  }
  else
  {
    *(_QWORD *)v94 = v7;
    *(_QWORD *)&v94[8] = v5;
    *(_QWORD *)&v94[16] = v6;
  }
  ctu::cf::insert<__CFString const*,std::string>((int)v21, (CFTypeRef)*MEMORY[0x24BED38F0]);
  if ((v94[23] & 0x80000000) != 0)
    operator delete(*(void **)v94);
  ctu::cf::insert<__CFString const*,BOOL>(v21, (CFTypeRef)*MEMORY[0x24BED3918], v4);
  v22 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v94 = 138412290;
    *(_QWORD *)&v94[4] = v21;
    _os_log_impl(&dword_227A72000, v22, OS_LOG_TYPE_DEFAULT, "#I Baseband requested to dump logs\n%@", v94, 0xCu);
  }
  if (v21 && (v23 = CFGetTypeID(v21), v23 == CFDictionaryGetTypeID()))
  {
    CFRetain(v21);
    v24 = *(_QWORD *)(v2 + 112);
    v81 = v21;
    CFRetain(v21);
    v25 = v21;
  }
  else
  {
    v25 = 0;
    v24 = *(_QWORD *)(v2 + 112);
    v81 = 0;
  }
  v88 = 0;
  v89 = 0;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v101 = v26;
  v102 = v26;
  v99 = v26;
  v100 = v26;
  v97 = v26;
  v98 = v26;
  v95 = v26;
  v96 = v26;
  *(_OWORD *)v94 = v26;
  *(_OWORD *)&v94[16] = v26;
  v27 = *(pthread_mutex_t **)(v24 + 24);
  __p[0] = (void *)10;
  __p[1] = v94;
  v104[0] = 0;
  v104[1] = v27;
  pthread_mutex_lock(v27);
  v28 = *(unsigned int **)(v24 + 8);
  if (!v28)
  {
    v30 = *(uint64_t ***)v24;
    goto LABEL_45;
  }
  v29 = atomic_load(v28 + 2);
  v30 = *(uint64_t ***)v24;
  if (v29 == 1)
  {
    v31 = *v30;
    v32 = *(_QWORD *)(v24 + 16);
    if ((uint64_t *)v32 == *v30)
    {
      v32 = v31[1];
      *(_QWORD *)&v90 = v32;
      if (v31 == (uint64_t *)v32)
      {
LABEL_41:
        *(_QWORD *)(v24 + 16) = v32;
        goto LABEL_42;
      }
    }
    else
    {
      *(_QWORD *)&v90 = *(_QWORD *)(v24 + 16);
    }
    v33 = *(_QWORD *)(v32 + 16);
    if (*(_BYTE *)(v33 + 24))
    {
      v32 = *(_QWORD *)(v32 + 8);
    }
    else
    {
      v32 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v31, (int *)(v33 + 64), (uint64_t **)&v90);
      v30 = *(uint64_t ***)v24;
    }
    goto LABEL_41;
  }
LABEL_42:
  v28 = *(unsigned int **)(v24 + 8);
  if (v28)
  {
    v34 = v28 + 2;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
LABEL_45:
  v36 = v89;
  v88 = v30;
  v89 = v28;
  if (v36)
  {
    v37 = v36 + 2;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
      v40 = v36 + 3;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
        (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 24))(v36);
    }
  }
  pthread_mutex_unlock(v104[1]);
  v43 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v104[0][-1].__opaque[55] >= 0)
    {
      v44 = (char *)__p[1] + 16 * (uint64_t)v104[0];
      do
      {
        v45 = (unsigned int *)*((_QWORD *)v44 - 1);
        if (v45)
        {
          v46 = v45 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 16))(v45);
            v49 = v45 + 3;
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
              (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 24))(v45);
          }
        }
        v44 -= 16;
      }
      while (v44 > v43);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v52 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v106 = v52;
  v107 = v52;
  *(_OWORD *)v104 = v52;
  v105 = v52;
  v102 = v52;
  *(_OWORD *)__p = v52;
  v100 = v52;
  v101 = v52;
  v98 = v52;
  v99 = v52;
  v96 = v52;
  v97 = v52;
  *(_OWORD *)&v94[16] = v52;
  v95 = v52;
  *(_OWORD *)v94 = v52;
  v94[0] = 0;
  v108 = 0xAAAAAAAAAAAAAAAALL;
  v109 = 10;
  v110 = &v94[8];
  v111 = 0;
  v114 = 0;
  v112 = &v81;
  v113 = 0;
  v53 = v88;
  v54 = (uint64_t)*v88;
  v85 = v94;
  v86 = v24;
  v87 = v54;
  *(_QWORD *)&v83 = *(_QWORD *)(v54 + 8);
  *((_QWORD *)&v83 + 1) = v54;
  *(_QWORD *)&v84 = v94;
  *((_QWORD *)&v84 + 1) = v54;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v83);
  v82[0] = *v53;
  v82[1] = v82[0];
  v82[2] = v94;
  v82[3] = v82[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(v82);
  v90 = v83;
  v91 = v84;
  v55 = v82[0];
  v56 = v83;
  if ((_QWORD)v83 == v82[0])
  {
    if (HIDWORD(v113) <= v113)
      goto LABEL_95;
LABEL_94:
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(v86, v87);
    goto LABEL_95;
  }
  v57 = (_BYTE *)v91;
  if (!*(_BYTE *)v91)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(v90 + 16) + 32);
    v59 = *(CFTypeRef **)(v91 + 272);
    v60 = *v59;
    if (*v59)
      CFRetain(*v59);
    v61 = *(_QWORD *)(v58 + 24);
    if (!v61)
    {
      std::runtime_error::runtime_error(&v93, "call to empty boost::function");
      v93.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
      boost::throw_exception<boost::bad_function_call>(&v93);
    }
    v62 = *(void (**)(uint64_t, CFTypeRef *))((v61 & 0xFFFFFFFFFFFFFFFELL) + 8);
    cf = v60;
    v62(v58 + 32, &cf);
    if (cf)
      CFRelease(cf);
    if (!*v57)
      *v57 = 1;
  }
  *(_QWORD *)&v90 = *(_QWORD *)(v56 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v90);
  v63 = v91;
  if (*(_BYTE *)v91)
    *(_BYTE *)v91 = 0;
  for (i = v90; (_QWORD)v90 != v55; i = v90)
  {
    v65 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v66 = *(CFTypeRef **)(v63 + 272);
    v67 = *v66;
    if (*v66)
      CFRetain(*v66);
    v68 = *(_QWORD *)(v65 + 24);
    if (!v68)
    {
      std::runtime_error::runtime_error(&v93, "call to empty boost::function");
      v93.__vftable = (std::runtime_error_vtbl *)&unk_24F034D70;
      boost::throw_exception<boost::bad_function_call>(&v93);
    }
    v69 = *(void (**)(uint64_t, CFTypeRef *))((v68 & 0xFFFFFFFFFFFFFFFELL) + 8);
    cf = v67;
    v69(v65 + 32, &cf);
    if (cf)
      CFRelease(cf);
    if (!*(_BYTE *)v63)
      *(_BYTE *)v63 = 1;
    *(_QWORD *)&v90 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v90);
    v63 = v91;
    if (*(_BYTE *)v91)
      *(_BYTE *)v91 = 0;
  }
  if (*((_DWORD *)v85 + 71) > *((_DWORD *)v85 + 70))
    goto LABEL_94;
LABEL_95:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)v94);
  v70 = v89;
  if (v89)
  {
    v71 = v89 + 2;
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
      v74 = v70 + 3;
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
        (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 24))(v70);
    }
  }
  if (v81)
    CFRelease(v81);
  if (v25)
  {
    CFRelease(v25);
    v21 = v77;
  }
  if (v21)
    CFRelease(v21);
  MEMORY[0x22E2A3244](v78);
  if (v6 < 0)
    operator delete((void *)v7);
}

void sub_227AD5908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a47);
  JUMPOUT(0x227AD5B0CLL);
}

void sub_227AD5918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,std::runtime_error a45)
{
  void *v45;
  const void *v46;
  uint64_t v47;
  const void *v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  std::runtime_error::~runtime_error(&a45);
  if (v46)
    CFRelease(v46);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a39 + 16));
    __cxa_rethrow();
  }
  boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v54);
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v56);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v55);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v53);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v50);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v51);
  MEMORY[0x22E2A3244](&v52);
  if (v47 < 0)
    operator delete(v45);
  _Unwind_Resume(a1);
}

void sub_227AD59A4(_Unwind_Exception *a1, int a2)
{
  void *v2;
  uint64_t v3;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v10);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v12);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v11);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v9);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v6);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v7);
    MEMORY[0x22E2A3244](&v8);
    if (v3 < 0)
      operator delete(v2);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD5974);
}

void sub_227AD5A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a67;
  char *__p;
  uint64_t a69;
  char *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;

  if (__p)
  {
    if (a69 - 1 >= 0)
    {
      v69 = &__p[16 * a69];
      do
      {
        v70 = (unsigned int *)*((_QWORD *)v69 - 1);
        if (v70)
        {
          v71 = v70 + 2;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
            v74 = v70 + 3;
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (!v76)
              (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 24))(v70);
          }
        }
        v69 -= 16;
      }
      while (v69 > __p);
    }
    if (a67 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x227AD5B0CLL);
}

void sub_227AD5AA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  JUMPOUT(0x227AD5B24);
}

void sub_227AD5AD8()
{
  JUMPOUT(0x227AD5B24);
}

void sub_227AD5AE8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x227AD5B40);
}

void radio::ARICommandDriver::reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *__p[2];
  char v8;
  CFTypeRef cf;
  __int128 block;
  void (*v11)(uint64_t);
  void *v12;
  void *aBlock;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "reset";
    _os_log_debug_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v8 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a3)
    v5 = _Block_copy(*(const void **)a3);
  else
    v5 = 0;
  v6 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v11 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v12 = &__block_descriptor_tmp_81;
  if (v5)
  {
    aBlock = _Block_copy(v5);
    v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v6, &block);
  if (v14)
    CFRelease(v14);
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD5D18(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AD5D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD5D40);
}

uint64_t radio::ARICommandDriver::powerOff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _DWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  _OWORD v35[4];
  void *__p;
  void *v37[2];
  uint64_t v38;
  void *v39;
  dispatch_object_t object;
  void *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  __int128 *v50;

  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[2] = v5;
  v35[3] = v5;
  v35[0] = v5;
  v35[1] = v5;
  AriSdk::ARI_CsiBspShutdownReq_SDK::ARI_CsiBspShutdownReq_SDK((AriSdk::ARI_CsiBspShutdownReq_SDK *)v35);
  v6 = operator new(4uLL);
  *v6 = 2;
  v7 = __p;
  __p = v6;
  if (v7)
    operator delete(v7);
  v9 = *(_QWORD *)(a1 + 312);
  v8 = *(std::__shared_weak_count **)(a1 + 320);
  v34 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*(_QWORD *)a3)
  {
    v12 = _Block_copy(*(const void **)a3);
    v13 = *(NSObject **)(a3 + 8);
    v32 = v12;
    v33 = v13;
    if (!v13)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = 0;
  v13 = *(NSObject **)(a3 + 8);
  v32 = 0;
  v33 = v13;
  if (v13)
LABEL_8:
    dispatch_retain(v13);
LABEL_9:
  v37[0] = (void *)0x776F642074756873;
  v37[1] = (void *)110;
  HIBYTE(v38) = 9;
  if (!v12)
  {
    v14 = 0;
    v39 = 0;
    object = v13;
    if (!v13)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = (std::__shared_weak_count_vtbl *)_Block_copy(v12);
  v39 = v14;
  object = v13;
  if (v13)
LABEL_11:
    dispatch_retain(v13);
LABEL_12:
  v15 = (std::__shared_weak_count *)operator new(0x40uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_24F037B10;
  v15[1].std::__shared_count = *(std::__shared_count *)v37;
  v37[0] = 0;
  v37[1] = 0;
  v15[1].__shared_weak_owners_ = v38;
  v15[2].__vftable = v14;
  v15[2].__shared_owners_ = (uint64_t)v13;
  v39 = 0;
  object = 0;
  v38 = 0;
  v17 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v42 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v42 + 1) = 1174405120;
  *(_QWORD *)&v43 = ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v43 + 1) = &__block_descriptor_tmp_82;
  v44 = (unint64_t)&v15[1];
  v45 = v15;
  do
    v18 = __ldxr(v16);
  while (__stxr(v18 + 1, v16));
  aBlock = v17;
  v47 = 0x40000000;
  v48 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v49 = &unk_24F037988;
  v50 = &v42;
  v19 = _Block_copy(&aBlock);
  v20 = v45;
  if (v45)
  {
    v21 = (unint64_t *)&v45->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(v16);
  while (__stlxr(v23 - 1, v16));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = v24;
  v43 = v24;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v25 = *(std::__shared_weak_count **)(v9 + 16);
  aBlock = *(_QWORD *)(v9 + 8);
  if (!v25)
  {
    v47 = 0;
LABEL_52:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v47 = (uint64_t)std::__shared_weak_count::lock(v25);
  if (!v47)
    goto LABEL_52;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v26 = (std::__shared_weak_count *)v47;
  if (v47)
  {
    v27 = (unint64_t *)(v47 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v41 = v19;
  ice::SendMsgBaseProxy::callback();
  if (v41)
    _Block_release(v41);
  MEMORY[0x22E2A2FF8](&v42);
  if (object)
    dispatch_release(object);
  if (v39)
    _Block_release(v39);
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
  if (v33)
    dispatch_release(v33);
  if (v32)
    _Block_release(v32);
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return MEMORY[0x22E2A33DC](v35);
}

void sub_227AD60E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock)
{
  uint64_t v28;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](v28 - 144);
  utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback((uint64_t)&a23);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x22E2A33DC](&a13);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::releaseResetDetect(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  __int128 block;
  void (*v10)(uint64_t);
  void *v11;
  void *aBlock;
  CFTypeRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "releaseResetDetect";
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a2)
    v4 = _Block_copy(*(const void **)a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v11 = &__block_descriptor_tmp_81;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v5, &block);
  if (v13)
    CFRelease(v13);
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD6340(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AD6378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD6368);
}

void radio::ARICommandDriver::eraseNonvol(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  __int128 block;
  void (*v10)(uint64_t);
  void *v11;
  void *aBlock;
  CFTypeRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "eraseNonvol";
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a2)
    v4 = _Block_copy(*(const void **)a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v11 = &__block_descriptor_tmp_81;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v5, &block);
  if (v13)
    CFRelease(v13);
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD6564(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AD659C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD658CLL);
}

void radio::ARICommandDriver::restoreNonvolDefaults(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  __int128 block;
  void (*v10)(uint64_t);
  void *v11;
  void *aBlock;
  CFTypeRef v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "restoreNonvolDefaults";
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a2)
    v4 = _Block_copy(*(const void **)a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v11 = &__block_descriptor_tmp_81;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v5, &block);
  if (v13)
    CFRelease(v13);
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD6788(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AD67C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD67B0);
}

void radio::ARICommandDriver::getBasebandTime(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband time", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_12_5;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  NSObject *object;
  _OWORD v30[2];
  unint64_t v31;
  _OWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const unsigned __int8 *);
  void *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  const void *aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[2] = v3;
  v32[3] = v3;
  v32[0] = v3;
  v32[1] = v3;
  AriSdk::ARI_CsiGetSystemTimeReq_SDK::ARI_CsiGetSystemTimeReq_SDK((AriSdk::ARI_CsiGetSystemTimeReq_SDK *)v32);
  v4 = *(_QWORD *)(v2 + 312);
  v6 = (std::__shared_weak_count_vtbl *)a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (const void *)a1[7];
  if (v9)
  {
    v10 = _Block_copy(v9);
    v11 = a1[8];
    v28 = v10;
    object = v11;
    if (!v11)
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = 0;
  v11 = a1[8];
  v28 = 0;
  object = v11;
  if (v11)
LABEL_6:
    dispatch_retain(v11);
LABEL_7:
  v12 = (std::__shared_weak_count *)operator new(0x40uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_24F037BC0;
  v12[1].__vftable = v6;
  v12[1].__shared_owners_ = (uint64_t)v5;
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (!v10)
  {
    v12[1].__shared_weak_owners_ = 0;
    v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
    if (!v11)
      goto LABEL_13;
    goto LABEL_12;
  }
  v12[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v10);
  v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
  if (v11)
LABEL_12:
    dispatch_retain(v11);
LABEL_13:
  v12[2].__shared_owners_ = v2;
  v16 = (const void *)MEMORY[0x24BDAC760];
  v33 = MEMORY[0x24BDAC760];
  v34 = 1174405120;
  v35 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v36 = &__block_descriptor_tmp_84;
  v37 = v12 + 1;
  v38 = v12;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  aBlock[0] = v16;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v33;
  v18 = _Block_copy(aBlock);
  v19 = v38;
  if (v38)
  {
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v23;
  v30[1] = v23;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v24 = *(std::__shared_weak_count **)(v4 + 16);
  v33 = *(_QWORD *)(v4 + 8);
  if (!v24)
  {
    v34 = 0;
LABEL_44:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v34 = (uint64_t)std::__shared_weak_count::lock(v24);
  if (!v34)
    goto LABEL_44;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v25 = (std::__shared_weak_count *)v34;
  if (v34)
  {
    v26 = (unint64_t *)(v34 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  aBlock[0] = v18;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v30);
  if (object)
    dispatch_release(object);
  if (v28)
    _Block_release(v28);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  AriSdk::ARI_CsiGetSystemTimeReq_SDK::~ARI_CsiGetSystemTimeReq_SDK((AriSdk::ARI_CsiGetSystemTimeReq_SDK *)v32);
}

void sub_227AD6C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = *(const void **)(v2 - 120);
  if (v4)
    _Block_release(v4);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb0_EN3__1D1Ev((uint64_t *)va);
  AriSdk::ARI_CsiGetSystemTimeReq_SDK::~ARI_CsiGetSystemTimeReq_SDK((AriSdk::ARI_CsiGetSystemTimeReq_SDK *)va2);
  _Unwind_Resume(a1);
}

void sub_227AD6C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  const void *v30;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v30)
    _Block_release(v30);
  _ZZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb0_EN3__1D1Ev(&a10);
  AriSdk::ARI_CsiGetSystemTimeReq_SDK::~ARI_CsiGetSystemTimeReq_SDK((AriSdk::ARI_CsiGetSystemTimeReq_SDK *)&a21);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb0_EN3__1D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void radio::ARICommandDriver::getBasebandStatus(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  __int128 block;
  void (*v10)(uint64_t);
  void *v11;
  void *aBlock;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "getBasebandStatus";
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a2)
    v4 = _Block_copy(*(const void **)a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  v11 = &__block_descriptor_tmp_89;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  v14 = 0;
  dispatch_async(v5, &block);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD6FB0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AD6FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD6FDCLL);
}

void radio::ARICommandDriver::getBasebandFWVersion(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_13_4;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v31;
  NSObject *object;
  _OWORD v33[2];
  unint64_t v34;
  _OWORD v35[4];
  void *__p;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const unsigned __int8 *);
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  const void *aBlock[5];

  v2 = a1[4];
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[2] = v3;
  v35[3] = v3;
  v35[0] = v3;
  v35[1] = v3;
  AriSdk::ARI_CsiSysGetInfoReqV2_SDK::ARI_CsiSysGetInfoReqV2_SDK((AriSdk::ARI_CsiSysGetInfoReqV2_SDK *)v35);
  v4 = operator new(4uLL);
  *v4 = 4;
  v5 = __p;
  __p = v4;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD *)(v2 + 312);
  v8 = (std::__shared_weak_count_vtbl *)a1[5];
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (const void *)a1[7];
  if (v11)
  {
    v12 = _Block_copy(v11);
    v13 = a1[8];
    v31 = v12;
    object = v13;
    if (!v13)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = 0;
  v13 = a1[8];
  v31 = 0;
  object = v13;
  if (v13)
LABEL_8:
    dispatch_retain(v13);
LABEL_9:
  v14 = (std::__shared_weak_count *)operator new(0x40uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)off_24F037C70;
  v14[1].__vftable = v8;
  v14[1].__shared_owners_ = (uint64_t)v7;
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (!v12)
  {
    v14[1].__shared_weak_owners_ = 0;
    v14[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
    if (!v13)
      goto LABEL_15;
    goto LABEL_14;
  }
  v14[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v12);
  v14[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
  if (v13)
LABEL_14:
    dispatch_retain(v13);
LABEL_15:
  v14[2].__shared_owners_ = v2;
  v18 = (const void *)MEMORY[0x24BDAC760];
  v37 = MEMORY[0x24BDAC760];
  v38 = 1174405120;
  v39 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v40 = &__block_descriptor_tmp_90;
  v41 = v14 + 1;
  v42 = v14;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  aBlock[0] = v18;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v37;
  v20 = _Block_copy(aBlock);
  v21 = v42;
  if (v42)
  {
    v22 = (unint64_t *)&v42->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[0] = v25;
  v33[1] = v25;
  v34 = 0xAAAAAAAAAAAAAAAALL;
  v26 = *(std::__shared_weak_count **)(v6 + 16);
  v37 = *(_QWORD *)(v6 + 8);
  if (!v26)
  {
    v38 = 0;
LABEL_46:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v38 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v38)
    goto LABEL_46;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v27 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v28 = (unint64_t *)(v38 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  aBlock[0] = v20;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v33);
  if (object)
    dispatch_release(object);
  if (v31)
    _Block_release(v31);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return MEMORY[0x22E2A3550](v35);
}

void sub_227AD745C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = *(const void **)(v2 - 120);
  if (v4)
    _Block_release(v4);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EN3__2D1Ev((uint64_t *)va);
  MEMORY[0x22E2A3550](va2);
  _Unwind_Resume(a1);
}

void sub_227AD7490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  const void *v30;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v30)
    _Block_release(v30);
  _ZZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EN3__2D1Ev(&a10);
  MEMORY[0x22E2A3550](&a21);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EN3__2D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void radio::ARICommandDriver::getFactoryCalibrationStatus(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  __int128 buf;
  void (*v10)(uint64_t);
  void *v11;
  void *aBlock;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "getFactoryCalibrationStatus";
    _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&buf, 0xCu);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a2)
    v4 = _Block_copy(*(const void **)a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&buf = MEMORY[0x24BDAC760];
  *((_QWORD *)&buf + 1) = 1174405120;
  v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  v11 = &__block_descriptor_tmp_89;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  v14 = 0;
  dispatch_async(v5, &buf);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD7724(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AD7760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AD7750);
}

void radio::ARICommandDriver::getRFCalibrationStatus(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_14_6;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  NSObject *object;
  _OWORD v30[2];
  unint64_t v31;
  _OWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const unsigned __int8 *);
  void *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  const void *aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[2] = v3;
  v32[3] = v3;
  v32[0] = v3;
  v32[1] = v3;
  AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::ARI_CsiBspGetCalibrationStatusReq_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *)v32);
  v4 = *(_QWORD *)(v2 + 312);
  v6 = (std::__shared_weak_count_vtbl *)a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (const void *)a1[7];
  if (v9)
  {
    v10 = _Block_copy(v9);
    v11 = a1[8];
    v28 = v10;
    object = v11;
    if (!v11)
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = 0;
  v11 = a1[8];
  v28 = 0;
  object = v11;
  if (v11)
LABEL_6:
    dispatch_retain(v11);
LABEL_7:
  v12 = (std::__shared_weak_count *)operator new(0x38uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_24F037CF0;
  v12[1].__vftable = v6;
  v12[1].__shared_owners_ = (uint64_t)v5;
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (!v10)
  {
    v12[1].__shared_weak_owners_ = 0;
    v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
    if (!v11)
      goto LABEL_13;
    goto LABEL_12;
  }
  v12[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v10);
  v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
  if (v11)
LABEL_12:
    dispatch_retain(v11);
LABEL_13:
  v16 = (const void *)MEMORY[0x24BDAC760];
  v33 = MEMORY[0x24BDAC760];
  v34 = 1174405120;
  v35 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v36 = &__block_descriptor_tmp_92;
  v37 = v12 + 1;
  v38 = v12;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  aBlock[0] = v16;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v33;
  v18 = _Block_copy(aBlock);
  v19 = v38;
  if (v38)
  {
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v23;
  v30[1] = v23;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v24 = *(std::__shared_weak_count **)(v4 + 16);
  v33 = *(_QWORD *)(v4 + 8);
  if (!v24)
  {
    v34 = 0;
LABEL_44:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v34 = (uint64_t)std::__shared_weak_count::lock(v24);
  if (!v34)
    goto LABEL_44;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v25 = (std::__shared_weak_count *)v34;
  if (v34)
  {
    v26 = (unint64_t *)(v34 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  aBlock[0] = v18;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v30);
  if (object)
    dispatch_release(object);
  if (v28)
    _Block_release(v28);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::~ARI_CsiBspGetCalibrationStatusReq_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *)v32);
}

void sub_227AD7B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  const void *v21;

  v21 = *(const void **)(v19 - 120);
  if (v21)
    _Block_release(v21);
  MEMORY[0x22E2A2FF8](&a13);
  _ZZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb2_EN3__3D1Ev(&a9);
  AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::~ARI_CsiBspGetCalibrationStatusReq_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *)&a19);
  _Unwind_Resume(a1);
}

void sub_227AD7BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  const void *v28;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (v28)
    _Block_release(v28);
  _ZZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb2_EN3__3D1Ev(&a9);
  AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::~ARI_CsiBspGetCalibrationStatusReq_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *)&a19);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb2_EN3__3D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void radio::ARICommandDriver::getWakeReason(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v17[3] = &__block_descriptor_tmp_15_1;
  v17[4] = a1;
  v17[5] = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a2 + 8);
  aBlock = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v17);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  NSObject *object;
  _OWORD v31[2];
  unint64_t v32;
  uint8_t buf[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const unsigned __int8 *);
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  const void *aBlock[5];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v4;
  v36 = v4;
  *(_OWORD *)buf = v4;
  v34 = v4;
  AriSdk::ARI_CsiIceWakeupReasonReq_SDK::ARI_CsiIceWakeupReasonReq_SDK((AriSdk::ARI_CsiIceWakeupReasonReq_SDK *)buf);
  v5 = *(_QWORD *)(v2 + 312);
  v7 = (std::__shared_weak_count_vtbl *)a1[5];
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (const void *)a1[7];
  if (v10)
  {
    v11 = _Block_copy(v10);
    v12 = a1[8];
    v29 = v11;
    object = v12;
    if (!v12)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = 0;
  v12 = a1[8];
  v29 = 0;
  object = v12;
  if (v12)
LABEL_8:
    dispatch_retain(v12);
LABEL_9:
  v13 = (std::__shared_weak_count *)operator new(0x38uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F037D70;
  v13[1].__vftable = v7;
  v13[1].__shared_owners_ = (uint64_t)v6;
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (!v11)
  {
    v13[1].__shared_weak_owners_ = 0;
    v13[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  v13[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v11);
  v13[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
  if (v12)
LABEL_14:
    dispatch_retain(v12);
LABEL_15:
  v17 = (const void *)MEMORY[0x24BDAC760];
  v37 = MEMORY[0x24BDAC760];
  v38 = 1174405120;
  v39 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb3_E3__4vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v40 = &__block_descriptor_tmp_96;
  v41 = v13 + 1;
  v42 = v13;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  aBlock[0] = v17;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v37;
  v19 = _Block_copy(aBlock);
  v20 = v42;
  if (v42)
  {
    v21 = (unint64_t *)&v42->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v24;
  v31[1] = v24;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v25 = *(std::__shared_weak_count **)(v5 + 16);
  v37 = *(_QWORD *)(v5 + 8);
  if (!v25)
  {
    v38 = 0;
LABEL_46:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v38 = (uint64_t)std::__shared_weak_count::lock(v25);
  if (!v38)
    goto LABEL_46;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v26 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v27 = (unint64_t *)(v38 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  if (object)
    dispatch_release(object);
  if (v29)
    _Block_release(v29);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  AriSdk::ARI_CsiIceWakeupReasonReq_SDK::~ARI_CsiIceWakeupReasonReq_SDK((AriSdk::ARI_CsiIceWakeupReasonReq_SDK *)buf);
}

void sub_227AD80D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  const void *v21;

  v21 = *(const void **)(v19 - 120);
  if (v21)
    _Block_release(v21);
  MEMORY[0x22E2A2FF8](&a13);
  _ZZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb3_EN3__4D1Ev(&a9);
  AriSdk::ARI_CsiIceWakeupReasonReq_SDK::~ARI_CsiIceWakeupReasonReq_SDK((AriSdk::ARI_CsiIceWakeupReasonReq_SDK *)&a19);
  _Unwind_Resume(a1);
}

void sub_227AD8104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  const void *v28;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (v28)
    _Block_release(v28);
  _ZZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb3_EN3__4D1Ev(&a9);
  AriSdk::ARI_CsiIceWakeupReasonReq_SDK::~ARI_CsiIceWakeupReasonReq_SDK((AriSdk::ARI_CsiIceWakeupReasonReq_SDK *)&a19);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb3_EN3__4D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void radio::ARICommandDriver::setOperatingMode(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  unint64_t v20;
  _QWORD v21[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  char v27;

  v8 = *(_QWORD *)(a1 + 72);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  v7 = (uint64_t *)(a1 + 72);
  if (!v6 || (v12 = std::__shared_weak_count::lock(v6)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 1174405120;
  v21[2] = ___ZN5radio16ARICommandDriver16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_17_2;
  v21[4] = a1;
  v27 = a3;
  v18 = *(void **)a4;
  if (*(_QWORD *)a4)
    v18 = _Block_copy(v18);
  v19 = *(NSObject **)(a4 + 8);
  aBlock = v18;
  object = v19;
  if (v19)
    dispatch_retain(v19);
  v24 = a2;
  v25 = v8;
  v26 = v13;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v7, (uint64_t)v21);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  std::__shared_weak_count::__release_weak(v13);
}

void ___ZN5radio16ARICommandDriver16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  const void *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  _DWORD *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  void *v38;
  CFTypeRef v39;
  void *aBlock;
  NSObject *object;
  _OWORD v42[2];
  unint64_t v43;
  __int128 block;
  __int128 v45;
  CFTypeRef v46[2];
  __int128 v47;
  void *__p;
  void *v49[3];
  CFTypeRef cf;
  void **v51;
  uint64_t v52;
  void (*v53)(uint64_t, const unsigned __int8 *);
  void *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  _BYTE buf[24];
  void *v58;
  void ***v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + 80) >= 8u)
  {
    strcpy((char *)v49, "Invalid operating mode");
    HIBYTE(v49[2]) = 22;
    CreateError();
    v2 = *(const void **)(a1 + 40);
    if (v2)
      v3 = _Block_copy(v2);
    else
      v3 = 0;
    v37 = *(NSObject **)(a1 + 48);
    *(_QWORD *)&block = MEMORY[0x24BDAC760];
    *((_QWORD *)&block + 1) = 1174405120;
    *(_QWORD *)&v45 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((_QWORD *)&v45 + 1) = &__block_descriptor_tmp_81;
    if (v3)
    {
      v38 = _Block_copy(v3);
      v39 = cf;
      v46[0] = v38;
      v46[1] = cf;
      if (!cf)
        goto LABEL_59;
    }
    else
    {
      v39 = cf;
      v46[0] = 0;
      v46[1] = cf;
      if (!cf)
      {
LABEL_59:
        dispatch_async(v37, &block);
        if (v46[1])
          CFRelease(v46[1]);
        if (v46[0])
          _Block_release(v46[0]);
        if (v3)
          _Block_release(v3);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v49[2]) < 0)
          operator delete(v49[0]);
        return;
      }
    }
    CFRetain(v39);
    goto LABEL_59;
  }
  v4 = *(_QWORD *)(a1 + 32);
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v46 = v5;
  v47 = v5;
  block = v5;
  v45 = v5;
  AriSdk::ARI_CsiModeSetReq_SDK::ARI_CsiModeSetReq_SDK((AriSdk::ARI_CsiModeSetReq_SDK *)&block);
  v6 = radio::OpMode::convertMode();
  v7 = operator new(4uLL);
  *v7 = v6;
  v8 = __p;
  __p = v7;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD *)(a1 + 56);
  if (v9 >= 0xDF8475800)
    v10 = v9 / 0xF4240;
  else
    v10 = 60000;
  HIDWORD(v45) = v10;
  v11 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::modeToString();
    v12 = SHIBYTE(v53) >= 0 ? (void **)&v51 : v51;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl(&dword_227A72000, v11, OS_LOG_TYPE_DEFAULT, "#I Requesting operating mode change to %{public}s, with timeout %llu ms", buf, 0x16u);
    if (SHIBYTE(v53) < 0)
      operator delete(v51);
  }
  v13 = *(_QWORD *)(v4 + 312);
  v15 = *(std::__shared_weak_count_vtbl **)(a1 + 64);
  v14 = *(std::__shared_weak_count **)(a1 + 72);
  if (v14)
  {
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
  }
  v18 = *(const void **)(a1 + 40);
  if (v18)
  {
    v19 = _Block_copy(v18);
    v20 = *(NSObject **)(a1 + 48);
    aBlock = v19;
    object = v20;
    if (!v20)
      goto LABEL_21;
    goto LABEL_20;
  }
  v19 = 0;
  v20 = *(NSObject **)(a1 + 48);
  aBlock = 0;
  object = v20;
  if (v20)
LABEL_20:
    dispatch_retain(v20);
LABEL_21:
  v21 = (std::__shared_weak_count *)operator new(0x38uLL);
  v21->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F037DF0;
  v21[1].__vftable = v15;
  v21[1].__shared_owners_ = (uint64_t)v14;
  if (v14)
  {
    v23 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (!v19)
  {
    v21[1].__shared_weak_owners_ = 0;
    v21[2].__vftable = (std::__shared_weak_count_vtbl *)v20;
    if (!v20)
      goto LABEL_27;
    goto LABEL_26;
  }
  v21[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v19);
  v21[2].__vftable = (std::__shared_weak_count_vtbl *)v20;
  if (v20)
LABEL_26:
    dispatch_retain(v20);
LABEL_27:
  v25 = MEMORY[0x24BDAC760];
  v51 = (void **)MEMORY[0x24BDAC760];
  v52 = 1174405120;
  v53 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16setOperatingModeEyNS2_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v54 = &__block_descriptor_tmp_100;
  v55 = v21 + 1;
  v56 = v21;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  *(_QWORD *)buf = v25;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v58 = &unk_24F037988;
  v59 = &v51;
  v27 = _Block_copy(buf);
  v28 = v56;
  if (v56)
  {
    v29 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[0] = v32;
  v42[1] = v32;
  v43 = 0xAAAAAAAAAAAAAAAALL;
  v33 = *(std::__shared_weak_count **)(v13 + 16);
  v51 = *(void ***)(v13 + 8);
  if (!v33)
  {
    v52 = 0;
LABEL_75:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v52 = (uint64_t)std::__shared_weak_count::lock(v33);
  if (!v52)
    goto LABEL_75;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v34 = (std::__shared_weak_count *)v52;
  if (v52)
  {
    v35 = (unint64_t *)(v52 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *(_QWORD *)buf = v27;
  ice::SendMsgBaseProxy::callback();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
  MEMORY[0x22E2A2FF8](v42);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  MEMORY[0x22E2A3190](&block);
}

_QWORD *_ZZZN5radio16ARICommandDriver16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_EN3__5D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a2[9];
  a1[8] = a2[8];
  a1[9] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[6];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    _Block_release(v4);
}

void radio::ARICommandDriver::forceOperatingMode(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;

  if (*(_QWORD *)a4)
  {
    v8 = _Block_copy(*(const void **)a4);
    v9 = *(NSObject **)(a4 + 8);
    v10 = v8;
    v11 = v9;
    if (!v9)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = 0;
  v9 = *(NSObject **)(a4 + 8);
  v10 = 0;
  v11 = v9;
  if (v9)
LABEL_3:
    dispatch_retain(v9);
LABEL_4:
  radio::ARICommandDriver::setOperatingMode(a1, a2, a3, (uint64_t)&v10);
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
}

void sub_227AD8A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  NSObject *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  NSObject *object;
  _OWORD v31[2];
  unint64_t v32;
  _OWORD v33[4];
  uint8_t buf[8];
  uint64_t v35;
  void (*v36)(uint64_t, const unsigned __int8 *);
  void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const void *aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v3;
  v33[3] = v3;
  v33[0] = v3;
  v33[1] = v3;
  AriSdk::ARI_CsiModeGetReq_SDK::ARI_CsiModeGetReq_SDK((AriSdk::ARI_CsiModeGetReq_SDK *)v33);
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting operating mode", buf, 2u);
  }
  v5 = *(_QWORD *)(v2 + 312);
  v7 = (std::__shared_weak_count_vtbl *)a1[5];
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (const void *)a1[7];
  if (v10)
  {
    v11 = _Block_copy(v10);
    v12 = a1[8];
    v29 = v11;
    object = v12;
    if (!v12)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = 0;
  v12 = a1[8];
  v29 = 0;
  object = v12;
  if (v12)
LABEL_8:
    dispatch_retain(v12);
LABEL_9:
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F037E70;
  v13[1].__vftable = v7;
  v13[1].__shared_owners_ = (uint64_t)v6;
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (!v11)
  {
    v13[1].__shared_weak_owners_ = 0;
    v13[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  v13[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v11);
  v13[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
  if (v12)
LABEL_14:
    dispatch_retain(v12);
LABEL_15:
  v13[2].__shared_owners_ = v2;
  v17 = (const void *)MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v35 = 1174405120;
  v36 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb5_E3__6vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v37 = &__block_descriptor_tmp_102;
  v38 = v13 + 1;
  v39 = v13;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  aBlock[0] = v17;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = buf;
  v19 = _Block_copy(aBlock);
  v20 = v39;
  if (v39)
  {
    v21 = (unint64_t *)&v39->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v24;
  v31[1] = v24;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v25 = *(std::__shared_weak_count **)(v5 + 16);
  *(_QWORD *)buf = *(_QWORD *)(v5 + 8);
  if (!v25)
  {
    v35 = 0;
LABEL_46:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v35 = (uint64_t)std::__shared_weak_count::lock(v25);
  if (!v35)
    goto LABEL_46;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v26 = (std::__shared_weak_count *)v35;
  if (v35)
  {
    v27 = (unint64_t *)(v35 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  if (object)
    dispatch_release(object);
  if (v29)
    _Block_release(v29);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  AriSdk::ARI_CsiModeGetReq_SDK::~ARI_CsiModeGetReq_SDK((AriSdk::ARI_CsiModeGetReq_SDK *)v33);
}

void sub_227AD8DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = *(const void **)(v2 - 120);
  if (v4)
    _Block_release(v4);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  _ZZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb5_EN3__6D1Ev((uint64_t *)va);
  AriSdk::ARI_CsiModeGetReq_SDK::~ARI_CsiModeGetReq_SDK((AriSdk::ARI_CsiModeGetReq_SDK *)va2);
  _Unwind_Resume(a1);
}

void sub_227AD8DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  const void *v29;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (v29)
    _Block_release(v29);
  _ZZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb5_EN3__6D1Ev(&a10);
  AriSdk::ARI_CsiModeGetReq_SDK::~ARI_CsiModeGetReq_SDK((AriSdk::ARI_CsiModeGetReq_SDK *)&a21);
  _Unwind_Resume(a1);
}

_QWORD *_ZZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb5_EN3__6D1Ev(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[2];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void radio::ARICommandDriver::getResetProperties(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;
  CFTypeRef v12;

  v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(block[0]) = 0;
    _os_log_debug_impl(&dword_227A72000, v3, OS_LOG_TYPE_DEBUG, "#D not supported!", (uint8_t *)block, 2u);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a2)
    v4 = _Block_copy(*(const void **)a2);
  else
    v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  block[3] = &__block_descriptor_tmp_89;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  v12 = 0;
  dispatch_async(v5, block);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD9068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::sendBatteryInfoUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *__p[2];
  char v9;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v13;

  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(block[0]) = 0;
    _os_log_debug_impl(&dword_227A72000, v5, OS_LOG_TYPE_DEBUG, "#D not supported!", (uint8_t *)block, 2u);
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v9 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(_QWORD *)a4)
    v6 = _Block_copy(*(const void **)a4);
  else
    v6 = 0;
  v7 = *(NSObject **)(a4 + 8);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  block[3] = &__block_descriptor_tmp_81;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlock = 0;
    v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v7, block);
  if (v13)
    CFRelease(v13);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_227AD9238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(std::__shared_weak_count_vtbl *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *on_zero_shared_weak;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _DWORD *v15;
  void *v16;
  void (__cdecl *v17)(std::__shared_weak_count *__hidden);
  void *v18;
  NSObject *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  const void *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD v35[2];
  unint64_t v36;
  _OWORD v37[4];
  void *__p;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, const unsigned __int8 *);
  void *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  const void *aBlock[6];

  v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[2] = v14;
  v37[3] = v14;
  v37[0] = v14;
  v37[1] = v14;
  AriSdk::ARI_CsiIceGetRxDiversityReq_SDK::ARI_CsiIceGetRxDiversityReq_SDK((AriSdk::ARI_CsiIceGetRxDiversityReq_SDK *)v37);
  v15 = operator new(4uLL);
  *v15 = a2;
  v16 = __p;
  __p = v15;
  if (v16)
    operator delete(v16);
  v17 = a1[7].__on_zero_shared_weak;
  if (*(_QWORD *)a3)
  {
    v18 = _Block_copy(*(const void **)a3);
    v19 = *(NSObject **)(a3 + 8);
    if (!v19)
      goto LABEL_14;
    goto LABEL_13;
  }
  v18 = 0;
  v19 = *(NSObject **)(a3 + 8);
  if (v19)
  {
LABEL_13:
    dispatch_retain(v19);
    goto LABEL_14;
  }
  do
LABEL_14:
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v21->__shared_owners_ = 0u;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F037EF0;
  v21[1].__vftable = a1;
  v21[1].__shared_owners_ = (uint64_t)v18;
  v21[1].__shared_weak_owners_ = (uint64_t)v19;
  v21[2].__vftable = on_zero_shared_weak;
  v21[2].__shared_owners_ = (uint64_t)v9;
  LODWORD(v21[2].__shared_weak_owners_) = a2;
  v23 = (const void *)MEMORY[0x24BDAC760];
  v39 = MEMORY[0x24BDAC760];
  v40 = 1174405120;
  v41 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v42 = &__block_descriptor_tmp_104;
  v43 = v21 + 1;
  v44 = v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  aBlock[0] = v23;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v39;
  v25 = _Block_copy(aBlock);
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(v22);
  while (__stlxr(v29 - 1, v22));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v30;
  v35[1] = v30;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v31 = (std::__shared_weak_count *)*((_QWORD *)v17 + 2);
  v39 = *((_QWORD *)v17 + 1);
  if (!v31)
  {
    v40 = 0;
LABEL_39:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v31);
  if (!v40)
    goto LABEL_39;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v32 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v33 = (unint64_t *)(v40 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  aBlock[0] = v25;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v35);
  MEMORY[0x22E2A3BBC](v37);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227AD9598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  const void *v24;

  v24 = *(const void **)(v22 - 128);
  if (v24)
    _Block_release(v24);
  MEMORY[0x22E2A2FF8](&a15);
  radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(&a9);
  MEMORY[0x22E2A3BBC](&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

_QWORD *radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[1];
  if (v4)
    _Block_release(v4);
  return a1;
}

void radio::ARICommandDriver::getRxDiversityState_sync(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[5];
  void *v14;
  NSObject *v15;
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[5];
  void *v21;
  dispatch_object_t object;

  v4 = dispatch_group_create();
  v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3802000000;
  v20[3] = __Block_byref_object_copy__0;
  v20[4] = __Block_byref_object_dispose__0;
  v21 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a2 + 8);
  v21 = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = MEMORY[0x24BDAC760];
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_24F0370D0;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  aBlock[4] = v20;
  v9 = _Block_copy(aBlock);
  v10 = *(NSObject **)(a1 + 88);
  if (v10)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v18 = (unint64_t)v9;
  v19 = (unint64_t)v10;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v14 = v11;
    v15 = v10;
    if (!v10)
      goto LABEL_14;
    goto LABEL_13;
  }
  v11 = 0;
  v14 = 0;
  v15 = v10;
  if (v10)
LABEL_13:
    dispatch_retain(v10);
LABEL_14:
  radio::ARICommandDriver::getRxDiversityStateWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 1, (uint64_t)&v14);
  if (v10)
    dispatch_release(v10);
  if (v11)
    _Block_release(v11);
  v12 = *(NSObject **)(a1 + 88);
  v13[0] = v8;
  v13[1] = 0x40000000;
  v13[2] = ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_21;
  v13[3] = &unk_24F037108;
  v13[4] = v20;
  dispatch_group_notify(v5, v12, v13);
  if (v10)
    dispatch_release(v10);
  if (v9)
    _Block_release(v9);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v20, 8);
  if (object)
    dispatch_release(object);
  if (v21)
    _Block_release(v21);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
    dispatch_release(v5);
  }
}

void sub_227AD98C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,char a22,uint64_t a23,char a24)
{
  NSObject *v24;
  uint64_t v25;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a22);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(&a24, 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25);
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
    dispatch_release(v24);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  const void *v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v17;
  CFTypeRef cf;

  v3 = *a2;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_QWORD *)(v6 + 40))
    {
      if (*(_QWORD *)(v6 + 48))
      {
        if (v3)
          CFRetain(*a2);
        v8 = *a3;
        if (v8)
          CFRetain(v8);
        v9 = *(const void **)(v6 + 40);
        if (v9)
          v10 = _Block_copy(v9);
        else
          v10 = 0;
        v11 = *(NSObject **)(v6 + 48);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
        block[3] = &__block_descriptor_tmp_89;
        if (v10)
        {
          aBlock = _Block_copy(v10);
          v17 = v3;
          if (!v3)
            goto LABEL_18;
        }
        else
        {
          aBlock = 0;
          v17 = v3;
          if (!v3)
          {
LABEL_18:
            cf = v8;
            if (v8)
              CFRetain(v8);
            dispatch_async(v11, block);
            if (cf)
              CFRelease(cf);
            if (v17)
              CFRelease(v17);
            if (aBlock)
              _Block_release(aBlock);
            if (v10)
              _Block_release(v10);
            if (v8)
              CFRelease(v8);
            if (v3)
              CFRelease(v3);
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v13 = *(const void **)(v12 + 40);
            *(_QWORD *)(v12 + 40) = 0;
            if (v13)
              _Block_release(v13);
            v14 = *(NSObject **)(v12 + 48);
            *(_QWORD *)(v12 + 48) = 0;
            if (v14)
              dispatch_release(v14);
            return;
          }
        }
        CFRetain(v3);
        goto LABEL_18;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_21(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  void *v6;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v9;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (v2 && *(_QWORD *)(v1 + 48))
  {
    v3 = _Block_copy(v2);
    v4 = v3;
    v5 = *(NSObject **)(v1 + 48);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_89;
    if (v3)
      v6 = _Block_copy(v3);
    else
      v6 = 0;
    v9 = 0;
    cf = 0;
    aBlock = v6;
    dispatch_async(v5, block);
    if (cf)
      CFRelease(cf);
    if (v9)
      CFRelease(v9);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
  }
}

void radio::ARICommandDriver::getAntennaTxPort(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  void *v6;
  NSObject *v7;
  CFTypeRef v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  if (*(_QWORD *)a2)
  {
    v6 = _Block_copy(*(const void **)a2);
    v7 = *(NSObject **)(a2 + 8);
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  if (v7)
LABEL_3:
    dispatch_retain(v7);
LABEL_4:
  v8 = *a3;
  if (*a3)
    CFRetain(*a3);
  v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new(0x20uLL);
  *v13 = a1;
  v13[1] = v6;
  v13[2] = v7;
  v13[3] = v8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v15 = a1[11];
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v13;
  v17[1] = v10;
  v17[2] = v12;
  dispatch_async_f(v15, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void radio::ARICommandDriver::getAntennaTxPort_sync(_QWORD *a1, uint64_t a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  int Bool;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  const void *v24;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _OWORD v36[2];
  unint64_t v37;
  _QWORD v38[2];
  _OWORD v39[4];
  void *__p;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, const unsigned __int8 *);
  void *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  const void *aBlock[5];

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = (std::__shared_weak_count_vtbl *)a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39[2] = v14;
  v39[3] = v14;
  v39[0] = v14;
  v39[1] = v14;
  AriSdk::ARI_CsiIceGetTxAntennaReq_SDK::ARI_CsiIceGetTxAntennaReq_SDK((AriSdk::ARI_CsiIceGetTxAntennaReq_SDK *)v39);
  v38[0] = 0xAAAAAAAAAAAAAAAALL;
  v38[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v38, *a3);
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v38, (const __CFString *)*MEMORY[0x24BED38D0]);
  v16 = operator new(4uLL);
  *v16 = Bool;
  v17 = __p;
  __p = v16;
  if (v17)
    operator delete(v17);
  v18 = a1[39];
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a2)
  {
    v20 = 0;
    v21 = *(NSObject **)(a2 + 8);
    if (!v21)
      goto LABEL_16;
    goto LABEL_15;
  }
  v20 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a2);
  v21 = *(NSObject **)(a2 + 8);
  if (v21)
LABEL_15:
    dispatch_retain(v21);
LABEL_16:
  v22 = (std::__shared_weak_count *)operator new(0x40uLL);
  v22->__shared_owners_ = 0;
  v23 = (unint64_t *)&v22->__shared_owners_;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_24F037F70;
  v22[1].__vftable = v7;
  v22[1].__shared_owners_ = (uint64_t)v9;
  v22[1].__shared_weak_owners_ = (uint64_t)a1;
  v22[2].__vftable = v20;
  v22[2].__shared_owners_ = (uint64_t)v21;
  v24 = (const void *)MEMORY[0x24BDAC760];
  v41 = MEMORY[0x24BDAC760];
  v42 = 1174405120;
  v43 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEESD_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v44 = &__block_descriptor_tmp_111;
  v45 = v22 + 1;
  v46 = v22;
  do
    v25 = __ldxr(v23);
  while (__stxr(v25 + 1, v23));
  aBlock[0] = v24;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v41;
  v26 = _Block_copy(aBlock);
  v27 = v46;
  if (v46)
  {
    v28 = (unint64_t *)&v46->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  do
    v30 = __ldaxr(v23);
  while (__stlxr(v30 - 1, v23));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v31;
  v36[1] = v31;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v32 = *(std::__shared_weak_count **)(v18 + 16);
  v41 = *(_QWORD *)(v18 + 8);
  if (!v32)
  {
    v42 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v42 = (uint64_t)std::__shared_weak_count::lock(v32);
  if (!v42)
    goto LABEL_40;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v33 = (std::__shared_weak_count *)v42;
  if (v42)
  {
    v34 = (unint64_t *)(v42 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  aBlock[0] = v26;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v36);
  MEMORY[0x22E2A2E9C](v38);
  MEMORY[0x22E2A38EC](v39);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227ADA0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  const void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;
  uint64_t v21;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  v5 = *(const void **)(v3 - 120);
  if (v5)
    _Block_release(v5);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::~$_0((uint64_t *)va);
  MEMORY[0x22E2A2E9C]((uint64_t *)va2);
  MEMORY[0x22E2A38EC](va3);
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

_QWORD *radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[4];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[3];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void radio::ARICommandDriver::getARTDWithRAT_sync(std::__shared_weak_count_vtbl *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *on_zero_shared_weak;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _DWORD *v15;
  void *v16;
  void (__cdecl *v17)(std::__shared_weak_count *__hidden);
  void *v18;
  NSObject *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  const void *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD v35[2];
  unint64_t v36;
  _OWORD v37[4];
  void *__p;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, const unsigned __int8 *);
  void *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  const void *aBlock[6];

  v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[2] = v14;
  v37[3] = v14;
  v37[0] = v14;
  v37[1] = v14;
  AriSdk::ARI_CsiIceGetArtdSettingReq_SDK::ARI_CsiIceGetArtdSettingReq_SDK((AriSdk::ARI_CsiIceGetArtdSettingReq_SDK *)v37);
  v15 = operator new(4uLL);
  *v15 = a2;
  v16 = __p;
  __p = v15;
  if (v16)
    operator delete(v16);
  v17 = a1[7].__on_zero_shared_weak;
  if (*(_QWORD *)a3)
  {
    v18 = _Block_copy(*(const void **)a3);
    v19 = *(NSObject **)(a3 + 8);
    if (!v19)
      goto LABEL_14;
    goto LABEL_13;
  }
  v18 = 0;
  v19 = *(NSObject **)(a3 + 8);
  if (v19)
  {
LABEL_13:
    dispatch_retain(v19);
    goto LABEL_14;
  }
  do
LABEL_14:
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v21->__shared_owners_ = 0u;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F037FF0;
  v21[1].__vftable = a1;
  v21[1].__shared_owners_ = (uint64_t)v18;
  v21[1].__shared_weak_owners_ = (uint64_t)v19;
  v21[2].__vftable = on_zero_shared_weak;
  v21[2].__shared_owners_ = (uint64_t)v9;
  LODWORD(v21[2].__shared_weak_owners_) = a2;
  v23 = (const void *)MEMORY[0x24BDAC760];
  v39 = MEMORY[0x24BDAC760];
  v40 = 1174405120;
  v41 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v42 = &__block_descriptor_tmp_115;
  v43 = v21 + 1;
  v44 = v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  aBlock[0] = v23;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v39;
  v25 = _Block_copy(aBlock);
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(v22);
  while (__stlxr(v29 - 1, v22));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v30;
  v35[1] = v30;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v31 = (std::__shared_weak_count *)*((_QWORD *)v17 + 2);
  v39 = *((_QWORD *)v17 + 1);
  if (!v31)
  {
    v40 = 0;
LABEL_39:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v31);
  if (!v40)
    goto LABEL_39;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v32 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v33 = (unint64_t *)(v40 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  aBlock[0] = v25;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v35);
  MEMORY[0x22E2A3BA4](v37);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227ADA4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  const void *v24;

  v24 = *(const void **)(v22 - 128);
  if (v24)
    _Block_release(v24);
  MEMORY[0x22E2A2FF8](&a15);
  radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(&a9);
  MEMORY[0x22E2A3BA4](&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

_QWORD *radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[1];
  if (v4)
    _Block_release(v4);
  return a1;
}

void radio::ARICommandDriver::getARTD_sync(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[5];
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[5];
  const void *v30;
  dispatch_object_t v31;

  v4 = dispatch_group_create();
  v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3802000000;
  v29[3] = __Block_byref_object_copy__0;
  v29[4] = __Block_byref_object_dispose__0;
  v30 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v31 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a2 + 8);
  v30 = v6;
  v31 = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = MEMORY[0x24BDAC760];
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v28 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_24F037130;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  aBlock[4] = v29;
  v9 = _Block_copy(aBlock);
  v10 = *(NSObject **)(a1 + 88);
  if (v10)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v27 = (unint64_t)v9;
  v28 = (unint64_t)v10;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v23 = v11;
    v24 = v10;
    if (!v10)
      goto LABEL_14;
    goto LABEL_13;
  }
  v11 = 0;
  v23 = 0;
  v24 = v10;
  if (v10)
LABEL_13:
    dispatch_retain(v10);
LABEL_14:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 1, (uint64_t)&v23);
  if (v10)
    dispatch_release(v10);
  if (v11)
    _Block_release(v11);
  if (v9)
  {
    v12 = _Block_copy(v9);
    v21 = v12;
    v22 = v10;
    if (!v10)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = 0;
  v21 = 0;
  v22 = v10;
  if (v10)
LABEL_20:
    dispatch_retain(v10);
LABEL_21:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 2, (uint64_t)&v21);
  if (v10)
    dispatch_release(v10);
  if (v12)
    _Block_release(v12);
  if (v9)
  {
    v13 = _Block_copy(v9);
    v19 = v13;
    v20 = v10;
    if (!v10)
      goto LABEL_28;
    goto LABEL_27;
  }
  v13 = 0;
  v19 = 0;
  v20 = v10;
  if (v10)
LABEL_27:
    dispatch_retain(v10);
LABEL_28:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 3, (uint64_t)&v19);
  if (v10)
    dispatch_release(v10);
  if (v13)
    _Block_release(v13);
  if (v9)
  {
    v14 = _Block_copy(v9);
    v17 = v14;
    v18 = v10;
    if (!v10)
      goto LABEL_35;
    goto LABEL_34;
  }
  v14 = 0;
  v17 = 0;
  v18 = v10;
  if (v10)
LABEL_34:
    dispatch_retain(v10);
LABEL_35:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 0, (uint64_t)&v17);
  if (v10)
    dispatch_release(v10);
  if (v14)
    _Block_release(v14);
  v15 = *(NSObject **)(a1 + 88);
  v16[0] = v8;
  v16[1] = 0x40000000;
  v16[2] = ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_24;
  v16[3] = &unk_24F037168;
  v16[4] = v29;
  dispatch_group_notify(v5, v15, v16);
  if (v10)
    dispatch_release(v10);
  if (v9)
    _Block_release(v9);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v29, 8);
  if (v31)
    dispatch_release(v31);
  if (v30)
    _Block_release(v30);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
    dispatch_release(v5);
  }
}

void sub_227ADA938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v29 - 136);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose((const void *)(v29 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v28 + 40);
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
    dispatch_release(v27);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  const void *v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v17;
  CFTypeRef cf;

  v3 = *a2;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_QWORD *)(v6 + 40))
    {
      if (*(_QWORD *)(v6 + 48))
      {
        if (v3)
          CFRetain(*a2);
        v8 = *a3;
        if (v8)
          CFRetain(v8);
        v9 = *(const void **)(v6 + 40);
        if (v9)
          v10 = _Block_copy(v9);
        else
          v10 = 0;
        v11 = *(NSObject **)(v6 + 48);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
        block[3] = &__block_descriptor_tmp_89;
        if (v10)
        {
          aBlock = _Block_copy(v10);
          v17 = v3;
          if (!v3)
            goto LABEL_18;
        }
        else
        {
          aBlock = 0;
          v17 = v3;
          if (!v3)
          {
LABEL_18:
            cf = v8;
            if (v8)
              CFRetain(v8);
            dispatch_async(v11, block);
            if (cf)
              CFRelease(cf);
            if (v17)
              CFRelease(v17);
            if (aBlock)
              _Block_release(aBlock);
            if (v10)
              _Block_release(v10);
            if (v8)
              CFRelease(v8);
            if (v3)
              CFRelease(v3);
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v13 = *(const void **)(v12 + 40);
            *(_QWORD *)(v12 + 40) = 0;
            if (v13)
              _Block_release(v13);
            v14 = *(NSObject **)(v12 + 48);
            *(_QWORD *)(v12 + 48) = 0;
            if (v14)
              dispatch_release(v14);
            return;
          }
        }
        CFRetain(v3);
        goto LABEL_18;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_24(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  void *v6;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v9;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (v2 && *(_QWORD *)(v1 + 48))
  {
    v3 = _Block_copy(v2);
    v4 = v3;
    v5 = *(NSObject **)(v1 + 48);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_89;
    if (v3)
      v6 = _Block_copy(v3);
    else
      v6 = 0;
    v9 = 0;
    cf = 0;
    aBlock = v6;
    dispatch_async(v5, block);
    if (cf)
      CFRelease(cf);
    if (v9)
      CFRelease(v9);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
  }
}

void radio::ARICommandDriver::getARFCN_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *on_zero_shared_weak;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  void (__cdecl *v13)(std::__shared_weak_count *__hidden);
  void *v14;
  NSObject *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  const void *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v31[2];
  unint64_t v32;
  _OWORD v33[4];
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, const unsigned __int8 *);
  void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const void *aBlock[5];

  v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v12;
  v33[3] = v12;
  v33[0] = v12;
  v33[1] = v12;
  AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::ARI_CsiIceGetArfcnLockReq_SDK((AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *)v33);
  v13 = a1[7].__on_zero_shared_weak;
  if (*(_QWORD *)a2)
  {
    v14 = _Block_copy(*(const void **)a2);
    v15 = *(NSObject **)(a2 + 8);
    if (!v15)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = 0;
  v15 = *(NSObject **)(a2 + 8);
  if (v15)
  {
LABEL_11:
    dispatch_retain(v15);
    goto LABEL_12;
  }
  do
LABEL_12:
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v17->__shared_owners_ = 0u;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_24F038070;
  v17[1].__vftable = a1;
  v17[1].__shared_owners_ = (uint64_t)v14;
  v17[1].__shared_weak_owners_ = (uint64_t)v15;
  v17[2].__vftable = on_zero_shared_weak;
  v17[2].__shared_owners_ = (uint64_t)v7;
  v19 = (const void *)MEMORY[0x24BDAC760];
  v34 = MEMORY[0x24BDAC760];
  v35 = 1174405120;
  v36 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v37 = &__block_descriptor_tmp_120;
  v38 = v17 + 1;
  v39 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  aBlock[0] = v19;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v34;
  v21 = _Block_copy(aBlock);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  do
    v25 = __ldaxr(v18);
  while (__stlxr(v25 - 1, v18));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v26;
  v31[1] = v26;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
  v34 = *((_QWORD *)v13 + 1);
  if (!v27)
  {
    v35 = 0;
LABEL_37:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v35 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v35)
    goto LABEL_37;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v35;
  if (v35)
  {
    v29 = (unint64_t *)(v35 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v21;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::~ARI_CsiIceGetArfcnLockReq_SDK((AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *)v33);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_227ADAF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  const void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v5 = *(const void **)(v3 - 120);
  if (v5)
    _Block_release(v5);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0((uint64_t *)va);
  AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::~ARI_CsiIceGetArfcnLockReq_SDK((AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *)va2);
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

_QWORD *radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[1];
  if (v4)
    _Block_release(v4);
  return a1;
}

void radio::ARICommandDriver::getCA_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *on_zero_shared_weak;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  void (__cdecl *v13)(std::__shared_weak_count *__hidden);
  void *v14;
  NSObject *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  const void *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v31[2];
  unint64_t v32;
  _OWORD v33[4];
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, const unsigned __int8 *);
  void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const void *aBlock[5];

  v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v12;
  v33[3] = v12;
  v33[0] = v12;
  v33[1] = v12;
  AriSdk::ARI_CsiIceGetCaEnableReq_SDK::ARI_CsiIceGetCaEnableReq_SDK((AriSdk::ARI_CsiIceGetCaEnableReq_SDK *)v33);
  v13 = a1[7].__on_zero_shared_weak;
  if (*(_QWORD *)a2)
  {
    v14 = _Block_copy(*(const void **)a2);
    v15 = *(NSObject **)(a2 + 8);
    if (!v15)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = 0;
  v15 = *(NSObject **)(a2 + 8);
  if (v15)
  {
LABEL_11:
    dispatch_retain(v15);
    goto LABEL_12;
  }
  do
LABEL_12:
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v17->__shared_owners_ = 0u;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_24F0380F0;
  v17[1].__vftable = a1;
  v17[1].__shared_owners_ = (uint64_t)v14;
  v17[1].__shared_weak_owners_ = (uint64_t)v15;
  v17[2].__vftable = on_zero_shared_weak;
  v17[2].__shared_owners_ = (uint64_t)v7;
  v19 = (const void *)MEMORY[0x24BDAC760];
  v34 = MEMORY[0x24BDAC760];
  v35 = 1174405120;
  v36 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v37 = &__block_descriptor_tmp_124;
  v38 = v17 + 1;
  v39 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  aBlock[0] = v19;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v34;
  v21 = _Block_copy(aBlock);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  do
    v25 = __ldaxr(v18);
  while (__stlxr(v25 - 1, v18));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v26;
  v31[1] = v26;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
  v34 = *((_QWORD *)v13 + 1);
  if (!v27)
  {
    v35 = 0;
LABEL_37:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v35 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v35)
    goto LABEL_37;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v35;
  if (v35)
  {
    v29 = (unint64_t *)(v35 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v21;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  AriSdk::ARI_CsiIceGetCaEnableReq_SDK::~ARI_CsiIceGetCaEnableReq_SDK((AriSdk::ARI_CsiIceGetCaEnableReq_SDK *)v33);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_227ADB34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  const void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v5 = *(const void **)(v3 - 120);
  if (v5)
    _Block_release(v5);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0((uint64_t *)va);
  AriSdk::ARI_CsiIceGetCaEnableReq_SDK::~ARI_CsiIceGetCaEnableReq_SDK((AriSdk::ARI_CsiIceGetCaEnableReq_SDK *)va2);
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

_QWORD *radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[1];
  if (v4)
    _Block_release(v4);
  return a1;
}

void radio::ARICommandDriver::checkFieldTestConfig(radio::ARICommandDriver *this)
{
  uint64_t v2;
  int *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  NSObject *v7;
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  NSObject *v15;
  int *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  NSObject *v21;
  int *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  NSObject *v27;
  int *v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  NSObject *v39;
  int v40;
  _DWORD v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    v3 = (int *)((char *)this + 344);
    do
    {
      v4 = *(_DWORD *)(v2 + 28);
      v5 = v4 < 1;
      if (v4 >= 1)
        v6 = (uint64_t *)v2;
      else
        v6 = (uint64_t *)(v2 + 8);
      if (!v5)
        v3 = (int *)v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 != (int *)((char *)this + 344) && v3[7] < 2)
      goto LABEL_12;
  }
  v7 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_227A72000, v7, OS_LOG_TYPE_ERROR, "Failed to find fRxDiversity[ kWCDMA ]", (uint8_t *)v41, 2u);
    v8 = (int *)((char *)this + 376);
    v9 = *((_QWORD *)this + 47);
    if (v9)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    v8 = (int *)((char *)this + 376);
    v9 = *((_QWORD *)this + 47);
    if (v9)
    {
LABEL_13:
      v10 = v8;
      v11 = v9;
      do
      {
        v12 = *(_DWORD *)(v11 + 28);
        v13 = v12 < 1;
        if (v12 >= 1)
          v14 = (uint64_t *)v11;
        else
          v14 = (uint64_t *)(v11 + 8);
        if (!v13)
          v10 = (int *)v11;
        v11 = *v14;
      }
      while (*v14);
      if (v10 != v8 && v10[7] < 2)
        goto LABEL_23;
    }
  }
  v15 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_227A72000, v15, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kWCDMA ]", (uint8_t *)v41, 2u);
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
      goto LABEL_24;
    goto LABEL_33;
  }
LABEL_23:
  if (v9)
  {
LABEL_24:
    v16 = v8;
    v17 = v9;
    do
    {
      v18 = *(_DWORD *)(v17 + 28);
      v19 = v18 < 2;
      if (v18 >= 2)
        v20 = (uint64_t *)v17;
      else
        v20 = (uint64_t *)(v17 + 8);
      if (!v19)
        v16 = (int *)v17;
      v17 = *v20;
    }
    while (*v20);
    if (v16 != v8 && v16[7] < 3)
      goto LABEL_34;
  }
LABEL_33:
  v21 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_227A72000, v21, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kTDSCDMA ]", (uint8_t *)v41, 2u);
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
      goto LABEL_35;
    goto LABEL_44;
  }
LABEL_34:
  if (v9)
  {
LABEL_35:
    v22 = v8;
    v23 = v9;
    do
    {
      v24 = *(_DWORD *)(v23 + 28);
      v25 = v24 < 3;
      if (v24 >= 3)
        v26 = (uint64_t *)v23;
      else
        v26 = (uint64_t *)(v23 + 8);
      if (!v25)
        v22 = (int *)v23;
      v23 = *v26;
    }
    while (*v26);
    if (v22 != v8 && v22[7] < 4)
      goto LABEL_45;
  }
LABEL_44:
  v27 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_227A72000, v27, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kLTE ]", (uint8_t *)v41, 2u);
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
      goto LABEL_46;
    goto LABEL_55;
  }
LABEL_45:
  if (v9)
  {
LABEL_46:
    v28 = v8;
    do
    {
      v29 = *(_DWORD *)(v9 + 28);
      v30 = v29 < 0;
      if (v29 >= 0)
        v31 = (uint64_t *)v9;
      else
        v31 = (uint64_t *)(v9 + 8);
      if (!v30)
        v28 = (int *)v9;
      v9 = *v31;
    }
    while (*v31);
    if (v28 != v8 && v28[7] < 1)
      goto LABEL_56;
  }
LABEL_55:
  v32 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_227A72000, v32, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kGSM ]", (uint8_t *)v41, 2u);
    v33 = *((_QWORD *)this + 50);
    if (v33)
      goto LABEL_57;
LABEL_66:
    v39 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = *((_DWORD *)this + 104);
      v41[0] = 67109120;
      v41[1] = v40;
      _os_log_error_impl(&dword_227A72000, v39, OS_LOG_TYPE_ERROR, "Failed to find fARFCNLock[ fARFCNCurrentRAT: %d ]", (uint8_t *)v41, 8u);
    }
    return;
  }
LABEL_56:
  v33 = *((_QWORD *)this + 50);
  if (!v33)
    goto LABEL_66;
LABEL_57:
  v34 = *((_DWORD *)this + 104);
  v35 = (_DWORD *)((char *)this + 400);
  do
  {
    v36 = *(_DWORD *)(v33 + 28);
    v37 = v36 < v34;
    if (v36 >= v34)
      v38 = (uint64_t *)v33;
    else
      v38 = (uint64_t *)(v33 + 8);
    if (!v37)
      v35 = (_DWORD *)v33;
    v33 = *v38;
  }
  while (*v38);
  if (v35 == (_DWORD *)((char *)this + 400) || v34 < v35[7])
    goto LABEL_66;
}

void radio::ARICommandDriver::getFieldTestConfig(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_29_0;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  const __CFDictionary *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[5];
  const void *v33;
  dispatch_object_t v34;

  v2 = a1[4];
  v3 = dispatch_group_create();
  v4 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v4);
  }
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x3802000000;
  v32[3] = __Block_byref_object_copy__0;
  v32[4] = __Block_byref_object_dispose__0;
  v33 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v34 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v33 = v5;
  v34 = v6;
  if (v6)
    dispatch_retain(v6);
  v7 = MEMORY[0x24BDAC760];
  v30 = 0xAAAAAAAAAAAAAAAALL;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  aBlock[3] = &unk_24F037190;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  aBlock[4] = v32;
  v8 = _Block_copy(aBlock);
  v9 = *(NSObject **)(v2 + 88);
  if (v9)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v30 = (unint64_t)v8;
  v31 = (unint64_t)v9;
  if (v8)
  {
    v10 = _Block_copy(v8);
    v26 = v10;
    v27 = v9;
    if (!v9)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = 0;
  v26 = 0;
  v27 = v9;
  if (v9)
LABEL_13:
    dispatch_retain(v9);
LABEL_14:
  radio::ARICommandDriver::getRxDiversityState_sync(v2, (uint64_t)&v26);
  if (v9)
    dispatch_release(v9);
  if (v10)
    _Block_release(v10);
  if (v8)
  {
    v11 = _Block_copy(v8);
    v24 = v11;
    v25 = v9;
    if (!v9)
      goto LABEL_21;
    goto LABEL_20;
  }
  v11 = 0;
  v24 = 0;
  v25 = v9;
  if (v9)
LABEL_20:
    dispatch_retain(v9);
LABEL_21:
  v23 = 0;
  radio::ARICommandDriver::getAntennaTxPort_sync((_QWORD *)v2, (uint64_t)&v24, &v23);
  if (v9)
    dispatch_release(v9);
  if (v11)
    _Block_release(v11);
  if (v8)
  {
    v12 = _Block_copy(v8);
    v21 = v12;
    v22 = v9;
    if (!v9)
      goto LABEL_28;
    goto LABEL_27;
  }
  v12 = 0;
  v21 = 0;
  v22 = v9;
  if (v9)
LABEL_27:
    dispatch_retain(v9);
LABEL_28:
  radio::ARICommandDriver::getARTD_sync(v2, (uint64_t)&v21);
  if (v9)
    dispatch_release(v9);
  if (v12)
    _Block_release(v12);
  if (v8)
  {
    v13 = _Block_copy(v8);
    v19 = v13;
    v20 = v9;
    if (!v9)
      goto LABEL_35;
    goto LABEL_34;
  }
  v13 = 0;
  v19 = 0;
  v20 = v9;
  if (v9)
LABEL_34:
    dispatch_retain(v9);
LABEL_35:
  radio::ARICommandDriver::getARFCN_sync((std::__shared_weak_count_vtbl *)v2, (uint64_t)&v19);
  if (v9)
    dispatch_release(v9);
  if (v13)
    _Block_release(v13);
  if (v8)
  {
    v14 = _Block_copy(v8);
    v17 = v14;
    v18 = v9;
    if (!v9)
      goto LABEL_42;
    goto LABEL_41;
  }
  v14 = 0;
  v17 = 0;
  v18 = v9;
  if (v9)
LABEL_41:
    dispatch_retain(v9);
LABEL_42:
  radio::ARICommandDriver::getCA_sync((std::__shared_weak_count_vtbl *)v2, (uint64_t)&v17);
  if (v9)
    dispatch_release(v9);
  if (v14)
    _Block_release(v14);
  radio::ARICommandDriver::checkFieldTestConfig((radio::ARICommandDriver *)v2);
  v15 = *(NSObject **)(v2 + 88);
  v16[0] = v7;
  v16[1] = 0x40000000;
  v16[2] = ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_27;
  v16[3] = &unk_24F0371C8;
  v16[4] = v32;
  v16[5] = v2;
  dispatch_group_notify(v4, v15, v16);
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v32, 8);
  if (v34)
    dispatch_release(v34);
  if (v33)
    _Block_release(v33);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
    dispatch_release(v4);
  }
}

void sub_227ADBC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,dispatch_group_t group)
{
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v36 - 136);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose((const void *)(v36 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v35 + 40);
  if (v34)
  {
    dispatch_group_leave(v34);
    dispatch_release(v34);
    dispatch_release(v34);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  const void *v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v17;
  CFTypeRef cf;

  v3 = *a2;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_QWORD *)(v6 + 40))
    {
      if (*(_QWORD *)(v6 + 48))
      {
        if (v3)
          CFRetain(*a2);
        v8 = *a3;
        if (v8)
          CFRetain(v8);
        v9 = *(const void **)(v6 + 40);
        if (v9)
          v10 = _Block_copy(v9);
        else
          v10 = 0;
        v11 = *(NSObject **)(v6 + 48);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
        block[3] = &__block_descriptor_tmp_89;
        if (v10)
        {
          aBlock = _Block_copy(v10);
          v17 = v3;
          if (!v3)
            goto LABEL_18;
        }
        else
        {
          aBlock = 0;
          v17 = v3;
          if (!v3)
          {
LABEL_18:
            cf = v8;
            if (v8)
              CFRetain(v8);
            dispatch_async(v11, block);
            if (cf)
              CFRelease(cf);
            if (v17)
              CFRelease(v17);
            if (aBlock)
              _Block_release(aBlock);
            if (v10)
              _Block_release(v10);
            if (v8)
              CFRelease(v8);
            if (v3)
              CFRelease(v3);
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v13 = *(const void **)(v12 + 40);
            *(_QWORD *)(v12 + 40) = 0;
            if (v13)
              _Block_release(v13);
            v14 = *(NSObject **)(v12 + 48);
            *(_QWORD *)(v12 + 48) = 0;
            if (v14)
              dispatch_release(v14);
            return;
          }
        }
        CFRetain(v3);
        goto LABEL_18;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_27(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  __CFDictionary *v37;
  uint64_t *v38;
  uint64_t **v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  uint64_t **v46;
  uint64_t **v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  const void *v53;
  void *v54;
  NSObject *v55;
  __CFDictionary *v56;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v59;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v1 + 40))
  {
    if (*(_QWORD *)(v1 + 48))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v6 = Mutable;
      if (Mutable)
      {
        v56 = Mutable;
        v7 = *(uint64_t **)(v3 + 344);
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v9 = (uint64_t **)v7;
              v10 = *((_DWORD *)v7 + 7);
              if (v10 < 2)
                break;
              v7 = *v9;
              v8 = v9;
              if (!*v9)
                goto LABEL_11;
            }
            if (v10 == 1)
              break;
            v7 = v9[1];
            if (!v7)
            {
              v8 = v9 + 1;
              goto LABEL_11;
            }
          }
          v11 = (char *)v9;
        }
        else
        {
          v8 = (uint64_t **)(v3 + 344);
          v9 = (uint64_t **)(v3 + 344);
LABEL_11:
          v11 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v11 + 28) = 1;
          *(_QWORD *)v11 = 0;
          *((_QWORD *)v11 + 1) = 0;
          *((_QWORD *)v11 + 2) = v9;
          *v8 = (uint64_t *)v11;
          v12 = **(_QWORD **)(v3 + 336);
          v13 = (uint64_t *)v11;
          if (v12)
          {
            *(_QWORD *)(v3 + 336) = v12;
            v13 = *v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 344), v13);
          ++*(_QWORD *)(v3 + 352);
          v6 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x24BED38D8], *((_DWORD *)v11 + 8), v4);
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x24BED3880], *(_DWORD *)(v3 + 360), v4);
        v14 = (uint64_t **)(v3 + 376);
        v15 = *(uint64_t **)(v3 + 376);
        v16 = (uint64_t **)(v3 + 376);
        v17 = (uint64_t **)(v3 + 376);
        if (v15)
        {
          while (1)
          {
            while (1)
            {
              v17 = (uint64_t **)v15;
              v18 = *((_DWORD *)v15 + 7);
              if (v18 < 2)
                break;
              v15 = *v17;
              v16 = v17;
              if (!*v17)
                goto LABEL_22;
            }
            if (v18 == 1)
              break;
            v15 = v17[1];
            if (!v15)
            {
              v16 = v17 + 1;
              goto LABEL_22;
            }
          }
          v19 = (char *)v17;
        }
        else
        {
LABEL_22:
          v19 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v19 + 28) = 1;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
          *((_QWORD *)v19 + 2) = v17;
          *v16 = (uint64_t *)v19;
          v20 = **(_QWORD **)(v3 + 368);
          v21 = (uint64_t *)v19;
          if (v20)
          {
            *(_QWORD *)(v3 + 368) = v20;
            v21 = *v16;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v21);
          ++*(_QWORD *)(v3 + 384);
          v6 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x24BED3870], *((_DWORD *)v19 + 8), v4);
        v22 = *v14;
        v23 = (uint64_t **)(v3 + 376);
        v24 = (uint64_t **)(v3 + 376);
        if (*v14)
        {
          while (1)
          {
            while (1)
            {
              v24 = (uint64_t **)v22;
              v25 = *((_DWORD *)v22 + 7);
              if (v25 < 3)
                break;
              v22 = *v24;
              v23 = v24;
              if (!*v24)
                goto LABEL_33;
            }
            if (v25 == 2)
              break;
            v22 = v24[1];
            if (!v22)
            {
              v23 = v24 + 1;
              goto LABEL_33;
            }
          }
          v26 = (char *)v24;
        }
        else
        {
LABEL_33:
          v26 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v26 + 28) = 2;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = v24;
          *v23 = (uint64_t *)v26;
          v27 = **(_QWORD **)(v3 + 368);
          v28 = (uint64_t *)v26;
          if (v27)
          {
            *(_QWORD *)(v3 + 368) = v27;
            v28 = *v23;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v28);
          ++*(_QWORD *)(v3 + 384);
          v6 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x24BED38A0], *((_DWORD *)v26 + 8), v4);
        v29 = *v14;
        v30 = (uint64_t **)(v3 + 376);
        v31 = (uint64_t **)(v3 + 376);
        if (*v14)
        {
          while (1)
          {
            while (1)
            {
              v31 = (uint64_t **)v29;
              v32 = *((_DWORD *)v29 + 7);
              if (v32 < 4)
                break;
              v29 = *v31;
              v30 = v31;
              if (!*v31)
                goto LABEL_44;
            }
            if (v32 == 3)
              break;
            v29 = v31[1];
            if (!v29)
            {
              v30 = v31 + 1;
              goto LABEL_44;
            }
          }
          v33 = (char *)v31;
        }
        else
        {
LABEL_44:
          v33 = (char *)operator new(0x28uLL);
          *(_QWORD *)(v33 + 28) = 3;
          *(_QWORD *)v33 = 0;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = v31;
          *v30 = (uint64_t *)v33;
          v34 = **(_QWORD **)(v3 + 368);
          v35 = (uint64_t *)v33;
          if (v34)
          {
            *(_QWORD *)(v3 + 368) = v34;
            v35 = *v30;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v35);
          ++*(_QWORD *)(v3 + 384);
        }
        v36 = *((_DWORD *)v33 + 8);
        v37 = v56;
        ctu::cf::insert<__CFString const*,int>(v56, (CFTypeRef)*MEMORY[0x24BED3790], v36, v4);
        v38 = *v14;
        v39 = (uint64_t **)(v3 + 376);
        if (*v14)
        {
          while (1)
          {
            while (1)
            {
              v39 = (uint64_t **)v38;
              v40 = *((_DWORD *)v38 + 7);
              if (v40 < 1)
                break;
              v38 = *v39;
              v14 = v39;
              if (!*v39)
                goto LABEL_55;
            }
            if ((v40 & 0x80000000) == 0)
              break;
            v38 = v39[1];
            if (!v38)
            {
              v14 = v39 + 1;
              goto LABEL_55;
            }
          }
          v41 = v39;
        }
        else
        {
LABEL_55:
          v41 = operator new(0x28uLL);
          v41[7] = 0;
          v41[8] = 0;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v41 + 1) = 0;
          *((_QWORD *)v41 + 2) = v39;
          *v14 = (uint64_t *)v41;
          v42 = **(_QWORD **)(v3 + 368);
          v43 = (uint64_t *)v41;
          if (v42)
          {
            *(_QWORD *)(v3 + 368) = v42;
            v43 = *v14;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v43);
          ++*(_QWORD *)(v3 + 384);
          v37 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v37, (CFTypeRef)*MEMORY[0x24BED3788], v41[8], v4);
        ctu::cf::insert<__CFString const*,int>(v37, (CFTypeRef)*MEMORY[0x24BED3798], *(_DWORD *)(v3 + 416), v4);
        v44 = *(uint64_t **)(v3 + 400);
        v45 = *(_DWORD *)(v3 + 416);
        if (v44)
        {
          while (1)
          {
            while (1)
            {
              v47 = (uint64_t **)v44;
              v48 = *((_DWORD *)v44 + 7);
              if (v45 >= v48)
                break;
              v44 = *v47;
              v46 = v47;
              if (!*v47)
                goto LABEL_65;
            }
            if (v48 >= v45)
              break;
            v44 = v47[1];
            if (!v44)
            {
              v46 = v47 + 1;
              goto LABEL_65;
            }
          }
          v49 = v47;
        }
        else
        {
          v46 = (uint64_t **)(v3 + 400);
          v47 = (uint64_t **)(v3 + 400);
LABEL_65:
          v49 = operator new(0x28uLL);
          v49[7] = v45;
          v49[8] = 0;
          *(_QWORD *)v49 = 0;
          *((_QWORD *)v49 + 1) = 0;
          *((_QWORD *)v49 + 2) = v47;
          *v46 = (uint64_t *)v49;
          v50 = **(_QWORD **)(v3 + 392);
          v51 = (uint64_t *)v49;
          if (v50)
          {
            *(_QWORD *)(v3 + 392) = v50;
            v51 = *v46;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 400), v51);
          ++*(_QWORD *)(v3 + 408);
          v37 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v37, (CFTypeRef)*MEMORY[0x24BED3868], v49[8], v4);
        ctu::cf::insert<__CFString const*,int>(v56, (CFTypeRef)*MEMORY[0x24BED3878], *(_DWORD *)(v3 + 420), v4);
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        CFRetain(v56);
        v53 = *(const void **)(v52 + 40);
        if (v53)
          v54 = _Block_copy(v53);
        else
          v54 = 0;
        v55 = *(NSObject **)(v52 + 48);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        block[3] = &__block_descriptor_tmp_83;
        if (v54)
        {
          aBlock = _Block_copy(v54);
          v59 = 0;
          cf = v56;
        }
        else
        {
          aBlock = 0;
          v59 = 0;
          cf = v56;
        }
        CFRetain(v56);
        dispatch_async(v55, block);
        if (cf)
          CFRelease(cf);
        if (v59)
          CFRelease(v59);
        if (aBlock)
          _Block_release(aBlock);
        if (v54)
          _Block_release(v54);
        CFRelease(v56);
        CFRelease(v56);
      }
    }
  }
}

void sub_227ADC4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227ADC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  NSObject *v16;
  const void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v27;
  _DWORD *v28;
  void *v29;
  _DWORD *v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  NSObject *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  const void *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  NSObject *v57;
  CFTypeRef v58;
  _OWORD v59[2];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, const unsigned __int8 *);
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v69;
  CFTypeRef cf[2];
  __int128 v71;
  void *__p[2];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 344);
  v9 = *(uint64_t **)(a1 + 344);
  v10 = (uint64_t **)(a1 + 344);
  v11 = (uint64_t **)(a1 + 344);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = *((_DWORD *)v9 + 7);
        if (v12 <= a3)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= a3)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v13 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v11 + 7) = a3;
    *((_DWORD *)v11 + 8) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *v10 = (uint64_t *)v11;
    v14 = **(_QWORD **)(a1 + 336);
    v15 = (uint64_t *)v11;
    if (v14)
    {
      *(_QWORD *)(a1 + 336) = v14;
      v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v15);
    ++*(_QWORD *)(a1 + 352);
  }
  if (*((_DWORD *)v11 + 8) == a2)
  {
    v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v50 = (_DWORD *)*v8;
      v51 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v51 = v50;
            v52 = v50[7];
            if (v52 <= a3)
              break;
            v50 = (_DWORD *)*v51;
            v8 = v51;
            if (!*v51)
              goto LABEL_60;
          }
          if (v52 >= a3)
            break;
          v50 = (_DWORD *)v51[1];
          if (!v50)
          {
            v8 = v51 + 1;
            goto LABEL_60;
          }
        }
      }
      else
      {
LABEL_60:
        v53 = v51;
        v51 = operator new(0x28uLL);
        *((_DWORD *)v51 + 7) = a3;
        *((_DWORD *)v51 + 8) = 0;
        *v51 = 0;
        v51[1] = 0;
        v51[2] = v53;
        *v8 = v51;
        v54 = **(_QWORD **)(a1 + 336);
        v55 = v51;
        if (v54)
        {
          *(_QWORD *)(a1 + 336) = v54;
          v55 = (uint64_t *)*v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v55);
        ++*(_QWORD *)(a1 + 352);
      }
      v56 = *((_DWORD *)v51 + 8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v56;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v69) = a2;
      _os_log_debug_impl(&dword_227A72000, v16, OS_LOG_TYPE_DEBUG, "#D fRxDiversity[ %d ]: %d == %d\n", buf, 0x14u);
      v17 = *(const void **)a4;
      if (*(_QWORD *)a4)
        goto LABEL_14;
    }
    else
    {
      v17 = *(const void **)a4;
      if (*(_QWORD *)a4)
      {
LABEL_14:
        v18 = _Block_copy(v17);
        goto LABEL_65;
      }
    }
    v18 = 0;
LABEL_65:
    v57 = *(NSObject **)(a4 + 8);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 1174405120;
    *(_QWORD *)&v69 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((_QWORD *)&v69 + 1) = &__block_descriptor_tmp_81;
    if (v18)
    {
      cf[0] = _Block_copy(v18);
      cf[1] = 0;
      dispatch_async(v57, buf);
      v58 = cf[1];
      if (!cf[1])
        goto LABEL_70;
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      dispatch_async(v57, buf);
      v58 = cf[1];
      if (!cf[1])
      {
LABEL_70:
        if (cf[0])
          _Block_release(cf[0]);
        if (v18)
          _Block_release(v18);
        return;
      }
    }
    CFRelease(v58);
    goto LABEL_70;
  }
  v19 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v19 || (v20 = *(_QWORD *)(a1 + 72), (v21 = std::__shared_weak_count::lock(v19)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71 = v27;
  *(_OWORD *)__p = v27;
  v69 = v27;
  *(_OWORD *)cf = v27;
  *(_OWORD *)buf = v27;
  AriSdk::ARI_CsiIceRxDiversityReq_SDK::ARI_CsiIceRxDiversityReq_SDK((AriSdk::ARI_CsiIceRxDiversityReq_SDK *)buf);
  v28 = operator new(4uLL);
  *v28 = a2;
  v29 = __p[0];
  __p[0] = v28;
  if (v29)
    operator delete(v29);
  v30 = operator new(4uLL);
  *v30 = a3;
  v31 = __p[1];
  __p[1] = v30;
  if (v31)
    operator delete(v31);
  v32 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)a4)
  {
    v33 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    v34 = *(NSObject **)(a4 + 8);
    if (!v34)
      goto LABEL_30;
    goto LABEL_29;
  }
  v33 = 0;
  v34 = *(NSObject **)(a4 + 8);
  if (v34)
  {
LABEL_29:
    dispatch_retain(v34);
    goto LABEL_30;
  }
  do
LABEL_30:
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v36->__shared_owners_ = 0u;
  v37 = (unint64_t *)&v36->__shared_owners_;
  v36->__vftable = (std::__shared_weak_count_vtbl *)off_24F038170;
  v36[1].__vftable = v33;
  v36[1].__shared_owners_ = (uint64_t)v34;
  v36[1].__shared_weak_owners_ = v20;
  v36[2].__vftable = (std::__shared_weak_count_vtbl *)v22;
  LODWORD(v36[2].__shared_owners_) = a3;
  v38 = (const void *)MEMORY[0x24BDAC760];
  v61 = MEMORY[0x24BDAC760];
  v62 = 1174405120;
  v63 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v64 = &__block_descriptor_tmp_126;
  v65 = v36 + 1;
  v66 = v36;
  do
    v39 = __ldxr(v37);
  while (__stxr(v39 + 1, v37));
  aBlock[0] = v38;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v61;
  v40 = _Block_copy(aBlock);
  v41 = v66;
  if (v66)
  {
    v42 = (unint64_t *)&v66->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  do
    v44 = __ldaxr(v37);
  while (__stlxr(v44 - 1, v37));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  *(_QWORD *)&v45 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59[0] = v45;
  v59[1] = v45;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v46 = *(std::__shared_weak_count **)(v32 + 16);
  v61 = *(_QWORD *)(v32 + 8);
  if (!v46)
  {
    v62 = 0;
LABEL_77:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v62 = (uint64_t)std::__shared_weak_count::lock(v46);
  if (!v62)
    goto LABEL_77;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v47 = (std::__shared_weak_count *)v62;
  if (v62)
  {
    v48 = (unint64_t *)(v62 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  aBlock[0] = v40;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v59);
  MEMORY[0x22E2A3778](buf);
  std::__shared_weak_count::__release_weak(v22);
}

void sub_227ADCB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::setRxDiversityState_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int Int;
  void *v14;
  NSObject *v15;
  _QWORD v16[5];
  void *v17;
  NSObject *v18;
  _QWORD v19[2];
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v22;
  unint64_t v23;
  _QWORD v24[5];
  void *v25;
  dispatch_object_t object;

  v6 = dispatch_group_create();
  v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3802000000;
  v24[3] = __Block_byref_object_copy__30;
  v24[4] = __Block_byref_object_dispose__31;
  v25 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = *(void **)a3;
  if (*(_QWORD *)a3)
    v8 = _Block_copy(v8);
  v9 = *(NSObject **)(a3 + 8);
  v25 = v8;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = MEMORY[0x24BDAC760];
  v22 = 0xAAAAAAAAAAAAAAAALL;
  v23 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_24F037220;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  aBlock[4] = v24;
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(a1 + 88);
  if (v12)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v22 = (unint64_t)v11;
  v23 = (unint64_t)v12;
  v19[0] = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v19, (const __CFString *)*MEMORY[0x24BED38D8]);
  if (v11)
  {
    v14 = _Block_copy(v11);
    v17 = v14;
    v18 = v12;
    if (!v12)
      goto LABEL_14;
    goto LABEL_13;
  }
  v14 = 0;
  v17 = 0;
  v18 = v12;
  if (v12)
LABEL_13:
    dispatch_retain(v12);
LABEL_14:
  radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(a1, Int, 1, (uint64_t)&v17);
  if (v12)
    dispatch_release(v12);
  if (v14)
    _Block_release(v14);
  v15 = *(NSObject **)(a1 + 88);
  v16[0] = v10;
  v16[1] = 0x40000000;
  v16[2] = ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_34;
  v16[3] = &unk_24F037258;
  v16[4] = v24;
  dispatch_group_notify(v7, v15, v16);
  MEMORY[0x22E2A2E9C](v19);
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v24, 8);
  if (object)
    dispatch_release(object);
  if (v25)
    _Block_release(v25);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
}

void sub_227ADCF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,char a24,uint64_t a25,char a26)
{
  NSObject *v26;
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a14);
  MEMORY[0x22E2A2E9C](&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a24);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(&a26, 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 + 40);
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
    dispatch_release(v26);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  const void *v10;
  NSObject *v11;
  _QWORD v12[4];
  void *aBlock;
  CFTypeRef cf;

  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const void **)(v5 + 40);
    if (v6)
    {
      if (*(_QWORD *)(v5 + 48))
      {
        if (v2 && (CFRetain(*a2), (v6 = *(const void **)(v5 + 40)) == 0))
          v7 = 0;
        else
          v7 = _Block_copy(v6);
        v8 = *(NSObject **)(v5 + 48);
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v12[3] = &__block_descriptor_tmp_81;
        if (v7)
        {
          aBlock = _Block_copy(v7);
          cf = v2;
          if (!v2)
            goto LABEL_15;
        }
        else
        {
          aBlock = 0;
          cf = v2;
          if (!v2)
          {
LABEL_15:
            dispatch_async(v8, v12);
            if (cf)
              CFRelease(cf);
            if (aBlock)
              _Block_release(aBlock);
            if (v7)
              _Block_release(v7);
            if (v2)
              CFRelease(v2);
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v10 = *(const void **)(v9 + 40);
            *(_QWORD *)(v9 + 40) = 0;
            if (v10)
              _Block_release(v10);
            v11 = *(NSObject **)(v9 + 48);
            *(_QWORD *)(v9 + 48) = 0;
            if (v11)
              dispatch_release(v11);
            return;
          }
        }
        CFRetain(v2);
        goto LABEL_15;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_34(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[4];
  void *aBlock;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(_QWORD *)(v1 + 48))
    return;
  v3 = _Block_copy(v2);
  v4 = v3;
  v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_81;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    cf = 0;
    dispatch_async(v5, v7);
    v6 = cf;
    if (!cf)
      goto LABEL_8;
    goto LABEL_7;
  }
  aBlock = 0;
  cf = 0;
  dispatch_async(v5, v7);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
}

void radio::ARICommandDriver::setAntennaTxPort(_QWORD *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  if (!*(_QWORD *)a3)
  {
    v6 = 0;
    v7 = *(NSObject **)(a3 + 8);
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = _Block_copy(*(const void **)a3);
  v7 = *(NSObject **)(a3 + 8);
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x20uLL);
  *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v14 = a1[11];
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = operator new(0x18uLL);
  *v16 = v12;
  v16[1] = v9;
  v16[2] = v11;
  dispatch_async_f(v14, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

uint64_t radio::ARICommandDriver::setAntennaTxPort_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  int Bool;
  const __CFString **v6;
  int v7;
  const __CFString *v8;
  NSObject *v9;
  const void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  int v21;
  _DWORD *v22;
  void *v23;
  _DWORD *v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  NSObject *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  const void *v32;
  unint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v45;
  int Int;
  NSObject *v47;
  CFTypeRef v48;
  _OWORD v49[2];
  unint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, const unsigned __int8 *);
  void *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v60;
  CFTypeRef cf[2];
  __int128 v62;
  void *__p[2];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v51[0] = 0xAAAAAAAAAAAAAAAALL;
  v51[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v51, *a2);
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v51, (const __CFString *)*MEMORY[0x24BED38D0]);
  v6 = (const __CFString **)MEMORY[0x24BED3880];
  if ((Bool & 1) == 0)
  {
    v7 = *(_DWORD *)(a1 + 360);
    v8 = (const __CFString *)*MEMORY[0x24BED3880];
    if (v7 == ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v51, (const __CFString *)*MEMORY[0x24BED3880]))
    {
      v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v45 = *(_DWORD *)(a1 + 360);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v51, v8);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v45;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = Int;
        _os_log_debug_impl(&dword_227A72000, v9, OS_LOG_TYPE_DEBUG, "#D fAntennaState: %d == %d\n", buf, 0xEu);
        v10 = *(const void **)a3;
        if (*(_QWORD *)a3)
          goto LABEL_5;
      }
      else
      {
        v10 = *(const void **)a3;
        if (*(_QWORD *)a3)
        {
LABEL_5:
          v11 = _Block_copy(v10);
          goto LABEL_47;
        }
      }
      v11 = 0;
LABEL_47:
      v47 = *(NSObject **)(a3 + 8);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 1174405120;
      *(_QWORD *)&v60 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
      *((_QWORD *)&v60 + 1) = &__block_descriptor_tmp_81;
      if (v11)
      {
        cf[0] = _Block_copy(v11);
        cf[1] = 0;
        dispatch_async(v47, buf);
        v48 = cf[1];
        if (!cf[1])
          goto LABEL_52;
      }
      else
      {
        cf[0] = 0;
        cf[1] = 0;
        dispatch_async(v47, buf);
        v48 = cf[1];
        if (!cf[1])
        {
LABEL_52:
          if (cf[0])
            _Block_release(cf[0]);
          if (v11)
            _Block_release(v11);
          return MEMORY[0x22E2A2E9C](v51);
        }
      }
      CFRelease(v48);
      goto LABEL_52;
    }
  }
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v62 = v20;
  *(_OWORD *)__p = v20;
  v60 = v20;
  *(_OWORD *)cf = v20;
  *(_OWORD *)buf = v20;
  AriSdk::ARI_CsiIceSetTxAntennaReq_SDK::ARI_CsiIceSetTxAntennaReq_SDK((AriSdk::ARI_CsiIceSetTxAntennaReq_SDK *)buf);
  v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v51, *v6);
  v22 = operator new(4uLL);
  *v22 = v21;
  v23 = __p[0];
  __p[0] = v22;
  if (v23)
    operator delete(v23);
  v24 = operator new(4uLL);
  *v24 = Bool;
  v25 = __p[1];
  __p[1] = v24;
  if (v25)
    operator delete(v25);
  v26 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)a3)
  {
    v27 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    v28 = *(NSObject **)(a3 + 8);
    if (!v28)
      goto LABEL_21;
    goto LABEL_20;
  }
  v27 = 0;
  v28 = *(NSObject **)(a3 + 8);
  if (v28)
  {
LABEL_20:
    dispatch_retain(v28);
    goto LABEL_21;
  }
  do
LABEL_21:
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  v30 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v30->__shared_owners_ = 0u;
  v31 = (unint64_t *)&v30->__shared_owners_;
  v30->__vftable = (std::__shared_weak_count_vtbl *)off_24F0381F0;
  v30[1].__vftable = v27;
  v30[1].__shared_owners_ = (uint64_t)v28;
  v30[1].__shared_weak_owners_ = v13;
  v30[2].__vftable = (std::__shared_weak_count_vtbl *)v15;
  v32 = (const void *)MEMORY[0x24BDAC760];
  v52 = MEMORY[0x24BDAC760];
  v53 = 1174405120;
  v54 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v55 = &__block_descriptor_tmp_131;
  v56 = v30 + 1;
  v57 = v30;
  do
    v33 = __ldxr(v31);
  while (__stxr(v33 + 1, v31));
  aBlock[0] = v32;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v52;
  v34 = _Block_copy(aBlock);
  v35 = v57;
  if (v57)
  {
    v36 = (unint64_t *)&v57->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  do
    v38 = __ldaxr(v31);
  while (__stlxr(v38 - 1, v31));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49[0] = v39;
  v49[1] = v39;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v40 = *(std::__shared_weak_count **)(v26 + 16);
  v52 = *(_QWORD *)(v26 + 8);
  if (!v40)
  {
    v53 = 0;
LABEL_58:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v53 = (uint64_t)std::__shared_weak_count::lock(v40);
  if (!v53)
    goto LABEL_58;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v41 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v42 = (unint64_t *)(v53 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  aBlock[0] = v34;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v49);
  MEMORY[0x22E2A3904](buf);
  std::__shared_weak_count::__release_weak(v15);
  return MEMORY[0x22E2A2E9C](v51);
}

void sub_227ADD870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::setARTDWithRAT_sync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  NSObject *v16;
  const void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v27;
  _DWORD *v28;
  void *v29;
  _DWORD *v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  NSObject *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  const void *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  NSObject *v57;
  CFTypeRef v58;
  _OWORD v59[2];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, const unsigned __int8 *);
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v69;
  CFTypeRef cf[2];
  __int128 v71;
  void *__p[2];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 376);
  v9 = *(uint64_t **)(a1 + 376);
  v10 = (uint64_t **)(a1 + 376);
  v11 = (uint64_t **)(a1 + 376);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = *((_DWORD *)v9 + 7);
        if (v12 <= a3)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= a3)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v13 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v11 + 7) = a3;
    *((_DWORD *)v11 + 8) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *v10 = (uint64_t *)v11;
    v14 = **(_QWORD **)(a1 + 368);
    v15 = (uint64_t *)v11;
    if (v14)
    {
      *(_QWORD *)(a1 + 368) = v14;
      v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v15);
    ++*(_QWORD *)(a1 + 384);
  }
  if (*((_DWORD *)v11 + 8) == a2)
  {
    v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v50 = (_DWORD *)*v8;
      v51 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v51 = v50;
            v52 = v50[7];
            if (v52 <= a3)
              break;
            v50 = (_DWORD *)*v51;
            v8 = v51;
            if (!*v51)
              goto LABEL_60;
          }
          if (v52 >= a3)
            break;
          v50 = (_DWORD *)v51[1];
          if (!v50)
          {
            v8 = v51 + 1;
            goto LABEL_60;
          }
        }
      }
      else
      {
LABEL_60:
        v53 = v51;
        v51 = operator new(0x28uLL);
        *((_DWORD *)v51 + 7) = a3;
        *((_DWORD *)v51 + 8) = 0;
        *v51 = 0;
        v51[1] = 0;
        v51[2] = v53;
        *v8 = v51;
        v54 = **(_QWORD **)(a1 + 368);
        v55 = v51;
        if (v54)
        {
          *(_QWORD *)(a1 + 368) = v54;
          v55 = (uint64_t *)*v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v55);
        ++*(_QWORD *)(a1 + 384);
      }
      v56 = *((_DWORD *)v51 + 8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v56;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v69) = a2;
      _os_log_debug_impl(&dword_227A72000, v16, OS_LOG_TYPE_DEBUG, "#D fARTD[ %d ]: %d == %d\n", buf, 0x14u);
      v17 = *(const void **)a4;
      if (*(_QWORD *)a4)
        goto LABEL_14;
    }
    else
    {
      v17 = *(const void **)a4;
      if (*(_QWORD *)a4)
      {
LABEL_14:
        v18 = _Block_copy(v17);
        goto LABEL_65;
      }
    }
    v18 = 0;
LABEL_65:
    v57 = *(NSObject **)(a4 + 8);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 1174405120;
    *(_QWORD *)&v69 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((_QWORD *)&v69 + 1) = &__block_descriptor_tmp_81;
    if (v18)
    {
      cf[0] = _Block_copy(v18);
      cf[1] = 0;
      dispatch_async(v57, buf);
      v58 = cf[1];
      if (!cf[1])
        goto LABEL_70;
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      dispatch_async(v57, buf);
      v58 = cf[1];
      if (!cf[1])
      {
LABEL_70:
        if (cf[0])
          _Block_release(cf[0]);
        if (v18)
          _Block_release(v18);
        return;
      }
    }
    CFRelease(v58);
    goto LABEL_70;
  }
  v19 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v19 || (v20 = *(_QWORD *)(a1 + 72), (v21 = std::__shared_weak_count::lock(v19)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71 = v27;
  *(_OWORD *)__p = v27;
  v69 = v27;
  *(_OWORD *)cf = v27;
  *(_OWORD *)buf = v27;
  AriSdk::ARI_CsiIceArtdSettingReq_SDK::ARI_CsiIceArtdSettingReq_SDK((AriSdk::ARI_CsiIceArtdSettingReq_SDK *)buf);
  v28 = operator new(4uLL);
  *v28 = a3;
  v29 = __p[0];
  __p[0] = v28;
  if (v29)
    operator delete(v29);
  v30 = operator new(4uLL);
  *v30 = a2;
  v31 = __p[1];
  __p[1] = v30;
  if (v31)
    operator delete(v31);
  v32 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)a4)
  {
    v33 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    v34 = *(NSObject **)(a4 + 8);
    if (!v34)
      goto LABEL_30;
    goto LABEL_29;
  }
  v33 = 0;
  v34 = *(NSObject **)(a4 + 8);
  if (v34)
  {
LABEL_29:
    dispatch_retain(v34);
    goto LABEL_30;
  }
  do
LABEL_30:
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v36->__shared_owners_ = 0u;
  v37 = (unint64_t *)&v36->__shared_owners_;
  v36->__vftable = (std::__shared_weak_count_vtbl *)off_24F038270;
  v36[1].__vftable = v33;
  v36[1].__shared_owners_ = (uint64_t)v34;
  v36[1].__shared_weak_owners_ = v20;
  v36[2].__vftable = (std::__shared_weak_count_vtbl *)v22;
  LODWORD(v36[2].__shared_owners_) = a3;
  v38 = (const void *)MEMORY[0x24BDAC760];
  v61 = MEMORY[0x24BDAC760];
  v62 = 1174405120;
  v63 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v64 = &__block_descriptor_tmp_135;
  v65 = v36 + 1;
  v66 = v36;
  do
    v39 = __ldxr(v37);
  while (__stxr(v39 + 1, v37));
  aBlock[0] = v38;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v61;
  v40 = _Block_copy(aBlock);
  v41 = v66;
  if (v66)
  {
    v42 = (unint64_t *)&v66->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  do
    v44 = __ldaxr(v37);
  while (__stlxr(v44 - 1, v37));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  *(_QWORD *)&v45 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59[0] = v45;
  v59[1] = v45;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v46 = *(std::__shared_weak_count **)(v32 + 16);
  v61 = *(_QWORD *)(v32 + 8);
  if (!v46)
  {
    v62 = 0;
LABEL_77:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v62 = (uint64_t)std::__shared_weak_count::lock(v46);
  if (!v62)
    goto LABEL_77;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v47 = (std::__shared_weak_count *)v62;
  if (v62)
  {
    v48 = (unint64_t *)(v62 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  aBlock[0] = v40;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v59);
  MEMORY[0x22E2A3730](buf);
  std::__shared_weak_count::__release_weak(v22);
}

void sub_227ADDF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::setARTD_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int Int;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  NSObject *v21;
  _QWORD v22[5];
  void *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  _QWORD v31[2];
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[5];
  const void *v37;
  dispatch_object_t v38;

  v6 = dispatch_group_create();
  v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x3802000000;
  v36[3] = __Block_byref_object_copy__30;
  v36[4] = __Block_byref_object_dispose__31;
  v37 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v38 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = *(void **)a3;
  if (*(_QWORD *)a3)
    v8 = _Block_copy(v8);
  v9 = *(NSObject **)(a3 + 8);
  v37 = v8;
  v38 = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = MEMORY[0x24BDAC760];
  v34 = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_24F037280;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  aBlock[4] = v36;
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(a1 + 88);
  if (v12)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v34 = (unint64_t)v11;
  v35 = (unint64_t)v12;
  v31[0] = 0xAAAAAAAAAAAAAAAALL;
  v31[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v31, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v31, (const __CFString *)*MEMORY[0x24BED3870]);
  if (v11)
  {
    v14 = _Block_copy(v11);
    v29 = v14;
    v30 = v12;
    if (!v12)
      goto LABEL_14;
    goto LABEL_13;
  }
  v14 = 0;
  v29 = 0;
  v30 = v12;
  if (v12)
LABEL_13:
    dispatch_retain(v12);
LABEL_14:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, Int, 1, (uint64_t)&v29);
  if (v12)
    dispatch_release(v12);
  if (v14)
    _Block_release(v14);
  v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v31, (const __CFString *)*MEMORY[0x24BED38A0]);
  if (v11)
  {
    v16 = _Block_copy(v11);
    v27 = v16;
    v28 = v12;
    if (!v12)
      goto LABEL_21;
    goto LABEL_20;
  }
  v16 = 0;
  v27 = 0;
  v28 = v12;
  if (v12)
LABEL_20:
    dispatch_retain(v12);
LABEL_21:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, v15, 2, (uint64_t)&v27);
  if (v12)
    dispatch_release(v12);
  if (v16)
    _Block_release(v16);
  v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v31, (const __CFString *)*MEMORY[0x24BED3790]);
  if (v11)
  {
    v18 = _Block_copy(v11);
    v25 = v18;
    v26 = v12;
    if (!v12)
      goto LABEL_28;
    goto LABEL_27;
  }
  v18 = 0;
  v25 = 0;
  v26 = v12;
  if (v12)
LABEL_27:
    dispatch_retain(v12);
LABEL_28:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, v17, 3, (uint64_t)&v25);
  if (v12)
    dispatch_release(v12);
  if (v18)
    _Block_release(v18);
  v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v31, (const __CFString *)*MEMORY[0x24BED3788]);
  if (v11)
  {
    v20 = _Block_copy(v11);
    v23 = v20;
    v24 = v12;
    if (!v12)
      goto LABEL_35;
    goto LABEL_34;
  }
  v20 = 0;
  v23 = 0;
  v24 = v12;
  if (v12)
LABEL_34:
    dispatch_retain(v12);
LABEL_35:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, v19, 0, (uint64_t)&v23);
  if (v12)
    dispatch_release(v12);
  if (v20)
    _Block_release(v20);
  v21 = *(NSObject **)(a1 + 88);
  v22[0] = v10;
  v22[1] = 0x40000000;
  v22[2] = ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_37;
  v22[3] = &unk_24F0372B8;
  v22[4] = v36;
  dispatch_group_notify(v7, v21, v22);
  MEMORY[0x22E2A2E9C](v31);
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v36, 8);
  if (v38)
    dispatch_release(v38);
  if (v37)
    _Block_release(v37);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
}

void sub_227ADE488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,dispatch_group_t group)
{
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a14);
  MEMORY[0x22E2A2E9C](&a22);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31 - 152);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose((const void *)(v31 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 + 40);
  if (v29)
  {
    dispatch_group_leave(v29);
    dispatch_release(v29);
    dispatch_release(v29);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  const void *v10;
  NSObject *v11;
  _QWORD v12[4];
  void *aBlock;
  CFTypeRef cf;

  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const void **)(v5 + 40);
    if (v6)
    {
      if (*(_QWORD *)(v5 + 48))
      {
        if (v2 && (CFRetain(*a2), (v6 = *(const void **)(v5 + 40)) == 0))
          v7 = 0;
        else
          v7 = _Block_copy(v6);
        v8 = *(NSObject **)(v5 + 48);
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v12[3] = &__block_descriptor_tmp_81;
        if (v7)
        {
          aBlock = _Block_copy(v7);
          cf = v2;
          if (!v2)
            goto LABEL_15;
        }
        else
        {
          aBlock = 0;
          cf = v2;
          if (!v2)
          {
LABEL_15:
            dispatch_async(v8, v12);
            if (cf)
              CFRelease(cf);
            if (aBlock)
              _Block_release(aBlock);
            if (v7)
              _Block_release(v7);
            if (v2)
              CFRelease(v2);
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v10 = *(const void **)(v9 + 40);
            *(_QWORD *)(v9 + 40) = 0;
            if (v10)
              _Block_release(v10);
            v11 = *(NSObject **)(v9 + 48);
            *(_QWORD *)(v9 + 48) = 0;
            if (v11)
              dispatch_release(v11);
            return;
          }
        }
        CFRetain(v2);
        goto LABEL_15;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_37(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[4];
  void *aBlock;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(_QWORD *)(v1 + 48))
    return;
  v3 = _Block_copy(v2);
  v4 = v3;
  v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_81;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    cf = 0;
    dispatch_async(v5, v7);
    v6 = cf;
    if (!cf)
      goto LABEL_8;
    goto LABEL_7;
  }
  aBlock = 0;
  cf = 0;
  dispatch_async(v5, v7);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
}

void radio::ARICommandDriver::setARFCNWithRAT_sync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  NSObject *v16;
  const void *v17;
  void *v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  _DWORD *v30;
  void *v31;
  _DWORD *v32;
  void *v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  NSObject *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  const void *v40;
  unint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _DWORD *v52;
  _QWORD *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  NSObject *v59;
  CFTypeRef v60;
  _OWORD v61[2];
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, const unsigned __int8 *);
  void *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v71;
  CFTypeRef cf[2];
  __int128 v73;
  void *__p[2];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 400);
  v9 = *(uint64_t **)(a1 + 400);
  v10 = (uint64_t **)(a1 + 400);
  v11 = (uint64_t **)(a1 + 400);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = *((_DWORD *)v9 + 7);
        if (v12 <= a3)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= a3)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v13 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v11 + 7) = a3;
    *((_DWORD *)v11 + 8) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *v10 = (uint64_t *)v11;
    v14 = **(_QWORD **)(a1 + 392);
    v15 = (uint64_t *)v11;
    if (v14)
    {
      *(_QWORD *)(a1 + 392) = v14;
      v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 400), v15);
    ++*(_QWORD *)(a1 + 408);
  }
  if (*((_DWORD *)v11 + 8) == a2)
  {
    v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v52 = (_DWORD *)*v8;
      v53 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v53 = v52;
            v54 = v52[7];
            if (v54 <= a3)
              break;
            v52 = (_DWORD *)*v53;
            v8 = v53;
            if (!*v53)
              goto LABEL_66;
          }
          if (v54 >= a3)
            break;
          v52 = (_DWORD *)v53[1];
          if (!v52)
          {
            v8 = v53 + 1;
            goto LABEL_66;
          }
        }
      }
      else
      {
LABEL_66:
        v55 = v53;
        v53 = operator new(0x28uLL);
        *((_DWORD *)v53 + 7) = a3;
        *((_DWORD *)v53 + 8) = 0;
        *v53 = 0;
        v53[1] = 0;
        v53[2] = v55;
        *v8 = v53;
        v56 = **(_QWORD **)(a1 + 392);
        v57 = v53;
        if (v56)
        {
          *(_QWORD *)(a1 + 392) = v56;
          v57 = (uint64_t *)*v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 400), v57);
        ++*(_QWORD *)(a1 + 408);
      }
      v58 = *((_DWORD *)v53 + 8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v58;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v71) = a2;
      _os_log_debug_impl(&dword_227A72000, v16, OS_LOG_TYPE_DEBUG, "#D fARFCNLock[ %d ]: %d == %d\n", buf, 0x14u);
      v17 = *(const void **)a4;
      if (*(_QWORD *)a4)
        goto LABEL_14;
    }
    else
    {
      v17 = *(const void **)a4;
      if (*(_QWORD *)a4)
      {
LABEL_14:
        v18 = _Block_copy(v17);
        goto LABEL_71;
      }
    }
    v18 = 0;
LABEL_71:
    v59 = *(NSObject **)(a4 + 8);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 1174405120;
    *(_QWORD *)&v71 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((_QWORD *)&v71 + 1) = &__block_descriptor_tmp_81;
    if (v18)
    {
      cf[0] = _Block_copy(v18);
      cf[1] = 0;
      dispatch_async(v59, buf);
      v60 = cf[1];
      if (!cf[1])
        goto LABEL_76;
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      dispatch_async(v59, buf);
      v60 = cf[1];
      if (!cf[1])
      {
LABEL_76:
        if (cf[0])
          _Block_release(cf[0]);
        if (v18)
          _Block_release(v18);
        return;
      }
    }
    CFRelease(v60);
    goto LABEL_76;
  }
  if (a3 == 255)
    v19 = 1;
  else
    v19 = a3;
  if (a3 == 255)
    v20 = 0;
  else
    v20 = a2;
  v21 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v21 || (v22 = *(_QWORD *)(a1 + 72), (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v73 = v29;
  *(_OWORD *)__p = v29;
  v71 = v29;
  *(_OWORD *)cf = v29;
  *(_OWORD *)buf = v29;
  AriSdk::ARI_CsiIceArfcnLockReq_SDK::ARI_CsiIceArfcnLockReq_SDK((AriSdk::ARI_CsiIceArfcnLockReq_SDK *)buf);
  v30 = operator new(4uLL);
  *v30 = v20;
  v31 = __p[0];
  __p[0] = v30;
  if (v31)
    operator delete(v31);
  v32 = operator new(4uLL);
  *v32 = v19;
  v33 = __p[1];
  __p[1] = v32;
  if (v33)
    operator delete(v33);
  v34 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)a4)
  {
    v35 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    v36 = *(NSObject **)(a4 + 8);
    if (!v36)
      goto LABEL_36;
    goto LABEL_35;
  }
  v35 = 0;
  v36 = *(NSObject **)(a4 + 8);
  if (v36)
  {
LABEL_35:
    dispatch_retain(v36);
    goto LABEL_36;
  }
  do
LABEL_36:
    v37 = __ldxr(p_shared_weak_owners);
  while (__stxr(v37 + 1, p_shared_weak_owners));
  v38 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v38->__shared_owners_ = 0u;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__vftable = (std::__shared_weak_count_vtbl *)off_24F0382F0;
  v38[1].__vftable = v35;
  v38[1].__shared_owners_ = (uint64_t)v36;
  v38[1].__shared_weak_owners_ = v22;
  v38[2].__vftable = (std::__shared_weak_count_vtbl *)v24;
  LODWORD(v38[2].__shared_owners_) = v19;
  v40 = (const void *)MEMORY[0x24BDAC760];
  v63 = MEMORY[0x24BDAC760];
  v64 = 1174405120;
  v65 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v66 = &__block_descriptor_tmp_139;
  v67 = v38 + 1;
  v68 = v38;
  do
    v41 = __ldxr(v39);
  while (__stxr(v41 + 1, v39));
  aBlock[0] = v40;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v63;
  v42 = _Block_copy(aBlock);
  v43 = v68;
  if (v68)
  {
    v44 = (unint64_t *)&v68->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  do
    v46 = __ldaxr(v39);
  while (__stlxr(v46 - 1, v39));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  *(_QWORD *)&v47 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61[0] = v47;
  v61[1] = v47;
  v62 = 0xAAAAAAAAAAAAAAAALL;
  v48 = *(std::__shared_weak_count **)(v34 + 16);
  v63 = *(_QWORD *)(v34 + 8);
  if (!v48)
  {
    v64 = 0;
LABEL_83:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v64 = (uint64_t)std::__shared_weak_count::lock(v48);
  if (!v64)
    goto LABEL_83;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v49 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v50 = (unint64_t *)(v64 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  aBlock[0] = v42;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v61);
  MEMORY[0x22E2A3478](buf);
  std::__shared_weak_count::__release_weak(v24);
}

void sub_227ADED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::setARFCN_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int Int;
  int v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[5];
  void *v18;
  NSObject *v19;
  _QWORD v20[2];
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[5];
  void *v26;
  dispatch_object_t object;

  v6 = dispatch_group_create();
  v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3802000000;
  v25[3] = __Block_byref_object_copy__30;
  v25[4] = __Block_byref_object_dispose__31;
  v26 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = *(void **)a3;
  if (*(_QWORD *)a3)
    v8 = _Block_copy(v8);
  v9 = *(NSObject **)(a3 + 8);
  v26 = v8;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = MEMORY[0x24BDAC760];
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_24F0372E0;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  aBlock[4] = v25;
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(a1 + 88);
  if (v12)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v23 = (unint64_t)v11;
  v24 = (unint64_t)v12;
  v20[0] = 0xAAAAAAAAAAAAAAAALL;
  v20[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v20, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v20, (const __CFString *)*MEMORY[0x24BED3868]);
  v14 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v20, (const __CFString *)*MEMORY[0x24BED3798]);
  if (v11)
  {
    v15 = _Block_copy(v11);
    v18 = v15;
    v19 = v12;
    if (!v12)
      goto LABEL_14;
    goto LABEL_13;
  }
  v15 = 0;
  v18 = 0;
  v19 = v12;
  if (v12)
LABEL_13:
    dispatch_retain(v12);
LABEL_14:
  radio::ARICommandDriver::setARFCNWithRAT_sync(a1, Int, v14, (uint64_t)&v18);
  if (v12)
    dispatch_release(v12);
  if (v15)
    _Block_release(v15);
  v16 = *(NSObject **)(a1 + 88);
  v17[0] = v10;
  v17[1] = 0x40000000;
  v17[2] = ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_40;
  v17[3] = &unk_24F037318;
  v17[4] = v25;
  dispatch_group_notify(v7, v16, v17);
  MEMORY[0x22E2A2E9C](v20);
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v25, 8);
  if (object)
    dispatch_release(object);
  if (v26)
    _Block_release(v26);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
}

void sub_227ADF0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,char a24,uint64_t a25,char a26)
{
  NSObject *v26;
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a14);
  MEMORY[0x22E2A2E9C](&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a24);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(&a26, 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 + 40);
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
    dispatch_release(v26);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  const void *v10;
  NSObject *v11;
  _QWORD v12[4];
  void *aBlock;
  CFTypeRef cf;

  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const void **)(v5 + 40);
    if (v6)
    {
      if (*(_QWORD *)(v5 + 48))
      {
        if (v2 && (CFRetain(*a2), (v6 = *(const void **)(v5 + 40)) == 0))
          v7 = 0;
        else
          v7 = _Block_copy(v6);
        v8 = *(NSObject **)(v5 + 48);
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v12[3] = &__block_descriptor_tmp_81;
        if (v7)
        {
          aBlock = _Block_copy(v7);
          cf = v2;
          if (!v2)
            goto LABEL_15;
        }
        else
        {
          aBlock = 0;
          cf = v2;
          if (!v2)
          {
LABEL_15:
            dispatch_async(v8, v12);
            if (cf)
              CFRelease(cf);
            if (aBlock)
              _Block_release(aBlock);
            if (v7)
              _Block_release(v7);
            if (v2)
              CFRelease(v2);
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v10 = *(const void **)(v9 + 40);
            *(_QWORD *)(v9 + 40) = 0;
            if (v10)
              _Block_release(v10);
            v11 = *(NSObject **)(v9 + 48);
            *(_QWORD *)(v9 + 48) = 0;
            if (v11)
              dispatch_release(v11);
            return;
          }
        }
        CFRetain(v2);
        goto LABEL_15;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_40(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[4];
  void *aBlock;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(_QWORD *)(v1 + 48))
    return;
  v3 = _Block_copy(v2);
  v4 = v3;
  v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_81;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    cf = 0;
    dispatch_async(v5, v7);
    v6 = cf;
    if (!cf)
      goto LABEL_8;
    goto LABEL_7;
  }
  aBlock = 0;
  cf = 0;
  dispatch_async(v5, v7);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
}

uint64_t radio::ARICommandDriver::setCA_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  int v5;
  const __CFString *v6;
  NSObject *v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  int v19;
  _DWORD *v20;
  void *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  NSObject *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  const void *v28;
  unint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  int Int;
  NSObject *v42;
  const void *v43;
  _OWORD v45[2];
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, const unsigned __int8 *);
  void *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v47[0] = 0xAAAAAAAAAAAAAAAALL;
  v47[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v47, *a2);
  v5 = *(_DWORD *)(a1 + 420);
  v6 = (const __CFString *)*MEMORY[0x24BED3878];
  if (v5 == ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v47, (const __CFString *)*MEMORY[0x24BED3878]))
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(_DWORD *)(a1 + 420);
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v47, v6);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v40;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = Int;
      _os_log_debug_impl(&dword_227A72000, v7, OS_LOG_TYPE_DEBUG, "#D fCAEnabled: %d == %d\n", buf, 0xEu);
      v8 = *(const void **)a3;
      if (*(_QWORD *)a3)
        goto LABEL_4;
    }
    else
    {
      v8 = *(const void **)a3;
      if (*(_QWORD *)a3)
      {
LABEL_4:
        v9 = _Block_copy(v8);
        goto LABEL_43;
      }
    }
    v9 = 0;
LABEL_43:
    v42 = *(NSObject **)(a3 + 8);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 1174405120;
    *(_QWORD *)&v56 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((_QWORD *)&v56 + 1) = &__block_descriptor_tmp_81;
    if (v9)
    {
      v57 = (unint64_t)_Block_copy(v9);
      dispatch_async(v42, buf);
      v43 = (const void *)*((_QWORD *)&v57 + 1);
      if (!*((_QWORD *)&v57 + 1))
        goto LABEL_48;
    }
    else
    {
      v57 = 0uLL;
      dispatch_async(v42, buf);
      v43 = (const void *)*((_QWORD *)&v57 + 1);
      if (!*((_QWORD *)&v57 + 1))
      {
LABEL_48:
        if ((_QWORD)v57)
          _Block_release((const void *)v57);
        if (v9)
          _Block_release(v9);
        return MEMORY[0x22E2A2E9C](v47);
      }
    }
    CFRelease(v43);
    goto LABEL_48;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v59 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57 = v18;
  v58 = v18;
  *(_OWORD *)buf = v18;
  v56 = v18;
  AriSdk::ARI_CsiIceCaEnableReq_SDK::ARI_CsiIceCaEnableReq_SDK((AriSdk::ARI_CsiIceCaEnableReq_SDK *)buf);
  v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v47, v6);
  v20 = operator new(4uLL);
  *v20 = v19;
  v21 = (void *)v59;
  v59 = (unint64_t)v20;
  if (v21)
    operator delete(v21);
  v22 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)a3)
  {
    v23 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    v24 = *(NSObject **)(a3 + 8);
    if (!v24)
      goto LABEL_18;
    goto LABEL_17;
  }
  v23 = 0;
  v24 = *(NSObject **)(a3 + 8);
  if (v24)
  {
LABEL_17:
    dispatch_retain(v24);
    goto LABEL_18;
  }
  do
LABEL_18:
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v26->__shared_owners_ = 0u;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_24F038370;
  v26[1].__vftable = v23;
  v26[1].__shared_owners_ = (uint64_t)v24;
  v26[1].__shared_weak_owners_ = v11;
  v26[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
  v28 = (const void *)MEMORY[0x24BDAC760];
  v48 = MEMORY[0x24BDAC760];
  v49 = 1174405120;
  v50 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v51 = &__block_descriptor_tmp_143;
  v52 = v26 + 1;
  v53 = v26;
  do
    v29 = __ldxr(v27);
  while (__stxr(v29 + 1, v27));
  aBlock[0] = v28;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v48;
  v30 = _Block_copy(aBlock);
  v31 = v53;
  if (v53)
  {
    v32 = (unint64_t *)&v53->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v34 = __ldaxr(v27);
  while (__stlxr(v34 - 1, v27));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[0] = v35;
  v45[1] = v35;
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v36 = *(std::__shared_weak_count **)(v22 + 16);
  v48 = *(_QWORD *)(v22 + 8);
  if (!v36)
  {
    v49 = 0;
LABEL_55:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v49 = (uint64_t)std::__shared_weak_count::lock(v36);
  if (!v49)
    goto LABEL_55;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v37 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v38 = (unint64_t *)(v49 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  aBlock[0] = v30;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v45);
  MEMORY[0x22E2A3418](buf);
  std::__shared_weak_count::__release_weak(v13);
  return MEMORY[0x22E2A2E9C](v47);
}

void sub_227ADF880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::setFieldTestConfig(uint64_t a1, const void **a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  const void *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;

  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_45;
  v9[4] = a1;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = *a2;
  cf = v8;
  if (v8)
    CFRetain(v8);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v9);
  if (cf)
    CFRelease(cf);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const __CFDictionary *v10;
  void *v11;
  const __CFDictionary *v12;
  void *v13;
  const __CFDictionary *v14;
  void *v15;
  const __CFDictionary *v16;
  void *v17;
  const __CFDictionary *v18;
  void *v19;
  NSObject *v20;
  _QWORD block[5];
  void *v22;
  NSObject *v23;
  const __CFDictionary *v24;
  void *v25;
  NSObject *v26;
  const __CFDictionary *v27;
  void *v28;
  NSObject *v29;
  const __CFDictionary *v30;
  void *v31;
  NSObject *v32;
  const __CFDictionary *v33;
  void *v34;
  NSObject *v35;
  const __CFDictionary *v36;
  _QWORD aBlock[5];
  dispatch_group_t group;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[5];
  const void *v42;
  dispatch_object_t v43;

  v2 = a1[4];
  v3 = dispatch_group_create();
  v4 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v4);
  }
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x3802000000;
  v41[3] = __Block_byref_object_copy__30;
  v41[4] = __Block_byref_object_dispose__31;
  v42 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v42 = v5;
  v43 = v6;
  if (v6)
    dispatch_retain(v6);
  v7 = MEMORY[0x24BDAC760];
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2;
  aBlock[3] = &unk_24F037340;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  aBlock[4] = v41;
  v8 = _Block_copy(aBlock);
  v9 = *(NSObject **)(v2 + 88);
  if (v9)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v39 = (unint64_t)v8;
  v40 = (unint64_t)v9;
  v10 = (const __CFDictionary *)a1[7];
  v36 = v10;
  if (v10)
    CFRetain(v10);
  if (v8)
  {
    v11 = _Block_copy(v8);
    v34 = v11;
    v35 = v9;
    if (!v9)
      goto LABEL_16;
    goto LABEL_15;
  }
  v11 = 0;
  v34 = 0;
  v35 = v9;
  if (v9)
LABEL_15:
    dispatch_retain(v9);
LABEL_16:
  radio::ARICommandDriver::setRxDiversityState_sync(v2, &v36, (uint64_t)&v34);
  if (v9)
    dispatch_release(v9);
  if (v11)
    _Block_release(v11);
  if (v10)
    CFRelease(v10);
  v12 = (const __CFDictionary *)a1[7];
  v33 = v12;
  if (v12)
    CFRetain(v12);
  if (v8)
  {
    v13 = _Block_copy(v8);
    v31 = v13;
    v32 = v9;
    if (!v9)
      goto LABEL_27;
    goto LABEL_26;
  }
  v13 = 0;
  v31 = 0;
  v32 = v9;
  if (v9)
LABEL_26:
    dispatch_retain(v9);
LABEL_27:
  radio::ARICommandDriver::setAntennaTxPort_sync(v2, &v33, (uint64_t)&v31);
  if (v9)
    dispatch_release(v9);
  if (v13)
    _Block_release(v13);
  if (v12)
    CFRelease(v12);
  v14 = (const __CFDictionary *)a1[7];
  v30 = v14;
  if (v14)
    CFRetain(v14);
  if (v8)
  {
    v15 = _Block_copy(v8);
    v28 = v15;
    v29 = v9;
    if (!v9)
      goto LABEL_38;
    goto LABEL_37;
  }
  v15 = 0;
  v28 = 0;
  v29 = v9;
  if (v9)
LABEL_37:
    dispatch_retain(v9);
LABEL_38:
  radio::ARICommandDriver::setARTD_sync(v2, &v30, (uint64_t)&v28);
  if (v9)
    dispatch_release(v9);
  if (v15)
    _Block_release(v15);
  if (v14)
    CFRelease(v14);
  v16 = (const __CFDictionary *)a1[7];
  v27 = v16;
  if (v16)
    CFRetain(v16);
  if (v8)
  {
    v17 = _Block_copy(v8);
    v25 = v17;
    v26 = v9;
    if (!v9)
      goto LABEL_49;
    goto LABEL_48;
  }
  v17 = 0;
  v25 = 0;
  v26 = v9;
  if (v9)
LABEL_48:
    dispatch_retain(v9);
LABEL_49:
  radio::ARICommandDriver::setARFCN_sync(v2, &v27, (uint64_t)&v25);
  if (v9)
    dispatch_release(v9);
  if (v17)
    _Block_release(v17);
  if (v16)
    CFRelease(v16);
  v18 = (const __CFDictionary *)a1[7];
  v24 = v18;
  if (v18)
    CFRetain(v18);
  if (v8)
  {
    v19 = _Block_copy(v8);
    v22 = v19;
    v23 = v9;
    if (!v9)
      goto LABEL_60;
    goto LABEL_59;
  }
  v19 = 0;
  v22 = 0;
  v23 = v9;
  if (v9)
LABEL_59:
    dispatch_retain(v9);
LABEL_60:
  radio::ARICommandDriver::setCA_sync(v2, &v24, (uint64_t)&v22);
  if (v9)
    dispatch_release(v9);
  if (v19)
    _Block_release(v19);
  if (v18)
    CFRelease(v18);
  v20 = *(NSObject **)(v2 + 88);
  block[0] = v7;
  block[1] = 0x40000000;
  block[2] = ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_43;
  block[3] = &unk_24F037378;
  block[4] = v41;
  dispatch_group_notify(v4, v20, block);
  if (v9)
    dispatch_release(v9);
  if (v8)
    _Block_release(v8);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose(v41, 8);
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
    dispatch_release(v4);
  }
}

void sub_227ADFF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,dispatch_group_t group)
{
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v48 - 152);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  _Block_object_dispose((const void *)(v48 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v47 + 40);
  if (v46)
  {
    dispatch_group_leave(v46);
    dispatch_release(v46);
    dispatch_release(v46);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  const void *v10;
  NSObject *v11;
  _QWORD v12[4];
  void *aBlock;
  CFTypeRef cf;

  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const void **)(v5 + 40);
    if (v6)
    {
      if (*(_QWORD *)(v5 + 48))
      {
        if (v2 && (CFRetain(*a2), (v6 = *(const void **)(v5 + 40)) == 0))
          v7 = 0;
        else
          v7 = _Block_copy(v6);
        v8 = *(NSObject **)(v5 + 48);
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 1174405120;
        v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v12[3] = &__block_descriptor_tmp_81;
        if (v7)
        {
          aBlock = _Block_copy(v7);
          cf = v2;
          if (!v2)
            goto LABEL_15;
        }
        else
        {
          aBlock = 0;
          cf = v2;
          if (!v2)
          {
LABEL_15:
            dispatch_async(v8, v12);
            if (cf)
              CFRelease(cf);
            if (aBlock)
              _Block_release(aBlock);
            if (v7)
              _Block_release(v7);
            if (v2)
              CFRelease(v2);
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v10 = *(const void **)(v9 + 40);
            *(_QWORD *)(v9 + 40) = 0;
            if (v10)
              _Block_release(v10);
            v11 = *(NSObject **)(v9 + 48);
            *(_QWORD *)(v9 + 48) = 0;
            if (v11)
              dispatch_release(v11);
            return;
          }
        }
        CFRetain(v2);
        goto LABEL_15;
      }
    }
  }
}

void ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_43(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[4];
  void *aBlock;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(_QWORD *)(v1 + 48))
    return;
  v3 = _Block_copy(v2);
  v4 = v3;
  v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_81;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    cf = 0;
    dispatch_async(v5, v7);
    v6 = cf;
    if (!cf)
      goto LABEL_8;
    goto LABEL_7;
  }
  aBlock = 0;
  cf = 0;
  dispatch_async(v5, v7);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
}

CFTypeRef __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;
  CFTypeRef result;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5)
    dispatch_retain(v5);
  result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;

  v2 = (const void *)a1[7];
  if (v2)
    CFRelease(v2);
  v3 = a1[6];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    _Block_release(v4);
}

void radio::ARICommandDriver::enableDumpLogsInd(radio::ARICommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "enableDumpLogsInd";
    _os_log_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::ARICommandDriver::disableDumpLogsInd(radio::ARICommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "disableDumpLogsInd";
    _os_log_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::ARICommandDriver::simTestCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  unint64_t v18;
  _QWORD v19[5];
  std::string __p;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 1174405120;
  v19[2] = ___ZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_47_1;
  v19[4] = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v16 = *(void **)a3;
  if (*(_QWORD *)a3)
    v16 = _Block_copy(v16);
  v17 = *(NSObject **)(a3 + 8);
  aBlock = v16;
  object = v17;
  if (v17)
    dispatch_retain(v17);
  v23 = v7;
  v24 = v11;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v19);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_227AE0578(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t *v6;
  void *v7;
  int SimSlotInfo;
  _DWORD *v9;
  void *v10;
  _BYTE *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  const char *v28;
  void *p_block;
  char *v30;
  __int128 *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_weak_owners;
  unint64_t v43;
  void *v44;
  NSObject *v45;
  const void *v46;
  CFTypeRef v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void (*v54)(uint64_t);
  NSObject *v55;
  std::string *v56;
  const void *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  uint64_t v72;
  void *block;
  std::__shared_weak_count *v74;
  void (*v75)(uint64_t);
  dispatch_object_t object;
  std::string v77;
  uint64_t v78;
  _OWORD v79[2];
  unint64_t v80;
  void *v81;
  __int128 v82;
  _OWORD v83[4];
  void *__p[2];
  __int128 v85;
  unint64_t v86;
  CFTypeRef v87;
  uint64_t v88;
  void (*v89)(uint64_t, const unsigned __int8 *);
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  const void *aBlock[6];

  v2 = *(_QWORD *)(a1 + 32);
  v86 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v3;
  v85 = v3;
  v83[2] = v3;
  v83[3] = v3;
  v83[0] = v3;
  v83[1] = v3;
  AriSdk::ARI_IBISimTestReq_SDK::ARI_IBISimTestReq_SDK((AriSdk::ARI_IBISimTestReq_SDK *)v83);
  if (*(char *)(a1 + 63) < 0)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 - 71 >= 0xFFFFFFFFFFFFFFBALL)
    {
LABEL_6:
      v5 = operator new(4uLL);
      v6 = (uint64_t *)(a1 + 40);
      *v5 = 0;
      v7 = __p[0];
      __p[0] = v5;
      if (v7)
        operator delete(v7);
      SimSlotInfo = radio::CommandDriver::getSimSlotInfo();
      if (SimSlotInfo != 1)
      {
        if (SimSlotInfo != 2)
          goto LABEL_13;
        v9 = operator new(4uLL);
        *v9 = 1;
        v10 = __p[0];
        __p[0] = v9;
        if (v10)
          operator delete(v10);
      }
      v4 -= 2;
LABEL_13:
      v72 = v2;
      v11 = operator new(1uLL);
      *v11 = v4;
      v13 = __p[1];
      __p[1] = v11;
      if (v13)
        operator delete(v13);
      if (v4)
      {
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v17 = a1 + 40;
          if (*(char *)(a1 + 63) < 0)
          {
            v17 = *v6;
            v19 = (_BYTE *)*((_QWORD *)&v85 + 1);
            v18 = (_BYTE *)v85;
            v20 = *((_QWORD *)&v85 + 1) - v85;
            if (*((_QWORD *)&v85 + 1) - (_QWORD)v85 >= 0x46uLL)
            {
LABEL_35:
              AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v12);
              p_block = &block;
              if (SHIBYTE(v75) < 0)
                p_block = block;
              Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v28, p_block, 371);
              if (SHIBYTE(v75) < 0)
                operator delete(block);
              goto LABEL_19;
            }
          }
          else
          {
            v19 = (_BYTE *)*((_QWORD *)&v85 + 1);
            v18 = (_BYTE *)v85;
            v20 = *((_QWORD *)&v85 + 1) - v85;
            if (*((_QWORD *)&v85 + 1) - (_QWORD)v85 >= 0x46uLL)
              goto LABEL_35;
          }
          v21 = *(_BYTE *)(v17 + v14);
          if ((unint64_t)v19 >= v86)
            break;
          *v19 = v21;
          v16 = (uint64_t)(v19 + 1);
LABEL_18:
          *((_QWORD *)&v85 + 1) = v16;
LABEL_19:
          v14 = ++v15;
          if (v4 <= v15)
            goto LABEL_53;
        }
        v22 = v86 - (_QWORD)v18;
        if (2 * (v86 - (unint64_t)v18) <= v20 + 1)
          v23 = v20 + 1;
        else
          v23 = 2 * v22;
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v25 = (char *)operator new(v24);
        v26 = &v25[v20];
        v25[v20] = v21;
        v16 = (uint64_t)&v25[v20 + 1];
        if (v19 == v18)
        {
LABEL_51:
          *(_QWORD *)&v85 = v26;
          *((_QWORD *)&v85 + 1) = &v25[v20 + 1];
          v86 = (unint64_t)&v25[v24];
          if (v19)
            operator delete(v19);
          goto LABEL_18;
        }
        if (v20 >= 8 && (unint64_t)(v18 - v25) >= 0x20)
        {
          if (v20 < 0x20)
          {
            v27 = 0;
            goto LABEL_43;
          }
          v27 = v20 & 0xFFFFFFFFFFFFFFE0;
          v30 = &v25[v20 - 16];
          v31 = (__int128 *)(v19 - 16);
          v32 = v20 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v33 = *v31;
            *((_OWORD *)v30 - 1) = *(v31 - 1);
            *(_OWORD *)v30 = v33;
            v30 -= 32;
            v31 -= 2;
            v32 -= 32;
          }
          while (v32);
          if (v20 == v27)
            goto LABEL_50;
          if ((v20 & 0x18) != 0)
          {
LABEL_43:
            v26 -= v20 & 0xFFFFFFFFFFFFFFF8;
            v34 = &v25[&v19[-v27] - v18 - 8];
            v35 = (uint64_t *)&v19[-v27 - 8];
            v36 = v27 - (v20 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v37 = *v35--;
              *(_QWORD *)v34 = v37;
              v34 -= 8;
              v36 += 8;
            }
            while (v36);
            v19 -= v20 & 0xFFFFFFFFFFFFFFF8;
            if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_50;
            goto LABEL_48;
          }
          v26 -= v27;
          v19 -= v27;
        }
LABEL_48:
        v38 = v26 - 1;
        do
        {
          v39 = *--v19;
          *v38-- = v39;
        }
        while (v19 != v18);
LABEL_50:
        v19 = v18;
        v26 = v25;
        goto LABEL_51;
      }
LABEL_53:
      v40 = *(_QWORD *)(v72 + 312);
      v41 = *(std::__shared_weak_count **)(a1 + 88);
      block = *(void **)(a1 + 80);
      v74 = v41;
      if (v41)
      {
        p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
        do
          v43 = __ldxr(p_shared_weak_owners);
        while (__stxr(v43 + 1, p_shared_weak_owners));
      }
      v44 = *(void **)(a1 + 64);
      if (v44)
        v44 = _Block_copy(v44);
      v45 = *(NSObject **)(a1 + 72);
      v75 = (void (*)(uint64_t))v44;
      object = v45;
      if (v45)
        dispatch_retain(v45);
      if (*(char *)(a1 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
        v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      }
      v78 = v72;
      v49 = (std::__shared_weak_count *)operator new(0x58uLL);
      v49->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      v49->__shared_weak_owners_ = 0;
      v49->__vftable = (std::__shared_weak_count_vtbl *)off_24F0383F0;
      v51 = v74;
      v49[1].__vftable = (std::__shared_weak_count_vtbl *)block;
      v49[1].__shared_owners_ = (uint64_t)v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_weak_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54 = v75;
      if (v75)
        v54 = (void (*)(uint64_t))_Block_copy(v75);
      v55 = object;
      v49[1].__shared_weak_owners_ = (uint64_t)v54;
      v49[2].__vftable = (std::__shared_weak_count_vtbl *)v55;
      if (v55)
        dispatch_retain(v55);
      v56 = (std::string *)&v49[2].__shared_owners_;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v56, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v49[3].__vftable = (std::__shared_weak_count_vtbl *)v77.__r_.__value_.__r.__words[2];
      }
      v49[3].__shared_owners_ = v78;
      v57 = (const void *)MEMORY[0x24BDAC760];
      v87 = (CFTypeRef)MEMORY[0x24BDAC760];
      v88 = 1174405120;
      v89 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSF_IK14__CFDictionaryEEEEEEUb6_E4__19vEENSB_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      v90 = &__block_descriptor_tmp_150;
      v91 = v49 + 1;
      v92 = v49;
      do
        v58 = __ldxr(p_shared_owners);
      while (__stxr(v58 + 1, p_shared_owners));
      aBlock[0] = v57;
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
      aBlock[3] = &unk_24F037988;
      aBlock[4] = &v87;
      v59 = _Block_copy(aBlock);
      v60 = v92;
      if (v92)
      {
        v61 = (unint64_t *)&v92->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      do
        v63 = __ldaxr(p_shared_owners);
      while (__stlxr(v63 - 1, p_shared_owners));
      if (v63)
      {
        if (__p[0])
          goto LABEL_91;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (__p[0])
          goto LABEL_91;
      }
      v64 = operator new(4uLL);
      *v64 = 0;
      __p[0] = v64;
LABEL_91:
      v80 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v65 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v79[0] = v65;
      v79[1] = v65;
      v66 = *(std::__shared_weak_count **)(v40 + 16);
      v87 = *(CFTypeRef *)(v40 + 8);
      if (v66)
      {
        v88 = (uint64_t)std::__shared_weak_count::lock(v66);
        if (v88)
        {
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v67 = (std::__shared_weak_count *)v88;
          if (v88)
          {
            v68 = (unint64_t *)(v88 + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          aBlock[0] = v59;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          MEMORY[0x22E2A2FF8](v79);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          if (object)
            dispatch_release(object);
          if (v75)
            _Block_release(v75);
          if (v74)
            std::__shared_weak_count::__release_weak(v74);
          return MEMORY[0x22E2A31D8](v83);
        }
      }
      else
      {
        v88 = 0;
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  else if (*(unsigned __int8 *)(a1 + 63) - 71 > 0xFFFFFFB9)
  {
    v4 = *(unsigned __int8 *)(a1 + 63);
    goto LABEL_6;
  }
  v87 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v81 = operator new(0x20uLL);
  v82 = xmmword_227B1D2D0;
  strcpy((char *)v81, "Invalid SIM test command");
  CreateError();
  operator delete(v81);
  v46 = *(const void **)(a1 + 64);
  if (v46 && *(_QWORD *)(a1 + 72))
  {
    v47 = v87;
    if (v87 && (CFRetain(v87), (v46 = *(const void **)(a1 + 64)) == 0))
      v48 = 0;
    else
      v48 = _Block_copy(v46);
    v70 = *(NSObject **)(a1 + 72);
    block = (void *)MEMORY[0x24BDAC760];
    v74 = (std::__shared_weak_count *)1174405120;
    v75 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    object = (dispatch_object_t)&__block_descriptor_tmp_89;
    if (v48)
    {
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v48);
      v77.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
      if (!v47)
        goto LABEL_114;
    }
    else
    {
      v77.__r_.__value_.__r.__words[0] = 0;
      v77.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
      if (!v47)
      {
LABEL_114:
        v77.__r_.__value_.__r.__words[2] = 0;
        dispatch_async(v70, &block);
        if (v77.__r_.__value_.__r.__words[2])
          CFRelease((CFTypeRef)v77.__r_.__value_.__r.__words[2]);
        if (v77.__r_.__value_.__l.__size_)
          CFRelease((CFTypeRef)v77.__r_.__value_.__l.__size_);
        if (v77.__r_.__value_.__r.__words[0])
          _Block_release(v77.__r_.__value_.__l.__data_);
        if (v48)
          _Block_release(v48);
        if (v47)
          CFRelease(v47);
        goto LABEL_124;
      }
    }
    CFRetain(v47);
    goto LABEL_114;
  }
LABEL_124:
  if (v87)
    CFRelease(v87);
  return MEMORY[0x22E2A31D8](v83);
}

void sub_227AE0D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  MEMORY[0x22E2A31D8](&a35);
  _Unwind_Resume(a1);
}

uint64_t _ZZZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEEEUb6_EN4__19D1Ev(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    _Block_release(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = (std::string *)(a1 + 5);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(void **)(a2 + 64);
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(void **)(a2 + 64);
  if (v6)
LABEL_5:
    v6 = _Block_copy(v6);
LABEL_6:
  v7 = *(NSObject **)(a2 + 72);
  a1[8] = v6;
  a1[9] = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 72);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(a1 + 64);
  if (v4)
    _Block_release(v4);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void radio::ARICommandDriver::getFirmwareNonce(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getRFSelfTestNonce(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::setRFSelfTestTicket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  CFTypeRef v8;
  void *__p[2];
  char v10;
  CFTypeRef cf;
  __int128 buf;
  void (*v13)(uint64_t);
  void *v14;
  void *aBlock;
  CFTypeRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "setRFSelfTestTicket";
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&buf, 0xCu);
  }
  if (*(_QWORD *)a3 && *(_QWORD *)(a3 + 8))
  {
    v10 = 13;
    strcpy((char *)__p, "Not supported");
    CreateError();
    if (*(_QWORD *)a3)
      v5 = _Block_copy(*(const void **)a3);
    else
      v5 = 0;
    v6 = *(NSObject **)(a3 + 8);
    *(_QWORD *)&buf = MEMORY[0x24BDAC760];
    *((_QWORD *)&buf + 1) = 1174405120;
    v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    v14 = &__block_descriptor_tmp_81;
    if (v5)
    {
      v7 = _Block_copy(v5);
      v8 = cf;
      aBlock = v7;
      v16 = cf;
      if (!cf)
        goto LABEL_13;
    }
    else
    {
      v8 = cf;
      aBlock = 0;
      v16 = cf;
      if (!cf)
      {
LABEL_13:
        dispatch_async(v6, &buf);
        if (v16)
          CFRelease(v16);
        if (aBlock)
          _Block_release(aBlock);
        if (v5)
          _Block_release(v5);
        if (cf)
          CFRelease(cf);
        if (v10 < 0)
          operator delete(__p[0]);
        return;
      }
    }
    CFRetain(v8);
    goto LABEL_13;
  }
}

void sub_227AE148C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::detachRequest(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _DWORD *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  NSObject *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  const void *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _OWORD v36[2];
  unint64_t v37;
  _OWORD v38[4];
  void *__p;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, const unsigned __int8 *);
  void *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  const void *aBlock[5];

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v38[2] = v14;
  v38[3] = v14;
  v38[0] = v14;
  v38[1] = v14;
  AriSdk::ARI_IBINetDetachReq_SDK::ARI_IBINetDetachReq_SDK((AriSdk::ARI_IBINetDetachReq_SDK *)v38);
  v15 = operator new(4uLL);
  *v15 = a2;
  v16 = __p;
  __p = v15;
  if (v16)
    operator delete(v16);
  v17 = a1[39];
  if (*(_QWORD *)a3)
  {
    v18 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    v19 = *(NSObject **)(a3 + 8);
    if (!v19)
      goto LABEL_14;
    goto LABEL_13;
  }
  v18 = 0;
  v19 = *(NSObject **)(a3 + 8);
  if (v19)
  {
LABEL_13:
    dispatch_retain(v19);
    goto LABEL_14;
  }
  do
LABEL_14:
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v21->__shared_owners_ = 0u;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F0385A0;
  v21[1].__vftable = v18;
  v21[1].__shared_owners_ = (uint64_t)v19;
  v21[1].__shared_weak_owners_ = v7;
  v21[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v23 = (const void *)MEMORY[0x24BDAC760];
  v40 = MEMORY[0x24BDAC760];
  v41 = 1174405120;
  v42 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v43 = &__block_descriptor_tmp_159;
  v44 = v21 + 1;
  v45 = v21;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  aBlock[0] = v23;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v40;
  v25 = _Block_copy(aBlock);
  v26 = v45;
  if (v45)
  {
    v27 = (unint64_t *)&v45->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  do
    v29 = __ldaxr(v22);
  while (__stlxr(v29 - 1, v22));
  if (v29)
  {
    if (__p)
      goto LABEL_30;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (__p)
      goto LABEL_30;
  }
  v30 = operator new(4uLL);
  *v30 = 0;
  __p = v30;
LABEL_30:
  v37 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v31;
  v36[1] = v31;
  v32 = *(std::__shared_weak_count **)(v17 + 16);
  v40 = *(_QWORD *)(v17 + 8);
  if (!v32)
  {
    v41 = 0;
LABEL_42:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v41 = (uint64_t)std::__shared_weak_count::lock(v32);
  if (!v41)
    goto LABEL_42;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v33 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v34 = (unint64_t *)(v41 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  aBlock[0] = v25;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v36);
  MEMORY[0x22E2A3304](v38);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227AE182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count *v19;
  uint64_t v20;
  const void *v22;

  v22 = *(const void **)(v20 - 120);
  if (v22)
    _Block_release(v22);
  MEMORY[0x22E2A2FF8](&a13);
  radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0((uint64_t)&a9);
  MEMORY[0x22E2A3304](&a19);
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

uint64_t radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::prepareRFSelfTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  CFTypeRef v8;
  void *__p[2];
  char v10;
  CFTypeRef cf;
  __int128 block;
  void (*v13)(uint64_t);
  void *v14;
  void *aBlock;
  CFTypeRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = "prepareRFSelfTest";
    _os_log_error_impl(&dword_227A72000, v4, OS_LOG_TYPE_ERROR, "%s: not supported!", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a3)
      return;
  }
  else if (!*(_QWORD *)a3)
  {
    return;
  }
  if (*(_QWORD *)(a3 + 8))
  {
    v10 = 13;
    strcpy((char *)__p, "Not supported");
    CreateError();
    if (*(_QWORD *)a3)
      v5 = _Block_copy(*(const void **)a3);
    else
      v5 = 0;
    v6 = *(NSObject **)(a3 + 8);
    *(_QWORD *)&block = MEMORY[0x24BDAC760];
    *((_QWORD *)&block + 1) = 1174405120;
    v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    v14 = &__block_descriptor_tmp_81;
    if (v5)
    {
      v7 = _Block_copy(v5);
      v8 = cf;
      aBlock = v7;
      v16 = cf;
      if (!cf)
        goto LABEL_12;
    }
    else
    {
      v8 = cf;
      aBlock = 0;
      v16 = cf;
      if (!cf)
      {
LABEL_12:
        dispatch_async(v6, &block);
        if (v16)
          CFRelease(v16);
        if (aBlock)
          _Block_release(aBlock);
        if (v5)
          _Block_release(v5);
        if (cf)
          CFRelease(cf);
        if (v10 < 0)
          operator delete(__p[0]);
        return;
      }
    }
    CFRetain(v8);
    goto LABEL_12;
  }
}

void sub_227AE1ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::sendRFSelfTestReq(_QWORD *a1, const void **a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *v23;
  NSObject *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    v14 = *a2;
    if (!v14)
      goto LABEL_12;
    goto LABEL_11;
  }
  v14 = *a2;
  if (v14)
LABEL_11:
    CFRetain(v14);
LABEL_12:
  if (!*(_QWORD *)a3)
  {
    v15 = 0;
    v16 = *(NSObject **)(a3 + 8);
    if (!v16)
      goto LABEL_17;
    goto LABEL_16;
  }
  v15 = _Block_copy(*(const void **)a3);
  v16 = *(NSObject **)(a3 + 8);
  if (v16)
  {
LABEL_16:
    dispatch_retain(v16);
    goto LABEL_17;
  }
  do
LABEL_17:
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = (std::__shared_weak_count *)a1[10];
  if (!v18 || (v19 = a1[9], (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  v22 = operator new(0x30uLL);
  *v22 = a1;
  v22[1] = v14;
  v22[2] = v15;
  v22[3] = v16;
  v22[4] = v7;
  v22[5] = v9;
  v23 = (unint64_t *)&v21->__shared_owners_;
  v24 = a1[11];
  do
    v25 = __ldxr(v23);
  while (__stxr(v25 + 1, v23));
  v26 = operator new(0x18uLL);
  *v26 = v22;
  v26[1] = v19;
  v26[2] = v21;
  dispatch_async_f(v24, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v27 = __ldaxr(v23);
  while (__stlxr(v27 - 1, v23));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void radio::ARICommandDriver::getPkHash(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getPersParams(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  const char *p_p;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  NSObject *v10;
  void *__p;
  __int128 v12;
  __int128 block;
  void (*v14)(_QWORD *);
  void *v15;
  void *aBlock;
  xpc_object_t v17;
  xpc_object_t object;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x20uLL);
  __p = v4;
  v12 = xmmword_227B1E5A0;
  strcpy((char *)v4, "Unsupported cmd: getPersParams");
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v4;
    _os_log_error_impl(&dword_227A72000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a2)
      goto LABEL_24;
  }
  else if (!*(_QWORD *)a2)
  {
    goto LABEL_24;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_24;
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v7 = xpc_string_create(p_p);
  if (!v7)
    v7 = xpc_null_create();
  v8 = xpc_null_create();
  if (*(_QWORD *)a2)
    v9 = _Block_copy(*(const void **)a2);
  else
    v9 = 0;
  v10 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
  v15 = &__block_descriptor_tmp_152;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    v17 = v7;
    if (v7)
      goto LABEL_14;
LABEL_17:
    v17 = xpc_null_create();
    object = v8;
    if (v8)
      goto LABEL_15;
LABEL_18:
    object = xpc_null_create();
    goto LABEL_19;
  }
  aBlock = 0;
  v17 = v7;
  if (!v7)
    goto LABEL_17;
LABEL_14:
  xpc_retain(v7);
  object = v8;
  if (!v8)
    goto LABEL_18;
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  object = 0;
  xpc_release(v17);
  v17 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
}

void sub_227AE2070(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::getChipID_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count_vtbl *on_zero_shared_weak;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  void (__cdecl *v15)(std::__shared_weak_count *__hidden);
  void *v16;
  NSObject *v17;
  unint64_t v18;
  xpc_object_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  const void *v22;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  xpc_object_t object;
  _OWORD v35[2];
  unint64_t v36;
  _OWORD v37[4];
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, const unsigned __int8 *);
  void *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  const void *aBlock[6];

  v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[2] = v14;
  v37[3] = v14;
  v37[0] = v14;
  v37[1] = v14;
  AriSdk::ARI_CsiSecGetChipIdReq_SDK::ARI_CsiSecGetChipIdReq_SDK((AriSdk::ARI_CsiSecGetChipIdReq_SDK *)v37);
  v15 = a1[7].__on_zero_shared_weak;
  if (*(_QWORD *)a3)
  {
    v16 = _Block_copy(*(const void **)a3);
    v17 = *(NSObject **)(a3 + 8);
    if (!v17)
      goto LABEL_12;
    goto LABEL_11;
  }
  v16 = 0;
  v17 = *(NSObject **)(a3 + 8);
  if (v17)
  {
LABEL_11:
    dispatch_retain(v17);
    goto LABEL_12;
  }
  do
LABEL_12:
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a2;
  if (*a2)
    xpc_retain(v19);
  else
    v19 = xpc_null_create();
  v20 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v20->__shared_owners_ = 0u;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_24F038750;
  v20[1].__vftable = a1;
  v20[1].__shared_owners_ = (uint64_t)v16;
  v20[1].__shared_weak_owners_ = (uint64_t)v17;
  v20[2].__vftable = on_zero_shared_weak;
  v20[2].__shared_owners_ = (uint64_t)v9;
  v20[2].__shared_weak_owners_ = (uint64_t)v19;
  object = xpc_null_create();
  v22 = (const void *)MEMORY[0x24BDAC760];
  v38 = MEMORY[0x24BDAC760];
  v39 = 1174405120;
  v40 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS4_6objectES8_EEEE3__0vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v41 = &__block_descriptor_tmp_169;
  v42 = v20 + 1;
  v43 = v20;
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  aBlock[0] = v22;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v38;
  v24 = _Block_copy(aBlock);
  v25 = v43;
  if (v43)
  {
    v26 = (unint64_t *)&v43->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v21);
  while (__stlxr(v28 - 1, v21));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[0] = v29;
  v35[1] = v29;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v30 = (std::__shared_weak_count *)*((_QWORD *)v15 + 2);
  v38 = *((_QWORD *)v15 + 1);
  if (!v30)
  {
    v39 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = (uint64_t)std::__shared_weak_count::lock(v30);
  if (!v39)
    goto LABEL_40;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v31 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v32 = (unint64_t *)(v39 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  aBlock[0] = v24;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v35);
  xpc_release(object);
  AriSdk::ARI_CsiSecGetChipIdReq_SDK::~ARI_CsiSecGetChipIdReq_SDK((AriSdk::ARI_CsiSecGetChipIdReq_SDK *)v37);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227AE2434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  const void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v6 = *(const void **)(v4 - 128);
  if (v6)
    _Block_release(v6);
  MEMORY[0x22E2A2FF8]((uint64_t *)va1);
  radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::~$_0((uint64_t)va);
  AriSdk::ARI_CsiSecGetChipIdReq_SDK::~ARI_CsiSecGetChipIdReq_SDK((AriSdk::ARI_CsiSecGetChipIdReq_SDK *)va2);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

xpc_object_t *xpc::dict::dict(xpc_object_t *a1, xpc_object_t object)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  return a1;
}

uint64_t radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(a1 + 8);
  if (v4)
    _Block_release(v4);
  return a1;
}

void radio::ARICommandDriver::getScrtPubK_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t on_zero_shared_weak;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  void (__cdecl *v13)(std::__shared_weak_count *__hidden);
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  xpc_object_t object;
  _OWORD v31[2];
  unint64_t v32;
  _OWORD v33[4];
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, const unsigned __int8 *);
  void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  const void *aBlock[5];

  v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v12;
  v33[3] = v12;
  v33[0] = v12;
  v33[1] = v12;
  AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::ARI_CsiSecReadSikPKeyReq_SDK((AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *)v33);
  v13 = a1[7].__on_zero_shared_weak;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = (std::__shared_weak_count_vtbl *)*a2;
  if (*a2)
    xpc_retain(v15);
  else
    v15 = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v16 = (std::__shared_weak_count *)operator new(0x38uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = a1;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_24F0387D0;
  v16[1].__shared_owners_ = on_zero_shared_weak;
  v16[1].__shared_weak_owners_ = (uint64_t)v7;
  v16[2].__vftable = v15;
  object = xpc_null_create();
  v18 = (const void *)MEMORY[0x24BDAC760];
  v34 = MEMORY[0x24BDAC760];
  v35 = 1174405120;
  v36 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v37 = &__block_descriptor_tmp_172;
  v38 = v16 + 1;
  v39 = v16;
  do
    v19 = __ldxr(v17);
  while (__stxr(v19 + 1, v17));
  aBlock[0] = v18;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v34;
  v20 = _Block_copy(aBlock);
  v21 = v39;
  if (v39)
  {
    v22 = (unint64_t *)&v39->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(v17);
  while (__stlxr(v24 - 1, v17));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v25;
  v31[1] = v25;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v26 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
  v34 = *((_QWORD *)v13 + 1);
  if (!v26)
  {
    v35 = 0;
LABEL_36:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v35 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v35)
    goto LABEL_36;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v27 = (std::__shared_weak_count *)v35;
  if (v35)
  {
    v28 = (unint64_t *)(v35 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  aBlock[0] = v20;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v31);
  xpc_release(object);
  AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::~ARI_CsiSecReadSikPKeyReq_SDK((AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *)v33);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_227AE2850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count *v19;
  uint64_t v20;
  const void *v22;

  v22 = *(const void **)(v20 - 120);
  if (v22)
    _Block_release(v22);
  MEMORY[0x22E2A2FF8](&a13);
  radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0::~$_0((uint64_t)&a9);
  AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::~ARI_CsiSecReadSikPKeyReq_SDK((AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *)&a19);
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

uint64_t radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void radio::ARICommandDriver::getFirmwareInfo(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getManifestStatus(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getManifest(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  _QWORD aBlock[5];
  void *v9;
  dispatch_object_t object;
  _QWORD v11[2];

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_65;
  aBlock[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 8);
  v9 = v4;
  object = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = _Block_copy(aBlock);
  v7 = *(NSObject **)(a1 + 88);
  if (v7)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v11[0] = v6;
  v11[1] = v7;
  radio::ARICommandDriver::getFirmwareInfo((_QWORD *)a1, (uint64_t)v11);
  if (v7)
    dispatch_release(v7);
  if (v6)
    _Block_release(v6);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
}

void sub_227AE2D28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(v2 - 48);
  dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t value;
  xpc_object_t *v11;
  char v12;
  const char *v13;
  xpc_object_t *v14;
  const __CFAllocator *v15;
  const char *v16;
  CFStringRef v17;
  __CFDictionary *Mutable;
  __CFDictionary *v19;
  uint64_t v20;
  const void *v21;
  const __CFData *v22;
  void *p_p;
  NSObject *v24;
  const void **v25;
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  void *v29;
  NSObject *v30;
  const void **v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void *v34;
  size_t v35;
  unint64_t v36;
  std::string *v37;
  NSObject *v38;
  xpc_object_t v39;
  const void *v40;
  void *v41;
  NSObject *v42;
  NSObject *v43;
  std::string *p_dst;
  NSObject *v45;
  const void **v46;
  xpc_object_t v47;
  xpc_object_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  std::string *v53;
  __int128 v54;
  BOOL File;
  xpc_object_t v56;
  xpc_object_t v57;
  NSObject *v58;
  std::string *v59;
  const void *v60;
  void *v61;
  NSObject *v62;
  void *v63;
  xpc_object_t v64;
  NSObject *v65;
  void *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  const UInt8 *BytePtr;
  CFIndex Length;
  xpc_object_t v71;
  const void *v72;
  void *v73;
  NSObject *v74;
  void *v75;
  std::string *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t object;
  std::string __dst;
  void *v87[4];
  CFDataRef theData;
  CFTypeRef v89;
  CFTypeRef v90;
  void *__p;
  __int128 v92;
  __CFDictionary *v93;
  CFTypeRef v94;
  xpc_object_t v95[6];
  std::string block;
  void *v97;
  void *v98;
  xpc_object_t v99;
  xpc_object_t v100[4];

  v100[1] = *(xpc_object_t *)MEMORY[0x24BDAC8D0];
  v6 = a1[4];
  if (MEMORY[0x22E2A4C30](*a2) != MEMORY[0x24BDACFE0])
  {
    v7 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_227A72000, v7, OS_LOG_TYPE_ERROR, "Failed to get serial number", (uint8_t *)&block, 2u);
      v8 = (xpc_object_t)*a2;
      if (v8)
        goto LABEL_4;
    }
    else
    {
      v8 = (xpc_object_t)*a2;
      if (v8)
      {
LABEL_4:
        xpc_retain(v8);
        goto LABEL_62;
      }
    }
    v8 = xpc_null_create();
LABEL_62:
    v39 = xpc_null_create();
    v40 = (const void *)a1[5];
    if (v40)
      v41 = _Block_copy(v40);
    else
      v41 = 0;
    v42 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v97 = &__block_descriptor_tmp_152;
    if (v41)
    {
      v98 = _Block_copy(v41);
      v99 = v8;
      if (v8)
        goto LABEL_67;
    }
    else
    {
      v98 = 0;
      v99 = v8;
      if (v8)
      {
LABEL_67:
        xpc_retain(v8);
        v100[0] = v39;
        if (v39)
        {
LABEL_68:
          xpc_retain(v39);
LABEL_72:
          dispatch_async(v42, &block);
          xpc_release(v100[0]);
          v100[0] = 0;
          xpc_release(v99);
          v99 = 0;
          if (v98)
            _Block_release(v98);
          if (v41)
            _Block_release(v41);
          xpc_release(v39);
          xpc_release(v8);
          return;
        }
LABEL_71:
        v100[0] = xpc_null_create();
        goto LABEL_72;
      }
    }
    v99 = xpc_null_create();
    v100[0] = v39;
    if (v39)
      goto LABEL_68;
    goto LABEL_71;
  }
  v9 = (xpc_object_t)*a3;
  if (*a3 && MEMORY[0x22E2A4C30](*a3) == MEMORY[0x24BDACFA0])
    xpc_retain(v9);
  else
    v9 = xpc_null_create();
  memset(&v95[3], 170, 24);
  value = xpc_dictionary_get_value(v9, (const char *)*MEMORY[0x24BED3818]);
  v95[0] = value;
  if (value)
    xpc_retain(value);
  else
    v95[0] = xpc_null_create();
  memset(&block, 0, sizeof(block));
  xpc::dyn_cast_or_default();
  xpc_release(v95[0]);
  memset(v95, 170, 24);
  v11 = v95;
  ctu::hex((ctu *)v95[3], (const void *)((char *)v95[4] - (char *)v95[3]));
  v12 = HIBYTE(v95[2]);
  v13 = (const char *)v95[0];
  if (SHIBYTE(v95[2]) >= 0)
    v14 = (xpc_object_t *)((char *)v95 + HIBYTE(v95[2]));
  else
    v14 = (xpc_object_t *)((char *)v95[0] + (unint64_t)v95[1]);
  if (SHIBYTE(v95[2]) < 0)
    v11 = (xpc_object_t *)v95[0];
  if (v11 != v14)
  {
    do
    {
      *(_BYTE *)v11 = __toupper(*(char *)v11);
      v11 = (xpc_object_t *)((char *)v11 + 1);
    }
    while (v11 != v14);
    v12 = HIBYTE(v95[2]);
    v13 = (const char *)v95[0];
  }
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v12 >= 0)
    v16 = (const char *)v95;
  else
    v16 = v13;
  v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v16, 0x600u);
  v93 = 0;
  v94 = v17;
  Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v19 = Mutable;
  if (!Mutable
    || (v93 = Mutable,
        !ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get))
  {
    p_p = operator new(0x38uLL);
    __p = p_p;
    v92 = xmmword_227B1D260;
    strcpy((char *)p_p, "Failed to create dictionary for PROV FDR options");
    v24 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_error_impl(&dword_227A72000, v24, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      v25 = (const void **)(a1 + 5);
      if (SHIBYTE(v92) < 0)
        p_p = __p;
      else
        p_p = &__p;
    }
    else
    {
      v25 = (const void **)(a1 + 5);
    }
    v26 = xpc_string_create((const char *)p_p);
    if (!v26)
      v26 = xpc_null_create();
    v27 = xpc_null_create();
    if (*v25)
      v28 = _Block_copy(*v25);
    else
      v28 = 0;
    v38 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v97 = &__block_descriptor_tmp_152;
    if (v28)
    {
      v98 = _Block_copy(v28);
      v99 = v26;
      if (v26)
        goto LABEL_49;
    }
    else
    {
      v98 = 0;
      v99 = v26;
      if (v26)
      {
LABEL_49:
        xpc_retain(v26);
        v100[0] = v27;
        if (v27)
        {
LABEL_50:
          xpc_retain(v27);
LABEL_54:
          dispatch_async(v38, &block);
          xpc_release(v100[0]);
          v100[0] = 0;
          xpc_release(v99);
          v99 = 0;
          if (v98)
            _Block_release(v98);
          if (v28)
            _Block_release(v28);
          xpc_release(v27);
          xpc_release(v26);
          if (SHIBYTE(v92) < 0)
            operator delete(__p);
          goto LABEL_188;
        }
LABEL_53:
        v100[0] = xpc_null_create();
        goto LABEL_54;
      }
    }
    v99 = xpc_null_create();
    v100[0] = v27;
    if (v27)
      goto LABEL_50;
    goto LABEL_53;
  }
  ctu::cf::insert<__CFString const*,BOOL>(Mutable, CFSTR("GetCombined"), 0);
  ctu::cf::insert<__CFString const*,BOOL>(v19, CFSTR("VerifyData"), 0);
  ctu::cf::insert<__CFString const*,BOOL>(v19, CFSTR("StripImg4"), 1);
  v90 = CFStringCreateWithCString(v15, "bbpv", 0x600u);
  v20 = capabilities::radio::chipID((capabilities::radio *)v90);
  theData = 0;
  v89 = CFStringCreateWithFormat(v15, 0, CFSTR("%08X-%@"), v20, v17);
  v87[3] = 0;
  v21 = (const void *)AMFDRCreateWithOptions();
  if (!v21)
  {
    v29 = operator new(0x30uLL);
    __p = v29;
    v92 = xmmword_227B1E5B0;
    strcpy((char *)v29, "Failed to read provision data with options");
    v30 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_error_impl(&dword_227A72000, v30, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      v31 = (const void **)(a1 + 5);
      if (SHIBYTE(v92) < 0)
        v29 = __p;
      else
        v29 = &__p;
    }
    else
    {
      v31 = (const void **)(a1 + 5);
    }
    v32 = xpc_string_create((const char *)v29);
    if (!v32)
      v32 = xpc_null_create();
    v33 = xpc_null_create();
    if (*v31)
      v34 = _Block_copy(*v31);
    else
      v34 = 0;
    v43 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v97 = &__block_descriptor_tmp_152;
    if (v34)
    {
      v98 = _Block_copy(v34);
      v99 = v32;
      if (v32)
        goto LABEL_80;
    }
    else
    {
      v98 = 0;
      v99 = v32;
      if (v32)
      {
LABEL_80:
        xpc_retain(v32);
        v100[0] = v33;
        if (v33)
        {
LABEL_81:
          xpc_retain(v33);
LABEL_85:
          dispatch_async(v43, &block);
          xpc_release(v100[0]);
          v100[0] = 0;
          xpc_release(v99);
          v99 = 0;
          if (v98)
            _Block_release(v98);
          if (v34)
            _Block_release(v34);
          xpc_release(v33);
          xpc_release(v32);
          if (SHIBYTE(v92) < 0)
            operator delete(__p);
          goto LABEL_183;
        }
LABEL_84:
        v100[0] = xpc_null_create();
        goto LABEL_85;
      }
    }
    v99 = xpc_null_create();
    v100[0] = v33;
    if (v33)
      goto LABEL_81;
    goto LABEL_84;
  }
  v22 = (const __CFData *)AMFDRDataCopy();
  theData = v22;
  CFRelease(v21);
  __p = 0;
  v92 = 0uLL;
  memset(v87, 170, 24);
  capabilities::radio::personalizedFirmwarePath(0);
  if (SHIBYTE(v87[2]) >= 0)
    v35 = HIBYTE(v87[2]);
  else
    v35 = (size_t)v87[1];
  if (!v35)
  {
    p_dst = (std::string *)operator new(0x20uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_227B1D2D0;
    strcpy((char *)p_dst, "Failed to load bbfw path");
    v45 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_dst;
      _os_log_error_impl(&dword_227A72000, v45, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      v46 = (const void **)(a1 + 5);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      else
        p_dst = &__dst;
    }
    else
    {
      v46 = (const void **)(a1 + 5);
    }
    v47 = xpc_string_create((const char *)p_dst);
    if (!v47)
      v47 = xpc_null_create();
    v48 = xpc_null_create();
    if (*v46)
      v49 = _Block_copy(*v46);
    else
      v49 = 0;
    v62 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v97 = &__block_descriptor_tmp_152;
    if (v49)
      v63 = _Block_copy(v49);
    else
      v63 = 0;
    v98 = v63;
    v99 = v47;
    if (v47)
      xpc_retain(v47);
    else
      v99 = xpc_null_create();
    v100[0] = v48;
    if (v48)
      xpc_retain(v48);
    else
      v100[0] = xpc_null_create();
    dispatch_async(v62, &block);
    xpc_release(v100[0]);
    v100[0] = 0;
    xpc_release(v99);
    v99 = 0;
    if (v98)
      _Block_release(v98);
    if (v49)
      _Block_release(v49);
    goto LABEL_152;
  }
  v36 = v35 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v35 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v36 > 0x16)
  {
    v50 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v50 = v36 | 7;
    v51 = v50 + 1;
    v37 = (std::string *)operator new(v50 + 1);
    __dst.__r_.__value_.__l.__size_ = v35 + 1;
    __dst.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    v37 = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v35 + 1;
  }
  if (SHIBYTE(v87[2]) >= 0)
    v52 = v87;
  else
    v52 = (void **)v87[0];
  memmove(v37, v52, v35);
  *(_WORD *)((char *)&v37->__r_.__value_.__l.__data_ + v35) = 47;
  v53 = std::string::append(&__dst, "bbticket.der", 0xCuLL);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  block.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&block.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  File = support::fs::loadFile((uint64_t)&block, (uint64_t)&__p);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_105:
      if (File)
        goto LABEL_106;
      goto LABEL_110;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_105;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (!File)
  {
LABEL_110:
    memset(&__dst, 170, sizeof(__dst));
    std::string::basic_string[abi:ne180100]<0>(&__dst, "Failed to load manifest data");
    v58 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v76 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v76;
      _os_log_error_impl(&dword_227A72000, v58, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &__dst;
    else
      v59 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v47 = xpc_string_create((const char *)v59);
    if (!v47)
      v47 = xpc_null_create();
    v48 = xpc_null_create();
    v60 = (const void *)a1[5];
    if (v60)
      v61 = _Block_copy(v60);
    else
      v61 = 0;
    v65 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v97 = &__block_descriptor_tmp_152;
    if (v61)
      v66 = _Block_copy(v61);
    else
      v66 = 0;
    v98 = v66;
    v99 = v47;
    if (v47)
      xpc_retain(v47);
    else
      v99 = xpc_null_create();
    v100[0] = v48;
    if (v48)
      xpc_retain(v48);
    else
      v100[0] = xpc_null_create();
    dispatch_async(v65, &block);
    xpc_release(v100[0]);
    v100[0] = 0;
    xpc_release(v99);
    v99 = 0;
    if (v98)
      _Block_release(v98);
    if (v61)
      _Block_release(v61);
LABEL_152:
    xpc_release(v48);
    xpc_release(v47);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_177;
  }
LABEL_106:
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v56 = xpc_dictionary_create(0, 0, 0);
  v57 = v56;
  if (v56)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  }
  else
  {
    v57 = xpc_null_create();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    if (!v57)
    {
      v64 = xpc_null_create();
      v57 = 0;
      goto LABEL_159;
    }
  }
  if (MEMORY[0x22E2A4C30](v57) != MEMORY[0x24BDACFA0])
  {
    v64 = xpc_null_create();
LABEL_159:
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    goto LABEL_160;
  }
  xpc_retain(v57);
LABEL_160:
  xpc_release(v57);
  v67 = *MEMORY[0x24BED3838];
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  block.__r_.__value_.__l.__size_ = v67;
  xpc::dict::object_proxy::operator=(&object, (uint64_t)&block);
  xpc_release(object);
  object = 0;
  v68 = *MEMORY[0x24BED3858];
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  block.__r_.__value_.__l.__size_ = v68;
  xpc::dict::object_proxy::operator=(&v84, (uint64_t)&block);
  xpc_release(v84);
  v84 = 0;
  v82 = xpc_int64_create(2);
  if (!v82)
    v82 = xpc_null_create();
  xpc::dict::object_proxy::operator=(&v83, __dst.__r_.__value_.__l.__data_, (char *)*MEMORY[0x24BED3850], &v82);
  xpc_release(v83);
  v83 = 0;
  xpc_release(v82);
  v82 = 0;
  v80 = xpc_data_create(__p, v92 - (_QWORD)__p);
  if (!v80)
    v80 = xpc_null_create();
  xpc::dict::object_proxy::operator=(&v81, __dst.__r_.__value_.__l.__data_, (char *)*MEMORY[0x24BED3810], &v80);
  xpc_release(v81);
  v81 = 0;
  xpc_release(v80);
  v80 = 0;
  v22 = theData;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(v22);
  v78 = xpc_data_create(BytePtr, Length);
  if (!v78)
    v78 = xpc_null_create();
  xpc::dict::object_proxy::operator=(&v79, __dst.__r_.__value_.__l.__data_, (char *)*MEMORY[0x24BED3848], &v78);
  xpc_release(v79);
  v79 = 0;
  xpc_release(v78);
  v78 = 0;
  v71 = xpc_null_create();
  xpc::dict::dict(&v77, __dst.__r_.__value_.__l.__data_);
  v72 = (const void *)a1[5];
  if (v72)
    v73 = _Block_copy(v72);
  else
    v73 = 0;
  v74 = a1[6];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  v97 = &__block_descriptor_tmp_165;
  if (v73)
    v75 = _Block_copy(v73);
  else
    v75 = 0;
  v98 = v75;
  xpc::dict::dict(&v99, v71);
  xpc::dict::dict(v100, v77);
  dispatch_async(v74, &block);
  xpc_release(v100[0]);
  v100[0] = 0;
  xpc_release(v99);
  v99 = 0;
  if (v98)
    _Block_release(v98);
  if (v73)
    _Block_release(v73);
  xpc_release(v77);
  v77 = 0;
  xpc_release(v71);
  xpc_release(__dst.__r_.__value_.__l.__data_);
LABEL_177:
  if (SHIBYTE(v87[2]) < 0)
    operator delete(v87[0]);
  if (__p)
  {
    *(_QWORD *)&v92 = __p;
    operator delete(__p);
  }
  if (v22)
    CFRelease(v22);
LABEL_183:
  if (v89)
    CFRelease(v89);
  if (v90)
    CFRelease(v90);
  v19 = v93;
LABEL_188:
  if (v19)
    CFRelease(v19);
  if (v94)
    CFRelease(v94);
  if (SHIBYTE(v95[2]) < 0)
    operator delete(v95[0]);
  if (v95[3])
  {
    v95[4] = v95[3];
    operator delete(v95[3]);
  }
  xpc_release(v9);
}

void sub_227AE3E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t object,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,int a51,__int16 a52,char a53,char a54)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator=(_QWORD *a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;

  v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8), v4);
  *a1 = v4;
  v5 = xpc_null_create();
  xpc_release(v5);
}

xpc_object_t xpc::dict::object_proxy::operator=(xpc_object_t *a1, xpc_object_t xdict, char *key, xpc_object_t *a4)
{
  xpc_object_t result;

  xpc_dictionary_set_value(xdict, key, *a4);
  *a1 = *a4;
  result = xpc_null_create();
  *a4 = result;
  return result;
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void __copy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::ARICommandDriver::setRegionCode(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[5];
  std::string __p;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_66_0;
  v15[4] = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v17 = v6;
  v18 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v15);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_227AE44B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  _OWORD *v4;
  NSObject *v5;
  uint64_t v6;
  _BYTE *v7;
  const char *v8;
  void *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  const char *v25;
  __int128 *p_buf;
  char *v27;
  __int128 *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string *v47;
  const void *v48;
  unint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::string v64;
  uint64_t v65;
  _OWORD v66[2];
  unint64_t v67;
  _OWORD v68[4];
  void *__p[2];
  __int128 v70;
  const void *aBlock[5];
  __int128 buf;
  void (*v73)(uint64_t, const unsigned __int8 *);
  void *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v3;
  v70 = v3;
  v68[2] = v3;
  v68[3] = v3;
  v68[0] = v3;
  v68[1] = v3;
  AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::ARI_IBISetDeviceRegionCodeReq_SDK((AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *)v68);
  v4 = (_OWORD *)(a1 + 40);
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 63) || *(unsigned __int8 *)(a1 + 63) > 4u)
    {
      v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_9;
      return MEMORY[0x22E2A3F04](v68);
    }
    LOBYTE(v6) = *(_BYTE *)(a1 + 63);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v6 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
LABEL_11:
    v7 = operator new(1uLL);
    v61 = v2;
    *v7 = v6;
    v9 = __p[0];
    __p[0] = v7;
    if (v9)
      operator delete(v9);
    v10 = 0;
    v11 = *(char *)(a1 + 63);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_18;
LABEL_20:
    v13 = v10;
    if (*(_QWORD *)(a1 + 48) <= (unint64_t)v10)
    {
LABEL_55:
      v37 = *(_QWORD *)(v61 + 312);
      v38 = *(std::__shared_weak_count **)(a1 + 72);
      v62 = *(_QWORD *)(a1 + 64);
      v63 = v38;
      if (v38)
      {
        p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
        do
          v40 = __ldxr(p_shared_weak_owners);
        while (__stxr(v40 + 1, p_shared_weak_owners));
        LOBYTE(v11) = *(_BYTE *)(a1 + 63);
      }
      if ((v11 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *v4;
        v64.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      }
      v65 = v61;
      v41 = operator new(0x48uLL);
      v42 = (std::__shared_weak_count *)v41;
      v41[1] = 0;
      v43 = v41 + 1;
      v41[2] = 0;
      *v41 = off_24F038950;
      v41[3] = v62;
      v44 = v41 + 3;
      v41[4] = v63;
      if (v63)
      {
        v45 = (unint64_t *)&v63->__shared_weak_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = (std::string *)(v41 + 5);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v47, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
        v42[2].__shared_owners_ = v64.__r_.__value_.__r.__words[2];
      }
      v42[2].__shared_weak_owners_ = v65;
      v48 = (const void *)MEMORY[0x24BDAC760];
      *(_QWORD *)&buf = MEMORY[0x24BDAC760];
      *((_QWORD *)&buf + 1) = 1174405120;
      v73 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEUb7_E4__29vEEN8dispatch5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      v74 = &__block_descriptor_tmp_179;
      v75 = v44;
      v76 = v42;
      do
        v49 = __ldxr(v43);
      while (__stxr(v49 + 1, v43));
      aBlock[0] = v48;
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
      aBlock[3] = &unk_24F037988;
      aBlock[4] = &buf;
      v50 = _Block_copy(aBlock);
      v51 = v76;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      do
        v54 = __ldaxr(v43);
      while (__stlxr(v54 - 1, v43));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v66[0] = v55;
      v66[1] = v55;
      v67 = 0xAAAAAAAAAAAAAAAALL;
      v56 = *(std::__shared_weak_count **)(v37 + 16);
      *(_QWORD *)&buf = *(_QWORD *)(v37 + 8);
      if (v56)
      {
        *((_QWORD *)&buf + 1) = std::__shared_weak_count::lock(v56);
        if (*((_QWORD *)&buf + 1))
        {
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v57 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          aBlock[0] = v50;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          MEMORY[0x22E2A2FF8](v66);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          if (v63)
            std::__shared_weak_count::__release_weak(v63);
          return MEMORY[0x22E2A3F04](v68);
        }
      }
      else
      {
        *((_QWORD *)&buf + 1) = 0;
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    while (1)
    {
      v14 = a1 + 40;
      if (v11 < 0)
      {
        v14 = *(_QWORD *)v4;
        v16 = __p[1];
        v15 = (_BYTE *)v70;
        v17 = v70 - (unint64_t)__p[1];
        if ((unint64_t)v70 - (unint64_t)__p[1] < 4)
        {
LABEL_23:
          v18 = *(_BYTE *)(v14 + v13);
          if ((unint64_t)v15 >= *((_QWORD *)&v70 + 1))
          {
            v19 = *((_QWORD *)&v70 + 1) - (_QWORD)v16;
            if (2 * (*((_QWORD *)&v70 + 1) - (_QWORD)v16) <= v17 + 1)
              v20 = v17 + 1;
            else
              v20 = 2 * v19;
            if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
              v21 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            v22 = (char *)operator new(v21);
            v23 = &v22[v17];
            v22[v17] = v18;
            v12 = (uint64_t)&v22[v17 + 1];
            if (v15 == v16)
              goto LABEL_53;
            if (v17 >= 8 && (unint64_t)(v16 - v22) >= 0x20)
            {
              if (v17 >= 0x20)
              {
                v24 = v17 & 0xFFFFFFFFFFFFFFE0;
                v27 = &v22[v17 - 16];
                v28 = (__int128 *)(v15 - 16);
                v29 = v17 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v30 = *v28;
                  *((_OWORD *)v27 - 1) = *(v28 - 1);
                  *(_OWORD *)v27 = v30;
                  v27 -= 32;
                  v28 -= 2;
                  v29 -= 32;
                }
                while (v29);
                if (v17 == v24)
                  goto LABEL_52;
                if ((v17 & 0x18) != 0)
                  goto LABEL_45;
                v23 -= v24;
                v15 -= v24;
              }
              else
              {
                v24 = 0;
LABEL_45:
                v23 -= v17 & 0xFFFFFFFFFFFFFFF8;
                v31 = &v22[&v15[-v24] - v16 - 8];
                v32 = (uint64_t *)&v15[-v24 - 8];
                v33 = v24 - (v17 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v34 = *v32--;
                  *(_QWORD *)v31 = v34;
                  v31 -= 8;
                  v33 += 8;
                }
                while (v33);
                v15 -= v17 & 0xFFFFFFFFFFFFFFF8;
                if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_52:
                  v15 = v16;
                  v23 = v22;
LABEL_53:
                  __p[1] = v23;
                  *(_QWORD *)&v70 = &v22[v17 + 1];
                  *((_QWORD *)&v70 + 1) = &v22[v21];
                  if (v15)
                    operator delete(v15);
LABEL_16:
                  *(_QWORD *)&v70 = v12;
LABEL_17:
                  v10 = v13 + 1;
                  v11 = *(char *)(a1 + 63);
                  if (v11 < 0)
                    goto LABEL_20;
                  goto LABEL_18;
                }
              }
            }
            v35 = v23 - 1;
            do
            {
              v36 = *--v15;
              *v35-- = v36;
            }
            while (v15 != v16);
            goto LABEL_52;
          }
          *v15 = v18;
          v12 = (uint64_t)(v15 + 1);
          goto LABEL_16;
        }
      }
      else
      {
        v16 = __p[1];
        v15 = (_BYTE *)v70;
        v17 = v70 - (unint64_t)__p[1];
        if ((unint64_t)v70 - (unint64_t)__p[1] < 4)
          goto LABEL_23;
      }
      AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v8);
      p_buf = &buf;
      if (SHIBYTE(v73) < 0)
        p_buf = (__int128 *)buf;
      Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v25, p_buf, 371);
      if ((SHIBYTE(v73) & 0x80000000) == 0)
        goto LABEL_17;
      operator delete((void *)buf);
      v10 = v13 + 1;
      v11 = *(char *)(a1 + 63);
      if (v11 < 0)
        goto LABEL_20;
LABEL_18:
      v13 = v10;
      if (v11 <= (unint64_t)v10)
        goto LABEL_55;
    }
  }
  v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_OWORD **)v4;
LABEL_9:
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_227A72000, v5, OS_LOG_TYPE_ERROR, "Invalid region code: %s", (uint8_t *)&buf, 0xCu);
  }
  return MEMORY[0x22E2A3F04](v68);
}

void sub_227AE4AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v25;
  std::__shared_weak_count *shared_owners;
  void *v28;

  shared_owners = (std::__shared_weak_count *)v25[1].__shared_owners_;
  if (shared_owners)
    std::__shared_weak_count::__release_weak(shared_owners);
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  _ZZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEUb7_EN4__29D1Ev((uint64_t)&a13);
  MEMORY[0x22E2A3F04](&a25);
  _Unwind_Resume(a1);
}

void sub_227AE4B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  if (*(char *)(v17 - 121) < 0)
  {
    operator delete(*(void **)(v17 - 144));
    MEMORY[0x22E2A3F04](va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x227AE4BA0);
}

uint64_t _ZZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEUb7_EN4__29D1Ev(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v6;
    if (!v6)
      return;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v6;
    if (!v6)
      return;
  }
  v7 = (unint64_t *)(v6 + 16);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void radio::ARICommandDriver::screenState(radio::ARICommandDriver *this, char a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  char v17;

  v6 = *((_QWORD *)this + 9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v5 = (uint64_t *)((char *)this + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN5radio16ARICommandDriver11screenStateEb_block_invoke;
  v15[3] = &__block_descriptor_tmp_67;
  v17 = a2;
  v15[4] = this;
  v15[5] = v6;
  v16 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver11screenStateEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count_vtbl *v2;
  __int128 v3;
  int v4;
  _DWORD *v5;
  void *v6;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD v30[2];
  unint64_t v31;
  _OWORD v32[4];
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, const unsigned __int8 *);
  void *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  const void *aBlock[5];

  v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  v35 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v3;
  v34 = v3;
  v32[2] = v3;
  v32[3] = v3;
  v32[0] = v3;
  v32[1] = v3;
  AriSdk::ARI_IBINetIceApStatusReq_SDK::ARI_IBINetIceApStatusReq_SDK((AriSdk::ARI_IBINetIceApStatusReq_SDK *)v32);
  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = operator new(4uLL);
  *v5 = 2 * (v4 == 0);
  v6 = __p[0];
  __p[0] = v5;
  if (v6)
    operator delete(v6);
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = (std::__shared_weak_count *)operator new(0x30uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_24F0389D0;
  v12[1].__vftable = v2;
  v12[1].__shared_owners_ = v9;
  v12[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (const void *)MEMORY[0x24BDAC760];
  v36 = MEMORY[0x24BDAC760];
  v37 = 1174405120;
  v38 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v39 = &__block_descriptor_tmp_181;
  v40 = &v12[1].__vftable;
  v41 = v12;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  aBlock[0] = v17;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v36;
  v19 = _Block_copy(aBlock);
  v20 = v41;
  if (v41)
  {
    v21 = (unint64_t *)&v41->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v24;
  v30[1] = v24;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v25 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  v36 = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v25)
  {
    v37 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v37 = (uint64_t)std::__shared_weak_count::lock(v25);
  if (!v37)
    goto LABEL_32;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v26 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v27 = (unint64_t *)(v37 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v30);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return MEMORY[0x22E2A3898](v32);
}

void sub_227AE503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  MEMORY[0x22E2A3898](&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void radio::ARICommandDriver::forceNetworkSearch(radio::ARICommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "forceNetworkSearch";
    _os_log_debug_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::ARICommandDriver::setBreadMode(radio::ARICommandDriver *this, char a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  char v17;

  v6 = *((_QWORD *)this + 9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v5 = (uint64_t *)((char *)this + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN5radio16ARICommandDriver12setBreadModeEb_block_invoke;
  v15[3] = &__block_descriptor_tmp_68_0;
  v17 = a2;
  v15[4] = this;
  v15[5] = v6;
  v16 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver12setBreadModeEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count_vtbl *v2;
  __int128 v3;
  int v4;
  _DWORD *v5;
  void *v6;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v32[2];
  unint64_t v33;
  _OWORD v34[4];
  void *__p[2];
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const unsigned __int8 *);
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  const void *aBlock[5];

  v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  v36 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[3] = v3;
  *(_OWORD *)__p = v3;
  v34[1] = v3;
  v34[2] = v3;
  v34[0] = v3;
  AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::ARI_IBICallPsBreadButterModeReq_SDK((AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *)v34);
  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = operator new(4uLL);
  *v5 = v4;
  v6 = __p[1];
  __p[1] = v5;
  if (v6)
    operator delete(v6);
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *(_BYTE *)(a1 + 56);
  v13 = (std::__shared_weak_count *)operator new(0x38uLL);
  v14 = v13;
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F038A50;
  v13[1].__vftable = v2;
  v13[1].__shared_owners_ = v9;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  LOBYTE(v13[2].__vftable) = v12;
  v18 = (const void *)MEMORY[0x24BDAC760];
  v37 = MEMORY[0x24BDAC760];
  v38 = 1174405120;
  v39 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v40 = &__block_descriptor_tmp_183;
  v41 = v13 + 1;
  v42 = v13;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  aBlock[0] = v18;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v37;
  v20 = _Block_copy(aBlock);
  v21 = v42;
  if (v42)
  {
    v22 = (unint64_t *)&v42->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (v24)
  {
    if (__p[0])
      goto LABEL_22;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (__p[0])
      goto LABEL_22;
  }
  v25 = operator new(4uLL);
  *v25 = 0;
  __p[0] = v25;
LABEL_22:
  v33 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[0] = v26;
  v32[1] = v26;
  v27 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  v37 = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v27)
  {
    v38 = 0;
LABEL_35:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v38 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v38)
    goto LABEL_35;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v29 = (unint64_t *)(v38 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v20;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v32);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return MEMORY[0x22E2A40C0](v34);
}

void sub_227AE5550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  MEMORY[0x22E2A40C0](&a15);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::setButterMode(radio::ARICommandDriver *this, char a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  char v17;

  v6 = *((_QWORD *)this + 9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v5 = (uint64_t *)((char *)this + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1174405120;
  v15[2] = ___ZN5radio16ARICommandDriver13setButterModeEb_block_invoke;
  v15[3] = &__block_descriptor_tmp_69_0;
  v17 = a2;
  v15[4] = this;
  v15[5] = v6;
  v16 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver13setButterModeEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count_vtbl *v2;
  __int128 v3;
  int v4;
  _DWORD *v5;
  void *v6;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v32[2];
  unint64_t v33;
  _OWORD v34[4];
  __int128 v35;
  void *__p;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, const unsigned __int8 *);
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  const void *aBlock[5];

  v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[3] = v3;
  v35 = v3;
  v34[1] = v3;
  v34[2] = v3;
  v34[0] = v3;
  AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::ARI_IBICallPsBreadButterModeReq_SDK((AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *)v34);
  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = operator new(4uLL);
  *v5 = v4;
  v6 = __p;
  __p = v5;
  if (v6)
    operator delete(v6);
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *(_BYTE *)(a1 + 56);
  v13 = (std::__shared_weak_count *)operator new(0x38uLL);
  v14 = v13;
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F038AD0;
  v13[1].__vftable = v2;
  v13[1].__shared_owners_ = v9;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  LOBYTE(v13[2].__vftable) = v12;
  v18 = (const void *)MEMORY[0x24BDAC760];
  v37 = MEMORY[0x24BDAC760];
  v38 = 1174405120;
  v39 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v40 = &__block_descriptor_tmp_189;
  v41 = v13 + 1;
  v42 = v13;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  aBlock[0] = v18;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v37;
  v20 = _Block_copy(aBlock);
  v21 = v42;
  if (v42)
  {
    v22 = (unint64_t *)&v42->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (v24)
  {
    if ((_QWORD)v35)
      goto LABEL_22;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((_QWORD)v35)
      goto LABEL_22;
  }
  v25 = operator new(4uLL);
  *v25 = 0;
  *(_QWORD *)&v35 = v25;
LABEL_22:
  v33 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[0] = v26;
  v32[1] = v26;
  v27 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  v37 = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v27)
  {
    v38 = 0;
LABEL_35:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v38 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v38)
    goto LABEL_35;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v29 = (unint64_t *)(v38 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v20;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v32);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return MEMORY[0x22E2A40C0](v34);
}

void sub_227AE597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  MEMORY[0x22E2A40C0](&a15);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::setMCC(_QWORD *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  if (!*(_QWORD *)a3)
  {
    v6 = 0;
    v7 = *(NSObject **)(a3 + 8);
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = _Block_copy(*(const void **)a3);
  v7 = *(NSObject **)(a3 + 8);
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x20uLL);
  *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v14 = a1[11];
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = operator new(0x18uLL);
  *v16 = v12;
  v16[1] = v9;
  v16[2] = v11;
  dispatch_async_f(v14, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::ARICommandDriver::sendVisitInfo(radio::ARICommandDriver *this, int a2, int a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  int v19;
  int v20;

  v7 = *((_QWORD *)this + 9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v6 = (uint64_t *)((char *)this + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN5radio16ARICommandDriver13sendVisitInfoEjj_block_invoke;
  v17[3] = &__block_descriptor_tmp_70;
  v19 = a2;
  v20 = a3;
  v17[4] = this;
  v17[5] = v7;
  v18 = v11;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v17);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v11);
}

uint64_t ___ZN5radio16ARICommandDriver13sendVisitInfoEjj_block_invoke(uint64_t a1)
{
  std::__shared_weak_count_vtbl *v2;
  __int128 v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _OWORD v32[2];
  unint64_t v33;
  _OWORD v34[4];
  __int128 v35;
  void *__p[2];
  void *v37[2];
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, const unsigned __int8 *);
  void *v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  const void *aBlock[5];

  v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v3;
  *(_OWORD *)v37 = v3;
  v34[3] = v3;
  v35 = v3;
  v34[1] = v3;
  v34[2] = v3;
  v34[0] = v3;
  AriSdk::ARI_IBICallPsSignificantLocationReq_SDK::ARI_IBICallPsSignificantLocationReq_SDK((AriSdk::ARI_IBICallPsSignificantLocationReq_SDK *)v34);
  v4 = operator new(4uLL);
  *v4 = *(_DWORD *)(a1 + 56);
  v5 = __p[1];
  __p[1] = v4;
  if (v5)
    operator delete(v5);
  v6 = operator new(4uLL);
  *v6 = *(_DWORD *)(a1 + 60);
  v7 = v37[0];
  v37[0] = v6;
  if (v7)
    operator delete(v7);
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = (std::__shared_weak_count *)operator new(0x30uLL);
  v14 = v13;
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F038BD0;
  v13[1].__vftable = v2;
  v13[1].__shared_owners_ = v10;
  v13[1].__shared_weak_owners_ = (uint64_t)v9;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (const void *)MEMORY[0x24BDAC760];
  v38 = MEMORY[0x24BDAC760];
  v39 = 1174405120;
  v40 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v41 = &__block_descriptor_tmp_195;
  v42 = &v13[1].__vftable;
  v43 = v13;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  aBlock[0] = v18;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_24F037988;
  aBlock[4] = &v38;
  v20 = _Block_copy(aBlock);
  v21 = v43;
  if (v43)
  {
    v22 = (unint64_t *)&v43->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (v24)
  {
    if ((_QWORD)v35)
      goto LABEL_24;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((_QWORD)v35)
      goto LABEL_24;
  }
  v25 = operator new(4uLL);
  *v25 = 0;
  *(_QWORD *)&v35 = v25;
LABEL_24:
  v33 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[0] = v26;
  v32[1] = v26;
  v27 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  v38 = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v27)
  {
    v39 = 0;
LABEL_37:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v39)
    goto LABEL_37;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v28 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v29 = (unint64_t *)(v39 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  aBlock[0] = v20;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v32);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x22E2A4294](v34);
}

void sub_227AE5F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v18;

  v18 = *(const void **)(v16 - 104);
  if (v18)
    _Block_release(v18);
  MEMORY[0x22E2A2FF8](&a9);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  MEMORY[0x22E2A4294](&a15);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::sendAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;

  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio16ARICommandDriver17sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_71;
  v8[4] = a1;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio16ARICommandDriver17sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  CFTypeRef v7;
  _QWORD v8[4];
  void *aBlock;
  CFTypeRef cf;

  v2 = *(NSObject **)(a1[4] + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I sendAccessoryInfo not yet supported for ICE", (uint8_t *)v8, 2u);
  }
  v3 = (const void *)a1[5];
  if (v3 && a1[6])
  {
    v4 = _Block_copy(v3);
    v5 = v4;
    v6 = a1[6];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    v8[3] = &__block_descriptor_tmp_81;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      cf = 0;
      dispatch_async(v6, v8);
      v7 = cf;
      if (!cf)
        goto LABEL_10;
    }
    else
    {
      aBlock = 0;
      cf = 0;
      dispatch_async(v6, v8);
      v7 = cf;
      if (!cf)
      {
LABEL_10:
        if (aBlock)
          _Block_release(aBlock);
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    CFRelease(v7);
    goto LABEL_10;
  }
}

void radio::ARICommandDriver::getRFFEScanData(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  const char *p_p;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  NSObject *v10;
  void *__p;
  __int128 v12;
  __int128 block;
  void (*v14)(_QWORD *);
  void *v15;
  void *aBlock;
  xpc_object_t v17;
  xpc_object_t object;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x28uLL);
  __p = v4;
  v12 = xmmword_227B1E5C0;
  strcpy((char *)v4, "Get RFFE Scan Data: not supported!");
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v4;
    _os_log_error_impl(&dword_227A72000, v5, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a2)
      goto LABEL_24;
  }
  else if (!*(_QWORD *)a2)
  {
    goto LABEL_24;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_24;
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v7 = xpc_string_create(p_p);
  if (!v7)
    v7 = xpc_null_create();
  v8 = xpc_null_create();
  if (*(_QWORD *)a2)
    v9 = _Block_copy(*(const void **)a2);
  else
    v9 = 0;
  v10 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x24BDAC760];
  *((_QWORD *)&block + 1) = 1174405120;
  v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
  v15 = &__block_descriptor_tmp_152;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    v17 = v7;
    if (v7)
      goto LABEL_14;
LABEL_17:
    v17 = xpc_null_create();
    object = v8;
    if (v8)
      goto LABEL_15;
LABEL_18:
    object = xpc_null_create();
    goto LABEL_19;
  }
  aBlock = 0;
  v17 = v7;
  if (!v7)
    goto LABEL_17;
LABEL_14:
  xpc_retain(v7);
  object = v8;
  if (!v8)
    goto LABEL_18;
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  object = 0;
  xpc_release(v17);
  v17 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
}

void sub_227AE6368(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::enableResetSPMIEvent(radio::ARICommandDriver *this)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_227A72000, v1, OS_LOG_TYPE_ERROR, "Enable resetting SPMI: not supported!", v2, 2u);
  }
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)radio::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_24F0377A0;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_24F037810;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_24F0377A0;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_24F037810;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F037880;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_24F037880;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::ARICommandDriver *,std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver *)#1},std::allocator<radio::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::ARICommandDriver *,std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver *)#1},std::allocator<radio::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver*)#1}::operator() const(radio::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::ARICommandDriver *,std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver *)#1},std::allocator<radio::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt"
                     "3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandD"
                                "riverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver*)#1}::operator() const(radio::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  _OWORD v10[4];
  unint64_t v11;
  _BYTE buf[12];
  __int16 v13;
  int v14;
  char v15;
  uint8_t v16[4];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    v3 = *v2;
    v11 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[2] = v4;
    v10[3] = v4;
    v10[0] = v4;
    v10[1] = v4;
    AriSdk::ARI_CsiModeSetIndCb_SDK::ARI_CsiModeSetIndCb_SDK((AriSdk::ARI_CsiModeSetIndCb_SDK *)v10, a2);
    v5 = AriSdk::ARI_CsiModeSetIndCb_SDK::unpack((AriSdk::ARI_CsiModeSetIndCb_SDK *)v10);
    if (v5)
    {
      v6 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = asString();
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v7;
        v13 = 1024;
        v14 = v5;
        _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, "#N Could not unpack CsiModeSetIndCb: %s (%d)", buf, 0x12u);
      }
    }
    else
    {
      radio::OpMode::convertMode(*(radio::OpMode **)(v3 + 296));
      v8 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        radio::OpMode::modeToString();
        if (v15 >= 0)
          v9 = buf;
        else
          v9 = *(_BYTE **)buf;
        *(_DWORD *)v16 = 136446210;
        v17 = v9;
        _os_log_impl(&dword_227A72000, v8, OS_LOG_TYPE_DEFAULT, "#I Got operating mode indication from BB: %{public}s", v16, 0xCu);
        if (v15 < 0)
          operator delete(*(void **)buf);
      }
      radio::CommandDriver::handleOperatingModeChanged_sync();
      *(_BYTE *)(v3 + 328) = 1;
    }
    return MEMORY[0x22E2A32A4](v10);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c69_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver4initEvEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c69_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver4initEvEUb_E3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ctu::cf::insert<__CFString const*,std::string>(int a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  ctu::cf::convert_copy();
  if (cf)
    CFRelease(cf);
}

void sub_227AE6BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_227AE6C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x24BDBD270];
  if (!a3)
    v6 = (const void **)MEMORY[0x24BDBD268];
  v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

void sub_227AE6CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_227AE7788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AE779C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_24F037A18;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_24F0379B8;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_227AE7FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_227AE87D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_24F037A70;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_227AE8A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  __int128 v3;
  CFTypeRef v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _OWORD v9[4];
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v12;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[2] = v3;
    v9[3] = v3;
    v9[0] = v3;
    v9[1] = v3;
    AriSdk::ARI_CsiBspShutdownRspCb_SDK::ARI_CsiBspShutdownRspCb_SDK((AriSdk::ARI_CsiBspShutdownRspCb_SDK *)v9, a2);
    if (!*(_QWORD *)(v2 + 24) || !*(_QWORD *)(v2 + 32))
    {
LABEL_24:
      AriSdk::ARI_CsiBspShutdownRspCb_SDK::~ARI_CsiBspShutdownRspCb_SDK((AriSdk::ARI_CsiBspShutdownRspCb_SDK *)v9);
      return;
    }
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    checkError((AriSdk::MsgBase *)v9, v2, &cf);
    v4 = cf;
    if (cf)
      CFRetain(cf);
    v5 = *(const void **)(v2 + 24);
    if (v5)
      v6 = _Block_copy(v5);
    else
      v6 = 0;
    v7 = *(NSObject **)(v2 + 32);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    block[3] = &__block_descriptor_tmp_81;
    if (v6)
    {
      aBlock = _Block_copy(v6);
      v12 = v4;
      if (!v4)
        goto LABEL_14;
    }
    else
    {
      aBlock = 0;
      v12 = v4;
      if (!v4)
      {
LABEL_14:
        dispatch_async(v7, block);
        if (v12)
          CFRelease(v12);
        if (aBlock)
          _Block_release(aBlock);
        if (v6)
          _Block_release(v6);
        if (v4)
          CFRelease(v4);
        if (cf)
          CFRelease(cf);
        goto LABEL_24;
      }
    }
    CFRetain(v4);
    goto LABEL_14;
  }
}

void sub_227AE8C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AriSdk::ARI_CsiBspShutdownRspCb_SDK::~ARI_CsiBspShutdownRspCb_SDK((AriSdk::ARI_CsiBspShutdownRspCb_SDK *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c260_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c260_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  CFTypeID v5;
  CFTypeRef cf;
  CFTypeRef v7;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  v7 = v2;
  if (v2)
    CFRetain(v2);
  v4 = (const void *)a1[6];
  if (v4 && (v5 = CFGetTypeID(v4), v5 == CFDictionaryGetTypeID()))
  {
    cf = v4;
    CFRetain(v4);
  }
  else
  {
    cf = 0;
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v3 + 16))(v3, &v7, &cf);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void sub_227AE8E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  CFTypeRef result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v11)(uint64_t);
  CFTypeRef v12;
  const void *v13;
  void *v14;
  CFTypeRef v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  time_t v21;
  __int128 v22;
  tm *v23;
  unsigned int v24;
  const void *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  NSObject *v28;
  std::string *v29;
  time_t v30;
  std::string v31;
  CFTypeRef cf;
  _OWORD v33[4];
  uint64_t *v34;
  CFNumberRef v35;
  const void *v36;
  _BYTE __str[32];
  __int128 v38;
  __int128 v39;
  _BYTE block[32];
  __int128 v41;
  __int128 v42;
  std::string valuePtr;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_50:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v34 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v33[2] = v8;
        v33[3] = v8;
        v33[0] = v8;
        v33[1] = v8;
        AriSdk::ARI_CsiGetSystemTimeResp_SDK::ARI_CsiGetSystemTimeResp_SDK((AriSdk::ARI_CsiGetSystemTimeResp_SDK *)v33, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block[23] = 21;
        strcpy(block, "getting baseband time");
        checkError((AriSdk::MsgBase *)v33, (uint64_t)block, &cf);
        if ((block[23] & 0x80000000) != 0)
          operator delete(*(void **)block);
        v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
        {
LABEL_11:
          if (!v2[2] || !v2[3])
          {
LABEL_45:
            if (Mutable)
              CFRelease(Mutable);
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A36F4](v33);
            goto LABEL_50;
          }
          v12 = cf;
          if (cf)
            CFRetain(cf);
          if (Mutable)
            CFRetain(Mutable);
          v13 = (const void *)v2[2];
          if (v13)
            v14 = _Block_copy(v13);
          else
            v14 = 0;
          v17 = v2[3];
          *(_QWORD *)block = MEMORY[0x24BDAC760];
          *(_QWORD *)&block[8] = 1174405120;
          *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
          *(_QWORD *)&block[24] = &__block_descriptor_tmp_83;
          if (v14)
          {
            *(_QWORD *)&v41 = _Block_copy(v14);
            *((_QWORD *)&v41 + 1) = v12;
            if (!v12)
              goto LABEL_31;
          }
          else
          {
            *(_QWORD *)&v41 = 0;
            *((_QWORD *)&v41 + 1) = v12;
            if (!v12)
            {
LABEL_31:
              *(_QWORD *)&v42 = Mutable;
              if (Mutable)
                CFRetain(Mutable);
              dispatch_async(v17, block);
              if ((_QWORD)v42)
                CFRelease((CFTypeRef)v42);
              if (*((_QWORD *)&v41 + 1))
                CFRelease(*((CFTypeRef *)&v41 + 1));
              if ((_QWORD)v41)
                _Block_release((const void *)v41);
              if (v14)
                _Block_release(v14);
              if (Mutable)
                CFRelease(Mutable);
              if (v12)
                CFRelease(v12);
              goto LABEL_45;
            }
          }
          CFRetain(v12);
          goto LABEL_31;
        }
        if (AriSdk::ARI_CsiGetSystemTimeResp_SDK::unpack((AriSdk::ARI_CsiGetSystemTimeResp_SDK *)v33))
        {
          *(_QWORD *)__str = operator new(0x20uLL);
          *(_OWORD *)&__str[8] = xmmword_227B1E5D0;
          strcpy(*(char **)__str, "Error response from ARI or BB");
          CreateError();
          v15 = cf;
          cf = *(CFTypeRef *)block;
          *(_QWORD *)block = 0;
          if (v15)
          {
            CFRelease(v15);
            if (*(_QWORD *)block)
              CFRelease(*(CFTypeRef *)block);
          }
          if ((__str[23] & 0x80000000) == 0)
            goto LABEL_11;
          v16 = *(void **)__str;
LABEL_76:
          operator delete(v16);
          goto LABEL_11;
        }
        v20 = *v34;
        v21 = *v34 / 0x3E8uLL;
        memset(&v31, 0, sizeof(v31));
        *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v41 = v22;
        v42 = v22;
        *(_OWORD *)block = v22;
        *(_OWORD *)&block[16] = v22;
        v38 = v22;
        v39 = v22;
        *(_OWORD *)__str = v22;
        *(_OWORD *)&__str[16] = v22;
        v30 = v21;
        v23 = localtime(&v30);
        strftime(block, 0x40uLL, "%Y-%m-%d %H:%M:%S", v23);
        v24 = 1000 * (v20 - 1000 * v21);
        snprintf(__str, 0x40uLL, "%s.%06d", block, v24);
        std::string::__assign_external(&v31, __str);
        v25 = (const void *)*MEMORY[0x24BED3808];
        v36 = v25;
        if (v25)
          CFRetain(v25);
        valuePtr.__r_.__value_.__r.__words[0] = v21;
        v26 = CFNumberCreate(v9, kCFNumberLongLongType, &valuePtr);
        v27 = v26;
        v35 = v26;
        if (v25 && v26)
        {
          CFDictionaryAddValue(Mutable, v25, v26);
        }
        else if (!v26)
        {
          goto LABEL_62;
        }
        CFRelease(v27);
LABEL_62:
        if (v25)
          CFRelease(v25);
        ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x24BED3828], v24, v9);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&valuePtr, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
        else
          valuePtr = v31;
        ctu::cf::insert<__CFString const*,std::string>((int)Mutable, (CFTypeRef)*MEMORY[0x24BED3800]);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
          v28 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
LABEL_69:
            v29 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v29 = (std::string *)v31.__r_.__value_.__r.__words[0];
            LODWORD(valuePtr.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)valuePtr.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
            _os_log_impl(&dword_227A72000, v28, OS_LOG_TYPE_DEFAULT, "#I Baseband time: %s", (uint8_t *)&valuePtr, 0xCu);
            if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_11;
            goto LABEL_75;
          }
        }
        else
        {
          v28 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            goto LABEL_69;
        }
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_11;
LABEL_75:
        v16 = (void *)v31.__r_.__value_.__r.__words[0];
        goto LABEL_76;
      }
    }
  }
}

void sub_227AE9450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::__shared_weak_count *v37;
  const void *v38;
  unint64_t *p_shared_owners;
  unint64_t v41;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a30);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a31);
  if (a18 < 0)
    operator delete(__p);
  if (v38)
    CFRelease(v38);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A36F4](&a20);
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  do
    v41 = __ldaxr(p_shared_owners);
  while (__stlxr(v41 - 1, p_shared_owners));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1NS_9allocatorISG_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  void *v12;
  CFTypeRef v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string::size_type v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type size;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  _BYTE *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *p_buf;
  uint64_t v36;
  uint64_t v37;
  std::string v38;
  CFTypeRef cf;
  _OWORD v40[4];
  void *__src;
  void *__p[65];
  std::string buf;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_52:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        __src = (void *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v40[2] = v8;
        v40[3] = v8;
        v40[0] = v8;
        v40[1] = v8;
        AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::ARI_CsiSysGetInfoRspCbV2_SDK((AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *)v40, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[0] = operator new(0x28uLL);
        *(_OWORD *)&__p[1] = xmmword_227B19BB0;
        strcpy((char *)__p[0], "getting baseband firmware version");
        checkError((AriSdk::MsgBase *)v40, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (v10)
          goto LABEL_19;
        if (AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::unpack((AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *)v40)
          || *((_DWORD *)__src + 129))
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_227B1E5D0;
          strcpy(buf.__r_.__value_.__l.__data_, "Error response from ARI or BB");
          CreateError();
          v11 = cf;
          cf = __p[0];
          __p[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (__p[0])
              CFRelease(__p[0]);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            v12 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_18:
            operator delete(v12);
            goto LABEL_19;
          }
          goto LABEL_19;
        }
        memcpy(__p, __src, sizeof(__p));
        if (LODWORD(__p[64]) >= 0x200)
          v19 = 512;
        else
          v19 = LODWORD(__p[64]);
        LODWORD(__p[64]) = v19;
        memset(&v38, 170, sizeof(v38));
        if (v19 >= 0x17)
        {
          v21 = (v19 & 0x3F8) + 8;
          if ((v19 | 7) != 0x17)
            v21 = v19 | 7;
          v22 = v21 + 1;
          v20 = (std::string *)operator new(v21 + 1);
          v38.__r_.__value_.__l.__size_ = v19;
          v38.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
        }
        else
        {
          *((_BYTE *)&v38.__r_.__value_.__s + 23) = v19;
          v20 = &v38;
          if (!(_DWORD)v19)
          {
LABEL_67:
            v20->__r_.__value_.__s.__data_[v19] = 0;
            v23 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              v24 = &v38;
              if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
              _os_log_impl(&dword_227A72000, v23, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", (uint8_t *)&buf, 0xCu);
            }
            v25 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
            LODWORD(v26) = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
            size = v38.__r_.__value_.__l.__size_;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
            else
              v28 = v38.__r_.__value_.__l.__size_;
            if (v28 < 2
              || ((v29 = (std::string *)v38.__r_.__value_.__r.__words[0],
                   (v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                ? (v30 = &v38)
                : (v30 = (std::string *)v38.__r_.__value_.__r.__words[0]),
                  (v31 = memchr((char *)&v30->__r_.__value_.__l.__data_ + 1, 45, v28 - 1)) == 0
               || (v32 = v31 - (_BYTE *)v30, v31 - (_BYTE *)v30 == -1)))
            {
LABEL_98:
              if ((v26 & 0x80) != 0)
                std::string::__init_copy_ctor_external(&buf, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
              else
                buf = v38;
              ctu::cf::insert<__CFString const*,std::string>((int)Mutable, (CFTypeRef)*MEMORY[0x24BED38E0]);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
              {
                v12 = (void *)v38.__r_.__value_.__r.__words[0];
                goto LABEL_18;
              }
LABEL_19:
              if (!v2[2] || !v2[3])
              {
LABEL_47:
                if (Mutable)
                  CFRelease(Mutable);
                if (cf)
                  CFRelease(cf);
                MEMORY[0x22E2A3868](v40);
                goto LABEL_52;
              }
              v13 = cf;
              if (cf)
                CFRetain(cf);
              if (Mutable)
                CFRetain(Mutable);
              v14 = (const void *)v2[2];
              if (v14)
                v15 = _Block_copy(v14);
              else
                v15 = 0;
              v16 = v2[3];
              __p[0] = (void *)MEMORY[0x24BDAC760];
              __p[1] = (void *)1174405120;
              __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
              __p[3] = &__block_descriptor_tmp_83;
              if (v15)
              {
                __p[4] = _Block_copy(v15);
                __p[5] = (void *)v13;
                if (!v13)
                  goto LABEL_33;
              }
              else
              {
                __p[4] = 0;
                __p[5] = (void *)v13;
                if (!v13)
                {
LABEL_33:
                  __p[6] = Mutable;
                  if (Mutable)
                    CFRetain(Mutable);
                  dispatch_async(v16, __p);
                  if (__p[6])
                    CFRelease(__p[6]);
                  if (__p[5])
                    CFRelease(__p[5]);
                  if (__p[4])
                    _Block_release(__p[4]);
                  if (v15)
                    _Block_release(v15);
                  if (Mutable)
                    CFRelease(Mutable);
                  if (v13)
                    CFRelease(v13);
                  goto LABEL_47;
                }
              }
              CFRetain(v13);
              goto LABEL_33;
            }
            if ((v26 & 0x80000000) != 0)
            {
              if (size > v32)
              {
                v25 = size;
LABEL_85:
                v33 = v32 + 1;
                v34 = v25 - (v32 + 1);
                if (v34 < v28)
                  v28 = v34;
                if (v28 >= 0x7FFFFFFFFFFFFFF8)
                  std::string::__throw_length_error[abi:ne180100]();
                if (v28 >= 0x17)
                {
                  v36 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v28 | 7) != 0x17)
                    v36 = v28 | 7;
                  v37 = v36 + 1;
                  p_buf = (std::string *)operator new(v36 + 1);
                  buf.__r_.__value_.__l.__size_ = v28;
                  buf.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
                }
                else
                {
                  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v28;
                  p_buf = &buf;
                  if (!v28)
                    goto LABEL_95;
                }
                memmove(p_buf, (char *)v29 + v33, v28);
LABEL_95:
                p_buf->__r_.__value_.__s.__data_[v28] = 0;
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v38.__r_.__value_.__l.__data_);
                v38 = buf;
                v26 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                goto LABEL_98;
              }
            }
            else if (v32 < v25)
            {
              v29 = &v38;
              goto LABEL_85;
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        memcpy(v20, __p, v19);
        goto LABEL_67;
      }
    }
  }
}

void sub_227AE9C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  const void *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a14 < 0)
    operator delete(__p);
  if (v31)
    CFRelease(v31);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3868](&a16);
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c185_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c185_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2NS_9allocatorISG_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  CFMutableDictionaryRef Mutable;
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  char *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *__p;
  CFTypeRef cf;
  _OWORD v21[4];
  __int128 v22;
  char *block;
  __int128 v24;
  void *v25;
  void *v26;
  CFTypeRef v27;
  CFMutableDictionaryRef v28;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
        {
LABEL_54:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v21[3] = v7;
        v22 = v7;
        v21[1] = v7;
        v21[2] = v7;
        v21[0] = v7;
        AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::ARI_CsiBspGetCalibrationStatusRspCb_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *)v21, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block = (char *)operator new(0x20uLL);
        v24 = xmmword_227B1B090;
        strcpy(block, "getting calibration status");
        checkError((AriSdk::MsgBase *)v21, (uint64_t)&block, &cf);
        if (SHIBYTE(v24) < 0)
          operator delete(block);
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
LABEL_21:
          if (!v2[2] || !v2[3])
          {
LABEL_49:
            if (Mutable)
              CFRelease(Mutable);
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A4264](v21);
            goto LABEL_54;
          }
          v13 = cf;
          if (cf)
            CFRetain(cf);
          if (Mutable)
            CFRetain(Mutable);
          v14 = (const void *)v2[2];
          if (v14)
            v15 = _Block_copy(v14);
          else
            v15 = 0;
          v16 = v2[3];
          block = (char *)MEMORY[0x24BDAC760];
          *(_QWORD *)&v24 = 1174405120;
          *((_QWORD *)&v24 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
          v25 = &__block_descriptor_tmp_83;
          if (v15)
          {
            v26 = _Block_copy(v15);
            v27 = v13;
            if (!v13)
              goto LABEL_35;
          }
          else
          {
            v26 = 0;
            v27 = v13;
            if (!v13)
            {
LABEL_35:
              v28 = Mutable;
              if (Mutable)
                CFRetain(Mutable);
              dispatch_async(v16, &block);
              if (v28)
                CFRelease(v28);
              if (v27)
                CFRelease(v27);
              if (v26)
                _Block_release(v26);
              if (v15)
                _Block_release(v15);
              if (Mutable)
                CFRelease(Mutable);
              if (v13)
                CFRelease(v13);
              goto LABEL_49;
            }
          }
          CFRetain(v13);
          goto LABEL_35;
        }
        if (AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::unpack((AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *)v21))
        {
          __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Error response from baseband");
          CreateError();
          v10 = cf;
          cf = block;
          block = 0;
          if (!v10)
            goto LABEL_19;
          CFRelease(v10);
          v11 = block;
          if (!block)
            goto LABEL_19;
        }
        else
        {
          if (!*(_DWORD *)v22)
          {
            ctu::cf::insert<__CFString const*,BOOL>(Mutable, (CFTypeRef)*MEMORY[0x24BED3928], **((_DWORD **)&v22 + 1) == 1);
            goto LABEL_21;
          }
          __p = (char *)operator new(0x38uLL);
          strcpy(__p, "failed response in retrieving calibration status");
          CreateError();
          v12 = cf;
          cf = block;
          block = 0;
          if (!v12)
            goto LABEL_19;
          CFRelease(v12);
          v11 = block;
          if (!block)
            goto LABEL_19;
        }
        CFRelease(v11);
LABEL_19:
        operator delete(__p);
        goto LABEL_21;
      }
    }
  }
}

void sub_227AEA228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16)
{
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (v17)
    CFRelease(v17);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A4264](&a16);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3NS_9allocatorISG_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb3_E3__4vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  const __CFAllocator *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CFIndex v29;
  CFDataRef v30;
  uint64_t v31;
  const __CFAllocator *v32;
  char *v33;
  CFTypeRef cf;
  _OWORD v35[4];
  __int128 v36;
  _BYTE __p[32];
  CFTypeRef v38[2];
  CFTypeRef v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
        {
LABEL_53:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v35[3] = v7;
        v36 = v7;
        v35[1] = v7;
        v35[2] = v7;
        v35[0] = v7;
        AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::ARI_CsiIceWakeupReasonRspCb_SDK((AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *)v35, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)__p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_227B1D2D0;
        strcpy(*(char **)__p, "get baseband wake reason");
        checkError((AriSdk::MsgBase *)v35, (uint64_t)__p, &cf);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (!v10)
        {
          if (AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::unpack((AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *)v35))
          {
            v33 = (char *)operator new(0x38uLL);
            strcpy(v33, "Failed to get baseband wake reason (unpack error)");
            CreateError();
            v13 = cf;
            cf = *(CFTypeRef *)__p;
            *(_QWORD *)__p = 0;
            if (!v13)
              goto LABEL_19;
            CFRelease(v13);
            v14 = *(const void **)__p;
            if (!*(_QWORD *)__p)
              goto LABEL_19;
            goto LABEL_18;
          }
          if (*(_DWORD *)v36)
          {
            v33 = (char *)operator new(0x38uLL);
            strcpy(v33, "Failed to get baseband wake reason (result error)");
            CreateError();
            v15 = cf;
            cf = *(CFTypeRef *)__p;
            *(_QWORD *)__p = 0;
            if (!v15)
              goto LABEL_19;
            CFRelease(v15);
            v14 = *(const void **)__p;
            if (!*(_QWORD *)__p)
              goto LABEL_19;
LABEL_18:
            CFRelease(v14);
LABEL_19:
            operator delete(v33);
            goto LABEL_20;
          }
          *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)((char *)v43 + 12) = v22;
          v42 = v22;
          v43[0] = v22;
          v40 = v22;
          v41 = v22;
          *(_OWORD *)v38 = v22;
          *(_OWORD *)v39 = v22;
          *(_OWORD *)__p = v22;
          *(_OWORD *)&__p[16] = v22;
          *(_OWORD *)__p = **((_OWORD **)&v36 + 1);
          v23 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 64);
          v25 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 16);
          v24 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 32);
          *(_OWORD *)v39 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 48);
          v40 = v23;
          *(_OWORD *)&__p[16] = v25;
          *(_OWORD *)v38 = v24;
          v27 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 96);
          v26 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 112);
          v28 = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 80);
          *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)(*((_QWORD *)&v36 + 1) + 124);
          v42 = v27;
          v43[0] = v26;
          v41 = v28;
          ctu::cf::insert<char const*,unsigned int>(Mutable, *(unsigned int *)__p, v8, v11, v12);
          if (*(_DWORD *)&__p[8] >= 0x80u)
            v29 = 128;
          else
            v29 = *(unsigned int *)&__p[8];
          if ((_DWORD)v29)
          {
            v30 = CFDataCreate(v8, (const UInt8 *)((unint64_t)__p | 0xC), v29);
            ctu::cf::insert<char const*,__CFData const*>(Mutable, v30, (uint64_t)v8, v31, v32);
            if (v30)
              CFRelease(v30);
          }
        }
LABEL_20:
        if (!v2[2] || !v2[3])
        {
LABEL_48:
          if (Mutable)
            CFRelease(Mutable);
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3C40](v35);
          goto LABEL_53;
        }
        v16 = cf;
        if (cf)
          CFRetain(cf);
        if (Mutable)
          CFRetain(Mutable);
        v17 = (const void *)v2[2];
        if (v17)
          v18 = _Block_copy(v17);
        else
          v18 = 0;
        v19 = v2[3];
        *(_QWORD *)__p = MEMORY[0x24BDAC760];
        *(_QWORD *)&__p[8] = 1174405120;
        *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        *(_QWORD *)&__p[24] = &__block_descriptor_tmp_83;
        if (v18)
        {
          v38[0] = _Block_copy(v18);
          v38[1] = v16;
          if (!v16)
            goto LABEL_34;
        }
        else
        {
          v38[0] = 0;
          v38[1] = v16;
          if (!v16)
          {
LABEL_34:
            v39[0] = Mutable;
            if (Mutable)
              CFRetain(Mutable);
            dispatch_async(v19, __p);
            if (v39[0])
              CFRelease(v39[0]);
            if (v38[1])
              CFRelease(v38[1]);
            if (v38[0])
              _Block_release(v38[0]);
            if (v18)
              _Block_release(v18);
            if (Mutable)
              CFRelease(Mutable);
            if (v16)
              CFRelease(v16);
            goto LABEL_48;
          }
        }
        CFRetain(v16);
        goto LABEL_34;
      }
    }
  }
}

void sub_227AEA86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4NS_9allocatorISG_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ctu::cf::insert<char const*,unsigned int>(__CFDictionary *a1, unsigned int a2, const __CFAllocator *a3, uint64_t a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  unint64_t valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, (const __CFString **)"kKeyBasebandWakeChannel", (const char *)0x8000100, (uint64_t)a3, a5);
  v8 = (const void *)valuePtr;
  valuePtr = a2;
  v9 = CFNumberCreate(a3, kCFNumberLongLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8)
    CFRelease(v8);
}

void sub_227AEAB48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_227AEAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<char const*,__CFData const*>(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  ctu::cf::convert_copy((ctu::cf *)&cf, (const __CFString **)"kKeyBasebandWakeData", (const char *)0x8000100, a3, a5);
  v7 = cf;
  cf = a2;
  if (a2)
  {
    CFRetain(a2);
    if (v7)
      CFDictionaryAddValue(a1, v7, a2);
    CFRelease(a2);
  }
  if (v7)
    CFRelease(v7);
}

void sub_227AEAC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void sub_227AEAC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16setOperatingModeEyNS2_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef cf;
  _OWORD v15[4];
  unint64_t v16;
  void *__p;
  __int128 v18;
  void *v19;
  void *aBlock;
  CFTypeRef v21;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*v2)
        {
LABEL_30:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v16 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v15[2] = v7;
        v15[3] = v7;
        v15[0] = v7;
        v15[1] = v7;
        AriSdk::ARI_CsiModeSetRespCb_SDK::ARI_CsiModeSetRespCb_SDK((AriSdk::ARI_CsiModeSetRespCb_SDK *)v15, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x20uLL);
        v18 = xmmword_227B1D270;
        strcpy((char *)__p, "setting baseband operating mode");
        checkError((AriSdk::MsgBase *)v15, (uint64_t)&__p, &cf);
        if (SHIBYTE(v18) < 0)
        {
          operator delete(__p);
          v8 = (const void *)v2[2];
          if (!v8)
            goto LABEL_27;
        }
        else
        {
          v8 = (const void *)v2[2];
          if (!v8)
            goto LABEL_27;
        }
        if (v2[3])
        {
          v9 = cf;
          if (cf && (CFRetain(cf), (v8 = (const void *)v2[2]) == 0))
            v10 = 0;
          else
            v10 = _Block_copy(v8);
          v11 = v2[3];
          __p = (void *)MEMORY[0x24BDAC760];
          *(_QWORD *)&v18 = 1174405120;
          *((_QWORD *)&v18 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          v19 = &__block_descriptor_tmp_81;
          if (v10)
          {
            aBlock = _Block_copy(v10);
            v21 = v9;
            if (!v9)
              goto LABEL_19;
          }
          else
          {
            aBlock = 0;
            v21 = v9;
            if (!v9)
            {
LABEL_19:
              dispatch_async(v11, &__p);
              if (v21)
                CFRelease(v21);
              if (aBlock)
                _Block_release(aBlock);
              if (v10)
                _Block_release(v10);
              if (v9)
                CFRelease(v9);
              goto LABEL_27;
            }
          }
          CFRetain(v9);
          goto LABEL_19;
        }
LABEL_27:
        if (cf)
          CFRelease(cf);
        MEMORY[0x22E2A3370](v15);
        goto LABEL_30;
      }
    }
  }
}

void sub_227AEAE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a26 < 0)
    operator delete(__p);
  MEMORY[0x22E2A3370](&a11);
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5NS_9allocatorISE_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5NS_9allocatorISE_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5NS_9allocatorISE_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb5_E3__6vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  uint64_t (*v11)(uint64_t);
  CFTypeRef v12;
  const void *v13;
  void *v14;
  CFTypeRef v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  NSObject *v20;
  void **v21;
  CFTypeRef cf;
  _OWORD v23[4];
  unint64_t v24;
  void *__p;
  __int128 v26;
  void *v27;
  void *aBlock;
  CFTypeRef v29;
  CFTypeRef v30;
  _BYTE buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[4];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_50:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v24 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v23[2] = v8;
        v23[3] = v8;
        v23[0] = v8;
        v23[1] = v8;
        AriSdk::ARI_CsiModeGetRspCb_SDK::ARI_CsiModeGetRspCb_SDK((AriSdk::ARI_CsiModeGetRspCb_SDK *)v23, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p = operator new(0x20uLL);
        v26 = xmmword_227B1D270;
        strcpy((char *)__p, "getting baseband operating mode");
        checkError((AriSdk::MsgBase *)v23, (uint64_t)&__p, &cf);
        if (SHIBYTE(v26) < 0)
          operator delete(__p);
        v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (cf)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (!v11)
        {
          if (AriSdk::ARI_CsiModeGetRspCb_SDK::unpack((AriSdk::ARI_CsiModeGetRspCb_SDK *)v23))
          {
            *(_QWORD *)buf = operator new(0x20uLL);
            *(_OWORD *)&buf[8] = xmmword_227B1E5D0;
            strcpy(*(char **)buf, "Error response from ARI or BB");
            CreateError();
            v15 = cf;
            cf = __p;
            __p = 0;
            if (v15)
            {
              CFRelease(v15);
              if (__p)
                CFRelease(__p);
            }
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          else
          {
            v19 = radio::OpMode::convertMode(*(radio::OpMode **)(v5 + 296));
            ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x24BED38E8], v19, v9);
            v20 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              radio::OpMode::modeToString();
              v21 = v26 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v21;
              _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Got operating mode: %s", buf, 0xCu);
              if (SHIBYTE(v26) < 0)
                operator delete(__p);
            }
            if (!*(_BYTE *)(v5 + 328))
            {
              radio::CommandDriver::handleOperatingModeChanged_sync();
              *(_BYTE *)(v5 + 328) = 1;
            }
          }
        }
        if (!v2[2] || !v2[3])
        {
LABEL_45:
          if (Mutable)
            CFRelease(Mutable);
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3280](v23);
          goto LABEL_50;
        }
        v12 = cf;
        if (cf)
          CFRetain(cf);
        if (Mutable)
          CFRetain(Mutable);
        v13 = (const void *)v2[2];
        if (v13)
          v14 = _Block_copy(v13);
        else
          v14 = 0;
        v16 = v2[3];
        __p = (void *)MEMORY[0x24BDAC760];
        *(_QWORD *)&v26 = 1174405120;
        *((_QWORD *)&v26 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        v27 = &__block_descriptor_tmp_83;
        if (v14)
        {
          aBlock = _Block_copy(v14);
          v29 = v12;
          if (!v12)
            goto LABEL_31;
        }
        else
        {
          aBlock = 0;
          v29 = v12;
          if (!v12)
          {
LABEL_31:
            v30 = Mutable;
            if (Mutable)
              CFRetain(Mutable);
            dispatch_async(v16, &__p);
            if (v30)
              CFRelease(v30);
            if (v29)
              CFRelease(v29);
            if (aBlock)
              _Block_release(aBlock);
            if (v14)
              _Block_release(v14);
            if (Mutable)
              CFRelease(Mutable);
            if (v12)
              CFRelease(v12);
            goto LABEL_45;
          }
        }
        CFRetain(v12);
        goto LABEL_31;
      }
    }
  }
}

void sub_227AEB3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  const void *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (v26)
    CFRelease(v26);
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3280](&a11);
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c181_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c181_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6NS_9allocatorISG_EEE16__on_zero_sharedEv(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[6];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[5];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  std::string *v11;
  __int128 v12;
  CFTypeRef v13;
  ctu *v14;
  std::string *v15;
  __int128 v16;
  void *v17;
  const void *v18;
  CFTypeRef v19;
  void *v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  CFTypeRef v44;
  NSObject *v45;
  int v46;
  uint64_t *v47;
  uint64_t **v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  CFTypeRef v58;
  void *__p[2];
  std::string::size_type v60;
  CFTypeRef cf;
  _OWORD v62[4];
  __int128 v63;
  int *v64;
  std::string block;
  void *v66;
  void *v67;
  CFTypeRef v68;
  CFTypeRef v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_49:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v64 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v62[3] = v8;
        v63 = v8;
        v62[1] = v8;
        v62[2] = v8;
        v62[0] = v8;
        AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::ARI_CsiIceGetRxDiversityRspCb_SDK((AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *)v62, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B19BC0;
        strcpy(block.__r_.__value_.__l.__data_, "send Getting Rx Diversity Status");
        checkError((AriSdk::MsgBase *)v62, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_25;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_25;
        }
        if (AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *)v62))
        {
          std::to_string(&block, *((_DWORD *)v2 + 10));
          v11 = std::string::insert(&block, 0, "Failed to unpack response of getting Rx Diversity, and RAT selection: ", 0x46uLL);
          v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v60 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v13 = cf;
          cf = (CFTypeRef)v57.__r_.__value_.__r.__words[0];
          v57.__r_.__value_.__r.__words[0] = 0;
          if (!v13)
            goto LABEL_20;
          goto LABEL_17;
        }
        v14 = (ctu *)*(unsigned int *)v63;
        if ((_DWORD)v14)
        {
          ctu::hex(v14);
          v15 = std::string::insert(&block, 0, "Error on CsiIceGetRxDiversityRspCb result: 0x", 0x2DuLL);
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v60 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v13 = cf;
          cf = (CFTypeRef)v57.__r_.__value_.__r.__words[0];
          v57.__r_.__value_.__r.__words[0] = 0;
          if (!v13)
          {
LABEL_20:
            if (SHIBYTE(v60) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
            {
              v17 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_24:
              operator delete(v17);
            }
LABEL_25:
            v18 = (const void *)v2[1];
            if (!v18 || !v2[2])
            {
LABEL_46:
              if (cf)
                CFRelease(cf);
              MEMORY[0x22E2A3EA4](v62);
              goto LABEL_49;
            }
            v19 = cf;
            if (cf && (CFRetain(cf), (v18 = (const void *)v2[1]) == 0))
              v20 = 0;
            else
              v20 = _Block_copy(v18);
            v21 = v2[2];
            block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
            block.__r_.__value_.__l.__size_ = 1174405120;
            block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            v66 = &__block_descriptor_tmp_89;
            if (v20)
            {
              v67 = _Block_copy(v20);
              v68 = v19;
              if (!v19)
                goto LABEL_36;
            }
            else
            {
              v67 = 0;
              v68 = v19;
              if (!v19)
              {
LABEL_36:
                v69 = 0;
                dispatch_async(v21, &block);
                if (v69)
                  CFRelease(v69);
                if (v68)
                  CFRelease(v68);
                if (v67)
                  _Block_release(v67);
                if (v20)
                  _Block_release(v20);
                if (v19)
                  CFRelease(v19);
                goto LABEL_46;
              }
            }
            CFRetain(v19);
            goto LABEL_36;
          }
LABEL_17:
          CFRelease(v13);
          goto LABEL_20;
        }
        v24 = **((_DWORD **)&v63 + 1);
        if (**((_DWORD **)&v63 + 1) == *((_DWORD *)v2 + 10))
        {
          v25 = *v64;
          v26 = (uint64_t **)(v5 + 344);
          v27 = *(uint64_t **)(v5 + 344);
          v28 = (uint64_t **)(v5 + 344);
          v29 = (uint64_t **)(v5 + 344);
          if (v27)
          {
            while (1)
            {
              while (1)
              {
                v29 = (uint64_t **)v27;
                v30 = *((_DWORD *)v27 + 7);
                if (v24 >= v30)
                  break;
                v27 = *v29;
                v28 = v29;
                if (!*v29)
                  goto LABEL_62;
              }
              if (v30 >= v24)
                break;
              v27 = v29[1];
              if (!v27)
              {
                v28 = v29 + 1;
                goto LABEL_62;
              }
            }
            v31 = v29;
          }
          else
          {
LABEL_62:
            v31 = operator new(0x28uLL);
            v31[7] = v24;
            v31[8] = 0;
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = v29;
            *v28 = (uint64_t *)v31;
            v32 = **(_QWORD **)(v5 + 336);
            v33 = (uint64_t *)v31;
            if (v32)
            {
              *(_QWORD *)(v5 + 336) = v32;
              v33 = *v28;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 344), v33);
            ++*(_QWORD *)(v5 + 352);
          }
          v31[8] = v25;
          v45 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            v46 = *((_DWORD *)v2 + 10);
            v47 = *v26;
            v48 = (uint64_t **)(v5 + 344);
            if (*v26)
            {
              while (1)
              {
                while (1)
                {
                  v48 = (uint64_t **)v47;
                  v49 = *((_DWORD *)v47 + 7);
                  if (v46 >= v49)
                    break;
                  v47 = *v48;
                  v26 = v48;
                  if (!*v48)
                    goto LABEL_96;
                }
                if (v49 >= v46)
                  break;
                v47 = v48[1];
                if (!v47)
                {
                  v26 = v48 + 1;
                  goto LABEL_96;
                }
              }
              v50 = v48;
            }
            else
            {
LABEL_96:
              v50 = operator new(0x28uLL);
              v50[7] = v46;
              v50[8] = 0;
              *(_QWORD *)v50 = 0;
              *((_QWORD *)v50 + 1) = 0;
              *((_QWORD *)v50 + 2) = v48;
              *v26 = (uint64_t *)v50;
              v51 = **(_QWORD **)(v5 + 336);
              v52 = (uint64_t *)v50;
              if (v51)
              {
                *(_QWORD *)(v5 + 336) = v51;
                v52 = *v26;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 344), v52);
              ++*(_QWORD *)(v5 + 352);
            }
            v53 = v50[8];
            LODWORD(block.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(block.__r_.__value_.__r.__words[0]) = v46;
            LOWORD(block.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&block.__r_.__value_.__r.__words[1] + 2) = v53;
            _os_log_debug_impl(&dword_227A72000, v45, OS_LOG_TYPE_DEBUG, "#D fRxDiversity[ %d ]: %d\n", (uint8_t *)&block, 0xEu);
          }
          goto LABEL_25;
        }
        std::to_string(&v55, **((_DWORD **)&v63 + 1));
        v34 = std::string::insert(&v55, 0, "Getting Rx Diversity Response RAT(", 0x24uLL);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v56, ") selection is different from the input RAT(", 0x2FuLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, *((_DWORD *)v2 + 10));
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v54;
        else
          v38 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          size = v54.__r_.__value_.__l.__size_;
        v40 = std::string::append(&v57, (const std::string::value_type *)v38, size);
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&block, ")", 2uLL);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v60 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v44 = cf;
        cf = v58;
        v58 = 0;
        if (v44)
        {
          CFRelease(v44);
          if (v58)
            CFRelease(v58);
        }
        if (SHIBYTE(v60) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_77;
            goto LABEL_83;
          }
        }
        else if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_76;
        }
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_84;
        }
LABEL_83:
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_78:
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_85;
        }
LABEL_84:
        operator delete(v57.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_79:
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_25;
          goto LABEL_86;
        }
LABEL_85:
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_25;
LABEL_86:
        v17 = (void *)v55.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
    }
  }
}

void sub_227AEBCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,CFTypeRef cf,char a42)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  const __CFDictionary *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const __CFDictionary *v14;
  void *v15;
  NSObject *v16;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(const void **)(*a1 + 8);
  if (v3)
  {
    v5 = _Block_copy(v3);
    v6 = v2[2];
    v15 = v5;
    v16 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = v2[2];
  v15 = 0;
  v16 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  v7 = (const __CFDictionary *)v2[3];
  v14 = v7;
  if (v7)
    CFRetain(v7);
  radio::ARICommandDriver::getAntennaTxPort_sync(v4, (uint64_t)&v15, &v14);
  if (v7)
    CFRelease(v7);
  if (v6)
    dispatch_release(v6);
  if (v5)
    _Block_release(v5);
  v8 = (const void *)v2[3];
  if (v8)
    CFRelease(v8);
  v9 = v2[2];
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)v2[1];
  if (v10)
    _Block_release(v10);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_227AEC0D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  const void *v7;
  NSObject *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v5)
    CFRelease(v5);
  if (v4)
    dispatch_release(v4);
  if (v3)
    _Block_release(v3);
  v7 = (const void *)v2[3];
  if (v7)
    CFRelease(v7);
  v8 = v2[2];
  if (v8)
    dispatch_release(v8);
  v9 = (const void *)v2[1];
  if (v9)
    _Block_release(v9);
  operator delete(v2);
  v10 = (std::__shared_weak_count *)v1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEESD_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  __CFDictionary *Mutable;
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  char *v12;
  ctu *v13;
  std::string *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  NSObject *v23;
  const __CFAllocator *v24;
  char *v25;
  std::string v26;
  CFTypeRef v27;
  CFTypeRef cf;
  _OWORD v29[4];
  __int128 v30;
  std::string __p;
  void *v32;
  void *aBlock;
  CFTypeRef v34;
  CFTypeRef v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
        {
LABEL_57:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v29[3] = v8;
        v30 = v8;
        v29[1] = v8;
        v29[2] = v8;
        v29[0] = v8;
        AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::ARI_CsiIceGetTxAntennaRspCb_SDK((AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *)v29, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_227B1D2B0;
        strcpy(__p.__r_.__value_.__l.__data_, "send Getting Antenna Tx Antenna Status");
        checkError((AriSdk::MsgBase *)v29, (uint64_t)&__p, &cf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        Mutable = 0;
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (!v10)
        {
          if (AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *)v29))
          {
            v25 = (char *)operator new(0x38uLL);
            strcpy(v25, "Failed to unpack response of getting Antenna Tx Port");
            CreateError();
            v11 = cf;
            cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = 0;
            if (v11)
            {
              CFRelease(v11);
              if (__p.__r_.__value_.__r.__words[0])
                CFRelease(__p.__r_.__value_.__l.__data_);
            }
            v12 = v25;
            goto LABEL_23;
          }
          v13 = (ctu *)*(unsigned int *)v30;
          if ((_DWORD)v13)
          {
            ctu::hex(v13);
            v14 = std::string::insert(&__p, 0, "Failed on returning result from getting antenna state: result: 0x", 0x41uLL);
            v26 = *v14;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            CreateError();
            v15 = cf;
            cf = v27;
            if (v15)
              CFRelease(v15);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v26.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_24;
            v12 = (char *)__p.__r_.__value_.__r.__words[0];
LABEL_23:
            operator delete(v12);
LABEL_24:
            Mutable = 0;
            goto LABEL_25;
          }
          v22 = **((_DWORD **)&v30 + 1);
          *(_DWORD *)(v5 + 360) = **((_DWORD **)&v30 + 1);
          v23 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(__p.__r_.__value_.__r.__words[0]) = v22;
            _os_log_debug_impl(&dword_227A72000, v23, OS_LOG_TYPE_DEBUG, "#D Antenna State: %d\n", (uint8_t *)&__p, 8u);
          }
          v24 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x24BED3880], *(_DWORD *)(v5 + 360), v24);
        }
LABEL_25:
        if (!v2[3] || !v2[4])
        {
LABEL_53:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3BE0](v29);
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_57;
        }
        v16 = cf;
        if (cf)
          CFRetain(cf);
        if (Mutable)
          CFRetain(Mutable);
        v17 = (const void *)v2[3];
        if (v17)
          v18 = _Block_copy(v17);
        else
          v18 = 0;
        v19 = v2[4];
        __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
        __p.__r_.__value_.__l.__size_ = 1174405120;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        v32 = &__block_descriptor_tmp_83;
        if (v18)
        {
          aBlock = _Block_copy(v18);
          v34 = v16;
          if (!v16)
            goto LABEL_39;
        }
        else
        {
          aBlock = 0;
          v34 = v16;
          if (!v16)
          {
LABEL_39:
            v35 = Mutable;
            if (Mutable)
              CFRetain(Mutable);
            dispatch_async(v19, &__p);
            if (v35)
              CFRelease(v35);
            if (v34)
              CFRelease(v34);
            if (aBlock)
              _Block_release(aBlock);
            if (v18)
              _Block_release(v18);
            if (Mutable)
              CFRelease(Mutable);
            if (v16)
              CFRelease(v16);
            goto LABEL_53;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_227AEC5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c183_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEESC_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c183_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEESC_E3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  std::string *v11;
  __int128 v12;
  CFTypeRef v13;
  ctu *v14;
  std::string *v15;
  __int128 v16;
  void *v17;
  const void *v18;
  CFTypeRef v19;
  void *v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  CFTypeRef v44;
  NSObject *v45;
  int v46;
  uint64_t *v47;
  uint64_t **v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  CFTypeRef v58;
  void *__p[2];
  std::string::size_type v60;
  CFTypeRef cf;
  _OWORD v62[4];
  __int128 v63;
  int *v64;
  std::string block;
  void *v66;
  void *v67;
  CFTypeRef v68;
  CFTypeRef v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_49:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v64 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v62[3] = v8;
        v63 = v8;
        v62[1] = v8;
        v62[2] = v8;
        v62[0] = v8;
        AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::ARI_CsiIceGetArtdSettingRspCb_SDK((AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *)v62, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B1B090;
        strcpy(block.__r_.__value_.__l.__data_, "send Getting ARTD Settings");
        checkError((AriSdk::MsgBase *)v62, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_25;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_25;
        }
        if (AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *)v62))
        {
          std::to_string(&block, *((_DWORD *)v2 + 10));
          v11 = std::string::insert(&block, 0, "Failed to unpack response of getting ARTD, and RAT selection: ", 0x3EuLL);
          v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v60 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v13 = cf;
          cf = (CFTypeRef)v57.__r_.__value_.__r.__words[0];
          v57.__r_.__value_.__r.__words[0] = 0;
          if (!v13)
            goto LABEL_20;
          goto LABEL_17;
        }
        v14 = (ctu *)*(unsigned int *)v63;
        if ((_DWORD)v14)
        {
          ctu::hex(v14);
          v15 = std::string::insert(&block, 0, "Error on CsiIceGetArtdSettingRspCb result: 0x", 0x2DuLL);
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v60 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v13 = cf;
          cf = (CFTypeRef)v57.__r_.__value_.__r.__words[0];
          v57.__r_.__value_.__r.__words[0] = 0;
          if (!v13)
          {
LABEL_20:
            if (SHIBYTE(v60) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
            {
              v17 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_24:
              operator delete(v17);
            }
LABEL_25:
            v18 = (const void *)v2[1];
            if (!v18 || !v2[2])
            {
LABEL_46:
              if (cf)
                CFRelease(cf);
              MEMORY[0x22E2A3E80](v62);
              goto LABEL_49;
            }
            v19 = cf;
            if (cf && (CFRetain(cf), (v18 = (const void *)v2[1]) == 0))
              v20 = 0;
            else
              v20 = _Block_copy(v18);
            v21 = v2[2];
            block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
            block.__r_.__value_.__l.__size_ = 1174405120;
            block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            v66 = &__block_descriptor_tmp_89;
            if (v20)
            {
              v67 = _Block_copy(v20);
              v68 = v19;
              if (!v19)
                goto LABEL_36;
            }
            else
            {
              v67 = 0;
              v68 = v19;
              if (!v19)
              {
LABEL_36:
                v69 = 0;
                dispatch_async(v21, &block);
                if (v69)
                  CFRelease(v69);
                if (v68)
                  CFRelease(v68);
                if (v67)
                  _Block_release(v67);
                if (v20)
                  _Block_release(v20);
                if (v19)
                  CFRelease(v19);
                goto LABEL_46;
              }
            }
            CFRetain(v19);
            goto LABEL_36;
          }
LABEL_17:
          CFRelease(v13);
          goto LABEL_20;
        }
        v24 = **((_DWORD **)&v63 + 1);
        if (**((_DWORD **)&v63 + 1) == *((_DWORD *)v2 + 10))
        {
          v25 = *v64;
          v26 = (uint64_t **)(v5 + 376);
          v27 = *(uint64_t **)(v5 + 376);
          v28 = (uint64_t **)(v5 + 376);
          v29 = (uint64_t **)(v5 + 376);
          if (v27)
          {
            while (1)
            {
              while (1)
              {
                v29 = (uint64_t **)v27;
                v30 = *((_DWORD *)v27 + 7);
                if (v24 >= v30)
                  break;
                v27 = *v29;
                v28 = v29;
                if (!*v29)
                  goto LABEL_62;
              }
              if (v30 >= v24)
                break;
              v27 = v29[1];
              if (!v27)
              {
                v28 = v29 + 1;
                goto LABEL_62;
              }
            }
            v31 = v29;
          }
          else
          {
LABEL_62:
            v31 = operator new(0x28uLL);
            v31[7] = v24;
            v31[8] = 0;
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = v29;
            *v28 = (uint64_t *)v31;
            v32 = **(_QWORD **)(v5 + 368);
            v33 = (uint64_t *)v31;
            if (v32)
            {
              *(_QWORD *)(v5 + 368) = v32;
              v33 = *v28;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 376), v33);
            ++*(_QWORD *)(v5 + 384);
          }
          v31[8] = v25;
          v45 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            v46 = *((_DWORD *)v2 + 10);
            v47 = *v26;
            v48 = (uint64_t **)(v5 + 376);
            if (*v26)
            {
              while (1)
              {
                while (1)
                {
                  v48 = (uint64_t **)v47;
                  v49 = *((_DWORD *)v47 + 7);
                  if (v46 >= v49)
                    break;
                  v47 = *v48;
                  v26 = v48;
                  if (!*v48)
                    goto LABEL_96;
                }
                if (v49 >= v46)
                  break;
                v47 = v48[1];
                if (!v47)
                {
                  v26 = v48 + 1;
                  goto LABEL_96;
                }
              }
              v50 = v48;
            }
            else
            {
LABEL_96:
              v50 = operator new(0x28uLL);
              v50[7] = v46;
              v50[8] = 0;
              *(_QWORD *)v50 = 0;
              *((_QWORD *)v50 + 1) = 0;
              *((_QWORD *)v50 + 2) = v48;
              *v26 = (uint64_t *)v50;
              v51 = **(_QWORD **)(v5 + 368);
              v52 = (uint64_t *)v50;
              if (v51)
              {
                *(_QWORD *)(v5 + 368) = v51;
                v52 = *v26;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 376), v52);
              ++*(_QWORD *)(v5 + 384);
            }
            v53 = v50[8];
            LODWORD(block.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(block.__r_.__value_.__r.__words[0]) = v46;
            LOWORD(block.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&block.__r_.__value_.__r.__words[1] + 2) = v53;
            _os_log_debug_impl(&dword_227A72000, v45, OS_LOG_TYPE_DEBUG, "#D fARTD[ %d ]: %d\n", (uint8_t *)&block, 0xEu);
          }
          goto LABEL_25;
        }
        std::to_string(&v55, **((_DWORD **)&v63 + 1));
        v34 = std::string::insert(&v55, 0, "Getting ARTD Response RAT(", 0x1CuLL);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v56, ") selection is different from the input RAT(", 0x2FuLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, *((_DWORD *)v2 + 10));
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v54;
        else
          v38 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          size = v54.__r_.__value_.__l.__size_;
        v40 = std::string::append(&v57, (const std::string::value_type *)v38, size);
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&block, ")", 2uLL);
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v60 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v44 = cf;
        cf = v58;
        v58 = 0;
        if (v44)
        {
          CFRelease(v44);
          if (v58)
            CFRelease(v58);
        }
        if (SHIBYTE(v60) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_77;
            goto LABEL_83;
          }
        }
        else if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_76;
        }
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_84;
        }
LABEL_83:
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_78:
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_85;
        }
LABEL_84:
        operator delete(v57.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_79:
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_25;
          goto LABEL_86;
        }
LABEL_85:
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_25;
LABEL_86:
        v17 = (void *)v55.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
    }
  }
}

void sub_227AECEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,CFTypeRef cf,char a42)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F037FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F037FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  const void *v12;
  ctu *v13;
  std::string *v14;
  CFTypeRef v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  NSObject *v27;
  CFTypeRef v28;
  void *v29;
  NSObject *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t **v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  char *v41;
  std::string v42;
  CFTypeRef v43;
  CFTypeRef cf;
  _OWORD v45[4];
  __int128 v46;
  int *v47;
  std::string __p;
  void *v49;
  void *aBlock;
  CFTypeRef v51;
  CFTypeRef v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_69:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v47 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v45[3] = v8;
        v46 = v8;
        v45[1] = v8;
        v45[2] = v8;
        v45[0] = v8;
        AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::ARI_CsiIceGetArfcnLockRspCb_SDK((AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *)v45, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_227B19BC0;
        strcpy(__p.__r_.__value_.__l.__data_, "send Getting ARFCN Lock Settings");
        checkError((AriSdk::MsgBase *)v45, (uint64_t)&__p, &cf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_45;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_45;
        }
        if (AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *)v45))
        {
          v41 = (char *)operator new(0x20uLL);
          strcpy(v41, "Failed to unpack response");
          CreateError();
          v11 = cf;
          cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (__p.__r_.__value_.__r.__words[0])
              CFRelease(__p.__r_.__value_.__l.__data_);
          }
          operator delete(v41);
          v12 = (const void *)v2[1];
          if (!v12)
            goto LABEL_66;
LABEL_46:
          if (v2[2])
          {
            v28 = cf;
            if (cf && (CFRetain(cf), (v12 = (const void *)v2[1]) == 0))
              v29 = 0;
            else
              v29 = _Block_copy(v12);
            v30 = v2[2];
            __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
            __p.__r_.__value_.__l.__size_ = 1174405120;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            v49 = &__block_descriptor_tmp_89;
            if (v29)
            {
              aBlock = _Block_copy(v29);
              v51 = v28;
              if (!v28)
                goto LABEL_56;
            }
            else
            {
              aBlock = 0;
              v51 = v28;
              if (!v28)
              {
LABEL_56:
                v52 = 0;
                dispatch_async(v30, &__p);
                if (v52)
                  CFRelease(v52);
                if (v51)
                  CFRelease(v51);
                if (aBlock)
                  _Block_release(aBlock);
                if (v29)
                  _Block_release(v29);
                if (v28)
                  CFRelease(v28);
                goto LABEL_66;
              }
            }
            CFRetain(v28);
            goto LABEL_56;
          }
LABEL_66:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3B8C](v45);
          goto LABEL_69;
        }
        v13 = (ctu *)*(unsigned int *)v46;
        if ((_DWORD)v13)
        {
          ctu::hex(v13);
          v14 = std::string::insert(&__p, 0, "Error on CsiIceGetArfcnLockRspCb result: 0x", 0x2BuLL);
          v42 = *v14;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v15 = cf;
          cf = v43;
          if (v15)
            CFRelease(v15);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v12 = (const void *)v2[1];
            if (!v12)
              goto LABEL_66;
            goto LABEL_46;
          }
        }
        else
        {
          v16 = **((_DWORD **)&v46 + 1);
          *(_DWORD *)(v5 + 416) = **((_DWORD **)&v46 + 1);
          if (v16 < 4)
          {
            v18 = *v47;
            v19 = (uint64_t **)(v5 + 400);
            v20 = *(uint64_t **)(v5 + 400);
            v21 = (uint64_t **)(v5 + 400);
            v22 = (uint64_t **)(v5 + 400);
            if (v20)
            {
              while (1)
              {
                while (1)
                {
                  v22 = (uint64_t **)v20;
                  v23 = *((_DWORD *)v20 + 7);
                  if (v16 >= v23)
                    break;
                  v20 = *v22;
                  v21 = v22;
                  if (!*v22)
                    goto LABEL_40;
                }
                if (v23 >= v16)
                  break;
                v20 = v22[1];
                if (!v20)
                {
                  v21 = v22 + 1;
                  goto LABEL_40;
                }
              }
              v24 = v22;
            }
            else
            {
LABEL_40:
              v24 = operator new(0x28uLL);
              v24[7] = v16;
              v24[8] = 0;
              *(_QWORD *)v24 = 0;
              *((_QWORD *)v24 + 1) = 0;
              *((_QWORD *)v24 + 2) = v22;
              *v21 = (uint64_t *)v24;
              v25 = **(_QWORD **)(v5 + 392);
              v26 = (uint64_t *)v24;
              if (v25)
              {
                *(_QWORD *)(v5 + 392) = v25;
                v26 = *v21;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 400), v26);
              ++*(_QWORD *)(v5 + 408);
            }
            v24[8] = v18;
            v27 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              v33 = *(_DWORD *)(v5 + 416);
              v34 = *(uint64_t **)(v5 + 400);
              v35 = (uint64_t **)(v5 + 400);
              if (v34)
              {
                while (1)
                {
                  while (1)
                  {
                    v35 = (uint64_t **)v34;
                    v36 = *((_DWORD *)v34 + 7);
                    if (v33 >= v36)
                      break;
                    v34 = *v35;
                    v19 = v35;
                    if (!*v35)
                      goto LABEL_81;
                  }
                  if (v36 >= v33)
                    break;
                  v34 = v35[1];
                  if (!v34)
                  {
                    v19 = v35 + 1;
                    goto LABEL_81;
                  }
                }
                v37 = v35;
              }
              else
              {
LABEL_81:
                v37 = operator new(0x28uLL);
                v37[7] = v33;
                v37[8] = 0;
                *(_QWORD *)v37 = 0;
                *((_QWORD *)v37 + 1) = 0;
                *((_QWORD *)v37 + 2) = v35;
                *v19 = (uint64_t *)v37;
                v38 = **(_QWORD **)(v5 + 392);
                v39 = (uint64_t *)v37;
                if (v38)
                {
                  *(_QWORD *)(v5 + 392) = v38;
                  v39 = *v19;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 400), v39);
                ++*(_QWORD *)(v5 + 408);
              }
              v40 = v37[8];
              LODWORD(__p.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(__p.__r_.__value_.__r.__words[0]) = v33;
              LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v40;
              _os_log_debug_impl(&dword_227A72000, v27, OS_LOG_TYPE_DEBUG, "#D fARFCNLock[ %d ]: %d\n", (uint8_t *)&__p, 0xEu);
              v12 = (const void *)v2[1];
              if (!v12)
                goto LABEL_66;
              goto LABEL_46;
            }
          }
          else
          {
            v17 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(__p.__r_.__value_.__r.__words[0]) = v16;
              _os_log_impl(&dword_227A72000, v17, OS_LOG_TYPE_DEFAULT, "#I Warning: getting ARFCN RAT: %d", (uint8_t *)&__p, 8u);
              v12 = (const void *)v2[1];
              if (!v12)
                goto LABEL_66;
              goto LABEL_46;
            }
          }
        }
LABEL_45:
        v12 = (const void *)v2[1];
        if (!v12)
          goto LABEL_66;
        goto LABEL_46;
      }
    }
  }
}

void sub_227AED76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v38;

  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3B8C](&a18);
  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c172_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c172_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  const void *v12;
  ctu *v13;
  std::string *v14;
  CFTypeRef v15;
  int v16;
  NSObject *v17;
  CFTypeRef v18;
  void *v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *__p;
  std::string __pa;
  CFTypeRef v25;
  CFTypeRef cf;
  _OWORD v27[4];
  __int128 v28;
  std::string block;
  void *v30;
  void *v31;
  CFTypeRef v32;
  CFTypeRef v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_54:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v27[3] = v8;
        v28 = v8;
        v27[1] = v8;
        v27[2] = v8;
        v27[0] = v8;
        AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::ARI_CsiIceGetCaEnableRspCb_SDK((AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *)v27, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B1B090;
        strcpy(block.__r_.__value_.__l.__data_, "send Getting ARTD Settings");
        checkError((AriSdk::MsgBase *)v27, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v10 = 0;
          if (v10)
            goto LABEL_30;
        }
        else
        {
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_30;
        }
        if (AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *)v27))
        {
          __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Failed to unpack response");
          CreateError();
          v11 = cf;
          cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (block.__r_.__value_.__r.__words[0])
              CFRelease(block.__r_.__value_.__l.__data_);
          }
          operator delete(__p);
          v12 = (const void *)v2[1];
          if (!v12)
            goto LABEL_51;
LABEL_31:
          if (v2[2])
          {
            v18 = cf;
            if (cf && (CFRetain(cf), (v12 = (const void *)v2[1]) == 0))
              v19 = 0;
            else
              v19 = _Block_copy(v12);
            v20 = v2[2];
            block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
            block.__r_.__value_.__l.__size_ = 1174405120;
            block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            v30 = &__block_descriptor_tmp_89;
            if (v19)
            {
              v31 = _Block_copy(v19);
              v32 = v18;
              if (!v18)
                goto LABEL_41;
            }
            else
            {
              v31 = 0;
              v32 = v18;
              if (!v18)
              {
LABEL_41:
                v33 = 0;
                dispatch_async(v20, &block);
                if (v33)
                  CFRelease(v33);
                if (v32)
                  CFRelease(v32);
                if (v31)
                  _Block_release(v31);
                if (v19)
                  _Block_release(v19);
                if (v18)
                  CFRelease(v18);
                goto LABEL_51;
              }
            }
            CFRetain(v18);
            goto LABEL_41;
          }
LABEL_51:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3A30](v27);
          goto LABEL_54;
        }
        v13 = (ctu *)*(unsigned int *)v28;
        if ((_DWORD)v13)
        {
          ctu::hex(v13);
          v14 = std::string::insert(&block, 0, "Error on CsiIceGetCaEnableRspCb result: 0x", 0x2AuLL);
          __pa = *v14;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v15 = cf;
          cf = v25;
          if (v15)
            CFRelease(v15);
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__pa.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(block.__r_.__value_.__l.__data_);
            v12 = (const void *)v2[1];
            if (!v12)
              goto LABEL_51;
            goto LABEL_31;
          }
        }
        else
        {
          v16 = **((_DWORD **)&v28 + 1);
          *(_DWORD *)(v5 + 420) = **((_DWORD **)&v28 + 1);
          v17 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(block.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(block.__r_.__value_.__r.__words[0]) = v16;
            _os_log_debug_impl(&dword_227A72000, v17, OS_LOG_TYPE_DEBUG, "#D fCAEnabled: %d\n", (uint8_t *)&block, 8u);
            v12 = (const void *)v2[1];
            if (!v12)
              goto LABEL_51;
            goto LABEL_31;
          }
        }
LABEL_30:
        v12 = (const void *)v2[1];
        if (!v12)
          goto LABEL_51;
        goto LABEL_31;
      }
    }
  }
}

void sub_227AEDD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0380F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0380F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  std::string *v12;
  __int128 v13;
  CFTypeRef v14;
  void *v15;
  ctu *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *p_p;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  void *v28;
  NSObject *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::string __p;
  std::string v33;
  std::string v34;
  CFTypeRef v35;
  std::string v36;
  CFTypeRef cf;
  _OWORD v38[4];
  unsigned int *v39;
  std::string block;
  void *v41;
  void *v42;
  CFTypeRef v43;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_68:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v39 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v38[2] = v7;
        v38[3] = v7;
        v38[0] = v7;
        v38[1] = v7;
        AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::ARI_CsiIceRxDiversityRspCb_SDK((AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *)v38, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::to_string(&v36, *(_DWORD *)(v2 + 32));
        v8 = std::string::insert(&v36, 0, "send Setting RX Diversity of Rat: ", 0x22uLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        checkError((AriSdk::MsgBase *)v38, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_7:
            if (cf)
              v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v10 = 0;
            if (v10)
              goto LABEL_46;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v36.__r_.__value_.__l.__data_);
        if (cf)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          goto LABEL_46;
LABEL_17:
        if (AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::unpack((AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *)v38))
        {
          std::to_string(&block, *(_DWORD *)(v2 + 32));
          v12 = std::string::insert(&block, 0, "Failed to unpack response of setting Rx Diversity, and RAT selection: ", 0x46uLL);
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = (CFTypeRef)v34.__r_.__value_.__r.__words[0];
          v34.__r_.__value_.__r.__words[0] = 0;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_45:
            operator delete(v15);
          }
LABEL_46:
          v26 = *(const void **)v2;
          if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
          {
LABEL_65:
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A3A54](v38);
            goto LABEL_68;
          }
          v27 = cf;
          if (cf && (CFRetain(cf), (v26 = *(const void **)v2) == 0))
            v28 = 0;
          else
            v28 = _Block_copy(v26);
          v29 = *(NSObject **)(v2 + 8);
          block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
          block.__r_.__value_.__l.__size_ = 1174405120;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          v41 = &__block_descriptor_tmp_81;
          if (v28)
          {
            v42 = _Block_copy(v28);
            v43 = v27;
            if (!v27)
              goto LABEL_57;
          }
          else
          {
            v42 = 0;
            v43 = v27;
            if (!v27)
            {
LABEL_57:
              dispatch_async(v29, &block);
              if (v43)
                CFRelease(v43);
              if (v42)
                _Block_release(v42);
              if (v28)
                _Block_release(v28);
              if (v27)
                CFRelease(v27);
              goto LABEL_65;
            }
          }
          CFRetain(v27);
          goto LABEL_57;
        }
        v16 = (ctu *)*v39;
        if (!(_DWORD)v16)
          goto LABEL_46;
        ctu::hex(v16);
        v17 = std::string::insert(&v33, 0, "Error on rx diversity response result: 0x", 0x29uLL);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v34, ", and RAT selection: ", 0x15uLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *(_DWORD *)(v2 + 32));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v23 = std::string::append(&block, (const std::string::value_type *)p_p, size);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v25 = cf;
        cf = v35;
        v35 = 0;
        if (v25)
        {
          CFRelease(v25);
          if (v35)
            CFRelease(v35);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v36.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_37;
            goto LABEL_42;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_43;
        }
LABEL_42:
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_46;
LABEL_44:
          v15 = (void *)v33.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v34.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_46;
        goto LABEL_44;
      }
    }
  }
}

void sub_227AEE3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v39;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v36 - 73) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v36 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v36 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_12:
      if (cf)
        CFRelease(cf);
      MEMORY[0x22E2A3A54](&a35);
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_227AEE570()
{
  JUMPOUT(0x227AEE538);
}

uint64_t __copy_helper_block_e8_32c188_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c188_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  const __CFDictionary *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  const __CFDictionary *v16;

  v2 = *(uint64_t **)a1;
  v4 = **(_QWORD **)a1;
  v3 = *(const __CFDictionary **)(*(_QWORD *)a1 + 8);
  v16 = v3;
  if (v3)
    CFRetain(v3);
  v5 = (const void *)v2[2];
  if (v5)
  {
    v6 = _Block_copy(v5);
    v7 = v2[3];
    v14 = v6;
    v15 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  v7 = v2[3];
  v14 = 0;
  v15 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  radio::ARICommandDriver::setAntennaTxPort_sync(v4, &v16, (uint64_t)&v14);
  if (v7)
    dispatch_release(v7);
  if (v6)
    _Block_release(v6);
  if (v3)
    CFRelease(v3);
  v8 = v2[3];
  if (v8)
    dispatch_release(v8);
  v9 = (const void *)v2[2];
  if (v9)
    _Block_release(v9);
  v10 = (const void *)v2[1];
  if (v10)
    CFRelease(v10);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_227AEE7A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v7;
  const void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v5)
    dispatch_release(v5);
  if (v4)
    _Block_release(v4);
  if (v3)
    CFRelease(v3);
  v7 = v2[3];
  if (v7)
    dispatch_release(v7);
  v8 = (const void *)v2[2];
  if (v8)
    _Block_release(v8);
  v9 = (const void *)v2[1];
  if (v9)
    CFRelease(v9);
  operator delete(v2);
  v10 = (std::__shared_weak_count *)v1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  char *v11;
  ctu *v12;
  std::string *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *__p;
  std::string __pa;
  CFTypeRef v23;
  CFTypeRef cf;
  _OWORD v25[4];
  unsigned int *v26;
  std::string block;
  void *v28;
  void *v29;
  CFTypeRef v30;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_50:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v26 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[2] = v7;
        v25[3] = v7;
        v25[0] = v7;
        v25[1] = v7;
        AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::ARI_CsiIceSetTxAntennaRspCb_SDK((AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *)v25, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B1D2B0;
        strcpy(block.__r_.__value_.__l.__data_, "send Setting Antenna Tx Antenna Status");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_28;
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (v8)
            goto LABEL_28;
        }
        if (AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::unpack((AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *)v25))
        {
          __p = (char *)operator new(0x38uLL);
          strcpy(__p, "Failed to unpack response of setting Antenna Tx Port");
          CreateError();
          v10 = cf;
          cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0])
              CFRelease(block.__r_.__value_.__l.__data_);
          }
          v11 = __p;
          goto LABEL_27;
        }
        v12 = (ctu *)*v26;
        if ((_DWORD)v12)
        {
          ctu::hex(v12);
          v13 = std::string::insert(&block, 0, "Error on setting antenna tx port response result: 0x", 0x34uLL);
          __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = v23;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__pa.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        v15 = *(const void **)v2;
        if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
        {
LABEL_47:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3C04](v25);
          goto LABEL_50;
        }
        v16 = cf;
        if (cf && (CFRetain(cf), (v15 = *(const void **)v2) == 0))
          v17 = 0;
        else
          v17 = _Block_copy(v15);
        v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v28 = &__block_descriptor_tmp_81;
        if (v17)
        {
          v29 = _Block_copy(v17);
          v30 = v16;
          if (!v16)
            goto LABEL_39;
        }
        else
        {
          v29 = 0;
          v30 = v16;
          if (!v16)
          {
LABEL_39:
            dispatch_async(v18, &block);
            if (v30)
              CFRelease(v30);
            if (v29)
              _Block_release(v29);
            if (v17)
              _Block_release(v17);
            if (v16)
              CFRelease(v16);
            goto LABEL_47;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_227AEEBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 73) < 0)
    operator delete(*(void **)(v19 - 96));
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3C04](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0381F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0381F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  std::string *v12;
  __int128 v13;
  CFTypeRef v14;
  void *v15;
  ctu *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *p_p;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  void *v28;
  NSObject *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::string __p;
  std::string v33;
  std::string v34;
  CFTypeRef v35;
  std::string v36;
  CFTypeRef cf;
  _OWORD v38[4];
  unsigned int *v39;
  std::string block;
  void *v41;
  void *v42;
  CFTypeRef v43;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_68:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v39 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v38[2] = v7;
        v38[3] = v7;
        v38[0] = v7;
        v38[1] = v7;
        AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::ARI_CsiIceArtdSettingRspCb_SDK((AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *)v38, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::to_string(&v36, *(_DWORD *)(v2 + 32));
        v8 = std::string::insert(&v36, 0, "send Setting ARTD Settings for: ", 0x20uLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        checkError((AriSdk::MsgBase *)v38, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_7:
            if (cf)
              v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v10 = 0;
            if (v10)
              goto LABEL_46;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v36.__r_.__value_.__l.__data_);
        if (cf)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          goto LABEL_46;
LABEL_17:
        if (AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::unpack((AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *)v38))
        {
          std::to_string(&block, *(_DWORD *)(v2 + 32));
          v12 = std::string::insert(&block, 0, "Failed to unpack response of setting ARTD, and RAT selection: ", 0x3EuLL);
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = (CFTypeRef)v34.__r_.__value_.__r.__words[0];
          v34.__r_.__value_.__r.__words[0] = 0;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_45:
            operator delete(v15);
          }
LABEL_46:
          v26 = *(const void **)v2;
          if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
          {
LABEL_65:
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A3A0C](v38);
            goto LABEL_68;
          }
          v27 = cf;
          if (cf && (CFRetain(cf), (v26 = *(const void **)v2) == 0))
            v28 = 0;
          else
            v28 = _Block_copy(v26);
          v29 = *(NSObject **)(v2 + 8);
          block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
          block.__r_.__value_.__l.__size_ = 1174405120;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          v41 = &__block_descriptor_tmp_81;
          if (v28)
          {
            v42 = _Block_copy(v28);
            v43 = v27;
            if (!v27)
              goto LABEL_57;
          }
          else
          {
            v42 = 0;
            v43 = v27;
            if (!v27)
            {
LABEL_57:
              dispatch_async(v29, &block);
              if (v43)
                CFRelease(v43);
              if (v42)
                _Block_release(v42);
              if (v28)
                _Block_release(v28);
              if (v27)
                CFRelease(v27);
              goto LABEL_65;
            }
          }
          CFRetain(v27);
          goto LABEL_57;
        }
        v16 = (ctu *)*v39;
        if (!(_DWORD)v16)
          goto LABEL_46;
        ctu::hex(v16);
        v17 = std::string::insert(&v33, 0, "Error on setting ARTD response result: 0x", 0x29uLL);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v34, ", and RAT selection: ", 0x15uLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *(_DWORD *)(v2 + 32));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v23 = std::string::append(&block, (const std::string::value_type *)p_p, size);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v25 = cf;
        cf = v35;
        v35 = 0;
        if (v25)
        {
          CFRelease(v25);
          if (v35)
            CFRelease(v35);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v36.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_37;
            goto LABEL_42;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_43;
        }
LABEL_42:
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_46;
LABEL_44:
          v15 = (void *)v33.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v34.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_46;
        goto LABEL_44;
      }
    }
  }
}

void sub_227AEF1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v39;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v36 - 73) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v36 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v36 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_12:
      if (cf)
        CFRelease(cf);
      MEMORY[0x22E2A3A0C](&a35);
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_227AEF3A4()
{
  JUMPOUT(0x227AEF36CLL);
}

uint64_t __copy_helper_block_e8_32c176_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c176_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  std::string *v12;
  __int128 v13;
  CFTypeRef v14;
  void *v15;
  ctu *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *p_p;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  void *v28;
  NSObject *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::string __p;
  std::string v33;
  std::string v34;
  CFTypeRef v35;
  std::string v36;
  CFTypeRef cf;
  _OWORD v38[4];
  unsigned int *v39;
  std::string block;
  void *v41;
  void *v42;
  CFTypeRef v43;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_68:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v39 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v38[2] = v7;
        v38[3] = v7;
        v38[0] = v7;
        v38[1] = v7;
        AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::ARI_CsiIceArfcnLockRspCb_SDK((AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *)v38, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::to_string(&v36, *(_DWORD *)(v2 + 32));
        v8 = std::string::insert(&v36, 0, "send Setting ARFCN Lock Settings for: ", 0x26uLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        checkError((AriSdk::MsgBase *)v38, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_7:
            if (cf)
              v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v10 = 0;
            if (v10)
              goto LABEL_46;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v36.__r_.__value_.__l.__data_);
        if (cf)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          goto LABEL_46;
LABEL_17:
        if (AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::unpack((AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *)v38))
        {
          std::to_string(&block, *(_DWORD *)(v2 + 32));
          v12 = std::string::insert(&block, 0, "Failed to unpack response of setting ARFCN Lock, and RAT selection: ", 0x44uLL);
          v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = (CFTypeRef)v34.__r_.__value_.__r.__words[0];
          v34.__r_.__value_.__r.__words[0] = 0;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v15 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_45:
            operator delete(v15);
          }
LABEL_46:
          v26 = *(const void **)v2;
          if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
          {
LABEL_65:
            if (cf)
              CFRelease(cf);
            MEMORY[0x22E2A3718](v38);
            goto LABEL_68;
          }
          v27 = cf;
          if (cf && (CFRetain(cf), (v26 = *(const void **)v2) == 0))
            v28 = 0;
          else
            v28 = _Block_copy(v26);
          v29 = *(NSObject **)(v2 + 8);
          block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
          block.__r_.__value_.__l.__size_ = 1174405120;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          v41 = &__block_descriptor_tmp_81;
          if (v28)
          {
            v42 = _Block_copy(v28);
            v43 = v27;
            if (!v27)
              goto LABEL_57;
          }
          else
          {
            v42 = 0;
            v43 = v27;
            if (!v27)
            {
LABEL_57:
              dispatch_async(v29, &block);
              if (v43)
                CFRelease(v43);
              if (v42)
                _Block_release(v42);
              if (v28)
                _Block_release(v28);
              if (v27)
                CFRelease(v27);
              goto LABEL_65;
            }
          }
          CFRetain(v27);
          goto LABEL_57;
        }
        v16 = (ctu *)*v39;
        if (!(_DWORD)v16)
          goto LABEL_46;
        ctu::hex(v16);
        v17 = std::string::insert(&v33, 0, "Error on setting ARFCN Lock response result: 0x", 0x2FuLL);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v34, ", and RAT selection: ", 0x15uLL);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *(_DWORD *)(v2 + 32));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v23 = std::string::append(&block, (const std::string::value_type *)p_p, size);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        v25 = cf;
        cf = v35;
        v35 = 0;
        if (v25)
        {
          CFRelease(v25);
          if (v35)
            CFRelease(v35);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v36.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_37;
            goto LABEL_42;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_38;
          goto LABEL_43;
        }
LABEL_42:
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_46;
LABEL_44:
          v15 = (void *)v33.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v34.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_46;
        goto LABEL_44;
      }
    }
  }
}

void sub_227AEF8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v39;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v36 - 73) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v36 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v36 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_12:
      if (cf)
        CFRelease(cf);
      MEMORY[0x22E2A3718](&a35);
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_227AEFAA8()
{
  JUMPOUT(0x227AEFA70);
}

uint64_t __copy_helper_block_e8_32c177_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c177_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0382F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0382F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  char *v11;
  ctu *v12;
  std::string *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *__p;
  std::string __pa;
  CFTypeRef v23;
  CFTypeRef cf;
  _OWORD v25[4];
  unsigned int *v26;
  std::string block;
  void *v28;
  void *v29;
  CFTypeRef v30;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_50:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v26 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[2] = v7;
        v25[3] = v7;
        v25[0] = v7;
        v25[1] = v7;
        AriSdk::ARI_CsiIceCaEnableRspCb_SDK::ARI_CsiIceCaEnableRspCb_SDK((AriSdk::ARI_CsiIceCaEnableRspCb_SDK *)v25, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B19BA0;
        strcpy(block.__r_.__value_.__l.__data_, "send Setting CA Enabled");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_28;
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (v8)
            goto LABEL_28;
        }
        if (AriSdk::ARI_CsiIceCaEnableRspCb_SDK::unpack((AriSdk::ARI_CsiIceCaEnableRspCb_SDK *)v25))
        {
          __p = (char *)operator new(0x28uLL);
          strcpy(__p, "Failed to unpack response of setting CA");
          CreateError();
          v10 = cf;
          cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0])
              CFRelease(block.__r_.__value_.__l.__data_);
          }
          v11 = __p;
          goto LABEL_27;
        }
        v12 = (ctu *)*v26;
        if ((_DWORD)v12)
        {
          ctu::hex(v12);
          v13 = std::string::insert(&block, 0, "Error on enabling CA response result: 0x", 0x28uLL);
          __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = v23;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__pa.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        v15 = *(const void **)v2;
        if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
        {
LABEL_47:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3670](v25);
          goto LABEL_50;
        }
        v16 = cf;
        if (cf && (CFRetain(cf), (v15 = *(const void **)v2) == 0))
          v17 = 0;
        else
          v17 = _Block_copy(v15);
        v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v28 = &__block_descriptor_tmp_81;
        if (v17)
        {
          v29 = _Block_copy(v17);
          v30 = v16;
          if (!v16)
            goto LABEL_39;
        }
        else
        {
          v29 = 0;
          v30 = v16;
          if (!v16)
          {
LABEL_39:
            dispatch_async(v18, &block);
            if (v30)
              CFRelease(v30);
            if (v29)
              _Block_release(v29);
            if (v17)
              _Block_release(v17);
            if (v16)
              CFRelease(v16);
            goto LABEL_47;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_227AEFEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 73) < 0)
    operator delete(*(void **)(v19 - 96));
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3670](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSF_IK14__CFDictionaryEEEEEEUb6_E4__19vEENSB_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t);
  NSObject *v19;
  const void *v20;
  CFTypeRef v21;
  void *v22;
  NSObject *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  CFTypeRef cf;
  _OWORD v27[7];
  void *__p[4];
  void *aBlock;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 56);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_52:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v27[5] = v8;
        v27[6] = v8;
        v27[3] = v8;
        v27[4] = v8;
        v27[1] = v8;
        v27[2] = v8;
        v27[0] = v8;
        AriSdk::ARI_IBISimTestRspCb_SDK::ARI_IBISimTestRspCb_SDK((AriSdk::ARI_IBISimTestRspCb_SDK *)v27, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        v9 = *(char *)(v2 + 55);
        if (v9 >= 0)
          v10 = *(unsigned __int8 *)(v2 + 55);
        else
          v10 = *(_QWORD *)(v2 + 40);
        v11 = v10 + 23;
        memset(__p, 170, 24);
        if (v10 + 23 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v12 = (_QWORD *)(v2 + 32);
        if (v10 < 0xFFFFFFFFFFFFFFE9)
        {
          v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v14 = v11 | 7;
          v15 = v14 + 1;
          v16 = (char *)operator new(v14 + 1);
          __p[1] = (void *)(v10 + 23);
          __p[2] = (void *)(v15 | 0x8000000000000000);
          __p[0] = v16;
          qmemcpy(v16, "send SIM test command: ", 23);
          v13 = v16 + 23;
          if (!v10)
          {
LABEL_18:
            v13[v10] = 0;
            checkError((AriSdk::MsgBase *)v27, (uint64_t)__p, &cf);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if (cf)
              v18 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v18 = 0;
            if (!v18)
            {
              v19 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                if (*(char *)(v2 + 55) < 0)
                  v12 = (_QWORD *)*v12;
                LODWORD(__p[0]) = 136315138;
                *(void **)((char *)__p + 4) = v12;
                _os_log_impl(&dword_227A72000, v19, OS_LOG_TYPE_DEFAULT, "#I SIM test command: %s successful", (uint8_t *)__p, 0xCu);
              }
            }
            v20 = *(const void **)(v2 + 16);
            if (!v20 || !*(_QWORD *)(v2 + 24))
              goto LABEL_49;
            v21 = cf;
            if (cf && (CFRetain(cf), (v20 = *(const void **)(v2 + 16)) == 0))
              v22 = 0;
            else
              v22 = _Block_copy(v20);
            v23 = *(NSObject **)(v2 + 24);
            __p[0] = (void *)MEMORY[0x24BDAC760];
            __p[1] = (void *)1174405120;
            __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            __p[3] = &__block_descriptor_tmp_89;
            if (v22)
            {
              aBlock = _Block_copy(v22);
              v30 = v21;
              if (!v21)
                goto LABEL_39;
            }
            else
            {
              aBlock = 0;
              v30 = v21;
              if (!v21)
              {
LABEL_39:
                v31 = 0;
                dispatch_async(v23, __p);
                if (v31)
                  CFRelease(v31);
                if (v30)
                  CFRelease(v30);
                if (aBlock)
                  _Block_release(aBlock);
                if (v22)
                  _Block_release(v22);
                if (v21)
                  CFRelease(v21);
LABEL_49:
                if (cf)
                  CFRelease(cf);
                MEMORY[0x22E2A331C](v27);
                goto LABEL_52;
              }
            }
            CFRetain(v21);
            goto LABEL_39;
          }
        }
        else
        {
          v13 = (char *)&__p[2] + 7;
          HIBYTE(__p[2]) = v10 + 23;
          qmemcpy(__p, "send SIM test command: ", 23);
        }
        if (v9 >= 0)
          v17 = (_QWORD *)(v2 + 32);
        else
          v17 = (_QWORD *)*v12;
        memmove(v13, v17, v10);
        goto LABEL_18;
      }
    }
  }
}

void sub_227AF0430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c238_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c238_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19NS6_ISM_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0383F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19NS6_ISM_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0383F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19NS6_ISM_EEE16__on_zero_sharedEv(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  xpc_object_t object;
  xpc_object_t v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  v6 = v2;
  if (!v2)
  {
    v6 = xpc_null_create();
    v4 = (void *)a1[6];
    object = v4;
    if (v4)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v2);
  v4 = (void *)a1[6];
  object = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v4);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v3 + 16))(v3, &v6, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v6);
}

void sub_227AF0668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6)
      goto LABEL_3;
LABEL_6:
    a1[5] = xpc_null_create();
    v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7)
      return xpc_retain(v7);
    goto LABEL_7;
  }
  v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v6);
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
LABEL_7:
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  std::__shared_weak_count_vtbl **v2;
  std::__shared_weak_count_vtbl *v3;
  __int128 v4;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  __int128 *v43;

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v4;
  v33[3] = v4;
  v33[0] = v4;
  v33[1] = v4;
  AriSdk::ARI_CsiSecGetRandomNumReq_SDK::ARI_CsiSecGetRandomNumReq_SDK((AriSdk::ARI_CsiSecGetRandomNumReq_SDK *)v33);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  v6 = v2[1];
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v2[2];
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = v2[2];
  if (v8)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  v10 = v2[3];
  v9 = (uint64_t)v2[4];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F0384A0;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v7;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  v13[2].__vftable = v10;
  v13[2].__shared_owners_ = v9;
  v15 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v35 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v35 + 1) = 1174405120;
  *(_QWORD *)&v36 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_153;
  v37 = (unint64_t)&v13[1];
  v38 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock = v15;
  v40 = 0x40000000;
  v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v42 = &unk_24F037988;
  v43 = &v35;
  v17 = _Block_copy(&aBlock);
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v22;
  v36 = v22;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  aBlock = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v23)
  {
    v40 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v40)
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v25 = (unint64_t *)(v40 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v34 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v34)
    _Block_release(v34);
  MEMORY[0x22E2A2FF8](&v35);
  AriSdk::ARI_CsiSecGetRandomNumReq_SDK::~ARI_CsiSecGetRandomNumReq_SDK((AriSdk::ARI_CsiSecGetRandomNumReq_SDK *)v33);
  v27 = (std::__shared_weak_count *)v2[4];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v2[2];
  if (v28)
    dispatch_release(v28);
  v29 = v2[1];
  if (v29)
    _Block_release(v29);
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_227AF0A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v29;
  NSObject *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a19);
  AriSdk::ARI_CsiSecGetRandomNumReq_SDK::~ARI_CsiSecGetRandomNumReq_SDK((AriSdk::ARI_CsiSecGetRandomNumReq_SDK *)&a9);
  v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    v30 = v27[2];
    if (!v30)
      goto LABEL_5;
  }
  dispatch_release(v30);
  v31 = (const void *)v27[1];
  if (!v31)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  void *v9;
  int v10;
  NSObject *v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  char *v17;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  xpc_object_t v21;
  xpc_object_t v22;
  const void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void **v28;
  const void *v29;
  void *v30;
  void **v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void **v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  void *v42[3];
  _OWORD v43[4];
  unint64_t v44;
  __int128 __src;
  __int128 v46;
  int v47;
  _BYTE block[24];
  void *v49;
  const void *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_96:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v44 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v43[2] = v8;
        v43[3] = v8;
        v43[0] = v8;
        v43[1] = v8;
        AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::ARI_CsiSecGetRandomNumRspCb_SDK((AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *)v43, a2);
        memset(v42, 170, sizeof(v42));
        block[23] = 18;
        strcpy(block, "send Getting Nonce");
        checkErrorStr((AriSdk::MsgBase *)v43, (uint64_t)block, (uint64_t)v42);
        if ((block[23] & 0x80000000) != 0)
          operator delete(*(void **)block);
        v9 = (void *)HIBYTE(v42[2]);
        v10 = SHIBYTE(v42[2]);
        if (SHIBYTE(v42[2]) < 0)
          v9 = v42[1];
        if (!v9)
        {
          if (!AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *)v43))
          {
            v47 = -1431655766;
            *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            __src = v18;
            v46 = v18;
            v19 = *(_DWORD *)(v44 + 32);
            v20 = *(_OWORD *)(v44 + 16);
            __src = *(_OWORD *)v44;
            v46 = v20;
            v47 = v19;
            if (v19 >= 0x21)
            {
              v19 = 32;
              v47 = 32;
            }
            __p = 0;
            v40 = 0;
            v41 = 0;
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)&__src, (char *)&__src + v19, v19);
            if (v2[1] && v2[2])
            {
              v21 = xpc_null_create();
              v22 = xpc_data_create(__p, v40 - (_BYTE *)__p);
              if (!v22)
                v22 = xpc_null_create();
              v23 = (const void *)v2[1];
              if (v23)
                v24 = _Block_copy(v23);
              else
                v24 = 0;
              v34 = v2[2];
              *(_QWORD *)block = MEMORY[0x24BDAC760];
              *(_QWORD *)&block[8] = 1174405120;
              *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
              v49 = &__block_descriptor_tmp_152;
              if (v24)
                v35 = _Block_copy(v24);
              else
                v35 = 0;
              v50 = v35;
              v51 = v21;
              if (v21)
                xpc_retain(v21);
              else
                v51 = xpc_null_create();
              v52 = v22;
              if (v22)
                xpc_retain(v22);
              else
                v52 = xpc_null_create();
              dispatch_async(v34, block);
              xpc_release(v52);
              v52 = 0;
              xpc_release(v51);
              v51 = 0;
              if (v50)
                _Block_release(v50);
              if (v24)
                _Block_release(v24);
              xpc_release(v22);
              xpc_release(v21);
            }
            if (__p)
            {
              v40 = __p;
              operator delete(__p);
            }
            goto LABEL_93;
          }
          if (SHIBYTE(v42[2]) < 0)
          {
            v42[1] = (void *)19;
            v17 = (char *)v42[0];
          }
          else
          {
            HIBYTE(v42[2]) = 19;
            v17 = (char *)v42;
          }
          strcpy(v17, "Failed to get Nonce");
          v27 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            v38 = v42;
            if (SHIBYTE(v42[2]) < 0)
              v38 = (void **)v42[0];
            *(_DWORD *)block = 136315138;
            *(_QWORD *)&block[4] = v38;
            _os_log_error_impl(&dword_227A72000, v27, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
            if (!v2[1])
              goto LABEL_93;
          }
          else if (!v2[1])
          {
            goto LABEL_93;
          }
          if (!v2[2])
            goto LABEL_93;
          if (SHIBYTE(v42[2]) >= 0)
            v28 = v42;
          else
            v28 = (void **)v42[0];
          v13 = xpc_string_create((const char *)v28);
          if (!v13)
            v13 = xpc_null_create();
          v14 = xpc_null_create();
          v29 = (const void *)v2[1];
          if (v29)
            v30 = _Block_copy(v29);
          else
            v30 = 0;
          v32 = v2[2];
          *(_QWORD *)block = MEMORY[0x24BDAC760];
          *(_QWORD *)&block[8] = 1174405120;
          *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          v49 = &__block_descriptor_tmp_152;
          if (v30)
            v33 = _Block_copy(v30);
          else
            v33 = 0;
          v50 = v33;
          v51 = v13;
          if (v13)
            xpc_retain(v13);
          else
            v51 = xpc_null_create();
          v52 = v14;
          if (v14)
            xpc_retain(v14);
          else
            v52 = xpc_null_create();
          dispatch_async(v32, block);
          xpc_release(v52);
          v52 = 0;
          xpc_release(v51);
          v51 = 0;
          if (v50)
            _Block_release(v50);
          if (v30)
            _Block_release(v30);
          goto LABEL_45;
        }
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v31 = (void **)v42[0];
          if (v10 >= 0)
            v31 = v42;
          *(_DWORD *)block = 136315138;
          *(_QWORD *)&block[4] = v31;
          _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
          if (!v2[1])
            goto LABEL_93;
        }
        else if (!v2[1])
        {
          goto LABEL_93;
        }
        if (v2[2])
        {
          if (SHIBYTE(v42[2]) >= 0)
            v12 = v42;
          else
            v12 = (void **)v42[0];
          v13 = xpc_string_create((const char *)v12);
          if (!v13)
            v13 = xpc_null_create();
          v14 = xpc_null_create();
          v15 = (const void *)v2[1];
          if (v15)
            v16 = _Block_copy(v15);
          else
            v16 = 0;
          v25 = v2[2];
          *(_QWORD *)block = MEMORY[0x24BDAC760];
          *(_QWORD *)&block[8] = 1174405120;
          *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          v49 = &__block_descriptor_tmp_152;
          if (v16)
            v26 = _Block_copy(v16);
          else
            v26 = 0;
          v50 = v26;
          v51 = v13;
          if (v13)
            xpc_retain(v13);
          else
            v51 = xpc_null_create();
          v52 = v14;
          if (v14)
            xpc_retain(v14);
          else
            v52 = xpc_null_create();
          dispatch_async(v25, block);
          xpc_release(v52);
          v52 = 0;
          xpc_release(v51);
          v51 = 0;
          if (v50)
            _Block_release(v50);
          if (v16)
            _Block_release(v16);
LABEL_45:
          xpc_release(v14);
          xpc_release(v13);
        }
LABEL_93:
        if (SHIBYTE(v42[2]) < 0)
          operator delete(v42[0]);
        MEMORY[0x22E2A3CAC](v43);
        goto LABEL_96;
      }
    }
  }
}

void sub_227AF11EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0384A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0384A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if ((v11 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_20:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_20;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  std::__shared_weak_count_vtbl **v2;
  std::__shared_weak_count_vtbl *v3;
  __int128 v4;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  __int128 *v43;

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v4;
  v33[3] = v4;
  v33[0] = v4;
  v33[1] = v4;
  AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::ARI_CsiSecGetRFSelfTestNonceReq_SDK((AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *)v33);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  v6 = v2[1];
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v2[2];
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = v2[2];
  if (v8)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  v10 = v2[3];
  v9 = (uint64_t)v2[4];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F038520;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v7;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  v13[2].__vftable = v10;
  v13[2].__shared_owners_ = v9;
  v15 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v35 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v35 + 1) = 1174405120;
  *(_QWORD *)&v36 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_156;
  v37 = (unint64_t)&v13[1];
  v38 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock = v15;
  v40 = 0x40000000;
  v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v42 = &unk_24F037988;
  v43 = &v35;
  v17 = _Block_copy(&aBlock);
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v22;
  v36 = v22;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  aBlock = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v23)
  {
    v40 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v40)
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v25 = (unint64_t *)(v40 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v34 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v34)
    _Block_release(v34);
  MEMORY[0x22E2A2FF8](&v35);
  AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::~ARI_CsiSecGetRFSelfTestNonceReq_SDK((AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *)v33);
  v27 = (std::__shared_weak_count *)v2[4];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v2[2];
  if (v28)
    dispatch_release(v28);
  v29 = v2[1];
  if (v29)
    _Block_release(v29);
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_227AF1834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v29;
  NSObject *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a19);
  AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::~ARI_CsiSecGetRFSelfTestNonceReq_SDK((AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *)&a9);
  v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    v30 = v27[2];
    if (!v30)
      goto LABEL_5;
  }
  dispatch_release(v30);
  v31 = (const void *)v27[1];
  if (!v31)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  std::string::size_type v9;
  int v10;
  NSObject *v11;
  std::string *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::string::size_type size;
  NSObject *v18;
  std::string *v19;
  const void *v20;
  void *v21;
  __int128 v22;
  unsigned int v23;
  __int128 v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  std::string *v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::string *v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  std::string v42;
  _OWORD v43[4];
  unint64_t v44;
  __int128 __src;
  __int128 v46;
  int v47;
  _BYTE block[24];
  void *v49;
  const void *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_95:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v44 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v43[2] = v8;
        v43[3] = v8;
        v43[0] = v8;
        v43[1] = v8;
        AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK((AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *)v43, a2);
        memset(&v42, 170, sizeof(v42));
        *(_QWORD *)block = operator new(0x20uLL);
        *(_OWORD *)&block[8] = xmmword_227B1B090;
        strcpy(*(char **)block, "send Getting RF Test Nonce");
        checkErrorStr((AriSdk::MsgBase *)v43, (uint64_t)block, (uint64_t)&v42);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          v10 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v42.__r_.__value_.__l.__size_;
          if (size)
            goto LABEL_9;
        }
        else
        {
          v9 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          v10 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v9 = v42.__r_.__value_.__l.__size_;
          if (v9)
          {
LABEL_9:
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v31 = (std::string *)v42.__r_.__value_.__r.__words[0];
              if (v10 >= 0)
                v31 = &v42;
              *(_DWORD *)block = 136315138;
              *(_QWORD *)&block[4] = v31;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              if (!v2[1])
                goto LABEL_92;
            }
            else if (!v2[1])
            {
              goto LABEL_92;
            }
            if (v2[2])
            {
              if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v12 = &v42;
              else
                v12 = (std::string *)v42.__r_.__value_.__r.__words[0];
              v13 = xpc_string_create((const char *)v12);
              if (!v13)
                v13 = xpc_null_create();
              v14 = xpc_null_create();
              v15 = (const void *)v2[1];
              if (v15)
                v16 = _Block_copy(v15);
              else
                v16 = 0;
              v29 = v2[2];
              *(_QWORD *)block = MEMORY[0x24BDAC760];
              *(_QWORD *)&block[8] = 1174405120;
              *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
              v49 = &__block_descriptor_tmp_152;
              if (v16)
                v30 = _Block_copy(v16);
              else
                v30 = 0;
              v50 = v30;
              v51 = v13;
              if (v13)
                xpc_retain(v13);
              else
                v51 = xpc_null_create();
              v52 = v14;
              if (v14)
                xpc_retain(v14);
              else
                v52 = xpc_null_create();
              dispatch_async(v29, block);
              xpc_release(v52);
              v52 = 0;
              xpc_release(v51);
              v51 = 0;
              if (v50)
                _Block_release(v50);
              if (v16)
                _Block_release(v16);
LABEL_55:
              xpc_release(v14);
              xpc_release(v13);
            }
LABEL_92:
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v42.__r_.__value_.__l.__data_);
            MEMORY[0x22E2A41EC](v43);
            goto LABEL_95;
          }
        }
        if (!AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *)v43))
        {
          v47 = -1431655766;
          *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __src = v22;
          v46 = v22;
          v23 = *(_DWORD *)(v44 + 32);
          v24 = *(_OWORD *)(v44 + 16);
          __src = *(_OWORD *)v44;
          v46 = v24;
          v47 = v23;
          if (v23 >= 0x21)
          {
            v23 = 32;
            v47 = 32;
          }
          __p = 0;
          v40 = 0;
          v41 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)&__src, (char *)&__src + v23, v23);
          if (v2[1] && v2[2])
          {
            v25 = xpc_null_create();
            v26 = xpc_data_create(__p, v40 - (_BYTE *)__p);
            if (!v26)
              v26 = xpc_null_create();
            v27 = (const void *)v2[1];
            if (v27)
              v28 = _Block_copy(v27);
            else
              v28 = 0;
            v34 = v2[2];
            *(_QWORD *)block = MEMORY[0x24BDAC760];
            *(_QWORD *)&block[8] = 1174405120;
            *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            v49 = &__block_descriptor_tmp_152;
            if (v28)
              v35 = _Block_copy(v28);
            else
              v35 = 0;
            v50 = v35;
            v51 = v25;
            if (v25)
              xpc_retain(v25);
            else
              v51 = xpc_null_create();
            v52 = v26;
            if (v26)
              xpc_retain(v26);
            else
              v52 = xpc_null_create();
            dispatch_async(v34, block);
            xpc_release(v52);
            v52 = 0;
            xpc_release(v51);
            v51 = 0;
            if (v50)
              _Block_release(v50);
            if (v28)
              _Block_release(v28);
            xpc_release(v26);
            xpc_release(v25);
          }
          if (__p)
          {
            v40 = __p;
            operator delete(__p);
          }
          goto LABEL_92;
        }
        std::string::__assign_external(&v42, "Failed to get RF Test Nonce", 0x1BuLL);
        v18 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v38 = &v42;
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v38 = (std::string *)v42.__r_.__value_.__r.__words[0];
          *(_DWORD *)block = 136315138;
          *(_QWORD *)&block[4] = v38;
          _os_log_error_impl(&dword_227A72000, v18, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
          if (!v2[1])
            goto LABEL_92;
        }
        else if (!v2[1])
        {
          goto LABEL_92;
        }
        if (v2[2])
        {
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v42;
          else
            v19 = (std::string *)v42.__r_.__value_.__r.__words[0];
          v13 = xpc_string_create((const char *)v19);
          if (!v13)
            v13 = xpc_null_create();
          v14 = xpc_null_create();
          v20 = (const void *)v2[1];
          if (v20)
            v21 = _Block_copy(v20);
          else
            v21 = 0;
          v32 = v2[2];
          *(_QWORD *)block = MEMORY[0x24BDAC760];
          *(_QWORD *)&block[8] = 1174405120;
          *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          v49 = &__block_descriptor_tmp_152;
          if (v21)
            v33 = _Block_copy(v21);
          else
            v33 = 0;
          v50 = v33;
          v51 = v13;
          if (v13)
            xpc_retain(v13);
          else
            v51 = xpc_null_create();
          v52 = v14;
          if (v14)
            xpc_retain(v14);
          else
            v52 = xpc_null_create();
          dispatch_async(v32, block);
          xpc_release(v52);
          v52 = 0;
          xpc_release(v51);
          v51 = 0;
          if (v50)
            _Block_release(v50);
          if (v21)
            _Block_release(v21);
          goto LABEL_55;
        }
        goto LABEL_92;
      }
    }
  }
}

void sub_227AF1FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c151_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c151_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef cf;
  _OWORD v15[5];
  unint64_t v16;
  _BYTE block[24];
  void *v18;
  void *v19;
  CFTypeRef v20;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_30:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v16 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v15[3] = v7;
        v15[4] = v7;
        v15[1] = v7;
        v15[2] = v7;
        v15[0] = v7;
        AriSdk::ARI_IBINetDetachRspCb_SDK::ARI_IBINetDetachRspCb_SDK((AriSdk::ARI_IBINetDetachRspCb_SDK *)v15, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        strcpy(block, "network detach request");
        block[23] = 22;
        checkError((AriSdk::MsgBase *)v15, (uint64_t)block, &cf);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          v8 = *(const void **)v2;
          if (!*(_QWORD *)v2)
            goto LABEL_27;
        }
        else
        {
          v8 = *(const void **)v2;
          if (!*(_QWORD *)v2)
            goto LABEL_27;
        }
        if (*(_QWORD *)(v2 + 8))
        {
          v9 = cf;
          if (cf && (CFRetain(cf), (v8 = *(const void **)v2) == 0))
            v10 = 0;
          else
            v10 = _Block_copy(v8);
          v11 = *(NSObject **)(v2 + 8);
          *(_QWORD *)block = MEMORY[0x24BDAC760];
          *(_QWORD *)&block[8] = 1174405120;
          *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          v18 = &__block_descriptor_tmp_81;
          if (v10)
          {
            v19 = _Block_copy(v10);
            v20 = v9;
            if (!v9)
              goto LABEL_19;
          }
          else
          {
            v19 = 0;
            v20 = v9;
            if (!v9)
            {
LABEL_19:
              dispatch_async(v11, block);
              if (v20)
                CFRelease(v20);
              if (v19)
                _Block_release(v19);
              if (v10)
                _Block_release(v10);
              if (v9)
                CFRelease(v9);
              goto LABEL_27;
            }
          }
          CFRetain(v9);
          goto LABEL_19;
        }
LABEL_27:
        if (cf)
          CFRelease(cf);
        MEMORY[0x22E2A3448](v15);
        goto LABEL_30;
      }
    }
  }
}

void sub_227AF2410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v4 - 73) < 0)
    operator delete(*(void **)(v4 - 96));
  MEMORY[0x22E2A3448](va);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0385A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0385A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  const __CFArray *v4;
  __int128 v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(uint64_t);
  CFIndex Count;
  CFIndex i;
  unsigned __int8 *ValueAtIndex;
  unsigned __int8 *v12;
  CFTypeID v13;
  const __CFNumber *v14;
  uint64_t v15;
  const void *v16;
  std::__shared_weak_count_vtbl *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _OWORD v41[4];
  void *__p;
  _QWORD v43[2];
  void *v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t aBlock;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  void *v52;
  __int128 *v53;

  v2 = *a1;
  v40 = v2;
  v3 = *v2;
  v43[0] = 0xAAAAAAAAAAAAAAAALL;
  v43[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v43, (const __CFDictionary *)v2[1]);
  v4 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v43, (const __CFString *)*MEMORY[0x24BED38C0]);
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[2] = v5;
  v41[3] = v5;
  v41[0] = v5;
  v41[1] = v5;
  AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK((AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK *)v41);
  v6 = operator new(0x402uLL);
  bzero(v6, 0x402uLL);
  v7 = __p;
  __p = v6;
  if (v7)
    operator delete(v7);
  v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v4)
    v8 = 0;
  if (v8)
  {
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v4, i);
        v12 = ValueAtIndex;
        LOBYTE(v45) = 0;
        if (ValueAtIndex)
        {
          v13 = CFGetTypeID(ValueAtIndex);
          if (v13 == CFNumberGetTypeID())
            ctu::cf::assign((ctu::cf *)&v45, v12, v14);
        }
        *((_BYTE *)__p + i + 2) = v45;
      }
    }
  }
  else
  {
    LOWORD(Count) = 0;
  }
  *(_WORD *)__p = Count;
  v15 = *(_QWORD *)(v3 + 312);
  v16 = (const void *)v2[2];
  if (v16)
  {
    v17 = (std::__shared_weak_count_vtbl *)_Block_copy(v16);
    v18 = v2[3];
    if (!v18)
      goto LABEL_16;
    goto LABEL_15;
  }
  v17 = 0;
  v18 = v2[3];
  if (v18)
LABEL_15:
    dispatch_retain(v18);
LABEL_16:
  v20 = v2[4];
  v19 = v2[5];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 16);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)operator new(0x38uLL);
  v23->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = v17;
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_24F038620;
  v23[1].__shared_owners_ = (uint64_t)v18;
  v23[1].__shared_weak_owners_ = v20;
  v23[2].__vftable = (std::__shared_weak_count_vtbl *)v19;
  v25 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v45 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v45 + 1) = 1174405120;
  *(_QWORD *)&v46 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEES9_EEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v46 + 1) = &__block_descriptor_tmp_161;
  v47 = (unint64_t)&v23[1];
  v48 = v23;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  aBlock = v25;
  v50 = 0x40000000;
  v51 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v52 = &unk_24F037988;
  v53 = &v45;
  v27 = _Block_copy(&aBlock);
  v28 = v48;
  if (v48)
  {
    v29 = (unint64_t *)&v48->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v32;
  v46 = v32;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v33 = *(std::__shared_weak_count **)(v15 + 16);
  aBlock = *(_QWORD *)(v15 + 8);
  if (!v33)
  {
    v50 = 0;
LABEL_49:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v50 = (uint64_t)std::__shared_weak_count::lock(v33);
  if (!v50)
    goto LABEL_49;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v34 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v35 = (unint64_t *)(v50 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v44 = v27;
  ice::SendMsgBaseProxy::callback();
  if (v44)
    _Block_release(v44);
  MEMORY[0x22E2A2FF8](&v45);
  MEMORY[0x22E2A42D0](v41);
  if (v4)
    CFRelease(v4);
  MEMORY[0x22E2A2E9C](v43);
  std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~unique_ptr[abi:ne180100](&v40);
  v37 = (std::__shared_weak_count *)a1[2];
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  operator delete(a1);
}

void sub_227AF2928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *aBlock,char a25)
{
  _QWORD *v25;
  const void *v26;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  MEMORY[0x22E2A42D0](&a11);
  if (v26)
    CFRelease(v26);
  MEMORY[0x22E2A2E9C](&a22);
  std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  v28 = (std::__shared_weak_count *)v25[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v25);
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[5];
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = v2[3];
    if (v4)
      dispatch_release(v4);
    v5 = (const void *)v2[2];
    if (v5)
      _Block_release(v5);
    v6 = (const void *)v2[1];
    if (v6)
      CFRelease(v6);
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEES9_EEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  char *v11;
  ctu *v12;
  std::string *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *__p;
  std::string __pa;
  CFTypeRef v23;
  CFTypeRef cf;
  _OWORD v25[4];
  unsigned int *v26;
  std::string block;
  void *v28;
  void *v29;
  CFTypeRef v30;
  CFTypeRef v31;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_52:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v26 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[2] = v7;
        v25[3] = v7;
        v25[0] = v7;
        v25[1] = v7;
        AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK((AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *)v25, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B1D300;
        strcpy(block.__r_.__value_.__l.__data_, "send RF Self Test Request");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_28;
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (v8)
            goto LABEL_28;
        }
        if (AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::unpack((AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *)v25))
        {
          __p = (char *)operator new(0x40uLL);
          strcpy(__p, "Failed to unpack response of sending RF Self Test Request");
          CreateError();
          v10 = cf;
          cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0])
              CFRelease(block.__r_.__value_.__l.__data_);
          }
          v11 = __p;
          goto LABEL_27;
        }
        v12 = (ctu *)*v26;
        if ((_DWORD)v12)
        {
          ctu::hex(v12);
          v13 = std::string::insert(&block, 0, "Error on requesting RF Self Test: 0x", 0x24uLL);
          __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = v23;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__pa.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        v15 = *(const void **)v2;
        if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
        {
LABEL_49:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A4354](v25);
          goto LABEL_52;
        }
        v16 = cf;
        if (cf && (CFRetain(cf), (v15 = *(const void **)v2) == 0))
          v17 = 0;
        else
          v17 = _Block_copy(v15);
        v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
        v28 = &__block_descriptor_tmp_89;
        if (v17)
        {
          v29 = _Block_copy(v17);
          v30 = v16;
          if (!v16)
            goto LABEL_39;
        }
        else
        {
          v29 = 0;
          v30 = v16;
          if (!v16)
          {
LABEL_39:
            v31 = 0;
            dispatch_async(v18, &block);
            if (v31)
              CFRelease(v31);
            if (v30)
              CFRelease(v30);
            if (v29)
              _Block_release(v29);
            if (v17)
              _Block_release(v17);
            if (v16)
              CFRelease(v16);
            goto LABEL_49;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_227AF2E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 81) < 0)
    operator delete(*(void **)(v19 - 104));
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A4354](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEES8_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEES8_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  xpc_object_t object;
  xpc_object_t v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  v6 = v2;
  if (!v2)
  {
    v6 = xpc_null_create();
    v4 = (void *)a1[6];
    object = v4;
    if (v4)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v2);
  v4 = (void *)a1[6];
  object = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v4);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v3 + 16))(v3, &v6, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v6);
}

void sub_227AF30D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6)
      goto LABEL_3;
LABEL_6:
    a1[5] = xpc_null_create();
    v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7)
      return xpc_retain(v7);
    goto LABEL_7;
  }
  v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v6);
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
LABEL_7:
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  std::__shared_weak_count_vtbl **v2;
  std::__shared_weak_count_vtbl *v3;
  __int128 v4;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  __int128 *v43;

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v4;
  v33[3] = v4;
  v33[0] = v4;
  v33[1] = v4;
  AriSdk::ARI_CsiSecGetPkHashReq_SDK::ARI_CsiSecGetPkHashReq_SDK((AriSdk::ARI_CsiSecGetPkHashReq_SDK *)v33);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  v6 = v2[1];
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v2[2];
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = v2[2];
  if (v8)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  v10 = v2[3];
  v9 = (uint64_t)v2[4];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F0386D0;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v7;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  v13[2].__vftable = v10;
  v13[2].__shared_owners_ = v9;
  v15 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v35 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v35 + 1) = 1174405120;
  *(_QWORD *)&v36 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_166;
  v37 = (unint64_t)&v13[1];
  v38 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock = v15;
  v40 = 0x40000000;
  v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v42 = &unk_24F037988;
  v43 = &v35;
  v17 = _Block_copy(&aBlock);
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v22;
  v36 = v22;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  aBlock = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v23)
  {
    v40 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v40)
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v25 = (unint64_t *)(v40 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v34 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v34)
    _Block_release(v34);
  MEMORY[0x22E2A2FF8](&v35);
  AriSdk::ARI_CsiSecGetPkHashReq_SDK::~ARI_CsiSecGetPkHashReq_SDK((AriSdk::ARI_CsiSecGetPkHashReq_SDK *)v33);
  v27 = (std::__shared_weak_count *)v2[4];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v2[2];
  if (v28)
    dispatch_release(v28);
  v29 = v2[1];
  if (v29)
    _Block_release(v29);
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_227AF34C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v29;
  NSObject *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a19);
  AriSdk::ARI_CsiSecGetPkHashReq_SDK::~ARI_CsiSecGetPkHashReq_SDK((AriSdk::ARI_CsiSecGetPkHashReq_SDK *)&a9);
  v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    v30 = v27[2];
    if (!v30)
      goto LABEL_5;
  }
  dispatch_release(v30);
  v31 = (const void *)v27[1];
  if (!v31)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  void *v9;
  int v10;
  NSObject *v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  void *v17;
  char *v18;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  int64_t v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  void **v26;
  const void *v27;
  void *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  void **v31;
  NSObject *v32;
  void *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  void *__p;
  _BYTE *v48;
  uint64_t v49;
  void *v50[3];
  _OWORD v51[4];
  unint64_t v52;
  __int128 __src;
  __int128 v54;
  __int16 v55;
  _BYTE block[24];
  void *v57;
  const void *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_114:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v45 = __ldaxr(p_shared_owners);
          while (__stlxr(v45 - 1, p_shared_owners));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v52 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v51[2] = v8;
        v51[3] = v8;
        v51[0] = v8;
        v51[1] = v8;
        AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::ARI_CsiSecGetPkHashRspCb_SDK((AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *)v51, a2);
        memset(v50, 170, sizeof(v50));
        block[23] = 19;
        strcpy(block, "send Getting PKHash");
        checkErrorStr((AriSdk::MsgBase *)v51, (uint64_t)block, (uint64_t)v50);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          v17 = (void *)HIBYTE(v50[2]);
          v10 = SHIBYTE(v50[2]);
          if (SHIBYTE(v50[2]) < 0)
            v17 = v50[1];
          if (v17)
          {
LABEL_9:
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v31 = (void **)v50[0];
              if (v10 >= 0)
                v31 = v50;
              *(_DWORD *)block = 136315138;
              *(_QWORD *)&block[4] = v31;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              if (!v2[1])
                goto LABEL_111;
            }
            else if (!v2[1])
            {
              goto LABEL_111;
            }
            if (v2[2])
            {
              if (SHIBYTE(v50[2]) >= 0)
                v12 = v50;
              else
                v12 = (void **)v50[0];
              v13 = xpc_string_create((const char *)v12);
              if (!v13)
                v13 = xpc_null_create();
              v14 = xpc_null_create();
              v15 = (const void *)v2[1];
              if (v15)
                v16 = _Block_copy(v15);
              else
                v16 = 0;
              v23 = v2[2];
              *(_QWORD *)block = MEMORY[0x24BDAC760];
              *(_QWORD *)&block[8] = 1174405120;
              *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
              v57 = &__block_descriptor_tmp_152;
              if (v16)
                v24 = _Block_copy(v16);
              else
                v24 = 0;
              v58 = v24;
              v59 = v13;
              if (v13)
                xpc_retain(v13);
              else
                v59 = xpc_null_create();
              v60 = v14;
              if (v14)
                xpc_retain(v14);
              else
                v60 = xpc_null_create();
              dispatch_async(v23, block);
              xpc_release(v60);
              v60 = 0;
              xpc_release(v59);
              v59 = 0;
              if (v58)
                _Block_release(v58);
              if (v16)
                _Block_release(v16);
LABEL_45:
              xpc_release(v14);
              xpc_release(v13);
            }
LABEL_111:
            if (SHIBYTE(v50[2]) < 0)
              operator delete(v50[0]);
            MEMORY[0x22E2A382C](v51);
            goto LABEL_114;
          }
        }
        else
        {
          v9 = (void *)HIBYTE(v50[2]);
          v10 = SHIBYTE(v50[2]);
          if (SHIBYTE(v50[2]) < 0)
            v9 = v50[1];
          if (v9)
            goto LABEL_9;
        }
        if (!AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *)v51))
        {
          v55 = -21846;
          *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __src = v19;
          v54 = v19;
          v20 = *(unsigned __int16 *)(v52 + 32);
          v21 = *(_OWORD *)(v52 + 16);
          __src = *(_OWORD *)v52;
          v54 = v21;
          v55 = v20;
          if (v20 >= 0x21)
          {
            v20 = 32;
            v55 = 32;
          }
          __p = 0;
          v48 = 0;
          v49 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)&__src, (char *)&__src + v20, v20);
          if (v55)
          {
            if (v48 == __p || (unint64_t)(v48 - (_BYTE *)__p) <= 3)
              std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
            v22 = bswap32(*(_DWORD *)__p);
          }
          else
          {
            v22 = 0;
          }
          v29 = xpc_dictionary_create(0, 0, 0);
          if (v29 || (v29 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x22E2A4C30](v29) == MEMORY[0x24BDACFA0])
            {
              xpc_retain(v29);
              v30 = v29;
            }
            else
            {
              v30 = xpc_null_create();
            }
          }
          else
          {
            v30 = xpc_null_create();
            v29 = 0;
          }
          xpc_release(v29);
          v34 = xpc_data_create(__p, v48 - (_BYTE *)__p);
          if (!v34)
            v34 = xpc_null_create();
          xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x24BED37D0], v34);
          v35 = xpc_null_create();
          xpc_release(v34);
          xpc_release(v35);
          v36 = xpc_int64_create(v22);
          if (!v36)
            v36 = xpc_null_create();
          xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x24BED37C0], v36);
          v37 = xpc_null_create();
          xpc_release(v36);
          xpc_release(v37);
          if (v2[1] && v2[2])
          {
            v38 = xpc_null_create();
            if (v30)
            {
              xpc_retain(v30);
              v39 = v30;
            }
            else
            {
              v39 = xpc_null_create();
            }
            v40 = (const void *)v2[1];
            if (v40)
              v41 = _Block_copy(v40);
            else
              v41 = 0;
            v42 = v2[2];
            *(_QWORD *)block = MEMORY[0x24BDAC760];
            *(_QWORD *)&block[8] = 1174405120;
            *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
            v57 = &__block_descriptor_tmp_165;
            if (v41)
              v43 = _Block_copy(v41);
            else
              v43 = 0;
            v58 = v43;
            v59 = v38;
            if (v38)
              xpc_retain(v38);
            else
              v59 = xpc_null_create();
            v60 = v39;
            if (v39)
              xpc_retain(v39);
            else
              v60 = xpc_null_create();
            dispatch_async(v42, block);
            xpc_release(v60);
            v60 = 0;
            xpc_release(v59);
            v59 = 0;
            if (v58)
              _Block_release(v58);
            if (v41)
              _Block_release(v41);
            xpc_release(v39);
            xpc_release(v38);
          }
          xpc_release(v30);
          if (__p)
          {
            v48 = __p;
            operator delete(__p);
          }
          goto LABEL_111;
        }
        if (SHIBYTE(v50[2]) < 0)
        {
          v50[1] = (void *)21;
          v18 = (char *)v50[0];
        }
        else
        {
          HIBYTE(v50[2]) = 21;
          v18 = (char *)v50;
        }
        strcpy(v18, "Failed to get PK hash");
        v25 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v46 = v50;
          if (SHIBYTE(v50[2]) < 0)
            v46 = (void **)v50[0];
          *(_DWORD *)block = 136315138;
          *(_QWORD *)&block[4] = v46;
          _os_log_error_impl(&dword_227A72000, v25, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
          if (!v2[1])
            goto LABEL_111;
        }
        else if (!v2[1])
        {
          goto LABEL_111;
        }
        if (!v2[2])
          goto LABEL_111;
        if (SHIBYTE(v50[2]) >= 0)
          v26 = v50;
        else
          v26 = (void **)v50[0];
        v13 = xpc_string_create((const char *)v26);
        if (!v13)
          v13 = xpc_null_create();
        v14 = xpc_null_create();
        v27 = (const void *)v2[1];
        if (v27)
          v28 = _Block_copy(v27);
        else
          v28 = 0;
        v32 = v2[2];
        *(_QWORD *)block = MEMORY[0x24BDAC760];
        *(_QWORD *)&block[8] = 1174405120;
        *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        v57 = &__block_descriptor_tmp_152;
        if (v28)
          v33 = _Block_copy(v28);
        else
          v33 = 0;
        v58 = v33;
        v59 = v13;
        if (v13)
          xpc_retain(v13);
        else
          v59 = xpc_null_create();
        v60 = v14;
        if (v14)
          xpc_retain(v14);
        else
          v60 = xpc_null_create();
        dispatch_async(v32, block);
        xpc_release(v60);
        v60 = 0;
        xpc_release(v59);
        v59 = 0;
        if (v58)
          _Block_release(v58);
        if (v28)
          _Block_release(v28);
        goto LABEL_45;
      }
    }
  }
}

void sub_227AF3DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0386D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0386D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS4_6objectES8_EEEE3__0vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  void *v9;
  int v10;
  NSObject *v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  NSObject *v22;
  void **v23;
  const void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  const void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void **v34;
  void **v35;
  void *v36[3];
  _OWORD v37[4];
  unsigned int *v38;
  _BYTE __p[24];
  void *v40;
  void *aBlock;
  xpc_object_t v42;
  xpc_object_t object;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_84:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v38 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v37[2] = v8;
        v37[3] = v8;
        v37[0] = v8;
        v37[1] = v8;
        AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::ARI_CsiSecGetChipIdRspCb_SDK((AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *)v37, a2);
        memset(v36, 170, sizeof(v36));
        __p[23] = 20;
        strcpy(__p, "send Getting Chip ID");
        checkErrorStr((AriSdk::MsgBase *)v37, (uint64_t)__p, (uint64_t)v36);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          v17 = (void *)HIBYTE(v36[2]);
          v10 = SHIBYTE(v36[2]);
          if (SHIBYTE(v36[2]) < 0)
            v17 = v36[1];
          if (v17)
          {
LABEL_9:
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v34 = (void **)v36[0];
              if (v10 >= 0)
                v34 = v36;
              *(_DWORD *)__p = 136315138;
              *(_QWORD *)&__p[4] = v34;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "%s", __p, 0xCu);
              LOBYTE(v10) = HIBYTE(v36[2]);
            }
            if ((v10 & 0x80u) == 0)
              v12 = v36;
            else
              v12 = (void **)v36[0];
            v13 = xpc_string_create((const char *)v12);
            if (!v13)
              v13 = xpc_null_create();
            v14 = xpc_null_create();
            v15 = (const void *)v2[1];
            if (v15)
              v16 = _Block_copy(v15);
            else
              v16 = 0;
            v19 = v2[2];
            *(_QWORD *)__p = MEMORY[0x24BDAC760];
            *(_QWORD *)&__p[8] = 1174405120;
            *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            v40 = &__block_descriptor_tmp_152;
            if (v16)
            {
              aBlock = _Block_copy(v16);
              v42 = v13;
              if (v13)
                goto LABEL_26;
            }
            else
            {
              aBlock = 0;
              v42 = v13;
              if (v13)
              {
LABEL_26:
                xpc_retain(v13);
                object = v14;
                if (v14)
                {
LABEL_27:
                  xpc_retain(v14);
LABEL_31:
                  dispatch_async(v19, __p);
                  xpc_release(object);
                  object = 0;
                  xpc_release(v42);
                  v42 = 0;
                  if (aBlock)
                    _Block_release(aBlock);
                  if (v16)
                    _Block_release(v16);
LABEL_81:
                  xpc_release(v14);
                  xpc_release(v13);
                  if (SHIBYTE(v36[2]) < 0)
                    operator delete(v36[0]);
                  MEMORY[0x22E2A3808](v37);
                  goto LABEL_84;
                }
LABEL_30:
                object = xpc_null_create();
                goto LABEL_31;
              }
            }
            v42 = xpc_null_create();
            object = v14;
            if (v14)
              goto LABEL_27;
            goto LABEL_30;
          }
        }
        else
        {
          v9 = (void *)HIBYTE(v36[2]);
          v10 = SHIBYTE(v36[2]);
          if (SHIBYTE(v36[2]) < 0)
            v9 = v36[1];
          if (v9)
            goto LABEL_9;
        }
        if (AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *)v37))
        {
          if (SHIBYTE(v36[2]) < 0)
          {
            v36[1] = (void *)21;
            v18 = (char *)v36[0];
          }
          else
          {
            HIBYTE(v36[2]) = 21;
            v18 = (char *)v36;
          }
          strcpy(v18, "Failed to get Chip ID");
          v22 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v35 = v36;
            if (SHIBYTE(v36[2]) < 0)
              v35 = (void **)v36[0];
            *(_DWORD *)__p = 136315138;
            *(_QWORD *)&__p[4] = v35;
            _os_log_error_impl(&dword_227A72000, v22, OS_LOG_TYPE_ERROR, "%s", __p, 0xCu);
          }
          if (SHIBYTE(v36[2]) >= 0)
            v23 = v36;
          else
            v23 = (void **)v36[0];
          v13 = xpc_string_create((const char *)v23);
          if (!v13)
            v13 = xpc_null_create();
          v14 = xpc_null_create();
          v24 = (const void *)v2[1];
          if (v24)
            v25 = _Block_copy(v24);
          else
            v25 = 0;
          v26 = v2[2];
          *(_QWORD *)__p = MEMORY[0x24BDAC760];
          *(_QWORD *)&__p[8] = 1174405120;
          *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          v40 = &__block_descriptor_tmp_152;
          if (v25)
            v27 = _Block_copy(v25);
          else
            v27 = 0;
          aBlock = v27;
          v42 = v13;
          if (v13)
            xpc_retain(v13);
          else
            v42 = xpc_null_create();
          object = v14;
          if (v14)
            xpc_retain(v14);
          else
            object = xpc_null_create();
          dispatch_async(v26, __p);
          xpc_release(object);
          object = 0;
          xpc_release(v42);
          v42 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v25)
            _Block_release(v25);
        }
        else
        {
          v20 = xpc_int64_create(*v38);
          if (!v20)
            v20 = xpc_null_create();
          xpc_dictionary_set_value((xpc_object_t)v2[5], (const char *)*MEMORY[0x24BED37C8], v20);
          v21 = xpc_null_create();
          xpc_release(v20);
          xpc_release(v21);
          v13 = xpc_null_create();
          v14 = (xpc_object_t)v2[5];
          if (v14)
            xpc_retain((xpc_object_t)v2[5]);
          else
            v14 = xpc_null_create();
          v28 = (const void *)v2[1];
          if (v28)
            v29 = _Block_copy(v28);
          else
            v29 = 0;
          v30 = v2[2];
          *(_QWORD *)__p = MEMORY[0x24BDAC760];
          *(_QWORD *)&__p[8] = 1174405120;
          *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
          v40 = &__block_descriptor_tmp_165;
          if (v29)
            v31 = _Block_copy(v29);
          else
            v31 = 0;
          aBlock = v31;
          v42 = v13;
          if (v13)
            xpc_retain(v13);
          else
            v42 = xpc_null_create();
          object = v14;
          if (v14)
            xpc_retain(v14);
          else
            object = xpc_null_create();
          dispatch_async(v30, __p);
          xpc_release(object);
          object = 0;
          xpc_release(v42);
          v42 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v29)
            _Block_release(v29);
        }
        goto LABEL_81;
      }
    }
  }
}

void sub_227AF4624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_227AF46FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x227AF470CLL);
  JUMPOUT(0x227AF4710);
}

uint64_t __copy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS3_6objectES7_EEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS3_6objectES7_EEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  void *v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  size_t v14;
  const void *v15;
  void *v16;
  xpc_object_t v17;
  xpc_object_t v18;
  void *__p;
  __int128 v20;
  void *v21[3];
  _OWORD v22[4];
  __int128 v23;
  __int128 v24;

  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[1])
        {
LABEL_19:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v23 = v8;
        v24 = v8;
        v22[2] = v8;
        v22[3] = v8;
        v22[0] = v8;
        v22[1] = v8;
        AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::ARI_CsiSecReadSikPKeyRspCb_SDK((AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *)v22, a2);
        memset(v21, 170, sizeof(v21));
        __p = operator new(0x20uLL);
        v20 = xmmword_227B1D300;
        strcpy((char *)__p, "send Getting SCRT Pub Key");
        checkErrorStr((AriSdk::MsgBase *)v22, (uint64_t)&__p, (uint64_t)v21);
        if (SHIBYTE(v20) < 0)
        {
          operator delete(__p);
          v10 = (void *)HIBYTE(v21[2]);
          if (SHIBYTE(v21[2]) < 0)
            v10 = v21[1];
          if (v10)
            goto LABEL_14;
        }
        else
        {
          v9 = (void *)HIBYTE(v21[2]);
          if (SHIBYTE(v21[2]) < 0)
            v9 = v21[1];
          if (v9)
            goto LABEL_14;
        }
        if (!AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::unpack((AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *)v22))
        {
          v14 = (unsigned __int16)**((_WORD **)&v24 + 1);
          if (**((_WORD **)&v24 + 1))
          {
            v15 = (const void *)v23;
            v16 = operator new((unsigned __int16)**((_WORD **)&v24 + 1));
            memmove(v16, v15, v14);
          }
          else
          {
            v16 = 0;
          }
          v17 = xpc_data_create(v16, v14);
          if (!v17)
            v17 = xpc_null_create();
          xpc_dictionary_set_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x24BED37E8], v17);
          v18 = xpc_null_create();
          xpc_release(v17);
          xpc_release(v18);
          if (v16)
            operator delete(v16);
          goto LABEL_16;
        }
LABEL_14:
        v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p) = 0;
          _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "Failed to get SCRT Pub Key", (uint8_t *)&__p, 2u);
        }
LABEL_16:
        if (SHIBYTE(v21[2]) < 0)
          operator delete(v21[0]);
        MEMORY[0x22E2A3AFC](v22);
        goto LABEL_19;
      }
    }
  }
}

void sub_227AF4AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x22E2A3AFC](&a21);
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c87_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c87_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0,std::allocator<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0387D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0,std::allocator<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0387D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0,std::allocator<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict)::$_0>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  std::__shared_weak_count_vtbl **v2;
  std::__shared_weak_count_vtbl *v3;
  __int128 v4;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  __int128 *v43;

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v4;
  v33[3] = v4;
  v33[0] = v4;
  v33[1] = v4;
  AriSdk::ARI_CsiSecGetSNUMReq_SDK::ARI_CsiSecGetSNUMReq_SDK((AriSdk::ARI_CsiSecGetSNUMReq_SDK *)v33);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  v6 = v2[1];
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v2[2];
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = v2[2];
  if (v8)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  v10 = v2[3];
  v9 = (uint64_t)v2[4];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F038850;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v7;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  v13[2].__vftable = v10;
  v13[2].__shared_owners_ = v9;
  v15 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v35 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v35 + 1) = 1174405120;
  *(_QWORD *)&v36 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_174;
  v37 = (unint64_t)&v13[1];
  v38 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock = v15;
  v40 = 0x40000000;
  v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v42 = &unk_24F037988;
  v43 = &v35;
  v17 = _Block_copy(&aBlock);
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v22;
  v36 = v22;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  aBlock = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v23)
  {
    v40 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v40)
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v25 = (unint64_t *)(v40 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v34 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v34)
    _Block_release(v34);
  MEMORY[0x22E2A2FF8](&v35);
  AriSdk::ARI_CsiSecGetSNUMReq_SDK::~ARI_CsiSecGetSNUMReq_SDK((AriSdk::ARI_CsiSecGetSNUMReq_SDK *)v33);
  v27 = (std::__shared_weak_count *)v2[4];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v2[2];
  if (v28)
    dispatch_release(v28);
  v29 = v2[1];
  if (v29)
    _Block_release(v29);
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_227AF4F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v29;
  NSObject *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a19);
  AriSdk::ARI_CsiSecGetSNUMReq_SDK::~ARI_CsiSecGetSNUMReq_SDK((AriSdk::ARI_CsiSecGetSNUMReq_SDK *)&a9);
  v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    v30 = v27[2];
    if (!v30)
      goto LABEL_5;
  }
  dispatch_release(v30);
  v31 = (const void *)v27[1];
  if (!v31)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  std::string::size_type v9;
  int v10;
  NSObject *v11;
  std::string *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::string::size_type size;
  NSObject *v18;
  std::string *v19;
  const void *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  unsigned int v24;
  xpc_object_t v25;
  xpc_object_t v26;
  NSObject *v27;
  void *v28;
  std::string *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  void *v33;
  NSObject *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::string *v37;
  _QWORD v38[2];
  xpc_object_t object;
  void *__p;
  _BYTE *v41;
  uint64_t v42;
  std::string v43;
  _OWORD v44[4];
  unint64_t v45;
  _BYTE block[24];
  void *v47;
  void *v48;
  xpc_object_t v49;
  xpc_object_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      v5 = *(std::__shared_weak_count_vtbl **)v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)(v2 + 24))
        {
LABEL_87:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v45 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v44[2] = v8;
        v44[3] = v8;
        v44[0] = v8;
        v44[1] = v8;
        AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::ARI_CsiSecGetSNUMRspCb_SDK((AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *)v44, a2);
        memset(&v43, 170, sizeof(v43));
        *(_QWORD *)block = operator new(0x20uLL);
        *(_OWORD *)&block[8] = xmmword_227B1B090;
        strcpy(*(char **)block, "send Getting Serial Number");
        checkErrorStr((AriSdk::MsgBase *)v44, (uint64_t)block, (uint64_t)&v43);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          v10 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v43.__r_.__value_.__l.__size_;
          if (size)
          {
LABEL_9:
            v11 = v5[1].~__shared_weak_count;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v29 = (std::string *)v43.__r_.__value_.__r.__words[0];
              if (v10 >= 0)
                v29 = &v43;
              *(_DWORD *)block = 136315138;
              *(_QWORD *)&block[4] = v29;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              LOBYTE(v10) = *((_BYTE *)&v43.__r_.__value_.__s + 23);
            }
            if ((v10 & 0x80u) == 0)
              v12 = &v43;
            else
              v12 = (std::string *)v43.__r_.__value_.__r.__words[0];
            v13 = xpc_string_create((const char *)v12);
            if (!v13)
              v13 = xpc_null_create();
            v14 = xpc_null_create();
            v15 = *(const void **)(v2 + 8);
            if (v15)
              v16 = _Block_copy(v15);
            else
              v16 = 0;
            v22 = *(NSObject **)(v2 + 16);
            *(_QWORD *)block = MEMORY[0x24BDAC760];
            *(_QWORD *)&block[8] = 1174405120;
            *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            v47 = &__block_descriptor_tmp_152;
            if (v16)
            {
              v48 = _Block_copy(v16);
              v49 = v13;
              if (v13)
                goto LABEL_32;
            }
            else
            {
              v48 = 0;
              v49 = v13;
              if (v13)
              {
LABEL_32:
                xpc_retain(v13);
                v50 = v14;
                if (v14)
                {
LABEL_33:
                  xpc_retain(v14);
LABEL_37:
                  dispatch_async(v22, block);
                  xpc_release(v50);
                  v50 = 0;
                  xpc_release(v49);
                  v49 = 0;
                  if (v48)
                    _Block_release(v48);
                  if (v16)
                    _Block_release(v16);
                  goto LABEL_41;
                }
LABEL_36:
                v50 = xpc_null_create();
                goto LABEL_37;
              }
            }
            v49 = xpc_null_create();
            v50 = v14;
            if (v14)
              goto LABEL_33;
            goto LABEL_36;
          }
        }
        else
        {
          v9 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          v10 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v9 = v43.__r_.__value_.__l.__size_;
          if (v9)
            goto LABEL_9;
        }
        if (!AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *)v44))
        {
          memset(block, 170, sizeof(block));
          v23 = *(_QWORD *)(v45 + 16);
          *(_OWORD *)block = *(_OWORD *)v45;
          *(_QWORD *)&block[16] = v23;
          v24 = (unsigned __int16)v23;
          if ((unsigned __int16)v23 >= 0x11u)
          {
            v24 = 16;
            *(_WORD *)&block[16] = 16;
          }
          __p = 0;
          v41 = 0;
          v42 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, block, &block[v24], v24);
          v25 = xpc_dictionary_create(0, 0, 0);
          if (v25 || (v25 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x22E2A4C30](v25) == MEMORY[0x24BDACFA0])
            {
              xpc_retain(v25);
              v26 = v25;
            }
            else
            {
              v26 = xpc_null_create();
            }
          }
          else
          {
            v26 = xpc_null_create();
            v25 = 0;
          }
          xpc_release(v25);
          v30 = xpc_data_create(__p, v41 - (_BYTE *)__p);
          if (!v30)
            v30 = xpc_null_create();
          xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x24BED3818], v30);
          v31 = xpc_null_create();
          xpc_release(v30);
          xpc_release(v31);
          object = v26;
          if (v26)
            xpc_retain(v26);
          else
            object = xpc_null_create();
          v32 = *(const void **)(v2 + 8);
          if (v32)
            v33 = _Block_copy(v32);
          else
            v33 = 0;
          v34 = *(NSObject **)(v2 + 16);
          v38[0] = v33;
          v38[1] = v34;
          if (v34)
            dispatch_retain(v34);
          radio::ARICommandDriver::getChipID_sync(v5, &object, (uint64_t)v38);
          if (v34)
            dispatch_release(v34);
          if (v33)
            _Block_release(v33);
          xpc_release(object);
          object = 0;
          xpc_release(v26);
          if (__p)
          {
            v41 = __p;
            operator delete(__p);
          }
          goto LABEL_84;
        }
        std::string::__assign_external(&v43, "Failed to get Serial Number", 0x1BuLL);
        v18 = v5[1].~__shared_weak_count;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v37 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v37 = (std::string *)v43.__r_.__value_.__r.__words[0];
          *(_DWORD *)block = 136315138;
          *(_QWORD *)&block[4] = v37;
          _os_log_error_impl(&dword_227A72000, v18, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v43;
        else
          v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
        v13 = xpc_string_create((const char *)v19);
        if (!v13)
          v13 = xpc_null_create();
        v14 = xpc_null_create();
        v20 = *(const void **)(v2 + 8);
        if (v20)
          v21 = _Block_copy(v20);
        else
          v21 = 0;
        v27 = *(NSObject **)(v2 + 16);
        *(_QWORD *)block = MEMORY[0x24BDAC760];
        *(_QWORD *)&block[8] = 1174405120;
        *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        v47 = &__block_descriptor_tmp_152;
        if (v21)
          v28 = _Block_copy(v21);
        else
          v28 = 0;
        v48 = v28;
        v49 = v13;
        if (v13)
          xpc_retain(v13);
        else
          v49 = xpc_null_create();
        v50 = v14;
        if (v14)
          xpc_retain(v14);
        else
          v50 = xpc_null_create();
        dispatch_async(v27, block);
        xpc_release(v50);
        v50 = 0;
        xpc_release(v49);
        v49 = 0;
        if (v48)
          _Block_release(v48);
        if (v21)
          _Block_release(v21);
LABEL_41:
        xpc_release(v14);
        xpc_release(v13);
LABEL_84:
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        MEMORY[0x22E2A3538](v44);
        goto LABEL_87;
      }
    }
  }
}

void sub_227AF5698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  std::__shared_weak_count_vtbl **v2;
  std::__shared_weak_count_vtbl *v3;
  __int128 v4;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  __int128 *v43;

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[2] = v4;
  v33[3] = v4;
  v33[0] = v4;
  v33[1] = v4;
  AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::ARI_CsiIceGetManifestStatusReq_SDK((AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *)v33);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  v6 = v2[1];
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v2[2];
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = v2[2];
  if (v8)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  v10 = v2[3];
  v9 = (uint64_t)v2[4];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_24F0388D0;
  v13[1].__vftable = v3;
  v13[1].__shared_owners_ = (uint64_t)v7;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  v13[2].__vftable = v10;
  v13[2].__shared_owners_ = v9;
  v15 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v35 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v35 + 1) = 1174405120;
  *(_QWORD *)&v36 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v36 + 1) = &__block_descriptor_tmp_177;
  v37 = (unint64_t)&v13[1];
  v38 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock = v15;
  v40 = 0x40000000;
  v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v42 = &unk_24F037988;
  v43 = &v35;
  v17 = _Block_copy(&aBlock);
  v18 = v38;
  if (v38)
  {
    v19 = (unint64_t *)&v38->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v22;
  v36 = v22;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)on_zero_shared_weak + 2);
  aBlock = *((_QWORD *)on_zero_shared_weak + 1);
  if (!v23)
  {
    v40 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v40)
    goto LABEL_41;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v24 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v25 = (unint64_t *)(v40 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v34 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v34)
    _Block_release(v34);
  MEMORY[0x22E2A2FF8](&v35);
  AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::~ARI_CsiIceGetManifestStatusReq_SDK((AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *)v33);
  v27 = (std::__shared_weak_count *)v2[4];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = v2[2];
  if (v28)
    dispatch_release(v28);
  v29 = v2[1];
  if (v29)
    _Block_release(v29);
  operator delete(v2);
  v30 = (std::__shared_weak_count *)a1[2];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(a1);
}

void sub_227AF5BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v29;
  NSObject *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a19);
  AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::~ARI_CsiIceGetManifestStatusReq_SDK((AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *)&a9);
  v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    v30 = v27[2];
    if (!v30)
      goto LABEL_5;
  }
  dispatch_release(v30);
  v31 = (const void *)v27[1];
  if (!v31)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  std::string::size_type v9;
  int v10;
  NSObject *v11;
  std::string *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::string::size_type size;
  NSObject *v18;
  std::string *v19;
  const void *v20;
  void *v21;
  NSObject *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned int v30;
  int v31;
  int64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  NSObject *v35;
  void *v36;
  std::string *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  const void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::string *v52;
  void *__p;
  _BYTE *v54;
  uint64_t v55;
  std::string v56;
  _OWORD v57[4];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[4];
  void *aBlock;
  xpc_object_t v63;
  xpc_object_t object;
  _BYTE block[32];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int16 v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!v2[3])
        {
LABEL_98:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v59 = v8;
        v60 = v8;
        v57[3] = v8;
        v58 = v8;
        v57[1] = v8;
        v57[2] = v8;
        v57[0] = v8;
        AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::ARI_CsiIceGetManifestStatusResp_SDK((AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *)v57, a2);
        memset(&v56, 170, sizeof(v56));
        *(_QWORD *)block = operator new(0x20uLL);
        *(_OWORD *)&block[8] = xmmword_227B19BD0;
        strcpy(*(char **)block, "send Getting Manifest Status");
        checkErrorStr((AriSdk::MsgBase *)v57, (uint64_t)block, (uint64_t)&v56);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          v10 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v56.__r_.__value_.__l.__size_;
          if (size)
          {
LABEL_9:
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v37 = (std::string *)v56.__r_.__value_.__r.__words[0];
              if (v10 >= 0)
                v37 = &v56;
              *(_DWORD *)block = 136315138;
              *(_QWORD *)&block[4] = v37;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              LOBYTE(v10) = *((_BYTE *)&v56.__r_.__value_.__s + 23);
            }
            if ((v10 & 0x80u) == 0)
              v12 = &v56;
            else
              v12 = (std::string *)v56.__r_.__value_.__r.__words[0];
            v13 = xpc_string_create((const char *)v12);
            if (!v13)
              v13 = xpc_null_create();
            v14 = xpc_null_create();
            v15 = (const void *)v2[1];
            if (v15)
              v16 = _Block_copy(v15);
            else
              v16 = 0;
            v22 = v2[2];
            *(_QWORD *)block = MEMORY[0x24BDAC760];
            *(_QWORD *)&block[8] = 1174405120;
            *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            *(_QWORD *)&block[24] = &__block_descriptor_tmp_152;
            if (v16)
            {
              *(_QWORD *)&v66 = _Block_copy(v16);
              *((_QWORD *)&v66 + 1) = v13;
              if (v13)
                goto LABEL_32;
            }
            else
            {
              *(_QWORD *)&v66 = 0;
              *((_QWORD *)&v66 + 1) = v13;
              if (v13)
              {
LABEL_32:
                xpc_retain(v13);
                *(_QWORD *)&v67 = v14;
                if (v14)
                {
LABEL_33:
                  xpc_retain(v14);
LABEL_37:
                  dispatch_async(v22, block);
                  xpc_release((xpc_object_t)v67);
                  *(_QWORD *)&v67 = 0;
                  xpc_release(*((xpc_object_t *)&v66 + 1));
                  *((_QWORD *)&v66 + 1) = 0;
                  if ((_QWORD)v66)
                    _Block_release((const void *)v66);
                  if (v16)
                    _Block_release(v16);
                  goto LABEL_41;
                }
LABEL_36:
                *(_QWORD *)&v67 = xpc_null_create();
                goto LABEL_37;
              }
            }
            *((_QWORD *)&v66 + 1) = xpc_null_create();
            *(_QWORD *)&v67 = v14;
            if (v14)
              goto LABEL_33;
            goto LABEL_36;
          }
        }
        else
        {
          v9 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          v10 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v9 = v56.__r_.__value_.__l.__size_;
          if (v9)
            goto LABEL_9;
        }
        if (!AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::unpack((AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *)v57))
        {
          v72 = -21846;
          *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v70 = v23;
          v71 = v23;
          v68 = v23;
          v69 = v23;
          v66 = v23;
          v67 = v23;
          *(_OWORD *)block = v23;
          *(_OWORD *)&block[16] = v23;
          *(_OWORD *)block = *(_OWORD *)v58;
          v24 = *(_OWORD *)(v58 + 64);
          v26 = *(_OWORD *)(v58 + 16);
          v25 = *(_OWORD *)(v58 + 32);
          v67 = *(_OWORD *)(v58 + 48);
          v68 = v24;
          *(_OWORD *)&block[16] = v26;
          v66 = v25;
          v28 = *(_OWORD *)(v58 + 96);
          v27 = *(_OWORD *)(v58 + 112);
          v29 = *(_OWORD *)(v58 + 80);
          v72 = *(_WORD *)(v58 + 128);
          v70 = v28;
          v71 = v27;
          v69 = v29;
          v30 = *(unsigned __int16 *)block;
          if (*(unsigned __int16 *)block >= 0x81u)
          {
            v30 = 128;
            *(_WORD *)block = 128;
          }
          __p = 0;
          v54 = 0;
          v55 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, &block[2], &block[v30 + 2], v30);
          v31 = *(unsigned __int16 *)block;
          v32 = (unsigned __int16)**((_WORD **)&v59 + 1);
          v33 = xpc_dictionary_create(0, 0, 0);
          if (v33 || (v33 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x22E2A4C30](v33) == MEMORY[0x24BDACFA0])
            {
              xpc_retain(v33);
              v34 = v33;
            }
            else
            {
              v34 = xpc_null_create();
            }
          }
          else
          {
            v34 = xpc_null_create();
            v33 = 0;
          }
          xpc_release(v33);
          v38 = xpc_int64_create(2 * (v31 != 32));
          if (!v38)
            v38 = xpc_null_create();
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x24BED37F8], v38);
          v39 = xpc_null_create();
          xpc_release(v38);
          xpc_release(v39);
          v40 = xpc_int64_create(v32);
          if (!v40)
            v40 = xpc_null_create();
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x24BED37F0], v40);
          v41 = xpc_null_create();
          xpc_release(v40);
          xpc_release(v41);
          v42 = xpc_data_create(__p, v54 - (_BYTE *)__p);
          if (!v42)
            v42 = xpc_null_create();
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x24BED37E0], v42);
          v43 = xpc_null_create();
          xpc_release(v42);
          xpc_release(v43);
          v44 = xpc_null_create();
          if (v34)
          {
            xpc_retain(v34);
            v45 = v34;
          }
          else
          {
            v45 = xpc_null_create();
          }
          v46 = (const void *)v2[1];
          if (v46)
            v47 = _Block_copy(v46);
          else
            v47 = 0;
          v48 = v2[2];
          v61[0] = MEMORY[0x24BDAC760];
          v61[1] = 1174405120;
          v61[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
          v61[3] = &__block_descriptor_tmp_165;
          if (v47)
            v49 = _Block_copy(v47);
          else
            v49 = 0;
          aBlock = v49;
          v63 = v44;
          if (v44)
            xpc_retain(v44);
          else
            v63 = xpc_null_create();
          object = v45;
          if (v45)
            xpc_retain(v45);
          else
            object = xpc_null_create();
          dispatch_async(v48, v61);
          xpc_release(object);
          object = 0;
          xpc_release(v63);
          v63 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v47)
            _Block_release(v47);
          xpc_release(v45);
          xpc_release(v44);
          xpc_release(v34);
          if (__p)
          {
            v54 = __p;
            operator delete(__p);
          }
          goto LABEL_95;
        }
        std::string::__assign_external(&v56, "Error response from ARI or BB", 0x1DuLL);
        v18 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v52 = &v56;
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v52 = (std::string *)v56.__r_.__value_.__r.__words[0];
          *(_DWORD *)block = 136315138;
          *(_QWORD *)&block[4] = v52;
          _os_log_error_impl(&dword_227A72000, v18, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v56;
        else
          v19 = (std::string *)v56.__r_.__value_.__r.__words[0];
        v13 = xpc_string_create((const char *)v19);
        if (!v13)
          v13 = xpc_null_create();
        v14 = xpc_null_create();
        v20 = (const void *)v2[1];
        if (v20)
          v21 = _Block_copy(v20);
        else
          v21 = 0;
        v35 = v2[2];
        *(_QWORD *)block = MEMORY[0x24BDAC760];
        *(_QWORD *)&block[8] = 1174405120;
        *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        *(_QWORD *)&block[24] = &__block_descriptor_tmp_152;
        if (v21)
          v36 = _Block_copy(v21);
        else
          v36 = 0;
        *(_QWORD *)&v66 = v36;
        *((_QWORD *)&v66 + 1) = v13;
        if (v13)
          xpc_retain(v13);
        else
          *((_QWORD *)&v66 + 1) = xpc_null_create();
        *(_QWORD *)&v67 = v14;
        if (v14)
          xpc_retain(v14);
        else
          *(_QWORD *)&v67 = xpc_null_create();
        dispatch_async(v35, block);
        xpc_release((xpc_object_t)v67);
        *(_QWORD *)&v67 = 0;
        xpc_release(*((xpc_object_t *)&v66 + 1));
        *((_QWORD *)&v66 + 1) = 0;
        if ((_QWORD)v66)
          _Block_release((const void *)v66);
        if (v21)
          _Block_release(v21);
LABEL_41:
        xpc_release(v14);
        xpc_release(v13);
LABEL_95:
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        MEMORY[0x22E2A4054](v57);
        goto LABEL_98;
      }
    }
  }
}

void sub_227AF64D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c150_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c150_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0388D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0388D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[5];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEUb7_E4__29vEEN8dispatch5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  int v9;
  size_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  CFTypeRef v18;
  uint64_t (*v19)(uint64_t);
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  CFTypeRef cf;
  _OWORD v24[4];
  unint64_t v25;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 40);
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*(_QWORD *)v2)
        {
LABEL_31:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v25 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v24[2] = v8;
        v24[3] = v8;
        v24[0] = v8;
        v24[1] = v8;
        AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::ARI_IBISetDeviceRegionCodeRspCb_SDK((AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *)v24, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        v9 = *(char *)(v2 + 39);
        if (v9 >= 0)
          v10 = *(unsigned __int8 *)(v2 + 39);
        else
          v10 = *(_QWORD *)(v2 + 24);
        v11 = v10 + 17;
        memset(__p, 170, 24);
        if (v10 + 17 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v12 = (_QWORD *)(v2 + 16);
        if (v11 >= 0x17)
        {
          v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v14 = v11 | 7;
          v15 = v14 + 1;
          v16 = (char *)operator new(v14 + 1);
          __p[1] = (void *)(v10 + 17);
          __p[2] = (void *)(v15 | 0x8000000000000000);
          __p[0] = v16;
          v16[16] = 32;
          *(_OWORD *)v16 = *(_OWORD *)"Set region code: ";
          v13 = v16 + 17;
        }
        else
        {
          __p[2] = (void *)32;
          *(_OWORD *)__p = *(_OWORD *)"Set region code: ";
          v13 = (char *)&__p[2] + 1;
          if (!v10)
          {
LABEL_19:
            v13[v10] = 0;
            checkError((AriSdk::MsgBase *)v24, (uint64_t)__p, &cf);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            v18 = cf;
            v19 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            if (!cf)
              v19 = 0;
            if (!v19)
            {
              v20 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                if (*(char *)(v2 + 39) < 0)
                  v12 = (_QWORD *)*v12;
                LODWORD(__p[0]) = 136315138;
                *(void **)((char *)__p + 4) = v12;
                _os_log_impl(&dword_227A72000, v20, OS_LOG_TYPE_DEFAULT, "#I Setting region code (%s) successful", (uint8_t *)__p, 0xCu);
                v18 = cf;
              }
            }
            if (v18)
              CFRelease(v18);
            MEMORY[0x22E2A4114](v24);
            goto LABEL_31;
          }
        }
        if (v9 >= 0)
          v17 = (_QWORD *)(v2 + 16);
        else
          v17 = (_QWORD *)*v12;
        memmove(v13, v17, v10);
        goto LABEL_19;
      }
    }
  }
}

void sub_227AF69C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c138_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c138_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29NS6_IS9_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29NS6_IS9_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29NS6_IS9_EEE16__on_zero_sharedEv(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  _OWORD v17[4];

  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (v2[1])
        {
          *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v17[2] = v8;
          v17[3] = v8;
          v17[0] = v8;
          v17[1] = v8;
          AriSdk::ARI_IBINetIceApStatusRspCb_SDK::ARI_IBINetIceApStatusRspCb_SDK((AriSdk::ARI_IBINetIceApStatusRspCb_SDK *)v17, a2);
          cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          __p = operator new(0x19uLL);
          v15 = xmmword_227B19BA0;
          strcpy((char *)__p, "Update AP Screen Status");
          checkError((AriSdk::MsgBase *)v17, (uint64_t)&__p, &cf);
          if (SHIBYTE(v15) < 0)
            operator delete(__p);
          v9 = cf;
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          if (!cf)
            v10 = 0;
          if (!v10)
          {
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl(&dword_227A72000, v11, OS_LOG_TYPE_DEFAULT, "#I Update AP Screen Status successful", (uint8_t *)&__p, 2u);
              v9 = cf;
            }
          }
          if (v9)
            CFRelease(v9);
          AriSdk::ARI_IBINetIceApStatusRspCb_SDK::~ARI_IBINetIceApStatusRspCb_SDK((AriSdk::ARI_IBINetIceApStatusRspCb_SDK *)v17);
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_227AF6CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a14 < 0)
    operator delete(__p);
  AriSdk::ARI_IBINetIceApStatusRspCb_SDK::~ARI_IBINetIceApStatusRspCb_SDK((AriSdk::ARI_IBINetIceApStatusRspCb_SDK *)&a16);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F0389D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F0389D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const char *v11;
  const char *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeRef cf;
  _OWORD v16[5];
  uint8_t buf[23];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (v2[1])
        {
          *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v16[3] = v8;
          v16[4] = v8;
          v16[1] = v8;
          v16[2] = v8;
          v16[0] = v8;
          AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::ARI_IBICallPsBreadButterModeRspCb_SDK((AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *)v16, a2);
          cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          v18 = 14;
          strcpy((char *)buf, "Set Bread mode");
          checkError((AriSdk::MsgBase *)v16, (uint64_t)buf, &cf);
          if (v18 < 0)
            operator delete(*(void **)buf);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          v10 = *(NSObject **)(v5 + 40);
          if (v9)
          {
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              if (*((_BYTE *)v2 + 24))
                v11 = "enable";
              else
                v11 = "disable";
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v11;
              _os_log_error_impl(&dword_227A72000, v10, OS_LOG_TYPE_ERROR, "Failed to %s Bread mode", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            if (*((_BYTE *)v2 + 24))
              v12 = "enabled";
            else
              v12 = "disabled";
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v12;
            _os_log_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Bread mode", buf, 0xCu);
          }
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A4204](v16);
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_227AF6FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const char *v11;
  const char *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeRef cf;
  _OWORD v16[5];
  uint8_t buf[23];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (v2[1])
        {
          *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v16[3] = v8;
          v16[4] = v8;
          v16[1] = v8;
          v16[2] = v8;
          v16[0] = v8;
          AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::ARI_IBICallPsBreadButterModeRspCb_SDK((AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *)v16, a2);
          cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          v18 = 15;
          strcpy((char *)buf, "Set Butter mode");
          checkError((AriSdk::MsgBase *)v16, (uint64_t)buf, &cf);
          if (v18 < 0)
            operator delete(*(void **)buf);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          v10 = *(NSObject **)(v5 + 40);
          if (v9)
          {
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              if (*((_BYTE *)v2 + 24))
                v11 = "enable";
              else
                v11 = "disable";
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v11;
              _os_log_error_impl(&dword_227A72000, v10, OS_LOG_TYPE_ERROR, "Failed to %s Butter mode", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            if (*((_BYTE *)v2 + 24))
              v12 = "enabled";
            else
              v12 = "disabled";
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v12;
            _os_log_impl(&dword_227A72000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Butter mode", buf, 0xCu);
          }
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A4204](v16);
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_227AF7340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int Int;
  _DWORD *v14;
  void *v15;
  int v16;
  _DWORD *v17;
  void *v18;
  int v19;
  _DWORD *v20;
  void *v21;
  uint64_t v22;
  const void *v23;
  std::__shared_weak_count_vtbl *v24;
  NSObject *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  const void *v42;
  const void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD v47[4];
  void *__p[2];
  void *v49;
  _QWORD v50[2];
  void *v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  __int128 *v60;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v50[0] = 0xAAAAAAAAAAAAAAAALL;
  v50[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v50, (const __CFDictionary *)v2[1]);
  v4 = (std::__shared_weak_count *)v3[10];
  if (!v4 || (v5 = v3[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v49 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[3] = v12;
  *(_OWORD *)__p = v12;
  v47[1] = v12;
  v47[2] = v12;
  v47[0] = v12;
  AriSdk::ARI_IBIMccSettingReq_SDK::ARI_IBIMccSettingReq_SDK((AriSdk::ARI_IBIMccSettingReq_SDK *)v47);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v50, (const __CFString *)*MEMORY[0x24BED3938]);
  v14 = operator new(4uLL);
  *v14 = Int;
  v15 = __p[0];
  __p[0] = v14;
  if (v15)
    operator delete(v15);
  v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v50, (const __CFString *)*MEMORY[0x24BED37A8]);
  v17 = operator new(4uLL);
  *v17 = v16;
  v18 = __p[1];
  __p[1] = v17;
  if (v18)
    operator delete(v18);
  v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v50, (const __CFString *)*MEMORY[0x24BED37A0]);
  v20 = operator new(4uLL);
  *v20 = v19;
  v21 = v49;
  v49 = v20;
  if (v21)
    operator delete(v21);
  v22 = v3[39];
  v23 = (const void *)v2[2];
  if (!v23)
  {
    v24 = 0;
    v25 = v2[3];
    if (!v25)
      goto LABEL_20;
    goto LABEL_19;
  }
  v24 = (std::__shared_weak_count_vtbl *)_Block_copy(v23);
  v25 = v2[3];
  if (v25)
  {
LABEL_19:
    dispatch_retain(v25);
    goto LABEL_20;
  }
  do
LABEL_20:
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  v27 = (std::__shared_weak_count *)operator new(0x38uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = v24;
  v27->__vftable = (std::__shared_weak_count_vtbl *)off_24F038B50;
  v27[1].__shared_owners_ = (uint64_t)v25;
  v27[1].__shared_weak_owners_ = v5;
  v27[2].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v29 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v52 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v52 + 1) = 1174405120;
  *(_QWORD *)&v53 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((_QWORD *)&v53 + 1) = &__block_descriptor_tmp_191;
  v54 = (unint64_t)&v27[1];
  v55 = v27;
  do
    v30 = __ldxr(v28);
  while (__stxr(v30 + 1, v28));
  aBlock = v29;
  v57 = 0x40000000;
  v58 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  v59 = &unk_24F037988;
  v60 = &v52;
  v31 = _Block_copy(&aBlock);
  v32 = v55;
  if (v55)
  {
    v33 = (unint64_t *)&v55->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  do
    v35 = __ldaxr(v28);
  while (__stlxr(v35 - 1, v28));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v52 = v36;
  v53 = v36;
  v54 = 0xAAAAAAAAAAAAAAAALL;
  v37 = *(std::__shared_weak_count **)(v22 + 16);
  aBlock = *(_QWORD *)(v22 + 8);
  if (!v37)
  {
    v57 = 0;
LABEL_54:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v57 = (uint64_t)std::__shared_weak_count::lock(v37);
  if (!v57)
    goto LABEL_54;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v38 = (std::__shared_weak_count *)v57;
  if (v57)
  {
    v39 = (unint64_t *)(v57 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v51 = v31;
  ice::SendMsgBaseProxy::callback();
  if (v51)
    _Block_release(v51);
  MEMORY[0x22E2A2FF8](&v52);
  MEMORY[0x22E2A33A0](v47);
  std::__shared_weak_count::__release_weak(v7);
  MEMORY[0x22E2A2E9C](v50);
  v41 = v2[3];
  if (v41)
    dispatch_release(v41);
  v42 = (const void *)v2[2];
  if (v42)
    _Block_release(v42);
  v43 = (const void *)v2[1];
  if (v43)
    CFRelease(v43);
  operator delete(v2);
  v44 = (std::__shared_weak_count *)a1[2];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  operator delete(a1);
}

void sub_227AF7890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *aBlock,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  NSObject *v27;
  const void *v28;
  const void *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (aBlock)
    _Block_release(aBlock);
  MEMORY[0x22E2A2FF8](&a23);
  MEMORY[0x22E2A33A0](&a9);
  std::__shared_weak_count::__release_weak(v25);
  MEMORY[0x22E2A2E9C](&a20);
  v27 = v24[3];
  if (v27)
    dispatch_release(v27);
  v28 = (const void *)v24[2];
  if (v28)
    _Block_release(v28);
  v29 = (const void *)v24[1];
  if (v29)
    CFRelease(v29);
  operator delete(v24);
  v30 = (std::__shared_weak_count *)v23[2];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void sub_227AF79E0()
{
  JUMPOUT(0x227AF7964);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFTypeRef v10;
  char *v11;
  ctu *v12;
  std::string *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *__p;
  std::string __pa;
  CFTypeRef v23;
  CFTypeRef cf;
  _OWORD v25[4];
  unsigned int *v26;
  std::string block;
  void *v28;
  void *v29;
  CFTypeRef v30;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (!*(_QWORD *)(v2 + 16))
        {
LABEL_50:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        v26 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[2] = v7;
        v25[3] = v7;
        v25[0] = v7;
        v25[1] = v7;
        AriSdk::ARI_IBIMccSettingRspCb_SDK::ARI_IBIMccSettingRspCb_SDK((AriSdk::ARI_IBIMccSettingRspCb_SDK *)v25, a2);
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *((_BYTE *)&block.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&block, "Set mcc");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf)
            v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v9 = 0;
          if (v9)
            goto LABEL_28;
        }
        else
        {
          if (cf)
            v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          else
            v8 = 0;
          if (v8)
            goto LABEL_28;
        }
        if (AriSdk::ARI_IBIMccSettingRspCb_SDK::unpack((AriSdk::ARI_IBIMccSettingRspCb_SDK *)v25))
        {
          __p = (char *)operator new(0x30uLL);
          strcpy(__p, "Failed to unpack response of setting mcc");
          CreateError();
          v10 = cf;
          cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0])
              CFRelease(block.__r_.__value_.__l.__data_);
          }
          v11 = __p;
          goto LABEL_27;
        }
        v12 = (ctu *)*v26;
        if ((_DWORD)v12)
        {
          ctu::hex(v12);
          v13 = std::string::insert(&block, 0, "Error on setting mcc response result: 0x", 0x28uLL);
          __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          v14 = cf;
          cf = v23;
          if (v14)
            CFRelease(v14);
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__pa.__r_.__value_.__l.__data_);
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        v15 = *(const void **)v2;
        if (!*(_QWORD *)v2 || !*(_QWORD *)(v2 + 8))
        {
LABEL_47:
          if (cf)
            CFRelease(cf);
          MEMORY[0x22E2A3574](v25);
          goto LABEL_50;
        }
        v16 = cf;
        if (cf && (CFRetain(cf), (v15 = *(const void **)v2) == 0))
          v17 = 0;
        else
          v17 = _Block_copy(v15);
        v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        v28 = &__block_descriptor_tmp_81;
        if (v17)
        {
          v29 = _Block_copy(v17);
          v30 = v16;
          if (!v16)
            goto LABEL_39;
        }
        else
        {
          v29 = 0;
          v30 = v16;
          if (!v16)
          {
LABEL_39:
            dispatch_async(v18, &block);
            if (v30)
              CFRelease(v30);
            if (v29)
              _Block_release(v29);
            if (v17)
              _Block_release(v17);
            if (v16)
              CFRelease(v16);
            goto LABEL_47;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_227AF7D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 73) < 0)
    operator delete(*(void **)(v19 - 96));
  if (cf)
    CFRelease(cf);
  MEMORY[0x22E2A3574](&a18);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038B50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[3];
  if (v4)
    _Block_release(v4);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  void *v9;
  int v10;
  NSObject *v11;
  void **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[3];
  _OWORD v16[5];
  uint8_t buf[23];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      v5 = *v2;
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (v2[1])
        {
          *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v16[3] = v8;
          v16[4] = v8;
          v16[1] = v8;
          v16[2] = v8;
          v16[0] = v8;
          AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK::ARI_IBICallPsSignificantLocationRspCb_SDK((AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK *)v16, a2);
          memset(__p, 170, sizeof(__p));
          v18 = 15;
          strcpy((char *)buf, "Send visit info");
          checkErrorStr((AriSdk::MsgBase *)v16, (uint64_t)buf, (uint64_t)__p);
          if (v18 < 0)
            operator delete(*(void **)buf);
          v9 = (void *)HIBYTE(__p[2]);
          v10 = SHIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) < 0)
            v9 = __p[1];
          v11 = *(NSObject **)(v5 + 40);
          if (v9)
          {
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v12 = (void **)__p[0];
              if (v10 >= 0)
                v12 = __p;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v12;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "Failed to send visit info with error: %s", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_227A72000, v11, OS_LOG_TYPE_DEFAULT, "#I Successfully sent visit info", buf, 2u);
          }
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          MEMORY[0x22E2A4330](v16);
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_227AF8104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v6 - 57) < 0)
    operator delete(*(void **)(v6 - 80));
  MEMORY[0x22E2A4330](va);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F038BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F038BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void Timestamp::Timestamp(Timestamp *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned __int128 v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2)
      goto LABEL_4;
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(_QWORD **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(_QWORD *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((_QWORD *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_227A72000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2)
    goto LABEL_10;
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (_QWORD *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1)
        break;
      v5 = *v4;
      v2 = v4;
      if (!*v4)
        goto LABEL_10;
    }
    if ((v6 & 0x80000000) == 0)
      break;
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_227AF83AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_227AF83C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_227AF8420(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_227AF8474(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  const char *v5;
  uint64_t **v7;
  int *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  unsigned __int128 v23;
  tm v24;
  void *__p[4];
  uint8_t buf[4];
  char *v27;
  uint64_t v28;

  v5 = a2;
  v28 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0)
    v5 = *(const char **)a2;
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(_QWORD *)&v23 = mktime(&v24);
    if ((_QWORD)v23 != -1)
      goto LABEL_15;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v27 = v20;
      _os_log_error_impl(&dword_227A72000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v8 = __error();
    v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    v27 = v9;
    v10 = MEMORY[0x24BDACB70];
    v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    v27 = v22;
    v10 = MEMORY[0x24BDACB70];
    v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_227A72000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  v12 = *v7;
  v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4)
          break;
        v12 = *v13;
        v7 = v13;
        if (!*v13)
          goto LABEL_22;
      }
      if (v14 >= a4)
        break;
      v12 = v13[1];
      if (!v12)
      {
        v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v7 = (uint64_t *)v15;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0)
LABEL_25:
      operator delete(__p[0]);
  }
  return a1;
}

void sub_227AF8A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
    return 0;
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  _BYTE *v24;
  time_t v25;
  __int128 v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  char *v30;
  const std::locale::facet *v31;
  size_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  tm v41;
  time_t v42;
  _QWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 __p;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::locale v62;
  char __s[16];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61 = v7;
  v51 = 0xAAAAAAAAAAAAAAAALL;
  v60 = v7;
  v59 = v7;
  v58 = v7;
  v57 = v7;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v50 = v7;
  __p = v7;
  v48 = v7;
  v47 = v7;
  v46 = v7;
  v45 = v7;
  v8 = MEMORY[0x24BEDB858];
  v9 = MEMORY[0x24BEDB858] + 104;
  v52 = MEMORY[0x24BEDB858] + 104;
  v10 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v11 = MEMORY[0x24BEDB858] + 64;
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v44 = MEMORY[0x24BEDB858] + 64;
  v43[0] = v12;
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v12 - 24)) = v13;
  v43[1] = 0;
  v14 = (std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
  std::ios_base::init(v14, &v45);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v15 = v10[5];
  v44 = v10[4];
  *(uint64_t *)((char *)&v44 + *(_QWORD *)(v44 - 24)) = v15;
  v43[0] = v10[1];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = v10[6];
  v52 = v9;
  v43[0] = v8 + 24;
  v44 = v11;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v45 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v50 = 0u;
  LODWORD(v51) = 24;
  v19 = *(_QWORD *)(a1 + 8);
  v18 = a1 + 8;
  v17 = v19;
  if (!v19)
    goto LABEL_13;
  v20 = v18;
  do
  {
    v21 = *(_DWORD *)(v17 + 32);
    v22 = v21 < a2;
    if (v21 >= a2)
      v23 = (uint64_t *)v17;
    else
      v23 = (uint64_t *)(v17 + 8);
    if (!v22)
      v20 = v17;
    v17 = *v23;
  }
  while (*v23);
  if (v20 == v18)
  {
LABEL_13:
    v25 = 0;
    v24 = a4;
    if ((a3 & 0x11) != 0)
      goto LABEL_14;
    goto LABEL_22;
  }
  v24 = a4;
  if (*(_DWORD *)(v20 + 32) <= a2)
  {
    v25 = *(_QWORD *)(v20 + 40);
    if ((a3 & 0x11) != 0)
      goto LABEL_14;
LABEL_22:
    std::ostream::operator<<();
    if ((a3 & 4) != 0 || (a3 & 8) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)".", 1);
      std::ostream::operator<<();
    }
    goto LABEL_25;
  }
  v25 = 0;
  if ((a3 & 0x11) == 0)
    goto LABEL_22;
LABEL_14:
  v41.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  v42 = v25;
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v41.tm_mon = v26;
  *(_OWORD *)&v41.tm_isdst = v26;
  *(_OWORD *)&v41.tm_sec = v26;
  localtime_r(&v42, &v41);
  v65 = 0u;
  v66 = 0u;
  *(_OWORD *)__s = 0u;
  v64 = 0u;
  if ((a3 & 0x10) != 0)
    v27 = "%Y.%m.%d_%H-%M-%S%z";
  else
    v27 = "%Y-%m-%d-%H-%M-%S";
  strftime(__s, 0x40uLL, v27, &v41);
  v28 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)__s, v28);
  if ((a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"-", 1);
    v29 = v44;
    v30 = (char *)&v44 + *(_QWORD *)(v44 - 24);
    if (*((_DWORD *)v30 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v44 + *(_QWORD *)(v44 - 24)));
      v31 = std::locale::use_facet(&v62, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 32);
      std::locale::~locale(&v62);
      v29 = v44;
    }
    *((_DWORD *)v30 + 36) = 48;
    *(_QWORD *)((char *)&v46 + *(_QWORD *)(v29 - 24)) = 3;
    std::ostream::operator<<();
  }
LABEL_25:
  if ((v51 & 0x10) != 0)
  {
    v33 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < (unint64_t)v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v33 = v48;
    }
    v34 = (const void *)*((_QWORD *)&v47 + 1);
    v32 = v33 - *((_QWORD *)&v47 + 1);
    if ((unint64_t)(v33 - *((_QWORD *)&v47 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_42;
  }
  else
  {
    if ((v51 & 8) == 0)
    {
      v32 = 0;
      v24[23] = 0;
      goto LABEL_38;
    }
    v34 = (const void *)v46;
    v32 = v47 - v46;
    if ((_QWORD)v47 - (_QWORD)v46 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_42:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v37 = operator new(v35 + 1);
    *((_QWORD *)v24 + 1) = v32;
    *((_QWORD *)v24 + 2) = v36 | 0x8000000000000000;
    *(_QWORD *)v24 = v37;
    v24 = v37;
    goto LABEL_37;
  }
  v24[23] = v32;
  if (v32)
LABEL_37:
    memmove(v24, v34, v32);
LABEL_38:
  v24[v32] = 0;
  v43[0] = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v44 = v38;
  *(_QWORD *)&v45 = v16 + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2A47D4](&v52);
}

void sub_227AF8FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AF8FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::locale::~locale((std::locale *)(v11 - 184));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AF8FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AF8FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::iostream::~basic_iostream();
  MEMORY[0x22E2A47D4](a9);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2A47D4](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  std::string __p;
  uint64_t *v11[3];

  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = v11[1];
    if (!v11[1])
      goto LABEL_18;
  }
  v2 = &v11[1];
  v3 = v1;
  do
  {
    v4 = (uint64_t **)v3;
    v5 = v2;
    v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0)
      v2 = (uint64_t **)v3;
    else
      ++v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1])
    goto LABEL_18;
  v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0)
    goto LABEL_18;
  if (v6 < 0)
    v4 = v5;
  v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_227AF91DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v6;
        if (v8)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v8;
              v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7)
                break;
              v8 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v7)
              goto LABEL_29;
            v8 = v13[1];
            if (!v8)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = operator new(0x38uLL);
      v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((_QWORD *)v16 + 6) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v18 = *(_QWORD *)*v5;
      if (v18)
      {
        *v5 = v18;
        v19 = *v14;
      }
      else
      {
        v19 = (uint64_t *)v16;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v12 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v12);
      }
      v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_9:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*((void **)this + 3));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  std::__shared_weak_count::__release_weak(v6);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  const char *v2;
  const char *v3;
  timespec v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  NSObject *global_queue;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (char *)this + 48;
  v2 = (const char *)*((_QWORD *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = v2;
  if (stat(v5, &v19))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_253DF25A0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_253DF25A0;
      if (os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_8:
        v8 = v3;
        if (*((char *)this + 71) < 0)
          v8 = *(const char **)v3;
        v19.st_dev = 136315138;
        *(_QWORD *)&v19.st_mode = v8;
        _os_log_impl(&dword_227A72000, v7, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
      v7 = qword_253DF25A0;
      if (os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if (*((char *)this + 71) < 0)
    v3 = *(const char **)v3;
  v9 = open(v3, 0x8000);
  if ((v9 & 0x80000000) != 0)
    return 0;
  global_queue = dispatch_get_global_queue(17, 0);
  v11 = dispatch_source_create(MEMORY[0x24BDACA28], v9, 0x21uLL, global_queue);
  if (!v11)
  {
    close(v9);
    return 0;
  }
  v12 = v11;
  v13 = MEMORY[0x24BDAC760];
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 0x40000000;
  handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_3;
  handler[4] = this;
  v18 = v9;
  dispatch_source_set_event_handler(v11, handler);
  v15[0] = v13;
  v15[1] = 0x40000000;
  v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9_4;
  v16 = v9;
  dispatch_source_set_cancel_handler(v12, v15);
  dispatch_activate(v12);
  return v12;
}

void ServerLogging::registerLogServer(uint64_t a1, ctu::LogServer *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  os_unfair_lock_s *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = a2;
    *(_QWORD *)(a1 + 88) = a3;
    if (!v10)
    {
LABEL_7:
      if (!a2)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v10 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = a2;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v10)
      goto LABEL_7;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    a2 = *(ctu::LogServer **)(a1 + 80);
    if (!a2)
      goto LABEL_17;
    goto LABEL_16;
  }
  a2 = *(ctu::LogServer **)(a1 + 80);
  if (a2)
LABEL_16:
    ctu::LogServer::setEnabled(a2);
LABEL_17:
  os_unfair_lock_unlock(v8);
  if (a3)
  {
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  char *v0;
  size_t v1;
  void *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__dst[2];
  unint64_t v7;

  v0 = abm::trace::kTrashFolder;
  v1 = strlen(abm::trace::kTrashFolder);
  if (v1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17)
      v4 = v1 | 7;
    v5 = v4 + 1;
    v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  v3 = __dst;
  if (v1)
LABEL_8:
    memmove(v3, v0, (size_t)v2);
  *((_BYTE *)v2 + (_QWORD)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__dst[0]);
}

void sub_227AF98C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v4 = qword_253DF25A0;
    if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
    v4 = qword_253DF25A0;
    if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  v5 = (_QWORD *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v5 = (_QWORD *)*v5;
  v7 = 136315138;
  v8 = v5;
  _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v7, 0xCu);
LABEL_7:
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(_QWORD *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  capabilities::abs *v10;
  uint64_t v11;
  std::string *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  int v15;
  char *v16;
  std::string::size_type v17;
  ctu::LogServer **v18;
  void *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  size_t v37;
  void *v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const __CFString *v43;
  CFPropertyListRef v44;
  const __CFString *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  char *v60;
  size_t v61;
  std::string::size_type v62;
  void *p_block;
  uint64_t v64;
  uint64_t v65;
  NSObject *global_queue;
  capabilities::abs *v67;
  ctu::LogServer *v68;
  std::string::value_type *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  ctu::LogServer *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const std::string::value_type *v92;
  int v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string __p;
  _DWORD v97[2];
  std::string v98;
  void *__dst[2];
  int64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::string v103;
  std::string v104;
  _QWORD v105[2];
  CFPropertyListRef v106;
  std::string block;
  void *v108;
  uint64_t *v109;

  block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_227B1E5D0;
  strcpy(block.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
    if (!v104.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    size = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
    if (!v104.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  v8 = (unint64_t *)&size->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_9:
    if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(block.__r_.__value_.__l.__data_);
LABEL_11:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  v10 = (capabilities::abs *)pthread_mutex_lock(&stru_253DF2458);
  v11 = qword_253DF2498;
  if (qword_253DF2498)
    goto LABEL_127;
  capabilities::abs::logScratchPath(v10);
  v12 = std::string::append(&block, "/abm.scratch", 0xCuLL);
  v13 = (const std::string::value_type *)v12->__r_.__value_.__r.__words[0];
  v14 = v12->__r_.__value_.__l.__size_;
  v97[0] = v12->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v97 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
  v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  memset(&__p, 170, sizeof(__p));
  v92 = v13;
  v93 = v15;
  capabilities::abs::logSnapshotPath((capabilities::abs *)v12);
  v16 = (char *)operator new(0x60uLL);
  v17 = (std::string::size_type)v16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_DWORD *)v16 + 4) = 0;
  if (v15 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v16 + 1, v13, v14);
  }
  else
  {
    *((_QWORD *)v16 + 3) = v13;
    *((_QWORD *)v16 + 4) = v14;
    *((_DWORD *)v16 + 10) = v97[0];
    *(_DWORD *)(v16 + 43) = *(_DWORD *)((char *)v97 + 3);
    v16[47] = v15;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v17 + 48), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v17 + 48) = __p;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  v18 = (ctu::LogServer **)(v17 + 80);
  pthread_mutex_lock(&_MergedGlobals);
  v19 = off_253DF2448;
  if (!off_253DF2448)
  {
    v20 = operator new(0x30uLL);
    MEMORY[0x22E2A2EA8](v20, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x24BDBD590]);
    v20[3] = 0;
    v20[4] = 0;
    *((_DWORD *)v20 + 10) = 0;
    block.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    v21 = (std::__shared_weak_count *)operator new(0x20uLL);
    v22 = v21;
    v21->__shared_owners_ = 0;
    v23 = (unint64_t *)&v21->__shared_owners_;
    v21->__vftable = (std::__shared_weak_count_vtbl *)off_24F038D10;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
    block.__r_.__value_.__r.__words[0] = 0;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v20[3] = v20;
    v20[4] = v21;
    do
      v27 = __ldaxr(v23);
    while (__stlxr(v27 - 1, v23));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v22);
    }
    v28 = block.__r_.__value_.__r.__words[0];
    if (block.__r_.__value_.__r.__words[0])
    {
      v29 = *(std::__shared_weak_count **)(block.__r_.__value_.__r.__words[0] + 32);
      if (v29)
        std::__shared_weak_count::__release_weak(v29);
      v30 = (void *)MEMORY[0x22E2A2EB4](v28);
      operator delete(v30);
    }
    v31 = (std::__shared_weak_count *)off_253DF2450;
    off_253DF2448 = v20;
    off_253DF2450 = v22;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v19 = off_253DF2448;
  }
  v101 = v19;
  v102 = (std::__shared_weak_count *)off_253DF2450;
  if (off_253DF2450)
  {
    v34 = (unint64_t *)((char *)off_253DF2450 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  pthread_mutex_unlock(&_MergedGlobals);
  v36 = abm::trace::kCurrentSnapshotFolder;
  v37 = strlen(abm::trace::kCurrentSnapshotFolder);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    v39 = (void **)operator new(v40 + 1);
    __dst[1] = v38;
    v100 = v41 | 0x8000000000000000;
    __dst[0] = v39;
LABEL_54:
    memmove(v39, v36, (size_t)v38);
    *((_BYTE *)v38 + (_QWORD)v39) = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_55;
  }
  HIBYTE(v100) = v37;
  v39 = __dst;
  if (v37)
    goto LABEL_54;
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    v98 = __p;
    goto LABEL_56;
  }
LABEL_55:
  std::string::__init_copy_ctor_external(&v98, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_56:
  os_unfair_lock_lock((os_unfair_lock_t)v19 + 10);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v103, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v103 = v98;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v104, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v104 = v103;
  if (v100 >= 0)
    v42 = (const char *)__dst;
  else
    v42 = (const char *)__dst[0];
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&block, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    block = v104;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v105, v42);
  v43 = (const __CFString *)v105[0];
  v106 = 0;
  ctu::cf::convert_copy();
  v44 = v106;
  v105[1] = v106;
  if (v106)
  {
    v45 = (const __CFString *)*MEMORY[0x24BDBD588];
    CFPreferencesSetValue(v43, v106, *((CFStringRef *)v19 + 1), *((CFStringRef *)v19 + 2), (CFStringRef)*MEMORY[0x24BDBD588]);
    CFPreferencesSynchronize(*((CFStringRef *)v19 + 1), *((CFStringRef *)v19 + 2), v45);
    CFRelease(v44);
  }
  MEMORY[0x22E2A2E6C](v105);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_73;
      goto LABEL_79;
    }
  }
  else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v104.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    os_unfair_lock_unlock((os_unfair_lock_t)v19 + 10);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_80;
  }
LABEL_79:
  operator delete(v103.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)v19 + 10);
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v100) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v98.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
LABEL_75:
    v46 = v102;
    if (!v102)
      goto LABEL_86;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(__dst[0]);
  v46 = v102;
  if (!v102)
    goto LABEL_86;
LABEL_82:
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_86:
  block.__r_.__value_.__r.__words[0] = v17;
  v49 = (std::__shared_weak_count *)operator new(0x20uLL);
  v49->__shared_owners_ = 0;
  v50 = (unint64_t *)&v49->__shared_owners_;
  v49->__vftable = (std::__shared_weak_count_vtbl *)off_24F038CC0;
  v49->__shared_weak_owners_ = 0;
  v49[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  block.__r_.__value_.__r.__words[0] = 0;
  v51 = *(std::__shared_weak_count **)(v17 + 8);
  if (v51)
  {
    if (v51->__shared_owners_ != -1)
      goto LABEL_99;
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
    v53 = (unint64_t *)&v49->__shared_weak_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    *(_QWORD *)v17 = v17;
    *(_QWORD *)(v17 + 8) = v49;
    std::__shared_weak_count::__release_weak(v51);
  }
  else
  {
    do
      v55 = __ldxr(v50);
    while (__stxr(v55 + 1, v50));
    v56 = (unint64_t *)&v49->__shared_weak_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    *(_QWORD *)v17 = v17;
    *(_QWORD *)(v17 + 8) = v49;
  }
  do
    v58 = __ldaxr(v50);
  while (__stlxr(v58 - 1, v50));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_99:
  if (block.__r_.__value_.__r.__words[0])
  {
    ServerLogging::~ServerLogging((ServerLogging *)block.__r_.__value_.__l.__data_);
    operator delete(v59);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 16));
  *(_QWORD *)(v17 + 72) = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v17);
  v60 = abm::trace::kTrashFolder;
  v61 = strlen(abm::trace::kTrashFolder);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    p_block = operator new(v64 + 1);
    block.__r_.__value_.__l.__size_ = v62;
    block.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
    block.__r_.__value_.__r.__words[0] = (std::string::size_type)p_block;
    goto LABEL_108;
  }
  *((_BYTE *)&block.__r_.__value_.__s + 23) = v61;
  p_block = &block;
  if (v61)
LABEL_108:
    memmove(p_block, v60, v62);
  *((_BYTE *)p_block + v62) = 0;
  support::fs::createDir((const char *)&block, 0x1EDu, 1);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global);
  capabilities::abs::logScratchPath(v67);
  support::fs::createDir((const char *)&block, 0x1EDu, 1);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    v68 = *v18;
    if (!*v18)
      goto LABEL_116;
    goto LABEL_115;
  }
  v68 = *v18;
  if (*v18)
LABEL_115:
    ctu::LogServer::setEnabled(v68);
LABEL_116:
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 16));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v69 = (std::string::value_type *)v92;
    if ((v93 & 0x80000000) == 0)
    {
LABEL_118:
      v70 = (std::__shared_weak_count *)off_253DF24A0;
      qword_253DF2498 = v17;
      off_253DF24A0 = v49;
      if (!v70)
        goto LABEL_126;
LABEL_122:
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      goto LABEL_126;
    }
  }
  else
  {
    v69 = (std::string::value_type *)v92;
    if ((v93 & 0x80000000) == 0)
      goto LABEL_118;
  }
  operator delete(v69);
  v70 = (std::__shared_weak_count *)off_253DF24A0;
  qword_253DF2498 = v17;
  off_253DF24A0 = v49;
  if (v70)
    goto LABEL_122;
LABEL_126:
  v11 = qword_253DF2498;
LABEL_127:
  v73 = (std::__shared_weak_count *)off_253DF24A0;
  if (off_253DF24A0)
  {
    v74 = (unint64_t *)((char *)off_253DF24A0 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  pthread_mutex_unlock(&stru_253DF2458);
  v76 = *(_QWORD *)(a1 + 32);
  v77 = *(ctu::LogServer **)v76;
  v78 = *(std::__shared_weak_count **)(v76 + 8);
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    ServerLogging::registerLogServer(v11, v77, v78);
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v11, v77, 0);
  }
  if (v73)
  {
    v82 = (unint64_t *)&v73->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v84 = *(uint64_t **)(a1 + 32);
  v86 = *v84;
  v85 = (std::__shared_weak_count *)v84[1];
  v94 = v86;
  v95 = v85;
  if (v85)
  {
    v87 = (unint64_t *)&v85->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  block.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v108 = &__block_descriptor_tmp_4;
  v109 = &v94;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v89 = v95;
    if (!v95)
      return;
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v89 = v95;
    if (!v95)
      return;
  }
  v90 = (unint64_t *)&v89->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
}

void sub_227AFA604(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, int a10, int a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a37 & 0x80000000) == 0)
  {
LABEL_6:
    __clang_call_terminate(a1);
  }
  operator delete(a32);
  __clang_call_terminate(a1);
}

void sub_227AFA818(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  ServerLogging *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  ServerLogging *v1;
  void *v2;

  v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x22E2A2EB4](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x22E2A2EB4](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &_MergedGlobals, &dword_227A72000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &stru_253DF2458, &dword_227A72000);
  }
  return result;
}

double trace::ARICommandDriverINT::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  double result;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;

  v4 = operator new(0xA8uLL);
  v5 = v4;
  v6 = a1[1];
  v23 = *a1;
  v24 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  trace::ARICommandDriverINT::ARICommandDriverINT((uint64_t)v4, &v23);
  *(_QWORD *)&v25 = v5;
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_24F038F58;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *((_QWORD *)&v25 + 1) = v9;
  v11 = (std::__shared_weak_count *)*((_QWORD *)v5 + 10);
  if (v11)
  {
    if (v11->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 9) = v5;
    *((_QWORD *)v5 + 10) = v9;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *((_QWORD *)v5 + 9) = v5;
    *((_QWORD *)v5 + 10) = v9;
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_17:
  ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v25);
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v25 + 200))(v25);
  result = *(double *)&v25;
  *a2 = v25;
  return result;
}

void sub_227AFAC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_227AFAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227AFAC40(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT*)#1}::operator() const(trace::ARICommandDriverINT*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_227AFAC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_227AFAC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t trace::ARICommandDriverINT::ARICommandDriverINT(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *object;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  trace::CommandDriver::CommandDriver((_QWORD *)a1, &v12);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = off_24F038D60;
  v9 = *(NSObject **)(a1 + 88);
  object = v9;
  if (v9)
    dispatch_retain(v9);
  ice::Client::create();
  if (object)
    dispatch_release(object);
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = dispatch_group_create();
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return a1;
}

void sub_227AFAD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  trace::CommandDriver *v10;

  if (object)
    dispatch_release(object);
  trace::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void sub_227AFADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void trace::ARICommandDriverINT::~ARICommandDriverINT(trace::ARICommandDriverINT *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint8_t v14[16];

  *(_QWORD *)this = off_24F038D60;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v14, 2u);
  }
  v3 = *((_QWORD *)this + 20);
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)*((_QWORD *)this + 19);
  if (v4)
    _Block_release(v4);
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 17);
  if (v6)
    _Block_release(v6);
  v7 = *((_QWORD *)this + 16);
  if (v7)
    dispatch_release(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = &unk_24F0335B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v11 = *((_QWORD *)this + 12);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_release(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

{
  void *v1;

  trace::ARICommandDriverINT::~ARICommandDriverINT(this);
  operator delete(v1);
}

void trace::ARICommandDriverINT::init(trace::ARICommandDriverINT *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x24BDAC760];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_5;
  v1[4] = this;
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ___ZN5trace19ARICommandDriverINT4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  uint8_t buf[8];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = *(_QWORD *)(v1 + 104);
  v4 = MEMORY[0x24BDAC760];
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 0x40000000;
  v12[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_1;
  v12[3] = &__block_descriptor_tmp_9;
  v12[4] = v1;
  *(_QWORD *)buf = v12;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v3, 0, (uint64_t *)buf);
  v5 = *(_QWORD *)(v1 + 104);
  v11[0] = v4;
  v11[1] = 0x40000000;
  v11[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_3_1;
  v11[4] = v1;
  *(_QWORD *)buf = v11;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v5, 1, (uint64_t *)buf);
  v6 = *(_QWORD *)(v1 + 104);
  v10[0] = v4;
  v10[1] = 0x40000000;
  v10[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_4;
  v10[3] = &__block_descriptor_tmp_6_2;
  v10[4] = v1;
  *(_QWORD *)buf = v10;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v6, 2, (uint64_t *)buf);
  v7 = *(_QWORD *)(v1 + 104);
  v9[0] = v4;
  v9[1] = 0x40000000;
  v9[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_7;
  v9[3] = &__block_descriptor_tmp_8_3;
  v9[4] = v1;
  *(_QWORD *)buf = v9;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v7, 3, (uint64_t *)buf);
  result = ice::Client::start(*(ice::Client **)(v1 + 104));
  *(_BYTE *)(v1 + 120) = 1;
  return result;
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_1(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI Started event received.", v2, 2u);
  }
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_2(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_227A72000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI Stopped event received.", v2, 2u);
  }
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_4(uint64_t a1, NSObject **a2)
{
  _QWORD *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  void *aBlock;
  dispatch_group_t group;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_227A72000, v4, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", (uint8_t *)v9, 2u);
  }
  v5 = (const void *)v3[17];
  if (v5 && v3[18])
  {
    v6 = *a2;
    if (v6 && (dispatch_retain(v6), dispatch_group_enter(v6), (v5 = (const void *)v3[17]) == 0))
      v7 = 0;
    else
      v7 = _Block_copy(v5);
    v8 = v3[18];
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1174405120;
    v9[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_1;
    v9[3] = &__block_descriptor_tmp_17_3;
    if (v7)
    {
      aBlock = _Block_copy(v7);
      group = v6;
      if (!v6)
        goto LABEL_12;
    }
    else
    {
      aBlock = 0;
      group = v6;
      if (!v6)
      {
LABEL_12:
        dispatch_async(v8, v9);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (aBlock)
          _Block_release(aBlock);
        if (v7)
          _Block_release(v7);
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        return;
      }
    }
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    goto LABEL_12;
  }
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_7(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  const void *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[4];
  void *aBlock;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_227A72000, v2, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", (uint8_t *)v8, 2u);
  }
  v3 = (const void *)v1[19];
  if (v3 && v1[20])
  {
    v4 = _Block_copy(v3);
    v5 = v4;
    v6 = v1[20];
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_1;
    v8[3] = &__block_descriptor_tmp_19_2;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
      {
LABEL_10:
        if (v5)
          _Block_release(v5);
        return;
      }
    }
    else
    {
      aBlock = 0;
      dispatch_async(v6, v8);
      v7 = aBlock;
      if (!aBlock)
        goto LABEL_10;
    }
    _Block_release(v7);
    goto LABEL_10;
  }
}

uint64_t trace::ARICommandDriverINT::sendConfig(unint64_t a1, char **a2, std::__shared_count_vtbl **a3, int a4, int a5, int a6, uint64_t a7)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  _DWORD *v23;
  const char *v24;
  unint64_t v25;
  void *v26;
  const char *v27;
  uint8_t *v28;
  _BYTE *v29;
  void *v30;
  _BYTE *v31;
  void *v32;
  _DWORD *v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  size_t v39;
  size_t v40;
  void *v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  __int128 v45;
  std::__shared_count v46;
  const void *v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  dispatch_time_t v60;
  intptr_t v61;
  NSObject *v62;
  uint64_t v63;
  std::__shared_count_vtbl **v65;
  uint64_t v66;
  _OWORD v68[2];
  unint64_t v69;
  _OWORD v70[4];
  void *__p[2];
  __int128 v72;
  void *v73[2];
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, const unsigned __int8 *);
  void *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  const void *aBlock[5];
  uint8_t buf[16];
  __int128 v83;
  __int128 v84;
  std::__shared_count v85;
  dispatch_object_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v8 || (v66 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v74 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v72 = v20;
  *(_OWORD *)v73 = v20;
  v70[3] = v20;
  *(_OWORD *)__p = v20;
  v70[1] = v20;
  v70[2] = v20;
  v70[0] = v20;
  AriSdk::ARI_TraceSetConfigReq_SDK::ARI_TraceSetConfigReq_SDK((AriSdk::ARI_TraceSetConfigReq_SDK *)v70);
  v22 = *a2;
  v21 = a2[1];
  v23 = operator new(4uLL);
  v25 = v21 - v22;
  *v23 = (_DWORD)v21 - (_DWORD)v22;
  v26 = __p[0];
  __p[0] = v23;
  v65 = a3;
  if (v26)
  {
    operator delete(v26);
    v22 = *a2;
    v21 = a2[1];
    v25 = v21 - *a2;
  }
  if (v25 < 0xF01)
  {
    if (&__p[1] != (void **)a2)
      std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(&__p[1], v22, v21, v25);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v24);
    if ((SBYTE7(v83) & 0x80u) == 0)
      v28 = buf;
    else
      v28 = *(uint8_t **)buf;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v27, v28, 349, &__p[1], a2[1] - *a2, 3840);
    if (SBYTE7(v83) < 0)
      operator delete(*(void **)buf);
  }
  v29 = operator new(1uLL);
  *v29 = a4;
  v30 = v73[0];
  v73[0] = v29;
  if (v30)
    operator delete(v30);
  v31 = operator new(1uLL);
  *v31 = a5;
  v32 = v73[1];
  v73[1] = v31;
  if (v32)
    operator delete(v32);
  v33 = operator new(4uLL);
  *v33 = a6;
  v34 = v74;
  v74 = v33;
  if (v34)
    operator delete(v34);
  v35 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = a4;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a5;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v83) = a6;
    _os_log_debug_impl(&dword_227A72000, v35, OS_LOG_TYPE_DEBUG, "#D Background tracing: %d, wait for idle indication: %d, privacy level: %d", buf, 0x14u);
  }
  v36 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)buf = v66;
  *(_QWORD *)&buf[8] = v15;
  do
    v37 = __ldxr(p_shared_weak_owners);
  while (__stxr(v37 + 1, p_shared_weak_owners));
  v83 = a1;
  v84 = 0uLL;
  v38 = *a2;
  v39 = a2[1] - *a2;
  if (v39)
  {
    if ((v39 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    *((_QWORD *)&v83 + 1) = operator new(v39);
    *(_QWORD *)&v84 = *((_QWORD *)&v83 + 1);
    v40 = *((_QWORD *)&v83 + 1) + v39;
    *((_QWORD *)&v84 + 1) = *((_QWORD *)&v83 + 1) + v39;
    memcpy(*((void **)&v83 + 1), v38, v39);
    *(_QWORD *)&v84 = v40;
  }
  v85.__vftable = *v65;
  if (v85.__vftable)
    dispatch_retain((dispatch_object_t)v85.__vftable);
  v41 = *(void **)a7;
  if (*(_QWORD *)a7)
    v41 = _Block_copy(v41);
  v42 = *(NSObject **)(a7 + 8);
  v85.__shared_owners_ = (uint64_t)v41;
  v86 = v42;
  if (v42)
    dispatch_retain(v42);
  v43 = (std::__shared_weak_count *)operator new(0x60uLL);
  v43->__shared_owners_ = 0;
  v44 = (unint64_t *)&v43->__shared_owners_;
  v45 = v83;
  v43[1].std::__shared_count = *(std::__shared_count *)buf;
  *(_OWORD *)&v43[1].__shared_weak_owners_ = v45;
  v46 = v85;
  *(_OWORD *)&v43[2].__shared_owners_ = v84;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)off_24F039038;
  memset(buf, 0, sizeof(buf));
  v84 = 0uLL;
  *((_QWORD *)&v83 + 1) = 0;
  v43[3].std::__shared_count = v46;
  v85 = (std::__shared_count)0;
  v43[3].__shared_weak_owners_ = (uint64_t)v86;
  v86 = 0;
  v47 = (const void *)MEMORY[0x24BDAC760];
  v75 = MEMORY[0x24BDAC760];
  v76 = 1174405120;
  v77 = ___ZN3ice6detail12wrapCallbackIZN5trace19ARICommandDriverINT10sendConfigENSt3__16vectorIcNS4_9allocatorIcEEEEN8dispatch5groupEbbiNS9_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS9_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  v78 = &__block_descriptor_tmp_24_3;
  v79 = v43 + 1;
  v80 = v43;
  do
    v48 = __ldxr(v44);
  while (__stxr(v48 + 1, v44));
  aBlock[0] = v47;
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8;
  aBlock[3] = &unk_24F039080;
  aBlock[4] = &v75;
  v49 = _Block_copy(aBlock);
  v50 = v80;
  if (v80)
  {
    v51 = (unint64_t *)&v80->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  do
    v53 = __ldaxr(v44);
  while (__stlxr(v53 - 1, v44));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  *(_QWORD *)&v54 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[0] = v54;
  v68[1] = v54;
  v69 = 0xAAAAAAAAAAAAAAAALL;
  v55 = *(std::__shared_weak_count **)(v36 + 16);
  v75 = *(_QWORD *)(v36 + 8);
  if (!v55)
  {
    v76 = 0;
LABEL_78:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v76 = (uint64_t)std::__shared_weak_count::lock(v55);
  if (!v76)
    goto LABEL_78;
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v56 = (std::__shared_weak_count *)v76;
  if (v76)
  {
    v57 = (unint64_t *)(v76 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  aBlock[0] = v49;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  MEMORY[0x22E2A2FF8](v68);
  if (v86)
    dispatch_release(v86);
  if (v85.__shared_owners_)
    _Block_release((const void *)v85.__shared_owners_);
  if (v85.__vftable)
    dispatch_release((dispatch_object_t)v85.__vftable);
  if (*((_QWORD *)&v83 + 1))
  {
    *(_QWORD *)&v84 = *((_QWORD *)&v83 + 1);
    operator delete(*((void **)&v83 + 1));
  }
  if (*(_QWORD *)&buf[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  if (!a5)
    goto LABEL_74;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 128));
  v59 = *(NSObject **)(a1 + 128);
  v60 = dispatch_time(0, 3000000000);
  v61 = dispatch_group_wait(v59, v60);
  v62 = *(NSObject **)(a1 + 40);
  if (!v61)
  {
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_227A72000, v62, OS_LOG_TYPE_DEBUG, "#D Trace output idle indication received successfully", buf, 2u);
    }
LABEL_74:
    v63 = 1;
    goto LABEL_75;
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_227A72000, v62, OS_LOG_TYPE_ERROR, "Timeout waiting for trace output idle indication", buf, 2u);
  }
  v63 = 0;
LABEL_75:
  MEMORY[0x22E2A3460](v70);
  std::__shared_weak_count::__release_weak(v15);
  return v63;
}

void sub_227AFBA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  if (*(char *)(v16 - 153) < 0)
    operator delete(*(void **)(v16 - 176));
  MEMORY[0x22E2A3460](va);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

_QWORD *trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = a1[6];
  if (v4)
    dispatch_release(v4);
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t trace::ARICommandDriverINT::isStarted(trace::ARICommandDriverINT *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v4[2];
  unsigned __int8 v5;
  _QWORD block[6];

  v5 = 0;
  v4[0] = &v5;
  v4[1] = this;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNKS1_19ARICommandDriverINT9isStartedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_31_0;
  block[4] = (char *)this + 72;
  block[5] = v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  return v5;
}

void trace::ARICommandDriverINT::start(trace::ARICommandDriverINT *this)
{
  NSObject *v1;
  char *v2;
  trace::ARICommandDriverINT *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNS1_19ARICommandDriverINT5startEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_32_2;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void trace::ARICommandDriverINT::stop(trace::ARICommandDriverINT *this, group *a2)
{
  char *gr_name;
  char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
    v5 = a2->gr_name;
    if (a2->gr_name)
      dispatch_retain((dispatch_object_t)a2->gr_name);
  }
  else
  {
    v5 = 0;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v6 || (v7 = *((_QWORD *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = this;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 11);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>(trace::ARICommandDriverINT::stop(dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<trace::ARICommandDriverINT::stop(dispatch::group)::$_0,dispatch_queue_s *::default_delete<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    if (gr_name)
    {
LABEL_13:
      dispatch_group_leave((dispatch_group_t)gr_name);
      dispatch_release((dispatch_object_t)gr_name);
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (gr_name)
      goto LABEL_13;
  }
}

void trace::ARICommandDriverINT::setLPMEnterAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  _QWORD *v12;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_10_5;
  v9[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  v12 = v9;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0;
  block[3] = &__block_descriptor_tmp_34_1;
  block[4] = a1 + 72;
  block[5] = &v12;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, block);
    v8 = object;
    if (!object)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v7, block);
  v8 = object;
  if (object)
LABEL_7:
    dispatch_release(v8);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16[5];
  std::__shared_weak_count *v17;
  _QWORD aBlock[5];

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = v5;
  if (v6)
    dispatch_release(v6);
  if (*(_QWORD *)(v3 + 136) && *(_QWORD *)(v3 + 144))
  {
    v7 = (std::__shared_weak_count *)operator new(0x20uLL);
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)off_24F039150;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v9 = MEMORY[0x24BDAC760];
    v16[0] = (void *)MEMORY[0x24BDAC760];
    v16[1] = (void *)1174405120;
    v16[2] = ___ZN3ice6detail12wrapCallbackIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS4_13group_sessionEEEEEUb_E3__4vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
    v16[3] = &__block_descriptor_tmp_33_1;
    v16[4] = &v7[1];
    v17 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    aBlock[0] = v9;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8;
    aBlock[3] = &unk_24F039080;
    aBlock[4] = v16;
    v11 = _Block_copy(aBlock);
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v16[0] = v11;
    ice::Client::regIndicationInternal();
    if (v16[0])
      _Block_release(v16[0]);
    ice::Client::setIndShouldWake(*(ice::Client **)(v3 + 104));
  }
}

void sub_227AFC050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void trace::ARICommandDriverINT::setLPMExitAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  _QWORD *v12;
  _QWORD block[6];

  v4 = MEMORY[0x24BDAC760];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1174405120;
  v9[2] = ___ZN5trace19ARICommandDriverINT16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_11_2;
  v9[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  v12 = v9;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0;
  block[3] = &__block_descriptor_tmp_34_1;
  block[4] = a1 + 72;
  block[5] = &v12;
  v7 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v7, block);
    v8 = object;
    if (!object)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v7, block);
  v8 = object;
  if (object)
LABEL_7:
    dispatch_release(v8);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5trace19ARICommandDriverINT16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 152);
  *(_QWORD *)(v3 + 152) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 160);
  *(_QWORD *)(v3 + 160) = v5;
  if (v6)
    dispatch_release(v6);
}

void std::__shared_ptr_pointer<trace::ARICommandDriverINT *,std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT *)#1},std::allocator<trace::ARICommandDriverINT>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<trace::ARICommandDriverINT *,std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT *)#1},std::allocator<trace::ARICommandDriverINT>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT*)#1}::operator() const(trace::ARICommandDriverINT*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<trace::ARICommandDriverINT *,std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT *)#1},std::allocator<trace::ARICommandDriverINT>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandDriverINTEEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandD"
                                "riverINTEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandDriverINTEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandDriverINTEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT*)#1}::operator() const(trace::ARICommandDriverINT*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_1(uint64_t a1)
{
  dispatch::block<void({block_pointer})(dispatch::group_session)>::operator()<dispatch::group_session const&>((uint64_t *)(a1 + 32), (NSObject **)(a1 + 40));
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3ice6detail12wrapCallbackIZN5trace19ARICommandDriverINT10sendConfigENSt3__16vectorIcNS4_9allocatorIcEEEEN8dispatch5groupEbbiNS9_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS9_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  const void *v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  uint64_t (*v12)(uint64_t);
  int v13;
  NSObject *v14;
  const void *v15;
  NSObject *v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  __int128 *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  _BYTE *v37;
  __int128 v38;
  __int128 v39;
  CFTypeRef v40[2];
  __int128 v41;
  int *v42;
  _BYTE cf[12];
  _BYTE buf[24];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      v5 = v2[2];
      v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        v7 = v6;
        if (!*v2)
          goto LABEL_48;
        v42 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v40 = v8;
        v41 = v8;
        v38 = v8;
        v39 = v8;
        AriSdk::ARI_TraceSetConfigRspCb_SDK::ARI_TraceSetConfigRspCb_SDK((AriSdk::ARI_TraceSetConfigRspCb_SDK *)&v38, a2);
        buf[23] = 20;
        strcpy(buf, "Sending trace config");
        checkError((AriSdk::MsgBase *)&v38, (uint64_t)buf, (CFTypeRef *)cf);
        v9 = *(const void **)cf;
        *(_QWORD *)cf = 0;
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          if (!v9)
            v12 = 0;
          if (v12)
            goto LABEL_9;
        }
        else
        {
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          if (!v9)
            v10 = 0;
          if (v10)
          {
LABEL_9:
            v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, "Failed to send trace config!", buf, 2u);
            }
            goto LABEL_24;
          }
        }
        v13 = AriSdk::ARI_TraceSetConfigRspCb_SDK::unpack((AriSdk::ARI_TraceSetConfigRspCb_SDK *)&v38);
        if (v13 || *v42)
        {
          v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v27 = *v42;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v13;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v27;
            _os_log_error_impl(&dword_227A72000, v14, OS_LOG_TYPE_ERROR, "Failed to send trace config: unpackResult = %d result_code_t1 = %d", buf, 0xEu);
          }
          *(_QWORD *)buf = operator new(0x20uLL);
          *(_OWORD *)&buf[8] = xmmword_227B19BE0;
          strcpy(*(char **)buf, "Failed to send trace config");
          CreateError();
          v15 = *(const void **)cf;
          *(_QWORD *)cf = 0;
          if (v9)
          {
            CFRelease(v9);
            if (*(_QWORD *)cf)
              CFRelease(*(CFTypeRef *)cf);
          }
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v9 = v15;
          goto LABEL_24;
        }
        v22 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          goto LABEL_24;
        v24 = v2[3];
        v23 = (char *)v2[4];
        v25 = (unint64_t)&v23[-v24];
        if ((unint64_t)&v23[-v24] >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v25 > 0x16)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          v26 = operator new(v28 + 1);
          *(_QWORD *)&buf[8] = &v23[-v24];
          *(_QWORD *)&buf[16] = v29 | 0x8000000000000000;
          *(_QWORD *)buf = v26;
        }
        else
        {
          buf[23] = (_BYTE)v23 - v24;
          v26 = buf;
        }
        if ((char *)v24 == v23)
        {
          v30 = v26;
        }
        else
        {
          if (v25 < 0x20 || (unint64_t)&v26[-v24] < 0x20)
          {
            v30 = v26;
            v31 = (char *)v24;
          }
          else
          {
            v30 = &v26[v25 & 0xFFFFFFFFFFFFFFE0];
            v31 = (char *)(v24 + (v25 & 0xFFFFFFFFFFFFFFE0));
            v32 = (__int128 *)(v24 + 16);
            v33 = v26 + 16;
            v34 = v25 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v35 = *v32;
              *(v33 - 1) = *(v32 - 1);
              *v33 = v35;
              v32 += 2;
              v33 += 2;
              v34 -= 32;
            }
            while (v34);
            if (v25 == (v25 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_70;
          }
          do
          {
            v36 = *v31++;
            *v30++ = v36;
          }
          while (v31 != v23);
        }
LABEL_70:
        *v30 = 0;
        v37 = buf;
        if (buf[23] < 0)
          v37 = *(_BYTE **)buf;
        *(_DWORD *)cf = 136315138;
        *(_QWORD *)&cf[4] = v37;
        _os_log_impl(&dword_227A72000, v22, OS_LOG_TYPE_DEFAULT, "#I Succeeded to send trace config: %s", cf, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
LABEL_24:
        MEMORY[0x22E2A36D0](&v38);
        v16 = v2[6];
        if (v16)
          dispatch_group_leave(v16);
        v17 = (const void *)v2[7];
        if (!v17 || !v2[8])
        {
          if (!v9)
          {
LABEL_48:
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            return;
          }
LABEL_47:
          CFRelease(v9);
          goto LABEL_48;
        }
        if (v9 && (CFRetain(v9), (v17 = (const void *)v2[7]) == 0))
          v18 = 0;
        else
          v18 = _Block_copy(v17);
        v19 = v2[8];
        *(_QWORD *)&v38 = MEMORY[0x24BDAC760];
        *((_QWORD *)&v38 + 1) = 1174405120;
        *(_QWORD *)&v39 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
        *((_QWORD *)&v39 + 1) = &__block_descriptor_tmp_30_1;
        if (v18)
        {
          v40[0] = _Block_copy(v18);
          v40[1] = v9;
          if (!v9)
            goto LABEL_39;
        }
        else
        {
          v40[0] = 0;
          v40[1] = v9;
          if (!v9)
          {
LABEL_39:
            dispatch_async(v19, &v38);
            if (v40[1])
              CFRelease(v40[1]);
            if (v40[0])
              _Block_release(v40[0]);
            if (v18)
              _Block_release(v18);
            if (!v9)
              goto LABEL_48;
            CFRelease(v9);
            goto LABEL_47;
          }
        }
        CFRetain(v9);
        goto LABEL_39;
      }
    }
  }
}

void sub_227AFC774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;
  const void *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  MEMORY[0x22E2A36D0](&a9);
  if (v27)
    CFRelease(v27);
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c193_ZTSNSt3__110shared_ptrIZN5trace19ARICommandDriverINT10sendConfigENS_6vectorIcNS_9allocatorIcEEEEN8dispatch5groupEbbiNS7_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c193_ZTSNSt3__110shared_ptrIZN5trace19ARICommandDriverINT10sendConfigENS_6vectorIcNS_9allocatorIcEEEEN8dispatch5groupEbbiNS7_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F039038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F039038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = a1[11];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[10];
  if (v3)
    _Block_release(v3);
  v4 = a1[9];
  if (v4)
    dispatch_release(v4);
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_227AFC9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNKS1_19ARICommandDriverINT9isStartedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t result)
{
  ***(_BYTE ***)(result + 40) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 120);
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNS1_19ARICommandDriverINT5startEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  result = ice::Client::start(*(ice::Client **)(*v1 + 104));
  *(_BYTE *)(v2 + 120) = 1;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>(trace::ARICommandDriverINT::stop(dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<trace::ARICommandDriverINT::stop(dispatch::group)::$_0,dispatch_queue_s *::default_delete<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  ice::Client *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  group object;

  v2 = *a1;
  v4 = **a1;
  v3 = (char *)(*a1)[1];
  v5 = *(ice::Client **)(v4 + 104);
  object.gr_name = v3;
  if (v3)
    dispatch_retain((dispatch_object_t)v3);
  ice::Client::stop(v5, &object);
  if (object.gr_name)
    dispatch_release((dispatch_object_t)object.gr_name);
  *(_BYTE *)(v4 + 120) = 0;
  v6 = v2[1];
  if (v6)
    dispatch_release(v6);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_227AFCAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (object)
  {
    dispatch_release(object);
    v13 = v11[1];
    if (!v13)
    {
LABEL_3:
      operator delete(v11);
      v14 = (std::__shared_weak_count *)v10[2];
      if (!v14)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v13 = v11[1];
    if (!v13)
      goto LABEL_3;
  }
  dispatch_release(v13);
  operator delete(v11);
  v14 = (std::__shared_weak_count *)v10[2];
  if (!v14)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_11:
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS4_13group_sessionEEEEEUb_E3__4vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t GMID;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  _OWORD v12[4];
  _DWORD *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    v3 = *v2;
    v13 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v12[2] = v4;
    v12[3] = v4;
    v12[0] = v4;
    v12[1] = v4;
    AriSdk::ARI_TraceOutputIdleInd_SDK::ARI_TraceOutputIdleInd_SDK((AriSdk::ARI_TraceOutputIdleInd_SDK *)v12, a2);
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v12);
    if ((ice::isARIResponseValid() & 1) != 0)
    {
      if (!AriSdk::ARI_TraceOutputIdleInd_SDK::unpack((AriSdk::ARI_TraceOutputIdleInd_SDK *)v12)
        && *v13 == 1)
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_227A72000, v6, OS_LOG_TYPE_DEFAULT, "#I Trace output idle indication Success", buf, 2u);
        }
        dispatch_group_leave(*(dispatch_group_t *)(v3 + 128));
        return MEMORY[0x22E2A3598](v12);
      }
      v11 = *(NSObject **)(v3 + 40);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        return MEMORY[0x22E2A3598](v12);
      *(_WORD *)buf = 0;
      v8 = "Error while unpacking trace output idle indication";
      v9 = v11;
      v10 = 2;
    }
    else
    {
      v7 = *(NSObject **)(v3 + 40);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        return MEMORY[0x22E2A3598](v12);
      *(_DWORD *)buf = 67109376;
      v15 = (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26);
      v16 = 1024;
      v17 = 1568702464;
      v8 = "Got unexpected message 0x%0x, expected trace output idle indication (0x%0x)";
      v9 = v7;
      v10 = 14;
    }
    _os_log_error_impl(&dword_227A72000, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    return MEMORY[0x22E2A3598](v12);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__4EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__4EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__4NS_9allocatorIS9_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24F039150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__4NS_9allocatorIS9_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24F039150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 2;
      strcpy(a2, "UI");
      break;
    case 1:
      a2[23] = 7;
      strcpy(a2, "ABMtool");
      break;
    case 2:
      a2[23] = 7;
      strcpy(a2, "Profile");
      break;
    case 3:
      a2[23] = 10;
      strcpy(a2, "24hr_Timer");
      break;
    default:
      a2[23] = 11;
      strcpy(a2, "UnSpecified");
      break;
  }
  return result;
}

void util::strip_non_printable(std::string *this)
{
  std::string *v1;
  std::string::size_type size;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v1 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (std::string *)((char *)v3 + size);
    v5 = size - 1;
    v6 = MEMORY[0x24BDAC740];
    while (1)
    {
      v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0)
        break;
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0)
        goto LABEL_15;
LABEL_8:
      v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4)
        goto LABEL_28;
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL))
      goto LABEL_8;
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      v9 = 1;
      v4 = v3;
      while (1)
      {
        v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL))
            goto LABEL_19;
        }
        else
        {
          v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0)
            goto LABEL_19;
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5)
          goto LABEL_28;
      }
    }
  }
  v4 = v3;
LABEL_28:
  v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = (char *)v1 + v12;
    v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0)
    v12 = v1->__r_.__value_.__l.__size_;
  v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      v1 = v14;
    }
    else
    {
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(char *)(result + 23);
  if (v1 >= 0)
    v2 = (_BYTE *)result;
  else
    v2 = *(_BYTE **)result;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(result + 23);
  else
    v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = MEMORY[0x24BDAC740];
    do
    {
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        result = __maskrune((char)*v2, 0x40000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
        result = __maskrune(v5, 0x4000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0)
          goto LABEL_10;
        result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0)
          goto LABEL_10;
      }
      *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  std::string::size_type v10;
  char *v11;
  uint64_t size;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  std::string *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  int v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;

  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = a1[23];
  v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (size >= v9)
  {
    v27 = (char *)v8 + size;
    v28 = *v11;
    v29 = v8;
    do
    {
      v30 = size - v9;
      if (v30 == -1)
        break;
      v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31)
        break;
      v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0)
                  v33 = v10;
                if (v33 < v13)
                  break;
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0)
                  v35 = a3;
                else
                  v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v36 = a1[23];
                if (v36 >= 0)
                  v37 = a1;
                else
                  v37 = *(char **)a1;
                if (v36 >= 0)
                  v38 = a1[23];
                else
                  v38 = *((_QWORD *)a1 + 1);
                if (v38)
                {
                  if (v34 >= 0)
                    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v39 = a3->__r_.__value_.__l.__size_;
                  if (v39 < v38)
                    return;
                  v40 = (char *)v35 + v39;
                  v41 = *v37;
                  v42 = v35;
                  while (1)
                  {
                    v43 = v39 - v38;
                    if (v43 == -1)
                      return;
                    v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44)
                      return;
                    v45 = v44;
                    if (!memcmp(v44, v37, v38))
                      break;
                    v42 = (std::string *)(v45 + 1);
                    v39 = v40 - (v45 + 1);
                    if (v39 < v38)
                      return;
                  }
                  if (v45 == v40)
                    return;
                  v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13)
                  break;
                std::string::__erase_external_with_move(a3, v13, v9);
                v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  v16 = a3;
                else
                  v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v17 = a1[23];
                if (v17 >= 0)
                  v18 = a1;
                else
                  v18 = *(char **)a1;
                if (v17 >= 0)
                  v19 = a1[23];
                else
                  v19 = *((_QWORD *)a1 + 1);
                if (v19)
                {
                  if (v15 >= 0)
                    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v20 = a3->__r_.__value_.__l.__size_;
                  if (v20 < v19)
                    return;
                  v21 = (char *)v16 + v20;
                  v22 = *v18;
                  v23 = v16;
                  while (1)
                  {
                    v24 = v20 - v19;
                    if (v24 == -1)
                      return;
                    v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25)
                      return;
                    v26 = v25;
                    if (!memcmp(v25, v18, v19))
                      break;
                    v23 = (std::string *)(v26 + 1);
                    v20 = v21 - (v26 + 1);
                    if (v20 < v19)
                      return;
                  }
                  if (v26 == v21)
                    return;
                  v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      v29 = (std::string *)(v32 + 1);
      size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_227AFD44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *util::strip_leading_trailing@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_26;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8 - 1;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_26;
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = -1;
      if ((v4 & 0x80) == 0)
        goto LABEL_28;
LABEL_24:
      if (v6 >= v13)
      {
        v4 = v6;
        v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8;
  if ((v4 & 0x80) != 0)
    goto LABEL_24;
LABEL_28:
  if (v13 > v4)
    goto LABEL_41;
LABEL_29:
  v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((_BYTE *)a3 + 23) = v16;
  if (v16)
LABEL_39:
    result = memmove(a3, (char *)v12 + v13, v16);
  *((_BYTE *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (char)v1;
  v3 = (_BYTE *)(result + v1);
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = (_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v2 >= 0)
    v5 = (_BYTE *)result;
  else
    v5 = *(_BYTE **)result;
  for (; v5 != v4; ++v5)
  {
    result = __toupper((char)*v5);
    *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size;
  char *v3;
  char *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type v15;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = (char *)a1;
  else
    v3 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_21;
  v4 = &v3[size];
  v5 = size - 1;
  v6 = MEMORY[0x24BDAC740];
  while (1)
  {
    v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL))
        break;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0)
      break;
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    v8 = 1;
    v4 = v3;
    while (1)
    {
      v9 = v3[v8];
      if ((v9 & 0x80000000) == 0)
        break;
      if (__maskrune(v9, 0x100uLL))
        goto LABEL_16;
LABEL_17:
      ++v8;
      if (!--v5)
        goto LABEL_22;
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0)
      goto LABEL_17;
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  v4 = v3;
LABEL_22:
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = a1->__r_.__value_.__r.__words[0];
  v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (char *)a1 + v10;
    v14 = a1;
  }
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(_BYTE *)(v12 + v15) = 0;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  const __CFAllocator *v4;
  __CFError *v5;
  __CFError *v6;
  uint64_t (*v7)(uint64_t);
  __CFError *v8;
  __CFReadStream *v9;
  uint64_t (*v10)(uint64_t);
  CFPropertyListRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  CFIndex Code;
  void **v15;
  void *__p[2];
  uint64_t v17;
  CFErrorRef error[4];
  uint8_t buf[24];
  void **v20;
  uint64_t v21;

  v2 = (const char *)a1;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v2, 0x8000100u);
  error[3] = v5;
  v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = CFReadStreamCreateWithFile(v4, v6);
  v9 = v8;
  error[1] = v8;
  v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
  if (!v8)
    v10 = 0;
  if (!v10
    || (CFReadStreamOpen(v8),
        error[0] = 0,
        v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error),
        *a2 = v11,
        CFReadStreamClose(v9),
        !error[0]))
  {
LABEL_16:
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFErrorGetDomain(error[0]);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  v17 = *(_QWORD *)&buf[16];
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
    v13 = qword_253DF25A0;
    if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_26:
    Code = CFErrorGetCode(error[0]);
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = Code;
    *(_WORD *)&buf[22] = 2080;
    v20 = v15;
    _os_log_error_impl(&dword_227A72000, v13, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    goto LABEL_13;
  }
  v13 = qword_253DF25A0;
  if (os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
    goto LABEL_26;
LABEL_13:
  CFRelease(error[0]);
  *a2 = 0;
  if (v11)
    CFRelease(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p[0]);
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_227AFDAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void util::moveDirContent(const void **a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int filtered_files;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int is_directory;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  NSObject *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *p_p;
  unsigned __int8 v62;
  NSObject *v63;
  void **v64;
  void **v65;
  char *v66;
  __int128 v67;
  int v68;
  size_t v69;
  unint64_t v70;
  std::string *p_buf;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  int v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  size_t v94;
  unint64_t v95;
  std::string *v96;
  NSObject *v97;
  int v98;
  size_t v99;
  unint64_t v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  char *v124;
  std::locale v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::string v131;
  void *v132[2];
  std::string::size_type v133;
  std::string __dst;
  std::string __p;
  std::locale v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  uint64_t v144;
  uint8_t v145[4];
  std::string *v146;
  __int16 v147;
  std::string *v148;
  std::string buf;
  std::string v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  std::locale::locale(&v136, (const std::locale *)a5);
  v137 = *(_OWORD *)(a5 + 8);
  v138 = *(_OWORD *)(a5 + 24);
  v8 = *(std::__shared_weak_count **)(a5 + 48);
  v139 = *(_QWORD *)(a5 + 40);
  v140 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v141 = *(_QWORD *)(a5 + 56);
  filtered_files = ctu::fs::get_filtered_files();
  v12 = v140;
  if (!v140)
    goto LABEL_8;
  v13 = (unint64_t *)&v140->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::locale::~locale(&v136);
    if (filtered_files)
    {
LABEL_9:
      v15 = v142;
      v124 = (char *)v143;
      if (v142 != (char *)v143)
      {
        if (a4)
        {
          while (1)
          {
            memset(&v150, 170, sizeof(v150));
            if (v15[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *(_OWORD *)v15;
              v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v16;
            }
            v17 = *((char *)a1 + 23);
            if (v17 >= 0)
              v18 = *((unsigned __int8 *)a1 + 23);
            else
              v18 = (size_t)a1[1];
            v19 = v18 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v18 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v19 >= 0x17)
            {
              v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17)
                v21 = v19 | 7;
              v22 = v21 + 1;
              p_dst = (std::string *)operator new(v21 + 1);
              __dst.__r_.__value_.__l.__size_ = v18 + 1;
              __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
              if (!v18)
                goto LABEL_30;
            }
            if (v17 >= 0)
              v23 = a1;
            else
              v23 = *a1;
            memmove(p_dst, v23, v18);
LABEL_30:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v150;
            else
              v24 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              size = v150.__r_.__value_.__l.__size_;
            v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            is_directory = ctu::fs::is_directory();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_38:
                if (is_directory)
                  goto LABEL_39;
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (is_directory)
            {
LABEL_39:
              v29 = *((char *)a1 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a1 + 23);
              else
                v30 = (size_t)a1[1];
              v31 = v30 + 1;
              memset(&__dst, 170, sizeof(__dst));
              if (v30 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 >= 0x17)
              {
                v39 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v39 = v31 | 7;
                v40 = v39 + 1;
                v32 = (std::string *)operator new(v39 + 1);
                __dst.__r_.__value_.__l.__size_ = v30 + 1;
                __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                v32 = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 1;
                if (!v30)
                  goto LABEL_65;
              }
              if (v29 >= 0)
                v41 = a1;
              else
                v41 = *a1;
              memmove(v32, v41, v30);
LABEL_65:
              *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v150;
              else
                v42 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v43 = v150.__r_.__value_.__l.__size_;
              v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              v46 = std::string::append(&__p, "/", 1uLL);
              v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              v133 = v46->__r_.__value_.__r.__words[2];
              *(_OWORD *)v132 = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v131 = *(std::string *)a2;
              std::locale::locale(&v125, (const std::locale *)a5);
              v126 = *(_OWORD *)(a5 + 8);
              v127 = *(_OWORD *)(a5 + 24);
              v48 = *(std::__shared_weak_count **)(a5 + 48);
              v128 = *(_QWORD *)(a5 + 40);
              v129 = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v130 = *(_QWORD *)(a5 + 56);
              util::moveDirContent(v132, &v131, a3, (a4 - 1), &v125);
              v51 = v129;
              if (!v129)
                goto LABEL_81;
              v52 = (unint64_t *)&v129->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
              }
              else
              {
LABEL_81:
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v133) & 0x80000000) == 0)
                    goto LABEL_83;
LABEL_88:
                  operator delete(v132[0]);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_84;
                  goto LABEL_89;
                }
              }
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v133) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
LABEL_48:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_253DF25A0 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v34 = qword_253DF25A0;
              if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
              v34 = qword_253DF25A0;
              if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            v35 = *((char *)a1 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)a1 + 23);
            else
              v36 = (size_t)a1[1];
            v37 = v36 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v37 >= 0x17)
            {
              v121 = v35;
              v54 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v54 = v37 | 7;
              v55 = v54 + 1;
              v38 = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v35 = v121;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_100;
            }
            if (v35 >= 0)
              v56 = a1;
            else
              v56 = *a1;
            memmove(v38, v56, v36);
LABEL_100:
            *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v150;
            else
              v57 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v58 = v150.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__dst, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
            _os_log_error_impl(&dword_227A72000, v34, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_84:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_90;
              goto LABEL_91;
            }
LABEL_89:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_91:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            v15 += 24;
            if (v15 == v124)
              goto LABEL_118;
          }
        }
        while (1)
        {
          memset(&v150, 170, sizeof(v150));
          if (v15[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v67 = *(_OWORD *)v15;
            v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v67;
          }
          memset(&__p, 170, sizeof(__p));
          v68 = *(char *)(a2 + 23);
          if (v68 >= 0)
            v69 = *(unsigned __int8 *)(a2 + 23);
          else
            v69 = *(_QWORD *)(a2 + 8);
          v70 = v69 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v69 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            p_buf = (std::string *)operator new(v72 + 1);
            buf.__r_.__value_.__l.__size_ = v69 + 1;
            buf.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            p_buf = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v69 + 1;
            if (!v69)
              goto LABEL_148;
          }
          if (v68 >= 0)
            v74 = (const void *)a2;
          else
            v74 = *(const void **)a2;
          memmove(p_buf, v74, v69);
LABEL_148:
          *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v69) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v150;
          else
            v75 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v76 = v150.__r_.__value_.__l.__size_;
          v77 = std::string::append(&buf, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          ctu::fs::get_unique_filename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_156:
          v79 = *((char *)a1 + 23);
          if (v79 >= 0)
            v80 = *((unsigned __int8 *)a1 + 23);
          else
            v80 = (size_t)a1[1];
          v81 = v80 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v80 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v81 >= 0x17)
          {
            v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v81 | 7) != 0x17)
              v83 = v81 | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            buf.__r_.__value_.__l.__size_ = v80 + 1;
            buf.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v82 = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v80 + 1;
            if (!v80)
              goto LABEL_170;
          }
          if (v79 >= 0)
            v85 = a1;
          else
            v85 = *a1;
          memmove(v82, v85, v80);
LABEL_170:
          *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v80) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v150;
          else
            v86 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v87 = v150.__r_.__value_.__l.__size_;
          v88 = std::string::append(&buf, (const std::string::value_type *)v86, v87);
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = ctu::fs::rename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_178:
              if ((v90 & 1) == 0)
                goto LABEL_193;
              goto LABEL_179;
            }
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_178;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v90 & 1) == 0)
          {
LABEL_193:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_253DF25A0 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v97 = qword_253DF25A0;
              if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
                goto LABEL_243;
LABEL_196:
              v98 = *((char *)a1 + 23);
              if (v98 >= 0)
                v99 = *((unsigned __int8 *)a1 + 23);
              else
                v99 = (size_t)a1[1];
              v100 = v99 + 1;
              memset(&buf, 170, sizeof(buf));
              if (v99 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 >= 0x17)
              {
                v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v111 = v100 | 7;
                v112 = v111 + 1;
                v101 = (std::string *)operator new(v111 + 1);
                buf.__r_.__value_.__l.__size_ = v99 + 1;
                buf.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                v101 = &buf;
                *((_BYTE *)&buf.__r_.__value_.__s + 23) = v99 + 1;
                if (!v99)
                  goto LABEL_230;
              }
              if (v98 >= 0)
                v113 = a1;
              else
                v113 = *a1;
              memmove(v101, v113, v99);
LABEL_230:
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v99) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &v150;
              else
                v114 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v115 = v150.__r_.__value_.__l.__size_;
              v116 = std::string::append(&buf, (const std::string::value_type *)v114, v115);
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              v118 = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v119 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v145 = 136315394;
              v146 = v118;
              v147 = 2080;
              v148 = v119;
              _os_log_error_impl(&dword_227A72000, v97, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v145, 0x16u);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_241:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_243;
                goto LABEL_242;
              }
LABEL_221:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_243;
LABEL_242:
              operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_243;
            }
            dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
            v97 = qword_253DF25A0;
            if (os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
              goto LABEL_196;
            goto LABEL_243;
          }
LABEL_179:
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_253DF25A0 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v92 = qword_253DF25A0;
            if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
              goto LABEL_243;
LABEL_182:
            v93 = *((char *)a1 + 23);
            if (v93 >= 0)
              v94 = *((unsigned __int8 *)a1 + 23);
            else
              v94 = (size_t)a1[1];
            v95 = v94 + 1;
            memset(&buf, 170, sizeof(buf));
            if (v94 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v95 >= 0x17)
            {
              v102 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v102 = v95 | 7;
              v103 = v102 + 1;
              v96 = (std::string *)operator new(v102 + 1);
              buf.__r_.__value_.__l.__size_ = v94 + 1;
              buf.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
            }
            else
            {
              memset(&buf, 0, sizeof(buf));
              v96 = &buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = v94 + 1;
              if (!v94)
                goto LABEL_210;
            }
            if (v93 >= 0)
              v104 = a1;
            else
              v104 = *a1;
            memmove(v96, v104, v94);
LABEL_210:
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v94) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v150;
            else
              v105 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v106 = v150.__r_.__value_.__l.__size_;
            v107 = std::string::append(&buf, (const std::string::value_type *)v105, v106);
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            v109 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v109 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v110 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v145 = 136315394;
            v146 = v109;
            v147 = 2080;
            v148 = v110;
            _os_log_impl(&dword_227A72000, v92, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v145, 0x16u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_241;
            goto LABEL_221;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
          v92 = qword_253DF25A0;
          if (os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
            goto LABEL_182;
LABEL_243:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
LABEL_247:
              operator delete(v150.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_247;
          }
          v15 += 24;
          if (v15 == v124)
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
  }
  else
  {
LABEL_8:
    std::locale::~locale(&v136);
    if (filtered_files)
      goto LABEL_9;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v63 = qword_253DF25A0;
    if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
    v63 = qword_253DF25A0;
    if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  v120 = (std::string::size_type)a1;
  if (*((char *)a1 + 23) < 0)
    v120 = (std::string::size_type)*a1;
  LODWORD(v150.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 4) = v120;
  _os_log_error_impl(&dword_227A72000, v63, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v150, 0xCu);
LABEL_118:
  if (a3)
    ctu::fs::remove_dir();
  v64 = (void **)v142;
  if (v142)
  {
    v65 = v143;
    v66 = v142;
    if (v143 != (void **)v142)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v142;
    }
    v143 = v64;
    operator delete(v66);
  }
}

void sub_227AFEBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  const char *v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *p_c;
  NSObject *v19;
  uint32_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  CC_SHA256_CTX c;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_253DF25A0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v16 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
      v16 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(c.count[0]) = 0;
    v17 = "dataIn Buffer is NULL";
    p_c = (uint8_t *)&c;
    v19 = v16;
    v20 = 2;
LABEL_20:
    _os_log_error_impl(&dword_227A72000, v19, OS_LOG_TYPE_ERROR, v17, p_c, v20);
    return;
  }
  v9 = v8;
  *(_QWORD *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v10;
  *(_OWORD *)&c.wbuf[10] = v10;
  *(_OWORD *)&c.hash[6] = v10;
  *(_OWORD *)&c.wbuf[2] = v10;
  *(_OWORD *)c.count = v10;
  *(_OWORD *)&c.hash[2] = v10;
  if (!ctu::fs::get_file_size())
    return;
  CC_SHA256_Init(&c);
  v11 = a1;
  if (a1[23] < 0)
    v11 = *(const char **)a1;
  v12 = open(v11, 0);
  if (v12 >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = read(v12, a2, a3);
      if (v14 == -1)
        break;
      CC_SHA256_Update(&c, a2, v14);
      v13 += v14;
      if (v13 >= 0xAAAAAAAAAAAAAAAALL)
        goto LABEL_24;
    }
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_253DF25A0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v28 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        CC_SHA256_Final(v9, &c);
        close(v12);
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
      v28 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
    }
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = *__error();
    v32 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v30;
    v38 = 1024;
    v39 = v31;
    v40 = 1024;
    v41 = v32;
    _os_log_error_impl(&dword_227A72000, v28, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
    goto LABEL_24;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v22 = qword_253DF25A0;
    if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
  v22 = qword_253DF25A0;
  if (os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v23 = __error();
    v24 = strerror(*v23);
    v25 = *__error();
    v26 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v24;
    v38 = 1024;
    v39 = v25;
    v40 = 1024;
    v41 = v26;
    v17 = "Failed to open: %s : %s (%d, 0x%x)";
    p_c = buf;
    v19 = v22;
    v20 = 34;
    goto LABEL_20;
  }
}

void sub_227AFF254(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_227AFF26C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_227AFF284(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_227AFF29C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_227AFF2B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x24BDAC8D0];
  v17 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_11:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_253DF25A0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v14 = qword_253DF25A0;
      result = os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
      v14 = qword_253DF25A0;
      result = os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315394;
    v19 = v1;
    v20 = 2080;
    *(_QWORD *)v21 = v16;
    v10 = "Failed to open %s : %s";
    v11 = v14;
    v12 = 22;
    goto LABEL_17;
  }
  v2 = open((const char *)*a1, 0);
  if (v2 < 0)
    goto LABEL_11;
LABEL_3:
  v3 = v2;
  v4 = ffsctl(v2, 0xC0084A44uLL, &v17, 0);
  close(v3);
  if (!v4)
    return 1;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_253DF25A0;
    result = os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_7:
      if (*((char *)v1 + 23) < 0)
        v1 = (uint64_t *)*v1;
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)buf = 136315906;
      v19 = v1;
      v20 = 1024;
      *(_DWORD *)v21 = v4;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = v9;
      v22 = 2048;
      v23 = v17;
      v10 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
      v11 = v6;
      v12 = 38;
LABEL_17:
      _os_log_error_impl(&dword_227A72000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
    v6 = qword_253DF25A0;
    result = os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_7;
  }
  return result;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  time_t v92;
  std::string v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  tm __p;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v99 = v4;
  v96 = 0;
  v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  v100 = 0;
  memset(v94, 0, sizeof(v94));
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::sub_match<const char *> *)a1;
  else
    v6 = *(std::sub_match<const char *> **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  v106 = v4;
  __p.tm_zone = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  v107 = 0;
  memset(&__p, 0, 41);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(_QWORD *)&__p.tm_sec)
  {
    *(_QWORD *)&__p.tm_hour = *(_QWORD *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99)
    v9 = 0;
  else
    v9 = v8;
  if (v9 != 1)
  {
    v21 = 0;
    v22 = *(void **)v94;
    if (!*(_QWORD *)v94)
      return v21;
LABEL_23:
    *(_QWORD *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  v10 = *(_QWORD *)v94;
  if (!*(_BYTE *)(*(_QWORD *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v94 + 24);
  v11 = *(char **)(*(_QWORD *)v94 + 32);
  v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    v14 = &v93;
    if ((char *)v12 != v11)
      goto LABEL_16;
LABEL_29:
    *v14 = 0;
    goto LABEL_33;
  }
  v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v24 = v13 | 7;
  v25 = v24 + 1;
  v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11)
    goto LABEL_29;
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    v15 = v14;
    v16 = (char *)v12;
  }
  else
  {
    v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v17 = (__int128 *)(v12 + 16);
    v18 = v14 + 16;
    v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_32;
  }
  do
  {
    v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(_BYTE *)(v10 + 64))
      goto LABEL_35;
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_45;
LABEL_35:
  v28 = *(_QWORD *)(v10 + 48);
  v27 = *(char **)(v10 + 56);
  v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    v30 = &v93;
    if ((char *)v28 != v27)
      goto LABEL_38;
LABEL_49:
    *v30 = 0;
    goto LABEL_53;
  }
  v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v37 = v29 | 7;
  v38 = v37 + 1;
  v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27)
    goto LABEL_49;
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    v31 = v30;
    v32 = (char *)v28;
  }
  else
  {
    v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    v33 = (__int128 *)(v28 + 16);
    v34 = v30 + 16;
    v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_52;
  }
  do
  {
    v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(_BYTE *)(v10 + 88))
      goto LABEL_55;
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_65;
LABEL_55:
  v41 = *(_QWORD *)(v10 + 72);
  v40 = *(char **)(v10 + 80);
  v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v42 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    v43 = &v93;
    if ((char *)v41 != v40)
      goto LABEL_58;
LABEL_69:
    *v43 = 0;
    goto LABEL_73;
  }
  v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v50 = v42 | 7;
  v51 = v50 + 1;
  v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40)
    goto LABEL_69;
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    v44 = v43;
    v45 = (char *)v41;
  }
  else
  {
    v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    v46 = (__int128 *)(v41 + 16);
    v47 = v43 + 16;
    v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_72;
  }
  do
  {
    v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC));
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 112))
      goto LABEL_75;
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 112))
    goto LABEL_85;
LABEL_75:
  v54 = *(_QWORD *)(v10 + 96);
  v53 = *(char **)(v10 + 104);
  v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    v56 = &v93;
    if ((char *)v54 != v53)
      goto LABEL_78;
LABEL_89:
    *v56 = 0;
    goto LABEL_93;
  }
  v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17)
    v63 = v55 | 7;
  v64 = v63 + 1;
  v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53)
    goto LABEL_89;
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    v57 = v56;
    v58 = (char *)v54;
  }
  else
  {
    v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    v59 = (__int128 *)(v54 + 16);
    v60 = v56 + 16;
    v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_92;
  }
  do
  {
    v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 136))
      goto LABEL_95;
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 136))
    goto LABEL_105;
LABEL_95:
  v67 = *(_QWORD *)(v10 + 120);
  v66 = *(char **)(v10 + 128);
  v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v68 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    v69 = &v93;
    if ((char *)v67 != v66)
      goto LABEL_98;
LABEL_109:
    *v69 = 0;
    goto LABEL_113;
  }
  v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17)
    v76 = v68 | 7;
  v77 = v76 + 1;
  v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66)
    goto LABEL_109;
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    v70 = v69;
    v71 = (char *)v67;
  }
  else
  {
    v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (__int128 *)(v67 + 16);
    v73 = v69 + 16;
    v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_112;
  }
  do
  {
    v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 160))
      goto LABEL_115;
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_125;
LABEL_115:
  v80 = *(_QWORD *)(v10 + 144);
  v79 = *(char **)(v10 + 152);
  v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v81 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    v82 = &v93;
    if ((char *)v80 != v79)
      goto LABEL_118;
LABEL_129:
    *v82 = 0;
    goto LABEL_133;
  }
  v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17)
    v89 = v81 | 7;
  v90 = v89 + 1;
  v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79)
    goto LABEL_129;
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    v83 = v82;
    v84 = (char *)v80;
  }
  else
  {
    v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (__int128 *)(v80 + 16);
    v86 = v82 + 16;
    v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_132;
  }
  do
  {
    v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_isdst = -1;
  v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  v22 = *(void **)v94;
  if (*(_QWORD *)v94)
    goto LABEL_23;
  return v21;
}

void sub_227AFFE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2)
{
  uint64_t result;
  const char *v5;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    result = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)result)
      goto LABEL_29;
    result = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)result)
      goto LABEL_29;
    result = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)result)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_31;
      goto LABEL_21;
    }
LABEL_28:
    result = 1;
LABEL_29:
    *a2 = result;
    return result;
  }
  v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  result = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)result)
    goto LABEL_29;
  result = strcasecmp(v5, "off");
  if (!(_DWORD)result)
    goto LABEL_29;
  result = strcasecmp(v5, "no");
  if (!(_DWORD)result)
    goto LABEL_29;
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_31:
    result = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background"))
    goto LABEL_31;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  result = std::stol(a1, &__idx, 10);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx == size && result >= (uint64_t)0xFFFFFFFF80000000 && result <= 0x7FFFFFFF)
    goto LABEL_29;
  return result;
}

void sub_227B000A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  int v6;
  size_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  void **v11;
  const void *v12;
  char *v13;
  std::string *v14;
  timespec v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  DIR *v21;
  DIR *v22;
  dirent *v23;
  _DWORD *v24;
  void **v28;
  void *v29;
  _DWORD *v30;
  char *v34;
  uint64_t v35;
  int v36;
  int v38;
  size_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 *v47;
  void *__dst[3];
  std::string v49;
  stat v50;

  *a3 = 0;
  a3[1] = 0;
  v46 = a3;
  a3[2] = 0;
  v3 = *a2;
  v47 = a2[1];
  if (v3 == v47)
    return;
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *((char *)a1 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a1 + 23);
    else
      v7 = (size_t)a1[1];
    v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7)
        goto LABEL_20;
LABEL_16:
      if (v6 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7)
      goto LABEL_16;
LABEL_20:
    v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0)
        v14 = &v49;
      else
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespec = v15;
    *(timespec *)&v50.st_size = v15;
    v50.st_mtimespec = v15;
    v50.st_ctimespec = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespec = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0)
      v16 = (const char *)__dst;
    else
      v16 = (const char *)__dst[0];
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (v20 = (const char *)__dst) : (v20 = (const char *)__dst[0]),
          v21 = opendir(v20),
          (v22 = v21) == 0))
    {
      v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    v23 = readdir(v21);
    closedir(v22);
    v17 = HIBYTE(__dst[2]);
    if (v23)
      break;
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    v3 = (__int128 *)((char *)v3 + 24);
    if (v3 == v47)
      return;
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u)
      goto LABEL_99;
    v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 108)
      goto LABEL_79;
    if (*v24 == 1935962413 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 115)
      goto LABEL_79;
    if (*v24 == 1634296877 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 103)
      goto LABEL_79;
    if (HIBYTE(__dst[2]) < 9u)
      goto LABEL_99;
    v28 = __dst;
    v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  v29 = __dst[1];
  if (__dst[1] < (void *)5)
    goto LABEL_99;
  v28 = (void **)__dst[0];
  v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9)
LABEL_99:
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    v34 = (char *)v28 + (_QWORD)v29;
    v35 = *(_QWORD *)(v34 - 9);
    v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101)
      goto LABEL_79;
    goto LABEL_30;
  }
LABEL_79:
  v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v39 = v49.__r_.__value_.__l.__size_;
  v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(_QWORD *)&v50.st_uid = v43 | 0x8000000000000000;
    *(_QWORD *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39)
      goto LABEL_93;
  }
  if (v38 >= 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  v45 = v46;
  *v46 = *(_OWORD *)&v50.st_dev;
  *((_QWORD *)v45 + 2) = *(_QWORD *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0)
      return;
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_97;
}

void sub_227B00534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  const void **v6;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  const void **v12;
  std::string *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL8 v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  std::string *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  int v34;
  size_t size;
  int v36;
  size_t v37;
  unint64_t v38;
  void **v39;
  const void *v40;
  char *v41;
  std::string *v42;
  void **v43;
  uint64_t v44;
  int v45;
  void *v46;
  char *v47;
  void **v48;
  char *v49;
  unsigned __int8 v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  NSObject *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void **v64;
  void **v65;
  void *v66;
  std::string *v68;
  void *v69;
  char *v70;
  char *v71;
  std::string v72;
  std::locale v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::string v79;
  std::string v80;
  _BYTE v81[48];
  __int128 v82;
  void *v83;
  char *v84;
  uint64_t v85;
  void *__dst[4];
  void *__p[76];

  __p[73] = *(void **)MEMORY[0x24BDAC8D0];
  v83 = 0;
  v84 = 0;
  v85 = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v81[32] = v2;
  v82 = v2;
  *(_OWORD *)v81 = v2;
  *(_OWORD *)&v81[16] = v2;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  memset(&v80, 170, sizeof(v80));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v80.__r_.__value_.__l.__size_ = v4 + 2;
    v80.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *v11 = 10798;
    v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v80.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v4 + 2;
    v8 = &v80.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = v6;
  else
    v12 = (const void **)*v6;
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  v13 = std::string::append(&v80, ".*", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v81, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    v79 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v73, (const std::locale *)v81);
  v74 = *(_OWORD *)&v81[8];
  v75 = *(_OWORD *)&v81[24];
  v76 = *(_QWORD *)&v81[40];
  v77 = (std::__shared_weak_count *)v82;
  if ((_QWORD)v82)
  {
    v15 = (unint64_t *)(v82 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v78 = *((_QWORD *)&v82 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)&v79, (uint64_t)&v73, (uint64_t)&v83, 0);
  v18 = v77;
  if (!v77)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v77->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::locale::~locale(&v73);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (FilteredFiles)
        goto LABEL_31;
LABEL_35:
      v21 = 0;
      goto LABEL_124;
    }
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v73);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v79.__r_.__value_.__l.__data_);
  if (!FilteredFiles)
    goto LABEL_35;
LABEL_31:
  memset(&v80, 170, sizeof(v80));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v72 = *(std::string *)a1;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v22 = (char *)v83;
  v23 = v84;
  __p[0] = &v69;
  __p[1] = (void *)0xAAAAAAAAAAAAAA00;
  v24 = v84 - (_BYTE *)v83;
  if (v84 != v83)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
    if (v25 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v26 = (char *)operator new(v24);
    v27 = 0;
    v69 = v26;
    v70 = v26;
    v71 = &v26[24 * v25];
    do
    {
      v29 = (std::string *)&v26[v27];
      v30 = &v22[v27];
      if (v22[v27 + 23] < 0)
      {
        std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
      }
      else
      {
        v28 = *(_OWORD *)v30;
        v29->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v28;
      }
      v27 += 24;
    }
    while (&v22[v27] != v23);
    v70 = &v26[v27];
  }
  util::findBasebandLogInfoFile((const void **)&v72.__r_.__value_.__l.__data_, (__int128 **)&v69, &v80);
  v31 = (void **)v69;
  if (v69)
  {
    v32 = (void **)v70;
    v33 = v69;
    if (v70 != v69)
    {
      do
      {
        if (*((char *)v32 - 1) < 0)
          operator delete(*(v32 - 3));
        v32 -= 3;
      }
      while (v32 != v31);
      v33 = v69;
    }
    v70 = (char *)v31;
    operator delete(v33);
  }
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v34 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      size = v80.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_58;
LABEL_105:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_253DF25A0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v56 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_111;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
      v56 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_111;
    }
    if (*((char *)v6 + 23) < 0)
      v6 = (const void **)*v6;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v6;
    _os_log_impl(&dword_227A72000, v56, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
LABEL_111:
    v21 = 0;
    if ((v34 & 0x80) != 0)
      goto LABEL_123;
    goto LABEL_124;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  v34 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    size = v80.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_105;
LABEL_58:
  memset(__p, 170, 0x240uLL);
  v36 = *(char *)(a1 + 23);
  if (v36 >= 0)
    v37 = *(unsigned __int8 *)(a1 + 23);
  else
    v37 = *(_QWORD *)(a1 + 8);
  v38 = v37 + size;
  memset(__dst, 170, 24);
  if (v37 + size > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v38 <= 0x16)
  {
    memset(__dst, 0, 24);
    v39 = __dst;
    HIBYTE(__dst[2]) = v37 + size;
    if (!v37)
      goto LABEL_68;
    goto LABEL_64;
  }
  v57 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v38 | 7) != 0x17)
    v57 = v38 | 7;
  v58 = v57 + 1;
  v39 = (void **)operator new(v57 + 1);
  __dst[1] = (void *)(v37 + size);
  __dst[2] = (void *)(v58 | 0x8000000000000000);
  __dst[0] = v39;
  if (v37)
  {
LABEL_64:
    if (v36 >= 0)
      v40 = (const void *)a1;
    else
      v40 = *(const void **)a1;
    memmove(v39, v40, v37);
  }
LABEL_68:
  v41 = (char *)v39 + v37;
  if (v34 >= 0)
    v42 = &v80;
  else
    v42 = (std::string *)v80.__r_.__value_.__r.__words[0];
  memmove(v41, v42, size);
  v41[size] = 0;
  std::ifstream::basic_ifstream(__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17])
      goto LABEL_73;
LABEL_118:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_253DF25A0 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v60 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
      {
LABEL_121:
        v21 = 0;
        goto LABEL_122;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
      v60 = qword_253DF25A0;
      if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_ERROR))
        goto LABEL_121;
    }
    v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if (v34 >= 0)
      v68 = &v80;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v68;
    _os_log_error_impl(&dword_227A72000, v60, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    goto LABEL_121;
  }
  if (!__p[17])
    goto LABEL_118;
LABEL_73:
  std::istream::seekg();
  memset(__dst, 170, 24);
  v43 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  v44 = HIBYTE(__dst[2]);
  v45 = SHIBYTE(__dst[2]);
  v46 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    v44 = (uint64_t)__dst[1];
    v43 = (void **)__dst[0];
  }
  v47 = (char *)v43 + v44;
  if (v44 >= 35)
  {
    v48 = v43;
    do
    {
      v49 = (char *)memchr(v48, 98, v44 - 34);
      if (!v49)
        break;
      if (*(_QWORD *)v49 == 0x6320676F6C206262
        && *((_QWORD *)v49 + 1) == 0x6F697463656C6C6FLL
        && *((_QWORD *)v49 + 2) == 0x20726F66202D206ELL
        && *((_QWORD *)v49 + 3) == 0x6E67616964737973
        && *(_QWORD *)(v49 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_93;
      }
      v48 = (void **)(v49 + 1);
      v44 = v47 - (char *)v48;
    }
    while (v47 - (char *)v48 > 34);
  }
  v49 = v47;
LABEL_93:
  v21 = v49 != v47 && v49 - (char *)v43 != -1;
  if (v45 < 0)
    operator delete(v46);
LABEL_122:
  __p[0] = *(void **)MEMORY[0x24BEDB7E0];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2A466C](&__p[2]);
  std::istream::~istream();
  MEMORY[0x22E2A47D4](&__p[53]);
  if ((*((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_123:
    operator delete(v80.__r_.__value_.__l.__data_);
LABEL_124:
  v61 = (std::__shared_weak_count *)v82;
  if ((_QWORD)v82)
  {
    v62 = (unint64_t *)(v82 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  std::locale::~locale((std::locale *)v81);
  v64 = (void **)v83;
  if (v83)
  {
    v65 = (void **)v84;
    v66 = v83;
    if (v84 != v83)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v83;
    }
    v84 = (char *)v64;
    operator delete(v66);
  }
  return v21;
}

void sub_227B00E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_227B00EF8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,...)
{
  std::locale v27;
  va_list va;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  va_list va1;

  va_start(va1, a26);
  va_start(va, a26);
  v27.__locale_ = va_arg(va1, std::locale::__imp *);
  v29 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  v32 = va_arg(va1, _QWORD);
  v33 = va_arg(va1, _QWORD);
  v34 = va_arg(va1, _QWORD);
  v35 = va_arg(va1, _QWORD);
  v36 = va_arg(va1, _QWORD);
  std::vector<std::string>::~vector[abi:ne180100](&a3);
  if (a11 < 0)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)va);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_227B00F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a47);
  JUMPOUT(0x227B00FC8);
}

void sub_227B00F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,...)
{
  va_list va;

  va_start(va, a35);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a10);
  if (a23 < 0)
    JUMPOUT(0x227B00F28);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a27);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B00F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_227B00FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_227B00FB4()
{
  uint64_t v0;
  uint64_t v1;

  for (; v1; v1 -= 24)
  {
    if (*(char *)(v0 + v1 - 1) < 0)
      operator delete(*(void **)(v0 + v1 - 24));
  }
  JUMPOUT(0x227B00FC0);
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  const void **v34;
  __int128 v35;
  int64_t size;
  std::string::size_type v37;
  int v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  int64_t v42;
  __int128 v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  const char *v57;
  __int128 *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  std::sub_match<std::__wrap_iter<const char *>> *v66;
  char *v67;
  int v68;
  std::string *v69;
  int64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  size_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 isDumpForSysdiagnose;
  unsigned __int8 v88;
  NSObject *v89;
  std::string *v90;
  char v91;
  char v92;
  int64_t v93;
  std::string *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  unsigned int v111;
  char *v113;
  const void **v115;
  std::string *v116;
  BOOL v117;
  std::locale v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  unint64_t v127;
  std::vector<std::ssub_match> v128[2];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::locale v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  void *__p[2];
  unint64_t v145;
  _BYTE v146[48];
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  void *v150[3];
  const void **v151;
  const void **v152;
  uint64_t v153;
  __int128 __dst;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;

  v8 = a3;
  v10 = a6;
  v163 = *MEMORY[0x24BDAC8D0];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  memset(v150, 170, sizeof(v150));
  v11 = strlen(__s);
  v116 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    *(_QWORD *)v155 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  v155[7] = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v150[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v150 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v18;
  v149 = v18;
  *(_OWORD *)v148 = v18;
  *(_OWORD *)&v148[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)v150, 0);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v146[32] = v19;
  v147 = v19;
  *(_OWORD *)v146 = v19;
  *(_OWORD *)&v146[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v146, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  v117 = a5 == 0;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v145 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v145) = v20;
  v22 = __p;
  if (v20)
LABEL_18:
    memcpy(v22, this, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  std::locale::locale(&v138, (const std::locale *)v148);
  v139 = *(_OWORD *)&v148[8];
  v140 = *(_OWORD *)&v148[24];
  v141 = *(_QWORD *)&v148[40];
  v142 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v25 = (unint64_t *)(v149 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v143 = *((_QWORD *)&v149 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v138, (uint64_t)&v151, 0);
  v28 = v142;
  if (!v142)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_27:
      if (!FilteredFiles)
        goto LABEL_176;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_26:
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!FilteredFiles)
    goto LABEL_176;
LABEL_31:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v152 - v151));
  if (v152 == v151)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((uint64_t)v151, v152, v33, 1, v31);
  memset(&v137, 0, sizeof(v137));
  v34 = v151;
  v115 = v152;
  if (v151 == v152)
  {
LABEL_176:
    if (!v8)
      goto LABEL_196;
LABEL_177:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    else
      v124 = *v10;
    std::locale::locale(&v118, (const std::locale *)v146);
    v119 = *(_OWORD *)&v146[8];
    v120 = *(_OWORD *)&v146[24];
    v121 = *(_QWORD *)&v146[40];
    v122 = (std::__shared_weak_count *)v147;
    if ((_QWORD)v147)
    {
      v96 = (unint64_t *)(v147 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v123 = *((_QWORD *)&v147 + 1);
    v98 = util::checkLogFileAge((uint64_t)&v124, v8, (uint64_t)&v118);
    v99 = v122;
    if (!v122)
      goto LABEL_187;
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        if (!v98)
          goto LABEL_196;
LABEL_192:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_196;
      }
    }
    else
    {
LABEL_187:
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_188;
    }
    operator delete(v124.__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_196;
    goto LABEL_192;
  }
  v111 = v8;
  v113 = a5;
  while (1)
  {
    memset(&v136, 170, sizeof(v136));
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, (const std::string::value_type *)*v34, (std::string::size_type)v34[1]);
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v34[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v35;
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      size = v137.__r_.__value_.__l.__size_;
    v37 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    v38 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
    v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v137;
      else
        v40 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v136;
      else
        v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v42 = v136.__r_.__value_.__l.__size_;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if (v42 >= size)
      {
        v67 = (char *)v41 + v42;
        v68 = v40->__r_.__value_.__s.__data_[0];
        v69 = v41;
        do
        {
          v70 = v42 - size;
          if (v70 == -1)
            break;
          v71 = (char *)memchr(v69, v68, v70 + 1);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, v40, size))
          {
            if (v72 == v67 || v72 - (char *)v41 == -1)
              break;
            v65 = 3;
            v10 = v116;
            if ((v38 & 0x80) == 0)
              goto LABEL_155;
            goto LABEL_109;
          }
          v69 = (std::string *)(v72 + 1);
          v42 = v67 - (v72 + 1);
        }
        while (v42 >= size);
      }
    }
    *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134 = v43;
    v131 = 0xAAAAAAAAAAAAAA00;
    v128[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v129 = 0;
    v130 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE8(v134) = 0;
    v135 = 0;
    memset(v128, 0, 41);
    if (v117)
    {
      v44 = v136.__r_.__value_.__l.__size_;
      v161 = v43;
      v158 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&v155[24] = v43;
      v156 = 0;
      v157 = 0;
      v159 = 0;
      v160 = 0;
      LOBYTE(v161) = 0;
      BYTE8(v161) = 0;
      v162 = 0;
      __dst = 0uLL;
      *(_OWORD *)v155 = 0uLL;
      if (v38 >= 0)
        v45 = (std::sub_match<const char *> *)&v136;
      else
        v45 = (std::sub_match<const char *> *)v39;
      if (v38 >= 0)
        v44 = v37;
      *(_OWORD *)&v155[9] = 0uLL;
      v10 = v116;
      v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)&__dst, 0);
      v47 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v136;
      else
        v48 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v136.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v128, (uint64_t)v48, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v48 + v47), (uint64_t *)&__dst, 0);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v46)
      {
        p_end_cap = &v128[1].__end_cap_;
        if (v128[0].__end_ != v128[0].__begin_)
          p_end_cap = &v128[0].__begin_->matched;
        if (!*p_end_cap)
        {
          __dst = 0uLL;
          *(_QWORD *)v155 = 0;
          if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_104;
        }
        begin = (std::vector<std::ssub_match>::pointer)&v128[1];
        if (v128[0].__end_ != v128[0].__begin_)
          begin = v128[0].__begin_;
        i = begin->first.__i_;
        p_i = &v128[0].__begin_->second.__i_;
        if (v128[0].__end_ == v128[0].__begin_)
          p_i = (const char **)&v128[1].__end_;
        v53 = *p_i;
        v54 = *p_i - i;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v54 > 0x16)
        {
          v79 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v79 = v54 | 7;
          v80 = v79 + 1;
          v55 = (__int128 *)operator new(v79 + 1);
          *((_QWORD *)&__dst + 1) = v54;
          *(_QWORD *)v155 = v80 | 0x8000000000000000;
          *(_QWORD *)&__dst = v55;
          if (i != v53)
          {
LABEL_77:
            if (v54 < 0x20 || (unint64_t)((char *)v55 - i) < 0x20)
            {
              v56 = v55;
              v57 = i;
            }
            else
            {
              v56 = (__int128 *)((char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0));
              v57 = &i[v54 & 0xFFFFFFFFFFFFFFE0];
              v58 = (__int128 *)(i + 16);
              v59 = v55 + 1;
              v60 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v61 = *v58;
                *(v59 - 1) = *(v58 - 1);
                *v59 = v61;
                v58 += 2;
                v59 += 2;
                v60 -= 32;
              }
              while (v60);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_118:
                *(_BYTE *)v56 = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_119:
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                  v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                  if (!a4)
                    goto LABEL_146;
                  goto LABEL_120;
                }
LABEL_104:
                operator delete(v116->__r_.__value_.__l.__data_);
                *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                if (!a4)
                  goto LABEL_146;
LABEL_120:
                v82 = strlen((const char *)this);
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v83 = (void *)v82;
                if (v82 >= 0x17)
                {
                  v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v85 = v82 | 7;
                  v86 = v85 + 1;
                  v84 = operator new(v85 + 1);
                  v126[1] = v83;
                  v127 = v86 | 0x8000000000000000;
                  v126[0] = v84;
                }
                else
                {
                  HIBYTE(v127) = v82;
                  v84 = v126;
                  if (!v82)
                  {
                    LOBYTE(v126[0]) = 0;
                    if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_124:
                      v125 = *v116;
LABEL_130:
                      isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v126, (uint64_t)&v125);
                      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v125.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v127) & 0x80000000) == 0)
                        {
LABEL_132:
                          if (isDumpForSysdiagnose)
                          {
LABEL_133:
                            if ((v88 & 1) == 0
                            {
                              GetOsLogContext(void)::sOsLogContext = 0;
                              qword_253DF25A0 = 0;
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
                            }
                            if (GetOsLogContext(void)::onceToken == -1)
                            {
                              v89 = qword_253DF25A0;
                              if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            else
                            {
                              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
                              v89 = qword_253DF25A0;
                              if (!os_log_type_enabled((os_log_t)qword_253DF25A0, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            if ((v116->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v90 = v116;
                            else
                              v90 = (std::string *)v116->__r_.__value_.__r.__words[0];
                            LODWORD(__dst) = 136315138;
                            *(_QWORD *)((char *)&__dst + 4) = v90;
                            _os_log_impl(&dword_227A72000, v89, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
LABEL_140:
                            if (&v137 != v116)
                            {
                              v91 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                              {
                                if (v91 >= 0)
                                  v94 = v116;
                                else
                                  v94 = (std::string *)v116->__r_.__value_.__r.__words[0];
                                if (v91 >= 0)
                                  v95 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                                else
                                  v95 = v116->__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>((void **)&v137.__r_.__value_.__l.__data_, v94, v95);
                              }
                              else
                              {
                                if ((*((_BYTE *)&v116->__r_.__value_.__s + 23) & 0x80) == 0)
                                {
                                  v137 = *v116;
LABEL_169:
                                  v65 = 0;
                                  v116->__r_.__value_.__s.__data_[0] = 0;
                                  *((_BYTE *)&v116->__r_.__value_.__s + 23) = 0;
                                  goto LABEL_151;
                                }
                                std::string::__assign_no_alias<true>(&v137, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                              }
                            }
                            if (SHIBYTE(v116->__r_.__value_.__r.__words[2]) < 0)
                            {
                              v65 = 0;
                              *v116->__r_.__value_.__l.__data_ = 0;
                              v116->__r_.__value_.__l.__size_ = 0;
                              goto LABEL_151;
                            }
                            goto LABEL_169;
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((SHIBYTE(v127) & 0x80000000) == 0)
                      {
                        goto LABEL_132;
                      }
                      operator delete(v126[0]);
                      if (isDumpForSysdiagnose)
                        goto LABEL_133;
LABEL_146:
                      v65 = 2;
LABEL_151:
                      v92 = 1;
LABEL_152:
                      v117 = v92;
                      v66 = v128[0].__begin_;
                      if (v128[0].__begin_)
                        goto LABEL_153;
                      goto LABEL_154;
                    }
LABEL_129:
                    std::string::__init_copy_ctor_external(&v125, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                    goto LABEL_130;
                  }
                }
                memcpy(v84, this, (size_t)v83);
                *((_BYTE *)v83 + (_QWORD)v84) = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_124;
                goto LABEL_129;
              }
            }
            do
            {
              v81 = *v57++;
              *(_BYTE *)v56 = v81;
              v56 = (__int128 *)((char *)v56 + 1);
            }
            while (v57 != v53);
            goto LABEL_118;
          }
        }
        else
        {
          v155[7] = *(_BYTE *)p_i - (_BYTE)i;
          v55 = &__dst;
          if (i != v53)
            goto LABEL_77;
        }
        *(_BYTE *)v55 = 0;
        if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_104;
      }
LABEL_150:
      v65 = 0;
      goto LABEL_151;
    }
    if (v38 >= 0)
      v39 = &v136;
    v62 = strlen(v113);
    v10 = v116;
    if (!v62)
    {
LABEL_149:
      std::string::__assign_external(&v137, v113);
      goto LABEL_150;
    }
    v63 = v62;
    v64 = v136.__r_.__value_.__l.__size_;
    if (v38 >= 0)
      v64 = v37;
    if (v64 >= v62)
    {
      v73 = (char *)v39 + v64;
      v74 = *v113;
      v75 = v39;
      do
      {
        v76 = v64 - v63;
        if (v76 == -1)
          break;
        v77 = (char *)memchr(v75, v74, v76 + 1);
        if (!v77)
          break;
        v78 = v77;
        if (!memcmp(v77, v113, v63))
        {
          v92 = 0;
          if (v78 != v73)
          {
            v93 = v78 - (char *)v39;
            v65 = 0;
            if (v93 == -1)
              goto LABEL_152;
            goto LABEL_149;
          }
          v65 = 0;
          v117 = 0;
          v66 = v128[0].__begin_;
          if (v128[0].__begin_)
            goto LABEL_153;
          goto LABEL_154;
        }
        v75 = (std::string *)(v78 + 1);
        v64 = v73 - (v78 + 1);
      }
      while (v64 >= v63);
    }
    v65 = 0;
    v117 = 0;
    v66 = v128[0].__begin_;
    if (v128[0].__begin_)
    {
LABEL_153:
      v128[0].__end_ = v66;
      operator delete(v66);
    }
LABEL_154:
    if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
LABEL_155:
    if (v65 != 3)
      goto LABEL_156;
LABEL_36:
    v34 += 3;
    if (v34 == v115)
      goto LABEL_175;
  }
LABEL_109:
  operator delete(v136.__r_.__value_.__l.__data_);
  if (v65 == 3)
    goto LABEL_36;
LABEL_156:
  if (!v65)
    goto LABEL_36;
LABEL_175:
  v8 = v111;
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_176;
  operator delete(v137.__r_.__value_.__l.__data_);
  if (v111)
    goto LABEL_177;
LABEL_196:
  v102 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v103 = (unint64_t *)(v147 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      std::locale::~locale((std::locale *)v146);
      v105 = (std::__shared_weak_count *)v149;
      if ((_QWORD)v149)
        goto LABEL_201;
      goto LABEL_204;
    }
  }
  std::locale::~locale((std::locale *)v146);
  v105 = (std::__shared_weak_count *)v149;
  if (!(_QWORD)v149)
    goto LABEL_204;
LABEL_201:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_204:
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
LABEL_205:
      operator delete(v150[0]);
  }
  v108 = v151;
  if (v151)
  {
    v109 = v152;
    v110 = v151;
    if (v152 != v151)
    {
      do
      {
        if (*((char *)v109 - 1) < 0)
          operator delete((void *)*(v109 - 3));
        v109 -= 3;
      }
      while (v109 != v108);
      v110 = v151;
    }
    v152 = v108;
    operator delete(v110);
  }
}

void sub_227B01CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::sub_match<const char *> *v39;
  std::sub_match<const char *> *v40;
  _BYTE *v41;
  __int128 *v42;
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  const char *second;
  std::sub_match<const char *> *first;
  int v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  _BYTE *v53;
  uint64_t *v54;
  uint64_t v55;
  char **v56;
  char *v57;
  unint64_t v58;
  _OWORD *v59;
  _BYTE *v60;
  char *v61;
  __int128 *v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  void *v66;
  void **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  unint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const void **v150;
  void **v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const void **v155;
  void **v156;
  void **v157;
  void **v158;
  uint64_t v159;
  int v160;
  std::sub_match<const char *> *v161;
  float v162;
  _BOOL8 v163;
  unint64_t v164;
  unint64_t v165;
  size_t prime;
  void *v167;
  void *v168;
  uint64_t v169;
  _QWORD **v170;
  size_t v171;
  size_t v172;
  size_t v173;
  _QWORD *i;
  size_t v175;
  uint64_t v176;
  unint64_t v177;
  uint8x8_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  size_t v187;
  uint64_t v188;
  std::sub_match<const char *> **v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void **v198;
  void *v199;
  void **v200;
  void **v201;
  void *v202;
  void **v204;
  char *v205;
  uint64_t *v206;
  std::__compressed_pair<std::csub_match *> *v207;
  __int128 *v208;
  _BYTE *v209;
  std::sub_match<const char *> *v210;
  std::sub_match<const char *> *v211;
  _QWORD *v212;
  uint64_t *v213;
  void *v214[2];
  unint64_t v215;
  std::locale v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::string v222;
  std::locale v223[2];
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _BYTE v227[48];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  void *v232;
  std::sub_match<const char *> *v233;
  uint64_t v234;
  std::vector<std::csub_match> __p[2];
  uint64_t v236;
  _BYTE v237[32];
  uint64_t v238;
  _BYTE __dst[56];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v229 = 0u;
  v230 = 0u;
  v231 = 0xAAAAAAAA3F800000;
  v4 = (char *)operator new(0x48uLL);
  v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v227[32] = v6;
  v228 = v6;
  *(_OWORD *)v227 = v6;
  *(_OWORD *)&v227[16] = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 64;
  memset(__dst, 170, 24);
  v205 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  v10 = operator new(v11 + 1);
  *(_QWORD *)&__dst[8] = v8 + 64;
  *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
  *(_QWORD *)__dst = v10;
  if (v8)
    goto LABEL_10;
LABEL_14:
  v14 = &v10[v8];
  v15 = *(_OWORD *)v5;
  v16 = *((_OWORD *)v5 + 1);
  v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v227, (uint64_t)__p, 0);
  if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
  {
    operator delete(__p[0].__begin_);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v225 = v20;
  v226 = v20;
  v224 = v20;
  *(_OWORD *)&v223[0].__locale_ = v20;
  v21 = *((char *)a2 + 23);
  if (v21 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = (size_t)a2[1];
  v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  *(_QWORD *)&__dst[8] = v22 + 64;
  *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
  *(_QWORD *)__dst = v24;
  if (v22)
    goto LABEL_25;
LABEL_29:
  v28 = &v24[v22];
  v29 = *(_OWORD *)v5;
  v30 = *((_OWORD *)v5 + 1);
  v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v223, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[0].__end_cap_.__value_) & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(__p[0].__begin_);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_36;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v222 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v216, (const std::locale *)v227);
  v217 = *(_OWORD *)&v227[8];
  v218 = *(_OWORD *)&v227[24];
  v219 = *(_QWORD *)&v227[40];
  v220 = (std::__shared_weak_count *)v228;
  if ((_QWORD)v228)
  {
    v34 = (unint64_t *)(v228 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v221 = *((_QWORD *)&v228 + 1);
  support::fs::getFilteredFiles((const char *)&v222, (uint64_t)&v216, (uint64_t)&v232, 0);
  v36 = v220;
  if (!v220)
    goto LABEL_45;
  p_shared_owners = (unint64_t *)&v220->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    std::locale::~locale(&v216);
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_46:
      v40 = (std::sub_match<const char *> *)v232;
      v39 = v233;
      if (v232 == v233)
        goto LABEL_234;
      goto LABEL_50;
    }
  }
  else
  {
LABEL_45:
    std::locale::~locale(&v216);
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(v222.__r_.__value_.__l.__data_);
  v40 = (std::sub_match<const char *> *)v232;
  v39 = v233;
  if (v232 == v233)
    goto LABEL_234;
LABEL_50:
  v41 = &__dst[48];
  v42 = &v241;
  p_end_cap = &__p[1].__end_cap_;
  v213 = &v236;
  v211 = (std::sub_match<const char *> *)&v230;
  v212 = v237;
  v206 = (uint64_t *)&__dst[24];
  v209 = &__dst[48];
  v210 = v39;
  v207 = &__p[1].__end_cap_;
  v208 = &v241;
  while (2)
  {
    *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v241 = v44;
    v242 = v44;
    *(_OWORD *)&__dst[40] = v44;
    v240 = v44;
    *(_QWORD *)v41 = 0;
    *((_QWORD *)v41 + 1) = 0;
    v41[16] = 0;
    *(_QWORD *)v42 = 0;
    *((_QWORD *)v42 + 1) = 0;
    *((_BYTE *)v42 + 16) = 0;
    BYTE8(v242) = 0;
    v243 = 0;
    memset(__dst, 0, 41);
    *(_OWORD *)&p_end_cap[4].__value_ = v44;
    *(_OWORD *)&p_end_cap[6].__value_ = v44;
    *(_OWORD *)&p_end_cap->__value_ = v44;
    *(_OWORD *)&p_end_cap[2].__value_ = v44;
    v45 = v213;
    *v213 = 0;
    v45[1] = 0;
    *((_BYTE *)v45 + 16) = 0;
    v46 = v212;
    *v212 = 0;
    v46[1] = 0;
    *((_BYTE *)v46 + 16) = 0;
    v237[24] = 0;
    v238 = 0;
    memset(__p, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v40->matched + 7);
    if ((char)second >= 0)
      first = v40;
    else
      first = (std::sub_match<const char *> *)v40->first;
    if ((char)second < 0)
      second = v40->second;
    v49 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v223, first, (std::sub_match<const char *> *)&second[(_QWORD)first], __p, 0);
    v50 = (const char *)*((unsigned __int8 *)&v40->matched + 7);
    if ((char)v50 >= 0)
      v51 = (uint64_t)v40;
    else
      v51 = (uint64_t)v40->first;
    if ((char)v50 < 0)
      v50 = v40->second;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v51, (std::sub_match<std::__wrap_iter<const char *>> *)&v50[v51], (uint64_t *)__p, 0);
    if (__p[0].__begin_)
    {
      __p[0].__end_ = __p[0].__begin_;
      operator delete(__p[0].__begin_);
    }
    v52 = *(void **)__dst;
    if (!v49)
      goto LABEL_232;
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v53 = &__dst[40];
    else
      v53 = (_BYTE *)(*(_QWORD *)__dst + 16);
    if (!*v53)
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v214[0] = 0;
      v214[1] = 0;
      v215 = 0;
      goto LABEL_90;
    }
    v54 = v206;
    if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      v54 = *(uint64_t **)__dst;
    v55 = *v54;
    v56 = (char **)(*(_QWORD *)__dst + 8);
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v56 = (char **)&__dst[32];
    v57 = *v56;
    v58 = (unint64_t)&(*v56)[-v55];
    if (v58 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v58 > 0x16)
    {
      v69 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v58 | 7) != 0x17)
        v69 = v58 | 7;
      v70 = v69 + 1;
      v59 = operator new(v69 + 1);
      v214[1] = (void *)v58;
      v215 = v70 | 0x8000000000000000;
      v214[0] = v59;
      if ((char *)v55 != v57)
        goto LABEL_76;
LABEL_86:
      v60 = v59;
      goto LABEL_89;
    }
    HIBYTE(v215) = *(_BYTE *)v56 - v55;
    v59 = v214;
    if ((char *)v55 == v57)
      goto LABEL_86;
LABEL_76:
    if (v58 < 0x20 || (unint64_t)v59 - v55 < 0x20)
    {
      v60 = v59;
      v61 = (char *)v55;
    }
    else
    {
      v60 = (char *)v59 + (v58 & 0xFFFFFFFFFFFFFFE0);
      v61 = (char *)(v55 + (v58 & 0xFFFFFFFFFFFFFFE0));
      v62 = (__int128 *)(v55 + 16);
      v63 = v59 + 1;
      v64 = v58 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v65 = *v62;
        *(v63 - 1) = *(v62 - 1);
        *v63 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 32;
      }
      while (v64);
      if (v58 == (v58 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_89;
    }
    do
    {
      v71 = *v61++;
      *v60++ = v71;
    }
    while (v61 != v57);
LABEL_89:
    *v60 = 0;
    v68 = HIBYTE(v215);
    v67 = (void **)v214[0];
    v66 = v214[1];
LABEL_90:
    if ((v68 & 0x80u) == 0)
      v72 = v214;
    else
      v72 = v67;
    if ((v68 & 0x80u) == 0)
      v73 = v68;
    else
      v73 = (unint64_t)v66;
    if (v73 > 0x20)
    {
      if (v73 <= 0x40)
      {
        if ((v68 & 0x80u) == 0)
          v67 = v214;
        v77 = (char *)v67[3];
        v78 = *(uint64_t *)((char *)v72 + v73 - 16);
        v79 = (uint64_t)*v72 - 0x3C5A37A36834CED9 * v78 + 0xC3A5C85C97CB3127 * v73;
        v80 = __ROR8__(&v77[v79], 52);
        v82 = (char *)v67[1];
        v81 = (char *)v67[2];
        v83 = &v82[v79];
        v84 = __ROR8__(v83, 7);
        v85 = &v81[(_QWORD)v83];
        v86 = v84
            + __ROR8__((char *)*v72 - 0x3C5A37A36834CED9 * v78 + 0xC3A5C85C97CB3127 * v73, 37)
            + v80
            + __ROR8__(v85, 31);
        v87 = &v81[*(_QWORD *)((char *)v72 + v73 - 32)];
        v88 = &v77[*(_QWORD *)((char *)v72 + v73 - 8)];
        v89 = __ROR8__(&v87[(_QWORD)v88], 52);
        v90 = __ROR8__(v87, 37);
        v91 = &v87[*(_QWORD *)((char *)v72 + v73 - 24)];
        v92 = __ROR8__(v91, 7);
        v93 = &v91[v78];
        v94 = &v88[(_QWORD)v93];
        v95 = &v77[v90 + v92 + v89 + __ROR8__(v93, 31) + (_QWORD)v85];
        v96 = 0x9AE16A3B2F90404FLL;
        v97 = v86
            - 0x3C5A37A36834CED9
            * ((0xC3A5C85C97CB3127 * (_QWORD)&v94[v86] - 0x651E95C4D06FBFB1 * (_QWORD)v95) ^ ((0xC3A5C85C97CB3127
                                                                                                 * (unint64_t)&v94[v86]
                                                                                                 - 0x651E95C4D06FBFB1
                                                                                                 * (_QWORD)v95) >> 47));
        goto LABEL_108;
      }
      v104 = *(uint64_t *)((char *)v72 + v73 - 48);
      v105 = *(uint64_t *)((char *)v72 + v73 - 40);
      v106 = *(uint64_t *)((char *)v72 + v73 - 24);
      v107 = *(uint64_t *)((char *)v72 + v73 - 56);
      v108 = *(uint64_t *)((char *)v72 + v73 - 16);
      v109 = *(uint64_t *)((char *)v72 + v73 - 8);
      v110 = v107 + v108;
      v111 = 0x9DDFEA08EB382D69
           * (v106 ^ ((0x9DDFEA08EB382D69 * (v106 ^ (v104 + v73))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                             * (v106 ^ (v104 + v73))));
      v112 = 0x9DDFEA08EB382D69 * (v111 ^ (v111 >> 47));
      v113 = *(char **)((char *)v72 + v73 - 64) + v73;
      v114 = &v113[v104 + v107];
      v115 = &v114[v105];
      v116 = (uint64_t)&v113[__ROR8__(v114, 44) + __ROR8__(&v113[v105 + v112], 21)];
      v117 = *(uint64_t *)((char *)v72 + v73 - 32) + v107 + v108 - 0x4B6D499041670D8DLL;
      v118 = v106 + v108 + v117;
      v119 = v118 + v109;
      v120 = __ROR8__(v118, 44) + v117 + __ROR8__(v117 + v105 + v109, 21);
      v121 = v72 + 4;
      v122 = (uint64_t)*v72 - 0x4B6D499041670D8DLL * v105;
      v123 = -(uint64_t)((v73 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v124 = *(v121 - 3);
        v125 = &v115[v122 + v110 + v124];
        v126 = v121[2];
        v127 = v121[3];
        v128 = v121[1];
        v110 = (unint64_t)&v115[v128 + 0xB492B66FBE98F273 * __ROR8__(v110 + v116 + v126, 42)];
        v129 = v112 + v119;
        v130 = *(v121 - 2);
        v131 = *(v121 - 1);
        v132 = *(v121 - 4) - 0x4B6D499041670D8DLL * v116;
        v133 = v132 + v119 + v131;
        v134 = v132 + v124 + v130;
        v115 = (char *)(v134 + v131);
        v135 = __ROR8__(v134, 44) + v132;
        v136 = (0xB492B66FBE98F273 * __ROR8__(v125, 37)) ^ v120;
        v122 = 0xB492B66FBE98F273 * __ROR8__(v129, 33);
        v116 = v135 + __ROR8__(v133 + v136, 21);
        v137 = v122 + v120 + *v121;
        v119 = v128 + v126 + v137 + v127;
        v120 = __ROR8__(v128 + v126 + v137, 44) + v137 + __ROR8__(v110 + v130 + v137 + v127, 21);
        v121 += 8;
        v112 = v136;
        v123 += 64;
      }
      while (v123);
      v138 = 0x9DDFEA08EB382D69
           * (v120 ^ ((0x9DDFEA08EB382D69 * (v120 ^ v116)) >> 47) ^ (0x9DDFEA08EB382D69 * (v120 ^ v116)));
      v139 = v122 - 0x622015F714C7D297 * (v138 ^ (v138 >> 47));
      v140 = 0x9DDFEA08EB382D69
           * (v139 ^ (v136
                    - 0x4B6D499041670D8DLL * (v110 ^ (v110 >> 47))
                    - 0x622015F714C7D297
                    * ((0x9DDFEA08EB382D69
                      * (v119 ^ ((0x9DDFEA08EB382D69 * (v119 ^ (unint64_t)v115)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v119 ^ (unint64_t)v115)))) ^ ((0x9DDFEA08EB382D69 * (v119 ^ ((0x9DDFEA08EB382D69 * (v119 ^ (unint64_t)v115)) >> 47) ^ (0x9DDFEA08EB382D69 * (v119 ^ (unint64_t)v115)))) >> 47))));
      v76 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v139 ^ (v140 >> 47) ^ v140)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v139 ^ (v140 >> 47) ^ v140)) >> 47));
    }
    else
    {
      if (v73 > 0x10)
      {
        v98 = 0xB492B66FBE98F273 * (_QWORD)*v72;
        if ((v68 & 0x80u) == 0)
          v67 = v214;
        v99 = (unint64_t)v67[1];
        v100 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)v72 + v73 - 8), 30)
             + __ROR8__(v98 - v99, 43)
             - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)v72 + v73 - 16);
        v101 = v98
             + v73
             + __ROR8__(v99 ^ 0xC949D7C7509E6557, 20)
             - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)v72 + v73 - 8);
        v102 = v100 ^ v101;
        v96 = 0x9DDFEA08EB382D69;
        v103 = v101 ^ ((0x9DDFEA08EB382D69 * v102) >> 47) ^ (0x9DDFEA08EB382D69 * v102);
        goto LABEL_107;
      }
      if (v73 >= 9)
      {
        v74 = *(uint64_t *)((char *)v72 + v73 - 8);
        v75 = __ROR8__(v74 + v73, v73);
        v76 = (0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v75 ^ ((0x9DDFEA08EB382D69 * (v75 ^ (unint64_t)*v72)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v75 ^ (unint64_t)*v72)))) ^ ((0x9DDFEA08EB382D69 * (v75 ^ ((0x9DDFEA08EB382D69 * (v75 ^ (unint64_t)*v72)) >> 47) ^ (0x9DDFEA08EB382D69 * (v75 ^ (unint64_t)*v72)))) >> 47))) ^ v74;
        goto LABEL_112;
      }
      if (v73 >= 4)
      {
        v180 = *(unsigned int *)((char *)v72 + v73 - 4);
        v96 = 0x9DDFEA08EB382D69;
        v181 = 0x9DDFEA08EB382D69 * ((v73 + (8 * *(_DWORD *)v72)) ^ v180);
        v103 = v180 ^ (v181 >> 47) ^ v181;
LABEL_107:
        v97 = 0x9DDFEA08EB382D69 * v103;
LABEL_108:
        v76 = (v97 ^ (v97 >> 47)) * v96;
        goto LABEL_112;
      }
      v76 = 0x9AE16A3B2F90404FLL;
      if (v73)
      {
        v183 = (0xC949D7C7509E6557 * (v73 + 4 * *((unsigned __int8 *)v72 + v73 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                           * (*(unsigned __int8 *)v72 | ((unint64_t)*((unsigned __int8 *)v72 + (v73 >> 1)) << 8)));
        v76 = 0x9AE16A3B2F90404FLL * (v183 ^ (v183 >> 47));
      }
    }
LABEL_112:
    v141 = *((_QWORD *)&v229 + 1);
    if (!*((_QWORD *)&v229 + 1))
    {
      v143 = 0xAAAAAAAAAAAAAAAALL;
LABEL_155:
      __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAA01;
      v161 = (std::sub_match<const char *> *)operator new(0x28uLL);
      __p[0].__begin_ = v161;
      __p[0].__end_ = v211;
      v161->first = 0;
      v161->second = (const char *)v76;
      *(_OWORD *)&v161->matched = *(_OWORD *)v214;
      v161[1].second = (const char *)v215;
      v214[0] = 0;
      v214[1] = 0;
      v215 = 0;
      v162 = (float)(unint64_t)(*((_QWORD *)&v230 + 1) + 1);
      if (v141 && (float)(*(float *)&v231 * (float)v141) >= v162)
      {
        v76 = v143;
        v41 = v209;
        v39 = v210;
        goto LABEL_220;
      }
      v163 = (v141 & (v141 - 1)) != 0;
      if (v141 < 3)
        v163 = 1;
      v164 = v163 | (2 * v141);
      v165 = vcvtps_u32_f32(v162 / *(float *)&v231);
      if (v164 <= v165)
        prime = v165;
      else
        prime = v164;
      if (prime == 1)
      {
        prime = 2;
        v41 = v209;
        v39 = v210;
      }
      else
      {
        v41 = v209;
        v39 = v210;
        if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v141 = *((_QWORD *)&v229 + 1);
        }
      }
      if (prime <= v141)
      {
        if (prime >= v141)
          goto LABEL_208;
        v177 = vcvtps_u32_f32((float)*((unint64_t *)&v230 + 1) / *(float *)&v231);
        if (v141 < 3 || (v178 = (uint8x8_t)vcnt_s8((int8x8_t)v141), v178.i16[0] = vaddlv_u8(v178), v178.u32[0] > 1uLL))
        {
          v177 = std::__next_prime(v177);
        }
        else
        {
          v179 = 1 << -(char)__clz(v177 - 1);
          if (v177 >= 2)
            v177 = v179;
        }
        if (prime <= v177)
          prime = v177;
        if (prime >= v141)
        {
          v141 = *((_QWORD *)&v229 + 1);
          v185 = *((_QWORD *)&v229 + 1) - 1;
          if ((*((_QWORD *)&v229 + 1) & (*((_QWORD *)&v229 + 1) - 1)) != 0)
          {
LABEL_218:
            if (v76 >= v141)
              v76 %= v141;
LABEL_220:
            v188 = v229;
            v189 = *(std::sub_match<const char *> ***)(v229 + 8 * v76);
            if (v189)
            {
              v161->first = (const char *)*v189;
            }
            else
            {
              v161->first = (const char *)v230;
              *(_QWORD *)&v230 = v161;
              *(_QWORD *)(v188 + 8 * v76) = v211;
              if (!v161->first)
                goto LABEL_229;
              v190 = *((_QWORD *)v161->first + 1);
              if ((v141 & (v141 - 1)) != 0)
              {
                if (v190 >= v141)
                  v190 %= v141;
              }
              else
              {
                v190 &= v141 - 1;
              }
              v189 = (std::sub_match<const char *> **)(v229 + 8 * v190);
            }
            *v189 = v161;
LABEL_229:
            ++*((_QWORD *)&v230 + 1);
            if ((v215 & 0x8000000000000000) != 0)
              goto LABEL_230;
            goto LABEL_231;
          }
LABEL_209:
          v76 &= v185;
          goto LABEL_220;
        }
        if (!prime)
        {
          v184 = (void *)v229;
          *(_QWORD *)&v229 = 0;
          if (v184)
            operator delete(v184);
          v141 = 0;
          *((_QWORD *)&v229 + 1) = 0;
          v185 = -1;
          goto LABEL_209;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v167 = operator new(8 * prime);
      v168 = (void *)v229;
      *(_QWORD *)&v229 = v167;
      if (v168)
        operator delete(v168);
      v169 = 0;
      *((_QWORD *)&v229 + 1) = prime;
      do
        *(_QWORD *)(v229 + 8 * v169++) = 0;
      while (prime != v169);
      v170 = (_QWORD **)v230;
      if (!(_QWORD)v230)
      {
LABEL_217:
        v141 = prime;
        v185 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_218;
        goto LABEL_209;
      }
      v171 = *(_QWORD *)(v230 + 8);
      v172 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v173 = v171 & v172;
        *(_QWORD *)(v229 + 8 * v173) = v211;
        for (i = *v170; *v170; i = *v170)
        {
          v175 = i[1] & v172;
          if (v175 == v173)
          {
            v170 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(v229 + 8 * v175))
          {
            *v170 = (_QWORD *)*i;
            v176 = 8 * v175;
            *i = **(_QWORD **)(v229 + v176);
            **(_QWORD **)(v229 + v176) = i;
          }
          else
          {
            *(_QWORD *)(v229 + 8 * v175) = v170;
            v170 = (_QWORD **)i;
            v173 = v175;
          }
        }
        goto LABEL_217;
      }
      if (v171 < prime)
      {
        *(_QWORD *)(v229 + 8 * v171) = v211;
        v182 = *v170;
        if (*v170)
          goto LABEL_212;
        goto LABEL_207;
      }
      v171 %= prime;
      *(_QWORD *)(v229 + 8 * v171) = v211;
      v182 = *v170;
      if (!*v170)
      {
LABEL_207:
        v141 = prime;
LABEL_208:
        v185 = v141 - 1;
        if ((v141 & (v141 - 1)) != 0)
          goto LABEL_218;
        goto LABEL_209;
      }
      while (1)
      {
LABEL_212:
        v187 = v182[1];
        if (v187 >= prime)
          v187 %= prime;
        if (v187 == v171)
          goto LABEL_211;
        if (*(_QWORD *)(v229 + 8 * v187))
        {
          *v170 = (_QWORD *)*v182;
          v186 = 8 * v187;
          *v182 = **(_QWORD **)(v229 + v186);
          **(_QWORD **)(v229 + v186) = v182;
          v182 = v170;
LABEL_211:
          v170 = (_QWORD **)v182;
          v182 = (_QWORD *)*v182;
          if (!v182)
            goto LABEL_217;
        }
        else
        {
          *(_QWORD *)(v229 + 8 * v187) = v170;
          v170 = (_QWORD **)v182;
          v182 = (_QWORD *)*v182;
          v171 = v187;
          if (!v182)
            goto LABEL_217;
        }
      }
    }
    v142 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v229 + 8));
    v142.i16[0] = vaddlv_u8(v142);
    if (v142.u32[0] > 1uLL)
    {
      v143 = v76;
      if (v76 >= *((_QWORD *)&v229 + 1))
        v143 = v76 % *((_QWORD *)&v229 + 1);
    }
    else
    {
      v143 = (*((_QWORD *)&v229 + 1) - 1) & v76;
    }
    v144 = *(uint64_t ***)(v229 + 8 * v143);
    if (!v144)
      goto LABEL_155;
    v145 = *v144;
    if (!*v144)
      goto LABEL_155;
    if (v142.u32[0] < 2uLL)
    {
      v146 = *((_QWORD *)&v229 + 1) - 1;
      while (1)
      {
        v152 = v145[1];
        if (v152 == v76)
        {
          v153 = *((unsigned __int8 *)v145 + 39);
          if ((v153 & 0x80u) == 0)
            v154 = *((unsigned __int8 *)v145 + 39);
          else
            v154 = v145[3];
          if (v154 == v73)
          {
            v155 = (const void **)(v145 + 2);
            if ((v153 & 0x80) != 0)
            {
              v157 = v72;
              v158 = v72;
              v159 = v146;
              v160 = memcmp(*v155, v157, v145[3]);
              v146 = v159;
              v72 = v158;
              if (!v160)
                goto LABEL_153;
            }
            else
            {
              if (!*((_BYTE *)v145 + 39))
                goto LABEL_153;
              v156 = v72;
              while (*(unsigned __int8 *)v155 == *(unsigned __int8 *)v156)
              {
                v155 = (const void **)((char *)v155 + 1);
                v156 = (void **)((char *)v156 + 1);
                if (!--v153)
                  goto LABEL_153;
              }
            }
          }
        }
        else if ((v152 & v146) != v143)
        {
          goto LABEL_155;
        }
        v145 = (uint64_t *)*v145;
        if (!v145)
          goto LABEL_155;
      }
    }
    while (1)
    {
      v147 = v145[1];
      if (v147 == v76)
        break;
      if (v147 >= v141)
        v147 %= v141;
      if (v147 != v143)
        goto LABEL_155;
LABEL_123:
      v145 = (uint64_t *)*v145;
      if (!v145)
        goto LABEL_155;
    }
    v148 = *((unsigned __int8 *)v145 + 39);
    if ((v148 & 0x80u) == 0)
      v149 = *((unsigned __int8 *)v145 + 39);
    else
      v149 = v145[3];
    if (v149 != v73)
      goto LABEL_123;
    v150 = (const void **)(v145 + 2);
    if ((v148 & 0x80) == 0)
    {
      if (!*((_BYTE *)v145 + 39))
        goto LABEL_153;
      v151 = v72;
      while (*(unsigned __int8 *)v150 == *(unsigned __int8 *)v151)
      {
        v150 = (const void **)((char *)v150 + 1);
        v151 = (void **)((char *)v151 + 1);
        if (!--v148)
          goto LABEL_153;
      }
      goto LABEL_123;
    }
    if (memcmp(*v150, v72, v145[3]))
      goto LABEL_123;
LABEL_153:
    v41 = v209;
    v39 = v210;
    if ((v68 & 0x80) != 0)
LABEL_230:
      operator delete(v214[0]);
LABEL_231:
    v52 = *(void **)__dst;
    p_end_cap = v207;
    v42 = v208;
LABEL_232:
    if (v52)
    {
      *(_QWORD *)&__dst[8] = v52;
      operator delete(v52);
    }
    if (++v40 != v39)
      continue;
    break;
  }
LABEL_234:
  v191 = *((_QWORD *)&v230 + 1);
  v192 = (std::__shared_weak_count *)v226;
  if ((_QWORD)v226)
  {
    v193 = (unint64_t *)(v226 + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  std::locale::~locale(v223);
  v195 = (std::__shared_weak_count *)v228;
  if ((_QWORD)v228)
  {
    v196 = (unint64_t *)(v228 + 8);
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  std::locale::~locale((std::locale *)v227);
  operator delete(v205);
  v198 = (void **)v230;
  if ((_QWORD)v230)
  {
    do
    {
      v204 = (void **)*v198;
      if (*((char *)v198 + 39) < 0)
        operator delete(v198[2]);
      operator delete(v198);
      v198 = v204;
    }
    while (v204);
  }
  v199 = (void *)v229;
  *(_QWORD *)&v229 = 0;
  if (v199)
    operator delete(v199);
  v200 = (void **)v232;
  if (v232)
  {
    v201 = (void **)v233;
    v202 = v232;
    if (v233 != v232)
    {
      do
      {
        if (*((char *)v201 - 1) < 0)
          operator delete(*(v201 - 3));
        v201 -= 3;
      }
      while (v201 != v200);
      v202 = v232;
    }
    v233 = (std::sub_match<const char *> *)v200;
    operator delete(v202);
  }
  return v191;
}

void sub_227B03250(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_227B03258()
{
  __cxa_end_catch();
  JUMPOUT(0x227B03260);
}

void sub_227B03280(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::sub_match<const char *> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  __int128 v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::__wrap_iter<const char *>::iterator_type i;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  _BYTE *v20;
  __int128 *v21;
  BOOL *p_matched;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  std::sub_match<const char *> *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<std::ssub_match>::pointer v39;
  std::vector<std::ssub_match>::pointer v40;
  __int128 v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  std::__wrap_iter<const char *>::iterator_type v43;
  unint64_t v44;
  std::sub_match<const char *> *v45;
  std::sub_match<const char *> *v46;
  _BYTE *v47;
  __int128 *v48;
  BOOL *v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *__p;
  char *v77;
  unint64_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::locale v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::vector<std::ssub_match> v86[2];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::vector<std::csub_match> v94[2];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = 0xAAAAAAAAAAAAAA00;
  v86[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v92 = v5;
  v87 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  v93 = 0;
  memset(v86, 0, 41);
  v84 = v5;
  v85 = v5;
  *(_OWORD *)&v82[0].__locale_ = v5;
  v83 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v82, a3, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  v100 = v6;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  BYTE8(v100) = 0;
  v101 = 0;
  memset(v94, 0, 32);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::sub_match<const char *> *)a1;
  else
    v8 = *(std::sub_match<const char *> **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v94, 0);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v94, 0);
  if (v94[0].__begin_)
  {
    v94[0].__end_ = v94[0].__begin_;
    operator delete(v94[0].__begin_);
  }
  if (v9)
  {
    end = v86[0].__end_;
    begin = v86[0].__begin_;
    if (v86[0].__begin_ != v86[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v94, 0, 24);
          v25 = v80;
          if ((unint64_t)v80 >= v81)
            goto LABEL_38;
          goto LABEL_16;
        }
        i = begin->first.__i_;
        v15 = begin->second.__i_;
        v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v17 > 0x16)
        {
          v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v26 = v17 | 7;
          v27 = v26 + 1;
          v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v94[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v94[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            v25 = v80;
            if ((unint64_t)v80 >= v81)
              goto LABEL_38;
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          v18 = (std::sub_match<const char *> *)v94;
          if (i == v15)
            goto LABEL_33;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20)
          break;
        v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        v21 = (__int128 *)(i + 16);
        p_matched = &v18->matched;
        v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_36;
LABEL_37:
        LOBYTE(v19->first) = 0;
        v25 = v80;
        if ((unint64_t)v80 >= v81)
        {
LABEL_38:
          v80 = std::vector<std::string>::__push_back_slow_path<std::string>(&v79, (uint64_t)v94);
          if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
            operator delete(v94[0].__begin_);
          goto LABEL_17;
        }
LABEL_16:
        v14 = *(_OWORD *)&v94[0].__begin_;
        *((_QWORD *)v25 + 2) = v94[0].__end_cap_.__value_;
        *(_OWORD *)v25 = v14;
        v80 = v25 + 24;
LABEL_17:
        if (++begin == end)
          goto LABEL_40;
      }
      v19 = v18;
      v20 = i;
      do
      {
LABEL_36:
        v28 = *v20++;
        LOBYTE(v19->first) = v28;
        v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    v29 = (char *)v79;
    v30 = v80;
    if (v80 - (_BYTE *)v79 != 24)
    {
      if ((char *)v79 + 24 != v80)
      {
        v31 = (char *)v79 + 23;
        do
        {
          v32 = (void **)(v31 - 23);
          if (*v31 < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)(v31 + 1);
          *(_QWORD *)(v31 - 7) = *(_QWORD *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        v30 = v80;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0)
          operator delete(*((void **)v30 - 3));
        v30 -= 24;
      }
      v80 = v29;
    }
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v97 = 0xAAAAAAAAAAAAAA00;
    v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v100 = v33;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    v99 = 0;
    LOBYTE(v100) = 0;
    BYTE8(v100) = 0;
    v101 = 0;
    memset(v94, 0, 32);
    v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = (std::sub_match<const char *> *)a2;
    else
      v35 = *(std::sub_match<const char *> **)a2;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
    v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v94, 0);
    v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = a2;
    else
      v38 = *(_QWORD *)a2;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(a2 + 8);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v94, 0);
    if (v94[0].__begin_)
    {
      v94[0].__end_ = v94[0].__begin_;
      operator delete(v94[0].__begin_);
    }
    if (v36)
    {
      v40 = v86[0].__end_;
      v39 = v86[0].__begin_;
      if (v86[0].__begin_ != v86[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v94, 0, 24);
            v52 = v77;
            if ((unint64_t)v77 >= v78)
              goto LABEL_89;
            goto LABEL_67;
          }
          v43 = v39->first.__i_;
          v42 = v39->second.__i_;
          v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v44 > 0x16)
          {
            v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v53 = v44 | 7;
            v54 = v53 + 1;
            v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v94[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v94[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              v52 = v77;
              if ((unint64_t)v77 >= v78)
                goto LABEL_89;
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            v45 = (std::sub_match<const char *> *)v94;
            if (v43 == v42)
              goto LABEL_84;
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20)
            break;
          v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          v48 = (__int128 *)(v43 + 16);
          v49 = &v45->matched;
          v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_87;
LABEL_88:
          LOBYTE(v46->first) = 0;
          v52 = v77;
          if ((unint64_t)v77 >= v78)
          {
LABEL_89:
            v77 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v94);
            if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
              operator delete(v94[0].__begin_);
            goto LABEL_68;
          }
LABEL_67:
          v41 = *(_OWORD *)&v94[0].__begin_;
          *((_QWORD *)v52 + 2) = v94[0].__end_cap_.__value_;
          *(_OWORD *)v52 = v41;
          v77 = v52 + 24;
LABEL_68:
          if (++v39 == v40)
            goto LABEL_91;
        }
        v46 = v45;
        v47 = v43;
        do
        {
LABEL_87:
          v55 = *v47++;
          LOBYTE(v46->first) = v55;
          v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      v57 = (char *)__p;
      v56 = v77;
      if (v77 - (_BYTE *)__p == 24)
      {
        v58 = (char *)v79;
        v59 = v80;
        v60 = 1;
        if (v79 != v80)
          goto LABEL_117;
LABEL_105:
        if (v57)
          goto LABEL_106;
LABEL_134:
        v64 = (char *)v79;
        if (v79)
          goto LABEL_135;
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v77)
      {
        v61 = (char *)__p + 23;
        do
        {
          v62 = (void **)(v61 - 23);
          if (*v61 < 0)
            operator delete(*v62);
          *(_OWORD *)v62 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v61 - 7) = *(_QWORD *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        v56 = v77;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0)
          operator delete(*((void **)v56 - 3));
        v56 -= 24;
      }
      v77 = v57;
      v57 = (char *)__p;
      v58 = (char *)v79;
      v59 = v80;
      v60 = 1;
      if (v79 == v80)
        goto LABEL_105;
      while (1)
      {
LABEL_117:
        v66 = v58[23];
        if ((v66 & 0x80u) == 0)
          v67 = v58[23];
        else
          v67 = *((_QWORD *)v58 + 1);
        v68 = v57[23];
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *((_QWORD *)v57 + 1);
        if (v67 != v68)
          break;
        if (v69 >= 0)
          v70 = v57;
        else
          v70 = *(char **)v57;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((_QWORD *)v58 + 1)))
            break;
        }
        else if (v58[23])
        {
          v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71)
              goto LABEL_116;
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59)
          goto LABEL_133;
      }
    }
  }
  v60 = 0;
LABEL_133:
  v57 = (char *)__p;
  if (!__p)
    goto LABEL_134;
LABEL_106:
  v63 = v77;
  if (v77 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0)
        operator delete(*((void **)v63 - 3));
      v63 -= 24;
    }
    while (v63 != v57);
    v77 = v57;
    operator delete(__p);
    v64 = (char *)v79;
    if (v79)
      goto LABEL_135;
LABEL_108:
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  v77 = v57;
  operator delete(v57);
  v64 = (char *)v79;
  if (!v79)
    goto LABEL_108;
LABEL_135:
  v72 = v80;
  if (v80 == v64)
  {
    v80 = v64;
    operator delete(v64);
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0)
      operator delete(*((void **)v72 - 3));
    v72 -= 24;
  }
  while (v72 != v64);
  v80 = v64;
  operator delete(v79);
  v65 = (std::__shared_weak_count *)v85;
  if ((_QWORD)v85)
  {
LABEL_142:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_146:
  std::locale::~locale(v82);
  if (v86[0].__begin_)
  {
    v86[0].__end_ = v86[0].__begin_;
    operator delete(v86[0].__begin_);
  }
  return v60;
}

void sub_227B03AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(_QWORD *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t j;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  size_t v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  unint64_t v57;
  size_t v58;
  int v59;
  const void **v60;
  const void *v61;
  const void **v62;
  unint64_t v63;
  size_t v64;
  int v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  BOOL v69;
  __n128 v70;
  const void **v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void **v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  const void **k;
  const void **v88;
  const void **v89;
  size_t v90;
  size_t v91;
  int v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  __n128 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  const void **v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  int v109;
  __n128 *v110;
  __n128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  __n128 *v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  void *v122;
  const void *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 *v132;
  int v133;
  const void *v134;
  size_t v135;
  int v136;
  __n128 *v137;
  size_t v138;
  size_t v139;
  int v140;
  __n128 v141;
  __n128 *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int64_t v151;
  int64_t v152;
  const void **v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void **v158;
  int v159;
  const void *v160;
  unint64_t v161;
  int v162;
  const void *v163;
  unint64_t v164;
  size_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  const void *v170;
  size_t v171;
  int v172;
  const void *v173;
  size_t v174;
  size_t v175;
  int v176;
  BOOL v177;
  __n128 v178;
  __int128 v179;
  unint64_t v180;
  __n128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  const void *v186;
  unint64_t v187;
  int v188;
  const void *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  BOOL v193;
  int v194;
  const void *v195;
  size_t v196;
  size_t v197;
  int v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  size_t v207;
  int v208;
  const void *v209;
  size_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  const void *v218;
  size_t v219;
  int v220;
  __n128 *v221;
  size_t v222;
  size_t v223;
  int v224;
  __n128 v225;
  __n128 *v226;
  size_t v227;
  __n128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  const void *v237;
  const void **v238;
  int v239;
  const void *v240;
  size_t v241;
  int v242;
  const void *v243;
  size_t v244;
  size_t v245;
  int v246;
  __n128 v247;
  __n128 *v248;
  size_t v249;
  uint64_t i;
  int v251;
  const void *v252;
  size_t v253;
  size_t v254;
  int v255;
  const void *v256;
  uint64_t v257;
  const void **v258;
  const void **v259;
  size_t v261;
  const void *v262;
  uint64_t v263;
  __n128 *v264;
  const void *v265;
  const void **v266;
  int64_t v267;
  const void *v268;
  const void **v269;
  const void **v270;
  __n128 v271;
  int64_t v272;

LABEL_1:
  v266 = a2 - 3;
  v269 = a2;
  v258 = a2 - 9;
  v259 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (uint64_t)a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v117 = (__n128 *)(a2 - 3);
        v118 = *((char *)a2 - 1);
        if (v118 >= 0)
          v119 = a2 - 3;
        else
          v119 = (const void **)*(a2 - 3);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 1);
        else
          v120 = (size_t)*(a2 - 2);
        v121 = *(char *)(a1 + 23);
        v122 = *(void **)a1;
        v123 = *(const void **)(a1 + 8);
        if (v121 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v121 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v120)
          v126 = v120;
        else
          v126 = v125;
        v127 = memcmp(v119, v124, v126);
        if (v127)
        {
          if (v127 < 0)
            return result;
        }
        else if (v120 <= v125)
        {
          return result;
        }
        v256 = *(const void **)(a1 + 16);
        v257 = (uint64_t)*(a2 - 1);
        result = *v117;
        *(__n128 *)a1 = *v117;
        *(_QWORD *)(a1 + 16) = v257;
        *(a2 - 3) = v122;
        *(a2 - 2) = v123;
        *(a2 - 1) = v256;
        return result;
      case 3uLL:
        result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v266).n128_u64[0];
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v266).n128_u64[0];
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v266).n128_u64[0];
        return result;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return result;
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return result;
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v132 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v133 = v132[2].n128_i8[15];
              if (v133 >= 0)
                v134 = v128;
              else
                v134 = (const void *)v132[1].n128_u64[1];
              if (v133 >= 0)
                v135 = v132[2].n128_u8[15];
              else
                v135 = v132[2].n128_u64[0];
              v136 = v132[1].n128_i8[7];
              if (v136 >= 0)
                v137 = v132;
              else
                v137 = (__n128 *)v132->n128_u64[0];
              if (v136 >= 0)
                v138 = v132[1].n128_u8[7];
              else
                v138 = v132->n128_u64[1];
              if (v138 >= v135)
                v139 = v135;
              else
                v139 = v138;
              v140 = memcmp(v134, v137, v139);
              if (v140)
              {
                if (v140 < 0)
                  goto LABEL_259;
              }
              else if (v135 <= v138)
              {
                goto LABEL_259;
              }
              v141 = *(__n128 *)v130;
              v272 = *(_QWORD *)(v130 + 16);
              v271 = v141;
              if (v272 >= 0)
                v142 = &v271;
              else
                v142 = (__n128 *)v141.n128_u64[0];
              if (v272 >= 0)
                v143 = HIBYTE(v272);
              else
                v143 = v141.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v132[1].n128_u64[0];
              *(__n128 *)v130 = *v132;
              v132[1].n128_u8[7] = 0;
              v132->n128_u8[0] = 0;
              v131 = (__n128 *)a1;
              if (v132 != (__n128 *)a1)
              {
                v144 = v129;
                while (1)
                {
                  v145 = a1 + v144;
                  v146 = *(char *)(a1 + v144 - 1);
                  if (v146 >= 0)
                    v147 = (const void *)(a1 + v144 - 24);
                  else
                    v147 = *(const void **)(a1 + v144 - 24);
                  if (v146 >= 0)
                    v148 = *(unsigned __int8 *)(a1 + v144 - 1);
                  else
                    v148 = *(_QWORD *)(a1 + v144 - 16);
                  if (v148 >= v143)
                    v149 = v143;
                  else
                    v149 = v148;
                  v150 = memcmp(v142, v147, v149);
                  if (v150)
                  {
                    if (v150 < 0)
                    {
                      v131 = (__n128 *)(a1 + v144);
                      break;
                    }
                  }
                  else if (v143 <= v148)
                  {
                    v131 = v132;
                    break;
                  }
                  v132 = (__n128 *)((char *)v132 - 24);
                  *(_OWORD *)v145 = *(_OWORD *)(a1 + v144 - 24);
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(a1 + v144 - 8);
                  *(_BYTE *)(v145 - 1) = 0;
                  *(_BYTE *)(v145 - 24) = 0;
                  v144 -= 24;
                  if (!v144)
                  {
                    v131 = (__n128 *)a1;
                    break;
                  }
                }
              }
              result = v271;
              v131[1].n128_u64[0] = v272;
              *v131 = result;
LABEL_259:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == v269)
                return result;
            }
          }
          if ((const void **)a1 == a2)
            return result;
          v237 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return result;
LABEL_471:
          v238 = (const void **)a1;
          a1 = (uint64_t)v237;
          v239 = *((char *)v238 + 47);
          if (v239 >= 0)
            v240 = v237;
          else
            v240 = v238[3];
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v238 + 47);
          else
            v241 = (size_t)v238[4];
          v242 = *((char *)v238 + 23);
          if (v242 >= 0)
            v243 = v238;
          else
            v243 = *v238;
          if (v242 >= 0)
            v244 = *((unsigned __int8 *)v238 + 23);
          else
            v244 = (size_t)v238[1];
          if (v244 >= v241)
            v245 = v241;
          else
            v245 = v244;
          v246 = memcmp(v240, v243, v245);
          if (v246)
          {
            if (v246 < 0)
              goto LABEL_470;
          }
          else if (v241 <= v244)
          {
            goto LABEL_470;
          }
          v247 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v247;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v272 >= 0)
            v248 = &v271;
          else
            v248 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v249 = HIBYTE(v272);
          else
            v249 = v271.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v251 = *(char *)(i - 25);
            if (v251 >= 0)
              v252 = (const void *)(i - 48);
            else
              v252 = *(const void **)(i - 48);
            if (v251 >= 0)
              v253 = *(unsigned __int8 *)(i - 25);
            else
              v253 = *(_QWORD *)(i - 40);
            if (v253 >= v249)
              v254 = v249;
            else
              v254 = v253;
            v255 = memcmp(v248, v252, v254);
            if (v255)
            {
              if (v255 < 0)
              {
LABEL_469:
                result = v271;
                *(_QWORD *)(i - 8) = v272;
                *(__n128 *)(i - 24) = result;
LABEL_470:
                v237 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return result;
                goto LABEL_471;
              }
            }
            else if (v249 <= v253)
            {
              goto LABEL_469;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)a1 == a2)
            return result;
          v151 = (v10 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v154 = v152;
            if (v151 < v152)
              goto LABEL_306;
            v155 = (2 * v152) | 1;
            v156 = a1 + 24 * v155;
            v157 = 2 * v152 + 2;
            if (v157 >= (uint64_t)v10)
              goto LABEL_330;
            v158 = (const void **)(v156 + 24);
            v159 = *(char *)(v156 + 23);
            v160 = v159 >= 0 ? (const void *)(a1 + 24 * v155) : *(const void **)v156;
            v161 = v159 >= 0 ? *(unsigned __int8 *)(v156 + 23) : *(_QWORD *)(v156 + 8);
            v162 = *(char *)(v156 + 47);
            v163 = v162 >= 0 ? (const void *)(v156 + 24) : *(const void **)(v156 + 24);
            v164 = v162 >= 0 ? *(unsigned __int8 *)(v156 + 47) : *(_QWORD *)(v156 + 32);
            v165 = v164 >= v161 ? v161 : v164;
            v166 = memcmp(v160, v163, v165);
            if (v166)
              break;
            v167 = v161 >= v164;
            if (v161 == v164)
            {
              v158 = (const void **)(a1 + 24 * v155);
              v157 = (2 * v154) | 1;
              a2 = v269;
              goto LABEL_331;
            }
            a2 = v269;
            if (!v167)
              goto LABEL_330;
LABEL_331:
            v168 = a1 + 24 * v154;
            v169 = *((char *)v158 + 23);
            if (v169 >= 0)
              v170 = v158;
            else
              v170 = *v158;
            if (v169 >= 0)
              v171 = *((unsigned __int8 *)v158 + 23);
            else
              v171 = (size_t)v158[1];
            v172 = *(char *)(v168 + 23);
            if (v172 >= 0)
              v173 = (const void *)(a1 + 24 * v154);
            else
              v173 = *(const void **)v168;
            if (v172 >= 0)
              v174 = *(unsigned __int8 *)(v168 + 23);
            else
              v174 = *(_QWORD *)(v168 + 8);
            if (v174 >= v171)
              v175 = v171;
            else
              v175 = v174;
            v176 = memcmp(v170, v173, v175);
            if (v176)
            {
              v151 = (v10 - 2) >> 1;
              if (v176 < 0)
                goto LABEL_350;
            }
            else
            {
              v177 = v171 > v174;
              v151 = (v10 - 2) >> 1;
              if (!v177)
              {
LABEL_350:
                v178 = *(__n128 *)v168;
                v272 = *(_QWORD *)(v168 + 16);
                v271 = v178;
                *(_QWORD *)(v168 + 8) = 0;
                *(_QWORD *)(v168 + 16) = 0;
                *(_QWORD *)v168 = 0;
                v179 = *(_OWORD *)v158;
                *(_QWORD *)(v168 + 16) = v158[2];
                *(_OWORD *)v168 = v179;
                *((_BYTE *)v158 + 23) = 0;
                *(_BYTE *)v158 = 0;
                if (v151 >= v157)
                {
                  v180 = HIBYTE(v272);
                  v181 = &v271;
                  if (v272 < 0)
                  {
                    v180 = v271.n128_u64[1];
                    v181 = (__n128 *)v271.n128_u64[0];
                  }
                  v261 = v180;
                  v264 = v181;
                  v267 = v154;
                  while (1)
                  {
                    v183 = (2 * v157) | 1;
                    v184 = a1 + 24 * v183;
                    v157 = 2 * v157 + 2;
                    if (v157 >= (uint64_t)v10)
                      goto LABEL_378;
                    v153 = (const void **)(v184 + 24);
                    v185 = *(char *)(v184 + 23);
                    v186 = v185 >= 0 ? (const void *)(a1 + 24 * v183) : *(const void **)v184;
                    v187 = v185 >= 0 ? *(unsigned __int8 *)(v184 + 23) : *(_QWORD *)(v184 + 8);
                    v188 = *(char *)(v184 + 47);
                    v189 = v188 >= 0 ? (const void *)(v184 + 24) : *(const void **)(v184 + 24);
                    v190 = v188 >= 0 ? *(unsigned __int8 *)(v184 + 47) : *(_QWORD *)(v184 + 32);
                    v191 = v190 >= v187 ? v187 : v190;
                    v192 = memcmp(v186, v189, v191);
                    if (v192)
                      break;
                    v193 = v187 >= v190;
                    if (v187 == v190)
                    {
                      v153 = (const void **)(a1 + 24 * v183);
                      v157 = v183;
                      a2 = v269;
                      v151 = (v10 - 2) >> 1;
                      goto LABEL_379;
                    }
                    a2 = v269;
                    v151 = (v10 - 2) >> 1;
                    if (!v193)
                      goto LABEL_378;
LABEL_379:
                    v194 = *((char *)v153 + 23);
                    if (v194 >= 0)
                      v195 = v153;
                    else
                      v195 = *v153;
                    if (v194 >= 0)
                      v196 = *((unsigned __int8 *)v153 + 23);
                    else
                      v196 = (size_t)v153[1];
                    if (v261 >= v196)
                      v197 = v196;
                    else
                      v197 = v261;
                    v198 = memcmp(v195, v264, v197);
                    if (v198)
                    {
                      v154 = v267;
                      if ((v198 & 0x80000000) == 0)
                        goto LABEL_304;
                    }
                    else
                    {
                      v154 = v267;
                      if (v196 > v261)
                        goto LABEL_304;
                    }
                    v182 = *(_OWORD *)v153;
                    v158[2] = v153[2];
                    *(_OWORD *)v158 = v182;
                    *((_BYTE *)v153 + 23) = 0;
                    *(_BYTE *)v153 = 0;
                    v158 = v153;
                    if (v151 < v157)
                      goto LABEL_305;
                  }
                  a2 = v269;
                  v151 = (v10 - 2) >> 1;
                  if ((v192 & 0x80000000) == 0)
                    goto LABEL_379;
LABEL_378:
                  v153 = (const void **)(a1 + 24 * v183);
                  v157 = v183;
                  goto LABEL_379;
                }
LABEL_304:
                v153 = v158;
LABEL_305:
                result = v271;
                v153[2] = (const void *)v272;
                *(__n128 *)v153 = result;
              }
            }
LABEL_306:
            v152 = v154 - 1;
            if (!v154)
            {
              v199 = v9 / 0x18uLL;
              while (2)
              {
                if (v199 < 2)
                  goto LABEL_393;
                v200 = 0;
                v268 = *(const void **)a1;
                v270 = a2;
                v262 = *(const void **)(a1 + 16);
                v265 = *(const void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v201 = a1;
                *(_QWORD *)a1 = 0;
LABEL_399:
                v203 = v201 + 24 * v200 + 24;
                v204 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v199)
                  goto LABEL_397;
                v202 = (__n128 *)(v203 + 24);
                v205 = *(char *)(v203 + 23);
                if (v205 >= 0)
                  v206 = (const void *)v203;
                else
                  v206 = *(const void **)v203;
                if (v205 >= 0)
                  v207 = *(unsigned __int8 *)(v203 + 23);
                else
                  v207 = *(_QWORD *)(v203 + 8);
                v208 = *(char *)(v203 + 47);
                if (v208 >= 0)
                  v209 = (const void *)(v203 + 24);
                else
                  v209 = *(const void **)(v203 + 24);
                if (v208 >= 0)
                  v210 = *(unsigned __int8 *)(v203 + 47);
                else
                  v210 = *(_QWORD *)(v203 + 32);
                if (v210 >= v207)
                  v211 = v207;
                else
                  v211 = v210;
                v212 = memcmp(v206, v209, v211);
                if (v212)
                {
                  if ((v212 & 0x80000000) == 0)
                    goto LABEL_417;
LABEL_397:
                  v202 = (__n128 *)v203;
                  v200 = v204;
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                  {
LABEL_398:
                    result = *v202;
                    *(_QWORD *)(v201 + 16) = v202[1].n128_u64[0];
                    *(__n128 *)v201 = result;
                    v202[1].n128_u8[7] = 0;
                    v202->n128_u8[0] = 0;
                    v201 = (uint64_t)v202;
                    if (v200 > (uint64_t)((unint64_t)(v199 - 2) >> 1))
                    {
                      if (v202 == (__n128 *)(a2 - 3))
                      {
                        v202->n128_u64[0] = (unint64_t)v268;
                        v202->n128_u64[1] = (unint64_t)v265;
                        v202[1].n128_u64[0] = (unint64_t)v262;
                      }
                      else
                      {
                        result = *(__n128 *)(a2 - 3);
                        v202[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                        *v202 = result;
                        *(a2 - 3) = v268;
                        *(a2 - 2) = v265;
                        *(a2 - 1) = v262;
                        v213 = (uint64_t)&v202[1].n128_i64[1] - a1;
                        if (v213 >= 25)
                        {
                          v214 = v213 / 0x18uLL - 2;
                          v215 = v214 >> 1;
                          v216 = a1 + 24 * (v214 >> 1);
                          v217 = *(char *)(v216 + 23);
                          if (v217 >= 0)
                            v218 = (const void *)(a1 + 24 * (v214 >> 1));
                          else
                            v218 = *(const void **)v216;
                          if (v217 >= 0)
                            v219 = *(unsigned __int8 *)(v216 + 23);
                          else
                            v219 = *(_QWORD *)(v216 + 8);
                          v220 = v202[1].n128_i8[7];
                          if (v220 >= 0)
                            v221 = v202;
                          else
                            v221 = (__n128 *)v202->n128_u64[0];
                          if (v220 >= 0)
                            v222 = v202[1].n128_u8[7];
                          else
                            v222 = v202->n128_u64[1];
                          if (v222 >= v219)
                            v223 = v219;
                          else
                            v223 = v222;
                          v224 = memcmp(v218, v221, v223);
                          if (v224)
                          {
                            if (v224 < 0)
                              goto LABEL_393;
LABEL_443:
                            v225 = *v202;
                            v272 = v202[1].n128_i64[0];
                            v271 = v225;
                            v202->n128_u64[1] = 0;
                            v202[1].n128_u64[0] = 0;
                            v202->n128_u64[0] = 0;
                            if (v272 >= 0)
                              v226 = &v271;
                            else
                              v226 = (__n128 *)v271.n128_u64[0];
                            if (v272 >= 0)
                              v227 = HIBYTE(v272);
                            else
                              v227 = v271.n128_u64[1];
                            v228 = *(__n128 *)v216;
                            v202[1].n128_u64[0] = *(_QWORD *)(v216 + 16);
                            *v202 = v228;
                            *(_BYTE *)(v216 + 23) = 0;
                            *(_BYTE *)v216 = 0;
                            if (v214 >= 2)
                            {
                              while (1)
                              {
                                v230 = v215 - 1;
                                v215 = (v215 - 1) >> 1;
                                v231 = a1 + 24 * v215;
                                v232 = *(char *)(v231 + 23);
                                if (v232 >= 0)
                                  v233 = (const void *)(a1 + 24 * v215);
                                else
                                  v233 = *(const void **)v231;
                                if (v232 >= 0)
                                  v234 = *(unsigned __int8 *)(v231 + 23);
                                else
                                  v234 = *(_QWORD *)(v231 + 8);
                                if (v227 >= v234)
                                  v235 = v234;
                                else
                                  v235 = v227;
                                v236 = memcmp(v233, v226, v235);
                                if (v236)
                                {
                                  if (v236 < 0)
                                    break;
                                }
                                else if (v234 <= v227)
                                {
                                  break;
                                }
                                v229 = *(_OWORD *)v231;
                                *(_QWORD *)(v216 + 16) = *(_QWORD *)(v231 + 16);
                                *(_OWORD *)v216 = v229;
                                *(_BYTE *)(v231 + 23) = 0;
                                *(_BYTE *)v231 = 0;
                                v216 = a1 + 24 * v215;
                                if (v230 <= 1)
                                  goto LABEL_465;
                              }
                            }
                            v231 = v216;
LABEL_465:
                            result = v271;
                            *(_QWORD *)(v231 + 16) = v272;
                            *(__n128 *)v231 = result;
                            a2 = v270;
                          }
                          else if (v219 > v222)
                          {
                            goto LABEL_443;
                          }
                        }
                      }
LABEL_393:
                      a2 -= 3;
                      v177 = (unint64_t)v199-- > 2;
                      if (!v177)
                        return result;
                      continue;
                    }
                    goto LABEL_399;
                  }
                }
                else
                {
                  if (v207 == v210 || v207 < v210)
                    goto LABEL_397;
LABEL_417:
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                    goto LABEL_398;
                }
                break;
              }
              operator delete(*(void **)v201);
              goto LABEL_398;
            }
          }
          a2 = v269;
          if ((v166 & 0x80000000) == 0)
            goto LABEL_331;
LABEL_330:
          v158 = (const void **)(a1 + 24 * v155);
          v157 = (2 * v154) | 1;
          goto LABEL_331;
        }
        v11 = v10 >> 1;
        v12 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v12, a1, v266);
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v12, v266);
          v13 = 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v13 + a1 - 24, v259);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v13, v258);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v13 + a1 - 24, v12, (const void **)(a1 + 24 + v13));
          v14 = *(void **)a1;
          v15 = *(_OWORD *)(a1 + 8);
          v16 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v16;
          *(_QWORD *)v12 = v14;
          *(_OWORD *)(v12 + 8) = v15;
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        v17 = *(char *)(a1 - 1);
        if (v17 >= 0)
          v18 = (const void *)(a1 - 24);
        else
          v18 = *(const void **)(a1 - 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a1 - 1);
        else
          v19 = *(_QWORD *)(a1 - 16);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if ((v24 & 0x80000000) == 0)
            goto LABEL_26;
LABEL_124:
          v70 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v70;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v71 = a2;
          if (v272 >= 0)
            v72 = &v271;
          else
            v72 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v73 = HIBYTE(v272);
          else
            v73 = v271.n128_u64[1];
          v74 = *((unsigned __int8 *)v71 - 1);
          v76 = (const void **)*(v71 - 3);
          v75 = *(v71 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = v266;
          else
            v77 = (const void **)*(v71 - 3);
          if ((v74 & 0x80u) == 0)
            v78 = *((unsigned __int8 *)v71 - 1);
          else
            v78 = (size_t)*(v71 - 2);
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 > v78)
          {
LABEL_141:
            v81 = a1 + 24;
            do
            {
              while (1)
              {
                j = v81;
                v82 = *(unsigned __int8 *)(v81 + 23);
                v83 = (v82 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v84 = (v82 & 0x80u) == 0 ? v82 : *(_QWORD *)(j + 8);
                v85 = v84 >= v73 ? v73 : v84;
                v86 = memcmp(v72, v83, v85);
                v81 = j + 24;
                if (v86)
                  break;
                if (v73 > v84)
                  goto LABEL_154;
              }
            }
            while (v86 < 0);
            goto LABEL_154;
          }
          for (j = a1 + 24; j < (unint64_t)v269; j += 24)
          {
            v112 = *(char *)(j + 23);
            if (v112 >= 0)
              v113 = (const void *)j;
            else
              v113 = *(const void **)j;
            if (v112 >= 0)
              v114 = *(unsigned __int8 *)(j + 23);
            else
              v114 = *(_QWORD *)(j + 8);
            if (v114 >= v73)
              v115 = v73;
            else
              v115 = v114;
            v116 = memcmp(v72, v113, v115);
            if (v116)
            {
              if ((v116 & 0x80000000) == 0)
                break;
            }
            else if (v73 > v114)
            {
              break;
            }
          }
LABEL_154:
          k = v269;
          if (j < (unint64_t)v269)
          {
            for (k = v266; ; v75 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v89 = k;
              else
                v89 = v76;
              if ((v74 & 0x80u) == 0)
                v90 = v74;
              else
                v90 = (size_t)v75;
              if (v90 >= v73)
                v91 = v73;
              else
                v91 = v90;
              v92 = memcmp(v72, v89, v91);
              if (v92)
              {
                if (v92 < 0)
                  break;
              }
              else if (v73 <= v90)
              {
                break;
              }
              v88 = (const void **)*(k - 3);
              k -= 3;
              v76 = v88;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j < (unint64_t)k)
          {
            v93 = *(const void **)j;
            do
            {
              v94 = *(_OWORD *)(j + 8);
              v95 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v95;
              *k = v93;
              *(_OWORD *)(k + 1) = v94;
              if (v272 >= 0)
                v96 = &v271;
              else
                v96 = (__n128 *)v271.n128_u64[0];
              if (v272 >= 0)
                v97 = HIBYTE(v272);
              else
                v97 = v271.n128_u64[1];
              v98 = j + 24;
              do
              {
                while (1)
                {
                  j = v98;
                  v99 = *(unsigned __int8 *)(v98 + 23);
                  v93 = *(const void **)j;
                  v100 = (v99 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v101 = (v99 & 0x80u) == 0 ? v99 : *(_QWORD *)(j + 8);
                  v102 = v101 >= v97 ? v97 : v101;
                  v103 = memcmp(v96, v100, v102);
                  v98 = j + 24;
                  if (v103)
                    break;
                  if (v97 > v101)
                    goto LABEL_191;
                }
              }
              while (v103 < 0);
LABEL_191:
              v104 = k - 3;
              do
              {
                while (1)
                {
                  k = v104;
                  v105 = (const void *)*((unsigned __int8 *)v104 + 23);
                  v106 = (char)v105 >= 0 ? k : (const void **)*k;
                  v107 = (char)v105 >= 0 ? v105 : k[1];
                  v108 = (unint64_t)v107 >= v97 ? v97 : (size_t)v107;
                  v109 = memcmp(v96, v106, v108);
                  v104 = k - 3;
                  if (v109)
                    break;
                  if (v97 <= (unint64_t)v107)
                    goto LABEL_171;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_171:
              ;
            }
            while (j < (unint64_t)k);
          }
          v110 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v269;
            a3 = v263;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v111 = *v110;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v111;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
            a2 = v269;
            a3 = v263;
          }
          a4 = 0;
          result = v271;
          *(_QWORD *)(j - 8) = v272;
          *v110 = result;
          continue;
        }
        if (v19 <= v22)
          goto LABEL_124;
LABEL_26:
        v25 = 0;
        v26 = *(__n128 *)a1;
        v272 = *(_QWORD *)(a1 + 16);
        v271 = v26;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v272 >= 0)
          v27 = &v271;
        else
          v27 = (__n128 *)v271.n128_u64[0];
        if (v272 >= 0)
          v28 = HIBYTE(v272);
        else
          v28 = v271.n128_u64[1];
        while (2)
        {
          v29 = *(const void **)(a1 + v25 + 24);
          v30 = *(char *)(a1 + v25 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v25 + 24);
          else
            v31 = *(const void **)(a1 + v25 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v25 + 47);
          else
            v32 = *(_QWORD *)(a1 + v25 + 32);
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 <= v28)
              goto LABEL_45;
LABEL_33:
            v25 += 24;
            continue;
          }
          break;
        }
        if ((v34 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_45:
        v35 = a1 + v25 + 24;
        v36 = v266;
        if (v25)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v28 >= v46 ? v46 : v28;
              v48 = memcmp(v45, v27, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 > v28)
                goto LABEL_76;
            }
          }
          while (v48 < 0);
        }
        else
        {
          v37 = v269;
          if (v35 < (unint64_t)v269)
          {
            v38 = v266;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v28 >= v41 ? v41 : v28;
                v43 = memcmp(v40, v27, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || (v43 & 0x80000000) == 0)
                  goto LABEL_76;
              }
            }
            while (v35 < (unint64_t)v37 && v41 <= v28);
          }
        }
LABEL_76:
        if (v35 >= (unint64_t)v37)
        {
          j = v35;
        }
        else
        {
          v49 = v37;
          j = v35;
          do
          {
            v50 = *(_OWORD *)(j + 8);
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            *v49 = v29;
            *(_OWORD *)(v49 + 1) = v50;
            if (v272 >= 0)
              v52 = &v271;
            else
              v52 = (__n128 *)v271.n128_u64[0];
            if (v272 >= 0)
              v53 = HIBYTE(v272);
            else
              v53 = v271.n128_u64[1];
            v54 = j + 24;
            do
            {
              while (1)
              {
                j = v54;
                v55 = *(unsigned __int8 *)(v54 + 23);
                v29 = *(const void **)j;
                v56 = (v55 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v57 = (v55 & 0x80u) == 0 ? v55 : *(_QWORD *)(j + 8);
                v58 = v53 >= v57 ? v57 : v53;
                v59 = memcmp(v56, v52, v58);
                v54 = j + 24;
                if (v59)
                  break;
                if (v57 <= v53)
                  goto LABEL_98;
              }
            }
            while ((v59 & 0x80000000) == 0);
LABEL_98:
            v60 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v60;
                v61 = (const void *)*((unsigned __int8 *)v60 + 23);
                v62 = (char)v61 >= 0 ? v49 : (const void **)*v49;
                v63 = (unint64_t)((char)v61 >= 0 ? v61 : v49[1]);
                v64 = v53 >= v63 ? v63 : v53;
                v65 = memcmp(v62, v52, v64);
                v60 = v49 - 3;
                if (v65)
                  break;
                if (v63 > v53)
                  goto LABEL_78;
              }
            }
            while (v65 < 0);
LABEL_78:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v66 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v67 = *v66;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v67;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v68 = v271;
        *(_QWORD *)(j - 8) = v272;
        *v66 = v68;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(j - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(j, a2))
        {
          if (v69)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const void *v23;
  const void *v24;
  __n128 result;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  v7 = *(const void **)a2;
  v8 = *(const void **)(a2 + 8);
  if (v6 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = *(char *)(a1 + 23);
  v13 = *(const void **)a1;
  v12 = *(const void **)(a1 + 8);
  if (v11 >= 0)
    v14 = (const void *)a1;
  else
    v14 = *(const void **)a1;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if (v10 > v15)
  {
LABEL_18:
    v18 = *((char *)a3 + 23);
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *a3;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a3 + 23);
    else
      v20 = (size_t)a3[1];
    if (v10 >= v20)
      v21 = v20;
    else
      v21 = v10;
    v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        v23 = *(const void **)(a1 + 16);
        v24 = a3[2];
        result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_QWORD *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v31;
    v33 = *((char *)a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *a3;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a3 + 23);
    else
      v35 = (size_t)a3[1];
    if (v31 >= 0)
      v36 = (const void *)a2;
    else
      v36 = v13;
    if (v31 >= 0)
      v37 = HIBYTE(v31);
    else
      v37 = (size_t)v12;
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        return result;
    }
    else if (v35 <= v37)
    {
      return result;
    }
    result = *(__n128 *)a3;
    *(_QWORD *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  v26 = *((char *)a3 + 23);
  if (v26 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (size_t)a3[1];
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = v10;
  v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v28 <= v10)
  {
    return result;
  }
  v40 = *(const void **)(a2 + 16);
  v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  v42 = *(char *)(a2 + 23);
  if (v42 >= 0)
    v43 = (const void *)a2;
  else
    v43 = *(const void **)a2;
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
  v45 = *(char *)(a1 + 23);
  v46 = *(const void **)a1;
  v47 = *(_QWORD *)(a1 + 8);
  if (v45 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v45 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v44)
    v50 = v44;
  else
    v50 = v49;
  v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49)
      return result;
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    v52 = *(_QWORD *)(a1 + 16);
    v53 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  const void **v17;
  const void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  const void **v43;
  __int128 v44;
  const void *v45;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      v11 = *(const void **)a1;
      v12 = *(const void **)(a1 + 8);
      if (v10 >= 0)
        v13 = (const void *)a1;
      else
        v13 = *(const void **)a1;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 23);
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          return 1;
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      v41 = *(const void **)(a1 + 16);
      v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v23 = *((char *)v18 + 23);
    if (v23 >= 0)
      v24 = v18;
    else
      v24 = *v18;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v18 + 23);
    else
      v25 = (size_t)v18[1];
    v26 = *((char *)v17 + 23);
    if (v26 >= 0)
      v27 = v17;
    else
      v27 = *v17;
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)v17 + 23);
    else
      v28 = (size_t)v17[1];
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0)
        goto LABEL_25;
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    v44 = *(_OWORD *)v18;
    v45 = v18[2];
    *(_OWORD *)v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((_BYTE *)v17 + 23) = 0;
    *(_BYTE *)v17 = 0;
    v21 = a1;
    if (v17 == (const void **)a1)
      goto LABEL_24;
    v31 = v19;
    while (1)
    {
      v32 = a1 + v31;
      v33 = (_OWORD *)(a1 + v31 + 24);
      v34 = SHIBYTE(v45) >= 0 ? &v44 : (__int128 *)v44;
      v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      v36 = *(char *)(v32 + 47);
      v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(_QWORD *)(v32 + 32);
      v39 = v38 >= v35 ? v35 : v38;
      v40 = memcmp(v34, v37, v39);
      if (!v40)
        break;
      if (v40 < 0)
      {
        v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(a1 + v31 + 40);
      *(_BYTE *)(v32 + 47) = 0;
      *(_BYTE *)v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38)
      goto LABEL_48;
    v21 = a1 + v31 + 48;
LABEL_23:
    v2 = v43;
LABEL_24:
    v22 = v44;
    *(_QWORD *)(v21 + 16) = v45;
    *(_OWORD *)v21 = v22;
    if (++v20 == 8)
      return v18 + 3 == v2;
LABEL_25:
    v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *(char *)(a3 + 23);
  v12 = *(const void **)a3;
  v13 = *(const void **)(a3 + 8);
  if (v11 >= 0)
    v14 = (const void *)a3;
  else
    v14 = *(const void **)a3;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0)
      return result;
  }
  else if (v10 <= v15)
  {
    return result;
  }
  v19 = *(const void **)(a3 + 16);
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const void *)a3;
  else
    v22 = *(const void **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = *(char *)(a2 + 23);
  v25 = *(const void **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  if (v24 >= 0)
    v27 = (const void *)a2;
  else
    v27 = *(const void **)a2;
  if (v24 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  if (v28 >= v23)
    v29 = v23;
  else
    v29 = v28;
  v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v23 <= v28)
  {
    return result;
  }
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v31;
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = (const void *)a2;
  else
    v34 = *(const void **)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  v36 = *(char *)(a1 + 23);
  v37 = *(const void **)a1;
  v38 = *(_QWORD *)(a1 + 8);
  if (v36 >= 0)
    v39 = (const void *)a1;
  else
    v39 = *(const void **)a1;
  if (v36 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 23);
  else
    v40 = *(_QWORD *)(a1 + 8);
  if (v40 >= v35)
    v41 = v35;
  else
    v41 = v40;
  v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40)
      return result;
LABEL_58:
    v43 = *(_QWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_58;
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  __n128 result;
  const void *v21;
  const void *v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  size_t v37;
  int v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  size_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *(char *)(a4 + 23);
  v14 = *(const void **)a4;
  v15 = *(const void **)(a4 + 8);
  if (v13 >= 0)
    v16 = (const void *)a4;
  else
    v16 = *(const void **)a4;
  if (v13 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      return result;
  }
  else if (v12 <= v17)
  {
    return result;
  }
  v21 = *(const void **)(a4 + 16);
  v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  v23 = *(char *)(a4 + 23);
  if (v23 >= 0)
    v24 = (const void *)a4;
  else
    v24 = *(const void **)a4;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a4 + 23);
  else
    v25 = *(_QWORD *)(a4 + 8);
  v26 = *(char *)(a3 + 23);
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  if (v26 >= 0)
    v29 = (const void *)a3;
  else
    v29 = *(const void **)a3;
  if (v26 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  if (v30 >= v25)
    v31 = v25;
  else
    v31 = v30;
  v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0)
      return result;
  }
  else if (v25 <= v30)
  {
    return result;
  }
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v33;
  v35 = *(char *)(a3 + 23);
  if (v35 >= 0)
    v36 = (const void *)a3;
  else
    v36 = *(const void **)a3;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
  v38 = *(char *)(a2 + 23);
  v39 = *(const void **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if (v38 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  if (v42 >= v37)
    v43 = v37;
  else
    v43 = v42;
  v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0)
      return result;
  }
  else if (v37 <= v42)
  {
    return result;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v45;
  v47 = *(char *)(a2 + 23);
  if (v47 >= 0)
    v48 = (const void *)a2;
  else
    v48 = *(const void **)a2;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a2 + 23);
  else
    v49 = *(_QWORD *)(a2 + 8);
  v50 = *(char *)(a1 + 23);
  v51 = *(const void **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v50 >= 0)
    v53 = (const void *)a1;
  else
    v53 = *(const void **)a1;
  if (v50 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 23);
  else
    v54 = *(_QWORD *)(a1 + 8);
  if (v54 >= v49)
    v55 = v49;
  else
    v55 = v54;
  v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0)
      return result;
  }
  else if (v49 <= v54)
  {
    return result;
  }
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v57;
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *GetOsLogContext(void)
{
  unsigned __int8 v0;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
  return &GetOsLogContext(void)::sOsLogContext;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  _BYTE v0[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  v2 = atomic_load((unsigned __int8 *)&qword_253DF2510);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253DF2510))
  {
    MEMORY[0x22E2A2DD0](&unk_253DF2518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED98A0], &unk_253DF2518, &dword_227A72000);
    __cxa_guard_release(&qword_253DF2510);
  }
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1174405120;
  v10[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3_2;
  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (_MergedGlobals_3 != -1)
  {
    dispatch_once(&_MergedGlobals_3, v10);
    v4 = v11;
    if (v11)
      goto LABEL_7;
    return &unk_253DF2518;
  }
  if (!v4)
    return &unk_253DF2518;
LABEL_7:
  v7 = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return &unk_253DF2518;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return &unk_253DF2518;
}

void sub_227B058BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253DF2510);
  _Unwind_Resume(a1);
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_253DF25A0 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BED9868], &GetOsLogContext(void)::sOsLogContext, &dword_227A72000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_0);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const ctu::OsLogContext *)&GetOsLogContext(void)::sOsLogContext);
  MEMORY[0x22E2A2DC4](v11, v10, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    v5 = (unint64_t *)(v13 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)qword_253DF2550;
  qword_253DF2548 = v4;
  qword_253DF2550 = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
}

void sub_227B05A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1180";
}

uint64_t AMFDRCreateWithOptions()
{
  return MEMORY[0x24BED4158]();
}

uint64_t AMFDRDataCopy()
{
  return MEMORY[0x24BED4178]();
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x24BED3468]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x24BDBBEA0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x24BDBC1A8](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x24BDBC1B0](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1F0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x24BDBC218](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x24BDBC230](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC258](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

uint64_t KTLDebugRegisterDelegate()
{
  return MEMORY[0x24BED4C08]();
}

uint64_t KTLDebugSetFlags()
{
  return MEMORY[0x24BED4C10]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x24BED96F8]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x24BED9700]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t CreateError()
{
  return MEMORY[0x24BED3480]();
}

uint64_t asString()
{
  return MEMORY[0x24BECE650]();
}

{
  return MEMORY[0x24BECE6F8]();
}

uint64_t capabilities::ct::supportsHiSpeedFiler(capabilities::ct *this)
{
  return MEMORY[0x24BED8EC0](this);
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x24BED90C0](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x24BED90C8](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x24BED90D0](this);
}

uint64_t capabilities::abs::nonPrimaryDLServingCellBandwidthMaxValue(capabilities::abs *this)
{
  return MEMORY[0x24BED9198](this);
}

uint64_t capabilities::radio::supportsBBTraceV2(capabilities::radio *this)
{
  return MEMORY[0x24BED9260](this);
}

uint64_t capabilities::radio::personalizedFirmwarePath(capabilities::radio *this)
{
  return MEMORY[0x24BED9278](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x24BED9298](this);
}

uint64_t capabilities::radio::chipID(capabilities::radio *this)
{
  return MEMORY[0x24BED92A0](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x24BED92A8](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x24BED92B8](this);
}

uint64_t capabilities::trace::supportsBasebandIPCTrace(capabilities::trace *this)
{
  return MEMORY[0x24BED9300](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x24BED9330](this);
}

void CommandDriverFactory::CommandDriverFactory(CommandDriverFactory *this)
{
  MEMORY[0x24BED3498](this);
}

uint64_t Ari::MsgNameById(Ari *this)
{
  return MEMORY[0x24BECE7F0](this);
}

uint64_t Ari::Log(Ari *this, uint64_t a2, const char *a3, ...)
{
  return MEMORY[0x24BECE808](this, a2, a3);
}

uint64_t awd::AwdCommandDriver::AwdCommandDriver()
{
  return MEMORY[0x24BED34C8]();
}

void awd::AwdCommandDriver::~AwdCommandDriver(awd::AwdCommandDriver *this)
{
  MEMORY[0x24BED34D0](this);
}

uint64_t awd::asString()
{
  return MEMORY[0x24BED34E0]();
}

{
  return MEMORY[0x24BED34E8]();
}

{
  return MEMORY[0x24BED34F0]();
}

{
  return MEMORY[0x24BED34F8]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x24BED97E0]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x24BED97E8]();
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x24BED9840](this);
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x24BED9850]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BED9858](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x24BED9860](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x24BED9868](this);
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x24BED9870]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x24BED9880]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x24BED9888](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  MEMORY[0x24BED98A0](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x24BED9918]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x24BED9968](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x24BED9970](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x24BED9988](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x24BED9990](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x24BED9998](this);
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x24BED99A0]();
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x24BED99A8]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x24BED99B0]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x24BED99C8]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x24BED9A78](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
  MEMORY[0x24BED9A80](this);
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x24BED9A88](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x24BED9A90]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x24BED9AA0](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  MEMORY[0x24BED9AB0](this);
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x24BED9AB8](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  MEMORY[0x24BED9AC0](this);
}

uint64_t ctu::cf::show(ctu::cf *this, const void *a2)
{
  return MEMORY[0x24BED9AC8](this, a2);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x24BED9AD8]();
}

uint64_t ctu::cf::assign(ctu::cf *this, signed __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x24BED9AF0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x24BED9B00](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x24BED9B10](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x24BED9B30]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x24BED9B50]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x24BED9B58]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x24BED9B70]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x24BED9B78]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x24BED9B88]();
}

uint64_t ctu::hex(ctu *this, const void *a2)
{
  return MEMORY[0x24BED9BB0](this, a2);
}

uint64_t ctu::hex(ctu *this)
{
  return MEMORY[0x24BED9BC8](this);
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x24BED9C58](this);
}

uint64_t ctu::assign()
{
  return MEMORY[0x24BED9C60]();
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x24BED9C98]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x24BED9CA0](this);
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x24BED9CA8]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x24BED9CB0]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x24BED9CB8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x24BED9CC0]();
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x24BED9D28]();
}

{
  return MEMORY[0x24BED9D38]();
}

{
  return MEMORY[0x24BED9D48]();
}

{
  return MEMORY[0x24BED9D58]();
}

uint64_t ice::SendMsgBaseProxy::SendMsgBaseProxy()
{
  return MEMORY[0x24BED4428]();
}

void ice::SendMsgBaseProxy::~SendMsgBaseProxy(ice::SendMsgBaseProxy *this)
{
  MEMORY[0x24BED4430](this);
}

uint64_t ice::isARIResponseValid()
{
  return MEMORY[0x24BED4438]();
}

uint64_t ice::Client::setIndShouldWake(ice::Client *this)
{
  return MEMORY[0x24BED4440](this);
}

uint64_t ice::Client::regIndicationInternal()
{
  return MEMORY[0x24BED4448]();
}

uint64_t ice::Client::regEventHandlerInternal()
{
  return MEMORY[0x24BED4450]();
}

uint64_t ice::Client::stop(ice::Client *this, group *a2)
{
  return MEMORY[0x24BED4458](this, a2);
}

uint64_t ice::Client::start(ice::Client *this)
{
  return MEMORY[0x24BED4460](this);
}

uint64_t ice::Client::create()
{
  return MEMORY[0x24BED4468]();
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x24BED9D68]();
}

{
  return MEMORY[0x24BED9D78]();
}

{
  return MEMORY[0x24BED9D80]();
}

{
  return MEMORY[0x24BED9D90]();
}

{
  return MEMORY[0x24BED9D98]();
}

{
  return MEMORY[0x24BED9DA8]();
}

uint64_t coex::CommandDriver::CommandDriver()
{
  return MEMORY[0x24BED3768]();
}

uint64_t coex::util::data_to_uint64()
{
  return MEMORY[0x24BED3770]();
}

uint64_t cpms::CommandDriver::CommandDriver()
{
  return MEMORY[0x24BED3778]();
}

uint64_t radio::CommandDriver::getSimSlotInfo()
{
  return MEMORY[0x24BED37B0]();
}

uint64_t radio::CommandDriver::handleClientStateChanged_sync(radio::CommandDriver *this)
{
  return MEMORY[0x24BED3830](this);
}

uint64_t radio::CommandDriver::handleOperatingModeChanged_sync()
{
  return MEMORY[0x24BED3840]();
}

uint64_t radio::CommandDriver::CommandDriver()
{
  return MEMORY[0x24BED3860]();
}

uint64_t radio::RFSCommandDriver::RFSCommandDriver()
{
  return MEMORY[0x24BED38A8]();
}

void radio::RFSCommandDriver::~RFSCommandDriver(radio::RFSCommandDriver *this)
{
  MEMORY[0x24BED38B0](this);
}

uint64_t radio::OpMode::create(radio::OpMode *this)
{
  return MEMORY[0x24BED3930](this);
}

uint64_t AriOsa::LogSrcInfo(AriOsa *this, const char *a2, const char *a3)
{
  return MEMORY[0x24BECE8C0](this, a2, a3);
}

uint64_t AriSdk::ARI_CsiIceSarReq_SDK::ARI_CsiIceSarReq_SDK(AriSdk::ARI_CsiIceSarReq_SDK *this)
{
  return MEMORY[0x24BECE928](this);
}

void AriSdk::ARI_CsiIceSarReq_SDK::~ARI_CsiIceSarReq_SDK(AriSdk::ARI_CsiIceSarReq_SDK *this)
{
  MEMORY[0x24BECE930](this);
}

uint64_t AriSdk::ARI_CsiFpRegister_SDK::ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  return MEMORY[0x24BECE948](this);
}

void AriSdk::ARI_CsiFpRegister_SDK::~ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  MEMORY[0x24BECE950](this);
}

uint64_t AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK(AriSdk::ARI_CsiIceCltmReq_SDK *this)
{
  return MEMORY[0x24BECE958](this);
}

void AriSdk::ARI_CsiIceCltmReq_SDK::~ARI_CsiIceCltmReq_SDK(AriSdk::ARI_CsiIceCltmReq_SDK *this)
{
  MEMORY[0x24BECE960](this);
}

uint64_t AriSdk::ARI_CsiModeGetReq_SDK::ARI_CsiModeGetReq_SDK(AriSdk::ARI_CsiModeGetReq_SDK *this)
{
  return MEMORY[0x24BECE968](this);
}

void AriSdk::ARI_CsiModeGetReq_SDK::~ARI_CsiModeGetReq_SDK(AriSdk::ARI_CsiModeGetReq_SDK *this)
{
  MEMORY[0x24BECE970](this);
}

uint64_t AriSdk::ARI_CsiModeSetReq_SDK::ARI_CsiModeSetReq_SDK(AriSdk::ARI_CsiModeSetReq_SDK *this)
{
  return MEMORY[0x24BECE978](this);
}

void AriSdk::ARI_CsiModeSetReq_SDK::~ARI_CsiModeSetReq_SDK(AriSdk::ARI_CsiModeSetReq_SDK *this)
{
  MEMORY[0x24BECE980](this);
}

uint64_t AriSdk::ARI_CsiXsioGetReq_SDK::ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  return MEMORY[0x24BECE988](this);
}

void AriSdk::ARI_CsiXsioGetReq_SDK::~ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  MEMORY[0x24BECE990](this);
}

uint64_t AriSdk::ARI_CsiXsioSetReq_SDK::ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  return MEMORY[0x24BECE998](this);
}

void AriSdk::ARI_CsiXsioSetReq_SDK::~ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  MEMORY[0x24BECE9A0](this);
}

uint64_t AriSdk::ARI_IBISimTestReq_SDK::ARI_IBISimTestReq_SDK(AriSdk::ARI_IBISimTestReq_SDK *this)
{
  return MEMORY[0x24BECE9A8](this);
}

void AriSdk::ARI_IBISimTestReq_SDK::~ARI_IBISimTestReq_SDK(AriSdk::ARI_IBISimTestReq_SDK *this)
{
  MEMORY[0x24BECE9B0](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatus_SDK::ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  return MEMORY[0x24BECE9C8](this);
}

void AriSdk::ARI_CsiFpGetStatus_SDK::~ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  MEMORY[0x24BECE9D0](this);
}

uint64_t AriSdk::ARI_CsiIceSarRspCb_SDK::ARI_CsiIceSarRspCb_SDK(AriSdk::ARI_CsiIceSarRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECE9E8](this, a2);
}

void AriSdk::ARI_CsiIceSarRspCb_SDK::~ARI_CsiIceSarRspCb_SDK(AriSdk::ARI_CsiIceSarRspCb_SDK *this)
{
  MEMORY[0x24BECE9F0](this);
}

uint64_t AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  return MEMORY[0x24BECEA28](this);
}

void AriSdk::ARI_CsiAwdsQueryReq_SDK::~ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  MEMORY[0x24BECEA30](this);
}

uint64_t AriSdk::ARI_CsiBSPBBDumpInd_SDK::unpack(AriSdk::ARI_CsiBSPBBDumpInd_SDK *this)
{
  return MEMORY[0x24BECEA38](this);
}

uint64_t AriSdk::ARI_CsiBSPBBDumpInd_SDK::ARI_CsiBSPBBDumpInd_SDK(AriSdk::ARI_CsiBSPBBDumpInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEA40](this, a2);
}

void AriSdk::ARI_CsiBSPBBDumpInd_SDK::~ARI_CsiBSPBBDumpInd_SDK(AriSdk::ARI_CsiBSPBBDumpInd_SDK *this)
{
  MEMORY[0x24BECEA48](this);
}

uint64_t AriSdk::ARI_CsiIceCltmRspCb_SDK::ARI_CsiIceCltmRspCb_SDK(AriSdk::ARI_CsiIceCltmRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEA50](this, a2);
}

void AriSdk::ARI_CsiIceCltmRspCb_SDK::~ARI_CsiIceCltmRspCb_SDK(AriSdk::ARI_CsiIceCltmRspCb_SDK *this)
{
  MEMORY[0x24BECEA58](this);
}

uint64_t AriSdk::ARI_CsiModeGetRspCb_SDK::unpack(AriSdk::ARI_CsiModeGetRspCb_SDK *this)
{
  return MEMORY[0x24BECEA60](this);
}

uint64_t AriSdk::ARI_CsiModeGetRspCb_SDK::ARI_CsiModeGetRspCb_SDK(AriSdk::ARI_CsiModeGetRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEA68](this, a2);
}

void AriSdk::ARI_CsiModeGetRspCb_SDK::~ARI_CsiModeGetRspCb_SDK(AriSdk::ARI_CsiModeGetRspCb_SDK *this)
{
  MEMORY[0x24BECEA70](this);
}

uint64_t AriSdk::ARI_CsiModeSetIndCb_SDK::unpack(AriSdk::ARI_CsiModeSetIndCb_SDK *this)
{
  return MEMORY[0x24BECEA78](this);
}

uint64_t AriSdk::ARI_CsiModeSetIndCb_SDK::ARI_CsiModeSetIndCb_SDK(AriSdk::ARI_CsiModeSetIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEA80](this, a2);
}

void AriSdk::ARI_CsiModeSetIndCb_SDK::~ARI_CsiModeSetIndCb_SDK(AriSdk::ARI_CsiModeSetIndCb_SDK *this)
{
  MEMORY[0x24BECEA88](this);
}

uint64_t AriSdk::ARI_CsiXsioGetRspCb_SDK::unpack(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  return MEMORY[0x24BECEA90](this);
}

uint64_t AriSdk::ARI_CsiXsioGetRspCb_SDK::ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEA98](this, a2);
}

void AriSdk::ARI_CsiXsioGetRspCb_SDK::~ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  MEMORY[0x24BECEAA0](this);
}

uint64_t AriSdk::ARI_CsiXsioSetRspCb_SDK::unpack(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  return MEMORY[0x24BECEAA8](this);
}

uint64_t AriSdk::ARI_CsiXsioSetRspCb_SDK::ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEAB0](this, a2);
}

void AriSdk::ARI_CsiXsioSetRspCb_SDK::~ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  MEMORY[0x24BECEAB8](this);
}

uint64_t AriSdk::ARI_IBINetDetachReq_SDK::ARI_IBINetDetachReq_SDK(AriSdk::ARI_IBINetDetachReq_SDK *this)
{
  return MEMORY[0x24BECEAE0](this);
}

void AriSdk::ARI_IBINetDetachReq_SDK::~ARI_IBINetDetachReq_SDK(AriSdk::ARI_IBINetDetachReq_SDK *this)
{
  MEMORY[0x24BECEAE8](this);
}

uint64_t AriSdk::ARI_IBISimTestRspCb_SDK::ARI_IBISimTestRspCb_SDK(AriSdk::ARI_IBISimTestRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEB20](this, a2);
}

void AriSdk::ARI_IBISimTestRspCb_SDK::~ARI_IBISimTestRspCb_SDK(AriSdk::ARI_IBISimTestRspCb_SDK *this)
{
  MEMORY[0x24BECEB28](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusV2_SDK::ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  return MEMORY[0x24BECEB68](this);
}

void AriSdk::ARI_CsiFpGetStatusV2_SDK::~ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  MEMORY[0x24BECEB70](this);
}

uint64_t AriSdk::ARI_CsiFpRegisterRsp_SDK::unpack(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  return MEMORY[0x24BECEB78](this);
}

uint64_t AriSdk::ARI_CsiFpRegisterRsp_SDK::ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEB80](this, a2);
}

void AriSdk::ARI_CsiFpRegisterRsp_SDK::~ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  MEMORY[0x24BECEB88](this);
}

uint64_t AriSdk::ARI_CsiModeSetRespCb_SDK::ARI_CsiModeSetRespCb_SDK(AriSdk::ARI_CsiModeSetRespCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEB90](this, a2);
}

void AriSdk::ARI_CsiModeSetRespCb_SDK::~ARI_CsiModeSetRespCb_SDK(AriSdk::ARI_CsiModeSetRespCb_SDK *this)
{
  MEMORY[0x24BECEB98](this);
}

uint64_t AriSdk::ARI_CsiSecGetSNUMReq_SDK::ARI_CsiSecGetSNUMReq_SDK(AriSdk::ARI_CsiSecGetSNUMReq_SDK *this)
{
  return MEMORY[0x24BECEBA0](this);
}

void AriSdk::ARI_CsiSecGetSNUMReq_SDK::~ARI_CsiSecGetSNUMReq_SDK(AriSdk::ARI_CsiSecGetSNUMReq_SDK *this)
{
  MEMORY[0x24BECEBA8](this);
}

uint64_t AriSdk::ARI_IBIMccSettingReq_SDK::ARI_IBIMccSettingReq_SDK(AriSdk::ARI_IBIMccSettingReq_SDK *this)
{
  return MEMORY[0x24BECEBD0](this);
}

void AriSdk::ARI_IBIMccSettingReq_SDK::~ARI_IBIMccSettingReq_SDK(AriSdk::ARI_IBIMccSettingReq_SDK *this)
{
  MEMORY[0x24BECEBD8](this);
}

uint64_t AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  return MEMORY[0x24BECEC48](this);
}

uint64_t AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEC50](this, a2);
}

void AriSdk::ARI_CsiAwdsQueryRspCb_SDK::~ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  MEMORY[0x24BECEC58](this);
}

uint64_t AriSdk::ARI_CsiBspShutdownReq_SDK::ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  return MEMORY[0x24BECEC60](this);
}

void AriSdk::ARI_CsiBspShutdownReq_SDK::~ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  MEMORY[0x24BECEC68](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRsp_SDK::unpack(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  return MEMORY[0x24BECEC70](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRsp_SDK::ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEC78](this, a2);
}

void AriSdk::ARI_CsiFpGetStatusRsp_SDK::~ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  MEMORY[0x24BECEC80](this);
}

uint64_t AriSdk::ARI_CsiIceCaEnableReq_SDK::ARI_CsiIceCaEnableReq_SDK(AriSdk::ARI_CsiIceCaEnableReq_SDK *this)
{
  return MEMORY[0x24BECEC88](this);
}

void AriSdk::ARI_CsiIceCaEnableReq_SDK::~ARI_CsiIceCaEnableReq_SDK(AriSdk::ARI_CsiIceCaEnableReq_SDK *this)
{
  MEMORY[0x24BECEC90](this);
}

uint64_t AriSdk::ARI_CsiIceGpsStateReq_SDK::ARI_CsiIceGpsStateReq_SDK(AriSdk::ARI_CsiIceGpsStateReq_SDK *this)
{
  return MEMORY[0x24BECEC98](this);
}

void AriSdk::ARI_CsiIceGpsStateReq_SDK::~ARI_CsiIceGpsStateReq_SDK(AriSdk::ARI_CsiIceGpsStateReq_SDK *this)
{
  MEMORY[0x24BECECA0](this);
}

uint64_t AriSdk::ARI_IBINetDetachRspCb_SDK::ARI_IBINetDetachRspCb_SDK(AriSdk::ARI_IBINetDetachRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECED18](this, a2);
}

void AriSdk::ARI_IBINetDetachRspCb_SDK::~ARI_IBINetDetachRspCb_SDK(AriSdk::ARI_IBINetDetachRspCb_SDK *this)
{
  MEMORY[0x24BECED20](this);
}

uint64_t AriSdk::ARI_TraceSetConfigReq_SDK::ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  return MEMORY[0x24BECEE28](this);
}

void AriSdk::ARI_TraceSetConfigReq_SDK::~ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  MEMORY[0x24BECEE30](this);
}

uint64_t AriSdk::ARI_CsiIceArfcnLockReq_SDK::ARI_CsiIceArfcnLockReq_SDK(AriSdk::ARI_CsiIceArfcnLockReq_SDK *this)
{
  return MEMORY[0x24BECEE48](this);
}

void AriSdk::ARI_CsiIceArfcnLockReq_SDK::~ARI_CsiIceArfcnLockReq_SDK(AriSdk::ARI_CsiIceArfcnLockReq_SDK *this)
{
  MEMORY[0x24BECEE50](this);
}

uint64_t AriSdk::ARI_CsiIceBBTxStateInd_SDK::unpack(AriSdk::ARI_CsiIceBBTxStateInd_SDK *this)
{
  return MEMORY[0x24BECEE58](this);
}

uint64_t AriSdk::ARI_CsiIceBBTxStateInd_SDK::ARI_CsiIceBBTxStateInd_SDK(AriSdk::ARI_CsiIceBBTxStateInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEE60](this, a2);
}

void AriSdk::ARI_CsiIceBBTxStateInd_SDK::~ARI_CsiIceBBTxStateInd_SDK(AriSdk::ARI_CsiIceBBTxStateInd_SDK *this)
{
  MEMORY[0x24BECEE68](this);
}

uint64_t AriSdk::ARI_CsiIceGripStateReq_SDK::ARI_CsiIceGripStateReq_SDK(AriSdk::ARI_CsiIceGripStateReq_SDK *this)
{
  return MEMORY[0x24BECEE70](this);
}

void AriSdk::ARI_CsiIceGripStateReq_SDK::~ARI_CsiIceGripStateReq_SDK(AriSdk::ARI_CsiIceGripStateReq_SDK *this)
{
  MEMORY[0x24BECEE78](this);
}

uint64_t AriSdk::ARI_CsiIceSarEnableReq_SDK::ARI_CsiIceSarEnableReq_SDK(AriSdk::ARI_CsiIceSarEnableReq_SDK *this)
{
  return MEMORY[0x24BECEE80](this);
}

void AriSdk::ARI_CsiIceSarEnableReq_SDK::~ARI_CsiIceSarEnableReq_SDK(AriSdk::ARI_CsiIceSarEnableReq_SDK *this)
{
  MEMORY[0x24BECEE88](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRadio1Req_SDK::ARI_CsiIdcSetRadio1Req_SDK(AriSdk::ARI_CsiIdcSetRadio1Req_SDK *this)
{
  return MEMORY[0x24BECEE90](this);
}

void AriSdk::ARI_CsiIdcSetRadio1Req_SDK::~ARI_CsiIdcSetRadio1Req_SDK(AriSdk::ARI_CsiIdcSetRadio1Req_SDK *this)
{
  MEMORY[0x24BECEE98](this);
}

uint64_t AriSdk::ARI_CsiSecGetChipIdReq_SDK::ARI_CsiSecGetChipIdReq_SDK(AriSdk::ARI_CsiSecGetChipIdReq_SDK *this)
{
  return MEMORY[0x24BECEEA0](this);
}

void AriSdk::ARI_CsiSecGetChipIdReq_SDK::~ARI_CsiSecGetChipIdReq_SDK(AriSdk::ARI_CsiSecGetChipIdReq_SDK *this)
{
  MEMORY[0x24BECEEA8](this);
}

uint64_t AriSdk::ARI_CsiSecGetPkHashReq_SDK::ARI_CsiSecGetPkHashReq_SDK(AriSdk::ARI_CsiSecGetPkHashReq_SDK *this)
{
  return MEMORY[0x24BECEEB0](this);
}

void AriSdk::ARI_CsiSecGetPkHashReq_SDK::~ARI_CsiSecGetPkHashReq_SDK(AriSdk::ARI_CsiSecGetPkHashReq_SDK *this)
{
  MEMORY[0x24BECEEB8](this);
}

uint64_t AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *this)
{
  return MEMORY[0x24BECEEC0](this);
}

uint64_t AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::ARI_CsiSecGetSNUMRspCb_SDK(AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEEC8](this, a2);
}

void AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::~ARI_CsiSecGetSNUMRspCb_SDK(AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *this)
{
  MEMORY[0x24BECEED0](this);
}

uint64_t AriSdk::ARI_CsiSysGetInfoReqV2_SDK::ARI_CsiSysGetInfoReqV2_SDK(AriSdk::ARI_CsiSysGetInfoReqV2_SDK *this)
{
  return MEMORY[0x24BECEED8](this);
}

void AriSdk::ARI_CsiSysGetInfoReqV2_SDK::~ARI_CsiSysGetInfoReqV2_SDK(AriSdk::ARI_CsiSysGetInfoReqV2_SDK *this)
{
  MEMORY[0x24BECEEE0](this);
}

uint64_t AriSdk::ARI_IBIMccSettingRspCb_SDK::unpack(AriSdk::ARI_IBIMccSettingRspCb_SDK *this)
{
  return MEMORY[0x24BECEF40](this);
}

uint64_t AriSdk::ARI_IBIMccSettingRspCb_SDK::ARI_IBIMccSettingRspCb_SDK(AriSdk::ARI_IBIMccSettingRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECEF48](this, a2);
}

void AriSdk::ARI_IBIMccSettingRspCb_SDK::~ARI_IBIMccSettingRspCb_SDK(AriSdk::ARI_IBIMccSettingRspCb_SDK *this)
{
  MEMORY[0x24BECEF50](this);
}

uint64_t AriSdk::ARI_TraceOutputIdleInd_SDK::unpack(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  return MEMORY[0x24BECF0C0](this);
}

uint64_t AriSdk::ARI_TraceOutputIdleInd_SDK::ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF0C8](this, a2);
}

void AriSdk::ARI_TraceOutputIdleInd_SDK::~ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  MEMORY[0x24BECF0D0](this);
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigReq_SDK::ARI_CsiAwdsAddConfigReq_SDK(AriSdk::ARI_CsiAwdsAddConfigReq_SDK *this)
{
  return MEMORY[0x24BECF0D8](this);
}

void AriSdk::ARI_CsiAwdsAddConfigReq_SDK::~ARI_CsiAwdsAddConfigReq_SDK(AriSdk::ARI_CsiAwdsAddConfigReq_SDK *this)
{
  MEMORY[0x24BECF0E0](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubInd_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  return MEMORY[0x24BECF0E8](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubInd_SDK::ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF0F0](this, a2);
}

void AriSdk::ARI_CsiAwdsMetricSubInd_SDK::~ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  MEMORY[0x24BECF0F8](this);
}

uint64_t AriSdk::ARI_CsiBspShutdownRspCb_SDK::ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF100](this, a2);
}

void AriSdk::ARI_CsiBspShutdownRspCb_SDK::~ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this)
{
  MEMORY[0x24BECF108](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRspV2_SDK::unpack(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  return MEMORY[0x24BECF110](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRspV2_SDK::ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF118](this, a2);
}

void AriSdk::ARI_CsiFpGetStatusRspV2_SDK::~ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  MEMORY[0x24BECF120](this);
}

uint64_t AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::unpack(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  return MEMORY[0x24BECF128](this);
}

uint64_t AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF130](this, a2);
}

void AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::~ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  MEMORY[0x24BECF138](this);
}

uint64_t AriSdk::ARI_CsiGetSystemTimeReq_SDK::ARI_CsiGetSystemTimeReq_SDK(AriSdk::ARI_CsiGetSystemTimeReq_SDK *this)
{
  return MEMORY[0x24BECF140](this);
}

void AriSdk::ARI_CsiGetSystemTimeReq_SDK::~ARI_CsiGetSystemTimeReq_SDK(AriSdk::ARI_CsiGetSystemTimeReq_SDK *this)
{
  MEMORY[0x24BECF148](this);
}

uint64_t AriSdk::ARI_CsiIceCaEnableRspCb_SDK::unpack(AriSdk::ARI_CsiIceCaEnableRspCb_SDK *this)
{
  return MEMORY[0x24BECF150](this);
}

uint64_t AriSdk::ARI_CsiIceCaEnableRspCb_SDK::ARI_CsiIceCaEnableRspCb_SDK(AriSdk::ARI_CsiIceCaEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF158](this, a2);
}

void AriSdk::ARI_CsiIceCaEnableRspCb_SDK::~ARI_CsiIceCaEnableRspCb_SDK(AriSdk::ARI_CsiIceCaEnableRspCb_SDK *this)
{
  MEMORY[0x24BECF160](this);
}

uint64_t AriSdk::ARI_CsiIceGpsStateRspCb_SDK::unpack(AriSdk::ARI_CsiIceGpsStateRspCb_SDK *this)
{
  return MEMORY[0x24BECF178](this);
}

uint64_t AriSdk::ARI_CsiIceGpsStateRspCb_SDK::ARI_CsiIceGpsStateRspCb_SDK(AriSdk::ARI_CsiIceGpsStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF180](this, a2);
}

void AriSdk::ARI_CsiIceGpsStateRspCb_SDK::~ARI_CsiIceGpsStateRspCb_SDK(AriSdk::ARI_CsiIceGpsStateRspCb_SDK *this)
{
  MEMORY[0x24BECF188](this);
}

uint64_t AriSdk::ARI_CsiTraceModeInitReq_SDK::ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  return MEMORY[0x24BECF1A0](this);
}

void AriSdk::ARI_CsiTraceModeInitReq_SDK::~ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  MEMORY[0x24BECF1A8](this);
}

uint64_t AriSdk::ARI_TraceSetConfigRspCb_SDK::unpack(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  return MEMORY[0x24BECF328](this);
}

uint64_t AriSdk::ARI_TraceSetConfigRspCb_SDK::ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF330](this, a2);
}

void AriSdk::ARI_TraceSetConfigRspCb_SDK::~ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  MEMORY[0x24BECF338](this);
}

uint64_t AriSdk::ARI_CsiGetSystemTimeResp_SDK::unpack(AriSdk::ARI_CsiGetSystemTimeResp_SDK *this)
{
  return MEMORY[0x24BECF340](this);
}

uint64_t AriSdk::ARI_CsiGetSystemTimeResp_SDK::ARI_CsiGetSystemTimeResp_SDK(AriSdk::ARI_CsiGetSystemTimeResp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF348](this, a2);
}

void AriSdk::ARI_CsiGetSystemTimeResp_SDK::~ARI_CsiGetSystemTimeResp_SDK(AriSdk::ARI_CsiGetSystemTimeResp_SDK *this)
{
  MEMORY[0x24BECF350](this);
}

uint64_t AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::unpack(AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *this)
{
  return MEMORY[0x24BECF368](this);
}

uint64_t AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::ARI_CsiIceArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF370](this, a2);
}

void AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::~ARI_CsiIceArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *this)
{
  MEMORY[0x24BECF378](this);
}

uint64_t AriSdk::ARI_CsiIceArtdSettingReq_SDK::ARI_CsiIceArtdSettingReq_SDK(AriSdk::ARI_CsiIceArtdSettingReq_SDK *this)
{
  return MEMORY[0x24BECF380](this);
}

void AriSdk::ARI_CsiIceArtdSettingReq_SDK::~ARI_CsiIceArtdSettingReq_SDK(AriSdk::ARI_CsiIceArtdSettingReq_SDK *this)
{
  MEMORY[0x24BECF388](this);
}

uint64_t AriSdk::ARI_CsiIceGetCaEnableReq_SDK::ARI_CsiIceGetCaEnableReq_SDK(AriSdk::ARI_CsiIceGetCaEnableReq_SDK *this)
{
  return MEMORY[0x24BECF3A0](this);
}

void AriSdk::ARI_CsiIceGetCaEnableReq_SDK::~ARI_CsiIceGetCaEnableReq_SDK(AriSdk::ARI_CsiIceGetCaEnableReq_SDK *this)
{
  MEMORY[0x24BECF3A8](this);
}

uint64_t AriSdk::ARI_CsiIceGripStateRspCb_SDK::ARI_CsiIceGripStateRspCb_SDK(AriSdk::ARI_CsiIceGripStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF3B0](this, a2);
}

void AriSdk::ARI_CsiIceGripStateRspCb_SDK::~ARI_CsiIceGripStateRspCb_SDK(AriSdk::ARI_CsiIceGripStateRspCb_SDK *this)
{
  MEMORY[0x24BECF3B8](this);
}

uint64_t AriSdk::ARI_CsiIceRxDiversityReq_SDK::ARI_CsiIceRxDiversityReq_SDK(AriSdk::ARI_CsiIceRxDiversityReq_SDK *this)
{
  return MEMORY[0x24BECF3C0](this);
}

void AriSdk::ARI_CsiIceRxDiversityReq_SDK::~ARI_CsiIceRxDiversityReq_SDK(AriSdk::ARI_CsiIceRxDiversityReq_SDK *this)
{
  MEMORY[0x24BECF3C8](this);
}

uint64_t AriSdk::ARI_CsiIceSarEnableRspCb_SDK::ARI_CsiIceSarEnableRspCb_SDK(AriSdk::ARI_CsiIceSarEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF3D0](this, a2);
}

void AriSdk::ARI_CsiIceSarEnableRspCb_SDK::~ARI_CsiIceSarEnableRspCb_SDK(AriSdk::ARI_CsiIceSarEnableRspCb_SDK *this)
{
  MEMORY[0x24BECF3D8](this);
}

uint64_t AriSdk::ARI_CsiIceSarWaitTimeReq_SDK::ARI_CsiIceSarWaitTimeReq_SDK(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK *this)
{
  return MEMORY[0x24BECF3E0](this);
}

void AriSdk::ARI_CsiIceSarWaitTimeReq_SDK::~ARI_CsiIceSarWaitTimeReq_SDK(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK *this)
{
  MEMORY[0x24BECF3E8](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRTConfigReq_SDK::ARI_CsiIdcSetRTConfigReq_SDK(AriSdk::ARI_CsiIdcSetRTConfigReq_SDK *this)
{
  return MEMORY[0x24BECF3F0](this);
}

void AriSdk::ARI_CsiIdcSetRTConfigReq_SDK::~ARI_CsiIdcSetRTConfigReq_SDK(AriSdk::ARI_CsiIdcSetRTConfigReq_SDK *this)
{
  MEMORY[0x24BECF3F8](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *this)
{
  return MEMORY[0x24BECF400](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::ARI_CsiIdcSetRadio1RspCb_SDK(AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF408](this, a2);
}

void AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::~ARI_CsiIdcSetRadio1RspCb_SDK(AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *this)
{
  MEMORY[0x24BECF410](this);
}

uint64_t AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *this)
{
  return MEMORY[0x24BECF418](this);
}

uint64_t AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::ARI_CsiSecGetChipIdRspCb_SDK(AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF420](this, a2);
}

void AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::~ARI_CsiSecGetChipIdRspCb_SDK(AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *this)
{
  MEMORY[0x24BECF428](this);
}

uint64_t AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *this)
{
  return MEMORY[0x24BECF430](this);
}

uint64_t AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::ARI_CsiSecGetPkHashRspCb_SDK(AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF438](this, a2);
}

void AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::~ARI_CsiSecGetPkHashRspCb_SDK(AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *this)
{
  MEMORY[0x24BECF440](this);
}

uint64_t AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::ARI_CsiSecReadSikPKeyReq_SDK(AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *this)
{
  return MEMORY[0x24BECF448](this);
}

void AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::~ARI_CsiSecReadSikPKeyReq_SDK(AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *this)
{
  MEMORY[0x24BECF450](this);
}

uint64_t AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::unpack(AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *this)
{
  return MEMORY[0x24BECF458](this);
}

uint64_t AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::ARI_CsiSysGetInfoRspCbV2_SDK(AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF460](this, a2);
}

void AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::~ARI_CsiSysGetInfoRspCbV2_SDK(AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *this)
{
  MEMORY[0x24BECF468](this);
}

uint64_t AriSdk::ARI_IBICPMSPowerQueryReq_SDK::ARI_IBICPMSPowerQueryReq_SDK(AriSdk::ARI_IBICPMSPowerQueryReq_SDK *this)
{
  return MEMORY[0x24BECF470](this);
}

void AriSdk::ARI_IBICPMSPowerQueryReq_SDK::~ARI_IBICPMSPowerQueryReq_SDK(AriSdk::ARI_IBICPMSPowerQueryReq_SDK *this)
{
  MEMORY[0x24BECF478](this);
}

uint64_t AriSdk::ARI_IBINetIceApStatusReq_SDK::ARI_IBINetIceApStatusReq_SDK(AriSdk::ARI_IBINetIceApStatusReq_SDK *this)
{
  return MEMORY[0x24BECF538](this);
}

void AriSdk::ARI_IBINetIceApStatusReq_SDK::~ARI_IBINetIceApStatusReq_SDK(AriSdk::ARI_IBINetIceApStatusReq_SDK *this)
{
  MEMORY[0x24BECF540](this);
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  return MEMORY[0x24BECF658](this);
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF660](this, a2);
}

void AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::~ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  MEMORY[0x24BECF668](this);
}

uint64_t AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::ARI_CsiIceGetArfcnLockReq_SDK(AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *this)
{
  return MEMORY[0x24BECF6C0](this);
}

void AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::~ARI_CsiIceGetArfcnLockReq_SDK(AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *this)
{
  MEMORY[0x24BECF6C8](this);
}

uint64_t AriSdk::ARI_CsiIceGetTxAntennaReq_SDK::ARI_CsiIceGetTxAntennaReq_SDK(AriSdk::ARI_CsiIceGetTxAntennaReq_SDK *this)
{
  return MEMORY[0x24BECF6D0](this);
}

void AriSdk::ARI_CsiIceGetTxAntennaReq_SDK::~ARI_CsiIceGetTxAntennaReq_SDK(AriSdk::ARI_CsiIceGetTxAntennaReq_SDK *this)
{
  MEMORY[0x24BECF6D8](this);
}

uint64_t AriSdk::ARI_CsiIceSetTxAntennaReq_SDK::ARI_CsiIceSetTxAntennaReq_SDK(AriSdk::ARI_CsiIceSetTxAntennaReq_SDK *this)
{
  return MEMORY[0x24BECF6F0](this);
}

void AriSdk::ARI_CsiIceSetTxAntennaReq_SDK::~ARI_CsiIceSetTxAntennaReq_SDK(AriSdk::ARI_CsiIceSetTxAntennaReq_SDK *this)
{
  MEMORY[0x24BECF6F8](this);
}

uint64_t AriSdk::ARI_CsiIceSpeakerStateReq_SDK::ARI_CsiIceSpeakerStateReq_SDK(AriSdk::ARI_CsiIceSpeakerStateReq_SDK *this)
{
  return MEMORY[0x24BECF700](this);
}

void AriSdk::ARI_CsiIceSpeakerStateReq_SDK::~ARI_CsiIceSpeakerStateReq_SDK(AriSdk::ARI_CsiIceSpeakerStateReq_SDK *this)
{
  MEMORY[0x24BECF708](this);
}

uint64_t AriSdk::ARI_CsiIceWakeupReasonReq_SDK::ARI_CsiIceWakeupReasonReq_SDK(AriSdk::ARI_CsiIceWakeupReasonReq_SDK *this)
{
  return MEMORY[0x24BECF710](this);
}

void AriSdk::ARI_CsiIceWakeupReasonReq_SDK::~ARI_CsiIceWakeupReasonReq_SDK(AriSdk::ARI_CsiIceWakeupReasonReq_SDK *this)
{
  MEMORY[0x24BECF718](this);
}

uint64_t AriSdk::ARI_CsiIdcControlEventReq_SDK::ARI_CsiIdcControlEventReq_SDK(AriSdk::ARI_CsiIdcControlEventReq_SDK *this)
{
  return MEMORY[0x24BECF720](this);
}

void AriSdk::ARI_CsiIdcControlEventReq_SDK::~ARI_CsiIdcControlEventReq_SDK(AriSdk::ARI_CsiIdcControlEventReq_SDK *this)
{
  MEMORY[0x24BECF728](this);
}

uint64_t AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK::ARI_CsiIdcSetLaaConfigReq_SDK(AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK *this)
{
  return MEMORY[0x24BECF730](this);
}

void AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK::~ARI_CsiIdcSetLaaConfigReq_SDK(AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK *this)
{
  MEMORY[0x24BECF738](this);
}

uint64_t AriSdk::ARI_CsiSecGetRandomNumReq_SDK::ARI_CsiSecGetRandomNumReq_SDK(AriSdk::ARI_CsiSecGetRandomNumReq_SDK *this)
{
  return MEMORY[0x24BECF758](this);
}

void AriSdk::ARI_CsiSecGetRandomNumReq_SDK::~ARI_CsiSecGetRandomNumReq_SDK(AriSdk::ARI_CsiSecGetRandomNumReq_SDK *this)
{
  MEMORY[0x24BECF760](this);
}

uint64_t AriSdk::ARI_CsiTraceModeInitRspCb_SDK::unpack(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  return MEMORY[0x24BECF768](this);
}

uint64_t AriSdk::ARI_CsiTraceModeInitRspCb_SDK::ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECF770](this, a2);
}

void AriSdk::ARI_CsiTraceModeInitRspCb_SDK::~ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  MEMORY[0x24BECF778](this);
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  return MEMORY[0x24BECF9E0](this);
}

void AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::~ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  MEMORY[0x24BECF9E8](this);
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  return MEMORY[0x24BECF9F0](this);
}

void AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::~ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  MEMORY[0x24BECF9F8](this);
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  return MEMORY[0x24BECFA00](this);
}

void AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::~ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  MEMORY[0x24BECFA08](this);
}

uint64_t AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::unpack(AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *this)
{
  return MEMORY[0x24BECFA28](this);
}

uint64_t AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::ARI_CsiIceArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFA30](this, a2);
}

void AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::~ARI_CsiIceArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *this)
{
  MEMORY[0x24BECFA38](this);
}

uint64_t AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *this)
{
  return MEMORY[0x24BECFA40](this);
}

uint64_t AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::ARI_CsiIceGetCaEnableRspCb_SDK(AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFA48](this, a2);
}

void AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::~ARI_CsiIceGetCaEnableRspCb_SDK(AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *this)
{
  MEMORY[0x24BECFA50](this);
}

uint64_t AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::unpack(AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *this)
{
  return MEMORY[0x24BECFA58](this);
}

uint64_t AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::ARI_CsiIceRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFA60](this, a2);
}

void AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::~ARI_CsiIceRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *this)
{
  MEMORY[0x24BECFA68](this);
}

uint64_t AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK::ARI_CsiIceSarWaitTimeRspCb_SDK(AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFA70](this, a2);
}

void AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK::~ARI_CsiIceSarWaitTimeRspCb_SDK(AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK *this)
{
  MEMORY[0x24BECFA78](this);
}

uint64_t AriSdk::ARI_CsiIdcGetCellConfigReq_SDK::ARI_CsiIdcGetCellConfigReq_SDK(AriSdk::ARI_CsiIdcGetCellConfigReq_SDK *this)
{
  return MEMORY[0x24BECFA80](this);
}

void AriSdk::ARI_CsiIdcGetCellConfigReq_SDK::~ARI_CsiIdcGetCellConfigReq_SDK(AriSdk::ARI_CsiIdcGetCellConfigReq_SDK *this)
{
  MEMORY[0x24BECFA88](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK::ARI_CsiIdcRTSetScanFreqReq_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK *this)
{
  return MEMORY[0x24BECFA90](this);
}

void AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK::~ARI_CsiIdcRTSetScanFreqReq_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK *this)
{
  MEMORY[0x24BECFA98](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *this)
{
  return MEMORY[0x24BECFAA0](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::ARI_CsiIdcSetRTConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFAA8](this, a2);
}

void AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::~ARI_CsiIdcSetRTConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *this)
{
  MEMORY[0x24BECFAB0](this);
}

uint64_t AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK::ARI_CsiIdcSetWifiStatusReq_SDK(AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK *this)
{
  return MEMORY[0x24BECFAB8](this);
}

void AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK::~ARI_CsiIdcSetWifiStatusReq_SDK(AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK *this)
{
  MEMORY[0x24BECFAC0](this);
}

uint64_t AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::unpack(AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *this)
{
  return MEMORY[0x24BECFAC8](this);
}

uint64_t AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::ARI_CsiSecReadSikPKeyRspCb_SDK(AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFAD0](this, a2);
}

void AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::~ARI_CsiSecReadSikPKeyRspCb_SDK(AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *this)
{
  MEMORY[0x24BECFAD8](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileInitReq_SDK::ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  return MEMORY[0x24BECFAE0](this);
}

void AriSdk::ARI_CsiTraceProfileInitReq_SDK::~ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  MEMORY[0x24BECFAE8](this);
}

uint64_t AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::unpack(AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *this)
{
  return MEMORY[0x24BECFAF0](this);
}

uint64_t AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::ARI_IBICPMSPowerQueryRspCb_SDK(AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFAF8](this, a2);
}

void AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::~ARI_IBICPMSPowerQueryRspCb_SDK(AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *this)
{
  MEMORY[0x24BECFB00](this);
}

uint64_t AriSdk::ARI_IBINetIceApStatusRspCb_SDK::ARI_IBINetIceApStatusRspCb_SDK(AriSdk::ARI_IBINetIceApStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFC00](this, a2);
}

void AriSdk::ARI_IBINetIceApStatusRspCb_SDK::~ARI_IBINetIceApStatusRspCb_SDK(AriSdk::ARI_IBINetIceApStatusRspCb_SDK *this)
{
  MEMORY[0x24BECFC08](this);
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateReq_SDK::ARI_CsiIceAccessoryStateReq_SDK(AriSdk::ARI_CsiIceAccessoryStateReq_SDK *this)
{
  return MEMORY[0x24BECFE30](this);
}

void AriSdk::ARI_CsiIceAccessoryStateReq_SDK::~ARI_CsiIceAccessoryStateReq_SDK(AriSdk::ARI_CsiIceAccessoryStateReq_SDK *this)
{
  MEMORY[0x24BECFE38](this);
}

uint64_t AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *this)
{
  return MEMORY[0x24BECFE68](this);
}

uint64_t AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::ARI_CsiIceGetArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFE70](this, a2);
}

void AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::~ARI_CsiIceGetArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *this)
{
  MEMORY[0x24BECFE78](this);
}

uint64_t AriSdk::ARI_CsiIceGetArtdSettingReq_SDK::ARI_CsiIceGetArtdSettingReq_SDK(AriSdk::ARI_CsiIceGetArtdSettingReq_SDK *this)
{
  return MEMORY[0x24BECFE80](this);
}

void AriSdk::ARI_CsiIceGetArtdSettingReq_SDK::~ARI_CsiIceGetArtdSettingReq_SDK(AriSdk::ARI_CsiIceGetArtdSettingReq_SDK *this)
{
  MEMORY[0x24BECFE88](this);
}

uint64_t AriSdk::ARI_CsiIceGetRxDiversityReq_SDK::ARI_CsiIceGetRxDiversityReq_SDK(AriSdk::ARI_CsiIceGetRxDiversityReq_SDK *this)
{
  return MEMORY[0x24BECFE90](this);
}

void AriSdk::ARI_CsiIceGetRxDiversityReq_SDK::~ARI_CsiIceGetRxDiversityReq_SDK(AriSdk::ARI_CsiIceGetRxDiversityReq_SDK *this)
{
  MEMORY[0x24BECFE98](this);
}

uint64_t AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *this)
{
  return MEMORY[0x24BECFEA0](this);
}

uint64_t AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::ARI_CsiIceGetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFEA8](this, a2);
}

void AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::~ARI_CsiIceGetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *this)
{
  MEMORY[0x24BECFEB0](this);
}

uint64_t AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::unpack(AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *this)
{
  return MEMORY[0x24BECFEC8](this);
}

uint64_t AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::ARI_CsiIceSetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFED0](this, a2);
}

void AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::~ARI_CsiIceSetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *this)
{
  MEMORY[0x24BECFED8](this);
}

uint64_t AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK::ARI_CsiIceSpeakerStateRspCb_SDK(AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFEE0](this, a2);
}

void AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK::~ARI_CsiIceSpeakerStateRspCb_SDK(AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK *this)
{
  MEMORY[0x24BECFEE8](this);
}

uint64_t AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::unpack(AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *this)
{
  return MEMORY[0x24BECFEF0](this);
}

uint64_t AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::ARI_CsiIceWakeupReasonRspCb_SDK(AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFEF8](this, a2);
}

void AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::~ARI_CsiIceWakeupReasonRspCb_SDK(AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *this)
{
  MEMORY[0x24BECFF00](this);
}

uint64_t AriSdk::ARI_CsiIdcControlEventRspCb_SDK::unpack(AriSdk::ARI_CsiIdcControlEventRspCb_SDK *this)
{
  return MEMORY[0x24BECFF08](this);
}

uint64_t AriSdk::ARI_CsiIdcControlEventRspCb_SDK::ARI_CsiIdcControlEventRspCb_SDK(AriSdk::ARI_CsiIdcControlEventRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFF10](this, a2);
}

void AriSdk::ARI_CsiIdcControlEventRspCb_SDK::~ARI_CsiIdcControlEventRspCb_SDK(AriSdk::ARI_CsiIdcControlEventRspCb_SDK *this)
{
  MEMORY[0x24BECFF18](this);
}

uint64_t AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *this)
{
  return MEMORY[0x24BECFF20](this);
}

uint64_t AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::ARI_CsiIdcSetLaaConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFF28](this, a2);
}

void AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::~ARI_CsiIdcSetLaaConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *this)
{
  MEMORY[0x24BECFF30](this);
}

uint64_t AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *this)
{
  return MEMORY[0x24BECFF38](this);
}

uint64_t AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::ARI_CsiSecGetRandomNumRspCb_SDK(AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BECFF40](this, a2);
}

void AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::~ARI_CsiSecGetRandomNumRspCb_SDK(AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *this)
{
  MEMORY[0x24BECFF48](this);
}

uint64_t AriSdk::ARI_IBICpsHealthActivityReq_SDK::ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  return MEMORY[0x24BED00B8](this);
}

void AriSdk::ARI_IBICpsHealthActivityReq_SDK::~ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  MEMORY[0x24BED00C0](this);
}

uint64_t AriSdk::ARI_IBICpsHealthActivityRsp_SDK::unpack(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  return MEMORY[0x24BED00C8](this);
}

uint64_t AriSdk::ARI_IBICpsHealthActivityRsp_SDK::ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED00D0](this, a2);
}

void AriSdk::ARI_IBICpsHealthActivityRsp_SDK::~ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  MEMORY[0x24BED00D8](this);
}

uint64_t AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK::ARI_IBIStwSarBackoffTimeReq_SDK(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK *this)
{
  return MEMORY[0x24BED0250](this);
}

void AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK::~ARI_IBIStwSarBackoffTimeReq_SDK(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK *this)
{
  MEMORY[0x24BED0258](this);
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  return MEMORY[0x24BED0298](this);
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED02A0](this, a2);
}

void AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::~ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  MEMORY[0x24BED02A8](this);
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  return MEMORY[0x24BED02B0](this);
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED02B8](this, a2);
}

void AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::~ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  MEMORY[0x24BED02C0](this);
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  return MEMORY[0x24BED02C8](this);
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED02D0](this, a2);
}

void AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::~ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  MEMORY[0x24BED02D8](this);
}

uint64_t AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::unpack(AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *this)
{
  return MEMORY[0x24BED0320](this);
}

uint64_t AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::ARI_CsiIdcGetCellConfigRspCb_SDK(AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0328](this, a2);
}

void AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::~ARI_CsiIdcGetCellConfigRspCb_SDK(AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *this)
{
  MEMORY[0x24BED0330](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::unpack(AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *this)
{
  return MEMORY[0x24BED0338](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::ARI_CsiIdcRTSetScanFreqRspCb_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0340](this, a2);
}

void AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::~ARI_CsiIdcRTSetScanFreqRspCb_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *this)
{
  MEMORY[0x24BED0348](this);
}

uint64_t AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK::ARI_CsiIdcSetTxPowerLimitReq_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK *this)
{
  return MEMORY[0x24BED0350](this);
}

void AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK::~ARI_CsiIdcSetTxPowerLimitReq_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK *this)
{
  MEMORY[0x24BED0358](this);
}

uint64_t AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *this)
{
  return MEMORY[0x24BED0360](this);
}

uint64_t AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::ARI_CsiIdcSetWifiStatusRspCb_SDK(AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0368](this, a2);
}

void AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::~ARI_CsiIdcSetWifiStatusRspCb_SDK(AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *this)
{
  MEMORY[0x24BED0370](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  return MEMORY[0x24BED0388](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0390](this, a2);
}

void AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::~ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  MEMORY[0x24BED0398](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  return MEMORY[0x24BED03A0](this);
}

void AriSdk::ARI_CsiTraceProfileSelectReq_SDK::~ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  MEMORY[0x24BED03A8](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  return MEMORY[0x24BED0650](this);
}

void AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::~ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  MEMORY[0x24BED0658](this);
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK::ARI_CsiIceAccessoryStateRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0688](this, a2);
}

void AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK::~ARI_CsiIceAccessoryStateRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK *this)
{
  MEMORY[0x24BED0690](this);
}

uint64_t AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *this)
{
  return MEMORY[0x24BED06B0](this);
}

uint64_t AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::ARI_CsiIceGetArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED06B8](this, a2);
}

void AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::~ARI_CsiIceGetArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *this)
{
  MEMORY[0x24BED06C0](this);
}

uint64_t AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *this)
{
  return MEMORY[0x24BED06C8](this);
}

uint64_t AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::ARI_CsiIceGetRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED06D0](this, a2);
}

void AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::~ARI_CsiIceGetRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *this)
{
  MEMORY[0x24BED06D8](this);
}

uint64_t AriSdk::ARI_CsiIcePowerSourceStateReq_SDK::ARI_CsiIcePowerSourceStateReq_SDK(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK *this)
{
  return MEMORY[0x24BED06E0](this);
}

void AriSdk::ARI_CsiIcePowerSourceStateReq_SDK::~ARI_CsiIcePowerSourceStateReq_SDK(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK *this)
{
  MEMORY[0x24BED06E8](this);
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  return MEMORY[0x24BED06F0](this);
}

void AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::~ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  MEMORY[0x24BED06F8](this);
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateReq_SDK::ARI_IBICallPsTransmitStateReq_SDK(AriSdk::ARI_IBICallPsTransmitStateReq_SDK *this)
{
  return MEMORY[0x24BED07E8](this);
}

void AriSdk::ARI_IBICallPsTransmitStateReq_SDK::~ARI_IBICallPsTransmitStateReq_SDK(AriSdk::ARI_IBICallPsTransmitStateReq_SDK *this)
{
  MEMORY[0x24BED07F0](this);
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  return MEMORY[0x24BED08B8](this);
}

void AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::~ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  MEMORY[0x24BED08C0](this);
}

uint64_t AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK::ARI_IBIStwSarBackoffTimeRspCb_SDK(AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED09C0](this, a2);
}

void AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK::~ARI_IBIStwSarBackoffTimeRspCb_SDK(AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK *this)
{
  MEMORY[0x24BED09C8](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  return MEMORY[0x24BED0A00](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0A08](this, a2);
}

void AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::~ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  MEMORY[0x24BED0A10](this);
}

uint64_t AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::ARI_CsiIceGetManifestStatusReq_SDK(AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *this)
{
  return MEMORY[0x24BED0A30](this);
}

void AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::~ARI_CsiIceGetManifestStatusReq_SDK(AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *this)
{
  MEMORY[0x24BED0A38](this);
}

uint64_t AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::unpack(AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *this)
{
  return MEMORY[0x24BED0A40](this);
}

uint64_t AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::ARI_CsiIdcCellConfigEventIndCb_SDK(AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0A48](this, a2);
}

void AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::~ARI_CsiIdcCellConfigEventIndCb_SDK(AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *this)
{
  MEMORY[0x24BED0A50](this);
}

uint64_t AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *this)
{
  return MEMORY[0x24BED0A58](this);
}

uint64_t AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::ARI_CsiIdcSetTxPowerLimitRspCb_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0A60](this, a2);
}

void AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::~ARI_CsiIdcSetTxPowerLimitRspCb_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *this)
{
  MEMORY[0x24BED0A68](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  return MEMORY[0x24BED0A80](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0A88](this, a2);
}

void AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::~ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  MEMORY[0x24BED0A90](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  return MEMORY[0x24BED0B98](this);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  MEMORY[0x24BED0BA0](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  return MEMORY[0x24BED0C98](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0CA0](this, a2);
}

void AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::~ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  MEMORY[0x24BED0CA8](this);
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK::ARI_CsiIceAccessoryStateArtdReq_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK *this)
{
  return MEMORY[0x24BED0CD8](this);
}

void AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK::~ARI_CsiIceAccessoryStateArtdReq_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK *this)
{
  MEMORY[0x24BED0CE0](this);
}

uint64_t AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK::ARI_CsiIceBBTxStateIndEnableReq_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK *this)
{
  return MEMORY[0x24BED0CF8](this);
}

void AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK::~ARI_CsiIceBBTxStateIndEnableReq_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK *this)
{
  MEMORY[0x24BED0D00](this);
}

uint64_t AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::unpack(AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *this)
{
  return MEMORY[0x24BED0D08](this);
}

uint64_t AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::ARI_CsiIceGetManifestStatusResp_SDK(AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0D10](this, a2);
}

void AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::~ARI_CsiIceGetManifestStatusResp_SDK(AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *this)
{
  MEMORY[0x24BED0D18](this);
}

uint64_t AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK::ARI_CsiIcePowerSourceStateRspCb_SDK(AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0D20](this, a2);
}

void AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK::~ARI_CsiIcePowerSourceStateRspCb_SDK(AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK *this)
{
  MEMORY[0x24BED0D28](this);
}

uint64_t AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::ARI_CsiSecGetRFSelfTestNonceReq_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *this)
{
  return MEMORY[0x24BED0D30](this);
}

void AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::~ARI_CsiSecGetRFSelfTestNonceReq_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *this)
{
  MEMORY[0x24BED0D38](this);
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  return MEMORY[0x24BED0D40](this);
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0D48](this, a2);
}

void AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::~ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  MEMORY[0x24BED0D50](this);
}

uint64_t AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::ARI_IBICallPsBreadButterModeReq_SDK(AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *this)
{
  return MEMORY[0x24BED0D80](this);
}

void AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::~ARI_IBICallPsBreadButterModeReq_SDK(AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *this)
{
  MEMORY[0x24BED0D88](this);
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::unpack(AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *this)
{
  return MEMORY[0x24BED0DD0](this);
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::ARI_IBICallPsTransmitStateIndCb_SDK(AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0DD8](this, a2);
}

void AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::~ARI_IBICallPsTransmitStateIndCb_SDK(AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *this)
{
  MEMORY[0x24BED0DE0](this);
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK::ARI_IBICallPsTransmitStateRspCb_SDK(AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0DE8](this, a2);
}

void AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK::~ARI_IBICallPsTransmitStateRspCb_SDK(AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK *this)
{
  MEMORY[0x24BED0DF0](this);
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED0ED0](this, a2);
}

void AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::~ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this)
{
  MEMORY[0x24BED0ED8](this);
}

uint64_t AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::unpack(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  return MEMORY[0x24BED1050](this);
}

uint64_t AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1058](this, a2);
}

void AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::~ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  MEMORY[0x24BED1060](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  return MEMORY[0x24BED1088](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1090](this, a2);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  MEMORY[0x24BED1098](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  return MEMORY[0x24BED10A0](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED10A8](this, a2);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  MEMORY[0x24BED10B0](this);
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  return MEMORY[0x24BED11B8](this);
}

void AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::~ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  MEMORY[0x24BED11C0](this);
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK::ARI_CsiIceAccessoryStateArtdRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED11E0](this, a2);
}

void AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK::~ARI_CsiIceAccessoryStateArtdRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK *this)
{
  MEMORY[0x24BED11E8](this);
}

uint64_t AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK::ARI_CsiIceBBTxStateIndEnableRspCb_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED11F0](this, a2);
}

void AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK::~ARI_CsiIceBBTxStateIndEnableRspCb_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK *this)
{
  MEMORY[0x24BED11F8](this);
}

uint64_t AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *this)
{
  return MEMORY[0x24BED1200](this);
}

uint64_t AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1208](this, a2);
}

void AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::~ARI_CsiSecGetRFSelfTestNonceRspCb_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *this)
{
  MEMORY[0x24BED1210](this);
}

uint64_t AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::ARI_IBICallPsBreadButterModeRspCb_SDK(AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1258](this, a2);
}

void AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::~ARI_IBICallPsBreadButterModeRspCb_SDK(AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *this)
{
  MEMORY[0x24BED1260](this);
}

uint64_t AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK::ARI_IBIRfSetAntennaPortMappingReq_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK *this)
{
  return MEMORY[0x24BED1398](this);
}

void AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK::~ARI_IBIRfSetAntennaPortMappingReq_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK *this)
{
  MEMORY[0x24BED13A0](this);
}

uint64_t AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::unpack(AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *this)
{
  return MEMORY[0x24BED1558](this);
}

uint64_t AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::ARI_IBIRfSetAntennaPortMappingResp_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1560](this, a2);
}

void AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::~ARI_IBIRfSetAntennaPortMappingResp_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *this)
{
  MEMORY[0x24BED1568](this);
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::unpack(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  return MEMORY[0x24BED1598](this);
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED15A0](this, a2);
}

void AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::~ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  MEMORY[0x24BED15A8](this);
}

uint64_t AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK::ARI_CsiIdcRTGetLinkQualityReportReq_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK *this)
{
  return MEMORY[0x24BED15C0](this);
}

void AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK::~ARI_CsiIdcRTGetLinkQualityReportReq_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK *this)
{
  MEMORY[0x24BED15C8](this);
}

uint64_t AriSdk::ARI_IBICallPsSignificantLocationReq_SDK::ARI_IBICallPsSignificantLocationReq_SDK(AriSdk::ARI_IBICallPsSignificantLocationReq_SDK *this)
{
  return MEMORY[0x24BED1630](this);
}

void AriSdk::ARI_IBICallPsSignificantLocationReq_SDK::~ARI_IBICallPsSignificantLocationReq_SDK(AriSdk::ARI_IBICallPsSignificantLocationReq_SDK *this)
{
  MEMORY[0x24BED1638](this);
}

uint64_t AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::unpack(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  return MEMORY[0x24BED1640](this);
}

uint64_t AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1648](this, a2);
}

void AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::~ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  MEMORY[0x24BED1650](this);
}

uint64_t AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK *this)
{
  return MEMORY[0x24BED1748](this);
}

void AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK::~ARI_CsiIceSecSendRFSelfTestTicketReq_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK *this)
{
  MEMORY[0x24BED1750](this);
}

uint64_t AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::unpack(AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *this)
{
  return MEMORY[0x24BED1828](this);
}

uint64_t AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1830](this, a2);
}

void AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::~ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *this)
{
  MEMORY[0x24BED1838](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::unpack(AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *this)
{
  return MEMORY[0x24BED1840](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1848](this, a2);
}

void AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::~ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *this)
{
  MEMORY[0x24BED1850](this);
}

uint64_t AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK::ARI_IBICallPsSignificantLocationRspCb_SDK(AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1898](this, a2);
}

void AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK::~ARI_IBICallPsSignificantLocationRspCb_SDK(AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK *this)
{
  MEMORY[0x24BED18A0](this);
}

uint64_t AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::unpack(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *this)
{
  return MEMORY[0x24BED18F0](this);
}

uint64_t AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED18F8](this, a2);
}

void AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::~ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *this)
{
  MEMORY[0x24BED1900](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK *this)
{
  return MEMORY[0x24BED1940](this);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK::~ARI_IBICallPsLoopbackTestModeConfigRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK *this)
{
  MEMORY[0x24BED1948](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK *this)
{
  return MEMORY[0x24BED1950](this);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK::~ARI_IBICallPsLoopbackTestModeStatusRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK *this)
{
  MEMORY[0x24BED1958](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::unpack(AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *this)
{
  return MEMORY[0x24BED1A90](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1A98](this, a2);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::~ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *this)
{
  MEMORY[0x24BED1AA0](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::unpack(AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *this)
{
  return MEMORY[0x24BED1AA8](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1AB0](this, a2);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::~ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *this)
{
  MEMORY[0x24BED1AB8](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK *this)
{
  return MEMORY[0x24BED1B30](this);
}

void AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK::~ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK *this)
{
  MEMORY[0x24BED1B38](this);
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  return MEMORY[0x24BED1B50](this);
}

void AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::~ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  MEMORY[0x24BED1B58](this);
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x24BED1B60](this, a2);
}

void AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::~ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this)
{
  MEMORY[0x24BED1B68](this);
}

uint64_t antenna::CommandDriver::convertModeToState()
{
  return MEMORY[0x24BED3960]();
}

uint64_t antenna::CommandDriver::CommandDriver()
{
  return MEMORY[0x24BED3968]();
}

uint64_t desense::CommandDriver::CommandDriver()
{
  return MEMORY[0x24BED3AD0]();
}

uint64_t desense::asString()
{
  return MEMORY[0x24BED3B08]();
}

uint64_t awd::AppContext::getProperties(awd::AppContext *this)
{
  return MEMORY[0x24BED3B10](this);
}

uint64_t awd::AppContext::getAppID(awd::AppContext *this)
{
  return MEMORY[0x24BED3B18](this);
}

uint64_t awd::AppContext::operator()()
{
  return MEMORY[0x24BED3B20]();
}

{
  return MEMORY[0x24BED3B28]();
}

{
  return MEMORY[0x24BED3B30]();
}

{
  return MEMORY[0x24BED3B38]();
}

uint64_t awd::AwdCommandDriver::broadcastState_sync()
{
  return MEMORY[0x24BED3B40]();
}

uint64_t awd::AwdCommandDriver::getName(awd::AwdCommandDriver *this)
{
  return MEMORY[0x24BED3B48](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x24BED9E60](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x24BED9E68](this);
}

uint64_t ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x24BED9E70](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x24BED9E78](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x24BED9E88](this, a2);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x24BED9E90](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x24BED9E98](this, a2);
}

uint64_t ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  return MEMORY[0x24BED9EA0](this, a2, a3);
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x24BED9EC0](this);
}

uint64_t ice::Client::getClientId()
{
  return MEMORY[0x24BED4478]();
}

uint64_t coex::CommandDriver::getName(coex::CommandDriver *this)
{
  return MEMORY[0x24BED3B50](this);
}

uint64_t cpms::CommandDriver::getName(cpms::CommandDriver *this)
{
  return MEMORY[0x24BED3B58](this);
}

uint64_t radio::CommandDriver::getName(radio::CommandDriver *this)
{
  return MEMORY[0x24BED3B60](this);
}

uint64_t radio::RFSCommandDriver::getName(radio::RFSCommandDriver *this)
{
  return MEMORY[0x24BED3B68](this);
}

uint64_t radio::OpMode::convertMode()
{
  return MEMORY[0x24BED3B70]();
}

uint64_t radio::OpMode::convertMode(radio::OpMode *this)
{
  return MEMORY[0x24BED3B78](this);
}

uint64_t radio::OpMode::modeToString()
{
  return MEMORY[0x24BED3B80]();
}

uint64_t AriSdk::MsgBase::getGMID(AriSdk::MsgBase *this)
{
  return MEMORY[0x24BED1DF8](this);
}

uint64_t antenna::CommandDriver::getName(antenna::CommandDriver *this)
{
  return MEMORY[0x24BED3B88](this);
}

uint64_t desense::CommandDriver::getName(desense::CommandDriver *this)
{
  return MEMORY[0x24BED3B90](this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x24BEDAA50](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

uint64_t ice::SendMsgBaseProxy::callback()
{
  return MEMORY[0x24BED4490]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x24BEDABC8](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x24BEDAE10]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF58]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x24BEDB030](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x24BEDB1A0](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB338](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24F0315F8(__p);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24F031600(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x24BDADC30](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC8](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCD8](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCF0](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDE0](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFA0](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x24BDAE010](label);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x24BDAE358](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAEAA0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAEB28](a1, a2);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x24BDAEF98](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BDAFB38](__p, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x24BDAFED0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x24BDAFF98](a1, a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x24BDB0630](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB0640](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x24BDB0660](xarray);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x24BDB06D8](value);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x24BDB0820](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x24BDB0868](bytes, length);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB08C0](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x24BDB0968](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x24BDB0A70](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x24BDB0A80](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x24BDB0AC0]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x24BDB0AE0](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x24BDB0AE8](object);
}

