double sub_20B7F8B20(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_20B7F8B30(uint64_t a1)
{
  sub_20B7F8E48((_QWORD *)(a1 + 40));
  return a1;
}

_QWORD *sub_20B7F8B58(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x20000000DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:13: MARISA_NULL_ERROR: str == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v2 = result[5];
  if (v2)
    *(_DWORD *)(v2 + 108) = 0;
  v3 = 0;
  while (*(unsigned __int8 *)(a2 + v3++))
    ;
  *result = a2;
  result[1] = v3 - 1;
  return result;
}

_QWORD *sub_20B7F8BDC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:21: MARISA_NULL_ERROR: (ptr == NULL)"
                   " && (length != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v3 = result[5];
  if (v3)
    *(_DWORD *)(v3 + 108) = 0;
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t sub_20B7F8C4C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
    *(_DWORD *)(v2 + 108) = 0;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

_QWORD *sub_20B7F8C60(uint64_t a1)
{
  uint64_t *v1;
  _OWORD *v2;
  _QWORD *result;
  _QWORD *exception;
  const char *v5;

  v1 = (uint64_t *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x100000024;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:36: MARISA_STATE_ERROR: state_.get() != NULL";
    goto LABEL_8;
  }
  v2 = operator new(0x70uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    *(_OWORD *)((char *)v2 + 25) = 0u;
    *v2 = 0u;
    v2[1] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    *(_OWORD *)((char *)v2 + 73) = 0u;
    *((_QWORD *)v2 + 12) = 0;
    *((_QWORD *)v2 + 13) = 0;
  }
  result = sub_20B7F8D40(v1, (uint64_t)v2);
  if (!*v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x800000026;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:38: MARISA_MEMORY_ERROR: state_.get() == NULL";
LABEL_8:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

_QWORD *sub_20B7F8D40(uint64_t *a1, uint64_t a2)
{
  _QWORD *exception;
  uint64_t v4;

  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = *a1;
  *a1 = a2;
  return sub_20B7F8E48(&v4);
}

_QWORD *sub_20B7F8DC0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v2 = a1[5];
  a1[4] = 0;
  a1[5] = 0;
  return sub_20B7F8E48(&v2);
}

void sub_20B7F8E1C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B7F8E40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20B7F8E48(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = v2[6];
    if (v3)
      MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
    if (*v2)
      MEMORY[0x20BD39C80](*v2, 0x1000C8077774924);
    MEMORY[0x20BD39CB0](v2, 0x1070C406A3FAA47);
  }
  return a1;
}

uint64_t sub_20B7F8EC0(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = -1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  return result;
}

uint64_t sub_20B7F8ED8(uint64_t a1)
{
  void *v2;
  int v3;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)-1)
    munmap(v2, *(_QWORD *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 != -1)
    close(v3);
  return a1;
}

uint64_t sub_20B7F8F24(__int128 *a1, char *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  _QWORD *exception;
  __int128 v9;
  __int128 v10;
  int v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000037;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:55: MARISA_NULL_ERROR: "
                   "filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = -1;
  v10 = 0uLL;
  v11 = -1;
  sub_20B7F8FEC((uint64_t)&v9, a2);
  v3 = v10;
  v4 = *a1;
  v5 = a1[1];
  *a1 = v9;
  a1[1] = v3;
  v9 = v4;
  v10 = v5;
  v6 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = v11;
  v11 = v6;
  return sub_20B7F8ED8((uint64_t)&v9);
}

void sub_20B7F8FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F8ED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_20B7F8FEC(uint64_t a1, char *a2)
{
  int v4;
  void *result;
  _QWORD *exception;
  const char *v7;
  stat v8;

  if (stat(a2, &v8))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000008DLL;
    v7 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:141: MARISA_IO_ERROR: ::stat(filename, &st) != 0";
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = v8.st_size;
  v4 = open(a2, 0);
  *(_DWORD *)(a1 + 32) = v4;
  if (v4 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000092;
    v7 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:146: MARISA_IO_ERROR: fd_ == -1";
    goto LABEL_8;
  }
  result = mmap(0, *(_QWORD *)(a1 + 24), 1, 1, v4, 0);
  *(_QWORD *)(a1 + 8) = result;
  if (result == (void *)-1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000095;
    v7 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:149: MARISA_IO_ERROR: origin_ == MAP_FAILED";
LABEL_8:
    exception[3] = v7;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t *sub_20B7F9128(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v4 = result[1];
  v3 = result[2];
  v5 = a2[2];
  result[1] = a2[1];
  result[2] = v5;
  a2[1] = v4;
  a2[2] = v3;
  v6 = result[3];
  result[3] = a2[3];
  a2[3] = v6;
  LODWORD(v6) = *((_DWORD *)result + 8);
  *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return result;
}

uint64_t sub_20B7F916C(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  int v5;
  _QWORD *exception;
  _OWORD v8[2];
  int v9;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x20000003FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:63: MARISA_NULL_ERROR: "
                   "(ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)a1 = a2;
  *((_QWORD *)a1 + 1) = -1;
  *((_QWORD *)a1 + 2) = a3;
  *((_QWORD *)a1 + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  v5 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = -1;
  v9 = v5;
  return sub_20B7F8ED8((uint64_t)v8);
}

uint64_t sub_20B7F9200(uint64_t *a1, unint64_t a2)
{
  _QWORD *exception;
  const char *v4;

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000047;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:71: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_6;
  }
  if (a1[2] < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000048;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:72: MARISA_IO_ERROR: size > avail_";
LABEL_6:
    exception[3] = v4;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F92A0(a1, a2);
}

uint64_t sub_20B7F92A0(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *exception;
  const char *v8;

  v2 = *a1;
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000063;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:99: MARISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v3 = a1[2];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000064;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:100: MARISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *a1 = v2 + a2;
  a1[2] = v5;
  return v2;
}

uint64_t sub_20B7F9350(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t sub_20B7F9368(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
    fclose(*(FILE **)a1);
  return a1;
}

FILE *sub_20B7F9398(uint64_t a1, char *a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x20000001BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:27: MARISA_NULL_ERROR: "
                   "filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v6 = 0;
  v7 = -1;
  v8 = 0;
  v9 = 0;
  sub_20B7F947C((uint64_t)&v6, a2);
  result = *(FILE **)a1;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v9;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

void sub_20B7F9460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
    fclose(a9);
  _Unwind_Resume(exception_object);
}

FILE *sub_20B7F947C(uint64_t a1, char *__filename)
{
  FILE *result;
  _QWORD *exception;

  result = fopen(__filename, "rb");
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x90000005ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:94: MARISA_IO_ERROR: file == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

FILE *sub_20B7F9504(uint64_t a1, uint64_t a2)
{
  FILE *result;
  int v4;

  result = *(FILE **)a1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

uint64_t sub_20B7F9530(uint64_t result, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  char v6[1024];
  uint64_t v7;

  v2 = __nitems;
  v3 = result;
  v7 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x100000044;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:68: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        result = sub_20B7F9640(v3, v6, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      return sub_20B7F9640(result, v6, __nitems);
    }
  }
  return result;
}

uint64_t sub_20B7F9640(uint64_t result, char *a2, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = a2;
  v5 = result;
  v6 = *(FILE **)result;
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x100000071;
    v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:113: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_19;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        result = read(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0)
          break;
        v4 += result;
        v3 -= result;
        if (!v3)
          return result;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
      exception[2] = 0x900000081;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:129: MARISA_IO_ERROR: size_read <= 0";
LABEL_19:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      result = fread(a2, 1uLL, __nitems, v6);
      if (result != v3)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C4679E8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
        exception[2] = 0x900000086;
        v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:134: MARISA_IO_ERROR: ::fread"
             "(buf, 1, size, file_) != size";
        goto LABEL_19;
      }
    }
    else
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = std::istream::read();
        if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_24C4679E8;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc";
          v10[2] = 0x90000008ALL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/reader.cc:138: MARISA_IO_ERROR: !"
                   "stream_->read(static_cast<char *>(buf), size)";
          __cxa_throw(v10, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_20B7F980C()
{
  __break(1u);
}

void sub_20B7F9870()
{
  __cxa_end_catch();
  JUMPOUT(0x20B7F9878);
}

uint64_t sub_20B7F9884(uint64_t result, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  _QWORD __buf[129];

  v2 = __nitems;
  v3 = result;
  __buf[128] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000044;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:68: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        result = sub_20B7F99A4(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return sub_20B7F99A4(result, (char *)__buf, __nitems);
    }
  }
  return result;
}

uint64_t sub_20B7F99A4(uint64_t result, char *__buf, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = __buf;
  v5 = result;
  v6 = *(FILE **)result;
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000071;
    v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:113: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        result = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0)
          break;
        v4 += result;
        v3 -= result;
        if (!v3)
          return result;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000081;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:129: MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C4679E8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000086;
        v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:134: MARISA_IO_ERROR: ::fwrit"
             "e(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      result = fflush(*(FILE **)v5);
      if ((_DWORD)result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C4679E8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000087;
        v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:135: MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = std::ostream::write();
        if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_24C4679E8;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008BLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:139: MARISA_IO_ERROR: !"
                   "stream_->write(static_cast<const char *>(data), size)";
          __cxa_throw(v10, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_20B7F9BB0()
{
  __break(1u);
}

void sub_20B7F9C14()
{
  __cxa_end_catch();
  JUMPOUT(0x20B7F9C1CLL);
}

uint64_t sub_20B7F9C28(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 649) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  sub_20B803C78((_OWORD *)(a1 + 744));
  *(_BYTE *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1072) = 3;
  *(_QWORD *)(a1 + 1080) = 0x100000000200;
  *(_DWORD *)(a1 + 1088) = 0x20000;
  sub_20B7F8EC0(a1 + 1096);
  return a1;
}

void sub_20B7F9D48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = v1[126];
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  sub_20B7FF1C8(v5);
  sub_20B7F9DD8(v4);
  if (*v7)
    MEMORY[0x20BD39C80](*v7, 0x1000C8077774924);
  if (*v6)
    MEMORY[0x20BD39C80](*v6, 0x1000C8077774924);
  sub_20B7F9E84(v3);
  sub_20B7F9E84(v2);
  sub_20B7F9E84(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B7F9DD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[26];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  v3 = a1[20];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  v4 = a1[14];
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  v5 = a1[6];
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_20B7F9E84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[20];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  v3 = a1[14];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  v4 = a1[8];
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_20B7F9F18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_20B7F8F20((uint64_t)(a1 + 137));
  v2 = a1[126];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  sub_20B7FF1C8(a1 + 125);
  v3 = a1[119];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  v4 = a1[113];
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  v5 = a1[107];
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  v6 = a1[99];
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  v7 = a1[93];
  if (v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  v8 = a1[84];
  if (v8)
    MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  v9 = a1[78];
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  v10 = a1[72];
  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  v11 = a1[66];
  if (v11)
    MEMORY[0x20BD39C80](v11, 0x1000C8077774924);
  v12 = a1[60];
  if (v12)
    MEMORY[0x20BD39C80](v12, 0x1000C8077774924);
  v13 = a1[52];
  if (v13)
    MEMORY[0x20BD39C80](v13, 0x1000C8077774924);
  v14 = a1[46];
  if (v14)
    MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
  v15 = a1[40];
  if (v15)
    MEMORY[0x20BD39C80](v15, 0x1000C8077774924);
  v16 = a1[34];
  if (v16)
    MEMORY[0x20BD39C80](v16, 0x1000C8077774924);
  v17 = a1[26];
  if (v17)
    MEMORY[0x20BD39C80](v17, 0x1000C8077774924);
  v18 = a1[20];
  if (v18)
    MEMORY[0x20BD39C80](v18, 0x1000C8077774924);
  v19 = a1[14];
  if (v19)
    MEMORY[0x20BD39C80](v19, 0x1000C8077774924);
  v20 = a1[8];
  if (v20)
    MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_20B7FA178(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v9[2];
  int v10;

  v6 = 3;
  v7 = 0x100000000200;
  v8 = 0x20000;
  sub_20B7FD578(&v6, a3);
  v9[0] = v6;
  v9[1] = v7;
  v10 = v8;
  sub_20B7F9C28((uint64_t)&v6);
  sub_20B7FA228((uint64_t)&v6, a2, (uint64_t)v9);
  sub_20B7FA578(a1, (uint64_t)&v6);
  return sub_20B7F9F18(&v6);
}

void sub_20B7FA214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B7F9F18((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FA228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  _OWORD v28[3];
  __int128 v29;
  unint64_t v30[4];
  _OWORD v31[3];
  char v32;

  memset(v31, 0, 41);
  sub_20B7FBB7C((uint64_t *)v31, *(_QWORD *)(a2 + 88));
  if (*(_QWORD *)(a2 + 88))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)&v31[0] + 1) + v6;
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7;
      v10 = *(_DWORD *)(v9 + 8);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_DWORD *)(v8 + 8) = v10;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
      ++v7;
      v6 += 24;
    }
    while (v7 < *(_QWORD *)(a2 + 88));
  }
  v29 = 0u;
  memset(v30, 0, 25);
  sub_20B7FBC08(a1, (uint64_t *)v31, &v29, a3, 1);
  memset(v28, 0, 41);
  sub_20B7FBDE8((uint64_t *)v28, v30[1]);
  v11 = *((_QWORD *)&v28[1] + 1);
  if (*((_QWORD *)&v28[1] + 1))
  {
    v12 = 0;
    v13 = *((_QWORD *)&v29 + 1);
    v14 = (_DWORD *)(*((_QWORD *)&v28[0] + 1) + 4);
    do
    {
      *(v14 - 1) = *(_DWORD *)(v13 + 4 * v12);
      *v14 = v12++;
      v14 += 2;
    }
    while (v11 != v12);
  }
  v15 = v29;
  v29 = 0u;
  memset(v30, 0, 25);
  if (v15)
  {
    MEMORY[0x20BD39C80](v15, 0x1000C8077774924);
    v11 = *((_QWORD *)&v28[1] + 1);
  }
  v16 = 126 - 2 * __clz(v11);
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_20B801900(*((uint64_t *)&v28[0] + 1), (unsigned int *)(*((_QWORD *)&v28[0] + 1) + 8 * v11), (uint64_t)&v32, v17, 1);
  if (*((_QWORD *)&v28[1] + 1))
  {
    v18 = 0;
    v19 = 0;
    do
    {
      for (i = *((_QWORD *)&v28[0] + 1); ; i = *((_QWORD *)&v28[0] + 1))
      {
        v21 = *(unsigned int *)(i + 8 * v18);
        if (v19 >= v21)
          break;
        sub_20B7FBE58((uint64_t *)(a1 + 208), 0);
        ++v19;
      }
      if (v19 == v21)
      {
        sub_20B7FBE58((uint64_t *)(a1 + 208), 1);
        ++v19;
      }
      ++v18;
    }
    while (v18 < *((_QWORD *)&v28[1] + 1));
  }
  else
  {
    v19 = 0;
  }
  for (; v19 < *(_QWORD *)(a1 + 648); ++v19)
    sub_20B7FBE58((uint64_t *)(a1 + 208), 0);
  v22 = (uint64_t *)(a1 + 208);
  sub_20B7FBE58(v22, 0);
  sub_20B7FBF34((uint64_t)v22, 0, 1);
  if (*(_QWORD *)(a2 + 88))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *(unsigned int *)(*((_QWORD *)&v28[0] + 1) + v23 + 4);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + ((v25 >> 5) & 0x7FFFFF8));
      *(_DWORD *)(v26 + 16 * v25 + 12) = sub_20B8050A0((uint64_t)v22, *(unsigned int *)(*((_QWORD *)&v28[0] + 1) + v23));
      ++v24;
      v23 += 8;
    }
    while (v24 < *(_QWORD *)(a2 + 88));
  }
  if (*(_QWORD *)&v28[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v28[0], 0x1000C8077774924);
  if ((_QWORD)v29)
    MEMORY[0x20BD39C80](v29, 0x1000C8077774924);
  result = *(_QWORD *)&v31[0];
  if (*(_QWORD *)&v31[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v31[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FA4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15)
    MEMORY[0x20BD39C80](a15, 0x1000C8077774924);
  if (a21)
    MEMORY[0x20BD39C80](a21, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B7FA578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_20B7FBAC4((uint64_t *)a1, (uint64_t *)a2);
  sub_20B7FBAC4((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  sub_20B7FBAC4((uint64_t *)(a1 + 416), (uint64_t *)(a2 + 416));
  sub_20B7FBB28((uint64_t *)(a1 + 624), (uint64_t *)(a2 + 624));
  sub_20B7FBB28((uint64_t *)(a1 + 672), (uint64_t *)(a2 + 672));
  v4 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a2 + 720) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 728);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a2 + 728) = v4;
  v5 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = v5;
  sub_20B804228((uint64_t *)(a1 + 744), (uint64_t *)(a2 + 744));
  v6 = *(_QWORD *)(a1 + 1000);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a2 + 1000) = v6;
  sub_20B7FBB28((uint64_t *)(a1 + 1008), (uint64_t *)(a2 + 1008));
  v7 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = v7;
  v8 = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = v8;
  v9 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = v9;
  v10 = *(_QWORD *)(a1 + 1080);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a2 + 1080) = v10;
  LODWORD(v9) = *(_DWORD *)(a1 + 1088);
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  *(_DWORD *)(a2 + 1088) = v9;
  return sub_20B7F9128((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
}

_QWORD *sub_20B7FA67C(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[137];
  uint64_t v6[5];

  sub_20B7FA700((uint64_t)v5, a2);
  sub_20B7F9C28((uint64_t)v5);
  sub_20B7FA7A4((uint64_t)v5, a2);
  sub_20B7F9128(v6, a2);
  sub_20B7FA578(a1, (uint64_t)v5);
  return sub_20B7F9F18(v5);
}

void sub_20B7FA6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9F18(&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B7FA700(uint64_t a1, uint64_t *a2)
{
  _BYTE *result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;

  result = (_BYTE *)sub_20B7F92A0(a2, 0x10uLL);
  if (*result != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = result[v3];
    v5 = aWeLoveMarisa[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:21: MARISA_FORMAT_ERRO"
                   "R: !test_header(ptr)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_20B7FA7A4(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  double result;
  _QWORD *exception;
  uint64_t v10;
  double v11;
  int v12;

  sub_20B7FC8D8((uint64_t *)a1, a2);
  sub_20B7FC8D8((uint64_t *)(a1 + 208), a2);
  sub_20B7FC8D8((uint64_t *)(a1 + 416), a2);
  sub_20B7FC9C0((__int128 *)(a1 + 624), a2);
  sub_20B7FCA7C((__int128 *)(a1 + 672), a2);
  sub_20B804254(a1 + 744, a2);
  if (*(_QWORD *)(a1 + 472) && !*(_QWORD *)(a1 + 768))
  {
    v4 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v5 = (uint64_t)v4;
    if (v4)
      sub_20B7F9C28((uint64_t)v4);
    sub_20B7FC32C((_QWORD *)(a1 + 1000), v5);
    v6 = *(_QWORD *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x80000021ELL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:542: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    sub_20B7FA7A4(v6, a2);
  }
  sub_20B7FCB74((__int128 *)(a1 + 1008), a2);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a1 + 1032) - 1;
  *(_QWORD *)(a1 + 1064) = *(unsigned int *)sub_20B7F92A0(a2, 4uLL);
  v7 = *(_DWORD *)sub_20B7F92A0(a2, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  sub_20B7FD578(&v10, v7);
  *(_QWORD *)(a1 + 1072) = v10;
  result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_20B7FA924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B7FA940(uint64_t a1, uint64_t a2)
{
  _QWORD v5[142];

  sub_20B7FA9B4((int)v5, a2);
  sub_20B7F9C28((uint64_t)v5);
  sub_20B7FAA9C((uint64_t)v5, a2);
  sub_20B7FA578(a1, (uint64_t)v5);
  return sub_20B7F9F18(v5);
}

void sub_20B7FA9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9F18(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FA9B4(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;
  char v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  result = sub_20B7F9640(a2, v7, 0x10uLL);
  if (v7[0] != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = v7[v3];
    v5 = aWeLoveMarisa[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA0000001ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:26: MARISA_FORMAT_ERRO"
                   "R: !test_header(buf)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_20B7FAA9C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD *exception;
  unsigned int v9;
  uint64_t v10;
  double v11;
  int v12;

  sub_20B7FCC30((uint64_t *)a1, a2);
  sub_20B7FCC30((uint64_t *)(a1 + 208), a2);
  sub_20B7FCC30((uint64_t *)(a1 + 416), a2);
  sub_20B7FCD18((__int128 *)(a1 + 624), a2);
  sub_20B7FCDD4((__int128 *)(a1 + 672), a2);
  sub_20B8043BC(a1 + 744, a2);
  if (*(_QWORD *)(a1 + 472) && !*(_QWORD *)(a1 + 768))
  {
    v4 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v5 = (uint64_t)v4;
    if (v4)
      sub_20B7F9C28((uint64_t)v4);
    sub_20B7FC32C((_QWORD *)(a1 + 1000), v5);
    v6 = *(_QWORD *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000238;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:568: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    sub_20B7FAA9C(v6, a2);
  }
  sub_20B7FCECC((__int128 *)(a1 + 1008), a2);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a1 + 1032) - 1;
  LODWORD(v10) = 0;
  sub_20B7F9640(a2, (char *)&v10, 4uLL);
  *(_QWORD *)(a1 + 1064) = v10;
  v9 = 0;
  sub_20B7F9640(a2, (char *)&v9, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  sub_20B7FD578(&v10, v9);
  *(_QWORD *)(a1 + 1072) = v10;
  result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_20B7FAC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FAC48(uint64_t a1, uint64_t a2)
{
  sub_20B7F99A4(a2, "We love Marisa.", 0x10uLL);
  return sub_20B7FAC84(a1, a2);
}

uint64_t sub_20B7FAC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  int __buf;

  sub_20B7FEDC4(a1, a2);
  sub_20B7FEDC4(a1 + 208, a2);
  sub_20B7FEDC4(a1 + 416, a2);
  sub_20B803BBC(a1 + 624, a2);
  sub_20B7FF154(a1 + 672, a2);
  sub_20B804524(a1 + 744, a2);
  v4 = *(_QWORD *)(a1 + 1000);
  if (v4)
    sub_20B7FAC84(v4, a2);
  sub_20B7FEF40(a1 + 1008, a2);
  __buf = *(_QWORD *)(a1 + 1064);
  sub_20B7F99A4(a2, (char *)&__buf, 4uLL);
  v6 = *(_DWORD *)(a1 + 1084) | *(_DWORD *)(a1 + 1072) | *(_DWORD *)(a1 + 1088);
  return sub_20B7F99A4(a2, (char *)&v6, 4uLL);
}

uint64_t sub_20B7FAD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 108) = 0;
  while (1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 <= *(unsigned int *)(v4 + 100))
      break;
    if ((sub_20B7FADE0(a1, (uint64_t *)a2) & 1) == 0)
      return 0;
  }
  v6 = *(unsigned int *)(v4 + 96);
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) != 0)
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)a2;
    *(_DWORD *)(a2 + 32) = v5;
    *(_DWORD *)(a2 + 36) = sub_20B8050A0(a1 + 208, v6);
    return 1;
  }
  return 0;
}

uint64_t sub_20B7FADE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2[5];
  v5 = *(unsigned int *)(v4 + 96);
  v6 = *(unsigned int *)(v4 + 100);
  v7 = (*(unsigned __int8 *)(*a2 + v6) ^ (32 * v5) ^ v5) & *(_QWORD *)(a1 + 1056);
  v8 = *(_QWORD *)(a1 + 1024);
  if ((_DWORD)v5 != *(_DWORD *)(v8 + 12 * v7))
  {
    v10 = sub_20B8051C4((_QWORD *)a1, v5);
    v11 = *(_QWORD *)(a1 + 16);
    if (((*(_QWORD *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)) & 1) != 0)
    {
      v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      v13 = v10 + 2;
      v14 = 0xFFFFFFFFLL;
      while (1)
      {
        v15 = v12;
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            v14 = sub_20B8050A0(a1 + 416, v12);
            v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          v17 = *(_DWORD *)(v4 + 100);
          v18 = *(_QWORD *)(a1 + 720);
          v19 = (unint64_t)(v18 * v14) >> 6;
          v20 = (v18 * v14) & 0x3F;
          v21 = v20 + v18;
          v22 = *(_QWORD *)(a1 + 688);
          v23 = *(_QWORD *)(v22 + 8 * v19) >> v20;
          if (v21 > 0x40)
            v23 |= (2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v23) << 8);
          v25 = *(_QWORD *)(a1 + 1000);
          if (v25)
          {
            if ((sub_20B7FD12C(v25, a2, v24) & 1) != 0)
              return 1;
          }
          else if ((sub_20B8045D8((_QWORD *)(a1 + 744), a2, v24) & 1) != 0)
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v17)
            return 0;
          v12 = *(_DWORD *)(v4 + 96);
          v11 = *(_QWORD *)(a1 + 16);
        }
        else
        {
          v16 = *(unsigned int *)(v4 + 100);
          if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v12) == *(unsigned __int8 *)(*a2 + v16))
          {
            *(_DWORD *)(v4 + 100) = v16 + 1;
            return 1;
          }
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        v26 = *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v26 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v9 = *(unsigned int *)(v8 + 12 * v7 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    *(_DWORD *)(v4 + 100) = v6 + 1;
    goto LABEL_24;
  }
  v27 = *(_QWORD *)(a1 + 1000);
  if (v27)
  {
    if ((sub_20B7FD12C(v27, a2, v9) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((sub_20B8045D8((_QWORD *)(a1 + 744), a2, v9) & 1) == 0)
    return 0;
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*(_QWORD *)(a1 + 1024) + 12 * v7 + 4);
  return 1;
}

unint64_t sub_20B7FB020(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *exception;
  char v35;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 >= *(_QWORD *)(a1 + 264))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x300000049;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:73: MARISA_BOUND_"
                   "ERROR: agent.query().id() >= size()";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(v5 + 32);
  if (v6 <= 0x1F)
  {
    if (v6 <= 0x10)
      v7 = 32;
    else
      v7 = 2 * v6;
    sub_20B7FD7B4((uint64_t *)v5, v7);
    v3 = *(_QWORD *)(a2 + 16);
  }
  *(_DWORD *)(v5 + 108) = 0;
  result = sub_20B805430((_QWORD *)(a1 + 208), v3);
  *(_DWORD *)(v5 + 96) = result;
  if (!(_DWORD)result)
    goto LABEL_30;
  while (1)
  {
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((result >> 3) & 0x1FFFFFF8)) >> result) & 1) != 0)
    {
      v9 = *(_QWORD *)(v5 + 24);
      v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + result);
      v11 = sub_20B8050A0(a1 + 416, result);
      v12 = *(_QWORD *)(a1 + 720);
      v13 = (unint64_t)(v12 * v11) >> 6;
      v14 = (v12 * v11) & 0x3F;
      v15 = v14 + v12;
      v16 = *(_QWORD *)(a1 + 688);
      v17 = *(_QWORD *)(v16 + 8 * v13) >> v14;
      if (v15 > 0x40)
        v17 |= (2 * *(_QWORD *)(v16 + 8 * v13 + 8)) << (v14 ^ 0x3Fu);
      v18 = v10 | ((*(_DWORD *)(a1 + 728) & v17) << 8);
      v19 = *(_QWORD *)(a1 + 1000);
      if (v19)
        result = (unint64_t)sub_20B7FCF88(v19, a2, v18);
      else
        result = (unint64_t)sub_20B804550((uint64_t *)(a1 + 744), a2, v18);
      v20 = *(_QWORD *)(v5 + 24);
      if (v9 != v20)
      {
        v21 = *(_QWORD *)(v5 + 8);
        v22 = (_BYTE *)(v21 + v20 - 1);
        if ((unint64_t)v22 > v21 + v9)
        {
          v23 = v21 + v9 + 1;
          do
          {
            v24 = *(_BYTE *)(v23 - 1);
            *(_BYTE *)(v23 - 1) = *v22;
            *v22-- = v24;
            v25 = v23++ >= (unint64_t)v22;
          }
          while (!v25);
        }
      }
    }
    else
    {
      v35 = *(_BYTE *)(*(_QWORD *)(a1 + 640) + result);
      result = (unint64_t)sub_20B7FB288((uint64_t *)v5, &v35);
    }
    v26 = *(unsigned int *)(v5 + 96);
    if (*(_QWORD *)(a1 + 1064) >= v26)
      break;
    result = sub_20B805430((_QWORD *)a1, v26) + ~(unint64_t)*(unsigned int *)(v5 + 96);
    *(_DWORD *)(v5 + 96) = result;
  }
  v27 = *(_QWORD *)(v5 + 8);
  v28 = *(_QWORD *)(v5 + 24);
  v29 = (_BYTE *)(v27 + v28 - 1);
  if (v28)
    v30 = (unint64_t)v29 > v27;
  else
    v30 = 0;
  if (v30)
  {
    v31 = v27 + 1;
    do
    {
      v32 = *(_BYTE *)(v31 - 1);
      *(_BYTE *)(v31 - 1) = *v29;
      *v29-- = v32;
      v25 = v31++ >= (unint64_t)v29;
    }
    while (!v25);
LABEL_30:
    v27 = *(_QWORD *)(v5 + 8);
    v28 = *(_QWORD *)(v5 + 24);
  }
  *(_QWORD *)(a2 + 24) = v27;
  v33 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 32) = v28;
  *(_DWORD *)(a2 + 36) = v33;
  return result;
}

uint64_t *sub_20B7FB288(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    v7 = 2 * v5;
    if (v5 < 0)
      v7 = -1;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)sub_20B7FD7B4(result, v8);
    v4 = v3[3];
  }
  *(_BYTE *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

uint64_t sub_20B7FB2F0(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(unsigned int **)(a2 + 40);
  v5 = v4[27];
  if (v5 == 1)
  {
LABEL_5:
    while (*(_QWORD *)(a2 + 8) > (unint64_t)v4[25] && (sub_20B7FADE0(a1, (uint64_t *)a2) & 1) != 0)
    {
      v7 = v4[24];
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
      {
        v8 = a1 + 208;
        v9 = v4[25];
        *(_QWORD *)(a2 + 24) = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 32) = v9;
        goto LABEL_11;
      }
    }
    result = 0;
    v4[27] = 3;
  }
  else if (v5 == 3)
  {
    return 0;
  }
  else
  {
    *((_QWORD *)v4 + 12) = 0;
    v4[27] = 1;
    if ((**(_BYTE **)(a1 + 224) & 1) == 0)
      goto LABEL_5;
    v8 = a1 + 208;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)a2;
    *(_DWORD *)(a2 + 32) = 0;
    v7 = 0;
LABEL_11:
    *(_DWORD *)(a2 + 36) = sub_20B8050A0(v8, v7);
    return 1;
  }
  return result;
}

uint64_t sub_20B7FB3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  _BYTE v40[20];

  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_DWORD *)(v4 + 108);
  if (v5 == 2)
  {
    do
    {
      while (1)
      {
LABEL_10:
        v10 = *(unsigned int *)(v4 + 104);
        if (*(_QWORD *)(v4 + 72) == v10)
        {
          v11 = *(_QWORD *)(v4 + 56) + 20 * v10;
          *(_OWORD *)v40 = xmmword_20BA34520;
          *(_DWORD *)&v40[16] = -1;
          v12 = sub_20B8051C4((_QWORD *)a1, *(unsigned int *)(v11 - 20));
          *(_DWORD *)&v40[4] = v12 + 1;
          *(_DWORD *)v40 = v12 - *(_DWORD *)(v11 - 20);
          sub_20B7FB9F0((uint64_t *)(v4 + 48), (__n128 *)v40);
          LODWORD(v10) = *(_DWORD *)(v4 + 104);
        }
        v13 = *(_QWORD *)(v4 + 56);
        v14 = (unsigned int *)(v13 + 20 * v10);
        v15 = v14[1];
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v15 >> 3) & 0x1FFFFFF8));
        v14[1] = v15 + 1;
        if (((v16 >> v15) & 1) != 0)
          break;
        if ((_DWORD)v10 == 1)
        {
LABEL_7:
          result = 0;
          *(_DWORD *)(v4 + 108) = 4;
          return result;
        }
        v23 = v13 + 20 * v10;
        ++*(_DWORD *)(v23 - 20);
        sub_20B7FBA78((uint64_t *)v4, *(unsigned int *)(v23 - 32));
        --*(_DWORD *)(v4 + 104);
      }
      *(_DWORD *)(v4 + 104) = v10 + 1;
      v17 = *v14;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) != 0)
      {
        v18 = v13 + 20 * v10;
        v21 = *(_DWORD *)(v18 + 12);
        v20 = (unsigned int *)(v18 + 12);
        v19 = v21;
        if (v21 == -1)
        {
          v22 = sub_20B8050A0(a1 + 416, v17);
          v17 = *v14;
        }
        else
        {
          v22 = v19 + 1;
        }
        *v20 = v22;
        v24 = *(_QWORD *)(a1 + 720);
        v25 = v24 * v22;
        v26 = v25 >> 6;
        v27 = v25 & 0x3F;
        v28 = v27 + v24;
        v29 = *(_QWORD *)(a1 + 688);
        v30 = *(_QWORD *)(v29 + 8 * v26);
        if (v28 > 0x40)
          v31 = ((2 * *(_QWORD *)(v29 + 8 * v26 + 8)) << (v27 ^ 0x3Fu)) | (v30 >> v27);
        else
          v31 = v30 >> v27;
        v32 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v17) | ((*(_DWORD *)(a1 + 728) & v31) << 8);
        v33 = *(_QWORD *)(a1 + 1000);
        if (v33)
          sub_20B7FCF88(v33, a2, v32);
        else
          sub_20B804550((uint64_t *)(a1 + 744), a2, v32);
      }
      else
      {
        v40[0] = *(_BYTE *)(*(_QWORD *)(a1 + 640) + v17);
        sub_20B7FB288((uint64_t *)v4, v40);
      }
      v34 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v13 + 20 * v10 + 8) = v34;
      v35 = *v14;
    }
    while (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v35 >> 3) & 0x1FFFFFF8)) >> v35) & 1) == 0);
    v36 = v13 + 20 * v10;
    v39 = *(_DWORD *)(v36 + 16);
    v38 = (_DWORD *)(v36 + 16);
    v37 = v39;
    if (v39 == -1)
    {
      v9 = sub_20B8050A0(a1 + 208, v35);
      v34 = *(_DWORD *)(v4 + 24);
    }
    else
    {
      v9 = v37 + 1;
    }
    *v38 = v9;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 8);
    *(_DWORD *)(a2 + 32) = v34;
  }
  else
  {
    if (v5 == 4)
      return 0;
    sub_20B7FB700(*(_QWORD *)(a2 + 40));
    while (*(_QWORD *)(a2 + 8) > (unint64_t)*(unsigned int *)(v4 + 100))
    {
      if ((sub_20B7FB780(a1, (_QWORD *)a2) & 1) == 0)
        goto LABEL_7;
    }
    *(_QWORD *)&v40[12] = -1;
    *(_QWORD *)v40 = *(unsigned int *)(v4 + 96);
    *(_DWORD *)&v40[8] = *(_QWORD *)(v4 + 24);
    sub_20B7FB9F0((uint64_t *)(v4 + 48), (__n128 *)v40);
    *(_DWORD *)(v4 + 104) = 1;
    v7 = *(unsigned int *)(v4 + 96);
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_10;
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 8);
    *(_DWORD *)(a2 + 32) = v8;
    v9 = sub_20B8050A0(a1 + 208, v7);
  }
  *(_DWORD *)(a2 + 36) = v9;
  return 1;
}

double sub_20B7FB700(uint64_t a1)
{
  unint64_t v2;
  size_t v3;
  unint64_t v4;
  uint64_t v5;
  double result;

  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 <= 0x3F)
  {
    if (v2 <= 0x20)
      v3 = 64;
    else
      v3 = 2 * v2;
    sub_20B7FD7B4((uint64_t *)a1, v3);
  }
  sub_20B7FD838((uint64_t *)(a1 + 48), 0);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 <= 3)
  {
    if (v4 == 3)
      v5 = 6;
    else
      v5 = 4;
    sub_20B7FD8CC((uint64_t *)(a1 + 48), v5);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 96) = xmmword_20BA34530;
  return result;
}

uint64_t sub_20B7FB780(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char v29;

  v4 = a2[5];
  v5 = *(unsigned int *)(v4 + 96);
  v6 = (*(unsigned __int8 *)(*a2 + *(unsigned int *)(v4 + 100)) ^ (32 * v5) ^ v5) & *(_QWORD *)(a1 + 1056);
  v7 = *(_QWORD *)(a1 + 1024);
  if ((_DWORD)v5 != *(_DWORD *)(v7 + 12 * v6))
  {
    v10 = sub_20B8051C4((_QWORD *)a1, v5);
    v11 = *(_QWORD *)(a1 + 16);
    if (((*(_QWORD *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)) & 1) != 0)
    {
      v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      v13 = v10 + 2;
      v14 = 0xFFFFFFFFLL;
      while (1)
      {
        v15 = v12;
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            v14 = sub_20B8050A0(a1 + 416, v12);
            v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          v16 = *(_DWORD *)(v4 + 100);
          v17 = *(_QWORD *)(a1 + 720);
          v18 = (unint64_t)(v17 * v14) >> 6;
          v19 = (v17 * v14) & 0x3F;
          v20 = v19 + v17;
          v21 = *(_QWORD *)(a1 + 688);
          v22 = *(_QWORD *)(v21 + 8 * v18) >> v19;
          if (v20 > 0x40)
            v22 |= (2 * *(_QWORD *)(v21 + 8 * v18 + 8)) << (v19 ^ 0x3Fu);
          v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v22) << 8);
          v24 = *(_QWORD *)(a1 + 1000);
          if (v24)
          {
            if ((sub_20B7FD360(v24, a2, v23) & 1) != 0)
              return 1;
          }
          else if ((sub_20B80467C((_QWORD *)(a1 + 744), a2, v23) & 1) != 0)
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v16)
            return 0;
          v12 = *(_DWORD *)(v4 + 96);
          v11 = *(_QWORD *)(a1 + 16);
        }
        else if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v12) == *(unsigned __int8 *)(*a2
                                                                                          + *(unsigned int *)(v4 + 100)))
        {
          v28 = *(_BYTE *)(*(_QWORD *)(a1 + 640) + v12);
          sub_20B7FB288((uint64_t *)v4, &v28);
          ++*(_DWORD *)(v4 + 100);
          return 1;
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        v25 = *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v25 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v8 = v7 + 12 * v6;
  v9 = *(unsigned int *)(v8 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    v29 = *(_DWORD *)(v8 + 8);
    sub_20B7FB288((uint64_t *)v4, &v29);
    ++*(_DWORD *)(v4 + 100);
    goto LABEL_24;
  }
  v26 = *(_QWORD *)(a1 + 1000);
  if (v26)
  {
    if ((sub_20B7FD360(v26, a2, v9) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((sub_20B80467C((_QWORD *)(a1 + 744), a2, v9) & 1) == 0)
    return 0;
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*(_QWORD *)(a1 + 1024) + 12 * v6 + 4);
  return 1;
}

__n128 sub_20B7FB9F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  __n128 result;

  v4 = a1[3];
  v5 = a1[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 > 0x666666666666666)
      v7 = 0xCCCCCCCCCCCCCCCLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    sub_20B7FD8CC(a1, v8);
    v4 = a1[3];
  }
  v9 = (__n128 *)(a1[1] + 20 * v4);
  result = *a2;
  v9[1].n128_u32[0] = a2[1].n128_u32[0];
  *v9 = result;
  ++a1[3];
  return result;
}

uint64_t *sub_20B7FBA78(uint64_t *result, size_t a2)
{
  size_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 < 0)
      v5 = -1;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_20B7FD7B4(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t *sub_20B7FBAC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_20B7FBB28(a1, a2);
  v4 = a1[6];
  a1[6] = a2[6];
  a2[6] = v4;
  v5 = a1[7];
  a1[7] = a2[7];
  a2[7] = v5;
  sub_20B7FBB28(a1 + 8, a2 + 8);
  sub_20B7FBB28(a1 + 14, a2 + 14);
  return sub_20B7FBB28(a1 + 20, a2 + 20);
}

uint64_t *sub_20B7FBB28(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  v5 = result[3];
  v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((_BYTE *)result + 40);
  *((_BYTE *)result + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return result;
}

uint64_t *sub_20B7FBB7C(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0x555555555555555)
      v5 = 0xAAAAAAAAAAAAAAALL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_20B7FF208(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 24 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_20B7FBC08(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_20B7FF2AC((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3])
    sub_20B7FC070(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B7FD578(&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B7FD578(&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_20B7FBF34(a1 + 416, 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  sub_20B7FF9F8((__int128 *)(a1 + 672), (uint64_t)v17);
  sub_20B7FC7D0(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FBDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void sub_20B7FBDE8(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    sub_20B7FD9E4(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  a1[3] = v2;
}

uint64_t *sub_20B7FBE58(uint64_t *result, int a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *exception;
  uint64_t v7;

  v2 = result[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0x700000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:52: MARI"
                   "SA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = result;
  v5 = result[3];
  if (v2 == v5 << 6)
  {
    v7 = 0;
    result = sub_20B7FD960(result, v5 + 1, &v7);
    v2 = v4[6];
  }
  if (a2)
  {
    *(_QWORD *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return result;
}

uint64_t sub_20B7FBF34(uint64_t a1, int a2, int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[4];
  __int128 v9;
  _BYTE v10[25];
  __int128 v11;
  _BYTE v12[25];
  __int128 v13;
  _BYTE v14[25];

  memset(v8, 0, 41);
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_20B8055A4(v8, (_QWORD *)a1, a2, a3);
  sub_20B7FDA68((_QWORD *)a1);
  v4 = v8[0];
  v8[0] = *(_OWORD *)a1;
  *(_OWORD *)a1 = v4;
  v5 = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  sub_20B7FBAC4((uint64_t *)a1, (uint64_t *)v8);
  if ((_QWORD)v13)
    MEMORY[0x20BD39C80](v13, 0x1000C8077774924);
  if ((_QWORD)v11)
    MEMORY[0x20BD39C80](v11, 0x1000C8077774924);
  if ((_QWORD)v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FC05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9E84(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FC070(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t result;
  _QWORD *exception;
  __int128 v26;
  _BYTE v27[25];

  if (*(_QWORD *)a4 == a5)
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_20B7FC2B0((uint64_t *)&v26, a2[3]);
    v9 = a2[3];
    if (v9)
    {
      v10 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
      v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 + v13 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_20B803CAC((__int128 *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_20B7FBB7C((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *((_QWORD *)&v26 + 1) + v15;
        v18 = a2[1] + v15;
        v19 = *(unsigned int *)(v18 + 8);
        *(_QWORD *)v17 = *(_QWORD *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20)
      MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
    v21 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v22 = (uint64_t)v21;
    if (v21)
      sub_20B7F9C28((uint64_t)v21);
    v23 = (uint64_t *)(a1 + 1000);
    sub_20B7FC32C(v23, v22);
    if (!*v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001C3;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:451: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    sub_20B7FC3AC(*v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  result = v26;
  if ((_QWORD)v26)
    return MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
  return result;
}

void sub_20B7FC26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x20BD39C98](v9, MEMORY[0x24BEDB6B8]);
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B7FC2B0(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 59)
      v5 = 0xFFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_20B8029E8(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = (_QWORD *)(v3[1] + v8);
      *v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

_QWORD **sub_20B7FC32C(_QWORD *a1, uint64_t a2)
{
  _QWORD *exception;
  _QWORD *v4;

  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = (_QWORD *)*a1;
  *a1 = a2;
  return sub_20B7FF1C8(&v4);
}

uint64_t sub_20B7FC3AC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_20B802A78((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(_QWORD *)(a2 + 24))
    sub_20B7FC58C(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B7FD578(&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B7FD578(&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_20B7FBF34(a1 + 416, 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  sub_20B7FF9F8((__int128 *)(a1 + 672), (uint64_t)v17);
  sub_20B7FC7D0(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FC560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FC58C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *exception;
  _OWORD v20[3];

  if (*(_QWORD *)a4 == a5)
  {
    memset(v20, 0, 41);
    sub_20B7FC2B0((uint64_t *)v20, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      v10 = (_DWORD *)(*((_QWORD *)&v20[0] + 1) + 8);
      v11 = (_DWORD *)(*(_QWORD *)(a2 + 8) + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_20B803CAC((__int128 *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    result = *(_QWORD *)&v20[0];
    if (*(_QWORD *)&v20[0])
      return MEMORY[0x20BD39C80](*(_QWORD *)&v20[0], 0x1000C8077774924);
  }
  else
  {
    v16 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v17 = (uint64_t)v16;
    if (v16)
      sub_20B7F9C28((uint64_t)v16);
    v18 = (_QWORD *)(a1 + 1000);
    sub_20B7FC32C(v18, v17);
    if (!*v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001D4;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:468: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    return sub_20B7FC3AC(*v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_20B7FC700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B7FC740(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_20B803918(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 12 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_20B7FC7D0(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(result + 1032);
  if (v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = result + 416;
    do
    {
      v6 = *(_QWORD *)(v2 + 1016);
      v7 = *(unsigned int *)(v6 + v3 + 4);
      if ((_DWORD)v7)
      {
        *(_BYTE *)(v6 + v3 + 8) = *(_BYTE *)(*(_QWORD *)(v2 + 632) + v7);
        v8 = *(_QWORD *)(v2 + 1016);
        if (((*(_QWORD *)(*(_QWORD *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
        {
          result = sub_20B8050A0(v5, v7);
          v9 = *(_QWORD *)(v2 + 720);
          v10 = (unint64_t)(v9 * result) >> 6;
          v11 = (v9 * result) & 0x3F;
          v12 = v11 + v9;
          v13 = *(_QWORD *)(v2 + 688);
          v14 = *(_QWORD *)(v13 + 8 * v10);
          if (v12 > 0x40)
            v15 = ((2 * *(_QWORD *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          else
            v15 = v14 >> v11;
          v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        v1 = *(_QWORD *)(v2 + 1032);
      }
      else
      {
        *(_QWORD *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return result;
}

uint64_t sub_20B7FC8D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_20B7FDADC((uint64_t)v4, a2);
  sub_20B7FBAC4(a1, (uint64_t *)v4);
  if ((_QWORD)v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FC9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9E84(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FC9C0(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B8039AC((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FCA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FCA7C(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20B7FE290((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FCB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FCB74(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FDFA0((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FCC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FCC30(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_20B7FE340((uint64_t)v4, a2);
  sub_20B7FBAC4(a1, (uint64_t *)v4);
  if ((_QWORD)v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FCD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9E84(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FCD18(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B803A0C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FCDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FCDD4(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20B7FECF4((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FCEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FCECC(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B803AE0((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B7FCF88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v6 = *(uint64_t **)(a2 + 40);
  v7 = a1 + 416;
  v8 = (uint64_t *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 1056) & a3;
      v10 = *(_QWORD *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4))
        break;
      v11 = v10 + 12 * v9;
      v12 = *(unsigned int *)(v11 + 8);
      if (v12 <= 0xFFFFFEFF)
      {
        v23 = *(_QWORD *)(a1 + 1000);
        if (v23)
          result = (uint64_t *)sub_20B7FCF88(v23, a2, v12);
        else
          result = sub_20B804550(v8, a2, v12);
      }
      else
      {
        v27 = *(_DWORD *)(v11 + 8);
        result = sub_20B7FB288(v6, &v27);
      }
      a3 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v9);
      if (!(_DWORD)a3)
        return result;
    }
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3);
      v15 = sub_20B8050A0(v7, a3);
      v16 = *(_QWORD *)(a1 + 720);
      v17 = (unint64_t)(v16 * v15) >> 6;
      v18 = (v16 * v15) & 0x3F;
      v19 = v18 + v16;
      v20 = *(_QWORD *)(a1 + 688);
      v21 = *(_QWORD *)(v20 + 8 * v17);
      v22 = v19 > 0x40
          ? ((2 * *(_QWORD *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18)
          : v21 >> v18;
      v24 = v14 | ((*(_DWORD *)(a1 + 728) & v22) << 8);
      v25 = *(_QWORD *)(a1 + 1000);
      result = v25 ? (uint64_t *)sub_20B7FCF88(v25, a2, v24) : sub_20B804550(v8, a2, v24);
    }
    else
    {
      v26 = *(_BYTE *)(*(_QWORD *)(a1 + 640) + a3);
      result = sub_20B7FB288(v6, &v26);
    }
    if (a3 <= *(_QWORD *)(a1 + 1064))
      break;
    a3 = sub_20B805430((_QWORD *)a1, a3) + ~a3;
  }
  return result;
}

uint64_t sub_20B7FD12C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[5];
  v7 = a1 + 416;
  v8 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 1056) & a3;
      v10 = *(_QWORD *)(a1 + 1024);
      if (a3 == *(_DWORD *)(v10 + 12 * v9 + 4))
        break;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      {
        v13 = *(_QWORD *)(a1 + 1000);
        v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3);
        v15 = sub_20B8050A0(v7, a3);
        v16 = *(_QWORD *)(a1 + 720);
        v17 = (unint64_t)(v16 * v15) >> 6;
        v18 = (v16 * v15) & 0x3F;
        v19 = v18 + v16;
        v20 = *(_QWORD *)(a1 + 688);
        v21 = *(_QWORD *)(v20 + 8 * v17);
        if (v13)
        {
          v22 = v21 >> v18;
          if (v19 > 0x40)
            v22 |= (2 * *(_QWORD *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu);
          v23 = v14 | ((*(_DWORD *)(a1 + 728) & v22) << 8);
          v24 = *(_QWORD *)(a1 + 1000);
          if (v24)
          {
            if ((sub_20B7FD12C(v24, a2, v23) & 1) == 0)
              return 0;
            goto LABEL_27;
          }
        }
        else
        {
          if (v19 > 0x40)
            v27 = ((2 * *(_QWORD *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18);
          else
            v27 = v21 >> v18;
          v23 = v14 | ((*(_DWORD *)(a1 + 728) & v27) << 8);
        }
        if ((sub_20B8045D8(v8, a2, v23) & 1) == 0)
          return 0;
      }
      else
      {
        v26 = *(unsigned int *)(v6 + 100);
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3) != *(unsigned __int8 *)(*a2 + v26))
          return 0;
        *(_DWORD *)(v6 + 100) = v26 + 1;
      }
LABEL_27:
      if (a3 <= *(_QWORD *)(a1 + 1064))
        return 1;
      if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100))
        return 0;
      a3 = sub_20B805430((_QWORD *)a1, a3) + ~a3;
    }
    v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 <= 0xFFFFFEFF)
    {
      v25 = *(_QWORD *)(a1 + 1000);
      if (v25)
      {
        if ((sub_20B7FD12C(v25, a2, v11) & 1) == 0)
          return 0;
      }
      else if ((sub_20B8045D8(v8, a2, v11) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      v12 = *(unsigned int *)(v6 + 100);
      if (*(unsigned __int8 *)(*a2 + v12) != v11)
        return 0;
      *(_DWORD *)(v6 + 100) = v12 + 1;
    }
    a3 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v9);
    if (!(_DWORD)a3)
      return 1;
    if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100))
      return 0;
  }
}

uint64_t sub_20B7FD360(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v25;
  char v26;

  v6 = a2[5];
  v7 = a1 + 416;
  v8 = (_QWORD *)(a1 + 744);
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 1056) & a3;
    v10 = *(_QWORD *)(a1 + 1024);
    if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4))
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      {
        v13 = sub_20B8050A0(v7, a3);
        v14 = *(_QWORD *)(a1 + 720);
        v15 = (unint64_t)(v14 * v13) >> 6;
        v16 = (v14 * v13) & 0x3F;
        v17 = v16 + v14;
        v18 = *(_QWORD *)(a1 + 688);
        v19 = *(_QWORD *)(v18 + 8 * v15);
        if (v17 > 0x40)
          v20 = ((2 * *(_QWORD *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu)) | (v19 >> v16);
        else
          v20 = v19 >> v16;
        v22 = v12 | ((*(_DWORD *)(a1 + 728) & v20) << 8);
        v23 = *(_QWORD *)(a1 + 1000);
        if (v23)
        {
          if ((sub_20B7FD360(v23, a2, v22) & 1) == 0)
            return 0;
        }
        else if ((sub_20B80467C(v8, a2, v22) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if (v12 != *(unsigned __int8 *)(*a2 + *(unsigned int *)(v6 + 100)))
          return 0;
        v25 = *(_BYTE *)(*(_QWORD *)(a1 + 640) + a3);
        sub_20B7FB288((uint64_t *)v6, &v25);
        ++*(_DWORD *)(v6 + 100);
      }
      if (a3 <= *(_QWORD *)(a1 + 1064))
        return 1;
      a3 = sub_20B805430((_QWORD *)a1, a3) + ~a3;
      goto LABEL_23;
    }
    v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(*a2 + *(unsigned int *)(v6 + 100)) != v11)
        return 0;
      v26 = *(_DWORD *)(v10 + 12 * v9 + 8);
      sub_20B7FB288((uint64_t *)v6, &v26);
      ++*(_DWORD *)(v6 + 100);
      goto LABEL_22;
    }
    v21 = *(_QWORD *)(a1 + 1000);
    if (!v21)
      break;
    if ((sub_20B7FD360(v21, a2, v11) & 1) == 0)
      return 0;
LABEL_22:
    a3 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v9);
    if (!(_DWORD)a3)
      return 1;
LABEL_23:
    if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100))
    {
      sub_20B7FCF88(a1, (uint64_t)a2, a3);
      return 1;
    }
  }
  if ((sub_20B80467C(v8, a2, v11) & 1) != 0)
    goto LABEL_22;
  return 0;
}

uint64_t sub_20B7FD578(_QWORD *a1, unsigned int a2)
{
  _QWORD *exception;

  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x50000003BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:59: MARISA_CODE_ERROR:"
                   " (config_flags & ~MARISA_CONFIG_MASK) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  if ((a2 & 0x7F) != 0)
    *a1 = a2 & 0x7F;
  sub_20B7FD614((uint64_t)a1, a2);
  sub_20B7FD6BC((uint64_t)a1, a2);
  return sub_20B7FD738((uint64_t)a1, a2);
}

uint64_t sub_20B7FD614(uint64_t result, __int16 a2)
{
  unsigned int v2;
  int v3;
  _QWORD *exception;

  v2 = a2 & 0xF80;
  v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512)
      goto LABEL_11;
    if (v2 != 1024)
    {
      v3 = a2 & 0xF80;
      if (v2 != 2048)
        goto LABEL_9;
      goto LABEL_11;
    }
LABEL_10:
    v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0)
    goto LABEL_11;
  if (v2 == 128)
    goto LABEL_10;
  v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000065;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:101: MARISA_CODE_ERROR"
                   ": undefined cache level";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_20B7FD6BC(uint64_t result, __int16 a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 4096;
  v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000079;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:121: MARISA_CODE_ERR"
                     "OR: undefined tail mode";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    v2 = 0x2000;
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t sub_20B7FD738(uint64_t result, int a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 0x20000;
  v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008DLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:141: MARISA_CODE_ERR"
                     "OR: undefined node order";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    v2 = 0x10000;
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

_BYTE *sub_20B7FD7B4(uint64_t *a1, size_t __sz)
{
  _BYTE *result;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;

  result = operator new[](__sz, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (char *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t *sub_20B7FD838(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0x666666666666666)
      v5 = 0xCCCCCCCCCCCCCCCLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_20B7FD8CC(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = (_DWORD *)(v3[1] + 20 * v6 + 16);
    do
    {
      *((_OWORD *)v8 - 1) = xmmword_20BA34520;
      *v8 = -1;
      v8 += 5;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

_DWORD *sub_20B7FD8CC(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  __int128 *v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;

  result = operator new[](20 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (__int128 *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6;
      v7[4] = *((_DWORD *)v6 + 4);
      *(_OWORD *)v7 = v8;
      v7 += 5;
      v6 = (__int128 *)((char *)v6 + 20);
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t *sub_20B7FD960(uint64_t *result, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 60)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = sub_20B7FD9E4(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_QWORD *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

_QWORD *sub_20B7FD9E4(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](8 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

_QWORD *sub_20B7FDA68(_QWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v1 = result[3];
  if (v1 != result[4])
    return sub_20B7FD9E4(result, v1);
  return result;
}

uint64_t sub_20B7FDADC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  sub_20B7FDB9C((__int128 *)a1, a2);
  *(_QWORD *)(a1 + 48) = *(unsigned int *)sub_20B7F92A0(a2, 4uLL);
  v4 = *(unsigned int *)sub_20B7F92A0(a2, 4uLL);
  if (*(_QWORD *)(a1 + 48) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000087;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:135: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 56) = v4;
  sub_20B7FDC58((__int128 *)(a1 + 64), a2);
  sub_20B7FDD14((__int128 *)(a1 + 112), a2);
  return sub_20B7FDD14((__int128 *)(a1 + 160), a2);
}

uint64_t sub_20B7FDB9C(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FDDD0((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FDC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FDC58(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FDFA0((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FDCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FDD14(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FE128((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FDDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FDDD0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_20B7F92A0(a2, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7FDE84(a2, (uint64_t *)(a1 + 16), v4 >> 3);
  sub_20B7F9200(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 3;
  return sub_20B7FDF38(a1);
}

uint64_t sub_20B7FDE84(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  result = sub_20B7F92A0(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_20B7FDF38(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x10000006BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:107: MARISA_"
                   "STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t sub_20B7FDFA0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_20B7F92A0(a2, 8uLL);
  v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7FE064(a2, (uint64_t *)(a1 + 16), v5);
  sub_20B7F9200(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v5;
  return sub_20B7FDF38(a1);
}

uint64_t sub_20B7FE064(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  result = sub_20B7F92A0(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_20B7FE128(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_20B7F92A0(a2, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7FE1DC(a2, (uint64_t *)(a1 + 16), v4 >> 2);
  sub_20B7F9200(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 2;
  return sub_20B7FDF38(a1);
}

uint64_t sub_20B7FE1DC(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  result = sub_20B7F92A0(a1, 4 * a3);
  *a2 = result;
  return result;
}

_QWORD *sub_20B7FE290(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *exception;

  sub_20B7FDB9C((__int128 *)a1, a2);
  v4 = *(unsigned int *)sub_20B7F92A0(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:134: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)sub_20B7F92A0(a2, 4uLL);
  result = (_QWORD *)sub_20B7F92A0(a2, 8uLL);
  *(_QWORD *)(a1 + 64) = *result;
  return result;
}

uint64_t sub_20B7FE340(uint64_t a1, uint64_t a2)
{
  _QWORD *exception;
  unsigned int v6;
  unsigned int v7;

  sub_20B7FE41C((__int128 *)a1, a2);
  v7 = 0;
  sub_20B7F9640(a2, (char *)&v7, 4uLL);
  *(_QWORD *)(a1 + 48) = v7;
  v6 = 0;
  sub_20B7F9640(a2, (char *)&v6, 4uLL);
  if (*(_QWORD *)(a1 + 48) < (unint64_t)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:153: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 56) = v6;
  sub_20B7FE4D8((__int128 *)(a1 + 64), a2);
  sub_20B7FE594((__int128 *)(a1 + 112), a2);
  return sub_20B7FE594((__int128 *)(a1 + 160), a2);
}

uint64_t sub_20B7FE41C(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FE650((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FE4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FE4D8(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FE810((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FE56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FE594(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B7FEAB0((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FE628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FE650(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  sub_20B7F9640(a2, (char *)&v7, 8uLL);
  if ((v7 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = v7 >> 3;
  sub_20B7FE71C((uint64_t *)a1, v7 >> 3);
  sub_20B7FE770(a2, *(char **)(a1 + 8), v4);
  return sub_20B7F9530(a2, -(int)v7 & 7);
}

uint64_t *sub_20B7FE71C(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = sub_20B7FD9E4(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_20B7FE770(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x700000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:33: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F9640(a1, a2, 8 * a3);
}

uint64_t sub_20B7FE810(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  sub_20B7F9640(a2, (char *)&v7, 8uLL);
  v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7FE8EC((uint64_t *)a1, v7 / 0xC);
  sub_20B7FE96C(a2, *(char **)(a1 + 8), v4);
  return sub_20B7F9530(a2, -(int)v7 & 7);
}

void sub_20B7FE8EC(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    sub_20B7FEA1C(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  a1[3] = v2;
}

uint64_t sub_20B7FE96C(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x700000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:33: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F9640(a1, a2, 12 * a3);
}

_DWORD *sub_20B7FEA1C(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](12 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6;
      v7[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t sub_20B7FEAB0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  sub_20B7F9640(a2, (char *)&v7, 8uLL);
  if ((v7 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = v7 >> 2;
  sub_20B7FEB7C((uint64_t *)a1, v7 >> 2);
  sub_20B7FEBD0(a2, *(char **)(a1 + 8), v4);
  return sub_20B7F9530(a2, -(int)v7 & 7);
}

uint64_t *sub_20B7FEB7C(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 61)
      v5 = 0x3FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_20B7FEC70(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_20B7FEBD0(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x700000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:33: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F9640(a1, a2, 4 * a3);
}

_DWORD *sub_20B7FEC70(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = operator new[](4 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (int *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t sub_20B7FECF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *exception;
  uint64_t v6;

  sub_20B7FE41C((__int128 *)a1, a2);
  LODWORD(v6) = 0;
  sub_20B7F9640(a2, (char *)&v6, 4uLL);
  if (v6 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA0000009BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:155: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 48) = v6;
  LODWORD(v6) = 0;
  sub_20B7F9640(a2, (char *)&v6, 4uLL);
  *(_DWORD *)(a1 + 56) = v6;
  v6 = 0;
  result = sub_20B7F9640(a2, (char *)&v6, 8uLL);
  *(_QWORD *)(a1 + 64) = v6;
  return result;
}

uint64_t sub_20B7FEDC4(uint64_t a1, uint64_t a2)
{
  int v5;
  int __buf;

  sub_20B7FEE44(a1, a2);
  __buf = *(_QWORD *)(a1 + 48);
  sub_20B7F99A4(a2, (char *)&__buf, 4uLL);
  v5 = *(_QWORD *)(a1 + 56);
  sub_20B7F99A4(a2, (char *)&v5, 4uLL);
  sub_20B7FEF40(a1 + 64, a2);
  sub_20B7FF054(a1 + 112, a2);
  return sub_20B7FF054(a1 + 160, a2);
}

uint64_t sub_20B7FEE44(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 8 * *(_QWORD *)(a1 + 24);
  sub_20B7F99A4(a2, (char *)&__buf, 8uLL);
  sub_20B7FEEA0(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B7F9884(a2, 0);
}

uint64_t sub_20B7FEEA0(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F99A4(a1, a2, 8 * a3);
}

uint64_t sub_20B7FEF40(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 12 * *(_QWORD *)(a1 + 24);
  sub_20B7F99A4(a2, (char *)&__buf, 8uLL);
  sub_20B7FEFA4(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B7F9884(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_20B7FEFA4(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F99A4(a1, a2, 12 * a3);
}

uint64_t sub_20B7FF054(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 4 * *(_QWORD *)(a1 + 24);
  sub_20B7F99A4(a2, (char *)&__buf, 8uLL);
  sub_20B7FF0B4(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B7F9884(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_20B7FF0B4(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F99A4(a1, a2, 4 * a3);
}

uint64_t sub_20B7FF154(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  sub_20B7FEE44(a1, a2);
  LODWORD(__buf) = *(_QWORD *)(a1 + 48);
  sub_20B7F99A4(a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *(_DWORD *)(a1 + 56);
  sub_20B7F99A4(a2, (char *)&__buf, 4uLL);
  __buf = *(_QWORD *)(a1 + 64);
  return sub_20B7F99A4(a2, (char *)&__buf, 8uLL);
}

_QWORD **sub_20B7FF1C8(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  if (v2)
  {
    v3 = sub_20B7F9F18(v2);
    MEMORY[0x20BD39CB0](v3, 0x10F0C4010279AD7);
  }
  return a1;
}

char *sub_20B7FF208(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](24 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 16);
    v7 = result + 16;
    do
    {
      *((_QWORD *)v7 - 2) = *((_QWORD *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 6;
      *v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t sub_20B7FF2AC(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __n128 v34;
  uint64_t v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t result;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v11 = 0;
    v12 = (_DWORD *)(v10 + 16);
    do
    {
      *v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  v13 = sub_20B7FFD60(v10, v10 + 24 * v9, 0);
  v14 = 256;
  if (a5 != 1)
    v14 = 1;
  do
  {
    v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  sub_20B7FC740(a1 + 126, v15);
  a1[132] = v15 - 1;
  sub_20B7FBE58(a1, 1);
  sub_20B7FBE58(a1, 0);
  v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_20B7FB288(a1 + 78, v84);
  v77 = a1 + 52;
  sub_20B7FBE58(a1 + 52, 0);
  v72 = a5;
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_20B800394(v82, (uint64_t *)&v78);
  v17 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      v18 = a1[58];
      v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        v18 = v23;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      v76 = v17;
      v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          v25 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != (_DWORD)v22)
            break;
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          v20 = (v20 + 1);
          if ((_DWORD)v21 == (_DWORD)v20)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v20 != (_DWORD)v21)
      {
        v75 = v18;
        v26 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v26)
          MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(float *)(v27 + 24 * v20 + 12);
        v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          v30 = 24 * v20;
          v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(_QWORD *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              sub_20B7FFAF0((uint64_t *)&v80, &v78);
              v27 = *(_QWORD *)(a2 + 8);
              v28 = 0.0;
              LODWORD(v20) = v29;
            }
            v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        v34 = sub_20B7FFAF0((uint64_t *)&v80, &v78);
        v16 = a1 + 78;
        v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v36 = (__n128 *)*((_QWORD *)&v80 + 1);
          v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            v40 = 0;
          }
          else
          {
            v38 = (__n128 *)sub_20B800CA0(v81[1]);
            v40 = v39;
          }
          sub_20B800D00(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38)
            operator delete(v38);
          v35 = v75;
        }
        v41 = v81[1];
        if (v35 == v76)
          a1[133] = v81[1];
        if (v41)
        {
          v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            v45 = v43[2];
            v46 = *v43;
            v47 = *(_QWORD *)(a2 + 8);
            v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              v50 = v48 - 1;
              v51 = v43[2];
              do
              {
                v52 = v51;
                v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  v55 = *v53;
                  v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            v59 = v58;
            v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(_QWORD *)(v47 + 24 * v46) + v45)) & a1[132];
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              *v66 = v24;
              v66[1] = v65;
              *v63 = v59;
              v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              sub_20B7FB288(v73, &v78);
              sub_20B7FBE58(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_20B7FB288(v73, &v78);
              sub_20B7FBE58(v77, 1);
              v78 = 0uLL;
              v79 = 0;
              v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              sub_20B7FFB60((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            sub_20B800394(v82, v44);
            sub_20B7FBE58(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      sub_20B7FBE58(a1, 0);
      v17 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  sub_20B7FBE58(a1, 0);
  sub_20B7FBF34((uint64_t)a1, v72 == 1, 1);
  sub_20B7FFBF8(v16);
  sub_20B7FFC6C((uint64_t)a1, a2, a3);
  v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v69;
  v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((_QWORD)v80)
    MEMORY[0x20BD39C80](v80, 0x1000C8077774924);
  sub_20B8016C0(v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_20B7FF8F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v21;
  _QWORD *exception;
  va_list va;

  va_start(va, a18);
  if (a13)
    MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  sub_20B8016C0((uint64_t *)va);
  v21 = *(_QWORD *)(v18 - 144);
  if (v21)
    MEMORY[0x20BD39C80](v21, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B7FF9F8(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20B8017A0((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B7FFAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

__n128 sub_20B7FFAF0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v4 = a1[3];
  v5 = a1[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 59)
      v7 = 0xFFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    sub_20B800C1C(a1, v8);
    v4 = a1[3];
  }
  result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *sub_20B7FFB60(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 > 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)sub_20B7FF208(result, v8);
    v4 = v3[3];
  }
  v9 = v3[1] + 24 * v4;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

_BYTE *sub_20B7FFBF8(_BYTE *result)
{
  size_t v1;
  _QWORD *exception;

  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return sub_20B7FD7B4((uint64_t *)result, v1);
  return result;
}

uint64_t sub_20B7FFC6C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  sub_20B7FEB7C((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  return result;
}

void sub_20B7FFD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B7FFD60(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = sub_20B8001D8(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 + a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 + a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = sub_20B7FFD60(v5, v10, a3) + v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = sub_20B7FFD60(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = sub_20B7FFD60(v10, v11, a3 + 1) + v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += sub_20B7FFD60(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += sub_20B7FFD60(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += sub_20B80024C(v5, v4, a3);
  return v7;
}

uint64_t sub_20B8001D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 + a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t sub_20B80024C(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = sub_20B800328(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t sub_20B800328(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a1 + a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a2 + a3);
    while (v6)
    {
      v9 = *v7;
      v10 = *v8;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      ++v7;
      ++v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

void sub_20B800394(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20B800450(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void sub_20B800450(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20B800BE8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      sub_20B800764(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    sub_20B800878((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20B800BE8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_20B800994(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20B800AA8((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20B800718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B800764(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_20B800BE8(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_20B800878(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_20B800BE8(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_20B800994(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_20B800BE8(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_20B800AA8(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_20B800BE8(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_20B800BC0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void *sub_20B800BE8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_20B800BC0();
  return operator new(8 * a2);
}

_OWORD *sub_20B800C1C(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;

  result = operator new[](16 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (__int128 *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

void *sub_20B800CA0(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double sub_20B800D00(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &a1[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_20B800F3C(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = sub_20B800F3C(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = sub_20B801078(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        sub_20B800D00(a1, v14, a3, v15, a5, a6);
        sub_20B800D00(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_20B8010EC((__int128 *)a1, (__int128 *)&a1[a4 >> 1], (__int128 *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      sub_20B800E98((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t sub_20B800E98(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = *(float *)(v4 + 28);
        v6 = *(float *)(v4 + 12);
        v4 = v2;
        if (v5 > v6)
        {
          v10 = *(_QWORD *)v2;
          v11 = *(_DWORD *)(v2 + 8);
          v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7)
              break;
            v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double sub_20B800F3C(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  __n128 *v10;
  __n128 v12;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_20B800D00(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_20B800D00(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_20B801078(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_20B801354(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_20B801078(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      v7 = *a1++;
      result = v7;
    }
    else
    {
      v6 = *a3++;
      result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 sub_20B8010EC(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  float v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __n128 v43;

  if (a6)
  {
    v10 = a6;
    do
    {
      if (v10 <= a8 || a5 <= a8)
      {
        sub_20B8013F8(a1, a2, a3, a4, a5, v10, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      v13 = -a5;
      while (1)
      {
        v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3))
          break;
        ++v12;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      v39 = a3;
      v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v26 = v16 >> 1;
        v20 = &a1[(v16 >> 1) + v12];
        v19 = a3;
        if (a3 != a2)
        {
          v27 = a3 - a2;
          v19 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v19[v27 >> 1];
            v30 = *((float *)v29 + 3);
            v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3))
              v19 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0)
          v17 = v10;
        else
          v17 = v10 + 1;
        v18 = v17 >> 1;
        v19 = &a2[v17 >> 1];
        v20 = a2;
        if (v14 != a2)
        {
          v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          v20 = &a1[v12];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[v21 >> 1];
            v24 = *((float *)v23 + 3);
            v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24)
              v21 = v22;
            else
              v20 = v25;
          }
          while (v21);
        }
        v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      v32 = v10 - v18;
      v33 = v18;
      v34 = sub_20B801508((char *)v20, (char *)a2, (char *)v19);
      v35 = v33;
      v36 = (__int128 *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        v38 = v35;
        sub_20B8010EC(v34, v19, v39, a4, a5, v32, a7, v40);
        v19 = v20;
        v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        v37 = v26;
        a8 = v40;
        sub_20B8010EC(v14, v20, v34, a4, v37, v35, a7, v40);
        v14 = v36;
        a3 = v39;
      }
      v10 = v32;
      a1 = v14;
      a2 = v19;
    }
    while (v32);
  }
  return result;
}

__n128 sub_20B801354(__n128 *a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    result = *a1;
    *a3 = *a1;
    v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      v5 = 0;
      v6 = a3;
      do
      {
        v7 = a1;
        v8 = v6;
        a1 = v4;
        v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *v6 = *v8;
          v9 = a3;
          if (v8 != a3)
          {
            v10 = v5;
            while (1)
            {
              v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10))
                break;
              *v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                v9 = a3;
                break;
              }
            }
          }
        }
        result = *a1;
        *v9 = *a1;
        v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

__int128 *sub_20B8013F8(__int128 *result, __int128 *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  float *v8;
  __int128 *v9;
  float v10;
  float v11;
  char *v12;
  unint64_t v13;
  float *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            v17 = *(_OWORD *)v14;
            v14 += 4;
            v16 = v17;
          }
          else
          {
            v15 = *a2++;
            v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14)
            return result;
        }
        return (__int128 *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      v8 = (float *)&__src[v7 * 16];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = *(v8 - 1);
        v11 = *((float *)a2 - 1);
        if (v10 <= v11)
          v12 = (char *)(v8 - 4);
        else
          v12 = (char *)(a2 - 1);
        if (v10 <= v11)
          v8 -= 4;
        else
          --a2;
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src)
          return result;
      }
      v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *sub_20B801508(char *__src, char *a2, char *a3)
{
  char *v4;
  int64_t v6;
  size_t v7;
  __int128 v9;
  __int128 v10;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      v9 = *(_OWORD *)__src;
      v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v6];
      *(_OWORD *)v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      v4 = __src + 16;
      v10 = *((_OWORD *)a3 - 1);
      v7 = a3 - 16 - __src;
      if (a3 - 16 != __src)
        memmove(__src + 16, __src, v7);
      *(_OWORD *)__src = v10;
    }
    else
    {
      return (char *)sub_20B8015E0(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *sub_20B8015E0(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  char v18;
  uint64_t v19;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v13 = *--v12;
        v14 = &v12[v3];
        v15 = v12;
        do
        {
          v16 = v15;
          v15 = v14;
          *v16 = *v14;
          v17 = __OFSUB__(v3, a3 - v14);
          v19 = v3 - (a3 - v14);
          v18 = (v19 < 0) ^ v17;
          v14 = &a1[v19];
          if (v18)
            v14 = &v15[v3];
        }
        while (v14 != v12);
        *v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t sub_20B8016C0(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_20B801754((uint64_t)a1);
}

uint64_t sub_20B801754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_20B8017A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    goto LABEL_10;
  v5 = 0;
  v6 = *(unsigned int **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  do
  {
    v9 = *v6++;
    v8 = v9;
    if (v9 > v5)
      v5 = v8;
    --v7;
  }
  while (v7);
  if (v5)
  {
    v10 = 0;
    do
    {
      ++v10;
      v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    v10 = 0;
  }
  v12 = v4 != 0;
  v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10)
    v14 = v13;
  else
    v14 = v12;
  result = (uint64_t)sub_20B7FE71C((uint64_t *)a1, v14);
  if (v14)
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 24) - 8) = 0;
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  v16 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = v16;
  if (v16)
  {
    v17 = 0;
    do
    {
      result = sub_20B80189C(a1, v17, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(_QWORD *)(a2 + 24));
  }
  return result;
}

uint64_t sub_20B80189C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 48);
  v4 = (unint64_t)(v3 * a2) >> 6;
  v5 = (v3 * a2) & 0x3F;
  v6 = *(unsigned int *)(result + 56);
  v7 = *(_QWORD *)(result + 8);
  v8 = v6 & a3;
  *(_QWORD *)(v7 + 8 * v4) = *(_QWORD *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41)
    *(_QWORD *)(v7 + 8 * v4 + 8) = *(_QWORD *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  return result;
}

uint64_t sub_20B801900(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return sub_20B801DE0(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_20B80239C(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_20B80249C(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_20B801C74(v9, a2);
          else
            return (uint64_t)sub_20B801D48(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20B801DE0(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_20B801DE0(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_20B801DE0(v9 + 2, v15 - 2, a2 - 4);
            sub_20B801DE0(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_20B801DE0(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)sub_20B801F34(v9, a2);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = sub_20B802068(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = sub_20B8021A4(v9, v18);
          v9 = v18 + 2;
          result = sub_20B8021A4(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = sub_20B801900(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_20B8025F0(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *sub_20B801C74(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          v9 = v5[2];
          v8 = v5[3];
          v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          v11 = result;
          if (v5 != result)
          {
            v12 = v3;
            do
            {
              v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  v11 = v5;
                  goto LABEL_17;
                }
                v11 = (unsigned int *)((char *)result + v12);
                v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8)
                  goto LABEL_17;
              }
              else
              {
                v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              v15 = (unsigned int *)((char *)result + v12);
              *v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            v11 = result;
          }
LABEL_17:
          *v11 = v9;
          v11[1] = v8;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *sub_20B801D48(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *i;
  unsigned int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_20B801DE0(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (int *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (int *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unsigned int *sub_20B801F34(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *sub_20B802068(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_20B8021A4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_20B801DE0(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20B80239C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20B80249C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_20B801DE0(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14)
        break;
      v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      v16 = v9;
      goto LABEL_21;
    }
    v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15)
      goto LABEL_18;
    v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_20B80239C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = sub_20B801DE0(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_20B80249C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = sub_20B80239C(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_20B8025F0(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_20B802768((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_20B802768((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = sub_20B8028AC(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          sub_20B802940((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20B802768(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *sub_20B8028AC(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_20B802940(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (unsigned int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

char *sub_20B8029E8(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (char *)operator new[](16 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 2;
      *v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t sub_20B802A78(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  _DWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t result;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 16);
    do
    {
      *v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  v12 = sub_20B8032C8(v9, v9 + 24 * v8, 0);
  v13 = 256;
  if (a5 != 1)
    v13 = 1;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  sub_20B7FC740(a1 + 126, v14);
  a1[132] = v14 - 1;
  sub_20B7FBE58(a1, 1);
  sub_20B7FBE58(a1, 0);
  v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_20B7FB288(a1 + 78, v84);
  sub_20B7FBE58(a1 + 52, 0);
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_20B800394(v82, (uint64_t *)&v78);
  v16 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      v17 = a1[58];
      v18 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v22 = v17;
        v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        v16 = v23;
        v17 = v22;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          v24 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != (_DWORD)v21)
            break;
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          v19 = (v19 + 1);
          if ((_DWORD)v20 == (_DWORD)v19)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v19 != (_DWORD)v20)
      {
        v76 = v16;
        v77 = v17 - v16;
        v25 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v25)
          MEMORY[0x20BD39C80](v25, 0x1000C8077774924);
        v75 = v17;
        v26 = *(_QWORD *)(a2 + 8);
        v27 = *(float *)(v26 + 24 * v19 + 12);
        v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          v29 = 24 * v19;
          v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(_QWORD *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              sub_20B7FFAF0((uint64_t *)&v80, &v78);
              v26 = *(_QWORD *)(a2 + 8);
              v27 = 0.0;
              LODWORD(v19) = v28;
            }
            v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        v33 = sub_20B7FFAF0((uint64_t *)&v80, &v78);
        v15 = a1 + 78;
        v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v35 = (__n128 *)*((_QWORD *)&v80 + 1);
          v36 = v81[1];
          if (v81[1] < 129)
          {
            v37 = 0;
            v39 = 0;
          }
          else
          {
            v37 = (__n128 *)sub_20B800CA0(v81[1]);
            v39 = v38;
          }
          sub_20B800D00(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37)
            operator delete(v37);
          v34 = v76;
        }
        v40 = v81[1];
        if (v75 == v34)
          a1[133] = v81[1];
        if (v40)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v41);
            v43 = (uint64_t *)v42;
            v44 = v42[2];
            v45 = *(_QWORD *)(a2 + 8);
            v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              v48 = v46 - 1;
              v49 = (uint64_t *)(v45 + 24 * *v42);
              v50 = v42[2];
              do
              {
                v51 = v50;
                v50 = v47;
                v52 = v49;
                v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  v54 = *v52;
                  v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            v56 = a1[81];
            v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            v59 = v58;
            v60 = a1[132] & v56;
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = (_DWORD *)(v61 + 12 * v60);
              *v65 = v77;
              v65[1] = v56;
              *v63 = v59;
              v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(_BYTE *)(~v48 + *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43));
              sub_20B7FB288(v73, &v78);
              sub_20B7FBE58(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_20B7FB288(v73, &v78);
              sub_20B7FBE58(v72, 1);
              v78 = 0uLL;
              v79 = 0;
              v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              sub_20B7FFB60((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            sub_20B800394(v82, v43);
            sub_20B7FBE58(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      sub_20B7FBE58(a1, 0);
      v16 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  sub_20B7FBE58(a1, 0);
  sub_20B7FBF34((uint64_t)a1, a5 == 1, 1);
  sub_20B7FFBF8(v15);
  sub_20B8031D4((uint64_t)a1, a2, a3);
  v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  v68 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v68;
  v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((_QWORD)v80)
    MEMORY[0x20BD39C80](v80, 0x1000C8077774924);
  sub_20B8016C0(v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_20B8030CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v30;
  _QWORD *exception;

  if (a21)
    MEMORY[0x20BD39C80](a21, 0x1000C8077774924);
  sub_20B8016C0(&a27);
  v30 = *(_QWORD *)(v27 - 144);
  if (v30)
    MEMORY[0x20BD39C80](v30, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B8031D4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  sub_20B7FEB7C((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  return result;
}

void sub_20B8032A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8032C8(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = sub_20B80374C(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3 - 1);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3 - 1);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = sub_20B8032C8(v5, v10, a3) + v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = sub_20B8032C8(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = sub_20B8032C8(v10, v11, a3 + 1) + v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += sub_20B8032C8(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += sub_20B8032C8(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += sub_20B8037CC(v5, v4, a3);
  return v7;
}

uint64_t sub_20B80374C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a1);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a2);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a3);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t sub_20B8037CC(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = sub_20B8038A8(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t sub_20B8038A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 + ~a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 + ~a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

char *sub_20B803918(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](12 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *((_QWORD *)v7 - 1) = *((_QWORD *)v6 - 1);
      v8 = *v6;
      v6 += 3;
      *v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD39C80);
  return result;
}

uint64_t sub_20B8039AC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)sub_20B7F92A0(a2, 8uLL);
  *(_QWORD *)(a1 + 16) = sub_20B7F92A0(a2, v4);
  sub_20B7F9200(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4;
  return sub_20B7FDF38(a1);
}

uint64_t sub_20B803A0C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v6;

  v6 = 0;
  sub_20B7F9640(a2, (char *)&v6, 8uLL);
  v4 = v6;
  sub_20B7FBA78((uint64_t *)a1, v6);
  sub_20B803A84(a2, *(char **)(a1 + 8), v4);
  return sub_20B7F9530(a2, -(int)v6 & 7);
}

uint64_t sub_20B803A84(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h";
    exception[2] = 0x20000001FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/reader.h:31: MARISA_NULL_"
                   "ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F9640(a1, a2, a3);
}

uint64_t sub_20B803AE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  sub_20B7F9640(a2, (char *)&v7, 8uLL);
  v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:213: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7FC740((uint64_t *)a1, v7 / 0xC);
  sub_20B7FE96C(a2, *(char **)(a1 + 8), v4);
  return sub_20B7F9530(a2, -(int)v7 & 7);
}

uint64_t sub_20B803BBC(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  sub_20B7F99A4(a2, (char *)&__buf, 8uLL);
  sub_20B803C1C(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B7F9884(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_20B803C1C(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_"
                   "ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F99A4(a1, a2, a3);
}

double sub_20B803C78(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 25) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  *(_OWORD *)((char *)a1 + 73) = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  *(_OWORD *)((char *)a1 + 233) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  return result;
}

uint64_t sub_20B803CAC(__int128 *a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  _QWORD *exception;
  const char *v17;
  _OWORD v18[3];
  _OWORD v19[4];
  __int128 v20;
  _BYTE v21[25];
  __int128 v22;
  _BYTE v23[25];
  __int128 v24;
  _BYTE v25[25];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x20000000DLL;
    v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:13: MARISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000)
    goto LABEL_15;
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000024;
    v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:36: MARISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = 0;
    a4 = 4096;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8) + 16 * v6;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8)
        break;
LABEL_11:
      if (++v6 == v5)
        goto LABEL_15;
    }
    v9 = -v8;
    v10 = *(_QWORD *)v7 + 1;
    while (*(_BYTE *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1))
        goto LABEL_11;
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v19[3] = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_20B803EEC((uint64_t)v18, a2, a3, a4);
  v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v18[1];
  *(_QWORD *)&v18[1] = v13;
  v14 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  sub_20B7FBAC4((uint64_t *)a1 + 6, (uint64_t *)v19);
  if ((_QWORD)v24)
    MEMORY[0x20BD39C80](v24, 0x1000C8077774924);
  if ((_QWORD)v22)
    MEMORY[0x20BD39C80](v22, 0x1000C8077774924);
  if ((_QWORD)v20)
    MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
  if (*(_QWORD *)&v19[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v19[0], 0x1000C8077774924);
  result = *(_QWORD *)&v18[0];
  if (*(_QWORD *)&v18[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v18[0], 0x1000C8077774924);
  return result;
}

void sub_20B803ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B803EEC(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  _QWORD *exception;
  _QWORD *v31;
  char v32;
  _QWORD v33[2];
  _OWORD v34[3];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 12);
    do
    {
      *v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  sub_20B8049C4(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  v12 = *(_QWORD *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  sub_20B8047C8((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    v14 = v33;
    do
    {
      --v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = v15 + 16 * v13;
      v18 = (unsigned int *)(v16 + 8);
      v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C4679E8;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000AALL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:170: MARISA_RANGE_E"
                       "RROR: current.length() == 0";
        __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
      }
      v19 = 0;
      v20 = 0;
      v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(_QWORD *)v16 + v19))
          goto LABEL_13;
        ++v20;
        --v19;
        if (v17 == v20)
          goto LABEL_14;
      }
      v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        v22 = *((_QWORD *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      v22 = *((_QWORD *)&v34[0] + 1);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(_QWORD *)(a1 + 24);
      v23 = *v18;
      if ((_DWORD)v23)
      {
        for (i = 0; i < v23; ++i)
        {
          v32 = *(_BYTE *)(*(_QWORD *)v16 - v23 + i + 1);
          sub_20B7FB288((uint64_t *)a1, &v32);
          v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            v25 = 1;
            do
            {
              sub_20B7FBE58((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          sub_20B7FBE58((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      v32 = 0;
      sub_20B7FB288((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        v31 = __cxa_allocate_exception(0x20uLL);
        *v31 = &off_24C4679E8;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C0;
        v31[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:192: MARISA_SIZE_ERROR: b"
                 "uf_.size() > MARISA_UINT32_MAX";
        __cxa_throw(v31, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
      }
LABEL_29:
      v14 = (_QWORD *)v16;
    }
    while (v13);
  }
  sub_20B7FFBF8((_BYTE *)a1);
  v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  v27 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = *(_QWORD *)&v34[1];
  *(_QWORD *)&v34[1] = v27;
  v28 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v34[2]);
  result = v26;
  BYTE8(v34[2]) = v27;
  if ((_QWORD)v26)
    return MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
  return result;
}

void sub_20B8041E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B804228(uint64_t *a1, uint64_t *a2)
{
  sub_20B7FBB28(a1, a2);
  return sub_20B7FBAC4(a1 + 6, a2 + 6);
}

uint64_t sub_20B804254(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_20B80484C(v8, a2);
  sub_20B7FC8D8((uint64_t *)v9, a2);
  v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_20B7FBAC4((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((_QWORD)v14)
    MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x20BD39C80](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_20B8043A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8043BC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_20B804908(v8, a2);
  sub_20B7FCC30((uint64_t *)v9, a2);
  v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_20B7FBAC4((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((_QWORD)v14)
    MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x20BD39C80](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_20B804510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B804524(uint64_t a1, uint64_t a2)
{
  sub_20B804FE4(a1, a2);
  return sub_20B7FEDC4(a1 + 48, a2);
}

uint64_t *sub_20B804550(uint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;

  v3 = a3;
  v4 = result;
  v5 = *(uint64_t **)(a2 + 40);
  if (result[12])
  {
    do
    {
      result = sub_20B7FB288(v5, (_BYTE *)(v4[2] + v3));
      v6 = *(_QWORD *)(v4[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    v7 = (_BYTE *)(result[2] + a3);
    if (*v7)
    {
      do
        result = sub_20B7FB288(v5, v7);
      while (*++v7);
    }
  }
  return result;
}

uint64_t sub_20B8045D8(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  v3 = a2[5];
  v4 = a1[2];
  if (a1[12])
  {
    v5 = *(_DWORD *)(v3 + 100);
    v6 = *a2;
    v7 = a2[1];
    do
    {
      if (*(unsigned __int8 *)(v4 + a3) != *(unsigned __int8 *)(v6 + v5))
        break;
      *(_DWORD *)(v3 + 100) = ++v5;
      if (((*(_QWORD *)(a1[8] + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
        return 1;
      ++a3;
    }
    while (v7 > v5);
  }
  else
  {
    v12 = v4 + a3;
    v8 = v4 + a3 - *(unsigned int *)(v3 + 100);
    v9 = *a2;
    v10 = a2[1];
    v11 = *(unsigned __int8 *)v12;
    LODWORD(v12) = *(_DWORD *)(v3 + 100);
    while (v11 == *(unsigned __int8 *)(v9 + v12))
    {
      v12 = (v12 + 1);
      *(_DWORD *)(v3 + 100) = v12;
      v11 = *(unsigned __int8 *)(v8 + v12);
      if (!*(_BYTE *)(v8 + v12))
        return 1;
      if (v10 <= v12)
        return 0;
    }
  }
  return 0;
}

uint64_t sub_20B80467C(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  int v16;
  unsigned __int8 *v17;

  v3 = a3;
  v6 = a2[5];
  if (a1[12])
  {
    v7 = *(_DWORD *)(v6 + 100);
    while (1)
    {
      v8 = (_BYTE *)(a1[2] + v3);
      v9 = *v8;
      v10 = *(unsigned __int8 *)(*a2 + v7);
      v11 = v9 == v10;
      if (v9 != v10)
        break;
      sub_20B7FB288((uint64_t *)v6, v8);
      v7 = *(_DWORD *)(v6 + 100) + 1;
      *(_DWORD *)(v6 + 100) = v7;
      if (((*(_QWORD *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
        break;
      ++v3;
      if (a2[1] <= (unint64_t)v7)
      {
        do
        {
          sub_20B7FB288((uint64_t *)v6, (_BYTE *)(a1[2] + v3));
          v12 = *(_QWORD *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
          ++v3;
        }
        while ((v12 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    v15 = a1[2] + a3;
    v13 = (unsigned __int8 *)(v15 - *(unsigned int *)(v6 + 100));
    v14 = *(unsigned __int8 *)v15;
    LODWORD(v15) = *(_DWORD *)(v6 + 100);
    while (1)
    {
      v16 = *(unsigned __int8 *)(*a2 + v15);
      v11 = v14 == v16;
      if (v14 != v16)
        break;
      sub_20B7FB288((uint64_t *)v6, &v13[v15]);
      v15 = (*(_DWORD *)(v6 + 100) + 1);
      *(_DWORD *)(v6 + 100) = v15;
      v14 = v13[v15];
      if (!v13[v15])
        break;
      if (a2[1] <= v15)
      {
        v17 = &v13[v15];
        do
          sub_20B7FB288((uint64_t *)v6, v17);
        while (*++v17);
        return 1;
      }
    }
  }
  return v11;
}

uint64_t *sub_20B8047C8(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = (uint64_t *)sub_20B7FEC70(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

uint64_t sub_20B80484C(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B8039AC((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B8048E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B804908(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B804F10((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80499C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8049C4(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    v7 = 0;
    goto LABEL_68;
  }
  v7 = 0;
  do
  {
    v8 = sub_20B804D58(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        v17 = *(_DWORD *)(v10 + 12);
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v12 + 8);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      v18 = v11 - 16;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 16);
          v13 -= 16;
          v22 = *(_QWORD *)v11;
          v23 = *(_DWORD *)(v11 + 12);
          *(_QWORD *)v11 = v21;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v25 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v24;
      v26 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v25;
      *(_QWORD *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    v42 = v7;
    while (v12 > v5)
    {
      v28 = *(_QWORD *)(v12 - 16);
      v12 -= 16;
      v27 = v28;
      v29 = *(_QWORD *)(v10 - 16);
      v10 -= 16;
      *(_QWORD *)v12 = v29;
      v30 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v10 = v27;
      v31 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v30;
      *(_QWORD *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      v32 = *(_QWORD *)v13;
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v33 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v32;
      v34 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v33;
      *(_QWORD *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    v35 = v10 - v5;
    v36 = (uint64_t)(v10 - v5) >> 4;
    v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17)
            goto LABEL_52;
          v39 = sub_20B8049C4(v5, v10, a3) + v42;
        }
        v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          v7 = v42;
        }
        else
        {
          v7 = sub_20B8049C4(v11, v4, a3) + v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        v5 = v10;
LABEL_63:
        v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16)
      goto LABEL_31;
    if (v37 < 17)
    {
      v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      v7 = v42 + 1;
    }
    else
    {
      v7 = sub_20B8049C4(v10, v11, a3 + 1) + v42;
    }
    v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += sub_20B8049C4(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += sub_20B8049C4(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_64:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17)
    v7 += sub_20B804DD8(v5, v4, a3);
  return v7;
}

uint64_t sub_20B804D58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 - a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 - a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 - a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t sub_20B804DD8(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)(a1 + 16);
  if (a1 + 16 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 2;
        v10 = sub_20B804EA4((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1)
          break;
        v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        v12 = v8[1];
        *v8 = v11;
        v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t sub_20B804EA4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 - a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 - a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

uint64_t sub_20B804F10(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v6;

  v6 = 0;
  sub_20B7F9640(a2, (char *)&v6, 8uLL);
  v4 = v6;
  sub_20B7FBA78((uint64_t *)a1, v6);
  sub_20B804F88(a2, *(char **)(a1 + 8), v4);
  return sub_20B7F9530(a2, -(int)v6 & 7);
}

uint64_t sub_20B804F88(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/reader.h";
    exception[2] = 0x20000001FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/reader.h:31: MA"
                   "RISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F9640(a1, a2, a3);
}

uint64_t sub_20B804FE4(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  sub_20B7F99A4(a2, (char *)&__buf, 8uLL);
  sub_20B805044(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B7F9884(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_20B805044(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h:30: MA"
                   "RISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B7F99A4(a1, a2, a3);
}

uint64_t sub_20B8050A0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2 >> 9;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (a2 >> 6)) & ~(-1 << a2);
  v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t sub_20B8051C4(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[16];
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3;
    v8 = v3-- << 9;
    v9 = (unsigned int *)(v7 + 12);
    do
    {
      v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v11 = (unsigned int *)(v5 + 12 * v3);
  v12 = v11[1];
  v13 = a2 - (v3 << 9) + *v11;
  v14 = 8 * v3;
  if (v13 >= 256 - (v12 >> 23))
  {
    v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v16 = (v15 >> 9) & 0x1FF;
    if (v13 >= 384 - v16)
    {
      v18 = (v15 >> 18) & 0x1FF;
      if (v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        v13 = v13 + v18 - 448;
      }
      else
      {
        v14 |= 6uLL;
        v13 = v13 + v16 - 384;
      }
    }
    else if (v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      v13 = v13 + (v15 & 0x1FF) - 320;
    }
    else
    {
      v14 |= 4uLL;
      v13 = (v12 >> 23) + v13 - 256;
    }
  }
  else if (v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    v17 = (v12 >> 15);
    if (v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      v13 = v13 + v17 - 192;
    }
    else
    {
      v14 |= 2uLL;
      v13 = v13 + (v12 >> 7) - 128;
    }
  }
  else if (v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    v13 = (v12 & 0x7F) + v13 - 64;
  }
  return sub_20B8053A8(v13, v14 << 6, ~*(_QWORD *)(a1[2] + 8 * v14));
}

unint64_t sub_20B8053A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * a1
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
       + byte_20BA3458E[256 * (a1 - ((unint64_t)(0x101010101010100 * v4) >> v5))
                      + (a3 >> v5)];
}

unint64_t sub_20B805430(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;

  v2 = a1[22];
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3--;
    v8 = (unsigned int *)(v7 + 12);
    do
    {
      v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v10 = (unsigned int *)(v5 + 12 * v3);
  v11 = v10[1];
  v12 = a2 - *v10;
  v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    v23 = v11 >> 23;
    v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v25 = (v24 >> 9) & 0x1FF;
    v26 = (v24 >> 18) & 0x1FF;
    v27 = v13 | 7;
    v28 = v12 >= v26;
    if (v12 < v26)
      v29 = v12 - v25;
    else
      v29 = v12 - v26;
    if (!v28)
      v27 = v13 | 6;
    v30 = v24 & 0x1FF;
    v31 = v13 | 5;
    v32 = v13 | 4;
    v33 = v12 - v23;
    v34 = v12 >= v30;
    if (v12 < v30)
      v21 = v33;
    else
      v21 = v12 - v30;
    if (v34)
      v32 = v31;
    if (v12 < v25)
    {
      v22 = v32;
    }
    else
    {
      v21 = v29;
      v22 = v27;
    }
  }
  else
  {
    v14 = v11 >> 7;
    v15 = (v11 >> 15);
    v16 = v12 - (v11 >> 7);
    if (v12 < v15)
    {
      v17 = v13 | 2;
    }
    else
    {
      v16 = v12 - v15;
      v17 = v13 | 3;
    }
    v18 = v11 & 0x7F;
    v20 = v12 >= v18;
    v19 = v12 - v18;
    if (v20)
      v13 |= 1uLL;
    else
      v19 = v12;
    v20 = v12 >= v14;
    if (v12 < v14)
      v21 = v19;
    else
      v21 = v16;
    if (v20)
      v22 = v17;
    else
      v22 = v13;
  }
  return sub_20B8053A8(v21, v22 << 6, *(_QWORD *)(a1[2] + 8 * v22));
}

void sub_20B8055A4(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;

  v8 = a1 + 8;
  v9 = a2[6];
  if ((v9 & 0x1FF) != 0)
    v10 = (v9 >> 9) + 1;
  else
    v10 = v9 >> 9;
  sub_20B7FE8EC(v8, v10 + 1);
  v11 = a2[6];
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      if ((v12 & 0x3F) == 0)
        __asm { BR              X12 }
      if (((*(_QWORD *)(a2[2] + 8 * (v12 >> 6)) >> (v12 & 0x3F)) & 1) != 0)
      {
        if (a4 && (v13 & 0x1FF) == 0)
        {
          v31 = v12;
          sub_20B805964(a1 + 20, &v31);
        }
        ++v13;
      }
      else
      {
        if (a3 && (v14 & 0x1FF) == 0)
        {
          v31 = v12;
          sub_20B805964(a1 + 14, &v31);
        }
        ++v14;
      }
      ++v12;
      v11 = a2[6];
    }
    while (v12 < v11);
    if ((v11 & 0x1FF) != 0)
    {
      v15 = (v11 - 1) >> 9;
      switch(((unint64_t)(v11 - 1) >> 6) & 7)
      {
        case 0uLL:
          v16 = a1[9];
          v17 = (_DWORD *)(v16 + 12 * v15);
          v18 = v13 - *v17;
          v19 = v17[1] & 0xFFFFFF80 | v18 & 0x7F;
          v17[1] = v19;
          goto LABEL_23;
        case 1uLL:
          v16 = a1[9];
          v20 = (_DWORD *)(v16 + 12 * v15);
          v19 = v20[1];
          v18 = v13 - *v20;
LABEL_23:
          v21 = v19 & 0xFFFF807F | (v18 << 7);
          *(_DWORD *)(v16 + 12 * v15 + 4) = v21;
          goto LABEL_25;
        case 2uLL:
          v16 = a1[9];
          v22 = (_DWORD *)(v16 + 12 * v15);
          v21 = v22[1];
          v18 = v13 - *v22;
LABEL_25:
          v23 = v21 & 0xFF807FFF | (v18 << 15);
          *(_DWORD *)(v16 + 12 * v15 + 4) = v23;
          goto LABEL_27;
        case 3uLL:
          v16 = a1[9];
          v24 = (_DWORD *)(v16 + 12 * v15);
          v23 = v24[1];
          v18 = v13 - *v24;
LABEL_27:
          *(_DWORD *)(v16 + 12 * v15 + 4) = v23 & 0x7FFFFF | ((unsigned __int16)v18 << 23);
          goto LABEL_29;
        case 4uLL:
          v16 = a1[9];
          v18 = v13 - *(_DWORD *)(v16 + 12 * v15);
LABEL_29:
          v25 = v16 + 12 * v15;
          v26 = *(_DWORD *)(v25 + 8) & 0xFFFFFE00 | v18 & 0x1FF;
          *(_DWORD *)(v25 + 8) = v26;
          goto LABEL_30;
        case 5uLL:
          v16 = a1[9];
          v29 = (_DWORD *)(v16 + 12 * v15);
          v26 = v29[2];
          v18 = v13 - *v29;
LABEL_30:
          v27 = v26 & 0xFFFC01FF | ((v18 & 0x1FF) << 9);
          *(_DWORD *)(v16 + 12 * v15 + 8) = v27;
          goto LABEL_31;
        case 6uLL:
          v16 = a1[9];
          v30 = (_DWORD *)(v16 + 12 * v15);
          v27 = v30[2];
          v18 = v13 - *v30;
LABEL_31:
          *(_DWORD *)(v16 + 12 * v15 + 8) = v27 & 0xF803FFFF | ((v18 & 0x1FF) << 18);
          break;
        default:
          break;
      }
    }
  }
  else
  {
    v13 = 0;
  }
  a1[6] = v11;
  a1[7] = a2[7];
  *(_DWORD *)(a1[9] + 12 * a1[11] - 12) = v13;
  if (a3)
  {
    v31 = a2[6];
    sub_20B805964(a1 + 14, &v31);
    sub_20B8059D0((_DWORD *)a1 + 28);
  }
  if (a4)
  {
    v28 = a1 + 20;
    v31 = a2[6];
    sub_20B805964(v28, &v31);
    sub_20B8059D0(v28);
  }
}

uint64_t *sub_20B805964(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)sub_20B7FEC70(result, v8);
    v4 = v3[3];
    v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *sub_20B8059D0(_DWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h:100: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return sub_20B7FEC70((uint64_t *)result, v1);
  return result;
}

double sub_20B805A44(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_20B805A5C(uint64_t *a1, size_t __sz)
{
  uint64_t result;
  size_t v5;

  if (a1[7] == (unint64_t)a1[11] >> 8)
    sub_20B805AE0(a1);
  if (__sz < 0x401)
  {
    v5 = a1[10];
    if (v5 < __sz)
    {
      sub_20B805FB4(a1);
      v5 = a1[10];
    }
    result = a1[9];
    a1[9] = result + __sz;
    a1[10] = v5 - __sz;
  }
  else
  {
    sub_20B805DDC(a1, __sz);
    return *(_QWORD *)(a1[3] + 8 * a1[4] - 8);
  }
  return result;
}

uint64_t sub_20B805AE0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *exception;
  uint64_t v20;

  v2 = a1[7];
  if (v2 == a1[8])
  {
    if (v2)
      v3 = 2 * v2;
    else
      v3 = 1;
    v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0)
      v4 = 1;
    if (v4)
      v5 = -1;
    else
      v5 = 8 * v3 + 16;
    v6 = operator new[](v5, MEMORY[0x24BEDB6B8]);
    if (!v6)
    {
      v20 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x8000000A9;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:169: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    *v6 = 8;
    v6[1] = v3;
    v7 = (uint64_t)(v6 + 2);
    if (v3)
      bzero(v6 + 2, 8 * v3);
    v20 = v7;
    if (v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v9 = a1[6];
        v10 = v20;
        v11 = *(_QWORD *)(v9 + 8 * i);
        *(_QWORD *)(v9 + 8 * i) = *(_QWORD *)(v20 + 8 * i);
        *(_QWORD *)(v10 + 8 * i) = v11;
      }
      v7 = v20;
    }
    v12 = a1[6];
    a1[6] = v7;
    v20 = v12;
    a1[8] = v3;
    sub_20B806200(&v20);
  }
  v13 = operator new[](0x1000uLL, MEMORY[0x24BEDB6B8]);
  if (!v13)
  {
    v18 = __cxa_allocate_exception(0x20uLL);
    *v18 = &off_24C4679E8;
    v18[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v18[2] = 0x8000000B1;
    v18[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:177: MARISA_MEMORY_ERROR: new_block.get() == NULL";
    __cxa_throw(v18, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v14 = v13;
  bzero(v13, 0x1000uLL);
  v16 = a1[6];
  v15 = a1[7];
  a1[7] = v15 + 1;
  result = *(_QWORD *)(v16 + 8 * v15);
  *(_QWORD *)(v16 + 8 * v15) = v14;
  if (result)
    return MEMORY[0x20BD39C80](result, 0x1050C80717B85FCLL);
  return result;
}

void sub_20B805CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B806200((uint64_t *)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B805CBC(uint64_t *a1, char *a2, size_t __sz, float a4)
{
  char *v6;
  _BYTE *result;
  _BYTE *v9;
  size_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  const char *v15;

  v6 = a2;
  if (!a2 && __sz)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x20000003DLL;
    v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:61: MARISA_NULL_ERROR: (ptr == NULL) && (length != 0)";
    goto LABEL_10;
  }
  if (HIDWORD(__sz))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x70000003ELL;
    v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:62: MARISA_SIZE_ERROR: length > MARISA_UINT32_MAX";
LABEL_10:
    exception[3] = v15;
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  result = (_BYTE *)sub_20B805A5C(a1, __sz);
  if (__sz)
  {
    v9 = result;
    v10 = __sz;
    do
    {
      v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  v12 = *(_QWORD *)(a1[6] + (((unint64_t)a1[11] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[11];
  *(_QWORD *)v12 = result;
  *(_DWORD *)(v12 + 8) = __sz;
  *(float *)(v12 + 12) = a4;
  v13 = a1[12] + __sz;
  ++a1[11];
  a1[12] = v13;
  return result;
}

void *sub_20B805DDC(_QWORD *a1, size_t __sz)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *exception;
  uint64_t v21;

  v4 = a1[4];
  if (v4 == a1[5])
  {
    if (v4)
      v5 = 2 * v4;
    else
      v5 = 1;
    v6 = v5 >> 61 != 0;
    if (8 * v5 >= 0xFFFFFFFFFFFFFFF0)
      v6 = 1;
    if (v6)
      v7 = -1;
    else
      v7 = 8 * v5 + 16;
    v8 = operator new[](v7, MEMORY[0x24BEDB6B8]);
    if (!v8)
    {
      v21 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000097;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:151: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    *v8 = 8;
    v8[1] = v5;
    v9 = (uint64_t)(v8 + 2);
    if (v5)
      bzero(v8 + 2, 8 * v5);
    v21 = v9;
    if (v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v11 = a1[3];
        v12 = v21;
        v13 = *(_QWORD *)(v11 + 8 * i);
        *(_QWORD *)(v11 + 8 * i) = *(_QWORD *)(v21 + 8 * i);
        *(_QWORD *)(v12 + 8 * i) = v13;
      }
      v9 = v21;
    }
    v14 = a1[3];
    a1[3] = v9;
    v21 = v14;
    a1[5] = v5;
    sub_20B806184(&v21);
  }
  result = operator new[](__sz, MEMORY[0x24BEDB6B8]);
  if (!result)
  {
    v19 = __cxa_allocate_exception(0x20uLL);
    *v19 = &off_24C4679E8;
    v19[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v19[2] = 0x80000009FLL;
    v19[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:159: MARISA_MEMORY_ERROR: new_block.get() == NULL";
    __cxa_throw(v19, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v17 = a1[3];
  v16 = a1[4];
  a1[4] = v16 + 1;
  v18 = *(_QWORD *)(v17 + 8 * v16);
  *(_QWORD *)(v17 + 8 * v16) = result;
  if (v18)
    return (void *)MEMORY[0x20BD39C80](v18, 0x1000C8077774924);
  return result;
}

void sub_20B805FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B806184((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B805FB4(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD *v15;
  uint64_t v16;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    if (v2)
      v3 = 2 * v2;
    else
      v3 = 1;
    v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0)
      v4 = 1;
    if (v4)
      v5 = -1;
    else
      v5 = 8 * v3 + 16;
    v6 = operator new[](v5, MEMORY[0x24BEDB6B8]);
    if (!v6)
    {
      v16 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C4679E8;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000081;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:129: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    *v6 = 8;
    v6[1] = v3;
    v7 = (uint64_t)(v6 + 2);
    if (v3)
      bzero(v6 + 2, 8 * v3);
    v16 = v7;
    if (v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v9 = v16;
        v10 = *(_QWORD *)(*v1 + 8 * i);
        *(_QWORD *)(*v1 + 8 * i) = *(_QWORD *)(v16 + 8 * i);
        *(_QWORD *)(v9 + 8 * i) = v10;
      }
      v7 = v16;
    }
    v11 = *v1;
    *v1 = v7;
    v16 = v11;
    v1[2] = v3;
    result = sub_20B806184(&v16);
    v2 = v1[1];
  }
  v12 = *v1;
  v13 = *(_QWORD *)(*v1 + 8 * v2);
  if (!v13)
  {
    result = (uint64_t *)operator new[](0x1000uLL, MEMORY[0x24BEDB6B8]);
    if (!result)
    {
      v15 = __cxa_allocate_exception(0x20uLL);
      *v15 = &off_24C4679E8;
      v15[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      v15[2] = 0x80000008ALL;
      v15[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:138: MARISA_MEMORY_ERROR: new_block.get() == NULL";
      __cxa_throw(v15, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
    }
    *(_QWORD *)(v12 + 8 * v2) = result;
    v13 = *(_QWORD *)(*v1 + 8 * v2);
  }
  v1[1] = v2 + 1;
  v1[9] = v13;
  v1[10] = 4096;
  return result;
}

void sub_20B806170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B806184((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B806184(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 8 * v3;
      do
      {
        v7 = *(_QWORD *)(v4 + v6);
        if (v7)
          MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x20BD39C80](v4 - 8, 0x10C80436913F5);
  }
  return a1;
}

uint64_t *sub_20B806200(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 8 * v3;
      do
      {
        v7 = *(_QWORD *)(v4 + v6);
        if (v7)
          MEMORY[0x20BD39C80](v7, 0x1050C80717B85FCLL);
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x20BD39C80](v4 - 8, 0x20C8093837F09);
  }
  return a1;
}

_QWORD *sub_20B80627C(_QWORD *result)
{
  *result = 0;
  return result;
}

_QWORD **sub_20B806288(_QWORD **a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *exception;
  _QWORD *v11;

  v6 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v6)
  {
    v11 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x80000000ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:14: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v7 = v6;
  sub_20B7F9F14((uint64_t)v6);
  v11 = v7;
  sub_20B7FA178((uint64_t)v7, a2, a3);
  v8 = *a1;
  *a1 = v7;
  v11 = v8;
  return sub_20B7FF1C8(&v11);
}

void sub_20B806354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

_QWORD **sub_20B806380(_QWORD **a1, char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v9;
  __int128 v10[2];
  _QWORD *v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:21: MARISA_NULL_ERROR: filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_24C4679E8;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v9[2] = 0x800000018;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:24: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v9, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v5 = v4;
  sub_20B7F9F14((uint64_t)v4);
  v11 = v5;
  sub_20B7F8EC0((uint64_t)v10);
  sub_20B7F8F24(v10, a2);
  sub_20B7FA67C((uint64_t)v11, (uint64_t *)v10);
  v6 = *a1;
  *a1 = v11;
  v11 = v6;
  sub_20B7F8F20((uint64_t)v10);
  return sub_20B7FF1C8(&v11);
}

void sub_20B8064AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B7FF1C8((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_20B8064EC(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *exception;
  _QWORD *v11;
  __int128 v12[2];
  _QWORD *v13;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:33: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v6 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v6)
  {
    v13 = 0;
    v11 = __cxa_allocate_exception(0x20uLL);
    *v11 = &off_24C4679E8;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v11[2] = 0x800000024;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:36: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v11, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v7 = v6;
  sub_20B7F9F14((uint64_t)v6);
  v13 = v7;
  sub_20B7F8EC0((uint64_t)v12);
  sub_20B7F916C(v12, a2, a3);
  sub_20B7FA67C((uint64_t)v13, (uint64_t *)v12);
  v8 = *a1;
  *a1 = v13;
  v13 = v8;
  sub_20B7F8F20((uint64_t)v12);
  return sub_20B7FF1C8(&v13);
}

void sub_20B806624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B7FF1C8((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_20B806664(_QWORD **a1, char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v9;
  _BYTE v10[32];
  _QWORD *v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000002DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:45: MARISA_NULL_ERROR: filename == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_24C4679E8;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v9[2] = 0x800000030;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:48: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v9, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v5 = v4;
  sub_20B7F9F14((uint64_t)v4);
  v11 = v5;
  sub_20B7F9350((uint64_t)v10);
  sub_20B7F9398((uint64_t)v10, a2);
  sub_20B7FA940((uint64_t)v11, (uint64_t)v10);
  v6 = *a1;
  *a1 = v11;
  v11 = v6;
  sub_20B7F9368((uint64_t)v10);
  return sub_20B7FF1C8(&v11);
}

void sub_20B806790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B7FF1C8((_QWORD **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8067D0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (!*(_QWORD *)(a2 + 40))
    {
      sub_20B7F8C60(a2);
      result = *a1;
    }
    return sub_20B7FAD48(result, a2);
  }
  return result;
}

unint64_t sub_20B80681C(unint64_t *a1, uint64_t a2)
{
  unint64_t result;

  result = *a1;
  if (result)
  {
    if (!*(_QWORD *)(a2 + 40))
    {
      sub_20B7F8C60(a2);
      result = *a1;
    }
    return sub_20B7FB020(result, a2);
  }
  return result;
}

uint64_t sub_20B806868(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (!*(_QWORD *)(a2 + 40))
    {
      sub_20B7F8C60(a2);
      result = *a1;
    }
    return sub_20B7FB2F0(result, a2);
  }
  return result;
}

uint64_t sub_20B8068B4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (!*(_QWORD *)(a2 + 40))
    {
      sub_20B7F8C60(a2);
      result = *a1;
    }
    return sub_20B7FB3D4(result, a2);
  }
  return result;
}

uint64_t sub_20B806900(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return *(_QWORD *)(*(_QWORD *)a1 + 264);
  else
    return 0;
}

_QWORD **sub_20B806918(_QWORD **a1)
{
  _QWORD *v2;

  v2 = *a1;
  *a1 = 0;
  return sub_20B7FF1C8(&v2);
}

uint64_t sub_20B806944(uint64_t a1, _QWORD **a2)
{
  _QWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000E9;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:233: MARISA_NULL_ERROR: trie == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B80699C(a1, a2);
}

uint64_t sub_20B80699C(uint64_t a1, _QWORD **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v9;
  _BYTE v10[32];
  _QWORD *v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000C8;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:200: MARISA_NULL_ERROR: trie == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v4 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_24C4679E8;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v9[2] = 0x8000000CCLL;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:204: MARISA_MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(v9, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  v5 = v4;
  sub_20B7F9F14((uint64_t)v4);
  v11 = v5;
  sub_20B7F9350((uint64_t)v10);
  sub_20B7F9504((uint64_t)v10, a1);
  sub_20B7FA940((uint64_t)v11, (uint64_t)v10);
  v6 = *a2;
  *a2 = v11;
  v11 = v6;
  sub_20B7F9368((uint64_t)v10);
  sub_20B7FF1C8(&v11);
  return a1;
}

void sub_20B806ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B7FF1C8((_QWORD **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B806B10(uint64_t a1, uint64_t *a2)
{
  _QWORD *exception;
  _BYTE v6[32];

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C4679E8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:213: MARISA_STATE_ERROR: trie.trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C45D2C8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7F9350((uint64_t)v6);
  sub_20B7F9504((uint64_t)v6, a1);
  sub_20B7FAC48(*a2, (uint64_t)v6);
  sub_20B7F9368((uint64_t)v6);
  return a1;
}

void sub_20B806BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B806BCC(uint64_t *a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  uint64_t v13;

  v8 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v8)
  {
    v13 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x800000014;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:20: MARISA_"
                   "MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v9 = (uint64_t)v8;
  sub_20B807994((uint64_t)v8);
  v13 = v9;
  sub_20B807BFC(v9, a2, a3, a4);
  v10 = *a1;
  *a1 = v9;
  v13 = v10;
  return sub_20B8071D0(&v13);
}

void sub_20B806CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B806CD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  _QWORD *v11;
  __int128 v12[2];
  uint64_t v13;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000029;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:41: MARISA_"
                   "NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v6 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v6)
  {
    v13 = 0;
    v11 = __cxa_allocate_exception(0x20uLL);
    *v11 = &off_24C459000;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v11[2] = 0x80000002CLL;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:44: MARISA_MEMORY"
             "_ERROR: temp.get() == NULL";
    __cxa_throw(v11, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v7 = (uint64_t)v6;
  sub_20B807994((uint64_t)v6);
  v13 = v7;
  sub_20B7F8EC0((uint64_t)v12);
  sub_20B807600(v12, a2, a3);
  sub_20B808028(v13, (uint64_t *)v12);
  v8 = *a1;
  *a1 = v13;
  v13 = v8;
  sub_20B8075FC(v12);
  return sub_20B8071D0(&v13);
}

void sub_20B806E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B8071D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B806E50(uint64_t *a1, uint64_t a2)
{
  _QWORD *exception;
  _BYTE v6[32];

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:100: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B7F9350((uint64_t)v6);
  sub_20B7F9504((uint64_t)v6, a2);
  sub_20B8082F0(*a1, (uint64_t)v6);
  return sub_20B7F9368((uint64_t)v6);
}

void sub_20B806EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B806F04(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000006DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:109: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B8083F0(v3, a2, a3);
}

uint64_t sub_20B806F64(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000073;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:115: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B808F14(v4, a2, a3, a4);
}

uint64_t sub_20B806FC4(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000007FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:127: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B80921C(v4, a2, a3, a4);
}

void sub_20B807024(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  _QWORD *exception;

  v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:134: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B808458(v5, a2, a3, a4, a5);
}

void sub_20B807084(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *exception;

  v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000008CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:140: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B80A19C(v5, a2, a3, a4, a5);
}

void sub_20B8070E4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000093;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:147: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B808A54(v4, a2, a3, a4);
}

void sub_20B807144(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:153: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B808B94(v3, a2, a3);
}

void sub_20B8071A4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8071C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20B8071D0(_QWORD *a1)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = sub_20B807BF8();
    MEMORY[0x20BD39CB0](v2, 0x10F0C4010279AD7);
  }
  return a1;
}

uint64_t sub_20B807210(uint64_t result, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  _QWORD __buf[129];

  v2 = __nitems;
  v3 = result;
  __buf[128] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        result = sub_20B807330(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return sub_20B807330(result, (char *)__buf, __nitems);
    }
  }
  return result;
}

uint64_t sub_20B807330(uint64_t result, char *__buf, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = __buf;
  v5 = result;
  v6 = *(FILE **)result;
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000076;
    v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        result = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0)
          break;
        v4 += result;
        v3 -= result;
        if (!v3)
          return result;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C459000;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000084;
      v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:132: "
           "MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C459000;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000089;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:137"
             ": MARISA_IO_ERROR: ::fwrite(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      result = fflush(*(FILE **)v5);
      if ((_DWORD)result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C459000;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x90000008ALL;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:138"
             ": MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = std::ostream::write();
        if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_24C459000;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008FLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:143: MARISA_IO_ERROR: !stream_->write(static_cast<const char*>(data), static_cast<std::streamsize>(size))";
          __cxa_throw(v10, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_20B80753C()
{
  __break(1u);
}

void sub_20B8075A0()
{
  __cxa_end_catch();
  JUMPOUT(0x20B8075A8);
}

uint64_t sub_20B8075B4(uint64_t a1)
{
  void *v2;
  int v3;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)-1)
    munmap(v2, *(_QWORD *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 != -1)
    close(v3);
  return a1;
}

uint64_t sub_20B807600(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  int v5;
  _QWORD *exception;
  _OWORD v8[2];
  int v9;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000050;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:80: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)a1 = a2;
  *((_QWORD *)a1 + 1) = -1;
  *((_QWORD *)a1 + 2) = a3;
  *((_QWORD *)a1 + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  v5 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = -1;
  v9 = v5;
  return sub_20B8075B4((uint64_t)v8);
}

uint64_t sub_20B807694(uint64_t *a1, unint64_t a2)
{
  _QWORD *exception;
  const char *v4;

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000059;
    v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:89: MAR"
         "ISA_STATE_ERROR: !is_open()";
    goto LABEL_6;
  }
  if (a1[2] < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000005ALL;
    v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:90: MAR"
         "ISA_IO_ERROR: size > avail_";
LABEL_6:
    exception[3] = v4;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B807734(a1, a2);
}

uint64_t sub_20B807734(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *exception;
  const char *v8;

  v2 = *a1;
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000073;
    v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:115: MA"
         "RISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v3 = a1[2];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000074;
    v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:116: MA"
         "RISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *a1 = v2 + a2;
  a1[2] = v5;
  return v2;
}

uint64_t sub_20B8077E4(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 649) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  sub_20B803C78((_OWORD *)(a1 + 744));
  *(_BYTE *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1072) = 3;
  *(_QWORD *)(a1 + 1080) = 0x100000000200;
  *(_DWORD *)(a1 + 1088) = 0x20000;
  sub_20B7F8EC0(a1 + 1096);
  return a1;
}

void sub_20B807904(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = v1[126];
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  sub_20B8071D0(v5);
  sub_20B7F9DD8(v4);
  if (*v7)
    MEMORY[0x20BD39C80](*v7, 0x1000C8077774924);
  if (*v6)
    MEMORY[0x20BD39C80](*v6, 0x1000C8077774924);
  sub_20B7F9E84(v3);
  sub_20B7F9E84(v2);
  sub_20B7F9E84(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B807998(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_20B8075FC(a1 + 137);
  v2 = a1[126];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  sub_20B8071D0(a1 + 125);
  v3 = a1[119];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  v4 = a1[113];
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  v5 = a1[107];
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  v6 = a1[99];
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  v7 = a1[93];
  if (v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  v8 = a1[84];
  if (v8)
    MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  v9 = a1[78];
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  v10 = a1[72];
  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  v11 = a1[66];
  if (v11)
    MEMORY[0x20BD39C80](v11, 0x1000C8077774924);
  v12 = a1[60];
  if (v12)
    MEMORY[0x20BD39C80](v12, 0x1000C8077774924);
  v13 = a1[52];
  if (v13)
    MEMORY[0x20BD39C80](v13, 0x1000C8077774924);
  v14 = a1[46];
  if (v14)
    MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
  v15 = a1[40];
  if (v15)
    MEMORY[0x20BD39C80](v15, 0x1000C8077774924);
  v16 = a1[34];
  if (v16)
    MEMORY[0x20BD39C80](v16, 0x1000C8077774924);
  v17 = a1[26];
  if (v17)
    MEMORY[0x20BD39C80](v17, 0x1000C8077774924);
  v18 = a1[20];
  if (v18)
    MEMORY[0x20BD39C80](v18, 0x1000C8077774924);
  v19 = a1[14];
  if (v19)
    MEMORY[0x20BD39C80](v19, 0x1000C8077774924);
  v20 = a1[8];
  if (v20)
    MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_20B807BFC(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  int v12;

  v8 = 3;
  v9 = 0x100000000200;
  v10 = 0x20000;
  sub_20B80AAA4(&v8, a4);
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  sub_20B8077E4((uint64_t)&v8);
  sub_20B807CB4((uint64_t)&v8, a2, a3, (uint64_t)v11);
  sub_20B7FA578(a1, (uint64_t)&v8);
  return sub_20B807998(&v8);
}

void sub_20B807CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B807998((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B807CB4(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _OWORD v33[3];
  __int128 v34;
  unint64_t v35[4];
  _OWORD v36[3];
  char v37;

  memset(v36, 0, 41);
  sub_20B7FBB7C((uint64_t *)v36, (a2[1] - *a2) >> 4);
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)&v36[0] + 1) + v10;
      v13 = (uint64_t *)(v8 + v9);
      v15 = *v13;
      v14 = v13[1];
      *(_QWORD *)v12 = v15;
      *(_DWORD *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 12) = 1065353216;
      ++v11;
      v8 = *a2;
      v10 += 24;
      v9 += 16;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
  v34 = 0u;
  memset(v35, 0, 25);
  sub_20B809348(a1, (uint64_t *)v36, &v34, a4, 1);
  memset(v33, 0, 41);
  sub_20B7FBDE8((uint64_t *)v33, v35[1]);
  v16 = *((_QWORD *)&v33[1] + 1);
  if (*((_QWORD *)&v33[1] + 1))
  {
    v17 = 0;
    v18 = *((_QWORD *)&v34 + 1);
    v19 = (_DWORD *)(*((_QWORD *)&v33[0] + 1) + 4);
    do
    {
      *(v19 - 1) = *(_DWORD *)(v18 + 4 * v17);
      *v19 = v17++;
      v19 += 2;
    }
    while (v16 != v17);
  }
  v20 = v34;
  v34 = 0u;
  memset(v35, 0, 25);
  if (v20)
  {
    MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
    v16 = *((_QWORD *)&v33[1] + 1);
  }
  v21 = 126 - 2 * __clz(v16);
  if (v16)
    v22 = v21;
  else
    v22 = 0;
  sub_20B801900(*((uint64_t *)&v33[0] + 1), (unsigned int *)(*((_QWORD *)&v33[0] + 1) + 8 * v16), (uint64_t)&v37, v22, 1);
  if (*((_QWORD *)&v33[1] + 1))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      for (i = *((_QWORD *)&v33[0] + 1); ; i = *((_QWORD *)&v33[0] + 1))
      {
        v26 = *(unsigned int *)(i + 8 * v23);
        if (v24 >= v26)
          break;
        sub_20B809528((uint64_t *)(a1 + 208), 0);
        ++v24;
      }
      if (v24 == v26)
      {
        sub_20B809528((uint64_t *)(a1 + 208), 1);
        ++v24;
      }
      ++v23;
    }
    while (v23 < *((_QWORD *)&v33[1] + 1));
  }
  else
  {
    v24 = 0;
  }
  for (; v24 < *(_QWORD *)(a1 + 648); ++v24)
    sub_20B809528((uint64_t *)(a1 + 208), 0);
  v27 = (uint64_t *)(a1 + 208);
  sub_20B809528(v27, 0);
  sub_20B809604((uint64_t)v27, 0, 1);
  if (a3)
  {
    sub_20B809740((uint64_t)a3, (a2[1] - *a2) >> 4);
    if (a2[1] != *a2)
    {
      v28 = 0;
      v29 = 0;
      v30 = *((_QWORD *)&v33[0] + 1);
      do
      {
        v31 = sub_20B80E1A4((uint64_t)v27, *(unsigned int *)(v30 + v28));
        v30 = *((_QWORD *)&v33[0] + 1);
        *(_QWORD *)(*a3 + 8 * *(unsigned int *)(*((_QWORD *)&v33[0] + 1) + v28 + 4)) = v31;
        ++v29;
        v28 += 8;
      }
      while (v29 < (a2[1] - *a2) >> 4);
    }
  }
  if (*(_QWORD *)&v33[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v33[0], 0x1000C8077774924);
  if ((_QWORD)v34)
    MEMORY[0x20BD39C80](v34, 0x1000C8077774924);
  result = *(_QWORD *)&v36[0];
  if (*(_QWORD *)&v36[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v36[0], 0x1000C8077774924);
  return result;
}

void sub_20B807FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15)
    MEMORY[0x20BD39C80](a15, 0x1000C8077774924);
  if (a21)
    MEMORY[0x20BD39C80](a21, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B808028(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[137];
  uint64_t v6[5];

  sub_20B8080AC((uint64_t)v5, a2);
  sub_20B8077E4((uint64_t)v5);
  sub_20B808150((uint64_t)v5, a2);
  sub_20B7F9128(v6, a2);
  sub_20B7FA578(a1, (uint64_t)v5);
  return sub_20B807998(v5);
}

void sub_20B808098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B807998(&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B8080AC(uint64_t a1, uint64_t *a2)
{
  _BYTE *result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;

  result = (_BYTE *)sub_20B807734(a2, 0x10uLL);
  if (*result != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = result[v3];
    v5 = aWeLoveMarisa_0[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:21: MARISA_FORMAT_ERROR: !test_header(ptr)";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_20B808150(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  double result;
  _QWORD *exception;
  uint64_t v10;
  double v11;
  int v12;

  sub_20B809E44((uint64_t *)a1, a2);
  sub_20B809E44((uint64_t *)(a1 + 208), a2);
  sub_20B809E44((uint64_t *)(a1 + 416), a2);
  sub_20B809F2C((__int128 *)(a1 + 624), a2);
  sub_20B809FE8((__int128 *)(a1 + 672), a2);
  sub_20B80DCD4(a1 + 744, a2);
  if (*(_QWORD *)(a1 + 472) && !*(_QWORD *)(a1 + 768))
  {
    v4 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v5 = v4;
    if (v4)
      sub_20B8077E4((uint64_t)v4);
    v10 = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v5;
    sub_20B8071D0(&v10);
    v6 = *(_QWORD *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C459000;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000249;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:585: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
    }
    sub_20B808150(v6, a2);
  }
  sub_20B80A0E0((__int128 *)(a1 + 1008), a2);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a1 + 1032) - 1;
  *(_QWORD *)(a1 + 1064) = *(unsigned int *)sub_20B807734(a2, 4uLL);
  v7 = *(_DWORD *)sub_20B807734(a2, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  sub_20B80AAA4(&v10, v7);
  *(_QWORD *)(a1 + 1072) = v10;
  result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_20B8082D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8082F0(uint64_t a1, uint64_t a2)
{
  sub_20B807330(a2, "We love Marisa.", 0x10uLL);
  return sub_20B80832C(a1, a2);
}

uint64_t sub_20B80832C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  int __buf;

  sub_20B80B6CC(a1, a2);
  sub_20B80B6CC(a1 + 208, a2);
  sub_20B80B6CC(a1 + 416, a2);
  sub_20B80D69C(a1 + 624, a2);
  sub_20B80BA5C(a1 + 672, a2);
  sub_20B80DE3C(a1 + 744, a2);
  v4 = *(_QWORD *)(a1 + 1000);
  if (v4)
    sub_20B80832C(v4, a2);
  sub_20B80B848(a1 + 1008, a2);
  __buf = *(_QWORD *)(a1 + 1064);
  sub_20B807330(a2, (char *)&__buf, 4uLL);
  v6 = *(_DWORD *)(a1 + 1084) | *(_DWORD *)(a1 + 1072) | *(_DWORD *)(a1 + 1088);
  return sub_20B807330(a2, (char *)&v6, 4uLL);
}

uint64_t sub_20B8083F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    return 0;
  v5 = *(_QWORD *)a2;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    return 0;
  *a3 = sub_20B80E1A4(a1 + 208, v5);
  return 1;
}

void sub_20B808458(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  std::string __p;
  char v12;
  unint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  memset(&__p, 0, sizeof(__p));
  while (v13 < a3)
  {
    if ((sub_20B808544(a1, a2, a3, &v13, &v14, &__p) & 1) == 0)
      goto LABEL_8;
  }
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__r.__words[1];
  sub_20B8087E4(a1, v14, (uint64_t)&__p, &v12, a4, (v10 - a3) & ~((v10 - (int)a3) >> 31), a5);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B808524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B808544(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, std::string *this)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v12 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *(_QWORD *)(a1 + 1056);
  v13 = *(_QWORD *)(a1 + 1024);
  if (*a5 != *(_DWORD *)(v13 + 12 * v12))
  {
    v15 = sub_20B80E2C8((_QWORD *)a1, *a5);
    v16 = *(_QWORD *)(a1 + 16);
    if (((*(_QWORD *)(v16 + (((v15 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 + 1)) & 1) != 0)
    {
      v17 = v15 - *a5;
      *a5 = v17;
      v18 = v15 + 2;
      v19 = 0xFFFFFFFFLL;
      while (1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          if (v19 == 0xFFFFFFFFLL)
          {
            v19 = sub_20B80E1A4(a1 + 416, v17);
            v17 = *a5;
          }
          else
          {
            ++v19;
          }
          v21 = *a4;
          v22 = *(_QWORD *)(a1 + 720);
          v23 = (unint64_t)(v22 * v19) >> 6;
          v24 = (v22 * v19) & 0x3F;
          v25 = v24 + v22;
          v26 = *(_QWORD *)(a1 + 688);
          v27 = *(_QWORD *)(v26 + 8 * v23) >> v24;
          if (v25 > 0x40)
            v27 |= (2 * *(_QWORD *)(v26 + 8 * v23 + 8)) << (v24 ^ 0x3Fu);
          v28 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v17) | ((*(_DWORD *)(a1 + 728) & v27) << 8);
          v29 = *(_QWORD *)(a1 + 1000);
          if (v29)
          {
            if ((sub_20B80A868(v29, a2, a3, a4, v28, this) & 1) != 0)
              return 1;
          }
          else if (sub_20B80DF88((_QWORD *)(a1 + 744), a2, a3, a4, v28, this))
          {
            return 1;
          }
          if (*a4 != v21)
            return 0;
          v17 = *a5;
          v16 = *(_QWORD *)(a1 + 16);
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v17);
          if (v20 == *(unsigned __int8 *)(a2 + *a4))
          {
            std::string::push_back(this, v20);
            ++*a4;
            return 1;
          }
        }
        *a5 = ++v17;
        v30 = *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18;
        ++v18;
        if ((v30 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
  if (v14 > 0xFFFFFEFF)
  {
    std::string::push_back(this, v14);
    ++*a4;
    goto LABEL_24;
  }
  v31 = *(_QWORD *)(a1 + 1000);
  if (v31)
  {
    if ((sub_20B80A868(v31, a2, a3, a4, v14, this) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if (!sub_20B80DF88((_QWORD *)(a1 + 744), a2, a3, a4, v14, this))
    return 0;
LABEL_24:
  *a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v12 + 4);
  return 1;
}

unint64_t sub_20B8087E4(unint64_t result, unint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, int a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  if (!*a4)
  {
    v11 = result;
    if ((a7 & 0x80000000) != 0 || a6 <= (int)a7)
    {
      if (((*(_QWORD *)(*(_QWORD *)(result + 224) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
        || ((v12 = sub_20B80E1A4(result + 208, a2), v13 = *(char *)(a3 + 23), v13 >= 0)
          ? (v14 = a3)
          : (v14 = *(_QWORD *)a3),
            v13 >= 0 ? (v15 = *(unsigned __int8 *)(a3 + 23)) : (v15 = *(_QWORD *)(a3 + 8)),
            result = sub_20B808B50(a5, v12, v14, v15, (uint64_t)a4),
            !*a4))
      {
        v16 = *(char *)(a3 + 23) >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
        result = sub_20B80E2C8((_QWORD *)v11, a2);
        if (!*a4)
        {
          v17 = result;
          v18 = 0xFFFFFFFFLL;
          do
          {
            if (((*(_QWORD *)(*(_QWORD *)(v11 + 16) + (((v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)) & 1) == 0)
              break;
            if (((*(_QWORD *)(*(_QWORD *)(v11 + 432) + (((v17 - a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 - a2)) & 1) != 0)
            {
              if (v18 == 0xFFFFFFFFLL)
                v18 = sub_20B80E1A4(v11 + 416, v17 - a2);
              else
                ++v18;
              v19 = *(_QWORD *)(v11 + 720);
              v20 = (unint64_t)(v19 * v18) >> 6;
              v21 = (v19 * v18) & 0x3F;
              v22 = v21 + v19;
              v23 = *(_QWORD *)(v11 + 688);
              v24 = *(_QWORD *)(v23 + 8 * v20) >> v21;
              if (v22 > 0x40)
                v24 |= (2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
              v25 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 640) - a2 + v17) | ((*(_DWORD *)(v11 + 728) & v24) << 8);
              v26 = *(_QWORD *)(v11 + 1000);
              if (v26)
                sub_20B80A498(v26, (std::string *)a3, v25);
              else
                sub_20B80DE68((_QWORD *)(v11 + 744), (std::string *)a3, v25);
            }
            else
            {
              std::string::push_back((std::string *)a3, *(_BYTE *)(*(_QWORD *)(v11 + 640) - a2 + v17));
            }
            v27 = *(unsigned __int8 *)(a3 + 23);
            if ((v27 & 0x80u) != 0)
              v27 = *(_DWORD *)(a3 + 8);
            sub_20B8087E4(v11, v17 - a2, a3, a4, a5, (v27 - v16 + a6), a7);
            v28 = *(unsigned __int8 *)(a3 + 23);
            v29 = (char)v28;
            v30 = a3 + v28;
            if (v29 >= 0)
            {
              v31 = a3;
            }
            else
            {
              v30 = *(_QWORD *)a3 + *(_QWORD *)(a3 + 8);
              v31 = *(_QWORD *)a3;
            }
            result = (unint64_t)std::string::erase((std::string *)a3, v16, v30 - (v31 + v16));
            ++v17;
          }
          while (!*a4);
        }
      }
    }
  }
  return result;
}

void sub_20B808A54(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *__p;
  int v18;
  unsigned __int8 v19;
  char v20;

  if ((a4 & 0x80000000) != 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 31);
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_BYTE *)(a2 + 31);
LABEL_8:
    v20 = 0;
    v12 = *(_QWORD *)(a2 + 8) + v10;
    v13 = a2 + 8 + v8;
    if (v9 >= 0)
      v14 = v13;
    else
      v14 = v12;
    if (v9 >= 0)
      v15 = a2 + 8;
    else
      v15 = *(_QWORD *)(a2 + 8);
    sub_20B80BAD0(&__p, v14, v14, v15, v15, v14 - v15);
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = v18;
    sub_20B8087E4(a1, *(_QWORD *)a2, (uint64_t)&__p, &v20, a3, v16, a4);
    if ((char)v19 < 0)
      operator delete(__p);
    return;
  }
  v8 = *(unsigned __int8 *)(a2 + 31);
  v9 = v8;
  v10 = *(_QWORD *)(a2 + 16);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a2 + 31);
  else
    v11 = *(_QWORD *)(a2 + 16);
  if (v11 <= a4)
    goto LABEL_8;
}

void sub_20B808B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B808B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v8, a5);
}

void sub_20B808B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  void **v8;
  std::string *p_p;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string *v23;
  std::string *v24;
  char *v25;
  std::string::value_type v26;
  char v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  int v32;
  std::string::value_type v33;
  uint64_t v34;
  uint64_t v35;
  int v36[2];
  std::string v37;
  unint64_t v38;
  std::string __p;
  unsigned __int8 v40;
  char v41;

  v40 = 0;
  v5 = *(unsigned __int8 *)(a2 + 31);
  v6 = (char)v5;
  v7 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v8 = (void **)(a2 + 8);
    v38 = *(_QWORD *)a2;
    p_p = &__p;
    if (v6 < 0)
    {
      sub_20B80ACE0(&__p, *v8, v7);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v33 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
      v34 = --__p.__r_.__value_.__l.__size_;
    }
    else
    {
      v33 = __p.__r_.__value_.__s.__data_[HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1];
      v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v34 & 0x7F;
    }
    p_p->__r_.__value_.__s.__data_[v34] = 0;
    v37.__r_.__value_.__s.__data_[0] = v33;
    v35 = *(_QWORD *)(a3 + 24);
    if (!v35)
      sub_20B80BB74();
    (*(void (**)(uint64_t, std::string *, unint64_t *, unsigned __int8 *))(*(_QWORD *)v35 + 48))(v35, &v37, &v38, &v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = sub_20B80E2C8((_QWORD *)a1, *(_QWORD *)a2);
    v12 = v11 - *(_QWORD *)a2;
    *(_QWORD *)v36 = a1 + 744;
    v13 = 0xFFFFFFFFLL;
    do
    {
      ++v11;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      memset(&v37, 0, sizeof(v37));
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        if (v13 == 0xFFFFFFFFLL)
          v13 = sub_20B80E1A4(a1 + 416, v12);
        else
          ++v13;
        v14 = *(_QWORD *)(a1 + 720);
        v15 = (unint64_t)(v14 * v13) >> 6;
        v16 = (v14 * v13) & 0x3F;
        v17 = v16 + v14;
        v18 = *(_QWORD *)(a1 + 688);
        v19 = *(_QWORD *)(v18 + 8 * v15) >> v16;
        if (v17 > 0x40)
          v19 |= (2 * *(_QWORD *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu);
        v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v12) | ((*(_DWORD *)(a1 + 728) & v19) << 8);
        v21 = *(_QWORD *)(a1 + 1000);
        if (v21)
          sub_20B80A498(v21, &v37, v20);
        else
          sub_20B80DE68(*(_QWORD **)v36, &v37, v20);
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v37;
        else
          v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size)
        {
          v24 = (std::string *)((char *)v23 + size - 1);
          if (v24 > v23)
          {
            v25 = &v23->__r_.__value_.__s.__data_[1];
            do
            {
              v26 = *(v25 - 1);
              *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
              v24->__r_.__value_.__s.__data_[0] = v26;
              v24 = (std::string *)((char *)v24 - 1);
            }
            while (v25++ < (char *)v24);
          }
        }
      }
      else
      {
        std::string::push_back(&v37, *(_BYTE *)(*(_QWORD *)(a1 + 640) + v12));
      }
      __p = v37;
      memset(&v37, 0, sizeof(v37));
      v38 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v28 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
        v29 = --__p.__r_.__value_.__l.__size_;
      }
      else
      {
        v28 = *((_BYTE *)&v38 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7);
        v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29 & 0x7F;
        v30 = &__p;
      }
      v30->__r_.__value_.__s.__data_[v29] = 0;
      v41 = v28;
      v31 = *(_QWORD *)(a3 + 24);
      if (!v31)
        sub_20B80BB74();
      (*(void (**)(uint64_t, char *, unint64_t *, unsigned __int8 *))(*(_QWORD *)v31 + 48))(v31, &v41, &v38, &v40);
      v32 = v40;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (!v32);
  }
}

void sub_20B808EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B808F14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v9;
  unint64_t v10;

  v9 = 0;
  v10 = 0;
  while (v9 < a3)
  {
    if ((sub_20B808FB0(a1, a2, a3, &v9, &v10) & 1) == 0)
      return 0;
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    *a4 = sub_20B80E1A4(a1 + 208, v10);
    return 1;
  }
  return 0;
}

uint64_t sub_20B808FB0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *(_QWORD *)(a1 + 1056);
  v11 = *(_QWORD *)(a1 + 1024);
  if (*a5 != *(_DWORD *)(v11 + 12 * v10))
  {
    v13 = sub_20B80E2C8((_QWORD *)a1, *a5);
    v14 = *(_QWORD *)(a1 + 16);
    if (((*(_QWORD *)(v14 + (((v13 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + 1)) & 1) != 0)
    {
      v15 = v13 - *a5;
      *a5 = v15;
      v16 = v13 + 2;
      v17 = 0xFFFFFFFFLL;
      while (1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
        {
          if (v17 == 0xFFFFFFFFLL)
          {
            v17 = sub_20B80E1A4(a1 + 416, v15);
            v15 = *a5;
          }
          else
          {
            ++v17;
          }
          v18 = *a4;
          v19 = *(_QWORD *)(a1 + 720);
          v20 = (unint64_t)(v19 * v17) >> 6;
          v21 = (v19 * v17) & 0x3F;
          v22 = v21 + v19;
          v23 = *(_QWORD *)(a1 + 688);
          v24 = *(_QWORD *)(v23 + 8 * v20) >> v21;
          if (v22 > 0x40)
            v24 |= (2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
          v25 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          v26 = *(_QWORD *)(a1 + 1000);
          if (v26)
          {
            if ((sub_20B80A620(v26, a2, a3, a4, v25) & 1) != 0)
              return 1;
          }
          else if ((sub_20B80DEF4((_QWORD *)(a1 + 744), a2, a3, a4, v25) & 1) != 0)
          {
            return 1;
          }
          if (*a4 != v18)
            return 0;
          v15 = *a5;
          v14 = *(_QWORD *)(a1 + 16);
        }
        else if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v15) == *(unsigned __int8 *)(a2 + *a4))
        {
          ++*a4;
          return 1;
        }
        *a5 = ++v15;
        v27 = *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16;
        ++v16;
        if ((v27 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v12 = *(unsigned int *)(v11 + 12 * v10 + 8);
  if (v12 > 0xFFFFFEFF)
  {
    ++*a4;
    goto LABEL_24;
  }
  v28 = *(_QWORD *)(a1 + 1000);
  if (v28)
  {
    if ((sub_20B80A620(v28, a2, a3, a4, v12) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((sub_20B80DEF4((_QWORD *)(a1 + 744), a2, a3, a4, v12) & 1) == 0)
    return 0;
LABEL_24:
  *a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v10 + 4);
  return 1;
}

uint64_t sub_20B80921C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  v7 = result;
  v15 = 0;
  v13 = 0;
  v14 = 0;
  v8 = result + 208;
  if ((**(_BYTE **)(result + 224) & 1) != 0)
  {
    v9 = sub_20B80E1A4(result + 208, 0);
    result = sub_20B808B50(a4, v9, a2, 0, (uint64_t)&v15);
    if (v15)
      v10 = 1;
    else
      v10 = a3 == 0;
    if (v10)
      return result;
  }
  else if (!a3)
  {
    return result;
  }
  result = sub_20B808FB0(v7, a2, a3, &v13, &v14);
  if ((_DWORD)result)
  {
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(v7 + 224) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        v11 = sub_20B80E1A4(v8, v14);
        result = sub_20B808B50(a4, v11, a2, v13, (uint64_t)&v15);
        if (v15)
          v12 = 1;
        else
          v12 = v13 >= a3;
        if (v12)
          return result;
      }
      else if (v13 >= a3)
      {
        return result;
      }
      result = sub_20B808FB0(v7, a2, a3, &v13, &v14);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_20B809348(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_20B80BC80((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3])
    sub_20B809770(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B80AAA4(&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B80AAA4(&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_20B809604(a1 + 416, 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  sub_20B80C3CC((__int128 *)(a1 + 672), (uint64_t)v17);
  sub_20B809D3C(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_20B8094FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B809528(uint64_t *result, int a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *exception;
  uint64_t v7;

  v2 = result[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0x70000003ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:58: MARISA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v4 = result;
  v5 = result[3];
  if (v2 == v5 << 6)
  {
    v7 = 0;
    result = sub_20B7FD960(result, v5 + 1, &v7);
    v2 = v4[6];
  }
  if (a2)
  {
    *(_QWORD *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return result;
}

uint64_t sub_20B809604(uint64_t a1, int a2, int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[4];
  __int128 v9;
  _BYTE v10[25];
  __int128 v11;
  _BYTE v12[25];
  __int128 v13;
  _BYTE v14[25];

  memset(v8, 0, 41);
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_20B80E6A8(v8, (_QWORD *)a1, a2, a3);
  sub_20B80ADF4((_QWORD *)a1);
  v4 = v8[0];
  v8[0] = *(_OWORD *)a1;
  *(_OWORD *)a1 = v4;
  v5 = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  sub_20B7FBAC4((uint64_t *)a1, (uint64_t *)v8);
  if ((_QWORD)v13)
    MEMORY[0x20BD39C80](v13, 0x1000C8077774924);
  if ((_QWORD)v11)
    MEMORY[0x20BD39C80](v11, 0x1000C8077774924);
  if ((_QWORD)v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_20B80972C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9E84(&a9);
  _Unwind_Resume(a1);
}

void sub_20B809740(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_20B80CCD0((char **)a1, a2 - v2);
  }
}

uint64_t sub_20B809770(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *exception;
  __int128 v26;
  _BYTE v27[25];
  uint64_t v28;

  if (*(_QWORD *)a4 == a5)
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_20B7FC2B0((uint64_t *)&v26, a2[3]);
    v9 = a2[3];
    if (v9)
    {
      v10 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
      v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 + v13 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_20B80D758((__int128 *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_20B7FBB7C((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *((_QWORD *)&v26 + 1) + v15;
        v18 = a2[1] + v15;
        v19 = *(unsigned int *)(v18 + 8);
        *(_QWORD *)v17 = *(_QWORD *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20)
      MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
    v21 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v22 = v21;
    if (v21)
      sub_20B8077E4((uint64_t)v21);
    v28 = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v22;
    sub_20B8071D0(&v28);
    v23 = *(_QWORD *)(a1 + 1000);
    if (!v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C459000;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001EBLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:491: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
    }
    sub_20B8099B4(v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  result = v26;
  if ((_QWORD)v26)
    return MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
  return result;
}

void sub_20B809970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x20BD39C98](v9, MEMORY[0x24BEDB6B8]);
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8099B4(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_20B80CDEC((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(_QWORD *)(a2 + 24))
    sub_20B809B94(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B80AAA4(&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_20B80AAA4(&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_20B809604(a1 + 416, 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  sub_20B80C3CC((__int128 *)(a1 + 672), (uint64_t)v17);
  sub_20B809D3C(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_20B809B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B809B94(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *exception;
  _OWORD v20[3];

  if (*(_QWORD *)a4 == a5)
  {
    memset(v20, 0, 41);
    sub_20B7FC2B0((uint64_t *)v20, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      v10 = (_DWORD *)(*((_QWORD *)&v20[0] + 1) + 8);
      v11 = (_DWORD *)(*(_QWORD *)(a2 + 8) + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_20B80D758((__int128 *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    result = *(_QWORD *)&v20[0];
    if (*(_QWORD *)&v20[0])
      return MEMORY[0x20BD39C80](*(_QWORD *)&v20[0], 0x1000C8077774924);
  }
  else
  {
    v16 = operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v17 = v16;
    if (v16)
      sub_20B8077E4((uint64_t)v16);
    *(_QWORD *)&v20[0] = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v17;
    sub_20B8071D0(v20);
    v18 = *(_QWORD *)(a1 + 1000);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C459000;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001FDLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:509: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
    }
    return sub_20B8099B4(v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_20B809CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C98](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20B809D3C(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(result + 1032);
  if (v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = result + 416;
    do
    {
      v6 = *(_QWORD *)(v2 + 1016);
      v7 = *(unsigned int *)(v6 + v3 + 4);
      if ((_DWORD)v7)
      {
        *(_BYTE *)(v6 + v3 + 8) = *(_BYTE *)(*(_QWORD *)(v2 + 632) + v7);
        v8 = *(_QWORD *)(v2 + 1016);
        if (((*(_QWORD *)(*(_QWORD *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
        {
          result = sub_20B80E1A4(v5, v7);
          v9 = *(_QWORD *)(v2 + 720);
          v10 = (unint64_t)(v9 * result) >> 6;
          v11 = (v9 * result) & 0x3F;
          v12 = v11 + v9;
          v13 = *(_QWORD *)(v2 + 688);
          v14 = *(_QWORD *)(v13 + 8 * v10);
          if (v12 > 0x40)
            v15 = ((2 * *(_QWORD *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          else
            v15 = v14 >> v11;
          v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        v1 = *(_QWORD *)(v2 + 1032);
      }
      else
      {
        *(_QWORD *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return result;
}

uint64_t sub_20B809E44(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_20B80AE68((uint64_t)v4, a2);
  sub_20B7FBAC4(a1, (uint64_t *)v4);
  if ((_QWORD)v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_20B809F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9E84(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B809F2C(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B80D63C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B809FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B809FE8(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20B80B61C((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80A0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80A0E0(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B80B32C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80A174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void sub_20B80A19C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  std::string *p_p;
  std::string *v12;
  char v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  BOOL v17;
  char *v18;
  std::string::value_type v19;
  std::string *v21;
  std::string v22;
  std::string __str;
  unint64_t v24;
  unint64_t v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)a4 == 0xFFFFFFFFLL)
  {
    MEMORY[0xFFFFFFFF] = 0xFFFFFFFFLL;
    if (*(char *)(a4 + 31) < 0)
    {
      sub_20B80ACE0((_BYTE *)0x100000007, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
    }
    else
    {
      MEMORY[0x100000007] = *(_OWORD *)(a4 + 8);
      MEMORY[0x100000017] = *(_QWORD *)(a4 + 24);
    }
    return;
  }
  v25 = *(_QWORD *)a4;
  if (*(char *)(a4 + 31) < 0)
    sub_20B80ACE0(&__p, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __p = *(std::string *)(a4 + 8);
  v24 = 0;
  if (!a3)
  {
LABEL_18:
    *a5 = v25;
    v12 = (std::string *)(a5 + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_20B80ACE0(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *v12 = __p;
    goto LABEL_44;
  }
  v9 = 0;
  while ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_21;
    v24 = v9 + 1;
    if (*(unsigned __int8 *)(a2 + v9) != *((unsigned __int8 *)&v25 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7))
    {
LABEL_25:
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_44;
    }
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    --*((_BYTE *)&__p.__r_.__value_.__s + 23);
    ++v9;
    p_p = &__p;
LABEL_17:
    p_p->__r_.__value_.__s.__data_[v10] = 0;
    if (v9 >= a3)
      goto LABEL_18;
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    v24 = v9 + 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(a2 + v9) != *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0]
                                                             + __p.__r_.__value_.__l.__size_
                                                             - 1))
      goto LABEL_25;
    v10 = --__p.__r_.__value_.__l.__size_;
    ++v9;
    goto LABEL_17;
  }
LABEL_21:
  memset(&__str, 0, sizeof(__str));
  while (v24 < a3)
  {
    if ((sub_20B808544(a1, a2, a3, &v24, &v25, &__str) & 1) == 0)
    {
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_42;
    }
  }
  std::string::basic_string(&v22, &__str, v24 - v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v22;
  v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  size = v22.__r_.__value_.__l.__size_;
  v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v14 = &__p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  v16 = (std::string *)((char *)v14 + size - 1);
  if (size)
    v17 = v16 > v14;
  else
    v17 = 0;
  if (v17)
  {
    v18 = &v14->__r_.__value_.__s.__data_[1];
    do
    {
      v19 = *(v18 - 1);
      *(v18 - 1) = v16->__r_.__value_.__s.__data_[0];
      v16->__r_.__value_.__s.__data_[0] = v19;
      v16 = (std::string *)((char *)v16 - 1);
    }
    while (v18++ < (char *)v16);
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *a5 = v25;
  v21 = (std::string *)(a5 + 1);
  if (v13 < 0)
    sub_20B80ACE0(v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *v21 = __p;
LABEL_42:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B80A45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_20B80A498(uint64_t a1, std::string *a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = a1 + 416;
  v7 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 1056) & a3;
      v9 = *(_QWORD *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v9 + 12 * v8 + 4))
        break;
      v10 = *(unsigned int *)(v9 + 12 * v8 + 8);
      if (v10 <= 0xFFFFFEFF)
      {
        v20 = *(_QWORD *)(a1 + 1000);
        if (v20)
          sub_20B80A498(v20, a2, v10);
        else
          sub_20B80DE68(v7, a2, v10);
      }
      else
      {
        std::string::push_back(a2, v10);
      }
      a3 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v8);
      if (!(_DWORD)a3)
        return;
    }
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3);
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = sub_20B80E1A4(v6, a3);
      v13 = *(_QWORD *)(a1 + 720);
      v14 = (unint64_t)(v13 * v12) >> 6;
      v15 = (v13 * v12) & 0x3F;
      v16 = v15 + v13;
      v17 = *(_QWORD *)(a1 + 688);
      v18 = *(_QWORD *)(v17 + 8 * v14);
      v19 = v16 > 0x40
          ? ((2 * *(_QWORD *)(v17 + 8 * v14 + 8)) << (v15 ^ 0x3Fu)) | (v18 >> v15)
          : v18 >> v15;
      v21 = v11 | ((*(_DWORD *)(a1 + 728) & v19) << 8);
      v22 = *(_QWORD *)(a1 + 1000);
      if (v22)
        sub_20B80A498(v22, a2, v21);
      else
        sub_20B80DE68(v7, a2, v21);
    }
    else
    {
      std::string::push_back(a2, v11);
    }
    if (a3 <= *(_QWORD *)(a1 + 1064))
      break;
    a3 = sub_20B80E534((_QWORD *)a1, a3) + ~a3;
  }
}

uint64_t sub_20B80A620(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = a1 + 416;
  v11 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 1056) & a5;
      v13 = *(_QWORD *)(a1 + 1024);
      if (a5 == *(_DWORD *)(v13 + 12 * v12 + 4))
        break;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
      {
        v15 = *(_QWORD *)(a1 + 1000);
        v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5);
        v17 = sub_20B80E1A4(v10, a5);
        v18 = *(_QWORD *)(a1 + 720);
        v19 = (unint64_t)(v18 * v17) >> 6;
        v20 = (v18 * v17) & 0x3F;
        v21 = v20 + v18;
        v22 = *(_QWORD *)(a1 + 688);
        v23 = *(_QWORD *)(v22 + 8 * v19);
        if (v15)
        {
          v24 = v23 >> v20;
          if (v21 > 0x40)
            v24 |= (2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          v25 = v16 | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          v26 = *(_QWORD *)(a1 + 1000);
          if (v26)
          {
            if ((sub_20B80A620(v26, a2, a3, a4, v25) & 1) == 0)
              return 0;
            goto LABEL_27;
          }
        }
        else
        {
          if (v21 > 0x40)
            v28 = ((2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu)) | (v23 >> v20);
          else
            v28 = v23 >> v20;
          v25 = v16 | ((*(_DWORD *)(a1 + 728) & v28) << 8);
        }
        if ((sub_20B80DEF4(v11, a2, a3, a4, v25) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5) != *(unsigned __int8 *)(a2 + *a4))
          return 0;
        ++*a4;
      }
LABEL_27:
      if (a5 <= *(_QWORD *)(a1 + 1064))
        return 1;
      if (*a4 >= a3)
        return 0;
      a5 = sub_20B80E534((_QWORD *)a1, a5) + ~a5;
    }
    v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
    if (v14 <= 0xFFFFFEFF)
    {
      v27 = *(_QWORD *)(a1 + 1000);
      if (v27)
      {
        if ((sub_20B80A620(v27, a2, a3, a4, v14) & 1) == 0)
          return 0;
      }
      else if ((sub_20B80DEF4(v11, a2, a3, a4, v14) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v14)
        return 0;
      ++*a4;
    }
    a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v12);
    if (!(_DWORD)a5)
      return 1;
    if (*a4 >= a3)
      return 0;
  }
}

uint64_t sub_20B80A868(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *a6)
{
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v12 = a1 + 416;
  v13 = (_QWORD *)(a1 + 744);
  while (1)
  {
    v14 = *(_QWORD *)(a1 + 1056) & a5;
    v15 = *(_QWORD *)(a1 + 1024);
    if (a5 != *(_DWORD *)(v15 + 12 * v14 + 4))
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
      {
        v18 = sub_20B80E1A4(v12, a5);
        v19 = *(_QWORD *)(a1 + 720);
        v20 = (unint64_t)(v19 * v18) >> 6;
        v21 = (v19 * v18) & 0x3F;
        v22 = v21 + v19;
        v23 = *(_QWORD *)(a1 + 688);
        v24 = *(_QWORD *)(v23 + 8 * v20);
        if (v22 > 0x40)
          v25 = ((2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu)) | (v24 >> v21);
        else
          v25 = v24 >> v21;
        v27 = v17 | ((*(_DWORD *)(a1 + 728) & v25) << 8);
        v28 = *(_QWORD *)(a1 + 1000);
        if (v28)
        {
          if ((sub_20B80A868(v28, a2, a3, a4, v27, a6) & 1) == 0)
            return 0;
        }
        else if (!sub_20B80DF88(v13, a2, a3, a4, v27, a6))
        {
          return 0;
        }
      }
      else
      {
        if (v17 != *(unsigned __int8 *)(a2 + *a4))
          return 0;
        std::string::push_back(a6, v17);
        ++*a4;
      }
      if (a5 <= *(_QWORD *)(a1 + 1064))
        return 1;
      a5 = sub_20B80E534((_QWORD *)a1, a5) + ~a5;
      goto LABEL_23;
    }
    v16 = *(unsigned int *)(v15 + 12 * v14 + 8);
    if (v16 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v16)
        return 0;
      std::string::push_back(a6, v16);
      ++*a4;
      goto LABEL_22;
    }
    v26 = *(_QWORD *)(a1 + 1000);
    if (!v26)
      break;
    if ((sub_20B80A868(v26, a2, a3, a4, v16, a6) & 1) == 0)
      return 0;
LABEL_22:
    a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v14);
    if (!(_DWORD)a5)
      return 1;
LABEL_23:
    if (*a4 >= a3)
    {
      sub_20B80A498(a1, a6, a5);
      return 1;
    }
  }
  if (sub_20B80DF88(v13, a2, a3, a4, v16, a6))
    goto LABEL_22;
  return 0;
}

uint64_t sub_20B80AAA4(_QWORD *a1, unsigned int a2)
{
  _QWORD *exception;

  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:52: MARISA_CODE_ERROR: (config_flags & ~MARISA_CONFIG_MASK) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  if ((a2 & 0x7F) != 0)
    *a1 = a2 & 0x7F;
  sub_20B80AB40((uint64_t)a1, a2);
  sub_20B80ABE8((uint64_t)a1, a2);
  return sub_20B80AC64((uint64_t)a1, a2);
}

uint64_t sub_20B80AB40(uint64_t result, __int16 a2)
{
  unsigned int v2;
  int v3;
  _QWORD *exception;

  v2 = a2 & 0xF80;
  v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512)
      goto LABEL_11;
    if (v2 != 1024)
    {
      v3 = a2 & 0xF80;
      if (v2 != 2048)
        goto LABEL_9;
      goto LABEL_11;
    }
LABEL_10:
    v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0)
    goto LABEL_11;
  if (v2 == 128)
    goto LABEL_10;
  v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000060;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:96: MARISA_CODE_ERROR: undefined cache level";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_20B80ABE8(uint64_t result, __int16 a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 4096;
  v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C459000;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000075;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:117: MARISA_CODE_ERROR: undefined tail mode";
      __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
    }
    v2 = 0x2000;
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t sub_20B80AC64(uint64_t result, int a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 0x20000;
  v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C459000;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008ALL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:138: MARISA_CODE_ERROR: undefined node order";
      __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
    }
    v2 = 0x10000;
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

void *sub_20B80ACE0(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20B80AD6C();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_20B80AD6C()
{
  sub_20B80AD80("basic_string");
}

void sub_20B80AD80(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20B80ADD0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C457E98, MEMORY[0x24BEDAAF0]);
}

void sub_20B80ADBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20B80ADD0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

_QWORD *sub_20B80ADF4(_QWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v1 = result[3];
  if (v1 != result[4])
    return sub_20B7FD9E4(result, v1);
  return result;
}

uint64_t sub_20B80AE68(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  sub_20B80AF28((__int128 *)a1, a2);
  *(_QWORD *)(a1 + 48) = *(unsigned int *)sub_20B807734(a2, 4uLL);
  v4 = *(unsigned int *)sub_20B807734(a2, 4uLL);
  if (*(_QWORD *)(a1 + 48) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:134: MARISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 56) = v4;
  sub_20B80AFE4((__int128 *)(a1 + 64), a2);
  sub_20B80B0A0((__int128 *)(a1 + 112), a2);
  return sub_20B80B0A0((__int128 *)(a1 + 160), a2);
}

uint64_t sub_20B80AF28(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B80B15C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80AFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80AFE4(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B80B32C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80B078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80B0A0(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B80B4B4((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80B15C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_20B807734(a2, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B80B210(a2, (uint64_t *)(a1 + 16), v4 >> 3);
  sub_20B807694(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 3;
  return sub_20B80B2C4(a1);
}

uint64_t sub_20B80B210(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  result = sub_20B807734(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_20B80B2C4(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x10000007ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:122: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t sub_20B80B32C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_20B807734(a2, 8uLL);
  v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B80B3F0(a2, (uint64_t *)(a1 + 16), v5);
  sub_20B807694(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v5;
  return sub_20B80B2C4(a1);
}

uint64_t sub_20B80B3F0(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  result = sub_20B807734(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_20B80B4B4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_20B807734(a2, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  sub_20B80B568(a2, (uint64_t *)(a1 + 16), v4 >> 2);
  sub_20B807694(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 2;
  return sub_20B80B2C4(a1);
}

uint64_t sub_20B80B568(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  result = sub_20B807734(a1, 4 * a3);
  *a2 = result;
  return result;
}

_QWORD *sub_20B80B61C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *exception;

  sub_20B80AF28((__int128 *)a1, a2);
  v4 = *(unsigned int *)sub_20B807734(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA00000084;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:132: MARISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)sub_20B807734(a2, 4uLL);
  result = (_QWORD *)sub_20B807734(a2, 8uLL);
  *(_QWORD *)(a1 + 64) = *result;
  return result;
}

uint64_t sub_20B80B6CC(uint64_t a1, uint64_t a2)
{
  int v5;
  int __buf;

  sub_20B80B74C(a1, a2);
  __buf = *(_QWORD *)(a1 + 48);
  sub_20B807330(a2, (char *)&__buf, 4uLL);
  v5 = *(_QWORD *)(a1 + 56);
  sub_20B807330(a2, (char *)&v5, 4uLL);
  sub_20B80B848(a1 + 64, a2);
  sub_20B80B95C(a1 + 112, a2);
  return sub_20B80B95C(a1 + 160, a2);
}

uint64_t sub_20B80B74C(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 8 * *(_QWORD *)(a1 + 24);
  sub_20B807330(a2, (char *)&__buf, 8uLL);
  sub_20B80B7A8(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B807210(a2, 0);
}

uint64_t sub_20B80B7A8(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B807330(a1, a2, 8 * a3);
}

uint64_t sub_20B80B848(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 12 * *(_QWORD *)(a1 + 24);
  sub_20B807330(a2, (char *)&__buf, 8uLL);
  sub_20B80B8AC(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B807210(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_20B80B8AC(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B807330(a1, a2, 12 * a3);
}

uint64_t sub_20B80B95C(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 4 * *(_QWORD *)(a1 + 24);
  sub_20B807330(a2, (char *)&__buf, 8uLL);
  sub_20B80B9BC(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B807210(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_20B80B9BC(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B807330(a1, a2, 4 * a3);
}

uint64_t sub_20B80BA5C(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  sub_20B80B74C(a1, a2);
  LODWORD(__buf) = *(_QWORD *)(a1 + 48);
  sub_20B807330(a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *(_DWORD *)(a1 + 56);
  sub_20B807330(a2, (char *)&__buf, 4uLL);
  __buf = *(_QWORD *)(a1 + 64);
  return sub_20B807330(a2, (char *)&__buf, 8uLL);
}

_QWORD *sub_20B80BAD0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (a6 > 0x16)
  {
    v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v10 = a6 | 7;
    v11 = v10 + 1;
    result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *v6 = result;
    v6 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    v12 = *(_BYTE *)--a3;
    *(_BYTE *)v6 = v12;
    v6 = (_QWORD *)((char *)v6 + 1);
  }
  *(_BYTE *)v6 = 0;
  return result;
}

void sub_20B80BB74()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C46B738;
  __cxa_throw(exception, (struct type_info *)&unk_24C45E7E8, (void (*)(void *))std::exception::~exception);
}

void sub_20B80BBAC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B80BBD0(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_20B80BC80(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __n128 v34;
  uint64_t v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t result;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v11 = 0;
    v12 = (_DWORD *)(v10 + 16);
    do
    {
      *v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  v13 = sub_20B7FFD60(v10, v10 + 24 * v9, 0);
  v14 = 256;
  if (a5 != 1)
    v14 = 1;
  do
  {
    v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  sub_20B7FC740(a1 + 126, v15);
  a1[132] = v15 - 1;
  sub_20B809528(a1, 1);
  sub_20B809528(a1, 0);
  v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_20B7FB288(a1 + 78, v84);
  v77 = a1 + 52;
  sub_20B809528(a1 + 52, 0);
  v72 = a5;
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_20B80C62C(v82, (uint64_t *)&v78);
  v17 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      v18 = a1[58];
      v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        v18 = v23;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      v76 = v17;
      v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          v25 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != (_DWORD)v22)
            break;
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          v20 = (v20 + 1);
          if ((_DWORD)v21 == (_DWORD)v20)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v20 != (_DWORD)v21)
      {
        v75 = v18;
        v26 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v26)
          MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(float *)(v27 + 24 * v20 + 12);
        v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          v30 = 24 * v20;
          v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(_QWORD *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              sub_20B7FFAF0((uint64_t *)&v80, &v78);
              v27 = *(_QWORD *)(a2 + 8);
              v28 = 0.0;
              LODWORD(v20) = v29;
            }
            v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        v34 = sub_20B7FFAF0((uint64_t *)&v80, &v78);
        v16 = a1 + 78;
        v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v36 = (__n128 *)*((_QWORD *)&v80 + 1);
          v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            v40 = 0;
          }
          else
          {
            v38 = (__n128 *)sub_20B800CA0(v81[1]);
            v40 = v39;
          }
          sub_20B80C9FC(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38)
            operator delete(v38);
          v35 = v75;
        }
        v41 = v81[1];
        if (v35 == v76)
          a1[133] = v81[1];
        if (v41)
        {
          v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            v45 = v43[2];
            v46 = *v43;
            v47 = *(_QWORD *)(a2 + 8);
            v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              v50 = v48 - 1;
              v51 = v43[2];
              do
              {
                v52 = v51;
                v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  v55 = *v53;
                  v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            v59 = v58;
            v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(_QWORD *)(v47 + 24 * v46) + v45)) & a1[132];
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              *v66 = v24;
              v66[1] = v65;
              *v63 = v59;
              v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              sub_20B7FB288(v73, &v78);
              sub_20B809528(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_20B7FB288(v73, &v78);
              sub_20B809528(v77, 1);
              v78 = 0uLL;
              v79 = 0;
              v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              sub_20B7FFB60((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            sub_20B80C62C(v82, v44);
            sub_20B809528(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      sub_20B809528(a1, 0);
      v17 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  sub_20B809528(a1, 0);
  sub_20B809604((uint64_t)a1, v72 == 1, 1);
  sub_20B80C4C4(v16);
  sub_20B80C538((uint64_t)a1, a2, a3);
  v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v69;
  v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((_QWORD)v80)
    MEMORY[0x20BD39C80](v80, 0x1000C8077774924);
  sub_20B8016C0(v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_20B80C2C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v21;
  _QWORD *exception;
  va_list va;

  va_start(va, a18);
  if (a13)
    MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  sub_20B8016C0((uint64_t *)va);
  v21 = *(_QWORD *)(v18 - 144);
  if (v21)
    MEMORY[0x20BD39C80](v21, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B80C3CC(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20B8017A0((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80C49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B80C4C4(_BYTE *result)
{
  size_t v1;
  _QWORD *exception;

  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return sub_20B7FD7B4((uint64_t *)result, v1);
  return result;
}

uint64_t sub_20B80C538(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  sub_20B7FEB7C((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  return result;
}

void sub_20B80C604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void sub_20B80C62C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20B80C6E8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void sub_20B80C6E8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20B800BE8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      sub_20B800764(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    sub_20B800878((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20B800BE8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_20B800994(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20B800AA8((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20B80C9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_20B80C9FC(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &a1[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_20B80CB94(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = sub_20B80CB94(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = sub_20B801078(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        sub_20B80C9FC(a1, v14, a3, v15, a5, a6);
        v16.n128_f64[0] = sub_20B80C9FC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_20B8010EC((__int128 *)a1, (__int128 *)&a1[a4 >> 1], (__int128 *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      sub_20B800E98((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

double sub_20B80CB94(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  __n128 *v10;
  __n128 v12;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_20B80C9FC(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      v12.n128_f64[0] = sub_20B80C9FC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_20B801078(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_20B801354(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

void sub_20B80CCD0(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_20B80CDD8();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20B800BE8(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20B80CDD8()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B80CDEC(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  _DWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t result;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 16);
    do
    {
      *v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  v12 = sub_20B8032C8(v9, v9 + 24 * v8, 0);
  v13 = 256;
  if (a5 != 1)
    v13 = 1;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  sub_20B7FC740(a1 + 126, v14);
  a1[132] = v14 - 1;
  sub_20B809528(a1, 1);
  sub_20B809528(a1, 0);
  v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_20B7FB288(a1 + 78, v84);
  sub_20B809528(a1 + 52, 0);
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_20B80C62C(v82, (uint64_t *)&v78);
  v16 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      v17 = a1[58];
      v18 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v22 = v17;
        v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        v16 = v23;
        v17 = v22;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          v24 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != (_DWORD)v21)
            break;
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          v19 = (v19 + 1);
          if ((_DWORD)v20 == (_DWORD)v19)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v19 != (_DWORD)v20)
      {
        v76 = v16;
        v77 = v17 - v16;
        v25 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v25)
          MEMORY[0x20BD39C80](v25, 0x1000C8077774924);
        v75 = v17;
        v26 = *(_QWORD *)(a2 + 8);
        v27 = *(float *)(v26 + 24 * v19 + 12);
        v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          v29 = 24 * v19;
          v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(_QWORD *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              sub_20B7FFAF0((uint64_t *)&v80, &v78);
              v26 = *(_QWORD *)(a2 + 8);
              v27 = 0.0;
              LODWORD(v19) = v28;
            }
            v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        v33 = sub_20B7FFAF0((uint64_t *)&v80, &v78);
        v15 = a1 + 78;
        v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v35 = (__n128 *)*((_QWORD *)&v80 + 1);
          v36 = v81[1];
          if (v81[1] < 129)
          {
            v37 = 0;
            v39 = 0;
          }
          else
          {
            v37 = (__n128 *)sub_20B800CA0(v81[1]);
            v39 = v38;
          }
          sub_20B80C9FC(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37)
            operator delete(v37);
          v34 = v76;
        }
        v40 = v81[1];
        if (v75 == v34)
          a1[133] = v81[1];
        if (v40)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v41);
            v43 = (uint64_t *)v42;
            v44 = v42[2];
            v45 = *(_QWORD *)(a2 + 8);
            v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              v48 = v46 - 1;
              v49 = (uint64_t *)(v45 + 24 * *v42);
              v50 = v42[2];
              do
              {
                v51 = v50;
                v50 = v47;
                v52 = v49;
                v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  v54 = *v52;
                  v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            v56 = a1[81];
            v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            v59 = v58;
            v60 = a1[132] & v56;
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = (_DWORD *)(v61 + 12 * v60);
              *v65 = v77;
              v65[1] = v56;
              *v63 = v59;
              v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(_BYTE *)(~v48 + *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43));
              sub_20B7FB288(v73, &v78);
              sub_20B809528(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_20B7FB288(v73, &v78);
              sub_20B809528(v72, 1);
              v78 = 0uLL;
              v79 = 0;
              v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              sub_20B7FFB60((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            sub_20B80C62C(v82, v43);
            sub_20B809528(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      sub_20B809528(a1, 0);
      v16 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  sub_20B809528(a1, 0);
  sub_20B809604((uint64_t)a1, a5 == 1, 1);
  sub_20B80C4C4(v15);
  sub_20B80D548((uint64_t)a1, a2, a3);
  v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  v68 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v68;
  v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((_QWORD)v80)
    MEMORY[0x20BD39C80](v80, 0x1000C8077774924);
  sub_20B8016C0(v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_20B80D440(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v30;
  _QWORD *exception;

  if (a21)
    MEMORY[0x20BD39C80](a21, 0x1000C8077774924);
  sub_20B8016C0(&a27);
  v30 = *(_QWORD *)(v27 - 144);
  if (v30)
    MEMORY[0x20BD39C80](v30, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B80D548(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  sub_20B7FEB7C((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  return result;
}

void sub_20B80D614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80D63C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)sub_20B807734(a2, 8uLL);
  *(_QWORD *)(a1 + 16) = sub_20B807734(a2, v4);
  sub_20B807694(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4;
  return sub_20B80B2C4(a1);
}

uint64_t sub_20B80D69C(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  sub_20B807330(a2, (char *)&__buf, 8uLL);
  sub_20B80D6FC(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20B807210(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_20B80D6FC(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "h:33: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  return sub_20B807330(a1, a2, a3);
}

uint64_t sub_20B80D758(__int128 *a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  _QWORD *exception;
  const char *v17;
  _OWORD v18[3];
  _OWORD v19[4];
  __int128 v20;
  _BYTE v21[25];
  __int128 v22;
  _BYTE v23[25];
  __int128 v24;
  _BYTE v25[25];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x200000011;
    v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:17: MA"
          "RISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000)
    goto LABEL_15;
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000028;
    v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:40: MA"
          "RISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = 0;
    a4 = 4096;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8) + 16 * v6;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8)
        break;
LABEL_11:
      if (++v6 == v5)
        goto LABEL_15;
    }
    v9 = -v8;
    v10 = *(_QWORD *)v7 + 1;
    while (*(_BYTE *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1))
        goto LABEL_11;
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v19[3] = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_20B80D998((uint64_t)v18, a2, a3, a4);
  v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v18[1];
  *(_QWORD *)&v18[1] = v13;
  v14 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  sub_20B7FBAC4((uint64_t *)a1 + 6, (uint64_t *)v19);
  if ((_QWORD)v24)
    MEMORY[0x20BD39C80](v24, 0x1000C8077774924);
  if ((_QWORD)v22)
    MEMORY[0x20BD39C80](v22, 0x1000C8077774924);
  if ((_QWORD)v20)
    MEMORY[0x20BD39C80](v20, 0x1000C8077774924);
  if (*(_QWORD *)&v19[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v19[0], 0x1000C8077774924);
  result = *(_QWORD *)&v18[0];
  if (*(_QWORD *)&v18[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v18[0], 0x1000C8077774924);
  return result;
}

void sub_20B80D984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B80D998(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  _QWORD *exception;
  _QWORD *v31;
  char v32;
  _QWORD v33[2];
  _OWORD v34[3];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 12);
    do
    {
      *v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  sub_20B8049C4(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  v12 = *(_QWORD *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  sub_20B8047C8((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    v14 = v33;
    do
    {
      --v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = v15 + 16 * v13;
      v18 = (unsigned int *)(v16 + 8);
      v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C459000;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000ACLL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/t"
                       "ail.cc:172: MARISA_RANGE_ERROR: current.length() == 0";
        __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
      }
      v19 = 0;
      v20 = 0;
      v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(_QWORD *)v16 + v19))
          goto LABEL_13;
        ++v20;
        --v19;
        if (v17 == v20)
          goto LABEL_14;
      }
      v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        v22 = *((_QWORD *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      v22 = *((_QWORD *)&v34[0] + 1);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(_QWORD *)(a1 + 24);
      v23 = *v18;
      if ((_DWORD)v23)
      {
        for (i = 0; i < v23; ++i)
        {
          v32 = *(_BYTE *)(*(_QWORD *)v16 - v23 + i + 1);
          sub_20B7FB288((uint64_t *)a1, &v32);
          v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            v25 = 1;
            do
            {
              sub_20B809528((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          sub_20B809528((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      v32 = 0;
      sub_20B7FB288((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        v31 = __cxa_allocate_exception(0x20uLL);
        *v31 = &off_24C459000;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C2;
        v31[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc"
                 ":194: MARISA_SIZE_ERROR: buf_.size() > MARISA_UINT32_MAX";
        __cxa_throw(v31, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
      }
LABEL_29:
      v14 = (_QWORD *)v16;
    }
    while (v13);
  }
  sub_20B80C4C4((_BYTE *)a1);
  v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  v27 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = *(_QWORD *)&v34[1];
  *(_QWORD *)&v34[1] = v27;
  v28 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v34[2]);
  result = v26;
  BYTE8(v34[2]) = v27;
  if ((_QWORD)v26)
    return MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
  return result;
}

void sub_20B80DC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80DCD4(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_20B80E0E8(v8, a2);
  sub_20B809E44((uint64_t *)v9, a2);
  v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_20B7FBAC4((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((_QWORD)v14)
    MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x20BD39C80](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x20BD39C80](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD39C80](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_20B80DE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F9DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B80DE3C(uint64_t a1, uint64_t a2)
{
  sub_20B80D69C(a1, a2);
  return sub_20B80B6CC(a1 + 48, a2);
}

void sub_20B80DE68(_QWORD *a1, std::string *this, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  std::string::value_type v8;
  unsigned __int8 *v9;
  int v10;

  v3 = a3;
  if (a1[12])
  {
    do
    {
      std::string::push_back(this, *(_BYTE *)(a1[2] + v3));
      v6 = *(_QWORD *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    v7 = a1[2];
    v8 = *(_BYTE *)(v7 + a3);
    if (v8)
    {
      v9 = (unsigned __int8 *)(a3 + v7 + 1);
      do
      {
        std::string::push_back(this, v8);
        v10 = *v9++;
        v8 = v10;
      }
      while (v10);
    }
  }
}

uint64_t sub_20B80DEF4(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;

  v5 = a1[2];
  if (a1[12])
  {
    v6 = *a4;
    do
    {
      if (*(unsigned __int8 *)(v5 + a5) != *(unsigned __int8 *)(a2 + v6))
        break;
      *a4 = ++v6;
      if (((*(_QWORD *)(a1[8] + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
        return 1;
      ++a5;
    }
    while (v6 < a3);
  }
  else
  {
    v7 = (unsigned __int8 *)(v5 + a5);
    v8 = *a4;
    v11 = *v7;
    v9 = v7 + 1;
    v10 = v11;
    while (v10 == *(unsigned __int8 *)(a2 + v8))
    {
      *a4 = ++v8;
      v10 = *v9;
      if (!*v9)
        return 1;
      ++v9;
      if (v8 >= a3)
        return 0;
    }
  }
  return 0;
}

BOOL sub_20B80DF88(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *this)
{
  unint64_t v7;
  unint64_t v12;
  int v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;

  v7 = a5;
  if (a1[12])
  {
    v12 = *a4;
    while (1)
    {
      v13 = *(unsigned __int8 *)(a1[2] + v7);
      v14 = *(unsigned __int8 *)(a2 + v12);
      v15 = v13 == v14;
      if (v13 != v14)
        break;
      std::string::push_back(this, v13);
      v12 = *a4 + 1;
      *a4 = v12;
      if (((*(_QWORD *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        break;
      ++v7;
      if (v12 >= a3)
      {
        do
        {
          std::string::push_back(this, *(_BYTE *)(a1[2] + v7));
          v16 = *(_QWORD *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7;
          ++v7;
        }
        while ((v16 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    v17 = a1[2];
    v18 = *a4;
    v19 = v17 + a5 - *a4;
    v20 = *(_BYTE *)(v17 + a5);
    v21 = *a4;
    while (1)
    {
      v22 = *(unsigned __int8 *)(a2 + v21);
      v15 = v20 == v22;
      if (v20 != v22)
        break;
      std::string::push_back(this, v20);
      v23 = *a4;
      v21 = *a4 + 1;
      *a4 = v21;
      v20 = *(_BYTE *)(v19 + v21);
      if (!v20)
        break;
      if (v21 >= a3)
      {
        v24 = (unsigned __int8 *)(v7 - v18 + v17 + v23 + 2);
        do
        {
          std::string::push_back(this, v20);
          v25 = *v24++;
          v20 = v25;
        }
        while (v25);
        return 1;
      }
    }
  }
  return v15;
}

uint64_t sub_20B80E0E8(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_20B80D63C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  return result;
}

void sub_20B80E17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B80E1A4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2 >> 9;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (a2 >> 6)) & ~(-1 << a2);
  v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t sub_20B80E2C8(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[16];
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3;
    v8 = v3-- << 9;
    v9 = (unsigned int *)(v7 + 12);
    do
    {
      v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v11 = (unsigned int *)(v5 + 12 * v3);
  v12 = v11[1];
  v13 = a2 - (v3 << 9) + *v11;
  v14 = 8 * v3;
  if (v13 >= 256 - (v12 >> 23))
  {
    v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v16 = (v15 >> 9) & 0x1FF;
    if (v13 >= 384 - v16)
    {
      v18 = (v15 >> 18) & 0x1FF;
      if (v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        v13 = v13 + v18 - 448;
      }
      else
      {
        v14 |= 6uLL;
        v13 = v13 + v16 - 384;
      }
    }
    else if (v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      v13 = v13 + (v15 & 0x1FF) - 320;
    }
    else
    {
      v14 |= 4uLL;
      v13 = (v12 >> 23) + v13 - 256;
    }
  }
  else if (v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    v17 = (v12 >> 15);
    if (v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      v13 = v13 + v17 - 192;
    }
    else
    {
      v14 |= 2uLL;
      v13 = v13 + (v12 >> 7) - 128;
    }
  }
  else if (v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    v13 = (v12 & 0x7F) + v13 - 64;
  }
  return sub_20B80E4AC(v13, v14 << 6, ~*(_QWORD *)(a1[2] + 8 * v14));
}

unint64_t sub_20B80E4AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * a1
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
       + byte_20BA34FB6[256 * (a1 - ((unint64_t)(0x101010101010100 * v4) >> v5))
                      + (a3 >> v5)];
}

unint64_t sub_20B80E534(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;

  v2 = a1[22];
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3--;
    v8 = (unsigned int *)(v7 + 12);
    do
    {
      v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v10 = (unsigned int *)(v5 + 12 * v3);
  v11 = v10[1];
  v12 = a2 - *v10;
  v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    v23 = v11 >> 23;
    v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v25 = (v24 >> 9) & 0x1FF;
    v26 = (v24 >> 18) & 0x1FF;
    v27 = v13 | 7;
    v28 = v12 >= v26;
    if (v12 < v26)
      v29 = v12 - v25;
    else
      v29 = v12 - v26;
    if (!v28)
      v27 = v13 | 6;
    v30 = v24 & 0x1FF;
    v31 = v13 | 5;
    v32 = v13 | 4;
    v33 = v12 - v23;
    v34 = v12 >= v30;
    if (v12 < v30)
      v21 = v33;
    else
      v21 = v12 - v30;
    if (v34)
      v32 = v31;
    if (v12 < v25)
    {
      v22 = v32;
    }
    else
    {
      v21 = v29;
      v22 = v27;
    }
  }
  else
  {
    v14 = v11 >> 7;
    v15 = (v11 >> 15);
    v16 = v12 - (v11 >> 7);
    if (v12 < v15)
    {
      v17 = v13 | 2;
    }
    else
    {
      v16 = v12 - v15;
      v17 = v13 | 3;
    }
    v18 = v11 & 0x7F;
    v20 = v12 >= v18;
    v19 = v12 - v18;
    if (v20)
      v13 |= 1uLL;
    else
      v19 = v12;
    v20 = v12 >= v14;
    if (v12 < v14)
      v21 = v19;
    else
      v21 = v16;
    if (v20)
      v22 = v17;
    else
      v22 = v13;
  }
  return sub_20B80E4AC(v21, v22 << 6, *(_QWORD *)(a1[2] + 8 * v22));
}

void sub_20B80E6A8(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;

  v8 = a2[6];
  v9 = a1 + 8;
  v10 = v8 >> 9;
  if ((v8 & 0x1FF) != 0)
    ++v10;
  sub_20B7FE8EC(v9, v10 + 1);
  if (a2[3])
    __asm { BR              X10 }
  if ((v8 & 0x1FF) != 0)
  {
    v11 = (v8 - 1) >> 9;
    switch(((v8 - 1) >> 6) & 7)
    {
      case 0uLL:
        v12 = a1[9];
        v13 = (_DWORD *)(v12 + 12 * v11);
        v14 = -*v13;
        v15 = v13[1] & 0xFFFFFF80 | v14 & 0x7F;
        v13[1] = v15;
        goto LABEL_9;
      case 1uLL:
        v12 = a1[9];
        v16 = (_DWORD *)(v12 + 12 * v11);
        v15 = v16[1];
        v14 = -*v16;
LABEL_9:
        v17 = v15 & 0xFFFF807F | (v14 << 7);
        *(_DWORD *)(v12 + 12 * v11 + 4) = v17;
        goto LABEL_11;
      case 2uLL:
        v12 = a1[9];
        v18 = (_DWORD *)(v12 + 12 * v11);
        v17 = v18[1];
        v14 = -*v18;
LABEL_11:
        v19 = v17 & 0xFF807FFF | (v14 << 15);
        *(_DWORD *)(v12 + 12 * v11 + 4) = v19;
        goto LABEL_13;
      case 3uLL:
        v12 = a1[9];
        v20 = (_DWORD *)(v12 + 12 * v11);
        v19 = v20[1];
        v14 = -*v20;
LABEL_13:
        *(_DWORD *)(v12 + 12 * v11 + 4) = v19 & 0x7FFFFF | ((unsigned __int16)v14 << 23);
        goto LABEL_15;
      case 4uLL:
        v12 = a1[9];
        v14 = -*(_DWORD *)(v12 + 12 * v11);
LABEL_15:
        v21 = v12 + 12 * v11;
        v22 = *(_DWORD *)(v21 + 8) & 0xFFFFFE00 | v14 & 0x1FF;
        *(_DWORD *)(v21 + 8) = v22;
        goto LABEL_16;
      case 5uLL:
        v12 = a1[9];
        v25 = (_DWORD *)(v12 + 12 * v11);
        v22 = v25[2];
        v14 = -*v25;
LABEL_16:
        v23 = v22 & 0xFFFC01FF | ((v14 & 0x1FF) << 9);
        *(_DWORD *)(v12 + 12 * v11 + 8) = v23;
        goto LABEL_17;
      case 6uLL:
        v12 = a1[9];
        v26 = (_DWORD *)(v12 + 12 * v11);
        v23 = v26[2];
        v14 = -*v26;
LABEL_17:
        *(_DWORD *)(v12 + 12 * v11 + 8) = v23 & 0xF803FFFF | ((v14 & 0x1FF) << 18);
        break;
      default:
        break;
    }
  }
  a1[6] = v8;
  a1[7] = a2[7];
  *(_DWORD *)(a1[9] + 12 * a1[11] - 12) = 0;
  if (a3)
  {
    v27 = v8;
    sub_20B805964(a1 + 14, &v27);
    sub_20B80EB14((_DWORD *)a1 + 28);
  }
  if (a4)
  {
    v24 = a1 + 20;
    v27 = v8;
    sub_20B805964(v24, &v27);
    sub_20B80EB14(v24);
  }
}

_DWORD *sub_20B80EB14(_DWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C459000;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_24C458A50, (void (*)(void *))std::exception::~exception);
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return sub_20B7FEC70((uint64_t *)result, v1);
  return result;
}

_QWORD *sub_20B80EB88(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C467668;
  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  a1[1] = v2;
  return a1;
}

_QWORD *sub_20B80EBD8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C467668;
  v2 = a1[1];
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x20BD39CB0](v2, 0x80C40D6874129);
  }
  return a1;
}

void sub_20B80EC38(_QWORD *a1)
{
  sub_20B80EBD8(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B80EC5C(uint64_t a1, uint64_t a2)
{
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(void ***)(a1 + 8);
  v4 = v3[1];
  v5 = (unint64_t)v3[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = ((char *)v4 - (_BYTE *)*v3) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_20B80CDD8();
    v8 = v5 - (_QWORD)*v3;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)sub_20B800BE8((uint64_t)(v3 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = a2;
    v6 = v12 + 8;
    v15 = (char *)*v3;
    v14 = (char *)v3[1];
    if (v14 != *v3)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)*v3;
    }
    *v3 = v12;
    v3[1] = v6;
    v3[2] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  v3[1] = v6;
}

_QWORD *sub_20B80ED34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  const void ****v7;
  const void ***v8;
  const void ***v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  _QWORD *v14;
  __n128 __dst;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  v3 = v1[1] - *v1;
  v4 = (unint64_t)v3 >> 3;
  if (!((unint64_t)v3 >> 3))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 8) - **(_QWORD **)v2;
  sub_20B80EE38(&__dst, v6 * (int)(v3 >> 3));
  v7 = *(const void *****)(a1 + 8);
  v8 = *v7;
  v9 = v7[1];
  if (*v7 != v9)
  {
    v10 = (char *)__dst.n128_u64[0];
    do
    {
      v11 = **v8;
      v12 = (*v8)[1];
      v13 = v12 - v11;
      if (v12 != v11)
        memmove(v10, v11, v12 - v11);
      v10 += v13;
      ++v8;
    }
    while (v8 != v9);
  }
  v14 = sub_20B824A18(v4, v6, &__dst);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = **(_QWORD **)(a1 + 8);
  if (__dst.n128_u64[0])
  {
    __dst.n128_u64[1] = __dst.n128_u64[0];
    operator delete((void *)__dst.n128_u64[0]);
  }
  return v14;
}

void sub_20B80EE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B80EE38(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B80EEA8(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20B80EE8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B80EEA8(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_20B80CDD8();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t sub_20B80EEE8(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v3 = (_QWORD *)(a1 + 112);
  v2 = *(void **)(a1 + 112);
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v4 = *(void **)(a1 + 64);
  if (v4)
    free(v4);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(void **)(a1 + 16);
  if (v5)
    free(v5);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20B80FA64((_QWORD **)(a1 + 8), 0);
  return nullsub_1(a1);
}

void sub_20B80EF54(uint64_t a1)
{
  sub_20B80EEE8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B80EF78(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C467628;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 92) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 140) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_DWORD *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  v5 = *(_QWORD **)a1;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  *(_QWORD *)a1 = 0;
  sub_20B80FA64((_QWORD **)(v4 + 8), v5);
  sub_20B80F034(v4, v6, a2);
  return v4;
}

void sub_20B80F01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B80FB4C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B80F034(uint64_t a1, int a2, int a3)
{
  size_t v6;
  uint64_t v7;

  v6 = a3 * a2;
  sub_20B80F964(a1 + 16, v6);
  v7 = a3 * (uint64_t)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20B80FB88(a1 + 64, v6);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 88) = v7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_DWORD *)(a1 + 104) = 2;
  sub_20B80F2F8(a1 + 112, a2, **(_DWORD **)(a1 + 8), 0.0);
}

void sub_20B80F0C4(uint64_t a1, int a2)
{
  int v4;
  int v5;

  sub_20B80F168(*(int **)(a1 + 8), a2);
  if (*(_DWORD *)(a1 + 48) < a2)
  {
    v4 = *(_DWORD *)(a1 + 52);
    sub_20B80F964(a1 + 16, v4 * a2);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 40) = v4 * (uint64_t)a2;
    *(_DWORD *)(a1 + 48) = a2;
    *(_DWORD *)(a1 + 52) = v4;
    *(_DWORD *)(a1 + 56) = 2;
    v5 = *(_DWORD *)(a1 + 100);
    sub_20B80FB88(a1 + 64, v5 * a2);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 88) = v5 * (uint64_t)a2;
    *(_DWORD *)(a1 + 96) = a2;
    *(_DWORD *)(a1 + 100) = v5;
    *(_DWORD *)(a1 + 104) = 2;
  }
  sub_20B80F2F8(a1 + 112, a2, **(_DWORD **)(a1 + 8), 0.0);
}

void sub_20B80F168(int *a1, int a2)
{
  int v4;
  void *v5;
  int64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  a1[2] = a2;
  v4 = *a1;
  sub_20B80F964((uint64_t)(a1 + 4), *a1 * a2);
  v5 = (void *)*((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v5;
  *((_QWORD *)a1 + 5) = v4 * (uint64_t)a2;
  a1[12] = a2;
  a1[13] = v4;
  a1[14] = 2;
  if (v6 >= 1)
    memset(v5, 128, v6);
  v7 = *a1;
  sub_20B80F774((uint64_t)(a1 + 16), *a1 * a2);
  v8 = (void *)*((_QWORD *)a1 + 8);
  v9 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 10) = v8;
  *((_QWORD *)a1 + 11) = v7 * (uint64_t)a2;
  a1[24] = a2;
  a1[25] = v7;
  a1[26] = 2;
  if (v9 >= 1)
    bzero(v8, 2 * v9);
  v10 = a1[1];
  sub_20B80F964((uint64_t)(a1 + 28), v10 * a2);
  *((_QWORD *)a1 + 16) = *((_QWORD *)a1 + 14);
  *((_QWORD *)a1 + 17) = v10 * (uint64_t)a2;
  a1[36] = a2;
  a1[37] = v10;
  a1[38] = 2;
  v11 = *a1 + (uint64_t)a1[1];
  sub_20B80F964((uint64_t)(a1 + 40), (int)v11 * a2);
  *((_QWORD *)a1 + 22) = *((_QWORD *)a1 + 20);
  *((_QWORD *)a1 + 23) = v11 * a2;
  a1[48] = a2;
  a1[49] = v11;
  a1[50] = 2;
  v12 = 4 * *a1;
  sub_20B80F774((uint64_t)(a1 + 52), v12 * a2);
  *((_QWORD *)a1 + 28) = *((_QWORD *)a1 + 26);
  *((_QWORD *)a1 + 29) = (int)v12 * (uint64_t)a2;
  a1[60] = a2;
  a1[61] = v12;
  a1[62] = 2;
  LODWORD(v12) = *a1;
  sub_20B80F964((uint64_t)(a1 + 64), *a1 * a2);
  *((_QWORD *)a1 + 34) = *((_QWORD *)a1 + 32);
  *((_QWORD *)a1 + 35) = (int)v12 * (uint64_t)a2;
  a1[72] = a2;
  a1[73] = v12;
  a1[74] = 2;
  LODWORD(v12) = *a1;
  sub_20B80F774((uint64_t)(a1 + 76), *a1 * a2);
  *((_QWORD *)a1 + 40) = *((_QWORD *)a1 + 38);
  *((_QWORD *)a1 + 41) = (int)v12 * (uint64_t)a2;
  a1[84] = a2;
  a1[85] = v12;
  a1[86] = 2;
}

void sub_20B80F2F8(uint64_t a1, int a2, int a3, float a4)
{
  float v7;

  v7 = a4;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(a3 * a2))
    sub_20B80FC28((_QWORD *)a1, a3 * a2, &v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 24) = a3 * (uint64_t)a2;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = 2;
}

_QWORD *sub_20B80F368(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  _QWORD *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __n128 __dst;

  v1 = *(int **)(a1 + 8);
  if (!v1)
    return 0;
  v2 = v1[2];
  v3 = *v1;
  v4 = !(_DWORD)v2 || v3 == 0;
  if (v4 || v1[1] == 0)
    return 0;
  v7 = v3;
  v8 = 2 * v3;
  sub_20B80EE38(&__dst, *((_QWORD *)v1 + 5) + v8 * v2);
  if ((int)v2 >= 1)
  {
    v9 = 0;
    v10 = (char *)__dst.n128_u64[0];
    do
    {
      memcpy(v10, (const void *)(*((_QWORD *)v1 + 4) + v9 * v1[13]), v7);
      v11 = &v10[v7];
      memcpy(v11, (const void *)(*((_QWORD *)v1 + 10) + 2 * v9 * v1[25]), v8);
      v10 = &v11[v8];
      ++v9;
    }
    while (v2 != v9);
  }
  v6 = sub_20B824A18(v2, 3 * (int)v7, &__dst);
  if (__dst.n128_u64[0])
  {
    __dst.n128_u64[1] = __dst.n128_u64[0];
    operator delete((void *)__dst.n128_u64[0]);
  }
  return v6;
}

void sub_20B80F468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B80F484(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v10[2];
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *__p[3];
  void *v20[3];

  v3 = *a2;
  *a2 = 0;
  v4 = sub_20B824BBC(v3);
  v5 = (char *)sub_20B824BC8(v3);
  v6 = sub_20B824BD4(v3) / (unint64_t)(3 * v4);
  sub_20B80EE38(v20, v4 * (int)v6);
  sub_20B80FC98(__p, v4 * (int)v6);
  if (v4 >= 1)
  {
    v7 = 0;
    v8 = v4;
    do
    {
      memmove((char *)v20[0] + v7 * (int)v6, v5, (int)v6);
      v9 = &v5[(int)v6];
      memmove((char *)__p[0] + 2 * v7 * (int)v6, v9, 2 * (int)v6);
      v5 = &v9[2 * (int)v6];
      ++v7;
      --v8;
    }
    while (v8);
  }
  v14 = v20[0];
  v15 = (int)v6 * (uint64_t)v4;
  v16 = v4;
  v17 = v6;
  v18 = 2;
  v10[0] = __p[0];
  v10[1] = v15;
  v11 = v4;
  v12 = v6;
  v13 = 2;
  sub_20B80F63C(*(_QWORD *)(a1 + 8), (uint64_t)&v14, (uint64_t)v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_20B80F5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  _Unwind_Resume(exception_object);
}

void sub_20B80F63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 16);
  sub_20B80F814(a1 + 16, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), 128);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    memmove(*(void **)(a1 + 32), *(const void **)a2, v6);
  sub_20B80F884(a1 + 64, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 0);
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    memmove(*(void **)(a1 + 80), *(const void **)a3, 2 * v7);
  sub_20B80F814(a1 + 112, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 4), 0);
  sub_20B80F814(a1 + 160, *(_DWORD *)(a1 + 8), *(_DWORD *)a1 + *(_DWORD *)(a1 + 4), 0);
  sub_20B80F884(a1 + 208, *(_DWORD *)(a1 + 8), 4 * *(_DWORD *)a1, 0);
  sub_20B80F814(a1 + 256, *(_DWORD *)(a1 + 8), *(_DWORD *)a1, 0);
  sub_20B80F884(a1 + 304, *(_DWORD *)(a1 + 8), *(_DWORD *)a1, 0);
}

uint64_t sub_20B80F724(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20B80F72C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 80) + 4 * *(unsigned int *)(a1 + 100) * a2;
}

uint64_t sub_20B80F744(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_20B80F74C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B80F754(uint64_t a1)
{
  return a1 + 128;
}

void sub_20B80F75C(uint64_t a1, int a2)
{
  sub_20B80F2F8(a1 + 112, a2, **(_DWORD **)(a1 + 8), 0.0);
}

void sub_20B80F774(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *memptr;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < a2)
  {
    if (2 * a2)
    {
      memptr = 0;
      if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * a2, 0xC6376F0AuLL))
        v5 = 0;
      else
        v5 = memptr;
    }
    else
    {
      v5 = 0;
    }
    if (*(_QWORD *)a1)
    {
      memcpy(v5, *(const void **)a1, 2 * *(_QWORD *)(a1 + 8));
      free(*(void **)a1);
    }
    *(_QWORD *)a1 = v5;
    goto LABEL_12;
  }
  if (v4 > a2)
LABEL_12:
    *(_QWORD *)(a1 + 8) = a2;
}

void sub_20B80F814(uint64_t a1, int a2, int a3, char a4)
{
  char v7;

  v7 = a4;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(a3 * a2))
    sub_20B80F8F4((_QWORD *)a1, a3 * a2, &v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 24) = a3 * (uint64_t)a2;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = 2;
}

void sub_20B80F884(uint64_t a1, int a2, int a3, __int16 a4)
{
  __int16 v7;

  v7 = a4;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(a3 * a2))
    sub_20B80F9F4((_QWORD *)a1, a3 * a2, &v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 24) = a3 * (uint64_t)a2;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = 2;
}

void sub_20B80F8F4(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;

  v6 = a1[1];
  sub_20B80F964((uint64_t)a1, a2);
  if (v6 < a2)
  {
    v7 = a1[1];
    v8 = (_BYTE *)(*a1 + v6);
    if (*a1 + v7 - (uint64_t)v8 >= 1)
    {
      v9 = v7 - v6 + 1;
      do
      {
        *v8++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
}

void sub_20B80F964(uint64_t a1, size_t size)
{
  size_t v4;
  void *v5;
  void *memptr;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= size)
  {
    if (v4 <= size)
      return;
  }
  else
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, size, 0xC6376F0AuLL))
      v5 = 0;
    else
      v5 = memptr;
    if (*(_QWORD *)a1)
    {
      memcpy(v5, *(const void **)a1, *(_QWORD *)(a1 + 8));
      free(*(void **)a1);
    }
    *(_QWORD *)a1 = v5;
  }
  *(_QWORD *)(a1 + 8) = size;
}

void sub_20B80F9F4(_QWORD *a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6;
  _WORD *v7;
  uint64_t v8;
  unint64_t v9;

  v6 = a1[1];
  sub_20B80F774((uint64_t)a1, a2);
  if (v6 < a2)
  {
    v7 = (_WORD *)(*a1 + 2 * v6);
    v8 = *a1 + 2 * a1[1] - (_QWORD)v7;
    if (v8 >= 1)
    {
      v9 = ((unint64_t)v8 >> 1) + 1;
      do
      {
        *v7++ = *a3;
        --v9;
      }
      while (v9 > 1);
    }
  }
}

_QWORD *sub_20B80FA64(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B80FAA0(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

_QWORD *sub_20B80FAA0(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a1 + 38;
  v3 = (void *)a1[38];
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v4 = (void *)a1[32];
  if (v4)
    free(v4);
  a1[32] = 0;
  a1[33] = 0;
  v5 = (void *)a1[26];
  if (v5)
    free(v5);
  a1[26] = 0;
  a1[27] = 0;
  v6 = (void *)a1[20];
  if (v6)
    free(v6);
  a1[20] = 0;
  a1[21] = 0;
  v7 = (void *)a1[14];
  if (v7)
    free(v7);
  a1[14] = 0;
  a1[15] = 0;
  v8 = (void *)a1[8];
  if (v8)
    free(v8);
  a1[8] = 0;
  a1[9] = 0;
  v9 = (void *)a1[2];
  if (v9)
    free(v9);
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

uint64_t sub_20B80FB4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B80EEE8(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B80FB88(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *memptr;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < a2)
  {
    if (4 * a2)
    {
      memptr = 0;
      if (malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * a2, 0xC6376F0AuLL))
        v5 = 0;
      else
        v5 = memptr;
    }
    else
    {
      v5 = 0;
    }
    if (*(_QWORD *)a1)
    {
      memcpy(v5, *(const void **)a1, 4 * *(_QWORD *)(a1 + 8));
      free(*(void **)a1);
    }
    *(_QWORD *)a1 = v5;
    goto LABEL_12;
  }
  if (v4 > a2)
LABEL_12:
    *(_QWORD *)(a1 + 8) = a2;
}

float sub_20B80FC28(_QWORD *a1, unint64_t a2, float *a3)
{
  unint64_t v6;
  float result;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;

  v6 = a1[1];
  sub_20B80FB88((uint64_t)a1, a2);
  if (v6 < a2)
  {
    v8 = (_DWORD *)(*a1 + 4 * v6);
    v9 = *a1 + 4 * a1[1] - (_QWORD)v8;
    if (v9 >= 1)
    {
      v10 = ((unint64_t)v9 >> 2) + 1;
      do
      {
        result = *a3;
        *v8++ = *(_DWORD *)a3;
        --v10;
      }
      while (v10 > 1);
    }
  }
  return result;
}

_QWORD *sub_20B80FC98(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B80FD0C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_20B80FCF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B80FD0C(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_20B80CDD8();
  result = (char *)sub_20B80FD48((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_20B80FD48(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_20B800BC0();
  return operator new(2 * a2);
}

uint64_t sub_20B80FD78()
{
  return cblas_sscal_NEWLAPACK();
}

uint64_t sub_20B80FD94()
{
  return cblas_saxpy_NEWLAPACK();
}

uint64_t sub_20B80FDBC(uint64_t result, int a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;

  if ((int)result >= 1)
  {
    v4 = 0;
    do
    {
      v5 = a2;
      v6 = a4;
      if (a2 >= 1)
      {
        do
        {
          *v6 = *(float *)(a3 + 4 * v4) + *v6;
          ++v6;
          --v5;
        }
        while (v5);
      }
      ++v4;
      a4 += a2;
    }
    while (v4 != result);
  }
  return result;
}

float sub_20B80FE10(int a1, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float result;

  if (a1 >= 1)
  {
    v3 = a1;
    do
    {
      v4 = *a2++;
      result = v4 * *a3;
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20B80FE38()
{
  return cblas_sdot_NEWLAPACK();
}

uint64_t sub_20B80FE5C()
{
  return cblas_scopy_NEWLAPACK();
}

uint64_t sub_20B80FE80()
{
  return cblas_scopy_NEWLAPACK();
}

void sub_20B80FEB0(int a1, float *a2)
{
  int v2;

  v2 = a1;
  vvlog10f(a2, a2, &v2);
}

void sub_20B80FEDC(int a1, float *a2)
{
  int v2;

  v2 = a1;
  vvtanhf(a2, a2, &v2);
}

void sub_20B80FF08(int a1, float *a2, float *a3)
{
  uint64_t v5;
  float v6;
  float v7;

  if (a1 >= 1)
  {
    v5 = a1;
    do
    {
      v6 = *a3;
      v7 = *a2++;
      *a3++ = v6 * tanhf(v7);
      --v5;
    }
    while (v5);
  }
}

uint64_t sub_20B80FF60(int a1, float *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  v5 = a1;
  cblas_sscal_NEWLAPACK();
  vvtanhf(a2, a2, &v5);
  result = cblas_sscal_NEWLAPACK();
  v4 = v5;
  if (v5 >= 1)
  {
    do
    {
      *a2 = *a2 + 0.5;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_20B80FFE0()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_20B810058()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_20B8100D0(uint64_t result, int a2, float *a3)
{
  int v4;
  uint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  int i;
  float *v13;
  float v14;
  uint64_t v15;
  float v16;
  int v17;

  v17 = a2;
  if ((int)result >= 1)
  {
    v4 = result;
    v5 = 0;
    v6 = a3;
    do
    {
      if (a2 >= 1)
      {
        v7 = -3.4028e38;
        v8 = a2;
        v9 = v6;
        do
        {
          v10 = *v9++;
          v11 = v10;
          if (v10 >= v7)
            v7 = v11;
          --v8;
        }
        while (v8);
        do
        {
          *(float *)((char *)v6 + v8) = *(float *)((char *)v6 + v8) - v7;
          v8 += 4;
        }
        while (4 * a2 != v8);
      }
      ++v5;
      v6 += a2;
    }
    while (v5 != result);
    for (i = 0; i != v4; ++i)
    {
      vvexpf(&a3[v17 * i], &a3[v17 * i], &v17);
      if (v17 >= 1)
      {
        v13 = &a3[v17 * i];
        v14 = 0.0;
        v15 = v17;
        do
        {
          v16 = *v13++;
          v14 = v14 + v16;
          --v15;
        }
        while (v15);
      }
      result = cblas_sscal_NEWLAPACK();
    }
  }
  return result;
}

uint64_t sub_20B8101FC(uint64_t result, int a2, float *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;

  if ((int)result >= 1)
  {
    v4 = 0;
    v5 = result;
    v6 = 4 * a2;
    v8 = a2;
    do
    {
      if (a2 >= 1)
      {
        v9 = v8;
        v10 = a3;
        v11 = 0.000001;
        do
        {
          v12 = *v10++;
          v11 = v11 + v12;
          --v9;
        }
        while (v9);
      }
      result = cblas_sscal_NEWLAPACK();
      ++v4;
      a3 = (float *)((char *)a3 + v6);
    }
    while (v4 != v5);
  }
  return result;
}

void *sub_20B8102BC(void *result, int a2, char *__src, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;

  if ((_DWORD)result == 1 || a2 == 1)
    return memmove(__dst, __src, 4 * a2 * (int)result);
  if ((int)result >= 1)
  {
    v4 = 0;
    do
    {
      v5 = a2;
      v6 = (int *)__src;
      v7 = __dst;
      if (a2 >= 1)
      {
        do
        {
          v8 = *v6++;
          *v7 = v8;
          v7 += result;
          --v5;
        }
        while (v5);
      }
      ++v4;
      __dst += 4;
      __src += 4 * a2;
    }
    while (v4 != result);
  }
  return result;
}

uint64_t sub_20B810340()
{
  return 0xFF00000000;
}

double sub_20B810348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + 8) * *(double *)(a2 + 8) / *(double *)(a3 + 8);
}

unint64_t sub_20B810360(unsigned int *a1, uint64_t a2)
{
  long double v3;
  int __e[2];

  v3 = *(double *)(a2 + 8) * 4096.0;
  *(_QWORD *)__e = 0;
  sub_20B824948(&__e[1], __e, v3);
  return *a1 | ((unint64_t)__e[1] << 32);
}

uint64_t sub_20B8103B4(uint64_t result, float *a2, float a3)
{
  uint64_t v3;

  if ((int)result >= 1)
  {
    v3 = result;
    do
    {
      *a2 = *a2 * a3;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_20B8103D8(int a1, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float result;

  if (a1 >= 1)
  {
    v3 = a1;
    do
    {
      v4 = *a2++;
      result = v4 + *a3;
      *a3++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_20B810400(int a1, float *a2, float *a3)
{
  uint64_t v3;
  float result;
  float v5;
  float v6;
  float v7;

  if (a1 < 1)
    return 0.0;
  v3 = a1;
  result = 0.0;
  do
  {
    v5 = *a2++;
    v6 = v5;
    v7 = *a3++;
    result = result + (float)(v6 * v7);
    --v3;
  }
  while (v3);
  return result;
}

float sub_20B810430(int a1, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float result;

  if (a1 >= 1)
  {
    v3 = a1;
    do
    {
      v4 = *a2++;
      result = v4;
      *a3++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_20B810450(int a1, int a2, int a3, float *a4, uint64_t a5)
{
  uint64_t v5;
  float *v6;
  float v7;
  float result;

  if (a1 >= 1)
  {
    v5 = a1;
    v6 = (float *)(a5 + 4 * a3);
    do
    {
      v7 = *a4++;
      result = v7;
      *v6 = v7;
      v6 += a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_20B81047C(int a1, float *a2)
{
  uint64_t v3;

  if (a1 >= 1)
  {
    v3 = a1;
    do
    {
      *a2 = log10f(*a2);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

void sub_20B8104B8(int a1, float *a2)
{
  uint64_t v3;

  if (a1 >= 1)
  {
    v3 = a1;
    do
    {
      *a2 = tanhf(*a2);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

void sub_20B8104F4(int a1, float *a2)
{
  uint64_t v3;

  if (a1 >= 1)
  {
    v3 = a1;
    do
    {
      *a2 = 1.0 / (float)(expf(-*a2) + 1.0);
      ++a2;
      --v3;
    }
    while (v3);
  }
}

unint64_t sub_20B810548(unint64_t result, int a2, int a3, uint64_t a4, float *a5, float *a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  float *v36;

  if (((a7 ^ 1) & 1) != 0 || (a8 & 1) != 0)
  {
    if (((a7 ^ 1 | a8 ^ 1) & 1) != 0)
    {
      if (((a8 ^ 1 | a7) & 1) != 0)
      {
        if ((int)result >= 1)
        {
          v16 = 0;
          v17 = result;
          v18 = 4 * a3;
          do
          {
            if (a2 >= 1)
            {
              v19 = 0;
              v20 = a5;
              do
              {
                if (a3 >= 1)
                {
                  result = a3;
                  v21 = v20;
                  v22 = a6;
                  do
                  {
                    v23 = *v21++;
                    *v22 = *v22 + (float)(*(float *)(a4 + 4 * (v19 + v16 * a2)) * v23);
                    ++v22;
                    --result;
                  }
                  while (result);
                }
                ++v19;
                v20 = (float *)((char *)v20 + v18);
              }
              while (v19 != a2);
            }
            ++v16;
            a6 = (float *)((char *)a6 + v18);
          }
          while (v16 != v17);
        }
      }
      else if ((int)result >= 1)
      {
        v30 = 0;
        v31 = result;
        do
        {
          if (a2 >= 1)
          {
            v32 = 0;
            v33 = a5;
            do
            {
              if (a3 >= 1)
              {
                result = v32 + v30 * a2;
                v34 = a3;
                v35 = v33;
                v36 = a6;
                do
                {
                  *v36 = *v36 + (float)(*(float *)(a4 + 4 * result) * *v35);
                  ++v36;
                  v35 += a2;
                  --v34;
                }
                while (v34);
              }
              ++v32;
              ++v33;
            }
            while (v32 != a2);
          }
          ++v30;
          a6 += a3;
        }
        while (v30 != v31);
      }
    }
    else if ((int)result >= 1)
    {
      v24 = 0;
      v25 = result;
      do
      {
        if (a2 >= 1)
        {
          v26 = 0;
          v27 = a5;
          do
          {
            if (a3 >= 1)
            {
              v28 = a3;
              result = (unint64_t)v27;
              v29 = a6;
              do
              {
                *v29 = *v29 + (float)(*(float *)(a4 + 4 * (v24 + v26 * v25)) * *(float *)result);
                ++v29;
                result += 4 * a2;
                --v28;
              }
              while (v28);
            }
            ++v26;
            ++v27;
          }
          while (v26 != a2);
        }
        ++v24;
        a6 += a3;
      }
      while (v24 != v25);
    }
  }
  else if ((int)result >= 1)
  {
    v8 = 0;
    v9 = result;
    v10 = 4 * a3;
    do
    {
      if (a2 >= 1)
      {
        v11 = 0;
        v12 = a5;
        do
        {
          if (a3 >= 1)
          {
            v13 = a3;
            v14 = v12;
            result = (unint64_t)a6;
            do
            {
              v15 = *v14++;
              *(float *)result = *(float *)result + (float)(*(float *)(a4 + 4 * (v8 + v11 * v9)) * v15);
              result += 4;
              --v13;
            }
            while (v13);
          }
          ++v11;
          v12 = (float *)((char *)v12 + v10);
        }
        while (v11 != a2);
      }
      ++v8;
      a6 = (float *)((char *)a6 + v10);
    }
    while (v8 != v9);
  }
  return result;
}

unint64_t sub_20B8107AC(unint64_t a1, int a2, int a3, uint64_t a4, float *a5, void *a6, int a7, int a8)
{
  if (a3 * (int)a1 >= 1)
    bzero(a6, 4 * (a3 * a1));
  return sub_20B810548(a1, a2, a3, a4, a5, (float *)a6, a7, a8);
}

void sub_20B810834(int a1, int a2, float *a3)
{
  float *v3;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  unint64_t v21;

  if (a1 >= 1)
  {
    v3 = a3;
    v5 = 0;
    v6 = a1;
    v7 = a3;
    v8 = a2;
    do
    {
      if (a2 >= 1)
      {
        v9 = -3.4028e38;
        v10 = a2;
        v11 = v7;
        do
        {
          v12 = *v11++;
          v13 = v12;
          if (v12 >= v9)
            v9 = v13;
          --v10;
        }
        while (v10);
        do
        {
          *(float *)((char *)v7 + v10) = *(float *)((char *)v7 + v10) - v9;
          v10 += 4;
        }
        while (4 * a2 != v10);
      }
      ++v5;
      v7 += a2;
    }
    while (v5 != a1);
    v14 = 0;
    v15 = 4 * a2;
    v16 = 4 * a2;
    do
    {
      if (a2 >= 1)
      {
        v17 = 0.0;
        v18 = v8;
        v19 = v3;
        do
        {
          v20 = expf(*v19);
          *v19++ = v20;
          v17 = v17 + v20;
          --v18;
        }
        while (v18);
        v21 = 0;
        do
        {
          v3[v21 / 4] = v3[v21 / 4] / v17;
          v21 += 4;
        }
        while (v16 != v21);
      }
      ++v14;
      v3 = (float *)((char *)v3 + v15);
    }
    while (v14 != v6);
  }
}

uint64_t sub_20B810958(uint64_t result, int a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;

  if ((int)result >= 1)
  {
    v3 = 0;
    do
    {
      if (a2 >= 1)
      {
        v4 = a2;
        v5 = a3;
        v6 = 0.000001;
        do
        {
          v7 = *v5++;
          v6 = v6 + v7;
          --v4;
        }
        while (v4);
        do
        {
          *(float *)((char *)a3 + v4) = *(float *)((char *)a3 + v4) / v6;
          v4 += 4;
        }
        while (4 * a2 != v4);
      }
      ++v3;
      a3 += a2;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_20B8109CC(uint64_t result, int a2, int *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;

  if ((int)result >= 1)
  {
    v4 = 0;
    do
    {
      v5 = a2;
      v6 = a3;
      v7 = a4;
      if (a2 >= 1)
      {
        do
        {
          v8 = *v6++;
          *v7 = v8;
          v7 += result;
          --v5;
        }
        while (v5);
      }
      ++v4;
      ++a4;
      a3 += a2;
    }
    while (v4 != result);
  }
  return result;
}

uint64_t sub_20B810A28()
{
  return cblas_sscal_NEWLAPACK();
}

uint64_t sub_20B810A44()
{
  return cblas_saxpy_NEWLAPACK();
}

uint64_t sub_20B810A6C(uint64_t result, int a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4;
  const float *v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t *v8;
  unsigned int v9;
  uint64_t v10;

  if ((int)result >= 1)
  {
    v4 = 0;
    do
    {
      if (a2 < 4)
      {
        v9 = 0;
      }
      else
      {
        v5 = (const float *)(a3 + 4 * v4);
        v6 = vld1q_dup_f32(v5);
        v7 = (a2 / 4);
        v8 = a4;
        do
        {
          *v8 = vaddq_f32(v6, *v8);
          ++v8;
          --v7;
        }
        while (v7);
        v9 = a2 / 4;
      }
      if (a2 > (int)(4 * v9))
      {
        v10 = 4 * v9;
        do
        {
          a4->f32[v10] = *(float *)(a3 + 4 * v4) + a4->f32[v10];
          ++v10;
        }
        while (a2 != v10);
      }
      ++v4;
      a4 = (float32x4_t *)((char *)a4 + 4 * a2);
    }
    while (v4 != result);
  }
  return result;
}

float32_t sub_20B810B08(int a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float *f32;
  float *v11;
  uint64_t v12;
  float v13;

  v3 = a1 + 3;
  if (a1 >= 0)
    v3 = a1;
  if (a1 < 4)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v4 = (v3 >> 2);
    v5 = v4;
    v6 = a2;
    v7 = a3;
    do
    {
      v8 = *v6++;
      v9 = vmulq_f32(v8, *v7);
      *v7++ = v9;
      --v5;
    }
    while (v5);
  }
  if (a1 > 4 * (int)v4)
  {
    f32 = a3[v4].f32;
    v11 = a2[v4].f32;
    v12 = a1 - 4 * v4;
    do
    {
      v13 = *v11++;
      v9.f32[0] = v13 * *f32;
      *f32++ = v9.f32[0];
      --v12;
    }
    while (v12);
  }
  return v9.f32[0];
}

uint64_t sub_20B810B80()
{
  return cblas_sdot_NEWLAPACK();
}

uint64_t sub_20B810BA4()
{
  return cblas_scopy_NEWLAPACK();
}

uint64_t sub_20B810BC8()
{
  return cblas_scopy_NEWLAPACK();
}

void sub_20B810BF8(int a1, float *a2)
{
  int v2;

  v2 = a1;
  vvlog10f(a2, a2, &v2);
}

void sub_20B810C24(int a1, float *a2)
{
  int v2;

  v2 = a1;
  vvtanhf(a2, a2, &v2);
}

void sub_20B810C50(int a1, float32x4_t *a2, float32x4_t *a3)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float *f32;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  int v40;
  float32x4_t *v41;
  float32x4_t *v42;
  int v43;
  int v44;
  int v46;
  float32x4_t *v47;
  float32x4_t *v48;
  int v49;
  int v50;
  __int128 v51;

  v3 = atomic_load((unsigned __int8 *)qword_25472ADB0);
  if ((v3 & 1) == 0)
  {
    v40 = a1;
    v41 = a3;
    v42 = a2;
    v43 = __cxa_guard_acquire(qword_25472ADB0);
    a2 = v42;
    a3 = v41;
    v44 = v43;
    a1 = v40;
    if (v44)
    {
      __asm { FMOV            V0.4S, #1.0 }
      xmmword_25472ADA0 = _Q0;
      __cxa_guard_release(qword_25472ADB0);
      a1 = v40;
      a2 = v42;
      a3 = v41;
    }
  }
  v4 = atomic_load((unsigned __int8 *)qword_25472ADD0);
  if ((v4 & 1) == 0)
  {
    v46 = a1;
    v47 = a3;
    v48 = a2;
    v49 = __cxa_guard_acquire(qword_25472ADD0);
    a2 = v48;
    a3 = v47;
    v50 = v49;
    a1 = v46;
    if (v50)
    {
      *(_QWORD *)&v51 = 0x4000000040000000;
      *((_QWORD *)&v51 + 1) = 0x4000000040000000;
      xmmword_25472ADC0 = v51;
      __cxa_guard_release(qword_25472ADD0);
      a1 = v46;
      a2 = v48;
      a3 = v47;
    }
  }
  v5 = a1 + 3;
  if (a1 >= 0)
    v5 = a1;
  if (a1 < 4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = (v5 >> 2);
    v7 = (float32x4_t)xmmword_25472ADC0;
    v8 = (float32x4_t)vdupq_n_s32(0x42B0C0A5u);
    v9 = (float32x4_t)vdupq_n_s32(0xC2B0C0A5);
    v10 = (float32x4_t)xmmword_25472ADA0;
    v11 = (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu);
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V6.4S, #1.0 }
    v18 = (float32x4_t)vdupq_n_s32(0xBF318000);
    v19 = (float32x4_t)vdupq_n_s32(0x395E8083u);
    v20 = (float32x4_t)vdupq_n_s32(0x39506967u);
    v21 = (float32x4_t)vdupq_n_s32(0x3AB743CEu);
    v22 = (float32x4_t)vdupq_n_s32(0x3C088908u);
    v23 = (float32x4_t)vdupq_n_s32(0x3D2AA9C1u);
    v24 = (float32x4_t)vdupq_n_s32(0x3E2AAAAAu);
    v25 = v6;
    v26 = a2;
    v27 = a3;
    do
    {
      v28 = *v26++;
      v29 = vmaxq_f32(vminq_f32(vmulq_f32(v7, vnegq_f32(v28)), v8), v9);
      v30.i64[0] = 0x3F0000003F000000;
      v30.i64[1] = 0x3F0000003F000000;
      v31 = vmlaq_f32(v30, v11, v29);
      v32 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
      v33 = vsubq_f32(v32, (float32x4_t)vandq_s8((int8x16_t)_Q6, (int8x16_t)vcgtq_f32(v32, v31)));
      v34 = vaddq_f32(vmulq_f32(v33, v19), vaddq_f32(v29, vmulq_f32(v33, v18)));
      *v27 = vmulq_f32(*v27, vsubq_f32(vdivq_f32(v7, vaddq_f32(v10, vmulq_f32(vaddq_f32(vaddq_f32(v34, vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(vmulq_f32(v34, vaddq_f32(vmulq_f32(v34, vaddq_f32(
                                       vmulq_f32(v34, vaddq_f32(vmulq_f32(v34, vaddq_f32(vmulq_f32(v34, v20), v21)), v22)), v23)), v24)), v12))), _Q6), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v33), 0x17uLL), (int32x4_t)_Q6)))), v10));
      ++v27;
      --v25;
    }
    while (v25);
  }
  if (a1 > 4 * (int)v6)
  {
    f32 = a2[v6].f32;
    v36 = a3[v6].f32;
    v37 = a1 - 4 * v6;
    do
    {
      v38 = *v36;
      v39 = *f32++;
      *v36++ = v38 * tanhf(v39);
      --v37;
    }
    while (v37);
  }
}

void sub_20B810EE0(int a1, float32x4_t *a2)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float *f32;
  uint64_t v31;
  int v32;
  float32x4_t *v33;
  int v34;
  int v35;

  v2 = atomic_load((unsigned __int8 *)&qword_25472ADF0);
  if ((v2 & 1) == 0)
  {
    v32 = a1;
    v33 = a2;
    v34 = __cxa_guard_acquire(&qword_25472ADF0);
    a2 = v33;
    v35 = v34;
    a1 = v32;
    if (v35)
    {
      __asm { FMOV            V0.4S, #1.0 }
      xmmword_25472ADE0 = _Q0;
      __cxa_guard_release(&qword_25472ADF0);
      a1 = v32;
      a2 = v33;
    }
  }
  v3 = a1 + 3;
  if (a1 >= 0)
    v3 = a1;
  if (a1 < 4)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v4 = (v3 >> 2);
    v5 = (float32x4_t)xmmword_25472ADE0;
    v6 = (float32x4_t)vdupq_n_s32(0x42B0C0A5u);
    v7 = (float32x4_t)vdupq_n_s32(0xC2B0C0A5);
    v8 = (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu);
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    v10 = (float32x4_t)vdupq_n_s32(0xBF318000);
    v11 = (float32x4_t)vdupq_n_s32(0x395E8083u);
    v12 = (float32x4_t)vdupq_n_s32(0x39506967u);
    v13 = (float32x4_t)vdupq_n_s32(0x3AB743CEu);
    v14 = (float32x4_t)vdupq_n_s32(0x3C088908u);
    v15 = (float32x4_t)vdupq_n_s32(0x3D2AA9C1u);
    __asm { FMOV            V19.4S, #1.0 }
    v21 = (float32x4_t)vdupq_n_s32(0x3E2AAAAAu);
    v22 = v4;
    v23 = a2;
    do
    {
      v24 = vmaxq_f32(vminq_f32(vnegq_f32(*v23), v6), v7);
      v25.i64[0] = 0x3F0000003F000000;
      v25.i64[1] = 0x3F0000003F000000;
      v26 = vmlaq_f32(v25, v8, v24);
      v27 = vcvtq_f32_s32(vcvtq_s32_f32(v26));
      v28 = vsubq_f32(v27, (float32x4_t)vandq_s8((int8x16_t)_Q19, (int8x16_t)vcgtq_f32(v27, v26)));
      v29 = vaddq_f32(vmulq_f32(v28, v11), vaddq_f32(v24, vmulq_f32(v28, v10)));
      *v23++ = vdivq_f32(v5, vaddq_f32(v5, vmulq_f32(vaddq_f32(vaddq_f32(v29, vmulq_f32(vmulq_f32(v29, v29), vaddq_f32(vmulq_f32(v29, vaddq_f32(vmulq_f32(v29, vaddq_f32(vmulq_f32(v29, vaddq_f32(vmulq_f32(v29, vaddq_f32(vmulq_f32(v29, v12), v13)), v14)), v15)), v21)),
                             v9))),
                       _Q19),
                     (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v28), 0x17uLL), (int32x4_t)_Q19))));
      --v22;
    }
    while (v22);
  }
  if (a1 > 4 * (int)v4)
  {
    f32 = a2[v4].f32;
    v31 = a1 - 4 * v4;
    do
    {
      *f32 = 1.0 / (float)(expf(-*f32) + 1.0);
      ++f32;
      --v31;
    }
    while (v31);
  }
}

uint64_t sub_20B8110DC()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_20B811154()
{
  return cblas_sgemm_NEWLAPACK();
}

uint64_t sub_20B8111CC(uint64_t result, int a2, float32x4_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t v60;
  _OWORD v61[2];

  if ((int)result >= 1)
  {
    v4 = 0;
    v5 = (a2 / 4);
    v59 = 4 * a2;
    v6 = (float32x4_t)vdupq_n_s32(0x42B0C0A5u);
    v7 = (float32x4_t)vdupq_n_s32(0xC2B0C0A5);
    v8 = (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu);
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    v10 = result;
    __asm { FMOV            V18.4S, #1.0 }
    v16 = (float32x4_t)vdupq_n_s32(0xBF318000);
    v17 = a2;
    v18 = (float32x4_t)vdupq_n_s32(0x395E8083u);
    v19 = (float32x4_t)vdupq_n_s32(0x39506967u);
    v20 = (float32x4_t)vdupq_n_s32(0x3AB743CEu);
    v21 = (float32x4_t)vdupq_n_s32(0x3C088908u);
    v22 = (float32x4_t)vdupq_n_s32(0x3D2AA9C1u);
    v23 = (float32x4_t)vdupq_n_s32(0x3E2AAAAAu);
    v57 = v7;
    v58 = v6;
    v55 = _Q18;
    v56 = v8;
    v53 = v18;
    v54 = v16;
    v51 = v20;
    v52 = v19;
    v49 = v22;
    v50 = v21;
    v48 = v23;
    do
    {
      if (a2 < 4)
      {
        v29 = 0;
        v25.i64[0] = 0x80000000800000;
        v25.i64[1] = 0x80000000800000;
      }
      else
      {
        v25.i64[0] = 0x80000000800000;
        v25.i64[1] = 0x80000000800000;
        v26 = v5;
        v27 = a3;
        do
        {
          v28 = *v27++;
          v25 = vmaxq_f32(v28, v25);
          --v26;
        }
        while (v26);
        v29 = v5;
      }
      v30 = 0;
      v61[0] = v25;
      v31 = -3.4028e38;
      do
      {
        if (*(float *)((char *)v61 + v30) >= v31)
          v31 = *(float *)((char *)v61 + v30);
        v30 += 4;
      }
      while (v30 != 16);
      LODWORD(v32) = 4 * v29;
      if ((int)v32 < a2)
      {
        v32 = (int)v32;
        do
        {
          if (a3->f32[v32] >= v31)
            v31 = a3->f32[v32];
          ++v32;
        }
        while (a2 != v32);
      }
      if (a2 < 4)
      {
        v43 = 0;
        v35 = 0uLL;
      }
      else
      {
        v33 = 0;
        v25.f32[0] = -v31;
        v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
        v35 = 0uLL;
        do
        {
          v36 = vmaxq_f32(vminq_f32(vaddq_f32(v34, a3[v33]), v6), v7);
          v37.i64[0] = 0x3F0000003F000000;
          v37.i64[1] = 0x3F0000003F000000;
          v38 = vmlaq_f32(v37, v8, v36);
          v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)_Q18, (int8x16_t)vcgtq_f32(v39, v38)));
          v41 = vaddq_f32(vmulq_f32(v40, v18), vaddq_f32(v36, vmulq_f32(v40, v16)));
          v42 = vmulq_f32(vaddq_f32(vaddq_f32(v41, vmulq_f32(vmulq_f32(v41, v41), vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, vaddq_f32(vmulq_f32(v41, v19), v20)), v21)), v22)), v23)), v9))), _Q18), (float32x4_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v40), 0x17uLL), (int32x4_t)_Q18));
          a3[v33] = v42;
          v35 = vaddq_f32(v35, v42);
          ++v33;
        }
        while (v5 != v33);
        v43 = v5;
      }
      v44 = 0;
      v60 = v35;
      v45 = 0.0;
      do
        v45 = v45 + v60.f32[v44++];
      while (v44 != 4);
      if (a2 > (int)(4 * v43))
      {
        v46 = 4 * v43;
        do
        {
          v47 = expf(a3->f32[v46] - v31);
          a3->f32[v46] = v47;
          v45 = v45 + v47;
          ++v46;
        }
        while (v17 != v46);
      }
      result = cblas_sscal_NEWLAPACK();
      ++v4;
      a3 = (float32x4_t *)((char *)a3 + v59);
      v7 = v57;
      v6 = v58;
      _Q18 = v55;
      v8 = v56;
      v9.i64[0] = 0x3F0000003F000000;
      v9.i64[1] = 0x3F0000003F000000;
      v18 = v53;
      v16 = v54;
      v20 = v51;
      v19 = v52;
      v22 = v49;
      v21 = v50;
      v23 = v48;
    }
    while (v4 != v10);
  }
  return result;
}

uint64_t sub_20B8114DC(uint64_t result, int a2, float *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;

  if ((int)result >= 1)
  {
    v4 = 0;
    v5 = result;
    v6 = 4 * a2;
    v8 = a2;
    do
    {
      if (a2 >= 1)
      {
        v9 = v8;
        v10 = a3;
        v11 = 0.000001;
        do
        {
          v12 = *v10++;
          v11 = v11 + v12;
          --v9;
        }
        while (v9);
      }
      result = cblas_sscal_NEWLAPACK();
      ++v4;
      a3 = (float *)((char *)a3 + v6);
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_20B81159C(unsigned int a1, float *a2)
{
  float *v2;
  float *v3;
  float v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;

  v2 = a2;
  if (a1 >= 2)
  {
    v3 = a2 + 1;
    v4 = *a2;
    v5 = 4 * (int)a1 - 4;
    v2 = a2;
    v6 = a2 + 1;
    do
    {
      v7 = *v6++;
      v8 = v7;
      if (v4 < v7)
      {
        v4 = v8;
        v2 = v3;
      }
      v3 = v6;
      v5 -= 4;
    }
    while (v5);
  }
  return v2 - a2;
}

uint64_t sub_20B8115F0(uint64_t a1, int a2)
{
  uint64_t v2;

  switch((int)a1)
  {
    case 0:
      v2 = operator new();
      sub_20B81173C(v2, a1 & 0xFFFFFFFF00000000, a2);
      break;
    case 1:
      v2 = operator new();
      sub_20B82277C(v2, a1 & 0xFFFFFFFF00000000 | 1, a2);
      break;
    case 2:
      v2 = operator new();
      sub_20B820738(v2, a1 & 0xFFFFFFFF00000000 | 2, a2);
      break;
    case 3:
      v2 = operator new();
      sub_20B81173C(v2, a1 & 0xFFFFFFFF00000000 | 3, a2);
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_20B81170C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C407D0D3C16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B81173C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_24C467688;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = -1;
  sub_20B811A98((_QWORD *)(a1 + 40), v4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_20B8117C8(uint64_t a1)
{
  sub_20B811C60(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8117EC(uint64_t a1, const char *a2)
{
  char v3;
  unsigned __int8 **v4;

  v3 = sub_20B81203C(*(_QWORD *)(a1 + 40), a2);
  v4 = *(unsigned __int8 ***)(a1 + 40);
  if ((v3 & 1) != 0)
    return sub_20B8120D0(a1, *v4);
  sub_20B811BD0((uint64_t)v4);
  return 0;
}

void sub_20B811838(uint64_t a1, int a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a1 + 144);
  if (v2)
    sub_20B812968(v2, a2);
}

void sub_20B811848(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    sub_20B812D14(a1, ((*a2)[1] - **a2) >> 2);
    v6 = *(_QWORD *)(a1 + 144);
  }
  sub_20B812F3C(a1, a2, *(_QWORD *)(v6 + 8), a3);
}

void sub_20B8118AC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;

  v7 = sub_20B811A48(a1, a2, a3);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (v7)
  {
    sub_20B820518((void **)a4, (uint64_t)(a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      v8 = 0;
      do
      {
        v9 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 40))(a3, v8);
        if (v10)
          v11 = sub_20B81159C(v10, v9);
        else
          v11 = 0;
        v13 = *(_DWORD **)(a4 + 8);
        v12 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v13 >= v12)
        {
          v15 = *(_DWORD **)a4;
          v16 = ((uint64_t)v13 - *(_QWORD *)a4) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            sub_20B80CDD8();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_20B8127BC(a4 + 16, v19);
            v15 = *(_DWORD **)a4;
            v13 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = v11;
          v14 = v21 + 4;
          while (v13 != v15)
          {
            v22 = *--v13;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(_QWORD *)a4 = v21;
          *(_QWORD *)(a4 + 8) = v14;
          *(_QWORD *)(a4 + 16) = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v13 = v11;
          v14 = v13 + 1;
        }
        *(_QWORD *)(a4 + 8) = v14;
        ++v8;
      }
      while (v8 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
}

void sub_20B811A20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B811A48(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  float *v6;
  int v7;

  if (a3)
    v3 = a2[1] == *a2;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    sub_20B814348(a1, (uint64_t)a2, a3, (uint64_t)&v6);
    sub_20B810BF8(v7, v6);
  }
  return v4;
}

_QWORD *sub_20B811A98(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C46BE88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20B811AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_20B811B84((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20B811B18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B811B3C(uint64_t a1)
{
  sub_20B811B84(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20B811B44(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E670))
    return a1 + 24;
  else
    return 0;
}

void sub_20B811B84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B811BD0(a2);
    JUMPOUT(0x20BD39CB0);
  }
}

uint64_t sub_20B811BD0(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 16) = -1;
  }
  if (*(_QWORD *)a1)
    munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
  return 1;
}

BOOL sub_20B811C14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_20B811C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_20B811D74((unsigned __int8 **)(a1 + 144), 0);
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    MEMORY[0x20BD39CB0](v2, 0x1050C40A1200FABLL);
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    MEMORY[0x20BD39CB0](v3, 0x1050C403E01F869);
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0x1050C4004BAC841);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v5)
    MEMORY[0x20BD39CB0](v5, 0x10C0C40AE133BEFLL);
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
    MEMORY[0x20BD39CB0](v6, 0x10C0C404270A891);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v7)
    MEMORY[0x20BD39CB0](v7, 0x10C0C404270A891);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v8)
    MEMORY[0x20BD39CB0](v8, 0x10C0C40F6595248);
  sub_20B811FE4(a1 + 40);
  return a1;
}

unsigned __int8 *sub_20B811D74(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B811DB0(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

unsigned __int8 *sub_20B811DB0(unsigned __int8 *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if (v3)
    {
      v4 = sub_20B80EF50(v3);
      v5 = 0x10B1C40EE74E478;
LABEL_6:
      MEMORY[0x20BD39CB0](v4, v5);
    }
  }
  else if (v3)
  {
    v4 = sub_20B811E18(v3);
    v5 = 0x10A1C4035FF2A5ELL;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_20B811E18(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  sub_20B811E64((_QWORD **)(a1 + 16), 0);
  sub_20B811F24((_QWORD **)(a1 + 8), 0);
  return a1;
}

_QWORD *sub_20B811E64(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B811EA0(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

_QWORD *sub_20B811EA0(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1 + 31;
  v2 = (void *)a1[31];
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v4 = (void *)a1[21];
  if (v4)
    free(v4);
  a1[21] = 0;
  a1[22] = 0;
  v5 = (void *)a1[14];
  if (v5)
    free(v5);
  a1[14] = 0;
  a1[15] = 0;
  v6 = (void *)a1[8];
  if (v6)
    free(v6);
  a1[8] = 0;
  a1[9] = 0;
  v7 = (void *)a1[2];
  if (v7)
    free(v7);
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

_QWORD *sub_20B811F24(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B811F60(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

_QWORD *sub_20B811F60(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1 + 22;
  v2 = (void *)a1[22];
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v4 = (void *)a1[20];
  if (v4)
    free(v4);
  a1[20] = 0;
  a1[21] = 0;
  v5 = (void *)a1[14];
  if (v5)
    free(v5);
  a1[14] = 0;
  a1[15] = 0;
  v6 = (void *)a1[8];
  if (v6)
    free(v6);
  a1[8] = 0;
  a1[9] = 0;
  v7 = (void *)a1[2];
  if (v7)
    free(v7);
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

uint64_t sub_20B811FE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_20B81203C(uint64_t a1, const char *a2)
{
  int v4;
  off_t st_size;
  void *v6;
  stat v8;

  sub_20B811BD0(a1);
  v4 = open(a2, 0);
  *(_DWORD *)(a1 + 16) = v4;
  if (v4 < 0)
    return 0;
  if (fstat(v4, &v8) < 0)
    return 0;
  st_size = v8.st_size;
  v6 = mmap(0, v8.st_size, 1, 1, *(_DWORD *)(a1 + 16), 0);
  if (v6 == (void *)-1)
    return 0;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = st_size;
  close(*(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 16) = -1;
  return 1;
}

uint64_t sub_20B8120D0(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void **v11;
  uint64_t v12;
  void **v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  __int128 v73;
  int v74;
  int v75;
  int v76;
  __int128 v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  void *v81[3];
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *(_DWORD *)(a1 + 20) = v4 & 1;
  *(_DWORD *)(a1 + 24) = (v4 >> 2) & 1;
  *(_BYTE *)(a1 + 28) = (v4 & 2) != 0;
  *(_BYTE *)(a1 + 30) = v6;
  *(_BYTE *)(a1 + 29) = v6 != 0;
  if (v5)
    v7 = v5;
  else
    v7 = 5;
  sub_20B812708(v81, v7);
  v8 = 0;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  do
  {
    *(_WORD *)((char *)v81[0] + v8) = *(_WORD *)&a2[v8 + 4];
    *(_WORD *)((char *)v81[0] + v8 + 2) = *(_WORD *)&a2[v8 + 6];
    v8 += 4;
  }
  while (4 * v9 != v8);
  if (*(_BYTE *)(a1 + 28))
  {
    for (i = 0; i != 16; i += 2)
    {
      v11 = &__p[i];
      *(_DWORD *)v11 = 0;
      v11[1] = 0;
    }
    v12 = 0;
    v13 = &__p[1];
    do
    {
      v14 = &a2[v12 + v8];
      *((_DWORD *)v13 - 2) = *((_DWORD *)v14 + 1);
      *v13 = (void *)*((_QWORD *)v14 + 1);
      v13 += 2;
      v12 += 12;
    }
    while (v12 != 96);
    v15 = *(unsigned __int16 *)v81[0];
    v16 = *((unsigned __int16 *)v81[0] + 1);
    v17 = operator new();
    *(_QWORD *)v17 = &a2[v8 + 100];
    *(_QWORD *)(v17 + 8) = v16 * (unint64_t)v15;
    v72 = v16 * (unint64_t)v15;
    *(_DWORD *)(v17 + 16) = v15;
    *(_DWORD *)(v17 + 20) = v16;
    *(_DWORD *)(v17 + 24) = 2;
    *(_DWORD *)(v17 + 32) = v15 | (v16 << 16);
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v17;
    if (v18)
      MEMORY[0x20BD39CB0](v18, 0x1050C4004BAC841);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)__p;
    v19 = *((unsigned __int16 *)v81[0] + 2);
    v20 = *((unsigned __int16 *)v81[0] + 3);
    v70 = *((unsigned __int16 *)v81[0] + 5);
    v71 = *((unsigned __int16 *)v81[0] + 4);
    v21 = operator new();
    v22 = (unint64_t)&a2[v8 + 100 + v16 * (unint64_t)v15];
    v23 = v20 * (unint64_t)v19;
    *(_QWORD *)v21 = v22;
    *(_QWORD *)(v21 + 8) = v23;
    *(_DWORD *)(v21 + 16) = v19;
    *(_DWORD *)(v21 + 20) = v20;
    *(_DWORD *)(v21 + 24) = 2;
    v24 = v72 + v23 + 96;
    v25 = v70 * (unint64_t)v71;
    *(_QWORD *)(v21 + 32) = &a2[v8 + 4 + v24];
    *(_QWORD *)(v21 + 40) = v25;
    *(_DWORD *)(v21 + 48) = v71;
    *(_DWORD *)(v21 + 52) = v70;
    *(_DWORD *)(v21 + 56) = 2;
    v26 = v85;
    v27 = v83;
    *(_OWORD *)(v21 + 64) = v84;
    *(_OWORD *)(v21 + 80) = v26;
    *(_OWORD *)(v21 + 96) = v27;
    *(_OWORD *)(v21 + 112) = xmmword_20BA361F0;
    *(_QWORD *)(v21 + 128) = sub_20B810360((unsigned int *)&v84, (uint64_t)&v85);
    *(_QWORD *)(v21 + 136) = v28;
    v29 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v21;
    if (v29)
    {
      MEMORY[0x20BD39CB0](v29, 0x1050C403E01F869);
      v21 = *(_QWORD *)(a1 + 96);
    }
    v30 = *((unsigned __int16 *)v81[0] + 6);
    v31 = *((unsigned __int16 *)v81[0] + 7);
    v32 = *((unsigned __int16 *)v81[0] + 7) * (unint64_t)*((unsigned __int16 *)v81[0] + 6);
    *(_QWORD *)&v77 = &a2[4 * v25 + 4 + v8 + v24];
    *((_QWORD *)&v77 + 1) = v32;
    v78 = v30;
    v79 = v31;
    v80 = 2;
    v33 = (unint64_t)&a2[4 * v25 + 100 + v8 + v72 + v23 + v31 * (unint64_t)v30];
    v34 = *((unsigned __int16 *)v81[0] + 8);
    v35 = *((unsigned __int16 *)v81[0] + 9);
    v36 = *((unsigned __int16 *)v81[0] + 9) * (unint64_t)*((unsigned __int16 *)v81[0] + 8);
    *(_QWORD *)&v73 = v33;
    *((_QWORD *)&v73 + 1) = v36;
    v74 = v34;
    v75 = v35;
    v76 = 2;
    v37 = operator new();
    v38 = sub_20B8127F0(v37, &v77, &v73, &v86, &v87, (_OWORD *)(v21 + 112), v88);
    v39 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v38;
    if (v39)
      MEMORY[0x20BD39CB0](v39, 0x1050C40A1200FABLL);
    *(_OWORD *)(a1 + 128) = v88[1];
  }
  else
  {
    sub_20B8128B4(__p, v7);
    v40 = 0;
    v41 = (uint64_t)&a2[v8 + 4];
    v42 = 2;
    do
    {
      *(_QWORD *)((char *)__p[0] + v40) = v41;
      v41 += 4
           * *(unsigned __int16 *)((char *)v81[0] + v42 - 2)
           * (unint64_t)*(unsigned __int16 *)((char *)v81[0] + v42);
      v40 += 8;
      v42 += 4;
    }
    while (8 * v9 != v40);
    v43 = *(_QWORD *)__p[0];
    v44 = *(unsigned __int16 *)v81[0];
    v45 = *((unsigned __int16 *)v81[0] + 1);
    v46 = operator new();
    *(_QWORD *)v46 = v43;
    *(_QWORD *)(v46 + 8) = v45 * (unint64_t)v44;
    *(_DWORD *)(v46 + 16) = v44;
    *(_DWORD *)(v46 + 20) = v45;
    *(_DWORD *)(v46 + 24) = 2;
    *(_DWORD *)(v46 + 32) = v44 | (v45 << 16);
    v47 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v46;
    if (v47)
      MEMORY[0x20BD39CB0](v47, 0x10C0C40F6595248);
    v48 = *((unsigned __int16 *)v81[0] + 2);
    v49 = *((unsigned __int16 *)v81[0] + 3);
    v51 = *((_QWORD *)__p[0] + 1);
    v50 = *((_QWORD *)__p[0] + 2);
    v52 = *((unsigned __int16 *)v81[0] + 4);
    v53 = *((unsigned __int16 *)v81[0] + 5);
    v54 = operator new();
    *(_QWORD *)v54 = v51;
    *(_QWORD *)(v54 + 8) = v49 * (unint64_t)v48;
    *(_DWORD *)(v54 + 16) = v48;
    *(_DWORD *)(v54 + 20) = v49;
    *(_DWORD *)(v54 + 24) = 2;
    *(_QWORD *)(v54 + 32) = v50;
    *(_QWORD *)(v54 + 40) = v53 * (unint64_t)v52;
    *(_DWORD *)(v54 + 48) = v52;
    *(_DWORD *)(v54 + 52) = v53;
    *(_DWORD *)(v54 + 56) = 2;
    v55 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v54;
    if (v55)
      MEMORY[0x20BD39CB0](v55, 0x10C0C404270A891);
    v56 = *((unsigned __int16 *)v81[0] + 6);
    v57 = *((unsigned __int16 *)v81[0] + 7);
    v59 = *((_QWORD *)__p[0] + 3);
    v58 = *((_QWORD *)__p[0] + 4);
    v60 = *((unsigned __int16 *)v81[0] + 8);
    v61 = *((unsigned __int16 *)v81[0] + 9);
    v62 = operator new();
    *(_QWORD *)v62 = v59;
    *(_QWORD *)(v62 + 8) = v57 * (unint64_t)v56;
    *(_DWORD *)(v62 + 16) = v56;
    *(_DWORD *)(v62 + 20) = v57;
    *(_DWORD *)(v62 + 24) = 2;
    *(_QWORD *)(v62 + 32) = v58;
    *(_QWORD *)(v62 + 40) = v61 * (unint64_t)v60;
    *(_DWORD *)(v62 + 48) = v60;
    *(_DWORD *)(v62 + 52) = v61;
    *(_DWORD *)(v62 + 56) = 2;
    v63 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v62;
    if (v63)
      MEMORY[0x20BD39CB0](v63, 0x10C0C404270A891);
    if (*(_BYTE *)(a1 + 29))
    {
      v64 = *((_QWORD *)__p[0] + 5);
      v65 = *((unsigned __int16 *)v81[0] + 10);
      v66 = *((unsigned __int16 *)v81[0] + 11);
      v67 = operator new();
      *(_BYTE *)v67 = v6;
      *(_QWORD *)(v67 + 8) = v64;
      *(_QWORD *)(v67 + 16) = v66 * (unint64_t)v65;
      *(_DWORD *)(v67 + 24) = v65;
      *(_DWORD *)(v67 + 28) = v66;
      *(_DWORD *)(v67 + 32) = 2;
      v68 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v67;
      if (v68)
        MEMORY[0x20BD39CB0](v68, 0x10C0C40AE133BEFLL);
    }
    *(_DWORD *)(a1 + 32) = *((unsigned __int16 *)v81[0] + 7);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  return 1;
}

void sub_20B812694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B812708(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B81277C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20B812760(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B81277C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_20B80CDD8();
  result = (char *)sub_20B8127BC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_20B8127BC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_20B800BC0();
  return operator new(4 * a2);
}

uint64_t sub_20B8127F0(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7)
{
  __int128 v11;
  __int128 v12;
  double v13;
  uint64_t v14;
  int v15;
  int v16;
  int __e[2];

  v11 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = a3[1];
  *(_OWORD *)(a1 + 32) = *a3;
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = *a4;
  *(_OWORD *)(a1 + 80) = *a5;
  *(_OWORD *)(a1 + 96) = *a6;
  *(_OWORD *)(a1 + 112) = *a7;
  v13 = sub_20B810348((uint64_t)a4, (uint64_t)a6, (uint64_t)a7);
  *(_QWORD *)__e = 0;
  sub_20B824948(&__e[1], __e, v13);
  v14 = sub_20B810340();
  v15 = -*(_DWORD *)a4;
  *(_DWORD *)(a1 + 128) = -*(_DWORD *)a6;
  *(_DWORD *)(a1 + 132) = v15;
  v16 = __e[1];
  *(_DWORD *)(a1 + 136) = *(_DWORD *)a7;
  *(_DWORD *)(a1 + 140) = v16;
  *(_DWORD *)(a1 + 144) = __e[0];
  *(_QWORD *)(a1 + 148) = v14;
  return a1;
}

_QWORD *sub_20B8128B4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B812928(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20B81290C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B812928(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_20B80CDD8();
  result = (char *)sub_20B800BE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_20B812968(unsigned __int8 *a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  if (v2)
    sub_20B80F0C4(v3, a2);
  else
    sub_20B81297C(v3, a2);
}

void sub_20B81297C(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;

  sub_20B812A00(*(int **)(a1 + 8), a2);
  if (*(_DWORD *)(a1 + 64) < a2)
  {
    v4 = *(_DWORD *)(a1 + 68);
    sub_20B80FB88(a1 + 32, v4 * a2);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = v4 * (uint64_t)a2;
    *(_DWORD *)(a1 + 64) = a2;
    *(_DWORD *)(a1 + 68) = v4;
    *(_DWORD *)(a1 + 72) = 2;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    sub_20B812B40(v5, a2);
}

void sub_20B812A00(int *a1, int a2)
{
  int v4;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  a1[3] = a2;
  v4 = *a1;
  v5 = *a1;
  if (a1[2] != 1)
    v5 = a1[1] + v4;
  v6 = 4 * v4;
  sub_20B80FB88((uint64_t)(a1 + 4), v5 * a2);
  v7 = (void *)*((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v7;
  *((_QWORD *)a1 + 5) = v5 * (uint64_t)a2;
  a1[12] = v5;
  a1[13] = a2;
  a1[14] = 2;
  if (v8 >= 1)
    bzero(v7, 4 * (v8 - ((v8 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  v9 = *a1;
  sub_20B80FB88((uint64_t)(a1 + 16), *a1 * a2);
  v10 = (void *)*((_QWORD *)a1 + 8);
  v11 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 10) = v10;
  *((_QWORD *)a1 + 11) = v9 * (uint64_t)a2;
  a1[24] = v9;
  a1[25] = a2;
  a1[26] = 2;
  if (v11 >= 1)
    bzero(v10, 4 * (v11 - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  sub_20B80FB88((uint64_t)(a1 + 28), v6 * a2);
  v12 = (void *)*((_QWORD *)a1 + 14);
  v13 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 16) = v12;
  *((_QWORD *)a1 + 17) = a2 * (uint64_t)v6;
  a1[36] = v6;
  a1[37] = a2;
  a1[38] = 2;
  if (v13 >= 1)
    bzero(v12, 4 * (v13 - ((v13 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
}

void sub_20B812B40(uint64_t a1, int a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;

  *(_DWORD *)a1 = a2;
  v4 = *(_DWORD *)(a1 + 8) * *(unsigned __int8 *)(a1 + 4);
  sub_20B80FB88(a1 + 64, v4 * a2);
  v5 = *(void **)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v4 * (uint64_t)a2;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = v4;
  *(_DWORD *)(a1 + 104) = 2;
  if (v6 >= 1)
    bzero(v5, 4 * (v6 - ((v6 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  v7 = 2 * *(_DWORD *)(a1 + 8);
  sub_20B80FB88(a1 + 112, v7 * a2);
  v8 = *(void **)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = a2 * (uint64_t)v7;
  *(_DWORD *)(a1 + 144) = a2;
  *(_DWORD *)(a1 + 148) = v7;
  *(_DWORD *)(a1 + 152) = 2;
  if (v9 >= 1)
    bzero(v8, 4 * (v9 - ((v9 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  v10 = *(unsigned __int8 *)(a1 + 4);
  sub_20B80FB88(a1 + 168, *(unsigned __int8 *)(a1 + 4) * (uint64_t)a2);
  v11 = *(void **)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 184) = v11;
  *(_QWORD *)(a1 + 192) = v10 * (uint64_t)a2;
  *(_DWORD *)(a1 + 200) = a2;
  *(_DWORD *)(a1 + 204) = v10;
  *(_DWORD *)(a1 + 208) = 2;
  if (v12 >= 1)
    bzero(v11, 4 * (v12 - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  v13 = *(_DWORD *)(a1 + 8);
  sub_20B80FB88(a1 + 16, v13 * a2);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = v13 * (uint64_t)a2;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = v13;
  *(_DWORD *)(a1 + 56) = 2;
  v14 = *(_QWORD *)(a1 + 176);
  if (v14 >= 1)
    bzero(*(void **)(a1 + 168), 4 * (v14 - ((v14 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 296) = 1;
  v15 = *(unsigned __int8 *)(a1 + 4);
  sub_20B80FB88(a1 + 248, v15);
  v16 = *(void **)(a1 + 248);
  v17 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) = v16;
  *(_QWORD *)(a1 + 272) = v15;
  *(_DWORD *)(a1 + 280) = 1;
  *(_DWORD *)(a1 + 284) = v15;
  *(_DWORD *)(a1 + 288) = 2;
  if (v17 >= 1)
    bzero(v16, 4 * (v17 - ((v17 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
}

_QWORD *sub_20B812D14(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = a1 + 144;
  sub_20B811D74((unsigned __int8 **)(a1 + 144), (unsigned __int8 *)v4);
  v6 = *(unsigned __int8 *)(a1 + 28);
  **(_BYTE **)(a1 + 144) = v6;
  if (v6)
  {
    sub_20B812F50(*(_QWORD *)(a1 + 96), a2, (uint64_t *)&v19);
    if (*(_DWORD *)(a1 + 20) == 1)
    {
      v7 = 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 28))
        v9 = *(_QWORD *)(a1 + 88);
      else
        v9 = *(_QWORD *)(a1 + 56);
      v7 = *(unsigned __int16 *)(v9 + 32);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B80EF78((uint64_t)&v19, v7);
    result = v19;
    v19 = 0;
    if (result)
    {
      v12 = sub_20B80FAA0(result);
      v13 = 0x1010C401DB35655;
      return (_QWORD *)MEMORY[0x20BD39CB0](v12, v13);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B8130D4(*(_QWORD *)(a1 + 64), a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v19);
      sub_20B813174(*(_QWORD *)(a1 + 80), a2, (uint64_t *)&v18);
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        v8 = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 28))
          v14 = *(_QWORD *)(a1 + 88);
        else
          v14 = *(_QWORD *)(a1 + 56);
        v8 = *(unsigned __int16 *)(v14 + 32);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B812FE0((uint64_t)&v19, &v18, v8);
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        v17 = sub_20B811EA0(v16);
        MEMORY[0x20BD39CB0](v17, 0x10C0C401F533AC0);
      }
    }
    else
    {
      sub_20B8130D4(*(_QWORD *)(a1 + 64), a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v19);
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        v10 = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 28))
          v15 = *(_QWORD *)(a1 + 88);
        else
          v15 = *(_QWORD *)(a1 + 56);
        v10 = *(unsigned __int16 *)(v15 + 32);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B813204((uint64_t)&v19, v10);
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      v12 = sub_20B811F60(result);
      v13 = 0x1080C404FD05E4CLL;
      return (_QWORD *)MEMORY[0x20BD39CB0](v12, v13);
    }
  }
  return result;
}

void sub_20B812EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811F24((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B812F3C(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 1)
    sub_20B8141F4(a1, a2, (uint64_t *)a3, a4);
  else
    sub_20B814028(a1, a2, a3, a4);
}

uint64_t sub_20B812F50@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_DWORD *)(a1 + 16) >> 2;
  v6 = *(_DWORD *)(a1 + 20) - v5;
  v7 = operator new();
  result = sub_20B8132E4(v7, v5, v6, a2);
  *a3 = v7;
  return result;
}

void sub_20B812FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1010C401DB35655);
  _Unwind_Resume(a1);
}

uint64_t sub_20B812FE0(uint64_t a1, _QWORD **a2, int a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24C467790;
  *(_QWORD *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 60) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 16) = 0;
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  sub_20B80FB88(v6 + 32, v7 * a3);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 56) = a3 * (uint64_t)v7;
  *(_DWORD *)(v6 + 64) = v7;
  *(_DWORD *)(v6 + 68) = a3;
  *(_DWORD *)(v6 + 72) = 2;
  v8 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  sub_20B811F24((_QWORD **)(v6 + 8), v8);
  v9 = *a2;
  *a2 = 0;
  sub_20B811E64((_QWORD **)(v6 + 16), v9);
  return v6;
}

void sub_20B8130BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B813D70((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8130D4@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v7 = *(_DWORD *)(a1 + 16);
  v8 = v7 >> 2;
  if (!a3)
    v7 = *(_DWORD *)(a1 + 20) - v8;
  v9 = operator new();
  result = sub_20B813DAC(v9, v8, v7, a2, a3);
  *a4 = v9;
  return result;
}

void sub_20B813150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1080C404FD05E4CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B813174@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 28) >> 1;
  v7 = operator new();
  result = sub_20B813F2C(v7, a2, *(_BYTE *)a1, v6);
  *a3 = v7;
  return result;
}

void sub_20B8131E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10C0C401F533AC0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B813204(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24C467790;
  *(_QWORD *)(v4 + 8) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 60) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  sub_20B80FB88(v4 + 32, v5 * a2);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 56) = a2 * (uint64_t)v5;
  *(_DWORD *)(v4 + 64) = v5;
  *(_DWORD *)(v4 + 68) = a2;
  *(_DWORD *)(v4 + 72) = 2;
  v6 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  sub_20B811F24((_QWORD **)(v4 + 8), v6);
  return v4;
}

void sub_20B8132CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B813D70((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8132E4(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  sub_20B80F168((int *)a1, a4);
  return a1;
}

void sub_20B813398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)v7)
    free(*(void **)v7);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  if (*(_QWORD *)v6)
    free(*(void **)v6);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  if (*(_QWORD *)v5)
    free(*(void **)v5);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  if (*(_QWORD *)v4)
    free(*(void **)v4);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  if (*(_QWORD *)v3)
    free(*(void **)v3);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if (*(_QWORD *)v2)
    free(*(void **)v2);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (*(_QWORD *)v1)
    free(*(void **)v1);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20B813414(uint64_t a1)
{
  sub_20B811E18(a1);
  JUMPOUT(0x20BD39CB0);
}

unsigned int *sub_20B813438(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  BOOL v3;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  size_t v21;
  unsigned int *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  __n128 __p;
  void *v33;
  _BYTE *v34;
  void *__dst[3];

  v1 = *(unsigned int **)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    v31 = v1[3];
    if ((_DWORD)v31)
      v3 = (_DWORD)v2 == 0;
    else
      v3 = 1;
    if (v3)
    {
      return 0;
    }
    else
    {
      if (v1[2] == 1)
      {
        v5 = (const void *)*((_QWORD *)v1 + 4);
        v6 = *((_QWORD *)v1 + 5);
      }
      else
      {
        v7 = v1[1];
        v8 = v1[13];
        v5 = (const void *)(*((_QWORD *)v1 + 4) + 4 * v8 * (unint64_t)v7);
        v6 = ((v7 + v2) - v7) * v8;
      }
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
      {
        v10 = *(unsigned __int8 *)(v9 + 4);
        v11 = (v10 + 2) * v2;
        sub_20B813A60(__dst, (v11 * v31));
        v12 = (char *)__dst[0];
        if (v6)
          memmove(__dst[0], v5, 4 * v6);
        v13 = *((_QWORD *)v1 + 11);
        if (v13)
          memmove(&v12[4 * v6], *((const void **)v1 + 10), 4 * v13);
        sub_20B8139D8((uint64_t)__dst[0], v31, v31, (v10 + 2) * v2, &v33);
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 16);
        v30 = *(_QWORD *)(v15 + 80);
        v29 = *(unsigned __int8 *)(v15 + 160);
        v28 = *(unsigned int *)(v15 + 100);
        do
        {
          if ((_DWORD)v10)
          {
            v16 = 0;
            v17 = (char *)v33 + 4 * v14 * v11 + 4 * (2 * v2);
            v18 = v10;
            v19 = v29;
            do
            {
              memmove(&v17[4 * v16], (const void *)(v30 + 4 * v14 * v28 + 4 * v19 % v10 * v2), 4 * v2);
              v16 += v2;
              ++v19;
              --v18;
            }
            while (v18);
          }
          ++v14;
        }
        while (v14 != v31);
        v20 = v33;
        v21 = v34 - (_BYTE *)v33;
        sub_20B80EE38(&__p, v34 - (_BYTE *)v33);
        memcpy((void *)__p.n128_u64[0], v20, v21);
        v22 = (unsigned int *)sub_20B824A18(v31, 4 * ((int)v10 + 2) * (int)v2, &__p);
      }
      else
      {
        sub_20B813A60(__dst, (2 * v31 * v2));
        v23 = (char *)__dst[0];
        if (v6)
          memmove(__dst[0], v5, 4 * v6);
        v24 = *((_QWORD *)v1 + 11);
        if (v24)
          memmove(&v23[4 * v6], *((const void **)v1 + 10), 4 * v24);
        sub_20B8139D8((uint64_t)__dst[0], v31, v31, 2 * v2, &v33);
        v25 = v33;
        v26 = v34 - (_BYTE *)v33;
        sub_20B80EE38(&__p, v34 - (_BYTE *)v33);
        memcpy((void *)__p.n128_u64[0], v25, v26);
        v22 = (unsigned int *)sub_20B824A18(v31, 8 * (int)v2, &__p);
      }
      v1 = v22;
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
    }
  }
  return v1;
}

void sub_20B8136FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_20B813754(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  void *v11;
  unint64_t v12;
  void *__p;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  _QWORD v18[3];
  char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  void *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  void *v29[3];

  v3 = *a2;
  *a2 = 0;
  v4 = sub_20B824BBC(v3);
  v5 = (const void *)sub_20B824BC8(v3);
  v6 = sub_20B824BD4(v3);
  sub_20B813A60(v29, v6 >> 2);
  memcpy(v29[0], v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 4) + 2;
    v9 = v6 / (4 * (int)(v8 * v4));
    v10 = v8 * v9;
    sub_20B8139D8((uint64_t)v29[0], v8 * v9, 2 * v9, v4, v18);
    v24 = (void *)v18[0];
    v25 = (int)v9 * (unint64_t)v4;
    v26 = v9;
    v27 = v4;
    v28 = 2;
    v19 = (char *)(v18[0] + 4 * v25);
    v20 = (2 * (int)v9 - (uint64_t)(int)v9) * v4;
    v21 = v9;
    v22 = v4;
    v23 = 2;
    sub_20B813AD4(*(_QWORD *)(a1 + 8), (uint64_t)&v24, (uint64_t)&v19);
    __p = v29[0];
    v14 = (int)v4 * (uint64_t)v10;
    v15 = v4;
    v16 = v10;
    v17 = 2;
    sub_20B813BE8(*(unsigned int **)(a1 + 16), (uint64_t)&__p, 2 * v9);
    v11 = (void *)v18[0];
    if (!v18[0])
      goto LABEL_7;
    v18[1] = v18[0];
  }
  else
  {
    v12 = v6 / (4 * (int)(2 * v4));
    sub_20B8139D8((uint64_t)v29[0], 2 * v12, 2 * v12, v4, &__p);
    v24 = __p;
    v25 = (int)v12 * (unint64_t)v4;
    v26 = v12;
    v27 = v4;
    v28 = 2;
    v19 = (char *)__p + 4 * v25;
    v20 = (2 * (int)v12 - (uint64_t)(int)v12) * v4;
    v21 = v12;
    v22 = v4;
    v23 = 2;
    sub_20B813AD4(*(_QWORD *)(a1 + 8), (uint64_t)&v24, (uint64_t)&v19);
    v11 = __p;
    if (!__p)
      goto LABEL_7;
    v14 = (uint64_t)__p;
  }
  operator delete(v11);
LABEL_7:
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_20B813954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  v17 = *(void **)(v15 - 88);
  if (v17)
  {
    *(_QWORD *)(v15 - 80) = v17;
    operator delete(v17);
  }
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8139C0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 48) + 4 * *(unsigned int *)(a1 + 68) * a2;
}

uint64_t *sub_20B8139D8@<X0>(uint64_t a1@<X0>, int a2@<W3>, unsigned int a3@<W4>, int a4@<W5>, _QWORD *a5@<X8>)
{
  uint64_t *result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  result = sub_20B813A60(a5, a4 * a3);
  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = *result;
    do
    {
      v13 = a3;
      v14 = v10;
      v15 = v11;
      if (a3)
      {
        do
        {
          *(_DWORD *)(v12 + 4 * v15) = *(_DWORD *)(a1 + 4 * v14);
          v15 += a4;
          ++v14;
          --v13;
        }
        while (v13);
      }
      ++v11;
      v10 += a2;
    }
    while (v11 != a4);
  }
  return result;
}

_QWORD *sub_20B813A60(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B81277C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20B813AB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B813AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 12) = v6;
  v7 = *(_DWORD *)a1;
  v8 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 8) != 1)
    v8 = *(_DWORD *)(a1 + 4) + v7;
  sub_20B80F2F8(a1 + 16, v8, v6, 0.0);
  if (*(_DWORD *)(a1 + 8) == 1)
    v9 = *(void **)(a1 + 32);
  else
    v9 = (void *)(*(_QWORD *)(a1 + 32) + 4 * *(unsigned int *)(a1 + 52) * (unint64_t)*(unsigned int *)(a1 + 4));
  v10 = 4 * v7;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
    memmove(v9, *(const void **)a2, 4 * v11);
  sub_20B80F2F8(a1 + 64, *(_DWORD *)a1, *(_DWORD *)(a1 + 12), 0.0);
  v12 = *(_QWORD *)(a3 + 8);
  if (v12)
    memmove(*(void **)(a1 + 80), *(const void **)a3, 4 * v12);
  sub_20B80F2F8(a1 + 112, v10, *(_DWORD *)(a1 + 12), 0.0);
  v13 = *(_QWORD *)(a1 + 120);
  if (v13 >= 1)
    bzero(*(void **)(a1 + 112), 4 * (v13 - ((v13 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
}

void sub_20B813BE8(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;

  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 20);
  v8 = a1[25];
  *a1 = v6;
  *((_BYTE *)a1 + 160) = 0;
  sub_20B80F2F8((uint64_t)(a1 + 16), v6, v8, 0.0);
  sub_20B80F2F8((uint64_t)(a1 + 28), *a1, 2 * a1[2], 0.0);
  sub_20B80F2F8((uint64_t)(a1 + 42), *a1, *((unsigned __int8 *)a1 + 4), 0.0);
  sub_20B80F2F8((uint64_t)(a1 + 4), *a1, a1[2], 0.0);
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if ((_DWORD)v8)
        memmove((void *)(*((_QWORD *)a1 + 10) + 4 * v9), (const void *)(*(_QWORD *)a2 + 4 * v10 + 4 * a3), 4 * v8);
      v10 += v7;
      v9 += v8;
      --v6;
    }
    while (v6);
  }
  v11 = *((unsigned __int8 *)a1 + 4);
  v12 = *a1;
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = *((unsigned __int8 *)a1 + 4);
    do
    {
      v16 = 0;
      if (*((_BYTE *)a1 + 4))
      {
        v17 = (float *)(*((_QWORD *)a1 + 10) + v13 * a1[25]);
        v18 = *((unsigned __int8 *)a1 + 4);
        do
        {
          if (*v17 == 0.0)
            ++v16;
          v17 += a1[2];
          --v18;
        }
        while (v18);
      }
      if (v16 < v15)
        v15 = v16;
      ++v14;
      v13 += 4;
    }
    while (v14 != v12);
    v19 = v11 > v15;
    v20 = v11 - v15;
    if (v19)
      memset_pattern16((void *)(*((_QWORD *)a1 + 33) + 4 * v15), &unk_20BA36210, 4 * v20);
  }
  else
  {
    v15 = *((unsigned __int8 *)a1 + 4);
  }
  *((_BYTE *)a1 + 296) = v15 != 0;
}

uint64_t sub_20B813D70(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B811E18(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B813DAC(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (a5 == 1)
    v7 = (a3 << 6);
  else
    v7 = 0;
  *(_OWORD *)(a1 + 140) = 0uLL;
  sub_20B813EC8((_QWORD *)(a1 + 160), v7);
  sub_20B813EC8((_QWORD *)(a1 + 176), v7);
  sub_20B812A00((int *)a1, a4);
  return a1;
}

void sub_20B813E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)v2)
    free(*(void **)v2);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (*(_QWORD *)v1)
    free(*(void **)v1);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  if (*(_QWORD *)v5)
    free(*(void **)v5);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  if (*(_QWORD *)v4)
    free(*(void **)v4);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  if (*(_QWORD *)v3)
    free(*(void **)v3);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B813EC8(_QWORD *a1, uint64_t a2)
{
  int v4;
  void *v5;
  void *memptr;

  if (4 * a2)
  {
    memptr = 0;
    v4 = malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * a2, 0xC6376F0AuLL);
    v5 = memptr;
    if (v4)
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  a1[1] = a2;
  return a1;
}

uint64_t sub_20B813F2C(uint64_t a1, int a2, char a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  sub_20B812B40(a1, a2);
  return a1;
}

void sub_20B813FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)v5)
    free(*(void **)v5);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  if (*(_QWORD *)v4)
    free(*(void **)v4);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  if (*(_QWORD *)v3)
    free(*(void **)v3);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if (*(_QWORD *)v2)
    free(*(void **)v2);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (*(_QWORD *)v1)
    free(*(void **)v1);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20B814028(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  _QWORD v26[2];
  unsigned int v27;
  void *__p;
  _BYTE *v29;

  v7 = *a2;
  v6 = a2[1];
  v9 = **a2;
  v8 = (*a2)[1];
  LODWORD(v26[0]) = 0;
  sub_20B814634(a4, (v8 - v9) >> 2, v26);
  LODWORD(v26[0]) = 0;
  sub_20B814634(&__p, (v8 - v9) >> 2, v26);
  v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
  if ((int)v10 >= 2)
  {
    v11 = 0;
    v12 = v10 - 1;
    if ((unint64_t)((v8 - v9) >> 2) <= 1)
      v13 = 1;
    else
      v13 = (v8 - v9) >> 2;
    v14 = v12;
    while (1)
    {
      v15 = &(*a2)[3 * v11];
      sub_20B814348(a1, (uint64_t)v15, a3, (uint64_t)v26);
      if (v8 != v9)
        break;
LABEL_14:
      ++v11;
      sub_20B810BF8((unint64_t)(v29 - (_BYTE *)__p) >> 2, (float *)__p);
      sub_20B810A44();
      if (v11 == v14)
        goto LABEL_15;
    }
    v16 = 0;
    v17 = 0;
    v18 = v15 + 3;
    v19 = *(unsigned int *)(a1 + 16);
    v20 = (float *)__p;
    v21 = v26[0];
    v22 = v27;
    while (1)
    {
      if (v19 == 0xFFFFFFFFLL)
      {
        v23 = *(unsigned int *)(*v18 + 4 * v17);
      }
      else
      {
        v24 = 1.0;
        if (*(_DWORD *)(*v15 + 4 * v17) == v19)
          goto LABEL_13;
        v23 = *(unsigned int *)(*v18 + 4 * v17);
        if (v23 == v19)
          goto LABEL_13;
      }
      v24 = *(float *)(v21 + 4 * (v16 + v23));
LABEL_13:
      v20[v17++] = v24;
      v16 += v22;
      if (v13 == v17)
        goto LABEL_14;
    }
  }
LABEL_15:
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_20B8141C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8141F4@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v18[4];

  v7 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v9 = **a2;
  v8 = (*a2)[1];
  LODWORD(v18[0]) = 0;
  sub_20B814634(a4, (v8 - v9) >> 2, v18);
  if ((int)v7 >= 2)
  {
    v10 = 0;
    v11 = (v7 - 1);
    if ((unint64_t)((v8 - v9) >> 2) <= 1)
      v12 = 1;
    else
      v12 = (v8 - v9) >> 2;
    do
    {
      v13 = &(*a2)[3 * v10];
      sub_20B82002C(a1, (uint64_t)v13, v13 + 3, a3, (uint64_t)v18);
      v14 = v18[0];
      if (v8 != v9)
      {
        v15 = 0;
        v16 = *(_DWORD *)(a1 + 16);
        do
        {
          if (v16 != -1 && *(_DWORD *)(*v13 + 4 * v15) == v16)
            *(_DWORD *)(v14 + 4 * v15) = 0;
          ++v15;
        }
        while (v12 != v15);
      }
      ++v10;
      sub_20B810A44();
    }
    while (v10 != v11);
  }
  return sub_20B810A28();
}

void sub_20B81432C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B814348(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  float32x4_t **v12;
  int v13;
  int v14;
  unint64_t v15;
  float32x4_t *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  double v19;
  int v20;
  float *v21;
  unint64_t v22;
  int v23;
  float v24;
  unsigned int *v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE v32[28];
  int32x2_t v33[5];
  void *__p;
  void *v35;

  if (*(_BYTE *)(a1 + 28))
  {
    sub_20B8146B4(*(_QWORD *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    v8 = *(_QWORD *)(a1 + 96);
    v9 = sub_20B80F724(a3);
    sub_20B81484C(v8, (uint64_t *)&__p, v9, (uint64_t)v33);
    sub_20B80F75C(a3, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v10 = *(_QWORD *)(a1 + 104);
    v11 = (_QWORD *)sub_20B80F74C(a3);
    sub_20B814C9C(v10, v33, v11, v32);
    v12 = (float32x4_t **)sub_20B80F744(a3);
    v13 = *(_DWORD *)&v32[16];
    v14 = *(_DWORD *)&v32[20];
    v15 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
    v16 = *v12;
    if (v15)
    {
      v17 = *(unsigned __int8 **)v32;
      v18 = *(_QWORD *)(a1 + 104);
      v19 = *(double *)(v18 + 120);
      v20 = *(_DWORD *)(v18 + 112);
      v21 = (float *)*v12;
      v22 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
      do
      {
        v23 = *v17++;
        v24 = v19 * (double)(v23 - v20);
        *v21++ = v24;
        --v22;
      }
      while (v22);
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = v14;
    *(_DWORD *)(a4 + 24) = 2;
    sub_20B8111CC((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 32), v16);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v25 = *(unsigned int **)(a3 + 8);
      sub_20B813EC8(&__p, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) * *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 34));
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(unsigned int **)a2;
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      {
        v31 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          v28 = *(unsigned int **)a2;
          v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        }
        while (v29 < v30 >> 2);
        v27 = *(_QWORD *)(a1 + 56);
        v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_20B815010(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_20B815164(v25, (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
        free(__p);
    }
    else
    {
      sub_20B8151C0(*(_QWORD *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_20B81535C(*(_QWORD *)(a1 + 64), &__p, *(_QWORD *)(a3 + 8), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B8153CC(*(_QWORD *)(a1 + 80), (uint64_t)v33, *(_QWORD *)(a3 + 16), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
    }
    sub_20B815570((uint64_t)v33, a3 + 48, a4);
    sub_20B8111CC((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32), *(float32x4_t **)a4);
  }
}

void sub_20B814600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    free(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B814634(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B81277C(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B814698(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B8146B4(uint64_t a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20B815630((void **)a3, a2[1] - *a2);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = a3 + 2;
    v9 = a3[1];
    do
    {
      v10 = *(unsigned int *)(a1 + 20);
      v11 = *(_QWORD *)a1 + *v6 * (unint64_t)v10;
      if ((unint64_t)v9 >= *v8)
      {
        v12 = (v9 - *a3) >> 5;
        if ((unint64_t)(v12 + 1) >> 59)
          sub_20B80CDD8();
        v13 = *v8 - (_QWORD)*a3;
        v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)sub_20B8156D4((uint64_t)(a3 + 2), v15);
        else
          v16 = 0;
        v17 = &v16[32 * v12];
        *(_QWORD *)v17 = v11;
        *((_QWORD *)v17 + 1) = v10;
        *((_DWORD *)v17 + 4) = 1;
        *((_DWORD *)v17 + 5) = v10;
        *((_DWORD *)v17 + 6) = 1;
        v19 = *a3;
        v18 = a3[1];
        v20 = v17;
        if (v18 != *a3)
        {
          do
          {
            v21 = *((_OWORD *)v18 - 2);
            *(_OWORD *)(v20 - 20) = *(_OWORD *)(v18 - 20);
            *((_OWORD *)v20 - 2) = v21;
            v20 -= 32;
            v18 -= 32;
          }
          while (v18 != v19);
          v18 = v19;
        }
        v9 = v17 + 32;
        *a3 = v20;
        a3[1] = v17 + 32;
        a3[2] = &v16[32 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v9 = v11;
        *((_QWORD *)v9 + 1) = v10;
        *((_DWORD *)v9 + 4) = 1;
        *((_DWORD *)v9 + 5) = v10;
        *((_DWORD *)v9 + 6) = 1;
        v9 += 32;
      }
      a3[1] = v9;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_20B814828(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B81484C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  size_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  size_t v24;
  int v25;
  void *result;
  int v27;
  int *v28;
  int v29;
  int v30[2];
  int v31[2];
  void *v32;
  int v33;
  void *v34;
  int v35;
  int *v36;
  int v37[2];
  int *v38;
  int v39;
  void *v40;
  int v41[2];
  void *v42;
  int v43[2];
  void *v44;
  int v45[2];
  int *v46;
  int v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)a3;
  v9 = *(int *)(a3 + 4);
  v10 = (unint64_t)(a2[1] - *a2) >> 5;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a1 + 20);
  v45[0] = v10;
  v45[1] = v9;
  sub_20B81630C(&v47, v45, 2);
  v43[0] = v10;
  v43[1] = v8;
  sub_20B81630C(v45, v43, 2);
  v41[0] = v11;
  v41[1] = v12;
  sub_20B81630C(v43, v41, 2);
  v39 = *(_QWORD *)(a1 + 40);
  sub_20B81630C(v41, &v39, 1);
  v37[0] = v10;
  v37[1] = v8;
  sub_20B81630C(&v39, v37, 2);
  sub_20B816394(v37, (uint64_t)&v39);
  sub_20B816394(&v35, (uint64_t)v45);
  v31[0] = v10;
  v31[1] = v12;
  sub_20B81630C(&v33, v31, 2);
  v30[0] = v10;
  v30[1] = v11;
  sub_20B81630C(v31, v30, 2);
  v13 = *a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      memmove((void *)(*(_QWORD *)(a3 + 128) + v15), *(const void **)(v13 + v14), v9);
      ++v16;
      v13 = *a2;
      v15 += v9;
      v14 += 32;
    }
    while (v16 < (a2[1] - *a2) >> 5);
  }
  v17 = (std::mutex *)sub_20B824E74();
  std::mutex::lock(v17);
  sub_20B815708((int *)(a1 + 128), &v47, *(_QWORD *)(a3 + 128), v45, *(_QWORD *)(a3 + 32), v43, *(_QWORD *)a1, v41, *(int32x4_t **)(a1 + 32), &v39, *(_QWORD *)(a3 + 80), v37, *(_QWORD *)(a3 + 320), &v35, *(_BYTE **)(a3 + 272), &v33, *(_QWORD *)(a3 + 176), v31, *(int16x4_t **)(a3 + 224),
    (uint64_t)&v17[1]);
  std::mutex::unlock(v17);
  v18 = v37[0];
  if (v37[0] < 5)
  {
    if (v37[0] < 1)
    {
      v20 = 1;
      goto LABEL_10;
    }
    v19 = (int *)&v38;
  }
  else
  {
    v19 = v38;
  }
  v20 = 1;
  do
  {
    v21 = *v19++;
    v20 *= v21;
    --v18;
  }
  while (v18);
LABEL_10:
  memmove(*(void **)(a3 + 80), *(const void **)(a3 + 320), 2 * v20);
  v22 = v35;
  if (v35 >= 5)
  {
    v23 = v36;
    goto LABEL_14;
  }
  if (v35 >= 1)
  {
    v23 = (int *)&v36;
LABEL_14:
    LODWORD(v24) = 1;
    do
    {
      v25 = *v23++;
      v24 = v25 * (uint64_t)(int)v24;
      --v22;
    }
    while (v22);
    goto LABEL_16;
  }
  v24 = 1;
LABEL_16:
  result = memmove(*(void **)(a3 + 32), *(const void **)(a3 + 272), v24);
  if (v45[0] < 5)
  {
    v27 = (int)v46;
    v28 = (int *)&v46 + 1;
  }
  else
  {
    v28 = v46 + 1;
    v27 = *v46;
  }
  v29 = *v28;
  *(_QWORD *)a4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 8) = v29 * (uint64_t)v27;
  *(_DWORD *)(a4 + 16) = v27;
  *(_DWORD *)(a4 + 20) = v29;
  *(_DWORD *)(a4 + 24) = 2;
  if (v31[0] >= 5)
  {
    result = v32;
    if (v32)
      result = (void *)MEMORY[0x20BD39C80](v32, 0x1000C8052888210);
  }
  if (v33 >= 5)
  {
    result = v34;
    if (v34)
      result = (void *)MEMORY[0x20BD39C80](v34, 0x1000C8052888210);
  }
  if (v35 >= 5)
  {
    result = v36;
    if (v36)
      result = (void *)MEMORY[0x20BD39C80](v36, 0x1000C8052888210);
  }
  if (v37[0] >= 5)
  {
    result = v38;
    if (v38)
      result = (void *)MEMORY[0x20BD39C80](v38, 0x1000C8052888210);
  }
  if (v39 >= 5)
  {
    result = v40;
    if (v40)
      result = (void *)MEMORY[0x20BD39C80](v40, 0x1000C8052888210);
  }
  if (v41[0] >= 5)
  {
    result = v42;
    if (v42)
      result = (void *)MEMORY[0x20BD39C80](v42, 0x1000C8052888210);
  }
  if (v43[0] >= 5)
  {
    result = v44;
    if (v44)
      result = (void *)MEMORY[0x20BD39C80](v44, 0x1000C8052888210);
  }
  if (v45[0] >= 5)
  {
    result = v46;
    if (v46)
      result = (void *)MEMORY[0x20BD39C80](v46, 0x1000C8052888210);
  }
  if (v47 >= 5)
  {
    result = v48;
    if (v48)
      return (void *)MEMORY[0x20BD39C80](v48, 0x1000C8052888210);
  }
  return result;
}

void sub_20B814C90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20B854468(a1);
}

void sub_20B814C9C(uint64_t a1@<X0>, int32x2_t *a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  std::mutex *v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int *v25;
  int v26;
  int *v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int32x2_t v34;
  int v35;
  int v36;
  int v37;
  int32x2_t v38;
  int v39;
  int v40;
  int v41;
  _DWORD v42[2];
  _DWORD v43[2];
  int v44;
  _QWORD v45[2];
  int v46;
  uint64_t v47;
  int v48;
  _QWORD v49[2];
  int v50;
  uint64_t v51;
  int32x2_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v52 = a2[2];
  sub_20B81630C(&v50, (int *)&v52, 2);
  v52 = *(int32x2_t *)(a1 + 16);
  sub_20B81630C(&v48, (int *)&v52, 2);
  v52.i32[0] = *(_QWORD *)(a1 + 40);
  sub_20B81630C(&v46, (int *)&v52, 1);
  v52 = (int32x2_t)a3[2];
  sub_20B81630C(&v44, (int *)&v52, 2);
  v8 = (std::mutex *)sub_20B824E74();
  std::mutex::lock(v8);
  v9 = *a2;
  v10 = *(int32x2_t *)a1;
  v11 = *(int32x2_t *)(a1 + 32);
  v12 = *a3;
  v13 = *(_DWORD *)(a1 + 128);
  v14 = *(_DWORD *)(a1 + 132);
  v15 = *(_DWORD *)(a1 + 136);
  v16 = *(_QWORD *)(a1 + 140);
  v17 = *(_QWORD *)(a1 + 148);
  if (v44 <= 4)
    v18 = (int *)v45;
  else
    v18 = (int *)v45[0];
  v19 = 1;
  v20 = (v44 - 1);
  if (v44 >= 1)
  {
    v21 = (v44 - 1);
    v22 = v44;
    do
    {
      if (v21)
        v23 = *v18;
      else
        v23 = 1;
      v19 *= v23;
      ++v18;
      --v21;
      --v22;
    }
    while (v22);
  }
  v24 = v48 - 1;
  if (v48 <= 4)
    v25 = (int *)v49 + v24;
  else
    v25 = (int *)(v49[0] + 4 * v24);
  v26 = *v25;
  if (v44 <= 4)
    v27 = (int *)v45 + (int)v20;
  else
    v27 = (int *)(v45[0] + 4 * v20);
  v28 = *v27;
  v38 = v10;
  v39 = v28;
  v40 = v26;
  v41 = v26;
  v34 = v9;
  v35 = v26;
  v36 = v19;
  v37 = v26;
  v30 = v12;
  v31 = v28;
  v32 = v19;
  v33 = v28;
  v52 = v11;
  v53 = v28;
  v54 = v16;
  v55 = v15;
  v56 = v17;
  v43[0] = v14;
  v43[1] = v28;
  v42[0] = v13;
  v42[1] = v19;
  sub_20B81C164((uint64_t)&v8[1], &v38, &v34, (uint64_t)&v30, v43, v42, (uint64_t)&v52);
  std::mutex::unlock(v8);
  v29 = *((_OWORD *)a3 + 1);
  *a4 = *(_OWORD *)a3;
  a4[1] = v29;
  if (v44 >= 5 && v45[0])
    MEMORY[0x20BD39C80](v45[0], 0x1000C8052888210);
  if (v46 >= 5 && v47)
    MEMORY[0x20BD39C80](v47, 0x1000C8052888210);
  if (v48 >= 5 && v49[0])
    MEMORY[0x20BD39C80](v49[0], 0x1000C8052888210);
  if (v50 >= 5)
  {
    if (v51)
      MEMORY[0x20BD39C80](v51, 0x1000C8052888210);
  }
}

void sub_20B814F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28)
{
  std::mutex *v28;
  uint64_t v29;
  uint64_t v31;

  std::mutex::unlock(v28);
  if (a21 >= 5 && a22)
    MEMORY[0x20BD39C80](a22, 0x1000C8052888210);
  if (a24 >= 5 && a25)
    MEMORY[0x20BD39C80](a25, 0x1000C8052888210);
  if (a27 >= 5 && a28)
    MEMORY[0x20BD39C80](a28, 0x1000C8052888210);
  if (*(int *)(v29 - 120) >= 5)
  {
    v31 = *(_QWORD *)(v29 - 112);
    if (v31)
      MEMORY[0x20BD39C80](v31, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void *sub_20B815010(int a1, uint64_t a2, uint64_t a3, void *a4, int a5, int8x8_t a6)
{
  uint64_t v6;
  int v7;
  char *v9;
  BOOL v10;
  _BOOL4 v11;
  uint8x8_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  void *result;
  uint64_t v17;
  size_t v18;
  uint64_t v19;

  LODWORD(v6) = a5;
  v7 = (int)a4;
  v9 = *(char **)(a2 + 128);
  if ((int)a4 > 1)
  {
    a6.i32[0] = (_DWORD)a4 - 1;
    a6 = vcnt_s8(a6);
    a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
    if (a6.i32[0] < 2u)
      return sub_20B8102BC(a4, a5, *(char **)a3, *(char **)(a2 + 128));
  }
  if ((int)a4 >= 1)
  {
    a6.i32[0] = (int)a4;
    a6 = vcnt_s8(a6);
    a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
    if (a6.i32[0] < 2u)
      return sub_20B8102BC(a4, a5, *(char **)a3, *(char **)(a2 + 128));
  }
  v10 = (((_DWORD)a4 + 1) & a4) != 0 || (int)a4 < 0;
  v11 = v10;
  if (a5 < 1)
    return sub_20B8102BC(a4, a5, *(char **)a3, *(char **)(a2 + 128));
  if (!v11)
    return sub_20B8102BC(a4, a5, *(char **)a3, *(char **)(a2 + 128));
  a6.i32[0] = a5;
  v12 = (uint8x8_t)vcnt_s8(a6);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.i32[0] > 1u)
    return sub_20B8102BC(a4, a5, *(char **)a3, *(char **)(a2 + 128));
  v13 = a4 | (a4 >> 1) | ((a4 | (a4 >> 1)) >> 2);
  v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
  v15 = (void *)((v14 | HIWORD(v14)) + 1);
  if (*(_QWORD *)(a2 + 168) < (unint64_t)((int)v15 * a5))
    return sub_20B8102BC(a4, a5, *(char **)a3, *(char **)(a2 + 128));
  memcpy(*(void **)(a2 + 160), *(const void **)a3, 4 * *(_QWORD *)(a3 + 8));
  sub_20B8102BC(v15, v6, *(char **)(a2 + 160), *(char **)(a2 + 176));
  v17 = 0;
  v18 = 4 * v7;
  v19 = 4 * (int)v15;
  v6 = v6;
  do
  {
    result = memcpy(v9, (const void *)(*(_QWORD *)(a2 + 176) + v17), v18);
    v17 += v19;
    v9 += v18;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t sub_20B815164@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  sub_20B8110DC();
  return sub_20B81FB4C(a1, a2);
}

void sub_20B8151C0(uint64_t a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20B815630((void **)a3, a2[1] - *a2);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = a3 + 2;
    v9 = a3[1];
    do
    {
      v10 = *(unsigned int *)(a1 + 20);
      v11 = *(_QWORD *)a1 + 4 * *v6 * (unint64_t)v10;
      if ((unint64_t)v9 >= *v8)
      {
        v12 = (v9 - *a3) >> 5;
        if ((unint64_t)(v12 + 1) >> 59)
          sub_20B80CDD8();
        v13 = *v8 - (_QWORD)*a3;
        v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)sub_20B8156D4((uint64_t)(a3 + 2), v15);
        else
          v16 = 0;
        v17 = &v16[32 * v12];
        *(_QWORD *)v17 = v11;
        *((_QWORD *)v17 + 1) = v10;
        *((_DWORD *)v17 + 4) = 1;
        *((_DWORD *)v17 + 5) = v10;
        *((_DWORD *)v17 + 6) = 1;
        v19 = *a3;
        v18 = a3[1];
        v20 = v17;
        if (v18 != *a3)
        {
          do
          {
            v21 = *((_OWORD *)v18 - 2);
            *(_OWORD *)(v20 - 20) = *(_OWORD *)(v18 - 20);
            *((_OWORD *)v20 - 2) = v21;
            v20 -= 32;
            v18 -= 32;
          }
          while (v18 != v19);
          v18 = v19;
        }
        v9 = v17 + 32;
        *a3 = v20;
        a3[1] = v17 + 32;
        a3[2] = &v16[32 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v9 = v11;
        *((_QWORD *)v9 + 1) = v10;
        *((_DWORD *)v9 + 4) = 1;
        *((_DWORD *)v9 + 5) = v10;
        *((_DWORD *)v9 + 6) = 1;
        v9 += 32;
      }
      a3[1] = v9;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_20B815338(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B81535C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_20B81FCA0(a1, a2);
  sub_20B811154();
  sub_20B810A6C(*(unsigned int *)(a3 + 144), *(_DWORD *)(a3 + 148), *(_QWORD *)(a1 + 32), *(float32x4_t **)(a3 + 128));
  return sub_20B81FB4C((unsigned int *)a3, a4);
}

void sub_20B8153CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _BYTE v26[32];

  v8 = *(_DWORD *)(a2 + 16);
  v7 = *(unsigned int *)(a2 + 20);
  v9 = a3 + 32;
  v10 = a3 + 184;
  sub_20B8102BC((void *)v8, *(_DWORD *)(a2 + 20), *(char **)a2, *(char **)(a3 + 32));
  v11 = *(_DWORD *)(v9 + 16);
  v12 = *(_DWORD *)(v9 + 20);
  v21 = *(_QWORD *)v9;
  v22 = v12 * (unint64_t)v11;
  v23 = v11;
  v24 = v12;
  v25 = 2;
  sub_20B81FD14((unsigned __int8 *)a1, (uint64_t)&v21, v10, (uint64_t)v26);
  if (*(_BYTE *)(v9 + 264))
    sub_20B81FE18((uint64_t)v26, (float32x4_t **)(a3 + 264), (uint64_t)&v21);
  v20 = v7;
  if ((_DWORD)v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      sub_20B810BA4();
      v14 += 2 * v8;
      v13 += v8;
      --v7;
    }
    while (v7);
  }
  v15 = *(_DWORD *)(a3 + 96);
  v16 = *(_DWORD *)(a3 + 100);
  v21 = *(_QWORD *)(a3 + 80);
  v22 = v16 * (unint64_t)v15;
  v23 = v15;
  v24 = v16;
  v25 = 2;
  sub_20B81FEB0((unsigned __int8 *)a1, (uint64_t)v26);
  sub_20B81FF64(a1, v9, a3);
  sub_20B811154();
  sub_20B810C24(*(_DWORD *)(a1 + 24) * v20, *(float **)(a3 + 32));
  v17 = *(_DWORD *)(a1 + 24);
  v18 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)a4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 8) = v18 * (unint64_t)v17;
  *(_DWORD *)(a4 + 16) = v17;
  *(_DWORD *)(a4 + 20) = v18;
  *(_DWORD *)(a4 + 24) = 2;
}

uint64_t sub_20B815570@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unint64_t v8;

  v4 = *(_DWORD *)(a2 + 20);
  v5 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = v4 * (unint64_t)v5;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  *(_DWORD *)(a3 + 24) = 2;
  result = sub_20B811154();
  if (*(_DWORD *)(a1 + 20))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = sub_20B810A44();
      ++v8;
      v7 += v4;
    }
    while (v8 < *(unsigned int *)(a1 + 20));
  }
  return result;
}

void sub_20B815630(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      sub_20B80CDD8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20B8156D4(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v10 - 20);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *sub_20B8156D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_20B800BC0();
  return operator new(32 * a2);
}

void sub_20B815708(int *a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, int32x4_t *a9, int *a10, uint64_t a11, int *a12, uint64_t a13, int *a14, _BYTE *a15, int *a16, uint64_t a17, int *a18, int16x4_t *a19, uint64_t a20)
{
  int v26;
  __int32 v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  int *v37;
  int v38;
  uint64_t v39;
  int v40;
  double v41;
  double v42;
  int32x2_t v43;
  int *v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t i;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  int16x4_t *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int v81;
  unint64_t v82;
  unsigned __int16 v83;
  unsigned __int16 v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  unsigned int v87;
  int v88;
  int v89;
  BOOL v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  __int16 v97;
  int v98;
  int v99;
  uint64_t v100;
  __int16 v101;
  unsigned __int16 v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  BOOL v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int32 v115;
  int v116;
  int v117;
  int16x8_t v118;
  int v119;
  int16x8_t v120;
  int *v121;
  int16x8_t v122;
  int v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x4_t *v126;
  int16x4_t *__dst;
  int32x4_t *v130;
  int v131;
  __int32 v132;
  int v133;
  int v134;
  int16x4_t *v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  _DWORD v147[2];
  _DWORD v148[2];
  _QWORD v149[2];
  _QWORD v150[2];
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  _QWORD *v156;
  unsigned int v157[2];
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  _BYTE v172[20];

  *(_QWORD *)&v172[4] = *MEMORY[0x24BDAC8D0];
  v26 = *a1;
  v27 = a1[1];
  v28 = a1[2];
  sub_20B81692C((uint64_t)&v170, 4, a2, 1);
  sub_20B81692C((uint64_t)&v167, 4, a4, 1);
  sub_20B81692C((uint64_t)&v165, 4, a8, 1);
  sub_20B81692C((uint64_t)&v163, 4, a10, 1);
  sub_20B81692C((uint64_t)&v161, 4, a12, 1);
  sub_20B81692C((uint64_t)&v159, 4, a14, 1);
  sub_20B81692C((uint64_t)v157, 4, a16, 1);
  sub_20B81692C((uint64_t)&v155, 4, a18, 1);
  v117 = v28;
  v29 = *a6;
  v30 = &v171;
  if (v170 > 4)
    v30 = (uint64_t *)v171;
  v121 = a6;
  v119 = v26;
  if (v170 < 1)
  {
    v32 = 1;
  }
  else
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v31 == 12)
        v33 = 1;
      else
        v33 = *(_DWORD *)((char *)v30 + v31);
      v32 *= v33;
      v31 += 4;
    }
    while (4 * v170 != v31);
    if (v170 >= 5)
    {
      v34 = a5;
      v35 = (int *)(v171 + 12);
      goto LABEL_13;
    }
  }
  v34 = a5;
  v35 = (int *)v172;
LABEL_13:
  v36 = *v35;
  if (v167 <= 4)
    v37 = &v169;
  else
    v37 = (int *)(v168 + 12);
  v38 = *v37;
  if ((int)v29 <= 4)
    v39 = v29 - 2;
  else
    v39 = (v29 - 2);
  sub_20B816394(&v153, (uint64_t)&v161);
  sub_20B816394(&v151, (uint64_t)&v159);
  v40 = sub_20B816414((uint64_t)&v163, 3, (uint64_t)&v167, 3, (uint64_t)&v153, 3, (uint64_t)&v151);
  if (v151 >= 5 && v152)
    MEMORY[0x20BD39C80](v152, 0x1000C8052888210);
  v115 = v27;
  if (v153 >= 5 && v154)
    MEMORY[0x20BD39C80](v154, 0x1000C8052888210);
  v110 = v38 + v36;
  v45 = v121 + 2;
  v46 = &v156;
  if (v155 > 4)
    v46 = v156;
  if (v155 < 1)
  {
    v48 = 1;
  }
  else
  {
    v47 = 0;
    v48 = 1;
    do
    {
      if (v47 == 12)
        v49 = 1;
      else
        v49 = *(_DWORD *)((char *)v46 + v47);
      v48 *= v49;
      v47 += 4;
    }
    while (4 * v155 != v47);
  }
  v113 = a7;
  v50 = 0;
  if (*v121 > 4)
    v45 = (int *)*((_QWORD *)v121 + 1);
  v51 = v45[v39];
  v150[0] = a3;
  v150[1] = v34;
  v149[0] = &v170;
  v149[1] = &v167;
  v52 = 1;
  do
  {
    v53 = (unsigned int *)(v158 + v50 * 4);
    if ((int)v157[0] <= 4)
      v53 = &v157[v50 + 2];
    v52 *= (int)*v53;
    ++v50;
  }
  while (v50 != 3);
  v111 = v40;
  v112 = v32;
  v109 = v51;
  if ((int)v157[0] < 5)
  {
    v56 = 1;
  }
  else
  {
    v54 = v157[0] - 4;
    v55 = (int *)(v158 + 16);
    v56 = 1;
    do
    {
      v57 = *v55++;
      v56 *= v57;
      --v54;
    }
    while (v54);
  }
  if (v52 >= 1)
  {
    v58 = 0;
    v59 = (char *)a17;
    do
    {
      for (i = 0; i != 2; ++i)
      {
        v61 = v149[i];
        if (*(int *)v61 < 5)
          v62 = (_DWORD *)(v61 + 20);
        else
          v62 = (_DWORD *)(*(_QWORD *)(v61 + 8) + 12);
        v63 = *v62 * v56;
        memcpy(v59, (const void *)(v150[i] + v63 * (uint64_t)(int)v58), v63);
        v59 += v63;
      }
      ++v58;
    }
    while (v58 != v52);
  }
  if (v48 != 1 || (v109 & 3) != 0 || (v110 & 7) != 0)
  {
    v143 = v113;
    v144 = v109;
    v145 = v110;
    v146 = v110;
    v139 = a17;
    v140 = v110;
    v141 = v48;
    v142 = v110;
    v64 = a19;
    v135 = a19;
    v136 = v109;
    v137 = v48;
    v138 = v109;
    v130 = a9;
    v131 = v109;
    v132 = v115;
    v133 = v117;
    v134 = 0;
    v148[0] = -v119;
    v148[1] = v109;
    v147[0] = -128;
    v147[1] = v48;
    sub_20B816A08(a20, (int32x2_t *)&v143, (int32x2_t *)&v139, (uint64_t)&v135, v148, v147, (uint64_t)&v130);
    v65 = v32;
    v66 = v111;
  }
  else
  {
    v64 = a19;
    sub_20B8164BC(v157, a17, v121, v113, v119, v41, v42, v43, (uint64_t)&v165, a9, v115, v117, (uint64_t)&v155, a19);
    v65 = v32;
    v66 = v111;
  }
  if (v65 >= 1)
  {
    v67 = 0;
    v68 = 3 * v66;
    v116 = v66 - 8;
    __dst = v64;
    v69 = (char *)v64 + 4 * v66;
    v70 = (char *)v64 + 2 * v66;
    v114 = v68;
    do
    {
      __dst = (int16x4_t *)((char *)__dst + 2 * v68);
      if (v66 >= 8)
      {
        v72 = v67;
        v71 = 0;
        v73 = 0;
        do
        {
          *(double *)v74.i64 = sub_20B816740(*(int16x8_t *)v64[v73 / 8].i8);
          v124 = v74;
          *(double *)v75.i64 = sub_20B8167D8(*(int16x8_t *)&v70[v73]);
          v122 = v75;
          *(double *)v76.i64 = sub_20B816740(*(int16x8_t *)&v69[v73]);
          v120 = v76;
          *(double *)v77.i64 = sub_20B816740(*(int16x8_t *)__dst[v73 / 8].i8);
          v118 = v77;
          v78 = vqrdmulhq_s16(v124, v122);
          v125 = vqaddq_s16(vrshrq_n_s16(vqaddq_s16(v78, vcltzq_s16(v78)), 4uLL), vqrdmulhq_s16(v120, *(int16x8_t *)(a11 + v73)));
          *(double *)v79.i64 = sub_20B8167D8(vqshlq_n_s16(v125, 1uLL));
          v80 = vqrdmulhq_s16(v118, v79);
          *(int16x8_t *)(a13 + v73) = v125;
          *(int8x8_t *)&a15[v71] = veor_s8(vqmovn_s16(vrshrq_n_s16(vqaddq_s16(v80, vcltzq_s16(v80)), 8uLL)), (int8x8_t)0x8080808080808080);
          v73 += 16;
          v71 += 8;
        }
        while ((int)v71 <= v116);
        v64 = (int16x4_t *)((char *)v64 + v73);
        v70 += v73;
        v69 += v73;
        __dst = (int16x4_t *)((char *)__dst + v73);
        a11 += v73;
        a13 += v73;
        a15 += v71;
        v67 = v72;
      }
      else
      {
        LODWORD(v71) = 0;
      }
      v81 = v66 - v71;
      if (v66 > (int)v71)
      {
        v123 = v67;
        v126 = v64;
        v82 = 0;
        do
        {
          v83 = sub_20B816870(v126->u16[v82 / 2]);
          v84 = sub_20B8168E0(*(_WORD *)&v70[v82]);
          v85 = sub_20B816870(*(unsigned __int16 *)&v69[v82]);
          v86 = sub_20B816870(__dst->u16[v82 / 2]);
          if (v83 == 0x8000 && v84 == 0x8000)
          {
            v87 = 0x7FFF;
          }
          else
          {
            v88 = (__int16)v84 * (__int16)v83;
            if (v88 < 0)
              v89 = -16383;
            else
              v89 = 0x4000;
            v90 = __OFADD__(v89, v88);
            v91 = v89 + v88;
            if (v91 < 0 != v90)
              v91 += 0x7FFF;
            v87 = v91 >> 15;
          }
          v92 = *(unsigned __int16 *)(a11 + v82);
          if (v85 == 0x8000 && v92 == 0x8000)
          {
            LOWORD(v93) = 0x7FFF;
          }
          else
          {
            v94 = (__int16)v92 * (__int16)v85;
            if (v94 < 0)
              v95 = -16383;
            else
              v95 = 0x4000;
            v90 = __OFADD__(v95, v94);
            v96 = v95 + v94;
            if (v96 < 0 != v90)
              v96 += 0x7FFF;
            v93 = v96 >> 15;
          }
          if ((v87 & 0xF) <= ((v87 >> 15) & 1) + 7)
            v97 = (__int16)v87 >> 4;
          else
            v97 = ((__int16)v87 >> 4) + 1;
          v98 = v97 + (__int16)v93;
          if (v98 >= 0x7FFF)
            v98 = 0x7FFF;
          if (v98 <= -32768)
            v99 = -32768;
          else
            v99 = v98;
          v100 = 2 * (__int16)v99;
          if (v100 >= 0x7FFF)
            v100 = 0x7FFFLL;
          if (v100 <= -32768)
            LOWORD(v100) = 0x8000;
          if (v99 >= 0x4000)
            LOWORD(v100) = 0x7FFF;
          if (v99 <= -16384)
            v101 = 0x8000;
          else
            v101 = v100;
          v102 = sub_20B8168E0(v101);
          if (v86 == 0x8000 && v102 == 0x8000)
          {
            v103 = 0x7FFF;
          }
          else
          {
            v104 = (__int16)v102 * (__int16)v86;
            if (v104 < 0)
              v105 = -16383;
            else
              v105 = 0x4000;
            v90 = __OFADD__(v105, v104);
            v106 = v105 + v104;
            if (v106 < 0 != v90)
              v106 += 0x7FFF;
            v103 = v106 >> 15;
          }
          *(_WORD *)(a13 + v82) = v99;
          v107 = ((v103 >> 15) & 1) + 127 >= v103;
          v108 = (__int16)v103 >> 8;
          if (!v107)
            ++v108;
          if (v108 >= 127)
            v108 = 127;
          if (v108 <= -128)
            LOBYTE(v108) = 0x80;
          *a15++ = v108 ^ 0x80;
          v82 += 2;
          --v81;
        }
        while (v81);
        v70 += v82;
        v69 += v82;
        __dst = (int16x4_t *)((char *)__dst + v82);
        a11 += v82;
        a13 += v82;
        v64 = (int16x4_t *)((char *)v126 + v82);
        v65 = v112;
        v66 = v111;
        v67 = v123;
      }
      v68 = v114;
      v64 = (int16x4_t *)((char *)v64 + 2 * v114);
      v70 += 2 * v114;
      ++v67;
      v69 += 2 * v114;
    }
    while (v67 != v65);
  }
  if (v155 >= 5 && v156)
    MEMORY[0x20BD39C80](v156, 0x1000C8052888210);
  if ((int)v157[0] >= 5 && v158)
    MEMORY[0x20BD39C80](v158, 0x1000C8052888210);
  if (v159 >= 5 && v160)
    MEMORY[0x20BD39C80](v160, 0x1000C8052888210);
  if (v161 >= 5 && v162)
    MEMORY[0x20BD39C80](v162, 0x1000C8052888210);
  if (v163 >= 5 && v164)
    MEMORY[0x20BD39C80](v164, 0x1000C8052888210);
  if (v165 >= 5 && v166)
    MEMORY[0x20BD39C80](v166, 0x1000C8052888210);
  if (v167 >= 5 && v168)
    MEMORY[0x20BD39C80](v168, 0x1000C8052888210);
  if (v170 >= 5)
  {
    if (v171)
      MEMORY[0x20BD39C80](v171, 0x1000C8052888210);
  }
}

void sub_20B8160F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,uint64_t a52,uint64_t a53,int a54,uint64_t a55,uint64_t a56,int a57,uint64_t a58,uint64_t a59,int a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  if (a57 >= 5 && a58)
    MEMORY[0x20BD39C80](a58, 0x1000C8052888210);
  if (a60 >= 5 && a61)
    MEMORY[0x20BD39C80](a61, 0x1000C8052888210);
  if (*(int *)(v61 - 256) >= 5)
  {
    v63 = *(_QWORD *)(v61 - 248);
    if (v63)
      MEMORY[0x20BD39C80](v63, 0x1000C8052888210);
  }
  if (*(int *)(v61 - 232) >= 5)
  {
    v64 = *(_QWORD *)(v61 - 224);
    if (v64)
      MEMORY[0x20BD39C80](v64, 0x1000C8052888210);
  }
  if (*(int *)(v61 - 208) >= 5)
  {
    v65 = *(_QWORD *)(v61 - 200);
    if (v65)
      MEMORY[0x20BD39C80](v65, 0x1000C8052888210);
  }
  if (*(int *)(v61 - 184) >= 5)
  {
    v66 = *(_QWORD *)(v61 - 176);
    if (v66)
      MEMORY[0x20BD39C80](v66, 0x1000C8052888210);
  }
  if (*(int *)(v61 - 160) >= 5)
  {
    v67 = *(_QWORD *)(v61 - 152);
    if (v67)
      MEMORY[0x20BD39C80](v67, 0x1000C8052888210);
  }
  if (*(int *)(v61 - 136) >= 5)
  {
    v68 = *(_QWORD *)(v61 - 128);
    if (v68)
      MEMORY[0x20BD39C80](v68, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20B81630C(_DWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;

  *a1 = a3;
  if ((int)a3 < 5)
  {
    if (!a3)
      return a1;
    v7 = a1 + 2;
  }
  else
  {
    v6 = operator new[]();
    *((_QWORD *)a1 + 1) = v6;
    v7 = a1 + 2;
    if ((int)*a1 > 4)
      v7 = (_DWORD *)v6;
  }
  v8 = 4 * a3;
  do
  {
    v9 = *a2++;
    *v7++ = v9;
    v8 -= 4;
  }
  while (v8);
  return a1;
}

int *sub_20B816394(int *a1, uint64_t a2)
{
  int v4;
  void *v5;
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v4 = *(_DWORD *)a2;
  *a1 = *(_DWORD *)a2;
  if (v4 <= 4)
  {
    v5 = a1 + 2;
  }
  else
  {
    v5 = (void *)operator new[]();
    *((_QWORD *)a1 + 1) = v5;
    v4 = *a1;
    if (*a1 <= 4)
      v5 = a1 + 2;
  }
  v6 = *(_DWORD *)a2;
  v9 = *(const void **)(a2 + 8);
  v8 = (const void *)(a2 + 8);
  v7 = v9;
  if (v6 <= 4)
    v10 = v8;
  else
    v10 = v7;
  memcpy(v5, v10, 4 * v4);
  return a1;
}

uint64_t sub_20B816414(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20B816394(&v12, a7);
  v9 = a1 + 8;
  if (*(int *)a1 > 4)
    v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(v9 + 4 * a2);
  if (v12 >= 5 && v13)
    MEMORY[0x20BD39C80](v13, 0x1000C8052888210);
  return v10;
}

unsigned int *sub_20B8164BC(unsigned int *a1, uint64_t a2, int *a3, uint64_t a4, int a5, double a6, double a7, int32x2_t a8, uint64_t a9, int32x4_t *a10, __int32 a11, int a12, uint64_t a13, int16x4_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  uint16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint16x8_t v36;
  unsigned int v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;

  v14 = *a3;
  v15 = *a1;
  v18 = (unsigned int *)*((_QWORD *)a1 + 1);
  result = a1 + 2;
  v17 = v18;
  if ((int)v15 <= 4)
    v17 = result;
  if ((int)v15 < 1)
  {
    v21 = 1;
  }
  else
  {
    v19 = 0;
    v20 = 4 * v15;
    v21 = 1;
    do
    {
      if (v19)
        v22 = v17[v19 / 4];
      else
        v22 = 1;
      v21 *= v22;
      v19 += 4;
    }
    while (v20 != v19);
  }
  v25 = (int *)*((_QWORD *)a3 + 1);
  v23 = a3 + 2;
  v24 = v25;
  if ((int)v14 <= 4)
    v24 = v23;
  v26 = v24[v14 - 2];
  if ((int)v26 >= 1)
  {
    v27 = 0;
    v29 = (uint16x8_t)vdupq_n_s16(-a5);
    v30 = vdupq_n_s32(a12 & ~(a12 >> 31));
    a8.i32[0] = a11;
    v31 = vdupq_n_s32(a12 & (a12 >> 31));
    v32 = a4 + 3 * v21;
    v33 = 4 * v21;
    v34 = a4 + 2 * v21;
    v35 = a4 + v21;
    v36.i64[0] = 0x7F007F007F007FLL;
    v36.i64[1] = 0x7F007F007F007FLL;
    do
    {
      if (v21 >= 16)
      {
        result = 0;
        v41 = 0uLL;
        v40 = 0uLL;
        v39 = 0uLL;
        v38 = 0uLL;
        do
        {
          v42 = *(uint8x16_t *)((char *)result + a2);
          v43 = *(uint8x16_t *)((char *)result + a4);
          v44 = *(uint8x16_t *)((char *)result + v35);
          v45 = *(uint8x16_t *)((char *)result + v34);
          v46 = *(uint8x16_t *)((char *)result + v32);
          v47 = (int16x8_t)vaddw_u8(v36, *(uint8x8_t *)v42.i8);
          v48 = (int16x8_t)vaddw_high_u8(v36, v42);
          v49 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v43.i8);
          v50 = (int16x8_t)vaddw_high_u8(v29, v43);
          v51 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v44.i8);
          v52 = (int16x8_t)vaddw_high_u8(v29, v44);
          v53 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v45.i8);
          v54 = (int16x8_t)vaddw_high_u8(v29, v45);
          v55 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)v46.i8);
          v56 = (int16x8_t)vaddw_high_u8(v29, v46);
          v41 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v41, *(int16x4_t *)v49.i8, *(int16x4_t *)v47.i8), v49, v47), *(int16x4_t *)v50.i8, *(int16x4_t *)v48.i8), v50, v48);
          v40 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v40, *(int16x4_t *)v51.i8, *(int16x4_t *)v47.i8), v51, v47), *(int16x4_t *)v52.i8, *(int16x4_t *)v48.i8), v52, v48);
          v39 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v39, *(int16x4_t *)v53.i8, *(int16x4_t *)v47.i8), v53, v47), *(int16x4_t *)v54.i8, *(int16x4_t *)v48.i8), v54, v48);
          v38 = vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(v38, *(int16x4_t *)v55.i8, *(int16x4_t *)v47.i8), v55, v47), *(int16x4_t *)v56.i8, *(int16x4_t *)v48.i8), v56, v48);
          result += 4;
        }
        while ((uint64_t)result <= v21 - 16);
        v37 = ((v21 - 16) & 0xFFFFFFF0) + 16;
      }
      else
      {
        v37 = 0;
        v38 = 0uLL;
        v39 = 0uLL;
        v40 = 0uLL;
        v41 = 0uLL;
      }
      if ((int)v37 < v21)
      {
        result = 0;
        v57 = a4;
        v58 = v35;
        v59 = v34;
        v60 = v32;
        v61 = a2;
        do
        {
          v62 = (int16x8_t)vaddw_u8(v36, *(uint8x8_t *)(v61 + v37));
          v63 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v57 + v37));
          v64 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v58 + v37));
          v65 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v59 + v37));
          v66 = (int16x8_t)vaddw_u8(v29, *(uint8x8_t *)(v60 + v37));
          v41 = vmlal_high_s16(vmlal_s16(v41, *(int16x4_t *)v63.i8, *(int16x4_t *)v62.i8), v63, v62);
          v40 = vmlal_high_s16(vmlal_s16(v40, *(int16x4_t *)v64.i8, *(int16x4_t *)v62.i8), v64, v62);
          v39 = vmlal_high_s16(vmlal_s16(v39, *(int16x4_t *)v65.i8, *(int16x4_t *)v62.i8), v65, v62);
          v38 = vmlal_high_s16(vmlal_s16(v38, *(int16x4_t *)v66.i8, *(int16x4_t *)v62.i8), v66, v62);
          v61 += 8;
          v60 += 8;
          v59 += 8;
          v58 += 8;
          v57 += 8;
          result += 2;
        }
        while (v21 > (int)(v37 + (_DWORD)result));
      }
      *(int32x2_t *)v67.i8 = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v41, v41), (int32x2_t)*(_OWORD *)&vpaddq_s32(v40, v40));
      v67.u64[1] = (unint64_t)vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v39, v39), (int32x2_t)*(_OWORD *)&vpaddq_s32(v38, v38));
      v68 = *a10++;
      v69 = vqrdmulhq_lane_s32(vshlq_s32(vaddq_s32(v67, v68), v30), a8, 0);
      *a14++ = vqmovn_s32(vrshlq_s32(vqaddq_s32(v69, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v69, (int8x16_t)v31))), v31));
      v27 += 4;
      v32 += v33;
      v34 += v33;
      v35 += v33;
      a4 += v33;
    }
    while (v27 < v26);
  }
  return result;
}

double sub_20B816740(int16x8_t a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int v6;
  int16x8_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  double result;
  int8x16_t v13;

  v13 = (int8x16_t)vcgtzq_s16(a1);
  *(double *)v1.i64 = sub_20B81B96C(vnegq_s16((int16x8_t)vbslq_s8(v13, (int8x16_t)a1, (int8x16_t)vnegq_s16(a1))));
  v2.i64[0] = 0x8000800080008000;
  v2.i64[1] = 0x8000800080008000;
  v3 = vrhaddq_s16(v1, v2);
  v4.i64[0] = 0x5A5A5A5A5A5A5A5ALL;
  v4.i64[1] = 0x5A5A5A5A5A5A5A5ALL;
  v5 = vaddq_s16(vqrdmulhq_s16(v3, vdupq_n_s16(0xC3C4u)), v4);
  v6 = 3;
  v7.i64[0] = 0x2000200020002000;
  v7.i64[1] = 0x2000200020002000;
  do
  {
    v5 = vaddq_s16(vqshlq_n_s16(vqrdmulhq_s16(v5, vsubq_s16(v7, vqrdmulhq_s16(v3, v5))), 2uLL), v5);
    --v6;
  }
  while (v6);
  v8 = (int8x16_t)vqshlq_n_s16(v5, 1uLL);
  v9.i64[0] = 0x8000800080008000;
  v9.i64[1] = 0x8000800080008000;
  v10 = vorrq_s8(vbicq_s8(veorq_s8(v8, v9), v13), vandq_s8(v8, v13));
  v9.i64[0] = 0x4000400040004000;
  v9.i64[1] = 0x4000400040004000;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vceqzq_s16(a1), v9, v10).u64[0];
  return result;
}

double sub_20B8167D8(int16x8_t a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  double result;
  int8x16_t v11;

  v11 = (int8x16_t)vcltzq_s16(a1);
  *(double *)v1.i64 = sub_20B81BA64((int16x8_t)vbslq_s8(v11, (int8x16_t)a1, (int8x16_t)vnegq_s16(a1)));
  v2.i64[0] = 0x8000800080008000;
  v2.i64[1] = 0x8000800080008000;
  v3 = vrhaddq_s16(v1, v2);
  v4.i64[0] = 0x5A5A5A5A5A5A5A5ALL;
  v4.i64[1] = 0x5A5A5A5A5A5A5A5ALL;
  v5 = vaddq_s16(vqrdmulhq_s16(v3, vdupq_n_s16(0xC3C4u)), v4);
  v6 = 3;
  v7.i64[0] = 0x2000200020002000;
  v7.i64[1] = 0x2000200020002000;
  do
  {
    v5 = vaddq_s16(vqshlq_n_s16(vqrdmulhq_s16(v5, vsubq_s16(v7, vqrdmulhq_s16(v3, v5))), 2uLL), v5);
    --v6;
  }
  while (v6);
  v8.i64[0] = 0xE000E000E000E000;
  v8.i64[1] = 0xE000E000E000E000;
  v9 = vqshlq_n_s16(vaddq_s16(v5, v8), 2uLL);
  *(_QWORD *)&result = vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)vcgezq_s16(a1), (int8x16_t)v9), vandq_s8(v11, (int8x16_t)vnegq_s16(v9))), (int8x16_t)vceqzq_s16(a1)).u64[0];
  return result;
}

uint64_t sub_20B816870(int a1)
{
  __int16 v1;
  int v2;
  int v3;
  int v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  unsigned int v8;

  v1 = a1;
  v2 = (__int16)a1;
  if ((__int16)a1 <= 0)
    v3 = 0;
  else
    v3 = -1;
  if ((__int16)a1 <= 0)
    v4 = -a1;
  else
    LOWORD(v4) = 0;
  v5 = sub_20B81BCC4(-(v3 & a1 | v4));
  v6 = sub_20B81BB74(v5);
  v7 = v6 ^ 0x7FFF;
  if (v2 > 0)
    v7 = 0;
  v8 = v7 | v6 & v3;
  if (v1)
    return v8;
  else
    return 0x4000;
}

uint64_t sub_20B8168E0(__int16 a1)
{
  int v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a1;
  v3 = sub_20B81C01C((a1 >> 15) - (a1 ^ (unsigned __int16)(a1 >> 15)));
  v4 = sub_20B81BEC8(v3);
  if (v2 >= 0)
    v5 = v4;
  else
    v5 = -v4;
  if (a1)
    return v5;
  else
    return 0;
}

uint64_t sub_20B81692C(uint64_t a1, int a2, int *a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;

  *(_DWORD *)a1 = a2;
  if (a2 >= 5)
    *(_QWORD *)(a1 + 8) = operator new[]();
  v8 = a2 - *a3;
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (*(int *)a1 < 5)
        v11 = (_DWORD *)(a1 + v9 + 8);
      else
        v11 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v10);
      *v11 = a4;
      ++v10;
      v9 += 4;
    }
    while (4 * v8 != v9);
  }
  v12 = (_QWORD *)(a1 + 8);
  if (*(int *)a1 >= 5)
    v12 = (_QWORD *)*v12;
  v13 = (char *)v12 + 4 * v8;
  v14 = *a3;
  v17 = (int *)*((_QWORD *)a3 + 1);
  v16 = a3 + 2;
  v15 = v17;
  if (v14 <= 4)
    v18 = v16;
  else
    v18 = v15;
  memcpy(v13, v18, 4 * v14);
  return a1;
}

void sub_20B816A08(uint64_t a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7;
  int v8;
  __int32 v9;
  BOOL v10;
  int v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t (**v20)();
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  _QWORD v30[2];
  __int32 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v7 = *(_DWORD *)(a4 + 8);
  v8 = *(_DWORD *)(a4 + 12);
  v9 = a2[1].i32[1];
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      v20 = off_24C469460;
      sub_20B816BF8(a1, (unint64_t)&v20, (uint64_t)a2, a3, a4, a5, a6, a7);
    }
    else
    {
      v12 = *(_DWORD *)(a4 + 16);
      v32 = *(_QWORD *)a4;
      v33 = v8;
      v34 = v7;
      v35 = v12;
      v13 = a3[2].i32[0];
      v30[0] = *a3;
      v30[1] = vrev64_s32(a3[1]);
      v31 = v13;
      v14 = a2[1].i32[0];
      v15 = a2[2].i32[0];
      v26 = *a2;
      v27 = v9;
      v28 = v14;
      v29 = v15;
      v16 = *(_QWORD *)a6;
      v24 = *(_QWORD *)a5;
      v25 = v16;
      v17 = *(_DWORD *)(a7 + 8);
      v18 = *(_QWORD *)(a7 + 16);
      v19 = *(_DWORD *)(a7 + 24);
      v20 = *(uint64_t (***)())a7;
      v21 = v17;
      v22 = v18;
      v23 = v19;
      sub_20B816B00(a1, (uint64_t)v30, &v26, (uint64_t)&v32, &v25, &v24, (uint64_t)&v20);
    }
  }
}

void sub_20B816B00(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v12;
  __int32 v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t (**v20)();
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  _QWORD v30[2];
  __int32 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v7 = *(_DWORD *)(a4 + 8);
  v8 = *(_DWORD *)(a4 + 12);
  v9 = *(_DWORD *)(a2 + 12);
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      v20 = off_24C469460;
      sub_20B817048(a1, (unint64_t)&v20, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      v12 = *(_DWORD *)(a4 + 16);
      v32 = *(_QWORD *)a4;
      v33 = v8;
      v34 = v7;
      v35 = v12;
      v13 = a3[2].i32[0];
      v30[0] = *a3;
      v30[1] = vrev64_s32(a3[1]);
      v31 = v13;
      v14 = *(_DWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 16);
      v26 = *(_QWORD *)a2;
      v27 = v9;
      v28 = v14;
      v29 = v15;
      v16 = *(_QWORD *)a6;
      v24 = *(_QWORD *)a5;
      v25 = v16;
      v17 = *(_DWORD *)(a7 + 8);
      v18 = *(_QWORD *)(a7 + 16);
      v19 = *(_DWORD *)(a7 + 24);
      v20 = *(uint64_t (***)())a7;
      v21 = v17;
      v22 = v18;
      v23 = v19;
      sub_20B816A08(a1, v30, &v26, &v32, &v25, &v24, &v20);
    }
  }
}

void sub_20B816BF8(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  signed int v19;
  __int32 v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v49;
  int v50;
  int v51;
  _OWORD v52[5];
  unsigned int v53[4];
  int v54;
  uint64_t v55[2];
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;

  v9 = a3;
  v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1)
    goto LABEL_17;
  v12 = *(int *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v50 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254728068);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254728068))
    {
      dword_254728060 = sysconf(57);
      __cxa_guard_release(&qword_254728068);
    }
    v10 = dword_254728060;
  }
  v14 = v12 + 15;
  if ((int)v12 + 15 < 0)
    v14 = v12 + 30;
  v15 = v14 >> 4;
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  if (v16 >= 2)
  {
    v17 = (unint64_t)(v11 * (uint64_t)(int)v12 * v50) >> 16;
    if (v16 < (int)v17)
      LODWORD(v17) = v16;
    if ((int)v17 <= 1)
      v16 = 1;
    else
      v16 = v17;
  }
  if (v16 == 1)
  {
LABEL_17:
    sub_20B81A420(a1, a2, v9, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_20B81776C(v53, v12, v11, v50, v16, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_20B819A88((uint64_t)v52, 1, (_QWORD *)a1, v53);
    sub_20B817834(a1);
    if (v11 >= 1)
    {
      v18 = 0;
      v42 = v11;
      v19 = v54;
      do
      {
        v20 = a4[2].i32[0];
        v51 = v18;
        v21 = (uint64_t *)(*(_QWORD *)a4 + v20 * v18);
        if (v11 - v18 < v19)
          v19 = v11 - v18;
        v49 = v19;
        v57 = (uint64_t *)__PAIR64__(v50, v19);
        LODWORD(v58) = v20;
        v55[0] = (uint64_t)v52;
        v55[1] = (uint64_t)&v56;
        v56 = v21;
        sub_20B8181DC(v55);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        if (v16 >= 1)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            if ((int)((++v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC) >= (int)v12)
              v24 = v12;
            else
              v24 = (v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC;
            v25 = *(_QWORD *)v9;
            v26 = v9;
            v27 = *(_DWORD *)(v9 + 16);
            v28 = operator new();
            v29 = v28;
            v30 = v52[0];
            *(_OWORD *)(v28 + 72) = v52[1];
            v31 = v52[3];
            *(_OWORD *)(v28 + 88) = v52[2];
            *(_OWORD *)(v28 + 104) = v31;
            *(_OWORD *)(v28 + 120) = v52[4];
            *(_QWORD *)v28 = &off_24C4694E0;
            *(_QWORD *)(v28 + 8) = 0;
            *(_QWORD *)(v28 + 16) = a1;
            *(_QWORD *)(v28 + 24) = a2;
            *(_QWORD *)(v28 + 32) = v25 + (int)(v27 * v23);
            *(_DWORD *)(v28 + 40) = v24 - v23;
            *(_DWORD *)(v28 + 44) = v50;
            *(_DWORD *)(v28 + 48) = v27;
            *(_OWORD *)(v28 + 56) = v30;
            *(_QWORD *)(v28 + 136) = *(_QWORD *)a5;
            *(_QWORD *)(v28 + 144) = *(_QWORD *)(a5 + 8);
            *(_DWORD *)(v28 + 152) = *(_DWORD *)(a5 + 16);
            *(_DWORD *)(v28 + 160) = v23;
            *(_DWORD *)(v28 + 164) = v51;
            *(_DWORD *)(v28 + 168) = v24 - v23;
            *(_DWORD *)(v28 + 172) = v49;
            *(_QWORD *)(v28 + 176) = a6;
            *(_QWORD *)(v28 + 184) = a7;
            *(_QWORD *)(v28 + 192) = v53;
            *(_QWORD *)(v28 + 200) = a8;
            v32 = v57;
            if (v57 >= v58)
            {
              v34 = v57 - v56;
              if ((unint64_t)(v34 + 1) >> 61)
                sub_20B80CDD8();
              v9 = v26;
              v35 = ((char *)v58 - (char *)v56) >> 2;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if ((unint64_t)((char *)v58 - (char *)v56) >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v37 = (char *)sub_20B800BE8((uint64_t)&v58, v36);
              else
                v37 = 0;
              v38 = (uint64_t *)&v37[8 * v34];
              *v38 = v29;
              v33 = v38 + 1;
              v40 = v56;
              v39 = v57;
              if (v57 != v56)
              {
                do
                {
                  v41 = *--v39;
                  *--v38 = v41;
                }
                while (v39 != v40);
                v39 = v56;
              }
              v56 = v38;
              v57 = v33;
              v58 = (uint64_t *)&v37[8 * v36];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v57 = v28;
              v33 = v32 + 1;
              v9 = v26;
            }
            v57 = v33;
            v23 = v24;
          }
          while (v22 != v16);
        }
        sub_20B8178D8(a1 + 104, &v56);
        v11 = v42;
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }
        v19 = v54;
        v18 = v54 + v51;
      }
      while (v54 + v51 < v42);
    }
    *(_BYTE *)a1 = 0;
    ++*(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_20B816FFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254728068);
  _Unwind_Resume(a1);
}

void sub_20B817048(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  signed int v19;
  __int32 v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v49;
  int v50;
  int v51;
  _OWORD v52[5];
  unsigned int v53[4];
  int v54;
  uint64_t v55[2];
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;

  v9 = a3;
  v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1)
    goto LABEL_17;
  v12 = *(int *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v50 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254728068);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254728068))
    {
      dword_254728060 = sysconf(57);
      __cxa_guard_release(&qword_254728068);
    }
    v10 = dword_254728060;
  }
  v14 = v12 + 15;
  if ((int)v12 + 15 < 0)
    v14 = v12 + 30;
  v15 = v14 >> 4;
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  if (v16 >= 2)
  {
    v17 = (unint64_t)(v11 * (uint64_t)(int)v12 * v50) >> 16;
    if (v16 < (int)v17)
      LODWORD(v17) = v16;
    if ((int)v17 <= 1)
      v16 = 1;
    else
      v16 = v17;
  }
  if (v16 == 1)
  {
LABEL_17:
    sub_20B817494(a1, a2, v9, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_20B81776C(v53, v12, v11, v50, v16, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_20B819A88((uint64_t)v52, 1, (_QWORD *)a1, v53);
    sub_20B817834(a1);
    if (v11 >= 1)
    {
      v18 = 0;
      v42 = v11;
      v19 = v54;
      do
      {
        v20 = a4[2].i32[0];
        v51 = v18;
        v21 = (uint64_t *)(*(_QWORD *)a4 + v20 * v18);
        if (v11 - v18 < v19)
          v19 = v11 - v18;
        v49 = v19;
        v57 = (uint64_t *)__PAIR64__(v50, v19);
        LODWORD(v58) = v20;
        v55[0] = (uint64_t)v52;
        v55[1] = (uint64_t)&v56;
        v56 = v21;
        sub_20B8181DC(v55);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        if (v16 >= 1)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            if ((int)((++v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC) >= (int)v12)
              v24 = v12;
            else
              v24 = (v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC;
            v25 = *(_QWORD *)v9;
            v26 = v9;
            v27 = *(_DWORD *)(v9 + 16);
            v28 = operator new();
            v29 = v28;
            v30 = v52[0];
            *(_OWORD *)(v28 + 72) = v52[1];
            v31 = v52[3];
            *(_OWORD *)(v28 + 88) = v52[2];
            *(_OWORD *)(v28 + 104) = v31;
            *(_OWORD *)(v28 + 120) = v52[4];
            *(_QWORD *)v28 = &off_24C469508;
            *(_QWORD *)(v28 + 8) = 0;
            *(_QWORD *)(v28 + 16) = a1;
            *(_QWORD *)(v28 + 24) = a2;
            *(_QWORD *)(v28 + 32) = v25 + (int)(v27 * v23);
            *(_DWORD *)(v28 + 40) = v24 - v23;
            *(_DWORD *)(v28 + 44) = v50;
            *(_DWORD *)(v28 + 48) = v27;
            *(_OWORD *)(v28 + 56) = v30;
            *(_QWORD *)(v28 + 136) = *(_QWORD *)a5;
            *(_QWORD *)(v28 + 144) = *(_QWORD *)(a5 + 8);
            *(_DWORD *)(v28 + 152) = *(_DWORD *)(a5 + 16);
            *(_DWORD *)(v28 + 160) = v23;
            *(_DWORD *)(v28 + 164) = v51;
            *(_DWORD *)(v28 + 168) = v24 - v23;
            *(_DWORD *)(v28 + 172) = v49;
            *(_QWORD *)(v28 + 176) = a6;
            *(_QWORD *)(v28 + 184) = a7;
            *(_QWORD *)(v28 + 192) = v53;
            *(_QWORD *)(v28 + 200) = a8;
            v32 = v57;
            if (v57 >= v58)
            {
              v34 = v57 - v56;
              if ((unint64_t)(v34 + 1) >> 61)
                sub_20B80CDD8();
              v9 = v26;
              v35 = ((char *)v58 - (char *)v56) >> 2;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if ((unint64_t)((char *)v58 - (char *)v56) >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v37 = (char *)sub_20B800BE8((uint64_t)&v58, v36);
              else
                v37 = 0;
              v38 = (uint64_t *)&v37[8 * v34];
              *v38 = v29;
              v33 = v38 + 1;
              v40 = v56;
              v39 = v57;
              if (v57 != v56)
              {
                do
                {
                  v41 = *--v39;
                  *--v38 = v41;
                }
                while (v39 != v40);
                v39 = v56;
              }
              v56 = v38;
              v57 = v33;
              v58 = (uint64_t *)&v37[8 * v36];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v57 = v28;
              v33 = v32 + 1;
              v9 = v26;
            }
            v57 = v33;
            v23 = v24;
          }
          while (v22 != v16);
        }
        sub_20B8178D8(a1 + 104, &v56);
        v11 = v42;
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }
        v19 = v54;
        v18 = v54 + v51;
      }
      while (v54 + v51 < v42);
    }
    *(_BYTE *)a1 = 0;
    ++*(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_20B81744C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254728068);
  _Unwind_Resume(a1);
}

void sub_20B817494(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int32 v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  __int32 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _DWORD v40[2];
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int *v45;
  _BYTE v46[16];
  uint64_t v47;
  unsigned __int8 v48;
  _BYTE v49[16];
  uint64_t v50;
  unsigned __int8 v51;
  unsigned int v52[3];
  int v53;
  int v54;
  _BYTE *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  _BYTE *v60;
  _BYTE *v61;

  v10 = *(_DWORD *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v13 = *(_DWORD *)(a3 + 12);
  sub_20B81776C(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_20B819A88((uint64_t)v49, 0, (_QWORD *)a1, v52);
  sub_20B819A88((uint64_t)v46, 1, (_QWORD *)a1, v52);
  v41 = a1;
  v45 = v52;
  v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8 * v15 + 40) = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 80);
  v32 = (_QWORD *)(a1 + 24);
  v33 = a1;
  ++*(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) += v14;
  v42 = v15;
  v43 = v16;
  v44 = 5;
  sub_20B817834(a1);
  v17 = v54;
  if (v54 >= v11)
  {
    v18 = (unint64_t)*a4;
    v19 = a4[2].i32[0];
    v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    v55 = v46;
    v56 = &v57;
    v57 = v18;
    sub_20B8181DC((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    v20 = 0;
    v21 = v53;
    v34 = v10;
    do
    {
      v22 = *(_DWORD *)(a3 + 16);
      v23 = *(_QWORD *)a3 + v22 * v20;
      if (v10 - v20 >= v21)
        v24 = v21;
      else
        v24 = v10 - v20;
      v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      v55 = v49;
      v56 = &v57;
      v57 = v23;
      sub_20B8181DC((uint64_t *)&v55);
      if (v11 >= 1)
      {
        v25 = 0;
        v26 = v54;
        do
        {
          if (v11 - v25 >= v26)
            v27 = v26;
          else
            v27 = v11 - v25;
          if (v17 < v11)
          {
            v28 = a4[2].i32[0];
            v29 = *(_QWORD *)a4 + v28 * v25;
            v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            v55 = v46;
            v56 = &v57;
            v57 = v29;
            sub_20B8181DC((uint64_t *)&v55);
          }
          v57 = a2;
          v58 = v52;
          v59 = &v41;
          v60 = v49;
          v61 = v46;
          sub_20B818748((uint64_t)&v57, v13);
          v57 = __PAIR64__(v25, v20);
          v58 = (unsigned int *)__PAIR64__(v27, v24);
          v30 = *(_QWORD *)(v50 + 8 * v51 + 40) + *(_QWORD *)(v50 + 16);
          v31 = *(_QWORD *)(v47 + 8 * v48 + 40) + *(_QWORD *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_20B817990(a5, (int *)&v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      v21 = v53;
      v20 += v53;
      v10 = v34;
    }
    while (v20 < v34);
  }
  *(_BYTE *)v33 = 0;
  ++*(_QWORD *)(v33 + 80);
  *v32 = 0;
  v32[1] = 0;
}

uint64_t sub_20B81776C(unsigned int *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t result;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;

  result = sub_20B8199D8(a2, a3, a4, a5, a7, a1 + 3, a1 + 4, (signed int *)a1 + 5, a8);
  v11 = a1[4];
  v12 = a6 - 64;
  if (a6 < 64)
    v12 = a6 - 57;
  v13 = v12 >> 3;
  if (v13 <= 1)
    v13 = 1;
  v14 = a1[5] - 1;
  v15 = (v14 + v13) / v13;
  if (v15 <= 1)
    v15 = 1;
  v16 = ((v15 + v14) / v15 + 15) & 0xFFFFFFF0;
  v17 = a6 / (int)(v16 + 4 * v11);
  if (v17 <= 1)
    v17 = 1;
  v18 = a1[3] - 1;
  v19 = (v17 + v18) / v17;
  if (v19 <= 1)
    v19 = 1;
  *a1 = ((v19 + v18) / v19 + 3) & 0xFFFFFFFC;
  a1[1] = v11;
  a1[2] = v16;
  return result;
}

uint64_t sub_20B817834(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  void *v6;
  void *memptr;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 32) > v2)
  {
    free(*(void **)(result + 16));
    v3 = (*(_QWORD *)(v1 + 32) - 1) | ((unint64_t)(*(_QWORD *)(v1 + 32) - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = (v4 | (v4 >> 8) | ((v4 | (v4 >> 8)) >> 16)) + 1;
    *(_QWORD *)(v1 + 8) = v5;
    memptr = 0;
    result = malloc_type_posix_memalign(&memptr, 0x40uLL, v5, 0x56F76EAAuLL);
    v6 = memptr;
    if ((_DWORD)result)
      v6 = 0;
    *(_QWORD *)(v1 + 16) = v6;
    v2 = *(_QWORD *)(v1 + 8);
  }
  if (v2 && !*(_QWORD *)(v1 + 16))
    sub_20B824914();
  *(_BYTE *)v1 = 1;
  return result;
}

void sub_20B8178D8(uint64_t a1, uint64_t **a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;

  v4 = a2[1] - *a2 - 1;
  sub_20B819D68((uint64_t **)a1, v4);
  atomic_store(v4, (unint64_t *)(a1 + 24));
  v8 = 0;
  sub_20B819EEC(*a2, a2[1] - 1, (_QWORD *)a1, &v8);
  v5 = (_QWORD *)*(a2[1] - 1);
  v5[1] = a1 + 32;
  (*(void (**)(_QWORD *))(*v5 + 16))(v5);
  sub_20B819F54((unint64_t *)(a1 + 24));
  v7 = *a2;
  v6 = a2[1];
  while (v7 != v6)
  {
    if (*v7)
      (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 8))(*v7);
    ++v7;
  }
}

void sub_20B817990(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  _DWORD *v9;
  int *v10;
  int v11;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v39;
  uint64_t v40;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v55;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v67;
  uint64_t v68;
  uint64_t v73;
  int v74;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int16x8_t v101[8];
  _QWORD v102[2];
  int v103;
  _QWORD *v104[4];
  _QWORD *v105[4];
  _QWORD v106[4];
  _QWORD v107[4];
  _QWORD v108[4];
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int16x8_t v119[8];
  uint64_t v120;

  v9 = a8;
  v10 = a7;
  v11 = a4;
  v120 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a3 + 32);
  v116 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(_QWORD *)(*(_QWORD *)a3 + 16);
  v117 = *(_QWORD *)(v14 + 12);
  v118 = v117;
  v114 = a5;
  v15 = a2[3];
  v115 = a2[2];
  v112 = a6;
  v113 = v15;
  v109 = (_QWORD *)a9;
  v110 = a9 + 16;
  v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v111) = v16 & ~(v16 >> 31);
  HIDWORD(v111) = -v16 & ~(-v16 >> 31);
  v108[0] = a9;
  v108[1] = a9 + 16;
  v108[2] = v111;
  v107[0] = a9;
  v107[1] = a9 + 16;
  v107[2] = v111;
  v106[0] = a9;
  v106[1] = a9 + 16;
  v106[2] = v111;
  v105[0] = (_QWORD *)a9;
  v105[1] = (_QWORD *)(a9 + 16);
  v105[2] = v111;
  v104[0] = (_QWORD *)a9;
  v104[1] = (_QWORD *)(a9 + 16);
  v104[2] = v111;
  v17 = 0;
  if (v15 >= 8)
  {
    do
    {
      _X10 = v114;
      __asm { PRFM            #0, [X10] }
      _X10 = v114 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v116 + 4 * v118 * v17;
      v27 = 8;
      do
      {
        __asm { PRFM            #0, [X8] }
        _X11 = _X8 + 16;
        __asm { PRFM            #0, [X11] }
        _X8 += 4 * v118;
        --v27;
      }
      while (v27);
      LODWORD(v31) = a2[2];
      if ((int)v31 >= 8)
      {
        v33 = 0;
        v34 = 0;
        do
        {
          v35 = *a2;
          v32 = v34 + 8;
          _X11 = v114 + 4 * (v34 + 8);
          __asm { PRFM            #0, [X11] }
          _X11 += 16;
          __asm { PRFM            #0, [X11] }
          v39 = v116 + v33 + 4 * v17 * v118;
          v40 = 8;
          do
          {
            _X12 = v39 + 32;
            __asm { PRFM            #0, [X12] }
            _X12 = v39 + 48;
            __asm { PRFM            #0, [X12] }
            v39 += 4 * v118;
            --v40;
          }
          while (v40);
          v45 = v35 + v34;
          v102[0] = v119;
          v102[1] = 0x800000008;
          v103 = 8;
          sub_20B818914(&v116, v104, (uint64_t)v102, &v114, &v112, v10, a8, a4, v34, v17, v35 + v34, a2[1] + v17, 0, 0);
          v10 = a7;
          sub_20B818914(&v116, v104, (uint64_t)v102, &v114, &v112, a7, a8, a4, v34, v17 | 4, v45, a2[1] + (v17 | 4), 0, 4);
          v46 = a2[1];
          v47 = *a2 + v34;
          v101[4] = v119[4];
          v101[5] = v119[5];
          v101[6] = v119[6];
          v101[7] = v119[7];
          v101[0] = v119[0];
          v101[1] = v119[1];
          v101[2] = v119[2];
          v101[3] = v119[3];
          sub_20B8192C8(v101, a1, v47, v46 + v17);
          v31 = a2[2];
          v33 += 32;
          v34 += 8;
        }
        while (v32 <= v31 - 8);
        v9 = a8;
        v11 = a4;
      }
      else
      {
        LODWORD(v32) = 0;
      }
      for (; (int)v32 <= (int)v31 - 4; LODWORD(v31) = a2[2])
      {
        v48 = v32 + *a2;
        sub_20B818AFC((uint64_t)&v116, v105, a1, &v114, &v112, v10, v9, v11, v32, v17, v48, a2[1] + v17, v48, a2[1] + v17);
        sub_20B818AFC((uint64_t)&v116, v105, a1, &v114, &v112, v10, v9, v11, v32, v17 | 4, v48, a2[1] + (v17 | 4), v48, a2[1] + (v17 | 4));
        LODWORD(v32) = v32 + 4;
      }
      if ((int)v32 < (int)v31)
      {
        do
        {
          v49 = v32 + *a2;
          sub_20B818C5C((uint64_t)&v116, (uint64_t)v106, a1, &v114, &v112, v10, v9, v11, v32, v17, v49, a2[1] + v17, v49, a2[1] + v17);
          sub_20B818C5C((uint64_t)&v116, (uint64_t)v106, a1, &v114, &v112, v10, v9, v11, v32, v17 | 4, v49, a2[1] + (v17 | 4), v49, a2[1] + (v17 | 4));
          LODWORD(v32) = v32 + 1;
        }
        while ((int)v32 < a2[2]);
      }
      v17 += 8;
      v15 = a2[3];
    }
    while (v17 <= v15 - 8);
  }
  while (v17 <= v15 - 4)
  {
    _X11 = v114;
    __asm { PRFM            #0, [X11] }
    _X11 = v114 + 16;
    __asm { PRFM            #0, [X11] }
    _X9 = v116 + 4 * v118 * v17;
    v55 = 4;
    do
    {
      __asm { PRFM            #0, [X9] }
      _X12 = _X9 + 16;
      __asm { PRFM            #0, [X12] }
      _X9 += 4 * v118;
      --v55;
    }
    while (v55);
    v59 = a2[1] + v17;
    LODWORD(v60) = a2[2];
    if ((int)v60 >= 8)
    {
      v62 = 0;
      v63 = 0;
      do
      {
        v61 = v63 + 8;
        _X12 = v114 + 4 * (v63 + 8);
        __asm { PRFM            #0, [X12] }
        _X12 += 16;
        __asm { PRFM            #0, [X12] }
        v67 = v116 + v62 + 4 * v17 * v118;
        v68 = 4;
        do
        {
          _X13 = v67 + 32;
          __asm { PRFM            #0, [X13] }
          _X13 = v67 + 48;
          __asm { PRFM            #0, [X13] }
          v67 += 4 * v118;
          --v68;
        }
        while (v68);
        sub_20B818D9C((uint64_t)&v116, v104, a1, &v114, &v112, v10, a8, v11, v63, v17, *a2 + v63, v59, *a2 + v63, v59);
        v60 = a2[2];
        v62 += 32;
        v63 = v61;
      }
      while (v61 <= v60 - 8);
      v9 = a8;
    }
    else
    {
      LODWORD(v61) = 0;
    }
    while ((int)v61 <= (int)v60 - 4)
    {
      sub_20B818AFC((uint64_t)&v116, v105, a1, &v114, &v112, v10, v9, v11, v61, v17, v61 + *a2, v59, v61 + *a2, v59);
      LODWORD(v61) = v61 + 4;
      LODWORD(v60) = a2[2];
    }
    if ((int)v61 < (int)v60)
    {
      do
      {
        sub_20B818C5C((uint64_t)&v116, (uint64_t)v106, a1, &v114, &v112, v10, v9, v11, v61, v17, v61 + *a2, v59, v61 + *a2, v59);
        LODWORD(v61) = v61 + 1;
      }
      while ((int)v61 < a2[2]);
    }
    v17 += 4;
    v15 = a2[3];
  }
  if (v17 < v15)
  {
    v73 = v17;
    do
    {
      v74 = a2[1] + v73;
      _X10 = v114;
      __asm { PRFM            #0, [X10] }
      _X10 = v114 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v116 + 4 * v118 * (int)v73;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        v83 = 0;
        v84 = 32;
        do
        {
          v85 = v83;
          v83 += 8;
          _X12 = v114 + v84;
          __asm { PRFM            #0, [X12] }
          _X12 = v114 + v84 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v116 + 4 * (int)v73 * v118 + v84;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_20B818FA0((uint64_t)&v116, (uint64_t)v107, a1, &v114, &v112, v10, a8, v11, v85, v73, v85 + *a2, v74, v85 + *a2, v74);
          _X8 = a2[2];
          v84 += 32;
        }
        while (v83 <= _X8 - 8);
      }
      else
      {
        LODWORD(v83) = 0;
      }
      if ((int)v83 <= (int)_X8 - 4)
      {
        v93 = 4 * v83;
        do
        {
          sub_20B819878((uint64_t)v108, a1, vaddq_s32(vmlaq_s32(*(int32x4_t *)(v116 + 4 * (int)v73 * v118 + v93), vdupq_n_s32(*a8 + 128), *(int32x4_t *)(v114 + v93)), vdupq_n_s32((*(_DWORD *)(v112 + 4 * v73) + (*a8 + 128) * v11) * (*v10 + 128))), (v83 + *a2), v74, v83 + *a2, v74);
          LODWORD(_X8) = a2[2];
          LODWORD(v83) = v83 + 4;
          v93 += 16;
        }
        while ((int)_X8 - 4 >= (int)v83);
      }
      if ((int)v83 < (int)_X8)
      {
        v94 = 4 * v83;
        do
        {
          v95 = v83 + *a2;
          v96 = sub_20B819934(&v110, *(_DWORD *)(v116 + 4 * (int)v73 * v118 + v94)+ (*a8 + 128) * *(_DWORD *)(v114 + v94)+ *(_DWORD *)(*v109 + 4 * v74)+ (*(_DWORD *)(v112 + 4 * v73) + (*a8 + 128) * v11) * (*a7 + 128));
          if (v96 <= -32768)
            v97 = -32768;
          else
            v97 = v96;
          if (v97 >= 0x7FFF)
            LOWORD(v97) = 0x7FFF;
          *(_WORD *)(*(_QWORD *)a1 + 2 * *(_DWORD *)(a1 + 16) * v95 + 2 * v74) = v97;
          LODWORD(v83) = v83 + 1;
          v94 += 4;
        }
        while (a2[2] > (int)v83);
      }
      ++v73;
      v10 = a7;
    }
    while (a2[3] > (int)v73);
  }
}

void sub_20B8181DC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t i;
  int v14;
  int v15;

  bzero((void *)(*(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8 * *(unsigned __int8 *)(*a1 + 48) + 40)+ *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 16)), 4 * *(int *)(*a1 + 8));
  v2 = a1[1];
  v3 = *(_DWORD *)(v2 + 12);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = (int *)*a1;
    v6 = *(_DWORD *)(*a1 + 4);
    do
    {
      v7 = v3 - v4;
      if (v7 >= v6)
        v8 = v6;
      else
        v8 = v7;
      v9 = *(_DWORD *)(v2 + 8);
      if (v9 >= 1)
      {
        v10 = 0;
        v11 = *v5;
        do
        {
          if (v9 - v10 >= v11)
            v12 = v11;
          else
            v12 = v9 - v10;
          if ((int)v8 >= 1)
          {
            for (i = 0; i < v8; i += 64)
            {
              if (v12 >= 1)
              {
                v14 = v10;
                v15 = v12;
                do
                {
                  _X12 = *(_QWORD *)a1[1] + *(int *)(a1[1] + 16) * (uint64_t)v14 + i + v4;
                  __asm { PRFM            #0, [X12] }
                  ++v14;
                  --v15;
                }
                while (v15);
              }
            }
          }
          sub_20B81830C(a1, v10, v12, v4, v8);
          v5 = (int *)*a1;
          v2 = a1[1];
          v11 = *(_DWORD *)*a1;
          v10 += v11;
          v9 = *(_DWORD *)(v2 + 8);
        }
        while (v10 < v9);
        v6 = v5[1];
      }
      v4 += v6;
      v3 = *(_DWORD *)(v2 + 12);
    }
    while (v4 < v3);
  }
}

void sub_20B81830C(uint64_t *a1, int a2, int a3, int a4, int a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (a3 >= 1)
  {
    v10 = 0;
    v11 = a3;
    do
    {
      v12 = v11 - 4;
      if (v11 >= 4)
        v13 = 4;
      else
        v13 = v11;
      v14 = a2 + v10;
      v15 = *(_DWORD *)(*a1 + 12) - a4;
      if (v15 >= *(_DWORD *)(*a1 + 4))
        v15 = *(_DWORD *)(*a1 + 4);
      *(_DWORD *)(*a1 + 72) = v15 * v14 + *(_DWORD *)(*a1 + 8) * a4;
      sub_20B8183B4(a1, v14, v13, a4, a5);
      v10 += 4;
      v11 = v12;
    }
    while (v10 < a3);
  }
}

void sub_20B8183B4(uint64_t *a1, int a2, int a3, int a4, int a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  __int128 v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  __int128 *v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (a3 == 4)
  {
    v9 = a5 & 0xFFFFFFFFFFFFFFF0;
    if ((int)v9 >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *a1;
        v12 = a1[1];
        v13 = *(_QWORD *)v12;
        LODWORD(v12) = *(_DWORD *)(v12 + 16);
        v35 = (__int128 *)(v13 + (int)v12 * (uint64_t)a2 + a4 + v10);
        v36 = 0x1000000004;
        v37 = v12;
        sub_20B818624((uint64_t)&v35, v11, a2);
        v10 += 16;
      }
      while (v10 < v9);
    }
    if ((int)v9 < a5)
    {
      v14 = 0;
      v15 = a1[1];
      v16 = v9 + a4;
      v17 = *(_DWORD *)(v15 + 16);
      v18 = *(_QWORD *)v15 + v17 * (uint64_t)a2 + v16;
      *(_QWORD *)&v19 = 0x8080808080808080;
      *((_QWORD *)&v19 + 1) = 0x8080808080808080;
      v38 = v19;
      v39 = v19;
      v40 = v19;
      v41 = v19;
      for (i = 24; i != 88; i += 16)
      {
        memcpy((char *)&v35 + i, (const void *)(v18 + v14), a5 & 0xF);
        v14 += v17;
      }
      v35 = &v38;
      v36 = 0x1000000004;
      v37 = 16;
      sub_20B818624((uint64_t)&v35, *a1, a2);
    }
  }
  else if (a5 >= 1)
  {
    v21 = 0;
    v32 = a4;
    do
    {
      v22 = a1[1];
      v23 = *(_QWORD *)v22;
      v24 = *(_DWORD *)(v22 + 16);
      *(_QWORD *)&v25 = 0x8080808080808080;
      *((_QWORD *)&v25 + 1) = 0x8080808080808080;
      v38 = v25;
      v39 = v25;
      v40 = v25;
      v41 = v25;
      if (a3 >= 1)
      {
        v26 = 0;
        v27 = 0;
        v28 = a3;
        v29 = v23 + v24 * (uint64_t)a2 + v21 + v32;
        v30 = a5 - v21;
        if (a5 - (int)v21 >= 16)
          v30 = 16;
        v31 = v30;
        do
        {
          memcpy((char *)&v38 + (v27 & 0xFFFFFFF0), (const void *)(v29 + v26), v31);
          v27 += 16;
          v26 += v24;
          --v28;
        }
        while (v28);
      }
      v35 = &v38;
      v36 = 0x1000000004;
      v37 = 16;
      sub_20B818624((uint64_t)&v35, *a1, a2);
      v21 += 16;
    }
    while (v21 < a5);
  }
}

int16x8_t sub_20B818624(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  int16x8_t result;
  int16x8_t v19[4];
  _OWORD v20[4];
  uint64_t v21;

  v3 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 + 40 + 8 * *(unsigned __int8 *)(a2 + 48));
  v6 = *(_QWORD *)(v4 + 40 + 8 * *(unsigned __int8 *)(a2 + 24));
  v7 = *(_QWORD *)(v4 + 16);
  v8 = v6 + v7;
  v9 = *(int *)(a2 + 72);
  v10 = *(_OWORD **)a1;
  v11 = *(int *)(a1 + 16);
  do
  {
    v20[v3] = *v10;
    v10 = (_OWORD *)((char *)v10 + v11);
    ++v3;
  }
  while (v3 != 4);
  v12 = 0;
  v13.i64[0] = 0x8080808080808080;
  v13.i64[1] = 0x8080808080808080;
  do
  {
    v20[v12] = veorq_s8((int8x16_t)v20[v12], v13);
    ++v12;
  }
  while (v12 != 4);
  v14 = 0;
  v15 = (_OWORD *)(v8 + v9);
  v16 = v20[1];
  *v15 = v20[0];
  v15[1] = v16;
  v17 = v20[3];
  v15[2] = v20[2];
  v15[3] = v17;
  do
  {
    v19[v14] = vaddw_high_s8(vmovl_s8(*(int8x8_t *)&v20[v14]), (int8x16_t)v20[v14]);
    ++v14;
  }
  while (v14 != 4);
  result = vpaddq_s16(vpaddq_s16(v19[0], v19[1]), vpaddq_s16(v19[2], v19[3]));
  *(int32x4_t *)(v5 + v7 + 4 * a3) = vpadalq_s16(*(int32x4_t *)(v5 + v7 + 4 * a3), result);
  *(_DWORD *)(a2 + 72) += 64;
  return result;
}

uint64_t sub_20B818748(uint64_t result, int a2)
{
  signed int v2;
  _QWORD *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int i;
  int j;

  v2 = (a2 + 15) & 0xFFFFFFF0;
  if (v2 >= 1)
  {
    v3 = (_QWORD *)result;
    v4 = 0;
    v5 = *(int **)(result + 8);
    v6 = v5[2];
    do
    {
      if (v2 - v4 >= v6)
        v7 = v6;
      else
        v7 = v2 - v4;
      v8 = v5[3];
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = *v5;
        do
        {
          v11 = v8 - v9;
          if (v11 >= v10)
            v12 = v10;
          else
            v12 = v11;
          v13 = v5[4];
          if (v13 >= 1)
          {
            for (i = 0; i < v13; i += 4)
            {
              if (v12 >= 1)
              {
                for (j = 0; j < v12; j += 4)
                  result = sub_20B818840(v3, v9 + j, i, v4, v7);
              }
            }
            v5 = (int *)v3[1];
          }
          v10 = *v5;
          v9 += *v5;
          v8 = v5[3];
        }
        while (v9 < v8);
        v6 = v5[2];
      }
      v4 += v6;
    }
    while (v4 < v2);
  }
  return result;
}

uint64_t sub_20B818840(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a1[2];
  v6 = a1[3];
  v7 = *(_DWORD *)(v6 + 12) - a4;
  if (v7 >= *(_DWORD *)(v6 + 4))
    v7 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 72) = v7 * a2 + *(_DWORD *)(v6 + 8) * a4;
  v8 = a1[4];
  v9 = *(_DWORD *)(v8 + 12) - a4;
  if (v9 >= *(_DWORD *)(v8 + 4))
    v9 = *(_DWORD *)(v8 + 4);
  v10 = v9 * a3 + *(_DWORD *)(v8 + 8) * a4;
  *(_DWORD *)(v8 + 72) = v10;
  v11 = *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned __int8 *)(v5 + 8) + 40) + *(_QWORD *)(*(_QWORD *)v5 + 16);
  v12 = *(int *)(*(_QWORD *)(v5 + 32) + 12);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 8))(*a1, v11 + 4 * a2 + 4 * (int)v12 * a3, 1, v12, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * *(unsigned __int8 *)(v6 + 24) + 40)+ *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16)+ *(int *)(v6 + 72), *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * *(unsigned __int8 *)(v8 + 24) + 40)+ *(_QWORD *)(*(_QWORD *)(v8 + 16) + 16)+ v10, a4, a5);
}

void sub_20B818914(uint64_t *a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  int32x4_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int32x4_t v30;
  __int8 *v31;
  uint64_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int32x4_t v38[8];
  _OWORD v39[2];
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  _OWORD v48[4];
  uint64_t v49;

  v14 = 0;
  v49 = *MEMORY[0x24BDAC8D0];
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v15 = *a1;
  v16 = *((int *)a1 + 4);
  v17 = (__int128 *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + v15 + 16);
  v18 = 4 * v16;
  do
  {
    v19 = *v17;
    v20 = &v40.i8[v14];
    *(_OWORD *)v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v14 += 32;
    v17 = (__int128 *)((char *)v17 + v18);
  }
  while (v14 != 128);
  v21 = 0;
  v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v39[0] = *(_OWORD *)(*a4 + 4 * a9);
  v39[1] = v22;
  v23 = *(int32x4_t *)(*a5 + 4 * a10);
  v24 = *a6;
  v25 = *a7 + 128;
  v26 = vdupq_n_s32(v25);
  v27 = 1;
  do
  {
    v28 = 0;
    v29 = v27;
    v30 = vmulq_s32((int32x4_t)v39[v21], v26);
    v31 = &v40.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    v27 = 0;
    v21 = 1;
  }
  while ((v29 & 1) != 0);
  v32 = 0;
  v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v48[0] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v48[1] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v48[2] = vdupq_laneq_s32(v33, 2);
  v48[3] = vdupq_laneq_s32(v33, 3);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = v34;
    v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v40 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v40 + v37), (int32x4_t)v48[v35++]);
      v37 += 32;
    }
    while (v35 != 4);
    v34 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  v38[4] = v44;
  v38[5] = v45;
  v38[6] = v46;
  v38[7] = v47;
  v38[0] = v40;
  v38[1] = v41;
  v38[2] = v42;
  v38[3] = v43;
  sub_20B819078(a2, v38, a3, a11, a12, a13, a14);
}

double sub_20B818AFC(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  int32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int v21;
  unsigned int v22;
  int32x4_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;

  v14 = 0;
  v35 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (int32x4_t *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    *(int32x4_t *)((char *)&v31 + v14) = *v16;
    v14 += 16;
    v16 = (int32x4_t *)((char *)v16 + v17);
  }
  while (v14 != 64);
  v18 = 0;
  v19 = *(int32x4_t *)(*a4 + 4 * a9);
  v27 = v31;
  v28 = v32;
  v29 = v33;
  v30 = v34;
  v20 = *(int32x4_t *)(*a5 + 4 * a10);
  v21 = *a6;
  v22 = *a7 + 128;
  v23 = vmulq_s32(vdupq_n_s32(v22), v19);
  do
  {
    *(int32x4_t *)((char *)&v27 + v18) = vaddq_s32(*(int32x4_t *)((char *)&v27 + v18), v23);
    v18 += 16;
  }
  while (v18 != 64);
  v24 = 0;
  v25 = vmulq_s32(vaddq_s32(vdupq_n_s32(v22 * a8), v20), vdupq_n_s32(v21 + 128));
  v31 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  v32 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  v33 = vdupq_laneq_s32(v25, 2);
  v34 = vdupq_laneq_s32(v25, 3);
  do
  {
    *(int32x4_t *)((char *)&v27 + v24) = vaddq_s32(*(int32x4_t *)((char *)&v27 + v24), *(int32x4_t *)((char *)&v31 + v24));
    v24 += 16;
  }
  while (v24 != 64);
  return sub_20B8194A0(a2, a3, v27, v28, v29, v30, a11, a12, a13, a14);
}

int16x4_t sub_20B818C5C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  __int32 *v16;
  uint64_t v17;
  const float *v18;
  const float *v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x4_t result;
  int32x4_t v25;
  uint64_t v26;

  v14 = 0;
  v26 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (__int32 *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    v25.i32[v14++] = *v16;
    v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  v18 = *(const float **)(a2 + 8);
  v19 = v18 + 2;
  v20 = (int32x4_t)vld1q_dup_f32(v19);
  v21 = (int32x4_t)vld1q_dup_f32(v18);
  v22 = vqrdmulhq_s32(vshlq_s32(vmlaq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(**(_QWORD **)a2 + 4 * a12), v25), vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9))), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128)), vdupq_lane_s32(*(int32x2_t *)(a2 + 16), 0)), v21);
  v23 = vdupq_n_s32(-HIDWORD(*(_QWORD *)(a2 + 16)));
  result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v22, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)v22))), v23), v20));
  *(int16x4_t *)(*(_QWORD *)a3 + 2 * *(_DWORD *)(a3 + 16) * a13 + 2 * a14) = result;
  return result;
}

double sub_20B818D9C(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  int32x4_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int32x4_t v30;
  __int8 *v31;
  uint64_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  _OWORD v43[2];
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int16x8_t v52[4];
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v15 = 0;
  v61 = *MEMORY[0x24BDAC8D0];
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v16 = *(int *)(a1 + 16);
  v17 = (__int128 *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(_QWORD *)a1 + 16);
  v18 = 4 * v16;
  do
  {
    v19 = *v17;
    v20 = &v44.i8[v15];
    *(_OWORD *)v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    v17 = (__int128 *)((char *)v17 + v18);
  }
  while (v15 != 128);
  v21 = 0;
  v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v43[0] = *(_OWORD *)(*a4 + 4 * a9);
  v43[1] = v22;
  v23 = *(int32x4_t *)(*a5 + 4 * a10);
  v24 = *a6;
  v25 = *a7 + 128;
  v26 = vdupq_n_s32(v25);
  v27 = 1;
  do
  {
    v28 = 0;
    v29 = v27;
    v30 = vmulq_s32((int32x4_t)v43[v21], v26);
    v31 = &v44.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    v27 = 0;
    v21 = 1;
  }
  while ((v29 & 1) != 0);
  v32 = 0;
  v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v53 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v54 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v55 = vdupq_laneq_s32(v33, 2);
  v56 = vdupq_laneq_s32(v33, 3);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = v34;
    v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v44 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v44 + v37), *(int32x4_t *)((char *)&v53 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    v34 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v60 = v51;
  v53 = v44;
  v54 = v45;
  v55 = v46;
  v56 = v47;
  *(double *)v38.i64 = sub_20B819144(a2, &v53, a11, a12);
  v52[0] = v38;
  v52[1] = v39;
  v52[2] = v40;
  v52[3] = v41;
  return sub_20B81962C(v52, a3, a13, a14);
}

double sub_20B818FA0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  unsigned int v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  double result;
  int16x8_t v22;

  v15 = 4 * *(_DWORD *)(a1 + 16) * a10;
  v16 = *a7 + 128;
  v17 = vdupq_n_s32(v16);
  v18 = vdupq_n_s32(*(_DWORD *)(**(_QWORD **)a2 + 4 * a12) + (*(_DWORD *)(*a5 + 4 * a10) + v16 * a8) * (*a6 + 128));
  *(double *)v19.i64 = sub_20B819724((const float *)(a2 + 8), *(double *)vmlaq_s32(vaddq_s32(v18, *(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + v15)), v17, *(int32x4_t *)(*a4 + 4 * a9)).i64, (int32x2_t)*(_OWORD *)&vmlaq_s32(vaddq_s32(v18, *(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + 16 + v15)), v17, *(int32x4_t *)(*a4 + 4 * a9 + 16)));
  v22 = vqmovn_high_s32(vqmovn_s32(v19), v20);
  *(_QWORD *)&result = sub_20B81979C((__n128 *)&v22, a3, a13, a14).n128_u64[0];
  return result;
}

void sub_20B819078(_QWORD **a1, int32x4_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int32x4_t v18[8];

  v10 = a2[5];
  v18[4] = a2[4];
  v18[5] = v10;
  v11 = a2[7];
  v18[6] = a2[6];
  v18[7] = v11;
  v12 = a2[1];
  v18[0] = *a2;
  v18[1] = v12;
  v13 = a2[3];
  v18[2] = a2[2];
  v18[3] = v13;
  *(double *)&v14 = sub_20B819144(a1, v18, a4, a5);
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * a7) = v14;
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * (*(_DWORD *)(a3 + 16) + *(_DWORD *)(a3 + 16) * a7)) = v15;
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 2)) = v16;
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 3)) = v17;
}

double sub_20B819144(_QWORD **a1, int32x4_t *a2, uint64_t a3, int a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  double result;
  _OWORD v18[8];
  int32x4_t v19;
  int32x4_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = *(int32x4_t *)(**a1 + 4 * a4);
  v5 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 0);
  v6 = vaddq_s32(v5, *a2);
  v7 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 1);
  v8 = vaddq_s32(v5, a2[1]);
  v9 = vaddq_s32(v7, a2[2]);
  v10 = vaddq_s32(v7, a2[3]);
  v11 = vdupq_laneq_s32(v4, 2);
  v12 = vaddq_s32(v11, a2[4]);
  v13 = vaddq_s32(v11, a2[5]);
  v14 = vdupq_laneq_s32(v4, 3);
  v15 = vaddq_s32(v14, a2[6]);
  v16 = vaddq_s32(v14, a2[7]);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18[0] = v6;
  v18[1] = v8;
  v18[2] = v9;
  v18[3] = v10;
  v18[4] = v12;
  v18[5] = v13;
  v18[6] = v15;
  v18[7] = v16;
  sub_20B819214((uint64_t)(a1 + 1), v18, &v19);
  *(_QWORD *)&result = vqmovn_high_s32(vqmovn_s32(v19), v20).u64[0];
  return result;
}

double sub_20B819214@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  const float *v9;
  int32x4_t v10;
  const float *v11;
  int32x4_t v12;
  __int128 v13;
  int32x4_t v14;
  int32x4_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  _OWORD v21[8];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v3 = 0;
  v4 = a2[5];
  v21[4] = a2[4];
  v21[5] = v4;
  v5 = a2[7];
  v21[6] = a2[6];
  v21[7] = v5;
  v6 = a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  v13 = a2[2];
  v7 = a2[3];
  v8 = *(_DWORD **)a1;
  v9 = (const float *)(*(_QWORD *)a1 + 8);
  v10 = (int32x4_t)vld1q_dup_f32(v9);
  v11 = (const float *)(a1 + 8);
  v12 = (int32x4_t)vld1q_dup_f32(v11);
  v21[2] = v13;
  v21[3] = v7;
  LODWORD(v13) = *v8;
  v14 = vdupq_n_s32(-*(_DWORD *)(a1 + 12));
  do
  {
    v15 = vqrdmulhq_lane_s32(vshlq_s32((int32x4_t)v21[v3], v12), *(int32x2_t *)&v13, 0);
    v22[v3++] = vaddq_s32(vrshlq_s32(vqaddq_s32(v15, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)v14))), v14), v10);
  }
  while (v3 != 8);
  v16 = v26;
  a3[4] = v25;
  a3[5] = v16;
  v17 = v28;
  a3[6] = v27;
  a3[7] = v17;
  v18 = v22[1];
  *a3 = v22[0];
  a3[1] = v18;
  result = *(double *)&v23;
  v20 = v24;
  a3[2] = v23;
  a3[3] = v20;
  return result;
}

double sub_20B8192C8(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int16x8_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;

  v4 = a1[1];
  v5 = (int32x4_t)vtrn1q_s16(*a1, v4);
  v6 = (int32x4_t)vtrn2q_s16(*a1, v4);
  v7 = a1[2];
  v8 = a1[3];
  v9 = (int32x4_t)vtrn1q_s16(v7, v8);
  v10 = (int32x4_t)vtrn2q_s16(v7, v8);
  v11 = a1[4];
  v12 = a1[5];
  v13 = (int32x4_t)vtrn1q_s16(v11, v12);
  v14 = (int32x4_t)vtrn2q_s16(v11, v12);
  v15 = a1[6];
  v16 = a1[7];
  v17 = (int32x4_t)vtrn1q_s16(v15, v16);
  v18 = (int32x4_t)vtrn2q_s16(v15, v16);
  v19 = (int8x16_t)vtrn1q_s32(v5, v9);
  v20 = (int8x16_t)vtrn2q_s32(v5, v9);
  v21 = (int8x16_t)vtrn1q_s32(v6, v10);
  v22 = (int8x16_t)vtrn2q_s32(v6, v10);
  v23 = (int8x16_t)vtrn1q_s32(v13, v17);
  v24 = (int8x16_t)vtrn2q_s32(v13, v17);
  v25 = (int8x16_t)vtrn1q_s32(v14, v18);
  v26 = (int8x16_t)vtrn2q_s32(v14, v18);
  v27 = 2 * a4;
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v27) = v19.i64[0];
  v28 = v27 + 8;
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v28) = v23.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 1) + v27) = v21.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 1) + v28) = v25.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v27) = v20.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v28) = v24.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v27) = v22.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v28) = v26.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + v27) = vextq_s8(v19, v19, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + v28) = vextq_s8(v23, v23, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + v27) = vextq_s8(v21, v21, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + v28) = vextq_s8(v25, v25, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + v27) = vextq_s8(v20, v20, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + v28) = vextq_s8(v24, v24, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + v27) = vextq_s8(v22, v22, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v26, v26, 8uLL).u64[0];
  *(double *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + v28) = result;
  return result;
}

double sub_20B8194A0(_QWORD **a1, uint64_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, uint64_t a7, int a8, int a9, int a10)
{
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t v19[2];

  v13 = *(int32x4_t *)(**a1 + 4 * a8);
  *(double *)v14.i64 = sub_20B819530((uint64_t)(a1 + 1), *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v13.i8, 0), a3).i64, *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v13.i8, 1), a4).i64, (__n128)vaddq_s32(vdupq_laneq_s32(v13, 2), a5), (__n128)vaddq_s32(vdupq_laneq_s32(v13, 3), a6));
  v19[0] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(v14), v15);
  v19[1] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(v16), v17);
  return sub_20B8195A8(v19, a2, a9, a10);
}

double sub_20B819530(uint64_t a1, double a2, double a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  unsigned __int32 *v6;
  const float *v7;
  int32x4_t v8;
  const float *v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  _OWORD v14[4];
  __int128 v15;

  v5 = 0;
  v6 = *(unsigned __int32 **)a1;
  v7 = (const float *)(*(_QWORD *)a1 + 8);
  v8 = (int32x4_t)vld1q_dup_f32(v7);
  v9 = (const float *)(a1 + 8);
  v10 = (int32x4_t)vld1q_dup_f32(v9);
  v14[2] = a4;
  v14[3] = a5;
  a4.n128_u32[0] = *v6;
  v11 = vdupq_n_s32(-*(_DWORD *)(a1 + 12));
  do
  {
    v12 = vqrdmulhq_lane_s32(vshlq_s32((int32x4_t)v14[v5], v10), (int32x2_t)a4.n128_u64[0], 0);
    *(__int128 *)((char *)&v15 + v5 * 16) = (__int128)vaddq_s32(vrshlq_s32(vqaddq_s32(v12, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)v12))), v11), v8);
    ++v5;
  }
  while (v5 != 4);
  return *(double *)&v15;
}

double sub_20B8195A8(int8x16_t *a1, uint64_t a2, int a3, int a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  double result;

  v4 = (int32x4_t)vqtbl1q_s8(*a1, (int8x16_t)xmmword_20BA36200);
  v5 = (int32x4_t)vqtbl1q_s8(a1[1], (int8x16_t)xmmword_20BA36200);
  v6 = (int8x16_t)vtrn1q_s32(v4, v5);
  v7 = (int8x16_t)vtrn2q_s32(v4, v5);
  v8 = 2 * a4;
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v8) = v6.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a3) + v8) = vextq_s8(v6, v6, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v8) = v7.i64[0];
  *(_QWORD *)&result = vextq_s8(v7, v7, 8uLL).u64[0];
  *(double *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v8) = result;
  return result;
}

double sub_20B81962C(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int16x8_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  double result;

  v4 = a1[1];
  v5 = (int32x4_t)vtrn1q_s16(*a1, v4);
  v6 = (int32x4_t)vtrn2q_s16(*a1, v4);
  v7 = a1[2];
  v8 = a1[3];
  v9 = (int32x4_t)vtrn1q_s16(v7, v8);
  v10 = (int32x4_t)vtrn2q_s16(v7, v8);
  v11 = (int8x16_t)vtrn1q_s32(v5, v9);
  v12 = (int8x16_t)vtrn2q_s32(v5, v9);
  v13 = (int8x16_t)vtrn1q_s32(v6, v10);
  v14 = (int8x16_t)vtrn2q_s32(v6, v10);
  v15 = 2 * a4;
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + v15) = v11.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a3) + v15) = v13.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + v15) = v12.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + v15) = v14.i64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + v15) = vextq_s8(v11, v11, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + v15) = vextq_s8(v13, v13, 8uLL).u64[0];
  *(_QWORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + v15) = vextq_s8(v12, v12, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v14, v14, 8uLL).u64[0];
  *(double *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + v15) = result;
  return result;
}

double sub_20B819724(const float *a1, double a2, int32x2_t a3)
{
  uint64_t v3;
  const float *v4;
  int32x4_t v5;
  const float *v6;
  int32x4_t v7;
  int32x4_t v8;
  char v9;
  char v10;
  int32x4_t v11;
  __int128 v13;
  __int128 v14;

  v3 = 0;
  v4 = (const float *)(*(_QWORD *)a1 + 8);
  v5 = (int32x4_t)vld1q_dup_f32(v4);
  v6 = a1 + 2;
  v7 = (int32x4_t)vld1q_dup_f32(v6);
  a3.i32[0] = **(_DWORD **)a1;
  v8 = vdupq_n_s32(-*((_DWORD *)a1 + 3));
  v9 = 1;
  do
  {
    v10 = v9;
    v11 = vqrdmulhq_lane_s32(vshlq_s32(*((int32x4_t *)&v13 + v3), v7), a3, 0);
    *(&v14 + v3) = (__int128)vaddq_s32(vrshlq_s32(vqaddq_s32(v11, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v8, (int8x16_t)v11))), v8), v5);
    v3 = 1;
    v9 = 0;
  }
  while ((v10 & 1) != 0);
  return *(double *)&v14;
}

__n128 sub_20B81979C(__n128 *a1, uint64_t a2, int a3, int a4)
{
  __n128 result;

  result = *a1;
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * a3 + 2 * a4) = *a1;
  *(_WORD *)(*(_QWORD *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a3) + 2 * a4) = a1->n128_u16[1];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 2) + 2 * a4) = a1->n128_u16[2];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 3) + 2 * a4) = a1->n128_u16[3];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 4) + 2 * a4) = a1->n128_u16[4];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 5) + 2 * a4) = a1->n128_u16[5];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 6) + 2 * a4) = a1->n128_u16[6];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a3 + 7) + 2 * a4) = a1->n128_u16[7];
  return result;
}

int16x4_t sub_20B819878(uint64_t a1, uint64_t a2, int32x4_t a3, uint64_t a4, int a5, int a6, int a7)
{
  const float *v7;
  const float *v8;
  int32x4_t v9;
  const float *v10;
  int32x4_t v11;
  int32x4_t v12;
  const float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x4_t result;

  v7 = *(const float **)(a1 + 8);
  v8 = (const float *)(**(_QWORD **)a1 + 4 * a5);
  v9 = (int32x4_t)vld1q_dup_f32(v8);
  v10 = v7 + 2;
  v11 = (int32x4_t)vld1q_dup_f32(v10);
  v12 = vaddq_s32(v9, a3);
  v13 = (const float *)(a1 + 16);
  v14 = (int32x4_t)vld1q_dup_f32(v13);
  v15 = (int32x4_t)vld1q_dup_f32(v7);
  v16 = vqrdmulhq_s32(vshlq_s32(v12, v14), v15);
  v17 = vdupq_n_s32(-*(_DWORD *)(a1 + 20));
  result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v16, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)v16))), v17), v11));
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * a6 + 2 * a7) = result.i16[0];
  *(_WORD *)(*(_QWORD *)a2 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a6) + 2 * a7) = result.i16[1];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a6 + 2) + 2 * a7) = result.i16[2];
  *(_WORD *)(*(_QWORD *)a2 + 2 * *(_DWORD *)(a2 + 16) * (a6 + 3) + 2 * a7) = result.i16[3];
  return result;
}

uint64_t sub_20B819934(_DWORD *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v2 = a2 * (uint64_t)(1 << a1[2]);
  LODWORD(v3) = 0x7FFFFFFF;
  if (v2 >= 0x7FFFFFFF)
    v2 = 0x7FFFFFFFLL;
  if (v2 <= (uint64_t)0xFFFFFFFF80000000)
    v2 = 0xFFFFFFFF80000000;
  v4 = **(int **)a1;
  if ((_DWORD)v4 != 0x80000000 || v2 != 0x80000000)
  {
    v6 = v2 * v4;
    v7 = v2 * v4 < 0;
    v8 = 0x40000000;
    if (v7)
      v8 = -1073741823;
    v9 = __OFADD__(v8, v6);
    v10 = v8 + v6;
    if (v10 < 0 != v9)
      v10 += 0x7FFFFFFFLL;
    v3 = (unint64_t)v10 >> 31;
  }
  v11 = a1[3];
  v12 = ((int)v3 >> v11) + *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((int)(v3 & ~(-1 << v11)) <= (int)(((int)~(-1 << v11) >> 1)
                                                       + (v3 >> 31)))
    return v12;
  else
    return v12 + 1;
}

uint64_t sub_20B8199D8(uint64_t result, int a2, int a3, int a4, int a5, unsigned int *a6, unsigned int *a7, signed int *a8, float a9)
{
  int v9;
  signed int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;

  if (((result + 3) & 0xFFFFFFFC) / a4 <= 1)
    v9 = 1;
  else
    v9 = ((result + 3) & 0xFFFFFFFC) / a4;
  v10 = (a3 + 15) & 0xFFFFFFF0;
  v11 = (int)(float)((float)(a5 / v10) * a9);
  if (v11 <= 1)
    v11 = 1;
  v12 = (v11 + a2 - 1) / v11;
  if (v12 <= 1)
    v12 = 1;
  v13 = ((v12 + a2 - 1) / v12 + 3) & 0xFFFFFFFC;
  if (a9 != 1.0)
  {
    v14 = (int)(a5 - v13 * v10) / (int)((v10 + 4 * v13) * a4);
    if (v14 <= 1)
      v14 = 1;
    v15 = v9 - 1;
    v16 = (v14 + v15) / v14;
    if (v16 <= 1)
      v16 = 1;
    v9 = (v16 + v15) / v16;
  }
  *a6 = (v9 + 3) & 0xFFFFFFFC;
  *a7 = v13;
  *a8 = v10;
  return result;
}

uint64_t sub_20B819A88(uint64_t result, int a2, _QWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 72) = 0;
  v4 = a4 + 1;
  if (!a2)
    v4 = a4;
  *(_DWORD *)result = *v4;
  v5 = a4 + 3;
  if (a2)
    v5 = a4 + 4;
  v6 = *v5;
  *(_DWORD *)(result + 4) = a4[2];
  *(_DWORD *)(result + 8) = v6;
  v7 = a4[5];
  *(_DWORD *)(result + 12) = v7;
  v8 = a3[3];
  a3[v8 + 5] = a3[4];
  v9 = a3[4] + ((v7 * (int)v6 + 63) & 0xFFFFFFFFFFFFFFC0);
  v10 = a3[10];
  ++a3[3];
  a3[4] = v9;
  *(_BYTE *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v10;
  *(_BYTE *)(result + 40) = 0;
  v11 = a3[3];
  a3[v11 + 5] = a3[4];
  v12 = a3[10];
  v13 = a3[4];
  ++a3[3];
  a3[4] = v13 + ((4 * v6 + 63) & 0xFFFFFFFFFFFFFFC0);
  *(_BYTE *)(result + 48) = v11;
  *(_QWORD *)(result + 56) = v12;
  *(_BYTE *)(result + 64) = 5;
  return result;
}

void sub_20B819B40()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B819B54(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _DWORD v26[2];
  _QWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;

  v2 = *(_DWORD *)(a1 + 168);
  v3 = *(_DWORD *)(a1 + 172);
  v4 = *(_DWORD *)(a1 + 44);
  sub_20B819A88((uint64_t)v32, 0, *(_QWORD **)(a1 + 8), *(_DWORD **)(a1 + 192));
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 192);
  v27 = v5;
  v31 = v6;
  v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  v8 = v5[3];
  v5[v8 + 5] = v5[4];
  v9 = v5[4] + v7;
  v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  v28 = v8;
  v29 = v10;
  v30 = 5;
  sub_20B817834((uint64_t)v5);
  if (v3 >= 1)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 192);
    v13 = *(_DWORD *)(v12 + 16);
    v25 = v3;
    do
    {
      if (v3 - v11 >= v13)
        v14 = v13;
      else
        v14 = v3 - v11;
      if (v2 >= 1)
      {
        v15 = 0;
        v16 = *(_DWORD *)(v12 + 12);
        do
        {
          v17 = *(_DWORD *)(a1 + 48);
          v36 = *(_QWORD *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16)
            v18 = v16;
          else
            v18 = v2 - v15;
          v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_20B8181DC(v35);
          v19 = *(_QWORD *)(a1 + 192);
          v36 = *(_QWORD *)(a1 + 24);
          v37 = v19;
          v38 = &v27;
          v39 = v32;
          v40 = a1 + 56;
          sub_20B818748((uint64_t)&v36, v4);
          v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          v37 = __PAIR64__(v14, v18);
          v21 = *(_QWORD *)(v33 + 8 * v34 + 40) + *(_QWORD *)(v33 + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
          v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_20B817990(a1 + 136, (int *)&v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(_QWORD *)(a1 + 200));
          v12 = *(_QWORD *)(a1 + 192);
          v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        v13 = *(_DWORD *)(v12 + 16);
        v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  v24 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)v24 = 0;
  ++*(_QWORD *)(v24 + 80);
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
}

void sub_20B819D68(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v2 = (char *)a1[1] - (char *)*a1;
  if (a2 > v2 >> 3)
  {
    v5 = (unint64_t *)(a1 + 3);
    atomic_store(a2 - (v2 >> 3), (unint64_t *)a1 + 3);
    v6 = (uint64_t)(a1 + 2);
    do
    {
      v7 = operator new();
      sub_20B81A0C4(v7, (uint64_t)v5);
      v9 = a1[1];
      v8 = (unint64_t)a1[2];
      if ((unint64_t)v9 >= v8)
      {
        v11 = v9 - *a1;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_20B80CDD8();
        v12 = v8 - (_QWORD)*a1;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_20B800BE8(v6, v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v11];
        *v16 = v7;
        v10 = v16 + 1;
        v18 = (char *)*a1;
        v17 = (char *)a1[1];
        if (v17 != (char *)*a1)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = (char *)*a1;
        }
        *a1 = v16;
        a1[1] = v10;
        a1[2] = (uint64_t *)&v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      a1[1] = v10;
    }
    while (a2 > v10 - *a1);
    sub_20B819F54(v5);
  }
}

void sub_20B819EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E0C4039CDD859);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B819EEC(uint64_t *a1, uint64_t *a2, _QWORD *a3, int *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *v7++;
      v9 = *a4;
      *a4 = v9 + 1;
      sub_20B81A1D4(*(_QWORD *)(*a3 + 8 * v9), 2, v8);
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_20B819F54(unint64_t *a1)
{
  int v3;
  std::chrono::nanoseconds __ns;

  if (atomic_load(a1))
  {
    v3 = 0;
    do
    {
      if (v3 >= 3999937)
      {
        __ns.__rep_ = 1000000;
        std::this_thread::sleep_for (&__ns);
        v3 = 0;
      }
      else
      {
        v3 += 64;
      }
    }
    while (atomic_load(a1));
  }
}

uint64_t sub_20B81A0C4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a2;
  pthread_cond_init((pthread_cond_t *)(a1 + 16), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 64), 0);
  pthread_create((pthread_t *)a1, 0, (void *(__cdecl *)(void *))sub_20B81A144, (void *)a1);
  return a1;
}

void sub_20B81A12C(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 + 152));
  *(_QWORD *)(v1 + 144) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20B81A144(uint64_t a1)
{
  sub_20B81A15C(a1);
  return 0;
}

uint64_t sub_20B81A15C(uint64_t a1)
{
  uint64_t result;

  sub_20B81A1D4(a1, 1, 0);
  while (1)
  {
    result = sub_20B81A284((unsigned int *)(a1 + 128), 1, (pthread_cond_t *)(a1 + 16), (pthread_mutex_t *)(a1 + 64));
    if ((_DWORD)result != 2)
      break;
    sub_20B81A1D4(a1, 1, 0);
  }
  if ((_DWORD)result != 3)
    abort();
  return result;
}

uint64_t sub_20B81A1D4(uint64_t a1, int a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t *v9;
  unint64_t v10;

  v6 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (*(_DWORD *)(a1 + 128) >= 3u)
    abort();
  if (a2 == 2)
  {
    *(_QWORD *)(a3 + 8) = a1 + 136;
    *(_QWORD *)(a1 + 8) = a3;
  }
  else if (a2 == 1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  *(_DWORD *)(a1 + 128) = a2;
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 16));
  result = pthread_mutex_unlock(v6);
  if (a2 == 1)
  {
    v9 = *(unint64_t **)(a1 + 224);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  return result;
}

uint64_t sub_20B81A284(unsigned int *a1, int a2, pthread_cond_t *a3, pthread_mutex_t *a4)
{
  uint64_t v4;
  unsigned int v9;

  v4 = atomic_load(a1);
  if ((_DWORD)v4 == a2)
  {
    v9 = -64;
    while (1)
    {
      v9 += 64;
      if (v9 > 0x3D08FF)
        break;
      v4 = atomic_load(a1);
      if ((_DWORD)v4 != a2)
        return v4;
    }
    pthread_mutex_lock(a4);
    while (1)
    {
      v4 = atomic_load(a1);
      if ((_DWORD)v4 != a2)
        break;
      pthread_cond_wait(a3, a4);
    }
    pthread_mutex_unlock(a4);
  }
  return v4;
}

void sub_20B81A420(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int32 v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  __int32 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _DWORD v40[2];
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int *v45;
  _BYTE v46[16];
  uint64_t v47;
  unsigned __int8 v48;
  _BYTE v49[16];
  uint64_t v50;
  unsigned __int8 v51;
  unsigned int v52[3];
  int v53;
  int v54;
  _BYTE *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  _BYTE *v60;
  _BYTE *v61;

  v10 = *(_DWORD *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v13 = *(_DWORD *)(a3 + 12);
  sub_20B81776C(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_20B819A88((uint64_t)v49, 0, (_QWORD *)a1, v52);
  sub_20B819A88((uint64_t)v46, 1, (_QWORD *)a1, v52);
  v41 = a1;
  v45 = v52;
  v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8 * v15 + 40) = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 80);
  v32 = (_QWORD *)(a1 + 24);
  v33 = a1;
  ++*(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) += v14;
  v42 = v15;
  v43 = v16;
  v44 = 5;
  sub_20B817834(a1);
  v17 = v54;
  if (v54 >= v11)
  {
    v18 = (unint64_t)*a4;
    v19 = a4[2].i32[0];
    v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    v55 = v46;
    v56 = &v57;
    v57 = v18;
    sub_20B8181DC((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    v20 = 0;
    v21 = v53;
    v34 = v10;
    do
    {
      v22 = *(_DWORD *)(a3 + 16);
      v23 = *(_QWORD *)a3 + v22 * v20;
      if (v10 - v20 >= v21)
        v24 = v21;
      else
        v24 = v10 - v20;
      v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      v55 = v49;
      v56 = &v57;
      v57 = v23;
      sub_20B8181DC((uint64_t *)&v55);
      if (v11 >= 1)
      {
        v25 = 0;
        v26 = v54;
        do
        {
          if (v11 - v25 >= v26)
            v27 = v26;
          else
            v27 = v11 - v25;
          if (v17 < v11)
          {
            v28 = a4[2].i32[0];
            v29 = *(_QWORD *)a4 + v28 * v25;
            v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            v55 = v46;
            v56 = &v57;
            v57 = v29;
            sub_20B8181DC((uint64_t *)&v55);
          }
          v57 = a2;
          v58 = v52;
          v59 = &v41;
          v60 = v49;
          v61 = v46;
          sub_20B818748((uint64_t)&v57, v13);
          v57 = __PAIR64__(v25, v20);
          v58 = (unsigned int *)__PAIR64__(v27, v24);
          v30 = *(_QWORD *)(v50 + 8 * v51 + 40) + *(_QWORD *)(v50 + 16);
          v31 = *(_QWORD *)(v47 + 8 * v48 + 40) + *(_QWORD *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_20B81A6F8(a5, &v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      v21 = v53;
      v20 += v53;
      v10 = v34;
    }
    while (v20 < v34);
  }
  *(_BYTE *)v33 = 0;
  ++*(_QWORD *)(v33 + 80);
  *v32 = 0;
  v32[1] = 0;
}

void sub_20B81A6F8(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v27;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v39;
  uint64_t v40;
  int v45;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  _QWORD *v68[4];
  _QWORD *v69[4];
  _QWORD v70[4];
  _QWORD v71[4];
  _QWORD v72[4];
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;

  v14 = *(_QWORD *)(a3 + 32);
  v80 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(_QWORD *)(*(_QWORD *)a3 + 16);
  v81 = *(_QWORD *)(v14 + 12);
  v82 = v81;
  v78 = a5;
  v15 = a2[3];
  v79 = a2[2];
  v76 = a6;
  v77 = v15;
  v73 = (_QWORD *)a9;
  v74 = a9 + 16;
  v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v75) = v16 & ~(v16 >> 31);
  HIDWORD(v75) = -v16 & ~(-v16 >> 31);
  v72[0] = a9;
  v72[1] = a9 + 16;
  v72[2] = v75;
  v71[0] = a9;
  v71[1] = a9 + 16;
  v71[2] = v75;
  v70[0] = a9;
  v70[1] = a9 + 16;
  v70[2] = v75;
  v69[0] = (_QWORD *)a9;
  v69[1] = (_QWORD *)(a9 + 16);
  v69[2] = v75;
  v68[0] = (_QWORD *)a9;
  v68[1] = (_QWORD *)(a9 + 16);
  v68[2] = v75;
  if (v15 >= 4)
  {
    LODWORD(v17) = 0;
    do
    {
      _X11 = v78;
      __asm { PRFM            #0, [X11] }
      _X11 = v78 + 16;
      __asm { PRFM            #0, [X11] }
      _X9 = v80 + 4 * v82 * (int)v17;
      v27 = 4;
      do
      {
        __asm { PRFM            #0, [X9] }
        _X12 = _X9 + 16;
        __asm { PRFM            #0, [X12] }
        _X9 += 4 * v82;
        --v27;
      }
      while (v27);
      v31 = a2[1] + v17;
      LODWORD(v32) = a2[2];
      if ((int)v32 >= 8)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          v33 = v35 + 8;
          _X12 = v78 + 4 * (v35 + 8);
          __asm { PRFM            #0, [X12] }
          _X12 += 16;
          __asm { PRFM            #0, [X12] }
          v39 = v80 + v34 + 4 * (int)v17 * v82;
          v40 = 4;
          do
          {
            _X13 = v39 + 32;
            __asm { PRFM            #0, [X13] }
            _X13 = v39 + 48;
            __asm { PRFM            #0, [X13] }
            v39 += 4 * v82;
            --v40;
          }
          while (v40);
          sub_20B81AB9C(&v80, v68, a1, &v78, &v76, a7, a8, a4, v35, v17, *a2 + v35, v31, *a2 + v35, v31);
          v32 = (int)a2[2];
          v34 += 32;
          v35 = v33;
        }
        while (v33 <= v32 - 8);
      }
      else
      {
        LODWORD(v33) = 0;
      }
      while ((int)v33 <= (int)v32 - 4)
      {
        sub_20B81AD84((uint64_t)&v80, v69, a1, &v78, &v76, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
        LODWORD(v33) = v33 + 4;
        LODWORD(v32) = a2[2];
      }
      if ((int)v33 < (int)v32)
      {
        do
        {
          sub_20B81AEE4((uint64_t)&v80, (uint64_t)v70, a1, &v78, &v76, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
          LODWORD(v33) = v33 + 1;
        }
        while ((int)v33 < a2[2]);
      }
      LODWORD(v17) = v17 + 4;
      v15 = a2[3];
    }
    while ((int)v17 <= v15 - 4);
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if ((int)v17 < v15)
  {
    v17 = v17;
    do
    {
      v45 = a2[1] + v17;
      _X10 = v78;
      __asm { PRFM            #0, [X10] }
      _X10 = v78 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v80 + 4 * v82 * (int)v17;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        v54 = 0;
        v55 = 32;
        do
        {
          v56 = v54;
          v54 += 8;
          _X12 = v78 + v55;
          __asm { PRFM            #0, [X12] }
          _X12 = v78 + v55 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v80 + 4 * (int)v17 * v82 + v55;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_20B81AFD0((uint64_t)&v80, (uint64_t)v71, a1, &v78, &v76, a7, a8, a4, v56, v17, v56 + *a2, v45, v56 + *a2, v45);
          _X8 = (int)a2[2];
          v55 += 32;
        }
        while (v54 <= _X8 - 8);
      }
      else
      {
        LODWORD(v54) = 0;
      }
      while ((int)v54 <= (int)_X8 - 4)
      {
        sub_20B81B0B0((uint64_t)&v80, (uint64_t)v72, a1, &v78, &v76, a7, a8, a4, v54, v17, v54 + *a2, v45, v54 + *a2, v45);
        LODWORD(v54) = v54 + 4;
        LODWORD(_X8) = a2[2];
      }
      if ((int)v54 < (int)_X8)
      {
        v64 = v54;
        do
        {
          v65 = v64 + *a2;
          v66 = sub_20B819934(&v74, *(_DWORD *)(v80 + 4 * (int)v17 * v82 + 4 * v64)+ (*a8 + 128) * *(_DWORD *)(v78 + 4 * v64)+ *(_DWORD *)(*v73 + 4 * v65)+ (*(_DWORD *)(v76 + 4 * v17) + (*a8 + 128) * a4) * (*a7 + 128));
          if (v66 <= -32768)
            v67 = -32768;
          else
            v67 = v66;
          if (v67 >= 0x7FFF)
            LOWORD(v67) = 0x7FFF;
          *(_WORD *)(*(_QWORD *)a1 + 2 * v65 + 2 * *(_DWORD *)(a1 + 16) * v45) = v67;
          ++v64;
        }
        while (a2[2] > (int)v64);
      }
      ++v17;
    }
    while (a2[3] > (int)v17);
  }
}

void sub_20B81AB9C(uint64_t *a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  int32x4_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int32x4_t v30;
  __int8 *v31;
  uint64_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int32x4_t v38[8];
  _OWORD v39[2];
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  _OWORD v48[4];
  uint64_t v49;

  v14 = 0;
  v49 = *MEMORY[0x24BDAC8D0];
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v15 = *a1;
  v16 = *((int *)a1 + 4);
  v17 = (__int128 *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + v15 + 16);
  v18 = 4 * v16;
  do
  {
    v19 = *v17;
    v20 = &v40.i8[v14];
    *(_OWORD *)v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v14 += 32;
    v17 = (__int128 *)((char *)v17 + v18);
  }
  while (v14 != 128);
  v21 = 0;
  v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v39[0] = *(_OWORD *)(*a4 + 4 * a9);
  v39[1] = v22;
  v23 = *(int32x4_t *)(*a5 + 4 * a10);
  v24 = *a6;
  v25 = *a7 + 128;
  v26 = vdupq_n_s32(v25);
  v27 = 1;
  do
  {
    v28 = 0;
    v29 = v27;
    v30 = vmulq_s32((int32x4_t)v39[v21], v26);
    v31 = &v40.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    v27 = 0;
    v21 = 1;
  }
  while ((v29 & 1) != 0);
  v32 = 0;
  v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v48[0] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v48[1] = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v48[2] = vdupq_laneq_s32(v33, 2);
  v48[3] = vdupq_laneq_s32(v33, 3);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = v34;
    v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v40 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v40 + v37), (int32x4_t)v48[v35++]);
      v37 += 32;
    }
    while (v35 != 4);
    v34 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  v38[4] = v44;
  v38[5] = v45;
  v38[6] = v46;
  v38[7] = v47;
  v38[0] = v40;
  v38[1] = v41;
  v38[2] = v42;
  v38[3] = v43;
  sub_20B81B184(a2, v38, a3, a11, a12, a13, a14);
}

int16x4_t sub_20B81AD84(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  int32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int v21;
  unsigned int v22;
  int32x4_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;

  v14 = 0;
  v35 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (int32x4_t *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    *(int32x4_t *)((char *)&v31 + v14) = *v16;
    v14 += 16;
    v16 = (int32x4_t *)((char *)v16 + v17);
  }
  while (v14 != 64);
  v18 = 0;
  v19 = *(int32x4_t *)(*a4 + 4 * a9);
  v27 = v31;
  v28 = v32;
  v29 = v33;
  v30 = v34;
  v20 = *(int32x4_t *)(*a5 + 4 * a10);
  v21 = *a6;
  v22 = *a7 + 128;
  v23 = vmulq_s32(vdupq_n_s32(v22), v19);
  do
  {
    *(int32x4_t *)((char *)&v27 + v18) = vaddq_s32(*(int32x4_t *)((char *)&v27 + v18), v23);
    v18 += 16;
  }
  while (v18 != 64);
  v24 = 0;
  v25 = vmulq_s32(vaddq_s32(vdupq_n_s32(v22 * a8), v20), vdupq_n_s32(v21 + 128));
  v31 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  v32 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  v33 = vdupq_laneq_s32(v25, 2);
  v34 = vdupq_laneq_s32(v25, 3);
  do
  {
    *(int32x4_t *)((char *)&v27 + v24) = vaddq_s32(*(int32x4_t *)((char *)&v27 + v24), *(int32x4_t *)((char *)&v31 + v24));
    v24 += 16;
  }
  while (v24 != 64);
  return sub_20B81B310(a2, a3, a11, v27, v28, v29, v30, a12, a13, a14);
}

int16x4_t sub_20B81AEE4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  __int32 *v16;
  uint64_t v17;
  int32x4_t v19;
  uint64_t v20;

  v14 = 0;
  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (__int32 *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    v19.i32[v14++] = *v16;
    v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  return sub_20B81B3D8(a2, a3, a11, vmlaq_s32(vaddq_s32(vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)), v19), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128)), a12, a13, a14);
}

int16x8_t sub_20B81AFD0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x8_t result;

  v15 = 4 * a9;
  v16 = 4 * *(_DWORD *)(a1 + 16) * a10;
  v17 = *a7 + 128;
  v18 = vdupq_n_s32(v17);
  v19 = vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + v17 * a8) * (*a6 + 128));
  *(double *)v20.i64 = sub_20B819724((const float *)(a2 + 8), *(double *)vaddq_s32(vmlaq_s32(vaddq_s32(*(int32x4_t *)(**(_QWORD **)a2 + 4 * a11), *(int32x4_t *)(*(_QWORD *)a1 + v15 + v16)), v18, *(int32x4_t *)(*a4 + v15)), v19).i64, (int32x2_t)*(_OWORD *)&vaddq_s32(vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(_QWORD *)a1 + v15 + 16 + v16), v18, *(int32x4_t *)(*a4 + v15 + 16)), *(int32x4_t *)(**(_QWORD **)a2 + 4 * a11 + 16)), v19));
  result = vqmovn_high_s32(vqmovn_s32(v20), v21);
  *(int16x8_t *)(*(_QWORD *)a3 + 2 * a13 + 2 * *(_DWORD *)(a3 + 16) * a14) = result;
  return result;
}

int16x4_t sub_20B81B0B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  const float *v14;
  const float *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int16x4_t result;

  v14 = *(const float **)(a2 + 8);
  v15 = v14 + 2;
  v16 = (int32x4_t)vld1q_dup_f32(v15);
  v17 = (int32x4_t)vld1q_dup_f32(v14);
  v18 = vqrdmulhq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vaddq_s32(*(int32x4_t *)(**(_QWORD **)a2 + 4 * a11), *(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + 4 * *(_DWORD *)(a1 + 16) * a10)), vdupq_n_s32(*a7 + 128), *(int32x4_t *)(*a4 + 4 * a9)), vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + (*a7 + 128) * a8) * (*a6 + 128))), vdupq_lane_s32(*(int32x2_t *)(a2 + 16), 0)), v17);
  v19 = vdupq_n_s32(-HIDWORD(*(_QWORD *)(a2 + 16)));
  result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v18, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)v18))), v19), v16));
  *(int16x4_t *)(*(_QWORD *)a3 + 2 * a13 + 2 * *(_DWORD *)(a3 + 16) * a14) = result;
  return result;
}

void sub_20B81B184(_QWORD **a1, int32x4_t *a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int32x4_t v18[8];

  v10 = a2[5];
  v18[4] = a2[4];
  v18[5] = v10;
  v11 = a2[7];
  v18[6] = a2[6];
  v18[7] = v11;
  v12 = a2[1];
  v18[0] = *a2;
  v18[1] = v12;
  v13 = a2[3];
  v18[2] = a2[2];
  v18[3] = v13;
  *(double *)&v14 = sub_20B81B250(a1, v18, a4);
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * a7) = v14;
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * (*(_DWORD *)(a3 + 16) + *(_DWORD *)(a3 + 16) * a7)) = v15;
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 2)) = v16;
  *(_OWORD *)(*(_QWORD *)a3 + 2 * a6 + 2 * *(_DWORD *)(a3 + 16) * (a7 + 3)) = v17;
}

double sub_20B81B250(_QWORD **a1, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  double result;
  _OWORD v14[8];
  int32x4_t v15;
  int32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = **a1 + 4 * a3;
  v4 = *(int32x4_t *)(v3 + 16);
  v5 = vaddq_s32(*(int32x4_t *)v3, *a2);
  v6 = vaddq_s32(v4, a2[1]);
  v7 = vaddq_s32(*(int32x4_t *)v3, a2[2]);
  v8 = vaddq_s32(v4, a2[3]);
  v9 = vaddq_s32(*(int32x4_t *)v3, a2[4]);
  v10 = vaddq_s32(v4, a2[5]);
  v11 = vaddq_s32(*(int32x4_t *)v3, a2[6]);
  v12 = vaddq_s32(v4, a2[7]);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v14[0] = v5;
  v14[1] = v6;
  v14[2] = v7;
  v14[3] = v8;
  v14[4] = v9;
  v14[5] = v10;
  v14[6] = v11;
  v14[7] = v12;
  sub_20B819214((uint64_t)(a1 + 1), v14, &v15);
  *(_QWORD *)&result = vqmovn_high_s32(vqmovn_s32(v15), v16).u64[0];
  return result;
}

int16x4_t sub_20B81B310(_QWORD **a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, uint64_t a8, int a9, int a10)
{
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x4_t result;

  v13 = *(int32x4_t *)(**a1 + 4 * a3);
  *(double *)v14.i64 = sub_20B819530((uint64_t)(a1 + 1), *(double *)vaddq_s32(v13, a4).i64, *(double *)vaddq_s32(v13, a5).i64, (__n128)vaddq_s32(v13, a6), (__n128)vaddq_s32(v13, a7));
  *(int16x4_t *)(*(_QWORD *)a2 + 2 * a9 + 2 * *(_DWORD *)(a2 + 16) * a10) = vqmovn_s32(v14);
  result = vqmovn_s32(v17);
  *(int16x4_t *)(*(_QWORD *)a2 + 2 * a9 + 2 * (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 16) * a10)) = vqmovn_s32(v15);
  *(int16x4_t *)(*(_QWORD *)a2 + 2 * a9 + 2 * *(_DWORD *)(a2 + 16) * (a10 + 2)) = vqmovn_s32(v16);
  *(int16x4_t *)(*(_QWORD *)a2 + 2 * a9 + 2 * *(_DWORD *)(a2 + 16) * (a10 + 3)) = result;
  return result;
}

int16x4_t sub_20B81B3D8(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, uint64_t a5, int a6, int a7)
{
  const float *v7;
  const float *v8;
  int32x4_t v9;
  int32x4_t v10;
  const float *v11;
  int32x4_t v12;
  const float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x4_t result;
  uint64_t v20;
  _WORD *v21;

  v7 = *(const float **)(a1 + 8);
  v8 = (const float *)(**(_QWORD **)a1 + 4 * a3);
  v9 = (int32x4_t)vld1q_dup_f32(v8);
  v10 = vaddq_s32(v9, a4);
  v11 = v7 + 2;
  v12 = (int32x4_t)vld1q_dup_f32(v11);
  v13 = (const float *)(a1 + 16);
  v14 = (int32x4_t)vld1q_dup_f32(v13);
  v15 = vshlq_s32(v10, v14);
  v16 = (int32x4_t)vld1q_dup_f32(v7);
  v17 = vqrdmulhq_s32(v15, v16);
  v18 = vdupq_n_s32(-*(_DWORD *)(a1 + 20));
  result = vqmovn_s32(vaddq_s32(vrshlq_s32(vqaddq_s32(v17, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)v17))), v18), v12));
  v20 = *(int *)(a2 + 16);
  v21 = (_WORD *)(*(_QWORD *)a2 + 2 * a6 + 2 * (int)v20 * a7);
  *v21 = result.i16[0];
  v21[v20] = result.i16[1];
  v21[2 * v20] = result.i16[2];
  v21[3 * (_DWORD)v20] = result.i16[3];
  return result;
}

void sub_20B81B468()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B81B47C(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _DWORD v26[2];
  _QWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;

  v2 = *(_DWORD *)(a1 + 168);
  v3 = *(_DWORD *)(a1 + 172);
  v4 = *(_DWORD *)(a1 + 44);
  sub_20B819A88((uint64_t)v32, 0, *(_QWORD **)(a1 + 8), *(_DWORD **)(a1 + 192));
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 192);
  v27 = v5;
  v31 = v6;
  v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  v8 = v5[3];
  v5[v8 + 5] = v5[4];
  v9 = v5[4] + v7;
  v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  v28 = v8;
  v29 = v10;
  v30 = 5;
  sub_20B817834((uint64_t)v5);
  if (v3 >= 1)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 192);
    v13 = *(_DWORD *)(v12 + 16);
    v25 = v3;
    do
    {
      if (v3 - v11 >= v13)
        v14 = v13;
      else
        v14 = v3 - v11;
      if (v2 >= 1)
      {
        v15 = 0;
        v16 = *(_DWORD *)(v12 + 12);
        do
        {
          v17 = *(_DWORD *)(a1 + 48);
          v36 = *(_QWORD *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16)
            v18 = v16;
          else
            v18 = v2 - v15;
          v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_20B8181DC(v35);
          v19 = *(_QWORD *)(a1 + 192);
          v36 = *(_QWORD *)(a1 + 24);
          v37 = v19;
          v38 = &v27;
          v39 = v32;
          v40 = a1 + 56;
          sub_20B818748((uint64_t)&v36, v4);
          v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          v37 = __PAIR64__(v14, v18);
          v21 = *(_QWORD *)(v33 + 8 * v34 + 40) + *(_QWORD *)(v33 + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
          v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_20B81A6F8(a1 + 136, &v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(_QWORD *)(a1 + 200));
          v12 = *(_QWORD *)(a1 + 192);
          v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        v13 = *(_DWORD *)(v12 + 16);
        v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  v24 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)v24 = 0;
  ++*(_QWORD *)(v24 + 80);
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
}

const char *sub_20B81B690()
{
  return "NEON, 4x4, depth 16, accumulating two within signed int16";
}

int32x4_t *sub_20B81B69C(uint64_t a1, int32x4_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, int8x16_t *a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint64_t i;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t *v83;
  int32x4_t *result;

  v9 = *a6;
  v8 = a6 + 1;
  v10 = vdupq_n_s32(0);
  v12 = *a5;
  v11 = a5 + 1;
  v13 = v10;
  v14 = *v8++;
  v15 = v10;
  v16 = *v11++;
  v17 = v10;
  v18 = *v8++;
  v19 = v10;
  v21 = *v8;
  v20 = v8 + 1;
  v22 = v10;
  v23 = *v11++;
  v24 = v10;
  v26 = *v11;
  v25 = v11 + 1;
  v27 = v10;
  v28 = v10;
  v29 = v10;
  v30 = v10;
  v31 = v10;
  v32 = v10;
  v33 = v10;
  v34 = v10;
  v35 = v10;
  v36 = 4 * a4;
  v37 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v12.i8), v9, v12);
  v38 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v12.i8), v14, v12);
  v39 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v12.i8), v18, v12);
  v40 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v12.i8), v21, v12);
  v41 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v16.i8), v9, v16);
  v42 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v16.i8), v14, v16);
  v43 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v16.i8), v18, v16);
  v44 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v16.i8), v21, v16);
  for (i = a8 - 16; i; v44 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v48.i8), v21, v48))
  {
    v10 = vpadalq_s16(v10, v37);
    v47 = *v25;
    v46 = v25 + 1;
    v13 = vpadalq_s16(v13, v38);
    v48 = *v46++;
    v15 = vpadalq_s16(v15, v39);
    v17 = vpadalq_s16(v17, v40);
    v19 = vpadalq_s16(v19, v41);
    v22 = vpadalq_s16(v22, v42);
    v24 = vpadalq_s16(v24, v43);
    v27 = vpadalq_s16(v27, v44);
    v49 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v23.i8), v9, v23);
    v50 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v23.i8), v14, v23);
    v51 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v23.i8), v18, v23);
    v52 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v23.i8), v21, v23);
    v23 = *v46++;
    v53 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v26.i8), v9, v26);
    v9 = *v20;
    v54 = v20 + 1;
    v55 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v26.i8), v14, v26);
    v14 = *v54++;
    v56 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v26.i8), v18, v26);
    v18 = *v54++;
    v57 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v26.i8), v21, v26);
    v21 = *v54;
    v20 = v54 + 1;
    v28 = vpadalq_s16(v28, v49);
    v29 = vpadalq_s16(v29, v50);
    v26 = *v46;
    v25 = v46 + 1;
    v30 = vpadalq_s16(v30, v51);
    v31 = vpadalq_s16(v31, v52);
    v32 = vpadalq_s16(v32, v53);
    v33 = vpadalq_s16(v33, v55);
    v34 = vpadalq_s16(v34, v56);
    v35 = vpadalq_s16(v35, v57);
    v37 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v47.i8), v9, v47);
    v38 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v47.i8), v14, v47);
    v39 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v47.i8), v18, v47);
    v40 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v47.i8), v21, v47);
    i -= 16;
    v41 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v48.i8), v9, v48);
    v42 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v48.i8), v14, v48);
    v43 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v48.i8), v18, v48);
  }
  v58 = vpadalq_s16(v10, v37);
  v59 = vpadalq_s16(v13, v38);
  v60 = vpadalq_s16(v15, v39);
  v61 = vpadalq_s16(v17, v40);
  v62 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v23.i8), v9, v23);
  v63 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v23.i8), v14, v23);
  v64 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v23.i8), v18, v23);
  v65 = vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v23.i8), v21, v23);
  v66 = vpadalq_s16(v32, vmlal_high_s8(vmull_s8(*(int8x8_t *)v9.i8, *(int8x8_t *)v26.i8), v9, v26));
  v67 = vpadalq_s16(v33, vmlal_high_s8(vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v26.i8), v14, v26));
  v68 = vpadalq_s16(v34, vmlal_high_s8(vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v26.i8), v18, v26));
  v69 = vpadalq_s16(v35, vmlal_high_s8(vmull_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v26.i8), v21, v26));
  v70 = vpaddq_s32(v58, vpadalq_s16(v19, v41));
  v71 = vpaddq_s32(v59, vpadalq_s16(v22, v42));
  v72 = vpaddq_s32(v60, vpadalq_s16(v24, v43));
  v73 = vpaddq_s32(v61, vpadalq_s16(v27, v44));
  v74 = vpaddq_s32(vpadalq_s16(v28, v62), v66);
  v75 = vpaddq_s32(vpadalq_s16(v29, v63), v67);
  v76 = vpaddq_s32(vpadalq_s16(v30, v64), v68);
  v77 = vpaddq_s32(vpadalq_s16(v31, v65), v69);
  if (a7)
  {
    v82 = (int32x4_t *)((char *)a2 + v36 + v36);
    v78 = vaddq_s32(*a2, vpaddq_s32(v70, v74));
    v79 = vaddq_s32(*(int32x4_t *)((char *)a2 + v36), vpaddq_s32(v71, v75));
    v80 = vaddq_s32(*v82, vpaddq_s32(v72, v76));
    v81 = vaddq_s32(*(int32x4_t *)((char *)v82 + v36), vpaddq_s32(v73, v77));
  }
  else
  {
    v78 = vpaddq_s32(v70, v74);
    v79 = vpaddq_s32(v71, v75);
    v80 = vpaddq_s32(v72, v76);
    v81 = vpaddq_s32(v73, v77);
  }
  *a2 = v78;
  *(int32x4_t *)((char *)a2 + v36) = v79;
  v83 = (int32x4_t *)((char *)a2 + v36 + v36);
  *v83 = v80;
  result = (int32x4_t *)((char *)v83 + v36);
  *result = v81;
  return result;
}

void sub_20B81B958()
{
  JUMPOUT(0x20BD39CB0);
}

double sub_20B81B96C(int16x8_t a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  double result;

  v1.i64[0] = 0x1000100010001000;
  v1.i64[1] = 0x1000100010001000;
  v2 = vaddq_s16(vqshlq_n_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFC00FC00FC00FC00, 0xFC00FC00FC00FC00)), 3uLL), v1);
  v3 = vqrdmulhq_s16(v2, v2);
  v4 = vqrdmulhq_s16(v3, v3);
  v5 = vaddq_s16(vqrdmulhq_s16(vrsraq_n_s16(vqrdmulhq_s16(v3, v2), vqaddq_s16(v4, vcltzq_s16(v4)), 2uLL), vdupq_n_s16(0x2AABu)), v3);
  v6 = vdupq_n_s16(0x70F6u);
  v7 = vqaddq_s16(v6, vqrdmulhq_s16(v6, vrsraq_n_s16(v2, vqaddq_s16(v5, vcltzq_s16(v5)), 1uLL)));
  v8 = (int8x16_t)vsubq_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFC00FC00FC00FC00, 0xFC00FC00FC00FC00)), a1);
  v5.i64[0] = 0x400040004000400;
  v5.i64[1] = 0x400040004000400;
  v9 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v7, (int8x16_t)vqrdmulhq_s16(v7, vdupq_n_s16(0x63B0u)));
  v5.i64[0] = 0x800080008000800;
  v5.i64[1] = 0x800080008000800;
  v10 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v9, (int8x16_t)vqrdmulhq_s16(v9, vdupq_n_s16(0x4DA3u)));
  v11 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v10, (int8x16_t)vqrdmulhq_s16(v10, vdupq_n_s16(0x2F17u)));
  v1.i64[0] = 0x2000200020002000;
  v1.i64[1] = 0x2000200020002000;
  v12 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v11, (int8x16_t)vqrdmulhq_s16(v11, vdupq_n_s16(0x1153u)));
  v1.i64[0] = 0x4000400040004000;
  v1.i64[1] = 0x4000400040004000;
  v13 = (int8x16_t)vceqzq_s16(a1);
  *(_QWORD *)&result = vorrq_s8((int8x16_t)(*(_OWORD *)&v13 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v12, (int8x16_t)vqrdmulhq_s16(v12, vdupq_n_s16(0x258u))), v13)).u64[0];
  return result;
}

double sub_20B81BA64(int16x8_t a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  double result;

  v1.i64[0] = 0x1000100010001000;
  v1.i64[1] = 0x1000100010001000;
  v2 = vaddq_s16(vqshlq_n_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFE00FE00FE00FE00, 0xFE00FE00FE00FE00)), 4uLL), v1);
  v3 = vqrdmulhq_s16(v2, v2);
  v4 = vqrdmulhq_s16(v3, v3);
  v5 = vaddq_s16(vqrdmulhq_s16(vrsraq_n_s16(vqrdmulhq_s16(v3, v2), vqaddq_s16(v4, vcltzq_s16(v4)), 2uLL), vdupq_n_s16(0x2AABu)), v3);
  v6 = vdupq_n_s16(0x70F6u);
  v7 = vqaddq_s16(v6, vqrdmulhq_s16(v6, vrsraq_n_s16(v2, vqaddq_s16(v5, vcltzq_s16(v5)), 1uLL)));
  v8 = (int8x16_t)vsubq_s16((int16x8_t)(*(_OWORD *)&a1 | __PAIR128__(0xFE00FE00FE00FE00, 0xFE00FE00FE00FE00)), a1);
  v5.i64[0] = 0x200020002000200;
  v5.i64[1] = 0x200020002000200;
  v9 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v7, (int8x16_t)vqrdmulhq_s16(v7, vdupq_n_s16(0x63B0u)));
  v5.i64[0] = 0x400040004000400;
  v5.i64[1] = 0x400040004000400;
  v10 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v9, (int8x16_t)vqrdmulhq_s16(v9, vdupq_n_s16(0x4DA3u)));
  v5.i64[0] = 0x800080008000800;
  v5.i64[1] = 0x800080008000800;
  v11 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v5)), (int8x16_t)v10, (int8x16_t)vqrdmulhq_s16(v10, vdupq_n_s16(0x2F17u)));
  v12 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v11, (int8x16_t)vqrdmulhq_s16(v11, vdupq_n_s16(0x1153u)));
  v1.i64[0] = 0x2000200020002000;
  v1.i64[1] = 0x2000200020002000;
  v13 = (int16x8_t)vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1)), (int8x16_t)v12, (int8x16_t)vqrdmulhq_s16(v12, vdupq_n_s16(0x258u)));
  v1.i64[0] = 0x4000400040004000;
  v1.i64[1] = 0x4000400040004000;
  v14 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v8, (int8x16_t)v1));
  v1.i64[0] = 0xB000B000B000BLL;
  v1.i64[1] = 0xB000B000B000BLL;
  v15 = (int8x16_t)vceqzq_s16(a1);
  *(_QWORD *)&result = vorrq_s8((int8x16_t)(*(_OWORD *)&v15 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8(vbslq_s8(v14, (int8x16_t)v13, (int8x16_t)vqrdmulhq_s16(v13, v1)), v15)).u64[0];
  return result;
}

uint64_t sub_20B81BB74(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  signed int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v1 = (__int16)a1 - 1;
  if (a1 << 16 != 0x80000000)
    v1 = (__int16)a1 + 1;
  v2 = v1 + 0x7FFF;
  v3 = v1 + 0x8000;
  if (v2 >= 0)
    v3 = v2;
  v4 = v3 >> 1;
  if (v2 >= 2)
    v5 = -16383;
  else
    v5 = 0x4000;
  v6 = ((v5 - 15420 * v4 + (v5 - 15420 * v4 < 0 ? 0x7FFF : 0)) >> 15) + 23130;
  v7 = 3;
  do
  {
    if ((unsigned __int16)v4 == 0x8000 && (unsigned __int16)v6 == 0x8000)
    {
      LOWORD(v8) = -24575;
LABEL_19:
      v13 = (__int16)v8 * (__int16)v6;
      if (v13 < 0)
        v14 = -16383;
      else
        v14 = 0x4000;
      v11 = __OFADD__(v14, v13);
      v15 = v14 + v13;
      if (v15 < 0 != v11)
        v15 += 0x7FFF;
      v9 = v15 >> 15;
      goto LABEL_25;
    }
    v9 = v4 * (__int16)v6;
    if (v9 < 0)
      v10 = -16383;
    else
      v10 = 0x4000;
    v11 = __OFADD__(v10, v9);
    v12 = v10 + v9;
    LOWORD(v9) = 0x7FFF;
    if (v12 < 0 != v11)
      v12 += 0x7FFF;
    v8 = 0x2000 - (v12 >> 15);
    if ((unsigned __int16)v6 != 0x8000 || (unsigned __int16)v8 != 0x8000)
      goto LABEL_19;
LABEL_25:
    v16 = (__int16)v9;
    v17 = 4 * (__int16)v9;
    if (v17 >= 0x7FFF)
      v17 = 0x7FFFLL;
    if (v17 <= -32768)
      LOWORD(v17) = 0x8000;
    if (v16 >= 0x2000)
      LOWORD(v17) = 0x7FFF;
    if (v16 <= -8192)
      v18 = 0x8000;
    else
      v18 = v17;
    v6 = (__int16)(v18 + v6);
    --v7;
  }
  while (v7);
  v19 = 2 * (__int16)v6;
  if (v19 >= 0x7FFF)
    v19 = 0x7FFFLL;
  if (v19 <= -32768)
    LODWORD(v19) = -32768;
  if (v6 >= 0x4000)
    LODWORD(v19) = 0x7FFF;
  if (v6 <= -16384)
    return 4294934528;
  else
    return v19;
}

uint64_t sub_20B81BCC4(__int16 a1)
{
  __int16 v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = a1 | 0xFC00;
  v3 = sub_20B81BDE0(8 * (a1 & 0x3FF | 0x1C00u));
  if ((v3 & 0x8000u) != 0)
    v4 = -16383;
  else
    v4 = 0x4000;
  v5 = (v4 + 25520 * (__int16)v3 + (v4 + 25520 * (__int16)v3 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x400) == 0)
    v5 = v3;
  if ((v5 & 0x8000u) != 0)
    v6 = -16383;
  else
    v6 = 0x4000;
  if (((v2 - a1) & 0x800) != 0)
    v5 = (v6 + 19875 * (__int16)v5 + (v6 + 19875 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v7 = -16383;
  else
    v7 = 0x4000;
  if (((v2 - a1) & 0x1000) != 0)
    v5 = (v7 + 12055 * (__int16)v5 + (v7 + 12055 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v8 = -16383;
  else
    v8 = 0x4000;
  if (((v2 - a1) & 0x2000) != 0)
    v5 = (v8 + 4435 * (__int16)v5 + (v8 + 4435 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v9 = -16383;
  else
    v9 = 0x4000;
  v10 = (v9 + 600 * (__int16)v5 + (v9 + 600 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x4000) != 0)
    v11 = v10;
  else
    v11 = v5;
  if (a1)
    return v11;
  else
    return 0x7FFFLL;
}

uint64_t sub_20B81BDE0(int a1)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  int v13;

  v1 = (__int16)(a1 + 4096);
  v2 = (v1 * v1 + 0x4000) >> 15;
  if ((unsigned __int16)(a1 + 4096) == 0x8000)
    LOWORD(v2) = 0x7FFF;
  v3 = (__int16)v2 * v1;
  if (v3 < 0)
    v4 = -16383;
  else
    v4 = 0x4000;
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v6 < 0 != v5)
    v6 += 0x7FFF;
  v7 = (__int16)v2 * (__int16)v2 + 0x4000;
  v8 = ((__int16)(v7 >> 15) >> 2) + (v6 >> 15);
  if (((v7 >> 15) & 3) > (v7 >> 30) + 1)
    LOWORD(v8) = v8 + 1;
  if ((v8 & 0x8000u) != 0)
    v9 = -16383;
  else
    v9 = 0x4000;
  v10 = v2 + (v9 + 10923 * (__int16)v8) / 0x8000;
  v11 = a1 + 4096 + (v10 >> 1);
  if ((v10 & 1u) > (unsigned __int16)(v10 & 0x8000) >> 15)
    LOWORD(v11) = v11 + 1;
  if ((v11 & 0x8000u) != 0)
    v12 = -16383;
  else
    v12 = 0x4000;
  v13 = (__int16)((v12 + 28918 * (__int16)v11) / 0x8000) + 28918;
  if (v13 >= 0x7FFF)
    v13 = 0x7FFF;
  if (v13 <= -32768)
    return 4294934528;
  else
    return v13;
}

uint64_t sub_20B81BEC8(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v1 = (__int16)a1 - 1;
  if (a1 << 16 != 0x80000000)
    v1 = (__int16)a1 + 1;
  v2 = v1 + 0x7FFF;
  v3 = v1 + 0x8000;
  if (v2 >= 0)
    v3 = v2;
  v4 = v3 >> 1;
  if (v2 >= 2)
    v5 = -16383;
  else
    v5 = 0x4000;
  v6 = ((v5 - 15420 * v4 + (v5 - 15420 * v4 < 0 ? 0x7FFF : 0)) >> 15) + 23130;
  v7 = 3;
  do
  {
    if ((unsigned __int16)v4 == 0x8000 && (unsigned __int16)v6 == 0x8000)
    {
      LOWORD(v8) = -24575;
LABEL_19:
      v13 = (__int16)v8 * (__int16)v6;
      if (v13 < 0)
        v14 = -16383;
      else
        v14 = 0x4000;
      v11 = __OFADD__(v14, v13);
      v15 = v14 + v13;
      if (v15 < 0 != v11)
        v15 += 0x7FFF;
      v9 = v15 >> 15;
      goto LABEL_25;
    }
    v9 = v4 * (__int16)v6;
    if (v9 < 0)
      v10 = -16383;
    else
      v10 = 0x4000;
    v11 = __OFADD__(v10, v9);
    v12 = v10 + v9;
    LOWORD(v9) = 0x7FFF;
    if (v12 < 0 != v11)
      v12 += 0x7FFF;
    v8 = 0x2000 - (v12 >> 15);
    if ((unsigned __int16)v6 != 0x8000 || (unsigned __int16)v8 != 0x8000)
      goto LABEL_19;
LABEL_25:
    v16 = (__int16)v9;
    v17 = 4 * (__int16)v9;
    if (v17 >= 0x7FFF)
      v17 = 0x7FFFLL;
    if (v17 <= -32768)
      LODWORD(v17) = -32768;
    if (v16 >= 0x2000)
      LODWORD(v17) = 0x7FFF;
    if (v16 <= -8192)
      v18 = -32768;
    else
      v18 = v17;
    v6 += v18;
    --v7;
  }
  while (v7);
  v19 = (__int16)(v6 - 0x2000);
  v20 = (uint64_t)((unint64_t)(v6 - 0x2000) << 48) >> 46;
  if (v20 >= 0x7FFF)
    v20 = 0x7FFFLL;
  if (v20 <= -32768)
    LODWORD(v20) = -32768;
  if (v19 >= 0x2000)
    LODWORD(v20) = 0x7FFF;
  if (v19 <= -8192)
    return 4294934528;
  else
    return v20;
}

uint64_t sub_20B81C01C(__int16 a1)
{
  __int16 v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v2 = a1 | 0xFE00;
  v3 = sub_20B81BDE0(16 * (a1 & 0x1FF | 0xE00u));
  if ((v3 & 0x8000u) != 0)
    v4 = -16383;
  else
    v4 = 0x4000;
  v5 = (v4 + 25520 * (__int16)v3 + (v4 + 25520 * (__int16)v3 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x200) == 0)
    v5 = v3;
  if ((v5 & 0x8000u) != 0)
    v6 = -16383;
  else
    v6 = 0x4000;
  if (((v2 - a1) & 0x400) != 0)
    v5 = (v6 + 19875 * (__int16)v5 + (v6 + 19875 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v7 = -16383;
  else
    v7 = 0x4000;
  if (((v2 - a1) & 0x800) != 0)
    v5 = (v7 + 12055 * (__int16)v5 + (v7 + 12055 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v8 = -16383;
  else
    v8 = 0x4000;
  if (((v2 - a1) & 0x1000) != 0)
    v5 = (v8 + 4435 * (__int16)v5 + (v8 + 4435 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v9 = -16383;
  else
    v9 = 0x4000;
  if (((v2 - a1) & 0x2000) != 0)
    v5 = (v9 + 600 * (__int16)v5 + (v9 + 600 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if ((v5 & 0x8000u) != 0)
    v10 = -16383;
  else
    v10 = 0x4000;
  v11 = (v10 + 11 * (__int16)v5 + (v10 + 11 * (__int16)v5 < 0 ? 0x7FFF : 0)) >> 15;
  if (((v2 - a1) & 0x4000) != 0)
    v12 = v11;
  else
    v12 = v5;
  if (a1)
    return v12;
  else
    return 0x7FFFLL;
}

void sub_20B81C164(uint64_t a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7;
  int v8;
  __int32 v9;
  BOOL v10;
  int v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  _QWORD v32[2];
  __int32 v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;

  v7 = *(_DWORD *)(a4 + 8);
  v8 = *(_DWORD *)(a4 + 12);
  v9 = a2[1].i32[1];
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      v21 = off_24C469460;
      sub_20B81C364(a1, (unint64_t)&v21, (uint64_t)a2, a3, a4, a5, a6, a7);
    }
    else
    {
      v12 = *(_DWORD *)(a4 + 16);
      v34 = *(_QWORD *)a4;
      v35 = v8;
      v36 = v7;
      v37 = v12;
      v13 = a3[2].i32[0];
      v32[0] = *a3;
      v32[1] = vrev64_s32(a3[1]);
      v33 = v13;
      v14 = a2[1].i32[0];
      v15 = a2[2].i32[0];
      v28 = *a2;
      v29 = v9;
      v30 = v14;
      v31 = v15;
      v16 = *(_QWORD *)a6;
      v26 = *(_QWORD *)a5;
      v27 = v16;
      v17 = *(_DWORD *)(a7 + 8);
      v18 = *(_QWORD *)(a7 + 16);
      v19 = *(_DWORD *)(a7 + 24);
      v20 = *(_QWORD *)(a7 + 28);
      v21 = *(uint64_t (***)())a7;
      v22 = v17;
      v23 = v18;
      v24 = v19;
      v25 = v20;
      sub_20B81C264(a1, (uint64_t)v32, &v28, (uint64_t)&v34, &v27, &v26, (uint64_t)&v21);
    }
  }
}

void sub_20B81C264(uint64_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v12;
  __int32 v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  _QWORD v32[2];
  __int32 v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;

  v7 = *(_DWORD *)(a4 + 8);
  v8 = *(_DWORD *)(a4 + 12);
  v9 = *(_DWORD *)(a2 + 12);
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    if (v7 >= v8)
    {
      v21 = off_24C469460;
      sub_20B81C7B0(a1, (unint64_t)&v21, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      v12 = *(_DWORD *)(a4 + 16);
      v34 = *(_QWORD *)a4;
      v35 = v8;
      v36 = v7;
      v37 = v12;
      v13 = a3[2].i32[0];
      v32[0] = *a3;
      v32[1] = vrev64_s32(a3[1]);
      v33 = v13;
      v14 = *(_DWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 16);
      v28 = *(_QWORD *)a2;
      v29 = v9;
      v30 = v14;
      v31 = v15;
      v16 = *(_QWORD *)a6;
      v26 = *(_QWORD *)a5;
      v27 = v16;
      v17 = *(_DWORD *)(a7 + 8);
      v18 = *(_QWORD *)(a7 + 16);
      v19 = *(_DWORD *)(a7 + 24);
      v20 = *(_QWORD *)(a7 + 28);
      v21 = *(uint64_t (***)())a7;
      v22 = v17;
      v23 = v18;
      v24 = v19;
      v25 = v20;
      sub_20B81C164(a1, v32, &v28, &v34, &v27, &v26, &v21);
    }
  }
}

void sub_20B81C364(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  signed int v19;
  __int32 v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v49;
  int v50;
  int v51;
  _OWORD v52[5];
  unsigned int v53[4];
  int v54;
  uint64_t v55[2];
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;

  v9 = a3;
  v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1)
    goto LABEL_17;
  v12 = *(int *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v50 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254728068);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254728068))
    {
      dword_254728060 = sysconf(57);
      __cxa_guard_release(&qword_254728068);
    }
    v10 = dword_254728060;
  }
  v14 = v12 + 15;
  if ((int)v12 + 15 < 0)
    v14 = v12 + 30;
  v15 = v14 >> 4;
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  if (v16 >= 2)
  {
    v17 = (unint64_t)(v11 * (uint64_t)(int)v12 * v50) >> 16;
    if (v16 < (int)v17)
      LODWORD(v17) = v16;
    if ((int)v17 <= 1)
      v16 = 1;
    else
      v16 = v17;
  }
  if (v16 == 1)
  {
LABEL_17:
    sub_20B81E80C(a1, a2, v9, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_20B81776C(v53, v12, v11, v50, v16, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_20B819A88((uint64_t)v52, 1, (_QWORD *)a1, v53);
    sub_20B817834(a1);
    if (v11 >= 1)
    {
      v18 = 0;
      v42 = v11;
      v19 = v54;
      do
      {
        v20 = a4[2].i32[0];
        v51 = v18;
        v21 = (uint64_t *)(*(_QWORD *)a4 + v20 * v18);
        if (v11 - v18 < v19)
          v19 = v11 - v18;
        v49 = v19;
        v57 = (uint64_t *)__PAIR64__(v50, v19);
        LODWORD(v58) = v20;
        v55[0] = (uint64_t)v52;
        v55[1] = (uint64_t)&v56;
        v56 = v21;
        sub_20B8181DC(v55);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        if (v16 >= 1)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            if ((int)((++v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC) >= (int)v12)
              v24 = v12;
            else
              v24 = (v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC;
            v25 = *(_QWORD *)v9;
            v26 = v9;
            v27 = *(_DWORD *)(v9 + 16);
            v28 = operator new();
            v29 = v28;
            v30 = v52[0];
            *(_OWORD *)(v28 + 72) = v52[1];
            v31 = v52[3];
            *(_OWORD *)(v28 + 88) = v52[2];
            *(_OWORD *)(v28 + 104) = v31;
            *(_OWORD *)(v28 + 120) = v52[4];
            *(_QWORD *)v28 = &off_24C469490;
            *(_QWORD *)(v28 + 8) = 0;
            *(_QWORD *)(v28 + 16) = a1;
            *(_QWORD *)(v28 + 24) = a2;
            *(_QWORD *)(v28 + 32) = v25 + (int)(v27 * v23);
            *(_DWORD *)(v28 + 40) = v24 - v23;
            *(_DWORD *)(v28 + 44) = v50;
            *(_DWORD *)(v28 + 48) = v27;
            *(_OWORD *)(v28 + 56) = v30;
            *(_QWORD *)(v28 + 136) = *(_QWORD *)a5;
            *(_QWORD *)(v28 + 144) = *(_QWORD *)(a5 + 8);
            *(_DWORD *)(v28 + 152) = *(_DWORD *)(a5 + 16);
            *(_DWORD *)(v28 + 160) = v23;
            *(_DWORD *)(v28 + 164) = v51;
            *(_DWORD *)(v28 + 168) = v24 - v23;
            *(_DWORD *)(v28 + 172) = v49;
            *(_QWORD *)(v28 + 176) = a6;
            *(_QWORD *)(v28 + 184) = a7;
            *(_QWORD *)(v28 + 192) = v53;
            *(_QWORD *)(v28 + 200) = a8;
            v32 = v57;
            if (v57 >= v58)
            {
              v34 = v57 - v56;
              if ((unint64_t)(v34 + 1) >> 61)
                sub_20B80CDD8();
              v9 = v26;
              v35 = ((char *)v58 - (char *)v56) >> 2;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if ((unint64_t)((char *)v58 - (char *)v56) >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v37 = (char *)sub_20B800BE8((uint64_t)&v58, v36);
              else
                v37 = 0;
              v38 = (uint64_t *)&v37[8 * v34];
              *v38 = v29;
              v33 = v38 + 1;
              v40 = v56;
              v39 = v57;
              if (v57 != v56)
              {
                do
                {
                  v41 = *--v39;
                  *--v38 = v41;
                }
                while (v39 != v40);
                v39 = v56;
              }
              v56 = v38;
              v57 = v33;
              v58 = (uint64_t *)&v37[8 * v36];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v57 = v28;
              v33 = v32 + 1;
              v9 = v26;
            }
            v57 = v33;
            v23 = v24;
          }
          while (v22 != v16);
        }
        sub_20B8178D8(a1 + 104, &v56);
        v11 = v42;
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }
        v19 = v54;
        v18 = v54 + v51;
      }
      while (v54 + v51 < v42);
    }
    *(_BYTE *)a1 = 0;
    ++*(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_20B81C768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254728068);
  _Unwind_Resume(a1);
}

void sub_20B81C7B0(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  signed int v19;
  __int32 v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v49;
  int v50;
  int v51;
  _OWORD v52[5];
  unsigned int v53[4];
  int v54;
  uint64_t v55[2];
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;

  v9 = a3;
  v10 = *(_DWORD *)(a1 + 100);
  if (v10 == 1)
    goto LABEL_17;
  v12 = *(int *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v50 = *(_DWORD *)(a3 + 12);
  if (!v10)
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254728068);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254728068))
    {
      dword_254728060 = sysconf(57);
      __cxa_guard_release(&qword_254728068);
    }
    v10 = dword_254728060;
  }
  v14 = v12 + 15;
  if ((int)v12 + 15 < 0)
    v14 = v12 + 30;
  v15 = v14 >> 4;
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  if (v16 >= 2)
  {
    v17 = (unint64_t)(v11 * (uint64_t)(int)v12 * v50) >> 16;
    if (v16 < (int)v17)
      LODWORD(v17) = v16;
    if ((int)v17 <= 1)
      v16 = 1;
    else
      v16 = v17;
  }
  if (v16 == 1)
  {
LABEL_17:
    sub_20B81CBFC(a1, a2, v9, a4, a5, a6, a7, a8);
  }
  else
  {
    sub_20B81776C(v53, v12, v11, v50, v16, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
    sub_20B819A88((uint64_t)v52, 1, (_QWORD *)a1, v53);
    sub_20B817834(a1);
    if (v11 >= 1)
    {
      v18 = 0;
      v42 = v11;
      v19 = v54;
      do
      {
        v20 = a4[2].i32[0];
        v51 = v18;
        v21 = (uint64_t *)(*(_QWORD *)a4 + v20 * v18);
        if (v11 - v18 < v19)
          v19 = v11 - v18;
        v49 = v19;
        v57 = (uint64_t *)__PAIR64__(v50, v19);
        LODWORD(v58) = v20;
        v55[0] = (uint64_t)v52;
        v55[1] = (uint64_t)&v56;
        v56 = v21;
        sub_20B8181DC(v55);
        v56 = 0;
        v57 = 0;
        v58 = 0;
        if (v16 >= 1)
        {
          v22 = 0;
          v23 = 0;
          do
          {
            if ((int)((++v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC) >= (int)v12)
              v24 = v12;
            else
              v24 = (v22 * (int)v12 / v16 + 3) & 0xFFFFFFFC;
            v25 = *(_QWORD *)v9;
            v26 = v9;
            v27 = *(_DWORD *)(v9 + 16);
            v28 = operator new();
            v29 = v28;
            v30 = v52[0];
            *(_OWORD *)(v28 + 72) = v52[1];
            v31 = v52[3];
            *(_OWORD *)(v28 + 88) = v52[2];
            *(_OWORD *)(v28 + 104) = v31;
            *(_OWORD *)(v28 + 120) = v52[4];
            *(_QWORD *)v28 = &off_24C4694B8;
            *(_QWORD *)(v28 + 8) = 0;
            *(_QWORD *)(v28 + 16) = a1;
            *(_QWORD *)(v28 + 24) = a2;
            *(_QWORD *)(v28 + 32) = v25 + (int)(v27 * v23);
            *(_DWORD *)(v28 + 40) = v24 - v23;
            *(_DWORD *)(v28 + 44) = v50;
            *(_DWORD *)(v28 + 48) = v27;
            *(_OWORD *)(v28 + 56) = v30;
            *(_QWORD *)(v28 + 136) = *(_QWORD *)a5;
            *(_QWORD *)(v28 + 144) = *(_QWORD *)(a5 + 8);
            *(_DWORD *)(v28 + 152) = *(_DWORD *)(a5 + 16);
            *(_DWORD *)(v28 + 160) = v23;
            *(_DWORD *)(v28 + 164) = v51;
            *(_DWORD *)(v28 + 168) = v24 - v23;
            *(_DWORD *)(v28 + 172) = v49;
            *(_QWORD *)(v28 + 176) = a6;
            *(_QWORD *)(v28 + 184) = a7;
            *(_QWORD *)(v28 + 192) = v53;
            *(_QWORD *)(v28 + 200) = a8;
            v32 = v57;
            if (v57 >= v58)
            {
              v34 = v57 - v56;
              if ((unint64_t)(v34 + 1) >> 61)
                sub_20B80CDD8();
              v9 = v26;
              v35 = ((char *)v58 - (char *)v56) >> 2;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if ((unint64_t)((char *)v58 - (char *)v56) >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v37 = (char *)sub_20B800BE8((uint64_t)&v58, v36);
              else
                v37 = 0;
              v38 = (uint64_t *)&v37[8 * v34];
              *v38 = v29;
              v33 = v38 + 1;
              v40 = v56;
              v39 = v57;
              if (v57 != v56)
              {
                do
                {
                  v41 = *--v39;
                  *--v38 = v41;
                }
                while (v39 != v40);
                v39 = v56;
              }
              v56 = v38;
              v57 = v33;
              v58 = (uint64_t *)&v37[8 * v36];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v57 = v28;
              v33 = v32 + 1;
              v9 = v26;
            }
            v57 = v33;
            v23 = v24;
          }
          while (v22 != v16);
        }
        sub_20B8178D8(a1 + 104, &v56);
        v11 = v42;
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }
        v19 = v54;
        v18 = v54 + v51;
      }
      while (v54 + v51 < v42);
    }
    *(_BYTE *)a1 = 0;
    ++*(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_20B81CBB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254728068);
  _Unwind_Resume(a1);
}

void sub_20B81CBFC(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int32 v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  __int32 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _DWORD v40[2];
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int *v45;
  _BYTE v46[16];
  uint64_t v47;
  unsigned __int8 v48;
  _BYTE v49[16];
  uint64_t v50;
  unsigned __int8 v51;
  unsigned int v52[3];
  int v53;
  int v54;
  _BYTE *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  _BYTE *v60;
  _BYTE *v61;

  v10 = *(_DWORD *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v13 = *(_DWORD *)(a3 + 12);
  sub_20B81776C(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_20B819A88((uint64_t)v49, 0, (_QWORD *)a1, v52);
  sub_20B819A88((uint64_t)v46, 1, (_QWORD *)a1, v52);
  v41 = a1;
  v45 = v52;
  v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8 * v15 + 40) = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 80);
  v32 = (_QWORD *)(a1 + 24);
  v33 = a1;
  ++*(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) += v14;
  v42 = v15;
  v43 = v16;
  v44 = 5;
  sub_20B817834(a1);
  v17 = v54;
  if (v54 >= v11)
  {
    v18 = (unint64_t)*a4;
    v19 = a4[2].i32[0];
    v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    v55 = v46;
    v56 = &v57;
    v57 = v18;
    sub_20B8181DC((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    v20 = 0;
    v21 = v53;
    v34 = v10;
    do
    {
      v22 = *(_DWORD *)(a3 + 16);
      v23 = *(_QWORD *)a3 + v22 * v20;
      if (v10 - v20 >= v21)
        v24 = v21;
      else
        v24 = v10 - v20;
      v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      v55 = v49;
      v56 = &v57;
      v57 = v23;
      sub_20B8181DC((uint64_t *)&v55);
      if (v11 >= 1)
      {
        v25 = 0;
        v26 = v54;
        do
        {
          if (v11 - v25 >= v26)
            v27 = v26;
          else
            v27 = v11 - v25;
          if (v17 < v11)
          {
            v28 = a4[2].i32[0];
            v29 = *(_QWORD *)a4 + v28 * v25;
            v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            v55 = v46;
            v56 = &v57;
            v57 = v29;
            sub_20B8181DC((uint64_t *)&v55);
          }
          v57 = a2;
          v58 = v52;
          v59 = &v41;
          v60 = v49;
          v61 = v46;
          sub_20B818748((uint64_t)&v57, v13);
          v57 = __PAIR64__(v25, v20);
          v58 = (unsigned int *)__PAIR64__(v27, v24);
          v30 = *(_QWORD *)(v50 + 8 * v51 + 40) + *(_QWORD *)(v50 + 16);
          v31 = *(_QWORD *)(v47 + 8 * v48 + 40) + *(_QWORD *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_20B81CED4(a5, (int *)&v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      v21 = v53;
      v20 += v53;
      v10 = v34;
    }
    while (v20 < v34);
  }
  *(_BYTE *)v33 = 0;
  ++*(_QWORD *)(v33 + 80);
  *v32 = 0;
  v32[1] = 0;
}

void sub_20B81CED4(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  _DWORD *v9;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v39;
  uint64_t v40;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v53;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v65;
  uint64_t v66;
  uint64_t v71;
  int v72;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v91;
  _OWORD v94[4];
  _QWORD v95[2];
  int v96;
  _QWORD *v97[5];
  _QWORD v98[5];
  _QWORD v99[5];
  _QWORD v100[5];
  _QWORD v101[5];
  _QWORD v102[2];
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _OWORD v112[4];
  uint64_t v113;

  v9 = a8;
  v13 = a1;
  v113 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a3 + 32);
  v109 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(_QWORD *)(*(_QWORD *)a3 + 16);
  v110 = *(_QWORD *)(v14 + 12);
  v111 = v110;
  v107 = a5;
  v15 = a2[3];
  v108 = a2[2];
  v105 = a6;
  v106 = v15;
  v102[0] = a9;
  v102[1] = a9 + 16;
  v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v103) = v16 & ~(v16 >> 31);
  HIDWORD(v103) = -v16 & ~(-v16 >> 31);
  v104 = a9 + 28;
  v101[0] = a9;
  v101[1] = a9 + 16;
  v101[2] = v103;
  v101[3] = a9 + 28;
  v100[0] = a9;
  v100[1] = a9 + 16;
  v100[2] = v103;
  v100[3] = a9 + 28;
  v99[0] = a9;
  v99[1] = a9 + 16;
  v99[2] = v103;
  v99[3] = a9 + 28;
  v98[0] = a9;
  v98[1] = a9 + 16;
  v98[2] = v103;
  v98[3] = a9 + 28;
  v97[0] = (_QWORD *)a9;
  v97[1] = (_QWORD *)(a9 + 16);
  v97[2] = v103;
  v97[3] = (_QWORD *)(a9 + 28);
  if (v15 >= 8)
  {
    v17 = 0;
    do
    {
      _X10 = v107;
      __asm { PRFM            #0, [X10] }
      _X10 = v107 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v109 + 4 * v111 * v17;
      v27 = 8;
      do
      {
        __asm { PRFM            #0, [X8] }
        _X11 = _X8 + 16;
        __asm { PRFM            #0, [X11] }
        _X8 += 4 * v111;
        --v27;
      }
      while (v27);
      LODWORD(v31) = a2[2];
      if ((int)v31 >= 8)
      {
        v33 = 0;
        v34 = 0;
        do
        {
          v35 = *a2;
          v32 = v34 + 8;
          _X11 = v107 + 4 * (v34 + 8);
          __asm { PRFM            #0, [X11] }
          _X11 += 16;
          __asm { PRFM            #0, [X11] }
          v39 = v109 + v33 + 4 * v17 * v111;
          v40 = 8;
          do
          {
            _X12 = v39 + 32;
            __asm { PRFM            #0, [X12] }
            _X12 = v39 + 48;
            __asm { PRFM            #0, [X12] }
            v39 += 4 * v111;
            --v40;
          }
          while (v40);
          v45 = v35 + v34;
          v95[0] = v112;
          v95[1] = 0x800000008;
          v96 = 8;
          sub_20B81D6A0((uint64_t)&v109, v97, (uint64_t)v95, &v107, &v105, a7, a8, a4, v34, v17, v35 + v34, a2[1] + v17, 0, 0);
          sub_20B81D6A0((uint64_t)&v109, v97, (uint64_t)v95, &v107, &v105, a7, a8, a4, v34, v17 | 4, v45, a2[1] + (v17 | 4), 0, 4);
          v94[0] = v112[0];
          v94[1] = v112[1];
          v94[2] = v112[2];
          v94[3] = v112[3];
          sub_20B81E0FC((int8x8_t *)v94, a1, *a2 + v34, a2[1] + v17);
          v31 = a2[2];
          v33 += 32;
          v34 += 8;
        }
        while (v32 <= v31 - 8);
        v9 = a8;
      }
      else
      {
        LODWORD(v32) = 0;
      }
      for (; (int)v32 <= (int)v31 - 4; LODWORD(v31) = a2[2])
      {
        v46 = v32 + *a2;
        sub_20B81D8C0((uint64_t)&v109, (uint64_t)v98, a1, &v107, &v105, a7, v9, a4, v32, v17, v46, a2[1] + v17, v46, a2[1] + v17);
        sub_20B81D8C0((uint64_t)&v109, (uint64_t)v98, a1, &v107, &v105, a7, v9, a4, v32, v17 | 4, v46, a2[1] + (v17 | 4), v46, a2[1] + (v17 | 4));
        LODWORD(v32) = v32 + 4;
      }
      if ((int)v32 < (int)v31)
      {
        do
        {
          v47 = v32 + *a2;
          sub_20B81DA40((uint64_t)&v109, (uint64_t)v99, a1, &v107, &v105, a7, v9, a4, v32, v17, v47, a2[1] + v17, v47, a2[1] + v17);
          sub_20B81DA40((uint64_t)&v109, (uint64_t)v99, a1, &v107, &v105, a7, v9, a4, v32, v17 | 4, v47, a2[1] + (v17 | 4), v47, a2[1] + (v17 | 4));
          LODWORD(v32) = v32 + 1;
        }
        while ((int)v32 < a2[2]);
      }
      v17 += 8;
      v15 = a2[3];
    }
    while (v17 <= v15 - 8);
    v13 = a1;
  }
  else
  {
    v17 = 0;
  }
  while (v17 <= v15 - 4)
  {
    _X11 = v107;
    __asm { PRFM            #0, [X11] }
    _X11 = v107 + 16;
    __asm { PRFM            #0, [X11] }
    _X9 = v109 + 4 * v111 * v17;
    v53 = 4;
    do
    {
      __asm { PRFM            #0, [X9] }
      _X12 = _X9 + 16;
      __asm { PRFM            #0, [X12] }
      _X9 += 4 * v111;
      --v53;
    }
    while (v53);
    v57 = a2[1] + v17;
    LODWORD(v58) = a2[2];
    if ((int)v58 >= 8)
    {
      v60 = 0;
      v61 = 0;
      do
      {
        v59 = v61 + 8;
        _X12 = v107 + 4 * (v61 + 8);
        __asm { PRFM            #0, [X12] }
        _X12 += 16;
        __asm { PRFM            #0, [X12] }
        v65 = v109 + v60 + 4 * v17 * v111;
        v66 = 4;
        do
        {
          _X13 = v65 + 32;
          __asm { PRFM            #0, [X13] }
          _X13 = v65 + 48;
          __asm { PRFM            #0, [X13] }
          v65 += 4 * v111;
          --v66;
        }
        while (v66);
        sub_20B81DB2C((uint64_t)&v109, v97, v13, &v107, &v105, a7, v9, a4, v61, v17, *a2 + v61, v57, *a2 + v61, v57);
        v58 = a2[2];
        v60 += 32;
        v61 = v59;
      }
      while (v59 <= v58 - 8);
    }
    else
    {
      LODWORD(v59) = 0;
    }
    while ((int)v59 <= (int)v58 - 4)
    {
      sub_20B81D8C0((uint64_t)&v109, (uint64_t)v98, v13, &v107, &v105, a7, v9, a4, v59, v17, v59 + *a2, v57, v59 + *a2, v57);
      LODWORD(v59) = v59 + 4;
      LODWORD(v58) = a2[2];
    }
    if ((int)v59 < (int)v58)
    {
      do
      {
        sub_20B81DA40((uint64_t)&v109, (uint64_t)v99, v13, &v107, &v105, a7, v9, a4, v59, v17, v59 + *a2, v57, v59 + *a2, v57);
        LODWORD(v59) = v59 + 1;
      }
      while ((int)v59 < a2[2]);
    }
    v17 += 4;
    v15 = a2[3];
  }
  if (v17 < v15)
  {
    v71 = v17;
    do
    {
      v72 = a2[1] + v71;
      _X10 = v107;
      __asm { PRFM            #0, [X10] }
      _X10 = v107 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v109 + 4 * v111 * (int)v71;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        v81 = 0;
        v82 = 32;
        do
        {
          v83 = v81;
          v81 += 8;
          _X12 = v107 + v82;
          __asm { PRFM            #0, [X12] }
          _X12 = v107 + v82 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v109 + 4 * (int)v71 * v111 + v82;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_20B81DD30((uint64_t)&v109, (uint64_t)v100, v13, &v107, &v105, a7, v9, a4, v83, v71, v83 + *a2, v72, v83 + *a2, v72);
          _X8 = a2[2];
          v82 += 32;
        }
        while (v81 <= _X8 - 8);
      }
      else
      {
        LODWORD(v81) = 0;
      }
      if ((int)v81 <= (int)_X8 - 4)
      {
        v91 = 4 * v81;
        do
        {
          sub_20B81E540((uint64_t)v101, v13, vaddq_s32(vmlaq_s32(*(int32x4_t *)(v109 + 4 * (int)v71 * v111 + v91), vdupq_n_s32(*v9 + 128), *(int32x4_t *)(v107 + v91)), vdupq_n_s32((*(_DWORD *)(v105 + 4 * v71) + (*v9 + 128) * a4) * (*a7 + 128))), (v81 + *a2), v72, v81 + *a2, v72);
          LODWORD(_X8) = a2[2];
          LODWORD(v81) = v81 + 4;
          v91 += 16;
        }
        while ((int)_X8 - 4 >= (int)v81);
      }
      if ((int)v81 < (int)_X8)
      {
        do
        {
          sub_20B81DDC4((uint64_t)&v109, (uint64_t)v102, v13, &v107, &v105, a7, v9, a4, v81, v71, v81 + *a2, v72, v81 + *a2, v72);
          LODWORD(v81) = v81 + 1;
        }
        while ((int)v81 < a2[2]);
      }
      ++v71;
    }
    while (a2[3] > (int)v71);
  }
}

double sub_20B81D6A0(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  int32x4_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int32x4_t v30;
  __int8 *v31;
  uint64_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double result;
  _OWORD v46[2];
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[4];
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v15 = 0;
  v64 = *MEMORY[0x24BDAC8D0];
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v16 = *(int *)(a1 + 16);
  v17 = (__int128 *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(_QWORD *)a1 + 16);
  v18 = 4 * v16;
  do
  {
    v19 = *v17;
    v20 = &v47.i8[v15];
    *(_OWORD *)v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    v17 = (__int128 *)((char *)v17 + v18);
  }
  while (v15 != 128);
  v21 = 0;
  v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v46[0] = *(_OWORD *)(*a4 + 4 * a9);
  v46[1] = v22;
  v23 = *(int32x4_t *)(*a5 + 4 * a10);
  v24 = *a6;
  v25 = *a7 + 128;
  v26 = vdupq_n_s32(v25);
  v27 = 1;
  do
  {
    v28 = 0;
    v29 = v27;
    v30 = vmulq_s32((int32x4_t)v46[v21], v26);
    v31 = &v47.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    v27 = 0;
    v21 = 1;
  }
  while ((v29 & 1) != 0);
  v32 = 0;
  v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v56 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v57 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v58 = vdupq_laneq_s32(v33, 2);
  v59 = vdupq_laneq_s32(v33, 3);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = v34;
    v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v47 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v47 + v37), *(int32x4_t *)((char *)&v56 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    v34 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  v60 = v51;
  v61 = v52;
  v62 = v53;
  v63 = v54;
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v38 = sub_20B81DE88(a2, &v56, a11, a12);
  v39 = 0;
  *(double *)v55 = v38;
  v55[1] = v40;
  v55[2] = v41;
  v55[3] = v42;
  v43 = *(int *)(a3 + 16);
  v44 = (double *)(*(_QWORD *)a3 + a13 + (int)v43 * (uint64_t)a14);
  do
  {
    result = *(double *)&v55[v39];
    *v44 = result;
    ++v39;
    v44 = (double *)((char *)v44 + v43);
  }
  while (v39 != 4);
  return result;
}

double sub_20B81D8C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  int32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int v22;
  unsigned int v23;
  int32x4_t v24;
  uint64_t v25;
  int32x4_t v26;
  uint64_t v27;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;

  v15 = 0;
  v37 = *MEMORY[0x24BDAC8D0];
  v16 = *(int *)(a1 + 16);
  v17 = (int32x4_t *)(*(_QWORD *)a1 + 4 * (int)v16 * (uint64_t)a10 + 4 * a9);
  v18 = 4 * v16;
  do
  {
    *(int32x4_t *)((char *)&v33 + v15) = *v17;
    v15 += 16;
    v17 = (int32x4_t *)((char *)v17 + v18);
  }
  while (v15 != 64);
  v19 = 0;
  v20 = *(int32x4_t *)(*a4 + 4 * a9);
  v29 = v33;
  v30 = v34;
  v31 = v35;
  v32 = v36;
  v21 = *(int32x4_t *)(*a5 + 4 * a10);
  v22 = *a6;
  v23 = *a7 + 128;
  v24 = vmulq_s32(vdupq_n_s32(v23), v20);
  do
  {
    *(int32x4_t *)((char *)&v29 + v19) = vaddq_s32(*(int32x4_t *)((char *)&v29 + v19), v24);
    v19 += 16;
  }
  while (v19 != 64);
  v25 = 0;
  v26 = vmulq_s32(vaddq_s32(vdupq_n_s32(v23 * a8), v21), vdupq_n_s32(v22 + 128));
  v33 = vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
  v34 = vdupq_lane_s32(*(int32x2_t *)v26.i8, 1);
  v35 = vdupq_laneq_s32(v26, 2);
  v36 = vdupq_laneq_s32(v26, 3);
  do
  {
    *(int32x4_t *)((char *)&v29 + v25) = vaddq_s32(*(int32x4_t *)((char *)&v29 + v25), *(int32x4_t *)((char *)&v33 + v25));
    v25 += 16;
  }
  while (v25 != 64);
  *(int8x8_t *)v33.i8 = sub_20B81E1B4(a2, v29, v30, v31, v32, a11, a12);
  v33.i64[1] = v27;
  return sub_20B81E274((uint64_t)&v33, a3, a13, a14);
}

uint64_t sub_20B81DA40(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  __int32 *v16;
  uint64_t v17;
  int32x4_t v19;
  uint64_t v20;

  v14 = 0;
  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (__int32 *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    v19.i32[v14++] = *v16;
    v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  return sub_20B81E304(a2, a3, vmlaq_s32(vaddq_s32(vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)), v19), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128)), a11, a12, a13, a14);
}

double sub_20B81DB2C(uint64_t a1, _QWORD **a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  int32x4_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int32x4_t v30;
  __int8 *v31;
  uint64_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v42[2];
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[4];
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v15 = 0;
  v60 = *MEMORY[0x24BDAC8D0];
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v16 = *(int *)(a1 + 16);
  v17 = (__int128 *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(_QWORD *)a1 + 16);
  v18 = 4 * v16;
  do
  {
    v19 = *v17;
    v20 = &v43.i8[v15];
    *(_OWORD *)v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    v17 = (__int128 *)((char *)v17 + v18);
  }
  while (v15 != 128);
  v21 = 0;
  v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v42[0] = *(_OWORD *)(*a4 + 4 * a9);
  v42[1] = v22;
  v23 = *(int32x4_t *)(*a5 + 4 * a10);
  v24 = *a6;
  v25 = *a7 + 128;
  v26 = vdupq_n_s32(v25);
  v27 = 1;
  do
  {
    v28 = 0;
    v29 = v27;
    v30 = vmulq_s32((int32x4_t)v42[v21], v26);
    v31 = &v43.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    v27 = 0;
    v21 = 1;
  }
  while ((v29 & 1) != 0);
  v32 = 0;
  v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v52 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v53 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v54 = vdupq_laneq_s32(v33, 2);
  v55 = vdupq_laneq_s32(v33, 3);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = v34;
    v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v43 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v43 + v37), *(int32x4_t *)((char *)&v52 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    v34 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v52 = v43;
  v53 = v44;
  v54 = v45;
  v55 = v46;
  v51[0] = sub_20B81DE88(a2, &v52, a11, a12);
  v51[1] = v38;
  v51[2] = v39;
  v51[3] = v40;
  return sub_20B81E3A4((uint64_t)v51, a3, a13, a14);
}

double sub_20B81DD30(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13, int a14)
{
  uint64_t v14;
  unsigned int v15;
  int32x4_t v16;
  int32x4_t v17;

  v14 = 4 * *(_DWORD *)(a1 + 16) * a10;
  v15 = *a7 + 128;
  v16 = vdupq_n_s32(v15);
  v17 = vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + v15 * a8) * (*a6 + 128));
  return sub_20B81E438(a2, a3, vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9)), v17), vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + 16 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9 + 16)), v17), a11, a12, a13, a14);
}

uint64_t sub_20B81DDC4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t result;
  int *v17;
  int v18;
  int v19;
  int v20;

  result = sub_20B819934((_DWORD *)(a2 + 8), *(_DWORD *)(*(_QWORD *)a1 + 4 * a9 + 4 * *(_DWORD *)(a1 + 16) * a10)+ (*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)+ *(_DWORD *)(**(_QWORD **)a2 + 4 * a12)+ (*(_DWORD *)(*a5 + 4 * a10) + (*a7 + 128) * a8) * (*a6 + 128));
  v17 = *(int **)(a2 + 24);
  v19 = *v17;
  v18 = v17[1];
  if ((int)result > v19)
    v19 = result;
  if (v18 >= v19)
    v18 = v19;
  v20 = v18 & ~(v18 >> 31);
  if (v20 >= 255)
    LOBYTE(v20) = -1;
  *(_BYTE *)(*(_QWORD *)a3 + *(int *)(a3 + 16) * (uint64_t)a13 + a14) = v20;
  return result;
}

double sub_20B81DE88(_QWORD **a1, int32x4_t *a2, uint64_t a3, int a4)
{
  const float **v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  _OWORD v19[8];
  _OWORD v20[8];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = (const float **)(a1 + 3);
  v5 = *(int32x4_t *)(**a1 + 4 * a4);
  v6 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
  v7 = vaddq_s32(v6, *a2);
  v8 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 1);
  v9 = vaddq_s32(v6, a2[1]);
  v10 = vaddq_s32(v8, a2[2]);
  v11 = vaddq_s32(v8, a2[3]);
  v12 = vdupq_laneq_s32(v5, 2);
  v13 = vaddq_s32(v12, a2[4]);
  v14 = vaddq_s32(v12, a2[5]);
  v15 = vdupq_laneq_s32(v5, 3);
  v16 = vaddq_s32(v15, a2[6]);
  v17 = vaddq_s32(v15, a2[7]);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20[0] = v7;
  v20[1] = v9;
  v20[2] = v10;
  v20[3] = v11;
  v20[4] = v13;
  v20[5] = v14;
  v20[6] = v16;
  v20[7] = v17;
  sub_20B819214((uint64_t)(a1 + 1), v20, &v21);
  v19[4] = v25;
  v19[5] = v26;
  v19[6] = v27;
  v19[7] = v28;
  v19[0] = v21;
  v19[1] = v22;
  v19[2] = v23;
  v19[3] = v24;
  return sub_20B81DF74(v4, v19);
}

double sub_20B81DF74(const float **a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  const float *v7;
  int32x4_t v8;
  int32x4_t v9;
  _OWORD v11[8];
  int32x4_t v12[16];
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a2[5];
  v11[4] = a2[4];
  v11[5] = v3;
  v4 = a2[7];
  v11[6] = a2[6];
  v11[7] = v4;
  v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  v6 = a2[3];
  v11[2] = a2[2];
  v11[3] = v6;
  v7 = *a1;
  v8 = (int32x4_t)vld1q_dup_f32(v7++);
  v9 = (int32x4_t)vld1q_dup_f32(v7);
  do
  {
    v12[v2] = vminq_s32(vmaxq_s32((int32x4_t)v11[v2], v8), v9);
    ++v2;
  }
  while (v2 != 8);
  v12[12] = v12[4];
  v12[13] = v12[5];
  v12[14] = v12[6];
  v12[15] = v12[7];
  v12[8] = v12[0];
  v12[9] = v12[1];
  v12[10] = v12[2];
  v12[11] = v12[3];
  return sub_20B81E060((uint64_t)(a1 + 1), v12);
}

double sub_20B81E060(uint64_t a1, int32x4_t *a2)
{
  uint64_t v2;
  int32x4_t *v3;
  uint64_t i;
  _QWORD v6[14];

  v2 = 0;
  v6[13] = *MEMORY[0x24BDAC8D0];
  v3 = a2 + 1;
  do
  {
    *(int16x8_t *)&v6[v2 + 4] = vqmovn_high_s32(vqmovn_s32(v3[-1]), *v3);
    v3 += 2;
    v2 += 2;
  }
  while (v2 != 8);
  for (i = 0; i != 4; ++i)
    v6[i] = vqmovun_s16(*(int16x8_t *)&v6[2 * i + 4]);
  return *(double *)v6;
}

double sub_20B81E0FC(int8x8_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int8x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int8x8_t v12;
  int8x8_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int8x8_t v16;
  int8x8_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  double *v30;
  double result;
  _QWORD v32[8];

  v4 = 0;
  v5 = a1[1];
  v6 = (int16x4_t)vtrn1_s8(*a1, v5);
  v7 = (int16x4_t)vtrn2_s8(*a1, v5);
  v8 = a1[2];
  v9 = a1[3];
  v10 = (int16x4_t)vtrn1_s8(v8, v9);
  v11 = (int16x4_t)vtrn2_s8(v8, v9);
  v12 = a1[4];
  v13 = a1[5];
  v14 = (int16x4_t)vtrn1_s8(v12, v13);
  v15 = (int16x4_t)vtrn2_s8(v12, v13);
  v16 = a1[6];
  v17 = a1[7];
  v18 = (int16x4_t)vtrn1_s8(v16, v17);
  v19 = (int16x4_t)vtrn2_s8(v16, v17);
  v20 = (int32x2_t)vtrn1_s16(v6, v10);
  v21 = (int32x2_t)vtrn2_s16(v6, v10);
  v22 = (int32x2_t)vtrn1_s16(v7, v11);
  v23 = (int32x2_t)vtrn2_s16(v7, v11);
  v24 = (int32x2_t)vtrn1_s16(v14, v18);
  v25 = (int32x2_t)vtrn2_s16(v14, v18);
  v26 = (int32x2_t)vtrn1_s16(v15, v19);
  v27 = *(int *)(a2 + 16);
  v28 = *(_QWORD *)a2 + (int)v27 * (uint64_t)a3;
  v29 = (int32x2_t)vtrn2_s16(v15, v19);
  v32[2] = vzip1_s32(v21, v25);
  v32[3] = vzip1_s32(v23, v29);
  v32[4] = vzip2_s32(v20, v24);
  v32[5] = vzip2_s32(v22, v26);
  v32[6] = vzip2_s32(v21, v25);
  v32[7] = vzip2_s32(v23, v29);
  v30 = (double *)(v28 + a4);
  do
  {
    result = *(double *)&v32[v4];
    *v30 = result;
    v30 = (double *)((char *)v30 + v27);
    ++v4;
  }
  while (v4 != 8);
  return result;
}

int8x8_t sub_20B81E1B4(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, uint64_t a6, int a7)
{
  int32x4_t v8;
  double v9;
  double v10;
  __n128 v11;
  __n128 v12;
  int32x4_t v13;
  int32x4_t v14;

  v8 = *(int32x4_t *)(**(_QWORD **)a1 + 4 * a7);
  v9 = sub_20B819530(a1 + 8, *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v8.i8, 0), a2).i64, *(double *)vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v8.i8, 1), a3).i64, (__n128)vaddq_s32(vdupq_laneq_s32(v8, 2), a4), (__n128)vaddq_s32(vdupq_laneq_s32(v8, 3), a5));
  *(double *)v13.i64 = sub_20B81E228((const float **)(a1 + 24), v9, v10, v11, v12);
  return vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v13), v14));
}

double sub_20B81E228(const float **a1, double a2, double a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  const float *v6;
  int32x4_t v7;
  int32x4_t v8;
  _OWORD v10[4];
  __int128 v11;

  v5 = 0;
  v10[2] = a4;
  v10[3] = a5;
  v6 = *a1;
  v7 = (int32x4_t)vld1q_dup_f32(v6++);
  v8 = (int32x4_t)vld1q_dup_f32(v6);
  do
  {
    *(__int128 *)((char *)&v11 + v5 * 16) = (__int128)vminq_s32(vmaxq_s32((int32x4_t)v10[v5], v7), v8);
    ++v5;
  }
  while (v5 != 4);
  return *(double *)&v11;
}

double sub_20B81E274(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = 0;
  v5 = *(int *)(a2 + 16);
  v6 = *(_QWORD *)a2 + (int)v5 * (uint64_t)a3 + a4;
  v7 = v6 + v5;
  v8 = v6 + 2 * v5;
  v9 = v6 + 3 * v5;
  v10 = 1;
  do
  {
    v11 = a1 + 8 * v4;
    result = *(double *)v11;
    v13 = 2 * v4;
    *(_BYTE *)(v6 + 2 * v4) = *(_QWORD *)v11;
    *(_BYTE *)(v7 + v13) = *(_BYTE *)(v11 + 1);
    *(_BYTE *)(v8 + v13) = *(_BYTE *)(v11 + 2);
    *(_BYTE *)(v9 + v13) = *(_BYTE *)(v11 + 3);
    v14 = (2 * v4) | 1;
    *(_BYTE *)(v6 + v14) = *(_BYTE *)(v11 + 4);
    *(_BYTE *)(v7 + v14) = *(_BYTE *)(v11 + 5);
    *(_BYTE *)(v8 + v14) = *(_BYTE *)(v11 + 6);
    v15 = v10;
    *(_BYTE *)(v9 + v14) = *(_BYTE *)(v11 + 7);
    v4 = 1;
    v10 = 0;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_20B81E304(uint64_t result, uint64_t a2, int32x4_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v7;
  const float *v8;
  const float *v9;
  int32x4_t v10;
  const float *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  const float *v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  unsigned __int32 v22;
  uint64_t v23;

  v7 = 0;
  v8 = *(const float **)(result + 8);
  v9 = v8 + 2;
  v10 = (int32x4_t)vld1q_dup_f32(v9);
  v11 = (const float *)(result + 16);
  v12 = (int32x4_t)vld1q_dup_f32(v11);
  v13 = vshlq_s32(vaddq_s32(*(int32x4_t *)(**(_QWORD **)result + 4 * a5), a3), v12);
  v14 = (int32x4_t)vld1q_dup_f32(v8);
  v15 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  v16 = vqrdmulhq_s32(v13, v14);
  v17 = vaddq_s32(vrshlq_s32(vqaddq_s32(v16, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)v16))), v15), v10);
  v18 = *(const float **)(result + 24);
  v19 = (int32x4_t)vld1q_dup_f32(v18++);
  v20 = (int32x4_t)vld1q_dup_f32(v18);
  v21 = (int16x8_t)vminq_s32(vmaxq_s32(v17, v19), v20);
  *(int16x4_t *)v21.i8 = vqmovn_s32((int32x4_t)v21);
  v22 = vqmovun_s16(v21).u32[0];
  v23 = a7;
  do
  {
    *(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + 16) * (uint64_t)a6 + v23) = v22 >> v7;
    v7 += 8;
    ++v23;
  }
  while (v7 != 32);
  return result;
}

double sub_20B81E3A4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  double result;

  v4 = 0;
  v5 = *(_QWORD *)a2 + *(int *)(a2 + 16) * (uint64_t)a3 + a4;
  v6 = (_BYTE *)(a1 + 3);
  do
  {
    v7 = *(int *)(a2 + 16);
    v8 = (_BYTE *)(v5 + v4);
    result = *(double *)(a1 + 8 * v4);
    *v8 = LOBYTE(result);
    v8[v7] = *(v6 - 2);
    v8[2 * v7] = *(v6 - 1);
    v8[3 * v7] = *v6;
    v8[4 * v7] = v6[1];
    v8[5 * v7] = v6[2];
    v8[6 * (int)v7] = v6[3];
    *(_BYTE *)(v5 + v4++ - v7 + 8 * v7) = v6[4];
    v6 += 8;
  }
  while (v4 != 4);
  return result;
}

double sub_20B81E438(uint64_t a1, uint64_t a2, int32x4_t a3, int32x4_t a4, uint64_t a5, int a6, int a7, int a8)
{
  const float *v12;
  int32x4_t v13;
  int32x4_t v14;
  const float *v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x8_t v20;

  v12 = (const float *)(**(_QWORD **)a1 + 4 * a6);
  v13 = (int32x4_t)vld1q_dup_f32(v12);
  *(double *)v14.i64 = sub_20B819724((const float *)(a1 + 8), *(double *)vaddq_s32(v13, a3).i64, (int32x2_t)*(_OWORD *)&vaddq_s32(v13, a4));
  v15 = *(const float **)(a1 + 24);
  v16 = (int32x4_t)vld1q_dup_f32(v15++);
  v17 = (int32x4_t)vld1q_dup_f32(v15);
  v20 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vminq_s32(vmaxq_s32(v14, v16), v17)), vminq_s32(vmaxq_s32(v18, v16), v17)));
  return sub_20B81E4CC((uint64_t)&v20, a2, a7, a8);
}

double sub_20B81E4CC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  _BYTE *v5;
  double result;

  v4 = *(int *)(a2 + 16);
  v5 = (_BYTE *)(*(_QWORD *)a2 + (int)v4 * (uint64_t)a3 + a4);
  result = *(double *)a1;
  *v5 = *(_QWORD *)a1;
  v5[v4] = *(_BYTE *)(a1 + 1);
  v5[2 * v4] = *(_BYTE *)(a1 + 2);
  v5[3 * v4] = *(_BYTE *)(a1 + 3);
  v5[4 * v4] = *(_BYTE *)(a1 + 4);
  v5[5 * v4] = *(_BYTE *)(a1 + 5);
  v5[6 * (int)v4] = *(_BYTE *)(a1 + 6);
  v5[8 * v4 - v4] = *(_BYTE *)(a1 + 7);
  return result;
}

uint64_t sub_20B81E540(uint64_t result, uint64_t a2, int32x4_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  const float *v8;
  const float *v9;
  int32x4_t v10;
  const float *v11;
  int32x4_t v12;
  const float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  unsigned __int32 v24;

  v7 = 0;
  v8 = *(const float **)(result + 8);
  v9 = (const float *)(**(_QWORD **)result + 4 * a5);
  v10 = (int32x4_t)vld1q_dup_f32(v9);
  v11 = v8 + 2;
  v12 = (int32x4_t)vld1q_dup_f32(v11);
  v13 = (const float *)(result + 16);
  v14 = (int32x4_t)vld1q_dup_f32(v13);
  v15 = vshlq_s32(vaddq_s32(v10, a3), v14);
  v16 = (int32x4_t)vld1q_dup_f32(v8);
  v17 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  v18 = vqrdmulhq_s32(v15, v16);
  v19 = vaddq_s32(vrshlq_s32(vqaddq_s32(v18, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)v18))), v17), v12);
  v20 = *(const float **)(result + 24);
  v21 = (int32x4_t)vld1q_dup_f32(v20++);
  v22 = (int32x4_t)vld1q_dup_f32(v20);
  v23 = (int16x8_t)vminq_s32(vmaxq_s32(v19, v21), v22);
  *(int16x4_t *)v23.i8 = vqmovn_s32((int32x4_t)v23);
  v24 = vqmovun_s16(v23).u32[0];
  do
  {
    *(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + 16) * (uint64_t)a6 + a7) = v24 >> v7;
    v7 += 8;
    ++a6;
  }
  while (v7 != 32);
  return result;
}

void sub_20B81E5E4()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B81E5F8(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _DWORD v26[2];
  _QWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;

  v2 = *(_DWORD *)(a1 + 168);
  v3 = *(_DWORD *)(a1 + 172);
  v4 = *(_DWORD *)(a1 + 44);
  sub_20B819A88((uint64_t)v32, 0, *(_QWORD **)(a1 + 8), *(_DWORD **)(a1 + 192));
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 192);
  v27 = v5;
  v31 = v6;
  v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  v8 = v5[3];
  v5[v8 + 5] = v5[4];
  v9 = v5[4] + v7;
  v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  v28 = v8;
  v29 = v10;
  v30 = 5;
  sub_20B817834((uint64_t)v5);
  if (v3 >= 1)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 192);
    v13 = *(_DWORD *)(v12 + 16);
    v25 = v3;
    do
    {
      if (v3 - v11 >= v13)
        v14 = v13;
      else
        v14 = v3 - v11;
      if (v2 >= 1)
      {
        v15 = 0;
        v16 = *(_DWORD *)(v12 + 12);
        do
        {
          v17 = *(_DWORD *)(a1 + 48);
          v36 = *(_QWORD *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16)
            v18 = v16;
          else
            v18 = v2 - v15;
          v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_20B8181DC(v35);
          v19 = *(_QWORD *)(a1 + 192);
          v36 = *(_QWORD *)(a1 + 24);
          v37 = v19;
          v38 = &v27;
          v39 = v32;
          v40 = a1 + 56;
          sub_20B818748((uint64_t)&v36, v4);
          v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          v37 = __PAIR64__(v14, v18);
          v21 = *(_QWORD *)(v33 + 8 * v34 + 40) + *(_QWORD *)(v33 + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
          v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_20B81CED4(a1 + 136, (int *)&v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(_QWORD *)(a1 + 200));
          v12 = *(_QWORD *)(a1 + 192);
          v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        v13 = *(_DWORD *)(v12 + 16);
        v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  v24 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)v24 = 0;
  ++*(_QWORD *)(v24 + 80);
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
}

void sub_20B81E80C(uint64_t a1, unint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int32 v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  __int32 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _DWORD v40[2];
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int *v45;
  _BYTE v46[16];
  uint64_t v47;
  unsigned __int8 v48;
  _BYTE v49[16];
  uint64_t v50;
  unsigned __int8 v51;
  unsigned int v52[3];
  int v53;
  int v54;
  _BYTE *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t *v59;
  _BYTE *v60;
  _BYTE *v61;

  v10 = *(_DWORD *)(a5 + 8);
  v11 = *(_DWORD *)(a5 + 12);
  v13 = *(_DWORD *)(a3 + 12);
  sub_20B81776C(v52, v10, v11, v13, 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 96));
  sub_20B819A88((uint64_t)v49, 0, (_QWORD *)a1, v52);
  sub_20B819A88((uint64_t)v46, 1, (_QWORD *)a1, v52);
  v41 = a1;
  v45 = v52;
  v14 = (4 * v54 * v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8 * v15 + 40) = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 80);
  v32 = (_QWORD *)(a1 + 24);
  v33 = a1;
  ++*(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) += v14;
  v42 = v15;
  v43 = v16;
  v44 = 5;
  sub_20B817834(a1);
  v17 = v54;
  if (v54 >= v11)
  {
    v18 = (unint64_t)*a4;
    v19 = a4[2].i32[0];
    v58 = (unsigned int *)vrev64_s32(a4[1]);
    LODWORD(v59) = v19;
    v55 = v46;
    v56 = &v57;
    v57 = v18;
    sub_20B8181DC((uint64_t *)&v55);
  }
  if (v10 >= 1)
  {
    v20 = 0;
    v21 = v53;
    v34 = v10;
    do
    {
      v22 = *(_DWORD *)(a3 + 16);
      v23 = *(_QWORD *)a3 + v22 * v20;
      if (v10 - v20 >= v21)
        v24 = v21;
      else
        v24 = v10 - v20;
      v58 = (unsigned int *)__PAIR64__(v13, v24);
      LODWORD(v59) = v22;
      v55 = v49;
      v56 = &v57;
      v57 = v23;
      sub_20B8181DC((uint64_t *)&v55);
      if (v11 >= 1)
      {
        v25 = 0;
        v26 = v54;
        do
        {
          if (v11 - v25 >= v26)
            v27 = v26;
          else
            v27 = v11 - v25;
          if (v17 < v11)
          {
            v28 = a4[2].i32[0];
            v29 = *(_QWORD *)a4 + v28 * v25;
            v58 = (unsigned int *)__PAIR64__(v13, v27);
            LODWORD(v59) = v28;
            v55 = v46;
            v56 = &v57;
            v57 = v29;
            sub_20B8181DC((uint64_t *)&v55);
          }
          v57 = a2;
          v58 = v52;
          v59 = &v41;
          v60 = v49;
          v61 = v46;
          sub_20B818748((uint64_t)&v57, v13);
          v57 = __PAIR64__(v25, v20);
          v58 = (unsigned int *)__PAIR64__(v27, v24);
          v30 = *(_QWORD *)(v50 + 8 * v51 + 40) + *(_QWORD *)(v50 + 16);
          v31 = *(_QWORD *)(v47 + 8 * v48 + 40) + *(_QWORD *)(v47 + 16);
          LODWORD(v55) = *a6;
          HIDWORD(v55) = v24;
          v40[0] = *a7;
          v40[1] = v27;
          sub_20B81EAE4(a5, &v57, (uint64_t)&v41, v13, v30, v31, (int *)&v55, v40, a8);
          v26 = v54;
          v25 += v54;
        }
        while (v25 < v11);
      }
      v21 = v53;
      v20 += v53;
      v10 = v34;
    }
    while (v20 < v34);
  }
  *(_BYTE *)v33 = 0;
  ++*(_QWORD *)(v33 + 80);
  *v32 = 0;
  v32[1] = 0;
}

void sub_20B81EAE4(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int *a7, _DWORD *a8, uint64_t a9)
{
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v27;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v39;
  uint64_t v40;
  uint64_t v45;
  uint64_t v46;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v65;
  _QWORD v66[5];
  _QWORD v67[5];
  _QWORD v68[5];
  _QWORD v69[5];
  _QWORD v70[5];
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;

  v14 = *(_QWORD *)(a3 + 32);
  v78 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned __int8 *)(a3 + 8) + 40) + *(_QWORD *)(*(_QWORD *)a3 + 16);
  v79 = *(_QWORD *)(v14 + 12);
  v80 = v79;
  v76 = a5;
  v15 = a2[3];
  v77 = a2[2];
  v74 = a6;
  v75 = v15;
  v71[0] = a9;
  v71[1] = a9 + 16;
  v16 = *(_DWORD *)(a9 + 20);
  LODWORD(v72) = v16 & ~(v16 >> 31);
  HIDWORD(v72) = -v16 & ~(-v16 >> 31);
  v73 = a9 + 28;
  v70[0] = a9;
  v70[1] = a9 + 16;
  v70[2] = v72;
  v70[3] = a9 + 28;
  v69[0] = a9;
  v69[1] = a9 + 16;
  v69[2] = v72;
  v69[3] = a9 + 28;
  v68[0] = a9;
  v68[1] = a9 + 16;
  v68[2] = v72;
  v68[3] = a9 + 28;
  v67[0] = a9;
  v67[1] = a9 + 16;
  v67[2] = v72;
  v67[3] = a9 + 28;
  v66[0] = a9;
  v66[1] = a9 + 16;
  v66[2] = v72;
  v66[3] = a9 + 28;
  if (v15 >= 4)
  {
    v17 = 0;
    do
    {
      _X11 = v76;
      __asm { PRFM            #0, [X11] }
      _X11 = v76 + 16;
      __asm { PRFM            #0, [X11] }
      _X9 = v78 + 4 * v80 * v17;
      v27 = 4;
      do
      {
        __asm { PRFM            #0, [X9] }
        _X12 = _X9 + 16;
        __asm { PRFM            #0, [X12] }
        _X9 += 4 * v80;
        --v27;
      }
      while (v27);
      v31 = a2[1] + v17;
      LODWORD(v32) = a2[2];
      if ((int)v32 >= 8)
      {
        v34 = 0;
        v35 = 0;
        do
        {
          v33 = v35 + 8;
          _X12 = v76 + 4 * (v35 + 8);
          __asm { PRFM            #0, [X12] }
          _X12 += 16;
          __asm { PRFM            #0, [X12] }
          v39 = v78 + v34 + 4 * v17 * v80;
          v40 = 4;
          do
          {
            _X13 = v39 + 32;
            __asm { PRFM            #0, [X13] }
            _X13 = v39 + 48;
            __asm { PRFM            #0, [X13] }
            v39 += 4 * v80;
            --v40;
          }
          while (v40);
          sub_20B81EF84((uint64_t)&v78, (uint64_t)v66, a1, &v76, &v74, a7, a8, a4, v35, v17, *a2 + v35, v31, *a2 + v35, v31);
          v32 = (int)a2[2];
          v34 += 32;
          v35 = v33;
        }
        while (v33 <= v32 - 8);
      }
      else
      {
        LODWORD(v33) = 0;
      }
      while ((int)v33 <= (int)v32 - 4)
      {
        sub_20B81F1A4((uint64_t)&v78, (uint64_t)v67, a1, &v76, &v74, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
        LODWORD(v33) = v33 + 4;
        LODWORD(v32) = a2[2];
      }
      if ((int)v33 < (int)v32)
      {
        do
        {
          sub_20B81F304((uint64_t)&v78, (uint64_t)v68, a1, &v76, &v74, a7, a8, a4, v33, v17, v33 + *a2, v31, v33 + *a2, v31);
          LODWORD(v33) = v33 + 1;
        }
        while ((int)v33 < a2[2]);
      }
      v17 += 4;
      v15 = a2[3];
    }
    while (v17 <= v15 - 4);
  }
  else
  {
    v17 = 0;
  }
  if (v17 < v15)
  {
    v45 = v17;
    do
    {
      v46 = (a2[1] + v45);
      _X10 = v76;
      __asm { PRFM            #0, [X10] }
      _X10 = v76 + 16;
      __asm { PRFM            #0, [X10] }
      _X8 = v78 + 4 * v80 * (int)v45;
      __asm { PRFM            #0, [X8] }
      _X8 = _X8 + 16;
      __asm { PRFM            #0, [X8] }
      LODWORD(_X8) = a2[2];
      if ((int)_X8 >= 8)
      {
        v55 = 0;
        v56 = 32;
        do
        {
          v57 = v55;
          v55 += 8;
          _X12 = v76 + v56;
          __asm { PRFM            #0, [X12] }
          _X12 = v76 + v56 + 16;
          __asm { PRFM            #0, [X12] }
          _X10 = v78 + 4 * (int)v45 * v80 + v56;
          __asm { PRFM            #0, [X10] }
          _X10 += 16;
          __asm { PRFM            #0, [X10] }
          sub_20B81F3F0((uint64_t)&v78, (uint64_t)v69, a1, &v76, &v74, a7, a8, a4, v57, v45, v57 + *a2, v46, v57 + *a2, v46);
          _X8 = (int)a2[2];
          v56 += 32;
        }
        while (v55 <= _X8 - 8);
      }
      else
      {
        LODWORD(v55) = 0;
      }
      if ((int)v55 <= (int)_X8 - 4)
      {
        v65 = 4 * v55;
        do
        {
          sub_20B81F880((uint64_t)v70, a1, v55 + *a2, vaddq_s32(vmlaq_s32(*(int32x4_t *)(v78 + 4 * (int)v45 * v80 + v65), vdupq_n_s32(*a8 + 128), *(int32x4_t *)(v76 + v65)), vdupq_n_s32((*(_DWORD *)(v74 + 4 * v45) + (*a8 + 128) * a4) * (*a7 + 128))), v46, v55 + *a2, v46);
          LODWORD(_X8) = a2[2];
          LODWORD(v55) = v55 + 4;
          v65 += 16;
        }
        while ((int)_X8 - 4 >= (int)v55);
      }
      if ((int)v55 < (int)_X8)
      {
        do
        {
          sub_20B81F484((uint64_t)&v78, (uint64_t)v71, a1, &v76, &v74, a7, a8, a4, v55, v45, v55 + *a2, v46, v55 + *a2, v46);
          LODWORD(v55) = v55 + 1;
        }
        while ((int)v55 < a2[2]);
      }
      ++v45;
    }
    while (a2[3] > (int)v45);
  }
}

double sub_20B81EF84(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int8 *v20;
  uint64_t v21;
  __int128 v22;
  int32x4_t v23;
  int v24;
  unsigned int v25;
  int32x4_t v26;
  char v27;
  uint64_t v28;
  char v29;
  int32x4_t v30;
  __int8 *v31;
  uint64_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double result;
  _OWORD v46[2];
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[4];
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v15 = 0;
  v64 = *MEMORY[0x24BDAC8D0];
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v16 = *(int *)(a1 + 16);
  v17 = (__int128 *)(4 * (int)v16 * (uint64_t)a10 + 4 * a9 + *(_QWORD *)a1 + 16);
  v18 = 4 * v16;
  do
  {
    v19 = *v17;
    v20 = &v47.i8[v15];
    *(_OWORD *)v20 = *(v17 - 1);
    *((_OWORD *)v20 + 1) = v19;
    v15 += 32;
    v17 = (__int128 *)((char *)v17 + v18);
  }
  while (v15 != 128);
  v21 = 0;
  v22 = *(_OWORD *)(*a4 + 4 * (a9 + 4));
  v46[0] = *(_OWORD *)(*a4 + 4 * a9);
  v46[1] = v22;
  v23 = *(int32x4_t *)(*a5 + 4 * a10);
  v24 = *a6;
  v25 = *a7 + 128;
  v26 = vdupq_n_s32(v25);
  v27 = 1;
  do
  {
    v28 = 0;
    v29 = v27;
    v30 = vmulq_s32((int32x4_t)v46[v21], v26);
    v31 = &v47.i8[16 * v21];
    do
    {
      *(int32x4_t *)&v31[v28] = vaddq_s32(*(int32x4_t *)&v31[v28], v30);
      v28 += 32;
    }
    while (v28 != 128);
    v27 = 0;
    v21 = 1;
  }
  while ((v29 & 1) != 0);
  v32 = 0;
  v33 = vmulq_s32(vaddq_s32(vdupq_n_s32(v25 * a8), v23), vdupq_n_s32(v24 + 128));
  v56 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
  v57 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
  v58 = vdupq_laneq_s32(v33, 2);
  v59 = vdupq_laneq_s32(v33, 3);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = v34;
    v37 = 16 * v32;
    do
    {
      *(int32x4_t *)((char *)&v47 + v37) = vaddq_s32(*(int32x4_t *)((char *)&v47 + v37), *(int32x4_t *)((char *)&v56 + v35));
      v35 += 16;
      v37 += 32;
    }
    while (v35 != 64);
    v34 = 0;
    v32 = 1;
  }
  while ((v36 & 1) != 0);
  v60 = v51;
  v61 = v52;
  v62 = v53;
  v63 = v54;
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  v38 = sub_20B81F54C(a2, &v56, a11);
  v39 = 0;
  *(double *)v55 = v38;
  v55[1] = v40;
  v55[2] = v41;
  v55[3] = v42;
  v43 = *(int *)(a3 + 16);
  v44 = (double *)(*(_QWORD *)a3 + a13 + (int)v43 * (uint64_t)a14);
  do
  {
    result = *(double *)&v55[v39];
    *v44 = result;
    ++v39;
    v44 = (double *)((char *)v44 + v43);
  }
  while (v39 != 4);
  return result;
}

double sub_20B81F1A4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  int32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int v21;
  unsigned int v22;
  int32x4_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;

  v14 = 0;
  v35 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (int32x4_t *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    *(int32x4_t *)((char *)&v31 + v14) = *v16;
    v14 += 16;
    v16 = (int32x4_t *)((char *)v16 + v17);
  }
  while (v14 != 64);
  v18 = 0;
  v19 = *(int32x4_t *)(*a4 + 4 * a9);
  v27 = v31;
  v28 = v32;
  v29 = v33;
  v30 = v34;
  v20 = *(int32x4_t *)(*a5 + 4 * a10);
  v21 = *a6;
  v22 = *a7 + 128;
  v23 = vmulq_s32(vdupq_n_s32(v22), v19);
  do
  {
    *(int32x4_t *)((char *)&v27 + v18) = vaddq_s32(*(int32x4_t *)((char *)&v27 + v18), v23);
    v18 += 16;
  }
  while (v18 != 64);
  v24 = 0;
  v25 = vmulq_s32(vaddq_s32(vdupq_n_s32(v22 * a8), v20), vdupq_n_s32(v21 + 128));
  v31 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  v32 = vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  v33 = vdupq_laneq_s32(v25, 2);
  v34 = vdupq_laneq_s32(v25, 3);
  do
  {
    *(int32x4_t *)((char *)&v27 + v24) = vaddq_s32(*(int32x4_t *)((char *)&v27 + v24), *(int32x4_t *)((char *)&v31 + v24));
    v24 += 16;
  }
  while (v24 != 64);
  return sub_20B81F628(a2, a3, a11, v27, v28, v29, v30, a12, a13, a14);
}

uint64_t sub_20B81F304(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  __int32 *v16;
  uint64_t v17;
  int32x4_t v19;
  uint64_t v20;

  v14 = 0;
  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(int *)(a1 + 16);
  v16 = (__int32 *)(*(_QWORD *)a1 + 4 * (int)v15 * (uint64_t)a10 + 4 * a9);
  v17 = 4 * v15;
  do
  {
    v19.i32[v14++] = *v16;
    v16 = (__int32 *)((char *)v16 + v17);
  }
  while (v14 != 4);
  return sub_20B81F754(a2, a3, a11, vmlaq_s32(vaddq_s32(vdupq_n_s32((*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)), v19), vaddq_s32(vdupq_n_s32((*a7 + 128) * a8), *(int32x4_t *)(*a5 + 4 * a10)), vdupq_n_s32(*a6 + 128)), a12, a13, a14);
}

int8x8_t sub_20B81F3F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  unsigned int v15;
  int32x4_t v16;
  int32x4_t v17;

  v14 = 4 * *(_DWORD *)(a1 + 16) * a10;
  v15 = *a7 + 128;
  v16 = vdupq_n_s32(v15);
  v17 = vdupq_n_s32((*(_DWORD *)(*a5 + 4 * a10) + v15 * a8) * (*a6 + 128));
  return sub_20B81F7F8(a2, a3, a11, vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9)), v17), vaddq_s32(vmlaq_s32(*(int32x4_t *)(*(_QWORD *)a1 + 4 * a9 + 16 + v14), v16, *(int32x4_t *)(*a4 + 4 * a9 + 16)), v17), a12, a13, a14);
}

uint64_t sub_20B81F484(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  uint64_t result;
  int *v17;
  int v18;
  int v19;
  int v20;

  result = sub_20B819934((_DWORD *)(a2 + 8), *(_DWORD *)(*(_QWORD *)a1 + 4 * a9 + 4 * *(_DWORD *)(a1 + 16) * a10)+ (*a7 + 128) * *(_DWORD *)(*a4 + 4 * a9)+ *(_DWORD *)(**(_QWORD **)a2 + 4 * a11)+ (*(_DWORD *)(*a5 + 4 * a10) + (*a7 + 128) * a8) * (*a6 + 128));
  v17 = *(int **)(a2 + 24);
  v19 = *v17;
  v18 = v17[1];
  if ((int)result > v19)
    v19 = result;
  if (v18 >= v19)
    v18 = v19;
  v20 = v18 & ~(v18 >> 31);
  if (v20 >= 255)
    LOBYTE(v20) = -1;
  *(_BYTE *)(*(_QWORD *)a3 + a13 + *(int *)(a3 + 16) * (uint64_t)a14) = v20;
  return result;
}

double sub_20B81F54C(uint64_t a1, int32x4_t *a2, int a3)
{
  uint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  _OWORD v15[8];
  _OWORD v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = **(_QWORD **)a1 + 4 * a3;
  v5 = *(int32x4_t *)(v4 + 16);
  v6 = vaddq_s32(*(int32x4_t *)v4, *a2);
  v7 = vaddq_s32(v5, a2[1]);
  v8 = vaddq_s32(*(int32x4_t *)v4, a2[2]);
  v9 = vaddq_s32(v5, a2[3]);
  v10 = vaddq_s32(*(int32x4_t *)v4, a2[4]);
  v11 = vaddq_s32(v5, a2[5]);
  v12 = vaddq_s32(*(int32x4_t *)v4, a2[6]);
  v13 = vaddq_s32(v5, a2[7]);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16[0] = v6;
  v16[1] = v7;
  v16[2] = v8;
  v16[3] = v9;
  v16[4] = v10;
  v16[5] = v11;
  v16[6] = v12;
  v16[7] = v13;
  sub_20B819214(a1 + 8, v16, &v17);
  v15[4] = v21;
  v15[5] = v22;
  v15[6] = v23;
  v15[7] = v24;
  v15[0] = v17;
  v15[1] = v18;
  v15[2] = v19;
  v15[3] = v20;
  return sub_20B81DF74((const float **)(a1 + 24), v15);
}

double sub_20B81F628(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, uint64_t a8, int a9, int a10)
{
  int32x4_t v14;
  double v15;
  double v16;
  __n128 v17;
  __n128 v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  _QWORD v24[2];

  v14 = *(int32x4_t *)(**(_QWORD **)a1 + 4 * a3);
  v15 = sub_20B819530(a1 + 8, *(double *)vaddq_s32(v14, a4).i64, *(double *)vaddq_s32(v14, a5).i64, (__n128)vaddq_s32(v14, a6), (__n128)vaddq_s32(v14, a7));
  *(double *)v19.i64 = sub_20B81E228((const float **)(a1 + 24), v15, v16, v17, v18);
  v24[0] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v19), v20));
  v24[1] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v21), v22));
  return sub_20B81F6C0((uint64_t)v24, a2, a9, a10);
}

double sub_20B81F6C0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v4 = 0;
  v5 = *(int *)(a2 + 16);
  v6 = *(_QWORD *)a2 + a3 + (int)v5 * (uint64_t)a4;
  v7 = v6 + 1;
  v8 = v6 + 2;
  v9 = v6 + 3;
  v10 = 1;
  do
  {
    v11 = a1 + 8 * v4;
    v12 = 2 * v4 * v5;
    result = *(double *)v11;
    *(_BYTE *)(v6 + v12) = *(_QWORD *)v11;
    *(_BYTE *)(v7 + v12) = *(_BYTE *)(v11 + 1);
    *(_BYTE *)(v8 + v12) = *(_BYTE *)(v11 + 2);
    *(_BYTE *)(v9 + v12) = *(_BYTE *)(v11 + 3);
    v14 = ((2 * v4) | 1) * v5;
    *(_BYTE *)(v6 + v14) = *(_BYTE *)(v11 + 4);
    *(_BYTE *)(v7 + v14) = *(_BYTE *)(v11 + 5);
    *(_BYTE *)(v8 + v14) = *(_BYTE *)(v11 + 6);
    LOBYTE(v12) = v10;
    *(_BYTE *)(v9 + v14) = *(_BYTE *)(v11 + 7);
    v4 = 1;
    v10 = 0;
  }
  while ((v12 & 1) != 0);
  return result;
}

uint64_t sub_20B81F754(uint64_t result, uint64_t a2, int a3, int32x4_t a4, uint64_t a5, int a6, int a7)
{
  int v7;
  const float *v8;
  const float *v9;
  int32x4_t v10;
  const float *v11;
  int32x4_t v12;
  const float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  const float *v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  unsigned __int32 v24;

  v7 = 0;
  v8 = *(const float **)(result + 8);
  v9 = (const float *)(**(_QWORD **)result + 4 * a3);
  v10 = (int32x4_t)vld1q_dup_f32(v9);
  v11 = v8 + 2;
  v12 = (int32x4_t)vld1q_dup_f32(v11);
  v13 = (const float *)(result + 16);
  v14 = (int32x4_t)vld1q_dup_f32(v13);
  v15 = vshlq_s32(vaddq_s32(v10, a4), v14);
  v16 = (int32x4_t)vld1q_dup_f32(v8);
  v17 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  v18 = vqrdmulhq_s32(v15, v16);
  v19 = vaddq_s32(vrshlq_s32(vqaddq_s32(v18, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)v18))), v17), v12);
  v20 = *(const float **)(result + 24);
  v21 = (int32x4_t)vld1q_dup_f32(v20++);
  v22 = (int32x4_t)vld1q_dup_f32(v20);
  v23 = (int16x8_t)vminq_s32(vmaxq_s32(v19, v21), v22);
  *(int16x4_t *)v23.i8 = vqmovn_s32((int32x4_t)v23);
  v24 = vqmovun_s16(v23).u32[0];
  do
  {
    *(_BYTE *)(*(_QWORD *)a2 + a6 + *(int *)(a2 + 16) * (uint64_t)a7) = v24 >> v7;
    v7 += 8;
    ++a7;
  }
  while (v7 != 32);
  return result;
}

int8x8_t sub_20B81F7F8(uint64_t a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, uint64_t a6, int a7, int a8)
{
  int32x4_t v12;
  const float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x8_t result;

  *(double *)v12.i64 = sub_20B819724((const float *)(a1 + 8), *(double *)vaddq_s32(*(int32x4_t *)(**(_QWORD **)a1 + 4 * a3), a4).i64, (int32x2_t)*(_OWORD *)&vaddq_s32(*(int32x4_t *)(**(_QWORD **)a1 + 4 * a3 + 16), a5));
  v13 = *(const float **)(a1 + 24);
  v14 = (int32x4_t)vld1q_dup_f32(v13++);
  v15 = (int32x4_t)vld1q_dup_f32(v13);
  result = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vminq_s32(vmaxq_s32(v12, v14), v15)), vminq_s32(vmaxq_s32(v16, v14), v15)));
  *(int8x8_t *)(*(_QWORD *)a2 + a7 + *(int *)(a2 + 16) * (uint64_t)a8) = result;
  return result;
}

uint64_t sub_20B81F880(uint64_t result, uint64_t a2, int a3, int32x4_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  const float *v8;
  const float *v9;
  int32x4_t v10;
  const float *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  const float *v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  unsigned __int32 v22;
  uint64_t v23;

  v7 = 0;
  v8 = *(const float **)(result + 8);
  v9 = v8 + 2;
  v10 = (int32x4_t)vld1q_dup_f32(v9);
  v11 = (const float *)(result + 16);
  v12 = (int32x4_t)vld1q_dup_f32(v11);
  v13 = vshlq_s32(vaddq_s32(*(int32x4_t *)(**(_QWORD **)result + 4 * a3), a4), v12);
  v14 = (int32x4_t)vld1q_dup_f32(v8);
  v15 = vdupq_n_s32(-*(_DWORD *)(result + 20));
  v16 = vqrdmulhq_s32(v13, v14);
  v17 = vaddq_s32(vrshlq_s32(vqaddq_s32(v16, vcltzq_s32((int32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)v16))), v15), v10);
  v18 = *(const float **)(result + 24);
  v19 = (int32x4_t)vld1q_dup_f32(v18++);
  v20 = (int32x4_t)vld1q_dup_f32(v18);
  v21 = (int16x8_t)vminq_s32(vmaxq_s32(v17, v19), v20);
  *(int16x4_t *)v21.i8 = vqmovn_s32((int32x4_t)v21);
  v22 = vqmovun_s16(v21).u32[0];
  v23 = a6;
  do
  {
    *(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + 16) * (uint64_t)a7 + v23) = v22 >> v7;
    v7 += 8;
    ++v23;
  }
  while (v7 != 32);
  return result;
}

void sub_20B81F924()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B81F938(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _DWORD v26[2];
  _QWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;

  v2 = *(_DWORD *)(a1 + 168);
  v3 = *(_DWORD *)(a1 + 172);
  v4 = *(_DWORD *)(a1 + 44);
  sub_20B819A88((uint64_t)v32, 0, *(_QWORD **)(a1 + 8), *(_DWORD **)(a1 + 192));
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 192);
  v27 = v5;
  v31 = v6;
  v7 = (4 * *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12) + 63) & 0xFFFFFFFFFFFFFFC0;
  v8 = v5[3];
  v5[v8 + 5] = v5[4];
  v9 = v5[4] + v7;
  v10 = v5[10];
  ++v5[3];
  v5[4] = v9;
  v28 = v8;
  v29 = v10;
  v30 = 5;
  sub_20B817834((uint64_t)v5);
  if (v3 >= 1)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 192);
    v13 = *(_DWORD *)(v12 + 16);
    v25 = v3;
    do
    {
      if (v3 - v11 >= v13)
        v14 = v13;
      else
        v14 = v3 - v11;
      if (v2 >= 1)
      {
        v15 = 0;
        v16 = *(_DWORD *)(v12 + 12);
        do
        {
          v17 = *(_DWORD *)(a1 + 48);
          v36 = *(_QWORD *)(a1 + 32) + v17 * v15;
          if (v2 - v15 >= v16)
            v18 = v16;
          else
            v18 = v2 - v15;
          v37 = __PAIR64__(v4, v18);
          LODWORD(v38) = v17;
          v35[0] = (uint64_t)v32;
          v35[1] = (uint64_t)&v36;
          sub_20B8181DC(v35);
          v19 = *(_QWORD *)(a1 + 192);
          v36 = *(_QWORD *)(a1 + 24);
          v37 = v19;
          v38 = &v27;
          v39 = v32;
          v40 = a1 + 56;
          sub_20B818748((uint64_t)&v36, v4);
          v20 = *(_DWORD *)(a1 + 164) + v11;
          LODWORD(v36) = *(_DWORD *)(a1 + 160) + v15;
          HIDWORD(v36) = v20;
          v37 = __PAIR64__(v14, v18);
          v21 = *(_QWORD *)(v33 + 8 * v34 + 40) + *(_QWORD *)(v33 + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned __int8 *)(a1 + 104) + 40)
              + *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
          v23 = *(_DWORD **)(a1 + 184);
          LODWORD(v35[0]) = **(_DWORD **)(a1 + 176);
          HIDWORD(v35[0]) = v18;
          v26[0] = *v23;
          v26[1] = v14;
          sub_20B81EAE4(a1 + 136, &v36, (uint64_t)&v27, v4, v21, v22, (int *)v35, v26, *(_QWORD *)(a1 + 200));
          v12 = *(_QWORD *)(a1 + 192);
          v16 = *(_DWORD *)(v12 + 12);
          v15 += v16;
        }
        while (v15 < v2);
        v13 = *(_DWORD *)(v12 + 16);
        v3 = v25;
      }
      v11 += v13;
    }
    while (v11 < v3);
  }
  v24 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)v24 = 0;
  ++*(_QWORD *)(v24 + 80);
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
}

uint64_t sub_20B81FB4C@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  float32x4_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;

  v4 = *a1;
  v17 = a1[1];
  v5 = (float32x4_t *)*((_QWORD *)a1 + 16);
  v6 = a1[37];
  v7 = v6 * (unint64_t)*a1;
  v8 = v6 * *a1;
  v9 = 3 * *a1;
  v10 = (float32x4_t *)((char *)v5 + 4 * v6 * (unint64_t)(2 * *a1));
  v11 = (float32x4_t *)((char *)v5 + 4 * v6 * (unint64_t)v9);
  v12 = (4 * *a1 - v9) * v6;
  sub_20B810EE0(v8, v5);
  sub_20B810C24(v8, &v5->f32[v7]);
  sub_20B810EE0(v8, v10);
  sub_20B810EE0(v12, v11);
  sub_20B810B08(v8, v10, *((float32x4_t **)a1 + 10));
  sub_20B810B08(v8, (float32x4_t *)((char *)v5 + 4 * v7), v5);
  sub_20B810A44();
  sub_20B810C50(a1[22], *((float32x4_t **)a1 + 10), v11);
  if (a1[2])
  {
    v13 = (void *)*((_QWORD *)a1 + 4);
    v4 = a1[12];
    v14 = a1[13];
    result = (uint64_t)memmove(v13, v11, 4 * v12);
  }
  else
  {
    v16 = *((_QWORD *)a1 + 4);
    v14 = a1[13];
    v13 = (void *)(v16 + 4 * v17 * (unint64_t)v14);
    result = sub_20B810BA4();
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v4 * (unint64_t)v14;
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v14;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t sub_20B81FCA0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      result = sub_20B810BC8();
      ++v4;
      v3 += 32;
    }
    while ((uint64_t)(a2[1] - *a2) >> 5 > v4);
  }
  return result;
}

uint64_t sub_20B81FD14@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;

  v5 = *a1;
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_DWORD *)(a2 + 20);
    do
    {
      if ((_DWORD)v5)
      {
        v9 = 0;
        v10 = v5;
        v11 = v6;
        do
        {
          sub_20B810B80();
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v11++) = v12;
          v9 += v8;
          --v10;
        }
        while (v10);
      }
      ++v7;
      v6 += v5;
    }
    while (v7 != v17);
  }
  result = sub_20B8111CC(v17, v5, *(float32x4_t **)a3);
  v14 = *(_DWORD *)(a3 + 16);
  v15 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)a4 = *(_QWORD *)a3;
  *(_QWORD *)(a4 + 8) = v15 * (unint64_t)v14;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v15;
  *(_DWORD *)(a4 + 24) = 2;
  return result;
}

uint64_t sub_20B81FE18@<X0>(uint64_t a1@<X1>, float32x4_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;

  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(unsigned int *)(a1 + 16);
    do
    {
      sub_20B810B08(v6, *a2, (float32x4_t *)(*(_QWORD *)a1 + 4 * v8));
      v8 += v6;
      --v9;
    }
    while (v9);
  }
  result = sub_20B8114DC(v5, v6, *(float **)a1);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v12 * (unint64_t)v11;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

unsigned __int8 *sub_20B81FEB0(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *result;
    do
    {
      result = (unsigned __int8 *)sub_20B811154();
      ++v4;
      v3 += v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_20B81FF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  unsigned int v11;

  v4 = *(unsigned __int8 *)(a3 + 160);
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_DWORD *)(a2 + 20);
    v9 = v8 * *(unsigned __int8 *)(a3 + 4);
    do
    {
      result = sub_20B810BA4();
      v7 += v9;
      v6 += v8;
      --v5;
    }
    while (v5);
    v4 = *(unsigned __int8 *)(a3 + 160);
  }
  v11 = *(unsigned __int8 *)(a3 + 4);
  if (*(_BYTE *)(a3 + 296))
  {
    *(_DWORD *)(*(_QWORD *)(a3 + 264) + 4 * v4) = 1065353216;
    if (v11 - 1 == v4)
      *(_BYTE *)(a3 + 296) = 0;
  }
  *(_BYTE *)(a3 + 160) = (v4 + 1) % v11;
  return result;
}

void sub_20B82002C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  float **v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  double v16;
  unsigned __int8 *v17;
  int v18;
  float *v19;
  int v20;
  float v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  unsigned int *v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE v32[28];
  _BYTE v33[28];
  void *__p;
  void *v35;

  if (*(_BYTE *)(a1 + 28))
  {
    sub_20B8146B4(*(_QWORD *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    v10 = *(_QWORD *)(a1 + 96);
    v11 = sub_20B80F724((uint64_t)a4);
    sub_20B81484C(v10, (uint64_t *)&__p, v11, (uint64_t)v33);
    sub_20B80F75C((uint64_t)a4, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v12 = (float **)sub_20B80F754((uint64_t)a4);
    v13 = *(_QWORD *)&v33[8];
    v14 = *v12;
    if (*(_QWORD *)&v33[8])
    {
      v15 = *(_QWORD *)(a1 + 96);
      v16 = *(double *)(v15 + 120);
      v17 = *(unsigned __int8 **)v33;
      v18 = *(_DWORD *)(v15 + 112);
      v19 = *v12;
      do
      {
        v20 = *v17++;
        v21 = v16 * (double)(v20 - v18);
        *v19++ = v21;
        --v13;
      }
      while (v13);
    }
    v22 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)v32 = v14;
    *(_QWORD *)&v32[8] = *(unsigned int *)&v33[20] * (unint64_t)*(unsigned int *)&v33[16];
    *(_DWORD *)&v32[16] = *(_DWORD *)&v33[16];
    *(_DWORD *)&v32[20] = *(_DWORD *)&v33[20];
    *(_DWORD *)&v32[24] = 2;
    v23 = *(_DWORD *)(a1 + 16);
    v24 = (uint64_t *)sub_20B80F744((uint64_t)a4);
    sub_20B8202F4(v22, (uint64_t)v32, a3, v23, v24, a5);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v25 = (unsigned int *)a4[1];
      sub_20B813EC8(&__p, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) * *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 34));
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(unsigned int **)a2;
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      {
        v31 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          v28 = *(unsigned int **)a2;
          v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        }
        while (v29 < v30 >> 2);
        v27 = *(_QWORD *)(a1 + 56);
        v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_20B815010(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_20B815164(v25, (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
        free(__p);
    }
    else
    {
      sub_20B8151C0(*(_QWORD *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_20B81535C(*(_QWORD *)(a1 + 64), &__p, a4[1], (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B8153CC(*(_QWORD *)(a1 + 80), (uint64_t)v33, a4[2], (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
    }
    sub_20B820440(*(_QWORD *)(a1 + 72), (uint64_t)v33, a3, *(_DWORD *)(a1 + 16), a4 + 6, a5);
  }
}

void sub_20B8202C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    free(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8202F4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unsigned __int8 *v16;
  double v17;
  int v18;
  float *v19;
  int v20;
  float v21;
  int v22;
  double v23;
  int v24;
  float v25;
  float v26;
  void *__p[3];

  v9 = *a5;
  v10 = *((unsigned int *)a5 + 5);
  *(_QWORD *)a6 = *a5;
  *(_QWORD *)(a6 + 8) = v10;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v10;
  *(_DWORD *)(a6 + 24) = 1;
  v11 = *(unsigned int *)(a2 + 16);
  sub_20B813A60(__p, *(int *)(a2 + 20));
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = *(unsigned int *)(*a3 + 4 * i);
      if (a4 == -1 || (v14 = 0.0, (_DWORD)v13 != a4))
      {
        v15 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v15)
        {
          v16 = (unsigned __int8 *)(*(_QWORD *)a1 + v15 * (unint64_t)v13);
          v17 = *(double *)(a1 + 72);
          v18 = *(_DWORD *)(a1 + 64);
          v19 = (float *)__p[0];
          do
          {
            v20 = *v16++;
            v21 = v17 * (double)(v20 - v18);
            *v19++ = v21;
            --v15;
          }
          while (v15);
        }
        v22 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v13);
        v23 = *(double *)(a1 + 88);
        v24 = *(_DWORD *)(a1 + 80);
        cblas_sdot_NEWLAPACK();
        v25 = v23 * (double)(v22 - v24);
        v14 = v26 + v25;
      }
      *(float *)(v9 + 4 * i) = v14;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_20B820440@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;

  v6 = *a5;
  v7 = *((unsigned int *)a5 + 5);
  *(_QWORD *)a6 = *a5;
  *(_QWORD *)(a6 + 8) = v7;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v7;
  *(_DWORD *)(a6 + 24) = 1;
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
  {
    v11 = result;
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(*a3 + v12);
      if (a4 == -1 || (v14 = 0.0, (_DWORD)v13 != a4))
      {
        result = cblas_sdot_NEWLAPACK();
        v14 = v15 + *(float *)(*(_QWORD *)(v11 + 32) + 4 * v13);
      }
      *(float *)(v6 + v12) = v14;
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  return result;
}

void sub_20B820518(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_20B80CDD8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20B8127BC(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_20B8205AC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)(a1 + 28))
  {
    result = *(_QWORD **)(a1 + 96);
    if (result && *(_QWORD *)(a1 + 88))
    {
      sub_20B812F50((uint64_t)result, a2, (uint64_t *)&v12);
      *a3 = sub_20B80EF78((uint64_t)&v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 32));
      result = v12;
      v12 = 0;
      if (!result)
        return result;
      v7 = sub_20B80FAA0(result);
      v8 = 0x1010C401DB35655;
      return (_QWORD *)MEMORY[0x20BD39CB0](v7, v8);
    }
LABEL_11:
    *a3 = 0;
    return result;
  }
  result = *(_QWORD **)(a1 + 64);
  if (!result || !*(_QWORD *)(a1 + 56))
    goto LABEL_11;
  sub_20B8130D4((uint64_t)result, a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v12);
  if (*(_BYTE *)(a1 + 29))
  {
    sub_20B813174(*(_QWORD *)(a1 + 80), a2, (uint64_t *)&v11);
    *a3 = sub_20B812FE0((uint64_t)&v12, &v11, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32));
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      v10 = sub_20B811EA0(v9);
      MEMORY[0x20BD39CB0](v10, 0x10C0C401F533AC0);
    }
  }
  else
  {
    *a3 = sub_20B813204((uint64_t)&v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32));
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v7 = sub_20B811F60(result);
    v8 = 0x1080C404FD05E4CLL;
    return (_QWORD *)MEMORY[0x20BD39CB0](v7, v8);
  }
  return result;
}

void sub_20B8206F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811F24((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B820738(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_24C4676E0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = -1;
  sub_20B811A98((_QWORD *)(a1 + 40), v4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_20B8207C4(uint64_t a1)
{
  sub_20B811C60(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8207E8(uint64_t a1, const char *a2)
{
  char v3;
  unsigned __int8 **v4;

  v3 = sub_20B81203C(*(_QWORD *)(a1 + 40), a2);
  v4 = *(unsigned __int8 ***)(a1 + 40);
  if ((v3 & 1) != 0)
    return sub_20B820A94(a1, *v4);
  sub_20B811BD0((uint64_t)v4);
  return 0;
}

void sub_20B820834(uint64_t a1, int a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a1 + 144);
  if (v2)
    sub_20B812968(v2, a2);
}

void sub_20B820844(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    sub_20B8210CC(a1, ((*a2)[1] - **a2) >> 2);
    v6 = *(_QWORD *)(a1 + 144);
  }
  sub_20B8212F4(a1, a2, *(_QWORD *)(v6 + 8), a3);
}

void sub_20B8208A8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;

  v7 = sub_20B820A44(a1, a2, a3);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (v7)
  {
    sub_20B820518((void **)a4, (uint64_t)(a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      v8 = 0;
      do
      {
        v9 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 40))(a3, v8);
        if (v10)
          v11 = sub_20B81159C(v10, v9);
        else
          v11 = 0;
        v13 = *(_DWORD **)(a4 + 8);
        v12 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v13 >= v12)
        {
          v15 = *(_DWORD **)a4;
          v16 = ((uint64_t)v13 - *(_QWORD *)a4) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            sub_20B80CDD8();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_20B8127BC(a4 + 16, v19);
            v15 = *(_DWORD **)a4;
            v13 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = v11;
          v14 = v21 + 4;
          while (v13 != v15)
          {
            v22 = *--v13;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(_QWORD *)a4 = v21;
          *(_QWORD *)(a4 + 8) = v14;
          *(_QWORD *)(a4 + 16) = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v13 = v11;
          v14 = v13 + 1;
        }
        *(_QWORD *)(a4 + 8) = v14;
        ++v8;
      }
      while (v8 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
}

void sub_20B820A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B820A44(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  float *v6;
  int v7;

  if (a3)
    v3 = a2[1] == *a2;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    sub_20B821758(a1, (uint64_t)a2, a3, (uint64_t)&v6);
    sub_20B80FEB0(v7, v6);
  }
  return v4;
}

uint64_t sub_20B820A94(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void **v11;
  uint64_t v12;
  void **v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  __int128 v73;
  int v74;
  int v75;
  int v76;
  __int128 v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  void *v81[3];
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *(_DWORD *)(a1 + 20) = v4 & 1;
  *(_DWORD *)(a1 + 24) = (v4 >> 2) & 1;
  *(_BYTE *)(a1 + 28) = (v4 & 2) != 0;
  *(_BYTE *)(a1 + 30) = v6;
  *(_BYTE *)(a1 + 29) = v6 != 0;
  if (v5)
    v7 = v5;
  else
    v7 = 5;
  sub_20B812708(v81, v7);
  v8 = 0;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  do
  {
    *(_WORD *)((char *)v81[0] + v8) = *(_WORD *)&a2[v8 + 4];
    *(_WORD *)((char *)v81[0] + v8 + 2) = *(_WORD *)&a2[v8 + 6];
    v8 += 4;
  }
  while (4 * v9 != v8);
  if (*(_BYTE *)(a1 + 28))
  {
    for (i = 0; i != 16; i += 2)
    {
      v11 = &__p[i];
      *(_DWORD *)v11 = 0;
      v11[1] = 0;
    }
    v12 = 0;
    v13 = &__p[1];
    do
    {
      v14 = &a2[v12 + v8];
      *((_DWORD *)v13 - 2) = *((_DWORD *)v14 + 1);
      *v13 = (void *)*((_QWORD *)v14 + 1);
      v13 += 2;
      v12 += 12;
    }
    while (v12 != 96);
    v15 = *(unsigned __int16 *)v81[0];
    v16 = *((unsigned __int16 *)v81[0] + 1);
    v17 = operator new();
    *(_QWORD *)v17 = &a2[v8 + 100];
    *(_QWORD *)(v17 + 8) = v16 * (unint64_t)v15;
    v72 = v16 * (unint64_t)v15;
    *(_DWORD *)(v17 + 16) = v15;
    *(_DWORD *)(v17 + 20) = v16;
    *(_DWORD *)(v17 + 24) = 2;
    *(_DWORD *)(v17 + 32) = v15 | (v16 << 16);
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v17;
    if (v18)
      MEMORY[0x20BD39CB0](v18, 0x1050C4004BAC841);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)__p;
    v19 = *((unsigned __int16 *)v81[0] + 2);
    v20 = *((unsigned __int16 *)v81[0] + 3);
    v70 = *((unsigned __int16 *)v81[0] + 5);
    v71 = *((unsigned __int16 *)v81[0] + 4);
    v21 = operator new();
    v22 = (unint64_t)&a2[v8 + 100 + v16 * (unint64_t)v15];
    v23 = v20 * (unint64_t)v19;
    *(_QWORD *)v21 = v22;
    *(_QWORD *)(v21 + 8) = v23;
    *(_DWORD *)(v21 + 16) = v19;
    *(_DWORD *)(v21 + 20) = v20;
    *(_DWORD *)(v21 + 24) = 2;
    v24 = v72 + v23 + 96;
    v25 = v70 * (unint64_t)v71;
    *(_QWORD *)(v21 + 32) = &a2[v8 + 4 + v24];
    *(_QWORD *)(v21 + 40) = v25;
    *(_DWORD *)(v21 + 48) = v71;
    *(_DWORD *)(v21 + 52) = v70;
    *(_DWORD *)(v21 + 56) = 2;
    v26 = v85;
    v27 = v83;
    *(_OWORD *)(v21 + 64) = v84;
    *(_OWORD *)(v21 + 80) = v26;
    *(_OWORD *)(v21 + 96) = v27;
    *(_OWORD *)(v21 + 112) = xmmword_20BA361F0;
    *(_QWORD *)(v21 + 128) = sub_20B810360((unsigned int *)&v84, (uint64_t)&v85);
    *(_QWORD *)(v21 + 136) = v28;
    v29 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v21;
    if (v29)
    {
      MEMORY[0x20BD39CB0](v29, 0x1050C403E01F869);
      v21 = *(_QWORD *)(a1 + 96);
    }
    v30 = *((unsigned __int16 *)v81[0] + 6);
    v31 = *((unsigned __int16 *)v81[0] + 7);
    v32 = *((unsigned __int16 *)v81[0] + 7) * (unint64_t)*((unsigned __int16 *)v81[0] + 6);
    *(_QWORD *)&v77 = &a2[4 * v25 + 4 + v8 + v24];
    *((_QWORD *)&v77 + 1) = v32;
    v78 = v30;
    v79 = v31;
    v80 = 2;
    v33 = (unint64_t)&a2[4 * v25 + 100 + v8 + v72 + v23 + v31 * (unint64_t)v30];
    v34 = *((unsigned __int16 *)v81[0] + 8);
    v35 = *((unsigned __int16 *)v81[0] + 9);
    v36 = *((unsigned __int16 *)v81[0] + 9) * (unint64_t)*((unsigned __int16 *)v81[0] + 8);
    *(_QWORD *)&v73 = v33;
    *((_QWORD *)&v73 + 1) = v36;
    v74 = v34;
    v75 = v35;
    v76 = 2;
    v37 = operator new();
    v38 = sub_20B8127F0(v37, &v77, &v73, &v86, &v87, (_OWORD *)(v21 + 112), v88);
    v39 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v38;
    if (v39)
      MEMORY[0x20BD39CB0](v39, 0x1050C40A1200FABLL);
    *(_OWORD *)(a1 + 128) = v88[1];
  }
  else
  {
    sub_20B8128B4(__p, v7);
    v40 = 0;
    v41 = (uint64_t)&a2[v8 + 4];
    v42 = 2;
    do
    {
      *(_QWORD *)((char *)__p[0] + v40) = v41;
      v41 += 4
           * *(unsigned __int16 *)((char *)v81[0] + v42 - 2)
           * (unint64_t)*(unsigned __int16 *)((char *)v81[0] + v42);
      v40 += 8;
      v42 += 4;
    }
    while (8 * v9 != v40);
    v43 = *(_QWORD *)__p[0];
    v44 = *(unsigned __int16 *)v81[0];
    v45 = *((unsigned __int16 *)v81[0] + 1);
    v46 = operator new();
    *(_QWORD *)v46 = v43;
    *(_QWORD *)(v46 + 8) = v45 * (unint64_t)v44;
    *(_DWORD *)(v46 + 16) = v44;
    *(_DWORD *)(v46 + 20) = v45;
    *(_DWORD *)(v46 + 24) = 2;
    *(_DWORD *)(v46 + 32) = v44 | (v45 << 16);
    v47 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v46;
    if (v47)
      MEMORY[0x20BD39CB0](v47, 0x10C0C40F6595248);
    v48 = *((unsigned __int16 *)v81[0] + 2);
    v49 = *((unsigned __int16 *)v81[0] + 3);
    v51 = *((_QWORD *)__p[0] + 1);
    v50 = *((_QWORD *)__p[0] + 2);
    v52 = *((unsigned __int16 *)v81[0] + 4);
    v53 = *((unsigned __int16 *)v81[0] + 5);
    v54 = operator new();
    *(_QWORD *)v54 = v51;
    *(_QWORD *)(v54 + 8) = v49 * (unint64_t)v48;
    *(_DWORD *)(v54 + 16) = v48;
    *(_DWORD *)(v54 + 20) = v49;
    *(_DWORD *)(v54 + 24) = 2;
    *(_QWORD *)(v54 + 32) = v50;
    *(_QWORD *)(v54 + 40) = v53 * (unint64_t)v52;
    *(_DWORD *)(v54 + 48) = v52;
    *(_DWORD *)(v54 + 52) = v53;
    *(_DWORD *)(v54 + 56) = 2;
    v55 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v54;
    if (v55)
      MEMORY[0x20BD39CB0](v55, 0x10C0C404270A891);
    v56 = *((unsigned __int16 *)v81[0] + 6);
    v57 = *((unsigned __int16 *)v81[0] + 7);
    v59 = *((_QWORD *)__p[0] + 3);
    v58 = *((_QWORD *)__p[0] + 4);
    v60 = *((unsigned __int16 *)v81[0] + 8);
    v61 = *((unsigned __int16 *)v81[0] + 9);
    v62 = operator new();
    *(_QWORD *)v62 = v59;
    *(_QWORD *)(v62 + 8) = v57 * (unint64_t)v56;
    *(_DWORD *)(v62 + 16) = v56;
    *(_DWORD *)(v62 + 20) = v57;
    *(_DWORD *)(v62 + 24) = 2;
    *(_QWORD *)(v62 + 32) = v58;
    *(_QWORD *)(v62 + 40) = v61 * (unint64_t)v60;
    *(_DWORD *)(v62 + 48) = v60;
    *(_DWORD *)(v62 + 52) = v61;
    *(_DWORD *)(v62 + 56) = 2;
    v63 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v62;
    if (v63)
      MEMORY[0x20BD39CB0](v63, 0x10C0C404270A891);
    if (*(_BYTE *)(a1 + 29))
    {
      v64 = *((_QWORD *)__p[0] + 5);
      v65 = *((unsigned __int16 *)v81[0] + 10);
      v66 = *((unsigned __int16 *)v81[0] + 11);
      v67 = operator new();
      *(_BYTE *)v67 = v6;
      *(_QWORD *)(v67 + 8) = v64;
      *(_QWORD *)(v67 + 16) = v66 * (unint64_t)v65;
      *(_DWORD *)(v67 + 24) = v65;
      *(_DWORD *)(v67 + 28) = v66;
      *(_DWORD *)(v67 + 32) = 2;
      v68 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v67;
      if (v68)
        MEMORY[0x20BD39CB0](v68, 0x10C0C40AE133BEFLL);
    }
    *(_DWORD *)(a1 + 32) = *((unsigned __int16 *)v81[0] + 7);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  return 1;
}

void sub_20B821058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8210CC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = a1 + 144;
  sub_20B811D74((unsigned __int8 **)(a1 + 144), (unsigned __int8 *)v4);
  v6 = *(unsigned __int8 *)(a1 + 28);
  **(_BYTE **)(a1 + 144) = v6;
  if (v6)
  {
    sub_20B812F50(*(_QWORD *)(a1 + 96), a2, (uint64_t *)&v19);
    if (*(_DWORD *)(a1 + 20) == 1)
    {
      v7 = 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 28))
        v9 = *(_QWORD *)(a1 + 88);
      else
        v9 = *(_QWORD *)(a1 + 56);
      v7 = *(unsigned __int16 *)(v9 + 32);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B80EF78((uint64_t)&v19, v7);
    result = v19;
    v19 = 0;
    if (result)
    {
      v12 = sub_20B80FAA0(result);
      v13 = 0x1010C401DB35655;
      return (_QWORD *)MEMORY[0x20BD39CB0](v12, v13);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B821308(*(_QWORD *)(a1 + 64), a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v19);
      sub_20B8213A8(*(_QWORD *)(a1 + 80), a2, (uint64_t *)&v18);
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        v8 = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 28))
          v14 = *(_QWORD *)(a1 + 88);
        else
          v14 = *(_QWORD *)(a1 + 56);
        v8 = *(unsigned __int16 *)(v14 + 32);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B812FE0((uint64_t)&v19, &v18, v8);
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        v17 = sub_20B811EA0(v16);
        MEMORY[0x20BD39CB0](v17, 0x10C0C401F533AC0);
      }
    }
    else
    {
      sub_20B821308(*(_QWORD *)(a1 + 64), a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v19);
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        v10 = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 28))
          v15 = *(_QWORD *)(a1 + 88);
        else
          v15 = *(_QWORD *)(a1 + 56);
        v10 = *(unsigned __int16 *)(v15 + 32);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B813204((uint64_t)&v19, v10);
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      v12 = sub_20B811F60(result);
      v13 = 0x1080C404FD05E4CLL;
      return (_QWORD *)MEMORY[0x20BD39CB0](v12, v13);
    }
  }
  return result;
}

void sub_20B8212B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811F24((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8212F4(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 1)
    sub_20B821604(a1, a2, (uint64_t *)a3, a4);
  else
    sub_20B821438(a1, a2, a3, a4);
}

uint64_t sub_20B821308@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v7 = *(_DWORD *)(a1 + 16);
  v8 = v7 >> 2;
  if (!a3)
    v7 = *(_DWORD *)(a1 + 20) - v8;
  v9 = operator new();
  result = sub_20B813DAC(v9, v8, v7, a2, a3);
  *a4 = v9;
  return result;
}

void sub_20B821384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1080C404FD05E4CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8213A8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 28) >> 1;
  v7 = operator new();
  result = sub_20B813F2C(v7, a2, *(_BYTE *)a1, v6);
  *a3 = v7;
  return result;
}

void sub_20B821414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10C0C401F533AC0);
  _Unwind_Resume(a1);
}

void sub_20B821438(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  _QWORD v26[2];
  unsigned int v27;
  void *__p;
  _BYTE *v29;

  v7 = *a2;
  v6 = a2[1];
  v9 = **a2;
  v8 = (*a2)[1];
  LODWORD(v26[0]) = 0;
  sub_20B814634(a4, (v8 - v9) >> 2, v26);
  LODWORD(v26[0]) = 0;
  sub_20B814634(&__p, (v8 - v9) >> 2, v26);
  v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
  if ((int)v10 >= 2)
  {
    v11 = 0;
    v12 = v10 - 1;
    if ((unint64_t)((v8 - v9) >> 2) <= 1)
      v13 = 1;
    else
      v13 = (v8 - v9) >> 2;
    v14 = v12;
    while (1)
    {
      v15 = &(*a2)[3 * v11];
      sub_20B821758(a1, (uint64_t)v15, a3, (uint64_t)v26);
      if (v8 != v9)
        break;
LABEL_14:
      ++v11;
      sub_20B80FEB0((unint64_t)(v29 - (_BYTE *)__p) >> 2, (float *)__p);
      sub_20B80FD94();
      if (v11 == v14)
        goto LABEL_15;
    }
    v16 = 0;
    v17 = 0;
    v18 = v15 + 3;
    v19 = *(unsigned int *)(a1 + 16);
    v20 = (float *)__p;
    v21 = v26[0];
    v22 = v27;
    while (1)
    {
      if (v19 == 0xFFFFFFFFLL)
      {
        v23 = *(unsigned int *)(*v18 + 4 * v17);
      }
      else
      {
        v24 = 1.0;
        if (*(_DWORD *)(*v15 + 4 * v17) == v19)
          goto LABEL_13;
        v23 = *(unsigned int *)(*v18 + 4 * v17);
        if (v23 == v19)
          goto LABEL_13;
      }
      v24 = *(float *)(v21 + 4 * (v16 + v23));
LABEL_13:
      v20[v17++] = v24;
      v16 += v22;
      if (v13 == v17)
        goto LABEL_14;
    }
  }
LABEL_15:
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_20B8215D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B821604@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v18[4];

  v7 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v9 = **a2;
  v8 = (*a2)[1];
  LODWORD(v18[0]) = 0;
  sub_20B814634(a4, (v8 - v9) >> 2, v18);
  if ((int)v7 >= 2)
  {
    v10 = 0;
    v11 = (v7 - 1);
    if ((unint64_t)((v8 - v9) >> 2) <= 1)
      v12 = 1;
    else
      v12 = (v8 - v9) >> 2;
    do
    {
      v13 = &(*a2)[3 * v10];
      sub_20B822250(a1, (uint64_t)v13, v13 + 3, a3, (uint64_t)v18);
      v14 = v18[0];
      if (v8 != v9)
      {
        v15 = 0;
        v16 = *(_DWORD *)(a1 + 16);
        do
        {
          if (v16 != -1 && *(_DWORD *)(*v13 + 4 * v15) == v16)
            *(_DWORD *)(v14 + 4 * v15) = 0;
          ++v15;
        }
        while (v12 != v15);
      }
      ++v10;
      sub_20B80FD94();
    }
    while (v10 != v11);
  }
  return sub_20B80FD78();
}

void sub_20B82173C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B821758(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  float **v12;
  int v13;
  int v14;
  unint64_t v15;
  float *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  double v19;
  int v20;
  float *v21;
  unint64_t v22;
  int v23;
  float v24;
  unsigned int *v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE v32[28];
  int32x2_t v33[5];
  void *__p;
  void *v35;

  if (*(_BYTE *)(a1 + 28))
  {
    sub_20B8146B4(*(_QWORD *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    v8 = *(_QWORD *)(a1 + 96);
    v9 = sub_20B80F724(a3);
    sub_20B81484C(v8, (uint64_t *)&__p, v9, (uint64_t)v33);
    sub_20B80F75C(a3, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v10 = *(_QWORD *)(a1 + 104);
    v11 = (_QWORD *)sub_20B80F74C(a3);
    sub_20B814C9C(v10, v33, v11, v32);
    v12 = (float **)sub_20B80F744(a3);
    v13 = *(_DWORD *)&v32[16];
    v14 = *(_DWORD *)&v32[20];
    v15 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
    v16 = *v12;
    if (v15)
    {
      v17 = *(unsigned __int8 **)v32;
      v18 = *(_QWORD *)(a1 + 104);
      v19 = *(double *)(v18 + 120);
      v20 = *(_DWORD *)(v18 + 112);
      v21 = *v12;
      v22 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
      do
      {
        v23 = *v17++;
        v24 = v19 * (double)(v23 - v20);
        *v21++ = v24;
        --v22;
      }
      while (v22);
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = v14;
    *(_DWORD *)(a4 + 24) = 2;
    sub_20B8100D0((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 32), v16);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v25 = *(unsigned int **)(a3 + 8);
      sub_20B813EC8(&__p, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) * *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 34));
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(unsigned int **)a2;
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      {
        v31 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          v28 = *(unsigned int **)a2;
          v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        }
        while (v29 < v30 >> 2);
        v27 = *(_QWORD *)(a1 + 56);
        v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_20B815010(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_20B821A44(v25, (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
        free(__p);
    }
    else
    {
      sub_20B8151C0(*(_QWORD *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_20B821AA0(*(_QWORD *)(a1 + 64), &__p, *(_QWORD *)(a3 + 8), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B821B10(*(_QWORD *)(a1 + 80), (uint64_t)v33, *(_QWORD *)(a3 + 16), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
    }
    sub_20B821CB0((uint64_t)v33, a3 + 48, a4);
    sub_20B8100D0((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32), *(float **)a4);
  }
}

void sub_20B821A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    free(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B821A44@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  sub_20B80FFE0();
  return sub_20B821D70(a1, a2);
}

uint64_t sub_20B821AA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_20B821EC4(a1, a2);
  sub_20B810058();
  sub_20B80FDBC(*(unsigned int *)(a3 + 144), *(_DWORD *)(a3 + 148), *(_QWORD *)(a1 + 32), *(float **)(a3 + 128));
  return sub_20B821D70((unsigned int *)a3, a4);
}

void sub_20B821B10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _BYTE v26[32];

  v8 = *(_DWORD *)(a2 + 16);
  v7 = *(unsigned int *)(a2 + 20);
  v9 = a3 + 32;
  v10 = a3 + 184;
  sub_20B8102BC((void *)v8, *(_DWORD *)(a2 + 20), *(char **)a2, *(char **)(a3 + 32));
  v11 = *(_DWORD *)(v9 + 16);
  v12 = *(_DWORD *)(v9 + 20);
  v21 = *(_QWORD *)v9;
  v22 = v12 * (unint64_t)v11;
  v23 = v11;
  v24 = v12;
  v25 = 2;
  sub_20B821F38((unsigned __int8 *)a1, (uint64_t)&v21, v10, (uint64_t)v26);
  if (*(_BYTE *)(v9 + 264))
    sub_20B82203C((uint64_t)v26, (float **)(a3 + 264), (uint64_t)&v21);
  if ((_DWORD)v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      sub_20B80FE5C();
      v14 += 2 * v8;
      v13 += v8;
      --v15;
    }
    while (v15);
  }
  v16 = *(_DWORD *)(a3 + 96);
  v17 = *(_DWORD *)(a3 + 100);
  v21 = *(_QWORD *)(a3 + 80);
  v22 = v17 * (unint64_t)v16;
  v23 = v16;
  v24 = v17;
  v25 = 2;
  sub_20B8220D4((unsigned __int8 *)a1, (uint64_t)v26);
  sub_20B822188(a1, v9, a3);
  sub_20B810058();
  sub_20B80FEDC(*(_DWORD *)(a1 + 24) * v7, *(float **)(a3 + 32));
  v18 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)a4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 8) = v19 * (unint64_t)v18;
  *(_DWORD *)(a4 + 16) = v18;
  *(_DWORD *)(a4 + 20) = v19;
  *(_DWORD *)(a4 + 24) = 2;
}

uint64_t sub_20B821CB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  unint64_t v8;

  v4 = *(_DWORD *)(a2 + 20);
  v5 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = v4 * (unint64_t)v5;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  *(_DWORD *)(a3 + 24) = 2;
  result = sub_20B810058();
  if (*(_DWORD *)(a1 + 20))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = sub_20B80FD94();
      ++v8;
      v7 += v4;
    }
    while (v8 < *(unsigned int *)(a1 + 20));
  }
  return result;
}

uint64_t sub_20B821D70@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;

  v4 = *a1;
  v17 = a1[1];
  v5 = (float *)*((_QWORD *)a1 + 16);
  v6 = a1[37];
  v7 = v6 * (unint64_t)*a1;
  v8 = v6 * *a1;
  v9 = 3 * *a1;
  v10 = &v5[v6 * (unint64_t)(2 * *a1)];
  v11 = &v5[v6 * (unint64_t)v9];
  v12 = (4 * *a1 - v9) * v6;
  sub_20B80FF60(v8, v5);
  sub_20B80FEDC(v8, &v5[v7]);
  sub_20B80FF60(v8, v10);
  sub_20B80FF60(v12, v11);
  sub_20B80FE10(v8, v10, *((float **)a1 + 10));
  sub_20B80FE10(v8, &v5[v7], v5);
  sub_20B80FD94();
  sub_20B80FF08(a1[22], *((float **)a1 + 10), v11);
  if (a1[2])
  {
    v13 = (void *)*((_QWORD *)a1 + 4);
    v4 = a1[12];
    v14 = a1[13];
    result = (uint64_t)memmove(v13, v11, 4 * v12);
  }
  else
  {
    v16 = *((_QWORD *)a1 + 4);
    v14 = a1[13];
    v13 = (void *)(v16 + 4 * v17 * (unint64_t)v14);
    result = sub_20B80FE5C();
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v4 * (unint64_t)v14;
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v14;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t sub_20B821EC4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      result = sub_20B80FE80();
      ++v4;
      v3 += 32;
    }
    while ((uint64_t)(a2[1] - *a2) >> 5 > v4);
  }
  return result;
}

uint64_t sub_20B821F38@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;

  v5 = *a1;
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_DWORD *)(a2 + 20);
    do
    {
      if ((_DWORD)v5)
      {
        v9 = 0;
        v10 = v5;
        v11 = v6;
        do
        {
          sub_20B80FE38();
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v11++) = v12;
          v9 += v8;
          --v10;
        }
        while (v10);
      }
      ++v7;
      v6 += v5;
    }
    while (v7 != v17);
  }
  result = sub_20B8100D0(v17, v5, *(float **)a3);
  v14 = *(_DWORD *)(a3 + 16);
  v15 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)a4 = *(_QWORD *)a3;
  *(_QWORD *)(a4 + 8) = v15 * (unint64_t)v14;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v15;
  *(_DWORD *)(a4 + 24) = 2;
  return result;
}

uint64_t sub_20B82203C@<X0>(uint64_t a1@<X1>, float **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;

  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(unsigned int *)(a1 + 16);
    do
    {
      sub_20B80FE10(v6, *a2, (float *)(*(_QWORD *)a1 + 4 * v8));
      v8 += v6;
      --v9;
    }
    while (v9);
  }
  result = sub_20B8101FC(v5, v6, *(float **)a1);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v12 * (unint64_t)v11;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

unsigned __int8 *sub_20B8220D4(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *result;
    do
    {
      result = (unsigned __int8 *)sub_20B810058();
      ++v4;
      v3 += v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_20B822188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  unsigned int v11;

  v4 = *(unsigned __int8 *)(a3 + 160);
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_DWORD *)(a2 + 20);
    v9 = v8 * *(unsigned __int8 *)(a3 + 4);
    do
    {
      result = sub_20B80FE5C();
      v7 += v9;
      v6 += v8;
      --v5;
    }
    while (v5);
    v4 = *(unsigned __int8 *)(a3 + 160);
  }
  v11 = *(unsigned __int8 *)(a3 + 4);
  if (*(_BYTE *)(a3 + 296))
  {
    *(_DWORD *)(*(_QWORD *)(a3 + 264) + 4 * v4) = 1065353216;
    if (v11 - 1 == v4)
      *(_BYTE *)(a3 + 296) = 0;
  }
  *(_BYTE *)(a3 + 160) = (v4 + 1) % v11;
  return result;
}

void sub_20B822250(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  float **v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  double v16;
  unsigned __int8 *v17;
  int v18;
  float *v19;
  int v20;
  float v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  unsigned int *v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE v32[28];
  _BYTE v33[28];
  void *__p;
  void *v35;

  if (*(_BYTE *)(a1 + 28))
  {
    sub_20B8146B4(*(_QWORD *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    v10 = *(_QWORD *)(a1 + 96);
    v11 = sub_20B80F724((uint64_t)a4);
    sub_20B81484C(v10, (uint64_t *)&__p, v11, (uint64_t)v33);
    sub_20B80F75C((uint64_t)a4, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v12 = (float **)sub_20B80F754((uint64_t)a4);
    v13 = *(_QWORD *)&v33[8];
    v14 = *v12;
    if (*(_QWORD *)&v33[8])
    {
      v15 = *(_QWORD *)(a1 + 96);
      v16 = *(double *)(v15 + 120);
      v17 = *(unsigned __int8 **)v33;
      v18 = *(_DWORD *)(v15 + 112);
      v19 = *v12;
      do
      {
        v20 = *v17++;
        v21 = v16 * (double)(v20 - v18);
        *v19++ = v21;
        --v13;
      }
      while (v13);
    }
    v22 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)v32 = v14;
    *(_QWORD *)&v32[8] = *(unsigned int *)&v33[20] * (unint64_t)*(unsigned int *)&v33[16];
    *(_DWORD *)&v32[16] = *(_DWORD *)&v33[16];
    *(_DWORD *)&v32[20] = *(_DWORD *)&v33[20];
    *(_DWORD *)&v32[24] = 2;
    v23 = *(_DWORD *)(a1 + 16);
    v24 = (uint64_t *)sub_20B80F744((uint64_t)a4);
    sub_20B8202F4(v22, (uint64_t)v32, a3, v23, v24, a5);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v25 = (unsigned int *)a4[1];
      sub_20B813EC8(&__p, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) * *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 34));
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(unsigned int **)a2;
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      {
        v31 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          v28 = *(unsigned int **)a2;
          v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        }
        while (v29 < v30 >> 2);
        v27 = *(_QWORD *)(a1 + 56);
        v31 = (void *)((unint64_t)v30 >> 2);
      }
      sub_20B815010(a1, (uint64_t)v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34), v26);
      sub_20B821A44(v25, (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
        free(__p);
    }
    else
    {
      sub_20B8151C0(*(_QWORD *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_20B821AA0(*(_QWORD *)(a1 + 64), &__p, a4[1], (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B821B10(*(_QWORD *)(a1 + 80), (uint64_t)v33, a4[2], (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
    }
    sub_20B822518(*(_QWORD *)(a1 + 72), (uint64_t)v33, a3, *(_DWORD *)(a1 + 16), a4 + 6, a5);
  }
}

void sub_20B8224E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    free(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B822518@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;

  v6 = *a5;
  v7 = *((unsigned int *)a5 + 5);
  *(_QWORD *)a6 = *a5;
  *(_QWORD *)(a6 + 8) = v7;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v7;
  *(_DWORD *)(a6 + 24) = 1;
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
  {
    v11 = result;
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(*a3 + v12);
      if (a4 == -1 || (v14 = 0.0, (_DWORD)v13 != a4))
      {
        result = cblas_sdot_NEWLAPACK();
        v14 = v15 + *(float *)(*(_QWORD *)(v11 + 32) + 4 * v13);
      }
      *(float *)(v6 + v12) = v14;
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  return result;
}

_QWORD *sub_20B8225F0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)(a1 + 28))
  {
    result = *(_QWORD **)(a1 + 96);
    if (result && *(_QWORD *)(a1 + 88))
    {
      sub_20B812F50((uint64_t)result, a2, (uint64_t *)&v12);
      *a3 = sub_20B80EF78((uint64_t)&v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 32));
      result = v12;
      v12 = 0;
      if (!result)
        return result;
      v7 = sub_20B80FAA0(result);
      v8 = 0x1010C401DB35655;
      return (_QWORD *)MEMORY[0x20BD39CB0](v7, v8);
    }
LABEL_11:
    *a3 = 0;
    return result;
  }
  result = *(_QWORD **)(a1 + 64);
  if (!result || !*(_QWORD *)(a1 + 56))
    goto LABEL_11;
  sub_20B821308((uint64_t)result, a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v12);
  if (*(_BYTE *)(a1 + 29))
  {
    sub_20B8213A8(*(_QWORD *)(a1 + 80), a2, (uint64_t *)&v11);
    *a3 = sub_20B812FE0((uint64_t)&v12, &v11, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32));
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      v10 = sub_20B811EA0(v9);
      MEMORY[0x20BD39CB0](v10, 0x10C0C401F533AC0);
    }
  }
  else
  {
    *a3 = sub_20B813204((uint64_t)&v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32));
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v7 = sub_20B811F60(result);
    v8 = 0x1080C404FD05E4CLL;
    return (_QWORD *)MEMORY[0x20BD39CB0](v7, v8);
  }
  return result;
}

void sub_20B822738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811F24((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82277C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_24C467738;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = -1;
  sub_20B811A98((_QWORD *)(a1 + 40), v4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_20B822808(uint64_t a1)
{
  sub_20B811C60(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B82282C(uint64_t a1, const char *a2)
{
  char v3;
  unsigned __int8 **v4;

  v3 = sub_20B81203C(*(_QWORD *)(a1 + 40), a2);
  v4 = *(unsigned __int8 ***)(a1 + 40);
  if ((v3 & 1) != 0)
    return sub_20B822AD8(a1, *v4);
  sub_20B811BD0((uint64_t)v4);
  return 0;
}

void sub_20B822878(uint64_t a1, int a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a1 + 144);
  if (v2)
    sub_20B812968(v2, a2);
}

void sub_20B822888(uint64_t a1@<X0>, uint64_t **a2@<X1>, float **a3@<X8>)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
  {
    sub_20B823110(a1, ((*a2)[1] - **a2) >> 2);
    v6 = *(_QWORD *)(a1 + 144);
  }
  sub_20B823338(a1, a2, *(_QWORD *)(v6 + 8), a3);
}

void sub_20B8228EC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;

  v7 = sub_20B822A88(a1, a2, a3);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  if (v7)
  {
    sub_20B820518((void **)a4, (uint64_t)(a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      v8 = 0;
      do
      {
        v9 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 40))(a3, v8);
        if (v10)
          v11 = sub_20B81159C(v10, v9);
        else
          v11 = 0;
        v13 = *(_DWORD **)(a4 + 8);
        v12 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v13 >= v12)
        {
          v15 = *(_DWORD **)a4;
          v16 = ((uint64_t)v13 - *(_QWORD *)a4) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            sub_20B80CDD8();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_20B8127BC(a4 + 16, v19);
            v15 = *(_DWORD **)a4;
            v13 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = v11;
          v14 = v21 + 4;
          while (v13 != v15)
          {
            v22 = *--v13;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(_QWORD *)a4 = v21;
          *(_QWORD *)(a4 + 8) = v14;
          *(_QWORD *)(a4 + 16) = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v13 = v11;
          v14 = v13 + 1;
        }
        *(_QWORD *)(a4 + 8) = v14;
        ++v8;
      }
      while (v8 < (uint64_t)(a2[1] - *a2) >> 2);
    }
  }
}

void sub_20B822A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B822A88(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  float *v6;
  int v7;

  if (a3)
    v3 = a2[1] == *a2;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
  {
    sub_20B82379C(a1, (uint64_t)a2, a3, (uint64_t)&v6);
    sub_20B81047C(v7, v6);
  }
  return v4;
}

uint64_t sub_20B822AD8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void **v11;
  uint64_t v12;
  void **v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  __int128 v73;
  int v74;
  int v75;
  int v76;
  __int128 v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  void *v81[3];
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  *(_DWORD *)(a1 + 20) = v4 & 1;
  *(_DWORD *)(a1 + 24) = (v4 >> 2) & 1;
  *(_BYTE *)(a1 + 28) = (v4 & 2) != 0;
  *(_BYTE *)(a1 + 30) = v6;
  *(_BYTE *)(a1 + 29) = v6 != 0;
  if (v5)
    v7 = v5;
  else
    v7 = 5;
  sub_20B812708(v81, v7);
  v8 = 0;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  do
  {
    *(_WORD *)((char *)v81[0] + v8) = *(_WORD *)&a2[v8 + 4];
    *(_WORD *)((char *)v81[0] + v8 + 2) = *(_WORD *)&a2[v8 + 6];
    v8 += 4;
  }
  while (4 * v9 != v8);
  if (*(_BYTE *)(a1 + 28))
  {
    for (i = 0; i != 16; i += 2)
    {
      v11 = &__p[i];
      *(_DWORD *)v11 = 0;
      v11[1] = 0;
    }
    v12 = 0;
    v13 = &__p[1];
    do
    {
      v14 = &a2[v12 + v8];
      *((_DWORD *)v13 - 2) = *((_DWORD *)v14 + 1);
      *v13 = (void *)*((_QWORD *)v14 + 1);
      v13 += 2;
      v12 += 12;
    }
    while (v12 != 96);
    v15 = *(unsigned __int16 *)v81[0];
    v16 = *((unsigned __int16 *)v81[0] + 1);
    v17 = operator new();
    *(_QWORD *)v17 = &a2[v8 + 100];
    *(_QWORD *)(v17 + 8) = v16 * (unint64_t)v15;
    v72 = v16 * (unint64_t)v15;
    *(_DWORD *)(v17 + 16) = v15;
    *(_DWORD *)(v17 + 20) = v16;
    *(_DWORD *)(v17 + 24) = 2;
    *(_DWORD *)(v17 + 32) = v15 | (v16 << 16);
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v17;
    if (v18)
      MEMORY[0x20BD39CB0](v18, 0x1050C4004BAC841);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)__p;
    v19 = *((unsigned __int16 *)v81[0] + 2);
    v20 = *((unsigned __int16 *)v81[0] + 3);
    v70 = *((unsigned __int16 *)v81[0] + 5);
    v71 = *((unsigned __int16 *)v81[0] + 4);
    v21 = operator new();
    v22 = (unint64_t)&a2[v8 + 100 + v16 * (unint64_t)v15];
    v23 = v20 * (unint64_t)v19;
    *(_QWORD *)v21 = v22;
    *(_QWORD *)(v21 + 8) = v23;
    *(_DWORD *)(v21 + 16) = v19;
    *(_DWORD *)(v21 + 20) = v20;
    *(_DWORD *)(v21 + 24) = 2;
    v24 = v72 + v23 + 96;
    v25 = v70 * (unint64_t)v71;
    *(_QWORD *)(v21 + 32) = &a2[v8 + 4 + v24];
    *(_QWORD *)(v21 + 40) = v25;
    *(_DWORD *)(v21 + 48) = v71;
    *(_DWORD *)(v21 + 52) = v70;
    *(_DWORD *)(v21 + 56) = 2;
    v26 = v85;
    v27 = v83;
    *(_OWORD *)(v21 + 64) = v84;
    *(_OWORD *)(v21 + 80) = v26;
    *(_OWORD *)(v21 + 96) = v27;
    *(_OWORD *)(v21 + 112) = xmmword_20BA361F0;
    *(_QWORD *)(v21 + 128) = sub_20B810360((unsigned int *)&v84, (uint64_t)&v85);
    *(_QWORD *)(v21 + 136) = v28;
    v29 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v21;
    if (v29)
    {
      MEMORY[0x20BD39CB0](v29, 0x1050C403E01F869);
      v21 = *(_QWORD *)(a1 + 96);
    }
    v30 = *((unsigned __int16 *)v81[0] + 6);
    v31 = *((unsigned __int16 *)v81[0] + 7);
    v32 = *((unsigned __int16 *)v81[0] + 7) * (unint64_t)*((unsigned __int16 *)v81[0] + 6);
    *(_QWORD *)&v77 = &a2[4 * v25 + 4 + v8 + v24];
    *((_QWORD *)&v77 + 1) = v32;
    v78 = v30;
    v79 = v31;
    v80 = 2;
    v33 = (unint64_t)&a2[4 * v25 + 100 + v8 + v72 + v23 + v31 * (unint64_t)v30];
    v34 = *((unsigned __int16 *)v81[0] + 8);
    v35 = *((unsigned __int16 *)v81[0] + 9);
    v36 = *((unsigned __int16 *)v81[0] + 9) * (unint64_t)*((unsigned __int16 *)v81[0] + 8);
    *(_QWORD *)&v73 = v33;
    *((_QWORD *)&v73 + 1) = v36;
    v74 = v34;
    v75 = v35;
    v76 = 2;
    v37 = operator new();
    v38 = sub_20B8127F0(v37, &v77, &v73, &v86, &v87, (_OWORD *)(v21 + 112), v88);
    v39 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v38;
    if (v39)
      MEMORY[0x20BD39CB0](v39, 0x1050C40A1200FABLL);
    *(_OWORD *)(a1 + 128) = v88[1];
  }
  else
  {
    sub_20B8128B4(__p, v7);
    v40 = 0;
    v41 = (uint64_t)&a2[v8 + 4];
    v42 = 2;
    do
    {
      *(_QWORD *)((char *)__p[0] + v40) = v41;
      v41 += 4
           * *(unsigned __int16 *)((char *)v81[0] + v42 - 2)
           * (unint64_t)*(unsigned __int16 *)((char *)v81[0] + v42);
      v40 += 8;
      v42 += 4;
    }
    while (8 * v9 != v40);
    v43 = *(_QWORD *)__p[0];
    v44 = *(unsigned __int16 *)v81[0];
    v45 = *((unsigned __int16 *)v81[0] + 1);
    v46 = operator new();
    *(_QWORD *)v46 = v43;
    *(_QWORD *)(v46 + 8) = v45 * (unint64_t)v44;
    *(_DWORD *)(v46 + 16) = v44;
    *(_DWORD *)(v46 + 20) = v45;
    *(_DWORD *)(v46 + 24) = 2;
    *(_DWORD *)(v46 + 32) = v44 | (v45 << 16);
    v47 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v46;
    if (v47)
      MEMORY[0x20BD39CB0](v47, 0x10C0C40F6595248);
    v48 = *((unsigned __int16 *)v81[0] + 2);
    v49 = *((unsigned __int16 *)v81[0] + 3);
    v51 = *((_QWORD *)__p[0] + 1);
    v50 = *((_QWORD *)__p[0] + 2);
    v52 = *((unsigned __int16 *)v81[0] + 4);
    v53 = *((unsigned __int16 *)v81[0] + 5);
    v54 = operator new();
    *(_QWORD *)v54 = v51;
    *(_QWORD *)(v54 + 8) = v49 * (unint64_t)v48;
    *(_DWORD *)(v54 + 16) = v48;
    *(_DWORD *)(v54 + 20) = v49;
    *(_DWORD *)(v54 + 24) = 2;
    *(_QWORD *)(v54 + 32) = v50;
    *(_QWORD *)(v54 + 40) = v53 * (unint64_t)v52;
    *(_DWORD *)(v54 + 48) = v52;
    *(_DWORD *)(v54 + 52) = v53;
    *(_DWORD *)(v54 + 56) = 2;
    v55 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v54;
    if (v55)
      MEMORY[0x20BD39CB0](v55, 0x10C0C404270A891);
    v56 = *((unsigned __int16 *)v81[0] + 6);
    v57 = *((unsigned __int16 *)v81[0] + 7);
    v59 = *((_QWORD *)__p[0] + 3);
    v58 = *((_QWORD *)__p[0] + 4);
    v60 = *((unsigned __int16 *)v81[0] + 8);
    v61 = *((unsigned __int16 *)v81[0] + 9);
    v62 = operator new();
    *(_QWORD *)v62 = v59;
    *(_QWORD *)(v62 + 8) = v57 * (unint64_t)v56;
    *(_DWORD *)(v62 + 16) = v56;
    *(_DWORD *)(v62 + 20) = v57;
    *(_DWORD *)(v62 + 24) = 2;
    *(_QWORD *)(v62 + 32) = v58;
    *(_QWORD *)(v62 + 40) = v61 * (unint64_t)v60;
    *(_DWORD *)(v62 + 48) = v60;
    *(_DWORD *)(v62 + 52) = v61;
    *(_DWORD *)(v62 + 56) = 2;
    v63 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v62;
    if (v63)
      MEMORY[0x20BD39CB0](v63, 0x10C0C404270A891);
    if (*(_BYTE *)(a1 + 29))
    {
      v64 = *((_QWORD *)__p[0] + 5);
      v65 = *((unsigned __int16 *)v81[0] + 10);
      v66 = *((unsigned __int16 *)v81[0] + 11);
      v67 = operator new();
      *(_BYTE *)v67 = v6;
      *(_QWORD *)(v67 + 8) = v64;
      *(_QWORD *)(v67 + 16) = v66 * (unint64_t)v65;
      *(_DWORD *)(v67 + 24) = v65;
      *(_DWORD *)(v67 + 28) = v66;
      *(_DWORD *)(v67 + 32) = 2;
      v68 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v67;
      if (v68)
        MEMORY[0x20BD39CB0](v68, 0x10C0C40AE133BEFLL);
    }
    *(_DWORD *)(a1 + 32) = *((unsigned __int16 *)v81[0] + 7);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  return 1;
}

void sub_20B82309C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B823110(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = a1 + 144;
  sub_20B811D74((unsigned __int8 **)(a1 + 144), (unsigned __int8 *)v4);
  v6 = *(unsigned __int8 *)(a1 + 28);
  **(_BYTE **)(a1 + 144) = v6;
  if (v6)
  {
    sub_20B812F50(*(_QWORD *)(a1 + 96), a2, (uint64_t *)&v19);
    if (*(_DWORD *)(a1 + 20) == 1)
    {
      v7 = 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 28))
        v9 = *(_QWORD *)(a1 + 88);
      else
        v9 = *(_QWORD *)(a1 + 56);
      v7 = *(unsigned __int16 *)(v9 + 32);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B80EF78((uint64_t)&v19, v7);
    result = v19;
    v19 = 0;
    if (result)
    {
      v12 = sub_20B80FAA0(result);
      v13 = 0x1010C401DB35655;
      return (_QWORD *)MEMORY[0x20BD39CB0](v12, v13);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B82334C(*(_QWORD *)(a1 + 64), a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v19);
      sub_20B8233EC(*(_QWORD *)(a1 + 80), a2, (uint64_t *)&v18);
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        v8 = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 28))
          v14 = *(_QWORD *)(a1 + 88);
        else
          v14 = *(_QWORD *)(a1 + 56);
        v8 = *(unsigned __int16 *)(v14 + 32);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B812FE0((uint64_t)&v19, &v18, v8);
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        v17 = sub_20B811EA0(v16);
        MEMORY[0x20BD39CB0](v17, 0x10C0C401F533AC0);
      }
    }
    else
    {
      sub_20B82334C(*(_QWORD *)(a1 + 64), a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v19);
      if (*(_DWORD *)(a1 + 20) == 1)
      {
        v10 = 1;
      }
      else
      {
        if (*(_BYTE *)(a1 + 28))
          v15 = *(_QWORD *)(a1 + 88);
        else
          v15 = *(_QWORD *)(a1 + 56);
        v10 = *(unsigned __int16 *)(v15 + 32);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8) = sub_20B813204((uint64_t)&v19, v10);
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      v12 = sub_20B811F60(result);
      v13 = 0x1080C404FD05E4CLL;
      return (_QWORD *)MEMORY[0x20BD39CB0](v12, v13);
    }
  }
  return result;
}

void sub_20B8232F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811F24((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B823338(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, float **a4@<X8>)
{
  if (*(_DWORD *)(a1 + 20) == 1)
    sub_20B823648(a1, a2, (uint64_t *)a3, a4);
  else
    sub_20B82347C(a1, a2, a3, a4);
}

uint64_t sub_20B82334C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v7 = *(_DWORD *)(a1 + 16);
  v8 = v7 >> 2;
  if (!a3)
    v7 = *(_DWORD *)(a1 + 20) - v8;
  v9 = operator new();
  result = sub_20B813DAC(v9, v8, v7, a2, a3);
  *a4 = v9;
  return result;
}

void sub_20B8233C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1080C404FD05E4CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8233EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 28) >> 1;
  v7 = operator new();
  result = sub_20B813F2C(v7, a2, *(_BYTE *)a1, v6);
  *a3 = v7;
  return result;
}

void sub_20B823458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10C0C401F533AC0);
  _Unwind_Resume(a1);
}

void sub_20B82347C(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, float **a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  _QWORD v27[2];
  unsigned int v28;
  void *__p;
  _BYTE *v30;

  v8 = *a2;
  v7 = a2[1];
  v10 = **a2;
  v9 = (*a2)[1];
  LODWORD(v27[0]) = 0;
  sub_20B814634(a4, (v9 - v10) >> 2, v27);
  LODWORD(v27[0]) = 0;
  sub_20B814634(&__p, (v9 - v10) >> 2, v27);
  v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v8);
  if ((int)v11 >= 2)
  {
    v12 = 0;
    v13 = v11 - 1;
    if ((unint64_t)((v9 - v10) >> 2) <= 1)
      v14 = 1;
    else
      v14 = (v9 - v10) >> 2;
    v15 = v13;
    while (1)
    {
      v16 = &(*a2)[3 * v12];
      sub_20B82379C(a1, (uint64_t)v16, a3, (uint64_t)v27);
      if (v9 != v10)
        break;
LABEL_14:
      ++v12;
      sub_20B81047C((unint64_t)(v30 - (_BYTE *)__p) >> 2, (float *)__p);
      sub_20B8103D8((unint64_t)((char *)a4[1] - (char *)*a4) >> 2, (float *)__p, *a4);
      if (v12 == v15)
        goto LABEL_15;
    }
    v17 = 0;
    v18 = 0;
    v19 = v16 + 3;
    v20 = *(unsigned int *)(a1 + 16);
    v21 = (float *)__p;
    v22 = v27[0];
    v23 = v28;
    while (1)
    {
      if (v20 == 0xFFFFFFFFLL)
      {
        v24 = *(unsigned int *)(*v19 + 4 * v18);
      }
      else
      {
        v25 = 1.0;
        if (*(_DWORD *)(*v16 + 4 * v18) == v20)
          goto LABEL_13;
        v24 = *(unsigned int *)(*v19 + 4 * v18);
        if (v24 == v20)
          goto LABEL_13;
      }
      v25 = *(float *)(v22 + 4 * (v17 + v24));
LABEL_13:
      v21[v18++] = v25;
      v17 += v23;
      if (v14 == v18)
        goto LABEL_14;
    }
  }
LABEL_15:
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
}

void sub_20B823614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B823648@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X2>, float **a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  float *v15;
  uint64_t v16;
  int v17;
  _QWORD v19[4];

  v8 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v10 = **a2;
  v9 = (*a2)[1];
  LODWORD(v19[0]) = 0;
  sub_20B814634(a4, (v9 - v10) >> 2, v19);
  if ((int)v8 >= 2)
  {
    v11 = 0;
    v12 = (v8 - 1);
    if ((unint64_t)((v9 - v10) >> 2) <= 1)
      v13 = 1;
    else
      v13 = (v9 - v10) >> 2;
    do
    {
      v14 = &(*a2)[3 * v11];
      sub_20B8243E8(a1, (uint64_t)v14, v14 + 3, a3, (uint64_t)v19);
      v15 = (float *)v19[0];
      if (v9 != v10)
      {
        v16 = 0;
        v17 = *(_DWORD *)(a1 + 16);
        do
        {
          if (v17 != -1 && *(_DWORD *)(*v14 + 4 * v16) == v17)
            v15[v16] = 0.0;
          ++v16;
        }
        while (v13 != v16);
        v15 = (float *)v19[0];
      }
      ++v11;
      sub_20B8103D8((unint64_t)((char *)a4[1] - (char *)*a4) >> 2, v15, *a4);
    }
    while (v11 != v12);
  }
  return sub_20B8103B4((unint64_t)((char *)a4[1] - (char *)*a4) >> 2, *a4, 0.43429);
}

void sub_20B823780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B82379C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  float **v12;
  int v13;
  int v14;
  unint64_t v15;
  float *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  double v19;
  int v20;
  float *v21;
  unint64_t v22;
  int v23;
  float v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[28];
  int32x2_t v33[5];
  void *__p;
  void *v35;

  if (*(_BYTE *)(a1 + 28))
  {
    sub_20B8146B4(*(_QWORD *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    v8 = *(_QWORD *)(a1 + 96);
    v9 = sub_20B80F724(a3);
    sub_20B81484C(v8, (uint64_t *)&__p, v9, (uint64_t)v33);
    sub_20B80F75C(a3, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v10 = *(_QWORD *)(a1 + 104);
    v11 = (_QWORD *)sub_20B80F74C(a3);
    sub_20B814C9C(v10, v33, v11, v32);
    v12 = (float **)sub_20B80F744(a3);
    v13 = *(_DWORD *)&v32[16];
    v14 = *(_DWORD *)&v32[20];
    v15 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
    v16 = *v12;
    if (v15)
    {
      v17 = *(unsigned __int8 **)v32;
      v18 = *(_QWORD *)(a1 + 104);
      v19 = *(double *)(v18 + 120);
      v20 = *(_DWORD *)(v18 + 112);
      v21 = *v12;
      v22 = *(unsigned int *)&v32[20] * (unint64_t)*(unsigned int *)&v32[16];
      do
      {
        v23 = *v17++;
        v24 = v19 * (double)(v23 - v20);
        *v21++ = v24;
        --v22;
      }
      while (v22);
    }
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = v14;
    *(_DWORD *)(a4 + 24) = 2;
    sub_20B810834((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 32), v16);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v25 = *(_QWORD *)(a3 + 8);
      sub_20B813EC8(&__p, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) * *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 34));
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(unsigned int **)a2;
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      {
        v31 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          v28 = *(unsigned int **)a2;
          v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        }
        while (v29 < v30 >> 2);
        v27 = *(_QWORD *)(a1 + 56);
        v31 = (unint64_t)v30 >> 2;
      }
      sub_20B823A88(v26, a1, v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34));
      sub_20B823BDC(*(_QWORD *)(a1 + 64), v25, (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
        free(__p);
    }
    else
    {
      sub_20B8151C0(*(_QWORD *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_20B823C38(*(_QWORD *)(a1 + 64), (uint64_t *)&__p, *(_QWORD *)(a3 + 8), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B823CA8(*(_QWORD *)(a1 + 80), (uint64_t)v33, *(_QWORD *)(a3 + 16), (uint64_t)v32);
      *(_OWORD *)v33[0].i8 = *(_OWORD *)v32;
      *(_OWORD *)&v33[1].u8[4] = *(_OWORD *)&v32[12];
    }
    sub_20B823E48(*(_QWORD *)(a1 + 72), (uint64_t)v33, a3 + 48, *(_DWORD *)(a1 + 20), a4);
    sub_20B810834((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32), *(float **)a4);
  }
}

void sub_20B823A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    free(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20B823A88(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  char *v9;
  BOOL v10;
  _BOOL4 v11;
  uint8x8_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  void *result;
  uint64_t v17;
  size_t v18;
  uint64_t v19;

  LODWORD(v6) = a6;
  v7 = a5;
  v9 = *(char **)(a3 + 128);
  if ((int)a5 > 1)
  {
    a1.i32[0] = a5 - 1;
    a1 = vcnt_s8(a1);
    a1.i16[0] = vaddlv_u8((uint8x8_t)a1);
    if (a1.i32[0] < 2u)
      return (void *)sub_20B8109CC(a5, a6, *(int **)a4, *(_DWORD **)(a3 + 128));
  }
  if ((int)a5 >= 1)
  {
    a1.i32[0] = a5;
    a1 = vcnt_s8(a1);
    a1.i16[0] = vaddlv_u8((uint8x8_t)a1);
    if (a1.i32[0] < 2u)
      return (void *)sub_20B8109CC(a5, a6, *(int **)a4, *(_DWORD **)(a3 + 128));
  }
  v10 = (((_DWORD)a5 + 1) & a5) != 0 || (int)a5 < 0;
  v11 = v10;
  if (a6 < 1)
    return (void *)sub_20B8109CC(a5, a6, *(int **)a4, *(_DWORD **)(a3 + 128));
  if (!v11)
    return (void *)sub_20B8109CC(a5, a6, *(int **)a4, *(_DWORD **)(a3 + 128));
  a1.i32[0] = a6;
  v12 = (uint8x8_t)vcnt_s8(a1);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.i32[0] > 1u)
    return (void *)sub_20B8109CC(a5, a6, *(int **)a4, *(_DWORD **)(a3 + 128));
  v13 = a5 | (a5 >> 1) | ((a5 | (a5 >> 1)) >> 2);
  v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
  v15 = (v14 | HIWORD(v14)) + 1;
  if (*(_QWORD *)(a3 + 168) < (unint64_t)((int)v15 * a6))
    return (void *)sub_20B8109CC(a5, a6, *(int **)a4, *(_DWORD **)(a3 + 128));
  memcpy(*(void **)(a3 + 160), *(const void **)a4, 4 * *(_QWORD *)(a4 + 8));
  sub_20B8109CC(v15, v6, *(int **)(a3 + 160), *(_DWORD **)(a3 + 176));
  v17 = 0;
  v18 = 4 * v7;
  v19 = 4 * (int)v15;
  v6 = v6;
  do
  {
    result = memcpy(v9, (const void *)(*(_QWORD *)(a3 + 176) + v17), v18);
    v17 += v19;
    v9 += v18;
    --v6;
  }
  while (v6);
  return result;
}

void sub_20B823BDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20B810548(*(unsigned int *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a2 + 52), *(_QWORD *)a1, *(float **)(a2 + 32), *(float **)(a2 + 128), 0, 0);
  sub_20B823F08((unsigned int *)a2, a3);
}

void sub_20B823C38(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_20B82405C(a1, a2, (uint64_t *)(a3 + 32));
  sub_20B8107AC(*(unsigned int *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a3 + 52), *(_QWORD *)a1, *(float **)(a3 + 32), *(void **)(a3 + 128), 0, 0);
  sub_20B80FDBC(*(unsigned int *)(a3 + 144), *(_DWORD *)(a3 + 148), *(_QWORD *)(a1 + 32), *(float **)(a3 + 128));
  sub_20B823F08((unsigned int *)a3, a4);
}

void sub_20B823CA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  _BYTE v28[32];

  v8 = *(_DWORD *)(a2 + 16);
  v7 = *(unsigned int *)(a2 + 20);
  v9 = a3 + 32;
  v10 = a3 + 184;
  v11 = (_QWORD *)(a3 + 80);
  v12 = (_QWORD *)(a3 + 128);
  sub_20B8109CC(v8, *(_DWORD *)(a2 + 20), *(int **)a2, *(_DWORD **)(a3 + 32));
  v13 = *(_DWORD *)(v9 + 16);
  v14 = *(_DWORD *)(v9 + 20);
  v23 = *(_QWORD *)v9;
  v24 = v14 * (unint64_t)v13;
  v25 = v13;
  v26 = v14;
  v27 = 2;
  sub_20B8240D0((unsigned __int8 *)a1, (uint64_t)&v23, v10, v11, (uint64_t)v28);
  if (*(_BYTE *)(v9 + 264))
    sub_20B8241D4((uint64_t)v28, (float **)(a3 + 264), (uint64_t)&v23);
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    v17 = v7;
    do
    {
      sub_20B810430(v8, (float *)(*(_QWORD *)v9 + 4 * v15), (float *)(*v12 + 4 * v16));
      v16 += 2 * v8;
      v15 += v8;
      --v17;
    }
    while (v17);
  }
  v18 = *(_DWORD *)(a3 + 96);
  v19 = *(_DWORD *)(a3 + 100);
  v23 = *(_QWORD *)(a3 + 80);
  v24 = v19 * (unint64_t)v18;
  v25 = v18;
  v26 = v19;
  v27 = 2;
  sub_20B82426C((unsigned __int8 *)a1, (uint64_t)v28, (uint64_t)&v23, v12);
  sub_20B824320(a1, v9, a3);
  sub_20B8107AC(*(unsigned int *)(a1 + 24), *(_DWORD *)(a1 + 28), *(_DWORD *)(a3 + 144), *(_QWORD *)(a1 + 8), *(float **)(a3 + 128), *(void **)(a3 + 32), 0, 1);
  sub_20B8104B8(*(_DWORD *)(a1 + 24) * v7, *(float **)(a3 + 32));
  v20 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)a4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 8) = v21 * (unint64_t)v20;
  *(_DWORD *)(a4 + 16) = v20;
  *(_DWORD *)(a4 + 20) = v21;
  *(_DWORD *)(a4 + 24) = 2;
}

void sub_20B823E48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void *v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  void *v13;
  int v14;
  unsigned int v15;
  unint64_t v16;

  v7 = *(void **)a3;
  v8 = *(_DWORD *)(a3 + 20);
  v11 = a2 + 16;
  v10 = *(_DWORD *)(a2 + 16);
  v9 = *(unsigned int *)(v11 + 4);
  *(_QWORD *)a5 = *(_QWORD *)a3;
  *(_QWORD *)(a5 + 8) = v8 * (unint64_t)v9;
  *(_DWORD *)(a5 + 16) = v9;
  *(_DWORD *)(a5 + 20) = v8;
  *(_DWORD *)(a5 + 24) = 2;
  if (a4 == 1)
  {
    v12 = *(_DWORD *)(a1 + 16);
    v13 = v7;
    v14 = 1;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    v13 = v7;
    v14 = 0;
  }
  sub_20B8107AC(v9, v10, v12, *(_QWORD *)a2, *(float **)a1, v13, 1, v14);
  if (*(_DWORD *)(a2 + 20))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      sub_20B8103D8(v8, *(float **)(a1 + 32), (float *)v7 + v15);
      ++v16;
      v15 += v8;
    }
    while (v16 < *(unsigned int *)(a2 + 20));
  }
}

void sub_20B823F08(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v4 = *a1;
  v16 = a1[1];
  v5 = (float *)*((_QWORD *)a1 + 16);
  v6 = a1[37];
  v7 = v6 * (unint64_t)*a1;
  v8 = v6 * *a1;
  v9 = 3 * *a1;
  v10 = &v5[v6 * (unint64_t)(2 * *a1)];
  v11 = &v5[v6 * (unint64_t)v9];
  v12 = (4 * *a1 - v9) * v6;
  sub_20B8104F4(v8, v5);
  sub_20B8104B8(v8, &v5[v7]);
  sub_20B8104F4(v8, v10);
  sub_20B8104F4(v12, v11);
  sub_20B80FE10(v8, v10, *((float **)a1 + 10));
  sub_20B80FE10(v8, &v5[v7], v5);
  sub_20B8103D8(v7, v5, *((float **)a1 + 10));
  sub_20B80FF08(a1[22], *((float **)a1 + 10), v11);
  if (a1[2])
  {
    v13 = (void *)*((_QWORD *)a1 + 4);
    v4 = a1[12];
    v14 = a1[13];
    memmove(v13, v11, 4 * v12);
  }
  else
  {
    v15 = *((_QWORD *)a1 + 4);
    v14 = a1[13];
    v13 = (void *)(v15 + 4 * v16 * (unint64_t)v14);
    sub_20B810430(v12, v11, (float *)v13);
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v4 * (unint64_t)v14;
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v14;
  *(_DWORD *)(a2 + 24) = 2;
}

void sub_20B82405C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = v4 >> 5;
    do
    {
      sub_20B810450(*(_DWORD *)(v3 + v7 + 8), v9, v8++, *(float **)(v3 + v7), *a3);
      v3 = *a2;
      v9 = (a2[1] - *a2) >> 5;
      v7 += 32;
    }
    while (v9 > v8);
  }
}

void sub_20B8240D0(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v20;

  v6 = *a1;
  v20 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v20)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_DWORD *)(a2 + 20);
    do
    {
      if ((_DWORD)v6)
      {
        v10 = 0;
        v11 = (float *)(*(_QWORD *)a2 + 4 * (v9 * v8));
        v12 = *a4 + 4 * (v9 * v8 * v6);
        v13 = v6;
        v14 = v7;
        do
        {
          *(float *)(*(_QWORD *)a3 + 4 * v14++) = sub_20B810400(v9, v11, (float *)(v12 + 4 * v10));
          v10 += v9;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v7 += v6;
    }
    while (v8 != v20);
  }
  sub_20B810834(v20, v6, *(float **)a3);
  v15 = *(_DWORD *)(a3 + 16);
  v16 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)a5 = *(_QWORD *)a3;
  *(_QWORD *)(a5 + 8) = v16 * (unint64_t)v15;
  *(_DWORD *)(a5 + 16) = v15;
  *(_DWORD *)(a5 + 20) = v16;
  *(_DWORD *)(a5 + 24) = 2;
}

uint64_t sub_20B8241D4@<X0>(uint64_t a1@<X1>, float **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;

  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 20);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(unsigned int *)(a1 + 16);
    do
    {
      sub_20B80FE10(v6, *a2, (float *)(*(_QWORD *)a1 + 4 * v8));
      v8 += v6;
      --v9;
    }
    while (v9);
  }
  result = sub_20B810958(v5, v6, *(float **)a1);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v12 * (unint64_t)v11;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

unsigned __int8 *sub_20B82426C(unsigned __int8 *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    v8 = 0;
    v9 = 0;
    v10 = *result;
    v11 = *(_DWORD *)(a3 + 20) / v10;
    do
    {
      result = (unsigned __int8 *)sub_20B8107AC(1uLL, v10, v11, *(_QWORD *)a2 + 4 * v8, (float *)(*(_QWORD *)a3 + 4 * v11 * v10 * v9), (void *)(*a4 + 4 * (2 * v11 * v9) + 4 * v11), 0, 0);
      ++v9;
      v8 += v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_20B824320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;

  v4 = *(unsigned __int8 *)(a3 + 160);
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 80) + 4 * *(_DWORD *)(a3 + 8) * v4;
    v10 = *(_DWORD *)(a2 + 20);
    v11 = v10 * *(unsigned __int8 *)(a3 + 4);
    do
    {
      sub_20B810430(v10, (float *)(*(_QWORD *)a2 + 4 * v7), (float *)(v9 + 4 * v8));
      v8 += v11;
      v7 += v10;
      --v5;
    }
    while (v5);
    v4 = *(unsigned __int8 *)(a3 + 160);
  }
  v12 = *(unsigned __int8 *)(a3 + 4);
  if (*(_BYTE *)(a3 + 296))
  {
    *(_DWORD *)(*(_QWORD *)(a3 + 264) + 4 * v4) = 1065353216;
    if (v12 - 1 == v4)
      *(_BYTE *)(a3 + 296) = 0;
  }
  *(_BYTE *)(a3 + 160) = (v4 + 1) % v12;
}

void sub_20B8243E8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  float **v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  double v16;
  unsigned __int8 *v17;
  int v18;
  float *v19;
  int v20;
  float v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[28];
  _BYTE v33[28];
  void *__p;
  void *v35;

  if (*(_BYTE *)(a1 + 28))
  {
    sub_20B8146B4(*(_QWORD *)(a1 + 88), (unsigned int **)a2, (char **)&__p);
    v10 = *(_QWORD *)(a1 + 96);
    v11 = sub_20B80F724((uint64_t)a4);
    sub_20B81484C(v10, (uint64_t *)&__p, v11, (uint64_t)v33);
    sub_20B80F75C((uint64_t)a4, (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v12 = (float **)sub_20B80F754((uint64_t)a4);
    v13 = *(_QWORD *)&v33[8];
    v14 = *v12;
    if (*(_QWORD *)&v33[8])
    {
      v15 = *(_QWORD *)(a1 + 96);
      v16 = *(double *)(v15 + 120);
      v17 = *(unsigned __int8 **)v33;
      v18 = *(_DWORD *)(v15 + 112);
      v19 = *v12;
      do
      {
        v20 = *v17++;
        v21 = v16 * (double)(v20 - v18);
        *v19++ = v21;
        --v13;
      }
      while (v13);
    }
    v22 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)v32 = v14;
    *(_QWORD *)&v32[8] = *(unsigned int *)&v33[20] * (unint64_t)*(unsigned int *)&v33[16];
    *(_DWORD *)&v32[16] = *(_DWORD *)&v33[16];
    *(_DWORD *)&v32[20] = *(_DWORD *)&v33[20];
    *(_DWORD *)&v32[24] = 2;
    v23 = *(_DWORD *)(a1 + 16);
    v24 = (uint64_t *)sub_20B80F744((uint64_t)a4);
    sub_20B8202F4(v22, (uint64_t)v32, a3, v23, v24, a5);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v25 = a4[1];
      sub_20B813EC8(&__p, ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) * *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 34));
      v27 = *(_QWORD *)(a1 + 56);
      v28 = *(unsigned int **)a2;
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      {
        v31 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          memcpy((char *)__p + 4 * v29 * *(unsigned int *)(v27 + 20), (const void *)(*(_QWORD *)v27 + 4 * *(unsigned int *)(v27 + 20) * (unint64_t)v28[v29]), 4 * *(unsigned int *)(v27 + 20));
          ++v29;
          v28 = *(unsigned int **)a2;
          v30 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        }
        while (v29 < v30 >> 2);
        v27 = *(_QWORD *)(a1 + 56);
        v31 = (unint64_t)v30 >> 2;
      }
      sub_20B823A88(v26, a1, v25, (uint64_t)&__p, v31, *(unsigned __int16 *)(v27 + 34));
      sub_20B823BDC(*(_QWORD *)(a1 + 64), v25, (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
        free(__p);
    }
    else
    {
      sub_20B8151C0(*(_QWORD *)(a1 + 56), (unsigned int **)a2, (char **)&__p);
      sub_20B823C38(*(_QWORD *)(a1 + 64), (uint64_t *)&__p, a4[1], (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
    }
    if (*(_BYTE *)(a1 + 29))
    {
      sub_20B823CA8(*(_QWORD *)(a1 + 80), (uint64_t)v33, a4[2], (uint64_t)v32);
      *(_OWORD *)v33 = *(_OWORD *)v32;
      *(_OWORD *)&v33[12] = *(_OWORD *)&v32[12];
    }
    sub_20B8246B0(*(_QWORD *)(a1 + 72), (uint64_t)v33, a3, *(_DWORD *)(a1 + 16), a4 + 6, a5);
  }
}

void sub_20B824680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    free(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8246B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;

  v6 = *a5;
  v7 = *((unsigned int *)a5 + 5);
  *(_QWORD *)a6 = *a5;
  *(_QWORD *)(a6 + 8) = v7;
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v7;
  *(_DWORD *)(a6 + 24) = 1;
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
  {
    v11 = result;
    v12 = 0;
    do
    {
      v13 = *(unsigned int *)(*a3 + v12);
      if (a4 == -1 || (v14 = 0.0, (_DWORD)v13 != a4))
      {
        result = cblas_sdot_NEWLAPACK();
        v14 = v15 + *(float *)(*(_QWORD *)(v11 + 32) + 4 * v13);
      }
      *(float *)(v6 + v12) = v14;
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  return result;
}

_QWORD *sub_20B824788@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)(a1 + 28))
  {
    result = *(_QWORD **)(a1 + 96);
    if (result && *(_QWORD *)(a1 + 88))
    {
      sub_20B812F50((uint64_t)result, a2, (uint64_t *)&v12);
      *a3 = sub_20B80EF78((uint64_t)&v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 88) + 32));
      result = v12;
      v12 = 0;
      if (!result)
        return result;
      v7 = sub_20B80FAA0(result);
      v8 = 0x1010C401DB35655;
      return (_QWORD *)MEMORY[0x20BD39CB0](v7, v8);
    }
LABEL_11:
    *a3 = 0;
    return result;
  }
  result = *(_QWORD **)(a1 + 64);
  if (!result || !*(_QWORD *)(a1 + 56))
    goto LABEL_11;
  sub_20B82334C((uint64_t)result, a2, *(_DWORD *)(a1 + 24), (uint64_t *)&v12);
  if (*(_BYTE *)(a1 + 29))
  {
    sub_20B8233EC(*(_QWORD *)(a1 + 80), a2, (uint64_t *)&v11);
    *a3 = sub_20B812FE0((uint64_t)&v12, &v11, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32));
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      v10 = sub_20B811EA0(v9);
      MEMORY[0x20BD39CB0](v10, 0x10C0C401F533AC0);
    }
  }
  else
  {
    *a3 = sub_20B813204((uint64_t)&v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 32));
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v7 = sub_20B811F60(result);
    v8 = 0x1080C404FD05E4CLL;
    return (_QWORD *)MEMORY[0x20BD39CB0](v7, v8);
  }
  return result;
}

void sub_20B8248D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811F24((_QWORD **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B824914()
{
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "gemmlowp error: %s\n", "allocation failure");
  abort();
}

void sub_20B824948(_DWORD *a1, int *__e, long double a3)
{
  unint64_t v5;

  if (a3 == 0.0)
  {
    *a1 = 0;
    *__e = 0;
  }
  else
  {
    v5 = llround(frexp(a3, __e) * 2147483650.0);
    if (v5 == 0x80000000)
    {
      ++*__e;
      LODWORD(v5) = 0x40000000;
    }
    *a1 = v5;
  }
}

uint64_t sub_20B8249B4()
{
  if (qword_25472AE00 != -1)
    dispatch_once(&qword_25472AE00, &unk_24C46CD10);
  return dword_25472ADF8;
}

uint64_t sub_20B8249F4()
{
  uint64_t result;

  qos_class_self();
  result = pthread_qos_max_parallelism();
  dword_25472ADF8 = result;
  return result;
}

_QWORD *sub_20B824A18(int a1, int a2, __n128 *a3)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  sub_20B824BE4(v6 + 32, a3);
  *(_QWORD *)v6 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 8) = a2 * (uint64_t)a1;
  *(_DWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 20) = a2;
  *(_DWORD *)(v6 + 24) = 2;
  result = (_QWORD *)operator new();
  *result = &off_24C467608;
  result[1] = v6;
  return result;
}

_QWORD *sub_20B824AC8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C467608;
  v2 = a1[1];
  if (v2)
  {
    v3 = *(void **)(v2 + 32);
    if (v3)
    {
      *(_QWORD *)(v2 + 40) = v3;
      operator delete(v3);
    }
    MEMORY[0x20BD39CB0](v2, 0x1050C40AE4E9D09);
  }
  return a1;
}

void sub_20B824B28(_QWORD *a1)
{
  sub_20B824AC8(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B824B4C@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  size_t v5;
  const void *v6;
  __int128 v7;
  uint64_t v8;

  v4 = result[1];
  if (*(unsigned int *)(v4 + 16) <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v5 = *(unsigned int *)(v4 + 20);
    v6 = (const void *)(*(_QWORD *)v4 + v5 * a2);
    v7 = 0uLL;
    v8 = 0;
    result = sub_20B824C34(&v7, v6, (uint64_t)v6 + v5, v5);
    *(_OWORD *)a3 = v7;
    a3[2] = v8;
  }
  return result;
}

uint64_t sub_20B824BBC(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t sub_20B824BC8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
}

uint64_t sub_20B824BD4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
}

__n128 sub_20B824BE4(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_20B824C34(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_20B80EEA8(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B824C90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B824CAC(const char *a1, size_t a2)
{
  size_t v5;
  char __s1[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__s1 = 0u;
  v7 = 0u;
  v5 = 128;
  return !sysctlbyname("hw.machine", __s1, &v5, 0, 0) && strncmp(__s1, a1, a2) == 0;
}

uint64_t sub_20B824D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  size_t v5;
  uint64_t v6;

  if (sub_20B824CAC("iPhone", 6uLL) || !sub_20B824CAC("iPad", 4uLL))
    return 2;
  v5 = 8;
  v6 = 0;
  if (sysctlbyname("hw.cpufamily", &v6, &v5, 0, 0))
    v0 = -1;
  else
    v0 = v6;
  v1 = 3;
  v2 = 2;
  v3 = sub_20B8249B4();
  if (v0 <= 1741614738)
  {
    if (v0 == 131287967)
    {
      if (v3 == 8)
        return 4;
      else
        return 2;
    }
    else if (v0 != 747742334)
    {
      return v2;
    }
    return v1;
  }
  if (v0 == 1741614739)
    return v1;
  if (v0 == 3894312694 || v0 == 2465937352)
    return 2;
  return v2;
}

uint64_t sub_20B824E74()
{
  unsigned __int8 v0;
  uint64_t v2;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25472AE10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472AE10))
  {
    v2 = operator new();
    v3 = sub_20B824D5C();
    *(_QWORD *)v2 = 850045863;
    *(_QWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 49) = 0u;
    *(_QWORD *)(v2 + 152) = 0x2000000000C000;
    *(_QWORD *)(v2 + 280) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_BYTE *)(v2 + 200) = 0;
    *(_DWORD *)(v2 + 160) = 1061158912;
    *(_DWORD *)(v2 + 164) = v3;
    qword_25472AE08 = v2;
    __cxa_guard_release(&qword_25472AE10);
  }
  return qword_25472AE08;
}

void sub_20B824F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1080C40A6D20D6DLL);
  __cxa_guard_abort(&qword_25472AE10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B824F74(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C466D50;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x20BD39C80](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_20B824FC4(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_24C465F10;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_24C466D50;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_24C466D50;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_20B80627C((_QWORD *)(a1 + 96));
  sub_20B825108(a1, a3, a4, (uint64_t *)&v9);
  sub_20B853F98(v7, &v9);
  sub_20B853D84((uint64_t *)&v9);
  return a1;
}

void sub_20B825080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B853D84(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x20BD39C80](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x20BD39C80](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  sub_20B828F28(v3, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B825108@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD v25[33];
  uint64_t *v26;
  unsigned int v27;
  _DWORD *v28;
  unint64_t v29;

  v28 = a2;
  v29 = a3;
  result = sub_20B825798(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_20B853D84(a4);
    result = sub_20B8524B4(&v28, 4uLL, a4);
    if (!*a4)
    {
      sub_20B853D84(a4);
      result = sub_20B825798(v28, v29, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_20B853D84(a4);
        result = sub_20B8524B4(&v28, 4uLL, a4);
        if (!*a4)
        {
          sub_20B853D84(a4);
          v27 = 0;
          result = sub_20B825904(v28, v29, &v27, a4);
          if (!*a4)
          {
            sub_20B853D84(a4);
            result = sub_20B8524B4(&v28, 4uLL, a4);
            if (!*a4)
            {
              sub_20B853D84(a4);
              v7 = v27;
              if (v29 < v27)
                v7 = v29;
              v24 = v28;
              v25[0] = v7;
              sub_20B825A70((uint64_t)&v24, &v26);
              v8 = v26;
              v26 = 0;
              sub_20B828F28((uint64_t **)(a1 + 16), v8);
              sub_20B828F28(&v26, 0);
              v9 = sub_20B852430(v27, 4uLL);
              result = sub_20B8524B4(&v28, v9, a4);
              if (!*a4)
              {
                sub_20B853D84(a4);
                LODWORD(v26) = 0;
                result = sub_20B825904(v28, v29, &v26, a4);
                if (!*a4)
                {
                  sub_20B853D84(a4);
                  result = sub_20B8524B4(&v28, 4uLL, a4);
                  if (!*a4)
                  {
                    sub_20B853D84(a4);
                    v10 = v26;
                    if (!(_DWORD)v26)
                    {
                      LODWORD(v24) = 13;
                      v12 = (_QWORD *)sub_20B827F10((uint64_t)v25);
                      sub_20B828F84(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_20B828F84(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_20B828F84(v25, (uint64_t)") [", 3);
                      sub_20B828F84(v25, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      sub_20B828F84(v25, (uint64_t)"] ", 2);
                      sub_20B825AE4((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_20B825B70((uint64_t)&v24);
                    }
                    if (v29 < v26)
                    {
                      LODWORD(v24) = 13;
                      v11 = (_QWORD *)sub_20B827F10((uint64_t)v25);
                      sub_20B828F84(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_20B828F84(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_20B828F84(v25, (uint64_t)") [", 3);
                      sub_20B828F84(v25, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      sub_20B828F84(v25, (uint64_t)"] ", 2);
                      sub_20B825AE4((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_20B825B70((uint64_t)&v24);
                    }
                    if ((v26 & 3) != 0)
                    {
                      LODWORD(v24) = 13;
                      v13 = (_QWORD *)sub_20B827F10((uint64_t)v25);
                      sub_20B828F84(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_20B828F84(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_20B828F84(v25, (uint64_t)") [", 3);
                      sub_20B828F84(v25, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      sub_20B828F84(v25, (uint64_t)"] ", 2);
                      sub_20B825AE4((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_20B825B70((uint64_t)&v24);
                    }
                    v14 = v28;
                    v15 = v26 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x20BD39C80](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v10 = v26;
                    }
                    *(_QWORD *)(a1 + 32) = v15;
                    *(_QWORD *)(a1 + 40) = v14;
                    v16 = sub_20B852430(v10, 4uLL);
                    result = sub_20B8524B4(&v28, v16, a4);
                    if (!*a4)
                    {
                      sub_20B853D84(a4);
                      v23 = 0;
                      result = sub_20B825904(v28, v29, &v23, a4);
                      if (!*a4)
                      {
                        sub_20B853D84(a4);
                        result = sub_20B8524B4(&v28, 4uLL, a4);
                        if (!*a4)
                        {
                          sub_20B853D84(a4);
                          if (!v23)
                          {
                            LODWORD(v24) = 13;
                            v18 = (_QWORD *)sub_20B827F10((uint64_t)v25);
                            sub_20B828F84(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_20B828F84(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_20B828F84(v25, (uint64_t)") [", 3);
                            sub_20B828F84(v25, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            sub_20B828F84(v25, (uint64_t)"] ", 2);
                            sub_20B825AE4((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_20B825B70((uint64_t)&v24);
                          }
                          if (v29 < v23)
                          {
                            LODWORD(v24) = 13;
                            v17 = (_QWORD *)sub_20B827F10((uint64_t)v25);
                            sub_20B828F84(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_20B828F84(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_20B828F84(v25, (uint64_t)") [", 3);
                            sub_20B828F84(v25, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            sub_20B828F84(v25, (uint64_t)"] ", 2);
                            sub_20B825AE4((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_20B825B70((uint64_t)&v24);
                          }
                          if ((v23 & 3) != 0)
                          {
                            LODWORD(v24) = 13;
                            v19 = (_QWORD *)sub_20B827F10((uint64_t)v25);
                            sub_20B828F84(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_20B828F84(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_20B828F84(v25, (uint64_t)") [", 3);
                            sub_20B828F84(v25, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            sub_20B828F84(v25, (uint64_t)"] ", 2);
                            sub_20B825AE4((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_20B825B70((uint64_t)&v24);
                          }
                          v20 = v28;
                          v21 = v23 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v22 = *(_QWORD *)(a1 + 80);
                          if (v22)
                          {
                            MEMORY[0x20BD39C80](v22, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v21;
                          *(_QWORD *)(a1 + 72) = v20;
                          return sub_20B80627C(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20B825758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B825B70((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B825798@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_20B827F10((uint64_t)v8);
    sub_20B828F84(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_20B828F84(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v8, (uint64_t)") [", 3);
    sub_20B828F84(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_20B828F84(v8, (uint64_t)"] ", 2);
    sub_20B825AE4(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x20BD39C2C](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_20B80627C(a4);
  }
}

void sub_20B8258EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B825904@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_20B827F10((uint64_t)v8);
    sub_20B828F84(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_20B828F84(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v8, (uint64_t)") [", 3);
    sub_20B828F84(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_20B828F84(v8, (uint64_t)"] ", 2);
    sub_20B825AE4(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x20BD39C2C](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_20B80627C(a4);
  }
}

void sub_20B825A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B825A70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_20B82E028(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_20B825AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_20B825AE4(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sub_20B853EE0(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_20B825B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B825B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 8) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 120);
  return a1;
}

void **sub_20B825BF8(uint64_t a1)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = *(void ***)(a1 + 8);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_24C465CD8))
  {
    v8 = 1;
    v4 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    sub_20B828F84(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_20B828F84(v5, (uint64_t)") [", 3);
    v7 = sub_20B828F84(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_20B828F84(v7, (uint64_t)"] ", 2);
    sub_20B827FFC(&v8);
    return 0;
  }
  return result;
}

void sub_20B825CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B825CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24C465F10;
  sub_20B853D84((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = &off_24C466D50;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    MEMORY[0x20BD39C80](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_24C466D50;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    MEMORY[0x20BD39C80](v3, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  sub_20B828F28((uint64_t **)(a1 + 16), 0);
  return a1;
}

const char *sub_20B825D5C(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  else
    return "<unk>";
}

const char *sub_20B825DAC(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  else
    return "<s>";
}

const char *sub_20B825DFC(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return "</s>";
}

const char *sub_20B825E4C(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  else
    return "<pad>";
}

uint64_t sub_20B825E9C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  sub_20B825F1C(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    sub_20B825F1C(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t sub_20B825F1C(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_20B825FCC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_20B8520F8() <= 2)
  {
    v9 = 0;
    v2 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    sub_20B828F84(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_20B828F84(v3, (uint64_t)") ", 2);
    v5 = sub_20B828F84(v4, (uint64_t)"LOG(", 4);
    v6 = sub_20B828F84(v5, (uint64_t)"ERROR", 5);
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    sub_20B828F84(v7, (uint64_t)"Not implemented.", 16);
    sub_20B827FFC(&v9);
  }
  return sub_20B853EE0(a1, 12, "Not implemented.", 16);
}

void sub_20B8260A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8260B4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_20B8520F8() <= 2)
  {
    v9 = 0;
    v2 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    sub_20B828F84(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_20B828F84(v3, (uint64_t)") ", 2);
    v5 = sub_20B828F84(v4, (uint64_t)"LOG(", 4);
    v6 = sub_20B828F84(v5, (uint64_t)"ERROR", 5);
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    sub_20B828F84(v7, (uint64_t)"Not implemented.", 16);
    sub_20B827FFC(&v9);
  }
  return sub_20B853EE0(a1, 12, "Not implemented.", 16);
}

void sub_20B826188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

void sub_20B82619C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  sub_20B82930C(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_20B853EE0(&v54, 13, "unk is not defined.", 19);
      sub_20B853F98((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &unk_25472C4F8;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            sub_20B8299D8((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sub_20B826A20((_QWORD *)(a1 + 24), &v51, (int *)(a1 + 92), &v54),
              sub_20B853F98((uint64_t *)(a1 + 96), (_DWORD **)&v54),
              sub_20B853D84((uint64_t *)&v54),
              (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
              v26 = v54,
              sub_20B853D84((uint64_t *)&v54),
              !v26))
        {
          if (!v50
            || (sub_20B826A20((_QWORD *)(a1 + 56), &v48, 0, &v54),
                sub_20B853F98((uint64_t *)(a1 + 96), (_DWORD **)&v54),
                sub_20B853D84((uint64_t *)&v54),
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
                v27 = v54,
                sub_20B853D84((uint64_t *)&v54),
                !v27))
          {
            sub_20B826EF0(&v46, &v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            sub_20B828F28((uint64_t **)(a1 + 16), v28);
            sub_20B828F28((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sub_20B853F98((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
LABEL_68:
    sub_20B853D84((uint64_t *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = sub_20B8280B0(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sub_20B853EE0(&v54, 13, "piece must not be empty.", 24);
        sub_20B853F98((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    sub_20B82957C(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      sub_20B829958(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &unk_25472C4F8;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sub_20B853EE0(&v43, 13, v38, v41);
        sub_20B853F98((uint64_t *)(a1 + 96), &v43);
        sub_20B853D84((uint64_t *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sub_20B8268D4(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_20B853EE0(&v54, 13, "unk is already defined.", 23);
        sub_20B853F98((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  sub_20B8298D4((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sub_20B853EE0(&v42, 13, v33, v34);
  sub_20B853F98((uint64_t *)(a1 + 96), &v42);
  sub_20B853D84((uint64_t *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  sub_20B8292CC((uint64_t)&v46, v47[0]);
  sub_20B8292CC((uint64_t)&v48, v49);
  sub_20B8292CC((uint64_t)&v51, v52);
}

void sub_20B8267BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sub_20B853D84(&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_20B8292CC((uint64_t)&a19, a20);
  sub_20B8292CC((uint64_t)&a22, a23);
  sub_20B8292CC((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8268D4(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  v4 = atomic_load((unsigned __int8 *)&qword_25472AE20);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472AE20))
  {
    qword_25472AE18 = sub_20B8277F0();
    __cxa_guard_release(&qword_25472AE20);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  v5 = (_QWORD *)qword_25472AE18;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = sub_20B829B04(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_20B8269F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_25472AE20);
  _Unwind_Resume(a1);
}

void sub_20B826A20(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          sub_20B80CDD8();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)sub_20B800BE8((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_20B80CDD8();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_20B8127BC((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (sub_20B8278D4(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sub_20B853EE0(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      sub_20B82C68C(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sub_20B853EE0(a4, 13, "no entry is found in the trie.", 30);
      else
        sub_20B80627C(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sub_20B80627C(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sub_20B853EE0(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_20B826E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B826EF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_20B82DF4C(v4, a1);
  *a2 = v4;
  return result;
}

void sub_20B826F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_20B826F64(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sub_20B82E02C(*(_QWORD *)(a1 + 16), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_20B852454(a2);
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sub_20B852454(a2);
  v26 = a1 + 64;
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_20B827228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_20B8272A0(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_20BA68FCC[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              sub_20B80CDD8();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)sub_20B829AD0((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = sub_20B829AD0((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_20BA68FCC[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_20B80CDD8();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)sub_20B829AD0((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            sub_20B80CDD8();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)sub_20B829AD0((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_20B8276E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B827718@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = a1;
  return sub_20B827744("<0x%02X>", &v3, a2);
}

uint64_t sub_20B827744@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_20B8277D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8277F0()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    sub_20B827744("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)sub_20B82818C(v0, (unsigned __int8 *)__p, (uint64_t)&unk_20BA37B7A, (__int128 **)&v5) + 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_20B8278B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8278D4(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  sub_20B829C04(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x20BD39C80](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  sub_20B82C5D4((uint64_t)&v19);
  return 0;
}

void sub_20B8279E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B82C5D4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8279FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20B853F94(a2, a1 + 96);
}

uint64_t sub_20B827A08(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B827A10@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_20B8520F8();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_20B828F84(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_20B828F84(v4, (uint64_t)") ", 2);
    v6 = sub_20B828F84(v5, (uint64_t)"LOG(", 4);
    v7 = sub_20B828F84(v6, (uint64_t)"ERROR", 5);
    v8 = sub_20B828F84(v7, (uint64_t)") ", 2);
    sub_20B828F84(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_20B827FFC(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_20B827AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B827AE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_20B8520F8();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_20B828F84(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_20B828F84(v4, (uint64_t)") ", 2);
    v6 = sub_20B828F84(v5, (uint64_t)"LOG(", 4);
    v7 = sub_20B828F84(v6, (uint64_t)"ERROR", 5);
    v8 = sub_20B828F84(v7, (uint64_t)") ", 2);
    sub_20B828F84(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_20B827FFC(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_20B827BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

void sub_20B827BC0(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((int)sub_20B8520F8() <= 2)
  {
    LOBYTE(__p) = 0;
    v2 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_20B828F84(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_20B828F84(v3, (uint64_t)") ", 2);
    v5 = sub_20B828F84(v4, (uint64_t)"LOG(", 4);
    v6 = sub_20B828F84(v5, (uint64_t)"ERROR", 5);
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    sub_20B828F84(v7, (uint64_t)"Not implemented.", 16);
    sub_20B827FFC(&__p);
  }
  __p = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_20B828BE0((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20B827D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  sub_20B828E34(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_20B827D4C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  if ((int)sub_20B8520F8() <= 2)
  {
    v7 = 0;
    v0 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    sub_20B828F84(v0, (uint64_t)"(", 1);
    v1 = (_QWORD *)std::ostream::operator<<();
    v2 = sub_20B828F84(v1, (uint64_t)") ", 2);
    v3 = sub_20B828F84(v2, (uint64_t)"LOG(", 4);
    v4 = sub_20B828F84(v3, (uint64_t)"ERROR", 5);
    v5 = sub_20B828F84(v4, (uint64_t)") ", 2);
    sub_20B828F84(v5, (uint64_t)"Not implemented.", 16);
    sub_20B827FFC(&v7);
  }
  return 0.0;
}

void sub_20B827E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B827E1C()
{
  return 0;
}

uint64_t sub_20B827E24()
{
  return 0;
}

uint64_t sub_20B827E2C()
{
  return 0;
}

uint64_t sub_20B827E34()
{
  return 0;
}

uint64_t sub_20B827E3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827E4C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_20B827E64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827E74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827E84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827E94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827EA4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827EB4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B827EC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sub_20B827EDC(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_20B827F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_20B827FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B827FFC(_BYTE *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1)
    sub_20B853C74();
  return a1;
}

void sub_20B828094(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_20B854468(a1);
}

uint64_t sub_20B8280B0(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B82816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20B82818C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20B828414(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20B8288BC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_20B828960(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_20B8283F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_20B828B94(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_20B828414(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_20B828450((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_20B828450(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_20B8287FC(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_20B828750(a2, a3);
  }
  else
  {
    return sub_20B828658(a2, a3);
  }
}

unint64_t sub_20B828658(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_20B828750(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_20B8287FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_20B8288BC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_20B828960(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_20B828A3C(a1, prime);
  }
}

void sub_20B828A3C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_20B800BC0();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_20B828B94(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20B828BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_20B828CA4((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B828DB4((uint64_t)v8);
  return v4;
}

void sub_20B828C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B828DB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B828CA4(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B828D20(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20B828D04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B828D20(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_20B80CDD8();
  result = (char *)sub_20B828D70((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_20B828D70(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_20B800BC0();
  return operator new(24 * a2);
}

uint64_t sub_20B828DB4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B828DE8(a1);
  return a1;
}

void sub_20B828DE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_20B828E34(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B828E74((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B828E74(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_20B828EC8(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C466D50;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x20BD39C80](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t **sub_20B828F28(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

_QWORD *sub_20B828F84(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x20BD39A7C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_20B8290E8(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x20BD39A88](v13);
  return a1;
}

void sub_20B82908C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x20BD39A88](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20B82906CLL);
}

void sub_20B8290D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20B8290E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_20B829224(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_20B829208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B829224(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_20B8292CC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20B8292CC(a1, *a2);
    sub_20B8292CC(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_20B82930C(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B8293DC(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_20B829420(&v13, a2);
        else
          sub_20B8294D0((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_20B8293DC(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_20B80CDD8();
  result = sub_20B800BE8((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *sub_20B829420(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_20B8294D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_20B82957C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20B829604((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_20B8296A0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_20B829604(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_20B8296F4(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_20B8296F4(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_20B8296A0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_20B82973C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_20B8296F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *sub_20B82973C(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_20B8298D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_20B829958(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_20B829604((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_20B8296A0(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_20B8299D8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_20B829AD0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_20B800BC0();
  return operator new(16 * a2);
}

unsigned __int8 *sub_20B829B04(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_20B828414((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_20B8288BC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *sub_20B829C04(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v4[3];
  _OWORD v5[6];
  _OWORD v6[3];
  uint64_t v7;

  if (!a2[3])
    return (uint64_t *)sub_20B82A55C((uint64_t)a1, a2);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  sub_20B82A12C(a1, a2, (int **)v4);
  sub_20B82A240((uint64_t)a1, (uint64_t)v4);
  sub_20B82ACF0((uint64_t *)v4);
  sub_20B82AAE4((uint64_t *)&v4[1] + 1);
  sub_20B829D2C((uint64_t *)v5);
  sub_20B82AA5C((uint64_t *)&v5[1] + 1);
  sub_20B82A818((uint64_t *)&v5[4] + 1);
  sub_20B82A818((uint64_t *)v6);
  sub_20B82A818((uint64_t *)&v6[1] + 1);
  v7 = 0;
  return sub_20B82C048((uint64_t *)v4);
}

void sub_20B829CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B82C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B829CE4(uint64_t *a1)
{
  sub_20B829D2C(a1);
  if (*a1)
  {
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20B829D2C(uint64_t *a1)
{
  uint64_t result;

  sub_20B829D74(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_20B829D74(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_20B829DD0(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_20B829DD0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x20BD39C80);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_20B829EE4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x20BD39CB0);
}

const char *sub_20B829F08(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "";
}

uint64_t *sub_20B829F20(uint64_t *a1)
{
  sub_20B829F68(a1);
  if (*a1)
  {
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20B829F68(uint64_t *a1)
{
  uint64_t result;

  sub_20B829FB0(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_20B829FB0(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_20B82A01C(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_20B82A01C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x20BD39C80);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t sub_20B82A12C(void (**a1)(unint64_t, uint64_t), unint64_t *a2, int **a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;

  sub_20B82AEDC((uint64_t *)a3);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(_QWORD *)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      sub_20B82AFAC(a3, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  sub_20B82B38C((uint64_t)a3, 0);
  v13 = (uint64_t)*a3;
  v14 = *((_BYTE *)*a3 + 8);
  v15 = **a3;
  if (v14)
    v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  *a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(_BYTE *)a3[6] = v14;
  sub_20B82ACF0((uint64_t *)a3);
  sub_20B82A818((uint64_t *)a3 + 15);
  sub_20B82A818((uint64_t *)a3 + 18);
  sub_20B82A818((uint64_t *)a3 + 21);
  return sub_20B82B7E0((unsigned int **)a3 + 9);
}

uint64_t sub_20B82A240(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_20B82A01C((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8052888210);
  v10 = *(_QWORD *)(a2 + 104);
  if (v10)
    bzero(*(void **)(a1 + 64), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  if (v14)
    MEMORY[0x20BD39C80](v14, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_20B82BAD8(a1);
  v15 = *(int **)(a1 + 32);
  v16 = v15[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v16;
    if (!v16)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**(_DWORD **)(a2 + 24) >= 4u)
  {
    sub_20B82B974(a1, (_QWORD *)a2, 0, 0);
    v15 = *(int **)(a1 + 32);
  }
  v18 = *(_QWORD *)(a1 + 16) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *(_QWORD *)(a1 + 16) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v22)
          {
            sub_20B82BAD8(a1);
            v15 = *(int **)(a1 + 32);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v27;
            if (v22 == v27)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x20BD39C80](v15, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_20B829D2C((uint64_t *)(a1 + 40));
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_20B82A55C(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_20B82A01C((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x20BD39C80](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_20B82BAD8(a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    sub_20B82C104(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            sub_20B82BAD8(a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x20BD39C80](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return sub_20B829D2C((uint64_t *)(a1 + 40));
}

uint64_t *sub_20B82A7F0(uint64_t *a1)
{
  sub_20B82A818(a1);
  return sub_20B82A9CC(a1);
}

uint64_t sub_20B82A818(uint64_t *a1)
{
  uint64_t result;

  sub_20B82A860(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_20B82A860(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_20B82A8BC(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_20B82A8BC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x20BD39C80);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_20B82A9CC(uint64_t *a1)
{
  sub_20B82A818(a1);
  if (*a1)
  {
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_20B82AA14(uint64_t *a1)
{
  uint64_t v2;

  sub_20B82AA5C(a1);
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x20BD39C80](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_20B82A9CC(a1);
}

uint64_t sub_20B82AA5C(uint64_t *a1)
{
  uint64_t result;

  sub_20B82A818(a1);
  result = a1[3];
  if (result)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_20B82AA9C(uint64_t *a1)
{
  sub_20B82AAE4(a1);
  if (*a1)
  {
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20B82AAE4(uint64_t *a1)
{
  uint64_t result;

  sub_20B82AB2C(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_20B82AB2C(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_20B82AB98(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_20B82AB98(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x20BD39C80);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_20B82ACA8(uint64_t *a1)
{
  sub_20B82ACF0(a1);
  if (*a1)
  {
    MEMORY[0x20BD39C80](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20B82ACF0(uint64_t *a1)
{
  uint64_t result;

  sub_20B82AD38(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_20B82AD38(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_20B82ADB8(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t sub_20B82ADB8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x20BD39C80);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_20B82AEDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  sub_20B82B1D0(a1 + 15, 0x400uLL, &v7);
  v2 = a1[22];
  if (v2)
  {
    v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --a1[22];
  }
  else
  {
    sub_20B82B254(a1);
  }
  sub_20B82B2A8(a1 + 9);
  sub_20B82B2F4(a1 + 3);
  v4 = a1[7];
  if (v4 == a1[8])
  {
    sub_20B829DD0(a1 + 6, v4 + 1);
    v4 = a1[7];
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(_BYTE *)(*a1 + 8) = -1;
  v6 = 0;
  return sub_20B82B33C(a1 + 18, &v6);
}

_QWORD *sub_20B82AFAC(_QWORD *result, uint64_t a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_24C466D70;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_24C45CDD0, (void (*)(void *))std::exception::~exception);
  }
  v5 = a4;
  v7 = result;
  v8 = 0;
  v9 = 0;
  v10 = *result;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(_BYTE *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return result;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  result = (_QWORD *)sub_20B82B38C((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = *(_BYTE *)(a2 + v8);
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        sub_20B82B254(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      result = sub_20B82B33C(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_20B82B1D0(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_20B82A8BC(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *sub_20B82B254(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_20B82ADB8(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *sub_20B82B2A8(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    result = sub_20B82B33C(result, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

uint64_t *sub_20B82B2F4(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_20B82AB98(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *sub_20B82B33C(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_20B82A8BC(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t sub_20B82B38C(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = result;
  v3 = *(_QWORD *)(result + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(result + 120);
    v5 = (_QWORD *)(result + 24);
    v6 = (_QWORD *)(result + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        sub_20B82A818(v35);
        v38 = 0;
        sub_20B82B1D0(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      result = sub_20B82B674((uint64_t *)v2, v4, &v37);
      if ((_DWORD)result)
      {
        v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        sub_20B82B2A8((uint64_t *)(v2 + 72));
        result = (uint64_t)sub_20B82B2F4((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          result = sub_20B829DD0((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          result = (uint64_t)sub_20B82B33C((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = v27 + 12 * v28;
      v31 = *(unsigned __int8 *)(v30 + 8);
      v32 = *(_DWORD *)v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_20B82B674(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *a1;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = a1[15];
  v14 = a1[16];
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *a1;
    v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    v20 = a1[3];
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t sub_20B82B7E0(unsigned int **a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = (uint64_t)a1[3];
  a1[3] = (unsigned int *)v2;
  if (result)
    result = MEMORY[0x20BD39C80](result, 0x1000C8052888210);
  a1[4] = 0;
  v4 = a1[1];
  if (v4)
  {
    v5 = 0;
    v6 = a1[3];
    v7 = *a1;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 = (unsigned int *)((char *)v5 + (((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F));
      v4 = (unsigned int *)((char *)v4 - 1);
    }
    while (v4);
    a1[4] = v5;
  }
  return result;
}

unsigned int *sub_20B82B908(unsigned int *result, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_24C466D70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_24C45CDD0, (void (*)(void *))std::exception::~exception);
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_20B82B974(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = a2 + 9;
  v9 = *(unsigned int *)(a2[3] + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (sub_20B82BF94(a2 + 9, v10) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(a2[6] + v10))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_20B82B908((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)sub_20B82BCE8(a1, (uint64_t)a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)sub_20B82BF94(v8, v10);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(a2[6] + v10))
        result = (unsigned int *)sub_20B82B974(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_20B82BAD8(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_20B829FB0((uint64_t *)(a1 + 8), (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*(_QWORD *)(a1 + 16) <= v7)
        {
          sub_20B82BAD8(a1);
          v8 = *(_QWORD *)(a1 + 32);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13)
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    sub_20B829FB0(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *(_QWORD *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *(_DWORD *)(a1 + 72);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_20B82BCE8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)(a1 + 40);
  sub_20B829D74((uint64_t *)(a1 + 40), 0);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v10);
      sub_20B82BFF8(v8, &v35);
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *(unsigned int *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    v16 = *(unsigned __int8 **)(a1 + 40);
    v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *(_QWORD *)(a1 + 48);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_20B82B908((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(_QWORD *)(a1 + 48))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v24);
      if (*(_QWORD *)(a1 + 16) <= v26)
        sub_20B82BAD8(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *(_QWORD *)(a1 + 32);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == (_DWORD)v26)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v29 = v26;
        }
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 32);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_20B82BF94(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *sub_20B82BFF8(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_20B829DD0(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

uint64_t *sub_20B82C048(uint64_t *a1)
{
  sub_20B82ACF0(a1);
  sub_20B82AAE4(a1 + 3);
  sub_20B829D2C(a1 + 6);
  sub_20B82AA5C(a1 + 9);
  sub_20B82A818(a1 + 15);
  sub_20B82A818(a1 + 18);
  sub_20B82A818(a1 + 21);
  a1[24] = 0;
  sub_20B82A7F0(a1 + 21);
  sub_20B82A7F0(a1 + 18);
  sub_20B82A9CC(a1 + 15);
  sub_20B82AA14(a1 + 9);
  sub_20B829CE4(a1 + 6);
  sub_20B82AA9C(a1 + 3);
  return sub_20B82ACA8(a1);
}

uint64_t sub_20B82C104(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = sub_20B82C268(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          sub_20B82C104(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_20B82C268(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  sub_20B829D74((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_24C466D70;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_24C45CDD0, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_20B82BFF8(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_20B82B908((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        sub_20B82BAD8(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_20B82C5D4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  sub_20B829F68((uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x20BD39C80](v3, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_20B829D2C((uint64_t *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x20BD39C80](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_20B829CE4((uint64_t *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x20BD39C80](v5, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_20B829F20(v2);
  return a1;
}

_QWORD *sub_20B82C68C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B82C700(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_20B82C6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B82C700(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_20B80CDD8();
  result = (char *)sub_20B829AD0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_20B82C740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = &off_24C465DC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 245);
  sub_20B80627C((_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_20B82C7F8((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_20B82C7C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_20B853D84(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B82C7F8(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  _DWORD *v9;
  __int128 v10;
  unsigned int *v11;
  unint64_t v12;

  if (a3)
  {
    v3 = result;
    v11 = 0;
    v12 = 0;
    v10 = 0uLL;
    sub_20B82CBCC(a2, a3, &v11, &v10, &v9);
    sub_20B853F98(v3 + 7, &v9);
    result = sub_20B853D84((uint64_t *)&v9);
    if (!v3[7])
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_24C466D50;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = v3[1];
      v3[1] = (uint64_t)v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v12 || (v12 & 3) != 0)
      {
        sub_20B853EE0(&v9, 13, "Trie blob is wrongly formatted.", 31);
        sub_20B853F98(v3 + 7, &v9);
        return sub_20B853D84((uint64_t *)&v9);
      }
      else
      {
        v6 = (_QWORD *)v3[1];
        v7 = v11;
        v8 = v12 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        result = (uint64_t *)v6[3];
        if (result)
        {
          result = (uint64_t *)MEMORY[0x20BD39C80](result, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *((_OWORD *)v3 + 1) = v10;
      }
    }
  }
  return result;
}

void sub_20B82C92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82C948(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &off_24C465DC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_20B80627C((_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_20B82C7F8((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_20B82C9C8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_20B853D84(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B82CA00(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *a1 = (uint64_t)&off_24C465DC8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  v7 = a1 + 7;
  *((_BYTE *)a1 + 48) = 0;
  sub_20B80627C(a1 + 7);
  v11 = 0;
  sub_20B825904(a3, a4, &v11, &v10);
  sub_20B853F98(v7, &v10);
  sub_20B853D84((uint64_t *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  v8 = v10;
  sub_20B853D84((uint64_t *)&v10);
  if (!v8)
  {
    *((_BYTE *)a1 + 48) = v11 != 0;
    sub_20B82C7F8(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_20B82CADC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_20B853D84(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B82CB2C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C465DC8;
  sub_20B853D84(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B82CB74(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C465DC8;
  sub_20B853D84(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B82CBCC@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sub_20B80627C(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sub_20B853EE0(a5, 13, v10, v11);
}

_QWORD *sub_20B82CC34@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  std::string::size_type i;
  void **v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  size_t v46;
  const char *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type size;
  BOOL v52;
  std::string::size_type v53;
  void **v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::string::size_type v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  void *__p;
  char v78;
  uint64_t v79;
  _QWORD v80[5];
  const std::string::value_type *v81;
  std::string::size_type v82;
  int v83;
  void **v84;
  std::string *v85;

  v6 = a3;
  v84 = (void **)a5;
  v85 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sub_20B80627C(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sub_20B80627C(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)a1 + 24))(a1);
  if (*a6)
    return result;
  sub_20B853D84(a6);
  v83 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sub_20B82D3E4(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32)
        goto LABEL_11;
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    v11 = a6;
    return sub_20B80627C(v11);
  }
LABEL_11:
  v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_20B82D5C8(v84, 3 * v6);
  v81 = "▁";
  v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_20B82D65C((uint64_t)v80);
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sub_20B82D3E4(a1, a2, v6, (uint64_t)&v74);
    v13 = v74;
    v14 = v75;
    if ((v12 & 1) != 0)
    {
      if (!v75)
        goto LABEL_64;
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14)
          goto LABEL_64;
      }
    }
    else if (!v75)
    {
      v12 = 0;
      goto LABEL_64;
    }
    v72 = a2;
    v73 = v6;
    v15 = 0;
    do
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (i = 0; i < v82; ++i)
          {
            v19 = v84;
            v20 = v83;
            v21 = (char *)v84[1];
            v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              v24 = (char *)*v84;
              v25 = (v21 - (_BYTE *)*v84) >> 3;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61)
                goto LABEL_114;
              v27 = v22 - v24;
              if (v27 >> 2 > v26)
                v26 = v27 >> 2;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
              {
                v29 = (char *)sub_20B800BE8((uint64_t)(v84 + 2), v28);
                v24 = (char *)*v19;
                v21 = (char *)v19[1];
              }
              else
              {
                v29 = 0;
              }
              v30 = &v29[8 * v25];
              *(_QWORD *)v30 = v20;
              v23 = v30 + 8;
              while (v21 != v24)
              {
                v31 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v30 - 1) = v31;
                v30 -= 8;
              }
              *v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *(_QWORD *)v21 = v83;
              v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        v32 = v84;
        v33 = v83;
        v34 = (char *)v84[1];
        v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          v37 = (char *)*v84;
          v38 = (v34 - (_BYTE *)*v84) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
LABEL_114:
            sub_20B80CDD8();
          v40 = v35 - v37;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)sub_20B800BE8((uint64_t)(v84 + 2), v41);
            v37 = (char *)*v32;
            v34 = (char *)v32[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[8 * v38];
          *(_QWORD *)v43 = v33;
          v36 = v43 + 8;
          while (v34 != v37)
          {
            v44 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v43 - 1) = v44;
            v43 -= 8;
          }
          *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *(_QWORD *)v34 = v83;
          v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    v12 = v13[v14 - 1] == 32;
    a2 = v72;
    v6 = v73;
LABEL_64:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v45)
      v46 = v82;
    else
      v46 = 1;
    if (v45)
      v47 = v81;
    else
      v47 = " ";
    while (1)
    {
      v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        size = v85->__r_.__value_.__l.__size_;
        if (!v46)
          goto LABEL_79;
      }
      else
      {
        v50 = v85;
        size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46)
          goto LABEL_79;
      }
      v52 = size >= v46;
      v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46))
        break;
LABEL_79:
      if ((v49 & 0x80) != 0)
        v49 = v48->__r_.__value_.__l.__size_;
      if ((_DWORD)v49 - (_DWORD)v46 < 0)
      {
        LODWORD(v74) = 13;
        v65 = (_QWORD *)sub_20B827F10((uint64_t)&v75);
        sub_20B828F84(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_20B828F84(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&v75, (uint64_t)") [", 3);
        sub_20B828F84(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_20B828F84(&v75, (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)&v74, v71);
        goto LABEL_110;
      }
      v83 = *((_QWORD *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_20B809740((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_20B82D65C((uint64_t)v80);
  }
  v54 = v84;
  v55 = v83;
  v56 = (char *)v84[1];
  v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    v59 = (char *)*v84;
    v60 = (v56 - (_BYTE *)*v84) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      sub_20B80CDD8();
    v62 = v57 - v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v64 = (char *)sub_20B800BE8((uint64_t)(v84 + 2), v63);
      v59 = (char *)*v54;
      v56 = (char *)v54[1];
    }
    else
    {
      v64 = 0;
    }
    v66 = &v64[8 * v60];
    v67 = &v64[8 * v63];
    *(_QWORD *)v66 = v55;
    v58 = v66 + 8;
    while (v56 != v59)
    {
      v68 = *((_QWORD *)v56 - 1);
      v56 -= 8;
      *((_QWORD *)v66 - 1) = v68;
      v66 -= 8;
    }
    *v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v56 = v83;
    v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
    v69 = v85->__r_.__value_.__l.__size_;
  else
    v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v84[1] - (_BYTE *)*v84) >> 3 == v69 + 1)
  {
    v11 = (_QWORD *)v71;
    return sub_20B80627C(v11);
  }
  LODWORD(v74) = 13;
  v70 = (_QWORD *)sub_20B827F10((uint64_t)&v75);
  sub_20B828F84(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_20B828F84(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_20B828F84(&v75, (uint64_t)") [", 3);
  sub_20B828F84(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_20B828F84(&v75, (uint64_t)"] ", 2);
  sub_20B825AE4((unsigned int *)&v74, v71);
LABEL_110:
  v75 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v75 + *(_QWORD *)(v75 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v76 = MEMORY[0x24BEDB848] + 16;
  if (v78 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x20BD39C2C](&v79);
}

void sub_20B82D3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B825B70((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_20B82D3E4@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[64];

  v27[63] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = a2;
    v7 = result;
    v8 = *(_QWORD *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, result = sub_20B82D91C(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      v9 = (int)result;
      if (a3 < (int)result)
        v9 = a3;
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (!v10)
        goto LABEL_24;
      v11 = 0;
      v12 = 0;
      v13 = *(_DWORD **)(v10 + 16);
      v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        v15 = v6[v11];
        v16 = v14 ^ v15;
        v17 = v13[v16];
        if ((v17 & 0x800000FF) != (_DWORD)v15)
          break;
        v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            v18 = &v27[2 * v12 - 1];
            *(_DWORD *)v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12)
        goto LABEL_24;
      v19 = 0;
      v20 = 0;
      v21 = v27;
      v22 = v27;
      do
      {
        v24 = *v22;
        v22 += 2;
        v23 = v24;
        if (!v19 || v23 > v19)
        {
          v20 = *((_DWORD *)v21 - 2);
          v19 = v23;
        }
        v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        v6 = (char *)(*(_QWORD *)(v7 + 16) + v20);
        result = strlen(v6);
      }
      else
      {
LABEL_24:
        v26 = 0;
        v25 = sub_20B852108((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25)
          LODWORD(v19) = v26;
        else
          LODWORD(v19) = 1;
        if (v25)
          result = (int)v26;
        else
          result = 3;
        if (!v25)
          v6 = (char *)&unk_20BA3627C;
      }
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_20B82D5C8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_20B80CDD8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20B800BE8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_20B82D65C(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_20B800BE8(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        sub_20B80CDD8();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_20B800BE8(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void sub_20B82D874(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  nullsub_1(&v2);
  sub_20B853D84(&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_20B82D8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sub_20B853D84(&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B82D91C(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_20BA68FCC[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sub_20B82DAE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
}

void sub_20B82DBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B82DC18(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    sub_20B82DEB8(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            sub_20B80CDD8();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)sub_20B800BE8((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_24C466D50;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (sub_20B8278D4(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"normalizer.cc", 13);
      sub_20B828F84(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = sub_20B828F84(v24, (uint64_t)") [", 3);
      v26 = sub_20B828F84(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      sub_20B828F84(v26, (uint64_t)"] ", 2);
      sub_20B827FFC(&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_20B82DE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void sub_20B82DEB8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_20B80CDD8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20B800BE8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_20B82DF50(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_24C466D50;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x20BD39C80](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_20B82E004(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B82E02C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)a1)
    return sub_20B82E068(a2, *(void **)(*(_QWORD *)a1 + 16), 4 * *(_QWORD *)(*(_QWORD *)a1 + 8));
  else
    return sub_20B80BBD0(a2, "");
}

uint64_t sub_20B82E054(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_20B82E05C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20B853F94(a2, a1 + 56);
}

_QWORD *sub_20B82E068(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t sub_20B82E110@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 80))
    v3 = *(_DWORD **)(a1 + 80);
  else
    v3 = &unk_25472C4F8;
  switch(v3[68])
  {
    case 1:
      result = sub_20B82E260(a1, &v11);
      goto LABEL_12;
    case 2:
      result = sub_20B82E2D4(a1, &v11);
      goto LABEL_12;
    case 3:
      result = sub_20B82E348(a1, &v11);
      goto LABEL_12;
    case 4:
      result = sub_20B82E3BC(a1, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      result = sub_20B8520F8();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
        sub_20B828F84(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
        v8 = sub_20B828F84(v7, (uint64_t)"LOG(", 4);
        v9 = sub_20B828F84(v8, (uint64_t)"ERROR", 5);
        v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
        sub_20B828F84(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        result = (uint64_t)sub_20B827FFC(&v11);
      }
      *a2 = 0;
      break;
  }
  return result;
}

void sub_20B82E24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B827FFC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82E260@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_20B8413FC(v4, a1);
  *a2 = v4;
  return result;
}

void sub_20B82E2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82E2D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_20B8526A0(v4, a1);
  *a2 = v4;
  return result;
}

void sub_20B82E324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82E348@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_20B845404(v4, a1);
  *a2 = v4;
  return result;
}

void sub_20B82E398(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82E3BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_20B8451A4(v4, a1);
  *a2 = v4;
  return result;
}

void sub_20B82E40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82E430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v6 == 1)
  {
    result = (uint64_t)sub_20B82E5FC(a1, (uint64_t)v15, &v14);
    goto LABEL_5;
  }
  if (!v6)
  {
    result = sub_20B82E580(a1, v15, &v14);
LABEL_5:
    *a4 = v14;
    return result;
  }
  result = sub_20B8520F8();
  if ((int)result <= 2)
  {
    LOBYTE(v14) = 0;
    v8 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
    sub_20B828F84(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
    v11 = sub_20B828F84(v10, (uint64_t)"LOG(", 4);
    v12 = sub_20B828F84(v11, (uint64_t)"ERROR", 5);
    v13 = sub_20B828F84(v12, (uint64_t)") ", 2);
    sub_20B828F84(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    result = (uint64_t)sub_20B827FFC(&v14);
  }
  *a4 = 0;
  return result;
}

void sub_20B82E568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B827FFC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82E580@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_20B8416BC(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_20B82E5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B82E5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sub_20B8526A4(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_20B82E654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B82E678(_QWORD *a1)
{
  *a1 = &off_24C466608;
  sub_20B811FE4((uint64_t)(a1 + 2));
  return a1;
}

void sub_20B82E6A8(_QWORD *a1)
{
  *a1 = &off_24C466608;
  sub_20B811FE4((uint64_t)(a1 + 2));
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B82E6E8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = a1 + 16;
  result = *(_QWORD *)(a1 + 16);
  if (!result)
  {
    sub_20B83B5E0(&v7);
    sub_20B82E770(v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_20B82E770(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *sub_20B82E7D4(_QWORD *a1)
{
  *a1 = &off_24C466668;
  sub_20B811FE4((uint64_t)(a1 + 1));
  return a1;
}

void sub_20B82E804(_QWORD *a1)
{
  *a1 = &off_24C466668;
  sub_20B811FE4((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B82E844(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = a1 + 8;
  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    sub_20B83B6C0(&v6);
    sub_20B82E770(v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sub_20B82E8C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (_QWORD *)sub_20B8614C4(v2, (uint64_t)a2);
  else
    return sub_20B80BBD0(a2, "");
}

double sub_20B82E8E0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24C466318;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_20B82E910(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24C466318;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_20B82E9E8(uint64_t a1)
{
  sub_20B82E910(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B82EA0C()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x24BDAC8D0];
  sub_20B82EB18(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](v2);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](v3);
  return 0;
}

void sub_20B82EAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B82EC24((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B82EB18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x20BD399C8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20B82EBEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD39C2C](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B82EC24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BD399D4](a1 + 2);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](a1 + 53);
  return a1;
}

uint64_t sub_20B82EC7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_20B82EA0C())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  sub_20B82EDB0(&v13);
  sub_20B82EE18(a2, a3, v13, a4);
  if (!*a4)
  {
    sub_20B853D84(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      v10 = sub_20B84EB74(v9);
      MEMORY[0x20BD39CB0](v10, 0x10A1C4047CE62CFLL);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v11 = sub_20B84EB74(result);
    return MEMORY[0x20BD39CB0](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_20B82ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20B83B7A0(&a9, 0);
  sub_20B83B7A0(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82EDB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_20B84EA0C(v2, 0);
  *a1 = v2;
  return result;
}

void sub_20B82EDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82EE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sub_20B853EE0(a4, 5, "model file path should not be empty.", 36);
  sub_20B851620(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*a4)
  {
    sub_20B853D84(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((sub_20B861194(a3, v6, v7) & 1) != 0)
      {
        sub_20B80627C(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      sub_20B827F10((uint64_t)v10);
      sub_20B828F84(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v10, (uint64_t)") [", 3);
      sub_20B828F84(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      sub_20B828F84(v10, (uint64_t)"] ", 2);
      sub_20B825AE4(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      sub_20B827F10((uint64_t)v10);
      sub_20B828F84(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v10, (uint64_t)") [", 3);
      sub_20B828F84(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      sub_20B828F84(v10, (uint64_t)"] ", 2);
      sub_20B825AE4(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20B82F0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B82F124(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v11);
  if (v11)
  {
    v10 = 1;
    v1 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = sub_20B828F84(v2, (uint64_t)") [", 3);
    v4 = sub_20B828F84(v3, (uint64_t)"_status.ok()", 12);
    v5 = sub_20B828F84(v4, (uint64_t)"] ", 2);
    sub_20B854098((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20B828F84(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20B827FFC(&v10);
  }
  return sub_20B853D84(&v11);
}

void sub_20B82F218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_20B827FFC((_BYTE *)(v15 - 25));
  sub_20B853D84((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20B82F250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_20B82EDB0(&v9);
  sub_20B84FC14(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    v5 = sub_20B84EB74(v4);
    MEMORY[0x20BD39CB0](v5, 0x10A1C4047CE62CFLL);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    v7 = sub_20B84EB74(result);
    return MEMORY[0x20BD39CB0](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_20B82F300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_20B83B7A0(&a9, 0);
  sub_20B83B7A0(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82F32C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_20B82EDB0(&v18);
  if ((sub_20B861194(v18, a2, a3) & 1) != 0)
  {
    v8 = v18;
    v18 = 0;
    v13 = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v13);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      v10 = sub_20B84EB74(v9);
      MEMORY[0x20BD39CB0](v10, 0x10A1C4047CE62CFLL);
    }
  }
  else
  {
    v14 = 13;
    sub_20B827F10((uint64_t)v15);
    sub_20B828F84(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v15, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v15, (uint64_t)") [", 3);
    sub_20B828F84(v15, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    sub_20B828F84(v15, (uint64_t)"] ", 2);
    sub_20B825AE4(&v14, a4);
    v15[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v15[1] = MEMORY[0x24BEDB848] + 16;
    if (v16 < 0)
      operator delete((void *)v15[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v17);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    v12 = sub_20B84EB74(result);
    return MEMORY[0x20BD39CB0](v12, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_20B82F4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B83B7A0((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_20B82F534(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  void *v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  _QWORD *v30;
  std::string *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  unint64_t v63;
  size_t v64;
  void *v65;
  _OWORD *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  std::string::size_type v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  std::string __p;
  std::string v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  std::string v102;
  char *v103;
  unint64_t *v104;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &unk_25472C640;
  if (v7[80])
  {
    if ((int)sub_20B8520F8() <= 0)
    {
      v102.__r_.__value_.__s.__data_[0] = 0;
      v8 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_20B828F84(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
      v11 = sub_20B828F84(v10, (uint64_t)"LOG(", 4);
      v12 = sub_20B828F84(v11, (uint64_t)"INFO", 4);
      v13 = sub_20B828F84(v12, (uint64_t)") ", 2);
      sub_20B828F84(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_20B827FFC(&v102);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = sub_20B84FE90((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = sub_20B84FF44((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = a1[4];
  a1[4] = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = a1[4];
  }
  sub_20B82E110(v20 - 16, &v102);
  v22 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v23 = a1[1];
  a1[1] = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v24)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v24 + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(void **)(v20 + 72);
  else
    v25 = &unk_25472C640;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(void **)(v20 + 64);
  else
    v26 = &unk_25472C4F8;
  sub_20B82FE5C((uint64_t)v25, (uint64_t)v26, (uint64_t *)&v102);
  v27 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v28 = a1[2];
  a1[2] = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v29)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(_QWORD **)(v20 + 88);
    if (!v30)
    {
      sub_20B855F68((uint64_t)&v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = sub_20B855F80(&v102, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_20B8560B0((uint64_t)&v99, (const char **)&v31->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)&v102);
      v30 = *(_QWORD **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = &unk_25472C640;
    v33 = v32[8] & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    sub_20B82FED8((uint64_t)v32, (uint64_t *)&v102);
    v34 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    v35 = a1[3];
    a1[3] = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = v102.__r_.__value_.__r.__words[0];
      v102.__r_.__value_.__r.__words[0] = 0;
      if (v36)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
    }
  }
LABEL_45:
  v37 = a1[2];
  v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  if (!*a3)
  {
    sub_20B853D84(a3);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&unk_25472C6C0;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t *))(*a1 + 136))(a1, v47, v46, &v96);
        if (*a3)
          break;
        sub_20B853D84(a3);
        memset(&v95, 0, sizeof(v95));
        v48 = v96;
        if (v96 == v97)
        {
          v52 = v96;
        }
        else
        {
          v49 = *(char *)(v96 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v96;
          else
            v50 = *(const std::string::value_type **)v96;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v96 + 23);
          else
            v51 = *(_QWORD *)(v96 + 8);
          std::string::append(&v95, v50, v51);
          v48 = v96;
          v52 = v97;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v95, " ", 1uLL);
            v55 = *(char *)(v96 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v96 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v96 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v96 + v53 + 47);
            else
              v57 = *(_QWORD *)(v96 + v53 + 32);
            std::string::append(&v95, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v95;
        else
          v61 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          size = v95.__r_.__value_.__l.__size_;
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 192))(a1[1], v60, v59, v61, size) & 1) == 0)
        {
          v63 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v63 + 23) < 0)
          {
            v65 = *(void **)v63;
            v64 = *(_QWORD *)(v63 + 8);
          }
          else
          {
            v64 = *(unsigned __int8 *)(v63 + 23);
            v65 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          sub_20B82FF4C(v65, v64, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v95.__r_.__value_.__l.__data_, &__p);
          v66 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v100[-v99] >> 3);
            v69 = v68 + 1;
            if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20B80CDD8();
            if (0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3) > v69)
              v69 = 0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - v99) >> 3) >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v69;
            v104 = &v101;
            if (v70)
              v71 = (char *)sub_20B828D70((uint64_t)&v101, v70);
            else
              v71 = 0;
            v72 = (std::string::size_type)&v71[24 * v68];
            v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
            v102.__r_.__value_.__l.__size_ = v72;
            v103 = &v71[24 * v70];
            v73 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v72 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v72 = v73;
            memset(&__p, 0, sizeof(__p));
            v102.__r_.__value_.__r.__words[2] = v72 + 24;
            sub_20B83BAB4(&v99, &v102);
            v74 = v100;
            sub_20B83BC3C((uint64_t)&v102);
            v100 = v74;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v67 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v100 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *v66 = v67;
            v100 = (char *)v66 + 24;
          }
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if ((char *)v99 == v100)
            goto LABEL_119;
          if ((int)sub_20B8520F8() <= 0)
          {
            v102.__r_.__value_.__s.__data_[0] = 0;
            v75 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
            sub_20B828F84(v75, (uint64_t)"(", 1);
            v76 = (_QWORD *)std::ostream::operator<<();
            v77 = sub_20B828F84(v76, (uint64_t)") ", 2);
            v78 = sub_20B828F84(v77, (uint64_t)"LOG(", 4);
            v79 = sub_20B828F84(v78, (uint64_t)"INFO", 4);
            sub_20B828F84(v79, (uint64_t)") ", 2);
            v80 = (_QWORD *)std::ostream::operator<<();
            sub_20B828F84(v80, (uint64_t)"/", 1);
            v81 = (_QWORD *)std::ostream::operator<<();
            sub_20B828F84(v81, (uint64_t)" samples did not pass the test.", 31);
            sub_20B827FFC(&v102);
          }
          v82 = v99;
          v83 = v100;
          if ((char *)v99 != v100)
          {
            v84 = (_QWORD *)MEMORY[0x24BEDB310];
            do
            {
              if ((int)sub_20B8520F8() <= 0)
              {
                v102.__r_.__value_.__s.__data_[0] = 0;
                v85 = sub_20B828F84(v84, (uint64_t)"sentencepiece_processor.cc", 26);
                sub_20B828F84(v85, (uint64_t)"(", 1);
                v86 = (_QWORD *)std::ostream::operator<<();
                v87 = sub_20B828F84(v86, (uint64_t)") ", 2);
                v88 = sub_20B828F84(v87, (uint64_t)"LOG(", 4);
                v89 = sub_20B828F84(v88, (uint64_t)"INFO", 4);
                v90 = sub_20B828F84(v89, (uint64_t)") ", 2);
                v91 = *(char *)(v82 + 23);
                if (v91 >= 0)
                  v92 = v82;
                else
                  v92 = *(_QWORD *)v82;
                if (v91 >= 0)
                  v93 = *(unsigned __int8 *)(v82 + 23);
                else
                  v93 = *(_QWORD *)(v82 + 8);
                sub_20B828F84(v90, v92, v93);
                sub_20B827FFC(&v102);
              }
              v82 += 24;
            }
            while ((char *)v82 != v83);
          }
          sub_20B853EE0(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sub_20B80627C(a3);
    }
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    sub_20B83AFD0((void ***)&v102);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    sub_20B83AFD0((void ***)&v102);
  }
}

void sub_20B82FDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20B8560B8((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82FE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_20B82C944(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_20B82FEB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B82FED8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_20B82C9FC(v4, a1);
  *a2 = v4;
  return result;
}

void sub_20B82FF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_20B82FF4C(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_20B82E068(&__dst, __src, __len);
  v12 = strlen(a3);
  sub_20B83B7DC(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B830020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20B830054(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_20B83005C((uint64_t *)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sub_20B83005C(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x24BDAC8D0];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_20B853D84(a5);
      v10 = atomic_load((unsigned __int8 *)&qword_25472AE40);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25472AE40))
      {
        v43 = xmmword_24C4979C8;
        *(_OWORD *)__p = unk_24C4979D8;
        v45 = xmmword_24C4979E8;
        v46 = 3;
        v39 = xmmword_24C497988;
        v40 = unk_24C497998;
        v41 = xmmword_24C4979A8;
        v42 = *(_OWORD *)&off_24C4979B8;
        sub_20B83D994((uint64_t)&unk_25472AE28, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))sub_20B83839C, &unk_25472AE28, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472AE40);
      }
      sub_20B83AC68((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sub_20B80627C(a5);
      }
      else
      {
        while (1)
        {
          v13 = sub_20B83BF60((uint64_t)&unk_25472AE28, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_25472AE30)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              sub_20B80CDD8();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)sub_20B8127BC((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sub_20B825DAC(a1[1]);
            v28 = strlen(v27);
            v29 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v27, v28);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_20B827F10((uint64_t)&v39 + 8);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sub_20B825DAC(a1[1]);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sub_20B825AE4((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sub_20B825DFC(a1[1]);
            v31 = strlen(v30);
            v32 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v30, v31);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_20B827F10((uint64_t)&v39 + 8);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sub_20B825DFC(a1[1]);
              sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sub_20B825AE4((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
              *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        sub_20B827F10((uint64_t)&v39 + 8);
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        sub_20B828F84((_QWORD *)&v39 + 1, *v11, v11[1]);
        sub_20B828F84((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sub_20B825AE4((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x20BD39C2C](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sub_20B80627C(a5);
  }
}

void sub_20B830700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_guard_abort(&qword_25472AE40);
  _Unwind_Resume(a1);
}

void sub_20B83077C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_20B83005C((uint64_t *)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sub_20B830784@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_20B853D84(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        if (!*a2)
        {
          v6 = sub_20B853D84(a2);
          return sub_20B80627C(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)sub_20B827F10((uint64_t)v10);
    sub_20B828F84(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v10, (uint64_t)") [", 3);
    sub_20B828F84(v10, (uint64_t)"normalizer_", 11);
    sub_20B828F84(v10, (uint64_t)"] ", 2);
    sub_20B828F84(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_20B825AE4(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_20B827F10((uint64_t)v10);
    sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v10, (uint64_t)") [", 3);
    sub_20B828F84(v10, (uint64_t)"model_", 6);
    sub_20B828F84(v10, (uint64_t)"] ", 2);
    sub_20B828F84(v10, (uint64_t)"Model is not initialized.", 25);
    sub_20B825AE4(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x20BD39C2C](&v12);
}

void sub_20B8309DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B8309FC(_QWORD *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a3);
  if (*a3)
    return;
  sub_20B853D84(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_24C465CD8)
  {
    v21 = 13;
    v7 = (_QWORD *)sub_20B827F10((uint64_t)v22);
    sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v22, (uint64_t)") [", 3);
    sub_20B828F84(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_20B828F84(v22, (uint64_t)"] ", 2);
    sub_20B828F84(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_20B825AE4(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x24BEDB800];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x24BEDB800] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x24BEDB848] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v24);
    return;
  }
  v8 = &unk_25472C4F8;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)sub_20B827F10((uint64_t)v22);
    sub_20B828F84(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v22, (uint64_t)") [", 3);
    sub_20B828F84(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_20B828F84(v22, (uint64_t)"] ", 2);
    sub_20B828F84(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_20B825AE4(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  sub_20B83BCC4((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = sub_20B83AB8C(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == sub_20B83BF60((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_20BA68FCC[(unint64_t)*v17 >> 4]))
        {
          if (!sub_20B8487DC(5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sub_20B8487DC(1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sub_20B80627C(a3);
  sub_20B8292CC((uint64_t)&v21, v22[0]);
}

void sub_20B830D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20B8292CC((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B830DDC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*a1 + 88))(a2);
  if (!*a2)
  {
    sub_20B853D84(a2);
    v5 = a1[4];
    if (v5 && *(_UNKNOWN **)v5 == &unk_24C465CD8)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_20B8487DC(1))
              sub_20B83E050();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_20B80627C(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)sub_20B827F10((uint64_t)v13);
      sub_20B828F84(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v13, (uint64_t)") [", 3);
      sub_20B828F84(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_20B828F84(v13, (uint64_t)"] ", 2);
      sub_20B828F84(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_20B825AE4(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v13[1] = MEMORY[0x24BEDB848] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v15);
    }
  }
  return result;
}

void sub_20B830FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B830FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37[4];

  sub_20B851620(a2, a3, 0, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  if (!*a5)
  {
    sub_20B853D84(a5);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v36 + 24))(v36, &v33))
    {
      if (v35 >= 0)
        v8 = (void **)&v33;
      else
        v8 = v33;
      if (v35 >= 0)
        v9 = HIBYTE(v35);
      else
        v9 = v34;
      sub_20B83AC68((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      sub_20B83AF30(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      v10 = v29;
      if (v29 == v28)
      {
        v14 = v29;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v10 = v28;
        do
        {
          MEMORY[0x20BD39944]((char *)v10 + v11, *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          v10 = v28;
          v14 = v29;
          v11 += 24;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        v10 = v28;
        v14 = v29;
      }
      v15 = (char *)v14 - (char *)v10;
      if (!v15)
      {
        LODWORD(__p) = 13;
        sub_20B827F10((uint64_t)v25);
        sub_20B828F84(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(v25, (uint64_t)") [", 3);
        sub_20B828F84(v25, (uint64_t)"(v.size()) >= (1)", 17);
        sub_20B828F84(v25, (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v25[1] = MEMORY[0x24BEDB848] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x20BD39C2C](&v27);
        __p = &v28;
        sub_20B83AFD0((void ***)&__p);
        goto LABEL_45;
      }
      if (*((char *)v10 + 23) < 0)
      {
        if (!*((_QWORD *)v10 + 1))
        {
LABEL_40:
          LODWORD(__p) = 13;
          sub_20B827F10((uint64_t)v25);
          sub_20B828F84(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_20B828F84(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_20B828F84(v25, (uint64_t)") [", 3);
          sub_20B828F84(v25, (uint64_t)"!v[0].empty()", 13);
          sub_20B828F84(v25, (uint64_t)"] ", 2);
          sub_20B825AE4((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)v10 + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v37[0] = 1;
      if (v16 >= 2)
      {
        if (*((char *)v10 + 47) < 0)
        {
          v18 = (const char *)*((_QWORD *)v10 + 3);
          v19 = *((_QWORD *)v10 + 4);
        }
        else
        {
          v18 = (char *)v10 + 24;
          v19 = *((unsigned __int8 *)v10 + 47);
        }
        if (!sub_20B8315CC(v18, v19, (uint64_t)v37))
        {
          LODWORD(__p) = 13;
          sub_20B827F10((uint64_t)v25);
          sub_20B828F84(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_20B828F84(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_20B828F84(v25, (uint64_t)") [", 3);
          sub_20B828F84(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          sub_20B828F84(v25, (uint64_t)"] ", 2);
          sub_20B828F84(v25, (uint64_t)"Could not parse the frequency", 29);
          sub_20B825AE4((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v37[0];
      }
      if (v17 >= a4)
      {
        v20 = v31;
        if ((unint64_t)v31 >= v32)
        {
          v22 = (__int128 *)sub_20B83C1FC(&v30, v28);
        }
        else
        {
          if (*((char *)v28 + 23) < 0)
          {
            sub_20B80ACE0(v31, *(void **)v28, *((_QWORD *)v28 + 1));
          }
          else
          {
            v21 = *v28;
            *((_QWORD *)v31 + 2) = *((_QWORD *)v28 + 2);
            *v20 = v21;
          }
          v22 = (__int128 *)((char *)v20 + 24);
        }
        v31 = v22;
      }
      __p = &v28;
      sub_20B83AFD0((void ***)&__p);
    }
    sub_20B8316F0(&v30, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v30;
    sub_20B83AFD0((void ***)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
  }
  result = v36;
  v36 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20B8314F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  sub_20B83AFD0((void ***)&__p);
  __p = (void *)(v10 - 152);
  sub_20B83AFD0((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL sub_20B8315CC(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  sub_20B83BFEC((uint64_t)v11);
  v5 = strlen(a1);
  v6 = sub_20B828F84(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x20BD39A40](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v14);
  return v7;
}

void sub_20B8316DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83C118((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8316F0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = sub_20B83B05C(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

_QWORD *sub_20B831790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint64_t v22;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_20B853D84(a5);
    if (a4)
    {
      sub_20B83B010(a4);
      sub_20B846734(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_20B853D84(a5);
        if (v19)
          v11 = v19 + 8;
        else
          v11 = 0;
        if (v18)
        {
          v12 = a4[1];
          v13 = 8 * v18;
          do
          {
            v14 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              v12 = sub_20B83C1FC(a4, v14);
            }
            else
            {
              sub_20B83C1A0(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_20B80627C(a5);
      }
      return (_QWORD *)sub_20B846854(&v16);
    }
    else
    {
      v16 = 13;
      v15 = (_QWORD *)sub_20B827F10((uint64_t)v17);
      sub_20B828F84(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v17, (uint64_t)") [", 3);
      sub_20B828F84(v17, (uint64_t)"pieces", 6);
      sub_20B828F84(v17, (uint64_t)"] ", 2);
      sub_20B828F84(v17, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v17[1] = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v22);
    }
  }
  return result;
}

void sub_20B8319BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8319E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD v27[6];
  int v28;
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_20B853D84(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_20B846734(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_20B853D84(a5);
        if (v29)
          v11 = v29 + 8;
        else
          v11 = 0;
        if (v28)
        {
          v12 = a4 + 2;
          v13 = a4[1];
          v14 = v11 + 8 * v28;
          do
          {
            v15 = *(_DWORD *)(*(_QWORD *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              v17 = *a4;
              v18 = (v13 - *a4) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                sub_20B80CDD8();
              v20 = *v12 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)sub_20B8127BC((uint64_t)(a4 + 2), v21);
                v17 = *a4;
                v13 = a4[1];
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[4 * v18];
              *(_DWORD *)v23 = v15;
              v16 = v23 + 4;
              while (v13 != v17)
              {
                v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_DWORD *)v13 = v15;
              v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            v13 = v16;
          }
          while (v11 != v14);
        }
        sub_20B80627C(a5);
      }
      return (_QWORD *)sub_20B846854(&v26);
    }
    else
    {
      v26 = 13;
      v25 = (_QWORD *)sub_20B827F10((uint64_t)v27);
      sub_20B828F84(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v27, (uint64_t)") [", 3);
      sub_20B828F84(v27, (uint64_t)"ids", 3);
      sub_20B828F84(v27, (uint64_t)"] ", 2);
      sub_20B828F84(v27, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v27[1] = MEMORY[0x24BEDB848] + 16;
      if (v31 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v32);
    }
  }
  return result;
}

void sub_20B831CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B831CDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_20B8316F0(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20B831D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B831D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_20B853D84(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_20B846734(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_20B853D84(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_20B80627C(a4);
      }
      return (_QWORD *)sub_20B846854(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_20B827F10((uint64_t)v11);
      sub_20B828F84(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v11, (uint64_t)") [", 3);
      sub_20B828F84(v11, (uint64_t)"detokenized", 11);
      sub_20B828F84(v11, (uint64_t)"] ", 2);
      sub_20B828F84(v11, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v11[1] = MEMORY[0x24BEDB848] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v13);
    }
  }
  return result;
}

void sub_20B831F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B831F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_20B853D84(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_20B846734(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_20B853D84(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_20B80627C(a4);
      }
      return (_QWORD *)sub_20B846854(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_20B827F10((uint64_t)v11);
      sub_20B828F84(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v11, (uint64_t)") [", 3);
      sub_20B828F84(v11, (uint64_t)"detokenized", 11);
      sub_20B828F84(v11, (uint64_t)"] ", 2);
      sub_20B828F84(v11, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v11[1] = MEMORY[0x24BEDB848] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v13);
    }
  }
  return result;
}

void sub_20B83215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B832184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t v13;
  void **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  _QWORD v32[2];
  int v33;
  uint64_t v34;
  void *__p;
  char v36;
  uint64_t v37;
  __int128 **v38;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_20B853D84(a6);
    if (a5)
    {
      v13 = *a5;
      v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        v31 = v14;
        sub_20B83AFD0(&v31);
      }
      a5[1] = v13;
      sub_20B84721C(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_20B853D84(a6);
        if (v34)
          v15 = (uint64_t *)(v34 + 8);
        else
          v15 = 0;
        if (v33)
        {
          v16 = &v15[v33];
          do
          {
            v17 = *v15;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v18 = *(_QWORD *)(v17 + 64);
            if (v18)
              v19 = v18 + 8;
            else
              v19 = 0;
            v20 = *(int *)(v17 + 56);
            if ((_DWORD)v20)
            {
              v21 = 0;
              v22 = 8 * v20;
              do
              {
                v23 = *(_QWORD *)(*(_QWORD *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  v21 = sub_20B83C1FC((uint64_t *)&v28, (__int128 *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_20B80ACE0((_BYTE *)v21, *(void **)v23, *(_QWORD *)(v23 + 8));
                  }
                  else
                  {
                    v24 = *(_OWORD *)v23;
                    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v23 + 16);
                    *(_OWORD *)v21 = v24;
                  }
                  v21 += 24;
                }
                v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            v25 = a5[1];
            if (v25 >= a5[2])
            {
              v26 = sub_20B83C378(a5, &v28);
            }
            else
            {
              sub_20B83C31C((uint64_t)a5, &v28);
              v26 = v25 + 24;
            }
            a5[1] = v26;
            v38 = &v28;
            sub_20B83AFD0((void ***)&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_20B80627C(a6);
      }
      return (_QWORD *)sub_20B8472D4(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      v27 = (_QWORD *)sub_20B827F10((uint64_t)v32);
      sub_20B828F84(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v32, (uint64_t)") [", 3);
      sub_20B828F84(v32, (uint64_t)"pieces", 6);
      sub_20B828F84(v32, (uint64_t)"] ", 2);
      sub_20B828F84(v32, (uint64_t)"output container is null", 24);
      sub_20B825AE4((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v32[1] = MEMORY[0x24BEDB848] + 16;
      if (v36 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v37);
    }
  }
  return result;
}

void sub_20B83247C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B825B70((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8324CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  void *__p;
  char *v35;
  char *v36;
  unsigned int v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_20B853D84(a6);
    if (a5)
    {
      sub_20B83B440(a5);
      sub_20B84721C(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_20B853D84(a6);
        if (v40)
          v13 = (uint64_t *)(v40 + 8);
        else
          v13 = 0;
        if (v39)
        {
          v33 = &v13[v39];
          do
          {
            v14 = *v13;
            __p = 0;
            v35 = 0;
            v36 = 0;
            v15 = *(_QWORD *)(v14 + 64);
            if (v15)
              v16 = v15 + 8;
            else
              v16 = 0;
            v17 = *(int *)(v14 + 56);
            if ((_DWORD)v17)
            {
              v18 = 0;
              v19 = v16 + 8 * v17;
              do
              {
                v20 = *(_DWORD *)(*(_QWORD *)v16 + 64);
                if (v18 >= v36)
                {
                  v22 = (char *)__p;
                  v23 = (v18 - (_BYTE *)__p) >> 2;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62)
                    sub_20B80CDD8();
                  v25 = v36 - (_BYTE *)__p;
                  if ((v36 - (_BYTE *)__p) >> 1 > v24)
                    v24 = v25 >> 1;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                    v26 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v26 = v24;
                  if (v26)
                  {
                    v27 = (char *)sub_20B8127BC((uint64_t)&v36, v26);
                    v22 = (char *)__p;
                    v18 = v35;
                  }
                  else
                  {
                    v27 = 0;
                  }
                  v28 = &v27[4 * v23];
                  *(_DWORD *)v28 = v20;
                  v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  __p = v28;
                  v35 = v21;
                  v36 = &v27[4 * v26];
                  if (v22)
                    operator delete(v22);
                }
                else
                {
                  *(_DWORD *)v18 = v20;
                  v21 = v18 + 4;
                }
                v35 = v21;
                v16 += 8;
                v18 = v21;
              }
              while (v16 != v19);
            }
            v30 = a5[1];
            if (v30 >= a5[2])
            {
              v31 = sub_20B83C8B0(a5, (uint64_t)&__p);
            }
            else
            {
              sub_20B83C860((uint64_t)a5, (uint64_t)&__p);
              v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_20B80627C(a6);
      }
      return (_QWORD *)sub_20B8472D4(&v37);
    }
    else
    {
      v37 = 13;
      v32 = (_QWORD *)sub_20B827F10((uint64_t)v38);
      sub_20B828F84(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v38, (uint64_t)") [", 3);
      sub_20B828F84(v38, (uint64_t)"ids", 3);
      sub_20B828F84(v38, (uint64_t)"] ", 2);
      sub_20B828F84(v38, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v38[1] = MEMORY[0x24BEDB848] + 16;
      if (v42 < 0)
        operator delete(v41);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v43);
    }
  }
  return result;
}

void sub_20B832818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sub_20B825B70((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B832860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD v21[6];
  int v22;
  uint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_20B853D84(a6);
    if (a5)
    {
      sub_20B83B010(a5);
      sub_20B846734(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_20B853D84(a6);
        if (v23)
          v15 = v23 + 8;
        else
          v15 = 0;
        if (v22)
        {
          v16 = a5[1];
          v17 = 8 * v22;
          do
          {
            v18 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              v16 = sub_20B83C1FC(a5, v18);
            }
            else
            {
              sub_20B83C1A0(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_20B80627C(a6);
      }
      return (_QWORD *)sub_20B846854(&v20);
    }
    else
    {
      v20 = 13;
      v19 = (_QWORD *)sub_20B827F10((uint64_t)v21);
      sub_20B828F84(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v21, (uint64_t)") [", 3);
      sub_20B828F84(v21, (uint64_t)"pieces", 6);
      sub_20B828F84(v21, (uint64_t)"] ", 2);
      sub_20B828F84(v21, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v21[1] = MEMORY[0x24BEDB848] + 16;
      if (v25 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v26);
    }
  }
  return result;
}

void sub_20B832AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B832AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD v31[6];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_20B853D84(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_20B846734(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_20B853D84(a6);
        if (v33)
          v15 = v33 + 8;
        else
          v15 = 0;
        if (v32)
        {
          v16 = a5 + 2;
          v17 = a5[1];
          v18 = v15 + 8 * v32;
          do
          {
            v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              v21 = *a5;
              v22 = (v17 - *a5) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                sub_20B80CDD8();
              v24 = *v16 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)sub_20B8127BC((uint64_t)(a5 + 2), v25);
                v21 = *a5;
                v17 = a5[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[4 * v22];
              *(_DWORD *)v27 = v19;
              v20 = v27 + 4;
              while (v17 != v21)
              {
                v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_DWORD *)v17 = v19;
              v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            v17 = v20;
          }
          while (v15 != v18);
        }
        sub_20B80627C(a6);
      }
      return (_QWORD *)sub_20B846854(&v30);
    }
    else
    {
      v30 = 13;
      v29 = (_QWORD *)sub_20B827F10((uint64_t)v31);
      sub_20B828F84(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v31, (uint64_t)") [", 3);
      sub_20B828F84(v31, (uint64_t)"ids", 3);
      sub_20B828F84(v31, (uint64_t)"] ", 2);
      sub_20B828F84(v31, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v31[1] = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v36);
    }
  }
  return result;
}

void sub_20B832DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B832DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t v19;
  void **v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 *v36;
  void *__dst;
  unint64_t v38;
  void **v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  void *__p;
  char v44;
  uint64_t v45;
  void **v46[2];

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_20B853D84(a8);
    if (a7)
    {
      v19 = *a7;
      v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        v39 = v20;
        sub_20B83AFD0(&v39);
      }
      a7[1] = v19;
      sub_20B84721C(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_20B853D84(a8);
        v21 = (__int128 *)*a7;
        v22 = (__int128 *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          v36 = v22;
          sub_20B83AFD0((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_20B83319C(a7, v41);
        if (v42)
          v24 = (uint64_t *)(v42 + 8);
        else
          v24 = 0;
        if (v41)
        {
          v25 = &v24[v41];
          do
          {
            v26 = *v24;
            v36 = 0;
            __dst = 0;
            v38 = 0;
            sub_20B83322C((uint64_t *)&v36, *(int *)(v26 + 56));
            v27 = *(_QWORD *)(v26 + 64);
            if (v27)
              v28 = v27 + 8;
            else
              v28 = 0;
            v29 = *(int *)(v26 + 56);
            if ((_DWORD)v29)
            {
              v30 = (unint64_t)__dst;
              v31 = 8 * v29;
              do
              {
                v32 = *(_QWORD *)(*(_QWORD *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  v30 = sub_20B83C1FC((uint64_t *)&v36, (__int128 *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_20B80ACE0((_BYTE *)v30, *(void **)v32, *(_QWORD *)(v32 + 8));
                  }
                  else
                  {
                    v33 = *(_OWORD *)v32;
                    *(_QWORD *)(v30 + 16) = *(_QWORD *)(v32 + 16);
                    *(_OWORD *)v30 = v33;
                  }
                  v30 += 24;
                }
                __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            v34 = a7[1];
            if (v34 >= a7[2])
            {
              v35 = sub_20B83CEDC(a7, &v36, v46);
            }
            else
            {
              sub_20B83CE6C((uint64_t)a7, &v36, (float *)v46);
              v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_20B83AFD0(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_20B80627C(a8);
      }
      return (_QWORD *)sub_20B8472D4(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      v23 = (_QWORD *)sub_20B827F10((uint64_t)v40);
      sub_20B828F84(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v40, (uint64_t)") [", 3);
      sub_20B828F84(v40, (uint64_t)"pieces", 6);
      sub_20B828F84(v40, (uint64_t)"] ", 2);
      sub_20B828F84(v40, (uint64_t)"output container is null", 24);
      sub_20B825AE4((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v40 + *(_QWORD *)(v40[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v40[1] = MEMORY[0x24BEDB848] + 16;
      if (v44 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v45);
    }
  }
  return result;
}

void sub_20B833148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B825B70((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20B83319C(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20B80CDD8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B8156D4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_20B83CC54(a1, v7);
    return sub_20B83CDEC(v7);
  }
  return result;
}

void sub_20B833218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CDEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83322C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20B80CDD8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B828D70(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_20B83BAB4(a1, v7);
    return sub_20B83BC3C((uint64_t)v7);
  }
  return result;
}

void sub_20B8332C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8332DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  void *__p;
  char *v43;
  char *v44;
  unsigned int v45;
  _QWORD v46[2];
  int v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_20B853D84(a8);
    if (a7)
    {
      sub_20B828E74(a7);
      sub_20B84721C(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        v39 = a8;
        sub_20B853D84(a8);
        sub_20B828E74(a7);
        sub_20B8336CC(a7, v47);
        if (v48)
          v19 = (uint64_t *)(v48 + 8);
        else
          v19 = 0;
        if (v47)
        {
          v40 = &v19[v47];
          do
          {
            v20 = *v19;
            __p = 0;
            v43 = 0;
            v44 = 0;
            sub_20B820518(&__p, *(int *)(v20 + 56));
            v21 = *(_QWORD *)(v20 + 64);
            if (v21)
              v22 = v21 + 8;
            else
              v22 = 0;
            v23 = *(int *)(v20 + 56);
            if ((_DWORD)v23)
            {
              v24 = v22 + 8 * v23;
              v25 = v43;
              do
              {
                v26 = *(_DWORD *)(*(_QWORD *)v22 + 64);
                if (v25 >= v44)
                {
                  v28 = (char *)__p;
                  v29 = (v25 - (_BYTE *)__p) >> 2;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    sub_20B80CDD8();
                  v31 = v44 - (_BYTE *)__p;
                  if ((v44 - (_BYTE *)__p) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)sub_20B8127BC((uint64_t)&v44, v32);
                    v28 = (char *)__p;
                    v25 = v43;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = &v33[4 * v29];
                  *(_DWORD *)v34 = v26;
                  v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  __p = v34;
                  v43 = v27;
                  v44 = &v33[4 * v32];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_DWORD *)v25 = v26;
                  v27 = v25 + 4;
                }
                v43 = v27;
                v22 += 8;
                v25 = v27;
              }
              while (v22 != v24);
            }
            v41 = *(_DWORD *)(v20 + 80);
            v36 = a7[1];
            if (v36 >= a7[2])
            {
              v37 = sub_20B83D26C(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_20B83D208((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_20B80627C(v39);
      }
      return (_QWORD *)sub_20B8472D4(&v45);
    }
    else
    {
      v45 = 13;
      v38 = (_QWORD *)sub_20B827F10((uint64_t)v46);
      sub_20B828F84(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v46, (uint64_t)") [", 3);
      sub_20B828F84(v46, (uint64_t)"ids", 3);
      sub_20B828F84(v46, (uint64_t)"] ", 2);
      sub_20B828F84(v46, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v46[1] = MEMORY[0x24BEDB848] + 16;
      if (v50 < 0)
        operator delete(v49);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v51);
    }
  }
  return result;
}

void sub_20B833680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B825B70((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8336CC(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20B80CDD8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B8156D4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_20B83CFE8(a1, v7);
    return sub_20B83D17C((uint64_t)v7);
  }
  return result;
}

void sub_20B833748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B83375C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *result;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = a7 + 48;
    while (1)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
        sub_20B828F84(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&__p[1], (uint64_t)") [", 3);
        sub_20B828F84(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
        sub_20B828F84(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *(unsigned __int8 **)v10;
      v16 = *(unsigned int *)(v10 + 16);
      v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_20B82E068(__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = (_QWORD *)*v54;
            sub_20B854EA0((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = sub_20B847980(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        sub_20B86768C(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
        sub_20B828F84(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&__p[1], (uint64_t)") [", 3);
        sub_20B828F84(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
        sub_20B828F84(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&__p[1], (uint64_t)") [", 3);
        sub_20B828F84(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
        sub_20B828F84(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&__p[1], (uint64_t)") [", 3);
        sub_20B828F84(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
        sub_20B828F84(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&__p[1], (uint64_t)") [", 3);
        sub_20B828F84(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
        sub_20B828F84(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&__p[1], (uint64_t)") [", 3);
        sub_20B828F84(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_20B86768C(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = sub_20B847980(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sub_20B827718(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_20B82E068(__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = (_QWORD *)*v44;
            sub_20B854EA0((uint64_t *)(v35 + 48), (__int128 *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              sub_20B82E068(__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = (_QWORD *)*v47;
              sub_20B854EA0((uint64_t *)(v35 + 56), (__int128 *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = sub_20B83B504(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = (_QWORD *)*v79;
          sub_20B854EA0(v104, (__int128 *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            sub_20B80AD6C();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = (_QWORD *)*v92;
          sub_20B854EA0((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_20B86768C(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = sub_20B847980(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_20B82E068(__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = (_QWORD *)*v66;
      sub_20B854EA0((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      sub_20B82E068(__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = (_QWORD *)*v69;
      sub_20B854EA0((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 24;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sub_20B8344D4(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_20B853D84(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_20B82E068(__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (_QWORD *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = (_QWORD *)*v95;
      sub_20B854EA0((uint64_t *)(a7 + 72), (__int128 *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sub_20B80627C(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)sub_20B827F10((uint64_t)&__p[1]);
  sub_20B828F84(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_20B828F84(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_20B828F84(&__p[1], (uint64_t)") [", 3);
  sub_20B828F84(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_20B828F84(&__p[1], (uint64_t)"] ", 2);
  sub_20B828F84(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_20B825AE4((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x24BEDB800];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v117 = MEMORY[0x24BEDB848] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x20BD39C2C](&v120);
}

void sub_20B834428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8344D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sub_20B83D950(*(_QWORD *)(v15 - 8), v16);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_20B86768C(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = sub_20B847980(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_20B855F68((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = sub_20B855F80(__p, "CHECK failed: (index) < (current_size_): ");
            sub_20B8560B0((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)__p);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sub_20B825DAC(a1[1]);
          v41 = strlen(v40);
          v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sub_20B825DAC(a1[1]);
          sub_20B825DAC(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_20B82E068(__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = (_QWORD *)*v46;
          sub_20B854EA0((uint64_t *)(v39 + 48), (__int128 *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_20B86768C(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = sub_20B847980(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sub_20B825DFC(a1[1]);
          v50 = strlen(v49);
          v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sub_20B825DFC(a1[1]);
          sub_20B825DFC(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_20B82E068(__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = (_QWORD *)*v55;
          sub_20B854EA0((uint64_t *)(v25 + 48), (__int128 *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sub_20B80627C(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = sub_20B83B504(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sub_20B825D5C(a1[1]);
                sub_20B825D5C(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_20B82E068(__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = (_QWORD *)*v31;
                sub_20B854EA0((uint64_t *)(v27 + 48), (__int128 *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sub_20B853EE0(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_20B80627C(a4);
}

void sub_20B83491C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_20B8560B8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_20B834954(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (!*a5)
  {
    sub_20B853D84(a5);
    if (a4)
    {
      sub_20B8468B4(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_20B853D84(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sub_20B83375C(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          v11 = sub_20B853D84(a5);
          sub_20B80627C(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)sub_20B827F10((uint64_t)&v18);
      sub_20B828F84(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(&v18, (uint64_t)") [", 3);
      sub_20B828F84(&v18, (uint64_t)"spt", 3);
      sub_20B828F84(&v18, (uint64_t)"] ", 2);
      sub_20B828F84(&v18, (uint64_t)"output proto is null", 20);
      sub_20B825AE4((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v19 = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD39C2C](&v22);
    }
  }
}

void sub_20B834BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20B834C28(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (*a5)
    return;
  sub_20B853D84(a5);
  if (a4)
  {
    sub_20B8472FC(a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_20B853D84(a5);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_20B86768C(a4 + 16, v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_20B847A34(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sub_20B83375C(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5)
              goto LABEL_29;
            sub_20B853D84(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_20B80627C(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_20B827F10((uint64_t)&v30);
        sub_20B828F84(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&v30, (uint64_t)") [", 3);
        sub_20B828F84(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_20B828F84(&v30, (uint64_t)"] ", 2);
        sub_20B828F84(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_20B825AE4((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x20BD39C2C](v34);
LABEL_29:
        v29 = (void **)&v21;
        sub_20B828E34(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_20B827F10((uint64_t)&v30);
        sub_20B828F84(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(&v30, (uint64_t)") [", 3);
        sub_20B828F84(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_20B828F84(&v30, (uint64_t)"] ", 2);
        sub_20B828F84(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_20B825AE4((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x20BD39C2C](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)sub_20B827F10((uint64_t)&v30);
    sub_20B828F84(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(&v30, (uint64_t)") [", 3);
    sub_20B828F84(&v30, (uint64_t)"nbest_spt", 9);
    sub_20B828F84(&v30, (uint64_t)"] ", 2);
    sub_20B828F84(&v30, (uint64_t)"output proto is null", 20);
    sub_20B825AE4((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v31 = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](v34);
  }
}

void sub_20B835198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_20B828E34((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20B835228(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29[3];
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  float *v39[11];
  char v40;
  uint64_t v41;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a6);
  if (*a6)
    return;
  sub_20B853D84(a6);
  if (a5)
  {
    sub_20B8468B4(a5);
    if (a4 < 513)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      __p = 0;
      v33 = 0;
      v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0)
          operator delete(v35);
        return;
      }
      sub_20B853D84(a6);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_20B827F10((uint64_t)v39);
            sub_20B828F84(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_20B828F84(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_20B828F84(v39, (uint64_t)") [", 3);
            sub_20B828F84(v39, (uint64_t)"!nbests.empty()", 15);
            sub_20B828F84(v39, (uint64_t)"] ", 2);
            sub_20B828F84(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_20B825AE4((unsigned int *)&v38, (uint64_t)a6);
            sub_20B825B70((uint64_t)&v38);
            v38 = &v30;
            sub_20B828E34((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_20B814634(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1)
              v20 = 1;
            else
              v20 = (v31 - v30) >> 5;
            v21 = (float *)(v30 + 24);
            do
            {
              v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          v23 = sub_20B852250();
          sub_20B83D36C((uint64_t)v29, (float *)v38, v39[0]);
          v24 = HIBYTE(v37);
          v25 = v36;
          v26 = sub_20B83D658((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0)
            v27 = v24;
          else
            v27 = v25;
          sub_20B83375C(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          v28 = *a6;
          if (!*a6)
            sub_20B853D84(a6);
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          v38 = &v30;
          sub_20B828E34((void ***)&v38);
          if (v28)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v38);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_20B827F10((uint64_t)v39);
          sub_20B828F84(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_20B828F84(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_20B828F84(v39, (uint64_t)") [", 3);
          sub_20B828F84(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_20B828F84(v39, (uint64_t)"] ", 2);
          sub_20B828F84(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_20B825AE4((unsigned int *)&v38, (uint64_t)a6);
          sub_20B825B70((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      sub_20B83375C(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_20B853D84(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_20B80627C(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    v15 = (_QWORD *)sub_20B827F10((uint64_t)v39);
    sub_20B828F84(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v39, (uint64_t)") [", 3);
    sub_20B828F84(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_20B828F84(v39, (uint64_t)"] ", 2);
    sub_20B828F84(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_20B825AE4((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    v14 = (_QWORD *)sub_20B827F10((uint64_t)v39);
    sub_20B828F84(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v39, (uint64_t)") [", 3);
    sub_20B828F84(v39, (uint64_t)"spt", 3);
    sub_20B828F84(v39, (uint64_t)"] ", 2);
    sub_20B828F84(v39, (uint64_t)"output proto is null", 20);
    sub_20B825AE4((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x24BEDB800];
  *(float **)((char *)v39 + *((_QWORD *)v39[0] - 3)) = *(float **)(MEMORY[0x24BEDB800] + 24);
  v39[1] = (float *)(MEMORY[0x24BEDB848] + 16);
  if (v40 < 0)
    operator delete(v39[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](&v41);
}

void sub_20B8358E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_20B828E34((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_20B8359D0(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_20B853D84(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_20B86768C(a4 + 16, v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = sub_20B847A34(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sub_20B83375C((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5)
            goto LABEL_23;
          sub_20B853D84(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_20B80627C(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_20B827F10((uint64_t)&v32);
      sub_20B828F84(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(&v32, (uint64_t)") [", 3);
      sub_20B828F84(&v32, (uint64_t)"!results.empty()", 16);
      sub_20B828F84(&v32, (uint64_t)"] ", 2);
      sub_20B828F84(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_20B825AE4((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v33 = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD39C2C](v36);
LABEL_23:
      v31 = (void **)&v23;
      sub_20B828E34(&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)sub_20B827F10((uint64_t)&v32);
    sub_20B828F84(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(&v32, (uint64_t)") [", 3);
    sub_20B828F84(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_20B828F84(&v32, (uint64_t)"] ", 2);
    sub_20B828F84(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_20B825AE4((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v33 = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](v36);
  }
}

void sub_20B835E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_20B828E34((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20B835E98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_20B853D84(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sub_20B80627C(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)sub_20B827F10((uint64_t)&v19);
    sub_20B828F84(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(&v19, (uint64_t)") [", 3);
    sub_20B828F84(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_20B828F84(&v19, (uint64_t)"] ", 2);
    sub_20B828F84(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_20B825AE4((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v20 = MEMORY[0x24BEDB848] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v23);
  }
}

void sub_20B8360A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_20B8360E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_20B8316F0(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20B836154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B836170(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a4);
  if (*a4)
    return;
  sub_20B853D84(a4);
  if (v4)
  {
    sub_20B8468B4(v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
      v9 = (char *)&unk_20BA362ED;
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_20B86768C(v68 + 48, v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = sub_20B847980(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = (_QWORD *)*v22;
        v23 = sub_20B854EC4((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x20BD39944](v23, v12, v13);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_20B8344D4(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4)
      return;
    sub_20B853D84(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = (_QWORD *)*v26;
    v60[1] = &v61;
    v61 = sub_20B854EC4((uint64_t *)(v4 + 72), (uint64_t)v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = sub_20B83A950(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64)))
          break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sub_20B8368F8((uint64_t)v59, v29, v30, a4);
      if (*a4)
        goto LABEL_95;
      sub_20B853D84(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_20B80BBD0(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sub_20B836E00(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              *v52 = &unk_20BA36382;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              sub_20B83B0D0(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_20B80BBD0(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              sub_20B80AD6C();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sub_20B8368F8((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_20B853D84(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sub_20B80627C(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)sub_20B827F10((uint64_t)&v62 + 8);
    sub_20B828F84(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    sub_20B828F84((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    sub_20B828F84((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    sub_20B828F84((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_20B825AE4((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v63 = MEMORY[0x24BEDB848] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v67);
  }
}

void sub_20B8368A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8368F8(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type size;
  unint64_t v17;
  std::string *v18;
  int v19;
  std::string::size_type v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  int v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;
  std::string v37;

  if (a2 >= a3)
  {
    sub_20B80627C(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    v8 = a2;
    do
    {
      v9 = sub_20B83A950(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sub_20B8268D4(v12, v11);
      if (v13 < 0)
      {
        v33 = 13;
        sub_20B827F10((uint64_t)v34);
        sub_20B828F84(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(v34, (uint64_t)") [", 3);
        sub_20B828F84(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_20B828F84(v34, (uint64_t)"] ", 2);
        sub_20B825AE4(&v33, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v14 = v37.__r_.__value_.__r.__words[1];
    if (v14 >= 1)
    {
      v15 = 0;
      while (1)
      {
        v32 = 0;
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size < v15)
          sub_20B83B31C("string_view::substr");
        v17 = v15;
        v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v37;
        if (sub_20B852108((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533)
          break;
        v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            v33 = 13;
            sub_20B827F10((uint64_t)v34);
            sub_20B828F84(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_20B828F84(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_20B828F84(v34, (uint64_t)") [", 3);
            sub_20B828F84(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_20B828F84(v34, (uint64_t)"] ", 2);
            sub_20B825AE4(&v33, (uint64_t)v31);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        sub_20B836E00(*(_QWORD ***)(a1 + 8), v19, &unk_20BA3637E, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        v15 = v17 + v22;
        if (v15 >= v14)
          goto LABEL_47;
      }
      v19 = v17 + a2;
LABEL_23:
      v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = v37.__r_.__value_.__l.__size_;
      v21 = v20 - v17;
      if (v20 < v17)
        sub_20B83B31C("string_view::substr");
      v22 = v32;
      v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if (v21 >= v32)
        v24 = v32;
      else
        v24 = v21;
      if (v32)
      {
        v25 = 0;
        v26 = (char *)v23 + v17;
        v27 = v19;
        do
        {
          v28 = v22 - 1;
          if (v25 == v28)
            v29 = v26;
          else
            v29 = "";
          if (v25 == v28)
            v30 = v24;
          else
            v30 = 0;
          sub_20B836E00(*(_QWORD ***)(a1 + 8), v27 + v25++, v29, v30);
          v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    v15 = 0;
LABEL_47:
    if (v15 + a2 == a3)
    {
      sub_20B80627C(v31);
      goto LABEL_53;
    }
    v33 = 13;
    sub_20B827F10((uint64_t)v34);
    sub_20B828F84(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v34, (uint64_t)") [", 3);
    sub_20B828F84(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_20B828F84(v34, (uint64_t)"] ", 2);
    sub_20B825AE4(&v33, (uint64_t)v31);
LABEL_50:
    v34[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v34[1] = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete((void *)v34[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v36);
LABEL_53:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_20B836D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sub_20B836E00(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = sub_20B83B504(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = (_QWORD *)*v13;
  sub_20B854EA0((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_20B836F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B836F74(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  sub_20B83322C(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        v14 = (_BYTE *)sub_20B83D7AC(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_20B83D8B8((int)&v21, v20, (uint64_t)&__p);
        v14 = v13 + 24;
      }
      v20 = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    sub_20B83712C("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20B853EE0(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_20B83AFD0((void ***)&__p);
}

void sub_20B8370E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  sub_20B83AFD0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_20B83712C(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_20B82E068(&__dst, __src, __len);
  sub_20B827F10((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B837258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B83729C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  char v13;
  uint64_t v14;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  v2 = v14;
  sub_20B853D84(&v14);
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(*a1[1] + 128))(a1[1]);
  if ((int)sub_20B8520F8() <= 2)
  {
    v13 = 0;
    v3 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_20B828F84(v4, (uint64_t)") ", 2);
    v6 = sub_20B828F84(v5, (uint64_t)"LOG(", 4);
    v7 = sub_20B828F84(v6, (uint64_t)"ERROR", 5);
    v8 = sub_20B828F84(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v14, a1);
    v9 = sub_20B85406C(&v14);
    v10 = strlen(v9);
    v11 = sub_20B828F84(v8, (uint64_t)v9, v10);
    sub_20B828F84(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v14);
    sub_20B827FFC(&v13);
  }
  return 0;
}

void sub_20B8373D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B837400(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  v6 = v18;
  sub_20B853D84(&v18);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sub_20B8520F8() <= 2)
  {
    v17 = 0;
    v7 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20B828F84(v8, (uint64_t)") ", 2);
    v10 = sub_20B828F84(v9, (uint64_t)"LOG(", 4);
    v11 = sub_20B828F84(v10, (uint64_t)"ERROR", 5);
    v12 = sub_20B828F84(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v18, a1);
    v13 = sub_20B85406C(&v18);
    v14 = strlen(v13);
    v15 = sub_20B828F84(v12, (uint64_t)v13, v14);
    sub_20B828F84(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v18);
    sub_20B827FFC(&v17);
  }
  return 0;
}

void sub_20B837554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

const char *sub_20B83757C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_20B853D84(&v17);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  if ((int)sub_20B8520F8() <= 2)
  {
    v16 = 0;
    v5 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    v8 = sub_20B828F84(v7, (uint64_t)"LOG(", 4);
    v9 = sub_20B828F84(v8, (uint64_t)"ERROR", 5);
    v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v11 = sub_20B85406C(&v17);
    v12 = strlen(v11);
    v13 = sub_20B828F84(v10, (uint64_t)v11, v12);
    v14 = sub_20B828F84(v13, (uint64_t)"\nReturns default value ", 23);
    sub_20B828F84(v14, (uint64_t)"", 0);
    sub_20B853D84(&v17);
    sub_20B827FFC(&v16);
  }
  return "";
}

void sub_20B8376D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

float sub_20B837700(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_20B853D84(&v17);
  if (!v4)
    return (*(float (**)(_QWORD *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  v5 = 0.0;
  if ((int)sub_20B8520F8() <= 2)
  {
    v16 = 0;
    v6 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = sub_20B828F84(v7, (uint64_t)") ", 2);
    v9 = sub_20B828F84(v8, (uint64_t)"LOG(", 4);
    v10 = sub_20B828F84(v9, (uint64_t)"ERROR", 5);
    v11 = sub_20B828F84(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v12 = sub_20B85406C(&v17);
    v13 = strlen(v12);
    v14 = sub_20B828F84(v11, (uint64_t)v12, v13);
    sub_20B828F84(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v17);
    sub_20B827FFC(&v16);
  }
  return v5;
}

void sub_20B83785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B837884(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_20B853D84(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  if ((int)sub_20B8520F8() <= 2)
  {
    v15 = 0;
    v5 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    v8 = sub_20B828F84(v7, (uint64_t)"LOG(", 4);
    v9 = sub_20B828F84(v8, (uint64_t)"ERROR", 5);
    v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_20B85406C(&v16);
    v12 = strlen(v11);
    v13 = sub_20B828F84(v10, (uint64_t)v11, v12);
    sub_20B828F84(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v16);
    sub_20B827FFC(&v15);
  }
  return 0;
}

void sub_20B8379D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8379F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_20B853D84(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  if ((int)sub_20B8520F8() <= 2)
  {
    v15 = 0;
    v5 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    v8 = sub_20B828F84(v7, (uint64_t)"LOG(", 4);
    v9 = sub_20B828F84(v8, (uint64_t)"ERROR", 5);
    v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_20B85406C(&v16);
    v12 = strlen(v11);
    v13 = sub_20B828F84(v10, (uint64_t)v11, v12);
    sub_20B828F84(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v16);
    sub_20B827FFC(&v15);
  }
  return 0;
}

void sub_20B837B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B837B6C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_20B853D84(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  if ((int)sub_20B8520F8() <= 2)
  {
    v15 = 0;
    v5 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    v8 = sub_20B828F84(v7, (uint64_t)"LOG(", 4);
    v9 = sub_20B828F84(v8, (uint64_t)"ERROR", 5);
    v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_20B85406C(&v16);
    v12 = strlen(v11);
    v13 = sub_20B828F84(v10, (uint64_t)v11, v12);
    sub_20B828F84(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v16);
    sub_20B827FFC(&v15);
  }
  return 0;
}

void sub_20B837CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B837CE0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_20B853D84(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  if ((int)sub_20B8520F8() <= 2)
  {
    v15 = 0;
    v5 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_20B828F84(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_20B828F84(v6, (uint64_t)") ", 2);
    v8 = sub_20B828F84(v7, (uint64_t)"LOG(", 4);
    v9 = sub_20B828F84(v8, (uint64_t)"ERROR", 5);
    v10 = sub_20B828F84(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_20B85406C(&v16);
    v12 = strlen(v11);
    v13 = sub_20B828F84(v10, (uint64_t)v11, v12);
    sub_20B828F84(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_20B853D84(&v16);
    sub_20B827FFC(&v15);
  }
  return 0;
}

void sub_20B837E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_20B827FFC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B837E54(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_20B825D5C(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_20B837EB8(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_20B825DAC(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_20B837F1C(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_20B825DFC(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_20B837F80(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_20B825E4C(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_20B837FE4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_20B853D84(a5);
    if (a4)
    {
      sub_20B83B010(a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_20B827F10((uint64_t)v16);
      sub_20B828F84(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v16, (uint64_t)") [", 3);
      sub_20B828F84(v16, (uint64_t)"pieces", 6);
      sub_20B828F84(v16, (uint64_t)"] ", 2);
      sub_20B828F84(v16, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v18);
    }
  }
  return result;
}

void sub_20B8381A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8381C0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_20B853D84(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_20B827F10((uint64_t)v16);
      sub_20B828F84(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v16, (uint64_t)") [", 3);
      sub_20B828F84(v16, (uint64_t)"ids", 3);
      sub_20B828F84(v16, (uint64_t)"] ", 2);
      sub_20B828F84(v16, (uint64_t)"output container is null", 24);
      sub_20B825AE4(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x20BD39C2C](&v18);
    }
  }
  return result;
}

void sub_20B838384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83839C(uint64_t a1)
{
  sub_20B8292CC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_20B8383C4@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  _DWORD *v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;

  v47 = a2;
  v48 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v43) = 13;
    v7 = (_QWORD *)sub_20B827F10((uint64_t)v44);
    sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v44, (uint64_t)") [", 3);
    sub_20B828F84(v44, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_20B828F84(v44, (uint64_t)"] ", 2);
    sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*a2)
  {
    LODWORD(v43) = 13;
    v6 = (_QWORD *)sub_20B827F10((uint64_t)v44);
    sub_20B828F84(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v44, (uint64_t)") [", 3);
    sub_20B828F84(v44, (uint64_t)"header->sentinel == 0", 21);
    sub_20B828F84(v44, (uint64_t)"] ", 2);
    sub_20B828F84(v44, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
LABEL_5:
    v44[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v44[1] = MEMORY[0x24BEDB848] + 16;
    if (v45 < 0)
      operator delete((void *)v44[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x20BD39C2C](&v46);
  }
  result = sub_20B8524B4(&v47, 0x14uLL, a4);
  if (*a4)
    return result;
  sub_20B853D84(a4);
  v10 = a2[1];
  if (v48 < v10)
  {
    LODWORD(v43) = 13;
    v11 = (_QWORD *)sub_20B827F10((uint64_t)v44);
    sub_20B828F84(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v44, (uint64_t)") [", 3);
    sub_20B828F84(v44, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_20B828F84(v44, (uint64_t)"] ", 2);
    sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  v12 = (uint64_t)v47;
  v13 = operator new();
  sub_20B867BA0(v13, v12, v10);
  v14 = a1[4];
  a1[4] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v13 = a1[4];
  }
  sub_20B853F94(&v43, v13 + 88);
  v15 = (uint64_t)v43;
  sub_20B853D84((uint64_t *)&v43);
  if (v15)
  {
    LODWORD(v43) = 13;
    v16 = (_QWORD *)sub_20B827F10((uint64_t)v44);
    sub_20B828F84(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v44, (uint64_t)") [", 3);
    sub_20B828F84(v44, (uint64_t)"model_proto->status().ok()", 26);
    sub_20B828F84(v44, (uint64_t)"] ", 2);
    sub_20B828F84(v44, (uint64_t)"Failed to initialize ModelProto.", 32);
    sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  result = sub_20B8524B4(&v47, a2[1], a4);
  if (*a4)
    return result;
  sub_20B853D84(a4);
  if (v48 >= a2[2])
    v17 = a2[2];
  else
    v17 = v48;
  sub_20B82E430(v13, (uint64_t)v47, v17, &v43);
  v18 = (uint64_t)v43;
  v43 = 0;
  v19 = a1[1];
  a1[1] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = (uint64_t)v43;
    v43 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v18 = a1[1];
  }
  if (!v18)
  {
    LODWORD(v43) = 13;
    v22 = (_QWORD *)sub_20B827F10((uint64_t)v44);
    sub_20B828F84(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_20B828F84(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v44, (uint64_t)") [", 3);
    sub_20B828F84(v44, (uint64_t)"model_", 6);
    sub_20B828F84(v44, (uint64_t)"] ", 2);
    sub_20B828F84(v44, (uint64_t)"Failed to initialize Model.", 27);
    sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
    return (_QWORD *)sub_20B825B70((uint64_t)&v43);
  }
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v18 + 16))(&v43);
  v21 = (uint64_t)v43;
  sub_20B853D84((uint64_t *)&v43);
  if (v21)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  result = sub_20B8524B4(&v47, a2[2], a4);
  if (!*a4)
  {
    sub_20B853D84(a4);
    v23 = a2[3];
    if ((_DWORD)v23)
    {
      if (v48 >= v23)
      {
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 152))(a1[4]);
        v27 = a2[3];
        if (v48 < v27)
          v27 = v48;
        v43 = v47;
        v44[0] = v27;
        sub_20B838DB0(v26, (uint64_t)&v43, &v42);
        v28 = v42;
        v42 = 0;
        v29 = a1[2];
        a1[2] = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = v42;
          v42 = 0;
          if (v30)
            (*(void (**)(uint64_t *))(*v30 + 8))(v30);
        }
        (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[2] + 24))(&v43);
        v31 = (uint64_t)v43;
        sub_20B853D84((uint64_t *)&v43);
        if (!v31)
        {
          result = sub_20B8524B4(&v47, a2[3], a4);
          if (*a4)
            return result;
          sub_20B853D84(a4);
          v33 = a1[2];
          v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v34);
          if (a2[4])
          {
            v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 160))(a1[4]);
            v36 = a2[4];
            if (v48 < v36)
              v36 = v48;
            v43 = v47;
            v44[0] = v36;
            sub_20B838DB0(v35, (uint64_t)&v43, &v42);
            v37 = v42;
            v42 = 0;
            v38 = a1[3];
            a1[3] = v37;
            if (v38)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              v39 = v42;
              v42 = 0;
              if (v39)
                (*(void (**)(uint64_t *))(*v39 + 8))(v39);
            }
            (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[3] + 24))(&v43);
            v40 = (uint64_t)v43;
            sub_20B853D84((uint64_t *)&v43);
            if (v40)
            {
              LODWORD(v43) = 13;
              v41 = (_QWORD *)sub_20B827F10((uint64_t)v44);
              sub_20B828F84(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_20B828F84(v44, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_20B828F84(v44, (uint64_t)") [", 3);
              sub_20B828F84(v44, (uint64_t)"denormalizer_->status().ok()", 28);
              sub_20B828F84(v44, (uint64_t)"] ", 2);
              sub_20B828F84(v44, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
              return (_QWORD *)sub_20B825B70((uint64_t)&v43);
            }
            result = sub_20B8524B4(&v47, a2[4], a4);
            if (*a4)
              return result;
            sub_20B853D84(a4);
          }
          return sub_20B80627C(a4);
        }
        LODWORD(v43) = 13;
        v32 = (_QWORD *)sub_20B827F10((uint64_t)v44);
        sub_20B828F84(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(v44, (uint64_t)") [", 3);
        sub_20B828F84(v44, (uint64_t)"normalizer_->status().ok()", 26);
        sub_20B828F84(v44, (uint64_t)"] ", 2);
        sub_20B828F84(v44, (uint64_t)"Failed to initialize Normalizer.", 32);
        sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
      }
      else
      {
        LODWORD(v43) = 13;
        v24 = (_QWORD *)sub_20B827F10((uint64_t)v44);
        sub_20B828F84(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_20B828F84(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_20B828F84(v44, (uint64_t)") [", 3);
        sub_20B828F84(v44, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        sub_20B828F84(v44, (uint64_t)"] ", 2);
        sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v43) = 13;
      v25 = (_QWORD *)sub_20B827F10((uint64_t)v44);
      sub_20B828F84(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_20B828F84(v44, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(v44, (uint64_t)") [", 3);
      sub_20B828F84(v44, (uint64_t)"(header->normalizer_size) > (0)", 31);
      sub_20B828F84(v44, (uint64_t)"] ", 2);
      sub_20B825AE4((unsigned int *)&v43, (uint64_t)a4);
    }
    return (_QWORD *)sub_20B825B70((uint64_t)&v43);
  }
  return result;
}

void sub_20B838D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B825B70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B838DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)operator new();
  result = sub_20B82CB28(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_20B838E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B838E2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  MEMORY[0x20BD39944](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    v2 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 119);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2, v3);
}

void sub_20B838E88(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24C4667F8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_20B83DDDC(&__p, &v8);
  sub_20B838F88(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_20B853D84(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_20B838F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B838F88(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::__fs::filesystem::path *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  std::__fs::filesystem::path *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::__fs::filesystem::path *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::__fs::filesystem::path __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::__fs::filesystem::path v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sub_20B83DB18(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      sub_20B80ACE0(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::__fs::filesystem::path *)a2;
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)sub_20B827F10((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_20B828F84(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (_BYTE *)a2;
    else
      v13 = *(_BYTE **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    sub_20B83DCDC(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_20B825AE4((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](v29);
    return;
  }
  sub_20B83DB5C((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_20B83DC1C((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20B80ACE0(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_20B827F10((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    sub_20B83DCDC(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sub_20B825AE4((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_20B80ACE0(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)sub_20B827F10((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_20B828F84(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_20B80627C(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)sub_20B827F10((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_20B828F84(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_20B827F10((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_20B828F84(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  sub_20B83DCDC(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_20B825AE4((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_20B839724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sub_20B8397D8(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24C4667F8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_20B83DDDC(&__p, &v8);
  sub_20B838F88(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_20B853D84(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_20B8398BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B8398D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83AFD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B839938@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839980(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B83999C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B8399E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83B390((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B8399FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83B400((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B839A5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83AFD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B839ABC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839B04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B839B20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83B494((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B839B80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B828E34((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B839BE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839C28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B839C44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B839CA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B839CF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_20B839D0C(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sub_20B853D84(&v3);
  return v1;
}

void sub_20B839D54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_24C466608;
  v15 = 0;
  v16 = 0;
  v14 = sub_20B84687C();
  v8 = sub_20B82E6E8((uint64_t)&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  sub_20B8614C4((uint64_t)v14, a4);
  sub_20B853D84(&v12);
  v13 = &off_24C466608;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B839E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B811FE4(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_20B839E50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_24C466608;
  v19 = 0;
  v20 = 0;
  v18 = sub_20B84687C();
  v12 = sub_20B82E6E8((uint64_t)&v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  sub_20B8614C4((uint64_t)v18, a5);
  sub_20B853D84(&v16);
  v17 = &off_24C466608;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B839F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B811FE4(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_20B839F6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_24C466668;
  v10 = sub_20B82E844((uint64_t)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sub_20B82E8C4((uint64_t)v15, a5);
  sub_20B853D84(&v14);
  v15[0] = &off_24C466668;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B83A048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20B853D84(&a9);
  sub_20B811FE4(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_20B83A070(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_24C466668;
  v16 = sub_20B82E844((uint64_t)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_20B82E8C4((uint64_t)v21, a7);
  sub_20B853D84(&v20);
  v21[0] = &off_24C466668;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20B83A174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20B853D84(&a9);
  sub_20B811FE4(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_20B83A19C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_24C466608;
  v13 = 0;
  v14 = 0;
  v12 = sub_20B84687C();
  v6 = sub_20B82E6E8((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  sub_20B8614C4((uint64_t)v12, a3);
  sub_20B853D84(&v10);
  v11 = &off_24C466608;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B83A268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B811FE4(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_20B83A290(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_24C466608;
  v13 = 0;
  v14 = 0;
  v12 = sub_20B84687C();
  v6 = sub_20B82E6E8((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  sub_20B8614C4((uint64_t)v12, a3);
  sub_20B853D84(&v10);
  v11 = &off_24C466608;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B83A35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B811FE4(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_20B83A384(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_24C466608;
  v13 = 0;
  v14 = 0;
  v12 = sub_20B84687C();
  v6 = sub_20B82E6E8((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  sub_20B8614C4((uint64_t)v12, a3);
  sub_20B853D84(&v10);
  v11 = &off_24C466608;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B83A450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B811FE4(v2 + 16);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v10;

  *a4 = &off_24C466608;
  a4[1] = sub_20B84687C();
  a4[2] = 0;
  a4[3] = 0;
  v8 = sub_20B82E6E8((uint64_t)a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v10, a1, a2, a3, v8);
  return sub_20B853D84(&v10);
}

void sub_20B83A508(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v14;

  *a5 = &off_24C466608;
  a5[1] = sub_20B84687C();
  a5[2] = 0;
  a5[3] = 0;
  v12 = sub_20B82E6E8((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v14, a1, a2, a3, a4, v12, a6);
  return sub_20B853D84(&v14);
}

void sub_20B83A5D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A5E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v11;

  *a5 = &off_24C466668;
  a5[1] = 0;
  a5[2] = 0;
  v9 = sub_20B82E844((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_20B853D84(&v11);
}

void sub_20B83A680(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  sub_20B811FE4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v17;

  *a7 = &off_24C466668;
  a7[1] = 0;
  a7[2] = 0;
  v15 = sub_20B82E844((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_20B853D84(&v17);
}

void sub_20B83A758(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_24C466608;
  a3[1] = sub_20B84687C();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_20B82E6E8((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v8, a1, a2, v6);
  return sub_20B853D84(&v8);
}

void sub_20B83A7F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_24C466608;
  a3[1] = sub_20B84687C();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_20B82E6E8((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v8, a1, a2, v6);
  return sub_20B853D84(&v8);
}

void sub_20B83A898(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83A8B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_24C466608;
  a3[1] = sub_20B84687C();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_20B82E6E8((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v8, a1, a2, v6);
  return sub_20B853D84(&v8);
}

void sub_20B83A938(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83A950(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B83AA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83AA2C(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B83AAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83AB08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 112);
  return a1;
}

uint64_t sub_20B83AB8C(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B83AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_20B83AC68(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  sub_20B80CDD8();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)sub_20B829AD0((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        sub_20B80CDD8();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)sub_20B829AD0((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_20B83AF0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B83AF30(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B828D20(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20B83AFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B83AFD0(&a9);
  _Unwind_Resume(a1);
}

void sub_20B83AFD0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B83B010((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B83B010(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_20B83B05C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B82C700(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_20B83B0B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B83B0D0(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  sub_20B82E068(&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = sub_20B83B264((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = sub_20B83B264((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B83B234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B83B264(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void sub_20B83B31C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20B83B36C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C457EA0, MEMORY[0x24BEDAB00]);
}

void sub_20B83B358(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20B83B36C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_20B83B390(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_20B83AFD0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B83B400(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B83B440((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B83B440(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_20B83B494(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        sub_20B83AFD0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B83B504(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B83B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B83B5E0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_20B83B628(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20B83B614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B83B628(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C46B868;
  sub_20B846734(a1 + 3, 0);
  return a1;
}

void sub_20B83B660(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20B83B674(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B83B684(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B83B6B4(uint64_t a1)
{
  return sub_20B846854(a1 + 24);
}

_QWORD *sub_20B83B6C0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = sub_20B83B708(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_20B83B6F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B83B708(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C46B8A0;
  sub_20B84721C(a1 + 3, 0);
  return a1;
}

void sub_20B83B740(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20B83B754(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B83B764(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B83B794(uint64_t a1)
{
  return sub_20B8472D4(a1 + 24);
}

uint64_t sub_20B83B7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B84EB74();
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B83B7DC(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_20B82E068(&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  sub_20B83B8DC(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B83B8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20B83B8DC(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  sub_20B82E068(&__dst, __src, __len);
  v8 = strlen(a3);
  sub_20B83B9CC(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B83B998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20B83B9CC(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  sub_20B82E068(&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  sub_20B82E068(__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20B83BA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B83BAB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B83BB28((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B83BB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_20B83BBC4((uint64_t)v12);
  return a6;
}

uint64_t sub_20B83BBC4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83BBF8(a1);
  return a1;
}

void sub_20B83BBF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_20B83BC3C(uint64_t a1)
{
  sub_20B83BC70(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B83BC70(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20B83BCC4(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20B83BD44((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20B83BD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B83BD44(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_20B83BDC8(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_20B8296A0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20B83BDC8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_20B8296F4((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_20B8296F4((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_20B829604((uint64_t)a1, a3, a5);
  }
  if (sub_20B8296F4((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20B8296F4((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))
        return sub_20B829604((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_20B83BF60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_20B8296F4(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_20B8296F4(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t sub_20B83BFEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_20B83C0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83C118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](a1 + 128);
  return a1;
}

_QWORD *sub_20B83C1A0(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_20B80ACE0((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_20B83C1F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B83C1FC(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_20B83BAB4(a1, v15);
  v13 = a1[1];
  sub_20B83BC3C((uint64_t)v15);
  return v13;
}

void sub_20B83C308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B83C31C(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_20B83C498((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_20B83C370(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B83C378(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20B83C498(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_20B83C650(a1, v14);
  v12 = a1[1];
  sub_20B83C7E0(v14);
  return v12;
}

void sub_20B83C484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83C7E0((void **)va);
  _Unwind_Resume(a1);
}

char *sub_20B83C498(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20B828D20(result, a4);
    result = sub_20B83C51C((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20B83C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B83AFD0(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B83C51C(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20B80ACE0(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20B83C5D8((uint64_t)v9);
  return v4;
}

void sub_20B83C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B83C5D8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83C5D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83C60C(a1);
  return a1;
}

void sub_20B83C60C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t sub_20B83C650(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B83C6C4((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B83C6C4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B83C764((uint64_t)v11);
  return v9;
}

uint64_t sub_20B83C764(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83C798(a1);
  return a1;
}

void sub_20B83C798(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_20B83AFD0(&v3);
    v1 += 3;
  }
}

void **sub_20B83C7E0(void **a1)
{
  sub_20B83C810((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20B83C810(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_20B83AFD0(&v5);
  }
}

_QWORD *sub_20B83C860(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_20B83C9C4(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20B83C8A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B83C8B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20B83C9C4(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  sub_20B83CA3C(a1, v14);
  v12 = a1[1];
  sub_20B83CBC8((uint64_t)v14);
  return v12;
}

void sub_20B83C9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B83C9C4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B81277C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B83CA20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B83CA3C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B83CAB0((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B83CAB0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B83CB50((uint64_t)v11);
  return v9;
}

uint64_t sub_20B83CB50(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83CB84(a1);
  return a1;
}

void sub_20B83CB84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_20B83CBC8(uint64_t a1)
{
  sub_20B83CBFC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B83CBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_20B83CC54(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B83CCC8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B83CCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B83CD70((uint64_t)v11);
  return v9;
}

uint64_t sub_20B83CD70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83CDA4(a1);
  return a1;
}

void sub_20B83CDA4(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_20B83AFD0(&v3);
    v1 += 4;
  }
}

void **sub_20B83CDEC(void **a1)
{
  sub_20B83CE1C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20B83CE1C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_20B83AFD0(&v5);
  }
}

float sub_20B83CE6C(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_20B83C498((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_20B83CED4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B83CEDC(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B8156D4(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_20B83C498(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_20B83CC54(a1, v16);
  v14 = a1[1];
  sub_20B83CDEC(v16);
  return v14;
}

void sub_20B83CFD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CDEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83CFE8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B83D05C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B83D05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B83D104((uint64_t)v11);
  return v9;
}

uint64_t sub_20B83D104(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83D138(a1);
  return a1;
}

void sub_20B83D138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_20B83D17C(uint64_t a1)
{
  sub_20B83D1B0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B83D1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_20B83D208(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_20B83C9C4((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_20B83D264(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B83D26C(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B8156D4(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_20B83C9C4(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_20B83CFE8(a1, v16);
  v14 = a1[1];
  sub_20B83D17C((uint64_t)v16);
  return v14;
}

void sub_20B83D358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B83D36C(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B83D4BC((char *)a1, a2, a3, a3 - a2);
  sub_20B83D3C4((double **)a1);
  return a1;
}

void sub_20B83D3A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B83D3C4(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_20B83D530((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      sub_20B83D5E4(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_20B83D4BC(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B812928(result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20B83D514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B83D530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_20B800BE8(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *sub_20B83D5E4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B812928(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20B83D63C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B83D658(uint64_t a1, uint64_t a2, double **a3)
{
  double *v5;
  double *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = sub_20B83D70C(a2);
  v8 = sub_20B83D70C(a2);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_20B83D70C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_20B83D7AC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_20B828D70((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[24 * v3];
  v13 = &v7[24 * v6];
  sub_20B83D8B8((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 24;
  sub_20B83BAB4(a1, &v10);
  v8 = a1[1];
  sub_20B83BC3C((uint64_t)&v10);
  return v8;
}

void sub_20B83D8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B83D8B8(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t sub_20B83D950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2 != a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 1) != 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((v4 & 1) != 0)
      v5 = (_QWORD *)*v5;
    if (v3 == v5)
      return (uint64_t)sub_20B846490(a1, a2);
    else
      return sub_20B860BF0(a1, a2);
  }
  return a1;
}

uint64_t sub_20B83D994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_20B83DA14((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_20B83D9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_20B83DA14(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_20B83BDC8(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_20B8296A0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_20B83DAA0(_QWORD *a1)
{
  *a1 = &off_24C4667F8;
  sub_20B83DB18((uint64_t)a1);
  return a1;
}

void sub_20B83DAD4(_QWORD *a1)
{
  *a1 = &off_24C4667F8;
  sub_20B83DB18((uint64_t)a1);
  JUMPOUT(0x20BD39CB0);
}

void *sub_20B83DB18(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double sub_20B83DB5C@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double sub_20B83DC1C@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *sub_20B83DCDC(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_20B828F84(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_20B83DDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20B83DDDC(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  sub_20B83DE38(this, v3, v4);
  return this;
}

void sub_20B83DE1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_20B83DE38(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_20B83DFAC(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20B83DF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B83DFAC(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_20B83E050()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

uint64_t sub_20B83E078(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_24C466A58;
  sub_20B844268((_QWORD *)(a1 + 96));
  v4 = (void **)(a1 + 72);
  sub_20B83B400(&v4);
  v4 = (void **)(a1 + 48);
  sub_20B83B400(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B83E0E8(uint64_t a1)
{
  sub_20B83E078(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B83E10C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_20B80CDD8();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_20B83E28C(_QWORD *a1)
{
  sub_20B83B440(a1 + 6);
  sub_20B83B440(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_20B83E2D0((uint64_t)(a1 + 12));
}

void sub_20B83E2D0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_20B83E348(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sub_20B83E28C((_QWORD *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  sub_20B82DEB8((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_20BA68FCC[(unint64_t)*a2 >> 4])
        v9 = asc_20BA68FCC[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_20B800BE8(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      sub_20B80CDD8();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)sub_20B800BE8(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  sub_20B83E784((uint64_t *)(a1 + 48), v32 + 1);
  sub_20B83E784((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    sub_20B82DEB8((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    sub_20B82DEB8((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sub_20B83E10C((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      sub_20B80CDD8();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)sub_20B800BE8((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sub_20B83E10C((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      sub_20B80CDD8();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)sub_20B800BE8((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void sub_20B83E784(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20B8442E4(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_20B83E818(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_20B83E10C((_QWORD *)(a1 + 96));
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_20B80CDD8();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_20B800BE8((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*(_QWORD *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      sub_20B80CDD8();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)sub_20B800BE8((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sub_20B83EA3C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((a1[4] - a1[3]) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = a1[6];
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              sub_20B80CDD8();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)sub_20B800BE8((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_20B8438C0((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(a1[9] + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sub_20B8520F8() <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    sub_20B828F84(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = sub_20B828F84(v40, (uint64_t)") ", 2);
    v42 = sub_20B828F84(v41, (uint64_t)"LOG(", 4);
    v43 = sub_20B828F84(v42, (uint64_t)"ERROR", 5);
    v44 = sub_20B828F84(v43, (uint64_t)") ", 2);
    sub_20B828F84(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_20B827FFC(&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_20B83ED34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B83ED68(_QWORD *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((a1[4] - a1[3]) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = a1[16] + a1[17] * a1[18];
  v29 = 0;
  v25 = a2;
  sub_20B814634(a2, v8, &v29);
  v9 = 0;
  v28 = a1[6];
  v26 = a1;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = v26[9] + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_20B83EEEC(_QWORD *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = a1[3];
  v4 = a1[4];
  v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_20B814634(v29, v6, __p);
  sub_20B83ED68(a1, (uint64_t *)__p, a2);
  v7 = 0;
  v27 = a1[6];
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = a1;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(v26[9] + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_20B83F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B83F0A8(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *i;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  float v60;
  float v61;
  int v62;
  double *v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *j;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint8x8_t v108;
  _QWORD *v109;
  _QWORD *k;
  unint64_t v111;
  _QWORD *v112;
  float v113;
  _BOOL4 v114;
  unint64_t v115;
  unint64_t v116;
  int8x8_t prime;
  void *v118;
  void *v119;
  uint64_t v120;
  _QWORD **v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  uint8x8_t v125;
  uint64_t v126;
  _QWORD *m;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  void *v145;
  int v146;
  char v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v153;
  void *v154[2];
  __int128 v155;
  float v156;
  _BYTE v157[48];
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  _BYTE *v162;
  void *v163[3];
  void *v164[3];
  void *v165[4];
  void *__p[3];
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (**v171)();
  __int128 v172;
  _QWORD v173[3];
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_20B83EA3C(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(_QWORD *)v157 = a4;
      v157[8] = 0;
      v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_20B844590((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(_QWORD *)&v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_20B8520F8() <= 1)
    {
      LOBYTE(v171) = 0;
      v9 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      sub_20B828F84(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = sub_20B828F84(v10, (uint64_t)") ", 2);
      v12 = sub_20B828F84(v11, (uint64_t)"LOG(", 4);
      v13 = sub_20B828F84(v12, (uint64_t)"WARNING", 7);
      v14 = sub_20B828F84(v13, (uint64_t)") ", 2);
      sub_20B828F84(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_20B827FFC(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = &off_24C466908;
  v174 = 512;
  v168 = 0uLL;
  v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v15 = sub_20B840268(&v171);
  v167 = v15;
  v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_20B814634(__p, v17, v157);
  if (a3)
  {
    sub_20B83ED68(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v157;
    __p[2] = *(void **)&v157[16];
    v18 = sub_20B852250();
    v19 = sub_20B83D70C(v18);
    v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    v21 = -logf(-v20);
  }
  else
  {
    sub_20B83EA3C(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    v21 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_20B8403D4((uint64_t *)&v168, &v167);
  v146 = 0;
  v147 = 0;
  if (10 * (int)a2 >= 512)
    v22 = 512;
  else
    v22 = 10 * a2;
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  v148 = v23;
  while (1)
  {
    v24 = v168;
    if ((_QWORD)v168 == *((_QWORD *)&v168 + 1))
      break;
    v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((_QWORD *)&v168 + 1) - v168) >= 9)
    {
      v26 = 0;
      v27 = (uint64_t)(*((_QWORD *)&v168 + 1) - v168) >> 3;
      v28 = (_QWORD *)v168;
      do
      {
        v29 = v28;
        v28 += v26 + 1;
        v30 = 2 * v26;
        v26 = (2 * v26) | 1;
        v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          v26 = v31;
        }
        *v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (_QWORD *)(*((_QWORD *)&v24 + 1) - 8))
      {
        *v28 = v25;
      }
      else
      {
        *v28 = **((_QWORD **)&v24 + 1);
        **((_QWORD **)&v24 + 1) = v25;
        sub_20B8446A0(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((_QWORD *)&v168 + 1) -= 8;
    v32 = *v25;
    v33 = (_QWORD **)a1[9];
    if (*v25 == **v33)
    {
      sub_20B8404D4(a4, ((a4[1] - *a4) >> 5) + 1);
      for (i = (_QWORD *)v25[1]; i[1]; i = (_QWORD *)i[1])
      {
        v35 = a4[1];
        v36 = *(_QWORD **)(v35 - 24);
        v37 = *(_QWORD *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          v39 = *(_QWORD *)(v35 - 32);
          v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_20B80CDD8();
          v41 = v37 - v39;
          v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1))
            v42 = v40 + 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)sub_20B800BE8(v35 - 16, v43);
          else
            v44 = 0;
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = *i;
          v38 = v45 + 8;
          v47 = *(char **)(v35 - 32);
          v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            v46 = *(char **)(v35 - 32);
          }
          *(_QWORD *)(v35 - 32) = v45;
          *(_QWORD *)(v35 - 24) = v38;
          *(_QWORD *)(v35 - 16) = &v44[8 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v36 = *i;
          v38 = v36 + 1;
        }
        *(_QWORD *)(v35 - 24) = v38;
      }
      v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5)
        break;
    }
    else
    {
      v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_20B814634(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_20B814634(v163, v50, v157);
      *(_QWORD *)v157 = 0;
      sub_20B844970(&v161, v50, v157);
      v51 = *(_DWORD *)(v32 + 16);
      v52 = a1[9];
      if (a3)
      {
        v53 = *(_QWORD *)(v52 + 24 * v51);
        v54 = -100000000.0;
        if (*(_QWORD *)(v52 + 24 * v51 + 8) != v53)
        {
          v55 = 0;
          v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          v54 = -100000000.0;
          do
          {
            v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(_QWORD *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            v58 = sub_20B852250();
            v59 = sub_20B83D70C(v58);
            v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54)
              v54 = v61;
            ++v55;
            v62 = *(_DWORD *)(v32 + 16);
            v52 = a1[9];
            v53 = *(_QWORD *)(v52 + 24 * v62);
          }
          while (v55 < (*(_QWORD *)(v52 + 24 * v62 + 8) - v53) >> 3);
          v51 = *(_DWORD *)(v32 + 16);
        }
        v63 = (double *)v161;
        if (v162 != v161)
        {
          v64 = *((float *)v25 + 4);
          v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (_BYTE *)v161) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v162 - (_BYTE *)v161) >> 3;
          do
          {
            v66 = *v65++;
            v67 = expf(v66 - v54);
            v68 = (float)(v64 - v66) + log1pf(-v67);
            v69 = v64 - fmaxf(v68, 0.0);
            v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      v71 = *(_QWORD *)(v52 + 24 * v51);
      if (*(_QWORD *)(v52 + 24 * v51 + 8) != v71)
      {
        v72 = 0;
        do
        {
          v73 = *(_QWORD *)(v71 + 8 * v72);
          v74 = sub_20B840268(&v171);
          *(_QWORD *)v157 = v74;
          *(_QWORD *)v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 20) = *((_DWORD *)v164[0] + v72);
            v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 20) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(_QWORD *)(v74 + 8) = v25;
          sub_20B8403D4((uint64_t *)&v168, v157);
          ++v72;
          v71 = *(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_20B8520F8() <= 1)
        {
          v157[0] = 0;
          v76 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          sub_20B828F84(v76, (uint64_t)"(", 1);
          v77 = (_QWORD *)std::ostream::operator<<();
          v78 = sub_20B828F84(v77, (uint64_t)") ", 2);
          v79 = sub_20B828F84(v78, (uint64_t)"LOG(", 4);
          v80 = sub_20B828F84(v79, (uint64_t)"WARNING", 7);
          v81 = sub_20B828F84(v80, (uint64_t)") ", 2);
          sub_20B828F84(v81, (uint64_t)"Allocator size exceeds ", 23);
          v82 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_20B827FFC(v157);
        }
        v147 = 1;
      }
      v83 = *((_QWORD *)&v168 + 1);
      v84 = (void *)v168;
      if (*((_QWORD *)&v168 + 1) - (_QWORD)v168 >= 0x13879uLL)
      {
        v159 = 0uLL;
        v160 = 0;
        memset(&v157[8], 0, 40);
        *(_QWORD *)v157 = &off_24C466908;
        v158 = 512;
        *(_OWORD *)v154 = 0u;
        v155 = 0u;
        v156 = 1.0;
        ++v146;
        if ((int)sub_20B8520F8() <= 1)
        {
          LOBYTE(v170) = 0;
          v85 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          sub_20B828F84(v85, (uint64_t)"(", 1);
          v86 = (_QWORD *)std::ostream::operator<<();
          v87 = sub_20B828F84(v86, (uint64_t)") ", 2);
          v88 = sub_20B828F84(v87, (uint64_t)"LOG(", 4);
          v89 = sub_20B828F84(v88, (uint64_t)"WARNING", 7);
          v90 = sub_20B828F84(v89, (uint64_t)") ", 2);
          sub_20B828F84(v90, (uint64_t)"Too big agenda size ", 20);
          v91 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v91, (uint64_t)". Shrinking (round ", 19);
          v92 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v92, (uint64_t)") down to ", 10);
          v93 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v93, (uint64_t)".", 1);
          sub_20B827FFC(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          v94 = 0;
          while (1)
          {
            v149 = (_QWORD *)v168;
            v150 = v83;
            v95 = *(_QWORD *)v168;
            v153 = 0;
            v170 = 0;
            if (!v95)
              goto LABEL_181;
            v96 = &v170;
            v97 = (unint64_t)v154[1];
            do
            {
              v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97)
                    v102 = v100 % v97;
                }
                else
                {
                  v102 = v100 & (v97 - 1);
                }
                v103 = (_QWORD *)*((_QWORD *)v154[0] + v102);
                if (v103)
                {
                  for (j = (_QWORD *)*v103; j; j = (_QWORD *)*j)
                  {
                    v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97)
                          v105 %= v97;
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102)
                        break;
                    }
                  }
                }
              }
              v106 = sub_20B840268(v157);
              v107 = *(_OWORD *)v95;
              *(_QWORD *)(v106 + 16) = *(_QWORD *)(v95 + 16);
              *(_OWORD *)v106 = v107;
              *v96 = v106;
              v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  v5 = v100;
                  if ((void *)v100 >= v154[1])
                    v5 = v100 % (unint64_t)v154[1];
                }
                else
                {
                  v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (_QWORD *)*((_QWORD *)v154[0] + v5);
                if (v109)
                {
                  for (k = (_QWORD *)*v109; k; k = (_QWORD *)*k)
                  {
                    v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1])
                          v111 %= (unint64_t)v154[1];
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5)
                        break;
                    }
                  }
                }
              }
              v112 = operator new(0x20uLL);
              *v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              v113 = (float)(unint64_t)(*((_QWORD *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3)
                  v114 = 0;
                v115 = (2 * v97) | !v114;
                v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116)
                  prime = (int8x8_t)v116;
                else
                  prime = (int8x8_t)v115;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v97 = (unint64_t)v154[1];
                }
                if (*(_QWORD *)&prime <= v97)
                {
                  if (*(_QWORD *)&prime < v97)
                  {
                    v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2)
                        v124 = v126;
                    }
                    if (*(_QWORD *)&prime <= v124)
                      prime = (int8x8_t)v124;
                    if (*(_QWORD *)&prime >= v97)
                    {
                      v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v132 = v154[0];
                      v154[0] = 0;
                      if (v132)
                        operator delete(v132);
                      v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    sub_20B800BC0();
                  v118 = operator new(8 * *(_QWORD *)&prime);
                  v119 = v154[0];
                  v154[0] = v118;
                  if (v119)
                    operator delete(v119);
                  v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((_QWORD *)v154[0] + v120++) = 0;
                  while (*(_QWORD *)&prime != v120);
                  v121 = (_QWORD **)v155;
                  if ((_QWORD)v155)
                  {
                    v122 = *(_QWORD *)(v155 + 8);
                    v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(_QWORD *)&prime)
                        v122 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v122 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v154[0] + v122) = &v155;
                    for (m = *v121; m; v122 = v128)
                    {
                      v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(_QWORD *)&prime)
                          v128 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v128 &= *(_QWORD *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((_QWORD *)v154[0] + v128))
                        {
                          *((_QWORD *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *v121 = (_QWORD *)*m;
                        *m = **((_QWORD **)v154[0] + v128);
                        **((_QWORD **)v154[0] + v128) = m;
                        m = v121;
                      }
                      v128 = v122;
LABEL_151:
                      v121 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97)
                    v5 = v100 % v97;
                  else
                    v5 = v100;
                }
                else
                {
                  v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (_QWORD *)*((_QWORD *)v154[0] + v5);
              if (v130)
              {
                *v112 = *v130;
LABEL_168:
                *v130 = v112;
                goto LABEL_169;
              }
              *v112 = v155;
              *(_QWORD *)&v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                v131 = *(_QWORD *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97)
                    v131 %= v97;
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v155 + 1);
LABEL_170:
              v95 = *(_QWORD *)(v95 + 8);
              v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            v153 = v170;
            sub_20B8403D4((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              v133 = 0;
              v134 = (v150 - (uint64_t)v149) >> 3;
              v135 = *v149;
              v136 = v149;
              do
              {
                v137 = v136;
                v136 += v133 + 1;
                v138 = 2 * v133;
                v133 = (2 * v133) | 1;
                v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  v133 = v139;
                }
                *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              v140 = (_QWORD *)(v150 - 8);
              if (v136 == (_QWORD *)(v150 - 8))
              {
                *v136 = v135;
              }
              else
              {
                *v136 = *v140;
                *v140 = v135;
                sub_20B8446A0((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            v83 = *((_QWORD *)&v168 + 1) - 8;
            *((_QWORD *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((_QWORD *)&v168 + 1) = v84;
          operator delete(v84);
        }
        v168 = v159;
        v169 = v160;
        v141 = v172;
        v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        v142 = *(_QWORD *)&v157[24];
        v143 = v174;
        *(_QWORD *)&v157[24] = v173[0];
        v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        v174 = v158;
        v158 = v143;
        sub_20B84055C((uint64_t)v154);
        sub_20B8405A4(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v168)
    operator delete((void *)v168);
  sub_20B8405A4(&v171);
}

void sub_20B8400F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  sub_20B84055C((uint64_t)&a21);
  sub_20B8405A4(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  sub_20B828E34((void ***)&a27);
  if (v59)
    operator delete(v59);
  sub_20B8405A4((_QWORD *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_20B840268(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20B80CDD8();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_20B800BC0();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_20B8403D4(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_20B80CDD8();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_20B800BC0();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  return sub_20B8446A0(*a1, v6, (v6 - *a1) >> 3);
}

void sub_20B8404D4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_20B8446FC(a1, a2 - v4);
  }
}

uint64_t sub_20B84055C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_20B8405A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24C466908;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x20BD39C80](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B840620(_QWORD *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  void *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  void *v47[3];
  void *v48[2];
  float *v49;
  void *__p[2];
  float *v51;

  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_20B814634(__p, v6, v48);
    sub_20B83ED68(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v48;
    v51 = v49;
    v46 = sub_20B852250();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = 0;
    v7 = ((a1[4] - a1[3]) >> 3) - 1;
    v8 = **(_QWORD **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      v10 = (float *)v48[0];
      v48[1] = v48[0];
      v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      v13 = *v11;
      v12 = v11[1];
      v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(_QWORD *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            v16 = (float *)v48[0];
            v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              sub_20B80CDD8();
            v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)sub_20B8127BC((uint64_t)&v49, v20);
              v16 = (float *)v48[0];
              v10 = (float *)v48[1];
            }
            else
            {
              v21 = 0;
            }
            v22 = (float *)&v21[4 * v17];
            *v22 = v15;
            v23 = v22 + 1;
            while (v10 != v16)
            {
              v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            v49 = (float *)&v21[4 * v20];
            if (v16)
              operator delete(v16);
            v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        v14 = (float *)v48[0];
      }
      sub_20B83D36C((uint64_t)v47, v14, v10);
      v25 = *(_DWORD *)(v8 + 16);
      v26 = a1[9];
      v8 = *(_QWORD *)(*(_QWORD *)(v26 + 24 * v25) + 8 * (int)sub_20B83D658((uint64_t)v47, v46, (double **)v47));
      v27 = **(_QWORD **)a1[9];
      if (v8 != v27)
      {
        v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        v29 = a2[1];
        v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          v31 = ((char *)v29 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_20B80CDD8();
          v32 = v28 - (_QWORD)*a2;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)sub_20B800BE8((uint64_t)(a2 + 2), v34);
          else
            v35 = 0;
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v8;
          v30 = v36 + 8;
          v38 = (char *)*a2;
          v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *((_QWORD *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v29 = v8;
          v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    v41 = (unint64_t)*a2;
    v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        v43 = v41 + 8;
        do
        {
          v44 = *(_QWORD *)(v43 - 8);
          *(_QWORD *)(v43 - 8) = *(_QWORD *)v42;
          *(_QWORD *)v42 = v44;
          v42 -= 8;
          v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20B8409D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B840A40(uint64_t a1, _QWORD *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *(float *)(a1 + 104);
  v5 = ((a2[4] - a2[3]) >> 3) - 1;
  v6 = a2[1];
  v7 = a2[2];
  sub_20B82C68C(&__p, *(int *)(a1 + 92) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(a2[3] + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = *(_DWORD **)(a1 + 40);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      sub_20B828F84(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = sub_20B828F84(v27, (uint64_t)") [", 3);
      v29 = sub_20B828F84(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_20B828F84(v29, (uint64_t)"] ", 2);
      sub_20B827FFC(&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sub_20B83E818((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(a2[3] + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sub_20B83E818((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v35))
          v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        else
          v38 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v35);
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_20B840DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B840DFC(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_20B853D84((uint64_t *)&__p);
  if (v12)
  {
    sub_20B853F94(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_20B840F98(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = a5[1];
          if (v18 >= a5[2])
          {
            v19 = sub_20B83D7AC(a5, (uint64_t)v20);
          }
          else
          {
            sub_20B83D8B8((_DWORD)a5 + 16, (_BYTE *)a5[1], (uint64_t)v20);
            v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_20B853F94(a6, a1 + 96);
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_20B840F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B840F98(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  sub_20B82C68C(a6, a5);
  v12 = sub_20B843938(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_20B843C3C((uint64_t)a6, v12);
}

void sub_20B841014(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B841030(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_20B853D84((uint64_t *)&__p);
  if (v12)
  {
    sub_20B853F94(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_20B840F98(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              sub_20B80CDD8();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)sub_20B8127BC(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_20B853F94(a6, a1 + 96);
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_20B841204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B841228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sub_20B84131C(a1);
  *(_QWORD *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(_QWORD *)v4 = &off_24C466968;
  *(_QWORD *)(v4 + 8) = a2 + 16;
  sub_20B82619C(v4);
  v5 = 0;
  *(_QWORD *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104))
        v6 = *(float *)(a1 + 104);
      *(float *)(a1 + 104) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7)
        v7 = *(float *)(a1 + 108);
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_20B8412FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B825CC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84131C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C465F10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_24C466D50;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_24C466D50;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_20B80627C((_QWORD *)(a1 + 96));
  return a1;
}

void sub_20B841388(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x20BD39C80](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_24C466D50;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x20BD39C80](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  sub_20B828F28((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B841400(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sub_20B824FC4(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_24C466968;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sub_20B853F94(&v17, v10 + 96);
  v14 = v17;
  sub_20B853D84((uint64_t *)&v17);
  if (!v14)
  {
    sub_20B841550(a3, a4, v11, &v17);
    sub_20B853F98(v13, &v17);
    sub_20B853D84((uint64_t *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sub_20B853D84((uint64_t *)&v17);
    if (!v15)
    {
      sub_20B841550(a3 + 1, a4 - 4, v12, &v17);
      sub_20B853F98(v13, &v17);
      sub_20B853D84((uint64_t *)&v17);
    }
  }
  return a1;
}

void sub_20B84151C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B825CC0(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B841550@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_20B827F10((uint64_t)v8);
    sub_20B828F84(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_20B828F84(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v8, (uint64_t)") [", 3);
    sub_20B828F84(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_20B828F84(v8, (uint64_t)"] ", 2);
    sub_20B825AE4(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x20BD39C2C](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_20B80627C(a4);
  }
}

void sub_20B8416A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B8416C4(uint64_t a1)
{
  sub_20B825CC0(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8416E8(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (a1[28])
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _DWORD *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_20B853D84((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_20B853D84((uint64_t *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_24C466A58;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_24C466928;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sub_20B83E348((uint64_t)&v25, a2, a3);
    sub_20B840A40((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_20B83EA3C(&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)sub_20B828D70((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sub_20B83E078((uint64_t)&v25);
  }
  else
  {
    sub_20B8419A4((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_20B84195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_20B83E078((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20B8419A4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sub_20B853D84((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_20B853D84((uint64_t *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_20B80CDD8();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_20BA68FCC[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_20BA68FCC[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        sub_20B83B31C("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)sub_20B828D70((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_20B841E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B841EC0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_20B853D84((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_20B828CA4((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_20B828BE0((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_20B853D84((uint64_t *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_24C466A58;
    memset(&__p[1], 0, 88);
    __p[12] = &off_24C466928;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sub_20B83E348((uint64_t)__p, a2, a3);
    sub_20B840A40(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sub_20B83F0A8(__p, v13, 0, (uint64_t *)&v38, 0.0);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20B80CDD8();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)sub_20B828D70((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = sub_20B844A60(v34, (__int128 **)&v35, v30);
      }
      else
      {
        sub_20B8449F0((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    sub_20B828E34((void ***)&v35);
    sub_20B83E078((uint64_t)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_20B828BE0((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_20B8422CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_20B828E34((void ***)&a12);
  sub_20B83E078((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B84239C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t *result;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)a1 + 16))(&v28);
  if (v28)
  {
    result = sub_20B853D84((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  result = sub_20B853D84((uint64_t *)&v28);
  if (!a3)
    goto LABEL_3;
  v28 = &off_24C466A58;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = &off_24C466928;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 1024;
  sub_20B83E348((uint64_t)&v28, a2, a3);
  sub_20B840A40(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20B840620(&v28, (void **)&v26, a5);
  v11 = v26;
  v12 = v27;
  if (v26 != v27)
  {
    v13 = 0;
    v14 = a4 + 2;
    do
    {
      v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17)
          v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        v19 = (char *)sub_20B828D70((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v16];
        *(_OWORD *)v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    v11 = v26;
  }
  if (v11)
  {
    v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_20B83E078((uint64_t)&v28);
}

void sub_20B8425E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_20B83E078((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20B842628(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  uint64_t v14;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  char *v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 *v48;
  char *v49;
  uint64_t v50;
  double v51;
  double v52;
  float v53;
  __int128 *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  void *v71;
  void *v72;
  void *v73;
  float v74;
  __int128 *i;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  float v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  float v96;
  double v97;
  long double v98;
  long double v99;
  double v100;
  float v101;
  uint64_t *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  float v112;
  void *__p[13];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  __int128 *v120;
  __int128 *v121;
  char *v122;
  void *v123[3];
  void **v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t (**v131)();
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v124);
  if (v124)
  {
    sub_20B853D84((uint64_t *)&v124);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sub_20B853D84((uint64_t *)&v124);
  if (!a3)
    goto LABEL_3;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v124 = (void **)&off_24C466A58;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  v131 = &off_24C466928;
  v132 = 0u;
  v133 = 0u;
  v134 = 0;
  v135 = 1024;
  sub_20B83E348((uint64_t)&v124, a2, a3);
  sub_20B840A40(v14, &v124);
  sub_20B83ED68(&v124, (uint64_t *)v123, a8);
  v16 = *((float *)v123[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v127 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) & ~((int)(((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_20B8520F8() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v34 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
        sub_20B828F84(v34, (uint64_t)"(", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        v36 = sub_20B828F84(v35, (uint64_t)") ", 2);
        v37 = sub_20B828F84(v36, (uint64_t)"LOG(", 4);
        v38 = sub_20B828F84(v37, (uint64_t)"ERROR", 5);
        v39 = sub_20B828F84(v38, (uint64_t)") ", 2);
        sub_20B828F84(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_20B827FFC(__p);
      }
      goto LABEL_113;
    }
    v103 = a4;
    v104 = a6;
    v105 = v14;
    v107 = a2;
    v109 = a3;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    sub_20B83EA3C(&v124, (uint64_t)__p);
    v17 = (uint64_t *)__p[0];
    v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v19 = v121;
      do
      {
        v20 = *v17;
        if (v19 >= (__int128 *)v122)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v120) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v22)
            v22 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v22;
          v24 = (char *)sub_20B828D70((uint64_t)&v122, v23);
          v26 = &v24[24 * v21];
          *(_OWORD *)v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          v28 = v120;
          v27 = v121;
          v29 = (__int128 *)v26;
          if (v121 != v120)
          {
            do
            {
              v30 = *(__int128 *)((char *)v27 - 24);
              *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
              *(__int128 *)((char *)v29 - 24) = v30;
              v29 = (__int128 *)((char *)v29 - 24);
              v27 = (__int128 *)((char *)v27 - 24);
            }
            while (v27 != v28);
            v27 = v120;
          }
          v19 = (__int128 *)(v26 + 24);
          v120 = v29;
          v121 = (__int128 *)(v26 + 24);
          v122 = &v24[24 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          v19 = (__int128 *)((char *)v19 + 24);
        }
        v121 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    v118 = 0.0;
    v31 = v137;
    if ((unint64_t)v137 >= v138)
    {
      v33 = sub_20B844CBC(&v136, &v120, &v118);
      a2 = v107;
      a3 = v109;
    }
    else
    {
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      sub_20B828CA4(v31, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
      a2 = v107;
      a3 = v109;
      v32 = v118;
      *((float *)v31 + 6) = v32;
      v33 = (uint64_t)(v31 + 32);
    }
    a4 = v103;
    v14 = v105;
    a6 = v104;
    v137 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
  }
  if ((a5 & 1) != 0)
  {
    sub_20B83F0A8(&v124, a4 + 1, 1, (uint64_t *)&v120, a8);
    v102 = j;
    if (a6)
    {
      sub_20B844DCC(&v118, ((char *)v121 - (char *)v120) >> 5);
      v41 = v120;
      v40 = v121;
      if (v121 != v120)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          if (&v41[v42] != (__int128 *)(*(_QWORD *)&v118 + v43))
          {
            sub_20B844E6C((char *)(*(_QWORD *)&v118 + v43), *(char **)&v41[v42], *((_QWORD *)&v41[v42] + 1), (uint64_t)(*((_QWORD *)&v41[v42] + 1) - *(_QWORD *)&v41[v42]) >> 3);
            v41 = v120;
            v40 = v121;
          }
          ++v44;
          v43 += 24;
          v42 += 2;
        }
        while (v44 < ((char *)v40 - (char *)v41) >> 5);
      }
      sub_20B83EA3C(&v124, (uint64_t)__p);
      v45 = sub_20B844F74(*(uint64_t *)&v118, *(uint64_t *)&v119, (uint64_t)__p);
      v46 = (int)(-1431655765 * ((unint64_t)(v45 - *(_QWORD *)&v118) >> 3));
      if (v46 == ((char *)v121 - (char *)v120) >> 5)
      {
        v48 = v121 - 2;
        v47 = (void *)*((_QWORD *)v121 - 4);
        if (v47)
        {
          *((_QWORD *)v121 - 3) = v47;
          operator delete(v47);
        }
      }
      else
      {
        sub_20B844FE0((__n128 *)&v120[2 * v46 + 2], (__n128 *)v121, (uint64_t)&v120[2 * v46]);
        v48 = v68;
        v69 = v121;
        if (v121 != v68)
        {
          v70 = v121;
          do
          {
            v72 = (void *)*((_QWORD *)v70 - 4);
            v70 -= 2;
            v71 = v72;
            if (v72)
            {
              *((_QWORD *)v69 - 3) = v71;
              operator delete(v71);
            }
            v69 = v70;
          }
          while (v70 != v48);
        }
      }
      v121 = v48;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v118;
      sub_20B83B400((void ***)__p);
    }
    v73 = (void *)*((_QWORD *)v121 - 4);
    v111 = v121 - 2;
    v74 = *((float *)v121 - 2);
    if (v73)
    {
      *((_QWORD *)v121 - 3) = v73;
      operator delete(v73);
    }
    v121 = v111;
    for (i = v120; i != v111; i += 2)
    {
      memset(__p, 0, 24);
      v76 = *(uint64_t **)i;
      v77 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v77)
      {
        v79 = 0.0;
      }
      else
      {
        v78 = 0;
        v79 = 0.0;
        do
        {
          v80 = *v76;
          v81 = *(float *)(*v76 + 32);
          if (v78 >= __p[2])
          {
            v82 = 0xAAAAAAAAAAAAAAABLL * ((v78 - (char *)__p[0]) >> 3);
            v83 = v82 + 1;
            if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20B80CDD8();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v83)
              v83 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v84 = 0xAAAAAAAAAAAAAAALL;
            else
              v84 = v83;
            v85 = (char *)sub_20B828D70((uint64_t)&__p[2], v84);
            v87 = &v85[24 * v82];
            *(_OWORD *)v87 = *(_OWORD *)v80;
            *((_DWORD *)v87 + 4) = *(_DWORD *)(v80 + 28);
            v89 = (char *)__p[0];
            v88 = (char *)__p[1];
            v90 = v87;
            if (__p[1] != __p[0])
            {
              do
              {
                v91 = *(_OWORD *)(v88 - 24);
                *((_QWORD *)v90 - 1) = *((_QWORD *)v88 - 1);
                *(_OWORD *)(v90 - 24) = v91;
                v90 -= 24;
                v88 -= 24;
              }
              while (v88 != v89);
              v88 = (char *)__p[0];
            }
            v78 = v87 + 24;
            __p[0] = v90;
            __p[1] = v87 + 24;
            __p[2] = &v85[24 * v86];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *(_OWORD *)v78 = *(_OWORD *)v80;
            *((_DWORD *)v78 + 4) = *(_DWORD *)(v80 + 28);
            v78 += 24;
          }
          __p[1] = v78;
          v79 = v79 + (float)(a8 * v81);
          ++v76;
        }
        while (v76 != v77);
      }
      *(float *)&v118 = v79 - v16;
      v92 = v137;
      if ((unint64_t)v137 >= v138)
      {
        v93 = sub_20B845048(&v136, (__int128 **)__p, &v118);
      }
      else
      {
        *(_QWORD *)v137 = 0;
        *((_QWORD *)v92 + 1) = 0;
        *((_QWORD *)v92 + 2) = 0;
        sub_20B828CA4(v92, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v92 + 6) = LODWORD(v118);
        v93 = (uint64_t)(v92 + 32);
      }
      v137 = (char *)v93;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v94 = v136;
    v95 = v137;
    for (j = v102; (char *)v94 != v95; v94 += 32)
    {
      v96 = *(float *)(v94 + 24);
      if (v96 != 0.0)
      {
        v97 = v96 - v74;
        v98 = exp(v97);
        if (v97 <= -10.0)
        {
          v100 = v97 + v98 * -0.5 + v98 * v98 / 24.0 + pow(v98, 4.0) / -2880.0;
        }
        else
        {
          v99 = expm1(-v98);
          v100 = log(-v99);
        }
        v101 = v100;
        *(float *)(v94 + 24) = v101;
      }
    }
    __p[0] = &v120;
    sub_20B828E34((void ***)__p);
    v50 = v136;
    v49 = v137;
  }
  else
  {
    v50 = v136;
    v49 = v137;
    if (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5))
    {
      v108 = a2;
      v110 = a3;
      v106 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_24C466A58;
        __p[12] = &off_24C466928;
        v114 = 0u;
        v115 = 0u;
        v116 = 0;
        v117 = 1024;
        sub_20B83E348((uint64_t)__p, a2, a3);
        sub_20B840A40(v14, __p);
        v120 = 0;
        v121 = 0;
        v122 = 0;
        sub_20B840620(__p, (void **)&v118, a8);
        v52 = v118;
        v51 = v119;
        v53 = 0.0;
        if (*(_QWORD *)&v118 != *(_QWORD *)&v119)
        {
          v54 = v121;
          do
          {
            v55 = **(_QWORD **)&v52;
            if (v54 >= (__int128 *)v122)
            {
              v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v120) >> 3);
              v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20B80CDD8();
              if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v57)
                v57 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
                v58 = 0xAAAAAAAAAAAAAAALL;
              else
                v58 = v57;
              v59 = (char *)sub_20B828D70((uint64_t)&v122, v58);
              v61 = &v59[24 * v56];
              *(_OWORD *)v61 = *(_OWORD *)v55;
              *((_DWORD *)v61 + 4) = *(_DWORD *)(v55 + 28);
              v63 = v120;
              v62 = v121;
              v64 = (__int128 *)v61;
              if (v121 != v120)
              {
                do
                {
                  v65 = *(__int128 *)((char *)v62 - 24);
                  *((_QWORD *)v64 - 1) = *((_QWORD *)v62 - 1);
                  *(__int128 *)((char *)v64 - 24) = v65;
                  v64 = (__int128 *)((char *)v64 - 24);
                  v62 = (__int128 *)((char *)v62 - 24);
                }
                while (v62 != v63);
                v62 = v120;
              }
              v54 = (__int128 *)(v61 + 24);
              v120 = v64;
              v121 = (__int128 *)(v61 + 24);
              v122 = &v59[24 * v60];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v54 = *(_OWORD *)v55;
              *((_DWORD *)v54 + 4) = *(_DWORD *)(v55 + 28);
              v54 = (__int128 *)((char *)v54 + 24);
            }
            v121 = v54;
            v53 = v53 + (float)(a8 * *(float *)(v55 + 32));
            *(_QWORD *)&v52 += 8;
          }
          while (*(_QWORD *)&v52 != *(_QWORD *)&v51);
        }
        v112 = v53 - v16;
        v66 = v137;
        if ((unint64_t)v137 >= v138)
        {
          v67 = sub_20B845048(&v136, &v120, &v112);
        }
        else
        {
          *(_QWORD *)v137 = 0;
          *((_QWORD *)v66 + 1) = 0;
          *((_QWORD *)v66 + 2) = 0;
          sub_20B828CA4(v66, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
          *((float *)v66 + 6) = v112;
          v67 = (uint64_t)(v66 + 32);
        }
        a2 = v108;
        a3 = v110;
        v14 = v106;
        v137 = (char *)v67;
        if (v118 != 0.0)
        {
          v119 = v118;
          operator delete(*(void **)&v118);
        }
        if (v120)
        {
          v121 = v120;
          operator delete(v120);
        }
        sub_20B83E078((uint64_t)__p);
        v50 = v136;
        v49 = v137;
      }
      while (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5));
    }
  }
  *j = v50;
  j[1] = (uint64_t)v49;
  j[2] = v138;
  j = &v136;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v123[0])
  {
    v123[1] = v123[0];
    operator delete(v123[0]);
  }
  sub_20B83E078((uint64_t)&v124);
  v124 = (void **)&v136;
  sub_20B828E34(&v124);
}

void sub_20B8430C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  sub_20B83B400((void ***)&__p);
  __p = &a38;
  sub_20B828E34((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sub_20B83E078((uint64_t)&a44);
  a44 = (void **)(v45 - 160);
  sub_20B828E34(&a44);
  _Unwind_Resume(a1);
}

float sub_20B843234(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  uint64_t (**v8)();
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_24C466A58;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_24C466928;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sub_20B83E348((uint64_t)&v8, a2, a3);
  sub_20B840A40(a1, &v8);
  v6 = sub_20B83EEEC(&v8, a4);
  sub_20B83E078((uint64_t)&v8);
  return v6;
}

void sub_20B8432C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83E078((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B8432DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *__p;
  _QWORD *v46;
  uint64_t v47;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  sub_20B83AC68((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v46 = 0;
  v47 = 0;
  __p = 0;
  sub_20B8441CC(&__p, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v11 = __p;
  v12 = v46;
  if (__p == v46)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  sub_20B83AC68((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  sub_20B8441CC(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v19 = v40;
  v20 = v41;
  if (v40 != v41)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v40;
    if (!v40)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v40)
  {
LABEL_24:
    v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_20B8520F8() <= 1)
  {
    LOBYTE(v43) = 0;
    v27 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    sub_20B828F84(v27, (uint64_t)"(", 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_20B828F84(v28, (uint64_t)") ", 2);
    v30 = sub_20B828F84(v29, (uint64_t)"LOG(", 4);
    v31 = sub_20B828F84(v30, (uint64_t)"WARNING", 7);
    v32 = sub_20B828F84(v31, (uint64_t)") ", 2);
    v33 = sub_20B828F84(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v34 = sub_20B828F84(v33, a2, a3);
    sub_20B828F84(v34, (uint64_t)", Score: ", 9);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = sub_20B828F84(v35, (uint64_t)". Right: ", 9);
    v37 = sub_20B828F84(v36, a4, a5);
    sub_20B828F84(v37, (uint64_t)", Score: ", 9);
    v38 = (_QWORD *)std::ostream::operator<<();
    sub_20B828F84(v38, (uint64_t)".", 1);
    sub_20B827FFC(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_20B8436B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B84370C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_20B826F64(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_20B843848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8438A0()
{
  return 1;
}

uint64_t sub_20B8438A8()
{
  return 1;
}

uint64_t sub_20B8438B0()
{
  return 1;
}

uint64_t sub_20B8438B8()
{
  return 1;
}

_QWORD *sub_20B8438C0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B812928(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B84391C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B843938(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  sub_20B843C6C(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            sub_20B843C6C(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  sub_20B84402C(v43);
  return v24;
}

void sub_20B843C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B84402C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B843C3C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_20B8440C0((void **)a1, a2 - v2);
  }
}

__n128 sub_20B843C6C(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20B843D18(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_20B843D18(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20B800BE8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_20B800764(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_20B800878((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20B800BE8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_20B800994(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20B800AA8((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20B843FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84402C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_20B801754((uint64_t)a1);
}

void sub_20B8440C0(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20B80CDD8();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20B829AD0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *sub_20B8441CC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B82C700(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B844228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B844244(_QWORD *a1)
{
  sub_20B844268(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B844268(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24C466928;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x20BD39C80](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B8442E4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20B828D70(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20B844448(a1, &v15);
    sub_20B83CBC8((uint64_t)&v15);
  }
}

void sub_20B844434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B844448(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B8444BC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B8444BC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B84455C((uint64_t)v11);
  return v9;
}

uint64_t sub_20B84455C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83CB84(a1);
  return a1;
}

uint64_t sub_20B844590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_20B8438C0((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B844648((uint64_t)v8);
  return v4;
}

void sub_20B844634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B844648((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B844648(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B828DE8(a1);
  return a1;
}

void sub_20B84467C(_QWORD *a1)
{
  sub_20B8405A4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8446A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_20B8446FC(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      sub_20B80CDD8();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)sub_20B8156D4(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_20B844820(a1, v19);
    return sub_20B83D17C((uint64_t)v19);
  }
  return result;
}

void sub_20B84480C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B844820(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B844894((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B844894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B84493C((uint64_t)v11);
  return v9;
}

uint64_t sub_20B84493C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83D138(a1);
  return a1;
}

_QWORD *sub_20B844970(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B812928(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B8449D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_20B8449F0(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_20B828CA4((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_20B844A58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B844A60(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B8156D4(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_20B828CA4(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_20B844B6C(a1, v16);
  v14 = a1[1];
  sub_20B83D17C((uint64_t)v16);
  return v14;
}

void sub_20B844B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B844B6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B844BE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B844BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B844C88((uint64_t)v11);
  return v9;
}

uint64_t sub_20B844C88(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83D138(a1);
  return a1;
}

uint64_t sub_20B844CBC(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B8156D4(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_20B828CA4(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_20B844B6C(a1, v17);
  v15 = a1[1];
  sub_20B83D17C((uint64_t)v17);
  return v15;
}

void sub_20B844DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B844DCC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B828D20(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20B844E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B83B400(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B844E6C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_20B80CDD8();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20B812928(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_20B844F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__n128 *sub_20B844FE0(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_20B824BE4(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_20B845048(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B8156D4(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_20B828CA4(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_20B844B6C(a1, v16);
  v14 = a1[1];
  sub_20B83D17C((uint64_t)v16);
  return v14;
}

void sub_20B845140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B845154(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20B84131C(a1);
  *v4 = &off_24C466A78;
  v4[1] = a2 + 16;
  sub_20B82619C((uint64_t)v4);
  return a1;
}

void sub_20B845190(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B825CC0(v1);
  _Unwind_Resume(a1);
}

void sub_20B8451AC(uint64_t a1)
{
  sub_20B825CC0(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8451D0(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_20B853D84(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_20B853D84(&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sub_20B82D91C(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20B80CDD8();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)sub_20B828D70((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_20B845390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8453B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20B84131C(a1);
  *v4 = &off_24C466818;
  v4[1] = a2 + 16;
  sub_20B82619C((uint64_t)v4);
  return a1;
}

void sub_20B8453F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B825CC0(v1);
  _Unwind_Resume(a1);
}

void sub_20B84540C(uint64_t a1)
{
  sub_20B825CC0(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B845430(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sub_20B853D84((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_20B853D84((uint64_t *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20B8272A0(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)sub_20B828D70((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_20B845614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B845644()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_20B8471AC((uint64_t)&unk_25472C4C8, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C4C8);
}

void sub_20B845698()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_20B846694((uint64_t)&unk_25472C470, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C470);
}

void sub_20B8456EC()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_20B845740((uint64_t)&unk_25472C420, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C420);
}

uint64_t sub_20B845740(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C466688;
  *(_QWORD *)(a1 + 8) = a2;
  sub_20B856504(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_254728008))
    sub_20B860CA8(dword_254728008);
  *(_QWORD *)(a1 + 48) = &qword_25472C7C0;
  *(_QWORD *)(a1 + 56) = &qword_25472C7C0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20B8457B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8457C4(uint64_t a1)
{
  sub_20B8457FC(a1);
  sub_20B845920((uint64_t *)(a1 + 8));
  sub_20B8565E0(a1 + 16);
  return a1;
}

uint64_t *sub_20B8457FC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = sub_20B855F80(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_25472C7C0)
  {
    v6 = sub_20B847BEC(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x20BD39CB0](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 56);
  v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_25472C7C0)
  {
    v10 = sub_20B847BEC(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x20BD39CB0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_20B845908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B845920(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x20BD39CB0);
    }
  }
  return result;
}

void sub_20B845988(uint64_t a1)
{
  sub_20B8457C4(a1);
  JUMPOUT(0x20BD39CB0);
}

unsigned __int8 *sub_20B8459AC(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_20B859FD0((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v3 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v5 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_20B845A78(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  void *v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36[2];

  *(_QWORD *)v36 = a2;
  v5 = 0;
  if ((sub_20B847CBC((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v36 + 1);
      v9 = **(_BYTE **)v36;
      if ((char)**(_BYTE **)v36 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v27 = sub_20B862580(*(uint64_t *)v36, v10 - 128);
          *(_QWORD *)v36 = v27;
          if (!v27)
            goto LABEL_56;
          v8 = (char *)v27;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v36 + 2);
      }
      *(_QWORD *)v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = v8 + 1;
          v15 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *v14;
          v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            v30 = sub_20B8624D0((uint64_t)v8, v15);
            *(_QWORD *)v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = v8 + 2;
LABEL_17:
            *(_QWORD *)v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 2u;
          v17 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          v18 = (std::string *)sub_20B854EC4(v13, (uint64_t)v12);
          v19 = (void *)sub_20B862634(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v32 = sub_20B8624D0((uint64_t)v8, v21);
            *(_QWORD *)v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v34 = sub_20B8624D0((uint64_t)v8, v24);
            *(_QWORD *)v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
              v8 = *(char **)v36;
            }
            v19 = sub_20B862A60(v9, v29, v8, a3);
          }
          else
          {
            v19 = sub_20B85B570((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_25472C420, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(_QWORD *)v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(_QWORD *)v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((sub_20B847CBC((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v36;
}

char *sub_20B845D9C(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_20B855544((uint64_t)a3, v4);
    v8 = *(_DWORD *)(a1 + 64);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = sub_20B846040(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = sub_20B846040(a3, 3, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v15 = *(_DWORD *)(a1 + 68);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 72);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = sub_20B85C1A4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 8);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v19) >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_20B846040(unint64_t *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return sub_20B855868(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return sub_20B855868(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = a4 + 2;
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = a4 + 2;
    }
  }
  else
  {
    *a4 = v10;
    v11 = a4 + 1;
  }
  *v11 = v4;
  v15 = v11 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return &v15[v4];
}

uint64_t sub_20B846158(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = sub_20B85ED38(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_20B8462C8(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C466688)
    sub_20B848590(a1, (uint64_t)a2, a3);
  sub_20B8462F0(a1, (uint64_t)a2);
}

void sub_20B8462F0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = sub_20B855F80(v21, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v21);
  }
  sub_20B85A06C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_20B854E8C((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_20B854E8C((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_20B846470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B846488(uint64_t a1)
{
  return sub_20B85B23C(a1 + 16);
}

uint64_t *sub_20B846490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  sub_20B85B02C(a1 + 16, a2 + 16);
  v5 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = sub_20B847DF8((unint64_t *)(a2 + 8));
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = sub_20B847DF8((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v8;
    v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *(_QWORD *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v14;
  v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_25472C7C0 || *(uint64_t **)(a2 + 48) != &qword_25472C7C0)
  {
    v17 = sub_20B854EC4((uint64_t *)(a1 + 48), v16);
    v18 = sub_20B854EC4((uint64_t *)(a2 + 48), v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)(a1 + 56);
  if (v7)
    v9 = (uint64_t *)*v9;
  if ((uint64_t *)*result != &qword_25472C7C0 || *(uint64_t **)(a2 + 56) != &qword_25472C7C0)
  {
    v23 = sub_20B854EC4(result, (uint64_t)v9);
    result = sub_20B854EC4((uint64_t *)(a2 + 56), (uint64_t)v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

_QWORD *sub_20B846684@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_20B846694(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C4660E0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_20B856504(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_254728020))
    sub_20B860CA8(dword_254728020);
  *(_QWORD *)(a1 + 72) = &qword_25472C7C0;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_20B846718(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_20B848008(v2);
  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B846738(uint64_t a1)
{
  sub_20B846778(a1);
  sub_20B845920((uint64_t *)(a1 + 8));
  sub_20B848008((uint64_t *)(a1 + 48));
  sub_20B8565E0(a1 + 16);
  return a1;
}

uint64_t sub_20B846778(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = sub_20B855F80(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_20B8560B8((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 72);
  v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_25472C7C0)
  {
    v7 = sub_20B847BEC(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x20BD39CB0](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_20B84683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B846858(uint64_t a1)
{
  sub_20B846738(a1);
  JUMPOUT(0x20BD39CB0);
}

void *sub_20B84687C()
{
  if (atomic_load(dword_254728020))
    sub_20B860CA8(dword_254728020);
  return &unk_25472C470;
}

unsigned __int8 *sub_20B8468B4(uint64_t a1)
{
  unsigned __int8 *result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_20B859FD0((unsigned __int8 *)(a1 + 16));
  result = sub_20B847EB0((unsigned __int8 *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_20B846944(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::string *v25;
  uint64_t v26;
  unsigned int v27;
  std::string *v28;
  int v29[2];

  *(_QWORD *)v29 = a2;
  v5 = 0;
  if ((sub_20B847CBC((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v29 + 1);
      v9 = **(_BYTE **)v29;
      if (((char)**(_BYTE **)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v26 = sub_20B862580(*(uint64_t *)v29, v10 - 128);
      *(_QWORD *)v29 = v26;
      if (!v26)
        goto LABEL_48;
      v8 = (char *)v26;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)v8;
          *(_QWORD *)v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = v8 - 1;
          while (1)
          {
            v16 = (unsigned __int8 *)(v15 + 1);
            *(_QWORD *)v29 = v15 + 1;
            v17 = *(int **)(a1 + 64);
            if (!v17)
              break;
            v18 = *(int *)(a1 + 56);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_20B86768C(a1 + 48, v19 + 1);
                v17 = *(int **)(a1 + 64);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = sub_20B847980(*(_QWORD *)(a1 + 48));
              v21 = *(_QWORD *)(a1 + 64);
              v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_31:
            v15 = (char *)sub_20B846BF8(a3, v20, v16);
            *(_QWORD *)v29 = v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
            v8 = *(char **)v29;
          }
          v14 = sub_20B862A60(v9, v28, v8, a3);
        }
        else
        {
          v14 = sub_20B85B570((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_25472C470, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *(_DWORD *)(a1 + 40) |= 1u;
      v23 = *(_QWORD *)(a1 + 8);
      v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = (_QWORD *)*v24;
      v25 = (std::string *)sub_20B854EC4((uint64_t *)(a1 + 72), (uint64_t)v24);
      v14 = (void *)sub_20B862634(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(_QWORD *)v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(_QWORD *)v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((sub_20B847CBC((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v29 + 2);
LABEL_7:
    *(_QWORD *)v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v29;
}

uint64_t sub_20B846BF8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_20B8480DC((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_20B845A78(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_20B846CBC(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
    v4 = sub_20B846040(a3, 1, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4)
        v4 = sub_20B855544((uint64_t)a3, v4);
      v9 = sub_20B83A950(a1 + 48, i);
      *v4 = 18;
      v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = sub_20B845D9C(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4)
      v4 = sub_20B855544((uint64_t)a3, v4);
    v15 = *(_DWORD *)(a1 + 80);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = sub_20B85C1A4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v16) >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_20B846E9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = sub_20B85ED38(a1 + 16);
  v3 = *(int *)(a1 + 56);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_20B846158(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_20B846FA4(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C4660E0)
    sub_20B848590(a1, (uint64_t)a2, a3);
  sub_20B846FCC(a1, (uint64_t)a2);
}

void sub_20B846FCC(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = sub_20B855F80(v18, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v18);
  }
  sub_20B85A06C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_20B848194(a1 + 48, a2 + 48);
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_20B854E8C((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_20B8470F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B847110(uint64_t a1)
{
  uint64_t result;

  result = sub_20B85B23C(a1 + 16);
  if ((_DWORD)result)
    return sub_20B847148(a1 + 48);
  return result;
}

BOOL sub_20B847148(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_20B83A950(a1, v2);
  }
  while ((sub_20B85B23C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_20B84719C@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_20B8471AC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C466298;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_254727F98))
    sub_20B860CA8(dword_254727F98);
  return a1;
}

void sub_20B847208(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B84833C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B847220(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = sub_20B855F80(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
LABEL_4:
  sub_20B845920(v3);
  sub_20B84833C((uint64_t *)(a1 + 16));
  return a1;
}

void sub_20B8472B4(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  sub_20B854468(a1);
}

void sub_20B8472D8(uint64_t a1)
{
  sub_20B847220(a1);
  JUMPOUT(0x20BD39CB0);
}

unsigned __int8 *sub_20B8472FC(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unint64_t v4;

  result = sub_20B847F5C((unsigned __int8 *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_20B84734C(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  char *v22;

  v22 = a2;
  if ((sub_20B847CBC((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v22 + 1;
      v7 = *v22;
      if ((*v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v19 = (char *)sub_20B862580((uint64_t)v22, v8 - 128);
      v22 = v19;
      if (!v19)
        return 0;
      v6 = v19;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v22 = v11 + 1;
          v13 = *(int **)(a1 + 32);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 24);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_20B86768C(a1 + 16, v15 + 1);
              v13 = *(int **)(a1 + 32);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_20B847A34(*(_QWORD *)(a1 + 16));
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          v16 = *(_QWORD *)&v13[2 * v14 + 2];
LABEL_24:
          v11 = (char *)sub_20B847528(a3, v16, v12);
          v22 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
        v6 = v22;
      }
      v22 = (char *)sub_20B862A60(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (sub_20B847CBC((uint64_t)a3, &v22, a3[11].i32[1]))
        return v22;
    }
    v6 = v22 + 2;
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_20B847528(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_20B8480DC((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_20B846944(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_20B8475EC(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst)
        __dst = sub_20B855544((uint64_t)a3, __dst);
      v8 = sub_20B83AA2C(a1 + 16, i);
      *__dst = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        v10 = __dst + 2;
      }
      __dst = sub_20B846CBC(v8, v10, a3);
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return __dst;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)__dst) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_20B847754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *(int *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sub_20B846E9C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void sub_20B8477FC(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C466298)
    sub_20B848590(a1, (uint64_t)a2, a3);
  sub_20B847824(a1, (uint64_t)a2);
}

void sub_20B847824(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = sub_20B855F80(v14, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v14);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_20B8483E0(a1 + 16, a2 + 16);
}

void sub_20B8478EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B847904(uint64_t a1)
{
  return sub_20B84790C(a1 + 16);
}

BOOL sub_20B84790C(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_20B83AA2C(a1, v2);
    if (!sub_20B85B23C(v5 + 16))
      break;
  }
  while (sub_20B847148(v5 + 48));
  return v3 < 1;
}

_QWORD *sub_20B847970@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_20B847980(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CC78, 80);
    v2 = sub_20B854A60(a1, 80);
    sub_20B845740(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B845740(v2, 0);
  }
  return v2;
}

void sub_20B847A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B847A34(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CBA8, 88);
    v2 = sub_20B854A60(a1, 88);
    sub_20B846694(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B846694(v2, 0);
  }
  return v2;
}

void sub_20B847AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_20B847AE8(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CC00, 48);
    v2 = sub_20B854A60(a1, 48);
    sub_20B8471AC(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B8471AC(v2, 0);
  }
  return v2;
}

void sub_20B847B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_20B847B9C()
{
  return sub_20B847980(0);
}

uint64_t sub_20B847BA4(uint64_t a1, uint64_t a2)
{
  return sub_20B847980(a2);
}

uint64_t sub_20B847BAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_20B847BB4()
{
  return 0;
}

uint64_t sub_20B847BBC()
{
  return sub_20B847A34(0);
}

uint64_t sub_20B847BC4(uint64_t a1, uint64_t a2)
{
  return sub_20B847A34(a2);
}

uint64_t sub_20B847BCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_20B847BD4()
{
  return sub_20B847AE8(0);
}

uint64_t sub_20B847BDC(uint64_t a1, uint64_t a2)
{
  return sub_20B847AE8(a2);
}

uint64_t sub_20B847BE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_20B847BEC(uint64_t *a1)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *a1;
  if ((result & 1) != 0)
  {
    sub_20B855F68((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = sub_20B855F80(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_20B8560B0((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v6);
    result = *a1;
  }
  if (!result)
  {
    sub_20B855F68((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = sub_20B855F80(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_20B8560B0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_20B847C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B847CBC(uint64_t a1, char **a2, int a3)
{
  char *v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = *a2;
  if (!*a2)
  {
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = sub_20B855F80(v13, "CHECK failed: *ptr: ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
    v6 = *a2;
  }
  if ((unint64_t)v6 < *(_QWORD *)a1)
    return 0;
  v9 = (_DWORD)v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = sub_20B855F80(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(_QWORD *)(a1 + 16))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = sub_20B861CA8(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_20B847DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20B847DF8(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    v3 = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32), &unk_24C45D288, 32);
  v3 = sub_20B85477C((unint64_t *)v2, 0x20uLL, (uint64_t)sub_20B847E9C);
LABEL_8:
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(_QWORD *)v3 = v2;
  return v3 + 8;
}

void sub_20B847E9C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unsigned __int8 *sub_20B847EB0(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_20B855F80(v7, "CHECK failed: (n) >= (0): ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_20B8560B8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_20B8459AC(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_20B847F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B847F5C(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_20B855F80(v7, "CHECK failed: (n) >= (0): ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_20B8560B8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_20B8468B4(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_20B847FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B848008(uint64_t *a1)
{
  sub_20B848030(a1);
  return sub_20B8480AC(a1);
}

void sub_20B848030(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_20B8457C4(*v3);
          MEMORY[0x20BD39CB0](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_20B8480AC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    sub_20B854478(v2);
  return a1;
}

uint64_t sub_20B8480DC(uint64_t a1, int a2, unsigned int a3)
{
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  if (a3 >= 0x7FFFFFF0)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = sub_20B855F80(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_20B8560B0((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = a2 - v7 + a3;
  *(_QWORD *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_20B84817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B848194(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_20B855F80(v11, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_20B8676A0((uint64_t *)a1, v5);
    sub_20B848280((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_20B848268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B848280(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_20B84832C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_20B847980(v18);
      sub_20B84832C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_20B84832C(uint64_t a1, uint64_t a2)
{
  sub_20B8462F0(a2, a1);
}

uint64_t *sub_20B84833C(uint64_t *a1)
{
  sub_20B848364(a1);
  return sub_20B8480AC(a1);
}

void sub_20B848364(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_20B846738(*v3);
          MEMORY[0x20BD39CB0](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_20B8483E0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_20B855F80(v11, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_20B8676A0((uint64_t *)a1, v5);
    sub_20B8484CC((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_20B8484B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B8484CC(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_20B848578(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_20B847A34(v18);
      sub_20B848578(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_20B848578(uint64_t a1, uint64_t a2)
{
  sub_20B846FCC(a2, a1);
}

void sub_20B848588(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sub_20B848590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_20B848588("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_20B8485B4()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_20B84E96C((uint64_t)&unk_25472C748, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C748);
}

void sub_20B848608()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_20B84E090(qword_25472C708, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)qword_25472C708);
}

void sub_20B84865C()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_20B84C484((uint64_t)&unk_25472C640, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C640);
}

void sub_20B8486B0()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_20B84D890((uint64_t)&unk_25472C6C0, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C6C0);
}

void sub_20B848704()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  qword_25472C698 = (uint64_t)&off_24C466160;
  unk_25472C6A0 = 0;
  qword_25472C6A8 = 0;
  if (atomic_load(dword_254727FD0))
    sub_20B860CA8(dword_254727FD0);
  qword_25472C6B0 = (uint64_t)&qword_25472C7C0;
  unk_25472C6B8 = &qword_25472C7C0;
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&qword_25472C698);
}

void sub_20B848788()
{
  sub_20B855C00(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_20B8487EC((uint64_t)&unk_25472C4F8, 0);
  sub_20B861530((uint64_t)sub_20B860B40, (uint64_t)&unk_25472C4F8);
}

BOOL sub_20B8487DC(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_20B8487EC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C465E10;
  *(_QWORD *)(a1 + 8) = a2;
  sub_20B856504(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(dword_254728040))
    sub_20B860CA8(dword_254728040);
  *(_QWORD *)(a1 + 152) = &qword_25472C7C0;
  *(_QWORD *)(a1 + 160) = &qword_25472C7C0;
  *(_QWORD *)(a1 + 168) = &qword_25472C7C0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &qword_25472C7C0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_20BA366E0;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_20B848914(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_20B867688(v3);
  sub_20B867688(v5);
  sub_20B867688(v4);
  sub_20B867688(v2);
  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B848948(uint64_t *a1)
{
  sub_20B8489A0(a1);
  sub_20B845920(a1 + 1);
  sub_20B867688(a1 + 16);
  sub_20B867688(a1 + 13);
  sub_20B867688(a1 + 10);
  sub_20B867688(a1 + 7);
  sub_20B8565E0((uint64_t)(a1 + 2));
  return a1;
}

uint64_t *sub_20B8489A0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = a1[1];
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = sub_20B855F80(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_25472C7C0)
  {
    v5 = sub_20B847BEC(a1 + 19);
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x20BD39CB0](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_25472C7C0)
  {
    v7 = sub_20B847BEC(a1 + 20);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x20BD39CB0](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_25472C7C0)
  {
    v9 = sub_20B847BEC(a1 + 21);
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x20BD39CB0](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    v11 = sub_20B847BEC(a1 + 22);
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x20BD39CB0](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    v13 = sub_20B847BEC(a1 + 23);
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x20BD39CB0](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    v15 = sub_20B847BEC(a1 + 24);
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x20BD39CB0](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    v17 = sub_20B847BEC(a1 + 25);
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x20BD39CB0](v18, 0x1012C40EC159624);
  }
  result = a1 + 26;
  if (a1[26])
  {
    v20 = sub_20B847BEC(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (uint64_t *)MEMORY[0x20BD39CB0](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)a1[27];
  v22 = a1 + 27;
  if (v23 != &qword_25472C7C0)
  {
    v24 = sub_20B847BEC(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (uint64_t *)MEMORY[0x20BD39CB0](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_20B848C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B848C74(uint64_t *a1)
{
  sub_20B848948(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B848C98(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_20B859FD0((unsigned __int8 *)(a1 + 16));
  sub_20B850C90(a1 + 56);
  sub_20B850C90(a1 + 80);
  sub_20B850C90(a1 + 104);
  result = sub_20B850C90(a1 + 128);
  v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3)
    goto LABEL_10;
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v6 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v3 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v5 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  result = (uint64_t)sub_20B855170((std::string *)(a1 + 176), &off_2547280F0);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = (uint64_t)sub_20B855170((std::string *)(a1 + 184), &off_254728070);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = (uint64_t)sub_20B855170((std::string *)(a1 + 192), &off_254728090);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    result = (uint64_t)sub_20B855170((std::string *)(a1 + 200), &off_2547280B0);
    if ((v3 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v3 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  result = (uint64_t)sub_20B855170((std::string *)(a1 + 208), &off_2547280D0);
  if ((v3 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v7 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_QWORD *)(a1 + 247) = 0;
    *(_BYTE *)(a1 + 271) = 0;
    *(_QWORD *)(a1 + 255) = 0;
    *(_QWORD *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(_QWORD *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_20BA366E0;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(_QWORD *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(_BYTE **)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_20B848F5C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  char v5;
  char *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  uint64_t v91;
  int v92;
  char *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  char *v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  char *v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  char **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  uint64_t v145;
  int v146;
  int v147;
  char *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  unint64_t *v187;
  int v188[2];

  *(_QWORD *)v188 = a2;
  v5 = sub_20B847CBC((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  result = *(char **)v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (unint64_t *)(a1 + 8);
  v7 = (uint64_t *)(a1 + 128);
  v8 = (uint64_t *)(a1 + 104);
  v9 = (uint64_t *)(a1 + 80);
  v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    v11 = result + 1;
    v12 = *result;
    if ((*result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*v11 << 7);
    v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      v11 = result + 2;
LABEL_7:
      *(_QWORD *)v188 = v11;
      goto LABEL_8;
    }
    result = (char *)sub_20B862580((uint64_t)result, v13 - 128);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = v11 - 1;
        while (2)
        {
          v14 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_20B86768C(a1 + 56, v17 + 1);
            v15 = *(int **)(a1 + 72);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *(int *)(a1 + 64);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *(_DWORD *)(a1 + 68))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v19 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 32), &unk_24C45E6B8, 24);
            v18 = (std::string *)sub_20B85477C((unint64_t *)v19, 0x18uLL, (uint64_t)sub_20B850BA0);
          }
          else
          {
            v18 = (std::string *)operator new();
          }
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v20 = *(_QWORD *)(a1 + 72);
          v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = v18;
          v14 = *(char **)v188;
LABEL_23:
          result = (char *)sub_20B862634(v18, v14, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 1u;
        v23 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = v11 + 1;
        v27 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, (v29 - 128));
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = v11 + 2;
LABEL_37:
          *(_QWORD *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)sub_20B847DF8(v187);
          sub_20B862438(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        v31 = v11 + 1;
        LODWORD(v30) = *v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v30);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = v11 + 2;
LABEL_44:
          *(_QWORD *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = v11 - 1;
        while (1)
        {
          v33 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v34 = *(int **)(a1 + 96);
          if (!v34)
            break;
          v35 = *(int *)(a1 + 88);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_52:
              sub_20B86768C(a1 + 80, v36 + 1);
              v34 = *(int **)(a1 + 96);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v38 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 32), &unk_24C45E6B8, 24);
              v37 = (std::string *)sub_20B85477C((unint64_t *)v38, 0x18uLL, (uint64_t)sub_20B850BA0);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *(_QWORD *)(a1 + 96);
            v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = *(char **)v188;
            goto LABEL_59;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (char *)sub_20B862634(v37, v33, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *result != 42)
            goto LABEL_277;
        }
        v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200u;
        v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v41);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = v11 + 2;
LABEL_67:
          *(_QWORD *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 2u;
        v44 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 280) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x800u;
        v47 = v11 + 1;
        v48 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v48);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 232) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = v11 + 2;
LABEL_78:
          *(_QWORD *)v188 = v47;
          *(_QWORD *)(a1 + 232) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400u;
        v51 = v11 + 1;
        LODWORD(v50) = *v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v50);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = v11 + 2;
LABEL_83:
          *(_QWORD *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v53);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 240) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = v11 + 2;
LABEL_88:
          *(_QWORD *)v188 = v54;
          *(_DWORD *)(a1 + 240) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v56);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = v11 + 2;
LABEL_93:
          *(_QWORD *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        v61 = v11 + 1;
        LODWORD(v60) = *v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v60);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = v11 + 2;
LABEL_100:
          *(_QWORD *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v63);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = v11 + 2;
LABEL_105:
          *(_QWORD *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v66);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 300) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = v11 + 2;
LABEL_110:
          *(_QWORD *)v188 = v67;
          *(_DWORD *)(a1 + 300) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 1u;
        v69 = v11 + 1;
        v70 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v70);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = v11 + 2;
LABEL_115:
          *(_QWORD *)v188 = v69;
          *(_BYTE *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v72);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = v11 + 2;
LABEL_120:
          *(_QWORD *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 2u;
        v75 = v11 + 1;
        v76 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v76);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = v11 + 2;
LABEL_125:
          *(_QWORD *)v188 = v75;
          *(_BYTE *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 8u;
        v78 = v11 + 1;
        v79 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v79);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = v11 + 2;
LABEL_130:
          *(_QWORD *)v188 = v78;
          *(_BYTE *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 4u;
        v81 = v11 + 1;
        v82 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v82);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = v11 + 2;
LABEL_135:
          *(_QWORD *)v188 = v81;
          *(_BYTE *)(a1 + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        v84 = v11 + 1;
        v85 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v85);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = v11 + 2;
LABEL_140:
          *(_QWORD *)v188 = v84;
          *(_BYTE *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        v87 = v11 + 1;
        v88 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v88);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = v11 + 2;
LABEL_145:
          *(_QWORD *)v188 = v87;
          *(_BYTE *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        v90 = v11 + 1;
        v91 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v91);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = v11 + 2;
LABEL_150:
          *(_QWORD *)v188 = v90;
          *(_BYTE *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = v11 - 2;
        while (1)
        {
          v93 = result + 2;
          *(_QWORD *)v188 = result + 2;
          v94 = *(int **)(a1 + 120);
          if (!v94)
            break;
          v95 = *(int *)(a1 + 112);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_158:
              sub_20B86768C(a1 + 104, v96 + 1);
              v94 = *(int **)(a1 + 120);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v98 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v98 + 32) + 32), &unk_24C45E6B8, 24);
              v97 = (std::string *)sub_20B85477C((unint64_t *)v98, 0x18uLL, (uint64_t)sub_20B850BA0);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *(_QWORD *)(a1 + 120);
            v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = *(char **)v188;
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (char *)sub_20B862634(v97, v93, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        v110 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v110);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = v11 + 2;
LABEL_191:
          *(_QWORD *)v188 = v109;
          *(_BYTE *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        v112 = v11 + 1;
        v113 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v113);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = v11 + 2;
LABEL_196:
          *(_QWORD *)v188 = v112;
          *(_BYTE *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        v115 = v11 + 1;
        v116 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v116);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = v11 + 2;
LABEL_201:
          *(_QWORD *)v188 = v115;
          *(_BYTE *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v118 = v11 + 1;
        v119 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v119);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = v11 + 2;
LABEL_206:
          *(_QWORD *)v188 = v118;
          *(_BYTE *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 4u;
        v121 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v122);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = v11 + 2;
LABEL_215:
          *(_QWORD *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x40u;
        v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v125);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = v11 + 2;
LABEL_220:
          *(_QWORD *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v128);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 320) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = v11 + 2;
LABEL_225:
          *(_QWORD *)v188 = v129;
          *(_DWORD *)(a1 + 320) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x100u;
        v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v131);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = v11 + 2;
LABEL_230:
          *(_QWORD *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 8u;
        v153 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_2547280F0;
        v137 = (uint64_t *)(a1 + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10u;
        v134 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_254728070;
        v137 = (uint64_t *)(a1 + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20u;
        v138 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_254728090;
        v137 = (uint64_t *)(a1 + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40u;
        v139 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_2547280B0;
        v137 = (uint64_t *)(a1 + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80u;
        v140 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_2547280D0;
        v137 = (uint64_t *)(a1 + 208);
LABEL_274:
        v152 = (std::string *)sub_20B854FDC(v137, v136, (uint64_t)v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        v141 = v11 + 1;
        v142 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v142);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = v11 + 2;
LABEL_251:
          *(_QWORD *)v188 = v141;
          *(_BYTE *)(a1 + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        v144 = v11 + 1;
        v145 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v145);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = v11 + 2;
LABEL_256:
          *(_QWORD *)v188 = v144;
          *(_BYTE *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_259:
        *(_QWORD *)v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        v148 = v11 + 1;
        v149 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (char *)sub_20B862538((uint64_t)v11, v149);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 264) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = v11 + 2;
LABEL_264:
          *(_QWORD *)v188 = v148;
          *(_QWORD *)(a1 + 264) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100u;
        v151 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 216);
LABEL_269:
        v152 = (std::string *)sub_20B854EC4(v25, (uint64_t)v24);
LABEL_275:
        result = (char *)sub_20B862634(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)sub_20B847DF8(v187);
            v11 = *(char **)v188;
          }
          result = (char *)sub_20B862A60(v12, v156, v11, a3);
        }
        else
        {
          result = (char *)sub_20B85B570((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_25472C4F8, v187, a3);
        }
LABEL_276:
        *(_QWORD *)v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = sub_20B847CBC((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        result = *(char **)v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = result + 2;
    *(_QWORD *)v188 = result + 2;
    v102 = *(int **)(a1 + 144);
    if (!v102)
      break;
    v103 = *(int *)(a1 + 136);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_176:
        sub_20B86768C(a1 + 128, v104 + 1);
        v102 = *(int **)(a1 + 144);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v106 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v106 + 32) + 32), &unk_24C45E6B8, 24);
        v105 = (std::string *)sub_20B85477C((unint64_t *)v106, 0x18uLL, (uint64_t)sub_20B850BA0);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *(_QWORD *)(a1 + 144);
      v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = *(char **)v188;
      goto LABEL_183;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (char *)sub_20B862634(v105, v101, (uint64_t)a3);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_176;
}

char *sub_20B84A474(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int j;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  char v66;
  char v67;
  int v68;
  char v69;
  char v70;
  char v71;
  int v72;
  int k;
  uint64_t v74;
  int64_t v75;
  const void *v76;
  int v77;
  int m;
  uint64_t v79;
  int64_t v80;
  const void *v81;
  int v82;
  char v83;
  char v84;
  int v85;
  char v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char v110;
  char v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = sub_20B850D50(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_20B855A54(a3, 1, v8, a2);
    }
  }
  v11 = *(_DWORD *)(a1 + 40);
  if ((v11 & 1) != 0)
  {
    a2 = sub_20B846040((unint64_t *)a3, 2, *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v18 = v15 >> 7;
        ++a2;
        v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0)
      goto LABEL_38;
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        ++a2;
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (j = 0; v20 != j; ++j)
    {
      v22 = sub_20B850D50(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_50;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_20B855A54(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          v31 = v28 >> 7;
          ++a2;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0)
        goto LABEL_82;
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_54;
    goto LABEL_83;
  }
  if ((v11 & 2) == 0)
    goto LABEL_53;
LABEL_82:
  a2 = sub_20B846040((unint64_t *)a3, 7, *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0)
      goto LABEL_56;
LABEL_97:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          v40 = v39 >> 7;
          ++a2;
          v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0)
        goto LABEL_108;
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_58;
LABEL_119:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          v48 = v47 >> 7;
          ++a2;
          v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0)
        goto LABEL_130;
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_60;
LABEL_133:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          v53 = v52 >> 7;
          ++a2;
          v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0)
        goto LABEL_144;
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v34 = *(_QWORD *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        v36 = v35 >> 7;
        ++a2;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0)
      goto LABEL_97;
  }
LABEL_56:
  if ((v11 & 0x1000) == 0)
    goto LABEL_57;
LABEL_108:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        v44 = v43 >> 7;
        ++a2;
        v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0)
      goto LABEL_119;
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_59;
LABEL_130:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0)
    goto LABEL_133;
LABEL_60:
  if ((v11 & 0x20000000) == 0)
    goto LABEL_61;
LABEL_144:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        v57 = v56 >> 7;
        ++a2;
        v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        v29 = v27 >> 7;
        ++a2;
        v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v59 = *(_BYTE *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          v62 = v61 >> 7;
          ++a2;
          v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v65 = *(_BYTE *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0)
        goto LABEL_182;
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v66 = *(_BYTE *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v67 = *(_BYTE *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v69 = *(_BYTE *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0)
        goto LABEL_195;
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v70 = *(_BYTE *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v71 = *(_BYTE *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (k = 0; v72 != k; ++k)
    {
      v74 = sub_20B850D50(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > 127)
          goto LABEL_207;
      }
      else
      {
        v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0)
          v76 = (const void *)v74;
        else
          v76 = *(const void **)v74;
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_20B855A54(a3, 30, v74, a2);
    }
  }
  v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (m = 0; v77 != m; ++m)
    {
      v79 = sub_20B850D50(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80 > 127)
          goto LABEL_220;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0)
          v81 = (const void *)v79;
        else
          v81 = *(const void **)v79;
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_20B855A54(a3, 31, v79, a2);
    }
  }
  v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v83 = *(_BYTE *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v84 = *(_BYTE *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v86 = *(_BYTE *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0)
        goto LABEL_232;
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v87 = *(_BYTE *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0)
      goto LABEL_250;
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_20B846040((unint64_t *)a3, 36, *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v85 & 0x100000) == 0)
    goto LABEL_250;
LABEL_241:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        v90 = v89 >> 7;
        ++a2;
        v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          v99 = v96 >> 7;
          ++a2;
          v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0)
        goto LABEL_273;
    }
LABEL_252:
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0)
    goto LABEL_252;
LABEL_273:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        v103 = v102 >> 7;
        ++a2;
        v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        v97 = v95 >> 7;
        ++a2;
        v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_20B846040((unint64_t *)a3, 44, *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0)
        goto LABEL_287;
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_20B846040((unint64_t *)a3, 45, *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0)
      goto LABEL_288;
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_20B846040((unint64_t *)a3, 46, *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0)
      goto LABEL_289;
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_20B846040((unint64_t *)a3, 47, *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0)
      goto LABEL_290;
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_20B846040((unint64_t *)a3, 48, *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0)
      goto LABEL_291;
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v110 = *(_BYTE *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0)
      goto LABEL_292;
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v111 = *(_BYTE *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0)
      goto LABEL_293;
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v113 = *(_QWORD *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
LABEL_294:
    a2 = sub_20B846040((unint64_t *)a3, 53, *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL, a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      v115 = v114 >> 7;
      ++a2;
      v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
LABEL_295:
  v106 = sub_20B85C1A4(a1 + 16, 200, 0x20000000, a2, a3);
  v107 = v106;
  v108 = *(_QWORD *)(a1 + 8);
  if ((v108 & 1) == 0)
    return v107;
  v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    v119 = *(_QWORD *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_20B855654(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_20B84B628(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v2 = sub_20B85ED38(a1 + 16);
  v3 = *(unsigned int *)(a1 + 64);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = sub_20B850D50(a1 + 56, v5);
      v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v6 + 8);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while ((_DWORD)v3 != v5);
  }
  v8 = *(unsigned int *)(a1 + 88);
  v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = sub_20B850D50(a1 + 80, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *(unsigned int *)(a1 + 112);
  v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = sub_20B850D50(a1 + 104, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *(unsigned int *)(a1 + 136);
  v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = sub_20B850D50(a1 + 128, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23)
    goto LABEL_33;
  if ((v23 & 1) != 0)
  {
    v58 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v60 = v59;
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  v61 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_134;
  }
LABEL_131:
  v64 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v66 = v65;
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_137;
  }
LABEL_134:
  v67 = *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v69 = v68;
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0)
      goto LABEL_28;
LABEL_140:
    v73 = *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v75 = v74;
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  v70 = *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *(_QWORD *)(v70 + 8);
  if ((v71 & 0x80u) == 0)
    v72 = v71;
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0)
    goto LABEL_140;
LABEL_28:
  if ((v23 & 0x40) == 0)
    goto LABEL_29;
LABEL_143:
  v76 = *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v78 = v77;
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    v24 = *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0)
    goto LABEL_50;
  if ((v23 & 0x100) != 0)
  {
    v79 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    v80 = *(unsigned __int8 *)(v79 + 23);
    v81 = *(_QWORD *)(v79 + 8);
    if ((v80 & 0x80u) == 0)
      v81 = v80;
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0)
        goto LABEL_37;
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v82 = *(_DWORD *)(a1 + 224);
  v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 10;
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0)
      goto LABEL_38;
LABEL_158:
    v19 += ((9 * (__clz(*(_QWORD *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_154:
  v85 = *(_DWORD *)(a1 + 228);
  v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 10;
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0)
    goto LABEL_158;
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    v27 = *(_DWORD *)(a1 + 240);
    v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0)
      v29 = v28;
    else
      v29 = 10;
    v19 += v29 + 1;
  }
LABEL_43:
  v30 = v19 + 3;
  if ((v23 & 0x2000) == 0)
    v30 = v19;
  if ((v23 & 0x4000) != 0)
    v30 += 3;
  if ((v23 & 0x8000) != 0)
    v19 = v30 + 3;
  else
    v19 = v30;
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    v31 = v19 + 3;
    if ((v23 & 0x10000) == 0)
      v31 = v19;
    if ((v23 & 0x20000) != 0)
      v31 += 3;
    if ((v23 & 0x40000) != 0)
      v31 += 3;
    if ((v23 & 0x80000) != 0)
      v31 += 3;
    if ((v23 & 0x100000) != 0)
    {
      v32 = *(_DWORD *)(a1 + 252);
      v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = 10;
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0)
      v19 = v31 + 6;
    else
      v19 = v31;
    if ((v23 & 0x400000) != 0)
      v19 += ((9 * (__clz(*(_QWORD *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v23 & 0x800000) != 0)
    {
      v35 = *(_DWORD *)(a1 + 272);
      v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = 10;
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23))
    goto LABEL_94;
  if ((v23 & 0x1000000) != 0)
  {
    v38 = *(_DWORD *)(a1 + 276);
    v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = 10;
    v19 += v40 + 1;
  }
  v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0)
    v41 = v19;
  if ((v23 & 0x4000000) != 0)
  {
    v42 = *(_DWORD *)(a1 + 284);
    v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = 10;
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0)
    v19 = v41 + 5;
  else
    v19 = v41;
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0)
      goto LABEL_92;
LABEL_164:
    v91 = *(_DWORD *)(a1 + 296);
    v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0)
      v93 = v92;
    else
      v93 = 12;
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  v88 = *(_DWORD *)(a1 + 292);
  v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0)
    v90 = v89;
  else
    v90 = 10;
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0)
    goto LABEL_164;
LABEL_92:
  if ((v23 & 0x40000000) == 0)
    goto LABEL_93;
LABEL_168:
  v94 = *(_DWORD *)(a1 + 300);
  v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = 12;
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    v97 = *(_DWORD *)(a1 + 304);
    v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0)
      v99 = v98;
    else
      v99 = 12;
    v19 += v99;
  }
LABEL_94:
  v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    v46 = v19 + 3;
    if ((v45 & 1) == 0)
      v46 = v19;
    if ((v45 & 2) != 0)
      v46 += 3;
    if ((v45 & 4) != 0)
      v46 += 3;
    if ((v45 & 8) != 0)
      v46 += 3;
    if ((v45 & 0x10) != 0)
      v46 += 3;
    if ((v45 & 0x20) != 0)
      v19 = v46 + 3;
    else
      v19 = v46;
    if ((v45 & 0x40) != 0)
    {
      v47 = *(_DWORD *)(a1 + 316);
      v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 12;
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      v50 = *(_DWORD *)(a1 + 320);
      v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = 12;
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    v53 = *(_DWORD *)(a1 + 324);
    v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 12;
    v19 += v55;
  }
  v56 = *(_QWORD *)(a1 + 8);
  if ((v56 & 1) != 0)
  {
    v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0)
      v101 = *(_QWORD *)(v100 + 16);
    else
      v101 = *(unsigned __int8 *)(v100 + 31);
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

unint64_t sub_20B84BED4(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C465E10)
    sub_20B848590(a1, (uint64_t)a2, a3);
  return sub_20B84BEFC(a1, (uint64_t)a2);
}

unint64_t sub_20B84BEFC(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unint64_t result;
  unsigned int v14;
  __int128 *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 *v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  std::string v45[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    v4 = sub_20B855F80(v45, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v45);
  }
  sub_20B85A06C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_20B850F84(a1 + 56, a2 + 56);
  sub_20B850F84(a1 + 80, a2 + 80);
  sub_20B850F84(a1 + 104, a2 + 104);
  result = sub_20B850F84(a1 + 128, a2 + 128);
  v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14)
    goto LABEL_47;
  if ((v14 & 1) != 0)
  {
    v15 = (__int128 *)(*(_QWORD *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if ((v16 & 1) != 0)
      v17 = (_QWORD *)*v17;
    result = sub_20B854E8C((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  v18 = (__int128 *)(*(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if ((v19 & 1) != 0)
    v20 = (_QWORD *)*v20;
  result = sub_20B854E8C((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_29:
  v21 = (__int128 *)(*(_QWORD *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if ((v22 & 1) != 0)
    v23 = (_QWORD *)*v23;
  result = sub_20B854E8C((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_32:
  v24 = (__int128 *)(*(_QWORD *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if ((v25 & 1) != 0)
    v26 = (_QWORD *)*v26;
  result = sub_20B854EB4((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
LABEL_38:
    v30 = (__int128 *)(*(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    v31 = *(_QWORD *)(a1 + 8);
    v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if ((v31 & 1) != 0)
      v32 = (_QWORD *)*v32;
    result = sub_20B854EB4((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  v27 = (__int128 *)(*(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if ((v28 & 1) != 0)
    v29 = (_QWORD *)*v29;
  result = sub_20B854EB4((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0)
    goto LABEL_38;
LABEL_20:
  if ((v14 & 0x40) == 0)
    goto LABEL_21;
LABEL_41:
  v33 = (__int128 *)(*(_QWORD *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  v34 = *(_QWORD *)(a1 + 8);
  v35 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if ((v34 & 1) != 0)
    v35 = (_QWORD *)*v35;
  result = sub_20B854EB4((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    v36 = (__int128 *)(*(_QWORD *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    v37 = *(_QWORD *)(a1 + 8);
    v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if ((v37 & 1) != 0)
      v38 = (_QWORD *)*v38;
    result = sub_20B854EB4((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v14 & 0x100) != 0)
  {
    v41 = (__int128 *)(*(_QWORD *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    v42 = *(_QWORD *)(a1 + 8);
    v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if ((v42 & 1) != 0)
      v43 = (_QWORD *)*v43;
    result = sub_20B854E8C((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_99;
  }
LABEL_98:
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0)
      goto LABEL_55;
LABEL_101:
    *(_BYTE *)(a1 + 245) = *(_BYTE *)(a2 + 245);
    if ((v14 & 0x8000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_100:
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  if ((v14 & 0x4000) != 0)
    goto LABEL_101;
LABEL_55:
  if ((v14 & 0x8000) != 0)
LABEL_56:
    *(_BYTE *)(a1 + 246) = *(_BYTE *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0)
    goto LABEL_69;
  if ((v14 & 0x10000) != 0)
  {
    *(_BYTE *)(a1 + 247) = *(_BYTE *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0)
        goto LABEL_62;
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0)
      goto LABEL_63;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0)
      goto LABEL_64;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0)
      goto LABEL_65;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0)
      goto LABEL_66;
LABEL_109:
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    if ((v14 & 0x800000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0)
    goto LABEL_109;
LABEL_66:
  if ((v14 & 0x800000) != 0)
LABEL_67:
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14))
    goto LABEL_79;
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_74;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0)
      goto LABEL_75;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0)
      goto LABEL_76;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_77;
LABEL_125:
    *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0)
    goto LABEL_125;
LABEL_77:
  if ((v14 & 0x80000000) != 0)
    goto LABEL_126;
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39)
    goto LABEL_90;
  if ((v39 & 1) != 0)
  {
    *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0)
        goto LABEL_83;
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a1 + 309) = *(_BYTE *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0)
      goto LABEL_84;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a1 + 310) = *(_BYTE *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a1 + 311) = *(_BYTE *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0)
      goto LABEL_87;
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
LABEL_116:
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  if ((v39 & 0x40) != 0)
    goto LABEL_117;
LABEL_87:
  if ((v39 & 0x80) != 0)
LABEL_88:
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_20B84C454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84C46C(uint64_t a1)
{
  return sub_20B85B23C(a1 + 16);
}

_QWORD *sub_20B84C474@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_20B84C484(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C466000;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_24C4660A0;
  sub_20B856504(a1 + 24, a2);
  *(_QWORD *)(a1 + 48) = 0;
  if (atomic_load(dword_254727FB8))
    sub_20B860CA8(dword_254727FB8);
  *(_QWORD *)(a1 + 56) = &qword_25472C7C0;
  *(_QWORD *)(a1 + 64) = &qword_25472C7C0;
  *(_QWORD *)(a1 + 72) = &qword_25472C7C0;
  *(_DWORD *)(a1 + 80) = 16843008;
  return a1;
}

void sub_20B84C504(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84C518(uint64_t a1)
{
  sub_20B84C550(a1);
  sub_20B845920((uint64_t *)(a1 + 8));
  sub_20B8565E0(a1 + 24);
  return a1;
}

uint64_t *sub_20B84C550(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string v15[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    v4 = sub_20B855F80(v15, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v15);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_25472C7C0)
  {
    v5 = sub_20B847BEC((uint64_t *)(a1 + 56));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x20BD39CB0](v6, 0x1012C40EC159624);
  }
  result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_25472C7C0)
  {
    v8 = sub_20B847BEC(result);
    v9 = v8;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    result = (uint64_t *)MEMORY[0x20BD39CB0](v9, 0x1012C40EC159624);
  }
  v11 = *(uint64_t **)(a1 + 72);
  v10 = (uint64_t *)(a1 + 72);
  if (v11 != &qword_25472C7C0)
  {
    v12 = sub_20B847BEC(v10);
    v13 = v12;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    return (uint64_t *)MEMORY[0x20BD39CB0](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_20B84C69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84C6B8(uint64_t a1)
{
  return sub_20B84C518(a1 - 16);
}

void sub_20B84C6C0(uint64_t a1)
{
  sub_20B84C518(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B84C6E4(uint64_t a1)
{
  sub_20B84C518(a1 - 16);
  JUMPOUT(0x20BD39CB0);
}

unsigned __int8 *sub_20B84C70C(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = sub_20B859FD0((unsigned __int8 *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v5 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 23) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v4 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v6 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0)
    *(_DWORD *)(a1 + 80) = 16843008;
  *(_DWORD *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_20B84C818(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  void *v31;
  BOOL v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42[2];

  *(_QWORD *)v42 = a2;
  v5 = 0;
  if ((sub_20B847CBC((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v42 + 1);
      v9 = **(_BYTE **)v42;
      if ((char)**(_BYTE **)v42 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v17 = sub_20B862580(*(uint64_t *)v42, v10 - 128);
          *(_QWORD *)v42 = v17;
          if (!v17)
            goto LABEL_67;
          v8 = (char *)v17;
          v9 = v18;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v42 + 2);
      }
      *(_QWORD *)v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 2u;
          v19 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if ((v19 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24)
            goto LABEL_48;
          v5 |= 0x10u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v36 = sub_20B862538((uint64_t)v8, v21);
            *(_QWORD *)v42 = v36;
            *(_BYTE *)(a1 + 81) = v37 != 0;
            if (!v36)
              goto LABEL_67;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v42 = v20;
            *(_BYTE *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32)
            goto LABEL_48;
          v5 |= 0x20u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v38 = sub_20B862538((uint64_t)v8, v24);
            *(_QWORD *)v42 = v38;
            *(_BYTE *)(a1 + 82) = v39 != 0;
            if (!v38)
              goto LABEL_67;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v42 = v23;
            *(_BYTE *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40)
            goto LABEL_48;
          v5 |= 0x40u;
          v26 = v8 + 1;
          v27 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_39;
          v28 = *v26;
          v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            v40 = sub_20B862538((uint64_t)v8, v27);
            *(_QWORD *)v42 = v40;
            *(_BYTE *)(a1 + 83) = v41 != 0;
            if (!v40)
              goto LABEL_67;
          }
          else
          {
            v26 = v8 + 2;
LABEL_39:
            *(_QWORD *)v42 = v26;
            *(_BYTE *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 4u;
          v29 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if ((v29 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          v30 = (std::string *)sub_20B854EC4(v13, (uint64_t)v12);
          v31 = (void *)sub_20B862634(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            v14 = v8 + 1;
            v15 = *v8;
            if ((*v8 & 0x80000000) == 0)
              goto LABEL_18;
            v16 = *v14;
            v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              v14 = v8 + 2;
LABEL_18:
              *(_QWORD *)v42 = v14;
              *(_BYTE *)(a1 + 80) = v15 != 0;
              goto LABEL_46;
            }
            v34 = sub_20B862538((uint64_t)v8, v15);
            *(_QWORD *)v42 = v34;
            *(_BYTE *)(a1 + 80) = v35 != 0;
            if (!v34)
              goto LABEL_67;
          }
          else
          {
LABEL_48:
            if (v9)
              v32 = (v9 & 7) == 4;
            else
              v32 = 1;
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if ((*v7 & 1) != 0)
              {
                v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                v33 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
                v8 = *(char **)v42;
              }
              v31 = sub_20B862A60(v9, v33, v8, a3);
            }
            else
            {
              v31 = sub_20B85B570((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_25472C640, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(_QWORD *)v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(_QWORD *)v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if ((sub_20B847CBC((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(_QWORD *)v42;
}

char *sub_20B84CC14(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 48);
  if ((v6 & 1) != 0)
  {
    v4 = sub_20B846040(a3, 1, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = sub_20B846040(a3, 2, *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v7 = *(_BYTE *)(a1 + 81);
  *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v8 = *(_BYTE *)(a1 + 82);
  *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v9 = *(_BYTE *)(a1 + 83);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_20:
  v4 = sub_20B846040(a3, 6, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
    goto LABEL_24;
LABEL_21:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v10 = *(_BYTE *)(a1 + 80);
  *(_WORD *)v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  v11 = sub_20B85C1A4(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 & 1) == 0)
    return v12;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    v16 = *(void **)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v11) >= (int)v17)
  {
    v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_20B84CE14(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = sub_20B85ED38(a1 + 24);
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0)
    goto LABEL_17;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_22:
    v12 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 3;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    v7 += 2;
  if ((v3 & 0x40) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_17:
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_20B84CF78(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C466000)
    sub_20B848590(a1, (uint64_t)a2, a3);
  sub_20B84CFA0(a1, (uint64_t)a2);
}

void sub_20B84CFA0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  std::string v24[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    v4 = sub_20B855F80(v24, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v24);
  }
  sub_20B85A06C(a1 + 24, a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_20B854E8C((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_20B854E8C((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
LABEL_30:
    v20 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if ((v21 & 1) != 0)
      v22 = (_QWORD *)*v22;
    sub_20B854E8C((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_33:
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0)
        goto LABEL_20;
      goto LABEL_35;
    }
LABEL_34:
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
}

void sub_20B84D168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84D180(uint64_t a1)
{
  return sub_20B85B23C(a1 + 24);
}

_QWORD *sub_20B84D188@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.NormalizerSpec");
}

uint64_t sub_20B84D198(uint64_t a1)
{
  sub_20B84D1C8(a1);
  sub_20B845920((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t *sub_20B84D1C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    v4 = sub_20B855F80(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_25472C7C0)
  {
    v6 = sub_20B847BEC(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x20BD39CB0](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 32);
  v8 = (uint64_t *)(a1 + 32);
  if (v9 != &qword_25472C7C0)
  {
    v10 = sub_20B847BEC(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x20BD39CB0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_20B84D2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B84D2F0(uint64_t a1)
{
  sub_20B84D198(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B84D314(uint64_t result)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  v4 = *(_QWORD *)(result + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_20B84D3B0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  std::string *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  unsigned int v20;
  int v21[2];

  *(_QWORD *)v21 = a2;
  if ((sub_20B847CBC((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v7 = (char *)(*(_QWORD *)v21 + 1);
      v8 = **(_BYTE **)v21;
      if (((char)**(_BYTE **)v21 & 0x80000000) == 0)
        goto LABEL_7;
      v9 = v8 + (*v7 << 7);
      v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0)
        break;
      v19 = sub_20B862580(*(uint64_t *)v21, v9 - 128);
      *(_QWORD *)v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(_QWORD *)v21 = 0;
        return *(_QWORD *)v21;
      }
      v7 = (char *)v19;
      v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v14 = *(_QWORD *)(a1 + 8);
          v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = (_QWORD *)*v15;
          v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v17 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        v18 = (std::string *)sub_20B854EC4(v16, (uint64_t)v15);
        v13 = (void *)sub_20B862634(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(_QWORD *)v21;
      }
      if ((*v6 & 1) != 0)
      {
        v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
        v7 = *(char **)v21;
      }
      v13 = sub_20B862A60(v8, v12, v7, a3);
LABEL_28:
      *(_QWORD *)v21 = v13;
      if (!v13)
        goto LABEL_35;
      if ((sub_20B847CBC((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) != 0)
        return *(_QWORD *)v21;
    }
    v7 = (char *)(*(_QWORD *)v21 + 2);
LABEL_7:
    *(_QWORD *)v21 = v7;
    goto LABEL_8;
  }
  return *(_QWORD *)v21;
}

char *sub_20B84D558(uint64_t a1, char *__dst, unint64_t *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __dst;
  v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) != 0)
    v4 = sub_20B846040(a3, 1, *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL, __dst);
  if ((v6 & 2) != 0)
    v4 = sub_20B846040(a3, 2, *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL, v4);
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v4) >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_20B84D630(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

unint64_t sub_20B84D708(unint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C466160)
    sub_20B848590(a1, (uint64_t)a2, a3);
  return sub_20B84D730(a1, (uint64_t)a2);
}

unint64_t sub_20B84D730(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    v4 = sub_20B855F80(v21, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_20B8560B8((uint64_t)v21);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(v3 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(v3 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    result = (unint64_t)std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      v15 = *(_QWORD *)(v3 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      result = sub_20B854E8C((uint64_t *)(v3 + 24), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      v18 = *(_QWORD *)(v3 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      return sub_20B854E8C((uint64_t *)(v3 + 32), v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_20B84D860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84D878()
{
  return 1;
}

_QWORD *sub_20B84D880@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_20B84D890(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C465E90;
  *(_QWORD *)(a1 + 8) = a2;
  sub_20B856504(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_254727FE8))
    sub_20B860CA8(dword_254727FE8);
  return a1;
}

void sub_20B84D904(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_20B851188(v2);
  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84D920(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    v5 = sub_20B855F80(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
LABEL_4:
  sub_20B845920(v3);
  sub_20B851188((uint64_t *)(a1 + 40));
  sub_20B8565E0(a1 + 16);
  return a1;
}

void sub_20B84D9BC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  sub_20B854468(a1);
}

void sub_20B84D9E0(uint64_t a1)
{
  sub_20B84D920(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B84DA04(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  sub_20B859FD0((unsigned __int8 *)(a1 + 16));
  result = sub_20B850E2C(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_20B84DA5C(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  char *v20;
  unsigned int v21;
  char *v23;

  v23 = a2;
  if ((sub_20B847CBC((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v23 + 1;
      v7 = *v23;
      if ((*v23 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v20 = (char *)sub_20B862580((uint64_t)v23, v8 - 128);
      v23 = v20;
      if (!v20)
        return 0;
      v6 = v20;
      v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v23 = v11 + 1;
          v13 = *(int **)(a1 + 56);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 48);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_20B86768C(a1 + 40, v15 + 1);
              v13 = *(int **)(a1 + 56);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_20B84FFF8(*(_QWORD *)(a1 + 40));
            v17 = *(_QWORD *)(a1 + 56);
            v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          v16 = *(_QWORD **)&v13[2 * v14 + 2];
LABEL_22:
          v11 = (char *)sub_20B84DC70(a3, (uint64_t)v16, v12);
          v23 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_30;
        }
        v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if ((*v5 & 1) != 0)
        {
          v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
          v6 = v23;
        }
        v10 = sub_20B862A60(v7, v19, v6, a3);
      }
      else
      {
        v10 = sub_20B85B570((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_25472C6C0, (unint64_t *)(a1 + 8), a3);
      }
      v23 = (char *)v10;
      if (!v10)
        return 0;
LABEL_30:
      if (sub_20B847CBC((uint64_t)a3, &v23, a3[11].i32[1]))
        return v23;
    }
    v6 = v23 + 2;
LABEL_6:
    v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_20B84DC70(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_20B8480DC((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_20B84D3B0(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_20B84DD34(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = sub_20B855544((uint64_t)a3, a2);
      v8 = sub_20B850BB4(a1 + 40, i);
      *a2 = 10;
      v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = sub_20B84D558(v8, v10, a3);
    }
  }
  v14 = sub_20B85C1A4(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v14) >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_20B84DEB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = sub_20B85ED38(a1 + 16);
  v3 = *(int *)(a1 + 48);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_20B84D630(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_QWORD *)(a1 + 8);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

unint64_t sub_20B84DF64(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C465E90)
    sub_20B848590(a1, (uint64_t)a2, a3);
  return sub_20B84DF8C(a1, (uint64_t)a2);
}

unint64_t sub_20B84DF8C(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v14;
  std::string v15[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    v4 = sub_20B855F80(v15, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v15);
  }
  sub_20B85A06C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  return sub_20B85122C(a1 + 40, a2 + 40);
}

void sub_20B84E060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84E078(uint64_t a1)
{
  return sub_20B85B23C(a1 + 16);
}

_QWORD *sub_20B84E080@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.SelfTestData");
}

_QWORD *sub_20B84E090(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_24C466588;
  a1[1] = a2;
  sub_20B856504((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load(dword_254727F48))
    sub_20B860CA8(dword_254727F48);
  a1[6] = &qword_25472C7C0;
  a1[7] = 0x100000000;
  return a1;
}

void sub_20B84E0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84E110(uint64_t a1)
{
  sub_20B84E148(a1);
  sub_20B845920((uint64_t *)(a1 + 8));
  sub_20B8565E0(a1 + 16);
  return a1;
}

uint64_t sub_20B84E148(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    v4 = sub_20B855F80(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_20B8560B8((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 48);
  v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_25472C7C0)
  {
    v7 = sub_20B847BEC(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x20BD39CB0](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_20B84E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B84E228(uint64_t a1)
{
  sub_20B84E110(a1);
  JUMPOUT(0x20BD39CB0);
}

unsigned __int8 *sub_20B84E24C(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = sub_20B859FD0((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0)
    *(_QWORD *)(a1 + 56) = 0x100000000;
  *(_DWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_20B84E2E0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t v22;
  unsigned int v23;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  int v27[2];

  *(_QWORD *)v27 = a2;
  v5 = 0;
  if ((sub_20B847CBC((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v27 + 1);
      v9 = **(_BYTE **)v27;
      if (((char)**(_BYTE **)v27 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v22 = sub_20B862580(*(uint64_t *)v27, v10 - 128);
      *(_QWORD *)v27 = v22;
      if (!v22)
        goto LABEL_48;
      v8 = (char *)v22;
      v9 = v23;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          v15 = v8 + 1;
          v16 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_24;
          v17 = *v15;
          v18 = v16 + (v17 << 7);
          v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(_QWORD *)v27 = sub_20B862538((uint64_t)v8, (v18 - 128));
            if (!*(_QWORD *)v27)
            {
LABEL_48:
              *(_QWORD *)v27 = 0;
              goto LABEL_2;
            }
            v16 = v25;
          }
          else
          {
            v15 = v8 + 2;
LABEL_24:
            *(_QWORD *)v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if ((*v7 & 1) != 0)
              v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v26 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
            sub_20B862438(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 60) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(_QWORD *)v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        v19 = *(_QWORD *)(a1 + 8);
        v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = (_QWORD *)*v20;
        v21 = (std::string *)sub_20B854EC4((uint64_t *)(a1 + 48), (uint64_t)v20);
        v14 = (void *)sub_20B862634(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9)
        v13 = (v9 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if ((*v7 & 1) != 0)
        {
          v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v24 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
          v8 = *(char **)v27;
        }
        v14 = sub_20B862A60(v9, v24, v8, a3);
      }
      else
      {
        v14 = sub_20B85B570((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_25472C708, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(_QWORD *)v27 = v14;
      if (!v14)
        goto LABEL_48;
LABEL_38:
      if ((sub_20B847CBC((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v27 + 2);
LABEL_7:
    *(_QWORD *)v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v27;
}

char *sub_20B84E564(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
  {
    v4 = sub_20B846040(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4)
    v4 = sub_20B855544((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 56);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_20B855544((uint64_t)a3, v4);
    v8 = *(int *)(a1 + 60);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = sub_20B85C1A4(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return v13;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v12) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_20B84E6FC(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_20B85ED38(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_20B84E7DC(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C466588)
    sub_20B848590(a1, (uint64_t)a2, a3);
  sub_20B84E804(a1, (uint64_t)a2);
}

void sub_20B84E804(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    v4 = sub_20B855F80(v18, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v18);
  }
  sub_20B85A06C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_20B854E8C((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

void sub_20B84E93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84E954(uint64_t a1)
{
  return sub_20B85B23C(a1 + 16);
}

_QWORD *sub_20B84E95C@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_20B84E96C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24C465BC0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_24C465CD8;
  sub_20B856504(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (atomic_load(dword_254727F60))
    sub_20B860CA8(dword_254727F60);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_20B84E9F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_20B8513D4(v2);
  sub_20B8565E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84EA10(uint64_t a1)
{
  sub_20B84EA50(a1);
  sub_20B845920((uint64_t *)(a1 + 8));
  sub_20B8513D4((uint64_t *)(a1 + 56));
  sub_20B8565E0(a1 + 24);
  return a1;
}

uint64_t sub_20B84EA50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    v4 = sub_20B855F80(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_20B8560B8((uint64_t)v13);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_25472C748)
  {
    v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      v6 = sub_20B848948(v5);
      MEMORY[0x20BD39CB0](v6, 0x10A1C4074230EEALL);
    }
    v7 = *(_QWORD *)(v1 + 88);
    if (v7)
    {
      v8 = sub_20B84C518(v7);
      MEMORY[0x20BD39CB0](v8, 0x10A1C402CDD3876);
    }
    v9 = *(_QWORD *)(v1 + 96);
    if (v9)
    {
      v10 = sub_20B84D920(v9);
      MEMORY[0x20BD39CB0](v10, 0x10A1C4075D007F8);
    }
    result = *(_QWORD *)(v1 + 104);
    if (result)
    {
      v11 = sub_20B84C518(result);
      return MEMORY[0x20BD39CB0](v11, 0x10A1C402CDD3876);
    }
  }
  return result;
}

void sub_20B84EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84EB78(uint64_t a1)
{
  return sub_20B84EA10(a1 - 16);
}

void sub_20B84EB80(uint64_t a1)
{
  sub_20B84EA10(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B84EBA4(uint64_t a1)
{
  sub_20B84EA10(a1 - 16);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B84EBCC(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  std::string v15[2];

  sub_20B859FD0((unsigned __int8 *)(a1 + 24));
  result = (uint64_t)sub_20B850ED8((unsigned __int8 *)(a1 + 56));
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 80);
      if (!v4)
      {
        sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        v5 = sub_20B855F80(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_20B8560B0((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v15);
        v4 = *(_QWORD *)(a1 + 80);
      }
      result = sub_20B848C98(v4);
    }
    if ((v3 & 2) != 0)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (!v6)
      {
        sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        v7 = sub_20B855F80(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_20B8560B0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v15);
        v6 = *(_QWORD *)(a1 + 88);
      }
      result = (uint64_t)sub_20B84C70C(v6);
    }
    if ((v3 & 4) != 0)
    {
      v8 = *(_QWORD *)(a1 + 96);
      if (!v8)
      {
        sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        v9 = sub_20B855F80(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_20B8560B0((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v15);
        v8 = *(_QWORD *)(a1 + 96);
      }
      result = sub_20B84DA04(v8);
    }
    if ((v3 & 8) != 0)
    {
      v10 = *(_QWORD *)(a1 + 104);
      if (!v10)
      {
        sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        v11 = sub_20B855F80(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_20B8560B0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v15);
        v10 = *(_QWORD *)(a1 + 104);
      }
      result = (uint64_t)sub_20B84C70C(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(_BYTE **)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_20B84ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B84EDAC(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  int *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  char *v27;
  unsigned int v28;
  std::string *v29;
  char *v30;

  v30 = a2;
  if ((sub_20B847CBC((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)(a1 + 8);
    while (2)
    {
      v7 = v30 + 1;
      v8 = *v30;
      if (*v30 < 0)
      {
        v9 = v8 + (*v7 << 7);
        v8 = v9 - 128;
        if (*v7 < 0)
        {
          v27 = (char *)sub_20B862580((uint64_t)v30, v9 - 128);
          v30 = v27;
          if (!v27)
            return 0;
          v7 = v27;
          v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_49;
              v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 1u;
              v18 = *(_QWORD *)(a1 + 80);
              if (!v18)
              {
                v19 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v19 = (_QWORD *)*v19;
                v18 = sub_20B84FE90((uint64_t)v19);
                *(_QWORD *)(a1 + 80) = v18;
                v7 = v30;
              }
              v20 = (char *)sub_20B84F1E8(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 2u;
              v21 = *(_QWORD *)(a1 + 88);
              if (v21)
                goto LABEL_45;
              v22 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v22 = (_QWORD *)*v22;
              v21 = sub_20B84FF44((uint64_t)v22);
              *(_QWORD *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 4u;
              v23 = *(_QWORD *)(a1 + 96);
              if (!v23)
              {
                v24 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v24 = (_QWORD *)*v24;
                v23 = sub_20B850104((uint64_t)v24);
                *(_QWORD *)(a1 + 96) = v23;
                v7 = v30;
              }
              v20 = (char *)sub_20B84F370(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 8u;
              v21 = *(_QWORD *)(a1 + 104);
              if (v21)
                goto LABEL_45;
              v25 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v25 = (_QWORD *)*v25;
              v21 = sub_20B84FF44((uint64_t)v25);
              *(_QWORD *)(a1 + 104) = v21;
LABEL_44:
              v7 = v30;
LABEL_45:
              v20 = (char *)sub_20B84F2AC(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8)
                v26 = (v8 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if ((*v6 & 1) != 0)
                {
                  v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  v29 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
                  v7 = v30;
                }
                v20 = (char *)sub_20B862A60(v8, v29, v7, a3);
              }
              else
              {
                v20 = (char *)sub_20B85B570((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_25472C748, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              v30 = v20;
              if (!v20)
                return 0;
LABEL_47:
              if ((sub_20B847CBC((uint64_t)a3, &v30, a3[11].i32[1]) & 1) != 0)
                return v30;
              continue;
          }
          while (1)
          {
            v11 = (unsigned __int8 *)(v10 + 1);
            v30 = v10 + 1;
            v12 = *(int **)(a1 + 72);
            if (!v12)
              break;
            v13 = *(int *)(a1 + 64);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_20B86768C(a1 + 56, v14 + 1);
                v12 = *(int **)(a1 + 72);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_20B8501B8(*(_QWORD *)(a1 + 56));
              v16 = *(_QWORD *)(a1 + 72);
              v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            v15 = *(_QWORD **)&v12[2 * v13 + 2];
LABEL_18:
            v10 = (char *)sub_20B84F124(a3, (uint64_t)v15, v11);
            v30 = v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_47;
          }
          v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        v7 = v30 + 2;
      }
      break;
    }
    v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_20B84F124(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_20B8480DC((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_20B84E2E0(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_20B84F1E8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_20B8480DC((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (uint64_t)sub_20B848F5C(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_20B84F2AC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_20B8480DC((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_20B84C818(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_20B84F370(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = (char *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = sub_20B8480DC((uint64_t)a1, (int)v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (uint64_t)sub_20B84DA5C(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_20B84F434(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = sub_20B855544((uint64_t)a3, a2);
      v8 = sub_20B8280B0(a1 + 56, i);
      *a2 = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = sub_20B84E564(v8, v10, a3);
    }
  }
  v14 = *(_DWORD *)(a1 + 48);
  if ((v14 & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v15 = *(_QWORD *)(a1 + 80);
    *a2 = 18;
    v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      v17 = a2 + 2;
    }
    a2 = sub_20B84A474(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v21 = *(_QWORD *)(a1 + 88);
  *a2 = 26;
  v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    v23 = a2 + 2;
  }
  a2 = sub_20B84CC14(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_20B855544((uint64_t)a3, a2);
  v27 = *(_QWORD *)(a1 + 96);
  *a2 = 34;
  v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    v30 = v28 >> 7;
    if (v28 >> 14)
    {
      v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        v31 = v30 >> 7;
        ++v29;
        v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    v29 = a2 + 2;
  }
  a2 = sub_20B84DD34(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_20B855544((uint64_t)a3, a2);
    v33 = *(_QWORD *)(a1 + 104);
    *a2 = 42;
    v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          v37 = v36 >> 7;
          ++v35;
          v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      v35 = a2 + 2;
    }
    a2 = sub_20B84CC14(v33, v35, a3);
  }
LABEL_58:
  v39 = sub_20B85C1A4(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  v40 = v39;
  v41 = *(_QWORD *)(a1 + 8);
  if ((v41 & 1) == 0)
    return v40;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    v44 = *(void **)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v39) >= (int)v45)
  {
    v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return sub_20B855654((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_20B84F82C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = sub_20B85ED38(a1 + 24);
  v3 = *(int *)(a1 + 64);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_20B84E6FC(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sub_20B84CE14(*(_QWORD *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sub_20B84B628(*(_QWORD *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sub_20B84DEB8(*(_QWORD *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sub_20B84CE14(*(_QWORD *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_20B84F9B4(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_24C465BC0)
    sub_20B848590(a1, (uint64_t)a2, a3);
  sub_20B84F9DC(a1, (uint64_t)a2);
}

void sub_20B84F9DC(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  char v26;
  std::string v27[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    v4 = sub_20B855F80(v27, "CHECK failed: (&from) != (this): ");
    sub_20B8560B0((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v27);
  }
  sub_20B85A06C(a1 + 24, a2 + 24);
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v5 & 1) != 0)
      v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_20B847DF8((unint64_t *)(a1 + 8));
    v10 = *(char *)(v7 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v8;
    else
      v11 = *(const std::string::value_type **)(v7 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v7 + 31);
    else
      v12 = *(_QWORD *)(v7 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_20B851478(a1 + 56, a2 + 56);
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      v14 = *(_QWORD *)(a1 + 80);
      if (!v14)
      {
        v15 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v14 = sub_20B84FE90((uint64_t)v15);
        *(_QWORD *)(a1 + 80) = v14;
      }
      if (*(_QWORD *)(a2 + 80))
        v16 = *(void **)(a2 + 80);
      else
        v16 = &unk_25472C4F8;
      sub_20B84BEFC(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      v17 = *(_QWORD *)(a1 + 88);
      if (!v17)
      {
        v18 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v17 = sub_20B84FF44((uint64_t)v18);
        *(_QWORD *)(a1 + 88) = v17;
      }
      if (*(_QWORD *)(a2 + 88))
        v19 = *(void **)(a2 + 88);
      else
        v19 = &unk_25472C640;
      sub_20B84CFA0(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0)
          return;
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    v20 = *(_QWORD *)(a1 + 96);
    if (!v20)
    {
      v21 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v21 = (_QWORD *)*v21;
      v20 = sub_20B850104((uint64_t)v21);
      *(_QWORD *)(a1 + 96) = v20;
    }
    if (*(_QWORD *)(a2 + 96))
      v22 = *(void **)(a2 + 96);
    else
      v22 = &unk_25472C6C0;
    sub_20B84DF8C(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      v23 = *(_QWORD *)(a1 + 104);
      if (!v23)
      {
        v24 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v23 = sub_20B84FF44((uint64_t)v24);
        *(_QWORD *)(a1 + 104) = v23;
      }
      if (*(_QWORD *)(a2 + 104))
        v25 = *(void **)(a2 + 104);
      else
        v25 = &unk_25472C640;
      sub_20B84CFA0(v23, (uint64_t)v25);
    }
  }
}

void sub_20B84FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B84FC14(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_20B84EBCC(a1);
    sub_20B84F9DC(a1, a2);
  }
}

uint64_t sub_20B84FC4C(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  result = sub_20B85B23C(a1 + 24);
  if (!(_DWORD)result)
    return result;
  result = sub_20B84FE2C(a1 + 56);
  if (!(_DWORD)result)
    return result;
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (!v4)
    {
      sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      v5 = sub_20B855F80(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_20B8560B0((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v13);
      v4 = *(_QWORD *)(a1 + 80);
    }
    result = sub_20B85B23C(v4 + 16);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    v6 = *(_QWORD *)(a1 + 88);
    if (!v6)
    {
      sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      v7 = sub_20B855F80(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_20B8560B0((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v13);
      v6 = *(_QWORD *)(a1 + 88);
    }
    result = sub_20B85B23C(v6 + 24);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0)
      return 1;
    v10 = *(_QWORD *)(a1 + 104);
    if (!v10)
    {
      sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v11 = sub_20B855F80(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_20B8560B0((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v13);
      v10 = *(_QWORD *)(a1 + 104);
    }
    result = sub_20B85B23C(v10 + 24);
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 96);
  if (!v8)
  {
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    v9 = sub_20B855F80(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
    v8 = *(_QWORD *)(a1 + 96);
  }
  result = sub_20B85B23C(v8 + 16);
  if ((_DWORD)result)
  {
    v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_20B84FDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B84FE2C(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_20B8280B0(a1, v2);
  }
  while ((sub_20B85B23C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_20B84FE80@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "sentencepiece.ModelProto");
}

uint64_t sub_20B84FE90(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CB20, 328);
    v2 = sub_20B854A60(a1, 328);
    sub_20B8487EC(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B8487EC(v2, 0);
  }
  return v2;
}

void sub_20B84FF20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B84FF44(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CB70, 88);
    v2 = sub_20B854A60(a1, 88);
    sub_20B84C484(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B84C484(v2, 0);
  }
  return v2;
}

void sub_20B84FFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B84FFF8(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CBD0, 40);
    v2 = (_QWORD *)sub_20B854A60(a1, 40);
    *v2 = &off_24C466160;
    v2[1] = a1;
    v2[2] = 0;
    if (atomic_load(dword_254727FD0))
      goto LABEL_7;
  }
  else
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_24C466160;
    v2[1] = 0;
    v2[2] = 0;
    if (atomic_load(dword_254727FD0))
LABEL_7:
      sub_20B860CA8(dword_254727FD0);
  }
  v2[3] = &qword_25472C7C0;
  v2[4] = &qword_25472C7C0;
  return v2;
}

void sub_20B8500E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t sub_20B850104(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CB38, 72);
    v2 = sub_20B854A60(a1, 72);
    sub_20B84D890(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B84D890(v2, 0);
  }
  return v2;
}

void sub_20B850194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8501B8(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CC28, 64);
    v2 = (_QWORD *)sub_20B854A60(a1, 64);
    sub_20B84E090(v2, a1);
  }
  else
  {
    v2 = (_QWORD *)operator new();
    sub_20B84E090(v2, 0);
  }
  return v2;
}

void sub_20B850248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B85026C(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_24C45CAB0, 112);
    v2 = sub_20B854A60(a1, 112);
    sub_20B84E96C(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_20B84E96C(v2, 0);
  }
  return v2;
}

void sub_20B8502FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B850320()
{
  return sub_20B84FE90(0);
}

uint64_t sub_20B850328(uint64_t a1, uint64_t a2)
{
  return sub_20B84FE90(a2);
}

uint64_t sub_20B850330(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20B850338()
{
  return sub_20B84FF44(0);
}

uint64_t sub_20B850340(uint64_t a1, uint64_t a2)
{
  return sub_20B84FF44(a2);
}

uint64_t sub_20B850348(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_20B850350(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_20B850358(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_20B850360(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_20B850368(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_20B850370(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_20B850378(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_20B850380(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_20B850388(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

_QWORD *sub_20B850390()
{
  return sub_20B84FFF8(0);
}

_QWORD *sub_20B850398(uint64_t a1, uint64_t a2)
{
  return sub_20B84FFF8(a2);
}

uint64_t sub_20B8503A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_20B8503A8()
{
  return sub_20B850104(0);
}

uint64_t sub_20B8503B0(uint64_t a1, uint64_t a2)
{
  return sub_20B850104(a2);
}

uint64_t sub_20B8503B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

_QWORD *sub_20B8503C0()
{
  return sub_20B8501B8(0);
}

_QWORD *sub_20B8503C8(uint64_t a1, uint64_t a2)
{
  return sub_20B8501B8(a2);
}

uint64_t sub_20B8503D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_20B8503D8()
{
  return sub_20B85026C(0);
}

uint64_t sub_20B8503E0(uint64_t a1, uint64_t a2)
{
  return sub_20B85026C(a2);
}

uint64_t sub_20B8503E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_20B8503F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_20B8503F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_254728108);
    if (!result)
      result = (char *)sub_20B854B8C(&off_2547280F0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B850460(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_254728088);
    if (!result)
      result = (char *)sub_20B854B8C(&off_254728070);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B8504C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2547280A8);
    if (!result)
      result = (char *)sub_20B854B8C(&off_254728090);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B850530(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2547280C8);
    if (!result)
      result = (char *)sub_20B854B8C(&off_2547280B0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B850598(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2547280E8);
    if (!result)
      result = (char *)sub_20B854B8C(&off_2547280D0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_20B850600(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1)
    v1 = (unsigned __int8 *)&unk_25472C4F8;
  return v1[248];
}

uint64_t sub_20B85061C(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_25472C4F8;
  if (*(_QWORD *)(a1 + 80))
    v1 = *(unsigned __int8 **)(a1 + 80);
  return (v1[40] >> 3) & 1;
}

char *sub_20B85063C(uint64_t a1, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(sub_20B8280B0(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sub_20B850670(uint64_t a1, int a2)
{
  return *(float *)(sub_20B8280B0(a1 + 56, a2) + 56);
}

BOOL sub_20B85068C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 56, a2) + 60) == 1;
}

BOOL sub_20B8506B0(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 56, a2) + 60) == 2;
}

BOOL sub_20B8506D4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 56, a2) + 60) == 3;
}

BOOL sub_20B8506F8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 56, a2) + 60) == 5;
}

BOOL sub_20B85071C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 56, a2) + 60) == 4;
}

BOOL sub_20B850740(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 56, a2) + 60) == 6;
}

char *sub_20B850764(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 88);
  if (!v1)
    v1 = (char *)&unk_25472C640;
  return v1 + 16;
}

char *sub_20B850780(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 104);
  if (!v1)
    v1 = (char *)&unk_25472C640;
  return v1 + 16;
}

uint64_t sub_20B85079C(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

uint64_t sub_20B8507C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_20B8507D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_254728108);
    if (!result)
      result = (char *)sub_20B854B8C(&off_2547280F0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B850838(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_254728088);
    if (!result)
      result = (char *)sub_20B854B8C(&off_254728070);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B8508A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2547280A8);
    if (!result)
      result = (char *)sub_20B854B8C(&off_254728090);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B850908(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2547280C8);
    if (!result)
      result = (char *)sub_20B854B8C(&off_2547280B0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_20B850970(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2547280E8);
    if (!result)
      result = (char *)sub_20B854B8C(&off_2547280D0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_20B8509D8(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1)
    v1 = (unsigned __int8 *)&unk_25472C4F8;
  return v1[248];
}

uint64_t sub_20B8509F4(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_25472C4F8;
  if (*(_QWORD *)(a1 + 64))
    v1 = *(unsigned __int8 **)(a1 + 64);
  return (v1[40] >> 3) & 1;
}

uint64_t sub_20B850A14(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_25472C4F8;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

char *sub_20B850A40(uint64_t a1, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(sub_20B8280B0(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sub_20B850A74(uint64_t a1, int a2)
{
  return *(float *)(sub_20B8280B0(a1 + 40, a2) + 56);
}

BOOL sub_20B850A90(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 40, a2) + 60) == 1;
}

BOOL sub_20B850AB4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 40, a2) + 60) == 2;
}

BOOL sub_20B850AD8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 40, a2) + 60) == 3;
}

BOOL sub_20B850AFC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 40, a2) + 60) == 5;
}

BOOL sub_20B850B20(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 40, a2) + 60) == 4;
}

BOOL sub_20B850B44(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_20B8280B0(a1 + 40, a2) + 60) == 6;
}

char *sub_20B850B68(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 72);
  if (!v1)
    v1 = (char *)&unk_25472C640;
  return v1 + 16;
}

char *sub_20B850B84(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 88);
  if (!v1)
    v1 = (char *)&unk_25472C640;
  return v1 + 16;
}

void sub_20B850BA0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B850BB4(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B850C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B850C90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v4 = sub_20B855F80(v6, "CHECK failed: (n) >= (0): ");
    sub_20B8560B0((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_20B8560B8((uint64_t)v6);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_20B850D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B850D50(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B850E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B850E2C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_20B855F80(v7, "CHECK failed: (n) >= (0): ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_20B8560B8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = sub_20B84D314(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_20B850EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B850ED8(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_20B855F80(v7, "CHECK failed: (n) >= (0): ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_20B8560B8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_20B84E24C(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_20B850F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B850F84(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  int v5;
  const std::string **v6;
  std::string **v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_20B855F80(v11, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_20B8560B8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (std::string **)sub_20B8676A0((uint64_t *)v3, v5);
    result = (uint64_t)sub_20B851070((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    v9 = *(int **)(v3 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

void sub_20B851058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_20B851070(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *v21;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v17 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 32), &unk_24C45E6B8, 24);
        v21 = (std::string *)sub_20B85477C((unint64_t *)v17, 0x18uLL, (uint64_t)sub_20B850BA0);
      }
      else
      {
        v21 = (std::string *)operator new();
      }
      v22 = v21;
      v21->__r_.__value_.__r.__words[0] = 0;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(v21, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t *sub_20B851188(uint64_t *a1)
{
  sub_20B8511B0(a1);
  return sub_20B8480AC(a1);
}

void sub_20B8511B0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_20B84D198(*v3);
          MEMORY[0x20BD39CB0](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

unint64_t sub_20B85122C(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  unint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_20B855F80(v11, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_20B8560B8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (unint64_t *)sub_20B8676A0((uint64_t *)v3, v5);
    result = sub_20B851318(v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

void sub_20B851300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20B851318(unint64_t result, unint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_20B8513C4(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_20B84FFF8(v18);
      result = sub_20B8513C4(v21, (unint64_t)v22);
      *v20++ = (unint64_t)v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t sub_20B8513C4(uint64_t a1, unint64_t a2)
{
  return sub_20B84D730(a2, a1);
}

uint64_t *sub_20B8513D4(uint64_t *a1)
{
  sub_20B8513FC(a1);
  return sub_20B8480AC(a1);
}

void sub_20B8513FC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_20B84E110(*v3);
          MEMORY[0x20BD39CB0](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_20B851478(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_20B855F80(v11, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_20B8676A0((uint64_t *)a1, v5);
    sub_20B851564((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_20B85154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B851564(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_20B851610(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_20B8501B8(v18);
      sub_20B851610(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_20B851610(uint64_t a1, uint64_t a2)
{
  sub_20B84E804(a2, a1);
}

_QWORD *sub_20B851620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  result = sub_20B851664((uint64_t)v8, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_20B851664@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_20B8516E0(v4, *(const char **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_20B8516BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8516E0(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  size_t v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _DWORD *v19;

  *a1 = &off_24C465D90;
  v6 = a1 + 1;
  sub_20B80627C(a1 + 1);
  if (a3)
  {
    v7 = (_QWORD *)operator new();
    sub_20B82EB18(v7);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEDB1D0];
  }
  a1[2] = v7;
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
  {
    v15 = 5;
    sub_20B827F10((uint64_t)v16);
    sub_20B828F84(v16, (uint64_t)"\"", 1);
    v8 = strlen(a2);
    sub_20B828F84(v16, (uint64_t)a2, v8);
    sub_20B828F84(v16, (uint64_t)"\": ", 3);
    v9 = __error();
    sub_20B852304(*v9);
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    sub_20B828F84(v16, (uint64_t)v10, v11);
    sub_20B825AE4(&v15, (uint64_t)&v19);
    sub_20B853F98(v6, &v19);
    sub_20B853D84((uint64_t *)&v19);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v16[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v16[1] = MEMORY[0x24BEDB848] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v18);
  }
  return a1;
}

void sub_20B8518B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t *v15;
  uint64_t v16;

  sub_20B853D84((uint64_t *)(v16 - 56));
  if (a14 < 0)
    operator delete(__p);
  sub_20B825B70((uint64_t)&a15);
  sub_20B853D84(v15);
  _Unwind_Resume(a1);
}

void sub_20B851934(_QWORD *a1)
{
  sub_20B851B20(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B851958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20B853F94(a2, a1 + 8);
}

BOOL sub_20B851964(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = sub_20B851B78(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_20B851A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_20B851A14(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)MEMORY[0x24BEDB1D0];
  if (v2 == (_QWORD *)MEMORY[0x24BEDB1D0])
  {
    if ((int)sub_20B8520F8() <= 2)
    {
      v11 = 0;
      v4 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"filesystem.cc", 13);
      sub_20B828F84(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = sub_20B828F84(v5, (uint64_t)") ", 2);
      v7 = sub_20B828F84(v6, (uint64_t)"LOG(", 4);
      v8 = sub_20B828F84(v7, (uint64_t)"ERROR", 5);
      v9 = sub_20B828F84(v8, (uint64_t)") ", 2);
      sub_20B828F84(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_20B827FFC(&v11);
    }
  }
  else
  {
    sub_20B851CFC(a2, *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_20B851B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20B827FFC(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B851B20(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C465D90;
  v2 = a1[2];
  if (v2 != MEMORY[0x24BEDB1D0] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B853D84(a1 + 1);
  return a1;
}

_QWORD *sub_20B851B78(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x20BD39A04](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20B851CA4(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20B851C70);
  }
  __cxa_rethrow();
}

void sub_20B851CE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B851CFC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  sub_20B851D78(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x20BD39944](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B851D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B851D78(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = sub_20B851E44(&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_20B851E14(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_20B851E30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20B851E44(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

_QWORD *sub_20B851EFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x20BD399C8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20B851FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t sub_20B852004()
{
  unsigned int v0;
  uint64_t v1;
  std::random_device v3;

  v0 = atomic_load((unsigned int *)&unk_254728110);
  if (v0 != -1)
    return atomic_load((unsigned int *)&unk_254728110);
  sub_20B852088(&v3);
  v1 = MEMORY[0x20BD39B18](&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_20B852060(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  unsigned int *v12;

  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x20B85204CLL);
}

std::random_device *sub_20B852088(std::random_device *a1)
{
  std::string __token;

  sub_20B80BBD0(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B8520DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8520F8()
{
  return atomic_load((unsigned int *)&unk_25472AE48);
}

uint64_t sub_20B852108(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t result;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char v12;
  int v13;

  v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  v5 = a2 - (_QWORD)a1;
  if ((unint64_t)(a2 - (_QWORD)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      v6 = a1[1];
      if (v6 <= -65)
      {
        result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        v8 = (char)a1[1];
        if (v8 <= -65)
        {
          v9 = a1[2];
          if (v9 <= -65)
          {
            result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        v10 = (char)a1[1];
        if (v10 <= -65)
        {
          v11 = (char)a1[2];
          if (v11 <= -65)
          {
            v12 = a1[3];
            if (v12 <= -65)
            {
              v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_20B852250()
{
  uint64_t (*v0)(_QWORD);
  _DWORD *v2;
  uint64_t (*v3)(_QWORD);
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v0 = off_254729BB0;
  if ((*(_BYTE *)off_254729BB0(&off_254729BB0) & 1) == 0)
  {
    sub_20B852004();
    v2 = (_DWORD *)off_254729B98(&off_254729B98);
    *v2 = v4;
    do
    {
      v5 = v3(&off_254729B98);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(_QWORD *)(v3(&off_254729B98) + 2496) = 0;
    *(_BYTE *)v0(&off_254729BB0) = 1;
  }
  return off_254729B98(&off_254729B98);
}

uint64_t sub_20B852304(int a1)
{
  size_t v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char __strerrbuf[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_20B827F10((uint64_t)v4);
  v1 = strlen(__strerrbuf);
  v2 = sub_20B828F84(v4, (uint64_t)__strerrbuf, v1);
  sub_20B828F84(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD39C2C](&v6);
}

void sub_20B852414(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B852430(uint64_t a1, unint64_t a2)
{
  if (!a2)
    sub_20B852628();
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_20B852454(std::string *this)
{
  std::string::size_type size;
  std::string::size_type v3;

  LOBYTE(size) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((_BYTE *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0)
        v3 = this->__r_.__value_.__l.__size_;
    }
    while ((v3 & 3) != 0);
  }
}

_QWORD *sub_20B8524B4@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_20B80627C(a3);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_20B827F10((uint64_t)v10);
    sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_20B828F84(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_20B828F84(v10, (uint64_t)") [", 3);
    sub_20B828F84(v10, (uint64_t)"string.size() >= size", 21);
    sub_20B828F84(v10, (uint64_t)"] ", 2);
    sub_20B825AE4(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x20BD39C2C](&v12);
  }
}

void sub_20B852610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B825B70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B852628()
{
  __assert_rtn("RoundUp", "util.cc", 276, "multiple");
}

uint64_t sub_20B852650(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_20B84131C(a1);
  *v4 = &off_24C466708;
  v4[1] = a2 + 16;
  sub_20B82619C((uint64_t)v4);
  return a1;
}

void sub_20B85268C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B825CC0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8526A4(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_20B824FC4(a1, a2, a3, a4);
  *result = &off_24C466708;
  return result;
}

void sub_20B8526C8(uint64_t a1)
{
  sub_20B825CC0(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8526EC(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  int **v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int **v32;
  int **v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  float v37;
  float v38;
  int **v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v69[5];
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  int v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v70);
  if (v70)
  {
    sub_20B853D84((uint64_t *)&v70);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_20B853D84((uint64_t *)&v70);
  if (!a3)
    goto LABEL_3;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (a3 >> 59)
    sub_20B80CDD8();
  v8 = 0;
  __p = operator new(32 * a3);
  v78 = (char *)__p;
  v79 = (char *)__p + 32 * a3;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v70 = &off_24C466948;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74 = 256;
  v69[0] = (uint64_t)a1;
  v69[1] = (uint64_t)&v70;
  v69[2] = (uint64_t)&__p;
  v69[3] = (uint64_t)&v80;
  v69[4] = (uint64_t)v75;
  do
  {
    v86 = 0uLL;
    v9 = sub_20B82D91C(a1[2], a2, a3, (BOOL *)&v85 + 8);
    *(_QWORD *)&v86 = a2;
    *((_QWORD *)&v86 + 1) = v9;
    a3 -= v9;
    if (a3)
      v10 = v8 + 1;
    else
      v10 = -1;
    LODWORD(v85) = v8 - 1;
    DWORD1(v85) = v10;
    v11 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        sub_20B80CDD8();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          sub_20B800BC0();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v86;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v85;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = v14;
      }
      v24 = &v19[32 * v18];
      v13 = v21 + 32;
      __p = v22;
      v78 = v21 + 32;
      v79 = v24;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v86;
      *(_OWORD *)v78 = v85;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    v78 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  if ((unint64_t)(v13 - (_BYTE *)__p) >= 0x21)
  {
    v25 = 1;
    do
    {
      sub_20B852E8C(v69, v25 - 1, v25);
      ++v25;
    }
    while (v25 < (v78 - (_BYTE *)__p) >> 5);
  }
  v26 = (int **)v80;
  v27 = v81;
  if (v80 != v81)
  {
    v28 = 0;
    do
    {
      v29 = *v26;
      if (v27 - (char *)v26 >= 9)
      {
        v30 = 0;
        v31 = (v27 - (char *)v26) >> 3;
        v32 = v26;
        do
        {
          v33 = v32;
          v32 += v30 + 1;
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v31)
          {
            v36 = v32[1];
            v37 = *((float *)*v32 + 2);
            v38 = *((float *)v36 + 2);
            if (v37 < v38 || v37 == v38 && **v32 > *v36)
            {
              ++v32;
              v30 = v35;
            }
          }
          *v33 = *v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
        v39 = (int **)(v27 - 8);
        if (v32 == v39)
        {
          *v32 = v29;
        }
        else
        {
          *v32 = *v39;
          *v39 = v29;
          sub_20B853378((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
        }
      }
      v81 -= 8;
      v40 = *v29;
      v41 = *v29;
      v42 = __p;
      v43 = *((_QWORD *)__p + 4 * v41 + 3);
      if (!v43)
        goto LABEL_58;
      v44 = v29[1];
      v45 = *((_QWORD *)__p + 4 * v44 + 3);
      if (!v45)
        goto LABEL_58;
      v46 = v45 + v43;
      if (v46 != *((_QWORD *)v29 + 2))
        goto LABEL_58;
      if (a5 > 0.0)
      {
        if (a5 >= 1.0)
          goto LABEL_58;
        if (!v28)
          v28 = sub_20B852250();
        v47 = sub_20B83D70C(v28);
        if (((double)v47 + (double)sub_20B83D70C(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5)
          goto LABEL_58;
        v42 = __p;
        v40 = *v29;
        v44 = v29[1];
        v41 = *v29;
        v46 = *((_QWORD *)__p + 4 * v44 + 3) + *((_QWORD *)__p + 4 * v41 + 3);
      }
      v48 = (char *)&v42[8 * v41];
      v49 = (char *)&v42[8 * v44];
      *((_QWORD *)v48 + 3) = v46;
      *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
      v50 = *((unsigned int *)v49 + 1);
      if ((v50 & 0x80000000) == 0)
        v42[8 * v50] = v40;
      *((_QWORD *)v49 + 2) = "";
      *((_QWORD *)v49 + 3) = 0;
      sub_20B852E8C(v69, *((_DWORD *)__p + 8 * v41), v40);
      sub_20B852E8C(v69, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
      v26 = (int **)v80;
      v27 = v81;
    }
    while (v80 != v81);
  }
  v84 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_24C46AD40;
  v51[1] = a1;
  v51[2] = v83;
  v51[3] = v75;
  *((_QWORD *)&v86 + 1) = v51;
  sub_20B853B00(&v85, v83);
  v52 = (__int128 *)*((_QWORD *)&v86 + 1);
  if (*((__int128 **)&v86 + 1) == &v85)
  {
    v53 = 4;
    v52 = &v85;
  }
  else
  {
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_65;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_65:
  v54 = 0;
  v55 = (_QWORD *)MEMORY[0x24BEDB310];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    if (v54 < 0)
    {
      LOBYTE(v85) = 1;
      v56 = sub_20B828F84(v55, (uint64_t)"bpe_model.cc", 12);
      sub_20B828F84(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = sub_20B828F84(v57, (uint64_t)") [", 3);
      v59 = sub_20B828F84(v58, (uint64_t)"(index) >= (0)", 14);
      sub_20B828F84(v59, (uint64_t)"] ", 2);
      sub_20B827FFC(&v85);
    }
    v60 = __p;
    if (v54 >= (int)((unint64_t)(v78 - (_BYTE *)__p) >> 5))
    {
      LOBYTE(v85) = 1;
      v61 = sub_20B828F84(v55, (uint64_t)"bpe_model.cc", 12);
      sub_20B828F84(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = sub_20B828F84(v62, (uint64_t)") [", 3);
      v64 = sub_20B828F84(v63, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
      sub_20B828F84(v64, (uint64_t)"] ", 2);
      sub_20B827FFC(&v85);
      v60 = __p;
    }
    sub_20B85329C((uint64_t)v83, v60[4 * v54 + 2], v60[4 * v54 + 3], (uint64_t)a4);
    v54 = *((_DWORD *)__p + 8 * v54 + 1);
  }
  while (v54 != -1);
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
    goto LABEL_75;
  }
  if (v84)
  {
    v66 = 5;
LABEL_75:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
LABEL_76:
  sub_20B8532DC(&v70);
  sub_20B84055C((uint64_t)v75);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_20B852DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_20B8532DC(&a16);
  sub_20B84055C((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_20B852E8C(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  _QWORD v66[2];
  _OWORD *v67;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v6 = a2;
  v7 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v7 + 32 * a2 + 8))
    return result;
  v8 = a3;
  v9 = v7 + 32 * a3;
  if (*(_BYTE *)(v9 + 8))
    return result;
  v10 = *a1;
  v11 = v7 + 32 * a2;
  v12 = *(_BYTE **)(v11 + 16);
  v13 = *(_QWORD *)(v9 + 24) + *(_QWORD *)(v11 + 24);
  v66[0] = v12;
  v66[1] = v13;
  v14 = *(unsigned int **)(v10 + 40);
  v15 = *v14;
  if (v13)
  {
    v16 = 0;
    v17 = v13;
    while (1)
    {
      v18 = *v12++;
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v18;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v18)
        return result;
      if (!--v17)
        goto LABEL_17;
    }
  }
  v19 = *v12;
  if (*v12)
  {
    v16 = 0;
    v20 = v12 + 1;
    while (1)
    {
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v19;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v19)
        return result;
      v21 = *v20++;
      v19 = v21;
      if (!v21)
        goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  if ((v15 & 0x100) != 0)
  {
    v22 = v14[v16 ^ (v15 >> 10 << ((v15 >> 6) & 8))];
    v23 = (_QWORD *)a1[1];
    v24 = v23[5];
    v25 = v23[6];
    v26 = v23[4];
    if (v26 >= v25)
    {
      v26 = 0;
      ++v24;
      v23[4] = 0;
      v23[5] = v24;
    }
    v27 = v23[1];
    v63 = v10;
    if (v24 == (v23[2] - v27) >> 3)
    {
      v62 = v22;
      is_mul_ok(v25, 0x18uLL);
      v28 = (void *)operator new[]();
      bzero(v28, 24 * v23[6]);
      v30 = (_QWORD *)v23[2];
      v29 = v23[3];
      if ((unint64_t)v30 >= v29)
      {
        v61 = v28;
        v32 = (_QWORD *)v23[1];
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_60;
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = v61;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_61;
          v38 = (char *)operator new(8 * v36);
          v33 = v30 - v32;
          v37 = v61;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v33];
        v40 = &v38[8 * v36];
        *(_QWORD *)v39 = v37;
        v31 = v39 + 8;
        if (v30 != v32)
        {
          do
          {
            v41 = *--v30;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
          }
          while (v30 != v32);
          v30 = (_QWORD *)v23[1];
        }
        v23[1] = v39;
        v23[2] = v31;
        v23[3] = v40;
        v22 = v62;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
        v22 = v62;
      }
      v23[2] = v31;
      v27 = v23[1];
      v26 = v23[4];
      v24 = v23[5];
      v10 = v63;
    }
    v42 = *(_QWORD *)(v27 + 8 * v24) + 24 * v26;
    v23[4] = v26 + 1;
    *(_DWORD *)v42 = a2;
    *(_DWORD *)(v42 + 4) = a3;
    v43 = v22 & 0x7FFFFFFF;
    *(float *)(v42 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    *(_QWORD *)(v42 + 16) = v13;
    v44 = (uint64_t *)a1[3];
    v46 = (_QWORD *)v44[1];
    v45 = v44[2];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v42;
      v47 = (uint64_t)(v46 + 1);
LABEL_58:
      v44[1] = v47;
      sub_20B853378(*v44, v47, (v47 - *v44) >> 3);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v43))
      {
        v58 = *(_QWORD *)a1[2];
        v64 = *(__n128 *)(v58 + 32 * v6 + 16);
        v65 = *(__n128 *)(v58 + 32 * v8 + 16);
        v59 = a1[4];
        v67 = v66;
        v60 = (__n128 *)sub_20B853410(v59, (uint64_t)v66, (uint64_t)&unk_20BA37B7A, &v67);
        result = v64;
        v60[2] = v64;
        v60[3] = v65;
      }
      return result;
    }
    v48 = *v44;
    v49 = ((uint64_t)v46 - *v44) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (!v52)
      {
        v53 = 0;
        goto LABEL_51;
      }
      if (!(v52 >> 61))
      {
        v53 = (char *)operator new(8 * v52);
LABEL_51:
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v42;
        v47 = (uint64_t)(v54 + 1);
        if (v46 == (_QWORD *)v48)
        {
          v10 = v63;
        }
        else
        {
          v10 = v63;
          do
          {
            v56 = *--v46;
            *--v54 = v56;
          }
          while (v46 != (_QWORD *)v48);
          v46 = (_QWORD *)*v44;
        }
        *v44 = (uint64_t)v54;
        v44[1] = v47;
        v44[2] = (uint64_t)v55;
        if (v46)
          operator delete(v46);
        goto LABEL_58;
      }
LABEL_61:
      sub_20B800BC0();
    }
LABEL_60:
    sub_20B80CDD8();
  }
  return result;
}

uint64_t sub_20B85329C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

_QWORD *sub_20B8532DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24C466948;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x20BD39C80](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B853358(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

uint64_t sub_20B853368()
{
  return 1;
}

uint64_t sub_20B853370()
{
  return 0;
}

uint64_t sub_20B853378(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

void *sub_20B853410(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20B853684(a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x40uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_20B828960(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_20B853670(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B853684(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return sub_20B828450((uint64_t)&v4, a2, a3);
}

void sub_20B8536A8(_QWORD *a1)
{
  sub_20B8532DC(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8536D0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8536E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46AD40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B853724(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AD40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B85374C(uint64_t a1, _QWORD *a2, void ***a3)
{
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = a2[1];
  v5 = *a3;
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v4;
  v6 = *(_QWORD ***)(a1 + 8);
  v7 = ((uint64_t (*)(_QWORD **, _QWORD, uint64_t))(*v6)[14])(v6, v33, v4);
  if ((_DWORD)v7 == -1 || ((*(uint64_t (**)(_QWORD *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    v10 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*v5) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        v17 = (char *)sub_20B828D70((uint64_t)(v5 + 2), v16);
        v18 = &v17[24 * v13];
        v20 = &v17[24 * v19];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v22 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v23 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_20B80CDD8();
    }
  }
  else
  {
    v8 = sub_20B8539EC(*(_QWORD **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      v9 = (uint64_t *)v8;
      sub_20B85329C(*(_QWORD *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_20B85329C(*(_QWORD *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    v24 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)*v5) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = (char *)sub_20B828D70((uint64_t)(v5 + 2), v28);
        v18 = &v29[24 * v25];
        v20 = &v29[24 * v30];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v31 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v32 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        v21 = (char *)*v5;
LABEL_16:
        *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21)
          operator delete(v21);
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_20B8539A4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F020))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8539E0()
{
  return &unk_24C45F020;
}

uint64_t **sub_20B8539EC(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = sub_20B853684((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *sub_20B853B00(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20B853C68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20B854468(a1);
}

void sub_20B853C74()
{
  _QWORD *v0;
  _QWORD *v1;

  if (!dword_25472C7B8)
  {
    v0 = sub_20B853CBC(MEMORY[0x24BEDB310], "Program terminated with an unrecoverable error.");
    v1 = sub_20B853CF0(v0);
    sub_20B853D80(v1);
    exit(-1);
  }
  dword_25472C7B8 = 2;
}

_QWORD *sub_20B853CBC(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_20B828F84(a1, (uint64_t)__s, v4);
}

_QWORD *sub_20B853CF0(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_20B853D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B853D84(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_20B854158((uint64_t)a1, v2);
  return a1;
}

uint64_t sub_20B853DB8(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v16;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  v13 = __dst;
  *(_QWORD *)(v12 + 16) = v16;
  *(_OWORD *)v12 = v13;
  return a1;
}

void sub_20B853EC0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_20B854158((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B853EE4(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _DWORD *v5;
  _BYTE *v6;
  __int128 v7;

  if (*a2)
  {
    v4 = operator new();
    v5 = *a2;
    *(_DWORD *)v4 = **a2;
    v6 = (_BYTE *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      sub_20B80ACE0(v6, *((void **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)v6 = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

void sub_20B853F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_20B853F98(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _BYTE *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)*a1 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (_BYTE *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        sub_20B80ACE0(v7, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)v7 = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      sub_20B854158((uint64_t)a1, v3);
  }
}

void sub_20B854048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sub_20B85406C(uint64_t *a1)
{
  uint64_t v1;
  const char *result;

  v1 = *a1;
  if (!*a1)
    return "";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

std::string *sub_20B854098@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  unsigned int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return (std::string *)sub_20B80BBD0(a2, "OK");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *v3 - 1;
  if (v5 < 0x10)
    MEMORY[0x20BD39938](a2, off_24C497A00[v5]);
  std::string::append(a2, ": ");
  v6 = *(char *)(*(_QWORD *)a1 + 31);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(*(_QWORD *)a1 + 8);
  else
    v7 = *(const std::string::value_type **)(*(_QWORD *)a1 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
  else
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  return std::string::append(a2, v7, v8);
}

void sub_20B85413C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B854158(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x20BD39CB0);
  }
}

_QWORD *sub_20B8541A0()
{
  unsigned __int8 v0;
  pthread_key_t *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25472AE58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472AE58))
  {
    v2 = (pthread_key_t *)operator new();
    pthread_key_create(v2, (void (__cdecl *)(void *))sub_20B854B7C);
    qword_25472AE50 = (uint64_t)v2;
    __cxa_guard_release(&qword_25472AE58);
  }
  return sub_20B854254((pthread_key_t *)qword_25472AE50);
}

void sub_20B85421C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_25472AE58);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B854254(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_20BA36B20;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t sub_20B8542C0(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*(_QWORD *)(a1 + 16) < a2)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    v4 = sub_20B855F80(v7, "CHECK failed: n <= size_: ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_20B854334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B854368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 72;
  if (v6 + 72 > *(_QWORD *)(a1 + 16))
  {
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    v8 = sub_20B855F80(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
  }
  v9 = (_QWORD *)sub_20B8542C0(a1, v6);
  *(_QWORD *)(a1 + 8) = v7;
  *v9 = a3;
  v9[1] = a2;
  v9[2] = a1;
  v9[5] = sub_20B8542C0(a1, v7);
  v10 = sub_20B8542C0(a1, *(_QWORD *)(a1 + 16));
  v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_20B854438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B854468(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_20B854478(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_20B854490(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  size_t v9;
  void *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  v5 = *(_QWORD *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5)
      v7 = *(_QWORD *)v5;
    else
      v7 = 256;
  }
  else
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0x2000;
    if (v6 >= 2 * a2)
      v7 = 2 * a2;
    else
      v7 = v6;
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_20B855F68((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    v8 = sub_20B855F80(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_20B8560B0((uint64_t)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v14);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  if (v5)
    result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  else
    result = operator new(v9);
  v11 = (unint64_t *)(a1 + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_20B854584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B85459C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (a1)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = -1;
  v7 = (uint64_t *)sub_20B854490(a3, v6, a2);
  return sub_20B854AD4(v7, v8, a1, 0, 0);
}

_QWORD *sub_20B8545E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *result;
    }
    else
    {
      v7 = 8;
    }
    result = (_QWORD *)sub_20B854678(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    v8 = a1[3];
    *result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_20B854678(uint64_t *a1, unint64_t a2)
{
  std::string *v4;
  unint64_t result;
  unint64_t v6;
  std::string *v7;
  char v8;
  std::string v9[2];

  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_20B855F68((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    v4 = sub_20B855F80(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_20B8560B0((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v9);
  }
  result = a1[5];
  v6 = a1[6];
  if (v6 < result)
  {
    sub_20B855F68((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    v7 = sub_20B855F80(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_20B8560B0((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v9);
    result = a1[5];
    v6 = a1[6];
  }
  if (v6 - result < a2)
    return sub_20B8549E4(a1, a2);
  a1[5] = result + a2;
  return result;
}

void sub_20B85475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20B85477C(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v9;

  v6 = sub_20B8541A0();
  if (v6[1] == a1[3])
  {
    v7 = (uint64_t *)v6[2];
    return sub_20B854804(v7, a2, a3);
  }
  v9 = sub_20B8541A0();
  v7 = (uint64_t *)atomic_load(a1 + 1);
  if (v7 && (_QWORD *)v7[1] == v9)
    return sub_20B854804(v7, a2, a3);
  return sub_20B854860(a1, a2, a3);
}

unint64_t sub_20B854804(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v5 = sub_20B854678(a1, a2);
  v6 = v5;
  v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_20B8545E4(a1, v5, a3);
  }
  else
  {
    *v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_20B854860(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;

  v6 = sub_20B8541A0();
  v7 = (uint64_t *)sub_20B8548EC(a1, (uint64_t)v6);
  return sub_20B854804(v7, a2, a3);
}

unint64_t sub_20B8548B8(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;

  v4 = sub_20B8541A0();
  v5 = (uint64_t *)sub_20B8548EC(a1, (uint64_t)v4);
  return sub_20B854678(v5, a2);
}

unint64_t sub_20B8548EC(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v4 = atomic_load(a1);
  if (!v4)
  {
LABEL_4:
    v5 = sub_20B854490((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)v5 = xmmword_20BA36B30;
    v5[2] = v6;
    v7 = sub_20B854368((uint64_t)v5, a2, (uint64_t)a1);
    v4 = (unint64_t)v7;
    v8 = *a1;
    v7[4] = *a1;
    v9 = __ldxr(a1);
    if (v9 == v8)
    {
      if (__stlxr((unint64_t)v7, a1))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      v7[4] = v9;
      v10 = __ldxr(a1);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)v7, a1))
        goto LABEL_12;
      v11 = 1;
LABEL_13:
      v9 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  while (*(_QWORD *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  sub_20B8541A0()[2] = v4;
  v12 = a1[3];
  sub_20B8541A0()[1] = v12;
  atomic_store(v4, a1 + 1);
  return v4;
}

uint64_t sub_20B8549E4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = a1[2];
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 16) - a1[6] + a1[5];
  v5 = sub_20B85459C(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_20B8542C0((uint64_t)v5, v5[1]);
  a1[6] = sub_20B8542C0(a1[2], *(_QWORD *)(a1[2] + 16));
  return sub_20B854678(a1, a2);
}

unint64_t sub_20B854A64(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v7;

  v4 = sub_20B8541A0();
  if (v4[1] == a1[3])
  {
    v5 = (uint64_t *)v4[2];
    return sub_20B854678(v5, a2);
  }
  v7 = sub_20B8541A0();
  v5 = (uint64_t *)atomic_load(a1 + 1);
  if (v5 && (_QWORD *)v5[1] == v7)
    return sub_20B854678(v5, a2);
  return sub_20B8548B8(a1, a2);
}

uint64_t *sub_20B854AD4(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  v6 = 2;
  if (!a5)
    v6 = 0;
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    v7 = sub_20B855F80(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v10);
  }
  return a1;
}

void sub_20B854B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B854B7C(uint64_t result)
{
  if (result)
    JUMPOUT(0x20BD39CA4);
  return result;
}

unint64_t sub_20B854B8C(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_25472AE60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472AE60))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_254728118, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472AE60);
  }
  std::mutex::lock(&stru_254728118);
  v3 = atomic_load(a1 + 3);
  if (!v3)
  {
    sub_20B82E068(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    v3 = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_254728118);
  return v3;
}

unint64_t sub_20B854C3C(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v8;
  __int128 v9;

  if (*a1 != a2)
  {
    sub_20B847BEC(a1);
    JUMPOUT(0x20BD39944);
  }
  if (!a4)
  {
    result = operator new();
    v8 = result;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)result = *a3;
      *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    result = (unint64_t)sub_20B80ACE0((_BYTE *)result, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_24C45E6B8, 24);
  result = sub_20B85477C((unint64_t *)a4, 0x18uLL, (uint64_t)sub_20B850BA0);
  v8 = result;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v9 = *a3;
  *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)result = v9;
LABEL_11:
  *a1 = v8;
  return result;
}

void sub_20B854D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_20B854D84(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*a1 == a2)
  {
    if (a4)
    {
      if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      {
        v11 = a4;
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_24C45E6B8, 24);
        a4 = v11;
      }
      v9 = sub_20B85477C((unint64_t *)a4, 0x18uLL, (uint64_t)sub_20B850BA0);
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = *a3;
      *(_QWORD *)(v9 + 16) = v10;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
    }
    else
    {
      v9 = operator new();
      *(_OWORD *)v9 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *a1 = v9;
  }
  else
  {
    v6 = sub_20B847BEC(a1);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

unint64_t sub_20B854E8C(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  return sub_20B854C3C(a1, (uint64_t)&qword_25472C7C0, a2, a3);
}

void sub_20B854EA0(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  sub_20B854D84(a1, (uint64_t)&qword_25472C7C0, a2, a3);
}

unint64_t sub_20B854EB4(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  return sub_20B854C3C(a1, 0, a2, a3);
}

uint64_t *sub_20B854EC4(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_25472C7C0)
    return sub_20B854EE0((uint64_t **)a1, a2);
  else
    return (uint64_t *)sub_20B847BEC(a1);
}

uint64_t *sub_20B854EE0(uint64_t **a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *result;
  char v6;
  std::string v7[2];

  if (*a1 != &qword_25472C7C0)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v4 = sub_20B855F80(v7, "CHECK failed: IsDefault(default_value): ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v7);
  }
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_24C45E6B8, 24);
    result = (uint64_t *)sub_20B85477C((unint64_t *)a2, 0x18uLL, (uint64_t)sub_20B850BA0);
  }
  else
  {
    result = (uint64_t *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_20B854FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B854FDC(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1)
    return (_BYTE *)sub_20B847BEC(a1);
  else
    return sub_20B854FF8(a1, a3, a2);
}

_BYTE *sub_20B854FF8(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::string *v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  __int128 v10;
  char v12;
  std::string v13[2];

  if (*a1)
  {
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v6 = sub_20B855F80(v13, "CHECK failed: IsDefault(default_value): ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
  }
  v7 = atomic_load(a3 + 3);
  if (v7)
  {
    if (a2)
      goto LABEL_5;
  }
  else
  {
    v7 = sub_20B854B8C(a3);
    if (a2)
    {
LABEL_5:
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_24C45E6B8, 24);
      v8 = (_BYTE *)sub_20B85477C((unint64_t *)a2, 0x18uLL, (uint64_t)sub_20B850BA0);
      v9 = v8;
      if (*(char *)(v7 + 23) < 0)
        goto LABEL_8;
LABEL_11:
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v9 = v10;
      goto LABEL_12;
    }
  }
  v8 = (_BYTE *)operator new();
  v9 = v8;
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_8:
  sub_20B80ACE0(v8, *(void **)v7, *(_QWORD *)(v7 + 8));
LABEL_12:
  *a1 = v9;
  return v9;
}

void sub_20B855138(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_20B855170(std::string *result, _QWORD *a2)
{
  std::string *v3;
  const std::string *v4;

  if (result->__r_.__value_.__r.__words[0])
  {
    v3 = (std::string *)sub_20B847BEC((uint64_t *)result);
    v4 = (const std::string *)atomic_load(a2 + 3);
    if (!v4)
      v4 = (const std::string *)sub_20B854B8C(a2);
    return std::string::operator=(v3, v4);
  }
  return result;
}

int64_t sub_20B8551C8(uint64_t a1, char *a2)
{
  void *v4;
  char *v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(char **)a1;
    v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      v10 = v5 - a2;
      v9 = v10 + 16;
      *(_QWORD *)(a1 + 8) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - (_DWORD)v5;
    if (a2 <= v5)
      break;
    if (*(_BYTE *)(a1 + 56))
    {
      sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      v7 = sub_20B855F80(v15, "CHECK failed: !had_error_: ");
      sub_20B8560B0((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      v8 = sub_20B855F80(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_20B8560B0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v15);
    }
    a2 = &sub_20B85535C((char **)a1)[v6];
    if (*(_BYTE *)(a1 + 56))
      return 0;
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  v11 = *(char **)a1;
  *(_QWORD *)(a1 + 8) += &a2[-a1 - 16];
  v9 = v11 - a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  v12 = sub_20B855F80(v15, "CHECK failed: s >= 0: ");
  sub_20B8560B0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_20B8560B8((uint64_t)v15);
  return v9;
}

void sub_20B855334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B85535C(char **a1)
{
  std::string *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)a1 + 56))
  {
    sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    v2 = sub_20B855F80(v13, "CHECK failed: !had_error_: ");
    sub_20B8560B0((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v13);
  }
  if (a1[6])
  {
    v3 = (char *)(a1 + 2);
    v5 = *a1;
    v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(_QWORD *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((_BYTE *)a1 + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_20B855F68((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        v9 = sub_20B855F80(v13, "CHECK failed: size > 0: ");
        sub_20B8560B0((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v13);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*a1;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((_BYTE *)a1 + 56) = 1;
    v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_20B8554D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B8554F8(uint64_t a1, char *a2)
{
  int64_t v3;

  if (!*(_BYTE *)(a1 + 56))
  {
    v3 = sub_20B8551C8(a1, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v3);
    a2 = (char *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

char *sub_20B855544(uint64_t a1, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*(_BYTE *)(a1 + 56))
  {
    v3 = &a2[-*(_QWORD *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      v5 = sub_20B855F80(v8, "CHECK failed: overrun >= 0: ");
      sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      v4 = sub_20B855F80(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_20B8560B8((uint64_t)v8);
    }
    a2 = &sub_20B85535C((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)a1)
      return a2;
  }
  return (char *)(a1 + 16);
}

void sub_20B855634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B855654(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  char *v4;
  int i;

  v4 = (char *)a4;
  for (i = sub_20B8556F4(a1, a4); a3 > i; i = sub_20B8556F4(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = sub_20B855544((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_20B8556F4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    v5 = sub_20B855F80(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
    v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_20B855774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B85578C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (sub_20B8556F4((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    v8 = sub_20B8554F8(a1, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(_BYTE *)(a1 + 56) = 1;
      v8 = (char *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(_QWORD *)a1 - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }
  return sub_20B855654((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_20B855868(unint64_t *a1, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    v4 = sub_20B855544((uint64_t)a1, a4);
    v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    sub_20B855F68((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = sub_20B855F80(v23, "CHECK failed: ptr < end_: ");
    sub_20B8560B0((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v23);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return sub_20B8559EC((uint64_t)a1, v18, v9, v17);
}

void sub_20B8559D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B8559EC(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  uint64_t v6;

  if (*(_BYTE *)(a1 + 57))
    return sub_20B85578C(a1, a2, a3, __dst);
  if (*(_QWORD *)a1 - (_QWORD)__dst < (int)a3)
    return sub_20B855654((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  v6 = (int)a3;
  memcpy(__dst, a2, (int)a3);
  return &__dst[v6];
}

char *sub_20B855A54(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    v4 = sub_20B855544((uint64_t)a1, a4);
    v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    sub_20B855F68((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = sub_20B855F80(v23, "CHECK failed: ptr < end_: ");
    sub_20B8560B0((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v23);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*a1 - (uint64_t)v17 < (int)v9)
    return sub_20B855654(a1, v18, v9, (unint64_t)v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_20B855BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B855C00(int a1, int a2, const std::string::value_type *a3)
{
  const std::string::value_type *v6;
  std::string::size_type v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  unsigned __int8 v16;
  void *v17;
  std::string::size_type v18;
  unsigned __int8 v19;
  const char *v20;
  const char *v21;
  int v22;
  std::string v23;
  char __str[127];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a2 > 3014000)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_20B855FE8(a2, &v17);
    if ((v19 & 0x80u) == 0)
      v6 = (const std::string::value_type *)&v17;
    else
      v6 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v7 = v19;
    else
      v7 = v18;
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v25 = 0;
    sub_20B80BBD0(&__p, __str);
    if ((v16 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v9 = v16;
    else
      v9 = v15;
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_20B85624C(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (a1 < 3014000)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_20B855FE8(a1, &v17);
    if ((v19 & 0x80u) == 0)
      v10 = (const std::string::value_type *)&v17;
    else
      v10 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v11 = v19;
    else
      v11 = v18;
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v25 = 0;
    sub_20B80BBD0(&__p, __str);
    if ((v16 & 0x80u) == 0)
      v12 = (const std::string::value_type *)&__p;
    else
      v12 = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v13 = v16;
    else
      v13 = v15;
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_20B85624C(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_20B855EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B855F68(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *sub_20B855F80(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

std::string *sub_20B855FA8(std::string *a1, const std::string::value_type *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *sub_20B855FE8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  __str[127] = 0;
  return sub_20B80BBD0(a2, __str);
}

const char **sub_20B8560B0(uint64_t a1, const char **a2)
{
  return sub_20B85624C(a2);
}

uint64_t sub_20B8560B8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20B8560E8(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", off_24C497A80[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *sub_20B856154(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_20B8561D0(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_20B85624C(const char **result)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = result;
  if (*(_DWORD *)result == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&unk_25472AE68);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)result;
  }
  result = (const char **)off_254727E80(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_20B856300(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_24C45D1F0, (void (*)(void *))sub_20B856304);
  }
  return result;
}

void sub_20B8562EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B856308(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_24C467998;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

void sub_20B856344(std::exception *a1)
{
  sub_20B856308(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B856368(uint64_t a1)
{
  uint64_t result;

  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_20B856384(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_24C467998;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20B80ACE0((_BYTE *)v5, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_20B8563DC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8563F0(uint64_t a1, int a2, _OWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  __int128 v14;

  if (qword_25472AE70)
  {
    v3 = *(int8x8_t *)(qword_25472AE70 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v7;
        if (v7 >= *(_QWORD *)&v3)
          v9 = v7 % *(_QWORD *)&v3;
      }
      else
      {
        v9 = (*(_QWORD *)&v3 - 1) & v7;
      }
      v10 = *(uint64_t ***)(*(_QWORD *)qword_25472AE70 + 8 * v9);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
            }
            else
            {
              v12 &= *(_QWORD *)&v3 - 1;
            }
            if (v12 != v9)
              return 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_20B856504(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_20B856514(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v7;

  if (!*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_20B85FBDC(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_20B85F99C(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        v7 = *(_QWORD *)(a1 + 16);
        sub_20B8292CC(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x20BD39CB0](v7, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x20BD39C80](v5, 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

unsigned __int8 *sub_20B8565E4(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  char v10;
  std::string v11[2];

  v1 = result;
  if (result[9])
  {
    v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = sub_20B855F80(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_20B8560B8((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)v1 = 0;
        break;
      case 9:
      case 12:
        result = (unsigned __int8 *)sub_20B850C90(*(_QWORD *)v1);
        break;
      case 10:
      case 11:
        result = (unsigned __int8 *)sub_20B860384(*(_QWORD *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = sub_20B855F80(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_20B8560B8((uint64_t)v11);
    }
    v6 = dword_20BA37020[v4];
    if (v6 == 10)
    {
      v8 = **(_QWORD **)v1;
      if ((v1[10] & 0x10) != 0)
        v9 = *(uint64_t (**)(void))(v8 + 112);
      else
        v9 = *(uint64_t (**)(void))(v8 + 40);
      result = (unsigned __int8 *)v9();
    }
    else if (v6 == 9)
    {
      v7 = *(_QWORD *)v1;
      if (*(char *)(*(_QWORD *)v1 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_20B856778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B856798(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 1)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 1)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_20B856974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8569AC(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 1)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D1B0, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC44);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 1)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B8650E4(v23, v24 + 1);
    result = sub_20B865558((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_20B865558((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B856C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B856CCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 2)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 2)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_QWORD *)v9 = a4;
  return result;
}

void sub_20B856EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B856EE0(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 2)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D1D0, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC48);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 2)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B865D34(v23, v24 + 1);
    result = sub_20B8661A8((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = sub_20B8661A8((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B8571C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B857200(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 3)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 3)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_20B8573DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B857414(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 3)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D1C0, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC4C);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 3)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B86570C(v23, v24 + 1);
    result = sub_20B865B80((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_20B865B80((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B8576F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B857734(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 4)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 4)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_QWORD *)v9 = a4;
  return result;
}

void sub_20B857910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B857948(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D1E0, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC50);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B86635C(v23, v24 + 1);
    result = sub_20B8667D0((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = sub_20B8667D0((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B857C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B857C68(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a4;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 6)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 6)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(float *)v9 = a5;
  return result;
}

void sub_20B857E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B857E84(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 6)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D1A0, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC54);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 6)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B866984(v23, v24 + 1);
    result = sub_20B866DF8((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    result = sub_20B866DF8((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B85816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8581AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a4;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 5)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 5)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(double *)v9 = a5;
  return result;
}

void sub_20B858390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8583C8(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 5)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D190, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC58);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 5)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B866FAC(v23, v24 + 1);
    result = sub_20B867420((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    result = sub_20B867420((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B8586B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8586F0(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result;
  _BYTE *v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = (_BYTE *)result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 7)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 7)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  *v9 = a4;
  return result;
}

void sub_20B8588CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B858904(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 7)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D180, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC5C);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 7)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B864AC4(v23, v24 + 1);
    result = sub_20B864F34((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
  }
  else
  {
    result = sub_20B864F34((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B858BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B858C24(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t *v14;
  uint64_t v15;
  uint64_t *(*v16)(uint64_t *);

  v9 = sub_20B85B0F4((uint64_t)a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 9) = 1;
    *((_BYTE *)v9 + 8) = a3;
    *((_BYTE *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D190, 16);
        v13 = sub_20B85FC58;
        goto LABEL_31;
      case 2:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D1A0, 16);
        v13 = sub_20B85FC54;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D1D0, 16);
        v13 = sub_20B85FC48;
        goto LABEL_31;
      case 4:
      case 6:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D1E0, 16);
        v13 = sub_20B85FC50;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D1B0, 16);
        v13 = sub_20B85FC44;
        goto LABEL_31;
      case 7:
      case 13:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D1C0, 16);
        v13 = sub_20B85FC4C;
        goto LABEL_31;
      case 8:
        v12 = *a1;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D180, 16);
          v13 = sub_20B85FC5C;
LABEL_31:
          v14 = (uint64_t *)sub_20B85477C((unint64_t *)v12, 0x10uLL, (uint64_t)v13);
          *v14 = 0;
          v14[1] = v12;
        }
        else
        {
LABEL_32:
          v14 = (uint64_t *)operator new();
          *v14 = 0;
          v14[1] = 0;
        }
        goto LABEL_44;
      case 9:
      case 12:
        v15 = *a1;
        if (!v15)
          goto LABEL_42;
        if ((*(_BYTE *)(v15 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32), &unk_24C45D230, 24);
        v16 = (uint64_t *(*)(uint64_t *))sub_20B85FC60;
        goto LABEL_41;
      case 10:
      case 11:
        v15 = *a1;
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32), &unk_24C45D208, 24);
          v16 = sub_20B85FC64;
LABEL_41:
          v14 = (uint64_t *)sub_20B85477C((unint64_t *)v15, 0x18uLL, (uint64_t)v16);
          v14[2] = 0;
          *v14 = v15;
        }
        else
        {
LABEL_42:
          v14 = (uint64_t *)operator new();
          v14[2] = 0;
          *v14 = 0;
        }
        v14[1] = 0;
LABEL_44:
        *v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_20B858F60(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_20B85B0F4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[a3] != 8)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      v12 = sub_20B855F80(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v13 = sub_20B855F80(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_20B855F80(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
    if (dword_20BA37020[v14] != 8)
    {
      sub_20B855F68((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v16 = sub_20B855F80(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_20B8560B0((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_20B8560B8((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_20B85913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B859174(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_20B85B0F4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[a3] != 8)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      v15 = sub_20B855F80(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_24C45D1B0, 16);
      v17 = (uint64_t *)sub_20B85477C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_20B85FC44);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v18 = sub_20B855F80(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (dword_20BA37020[v19] != 8)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v21 = sub_20B855F80(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_20B855F68((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      v22 = sub_20B855F80(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_20B8560B0((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_20B8650E4(v23, v24 + 1);
    result = sub_20B865558((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_20B865558((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_20B859454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B859494(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  unsigned __int8 *v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  char v19;
  std::string v20[2];

  v7 = sub_20B85B0F4((uint64_t)a1, a2);
  v8 = (unsigned __int8 *)v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = sub_20B855F80(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v20);
    }
    if (dword_20BA37020[a3] != 9)
    {
      sub_20B855F68((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      v11 = sub_20B855F80(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_20B8560B0((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v20);
    }
    v8[9] = 0;
    v12 = *a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45E6B8, 24);
      v13 = (_QWORD *)sub_20B85477C((unint64_t *)v12, 0x18uLL, (uint64_t)sub_20B850BA0);
    }
    else
    {
      v13 = (_QWORD *)operator new();
    }
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_QWORD *)v8 = v13;
  }
  else
  {
    if (*((_BYTE *)v7 + 9))
    {
      sub_20B855F68((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v14 = sub_20B855F80(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v20);
    }
    v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = sub_20B855F80(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v20);
    }
    if (dword_20BA37020[v15] != 9)
    {
      sub_20B855F68((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v17 = sub_20B855F80(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_20B8560B0((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(_QWORD *)v8;
}

void sub_20B8596E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B859718(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v7 = sub_20B85B0F4((uint64_t)a1, a2);
  v8 = v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = sub_20B855F80(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v27);
    }
    if (dword_20BA37020[a3] != 9)
    {
      sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      v11 = sub_20B855F80(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_20B8560B0((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v27);
    }
    *((_BYTE *)v8 + 9) = 1;
    *((_BYTE *)v8 + 11) = 0;
    v12 = *a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_24C45D230, 24);
      v13 = (uint64_t *)sub_20B85477C((unint64_t *)v12, 0x18uLL, (uint64_t)sub_20B85FC60);
      v13[2] = 0;
      *v13 = v12;
    }
    else
    {
      v13 = (uint64_t *)operator new();
      v13[2] = 0;
      *v13 = 0;
    }
    v13[1] = 0;
    *v8 = v13;
  }
  else
  {
    if (!*((_BYTE *)v7 + 9))
    {
      sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v14 = sub_20B855F80(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v27);
    }
    v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = sub_20B855F80(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v27);
    }
    if (dword_20BA37020[v15] != 9)
    {
      sub_20B855F68((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v17 = sub_20B855F80(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_20B8560B0((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v27);
    }
  }
  v18 = (uint64_t)*v8;
  v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    v21 = *(_DWORD *)(v18 + 12);
LABEL_23:
    sub_20B86768C(v18, v21 + 1);
    v19 = *(int **)(v18 + 16);
    v21 = *v19;
    goto LABEL_24;
  }
  v20 = *(int *)(v18 + 8);
  v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(_QWORD **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12))
    goto LABEL_23;
LABEL_24:
  *v19 = v21 + 1;
  v23 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
  {
    if ((*(_BYTE *)(v23 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v23 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 32), &unk_24C45E6B8, 24);
    result = (_QWORD *)sub_20B85477C((unint64_t *)v23, 0x18uLL, (uint64_t)sub_20B850BA0);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v24 = *(_QWORD *)(v18 + 16);
  v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_20B859A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B859A84(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char v19;
  char v20;
  std::string v21[2];

  v9 = sub_20B85B0F4((uint64_t)a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = sub_20B855F80(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v21);
    }
    if (dword_20BA37020[a3] != 10)
    {
      sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      v13 = sub_20B855F80(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_20B8560B0((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v21);
    }
    *((_BYTE *)v10 + 9) = 0;
    *((_BYTE *)v10 + 10) &= 0xFu;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *a1);
    *v10 = (uint64_t *)result;
    *((_BYTE *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((_BYTE *)v9 + 9))
    {
      sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v15 = sub_20B855F80(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_20B8560B0((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v21);
    }
    v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = sub_20B855F80(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v21);
    }
    if (dword_20BA37020[v16] != 10)
    {
      sub_20B855F68((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v18 = sub_20B855F80(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_20B8560B0((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v21);
    }
    v19 = *((_BYTE *)v10 + 10);
    *((_BYTE *)v10 + 10) = v19 & 0xF0;
    result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  }
  return result;
}

void sub_20B859CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B859CE8(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  unsigned __int8 *v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  std::string v26[2];

  v9 = sub_20B85B0F4((uint64_t)a1, a2);
  v10 = (unsigned __int8 *)v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = sub_20B855F80(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v26);
    }
    if (dword_20BA37020[a3] != 10)
    {
      sub_20B855F68((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      v13 = sub_20B855F80(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_20B8560B0((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v26);
    }
    v10[9] = 1;
    v14 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v14 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 32), &unk_24C45D208, 24);
      v15 = (_QWORD *)sub_20B85477C((unint64_t *)v14, 0x18uLL, (uint64_t)sub_20B85FC64);
      v15[2] = 0;
      *v15 = v14;
    }
    else
    {
      v15 = (_QWORD *)operator new();
      v15[2] = 0;
      *v15 = 0;
    }
    v15[1] = 0;
    *(_QWORD *)v10 = v15;
  }
  else
  {
    if (!*((_BYTE *)v9 + 9))
    {
      sub_20B855F68((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v16 = sub_20B855F80(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_20B8560B0((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v26);
    }
    v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v18 = sub_20B855F80(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v26);
    }
    if (dword_20BA37020[v17] != 10)
    {
      sub_20B855F68((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v19 = sub_20B855F80(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_20B8560B0((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v26);
    }
  }
  v20 = *(_QWORD *)v10;
  v21 = *(_DWORD **)(*(_QWORD *)v10 + 16);
  if (!v21
    || (v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (v23 = *(_QWORD *)&v21[2 * v22 + 2]) == 0))
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *a1);
    sub_20B85FD64(*(_QWORD *)v10, v23);
  }
  return v23;
}

void sub_20B859F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B859FD0(unsigned __int8 *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  v1 = (_QWORD *)*((_QWORD *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    v6 = (unsigned __int8 *)*v1;
    v4 = (unsigned __int8 *)(v1 + 1);
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        result = sub_20B8565E4(v5 + 40);
        v7 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    v2 = 32 * *((unsigned __int16 *)result + 5);
    v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      result = sub_20B8565E4(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_20B85A06C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  _QWORD *v17;
  unsigned int v18;

  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    v4 = *(unsigned __int16 *)(a2 + 8);
    v5 = *(char **)(a1 + 16);
    v6 = *(unsigned __int16 *)(a1 + 10);
    v7 = &v5[32 * v6];
    v8 = *(_QWORD *)(a2 + 16);
    if (v4 > 0x100)
    {
      v14 = sub_20B85A374(v5, v7, *(_QWORD **)v8, (_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(unsigned __int16 *)(a2 + 10);
      v10 = v8 + 32 * v9;
      v12 = (_DWORD)v6 == 0;
      v11 = 0;
      v12 = v12 || (_DWORD)v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8)
            v13 = v5 + 32;
          else
            v13 = v5;
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_20B85A188((_QWORD *)a1, v14);
  }
  v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    sub_20B85FE7C(*(_QWORD **)v15, (_QWORD *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      v17 = v15 + 2;
      v18 = *v15;
      v15 += 8;
      sub_20B85A47C((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

_QWORD *sub_20B85A188(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    v4 = result;
    do
    {
      if ((_WORD)v2)
        LOWORD(v2) = 4 * v2;
      else
        LOWORD(v2) = 1;
    }
    while ((unsigned __int16)v2 < a2);
    v5 = (char *)result[2];
    v6 = *((unsigned __int16 *)result + 5);
    v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if ((v7[3] & 1) != 0)
        {
          (*(void (**)(_QWORD, void *, size_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_24C45D258, v8);
          v8 = 32 * (unsigned __int16)v2;
        }
        result = (_QWORD *)sub_20B854A60(v7, v8);
      }
      else
      {
        result = operator new[](v8);
      }
      v9 = (uint64_t **)result;
      if ((_DWORD)v6)
        result = memmove(result, v5, 32 * v6);
    }
    else
    {
      if (v7)
      {
        if ((v7[3] & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_24C45EB60, 24);
        result = (_QWORD *)sub_20B85477C((unint64_t *)v7, 0x18uLL, (uint64_t)sub_20B860560);
      }
      else
      {
        result = (_QWORD *)operator new();
      }
      v9 = (uint64_t **)result;
      result[1] = 0;
      v10 = result + 1;
      result[2] = 0;
      *result = result + 1;
      if ((_DWORD)v6)
      {
        v11 = &v5[32 * v6];
        v12 = v5;
        do
        {
          v15 = *(_DWORD *)v12;
          v13 = *(_OWORD *)(v12 + 8);
          v17 = *((_QWORD *)v12 + 3);
          v16 = v13;
          result = sub_20B860568(v9, v10, &v15, &v15);
          v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4)
      v14 = 1;
    else
      v14 = v5 == 0;
    if (!v14)
      result = (_QWORD *)MEMORY[0x20BD39C80](v5, 0x1062C802AB6010CLL);
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u)
      *((_WORD *)v4 + 5) = 0;
  }
  return result;
}

uint64_t sub_20B85A374(char *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          v6 = (_QWORD *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v7);
          }
        }
        else
        {
          v8 = (_QWORD *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a3[2];
          v13 = *v12 == (_QWORD)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_20B85A47C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  char v42;
  char v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  uint64_t v62;
  char v63;
  std::string v64[2];

  if (*((_BYTE *)a3 + 9))
  {
    v6 = (uint64_t *)a3[2];
    v7 = sub_20B85B0F4((uint64_t)a1, a2);
    v8 = (uint64_t *)v7;
    v7[2] = v6;
    v10 = v9;
    if (v9)
    {
      *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)v7 + 11) = *((_BYTE *)a3 + 11);
      *((_BYTE *)v7 + 9) = 1;
    }
    else
    {
      if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
        v13 = sub_20B855F80(v64, "CHECK failed: (extension->type) == (other_extension.type): ");
        sub_20B8560B0((uint64_t)&v63, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v64);
      }
      if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
        v14 = sub_20B855F80(v64, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        sub_20B8560B0((uint64_t)&v63, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v64);
      }
      if (!*((_BYTE *)v8 + 9))
      {
        sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
        v15 = sub_20B855F80(v64, "CHECK failed: extension->is_repeated: ");
        sub_20B8560B0((uint64_t)&v63, (const char **)&v15->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v64);
      }
    }
    v16 = *((unsigned __int8 *)a3 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = sub_20B855F80(v64, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v63, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v64);
    }
    switch(v16)
    {
      case 1:
        if (v10)
        {
          v26 = *a1;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v26 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 32), &unk_24C45D190, 16);
            v27 = sub_20B85477C((unint64_t *)v26, 0x10uLL, (uint64_t)sub_20B85FC58);
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = v26;
          }
          else
          {
            v27 = operator new();
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0;
          }
          *v8 = v27;
        }
        else
        {
          v27 = *v8;
        }
        sub_20B8674A8((int *)v27, (int *)*a3);
        break;
      case 2:
        if (v10)
        {
          v28 = *a1;
          if (v28)
          {
            if ((*(_BYTE *)(v28 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v28 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 32), &unk_24C45D1A0, 16);
            v29 = sub_20B85477C((unint64_t *)v28, 0x10uLL, (uint64_t)sub_20B85FC54);
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = v28;
          }
          else
          {
            v29 = operator new();
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
          }
          *v8 = v29;
        }
        else
        {
          v29 = *v8;
        }
        sub_20B866E80((int *)v29, (int *)*a3);
        break;
      case 3:
      case 16:
      case 18:
        if (v10)
        {
          v20 = *a1;
          if (v20)
          {
            if ((*(_BYTE *)(v20 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v20 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 32), &unk_24C45D1D0, 16);
            v21 = sub_20B85477C((unint64_t *)v20, 0x10uLL, (uint64_t)sub_20B85FC48);
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = v20;
          }
          else
          {
            v21 = operator new();
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
          }
          *v8 = v21;
        }
        else
        {
          v21 = *v8;
        }
        sub_20B866230((int *)v21, (int *)*a3);
        break;
      case 4:
      case 6:
        if (v10)
        {
          v24 = *a1;
          if (v24)
          {
            if ((*(_BYTE *)(v24 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v24 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 32), &unk_24C45D1E0, 16);
            v25 = sub_20B85477C((unint64_t *)v24, 0x10uLL, (uint64_t)sub_20B85FC50);
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = v24;
          }
          else
          {
            v25 = operator new();
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
          }
          *v8 = v25;
        }
        else
        {
          v25 = *v8;
        }
        sub_20B866858((int *)v25, (int *)*a3);
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (v10)
        {
          v18 = *a1;
          if (v18)
          {
            if ((*(_BYTE *)(v18 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 32), &unk_24C45D1B0, 16);
            v19 = sub_20B85477C((unint64_t *)v18, 0x10uLL, (uint64_t)sub_20B85FC44);
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = v18;
          }
          else
          {
            v19 = operator new();
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = 0;
          }
          *v8 = v19;
        }
        else
        {
          v19 = *v8;
        }
        sub_20B8655E0((int *)v19, (int *)*a3);
        break;
      case 7:
      case 13:
        if (v10)
        {
          v22 = *a1;
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v22 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v22 + 32) + 32), &unk_24C45D1C0, 16);
            v23 = sub_20B85477C((unint64_t *)v22, 0x10uLL, (uint64_t)sub_20B85FC4C);
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = v22;
          }
          else
          {
            v23 = operator new();
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = 0;
          }
          *v8 = v23;
        }
        else
        {
          v23 = *v8;
        }
        sub_20B865C08((int *)v23, (int *)*a3);
        break;
      case 8:
        if (v10)
        {
          v30 = *a1;
          if (v30)
          {
            if ((*(_BYTE *)(v30 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v30 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v30 + 32) + 32), &unk_24C45D180, 16);
            v31 = sub_20B85477C((unint64_t *)v30, 0x10uLL, (uint64_t)sub_20B85FC5C);
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = v30;
          }
          else
          {
            v31 = operator new();
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
          }
          *v8 = v31;
        }
        else
        {
          v31 = *v8;
        }
        sub_20B864FBC((int *)v31, (int *)*a3);
        break;
      case 9:
      case 12:
        if (v10)
        {
          v32 = *a1;
          if (v32)
          {
            if ((*(_BYTE *)(v32 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v32 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v32 + 32) + 32), &unk_24C45D230, 24);
            v33 = (_QWORD *)sub_20B85477C((unint64_t *)v32, 0x18uLL, (uint64_t)sub_20B85FC60);
            v33[2] = 0;
            *v33 = v32;
          }
          else
          {
            v33 = (_QWORD *)operator new();
            v33[2] = 0;
            *v33 = 0;
          }
          v33[1] = 0;
          *v8 = (uint64_t)v33;
        }
        else
        {
          v33 = (_QWORD *)*v8;
        }
        sub_20B850F84((uint64_t)v33, *a3);
        break;
      case 10:
      case 11:
        if (v10)
        {
          v34 = *a1;
          if (*a1)
          {
            if ((*(_BYTE *)(v34 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v34 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v34 + 32) + 32), &unk_24C45D208, 24);
            v35 = (_QWORD *)sub_20B85477C((unint64_t *)v34, 0x18uLL, (uint64_t)sub_20B85FC64);
            v35[2] = 0;
            *v35 = v34;
          }
          else
          {
            v35 = (_QWORD *)operator new();
            v35[2] = 0;
            *v35 = 0;
          }
          v35[1] = 0;
          *v8 = (uint64_t)v35;
        }
        v45 = (int *)*a3;
        if (v45[2] >= 1)
        {
          v46 = 0;
          do
          {
            v47 = sub_20B85FC88((uint64_t)v45, v46);
            v48 = v47;
            v49 = *v8;
            v50 = *(_DWORD **)(*v8 + 16);
            if (!v50
              || (v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
              || (*(_DWORD *)(v49 + 8) = v51 + 1, (v52 = *(_QWORD *)&v50[2 * v51 + 2]) == 0))
            {
              v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, *a1);
              sub_20B85FD64(*v8, v52);
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 64))(v52, v48);
            ++v46;
          }
          while (v46 < v45[2]);
        }
        break;
      default:
        return;
    }
    return;
  }
  if ((*((_BYTE *)a3 + 10) & 1) != 0)
    return;
  v11 = *((unsigned __int8 *)a3 + 8);
  if ((v11 - 19) <= 0xFFFFFFED)
  {
    sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v12 = sub_20B855F80(v64, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_20B8560B0((uint64_t)&v63, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v64);
  }
  switch(v11)
  {
    case 1:
      sub_20B8581AC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
      return;
    case 2:
      sub_20B857C68((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
      return;
    case 3:
    case 16:
    case 18:
      sub_20B856CCC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
      return;
    case 4:
    case 6:
      sub_20B857734((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
      return;
    case 5:
    case 15:
    case 17:
      sub_20B856798((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    case 7:
    case 13:
      sub_20B857200((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    case 8:
      sub_20B8586F0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_BYTE *)a3, a3[2]);
      return;
    case 9:
    case 12:
      v36 = *((unsigned __int8 *)a3 + 8);
      v37 = (int *)*a3;
      if (*(char *)(*a3 + 23) < 0)
      {
        sub_20B80ACE0(__p, *(void **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v38 = *(_OWORD *)v37;
        v62 = *((_QWORD *)v37 + 2);
        *(_OWORD *)__p = v38;
      }
      sub_20B85AFDC(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      return;
    case 10:
    case 11:
      v39 = (uint64_t *)a3[2];
      v40 = sub_20B85B0F4((uint64_t)a1, a2);
      v41 = v40;
      v40[2] = v39;
      if (v42)
      {
        *((_BYTE *)v40 + 8) = *((_BYTE *)a3 + 8);
        *((_BYTE *)v40 + 11) = *((_BYTE *)a3 + 11);
        *((_BYTE *)v40 + 9) = 0;
        v43 = *((_BYTE *)v40 + 10) & 0xF;
        if ((*((_BYTE *)a3 + 10) & 0x10) != 0)
        {
          *((_BYTE *)v40 + 10) = v43 | 0x10;
          v59 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, *a1);
          *v41 = (uint64_t *)v59;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 104))(v59, *a3);
          goto LABEL_135;
        }
        *((_BYTE *)v40 + 10) = v43;
        v44 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, *a1);
        *v41 = (uint64_t *)v44;
        goto LABEL_133;
      }
      if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
        v53 = sub_20B855F80(v64, "CHECK failed: (extension->type) == (other_extension.type): ");
        sub_20B8560B0((uint64_t)&v63, (const char **)&v53->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v64);
      }
      if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
        v54 = sub_20B855F80(v64, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        sub_20B8560B0((uint64_t)&v63, (const char **)&v54->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v64);
      }
      if (*((_BYTE *)v41 + 9))
      {
        sub_20B855F68((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
        v55 = sub_20B855F80(v64, "CHECK failed: !extension->is_repeated: ");
        sub_20B8560B0((uint64_t)&v63, (const char **)&v55->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v64);
      }
      v56 = *v41;
      v57 = (int *)*a3;
      if ((*((_BYTE *)a3 + 10) & 0x10) == 0)
      {
        v58 = *v56;
        if ((*((_BYTE *)v41 + 10) & 0x10) == 0)
        {
          (*(void (**)(uint64_t *, int *))(v58 + 64))(v56, v57);
          goto LABEL_135;
        }
        v44 = (*(uint64_t (**)(uint64_t *, int *))(v58 + 32))(*v41, v57);
LABEL_133:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 64))(v44, *a3);
        goto LABEL_135;
      }
      if ((*((_BYTE *)v41 + 10) & 0x10) != 0)
      {
        (*(void (**)(uint64_t *, int *))(*v56 + 104))(v56, v57);
      }
      else
      {
        v60 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v57 + 24))(*a3, *v41);
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 64))(v56, v60);
      }
LABEL_135:
      *((_BYTE *)v41 + 10) &= 0xF0u;
      return;
    case 14:
      sub_20B858F60((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    default:
      return;
  }
}

void sub_20B85AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_20B8560B8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 sub_20B85AFDC(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6;
  __n128 *v7;
  __n128 result;

  v6 = sub_20B859494(a1, a2, a3, a5);
  v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_20B85B02C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = (unsigned __int8 *)result;
  if (*(_QWORD *)result == *(_QWORD *)a2)
  {
    v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 10) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 10) = v5;
    v6 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    sub_20B85A06C((uint64_t)&v7, a2);
    sub_20B859FD0((unsigned __int8 *)a2);
    sub_20B85A06C(a2, (uint64_t)v3);
    sub_20B859FD0(v3);
    sub_20B85A06C((uint64_t)v3, (uint64_t)&v7);
    return sub_20B856514((uint64_t)&v7);
  }
  return result;
}

void sub_20B85B0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B856514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B85B0F4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t **v11;
  int v12;
  uint64_t **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = a2;
    return sub_20B8604A8(v4, (int *)&v14, &v14) + 5;
  }
  v6 = *(unsigned __int16 *)(a1 + 10);
  v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8))
      goto LABEL_18;
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 10) = v6 + 1;
    *(_DWORD *)v7 = a2;
    v7[1] = 0;
    result = v7 + 1;
    v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    v9 = v8 >> 1;
    v10 = (int *)&v4[4 * (v8 >> 1)];
    v12 = *v10;
    v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2)
      v4 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == (_DWORD)a2)
      return v4 + 1;
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3)
    goto LABEL_17;
LABEL_18:
  sub_20B85A188((_QWORD *)a1, v6 + 1);
  return (uint64_t **)sub_20B85B0F4(a1, a2);
}

uint64_t sub_20B85B23C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;

  v1 = *(_QWORD **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v8 = (unsigned __int8 *)*v1;
    v7 = (unsigned __int8 *)(v1 + 1);
    v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        v4 = sub_20B85B30C(v6 + 40);
        if (!(_DWORD)v4)
          break;
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = v1 == (_QWORD *)v3;
      if (v1 == (_QWORD *)v3)
        break;
      v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_20B85B30C(v5))
        break;
      v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u)
        sub_20B860B18();
    }
  }
  return v4;
}

uint64_t sub_20B85B30C(unsigned __int8 *a1)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  std::string v10[2];

  v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v3 = sub_20B855F80(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v10);
  }
  if (dword_20BA37020[v2] != 10)
    return 1;
  if (a1[9])
  {
    v4 = *(_QWORD *)a1;
    if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = sub_20B85FC88(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
          break;
        ++v5;
        v4 = *(_QWORD *)a1;
        if (v5 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((a1[10] & 1) != 0)
    return 1;
  v7 = **(_QWORD **)a1;
  if ((a1[10] & 0x10) != 0)
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  result = (*(uint64_t (**)(void))(v7 + 48))();
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_20B85B418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B85B430(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v10;
  std::string *v11;
  unsigned int v12;
  std::string *v13;
  char v14;
  std::string v15[2];

  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a4 + 16))(a4, a3, a5);
  if ((_DWORD)result)
  {
    v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v15);
    }
    v12 = dword_20BA3706C[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        v13 = sub_20B855F80(v15, "can't reach here.");
        sub_20B8560B0((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v15);
      }
      else
      {
        result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_20B85B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B85B570(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9;
  uint64_t v11;
  std::string *v13;
  unsigned __int8 v14[39];
  unsigned __int8 v15;
  _QWORD v16[2];

  v9 = a2;
  v16[0] = &off_24C4679C0;
  v16[1] = a4;
  v11 = a2 >> 3;
  v15 = 0;
  if ((sub_20B85B430((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15) & 1) != 0)
    return (unsigned __int8 *)sub_20B85B638(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  if ((*a5 & 1) != 0)
    v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v13 = (std::string *)sub_20B847DF8(a5);
  return sub_20B862A60(v9, v13, (char *)a3, a6);
}

char *sub_20B85B638(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unsigned __int8 *v8;
  uint64_t v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  char *result;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t *v55;
  int v56;
  unint64_t v57;
  std::string *v58;
  int v59;
  std::string::value_type *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  __int32 v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::string *v87;
  char v88;
  std::string v89;
  unint64_t *v90;
  int v91;

  v8 = a6;
  v11 = a2;
  v12 = a1;
  if (a3)
  {
    switch(*(_BYTE *)a4)
    {
      case 1:
        v30 = sub_20B858C24(a1, a2, 1, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B862910(v30, v8, a7);
        break;
      case 2:
        v31 = sub_20B858C24(a1, a2, 2, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8628A8(v31, v8, a7);
        break;
      case 3:
        v32 = sub_20B858C24(a1, a2, 3, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8626B8((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        v33 = sub_20B858C24(a1, a2, 4, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8626C8((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        v16 = sub_20B858C24(a1, a2, 5, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B862698((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        v34 = sub_20B858C24(a1, a2, 6, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8627D8(v34, v8, a7);
        break;
      case 7:
        v35 = sub_20B858C24(a1, a2, 7, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B862708(v35, v8, a7);
        break;
      case 8:
        v36 = sub_20B858C24(a1, a2, 8, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8626F8((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_20B855F68((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        v13 = sub_20B855F80(&v89, "Non-primitive types can't be packed.");
        sub_20B8560B0((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v89);
        return (char *)v8;
      case 0xD:
        v18 = sub_20B858C24(a1, a2, 13, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8626A8((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20B858C24(a1, a2, 14, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        v90 = a5;
        v91 = v11;
        return sub_20B85FF54((uint64_t)a7, (char *)v8, (uint64_t)&v89);
      case 0xF:
        v19 = sub_20B858C24(a1, a2, 15, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B862770(v19, v8, a7);
        break;
      case 0x10:
        v37 = sub_20B858C24(a1, a2, 16, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B862840(v37, v8, a7);
        break;
      case 0x11:
        v20 = sub_20B858C24(a1, a2, 17, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8626D8((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        v38 = sub_20B858C24(a1, a2, 18, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_20B8626E8((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        return (char *)v8;
    }
    return result;
  }
  switch(*(_BYTE *)a4)
  {
    case 1:
      v8 = a6 + 8;
      v39 = *(double *)a6;
      if (*(_BYTE *)(a4 + 1))
        sub_20B8583C8(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
      else
        sub_20B8581AC((uint64_t)a1, a2, 1, *(_QWORD *)(a4 + 24), v39);
      return (char *)v8;
    case 2:
      v8 = a6 + 4;
      v40 = *(float *)a6;
      if (*(_BYTE *)(a4 + 1))
        sub_20B857E84(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
      else
        sub_20B857C68((uint64_t)a1, a2, 2, *(_QWORD *)(a4 + 24), v40);
      return (char *)v8;
    case 3:
      v41 = *a6;
      if ((char)*a6 < 0)
      {
        v67 = v41 + (a6[1] << 7);
        v41 = (v67 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, (v67 - 128));
          if (!v8)
            return (char *)v8;
          v41 = v84;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v56 = 3;
        goto LABEL_136;
      }
      v79 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v80 = 3;
      goto LABEL_138;
    case 4:
      v42 = *a6;
      if ((char)*a6 < 0)
      {
        v68 = v42 + (a6[1] << 7);
        v42 = (v68 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, (v68 - 128));
          if (!v8)
            return (char *)v8;
          v42 = v85;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v43 = *(unsigned __int8 *)(a4 + 2);
        v44 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v45 = 4;
        goto LABEL_117;
      }
      v69 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v70 = 4;
      goto LABEL_119;
    case 5:
      v21 = *a6;
      if ((char)*a6 < 0)
      {
        v63 = v21 + (a6[1] << 7);
        v21 = v63 - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, (v63 - 128));
          if (!v8)
            return (char *)v8;
          v21 = v81;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v28 = 5;
        goto LABEL_104;
      }
      v65 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v66 = 5;
      v82 = v21;
      goto LABEL_107;
    case 6:
      v8 = a6 + 8;
      v42 = *(_QWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v43 = *(unsigned __int8 *)(a4 + 2);
        v44 = *(uint64_t **)(a4 + 24);
        v45 = 6;
LABEL_117:
        sub_20B857948(a1, a2, v45, v43, v42, v44);
      }
      else
      {
        v69 = *(_QWORD *)(a4 + 24);
        v70 = 6;
LABEL_119:
        sub_20B857734((uint64_t)a1, a2, v70, v42, v69);
      }
      return (char *)v8;
    case 7:
      v8 = a6 + 4;
      v25 = *(_DWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v46 = *(unsigned __int8 *)(a4 + 2);
        v47 = *(uint64_t **)(a4 + 24);
        v48 = 7;
        goto LABEL_98;
      }
      v71 = *(_QWORD *)(a4 + 24);
      v72 = 7;
      v73 = *(_DWORD *)a6;
      goto LABEL_100;
    case 8:
      v49 = *a6;
      if ((char)*a6 < 0)
      {
        v49 = v49 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, v49);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
        sub_20B858904(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
      else
        sub_20B8586F0((uint64_t)v12, v11, 8, v49 != 0, *(_QWORD *)(a4 + 24));
      return (char *)v8;
    case 9:
    case 0xC:
      v14 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v15 = (uint64_t)sub_20B859718(a1, a2, 9, v14);
      else
        v15 = sub_20B859494(a1, a2, 9, v14);
      v58 = (std::string *)v15;
      v59 = *v8;
      if (((char)*v8 & 0x80000000) == 0)
      {
        v60 = (std::string::value_type *)(v8 + 1);
        return (char *)sub_20B85FEFC((uint64_t)a7, v60, v59, v58);
      }
      v61 = sub_20B8625C4((uint64_t)v8, *v8);
      if (v61)
      {
        v60 = (std::string::value_type *)v61;
        v59 = v62;
        return (char *)sub_20B85FEFC((uint64_t)a7, v60, v59, v58);
      }
      return 0;
    case 0xA:
      v50 = *(_QWORD *)(a4 + 8);
      v51 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v52 = sub_20B859CE8(a1, a2, 10, v50, v51);
      else
        v52 = sub_20B859A84(a1, a2, 10, v50, v51);
      v74 = a7[11].i32[0];
      v75 = __OFSUB__(v74--, 1);
      a7[11].i32[0] = v74;
      if (v74 < 0 != v75)
        return 0;
      ++a7[11].i32[1];
      v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(_QWORD *)v52 + 88))(v52, v8, a7);
      a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
      v77 = a7[10].i32[0];
      a7[10].i32[0] = 0;
      if (v77 == ((8 * (_DWORD)v11) | 3))
        return (char *)v76;
      else
        return 0;
    case 0xB:
      v22 = *(_QWORD *)(a4 + 8);
      v23 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v24 = sub_20B859CE8(a1, a2, 11, v22, v23);
      else
        v24 = sub_20B859A84(a1, a2, 11, v22, v23);
      return (char *)sub_20B862368(a7, v24, v8);
    case 0xD:
      v25 = *a6;
      if ((char)*a6 < 0)
      {
        v64 = v25 + (a6[1] << 7);
        v25 = v64 - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, (v64 - 128));
          if (!v8)
            return (char *)v8;
          v25 = v83;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v46 = *(unsigned __int8 *)(a4 + 2);
        v47 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v48 = 13;
LABEL_98:
        sub_20B857414(a1, a2, v48, v46, v25, v47);
      }
      else
      {
        v71 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v72 = 13;
        v73 = v25;
LABEL_100:
        sub_20B857200((uint64_t)a1, a2, v72, v73, v71);
      }
      return (char *)v8;
    case 0xE:
      v53 = *a6;
      if ((char)*a6 < 0)
      {
        v78 = v53 + (a6[1] << 7);
        v53 = (v78 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, (v78 - 128));
          if (!v8)
            return (char *)v8;
          v53 = v86;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t))(a4 + 8))(*(_QWORD *)(a4 + 16), v53) & 1) != 0)
      {
        if (*(_BYTE *)(a4 + 1))
          sub_20B859174(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
        else
          sub_20B858F60((uint64_t)v12, v11, 14, v53, *(_QWORD *)(a4 + 24));
      }
      else
      {
        if ((*a5 & 1) != 0)
          v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v87 = (std::string *)sub_20B847DF8(a5);
        sub_20B862438(v11, v53, v87);
      }
      return (char *)v8;
    case 0xF:
      v8 = a6 + 4;
      v21 = *(_DWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        v28 = 15;
        goto LABEL_104;
      }
      v65 = *(_QWORD *)(a4 + 24);
      v66 = 15;
      goto LABEL_106;
    case 0x10:
      v8 = a6 + 8;
      v41 = *(_QWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        v56 = 16;
        goto LABEL_136;
      }
      v79 = *(_QWORD *)(a4 + 24);
      v80 = 16;
      goto LABEL_138;
    case 0x11:
      LODWORD(v29) = *a6;
      if ((char)*a6 < 0)
      {
        v29 = v29 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, v29);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      v21 = -(v29 & 1) ^ (v29 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v28 = 17;
LABEL_104:
        sub_20B8569AC(a1, a2, v28, v26, v21, v27);
      }
      else
      {
        v65 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v66 = 17;
LABEL_106:
        v82 = v21;
LABEL_107:
        sub_20B856798((uint64_t)a1, a2, v66, v82, v65);
      }
      return (char *)v8;
    case 0x12:
      v57 = *a6;
      if ((char)*a6 < 0)
      {
        v57 = v57 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_20B862538((uint64_t)a6, v57);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v56 = 18;
LABEL_136:
        sub_20B856EE0(a1, a2, v56, v54, v41, v55);
      }
      else
      {
        v79 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v80 = 18;
LABEL_138:
        sub_20B856CCC((uint64_t)a1, a2, v80, v41, v79);
      }
      return (char *)v8;
    default:
      return (char *)v8;
  }
}

void sub_20B85C188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B85C1A4(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  signed int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  BOOL v26;

  v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v18 = *((_QWORD *)v7 + 1);
    v17 = v7 + 2;
    v16 = v18;
    if (v18)
    {
      v19 = v17;
      do
      {
        v20 = *(_DWORD *)(v16 + 32);
        v21 = v20 < a2;
        if (v20 >= a2)
          v22 = (uint64_t *)v16;
        else
          v22 = (uint64_t *)(v16 + 8);
        if (!v21)
          v19 = (_QWORD *)v16;
        v16 = *v22;
      }
      while (*v22);
      if (v19 != (_QWORD *)v17)
      {
        do
        {
          v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3)
            break;
          a4 = sub_20B85C2D0((_BYTE *)v19 + 40, v23, a4, a5);
          v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (unsigned int *)v19[2];
              v26 = *(_QWORD *)v25 == (_QWORD)v19;
              v19 = v25;
            }
            while (!v26);
          }
          v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v9 = &v7[8 * v8];
      do
      {
        v10 = v8 >> 1;
        v11 = &v7[8 * (v8 >> 1)];
        v13 = *v11;
        v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2)
          v7 = v12;
        else
          v8 = v10;
      }
      while (v8);
      while (v7 != v9)
      {
        v14 = *v7;
        if ((int)v14 >= a3)
          break;
        a4 = sub_20B85C2D0((_BYTE *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_20B85C2D0(_BYTE *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  char *v5;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  std::string *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  std::string *v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  std::string *v40;
  std::string *v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  int v57;
  int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int *v63;
  int v64;
  _DWORD *v65;
  int v66;
  _DWORD *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _DWORD *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  _DWORD *v111;
  int v112;
  unsigned int v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  int v138;
  unsigned int v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  _BYTE *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _DWORD *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  _QWORD *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  _DWORD *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  char v167;
  int v168;
  _DWORD *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  _DWORD *v173;
  int v174;
  unsigned int v175;
  char v176;
  unsigned int v177;
  char v178;
  _BYTE *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  _BYTE *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  char *v196;
  const void *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  uint64_t v206;
  char *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  _BYTE *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64_t v240;
  _BYTE *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char *v245;
  const void *v246;
  _DWORD *v247;
  int v248;
  unsigned int v249;
  char v250;
  unsigned int v251;
  unsigned int v252;
  _BYTE *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _DWORD *v260;
  int v261;
  unsigned int v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  _BYTE *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _DWORD *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  int v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  _DWORD *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  char v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  _DWORD *v296;
  int v297;
  unsigned int v298;
  char v299;
  unsigned int v300;
  int v301;
  _BYTE *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  _DWORD *v310;
  int v311;
  unsigned int v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  _DWORD *v327;
  unsigned int v328;
  unsigned int v329;
  unint64_t v330;
  unsigned int v331;
  char *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  _QWORD *v339;
  int64_t v340;
  uint64_t v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  char *v345;
  uint64_t v346;
  unsigned int v347;
  _BYTE *v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _BYTE *v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unsigned int v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unint64_t v414;
  unsigned int v415;
  unsigned int v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int v419;
  char *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v429;
  unsigned int v430;
  char v431;
  std::string v432[2];

  v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3)
          v5 = sub_20B855544((uint64_t)a4, a3);
        v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              v33 = v32 >> 7;
              ++v9;
              v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            v9 = v5 + 2;
          }
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *v9 = v35 | 0x80;
          v36 = v35 >> 7;
          if (v35 >> 14)
          {
            v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              v37 = v36 >> 7;
              ++v5;
              v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            v5 = v9 + 2;
          }
        }
        else
        {
          *v9 = v35;
          v5 = v9 + 1;
        }
        v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_20B855F68((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          v40 = sub_20B855F80(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_20B8560B0((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_20B8560B8((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v63 = *(int **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_20B8672FC(v63, v64);
                v5 += 8;
                ++v64;
                v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_20B866CD4(v65, v66);
                v5 += 4;
                ++v66;
                v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v67 = *(_DWORD **)a1;
                }
                v69 = *(_QWORD *)sub_20B866084(v67, v68);
                if (v69 > 0x7F)
                {
                  *v5 = v69 | 0x80;
                  v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      v71 = v70 >> 7;
                      ++v5;
                      v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v73 = *(_DWORD **)a1;
                }
                v75 = *(_QWORD *)sub_20B8666AC(v73, v74);
                if (v75 > 0x7F)
                {
                  *v5 = v75 | 0x80;
                  v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      v77 = v76 >> 7;
                      ++v5;
                      v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v42 = *(_DWORD **)a1;
                }
                v44 = *(int *)sub_20B865434(v42, v43);
                if (v44 > 0x7F)
                {
                  *v5 = v44 | 0x80;
                  v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      v46 = v45 >> 7;
                      ++v5;
                      v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v79 = *(_DWORD **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_20B8666AC(v79, v80);
                v5 += 8;
                ++v80;
                v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_20B865A5C(v81, v82);
                v5 += 4;
                ++v82;
                v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v83 = *(_DWORD **)a1;
                }
                *v5++ = *(_BYTE *)sub_20B864E10(v83, v84++);
                v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_20B855F68((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            v41 = sub_20B855F80(v432, "Non-primitive types can't be packed.");
            sub_20B8560B0((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v432);
            break;
          case 13:
            v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v48 = *(_DWORD **)a1;
                }
                v50 = *(_DWORD *)sub_20B865A5C(v48, v49);
                if (v50 > 0x7F)
                {
                  *v5 = v50 | 0x80;
                  v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      v52 = v51 >> 7;
                      ++v5;
                      v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v85 = *(_DWORD **)a1;
                }
                v87 = *(int *)sub_20B865434(v85, v86);
                if (v87 > 0x7F)
                {
                  *v5 = v87 | 0x80;
                  v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      v89 = v88 >> 7;
                      ++v5;
                      v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_20B865434(v54, v55);
                v5 += 4;
                ++v55;
                v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v91 = *(_DWORD **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_20B866084(v91, v92);
                v5 += 8;
                ++v92;
                v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v56 = *(_DWORD **)a1;
                }
                v58 = (int *)sub_20B865434(v56, v57);
                v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  *v5 = v59 | 0x80;
                  v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      v61 = v60 >> 7;
                      ++v5;
                      v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_20B855544((uint64_t)a4, v5);
                  v93 = *(_DWORD **)a1;
                }
                v95 = (uint64_t *)sub_20B866084(v93, v94);
                v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  *v5 = v96 | 0x80;
                  v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      v98 = v97 >> 7;
                      ++v5;
                      v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v19 = sub_20B855F80(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v21 = 0;
          v22 = 8 * a2;
          v23 = (8 * a2) | 1;
          v24 = (8 * a2) | 0x81;
          v25 = (a2 >> 4) & 0x1FFFFFF;
          v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v20 = *(_DWORD **)a1;
            }
            v27 = *(_QWORD *)sub_20B8672FC(v20, v21);
            if (v23 > 0x7F)
            {
              *v5 = v24;
              if (v23 >= 0x4000)
              {
                v28 = v5 + 2;
                v29 = v25;
                do
                {
                  *((_BYTE *)v28 - 1) = v29 | 0x80;
                  v30 = v29 >> 7;
                  v28 = (_QWORD *)((char *)v28 + 1);
                  v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((_BYTE *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                v28 = v5 + 2;
              }
            }
            else
            {
              *v5 = v23;
              v28 = v5 + 1;
            }
            *v28 = v27;
            v5 = (char *)(v28 + 1);
            ++v21;
            v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v101 = 0;
          v102 = (8 * a2) | 5;
          v103 = (a2 >> 4) & 0x1FFFFFF;
          v104 = (8 * a2) >> 7;
          v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v100 = *(_DWORD **)a1;
            }
            v106 = *(_DWORD *)sub_20B866CD4(v100, v101);
            if (v102 > 0x7F)
            {
              *v5 = v105;
              if (v102 >= 0x4000)
              {
                v107 = v5 + 2;
                v108 = v103;
                do
                {
                  *((_BYTE *)v107 - 1) = v108 | 0x80;
                  v109 = v108 >> 7;
                  v107 = (_DWORD *)((char *)v107 + 1);
                  v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((_BYTE *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                v107 = v5 + 2;
              }
            }
            else
            {
              *v5 = v102;
              v107 = v5 + 1;
            }
            *v107 = v106;
            v5 = (char *)(v107 + 1);
            ++v101;
            v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v112 = 0;
          v113 = 8 * a2;
          v114 = (8 * a2) | 0x80;
          v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v111 = *(_DWORD **)a1;
            }
            v116 = *(_QWORD *)sub_20B866084(v111, v112);
            if (v113 > 0x7F)
            {
              *v5 = v114;
              if (v113 >= 0x4000)
              {
                v117 = v5 + 2;
                v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  v119 = v118 >> 7;
                  ++v117;
                  v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                v117 = v5 + 2;
              }
            }
            else
            {
              v117 = v5 + 1;
              *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *v117 = v116 | 0x80;
              v121 = v116 >> 7;
              if (v116 >> 14)
              {
                v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  v122 = v121 >> 7;
                  ++v5;
                  v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                v5 = v117 + 2;
              }
            }
            else
            {
              *v117 = v116;
              v5 = v117 + 1;
            }
            ++v112;
            v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v125 = 0;
          v126 = 8 * a2;
          v127 = (8 * a2) | 0x80;
          v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v124 = *(_DWORD **)a1;
            }
            v129 = *(_QWORD *)sub_20B8666AC(v124, v125);
            if (v126 > 0x7F)
            {
              *v5 = v127;
              if (v126 >= 0x4000)
              {
                v130 = v5 + 2;
                v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  v132 = v131 >> 7;
                  ++v130;
                  v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                v130 = v5 + 2;
              }
            }
            else
            {
              v130 = v5 + 1;
              *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              *v130 = v129 | 0x80;
              v134 = v129 >> 7;
              if (v129 >> 14)
              {
                v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  v135 = v134 >> 7;
                  ++v5;
                  v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                v5 = v130 + 2;
              }
            }
            else
            {
              *v130 = v129;
              v5 = v130 + 1;
            }
            ++v125;
            v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v138 = 0;
          v139 = 8 * a2;
          v140 = (8 * a2) | 0x80;
          v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v137 = *(_DWORD **)a1;
            }
            v142 = *(int *)sub_20B865434(v137, v138);
            if (v139 > 0x7F)
            {
              *v5 = v140;
              if (v139 >= 0x4000)
              {
                v143 = v5 + 2;
                v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  v145 = v144 >> 7;
                  ++v143;
                  v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                v143 = v5 + 2;
              }
            }
            else
            {
              v143 = v5 + 1;
              *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *v143 = v142 | 0x80;
              v147 = v142 >> 7;
              if (v142 >> 14)
              {
                v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  v148 = v147 >> 7;
                  ++v5;
                  v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                v5 = v143 + 2;
              }
            }
            else
            {
              *v143 = v142;
              v5 = v143 + 1;
            }
            ++v138;
            v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v151 = 0;
          v152 = 8 * a2;
          v153 = (8 * a2) | 1;
          v154 = (8 * a2) | 0x81;
          v155 = (a2 >> 4) & 0x1FFFFFF;
          v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v150 = *(_DWORD **)a1;
            }
            v157 = *(_QWORD *)sub_20B8666AC(v150, v151);
            if (v153 > 0x7F)
            {
              *v5 = v154;
              if (v153 >= 0x4000)
              {
                v158 = v5 + 2;
                v159 = v155;
                do
                {
                  *((_BYTE *)v158 - 1) = v159 | 0x80;
                  v160 = v159 >> 7;
                  v158 = (_QWORD *)((char *)v158 + 1);
                  v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((_BYTE *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                v158 = v5 + 2;
              }
            }
            else
            {
              *v5 = v153;
              v158 = v5 + 1;
            }
            *v158 = v157;
            v5 = (char *)(v158 + 1);
            ++v151;
            v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v163 = 0;
          v164 = (8 * a2) | 5;
          v165 = (a2 >> 4) & 0x1FFFFFF;
          v166 = (8 * a2) >> 7;
          v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v162 = *(_DWORD **)a1;
            }
            v168 = *(_DWORD *)sub_20B865A5C(v162, v163);
            if (v164 > 0x7F)
            {
              *v5 = v167;
              if (v164 >= 0x4000)
              {
                v169 = v5 + 2;
                v170 = v165;
                do
                {
                  *((_BYTE *)v169 - 1) = v170 | 0x80;
                  v171 = v170 >> 7;
                  v169 = (_DWORD *)((char *)v169 + 1);
                  v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((_BYTE *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                v169 = v5 + 2;
              }
            }
            else
            {
              *v5 = v164;
              v169 = v5 + 1;
            }
            *v169 = v168;
            v5 = (char *)(v169 + 1);
            ++v163;
            v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v174 = 0;
          v175 = 8 * a2;
          v176 = (8 * a2) | 0x80;
          v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v173 = *(_DWORD **)a1;
            }
            v178 = *(_BYTE *)sub_20B864E10(v173, v174);
            if (v175 > 0x7F)
            {
              *v5 = v176;
              if (v175 >= 0x4000)
              {
                v179 = v5 + 2;
                v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  v181 = v180 >> 7;
                  ++v179;
                  v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                v179 = v5 + 2;
              }
            }
            else
            {
              *v5 = v175;
              v179 = v5 + 1;
            }
            *v179 = v178;
            v5 = v179 + 1;
            ++v174;
            v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        v183 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v184 = 0;
        v185 = 8 * a2;
        v186 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v186 = 5;
        v187 = (8 * a2) | 2;
        v188 = 1;
        if (v185 >= 0x80)
          v188 = 2;
        if (v185 < 0x200000)
          v186 = 3;
        if (v185 >= 0x4000)
          v189 = v186;
        else
          v189 = v188;
        v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            v5 = sub_20B855544((uint64_t)a4, v5);
            v183 = *(_QWORD *)a1;
          }
          v190 = sub_20B850D50(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            v191 = *(_QWORD *)(v190 + 8);
            if (v191 > 127)
              goto LABEL_326;
          }
          else
          {
            v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  v194 = v193 >> 7;
                  ++v192;
                  v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              *v5 = v187;
            }
            *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0)
              v197 = (const void *)v190;
            else
              v197 = *(const void **)v190;
            memcpy(v196, v197, v191);
            v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          v5 = sub_20B855A54(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          v183 = *(_QWORD *)a1;
          if (v184 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
            return v5;
        }
      case 10:
        v198 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v199 = 0;
          v200 = (8 * a2) | 3;
          v201 = (8 * a2) | 0x83;
          v202 = (a2 >> 4) & 0x1FFFFFF;
          v203 = (8 * a2) | 4;
          v204 = (8 * a2) >> 7;
          v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v198 = *(_QWORD *)a1;
            }
            v206 = sub_20B85FC88(v198, v199);
            if (v200 > 0x7F)
            {
              *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  v209 = v208 >> 7;
                  ++v207;
                  v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211)
              v211 = sub_20B855544((uint64_t)a4, v211);
            if (v203 > 0x7F)
            {
              *v211 = v205;
              if (v203 >= 0x4000)
              {
                v5 = v211 + 2;
                v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  v213 = v212 >> 7;
                  ++v5;
                  v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                v5 = v211 + 2;
              }
            }
            else
            {
              v5 = v211 + 1;
              *v211 = v203;
            }
            ++v199;
            v198 = *(_QWORD *)a1;
          }
          while (v199 < *(_DWORD *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 11:
        v215 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v216 = 0;
          v217 = (8 * a2) | 2;
          v218 = (a2 >> 4) & 0x1FFFFFF;
          v219 = (8 * a2) >> 7;
          v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v215 = *(_QWORD *)a1;
            }
            v221 = sub_20B85FC88(v215, v216);
            v222 = v221;
            if (v217 > 0x7F)
            {
              *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  v225 = v224 >> 7;
                  ++v223;
                  v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              *v5 = v217;
            }
            v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              *v223 = v227 | 0x80;
              v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  v230 = v229 >> 7;
                  ++v228;
                  v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              *v223 = v227;
              v228 = v223 + 1;
            }
            v5 = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v222 + 96))(v222, v228, a4);
            ++v216;
            v215 = *(_QWORD *)a1;
          }
          while (v216 < *(_DWORD *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 12:
        v232 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v233 = 0;
        v234 = 8 * a2;
        v235 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v235 = 5;
        v236 = (8 * a2) | 2;
        v237 = 1;
        if (v234 >= 0x80)
          v237 = 2;
        if (v234 < 0x200000)
          v235 = 3;
        if (v234 >= 0x4000)
          v238 = v235;
        else
          v238 = v237;
        v430 = v234 >> 7;
        break;
      case 13:
        v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v248 = 0;
          v249 = 8 * a2;
          v250 = (8 * a2) | 0x80;
          v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v247 = *(_DWORD **)a1;
            }
            v252 = *(_DWORD *)sub_20B865A5C(v247, v248);
            if (v249 > 0x7F)
            {
              *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  v255 = v254 >> 7;
                  ++v253;
                  v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              *v253 = v252 | 0x80;
              v257 = v252 >> 7;
              if (v252 >> 14)
              {
                v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  v258 = v257 >> 7;
                  ++v5;
                  v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                v5 = v253 + 2;
              }
            }
            else
            {
              *v253 = v252;
              v5 = v253 + 1;
            }
            ++v248;
            v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v261 = 0;
          v262 = 8 * a2;
          v263 = (8 * a2) | 0x80;
          v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v260 = *(_DWORD **)a1;
            }
            v265 = *(int *)sub_20B865434(v260, v261);
            if (v262 > 0x7F)
            {
              *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  v268 = v267 >> 7;
                  ++v266;
                  v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              *v266 = v265 | 0x80;
              v270 = v265 >> 7;
              if (v265 >> 14)
              {
                v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  v271 = v270 >> 7;
                  ++v5;
                  v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                v5 = v266 + 2;
              }
            }
            else
            {
              *v266 = v265;
              v5 = v266 + 1;
            }
            ++v261;
            v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v274 = 0;
          v275 = (8 * a2) | 5;
          v276 = (a2 >> 4) & 0x1FFFFFF;
          v277 = (8 * a2) >> 7;
          v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            v279 = *(_DWORD *)sub_20B865434(v273, v274);
            if (v275 > 0x7F)
            {
              *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                v281 = v276;
                do
                {
                  *((_BYTE *)v280 - 1) = v281 | 0x80;
                  v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((_BYTE *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              *v5 = v275;
              v280 = v5 + 1;
            }
            *v280 = v279;
            v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v285 = 0;
          v286 = 8 * a2;
          v287 = (8 * a2) | 1;
          v288 = (8 * a2) | 0x81;
          v289 = (a2 >> 4) & 0x1FFFFFF;
          v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            v291 = *(_QWORD *)sub_20B866084(v284, v285);
            if (v287 > 0x7F)
            {
              *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                v293 = v289;
                do
                {
                  *((_BYTE *)v292 - 1) = v293 | 0x80;
                  v294 = v293 >> 7;
                  v292 = (_QWORD *)((char *)v292 + 1);
                  v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((_BYTE *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              *v5 = v287;
              v292 = v5 + 1;
            }
            *v292 = v291;
            v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v297 = 0;
          v298 = 8 * a2;
          v299 = (8 * a2) | 0x80;
          v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            v301 = *(_DWORD *)sub_20B865434(v296, v297);
            if (v298 > 0x7F)
            {
              *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  v304 = v303 >> 7;
                  ++v302;
                  v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              *v5 = v298;
            }
            v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              *v302 = v306 | 0x80;
              v307 = v306 >> 7;
              if (v306 >> 14)
              {
                v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  v308 = v307 >> 7;
                  ++v5;
                  v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                v5 = v302 + 2;
              }
            }
            else
            {
              *v302 = v306;
              v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v311 = 0;
          v312 = 8 * a2;
          v313 = (8 * a2) | 0x80;
          v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_20B855544((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            v315 = *(_QWORD *)sub_20B866084(v310, v311);
            if (v312 > 0x7F)
            {
              *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  v318 = v317 >> 7;
                  ++v316;
                  v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              *v5 = v312;
            }
            v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              *v316 = v320 | 0x80;
              v321 = v320 >> 7;
              if (v320 >> 14)
              {
                v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  v322 = v321 >> 7;
                  ++v5;
                  v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                v5 = v316 + 2;
              }
            }
            else
            {
              *v316 = v320;
              v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        v5 = sub_20B855544((uint64_t)a4, v5);
        v232 = *(_QWORD *)a1;
      }
      v239 = sub_20B850D50(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        v240 = *(_QWORD *)(v239 + 8);
        if (v240 > 127)
          goto LABEL_399;
      }
      else
      {
        v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              v243 = v242 >> 7;
              ++v241;
              v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          *v5 = v236;
        }
        *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0)
          v246 = (const void *)v239;
        else
          v246 = *(const void **)v239;
        memcpy(v245, v246, v240);
        v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      v5 = sub_20B855A54(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      v232 = *(_QWORD *)a1;
      if (v233 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
        return v5;
    }
  }
  if ((a1[10] & 1) != 0)
    return v5;
  v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_20B855F68((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v11 = sub_20B855F80(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_20B8560B0((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = v5 + 2;
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (_QWORD *)((char *)v15 + 1);
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = v5 + 2;
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v330 = *(_QWORD *)a1;
      v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v331 | 0x80;
        v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            v380 = v355 >> 7;
            ++v332;
            v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v330 = *(_QWORD *)a1;
      v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v333 | 0x80;
        v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            v385 = v356 >> 7;
            ++v332;
            v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v330 = *(int *)a1;
      v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v334 | 0x80;
        v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            v388 = v357 >> 7;
            ++v332;
            v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = v5 + 2;
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (_QWORD *)((char *)v15 + 1);
        v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = v5 + 2;
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      LOBYTE(v337) = *a1;
      v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v338 | 0x80;
        v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            v391 = v358 >> 7;
            ++v332;
            v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v339 = *(_QWORD **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        v340 = v339[1];
        if (v340 > 127)
          return sub_20B855A54(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
      }
      v364 = 8 * a2;
      v365 = 1;
      v366 = 2;
      v367 = 3;
      v368 = 4;
      if ((8 * a2) >> 28)
        v368 = 5;
      if (v364 >= 0x200000)
        v367 = v368;
      if (v364 >= 0x4000)
        v366 = v367;
      if (v364 >= 0x80)
        v365 = v366;
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340)
        return sub_20B855A54(a4, a2, (uint64_t)v339, v5);
      v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F)
        goto LABEL_633;
      *v5 = v364 | 0x82;
      v370 = v364 >> 7;
      if (!(v369 >> 14))
        goto LABEL_635;
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        v372 = v370 >> 7;
        ++v371;
        v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v341 = *(_QWORD *)a1;
      v342 = 8 * a2;
      v343 = (8 * a2) | 3;
      v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            v394 = v393 >> 7;
            ++v345;
            v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332)
        v332 = sub_20B855544((uint64_t)a4, v332);
      v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F)
        goto LABEL_677;
      *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        v411 = v344 >> 7;
        ++v5;
        v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0)
        return (char *)(*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t *))(**(_QWORD **)a1 + 136))(*(_QWORD *)a1, a2, v5, a4);
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v346 = *(_QWORD *)a1;
      v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        *v5 = (8 * a2) | 0x82;
        v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            v421 = v379 >> 7;
            ++v348;
            v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        *v5 = v347;
        v348 = v5 + 1;
      }
      v423 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        *v348 = v423 | 0x80;
        v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            v426 = v425 >> 7;
            ++v424;
            v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v339 = *(_QWORD **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        v340 = v339[1];
        if (v340 > 127)
          return sub_20B855A54(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
      }
      v374 = 8 * a2;
      v375 = 1;
      v376 = 2;
      v377 = 3;
      v378 = 4;
      if ((8 * a2) >> 28)
        v378 = 5;
      if (v374 >= 0x200000)
        v377 = v378;
      if (v374 >= 0x4000)
        v376 = v377;
      if (v374 >= 0x80)
        v375 = v376;
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340)
        return sub_20B855A54(a4, a2, (uint64_t)v339, v5);
      v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        *v5 = v374 | 0x82;
        v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            v372 = v370 >> 7;
            ++v371;
            v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        *v5 = v369;
        v371 = v5 + 1;
      }
      *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0)
        v339 = (_QWORD *)*v339;
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v337 = *(_DWORD *)a1;
      v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v349 | 0x80;
        v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            v396 = v360 >> 7;
            ++v332;
            v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        *v332 = v337;
        return v332 + 1;
      }
      *v332 = v337 | 0x80;
      v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        v411 = v398 >> 7;
        ++v5;
        v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v330 = *(int *)a1;
      v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v350 | 0x80;
        v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            v399 = v361 >> 7;
            ++v332;
            v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        *v332 = v330;
        return v332 + 1;
      }
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        *v5 = (8 * a2) | 0x85;
        v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((_BYTE *)v327 - 1) = v326 | 0x80;
            v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((_BYTE *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        *v5 = v325;
        v327 = v5 + 1;
      }
      *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        *v5 = (8 * a2) | 0x81;
        v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          v15 = v5 + 2;
          do
          {
            *((_BYTE *)v15 - 1) = v14 | 0x80;
            v16 = v14 >> 7;
            v15 = (_QWORD *)((char *)v15 + 1);
            v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((_BYTE *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        *v5 = v13;
        v15 = v5 + 1;
      }
      *v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v351 = *(_DWORD *)a1;
      v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v352 | 0x80;
        v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            v403 = v362 >> 7;
            ++v332;
            v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v352;
        v332 = v5 + 1;
      }
      v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        *v332 = v405;
        return v332 + 1;
      }
      *v332 = v405 | 0x80;
      v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        v415 = v406 >> 7;
        ++v5;
        v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_20B855544((uint64_t)a4, v5);
      v353 = *(_QWORD *)a1;
      v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v354 | 0x80;
        v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            v407 = v363 >> 7;
            ++v332;
            v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v354;
        v332 = v5 + 1;
      }
      v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        *v332 = v409 | 0x80;
        v410 = v409 >> 7;
        if (v409 >> 14)
        {
          v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            v417 = v410 >> 7;
            ++v5;
            v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

