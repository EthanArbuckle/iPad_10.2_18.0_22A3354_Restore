__n128 sub_20B9FA568(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C4AE6B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9FA5A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AE6B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float sub_20B9FA5D0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v6;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float result;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6 <= *a6 >> 1)
  {
    v9 = *(void **)a2;
    v10 = *a3;
    v11 = *a6 >> 1;
    v12 = **(int **)(a1 + 16);
    v13 = **(_QWORD **)(a1 + 8);
    if (v13)
      v14 = *a6 >> 1;
    else
      v14 = 0;
    v15 = (v10 >> 22) & 2;
    if (v14 != v6 || memcmp((const void *)(v13 + 2 * v12), *(const void **)a2, 2 * v6))
    {
      if ((v10 & 0x82) != 0)
        return result;
      LOWORD(v15) = v15 | 1;
    }
    v17 = sub_20B9DA2F8(*(_QWORD *)(a1 + 24), v12, v11, v15, v9, v6);
    result = *(float *)(a4 + 4);
    *(float *)(v17 + 24) = result;
    *(float *)(v17 + 28) = result;
  }
  return result;
}

uint64_t sub_20B9FA690(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AE718))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9FA6CC()
{
  return &unk_24C4AE718;
}

void sub_20B9FA6DC()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9FA6F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C4AE738;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9FA730(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AE738;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9FA758(uint64_t result, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _BYTE *a7)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v19;
  __int16 v20;
  float v21;
  unsigned int *v22;
  unsigned int v23;

  v8 = *(_QWORD *)(a2 + 8);
  if (v8 <= *a6 >> 1)
  {
    v9 = result;
    v10 = *(_DWORD *)a3;
    v11 = a3[1];
    v12 = **(_QWORD **)(result + 8);
    v13 = v8 > v12 && (v10 & 2) == 0;
    v14 = v13 && (v10 & 0x80) == 0;
    v15 = v14 && (v10 & 4) == 0;
    if (v15 && v11 >= -4.0)
    {
      v19 = *(_QWORD *)(result + 16);
      if ((v10 & 0x800000) != 0)
        v20 = 3;
      else
        v20 = 1;
      result = sub_20B9DA2F8(v19, **(_DWORD **)(v9 + 24), v12, v20, *(void **)a2, v8);
      v21 = *(float *)(a4 + 4);
      *(float *)(result + 24) = v21 + -1.0;
      *(float *)(result + 28) = v21;
      v22 = *(unsigned int **)(v9 + 32);
      v23 = *v22 + 1;
      *v22 = v23;
      if (v23 >= 4)
        *a7 = 1;
    }
  }
  return result;
}

uint64_t sub_20B9FA81C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AE798))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9FA858()
{
  return &unk_24C4AE798;
}

void sub_20B9FA868()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9FA87C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46B058;
  return result;
}

void sub_20B9FA8A0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46B058;
}

BOOL sub_20B9FA8B8(uint64_t a1, _QWORD *a2)
{
  return (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 96))(*a2) == 83;
}

uint64_t sub_20B9FA8E0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F0B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9FA91C()
{
  return &unk_24C45F0B0;
}

void sub_20B9FA928(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472C110);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C110))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472C108 = v74;
    __cxa_guard_release(&qword_25472C110);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472C118);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472C118))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254729A38, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C118);
  }
  std::mutex::lock(&stru_254729A38);
  v8 = (_QWORD *)qword_25472C108;
  v9 = sub_20B828414(qword_25472C108 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BE18;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472C108;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_254729A38);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20B9FB124(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C110);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9FB1B4(uint64_t a1)
{
  uint64_t v2;
  const __CFURL *v3;
  const __CFURL *v4;
  const __CFURL *v5;
  char *v6;
  char v7;
  const __CFURL *v8;
  const __CFURL *v9;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const UniChar *v15;
  CFStringRef v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  const __CFAllocator *alloc;
  int64x2_t *v35;
  uint64_t v36;
  const UniChar *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD v43[2];
  _BYTE v44[408];
  _QWORD v45[21];

  v45[19] = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  v3 = *(const __CFURL **)(a1 + 32);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0x11181BE2BLL;
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  if (!v3 || (v4 = sub_20B8D0DEC(v3, CFSTR("facemark.dat")), (v5 = v4) == 0))
  {
LABEL_8:
    v8 = sub_20B8D0CC0(v3, CFSTR("facemark.dat"));
    v9 = v8;
    v43[0] = v8;
    if (v8)
    {
      v10 = sub_20B9088C8(v8);
      sub_20B8A741C((std::string *)v2, v10);
      sub_20B9FBCFC(v2);
      MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
      CFRelease(v9);
    }
    return v2;
  }
  v6 = sub_20B9088C8(v4);
  sub_20B82EB18(v43);
  if ((v44[*(_QWORD *)(v43[0] - 24) + 16] & 5) != 0)
    goto LABEL_4;
  std::istream::tellg();
  std::istream::seekg();
  if (v42 <= 0x17)
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24)), *(_DWORD *)&v44[*(_QWORD *)(v43[0] - 24) + 16] | 4);
LABEL_4:
    v7 = 0;
    goto LABEL_5;
  }
  v12 = operator new[]();
  v36 = v12;
  std::istream::read();
  if (*(_DWORD *)v12 == 293715499 && *(_DWORD *)(v12 + 4) == 1)
  {
    *(_OWORD *)(v2 + 24) = *(_OWORD *)v12;
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(v12 + 16);
    if (*(_DWORD *)(v12 + 8))
    {
      v13 = 0;
      alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      LODWORD(v14) = 24;
      v35 = (int64x2_t *)(v2 + 48);
      while ((int)v14 + 4 < v42)
      {
        std::istream::read();
        v14 = (int)v14 + 13;
        if (v14 > v42)
        {
          if (!std::filebuf::close())
            std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24)), *(_DWORD *)&v44[*(_QWORD *)(v43[0] - 24) + 16] | 4);
          goto LABEL_39;
        }
        v15 = (const UniChar *)operator new[]();
        v37 = v15;
        std::istream::read();
        v16 = CFStringCreateWithCharacters(alloc, v15, 0);
        if (!v16)
        {
          if (!std::filebuf::close())
            std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24)), *(_DWORD *)&v44[*(_QWORD *)(v43[0] - 24) + 16] | 4);
          MEMORY[0x20BD39C80](v15, 0x1000C80BDFB0063);
          v7 = 0;
          goto LABEL_40;
        }
        std::istream::read();
        std::istream::read();
        v18 = *(_QWORD *)(v2 + 56);
        v17 = *(_QWORD *)(v2 + 64);
        if (v18 >= v17)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v35->i64[0]) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v35->i64[0]) >> 3);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v21;
          v41 = v2 + 64;
          v24 = (char *)sub_20B871730(v23);
          v26 = v25;
          v27 = &v24[24 * v20];
          *(_QWORD *)v27 = 0;
          v27[8] = 0;
          *((_QWORD *)v27 + 2) = 0;
          sub_20B87E150((const void **)v27, v16);
          v29 = *(_QWORD *)(v2 + 48);
          v28 = *(_QWORD *)(v2 + 56);
          if (v28 == v29)
          {
            v32 = vdupq_n_s64(v28);
            v30 = v27;
          }
          else
          {
            v30 = v27;
            do
            {
              v31 = *(_QWORD *)(v28 - 24);
              v28 -= 24;
              *(_QWORD *)v28 = 0;
              *((_QWORD *)v30 - 3) = v31;
              v30 -= 24;
              *(_OWORD *)(v30 + 8) = *(_OWORD *)(v28 + 8);
            }
            while (v28 != v29);
            v32 = *v35;
          }
          v19 = v27 + 24;
          *(_QWORD *)(v2 + 48) = v30;
          *(_QWORD *)(v2 + 56) = v19;
          v39 = v32;
          v33 = *(_QWORD *)(v2 + 64);
          *(_QWORD *)(v2 + 64) = &v24[24 * v26];
          v40 = v33;
          v38 = v32.i64[0];
          sub_20B9FC004((uint64_t)&v38);
        }
        else
        {
          *(_QWORD *)v18 = 0;
          *(_BYTE *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = 0;
          sub_20B87E150((const void **)v18, v16);
          v19 = (char *)(v18 + 24);
        }
        *(_QWORD *)(v2 + 56) = v19;
        MEMORY[0x20BD39C80](v37, 0x1000C80BDFB0063);
        ++v13;
        v12 = v36;
        if (v13 >= *(unsigned int *)(v36 + 8))
          break;
      }
    }
    sub_20B8A741C((std::string *)v2, v6);
    sub_20B9FBEF4(v43);
    v7 = 1;
  }
  else
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24)), *(_DWORD *)&v44[*(_QWORD *)(v43[0] - 24) + 16] | 4);
LABEL_39:
    v7 = 0;
  }
LABEL_40:
  MEMORY[0x20BD39C80](v12, 0x1000C8077774924);
LABEL_5:
  v43[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](v44);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](v45);
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  CFRelease(v5);
  if ((v7 & 1) == 0)
    goto LABEL_8;
  return v2;
}

void sub_20B9FB784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;

  MEMORY[0x20BD39C80](a13, 0x1000C80BDFB0063);
  MEMORY[0x20BD39C80](a12, 0x1000C8077774924);
  sub_20B82EC24(&a39);
  if (v40)
    MEMORY[0x20BD39C80](v40, 0x1000C8077774924);
  sub_20B876164(&a16, 0);
  a22 = a11;
  sub_20B9FBF90(&a22);
  if (*(char *)(v39 + 23) < 0)
    operator delete(*(void **)v39);
  MEMORY[0x20BD39CB0](v39, 0x1032C4049B9E7EFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9FB8DC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_20B9FBF90(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_20B9FB924(uint64_t a1, CFStringRef theString1, char a3)
{
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  uint64_t i;
  uint64_t v10;
  const void *v11;
  CFTypeRef v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  uint64_t v35;

  if (theString1)
  {
    v7 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    if (v7 == v6)
    {
      v8 = *(const void ***)(a1 + 48);
LABEL_7:
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3) - 20 <= 0xFFFFFFFFFFFFFFEALL)
      {
        if ((const void **)v7 != v8)
        {
          for (i = v7 + 24; (const void **)i != v8; i += 24)
          {
            if (*(double *)(i + 16) < *(double *)(v7 + 16))
              v7 = i;
          }
        }
        v10 = v7 + 24;
        if ((const void **)(v7 + 24) != v8)
        {
          do
          {
            v11 = *(const void **)v10;
            *(_QWORD *)v10 = 0;
            sub_20B87E150((const void **)(v10 - 24), v11);
            *(_OWORD *)(v10 - 16) = *(_OWORD *)(v10 + 8);
            v10 += 24;
          }
          while ((const void **)v10 != v8);
          v8 = *(const void ***)(a1 + 56);
          v7 = v10 - 24;
        }
        while (v8 != (const void **)v7)
        {
          v8 -= 3;
          sub_20B87E150(v8, 0);
        }
        *(_QWORD *)(a1 + 56) = v7;
      }
      v12 = CFRetain(theString1);
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(_QWORD *)(a1 + 56);
      if (v14 >= v13)
      {
        v16 = *(_QWORD *)(a1 + 48);
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        v19 = 2 * v18;
        if (2 * v18 <= v17 + 1)
          v19 = v17 + 1;
        if (v18 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v19;
        v35 = a1 + 64;
        v21 = (char *)sub_20B871730(v20);
        v23 = v22;
        v24 = &v21[24 * v17];
        *(_QWORD *)v24 = 0;
        v24[8] = a3;
        *((_QWORD *)v24 + 2) = 0x3FF0000000000000;
        sub_20B87E150((const void **)v24, v12);
        v26 = *(_QWORD *)(a1 + 48);
        v25 = *(_QWORD *)(a1 + 56);
        if (v25 == v26)
        {
          v29 = vdupq_n_s64(v25);
          v27 = v24;
        }
        else
        {
          v27 = v24;
          do
          {
            v28 = *(_QWORD *)(v25 - 24);
            v25 -= 24;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v27 - 3) = v28;
            v27 -= 24;
            *(_OWORD *)(v27 + 8) = *(_OWORD *)(v25 + 8);
          }
          while (v25 != v26);
          v29 = *(int64x2_t *)(a1 + 48);
        }
        v15 = v24 + 24;
        *(_QWORD *)(a1 + 48) = v27;
        *(_QWORD *)(a1 + 56) = v24 + 24;
        v33 = v29;
        v30 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = &v21[24 * v23];
        v34 = v30;
        v32 = v29.i64[0];
        sub_20B9FC004((uint64_t)&v32);
      }
      else
      {
        *(_QWORD *)v14 = 0;
        *(_BYTE *)(v14 + 8) = a3;
        *(_QWORD *)(v14 + 16) = 0x3FF0000000000000;
        sub_20B87E150((const void **)v14, v12);
        v15 = (char *)(v14 + 24);
      }
      *(_QWORD *)(a1 + 56) = v15;
      *(_DWORD *)(a1 + 32) = -1431655765 * ((unint64_t)&v15[-*(_QWORD *)(a1 + 48)] >> 3);
    }
    else
    {
      while (CFStringCompare(theString1, *(CFStringRef *)v7, 0))
      {
        v7 += 24;
        if (v7 == v6)
        {
          v7 = *(_QWORD *)(a1 + 48);
          v8 = *(const void ***)(a1 + 56);
          goto LABEL_7;
        }
      }
      *(_BYTE *)(v7 + 8) = a3;
      *(double *)(v7 + 16) = *(double *)(v7 + 16) + 1.0;
    }
  }
  return theString1 != 0;
}

void sub_20B9FBBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(double **)(a1 + 56);
  v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v4) >> 3));
  if (v5 == (double *)v4)
    v7 = 0;
  else
    v7 = v6;
  sub_20B9FC054(v4, v5, v7, 1);
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  while (v9 != v8)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, *(_QWORD *)v9, *(unsigned __int8 *)(v9 + 8));
    v9 += 24;
  }
}

BOOL sub_20B9FBC48(uint64_t a1)
{
  double Current;
  double v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  double v12;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 40);
  if (v3 <= 0.0)
  {
LABEL_8:
    *(double *)(a1 + 40) = Current;
    return sub_20B9FBCFC(a1);
  }
  v4 = Current - v3;
  v5 = v4 / 86400.0;
  v6 = v4 < 0.0;
  v7 = 0.0;
  if (!v6)
    v7 = v5;
  v8 = floor(v7);
  if (v8 > 0.0)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    if (v9 != v10)
    {
      v11 = v8 * -0.007;
      v12 = expf(v11);
      do
      {
        *(double *)(v9 + 16) = *(double *)(v9 + 16) * v12;
        v9 += 24;
      }
      while (v9 != v10);
    }
    goto LABEL_8;
  }
  return sub_20B9FBCFC(a1);
}

BOOL sub_20B9FBCFC(uint64_t a1)
{
  int v2;
  const __CFString **v3;
  const __CFString **v4;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  _BYTE v9[408];
  _QWORD v10[20];

  v10[19] = *MEMORY[0x24BDAC8D0];
  sub_20B851EFC(&v8);
  v2 = *(_DWORD *)&v9[*(_QWORD *)(v8 - 24) + 24] & 5;
  if (!v2)
  {
    std::ostream::write();
    v4 = *(const __CFString ***)(a1 + 48);
    v3 = *(const __CFString ***)(a1 + 56);
    while (v4 != v3)
    {
      v7 = 0;
      sub_20B8D0624(*v4, &v7, &v6);
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (v6)
        MEMORY[0x20BD39C80](v6, 0x1000C80BDFB0063);
      v4 += 3;
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&v9[*(_QWORD *)(v8 - 24) - 8], *(_DWORD *)&v9[*(_QWORD *)(v8 - 24) + 24] | 4);
  }
  v8 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v9[*(_QWORD *)(v8 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD399D4](v9);
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](v10);
  return v2 == 0;
}

void sub_20B9FBEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B894160((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B9FBEF4(_QWORD *a1)
{
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
}

BOOL sub_20B9FBF3C(uint64_t a1)
{
  const void **i;
  const void **v3;

  v3 = *(const void ***)(a1 + 48);
  for (i = *(const void ***)(a1 + 56); i != v3; sub_20B87E150(i, 0))
    i -= 3;
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return sub_20B9FBCFC(a1);
}

void sub_20B9FBF90(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_20B87E150(v4, 0);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B9FC004(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B87E150((const void **)(i - 24), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B9FC054(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  double *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  double v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  double v20;
  double *v21;
  double *v22;
  unint64_t v23;
  double v24;
  double *v25;
  double v26;
  unint64_t v27;
  double v28;
  double v29;
  const void *v30;
  BOOL v31;
  const void *v32;
  uint64_t v33;
  double v34;
  double *v35;
  double v36;
  unint64_t v37;
  double *v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  const void **v46;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51;
  const void *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  const void *v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  double *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  const void *v79;
  _OWORD *v80;
  const void *v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  const void **v90;
  const void *v91;
  const void *v92;
  double v93;
  const void **v94;
  const void **v95;
  const void *v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  const void *v101;
  __int128 v102;
  __int128 v103;

__n128 sub_20B9FC948(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  __n128 result;
  __n128 v7;

  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  v7 = *(__n128 *)(a1 + 8);
  v5 = *(const void **)a2;
  *(_QWORD *)a2 = 0;
  sub_20B87E150((const void **)a1, v5);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_20B87E150((const void **)a2, v4);
  result = v7;
  *(__n128 *)(a2 + 8) = v7;
  return result;
}

double sub_20B9FC9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;
  double v7;
  uint64_t v8;

  v5 = a1;
  result = *(double *)(a2 + 16);
  v7 = *(double *)(a3 + 16);
  if (result > *(double *)(a1 + 16))
  {
    if (v7 <= result)
    {
      sub_20B9FC948(a1, a2);
      result = *(double *)(a3 + 16);
      if (result <= *(double *)(a2 + 16))
        return result;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 > result)
  {
    sub_20B9FC948(a2, a3);
    result = *(double *)(a2 + 16);
    if (result > *(double *)(v5 + 16))
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      *(_QWORD *)&result = sub_20B9FC948(a1, v8).n128_u64[0];
    }
  }
  return result;
}

BOOL sub_20B9FCA5C(double *a1, double *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  uint64_t v10;
  int v11;
  double v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  const void *v17;
  uint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) > a1[2])
      {
        v6 = (uint64_t)(a2 - 3);
        v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      sub_20B9FC9B0((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a2 - 3));
      return 1;
    case 4uLL:
      sub_20B9FCC90((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6), (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      sub_20B9FCC90((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
      if (*(a2 - 1) > a1[11])
      {
        sub_20B9FC948((uint64_t)(a1 + 9), (uint64_t)(a2 - 3));
        if (a1[11] > a1[8])
        {
          sub_20B9FC948((uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
          if (a1[8] > a1[5])
          {
            sub_20B9FC948((uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
            if (a1[5] > a1[2])
            {
              v7 = (uint64_t)a1;
              v6 = (uint64_t)(a1 + 3);
LABEL_4:
              sub_20B9FC948(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 6;
      sub_20B9FC9B0((uint64_t)a1, (uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
      v9 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = v9[2];
    if (v12 > v8[2])
    {
      v13 = *(const void **)v9;
      v14 = *((_QWORD *)v9 + 1);
      v15 = v10;
      *v9 = 0.0;
      while (1)
      {
        v16 = (double *)((char *)a1 + v15);
        v17 = *(const void **)((char *)a1 + v15 + 48);
        *(double *)((char *)a1 + v15 + 48) = 0.0;
        sub_20B87E150((const void **)((char *)a1 + v15 + 72), v17);
        *(_OWORD *)((char *)a1 + v15 + 80) = *(_OWORD *)((char *)a1 + v15 + 56);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v12 <= v16[5])
        {
          v18 = (uint64_t)a1 + v15 + 72;
          goto LABEL_14;
        }
      }
      v18 = (uint64_t)a1;
LABEL_14:
      sub_20B87E150((const void **)v18, v13);
      *((_QWORD *)v16 + 7) = v14;
      *(double *)(v18 + 16) = v12;
      if (++v11 == 8)
        return v9 + 3 == a2;
    }
    v8 = v9;
    v10 += 24;
    v9 += 3;
    if (v9 == a2)
      return 1;
  }
}

double sub_20B9FCC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  sub_20B9FC9B0(a1, a2, a3);
  result = *(double *)(a4 + 16);
  if (result > *(double *)(a3 + 16))
  {
    sub_20B9FC948(a3, a4);
    result = *(double *)(a3 + 16);
    if (result > *(double *)(a2 + 16))
    {
      sub_20B9FC948(a2, a3);
      result = *(double *)(a2 + 16);
      if (result > *(double *)(a1 + 16))
        *(_QWORD *)&result = sub_20B9FC948(a1, a2).n128_u64[0];
    }
  }
  return result;
}

void sub_20B9FCD28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9FCD4C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20B9FB8DC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B9FCD80(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E640))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B9FCDC0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  const std::string *v5;
  const std::string *v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = *(const std::string **)(v4 + 48);
    v6 = *(const std::string **)(v4 + 56);
    while (v5 != v6)
    {
      if (v5[1].__r_.__value_.__s.__data_[4])
      {
        std::string::operator=((std::string *)(a1 + 16), v5);
        return a1;
      }
      v5 = (const std::string *)((char *)v5 + 32);
    }
  }
  return a1;
}

void sub_20B9FCE24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20B9FCE40(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  _QWORD v12[3];
  void **v13;

  v6 = atomic_load((unsigned __int8 *)&qword_25472D398);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472D398))
  {
    qword_25472D390 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472D398);
  }
  v7 = 3;
  if (*(_BYTE *)qword_25472D390)
    v7 = 1;
  v8 = **(_QWORD **)a1;
  if (v8)
  {
    v9 = *(_QWORD *)(a3 + 40);
    if (v9 <= 8 && v9 >= v7 && *(_QWORD *)(a3 + 24) != 0)
    {
      v11 = **(_DWORD **)(a1 + 8);
      sub_20B9096D0(v8, *(unsigned __int16 **)(a3 + 32), v9, (v11 >> 4) & 0x20 | v11 & 2 | (((v11 >> 5) & 1) << 7) | (v11 >> 2) & 0x40 | ((char)v11 >> 7) & 0x18, v12);
      sub_20B9FCF84(a1, a2, v12, (_QWORD *)a3, 0x7FFFFFFF);
      v13 = (void **)v12;
      sub_20B8882B4(&v13);
    }
  }
}

void sub_20B9FCF58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D398);
  _Unwind_Resume(a1);
}

void sub_20B9FCF84(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  void **v38;
  void *v39;
  uint64_t v40;
  void **v41;
  void *v42;
  void *v43;
  void *v44;
  unint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  const char *v59;
  NSObject *v60;
  NSObject *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint8_t buf[23];
  char v76;
  void *v77;
  void *v78;
  char *v79;
  _QWORD v80[3];
  _QWORD *v81;
  uint64_t v82;

  v8 = a1;
  v82 = *MEMORY[0x24BDAC8D0];
  if ((~**(_DWORD **)(a1 + 8) & 0x6000000) == 0)
  {
    v9 = (_QWORD *)a2[6];
    v10 = (_QWORD *)a2[7];
    while (v9 != v10)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 96))(*v9) == 76)
        return;
      ++v9;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_25472C128);
  v68 = v8;
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25472C128))
  {
    qword_25472C120 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472C128);
  }
  v12 = &unk_25472C000;
  if (*(_BYTE *)qword_25472C120)
  {
    v67 = 0;
  }
  else
  {
    v13 = **(_DWORD **)(v8 + 8);
    v14 = (v13 & 0x2000002) == 2;
    v15 = v13 & 0x4000000;
    v16 = (v13 >> 26) & 1;
    v17 = HIBYTE(v15);
    if (v14)
      v18 = v16;
    else
      v18 = 0;
    if (v14)
      v19 = v17;
    else
      v19 = 0;
    v67 = __PAIR64__(v18, v19);
  }
  v20 = *a3;
  v21 = a3[1];
  if (*a3 != v21)
  {
    v22 = (v21 - v20) >> 5;
    if (v22 >= 0xC)
      v22 = 12;
    if (v22)
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v71 = (void **)(v8 + 16);
      v72 = a4[6];
      v63 = a4;
      v64 = a3;
      while (1)
      {
        v26 = sub_20B871B2C(v20 + v23, v71);
        v27 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v26[7] + 16))(v26[7]);
        v28 = (uint64_t)(v27[1] - *v27) >> 1;
        if (v72 <= 0 && v28 <= a4[5])
          break;
        if ((*(_BYTE *)(*(_QWORD *)(v8 + 8) + 3) & 2) == 0)
        {
          v29 = 1;
          v30 = 2;
          goto LABEL_26;
        }
LABEL_62:
        ++v24;
        v20 = *a3;
        v62 = (uint64_t)(a3[1] - *a3) >> 5;
        if (v62 >= 0xC)
          v62 = 12;
        v23 += 32;
        if (v24 >= v62)
          return;
      }
      v30 = 0;
      v29 = 0;
LABEL_26:
      v70 = v30;
      if (a5 == 0x7FFFFFFF)
      {
        v31 = v12[36];
        v32 = *(__int16 *)(v31 + 496);
        v33 = v28 - *((_DWORD *)a4 + 10);
        if (v33 >= 1)
          v32 += *(__int16 *)(v31 + 512) + *(__int16 *)(v31 + 512) * v33;
        v74 = v32;
      }
      else
      {
        v74 = a5 + 1;
      }
      v73 = v25;
      if ((HIDWORD(v67) & v29) != 0)
        v34 = v67 + v25;
      else
        v34 = 0;
      v69 = v34;
      v35 = *a3 + v23;
      sub_20B8B2334(0);
      v36 = word_25472C9F2;
      v37 = sub_20B909B78(v35, off_2547294F8[0]);
      v38 = (void **)sub_20B909B78(v35, off_2547294F0[0]);
      v39 = *(void **)v37;
      v40 = *(_QWORD *)(v37 + 8);
      if (*(_QWORD *)v37 == v40)
      {
        v53 = 0;
        a5 = v74;
        v8 = v68;
        goto LABEL_61;
      }
      v41 = v38;
      v43 = *v38;
      v42 = v38[1];
      if (*v38 == v42)
      {
        v53 = 0;
        a3 = v64;
        a5 = v74;
        v8 = v68;
        v12 = (_QWORD *)&unk_25472C000;
        goto LABEL_61;
      }
      v44 = (void *)a4[2];
      v45 = a4[3];
      v65 = v44;
      v46 = (char *)operator new(0x28uLL);
      v78 = v46 + 40;
      v79 = v46 + 40;
      *(_DWORD *)v46 = 4;
      *(_QWORD *)(v46 + 12) = 0;
      *(_QWORD *)(v46 + 4) = 0;
      *((_DWORD *)v46 + 5) = 0;
      *((_WORD *)v46 + 12) = ((_DWORD)v42 - (_DWORD)v43) >> 1;
      *((_WORD *)v46 + 13) = v45;
      *((_WORD *)v46 + 14) = (v40 - (_DWORD)v39) >> 1;
      *((_WORD *)v46 + 15) = v36;
      *((_WORD *)v46 + 16) = v36;
      *((_WORD *)v46 + 17) = 0;
      v46[36] = 0;
      *(_WORD *)(v46 + 37) = 513;
      v46[39] = 0;
      v77 = v46;
      v8 = v68;
      v47 = *(int **)(v68 + 8);
      v48 = operator new();
      a5 = v74;
      sub_20B916250(v48, *v41, ((_BYTE *)v41[1] - (_BYTE *)*v41) >> 1, v65, v45, *(void **)v37, (uint64_t)(*(_QWORD *)(v37 + 8) - *(_QWORD *)v37) >> 1, v74, 0, 0, (uint64_t)&v77, 76, v70, *v47);
      a3 = v64;
      v80[0] = v48;
      v49 = sub_20B8CD218(a2 + 1, v80);
      a4 = v63;
      v12 = &unk_25472C000;
      if (v49)
      {
        v50 = v49[3];
        if (v50 != (uint64_t *)-1)
        {
          v51 = *(_QWORD *)(a2[6] + 8 * (_QWORD)v50);
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 112))(v51);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 488))(v48, v52);
        }
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)v48 + 400))(v48, 0.0);
      *(_QWORD *)(v48 + 184) = 0;
      *(_BYTE *)(v48 + 224) = 1;
      if (v69)
        *(_QWORD *)(v48 + 8) = v69;
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v48 + 528))(v48, 3, "Adding a person name candidate", 1);
      v76 = 0;
      *(_QWORD *)buf = v48;
      v80[0] = &unk_24C459188;
      v81 = v80;
      v53 = sub_20B8FDA94(a2, (_QWORD **)buf, 1, &v76, (uint64_t)v80);
      v54 = v81;
      if (v81 == v80)
      {
        v54 = v80;
        v55 = 4;
      }
      else
      {
        if (!v81)
          goto LABEL_48;
        v55 = 5;
      }
      (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_48:
      v56 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
      if (v53)
      {
        v57 = sub_20B9A7C5C(3u);
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          goto LABEL_59;
        *(_WORD *)buf = 0;
        v58 = v57;
        v59 = " ∟ Added";
      }
      else if (v76)
      {
        v60 = sub_20B9A7C5C(3u);
        if (!os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          goto LABEL_59;
        *(_WORD *)buf = 0;
        v58 = v60;
        v59 = " ∟ Replaced";
      }
      else
      {
        v61 = sub_20B9A7C5C(3u);
        if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          goto LABEL_59;
        *(_WORD *)buf = 0;
        v58 = v61;
        v59 = " ∟ REJECTED";
      }
      _os_log_debug_impl(&dword_20B7F7000, v58, OS_LOG_TYPE_DEBUG, v59, buf, 2u);
LABEL_59:
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
LABEL_61:
      v25 = v73 + v53;
      if (v25 == *(unsigned __int16 *)(v12[36] + 416))
        return;
      goto LABEL_62;
    }
  }
}

void sub_20B9FD584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C128);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9FD644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[6];

  *(_QWORD *)a1 = &off_24C468C88;
  v8 = operator new();
  sub_20B9F20D8(v8, a2);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 95) = 0;
  v9 = *(_QWORD *)(a4 + 24);
  if (v9)
  {
    if (v9 == a4)
    {
      *(_QWORD *)(a1 + 192) = a1 + 168;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24), a1 + 168);
      goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  *(_QWORD *)(a1 + 192) = v9;
LABEL_6:
  v10 = operator new();
  sub_20B9F852C(v10, 1);
  *(_QWORD *)(a1 + 24) = v10;
  v11 = operator new();
  sub_20B9F852C(v11, 1);
  *(_QWORD *)(a1 + 32) = v11;
  sub_20B9FD9B0(*(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20B9FD9B0(*(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16));
  sub_20B9FD9B0(*(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24));
  v12 = operator new();
  v14 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 40) = 10;
  sub_20B95515C(v12);
  *(_OWORD *)(v12 + 56) = 0u;
  *(_QWORD *)(v12 + 88) = 0;
  *(_OWORD *)(v12 + 72) = 0u;
  v15 = operator new();
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)v15 = v14;
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v12 + 80) = v15;
  v16 = operator new();
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)v16 = v13;
  *(_DWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v12 + 88) = v16;
  *(_QWORD *)(a1 + 8) = v12;
  v17 = operator new();
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 0x40000000;
  v20[2] = sub_20B9FDA88;
  v20[3] = &unk_24C46C818;
  v20[4] = a1;
  *(_QWORD *)v17 = v18;
  *(_QWORD *)(v17 + 8) = _Block_copy(v20);
  *(_BYTE *)(v17 + 16) = 1;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = 10;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v17;
  return a1;
}

void sub_20B9FD8D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_20B9FDAD0((_QWORD *)(v2 + 24));
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20B9FD9B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[7];
  v4 = (uint64_t)(a1 + 7);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B9F39A0();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20B800BE8(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)a1[5];
    v18 = (char *)a1[6];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[5] = v16;
    a1[6] = v8;
    a1[7] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[6] = v8;
}

uint64_t sub_20B9FDA88(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char *v7;

  v7 = sub_20B9F33AC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 32);
  return sub_20B940DF0((uint64_t)v7, a2, a3, a4);
}

_QWORD *sub_20B9FDAD0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_20B9FDB10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void **v21;

  *a1 = &off_24C468C88;
  v2 = a1[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 80);
    if (v3)
      MEMORY[0x20BD39CB0](v3, 0x1020C40B39BF849);
    v4 = *(_QWORD *)(v2 + 88);
    if (v4)
      MEMORY[0x20BD39CB0](v4, 0x1020C40B39BF849);
    v21 = (void **)(v2 + 56);
    sub_20BA00230(&v21);
    v5 = sub_20B958794(v2);
    MEMORY[0x20BD39CB0](v5, 0x10A0C4079FC9E15);
  }
  v6 = a1[7];
  if (v6)
  {
    _Block_release(*(const void **)(v6 + 8));
    MEMORY[0x20BD39CB0](v6, 0x10E0C400FD248ABLL);
  }
  v7 = a1[3];
  if (v7)
  {
    v8 = *(void **)(v7 + 40);
    if (v8)
    {
      *(_QWORD *)(v7 + 48) = v8;
      operator delete(v8);
    }
    v9 = sub_20B9F8DD0(v7);
    MEMORY[0x20BD39CB0](v9, 0x10E0C40A81385DBLL);
  }
  v10 = a1[4];
  if (v10)
  {
    v11 = *(void **)(v10 + 40);
    if (v11)
    {
      *(_QWORD *)(v10 + 48) = v11;
      operator delete(v11);
    }
    v12 = sub_20B9F8DD0(v10);
    MEMORY[0x20BD39CB0](v12, 0x10E0C40A81385DBLL);
  }
  v13 = (_QWORD *)a1[2];
  if (v13)
  {
    v14 = sub_20B9F25F0(v13);
    MEMORY[0x20BD39CB0](v14, 0x10E0C402345DB33);
  }
  v15 = (_QWORD *)a1[24];
  if (v15 == a1 + 21)
  {
    v16 = 4;
    v15 = a1 + 21;
  }
  else
  {
    if (!v15)
      goto LABEL_24;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_24:
  v17 = (void *)a1[18];
  if (v17)
  {
    a1[19] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[15];
  if (v18)
  {
    a1[16] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[8];
  if (v19)
  {
    a1[9] = v19;
    operator delete(v19);
  }
  return a1;
}

void sub_20B9FDCC8(_QWORD *a1)
{
  sub_20B9FDB10(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9FDCEC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 56);
  if (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v3 + 64) - v4) >> 3) > a3)
  {
    v8 = *(_QWORD *)(a2 + 16) + a3;
    if (v8)
    {
      v9 = a1[8];
      v10 = a1 + 8;
      v11 = v8 - 1;
      if (0x21CFB2B78C13521DLL * ((a1[9] - v9) >> 3) <= v8 - 1)
      {
        sub_20BA00328((void **)a1 + 8, v8);
        v9 = *v10;
      }
      v12 = v9 + 424 * v11;
    }
    else
    {
      v12 = 0;
    }
    v13 = a1[7];
    *(_QWORD *)(v13 + 40) = v12;
    if (a3)
    {
      v14 = a1[8];
      v15 = v13;
      if (0x21CFB2B78C13521DLL * ((a1[9] - v14) >> 3) <= a3 - 1)
      {
        sub_20BA00328((void **)a1 + 8, a3);
        v15 = a1[7];
        v14 = a1[8];
      }
      v16 = v14 + 424 * (a3 - 1);
    }
    else
    {
      v16 = 0;
      v15 = v13;
    }
    *(_QWORD *)(v13 + 48) = v16;
    *(_BYTE *)(v15 + 16) = 1;
    v17 = v4 + 88 * a3;
    v18 = v17 + 64;
    for (i = *(_QWORD *)(v17 + 72); i != v18; i = *(_QWORD *)(i + 8))
    {
      v20 = **(_QWORD **)(i + 16);
      v21 = (uint64_t *)a1[6];
      v23 = *v21;
      v22 = v21[1];
      if (v23 == v22 || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v22 - 8) + 24))(*(_QWORD *)(v22 - 8)))
        goto LABEL_18;
      v24 = a1[24];
      v28 = v20;
      v29 = a3;
      v27 = a2;
      if (!v24)
        sub_20B80BB74();
      if ((*(unsigned int (**)(uint64_t, unint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v29, &v28, &v27))
      {
LABEL_18:
        v25 = *(_DWORD *)(v20 + 28);
        if ((v25 & 0x20) == 0)
        {
          v26 = *(_DWORD *)(a2 + 28);
          if (((v25 & 2) != 0 || (v26 & 4) == 0)
            && ((v25 & 8) != 0 || (v26 & 0x10) == 0)
            && ((v26 & 8) == 0 || !*(_QWORD *)v20 || (*(_BYTE *)(*(_QWORD *)v20 + 40) & 6) == 0))
          {
            if (!*(_BYTE *)(v20 + 64))
              sub_20B9FDCEC(a1, v20, a3 - *(_QWORD *)(v20 + 16));
            sub_20B9F8588(a2, v20, a1[5], a1[7]);
          }
        }
      }
    }
  }
}

void sub_20B9FDEF8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _BYTE *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  size_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  void **v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *__p;
  int v99;
  unint64_t v100;
  _QWORD v101[3];
  int v102;
  unint64_t v103;
  _QWORD v104[4];

  v6 = sub_20B9547EC();
  if (*v6)
  {
    if ((v6[9] & 0x10) != 0)
    {
      v7 = sub_20B9547EC();
      sub_20B9F8740(a2, *(_QWORD *)(a1[5] + 40), &__p);
      sub_20B954D48((uint64_t)v7, 0x1000u, (uint64_t)"adding word group endIndex=%d {\n%s}\n\n", v8, v9, v10, v11, v12, a3);
      if (SHIBYTE(v100) < 0)
        operator delete(__p);
    }
  }
  v13 = *(_QWORD *)(a2 + 16);
  v14 = a1[1];
  v95 = *(_QWORD *)(v14 + 56);
  v96 = *(_QWORD *)(v14 + 64);
  v15 = *(_QWORD *)(v14 + 24);
  if (v15)
  {
    v16 = *(uint64_t **)(v14 + 32);
    v17 = (size_t)v16 - v15;
    if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v16 - v15) >> 3) != *(_QWORD *)(v14 + 40))
      goto LABEL_27;
  }
  else
  {
    v17 = 56 * *(_QWORD *)(v14 + 40);
  }
  v18 = (uint64_t *)malloc_type_malloc(v17, 0x1020040B39BF849uLL);
  v16 = v18;
  v20 = *(uint64_t ***)(v14 + 8);
  v19 = *(_QWORD *)(v14 + 16);
  if ((unint64_t)v20 >= v19)
  {
    v22 = *(uint64_t ***)v14;
    v23 = ((uint64_t)v20 - *(_QWORD *)v14) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      sub_20B80CDD8();
    v25 = v13;
    v26 = v19 - (_QWORD)v22;
    if (v26 >> 2 > v24)
      v24 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v24;
    if (v27)
    {
      if (v27 >> 61)
        sub_20B800BC0();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[8 * v23];
    v30 = &v28[8 * v27];
    *(_QWORD *)v29 = v16;
    v21 = v29 + 8;
    v13 = v25;
    if (v20 != v22)
    {
      do
      {
        v31 = (uint64_t)*--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      while (v20 != v22);
      v20 = *(uint64_t ***)v14;
    }
    *(_QWORD *)v14 = v29;
    *(_QWORD *)(v14 + 8) = v21;
    *(_QWORD *)(v14 + 16) = v30;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v20 = v18;
    v21 = v20 + 1;
  }
  *(_QWORD *)(v14 + 8) = v21;
  *(_QWORD *)(v14 + 24) = v16;
LABEL_27:
  ++*(_DWORD *)(v14 + 48);
  *(_QWORD *)(v14 + 32) = v16 + 7;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = a2;
  *((_DWORD *)v16 + 6) = 0;
  v16[4] = 0;
  v16[5] = 0;
  *((_DWORD *)v16 + 12) = 0;
  v33 = *(_QWORD *)(v14 + 56);
  v32 = *(_QWORD *)(v14 + 64);
  v94 = a2;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v33) >> 3) <= a3)
  {
    v92 = *(_QWORD *)(v14 + 64);
    v93 = *(_QWORD *)(v14 + 56);
    v34 = v93;
    v91 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v33) >> 3);
    v35 = v91;
    v97 = a3;
    do
    {
      __p = (void *)v35;
      v99 = 1;
      v100 = v35;
      v101[0] = v101;
      v101[1] = v101;
      v101[2] = 0;
      v102 = 2;
      v103 = v35;
      v104[0] = v104;
      v104[1] = v104;
      v104[2] = 0;
      v36 = *(_QWORD *)(v14 + 72);
      if (v32 >= v36)
      {
        v38 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v34) >> 3);
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) > 0x2E8BA2E8BA2E8BALL)
          sub_20B80CDD8();
        v40 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v36 - v34) >> 3);
        if (2 * v40 > v39)
          v39 = 2 * v40;
        if (v40 >= 0x1745D1745D1745DLL)
          v41 = 0x2E8BA2E8BA2E8BALL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 > 0x2E8BA2E8BA2E8BALL)
            sub_20B800BC0();
          v42 = (char *)operator new(88 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = (uint64_t)&v42[88 * v38];
        v44 = &v42[88 * v41];
        v45 = sub_20BA0050C(v43, (uint64_t)&__p);
        v37 = v45 + 88;
        v47 = *(char **)(v14 + 56);
        v46 = *(char **)(v14 + 64);
        if (v46 == v47)
        {
          *(_QWORD *)(v14 + 56) = v45;
          *(_QWORD *)(v14 + 64) = v37;
          *(_QWORD *)(v14 + 72) = v44;
        }
        else
        {
          do
          {
            v46 -= 88;
            v45 = sub_20BA0050C(v45 - 88, (uint64_t)v46);
          }
          while (v46 != v47);
          v46 = *(char **)(v14 + 56);
          v48 = *(char **)(v14 + 64);
          *(_QWORD *)(v14 + 56) = v45;
          *(_QWORD *)(v14 + 64) = v37;
          for (*(_QWORD *)(v14 + 72) = v44; v48 != v46; v48 -= 88)
          {
            sub_20BA002C8((_QWORD *)v48 - 3);
            sub_20BA002C8((_QWORD *)v48 - 8);
          }
        }
        a3 = v97;
        if (v46)
          operator delete(v46);
      }
      else
      {
        v37 = sub_20BA0050C(v32, (uint64_t)&__p) + 88;
      }
      *(_QWORD *)(v14 + 64) = v37;
      sub_20BA002C8(v104);
      sub_20BA002C8(v101);
      v34 = *(_QWORD *)(v14 + 56);
      v32 = *(_QWORD *)(v14 + 64);
      v35 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v34) >> 3);
    }
    while (v35 <= a3);
    v49 = *(_QWORD *)(v14 + 88);
    if (v49)
    {
      if (v92 != v93)
      {
        v50 = v34 + 88 * v91;
        v51 = *(uint64_t **)(v50 - 56);
        v52 = *v51;
        *(_QWORD *)(v52 + 8) = v51[1];
        *(_QWORD *)v51[1] = v52;
        --*(_QWORD *)(v50 - 48);
        operator delete(v51);
        v34 = *(_QWORD *)(v14 + 56);
        v49 = *(_QWORD *)(v14 + 88);
        v35 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v14 + 64) - v34) >> 3);
      }
      v53 = (_QWORD *)(v34 + 88 * v35);
      v54 = operator new(0x18uLL);
      v54[2] = v49;
      v55 = *(v53 - 8);
      v53 -= 8;
      *v54 = v55;
      v54[1] = v53;
      *(_QWORD *)(v55 + 8) = v54;
      *v53 = v54;
      ++v53[2];
      v33 = v34;
    }
    else
    {
      v33 = *(_QWORD *)(v14 + 56);
    }
  }
  v56 = a3 - v13;
  v57 = v33 + 88 * (a3 - v13);
  v58 = v33;
  v59 = operator new(0x18uLL);
  v59[2] = v16;
  v61 = *(_QWORD *)(v57 + 24);
  v60 = (uint64_t *)(v57 + 24);
  *v59 = v61;
  v59[1] = v60;
  *(_QWORD *)(v61 + 8) = v59;
  *v60 = (uint64_t)v59;
  ++v60[2];
  v62 = v58 + 88 * a3;
  v63 = operator new(0x18uLL);
  v64 = v16;
  v63[2] = v16;
  v66 = *(_QWORD *)(v62 + 64);
  v65 = (_QWORD *)(v62 + 64);
  *v63 = v66;
  v63[1] = v65;
  *(_QWORD *)(v66 + 8) = v63;
  *v65 = v63;
  ++v65[2];
  v67 = *(_QWORD *)(v14 + 80);
  if (v67 && !*(_QWORD *)(v58 + 80))
  {
    v68 = operator new(0x18uLL);
    v68[2] = v67;
    v69 = *(_QWORD *)(v58 + 64);
    *v68 = v69;
    v68[1] = v58 + 64;
    *(_QWORD *)(v69 + 8) = v68;
    *(_QWORD *)(v58 + 64) = v68;
    ++*(_QWORD *)(v58 + 80);
    v63 = (_QWORD *)*v65;
  }
  v70 = v58 + 88 * a3;
  v71 = v58 + 88 * v56;
  v72 = *(_QWORD *)(v71 + 16);
  LODWORD(v71) = *(_DWORD *)(v71 + 8);
  v73 = *(_QWORD *)(v70 + 56);
  LODWORD(v70) = *(_DWORD *)(v70 + 48);
  v64[1] = *v60;
  v64[2] = v72;
  *((_DWORD *)v64 + 6) = v71;
  v64[4] = (uint64_t)v63;
  v64[5] = v73;
  *((_DWORD *)v64 + 12) = v70;
  v74 = *(_DWORD *)(v94 + 36);
  if (v74 - 9 < 8 || v74 <= 7 && ((1 << v74) & 0xA1) != 0)
  {
    v75 = a1[7];
    *(_QWORD *)(v75 + 40) = 0;
    *(_QWORD *)(v75 + 48) = 0;
    sub_20B9FDCEC(a1, v94, v56);
    v76 = 1;
  }
  else
  {
    v76 = 0;
    v90 = a1[7];
    *(_QWORD *)(v90 + 40) = 0;
    *(_QWORD *)(v90 + 48) = 0;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1[1] + 64) - *(_QWORD *)(a1[1] + 56)) >> 3) > (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v96 - v95) >> 3)))
  {
    v77 = a1[2];
    v78 = *(_QWORD *)(*(_QWORD *)(v77 + 16) + 8);
    if (v78)
    {
      *(_QWORD *)(v78 + 80) = 0;
      *(_QWORD *)(v78 + 88) = 0;
      v77 = a1[2];
    }
    v79 = *(_QWORD *)(*(_QWORD *)(v77 + 24) + 8);
    if (v79)
    {
      *(_QWORD *)(v79 + 80) = 0;
      *(_QWORD *)(v79 + 88) = 0;
    }
  }
  if (v76)
  {
    v80 = a1[7];
    *(_QWORD *)(v80 + 40) = 0;
    *(_QWORD *)(v80 + 48) = 0;
    *(_BYTE *)(a1[7] + 16) = (*(_DWORD *)(v94 + 28) & 0x40) == 0;
    v81 = (uint64_t *)a1[6];
    v83 = *v81;
    v82 = v81[1];
    if (v83 == v82)
    {
      v85 = a1[5];
    }
    else
    {
      v84 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v82 - 8) + 24))(*(_QWORD *)(v82 - 8));
      v85 = a1[5];
      if (v84 && !*(_BYTE *)(v85 + 80))
        goto LABEL_74;
    }
    sub_20B9F8588(a1[4], v94, v85, a1[7]);
  }
LABEL_74:
  v86 = (_BYTE *)a1[8];
  v87 = a1[9];
  v88 = (void **)(a1 + 8);
  if (0x21CFB2B78C13521DLL * ((v87 - (uint64_t)v86) >> 3) <= v56)
  {
    sub_20BA00328(v88, v56 + 1);
    v86 = *v88;
  }
  v89 = *(_DWORD *)(v94 + 36);
  if (v89 <= 0x10 && ((1 << v89) & 0x10081) != 0)
    v86[424 * v56] = 1;
}

void sub_20B9FE604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9FE63C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  double v3;

  v3 = 0.0;
  v1 = a1 + 88;
  v2 = (_QWORD *)(*(uint64_t (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a1 + 64))(a1, &v3, 1);
  sub_20B8B446C(v1, v2, v3);
}

void sub_20B9FE688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  _QWORD v33[2];
  void (*v34)(_QWORD *, uint64_t *, uint64_t);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[5];
  _OWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __n128 (*v48)(_QWORD *, uint64_t);
  void (*v49)(uint64_t);
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *(*v56)(_QWORD *, _QWORD *);
  void (*v57)(uint64_t);
  _QWORD **v58;
  _QWORD *v59[2];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) == v5)
    return;
  v54 = &v53;
  v55 = 0x4002000000;
  v56 = sub_20B9FEA24;
  v57 = sub_20B9FEA60;
  v59[0] = 0;
  v59[1] = 0;
  v58 = v59;
  v45 = 0;
  v46 = &v45;
  v47 = 0x4002000000;
  v48 = sub_20B9FEA70;
  v49 = sub_20B9FEA94;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x5002000000;
  v42[3] = sub_20B9FEAAC;
  v42[4] = sub_20B9FEB1C;
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 0x40000000;
  v34 = sub_20B9FEB24;
  v35 = &unk_24C4AE7B8;
  v38 = &v45;
  v39 = &v53;
  v40 = v42;
  v41 = a1;
  v36 = a4;
  v37 = a3;
  v9 = v5 + 24;
  for (i = *(_QWORD *)(v5 + 32); i != v9; i = *(_QWORD *)(i + 8))
    v34(v33, **(uint64_t ***)(i + 16), *(_QWORD *)(*(_QWORD *)(i + 16) + 40));
  v11 = *(uint64_t **)(a1 + 48);
  v13 = *v11;
  v12 = v11[1];
  if (v13 == v12)
  {
    v15 = v54;
  }
  else
  {
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 - 8) + 24))(*(_QWORD *)(v12 - 8));
    v15 = v54;
    if ((v14 & 1) != 0)
    {
LABEL_25:
      v22 = a2 + 8;
      sub_20B8292CC(a2, *(_QWORD **)(a2 + 8));
      *(_QWORD *)a2 = v15[5];
      v23 = v15 + 6;
      v24 = v15[6];
      *(_QWORD *)(a2 + 8) = v24;
      v25 = v15[7];
      *(_QWORD *)(a2 + 16) = v25;
      if (v25)
      {
        *(_QWORD *)(v24 + 16) = v22;
        v15[5] = (uint64_t)v23;
        *v23 = 0;
        v15[7] = 0;
      }
      else
      {
        *(_QWORD *)a2 = v22;
      }
      v32 = 0;
      v27 = v46[5];
      v26 = v46[6];
      if (v26 == v27)
      {
        (*(void (**)(uint64_t, _QWORD, char *))(a5 + 16))(a5, 0, &v32);
      }
      else
      {
        do
        {
          v32 = 0;
          v28 = *(_QWORD *)(*(_QWORD *)v27 + 40);
          v29 = *(_QWORD *)(*(_QWORD *)v27 + 48);
          if (v28 != v29)
          {
            v30 = v28 + 8;
            do
            {
              (*(void (**)(uint64_t, _QWORD, char *))(a5 + 16))(a5, **(_QWORD **)(v30 - 8), &v32);
              if (v32)
                v31 = 1;
              else
                v31 = v30 == v29;
              v30 += 8;
            }
            while (!v31);
          }
          v27 += 8;
        }
        while (v27 != v26);
      }
      goto LABEL_39;
    }
  }
  if (v15[7] != *(_QWORD *)(a2 + 16))
    goto LABEL_25;
  v16 = (uint64_t *)v15[5];
  if (v16 != v15 + 6)
  {
    v17 = *(_QWORD **)a2;
    while (v16[4] == v17[4])
    {
      v18 = (uint64_t *)v16[1];
      v19 = v16;
      if (v18)
      {
        do
        {
          v16 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v19[2];
          v31 = *v16 == (_QWORD)v19;
          v19 = v16;
        }
        while (!v31);
      }
      v20 = (_QWORD *)v17[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v17[2];
          v31 = *v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v31);
      }
      v17 = v21;
      if (v16 == v15 + 6)
        goto LABEL_39;
    }
    goto LABEL_25;
  }
LABEL_39:
  _Block_object_dispose(v42, 8);
  sub_20B84055C((uint64_t)v43);
  _Block_object_dispose(&v45, 8);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  _Block_object_dispose(&v53, 8);
  sub_20B8292CC((uint64_t)&v58, v59[0]);
}

void sub_20B9FE9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;

  _Block_object_dispose(&a21, 8);
  sub_20B84055C(v32);
  _Block_object_dispose(&a31, 8);
  v36 = *(void **)(v33 + 120);
  if (v36)
  {
    *(_QWORD *)(v33 + 128) = v36;
    operator delete(v36);
  }
  _Block_object_dispose((const void *)(v34 - 144), 8);
  sub_20B8292CC(v31, *(_QWORD **)(v33 + 192));
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9FEA24(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_20B9FEA60(uint64_t a1)
{
  sub_20B8292CC(a1 + 40, *(_QWORD **)(a1 + 48));
}

__n128 sub_20B9FEA70(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9FEA94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t sub_20B9FEAAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_20B9FEB1C(uint64_t a1)
{
  return sub_20B84055C(a1 + 40);
}

void sub_20B9FEB24(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t *v43;

  v42 = a3;
  v6 = a1[9];
  v7 = *a2;
  if (*a2 && *(_QWORD *)(v7 + 8) <= 1uLL && (*(_BYTE *)(v7 + 40) & 0x10) == 0)
    return;
  if (sub_20B941C08(*(_QWORD *)(v6 + 48), a3, 1))
  {
    if (v7 && (sub_20B9D6A48(v7, v6 + 120) || (*(unsigned int (**)(void))(a1[4] + 16))()))
    {
      v8 = *(_QWORD **)(a1[6] + 8);
      v10 = (uint64_t **)v8[6];
      v9 = v8[7];
      if ((unint64_t)v10 < v9)
      {
LABEL_9:
        *v10 = a2;
        v11 = v10 + 1;
LABEL_47:
        v8[6] = v11;
        sub_20BA005C0((uint64_t *)(*(_QWORD *)(a1[7] + 8) + 40), v42, v42);
        return;
      }
      v22 = v8[5];
      v23 = ((uint64_t)v10 - v22) >> 3;
      if (!((unint64_t)(v23 + 1) >> 61))
      {
        v24 = v9 - v22;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)sub_20B87FB70(v26);
        else
          v27 = 0;
        v28 = (uint64_t **)(v26 + 8 * v23);
        v29 = v26 + 8 * v27;
        *v28 = a2;
        v11 = v28 + 1;
        v31 = (char *)v8[5];
        v30 = (char *)v8[6];
        if (v30 == v31)
          goto LABEL_45;
        do
        {
          v32 = (uint64_t *)*((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v28 = v32;
        }
        while (v30 != v31);
LABEL_44:
        v30 = (char *)v8[5];
LABEL_45:
        v8[5] = v28;
        v8[6] = v11;
        v8[7] = v29;
        if (v30)
          operator delete(v30);
        goto LABEL_47;
      }
      goto LABEL_63;
    }
  }
  else
  {
    v13 = *(_QWORD **)(v6 + 144);
    v12 = *(_QWORD **)(v6 + 152);
    if (v13 != v12)
    {
      while (*v13 != a3)
      {
        if (++v13 == v12)
        {
          v13 = *(_QWORD **)(v6 + 152);
          break;
        }
      }
    }
    v14 = sub_20B891738((_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40), &v42);
    if (v14)
    {
      v15 = *((_BYTE *)v14 + 24) != 0;
    }
    else
    {
      v15 = (*(uint64_t (**)(void))(a1[5] + 16))();
      v16 = *(_QWORD *)(a1[8] + 8) + 40;
      v43 = &v42;
      *((_BYTE *)sub_20B958B68(v16, &v42, (uint64_t)&unk_20BA37B7A, &v43) + 24) = v15;
    }
    if (v13 != v12 || v15)
    {
      v17 = v42;
      v18 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 56);
      if (v42 < 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(*(_QWORD *)(v6 + 8) + 64) - v18) >> 3) - 1)
      {
        if (v13 == v12)
        {
          v19 = *(_QWORD *)(v6 + 64);
          if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(v6 + 72) - v19) >> 3) <= v42)
          {
            sub_20BA00328((void **)(v6 + 64), v42 + 1);
            v19 = *(_QWORD *)(v6 + 64);
          }
          if (!*(_BYTE *)(v19 + 424 * v17))
            return;
          v17 = v42;
          v18 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 56);
        }
        if (!*(_QWORD *)(v18 + 88 * v17 + 40))
          return;
        if (v7)
        {
          v20 = *(_QWORD *)(v7 + 40);
          if ((v20 & 0x10) != 0)
          {
            if (!sub_20B9D6A48(v7, v6 + 120))
              return;
          }
          else
          {
            if ((v20 & 2) != 0)
              v21 = v15;
            else
              v21 = 1;
            if (v21 != 1)
              return;
          }
        }
        v8 = *(_QWORD **)(a1[6] + 8);
        v10 = (uint64_t **)v8[6];
        v33 = v8[7];
        if ((unint64_t)v10 < v33)
          goto LABEL_9;
        v34 = v8[5];
        v35 = ((uint64_t)v10 - v34) >> 3;
        if (!((unint64_t)(v35 + 1) >> 61))
        {
          v36 = v33 - v34;
          v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1))
            v37 = v35 + 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
            v38 = (unint64_t)sub_20B87FB70(v38);
          else
            v39 = 0;
          v28 = (uint64_t **)(v38 + 8 * v35);
          v29 = v38 + 8 * v39;
          *v28 = a2;
          v11 = v28 + 1;
          v40 = (char *)v8[5];
          v30 = (char *)v8[6];
          if (v30 == v40)
            goto LABEL_45;
          do
          {
            v41 = (uint64_t *)*((_QWORD *)v30 - 1);
            v30 -= 8;
            *--v28 = v41;
          }
          while (v30 != v40);
          goto LABEL_44;
        }
LABEL_63:
        sub_20B80CDD8();
      }
    }
  }
}

void sub_20B9FEE8C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[14];
  char v23;
  char v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  _QWORD v39[3];
  char v40;

  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2000000000;
  v40 = 0;
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x2000000000;
  v38 = 0;
  v38 = sub_20B9F1A84(*(_DWORD *)(a1[5] + 4));
  v33 = 0;
  v34 = &v33;
  v35 = 0x2000000000;
  v36 = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2000000000;
  v32 = 0;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v16 = *(_DWORD *)(a1[5] + 24) & 0x400000;
  v17 = v16 | a6 & 1;
  v18 = v17 == 0;
  if (v16 | a6 & 0xF || !v17)
  {
    v19 = a6 & 9 | (4 * ((a6 >> 1) & 1)) | ((a6 & 4) >> 1) | (v16 >> 18);
    if (v17)
      v20 = v19;
    else
      v20 = v19 | 0x20;
    v30 = v20;
  }
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 0x40000000;
  v22[2] = sub_20B9FF0E4;
  v22[3] = &unk_24C46CC98;
  v23 = a6 & 1;
  v24 = (a6 & 4) >> 2;
  v25 = v18;
  v26 = a4;
  v22[6] = &v27;
  v22[7] = &v33;
  v22[12] = a5;
  v22[13] = a2;
  v22[8] = v39;
  v22[9] = v37;
  v22[10] = v31;
  v22[11] = a1;
  v22[4] = a8;
  v22[5] = a7;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 64))(a2, a3, v22);
  v21 = v34[3];
  if (v21)
    sub_20B9FF3A4(a1, v21, a5, *((_DWORD *)v28 + 6));
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(v37, 8);
  _Block_object_dispose(v39, 8);
}

void sub_20B9FF094(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_20B9FF0E4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;
  int **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = *(_DWORD **)a2;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a2 + 4);
  if ((v5 & 1) != 0)
    LOBYTE(v6) = 1;
  else
    v6 = (*(_BYTE *)(a1 + 112) != 0) & (v5 >> 14);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (*(_BYTE *)(a1 + 113) && *(_BYTE *)(a1 + 114))
  {
    if ((v8 & 1) != 0)
    {
      if ((v5 & 0x80) != 0)
        goto LABEL_34;
      if ((v8 & 2) != 0)
      {
        if ((v5 & 0x400) != 0)
          goto LABEL_34;
      }
      else if ((v8 & 8) != 0)
      {
        if ((~v5 & 0x300) == 0)
          goto LABEL_34;
      }
      else
      {
        if ((v8 & 4) == 0)
          goto LABEL_31;
        if ((v5 & 0x200) != 0)
          goto LABEL_34;
      }
    }
    else
    {
      if ((v8 & 2) == 0)
      {
        if ((v8 & 8) != 0)
        {
          if ((~v5 & 0x210) != 0)
            goto LABEL_31;
        }
        else if ((v5 & 0x20) == 0 || (v8 & 4) == 0)
        {
LABEL_31:
          if ((v6 & 1) != 0)
            goto LABEL_35;
LABEL_26:
          if (!*(_BYTE *)(a1 + 112))
          {
            v9 = 1;
            if ((v5 & 0x8000) == 0 || (v8 & 0xC) == 0)
              goto LABEL_37;
            goto LABEL_35;
          }
LABEL_27:
          v9 = 1;
          goto LABEL_37;
        }
        if ((v5 & 0x8000) != 0 && (v8 & 0x20) != 0)
          goto LABEL_24;
LABEL_34:
        LOBYTE(v8) = v8 & 0xF9 | 4;
        goto LABEL_35;
      }
      if ((v8 & 0x10) != 0)
      {
        if ((v5 & 0x2000) != 0)
          goto LABEL_34;
      }
      else if ((v5 & 0x40) != 0)
      {
        goto LABEL_34;
      }
    }
  }
LABEL_24:
  if ((v6 & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 114))
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_35:
  if (!*(_BYTE *)(a1 + 115))
    return;
  v9 = 0;
LABEL_37:
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11
    && !*v4
    && *(_QWORD *)(a1 + 96) != *(_QWORD *)(v11 + 16)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    return;
  }
  if ((v8 & 1) != 0)
  {
    if ((v5 & 0x80) != 0)
      return;
    if ((v8 & 2) != 0)
    {
      if ((v5 & 0x400) != 0)
        return;
    }
    else if ((v8 & 8) != 0)
    {
      if ((~v5 & 0x300) == 0)
        return;
    }
    else if ((v5 & 0x200) != 0 && (v8 & 4) != 0)
    {
      return;
    }
  }
  else if ((v8 & 2) != 0)
  {
    if ((v8 & 0x10) != 0)
    {
      if ((v5 & 0x2000) != 0)
        return;
    }
    else if ((v5 & 0x40) != 0)
    {
      return;
    }
  }
  else
  {
    if ((v8 & 8) != 0)
    {
      if ((~v5 & 0x210) != 0)
        goto LABEL_61;
    }
    else if ((v5 & 0x20) == 0 || (v8 & 4) == 0)
    {
      goto LABEL_61;
    }
    if ((v5 & 0x8000) == 0 || (v8 & 0x20) == 0)
      return;
  }
LABEL_61:
  if (!*v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    if (v11)
      goto LABEL_63;
LABEL_70:
    *(_QWORD *)(v10 + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    goto LABEL_63;
  }
  if (!v11)
    goto LABEL_70;
LABEL_63:
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104));
  if (v12 == 14 || v12 == 9)
  {
    v14 = sub_20B9F2BEC(*(int ***)(v7 + 16), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(uint64_t **)(v10 + 24));
  }
  else
  {
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
    v16 = v15;
    v17 = *(int ***)(v7 + 16);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    v19 = *(uint64_t **)(v10 + 24);
    if ((v16 & 1) != 0)
      v14 = sub_20B9F2DD8(v17, a2, v18, v19);
    else
      v14 = sub_20B9F29E8((uint64_t)v17, a2, v18, v19, v9);
  }
  v20 = v14;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  sub_20B9FD9B0(*(_QWORD **)(v10 + 24), v20);
}

void sub_20B9FF3A4(_QWORD *a1, uint64_t a2, unint64_t a3, char a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 48))
  {
    v4 = *(_DWORD *)(a1[5] + 24);
    v5 = 2;
    v6 = 5;
    if ((a4 & 4) == 0)
      v6 = 10;
    if ((a4 & 2) == 0)
      v5 = v6;
    v7 = 10;
    if ((v4 & 0x8000) == 0)
      v7 = 2;
    if ((v4 & 0x4000) != 0)
      v8 = v7;
    else
      v8 = v5;
    *(_QWORD *)(a1[7] + 32) = v8;
    sub_20B9FDEF8(a1, a2, a3);
  }
}

void sub_20B9FF3FC(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9)
{
  int v17;
  _QWORD v18[8];
  int v19;
  int v20;

  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 0x40000000;
  v18[2] = sub_20B9FF4CC;
  v18[3] = &unk_24C4AE7D8;
  v18[4] = a1;
  v18[5] = a6;
  v18[6] = a3;
  v18[7] = a2;
  v19 = a8;
  v20 = v17;
  sub_20B9FEE8C(a1, a2, a3, a4, a5, a7, a9, (uint64_t)v18);
}

uint64_t sub_20B9FF4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;

  v1 = a1;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD **)(v3 + 16);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 112))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v6 = *(_DWORD *)(v1 + 64);
  LODWORD(v1) = *(_DWORD *)(v1 + 68);
  v7 = sub_20B8FB104(*(_DWORD *)(*(_QWORD *)(v3 + 40) + 24), v1, 0);
  return sub_20B9F2700(v4, v2, v5, v6, v1, v7);
}

void sub_20B9FF544(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  int **v18;
  uint64_t v19;
  _QWORD *v20;

  v14 = (a4 < 0x12) & (0x24E00u >> a4);
  v15 = (_QWORD *)a1[2];
  v16 = sub_20B8FB104(*(_DWORD *)(a1[5] + 24), a4, 1);
  v17 = (uint64_t *)sub_20B9F2700(v15, a3, 0, 96, a4, v16);
  v18 = (int **)a1[2];
  v19 = sub_20B9F1A84(*(_DWORD *)(a1[5] + 4));
  v20 = (_QWORD *)sub_20B9F2FC0(v18, a5, v19, v17, v14, a6);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(a7 + 16))(a7, *v20, 0);
  sub_20B9FD9B0(v17, (uint64_t)v20);
  if (a6)
    sub_20B9FF3A4(a1, (uint64_t)v17, a2, 0);
}

void sub_20B9FF668(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, unsigned int a7, uint64_t a8)
{
  int v16;
  _QWORD v17[8];
  int v18;

  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 0x40000000;
  v17[2] = sub_20B9FF72C;
  v17[3] = &unk_24C4AE7F8;
  v17[4] = a1;
  v17[5] = a4;
  v17[6] = a3;
  v17[7] = a2;
  v18 = v16;
  sub_20B9FEE8C(a1, a2, a3, a5, a6, a7, a8, (uint64_t)v17);
}

uint64_t sub_20B9FF72C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;

  v1 = a1;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD **)(v3 + 16);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 112))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  LODWORD(v1) = *(_DWORD *)(v1 + 64);
  v6 = sub_20B8FB104(*(_DWORD *)(*(_QWORD *)(v3 + 40) + 24), v1, 0);
  return sub_20B9F2878(v4, v2, v5, 8, v1, v6);
}

void sub_20B9FF7A4(uint64_t a1, uint64_t a2, int a3, int a4, _OWORD *a5, int a6, unint64_t a7)
{
  _QWORD *v12;
  uint64_t v13;

  v12 = (_QWORD *)sub_20B9F2878(*(_QWORD **)(a1 + 16), a2, a3, 0, 13, 130);
  v13 = sub_20B9F3200(*(_QWORD **)(a1 + 16), a4, a5, a6, (uint64_t)v12);
  sub_20B9FD9B0(v12, v13);
  sub_20B9FDEF8((_QWORD *)a1, (uint64_t)v12, a7);
}

uint64_t sub_20B9FF828(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 24;
  if (a3)
    v3 = 16;
  v4 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v3) + 8);
  if (v4[10])
  {
    v5 = *v4;
    if (!a2)
      goto LABEL_11;
    if (v5)
      v6 = *(_QWORD *)(v5 + 16);
    else
      v6 = 0;
    goto LABEL_10;
  }
  v5 = 0;
  v6 = 0;
  if (a2)
LABEL_10:
    *a2 = v6;
LABEL_11:
  if (v5)
    return v5 + 24;
  else
    return 0;
}

uint64_t sub_20B9FF888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD *(*v10)(_QWORD *, uint64_t, char *);
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[3];
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v17 = 0;
  v3 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 8);
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v10 = sub_20B9FF99C;
  v11 = &unk_24C4AE820;
  v12 = a3;
  v13 = v16;
  v14 = &v18;
  v15 = a2;
  v22 = 0;
  v4 = v3[10];
  if (v4)
  {
    v5 = v4 - 1;
    do
    {
      v10(v9, *v3, &v22);
      if (v22)
        v6 = 1;
      else
        v6 = v5 == 0;
      --v5;
      ++v3;
    }
    while (!v6);
    v7 = v19[3];
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v18, 8);
  return v7;
}

void sub_20B9FF978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 56), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9FF99C(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(result[5] + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    v6 = result;
    v7 = (_QWORD *)result[7];
    if (v7)
      *v7 = *(_QWORD *)(a2 + 16);
    result = (_QWORD *)(*(uint64_t (**)(void))(result[4] + 16))();
    if ((_DWORD)result)
    {
      *(_QWORD *)(*(_QWORD *)(v6[6] + 8) + 24) = a2 + 24;
      *a3 = 1;
    }
  }
  else
  {
    *(_BYTE *)(v3 + 24) = 1;
  }
  return result;
}

uint64_t sub_20B9FFA20(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD v7[2];
  uint64_t (*v8)(uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  char v11;

  v2 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(result + 16) + 16) + 8);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v8 = sub_20B9FFAB4;
  v9 = &unk_24C4AE848;
  v10 = a2;
  v11 = 0;
  v3 = v2[10];
  if (v3)
  {
    v4 = v3 - 1;
    do
    {
      v5 = *v2++;
      result = ((uint64_t (*)(_QWORD *, uint64_t, char *))v8)(v7, v5, &v11);
      if (v11)
        v6 = 1;
      else
        v6 = v4 == 0;
      --v4;
    }
    while (!v6);
  }
  return result;
}

uint64_t sub_20B9FFAB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))(*(double *)(a2 + 16));
}

void sub_20B9FFACC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD v6[2];
  uint64_t (*v7)(uint64_t, uint64_t, char *);
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  v2 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 8);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v7 = sub_20B9FFBA4;
  v8 = &unk_24C4AE870;
  v9 = v12;
  v10 = a1;
  v11 = a2;
  v13 = 0;
  v3 = v2[10];
  if (v3)
  {
    v4 = v3 - 1;
    do
    {
      v7((uint64_t)v6, *v2, &v13);
      if (v13)
        v5 = 1;
      else
        v5 = v4 == 0;
      --v4;
      ++v2;
    }
    while (!v5);
  }
  _Block_object_dispose(v12, 8);
}

void sub_20B9FFB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9FFBA4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD, uint64_t, const char *, double))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40), a2 + 24, "NBest: ", *(double *)(a2 + 16));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(_QWORD *)(v6 + 24) + 1;
  *(_QWORD *)(v6 + 24) = v7;
  if (v7 == *(_QWORD *)(a1 + 48))
    *a3 = 1;
  return result;
}

void sub_20B9FFC10(uint64_t a1, _QWORD *a2, uint64_t a3, double a4)
{
  _WORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *Mutable;
  char v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  __CFString *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40[2];

  v8 = sub_20B9547EC();
  if (*(_BYTE *)v8 && (v8[4] & 0x4008) != 0)
  {
    v9 = sub_20B9547EC();
    sub_20B954D9C((uint64_t)v9, 16392, a3, v10, v11, v12, v13, v14, v38);
    Mutable = (char *)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v40[1] = Mutable;
    if (a2)
    {
      v21 = 1;
      do
      {
        if ((v21 & 1) == 0)
          sub_20B954D9C((uint64_t)v9, 16392, (uint64_t)" -> ", v15, v16, v17, v18, v19, v39);
        v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
        v23 = CFStringCreateWithCharacters(0, *(const UniChar **)v22, *(_QWORD *)(v22 + 8));
        v24 = sub_20B88F3EC(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), v23);
        CFRelease(v23);
        v25 = sub_20B9DC0F4((_DWORD *)*a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), 1);
        sub_20B8D154C(v25, v40);
        v26 = v40[0];
        sub_20B954D9C((uint64_t)v9, 16392, (uint64_t)"(%s)", v27, v28, v29, v30, v31, (uint64_t)v40[0]);
        if (v26)
          MEMORY[0x20BD39C80](v26, 0x1000C8077774924);
        CFStringInsert((CFMutableStringRef)Mutable, 0, v24);
        CFRelease(v25);
        CFRelease(v24);
        v21 = 0;
        a2 = (_QWORD *)a2[1];
      }
      while (a2);
    }
    sub_20B8D154C((const __CFString *)Mutable, v40);
    v32 = v40[0];
    sub_20B954D9C((uint64_t)v9, 16392, (uint64_t)", prob: %f surface: %s\n", v33, v34, v35, v36, v37, *(uint64_t *)&a4);
    if (v32)
      MEMORY[0x20BD39C80](v32, 0x1000C8077774924);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void sub_20B9FFDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  sub_20B8A89DC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9FFE54(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD v34[2];
  uint64_t *(*v35)(uint64_t, unint64_t);
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *(*v41)(_QWORD *, _QWORD *);
  void (*v42)(uint64_t);
  _QWORD **v43;
  _QWORD *v44[2];

  if (a2)
  {
    v38 = 0;
    v39 = &v38;
    v40 = 0x4002000000;
    v41 = sub_20B9FEA24;
    v42 = sub_20B9FEA60;
    v44[0] = 0;
    v44[1] = 0;
    v43 = v44;
    v4 = *(_QWORD **)(a1 + 8);
    v5 = v4 + 7;
    v6 = v4[8];
    v32 = a2 + 1;
    if (a2 + 1 < 0x2E8BA2E8BA2E8BA3 * ((v6 - v4[7]) >> 3))
    {
      v34[0] = MEMORY[0x24BDAC760];
      v34[1] = 0x40000000;
      v35 = sub_20BA0020C;
      v36 = &unk_24C46C9D0;
      v37 = &v38;
      do
      {
        v7 = v6 - 24;
        v8 = *(_QWORD *)(v6 - 16);
        if (v8 != v6 - 24)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 16);
            v10 = *(_QWORD *)(v9 + 16);
            if (v10 <= a2)
            {
              v11 = *(uint64_t **)(v9 + 8);
              v12 = *v5;
              v35((uint64_t)v34, v10);
              v13 = *v11;
              *(_QWORD *)(v13 + 8) = v11[1];
              *(_QWORD *)v11[1] = v13;
              --*(_QWORD *)(v12 + 88 * v10 + 40);
              operator delete(v11);
            }
            v8 = *(_QWORD *)(v8 + 8);
          }
          while (v8 != v7);
          v6 = v4[8];
        }
        sub_20BA00270(v5, v6 - 88);
        v6 = v4[8];
      }
      while (0x2E8BA2E8BA2E8BA3 * ((v6 - v4[7]) >> 3) > v32);
      sub_20BA002C8((_QWORD *)(v6 - 64));
      v14 = v4[11];
      v15 = operator new(0x18uLL);
      v15[1] = v6 - 64;
      v15[2] = v14;
      v16 = *(_QWORD *)(v6 - 64);
      *v15 = v16;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(v6 - 64) = v15;
      ++*(_QWORD *)(v6 - 48);
      v17 = (uint64_t *)v39[5];
      v33 = v39 + 6;
      if (v17 != v39 + 6)
      {
        v19 = (uint64_t *)(a1 + 64);
        v18 = *(_QWORD *)(a1 + 64);
        do
        {
          v20 = v17[4];
          if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(a1 + 72) - v18) >> 3) <= v20)
          {
            sub_20BA00328((void **)(a1 + 64), v20 + 1);
            v18 = *v19;
          }
          *(_BYTE *)(v18 + 424 * v20) = 0;
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 88 * v20;
          v22 = v21 + 24;
          v23 = *(_QWORD *)(v21 + 32);
          if (v23 != v21 + 24)
          {
            do
            {
              if (0x21CFB2B78C13521DLL * ((*(_QWORD *)(a1 + 72) - v18) >> 3) <= v20)
              {
                sub_20BA00328((void **)(a1 + 64), v20 + 1);
                v18 = *v19;
              }
              v24 = *(_DWORD *)(**(_QWORD **)(v23 + 16) + 36);
              v25 = v24 > 0x10;
              v26 = (1 << v24) & 0x10081;
              v27 = v25 || v26 == 0;
              if (!v27)
                *(_BYTE *)(v18 + 424 * v20) = 1;
              v23 = *(_QWORD *)(v23 + 8);
            }
            while (v23 != v22);
          }
          v28 = (uint64_t *)v17[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (uint64_t *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (uint64_t *)v17[2];
              v27 = *v29 == (_QWORD)v17;
              v17 = v29;
            }
            while (!v27);
          }
          v17 = v29;
        }
        while (v29 != v33);
      }
    }
    sub_20BA00328((void **)(a1 + 64), a2);
    _Block_object_dispose(&v38, 8);
    sub_20B8292CC((uint64_t)&v43, v44[0]);
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 8);
    sub_20B95515C(v30);
    sub_20BA00270((_QWORD *)(v30 + 56), *(_QWORD *)(v30 + 56));
    sub_20B9F26A8(*(_QWORD **)(a1 + 16));
    v31 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
    *(_BYTE *)(v31 + 16) = 1;
  }
  *(_DWORD *)(a1 + 95) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
}

void sub_20BA001D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _Block_object_dispose(&a17, 8);
  sub_20B8292CC(a10, a23);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA0020C(uint64_t a1, unint64_t a2)
{
  return sub_20BA005C0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, a2);
}

_BYTE *sub_20BA00220(uint64_t a1)
{
  return sub_20B9F37C0(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20BA00228(uint64_t a1)
{
  return a1 + 88;
}

void sub_20BA00230(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BA00270(v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *sub_20BA00270(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;

  v3 = result;
  for (i = result[1]; i != a2; i -= 88)
  {
    sub_20BA002C8((_QWORD *)(i - 24));
    result = sub_20BA002C8((_QWORD *)(i - 64));
  }
  v3[1] = a2;
  return result;
}

_QWORD *sub_20BA002C8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_20BA00328(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0x21CFB2B78C13521DLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[424 * a2];
  }
  else
  {
    v8 = a1[2];
    if (0x21CFB2B78C13521DLL * ((v8 - v4) >> 3) >= v7)
    {
      v16 = &v4[424 * v7];
      do
      {
        *v4 = 0;
        *((_QWORD *)v4 + 51) = 0;
        *((_QWORD *)v4 + 52) = 0x7FEFFFFFFFFFFFFFLL;
        memset_pattern16(v4 + 8, &unk_20BA60460, 0x190uLL);
        v4 += 424;
      }
      while (v4 != v16);
      a1[1] = v16;
    }
    else
    {
      if (a2 > 0x9A90E7D95BC609)
        sub_20B80CDD8();
      v9 = 0x21CFB2B78C13521DLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x4D4873ECADE304)
        v11 = 0x9A90E7D95BC609;
      else
        v11 = v10;
      if (v11 > 0x9A90E7D95BC609)
        sub_20B800BC0();
      v12 = (char *)operator new(424 * v11);
      v13 = &v12[424 * v6];
      v14 = &v12[424 * a2];
      v15 = v13;
      do
      {
        *v15 = 0;
        *((_QWORD *)v15 + 51) = 0;
        *((_QWORD *)v15 + 52) = 0x7FEFFFFFFFFFFFFFLL;
        memset_pattern16(v15 + 8, &unk_20BA60460, 0x190uLL);
        v15 += 424;
      }
      while (v15 != v14);
      if (v4 != v5)
      {
        do
        {
          v4 -= 424;
          v13 -= 424;
          memcpy(v13, v4, 0x1A8uLL);
        }
        while (v4 != v5);
        v4 = v5;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = &v12[424 * v11];
      if (v4)
        operator delete(v4);
    }
  }
}

uint64_t sub_20BA0050C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20BA00578((uint64_t)v4, v4, (_QWORD *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  sub_20BA00578(a1 + 64, (uint64_t *)(a1 + 64), (_QWORD *)(a2 + 64));
  return a1;
}

uint64_t sub_20BA00578(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t *sub_20BA005C0(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = sub_20B82973C((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t sub_20BA00674(uint64_t a1, __CFDictionary *a2, void *lpsrc, int a4)
{
  uint64_t result;
  uint64_t v8;
  const __CFString *v9;
  const void *v10;
  uint64_t v11;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v8 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 216))(v8), (_DWORD)result))
      {
        if (a4)
        {
          v9 = CFSTR("partialCandidateAccepted");
          v10 = (const void *)*MEMORY[0x24BDBD270];
LABEL_12:
          CFDictionaryAddValue(a2, v9, v10);
          return 1;
        }
        v11 = *(_QWORD *)(a1 + 32);
        if (!v11)
          sub_20B80BB74();
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
        if (result)
        {
          v10 = (const void *)result;
          v9 = CFSTR("acceptedPartialCandidateSyllableLengths");
          goto LABEL_12;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20BA00764(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20BA007B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA00814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t (*v13)(_DWORD *, size_t, _QWORD);
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  char *v20;
  _QWORD v22[4];
  __int16 v23[4112];
  uint64_t v24;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v24 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(v0 + 24);
  v11 = *(_DWORD **)v0;
  if (v10 <= 1)
  {
    v12 = v10 + 0x2000;
    v13 = *(uint64_t (**)(_DWORD *, size_t, _QWORD))(v9 + 32);
    v14 = 8 * v12 + 16;
    if (v13)
    {
      v11 = (_DWORD *)v13(v11, v14, *(_QWORD *)(v9 + 40));
      *(_QWORD *)v9 = v11;
      if (!v11)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v11 = malloc_type_realloc(v11, v14, 0x86994945uLL);
      *(_QWORD *)v9 = v11;
      if (*(_DWORD *)(v9 + 80))
      {
        if (!v11)
          return 0xFFFFFFFFLL;
      }
      else
      {
        *(_DWORD *)(v9 + 80) = 1;
        if (!v11)
          return 0xFFFFFFFFLL;
      }
    }
    *(_QWORD *)(v9 + 8) = v11 + 4;
    if (!*(_QWORD *)(v9 + 32))
    {
      bzero(&v11[2 * *(_QWORD *)(v9 + 24) + 4], 8 * (v12 - *(_QWORD *)(v9 + 24)));
      v11 = *(_DWORD **)v9;
    }
    *(_QWORD *)(v9 + 24) = v12;
  }
  *(_QWORD *)v11 = 0x1074726965;
  v11[2] = 65793;
  *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) = 1;
  *(_DWORD *)(v9 + 16) = 1;
  *(_DWORD *)(v9 + 76) = 0;
  *(_QWORD *)(v9 + 48) = v6;
  *(_QWORD *)(v9 + 56) = v4;
  *(_QWORD *)(v9 + 64) = v2;
  v22[1] = 0;
  v22[2] = v8;
  v22[3] = 0;
  v15 = sub_20BA00A50(v9, v22, (uint64_t)v23);
  *(_DWORD *)(v9 + 72) = 2;
  if ((int)sub_20BA00B1C(v9, 1, v15, v23) < 1)
    return 0xFFFFFFFFLL;
  v16 = *(unsigned int *)(v9 + 16);
  v17 = *(_DWORD **)v9;
  *(_DWORD *)(*(_QWORD *)v9 + 12) = v16;
  if ((unint64_t)(*(_QWORD *)(v9 + 24) + ~v16) <= 0x101)
  {
    v18 = (v16 + 259);
    v19 = *(uint64_t (**)(void))(v9 + 32);
    if (v19)
    {
      v20 = (char *)v19();
      *(_QWORD *)v9 = v20;
    }
    else
    {
      v20 = (char *)malloc_type_realloc(v17, 8 * v18 + 16, 0x86994945uLL);
      *(_QWORD *)v9 = v20;
      if (!*(_DWORD *)(v9 + 80))
        *(_DWORD *)(v9 + 80) = 1;
    }
    if (v20)
    {
      *(_QWORD *)(v9 + 8) = v20 + 16;
      if (!*(_QWORD *)(v9 + 32))
        bzero(&v20[8 * *(_QWORD *)(v9 + 24) + 16], 8 * (v18 - *(_QWORD *)(v9 + 24)));
      *(_QWORD *)(v9 + 24) = v18;
    }
    else
    {
      *(_DWORD *)(v9 + 76) = -1;
    }
  }
  return *(unsigned int *)(v9 + 76);
}

uint64_t sub_20BA00A50(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0)
    return 0;
  v3 = a2[1];
  v4 = a2[2];
  if (v3 >= v4)
    return 0;
  result = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = 0xFFFFLL;
  do
  {
    v9 = *(_QWORD *)(v7 + 8 * v3);
    v10 = a2[3];
    if (v9 >= v10)
    {
      if (v9 > v10)
        v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v3) + v10) + 1;
      else
        v11 = 0;
      if ((__int16)v8 > (int)v11)
      {
        result = 0;
        *(_DWORD *)(a1 + 76) = -1;
        return result;
      }
      if ((_DWORD)v11 != (__int16)v8)
      {
        if (result)
          *(_QWORD *)(a3 + 32 * result - 16) = v3;
        v12 = a3 + 32 * result;
        *(_WORD *)v12 = v11;
        *(_QWORD *)(v12 + 8) = v3;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = v10 + 1;
        ++result;
        v4 = a2[2];
      }
    }
    else
    {
      v11 = v8;
    }
    ++v3;
    v8 = v11;
  }
  while (v3 < v4);
  if (result)
    *(_QWORD *)(a3 + 32 * result - 16) = v4;
  return result;
}

uint64_t sub_20BA00B1C(uint64_t a1, int a2, unint64_t a3, __int16 *a4)
{
  __int16 *v4;
  unint64_t v5;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  __int16 *v14;
  uint64_t (*v15)(void *, size_t, _QWORD);
  void *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 *v22;
  int v23;
  __int16 *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int16 *v36;

  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0)
    return 0;
  v4 = a4;
  v5 = a3;
  v8 = 0;
  v9 = a3 - 1;
  v36 = &a4[16 * a3 - 16];
  v10 = *a4;
  v11 = *v36 - v10;
  if (*(_DWORD *)(a1 + 72) <= (v10 + 1))
    v12 = v10 + 1;
  else
    v12 = *(_DWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = a4 + 16;
  while (1)
  {
    if (v11 + (unint64_t)v12 >= v13)
    {
      v13 += 0x2000;
      v15 = *(uint64_t (**)(void *, size_t, _QWORD))(a1 + 32);
      v16 = *(void **)a1;
      v17 = 8 * v13 + 16;
      if (v15)
      {
        v18 = (char *)v15(v16, v17, *(_QWORD *)(a1 + 40));
        *(_QWORD *)a1 = v18;
      }
      else
      {
        v18 = (char *)malloc_type_realloc(v16, v17, 0x86994945uLL);
        *(_QWORD *)a1 = v18;
        if (!*(_DWORD *)(a1 + 80))
          *(_DWORD *)(a1 + 80) = 1;
      }
      if (!v18)
      {
        v34 = -1;
LABEL_39:
        v20 = 0;
        *(_DWORD *)(a1 + 76) = v34;
        return v20;
      }
      *(_QWORD *)(a1 + 8) = v18 + 16;
      if (!*(_QWORD *)(a1 + 32))
        bzero(&v18[8 * *(_QWORD *)(a1 + 24) + 16], 8 * (v13 - *(_QWORD *)(a1 + 24)));
      *(_QWORD *)(a1 + 24) = v13;
    }
    v19 = *(_QWORD *)(a1 + 8);
    if (!*(_DWORD *)(v19 + 8 * v12 + 4))
      break;
LABEL_23:
    ++v12;
  }
  if (!v8)
    *(_DWORD *)(a1 + 72) = v12 + 1;
  v20 = v12 - *v4;
  v21 = v9;
  v22 = v14;
  if (v5 >= 2)
  {
    while (1)
    {
      v23 = *v22;
      v22 += 16;
      if (*(_DWORD *)(v19 + 8 * ((int)v20 + v23) + 4))
        break;
      if (!--v21)
        goto LABEL_24;
    }
    v8 = 1;
    goto LABEL_23;
  }
LABEL_24:
  if (v5)
  {
    v24 = v4;
    v25 = v5;
    do
    {
      v26 = *v24;
      v24 += 16;
      *(_DWORD *)(v19 + 8 * ((int)v20 + v26) + 4) = a2;
      --v25;
    }
    while (v25);
  }
  v27 = v20 + *v36;
  if (*(_DWORD *)(a1 + 16) < v27)
    *(_DWORD *)(a1 + 16) = v27;
  for (; v5; --v5)
  {
    v28 = *v4;
    v29 = malloc_type_malloc(0x2020uLL, 0x100004095D96C66uLL);
    if (!v29)
      __assert_rtn("__insert_nodes", "trie_build.cpp", 112, "new_children");
    v30 = v29;
    v31 = (v20 + v28);
    v32 = sub_20BA00A50(a1, v4, (uint64_t)v29);
    if (v32)
    {
      v33 = sub_20BA00B1C(a1, v31, v32, v30);
      if (v33 <= 0)
      {
        free(v30);
        v34 = -2;
        goto LABEL_39;
      }
    }
    else
    {
      v33 = -*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * *((_QWORD *)v4 + 1));
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v31) = v33;
    free(v30);
    v4 += 16;
  }
  return v20;
}

uint64_t sub_20BA00DA8(uint64_t a1)
{
  uint64_t v2;
  _WORD *v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 96) = &off_24C4674A0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = &off_24C4674A0;
  v2 = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = (_WORD *)(a1 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_20B8B3F30(a1 + 96, "UTF-8", "UTF-16LE");
  sub_20B8B3F30(v2, "UTF-16LE", "UTF-8");
  if (*(char *)(a1 + 159) < 0)
  {
    *(_QWORD *)(a1 + 144) = 1;
    v3 = *(_WORD **)(a1 + 136);
  }
  else
  {
    *(_BYTE *)(a1 + 159) = 1;
  }
  *v3 = 9;
  return a1;
}

void sub_20BA00E88(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;

  if (*(char *)(v1 + 159) < 0)
    operator delete(*v5);
  sub_20B8B4180(v3);
  sub_20B8B4180(v2);
  v7 = *(void **)(v1 + 64);
  if (v7)
  {
    *(_QWORD *)(v1 + 72) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 48) = v8;
    operator delete(v8);
  }
  sub_20B8CECB0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA00EDC(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_20BA00F40(a1);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  sub_20B8B4180((_QWORD *)(a1 + 112));
  sub_20B8B4180((_QWORD *)(a1 + 96));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  return sub_20B8CECB0(a1);
}

uint64_t sub_20BA00F40(uint64_t result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = (_QWORD *)result;
  v2 = *(uint64_t **)(result + 40);
  v3 = *(uint64_t **)(result + 48);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        if (*(char *)(v4 + 71) < 0)
          operator delete(*(void **)(v4 + 48));
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        result = MEMORY[0x20BD39CB0](v4, 0x1012C405A3E5557);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (uint64_t *)v1[5];
  }
  v1[6] = v2;
  v5 = (uint64_t *)v1[8];
  v6 = (uint64_t *)v1[9];
  if (v5 != v6)
  {
    do
    {
      v7 = *v5;
      if (*v5)
      {
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        result = MEMORY[0x20BD39CB0](v7, 0x1012C40A71235E1);
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = (uint64_t *)v1[8];
  }
  v1[9] = v5;
  return result;
}

uint64_t sub_20BA01014(uint64_t a1, CFTypeRef cf, const __CFString *a3)
{
  CFTypeRef v5;
  CFStringRef Copy;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C462F08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C462FE8;
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  if (a3)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a3);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 40) = Copy;
  return a1;
}

_QWORD *sub_20BA0108C(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = off_24C462F08;
  a1[3] = &unk_24C462FE8;
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_20BA010E0(_QWORD *a1)
{
  sub_20BA0108C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA01104(uint64_t a1, CFStringRef theString)
{
  const __CFString *v3;
  CFStringRef Copy;

  v3 = *(const __CFString **)(a1 + 40);
  if (v3 != theString)
  {
    if (v3)
      CFRelease(v3);
    if (theString)
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
    else
      Copy = 0;
    *(_QWORD *)(a1 + 40) = Copy;
  }
  return 1;
}

uint64_t sub_20BA01160(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  const __CFString *v4;
  CFStringRef Copy;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C462F08;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = &unk_24C462FE8;
  v3 = *(CFTypeRef *)(a1 + 8);
  if (v3)
    v3 = CFRetain(v3);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(const __CFString **)(a1 + 16);
  if (v4)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v4);
  else
    Copy = 0;
  *(_QWORD *)(v2 + 40) = Copy;
  return v2;
}

void sub_20BA011E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA0120C(_QWORD *a1)
{
  return sub_20BA01160((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20BA0121C()
{
  return 0;
}

uint64_t sub_20BA01224()
{
  return 0;
}

uint64_t sub_20BA0122C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_20BA01234()
{
  return 0;
}

uint64_t sub_20BA0123C()
{
  return 0;
}

uint64_t sub_20BA01248()
{
  return 6;
}

uint64_t sub_20BA01250()
{
  return 0;
}

uint64_t sub_20BA01258()
{
  return 0;
}

uint64_t sub_20BA01260()
{
  return 0;
}

uint64_t sub_20BA01268()
{
  return 0;
}

uint64_t sub_20BA01270()
{
  return 0;
}

uint64_t sub_20BA01278()
{
  return 0;
}

uint64_t sub_20BA01280(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_20BA01288()
{
  return 0;
}

uint64_t sub_20BA01290()
{
  return 0;
}

uint64_t sub_20BA01298()
{
  return 0;
}

void *MecabraSyllablesCreateWithString(int a1, CFStringRef theString)
{
  void *v4;
  int v5;

  if (!theString || CFStringGetLength(theString) > 299)
    return 0;
  switch(a1)
  {
    case 2:
      v5 = 0;
      goto LABEL_10;
    case 5:
      v5 = 2;
      goto LABEL_10;
    case 4:
      v5 = 1;
LABEL_10:
      v4 = malloc_type_malloc(0x4D8uLL, 0x10200404C7DE042uLL);
      sub_20B8EE29C((uint64_t)v4);
      sub_20B8EE370(theString, (uint64_t)v4, v5);
      return v4;
  }
  return 0;
}

uint64_t MecabraSyllablesGetSyllableCount(uint64_t result)
{
  if (result)
    return *(int *)(result + 32);
  return result;
}

const void *MecabraSyllablesGetSyllableAtIndex(uint64_t a1, CFIndex a2)
{
  if (!a1 || a2 < 0 || *(int *)(a1 + 32) <= a2)
    return 0;
  else
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), a2);
}

uint64_t MecabraSyllablesGetSyllableTypeAtIndex(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;

  if (result)
  {
    v2 = result;
    result = 0;
    if ((a2 & 0x8000000000000000) == 0 && *(int *)(v2 + 32) > a2)
    {
      v3 = *(_WORD *)(v2 + 2 * a2 + 36);
      if ((v3 & 0x20) != 0)
      {
        return 3;
      }
      else if ((v3 & 2) != 0)
      {
        return 1;
      }
      else if ((v3 & 4) != 0)
      {
        return 2;
      }
      else
      {
        return 3;
      }
    }
  }
  return result;
}

void MecabraSyllablesRelease(void *a1)
{
  if (a1)
  {
    sub_20B8EE31C((uint64_t)a1);
    free(a1);
  }
}

void sub_20BA013EC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;
  double v7;
  double v8;
  long double v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v6)
  {
    sub_20BA01614((char **)a1, a2, a3, 0.0, 0.0);
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(char **)(a1 + 32);
    if ((unint64_t)v16 >= v15)
    {
      v23 = *(char **)(a1 + 24);
      v24 = (v16 - v23) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        sub_20B80CDD8();
      v25 = v15 - (_QWORD)v23;
      v26 = (uint64_t)(v15 - (_QWORD)v23) >> 2;
      if (v26 <= v24 + 1)
        v26 = v24 + 1;
      if (v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        v28 = (char *)sub_20B800BE8(a1 + 40, v27);
        v23 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
      }
      else
      {
        v28 = 0;
      }
      v32 = &v28[8 * v24];
      v33 = &v28[8 * v27];
      *(_QWORD *)v32 = 0;
      v17 = v32 + 8;
      while (v16 != v23)
      {
        v34 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v32 - 1) = v34;
        v32 -= 8;
      }
      *(_QWORD *)(a1 + 24) = v32;
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v33;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v16 = 0;
      v17 = v16 + 8;
    }
    *(_QWORD *)(a1 + 32) = v17;
  }
  else
  {
    v7 = *(double *)(v6 - 16);
    v8 = *(double *)(a2 + 48) - *(double *)(v6 - 24);
    v9 = hypot(*(double *)(a2 + 32) - *(double *)(v6 - 40), *(double *)(a2 + 40) - *(double *)(v6 - 32));
    sub_20BA01614((char **)a1, a2, a3, v8, v7 + v9);
    v10 = *(char **)(a1 + 24);
    v11 = *(_QWORD *)&v10[0x6666666666666668 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) - 16]
        + *(unsigned __int8 *)(a2 + 68);
    v12 = *(char **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v12 >= v13)
    {
      v18 = (v12 - v10) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        sub_20B80CDD8();
      v19 = v13 - (_QWORD)v10;
      v20 = (uint64_t)(v13 - (_QWORD)v10) >> 2;
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      if (v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
      {
        v22 = (char *)sub_20B800BE8(a1 + 40, v21);
        v10 = *(char **)(a1 + 24);
        v12 = *(char **)(a1 + 32);
      }
      else
      {
        v22 = 0;
      }
      v29 = &v22[8 * v18];
      v30 = &v22[8 * v21];
      *(_QWORD *)v29 = v11;
      v14 = v29 + 8;
      while (v12 != v10)
      {
        v31 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v30;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v12 = v11;
      v14 = v12 + 8;
    }
    *(_QWORD *)(a1 + 32) = v14;
  }
}

void sub_20BA01614(char **a1, uint64_t a2, __int16 a3, double a4, double a5)
{
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;

  v11 = a1[1];
  v10 = (unint64_t)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    v13 = *a1;
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a1) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0x666666666666666)
      sub_20B80CDD8();
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (_QWORD)v13) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x333333333333333)
      v17 = 0x666666666666666;
    else
      v17 = v15;
    if (v17 > 0x666666666666666)
      sub_20B800BC0();
    v18 = 5 * v17;
    v19 = (char *)operator new(40 * v17);
    v20 = &v19[40 * v14];
    *(_OWORD *)v20 = *(_OWORD *)(a2 + 32);
    *((double *)v20 + 2) = a4;
    *((double *)v20 + 3) = a5;
    v20[32] = *(_BYTE *)(a2 + 68);
    *((_WORD *)v20 + 17) = a3;
    *((_DWORD *)v20 + 9) = *(_DWORD *)(a2 + 64);
    v12 = v20 + 40;
    if (v11 != v13)
    {
      do
      {
        v21 = *(_OWORD *)(v11 - 40);
        v22 = *(_OWORD *)(v11 - 24);
        *((_QWORD *)v20 - 1) = *((_QWORD *)v11 - 1);
        *(_OWORD *)(v20 - 24) = v22;
        *(_OWORD *)(v20 - 40) = v21;
        v20 -= 40;
        v11 -= 40;
      }
      while (v11 != v13);
      v11 = v13;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v19[8 * v18];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)(a2 + 32);
    *((double *)v11 + 2) = a4;
    *((double *)v11 + 3) = a5;
    v11[32] = *(_BYTE *)(a2 + 68);
    *((_WORD *)v11 + 17) = a3;
    *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 64);
    v12 = v11 + 40;
  }
  a1[1] = v12;
}

BOOL sub_20BA01784(uint64_t a1, CFStringRef theString)
{
  int *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t i;
  CFIndex Length;
  CFIndex v11;
  CFIndex v12;
  UniChar CharacterAtIndex;
  _BOOL4 v14;

  if (!theString || !CFStringGetLength(theString) || !sub_20B8D0AE4(theString))
    return 0;
  if ((*(_BYTE *)(a1 + 4) & 6) == 0)
  {
    Length = CFStringGetLength(theString);
    v11 = Length - 1;
    if (Length < 1)
    {
      return 1;
    }
    else
    {
      v12 = 0;
      do
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v12);
        v14 = sub_20BA018B0(CharacterAtIndex);
        v7 = v14;
        if (!v14)
          break;
      }
      while (v11 != v12++);
    }
    return v7;
  }
  v4 = (int *)MecabraSyllablesCreateWithString(*(_DWORD *)a1, theString);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = v4[8];
  if ((int)v6 < 1)
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    for (i = 0; i != v6; v7 = i >= v6)
    {
      if ((i >= v6 || (*((_WORD *)v4 + i + 18) & 0x22) != 2) && (i < v6 - 1 || (*(_BYTE *)(a1 + 4) & 4) == 0))
        break;
      ++i;
    }
  }
  sub_20B8EE31C((uint64_t)v4);
  free(v5);
  return v7;
}

BOOL sub_20BA018B0(UniChar theChar)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  v2 = atomic_load(&qword_25472D3A8);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&qword_25472D3A8, &v5, (void (__cdecl *)(void *))sub_20BA01928);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_25472D3A0, theChar) != 0;
}

void sub_20BA01928()
{
  CFRange v0;
  CFRange v1;
  CFRange v2;

  qword_25472D3A0 = (uint64_t)CFCharacterSetCreateMutable(0);
  v0.location = 97;
  v0.length = 26;
  CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472D3A0, v0);
  v1.location = 65;
  v1.length = 26;
  CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472D3A0, v1);
  v2.location = 39;
  v2.length = 1;
  CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472D3A0, v2);
}

uint64_t sub_20BA01978@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  double *v19;
  unsigned __int16 **v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  unsigned __int16 **v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 **v28;
  int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  __int16 *v42;
  _QWORD *v44;
  uint64_t (**v45)();
  unint64_t v46;
  uint64_t v47;
  uint64_t (***v48)();
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load((unsigned __int8 *)&qword_25472C130);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25472C130))
  {
    v44 = (_QWORD *)operator new();
    *v44 = &unk_24C465AD0;
    qword_25472C198 = (uint64_t)v44;
    qword_25472C190 = (uint64_t)off_24C465B30;
    __cxa_atexit((void (*)(void *))sub_20BA01F38, &qword_25472C190, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C130);
  }
  if ((unint64_t)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) < 5)
    v6 = 0;
  else
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) - 4;
  sub_20B9B55E0((uint64_t)a1, a2);
  v7 = 0;
  v8 = (unint64_t)&unk_25472C000;
  while ((*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) > v7)
  {
    v45 = &off_24C459080;
    v46 = v7;
    v47 = a2;
    v48 = &v45;
    sub_20BA05004(&qword_25472C190, (uint64_t)a1, (uint64_t)&v45, 0, v7);
    v9 = v48;
    if (v48 == &v45)
    {
      v9 = &v45;
      v10 = 4;
      goto LABEL_11;
    }
    if (v48)
    {
      v10 = 5;
LABEL_11:
      (*v9)[v10]();
    }
    v11 = atomic_load((unsigned __int8 *)&qword_25472C140);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25472C140))
    {
      qword_25472C138 = (uint64_t)L"'aeinouyxa";
      __cxa_guard_release(&qword_25472C140);
    }
    if ((*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) - 1 > v7
      && (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 16))(a1, v7 + 1))
    {
      v12 = 0;
      while (1)
      {
        v13 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*a1 + 48))(a1, v7 + 1, v12);
        v14 = 0;
        v15 = qword_25472C138 + 16;
        while (*(unsigned __int16 *)(qword_25472C138 + v14) != *v13)
        {
          v14 += 2;
          if (v14 == 16)
            goto LABEL_21;
        }
        v15 = qword_25472C138 + v14;
LABEL_21:
        if (v15 - qword_25472C138 == 16)
          break;
        if (++v12 >= (unint64_t)(*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 16))(a1, v7 + 1))
          goto LABEL_23;
      }
      v18 = a1[1] + 24 * v7;
      v19 = *(double **)v18;
      v20 = *(unsigned __int16 ***)(v18 + 8);
      while (v19 != (double *)v20)
      {
        v21 = *((char *)v19 + 23);
        if (v21 < 0)
        {
          if (*((_QWORD *)v19 + 1) == 1)
          {
            v22 = **(unsigned __int16 **)v19;
            goto LABEL_37;
          }
        }
        else if (v21 == 1)
        {
          v22 = *(unsigned __int16 *)v19;
LABEL_37:
          if (v22 == 110)
          {
            v2 = v2 & 0xFFFFFFFF00000000 | 0xFFFFFF;
            sub_20B8B6470(a2, v7, &unk_20BA6050A, 1uLL, *((_QWORD *)v19 + 4), 110, v2, -1, v19[3], 255);
          }
        }
        v19 += 6;
        continue;
      }
    }
LABEL_23:
    if (v6 <= v7)
    {
      v45 = &off_24C4590D8;
      v46 = v7;
      v47 = a2;
      v48 = &v45;
      sub_20B90450C((uint64_t)&qword_25472C190, (uint64_t)a1, v7, (uint64_t)&v45);
      v16 = v48;
      if (v48 == &v45)
      {
        v16 = &v45;
        v17 = 4;
      }
      else
      {
        if (!v48)
          goto LABEL_29;
        v17 = 5;
      }
      (*v16)[v17]();
    }
LABEL_29:
    ++v7;
  }
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v24 = result - 2;
  if (result - 2 >= 0)
  {
LABEL_43:
    v25 = (unsigned __int16 **)(a1[1] + 24 * v24);
    v27 = *v25;
    v26 = v25[1];
    if (*v25 == v26)
      goto LABEL_80;
    v28 = v25 + 3;
    while (1)
    {
      v29 = *((unsigned __int8 *)v27 + 23);
      if (*((char *)v27 + 23) < 0)
      {
        if (*((_QWORD *)v27 + 1) != 1)
          goto LABEL_79;
        v30 = *(unsigned __int16 **)v27;
      }
      else
      {
        v30 = v27;
        if (v29 != 1)
          goto LABEL_79;
      }
      v31 = 0;
      v32 = *v30;
      while ((unsigned __int16)aBcdfghjklmpqrs_1[v31] != v32)
      {
        if (++v31 == 20)
        {
          v33 = L"'aeinouyxa";
          goto LABEL_55;
        }
      }
      v33 = &aBcdfghjklmpqrs_1[v31];
LABEL_55:
      if ((char *)v33 - (char *)L"bcdfghjklmpqrstvwxyz'aeinouyxa" == 40)
        goto LABEL_79;
      v34 = *v28;
      v35 = v28[1];
      if (*v28 == v35)
        goto LABEL_79;
      v36 = (v29 & 0x80u) == 0 ? *((unsigned __int8 *)v27 + 23) : *((_QWORD *)v27 + 1);
      while (1)
      {
        v37 = *((unsigned __int8 *)v34 + 23);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = *((_QWORD *)v34 + 1);
        if (v37 == v36)
          break;
LABEL_74:
        v34 += 24;
        if (v34 == v35)
          goto LABEL_79;
      }
      if (v36)
        break;
LABEL_76:
      v42 = (__int16 *)v27;
      if ((v29 & 0x80) != 0)
        v42 = *(__int16 **)v27;
      v8 = v8 & 0xFFFFFFFF00000000 | 0xFFFFFF;
      result = sub_20B8B6470(a2, v24, &unk_20BA60506, 1uLL, *((_QWORD *)v27 + 4), *v42, v8, -1, *((double *)v27 + 3), 255);
LABEL_79:
      v27 += 24;
      if (v27 == v26)
      {
LABEL_80:
        if (v24-- <= 0)
          return result;
        goto LABEL_43;
      }
    }
    if (v38 >= 0)
      v39 = v34;
    else
      v39 = *(unsigned __int16 **)v34;
    if ((v29 & 0x80u) == 0)
      v40 = v27;
    else
      v40 = *(unsigned __int16 **)v27;
    v41 = v36;
    while (*v40 == *v39)
    {
      ++v39;
      ++v40;
      if (!--v41)
        goto LABEL_76;
    }
    goto LABEL_74;
  }
  return result;
}

void sub_20BA01EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C130);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA01F38(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_24C461D28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  return a1;
}

uint64_t sub_20BA01F78@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _WORD __src[5];

  *(_QWORD *)a3 = off_24C460C88;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (a1)
  {
    sub_20B9B5A9C(a3 + 8, a1);
    v6 = 0;
    do
      sub_20B8B6470(a3, v6++, __src, 1uLL, 1, 0, 0xFFFFFF, -1, 0.0, 255);
    while (a1 != v6);
    result = sub_20B9B6AAC((_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(__int128 ***)(a2 + 8), *(__int128 ***)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    *(_BYTE *)(a3 + 32) = 1;
  }
  return result;
}

void sub_20BA02060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *v2 = v3 + 16;
  sub_20B8B66F8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20BA02088(int a1, int a2, int a3, char a4)
{
  if ((a4 & 0x20) != 0)
    return (uint64_t **)sub_20BA02098(a1, a2, a3, a4);
  else
    return sub_20BA0225C(a1, a4);
}

_QWORD *sub_20BA02098(int a1, int a2, int a3, char a4)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v4 = atomic_load((unsigned __int8 *)&qword_25472D3C8);
  if ((v4 & 1) == 0)
  {
    v17 = a3;
    v19 = a1;
    v9 = a2;
    v15 = a4;
    v10 = __cxa_guard_acquire(&qword_25472D3C8);
    a4 = v15;
    a3 = v17;
    a2 = v9;
    v11 = v10;
    a1 = v19;
    if (v11)
    {
      v22 = 6553706;
      sub_20BA03A34(qword_25472D3B0, &v22, 2);
      __cxa_atexit((void (*)(void *))sub_20B8F936C, qword_25472D3B0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472D3C8);
      a3 = v17;
      a1 = v19;
      a2 = v9;
      a4 = v15;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25472D3E8);
  if ((v5 & 1) == 0)
  {
    v18 = a3;
    v20 = a1;
    v12 = a2;
    v16 = a4;
    v13 = __cxa_guard_acquire(&qword_25472D3E8);
    a4 = v16;
    a3 = v18;
    a2 = v12;
    v14 = v13;
    a1 = v20;
    if (v14)
    {
      v21 = 6553722;
      sub_20BA03A34(qword_25472D3D0, &v21, 2);
      __cxa_atexit((void (*)(void *))sub_20B8F936C, qword_25472D3D0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472D3E8);
      a3 = v18;
      a1 = v20;
      a2 = v12;
      a4 = v16;
    }
  }
  if ((a4 & 0x10) == 0)
    return 0;
  if (a1 == 106 && a2 != 106 && a3 == 105)
    return qword_25472D3B0;
  if (a3 == 117 && a2 != 122 && a1 == 122)
    return qword_25472D3D0;
  else
    return 0;
}

void sub_20BA02234(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D3E8);
  _Unwind_Resume(a1);
}

uint64_t **sub_20BA0225C(int a1, int a2)
{
  char v2;
  unsigned __int16 v3;
  int v4;
  __guard *v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t **v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t **v14;
  unsigned __int8 v15;
  uint64_t **v16;
  uint64_t v18;
  void *v19;
  uint64_t j;
  void *v21;
  uint64_t i;
  void *v23;
  int v24;
  void *__p;
  _BYTE *v26;
  int v27;
  void *v28;
  _BYTE *v29;
  int v30;
  void *v31;
  _BYTE *v32;
  int v33;
  void *v34;
  _BYTE *v35;
  int v36;
  void *v37;
  _BYTE *v38;
  int v39;
  void *v40;
  _BYTE *v41;
  int v42;
  void *v43;
  _BYTE *v44;
  int v45;
  void *v46;
  _BYTE *v47;
  int v48;
  void *v49;
  _BYTE *v50;
  int v51;
  void *v52;
  _BYTE *v53;
  int v54;
  void *v55;
  _BYTE *v56;
  int v57;
  void *v58;
  _BYTE *v59;
  int v60;
  void *v61;
  _BYTE *v62;
  int v63;
  void *v64;
  _BYTE *v65;
  int v66;
  void *v67;
  _BYTE *v68;
  int v69;
  void *v70;
  _BYTE *v71;
  int v72;
  void *v73;
  _BYTE *v74;
  int v75;
  int v76;
  _WORD v77[3];
  _BYTE v78[6];
  _WORD v79[3];
  _BYTE v80[6];
  _WORD v81[3];
  void *v82;
  _BYTE *v83;
  void *v84;
  _BYTE *v85;
  void *v86;
  _BYTE *v87;
  void *v88;
  _BYTE *v89;
  void *v90;
  _BYTE *v91;
  void *v92;
  _BYTE *v93;
  void *v94;
  uint64_t v95[2];
  _DWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  _QWORD v125[3];
  __int16 v126;
  _QWORD v127[3];
  __int16 v128;
  _QWORD v129[3];
  __int16 v130;
  _QWORD v131[3];
  __int16 v132;
  _QWORD v133[3];
  __int16 v134;
  _QWORD v135[3];
  __int16 v136;
  _QWORD v137[3];
  __int16 v138;
  _QWORD v139[3];
  __int16 v140;
  _QWORD v141[3];
  __int16 v142;
  _QWORD v143[3];
  __int16 v144;
  _QWORD v145[3];
  __int16 v146;
  _QWORD v147[3];
  __int16 v148;
  _QWORD v149[3];
  __int16 v150;
  _QWORD v151[3];
  __int16 v152;
  _QWORD v153[3];
  __int16 v154;
  _QWORD v155[3];
  __int16 v156;
  _QWORD v157[4];

  v157[3] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v2 = a2;
  if ((a2 & 0x1E) == 0)
    return 0;
  v3 = a1;
  v4 = a2 & 0xC;
  if (a1 != 12358)
  {
    if (a1 == 12388)
    {
      if ((a2 & 0xA) != 0 && (a2 & 0xC) != 0)
      {
        v5 = &qword_25472C148;
        v6 = atomic_load((unsigned __int8 *)&qword_25472C148);
        v7 = qword_25472C1A0;
        if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C148))
        {
          qmemcpy(v96, "d0e0c0", 6);
          sub_20BA03A34(qword_25472C1A0, v96, 3);
          v7 = qword_25472C1A0;
LABEL_30:
          __cxa_atexit((void (*)(void *))sub_20B8F936C, v7, &dword_20B7F7000);
          __cxa_guard_release(v5);
          return (uint64_t **)v7;
        }
        return (uint64_t **)v7;
      }
      if ((a2 & 0xA) != 0)
      {
        v5 = &qword_25472C150;
        v11 = atomic_load((unsigned __int8 *)&qword_25472C150);
        v7 = qword_25472C1B8;
        if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25472C150))
        {
          v96[0] = 811937892;
          sub_20BA03A34(qword_25472C1B8, v96, 2);
          v7 = qword_25472C1B8;
          goto LABEL_30;
        }
        return (uint64_t **)v7;
      }
      if ((a2 & 0xC) != 0)
      {
        sub_20BA038F4();
        return (uint64_t **)qword_25472C1D0;
      }
      return 0;
    }
    if ((a2 & 0xA) != 0)
    {
      v9 = atomic_load((unsigned __int8 *)&qword_25472C178);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25472C178))
      {
        qmemcpy(v81, "o0p0q0", sizeof(v81));
        sub_20BA03A34(&v94, v81, 3);
        LOWORD(v96[0]) = 12399;
        v97 = 0;
        v99 = 0;
        v98 = 0;
        sub_20BA05EE4(&v97, v94, v95[0], (v95[0] - (uint64_t)v94) >> 1);
        qmemcpy(v80, "r0s0t0", sizeof(v80));
        sub_20BA03A34(&v92, v80, 3);
        v100 = 12402;
        v101 = 0;
        v102 = 0;
        v103 = 0;
        sub_20BA05EE4(&v101, v92, (uint64_t)v93, (v93 - (_BYTE *)v92) >> 1);
        qmemcpy(v79, "u0v0w0", sizeof(v79));
        sub_20BA03A34(&v90, v79, 3);
        v104 = 12405;
        v106 = 0;
        v107 = 0;
        v105 = 0;
        sub_20BA05EE4(&v105, v90, (uint64_t)v91, (v91 - (_BYTE *)v90) >> 1);
        qmemcpy(v78, "x0y0z0", sizeof(v78));
        sub_20BA03A34(&v88, v78, 3);
        v108 = 12408;
        v110 = 0;
        v111 = 0;
        v109 = 0;
        sub_20BA05EE4(&v109, v88, (uint64_t)v89, (v89 - (_BYTE *)v88) >> 1);
        qmemcpy(v77, "{0|0}0", sizeof(v77));
        sub_20BA03A34(&v86, v77, 3);
        v112 = 12411;
        v114 = 0;
        v115 = 0;
        v113 = 0;
        sub_20BA05EE4(&v113, v86, (uint64_t)v87, (v87 - (_BYTE *)v86) >> 1);
        v76 = 810299467;
        sub_20BA03A34(&v84, &v76, 2);
        v116 = 12363;
        v118 = 0;
        v119 = 0;
        v117 = 0;
        sub_20BA05EE4(&v117, v84, (uint64_t)v85, (v85 - (_BYTE *)v84) >> 1);
        v75 = 810430541;
        sub_20BA03A34(&v82, &v75, 2);
        v120 = 12365;
        v122 = 0;
        v123 = 0;
        v121 = 0;
        sub_20BA05EE4(&v121, v82, (uint64_t)v83, (v83 - (_BYTE *)v82) >> 1);
        v72 = 810561615;
        sub_20BA03A34(&v73, &v72, 2);
        v124 = 12367;
        memset(v125, 0, sizeof(v125));
        sub_20BA05EE4(v125, v73, (uint64_t)v74, (v74 - (_BYTE *)v73) >> 1);
        v69 = 810692689;
        sub_20BA03A34(&v70, &v69, 2);
        v126 = 12369;
        memset(v127, 0, sizeof(v127));
        sub_20BA05EE4(v127, v70, (uint64_t)v71, (v71 - (_BYTE *)v70) >> 1);
        v66 = 810823763;
        sub_20BA03A34(&v67, &v66, 2);
        v128 = 12371;
        memset(v129, 0, sizeof(v129));
        sub_20BA05EE4(v129, v67, (uint64_t)v68, (v68 - (_BYTE *)v67) >> 1);
        v63 = 810954837;
        sub_20BA03A34(&v64, &v63, 2);
        v130 = 12373;
        memset(v131, 0, sizeof(v131));
        sub_20BA05EE4(v131, v64, (uint64_t)v65, (v65 - (_BYTE *)v64) >> 1);
        v60 = 811085911;
        sub_20BA03A34(&v61, &v60, 2);
        v132 = 12375;
        memset(v133, 0, sizeof(v133));
        sub_20BA05EE4(v133, v61, (uint64_t)v62, (v62 - (_BYTE *)v61) >> 1);
        v57 = 811216985;
        sub_20BA03A34(&v58, &v57, 2);
        v134 = 12377;
        memset(v135, 0, sizeof(v135));
        sub_20BA05EE4(v135, v58, (uint64_t)v59, (v59 - (_BYTE *)v58) >> 1);
        v54 = 811348059;
        sub_20BA03A34(&v55, &v54, 2);
        v136 = 12379;
        memset(v137, 0, sizeof(v137));
        sub_20BA05EE4(v137, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 1);
        v51 = 811479133;
        sub_20BA03A34(&v52, &v51, 2);
        v138 = 12381;
        memset(v139, 0, sizeof(v139));
        sub_20BA05EE4(v139, v52, (uint64_t)v53, (v53 - (_BYTE *)v52) >> 1);
        v48 = 811610207;
        sub_20BA03A34(&v49, &v48, 2);
        v140 = 12383;
        memset(v141, 0, sizeof(v141));
        sub_20BA05EE4(v141, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 1);
        v45 = 811741281;
        sub_20BA03A34(&v46, &v45, 2);
        v142 = 12385;
        memset(v143, 0, sizeof(v143));
        sub_20BA05EE4(v143, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 1);
        v42 = 812068966;
        sub_20BA03A34(&v43, &v42, 2);
        v144 = 12390;
        memset(v145, 0, sizeof(v145));
        sub_20BA05EE4(v145, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 1);
        v39 = 812200040;
        sub_20BA03A34(&v40, &v39, 2);
        v146 = 12392;
        memset(v147, 0, sizeof(v147));
        sub_20BA05EE4(v147, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 1);
        v36 = 812724336;
        sub_20BA03A34(&v37, &v36, 2);
        v148 = 12400;
        memset(v149, 0, sizeof(v149));
        sub_20BA05EE4(v149, v37, (uint64_t)v38, (v38 - (_BYTE *)v37) >> 1);
        v33 = 812920947;
        sub_20BA03A34(&v34, &v33, 2);
        v150 = 12403;
        memset(v151, 0, sizeof(v151));
        sub_20BA05EE4(v151, v34, (uint64_t)v35, (v35 - (_BYTE *)v34) >> 1);
        v30 = 813117558;
        sub_20BA03A34(&v31, &v30, 2);
        v152 = 12406;
        memset(v153, 0, sizeof(v153));
        sub_20BA05EE4(v153, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 1);
        v27 = 813314169;
        sub_20BA03A34(&v28, &v27, 2);
        v154 = 12409;
        memset(v155, 0, sizeof(v155));
        sub_20BA05EE4(v155, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 1);
        v24 = 813510780;
        sub_20BA03A34(&__p, &v24, 2);
        v156 = 12412;
        memset(v157, 0, 24);
        sub_20BA05EE4(v157, __p, (uint64_t)v26, (v26 - (_BYTE *)__p) >> 1);
        sub_20BA05F5C(&qword_25472C230, (unsigned __int16 *)v96, 24);
        v18 = 96;
        do
        {
          v19 = (void *)v95[v18 - 1];
          if (v19)
          {
            v95[v18] = (uint64_t)v19;
            operator delete(v19);
          }
          v18 -= 4;
        }
        while (v18 * 8);
        if (__p)
        {
          v26 = __p;
          operator delete(__p);
        }
        if (v28)
        {
          v29 = v28;
          operator delete(v28);
        }
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        if (v34)
        {
          v35 = v34;
          operator delete(v34);
        }
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        if (v49)
        {
          v50 = v49;
          operator delete(v49);
        }
        if (v52)
        {
          v53 = v52;
          operator delete(v52);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        if (v58)
        {
          v59 = v58;
          operator delete(v58);
        }
        if (v61)
        {
          v62 = v61;
          operator delete(v61);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        if (v67)
        {
          v68 = v67;
          operator delete(v67);
        }
        if (v70)
        {
          v71 = v70;
          operator delete(v70);
        }
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v82)
        {
          v83 = v82;
          operator delete(v82);
        }
        if (v84)
        {
          v85 = v84;
          operator delete(v84);
        }
        if (v86)
        {
          v87 = v86;
          operator delete(v86);
        }
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        if (v90)
        {
          v91 = v90;
          operator delete(v90);
        }
        if (v92)
        {
          v93 = v92;
          operator delete(v92);
        }
        if (v94)
        {
          v95[0] = (uint64_t)v94;
          operator delete(v94);
        }
        __cxa_atexit((void (*)(void *))sub_20BA05EE0, &qword_25472C230, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472C178);
      }
      v10 = sub_20BA05E34(qword_25472C230, unk_25472C238, v3);
      if (v10)
        v7 = v10 + 3;
      else
        v7 = 0;
      if (!v4)
        goto LABEL_37;
    }
    else
    {
      v7 = 0;
      if ((a2 & 0xC) == 0)
      {
LABEL_37:
        if ((v2 & 0x10) != 0 && !v7)
        {
          v15 = atomic_load((unsigned __int8 *)&qword_25472C188);
          if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25472C188))
          {
            LODWORD(v90) = 811937882;
            sub_20BA03A34(&v94, &v90, 2);
            LOWORD(v96[0]) = 12378;
            v98 = 0;
            v99 = 0;
            v97 = 0;
            sub_20BA05EE4(&v97, v94, v95[0], (v95[0] - (uint64_t)v94) >> 1);
            LODWORD(v88) = 811741272;
            sub_20BA03A34(&v92, &v88, 2);
            v100 = 12376;
            v102 = 0;
            v103 = 0;
            v101 = 0;
            sub_20BA05EE4(&v101, v92, (uint64_t)v93, (v93 - (_BYTE *)v92) >> 1);
            sub_20BA05F5C(&qword_25472C280, (unsigned __int16 *)v96, 2);
            for (i = 0; i != -64; i -= 32)
            {
              v23 = *(void **)((char *)&v101 + i);
              if (v23)
              {
                *(uint64_t *)((char *)&v102 + i) = (uint64_t)v23;
                operator delete(v23);
              }
            }
            if (v92)
            {
              v93 = v92;
              operator delete(v92);
            }
            if (v94)
            {
              v95[0] = (uint64_t)v94;
              operator delete(v94);
            }
            __cxa_atexit((void (*)(void *))sub_20BA05EE0, &qword_25472C280, &dword_20B7F7000);
            __cxa_guard_release(&qword_25472C188);
          }
          v16 = sub_20BA05E34(qword_25472C280, unk_25472C288, v3);
          if (v16)
            return v16 + 3;
          else
            return 0;
        }
        return (uint64_t **)v7;
      }
    }
    if (!v7)
    {
      v13 = atomic_load((unsigned __int8 *)&qword_25472C180);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25472C180))
      {
        LODWORD(v73) = 809578562;
        sub_20BA03A34(&v94, &v73, 2);
        LOWORD(v96[0]) = 12354;
        v98 = 0;
        v99 = 0;
        v97 = 0;
        sub_20BA05EE4(&v97, v94, v95[0], (v95[0] - (uint64_t)v94) >> 1);
        LODWORD(v70) = 809709636;
        sub_20BA03A34(&v92, &v70, 2);
        v100 = 12356;
        v102 = 0;
        v103 = 0;
        v101 = 0;
        sub_20BA05EE4(&v101, v92, (uint64_t)v93, (v93 - (_BYTE *)v92) >> 1);
        LODWORD(v67) = 809971784;
        sub_20BA03A34(&v90, &v67, 2);
        v104 = 12360;
        v106 = 0;
        v107 = 0;
        v105 = 0;
        sub_20BA05EE4(&v105, v90, (uint64_t)v91, (v91 - (_BYTE *)v90) >> 1);
        LODWORD(v64) = 810102858;
        sub_20BA03A34(&v88, &v64, 2);
        v108 = 12362;
        v110 = 0;
        v111 = 0;
        v109 = 0;
        sub_20BA05EE4(&v109, v88, (uint64_t)v89, (v89 - (_BYTE *)v88) >> 1);
        LODWORD(v61) = 813904004;
        sub_20BA03A34(&v86, &v61, 2);
        v112 = 12420;
        v114 = 0;
        v115 = 0;
        v113 = 0;
        sub_20BA05EE4(&v113, v86, (uint64_t)v87, (v87 - (_BYTE *)v86) >> 1);
        LODWORD(v58) = 814035078;
        sub_20BA03A34(&v84, &v58, 2);
        v116 = 12422;
        v118 = 0;
        v119 = 0;
        v117 = 0;
        sub_20BA05EE4(&v117, v84, (uint64_t)v85, (v85 - (_BYTE *)v84) >> 1);
        LODWORD(v55) = 814166152;
        sub_20BA03A34(&v82, &v55, 2);
        v120 = 12424;
        v122 = 0;
        v123 = 0;
        v121 = 0;
        sub_20BA05EE4(&v121, v82, (uint64_t)v83, (v83 - (_BYTE *)v82) >> 1);
        sub_20BA05F5C(&qword_25472C258, (unsigned __int16 *)v96, 7);
        for (j = 0; j != -224; j -= 32)
        {
          v21 = *(void **)((char *)&v121 + j);
          if (v21)
          {
            *(uint64_t *)((char *)&v122 + j) = (uint64_t)v21;
            operator delete(v21);
          }
        }
        if (v82)
        {
          v83 = v82;
          operator delete(v82);
        }
        if (v84)
        {
          v85 = v84;
          operator delete(v84);
        }
        if (v86)
        {
          v87 = v86;
          operator delete(v86);
        }
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        if (v90)
        {
          v91 = v90;
          operator delete(v90);
        }
        if (v92)
        {
          v93 = v92;
          operator delete(v92);
        }
        if (v94)
        {
          v95[0] = (uint64_t)v94;
          operator delete(v94);
        }
        __cxa_atexit((void (*)(void *))sub_20BA05EE0, &qword_25472C258, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472C180);
      }
      v14 = sub_20BA05E34(qword_25472C258, *(unint64_t *)algn_25472C260, v3);
      if (v14)
        v7 = v14 + 3;
      else
        v7 = 0;
    }
    goto LABEL_37;
  }
  if ((a2 & 0xA) == 0 || (a2 & 0xC) == 0)
  {
    if ((a2 & 0xA) != 0)
    {
      v5 = &qword_25472C168;
      v12 = atomic_load((unsigned __int8 *)&qword_25472C168);
      v7 = qword_25472C200;
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25472C168))
      {
        v96[0] = 815018054;
        sub_20BA03A34(qword_25472C200, v96, 2);
        v7 = qword_25472C200;
        goto LABEL_30;
      }
      return (uint64_t **)v7;
    }
    if ((a2 & 0xC) != 0)
    {
      sub_20BA03994();
      return (uint64_t **)qword_25472C218;
    }
    return 0;
  }
  v5 = &qword_25472C160;
  v8 = atomic_load((unsigned __int8 *)&qword_25472C160);
  v7 = qword_25472C1E8;
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25472C160))
  {
    v96[0] = 809840710;
    LOWORD(v96[1]) = 12436;
    sub_20BA03A34(qword_25472C1E8, v96, 3);
    v7 = qword_25472C1E8;
    goto LABEL_30;
  }
  return (uint64_t **)v7;
}

void sub_20BA03310(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C168);
  _Unwind_Resume(a1);
}

void sub_20BA037E0()
{
  JUMPOUT(0x20BA0369CLL);
}

void sub_20BA037F0()
{
  JUMPOUT(0x20BA036ACLL);
}

void sub_20BA03800()
{
  JUMPOUT(0x20BA036BCLL);
}

void sub_20BA03810()
{
  JUMPOUT(0x20BA036CCLL);
}

void sub_20BA03820()
{
  JUMPOUT(0x20BA036DCLL);
}

void sub_20BA03830()
{
  JUMPOUT(0x20BA036ECLL);
}

void sub_20BA03840()
{
  JUMPOUT(0x20BA036FCLL);
}

void sub_20BA03850()
{
  JUMPOUT(0x20BA0370CLL);
}

void sub_20BA03860()
{
  JUMPOUT(0x20BA0371CLL);
}

void sub_20BA03870()
{
  JUMPOUT(0x20BA0372CLL);
}

void sub_20BA03880()
{
  JUMPOUT(0x20BA0373CLL);
}

void sub_20BA03890()
{
  JUMPOUT(0x20BA0374CLL);
}

void sub_20BA038A0()
{
  JUMPOUT(0x20BA0375CLL);
}

void sub_20BA038B0()
{
  JUMPOUT(0x20BA0376CLL);
}

void sub_20BA038C0()
{
  JUMPOUT(0x20BA0377CLL);
}

void sub_20BA038D0()
{
  JUMPOUT(0x20BA0378CLL);
}

void sub_20BA038DC()
{
  JUMPOUT(0x20BA0378CLL);
}

void sub_20BA038EC()
{
  JUMPOUT(0x20BA037CCLL);
}

void sub_20BA038F4()
{
  unsigned __int8 v0;
  int v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C158);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472C158))
    {
      v1 = 811806820;
      sub_20BA03A34(qword_25472C1D0, &v1, 2);
      __cxa_atexit((void (*)(void *))sub_20B8F936C, qword_25472C1D0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472C158);
    }
  }
}

void sub_20BA0397C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C158);
  _Unwind_Resume(a1);
}

void sub_20BA03994()
{
  unsigned __int8 v0;
  int v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C170);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472C170))
    {
      v1 = 809840710;
      sub_20BA03A34(qword_25472C218, &v1, 2);
      __cxa_atexit((void (*)(void *))sub_20B8F936C, qword_25472C218, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472C170);
    }
  }
}

void sub_20BA03A1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C170);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA03A34(_QWORD *a1, const void *a2, uint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_20B8F9958(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_20BA03A98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA03AB4(uint64_t result, unsigned __int16 *a2, unint64_t a3, int a4, int *a5, CFArrayRef *a6)
{
  unint64_t v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char **v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t (*v87)(void);
  uint64_t v88;
  int *v89;
  CFArrayRef *v90;
  unint64_t i;
  int v93;
  uint64_t v94;
  uint64_t (*v95)(_UNKNOWN **);
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  _QWORD *v104;

  if (a3)
  {
    v8 = a3;
    v9 = (uint64_t *)(result + 8);
    v88 = result;
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    sub_20BA06BA4(v9, v94 + v8);
    v89 = a5;
    v90 = a6;
    if (a5)
      v10 = a6 == 0;
    else
      v10 = 1;
    v11 = !v10;
    v93 = v11;
    v87 = off_254729E68;
    v98 = (uint64_t *)off_254729E68();
    v12 = 0;
    v95 = (uint64_t (*)(_UNKNOWN **))off_254729E80;
    v97 = v9;
    for (i = v8; i != v12; v8 = i)
    {
      if ((*(_BYTE *)v95(&off_254729E80) & 1) == 0)
      {
        operator new[]();
        v64 = (_QWORD *)((uint64_t (*)(uint64_t (**)(void)))v87)(&off_254729E68);
        *v64 = v65;
        _tlv_atexit((void (__cdecl *)(void *))sub_20BA063B0, v64);
        *(_BYTE *)v95(&off_254729E80) = 1;
      }
      v13 = v12 + v94;
      if (v93)
      {
        result = sub_20B8B1854(v89, v90, a2, v8, v12, *v98, 0xEuLL, 0.0);
        if ((int)result >= 1)
        {
          v14 = 0;
          v15 = 8 * result;
          do
          {
            v16 = *v98;
            v17 = *(float *)(*v98 + v14 + 4);
            v18 = *v9 + 24 * v13;
            v21 = *(_QWORD *)(v18 + 8);
            v20 = (uint64_t *)(v18 + 8);
            v19 = v21;
            result = (uint64_t)(v20 + 1);
            v22 = v20[1];
            if (v21 >= v22)
            {
              v24 = (uint64_t *)(*v9 + 24 * v13);
              v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - *v24) >> 3);
              v26 = v25 + 1;
              if (v25 + 1 > 0x666666666666666)
                goto LABEL_78;
              v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *v24) >> 3);
              if (2 * v27 > v26)
                v26 = 2 * v27;
              if (v27 >= 0x333333333333333)
                v28 = 0x666666666666666;
              else
                v28 = v26;
              v104 = v20 + 1;
              v29 = (char *)sub_20B882310(result, v28);
              v30 = &v29[40 * v25];
              v100 = v29;
              v101 = v30;
              v102 = v30;
              v103 = &v29[40 * v31];
              v30[23] = 1;
              *(_DWORD *)v30 = *(unsigned __int16 *)(v16 + v14);
              *((double *)v30 + 3) = v17;
              *((_QWORD *)v30 + 4) = 1;
              v102 += 40;
              sub_20B9D0AF4(v24, &v100);
              v23 = *v20;
              result = sub_20B9D0CC0((uint64_t)&v100);
              v9 = v97;
            }
            else
            {
              *(_BYTE *)(v19 + 23) = 1;
              *(_DWORD *)v19 = *(unsigned __int16 *)(v16 + v14);
              *(double *)(v19 + 24) = v17;
              *(_QWORD *)(v19 + 32) = 1;
              v23 = v19 + 40;
              *v20 = v19 + 40;
            }
            *v20 = v23;
            v14 += 8;
          }
          while (v15 != v14);
        }
      }
      else
      {
        result = (uint64_t)sub_20BA0225C(a2[v12], a4);
        if (result)
        {
          v32 = *(unsigned __int16 **)result;
          v33 = *(unsigned __int16 **)(result + 8);
          if (*(unsigned __int16 **)result != v33)
          {
            do
            {
              v34 = *v32;
              if (a2[v12] == v34)
                v35 = 0.0;
              else
                v35 = -1.0;
              v36 = *v9 + 24 * v13;
              v39 = *(_QWORD *)(v36 + 8);
              v38 = (uint64_t *)(v36 + 8);
              v37 = v39;
              result = (uint64_t)(v38 + 1);
              v40 = v38[1];
              if (v39 >= v40)
              {
                v42 = (uint64_t *)(*v9 + 24 * v13);
                v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v37 - *v42) >> 3);
                v44 = v43 + 1;
                if (v43 + 1 > 0x666666666666666)
                  goto LABEL_78;
                v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - *v42) >> 3);
                if (2 * v45 > v44)
                  v44 = 2 * v45;
                if (v45 >= 0x333333333333333)
                  v46 = 0x666666666666666;
                else
                  v46 = v44;
                v104 = v38 + 1;
                v47 = (char *)sub_20B882310(result, v46);
                v48 = &v47[40 * v43];
                v100 = v47;
                v101 = v48;
                v102 = v48;
                v103 = &v47[40 * v49];
                v48[23] = 1;
                *(_WORD *)v48 = v34;
                *((_WORD *)v48 + 1) = 0;
                *((double *)v48 + 3) = v35;
                *((_QWORD *)v48 + 4) = 1;
                v102 += 40;
                sub_20B9D0AF4(v42, &v100);
                v41 = *v38;
                result = sub_20B9D0CC0((uint64_t)&v100);
                v9 = v97;
              }
              else
              {
                *(_BYTE *)(v37 + 23) = 1;
                *(_WORD *)v37 = v34;
                *(_WORD *)(v37 + 2) = 0;
                *(double *)(v37 + 24) = v35;
                *(_QWORD *)(v37 + 32) = 1;
                v41 = v37 + 40;
                *v38 = v37 + 40;
              }
              *v38 = v41;
              ++v32;
            }
            while (v32 != v33);
          }
        }
        else
        {
          v50 = *v9 + 24 * v13;
          v53 = *(_QWORD *)(v50 + 8);
          v52 = (uint64_t *)(v50 + 8);
          v51 = v53;
          result = (uint64_t)(v52 + 1);
          v54 = v52[1];
          if (v53 >= v54)
          {
            v56 = (uint64_t *)(*v9 + 24 * v13);
            v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - *v56) >> 3);
            v58 = v57 + 1;
            if (v57 + 1 > 0x666666666666666)
LABEL_78:
              sub_20B80CDD8();
            v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - *v56) >> 3);
            if (2 * v59 > v58)
              v58 = 2 * v59;
            if (v59 >= 0x333333333333333)
              v60 = 0x666666666666666;
            else
              v60 = v58;
            v104 = v52 + 1;
            v61 = (char *)sub_20B882310(result, v60);
            v62 = &v61[40 * v57];
            v100 = v61;
            v101 = v62;
            v102 = v62;
            v103 = &v61[40 * v63];
            v62[23] = 1;
            *(_DWORD *)v62 = a2[v12];
            *((_QWORD *)v62 + 3) = 0;
            *((_QWORD *)v62 + 4) = 1;
            v102 += 40;
            sub_20B9D0AF4(v56, &v100);
            v55 = *v52;
            result = sub_20B9D0CC0((uint64_t)&v100);
            v9 = v97;
          }
          else
          {
            *(_BYTE *)(v51 + 23) = 1;
            *(_DWORD *)v51 = a2[v12];
            *(_QWORD *)(v51 + 24) = 0;
            *(_QWORD *)(v51 + 32) = 1;
            v55 = v51 + 40;
            *v52 = v51 + 40;
          }
          *v52 = v55;
        }
      }
      ++v12;
    }
    if ((a4 & 0x20) != 0)
    {
      result = sub_20B87C1A0((uint64_t)a2, i);
      v99 = result;
      if (a2)
      {
        if (result)
        {
          result = (uint64_t)sub_20B87B784((char *)&a2[i - result], 2 * result);
          if (result)
          {
            v66 = (char **)result;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
            v67 = *v66;
            v68 = v66[1];
            if (*v66 != v68)
            {
              v69 = result - v99;
              do
              {
                if (v67[23] < 0)
                {
                  v71 = *(char **)v67;
                  v70 = *((_QWORD *)v67 + 1);
                }
                else
                {
                  v70 = v67[23];
                  v71 = v67;
                }
                v72 = v70 >> 1;
                if (v71)
                  v73 = v72;
                else
                  v73 = 0;
                v74 = *v9 + 24 * v69;
                v77 = *(_QWORD **)(v74 + 8);
                v76 = (_QWORD *)(v74 + 8);
                v75 = v77;
                v78 = v76[1];
                if ((unint64_t)v77 >= v78)
                {
                  v80 = (uint64_t *)(*v9 + 24 * v69);
                  v81 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v75 - *v80) >> 3);
                  v82 = v81 + 1;
                  if (v81 + 1 > 0x666666666666666)
                    goto LABEL_78;
                  v83 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v78 - *v80) >> 3);
                  if (2 * v83 > v82)
                    v82 = 2 * v83;
                  if (v83 >= 0x333333333333333)
                    v84 = 0x666666666666666;
                  else
                    v84 = v82;
                  v104 = v76 + 1;
                  if (v84)
                    v85 = (char *)sub_20B882310((uint64_t)(v76 + 1), v84);
                  else
                    v85 = 0;
                  v100 = v85;
                  v101 = &v85[40 * v81];
                  v102 = v101;
                  v103 = &v85[40 * v84];
                  sub_20B877ED0(v101, v71, v73);
                  v86 = &v85[40 * v81];
                  *((_QWORD *)v86 + 3) = 0;
                  *((_QWORD *)v86 + 4) = v99;
                  v102 += 40;
                  sub_20B9D0AF4(v80, &v100);
                  v79 = (_QWORD *)*v76;
                  result = sub_20B9D0CC0((uint64_t)&v100);
                  v9 = v97;
                }
                else
                {
                  result = (uint64_t)sub_20B877ED0(v75, v71, v73);
                  v75[3] = 0;
                  v75[4] = v99;
                  v79 = v75 + 5;
                  *v76 = v75 + 5;
                }
                *v76 = v79;
                v67 += 24;
              }
              while (v67 != v68);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20BA04188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  _QWORD *v22;

  *v22 = v21;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA041B4@<X0>(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int *a4@<X3>, CFArrayRef *a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = &unk_24C499568;
  a6[1] = 0;
  a6[2] = 0;
  a6[3] = 0;
  return sub_20BA03AB4((uint64_t)a6, a1, a2, a3, a4, a5);
}

void sub_20BA04218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  *v2 = v4;
  sub_20B88DF54((void ***)va);
  _Unwind_Resume(a1);
}

unsigned __int16 **sub_20BA04238(unsigned __int16 **result, unsigned __int16 *a2, unint64_t a3, char a4, int *a5, CFArrayRef *a6)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int v22;
  double v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t (*v27)(_UNKNOWN **);
  int v31;
  uint64_t v32;
  __int16 __src;

  if (a3)
  {
    v8 = (uint64_t)result;
    v9 = (uint64_t)(result + 1);
    v32 = (*((uint64_t (**)(unsigned __int16 **))*result + 3))(result);
    sub_20B9B5A9C(v9, v32 + a3);
    if (a5)
      v10 = a6 == 0;
    else
      v10 = 1;
    v11 = !v10;
    v31 = v11;
    v26 = off_254729E98;
    v12 = (uint64_t *)off_254729E98();
    v13 = 0;
    v27 = (uint64_t (*)(_UNKNOWN **))off_254729EB0;
    do
    {
      v14 = v13 + v32;
      if (v31)
      {
        if ((*(_BYTE *)v27(&off_254729EB0) & 1) == 0)
        {
          operator new[]();
          v24 = (_QWORD *)((uint64_t (*)(uint64_t (**)(void)))v26)(&off_254729E98);
          *v24 = v25;
          _tlv_atexit((void (__cdecl *)(void *))sub_20BA063B0, v24);
          *(_BYTE *)v27(&off_254729EB0) = 1;
        }
        result = (unsigned __int16 **)sub_20B8B1854(a5, a6, a2, a3, v13, *v12, 0xEuLL, 0.0);
        if ((int)result >= 1)
        {
          v15 = 0;
          v16 = 8 * result;
          do
          {
            result = (unsigned __int16 **)sub_20B8B6470(v8, v14, (void *)(v15 + *v12), 1uLL, 1, 0, 0xFFFFFF, -1, *(float *)(v15 + *v12 + 4), 255);
            v15 += 8;
          }
          while (v16 != v15);
        }
      }
      else
      {
        if (v13)
          v17 = a2[v13 - 1];
        else
          v17 = 0;
        if (a3 - 1 <= v13)
          v18 = 0;
        else
          v18 = a2[v13 + 1];
        v19 = &a2[v13];
        result = (unsigned __int16 **)sub_20BA02088(*v19, v17, v18, a4);
        if (result)
        {
          v20 = *result;
          v21 = result[1];
          while (v20 != v21)
          {
            v22 = *v20++;
            __src = v22;
            if (*v19 == v22)
              v23 = 0.0;
            else
              v23 = -1.0;
            result = (unsigned __int16 **)sub_20B8B6470(v8, v14, &__src, 1uLL, 1, 0, 0xFFFFFF, -1, v23, 255);
          }
        }
        else
        {
          result = (unsigned __int16 **)sub_20B8B6470(v8, v14, &a2[v13], 1uLL, 1, 0, 0xFFFFFF, -1, 0.0, 255);
        }
      }
      ++v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20BA044DC(uint64_t a1, CFArrayRef theArray, char a3, uint64_t a4)
{
  unint64_t v4;
  CFIndex Count;
  uint64_t v9;
  float *v10;
  float *v11;
  unint64_t v12;
  float v13;
  float v14;
  const __CFString *ValueAtIndex;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float *v29;
  int v30;
  int v31;
  CFIndex v32;
  unint64_t v33;
  const __CFString *v34;
  unint64_t Length;
  uint64_t v36;
  unint64_t i;
  CFIndex v38;
  CFIndex j;
  const __CFString *v40;
  CFIndex v41;
  int v42;
  CFIndex v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *__p;
  float *v50;
  char *v51;
  UniChar __src;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v9 = Count;
      v10 = *(float **)a4;
      if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
      {
        v11 = 0;
        v12 = 0;
        __p = 0;
        v50 = 0;
        v51 = 0;
        v13 = *v10;
        v4 = 0x3FFFFFFFFFFFFFFFLL;
        while (1)
        {
          if (v12)
          {
            v14 = v10[v12];
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v12);
            v16 = (float)((float)((float)(v14 - v13) * 6.0) + -0.5) / (float)CFStringGetLength(ValueAtIndex);
            v17 = v50;
            if (v50 >= (float *)v51)
            {
              v20 = __p;
              v21 = v50 - __p;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                sub_20B80CDD8();
              v23 = v51 - (char *)__p;
              if ((v51 - (char *)__p) >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)sub_20B8127BC((uint64_t)&v51, v24);
                v20 = __p;
                v17 = v50;
              }
              else
              {
                v25 = 0;
              }
              v29 = (float *)&v25[4 * v21];
              *v29 = v16;
              v19 = v29 + 1;
              while (v17 != v20)
              {
                v30 = *((_DWORD *)v17-- - 1);
                *((_DWORD *)v29-- - 1) = v30;
              }
LABEL_35:
              __p = v29;
              v51 = &v25[4 * v24];
              if (v20)
                operator delete(v20);
              goto LABEL_37;
            }
            *v50 = v16;
            v18 = v50 + 1;
          }
          else
          {
            if (v11 >= (float *)v51)
            {
              v20 = __p;
              v26 = v11 - __p;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62)
                sub_20B80CDD8();
              v28 = v51 - (char *)__p;
              if ((v51 - (char *)__p) >> 1 > v27)
                v27 = v28 >> 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v27;
              if (v24)
              {
                v25 = (char *)sub_20B8127BC((uint64_t)&v51, v24);
                v20 = __p;
                v11 = v50;
              }
              else
              {
                v25 = 0;
              }
              v29 = (float *)&v25[4 * v26];
              *v29 = 0.0;
              v19 = v29 + 1;
              while (v11 != v20)
              {
                v31 = *((_DWORD *)v11-- - 1);
                *((_DWORD *)v29-- - 1) = v31;
              }
              goto LABEL_35;
            }
            *v11 = 0.0;
            v18 = v11 + 1;
          }
          v19 = v18;
LABEL_37:
          v50 = v19;
          ++v12;
          v10 = *(float **)a4;
          v11 = v19;
          if (v12 >= (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2)
            goto LABEL_40;
        }
      }
      __p = 0;
      v50 = 0;
      v51 = 0;
LABEL_40:
      if (v9 < 1)
      {
        v33 = 0;
      }
      else
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v32);
          Length = CFStringGetLength(v34);
          if (v33 <= Length)
            v33 = Length;
          ++v32;
        }
        while (v9 != v32);
      }
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      sub_20B9B5A9C(a1 + 8, v36 + v33);
      v46 = v36;
      v47 = a1;
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          v38 = CFArrayGetCount(theArray);
          if (v38 >= 1)
          {
            for (j = 0; j != v38; ++j)
            {
              v40 = (const __CFString *)CFArrayGetValueAtIndex(theArray, j);
              v41 = CFStringGetLength(v40);
              v42 = v41;
              v43 = v41 - 1;
              if (v41 - 1 >= i)
              {
                __src = 0;
                __src = CFStringGetCharacterAtIndex(v40, i);
                if (__p == v50)
                  v44 = 0.0;
                else
                  v44 = __p[j];
                if (v43 == i)
                  v45 = (uint64_t)(((unint64_t)(v33 - v42) << 32) + 0x100000000) >> 32;
                else
                  v45 = 1;
                v4 = v4 & 0xFFFFFFFF00000000 | 0xFFFFFF;
                sub_20B8B6470(v47, i + v46, &__src, 1uLL, v45, 0, v4, j, v44, a3);
              }
            }
          }
        }
      }
      if (__p)
        operator delete(__p);
    }
  }
}

void sub_20BA04854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BA04898(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, int *a4@<X3>, CFArrayRef *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  char v11;
  void **v12;

  v8 = off_24C460C88;
  v9 = 0uLL;
  v10 = 0;
  v11 = 0;
  sub_20BA04238((unsigned __int16 **)&v8, a1, a2, a3, a4, a5);
  if ((a3 & 0x20) != 0)
  {
    sub_20BA01978(&v8, a6);
  }
  else
  {
    *(_QWORD *)a6 = off_24C460C88;
    *(_OWORD *)(a6 + 8) = v9;
    *(_QWORD *)(a6 + 24) = v10;
    v10 = 0;
    v9 = 0uLL;
    *(_BYTE *)(a6 + 32) = v11;
  }
  v8 = off_24C460C88;
  v12 = (void **)&v9;
  sub_20B8B66F8(&v12);
}

void sub_20BA0495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B8B66F8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA04978@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X8>)
{
  uint64_t v6;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  if (a5)
  {
    v6 = a5;
    v10 = (_QWORD *)result;
    do
    {
      v13 = *a4++;
      v12 = v13;
      v14 = *v10;
      if (*(unsigned __int8 *)(*(_QWORD *)(v10[1] + 24 * a3) + 48 * v13 + 46) == 255)
      {
        v19 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v14 + 40))(v10, a3, v12);
        v20 = *(unsigned __int8 *)(a6 + 23);
        if ((v20 & 0x80u) == 0)
          v21 = a6;
        else
          v21 = *(_QWORD *)a6;
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(a6 + 8);
        sub_20BA06744(a6, v21 + 2 * v20, a2 + 2 * a3, (__int16 *)(a2 + 2 * a3 + 2 * v19), v19);
      }
      else
      {
        v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48))(v10, a3, v12);
        v17 = *(unsigned __int8 *)(a6 + 23);
        if ((v17 & 0x80u) == 0)
          v18 = a6;
        else
          v18 = *(_QWORD *)a6;
        if ((v17 & 0x80u) != 0)
          v17 = *(_QWORD *)(a6 + 8);
        sub_20BA063F0(a6, v18 + 2 * v17, v15, (__int16 *)(v15 + 2 * v16), (2 * v16) >> 1);
      }
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v10 + 40))(v10, a3, v12);
      a3 += result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_20BA04AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA04ADC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;

  if (a4)
  {
    v7 = *a3;
    v8 = a4 - 1;
    if (a4 != 1)
    {
      v9 = a3 + 1;
      do
      {
        a2 += (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, v7);
        v10 = *v9++;
        v7 = v10;
        --v8;
      }
      while (v8);
    }
    v11 = *(_QWORD *)(a1[1] + 24 * a2) + 48 * v7;
    v12 = *(_BYTE *)(v11 + 46) + 1;
    v13 = *(unsigned __int8 *)(v11 + 47) + 1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  return (unsigned __int16)(v12 | (unsigned __int16)(v13 << 8));
}

uint64_t *sub_20BA04B7C(uint64_t **a1, __int16 a2, int a3)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *result;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[3];
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = a3;
  v6 = ((uint64_t (*)(uint64_t **))(*a1)[3])(a1) - a2;
  if (a3)
  {
    v7 = ((uint64_t (*)(uint64_t **))(*a1)[3])(a1) - a2;
    v9 = a1 + 1;
    v8 = a1[1];
    v10 = v8[3 * v7 - 3];
    if (*(unsigned __int8 *)(v10 + 46) != 255)
    {
      v11 = v7;
      v12 = v8[3 * v7];
      if (*(unsigned __int8 *)(v12 + 46) != 255)
      {
        v13 = *(unsigned __int8 *)(v10 + 47);
        if (v13 == *(unsigned __int8 *)(v12 + 47))
        {
          if (((uint64_t (*)(uint64_t **))(*a1)[3])(a1) <= (unint64_t)(v11 + 1))
          {
            v15 = 1;
          }
          else
          {
            v14 = 24 * v11 + 24;
            v15 = 1;
            do
            {
              v16 = *(uint64_t *)((char *)*v9 + v14);
              if (*(unsigned __int8 *)(v16 + 46) == 255)
                break;
              if (*(unsigned __int8 *)(v16 + 47) != v13)
                break;
              ++v15;
              v14 += 24;
            }
            while (v11 + v15 < (unint64_t)((uint64_t (*)(uint64_t **))(*a1)[3])(a1));
          }
          sub_20B9B5B30((uint64_t)(a1 + 1), *v9, (uint64_t)&(*v9)[3 * v6]);
          v18 = 0;
          while (1)
          {
            v21[0] = &off_24C459130;
            v21[1] = &v20;
            v22 = v21;
            sub_20B9B5BB0((uint64_t)a1, v18, (uint64_t)v21);
            result = v22;
            if (v22 == v21)
              break;
            if (v22)
            {
              v19 = 5;
LABEL_19:
              result = (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v19))();
            }
            if (v15 == ++v18)
              return result;
          }
          result = v21;
          v19 = 4;
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    v8 = a1[1];
  }
  return sub_20B9B5B30((uint64_t)(a1 + 1), v8, (uint64_t)&v8[3 * v6]);
}

void sub_20BA04DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA04DE0(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20BA04DF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20BA04E00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20BA04E10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_20BA04E20(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_24C461D28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA04E70(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA05004(a1, a2, a3, 1u, 0);
}

_QWORD *sub_20BA04E7C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA050D4(a1, a2, a3, 1u, 0);
}

_QWORD *sub_20BA04E88(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA05004(a1, a2, a3, 0, 0);
}

_QWORD *sub_20BA04E94(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA050D4(a1, a2, a3, 0, 0);
}

_QWORD *sub_20BA04EA0(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C4AEAA0;
  v6[1] = a3;
  v7 = v6;
  sub_20BA05638(a1, a2, (uint64_t)v6, a4);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20BA04F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BA04F74(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_24C461D28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  return a1;
}

void sub_20BA04FB4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_24C461D28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA05004(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C4AE920;
  v7[1] = a3;
  v8 = v7;
  sub_20BA050D4(a1, a2, (uint64_t)v7, a4, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20BA05098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BA050D4(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729DC0;
  if ((*(_BYTE *)off_254729DC0(&off_254729DC0) & 1) == 0)
  {
    v20 = (_QWORD *)off_254729DA8(&off_254729DA8);
    sub_20B8F98E4(v20, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v20);
    *(_BYTE *)v10(&off_254729DC0) = 1;
  }
  v11 = off_254729DF0;
  if ((*(_BYTE *)off_254729DF0(&off_254729DF0) & 1) == 0)
  {
    v21 = (_QWORD *)off_254729DD8(&off_254729DD8);
    sub_20B8B3DF8(v21, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v21);
    *(_BYTE *)v11(&off_254729DF0) = 1;
  }
  v23 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C4AE8A0;
  v12[1] = a1;
  v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v25 = v12;
  (*(void (**)(uint64_t *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 24))(&v22, a1);
  off_254729DA8(&off_254729DA8);
  v13 = (uint64_t *)off_254729DD8(&off_254729DD8);
  sub_20B904690(a1, a2, (uint64_t)v24, v14, a4, 0, 0, &v23, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  v17 = v22;
  v22 = 0;
  if (v17)
    MEMORY[0x20BD39CB0](v17, 0x1000C4052888210);
  result = v25;
  if (v25 == v24)
  {
    v19 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void sub_20BA05310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  if (a18)
    MEMORY[0x20BD39CB0](a18, 0x1000C4052888210);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_8;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void sub_20BA05378()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA0538C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C4AE8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BA053CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AE8A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BA053F4(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = *(_QWORD *)(a1 + 8);
  v17 = 0;
  v18 = v9;
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v15 + 8) + 48))(*(_QWORD *)(v15 + 8), a2, &v17);
  return sub_20BA054E0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)&v17, v10, v11, v12, v13, v14 - *(int *)(a1 + 24));
}

uint64_t sub_20BA05498(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AE900))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA054D4()
{
  return &unk_24C4AE900;
}

uint64_t sub_20BA054E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a4;
  v12 = a3;
  v9 = a6;
  v10 = a5;
  v8 = a7;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v12, &v11, &v10, &v9, &v8);
}

void sub_20BA05530()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA05544(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4AE920;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA05578(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4AE920;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BA05594(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20BA055F8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_20BA055B0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AE980))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA055EC()
{
  return &unk_24C4AE980;
}

uint64_t sub_20BA055F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  v6 = a5;
  v7 = a4;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v8, &v7, &v6);
}

_QWORD *sub_20BA05638(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*v8)(_QWORD);
  uint64_t (*v9)(_QWORD);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = off_254729E20;
  if ((*(_BYTE *)off_254729E20(&off_254729E20) & 1) == 0)
  {
    v17 = (_QWORD *)off_254729E08(&off_254729E08);
    sub_20B8F98E4(v17, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v17);
    *(_BYTE *)v8(&off_254729E20) = 1;
  }
  v9 = off_254729E50;
  if ((*(_BYTE *)off_254729E50(&off_254729E50) & 1) == 0)
  {
    v18 = (_QWORD *)off_254729E38(&off_254729E38);
    sub_20B8B3DF8(v18, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v18);
    *(_BYTE *)v9(&off_254729E50) = 1;
  }
  v20 = 0;
  v10 = operator new(0x20uLL);
  *v10 = &off_24C4AE9A0;
  v10[1] = a1;
  v10[2] = a3;
  *((_DWORD *)v10 + 6) = 0;
  *((_DWORD *)v10 + 7) = a4;
  v22 = v10;
  (*(void (**)(uint64_t *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 24))(&v19, a1);
  off_254729E08(&off_254729E08);
  v11 = (uint64_t *)off_254729E38(&off_254729E38);
  sub_20B904690(a1, a2, (uint64_t)v21, v12, 1u, 1u, 1u, &v20, 0.0, v13, 0, 0, *v11, 0, -1, 0, 0);
  v14 = v19;
  v19 = 0;
  if (v14)
    MEMORY[0x20BD39CB0](v14, 0x1000C4052888210);
  result = v22;
  if (v22 == v21)
  {
    v16 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_20BA0586C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  if (a18)
    MEMORY[0x20BD39CB0](a18, 0x1000C4052888210);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_8;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void sub_20BA058D4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA058E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C4AE9A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BA05928(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AE9A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BA05950(uint64_t a1, uint64_t a2, int *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a8;
  v29 = *a3;
  v27 = v13;
  v28 = v12;
  v25 = v15;
  v26 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 8) + 32))(*(_QWORD *)(v16 + 8)) & 1) == 0)
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  __p = 0;
  v23 = 0;
  v24 = 0;
  sub_20B8FA598(&__p, v11, (uint64_t)v11 + v12, v12);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(v16 + 8);
  v19 = operator new(0x50uLL);
  *v19 = &off_24C4AEA10;
  v19[1] = &v28;
  v19[2] = &__p;
  v19[3] = v17;
  v19[4] = &v29;
  v19[5] = &v27;
  v19[6] = &v26;
  v19[7] = &v25;
  v19[8] = a1 + 24;
  v19[9] = a9;
  v31 = v19;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v18 + 56))(v18, a2, v30, *(unsigned int *)(a1 + 28));
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_7:
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
}

void sub_20BA05AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA05B30(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEA80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA05B6C()
{
  return &unk_24C4AEA80;
}

void sub_20BA05B7C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA05B90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24C4AEA10;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA05BE8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C4AEA10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_20BA05C28(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t *v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  int v19;

  v8 = *a3;
  v9 = *a4;
  v11 = *(_QWORD **)(a1 + 8);
  v10 = *(unint64_t **)(a1 + 16);
  v12 = *v11 + *a4;
  v13 = v10[1] - *v10;
  if (v12 > v13)
    sub_20B871DC8(v10, v12 - v13);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(**(_QWORD **)(a1 + 16) + **(_QWORD **)(a1 + 8) + i) = *(_BYTE *)(v8 + i);
  }
  v15 = *(uint64_t **)(a1 + 40);
  v16 = **(_DWORD **)(a1 + 32);
  v18 = *a2;
  v19 = v16;
  result = sub_20BA054E0(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24), (uint64_t)&v18, **(_QWORD **)(a1 + 16), v12, *v15, **(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 56) - **(int **)(a1 + 64));
  **(_BYTE **)(a1 + 72) = (**(unsigned __int8 **)(a1 + 72) | *a5) != 0;
  return result;
}

uint64_t sub_20BA05D20(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEA70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA05D5C()
{
  return &unk_24C4AEA70;
}

void sub_20BA05D6C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA05D80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4AEAA0;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA05DB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4AEAA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BA05DD0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20BA055F8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_20BA05DEC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEB00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA05E28()
{
  return &unk_24C4AEB00;
}

uint64_t **sub_20BA05E34(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t ***v5;
  uint64_t **result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ****)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t **)*result)
  {
    v7 = (unint64_t)result[1];
    if (v7 == a3)
    {
      if (*((unsigned __int16 *)result + 8) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_20BA05EE4(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B8F9958(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BA05F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BA05F5C(uint64_t *a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v35;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = &a2[16 * a3];
    v7 = a1 + 2;
    while (1)
    {
      v8 = *v5;
      v9 = a1[1];
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v3 = *v5;
          if (v9 <= v8)
            v3 = v8 % v9;
        }
        else
        {
          v3 = ((_DWORD)v9 - 1) & v8;
        }
        v11 = *(uint64_t ****)(*a1 + 8 * v3);
        if (v11)
        {
          for (i = *v11; i; i = (uint64_t **)*i)
          {
            v13 = (unint64_t)i[1];
            if (v13 == v8)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v8)
                goto LABEL_75;
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9)
                  v13 %= v9;
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v3)
                break;
            }
          }
        }
      }
      v14 = operator new(0x30uLL);
      *v14 = 0;
      v14[1] = v8;
      *((_WORD *)v14 + 8) = v8;
      v14[4] = 0;
      v14[5] = 0;
      v14[3] = 0;
      sub_20BA05EE4(v14 + 3, *((const void **)v5 + 1), *((_QWORD *)v5 + 2), (uint64_t)(*((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1)) >> 1);
      v15 = (float)(unint64_t)(a1[3] + 1);
      v16 = *((float *)a1 + 8);
      if (!v9 || (float)(v16 * (float)v9) < v15)
        break;
LABEL_65:
      v32 = *a1;
      v33 = *(_QWORD **)(*a1 + 8 * v3);
      if (v33)
      {
        *v14 = *v33;
      }
      else
      {
        *v14 = *v7;
        *v7 = v14;
        *(_QWORD *)(v32 + 8 * v3) = v7;
        if (!*v14)
          goto LABEL_74;
        v34 = *(_QWORD *)(*v14 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v34 >= v9)
            v34 %= v9;
        }
        else
        {
          v34 &= v9 - 1;
        }
        v33 = (_QWORD *)(*a1 + 8 * v34);
      }
      *v33 = v14;
LABEL_74:
      ++a1[3];
LABEL_75:
      v5 += 16;
      if (v5 == v6)
        return a1;
    }
    v17 = (v9 & (v9 - 1)) != 0;
    if (v9 < 3)
      v17 = 1;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = (void *)*a1;
          *a1 = (uint64_t)v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*v7;
          if (*v7)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v25) = v7;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v31))
                  {
                    *(_QWORD *)(*a1 + 8 * v31) = v24;
                    goto LABEL_56;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*a1 + 8 * v31);
                  **(_QWORD **)(*a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_56:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        v35 = (void *)*a1;
        *a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v8;
    }
    goto LABEL_65;
  }
  return a1;
}

void sub_20BA06374(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_20B8D44F8(1, v2);
  sub_20B8D4544(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA063B0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80CE7E837CLL);
  return a1;
}

uint64_t sub_20BA063F0(unint64_t a1, uint64_t a2, unint64_t a3, __int16 *a4, unint64_t a5)
{
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *p_p;
  uint64_t v19;
  unint64_t v20;
  __int16 *v21;
  __int16 v22;
  void *__p;
  uint64_t v25;
  uint64_t v26;

  v7 = (__int16 *)a3;
  v8 = a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v9 = (uint64_t)(a2 - a1) >> 1;
    if (a5)
    {
      v10 = *(unsigned __int8 *)(a1 + 23);
      if (a1 > a3 || a1 + 2 * v10 + 2 <= a3)
      {
        v11 = 10;
        v12 = 10 - v10;
        v13 = a1;
LABEL_12:
        if (v12 >= a5)
        {
          if (v10 == v9)
            v10 = v9;
          else
            memmove((void *)(v13 + 2 * v9 + 2 * a5), (const void *)(v13 + 2 * v9), 2 * (v10 - v9));
        }
        else
        {
          sub_20B87CAC0(a1, v11, v10 + a5 - v11, v10, v9, 0, a5);
          *(_QWORD *)(v8 + 8) = v10 + a5;
          v13 = *(_QWORD *)v8;
        }
        v20 = v10 + a5;
        if (*(char *)(v8 + 23) < 0)
          *(_QWORD *)(v8 + 8) = v20;
        else
          *(_BYTE *)(v8 + 23) = v20 & 0x7F;
        *(_WORD *)(v13 + 2 * v20) = 0;
        if (v7 != a4)
        {
          v21 = (__int16 *)(v13 + 2 * v9);
          do
          {
            v22 = *v7++;
            *v21++ = v22;
          }
          while (v7 != a4);
        }
        if (*(char *)(v8 + 23) < 0)
          v8 = *(_QWORD *)v8;
        return v8 + 2 * v9;
      }
      goto LABEL_14;
    }
    return v8 + 2 * v9;
  }
  v13 = *(_QWORD *)a1;
  v9 = (a2 - *(_QWORD *)a1) >> 1;
  if (!a5)
  {
    v8 = *(_QWORD *)a1;
    return v8 + 2 * v9;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v13 > a3 || v13 + 2 * v10 + 2 <= a3)
  {
    v11 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v12 = v11 - v10;
    goto LABEL_12;
  }
LABEL_14:
  __p = 0;
  v25 = 0;
  v26 = 0;
  if ((__int16 *)a3 == a4)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
  }
  else
  {
    do
      sub_20B87C0F8((uint64_t)&__p, *v7++);
    while (v7 != a4);
    v15 = HIBYTE(v26);
    v17 = (__int16 *)__p;
    v16 = v25;
  }
  if ((v15 & 0x80u) == 0)
    p_p = (__int16 *)&__p;
  else
    p_p = v17;
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v19 = sub_20BA06628(v8, a5, v9, p_p, &p_p[v16]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return v19;
}

void sub_20BA065E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA06628(uint64_t a1, unint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _WORD *v14;
  __int16 v15;

  v9 = a1;
  if (*(char *)(a1 + 23) < 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - v10 >= a2)
    {
      v12 = *(_QWORD *)a1;
      goto LABEL_7;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 23);
    v11 = 10;
    v12 = a1;
    if (10 - v10 >= a2)
    {
LABEL_7:
      if (v10 == a3)
        v10 = a3;
      else
        memmove((void *)(v12 + 2 * a3 + 2 * a2), (const void *)(v12 + 2 * a3), 2 * (v10 - a3));
      goto LABEL_10;
    }
  }
  sub_20B87CAC0(a1, v11, v10 + a2 - v11, v10, a3, 0, a2);
  *(_QWORD *)(v9 + 8) = v10 + a2;
  v12 = *(_QWORD *)v9;
LABEL_10:
  v13 = v10 + a2;
  if (*(char *)(v9 + 23) < 0)
    *(_QWORD *)(v9 + 8) = v13;
  else
    *(_BYTE *)(v9 + 23) = v13 & 0x7F;
  *(_WORD *)(v12 + 2 * v13) = 0;
  if (a4 != a5)
  {
    v14 = (_WORD *)(v12 + 2 * a3);
    do
    {
      v15 = *a4++;
      *v14++ = v15;
    }
    while (a4 != a5);
  }
  if (*(char *)(v9 + 23) < 0)
    v9 = *(_QWORD *)v9;
  return v9 + 2 * a3;
}

uint64_t sub_20BA06744(unint64_t a1, uint64_t a2, unint64_t a3, __int16 *a4, unint64_t a5)
{
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  __int16 *v17;
  __int16 *p_p;
  uint64_t v19;
  unint64_t v20;
  __int16 *v21;
  __int16 v22;
  void *__p;
  uint64_t v25;
  uint64_t v26;

  v7 = (__int16 *)a3;
  v8 = a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v9 = (uint64_t)(a2 - a1) >> 1;
    if (a5)
    {
      v10 = *(unsigned __int8 *)(a1 + 23);
      if (a1 > a3 || a1 + 2 * v10 + 2 <= a3)
      {
        v11 = 10;
        v12 = 10 - v10;
        v13 = a1;
LABEL_12:
        if (v12 >= a5)
        {
          if (v10 == v9)
            v10 = v9;
          else
            memmove((void *)(v13 + 2 * v9 + 2 * a5), (const void *)(v13 + 2 * v9), 2 * (v10 - v9));
        }
        else
        {
          sub_20B87CAC0(a1, v11, v10 + a5 - v11, v10, v9, 0, a5);
          *(_QWORD *)(v8 + 8) = v10 + a5;
          v13 = *(_QWORD *)v8;
        }
        v20 = v10 + a5;
        if (*(char *)(v8 + 23) < 0)
          *(_QWORD *)(v8 + 8) = v20;
        else
          *(_BYTE *)(v8 + 23) = v20 & 0x7F;
        *(_WORD *)(v13 + 2 * v20) = 0;
        if (v7 != a4)
        {
          v21 = (__int16 *)(v13 + 2 * v9);
          do
          {
            v22 = *v7++;
            *v21++ = v22;
          }
          while (v7 != a4);
        }
        if (*(char *)(v8 + 23) < 0)
          v8 = *(_QWORD *)v8;
        return v8 + 2 * v9;
      }
      goto LABEL_14;
    }
    return v8 + 2 * v9;
  }
  v13 = *(_QWORD *)a1;
  v9 = (a2 - *(_QWORD *)a1) >> 1;
  if (!a5)
  {
    v8 = *(_QWORD *)a1;
    return v8 + 2 * v9;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v13 > a3 || v13 + 2 * v10 + 2 <= a3)
  {
    v11 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v12 = v11 - v10;
    goto LABEL_12;
  }
LABEL_14:
  __p = 0;
  v25 = 0;
  v26 = 0;
  if ((__int16 *)a3 == a4)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
  }
  else
  {
    do
      sub_20B87C0F8((uint64_t)&__p, *v7++);
    while (v7 != a4);
    v15 = HIBYTE(v26);
    v17 = (__int16 *)__p;
    v16 = v25;
  }
  if ((v15 & 0x80u) == 0)
    p_p = (__int16 *)&__p;
  else
    p_p = v17;
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v19 = sub_20BA06628(v8, a5, v9, p_p, &p_p[v16]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  return v19;
}

void sub_20BA06934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BA06980()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA06994(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C459080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA069CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C459080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BA069EC(uint64_t a1, uint64_t a2, __int16 **a3, uint64_t a4, uint64_t *a5)
{
  __int16 *v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = *a3;
  v7 = *a5;
  v8 = *(_WORD **)a2;
  v9 = *(_QWORD *)(a1 + 16);
  if (**(_WORD **)a2)
  {
    v10 = 0;
    do
      v11 = v10 + 1;
    while (v8[++v10]);
  }
  else
  {
    v11 = 0;
  }
  return sub_20B8B6470(v9, *(int *)(a1 + 8), v8, v11, v7, *v6, 0xFFFFFF, -1, *(float *)(a2 + 8), 255);
}

uint64_t sub_20BA06A64(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458D98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA06AA0()
{
  return &unk_24C458D98;
}

void sub_20BA06AB0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA06AC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4590D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA06AFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4590D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BA06B1C(uint64_t a1, int *a2, float *a3, void **a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return sub_20B8B6470(*(_QWORD *)(a1 + 16), *(int *)(a1 + 8), *a4, *a5 >> 1, *a8, *(_WORD *)*a4, *a2, -1, *a3, 255);
}

uint64_t sub_20BA06B5C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458DA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA06B98()
{
  return &unk_24C458DA8;
}

void sub_20BA06BA4(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20BA06C38(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      sub_20B88DFC4(&v8);
    }
    a1[1] = v7;
  }
}

void sub_20BA06C38(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20B828D70(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20BA06D9C(a1, &v15);
    sub_20BA06F2C(&v15);
  }
}

void sub_20BA06D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BA06F2C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA06D9C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BA06E10((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BA06E10(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BA06EB0((uint64_t)v11);
  return v9;
}

uint64_t sub_20BA06EB0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BA06EE4(a1);
  return a1;
}

void sub_20BA06EE4(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_20B88DFC4(&v3);
    v1 += 3;
  }
}

void **sub_20BA06F2C(void **a1)
{
  sub_20BA06F5C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BA06F5C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_20B88DFC4(&v5);
  }
}

void sub_20BA06FB0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA06FC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459130;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA06FF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459130;
  a2[1] = v2;
  return result;
}

BOOL sub_20BA07014(uint64_t a1, uint64_t a2)
{
  return *(char *)(a2 + 46) + 1 != **(unsigned __int16 **)(a1 + 8);
}

uint64_t sub_20BA07030(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458DB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA0706C()
{
  return &unk_24C458DB8;
}

uint64_t *sub_20BA07078(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  if (a2 >= 0x100000)
    return 0;
  v3 = (uint64_t *)operator new();
  sub_20BA07180(v3, a1, a2, (a3 & 2) != 0);
  return v3;
}

void sub_20BA070E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x60C40149E097CLL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA07108(const void *a1, char a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new();
  sub_20BA07580(v4, a1, (a2 & 2) != 0);
  return v4;
}

void sub_20BA0715C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x60C40149E097CLL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA07180(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;

  v8 = operator new();
  sub_20B9C4EB0(v8, a4);
  *a1 = v8;
  a1[1] = 0;
  a1[2] = 0;
  sub_20BA07250((uint64_t)a1, a2, a3);
  return a1;
}

void sub_20BA07200(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t v4;

  sub_20BA076C0(v2, 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sub_20BA07250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  __int16 *v10;
  unsigned __int16 v11;
  void **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 *v34;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      v6 = operator new();
      *(_OWORD *)(v6 + 24) = 0u;
      v7 = (void **)(v6 + 24);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_WORD *)v6 = *((_WORD *)sub_20B896F94() + 262);
      v8 = *(unsigned int *)(a2 + 24 * i + 16);
      v9 = atomic_load(&qword_25472C2B0);
      if (v9 != -1)
      {
        *(_QWORD *)&v31 = &v33;
        v34 = &v31;
        std::__call_once(&qword_25472C2B0, &v34, (void (__cdecl *)(void *))sub_20BA07A2C);
      }
      v10 = (__int16 *)&qword_25472C2B0 + v8 + 16;
      if ((int)v8 >= 9)
        v10 = &word_25472C2E0;
      v11 = *v10;
      *(_WORD *)(v6 + 2) = v11;
      *(_DWORD *)(v6 + 4) = v11;
      *(_DWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 12) = i;
      *(_DWORD *)(v6 + 16) = 0;
      sub_20B8D1D2C(*(const __CFString **)(a2 + 24 * i), &v31);
      if (*(char *)(v6 + 47) < 0)
        operator delete(*v7);
      *(_OWORD *)v7 = v31;
      *(_QWORD *)(v6 + 40) = v32;
      sub_20B8D1D2C(*(const __CFString **)(a2 + 24 * i + 8), &v31);
      v12 = (void **)(v6 + 48);
      if (*(char *)(v6 + 71) < 0)
        operator delete(*v12);
      *(_OWORD *)v12 = v31;
      *(_QWORD *)(v6 + 64) = v32;
      v13 = v29;
      if (v29 >= v30)
      {
        v15 = v29 - v28;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_20B80CDD8();
        v16 = ((char *)v30 - (char *)v28) >> 2;
        if (v16 <= v15 + 1)
          v16 = v15 + 1;
        if ((unint64_t)((char *)v30 - (char *)v28) >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_20B800BE8((uint64_t)&v30, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v15];
        *v19 = v6;
        v14 = v19 + 1;
        v21 = v28;
        v20 = v29;
        if (v29 != v28)
        {
          do
          {
            v22 = *--v20;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = v28;
        }
        v28 = v19;
        v29 = v14;
        v30 = (uint64_t *)&v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v29 = v6;
        v14 = v13 + 1;
      }
      v29 = v14;
    }
  }
  v23 = (uint64_t *)operator new();
  sub_20B995850((uint64_t)v23);
  sub_20BA076C0((uint64_t **)(a1 + 8), v23);
  sub_20B997380(*(_QWORD **)(a1 + 8), &v28, 6, (uint64_t *)a1);
  v24 = v28;
  v25 = v29;
  if (v28 != v29)
  {
    do
    {
      v26 = *v24;
      if (*v24)
      {
        if (*(char *)(v26 + 71) < 0)
          operator delete(*(void **)(v26 + 48));
        if (*(char *)(v26 + 47) < 0)
          operator delete(*(void **)(v26 + 24));
        MEMORY[0x20BD39CB0](v26, 0x1012C405A3E5557);
      }
      ++v24;
    }
    while (v24 != v25);
    v24 = v28;
  }
  if (v24)
  {
    v29 = v24;
    operator delete(v24);
  }
}

void sub_20BA07540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;

  MEMORY[0x20BD39CB0](v12, 0x10B2C404F1FE554);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA07580(uint64_t *a1, const void *a2, char a3)
{
  uint64_t v6;
  char *BytePtr;
  CFIndex Length;

  v6 = operator new();
  sub_20B9C4EB0(v6, a3);
  *a1 = v6;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    a1[2] = (uint64_t)CFRetain(a2);
    BytePtr = (char *)CFDataGetBytePtr((CFDataRef)a2);
    Length = CFDataGetLength((CFDataRef)a2);
    if (Length)
      sub_20B9C6450(*a1, BytePtr, Length);
  }
  return a1;
}

void sub_20BA0761C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C40236A4E44);
  _Unwind_Resume(a1);
}

uint64_t **sub_20BA0766C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = a1[2];
  if (v2)
    CFRelease(v2);
  sub_20BA076C0(a1 + 1, 0);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
  return a1;
}

uint64_t *sub_20BA076C0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B995AFC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20BA076FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

CFDataRef sub_20BA07744(uint64_t a1)
{
  CFDataRef result;
  const UInt8 *v3;
  uint64_t v4;
  CFIndex v5;

  result = *(CFDataRef *)(a1 + 16);
  if (!result)
  {
    result = *(CFDataRef *)(a1 + 8);
    if (result)
    {
      v3 = (const UInt8 *)sub_20B995D64((uint64_t)result);
      v4 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v4 + 239) < 0)
        v5 = *(_QWORD *)(v4 + 224);
      else
        v5 = *(unsigned __int8 *)(v4 + 239);
      result = CFDataCreateWithBytesNoCopy(0, v3, v5, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
      *(_QWORD *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_20BA077A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[7];
  _QWORD v4[3];
  char v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v5 = 0;
  v2 = *a1;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_20BA07848;
  v3[3] = &unk_24C46C840;
  v3[5] = v4;
  v3[6] = a1;
  v3[4] = a2;
  sub_20B9C4FB8(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
}

void sub_20BA07830(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20BA07848(_QWORD *a1, uint64_t a2, UniChar *chars, unint64_t a4, _BYTE *a5)
{
  uint64_t *v8;
  const __CFAllocator *v9;
  const UniChar *v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  CFTypeRef cf;
  CFTypeRef v19;
  int v20;
  char v21;
  char **v22;
  char *v23;

  v8 = (uint64_t *)a1[6];
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  cf = CFStringCreateWithCharactersNoCopy(0, chars, a4 >> 1, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v17 = 0;
  v10 = (const UniChar *)sub_20B9C56C4(*v8, *(_DWORD *)(a2 + 8), &v17);
  v19 = CFStringCreateWithCharactersNoCopy(0, v10, (unint64_t)v17 >> 1, v9);
  v11 = *(unsigned __int16 *)(a2 + 2);
  v12 = atomic_load((unsigned __int8 *)&qword_25472C2B8);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25472C2B8))
  {
    xmmword_25472C2F8 = 0u;
    xmmword_25472C2E8 = 0u;
    dword_25472C308 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_20BA076FC, &xmmword_25472C2E8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C2B8);
  }
  v13 = atomic_load(qword_25472C2C0);
  if (v13 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(qword_25472C2C0, &v22, (void (__cdecl *)(void *))sub_20BA07A8C);
  }
  v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472C2E8 + 8));
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = v11;
    if (*((_QWORD *)&xmmword_25472C2E8 + 1) <= v11)
      v15 = v11 % *((_QWORD *)&xmmword_25472C2E8 + 1);
  }
  else
  {
    v15 = (DWORD2(xmmword_25472C2E8) - 1) & v11;
  }
  v16 = *(uint64_t **)(xmmword_25472C2E8 + 8 * v15);
  do
  {
    do
      v16 = (uint64_t *)*v16;
    while (v16[1] != v11);
  }
  while (*((unsigned __int16 *)v16 + 8) != (_DWORD)v11);
  v20 = *((_DWORD *)v16 + 5);
  (*(void (**)(void))(a1[4] + 16))();
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *a5 = 1;
  CFRelease(cf);
  CFRelease(v19);
}

__n128 sub_20BA07A2C()
{
  __n128 result;

  sub_20B8B2334(0);
  result.n128_u32[0] = dword_25472C9E4;
  result.n128_u16[2] = word_25472C9E0;
  result.n128_u16[3] = word_25472C9E8;
  result.n128_u64[1] = qword_25472C9EA;
  xmmword_25472C2D0 = (__int128)result;
  word_25472C2E0 = dword_25472C9E4;
  return result;
}

void sub_20BA07A8C()
{
  sub_20B8B2334(0);
  sub_20BA07B30(dword_25472C9E4, dword_25472C9E4, 0);
  sub_20BA07B30(HIWORD(dword_25472C9E4), SHIWORD(dword_25472C9E4), 1);
  sub_20BA07B30(word_25472C9E0, word_25472C9E0, 2);
  sub_20BA07B30(word_25472C9E8, word_25472C9E8, 3);
  sub_20BA07B30(qword_25472C9EA, qword_25472C9EA, 4);
  sub_20BA07B30(WORD1(qword_25472C9EA), SWORD1(qword_25472C9EA), 5);
  sub_20BA07B30(WORD2(qword_25472C9EA), SWORD2(qword_25472C9EA), 6);
  sub_20BA07B30(HIWORD(qword_25472C9EA), SHIWORD(qword_25472C9EA), 7);
}

void sub_20BA07B30(unsigned __int16 a1, __int16 a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *j;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;

  v6 = a1;
  v7 = *((_QWORD *)&xmmword_25472C2E8 + 1);
  if (*((_QWORD *)&xmmword_25472C2E8 + 1))
  {
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472C2E8 + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a1;
      if (*((_QWORD *)&xmmword_25472C2E8 + 1) <= (unint64_t)a1)
        v3 = (unint64_t)a1 % *((_QWORD *)&xmmword_25472C2E8 + 1);
    }
    else
    {
      v3 = (DWORD2(xmmword_25472C2E8) - 1) & a1;
    }
    v9 = *(uint64_t ****)(xmmword_25472C2E8 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t **)*i)
      {
        v11 = (unint64_t)i[1];
        if (v11 == a1)
        {
          if (*((unsigned __int16 *)i + 8) == a1)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((_QWORD *)&xmmword_25472C2E8 + 1))
              v11 %= *((_QWORD *)&xmmword_25472C2E8 + 1);
          }
          else
          {
            v11 &= *((_QWORD *)&xmmword_25472C2E8 + 1) - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_WORD *)v12 + 8) = a2;
  *((_DWORD *)v12 + 5) = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)&xmmword_25472C2F8 + 1) + 1);
  if (!v7 || (float)(*(float *)&dword_25472C308 * (float)v7) < v13)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_25472C308);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)&xmmword_25472C2E8 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)&xmmword_25472C2F8 + 1) / *(float *)&dword_25472C308);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)&xmmword_25472C2E8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)xmmword_25472C2E8;
          *(_QWORD *)&xmmword_25472C2E8 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&xmmword_25472C2E8 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472C2E8 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)xmmword_25472C2F8;
          if ((_QWORD)xmmword_25472C2F8)
          {
            v22 = *(_QWORD *)(xmmword_25472C2F8 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472C2E8 + 8 * v22) = &xmmword_25472C2F8;
            for (j = *v21; j; v22 = v28)
            {
              v28 = j[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(xmmword_25472C2E8 + 8 * v28))
                {
                  *(_QWORD *)(xmmword_25472C2E8 + 8 * v28) = v21;
                  goto LABEL_55;
                }
                *v21 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472C2E8 + 8 * v28);
                **(_QWORD **)(xmmword_25472C2E8 + 8 * v28) = j;
                j = v21;
              }
              v28 = v22;
LABEL_55:
              v21 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v32 = (void *)xmmword_25472C2E8;
        *(_QWORD *)&xmmword_25472C2E8 = 0;
        if (v32)
          operator delete(v32);
        v7 = 0;
        *((_QWORD *)&xmmword_25472C2E8 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = xmmword_25472C2E8;
  v30 = *(_QWORD **)(xmmword_25472C2E8 + 8 * v3);
  if (v30)
  {
    *v12 = *v30;
LABEL_72:
    *v30 = v12;
    goto LABEL_73;
  }
  *v12 = xmmword_25472C2F8;
  *(_QWORD *)&xmmword_25472C2F8 = v12;
  *(_QWORD *)(v29 + 8 * v3) = &xmmword_25472C2F8;
  if (*v12)
  {
    v31 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(xmmword_25472C2E8 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)&xmmword_25472C2F8 + 1);
}

void sub_20BA07F2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA07F40(_QWORD *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int *a5, uint64_t a6)
{
  int v10;
  CFAllocatorRef *v11;
  CFStringRef Copy;
  CFStringRef v13;
  CFStringRef v14;
  void *__p;
  void *v17;
  uint64_t v18;

  v10 = *a5;
  v17 = 0;
  v18 = 0;
  __p = 0;
  sub_20B87ACC8(&__p, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 1);
  sub_20B9AA310((uint64_t)a1, v10, (uint64_t)&__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  *a1 = &off_24C45FA58;
  v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (a2)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  else
    Copy = 0;
  a1[6] = Copy;
  if (a3)
    v13 = CFStringCreateCopy(*v11, a3);
  else
    v13 = 0;
  a1[7] = v13;
  if (a4)
    v14 = CFStringCreateCopy(*v11, a4);
  else
    v14 = 0;
  a1[8] = v14;
  return a1;
}

void sub_20BA08034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  const void **v11;
  const void **v12;

  sub_20B87E150(v12, 0);
  sub_20B87E150(v11, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA08078(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  const __CFString *v6;
  CFAllocatorRef *v7;
  CFStringRef Copy;
  const __CFString *v9;
  CFStringRef v10;
  const __CFString *v11;
  CFStringRef v12;

  *(_QWORD *)a1 = &off_24C467C40;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)a1 = &off_24C45FA58;
  v6 = *(const __CFString **)(a2 + 48);
  v7 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v6)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v6);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 48) = Copy;
  v9 = *(const __CFString **)(a2 + 56);
  if (v9)
    v10 = CFStringCreateCopy(*v7, v9);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(const __CFString **)(a2 + 64);
  if (v11)
    v12 = CFStringCreateCopy(*v7, v11);
  else
    v12 = 0;
  *(_QWORD *)(a1 + 64) = v12;
  return a1;
}

void sub_20BA08138(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  sub_20B87E150(v2, 0);
  sub_20B87E150((const void **)(v1 + 48), 0);
  _Unwind_Resume(a1);
}

__CFString *sub_20BA08164(uint64_t a1)
{
  unsigned int v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  const __CFAllocator *v8;
  __CFString *Mutable;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  const __CFString *v15;
  UniChar chars;

  v1 = *(_DWORD *)(a1 + 44);
  if (!v1)
    return 0;
  v3 = 0;
  v4 = 0;
LABEL_3:
  v5 = v3;
  v6 = v4 <= 0x20 ? 32 : v4;
  while (v6 != v4)
  {
    v7 = v4++;
    if (((v1 >> v7) & 1) != 0)
    {
      v3 = v5 + 1;
      if (v4 - 1 < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_3;
      break;
    }
  }
  if (!v5)
    return 0;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v10 = 0;
LABEL_11:
  v11 = 0;
  if (v10 <= 0x20)
    v12 = 32;
  else
    v12 = v10;
  v13 = v10 - v12;
  while (v13 + v11)
  {
    v14 = v10 + v11++;
    if (((*(_DWORD *)(a1 + 44) >> v14) & 1) != 0)
    {
      v10 += v11;
      if (v10 != -1 && v11)
      {
        chars = v11 + 48;
        v15 = CFStringCreateWithCharacters(v8, &chars, 1);
        CFStringAppend(Mutable, v15);
        CFRelease(v15);
        goto LABEL_11;
      }
      return Mutable;
    }
  }
  return Mutable;
}

void sub_20BA08284(uint64_t a1)
{
  sub_20B9C9A14(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA082A8(uint64_t a1)
{
  const __CFString *v1;

  v1 = *(const __CFString **)(a1 + 56);
  if (v1)
    CFStringGetLength(v1);
  return 0;
}

BOOL sub_20BA082D4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) != 0;
}

void sub_20BA082E8(uint64_t a1)
{
  sub_20BA0F08C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA0830C(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *__p[2];
  char v11;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_QWORD *)a1 = &off_24C4672B0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  sub_20BA0D870((_QWORD *)(a1 + 184));
  sub_20BA0D870((_QWORD *)(a1 + 200));
  *(_QWORD *)(a1 + 216) = &off_24C467560;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 4;
  *(_QWORD *)(a1 + 312) = &off_24C467210;
  *(_OWORD *)(a1 + 288) = 0u;
  sub_20B8789BC(a1 + 320);
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  sub_20B827F10(a1 + 704);
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  sub_20B827F10(a1 + 1000);
  *(_QWORD *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1312) = 0;
  sub_20B80BBD0(__p, "Dictionary Lookup");
  sub_20B95ABF0((_QWORD *)(a1 + 1336), (__int128 *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  sub_20B80BBD0(__p, "Trie Lookup");
  sub_20B95ABF0((_QWORD *)(a1 + 1392), (__int128 *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  v2 = 0;
  *(_QWORD *)(a1 + 1296) = sub_20B896F94();
  v3 = (uint64_t *)(a1 + 1480);
  v4 = *(_QWORD *)(a1 + 1512);
  do
  {
    v5 = *(_QWORD *)(a1 + 1488);
    v6 = *v3;
    if (v5 == *v3)
      v7 = 0;
    else
      v7 = ((v5 - *v3) << 9) - 1;
    v8 = v4 + *(_QWORD *)(a1 + 1504);
    if (v7 == v8)
    {
      sub_20BA0DCD0((_QWORD *)(a1 + 1472));
      v6 = *(_QWORD *)(a1 + 1480);
      v8 = *(_QWORD *)(a1 + 1512) + *(_QWORD *)(a1 + 1504);
    }
    *(_BYTE *)(*(_QWORD *)(v6 + ((v8 >> 9) & 0x7FFFFFFFFFFFF8)) + (v8 & 0xFFF)) = v2;
    v4 = *(_QWORD *)(a1 + 1512) + 1;
    *(_QWORD *)(a1 + 1512) = v4;
    ++v2;
  }
  while (v2 != 255);
  return a1;
}

void sub_20BA0854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, std::mutex *a12, void **a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void **v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;

  sub_20BA0D548((uint64_t **)(v19 + 1520), 0);
  sub_20BA0DA80(v25);
  if (*(char *)(v19 + 1471) < 0)
    operator delete(*v26);
  if (*(char *)(v19 + 1415) < 0)
    operator delete(*v24);
  if (*(char *)(v19 + 1359) < 0)
    operator delete(*v23);
  sub_20B8A0FF4(a11);
  sub_20BA0DB44(v21);
  v27 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v19 + 280) = v27;
    operator delete(v27);
  }
  sub_20BA0DC3C(v20);
  *(_QWORD *)(v19 + 200) = &unk_24C467270;
  v28 = *(_QWORD *)(v19 + 208);
  if (v28)
    MEMORY[0x20BD39C80](v28, 0x1000C8077774924);
  *(_QWORD *)(v19 + 184) = &unk_24C467270;
  v29 = *(_QWORD *)(v19 + 192);
  if (v29)
    MEMORY[0x20BD39C80](v29, 0x1000C8077774924);
  std::mutex::~mutex(a12);
  v30 = *(void **)(v19 + 56);
  if (v30)
  {
    *(_QWORD *)(v19 + 64) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v19 + 32);
  if (v31)
  {
    *(_QWORD *)(v19 + 40) = v31;
    operator delete(v31);
  }
  v32 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v19 + 16) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA086DC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C467270;
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  return a1;
}

uint64_t sub_20BA08728(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[2];
  if (v3 != v2)
  {
    do
    {
      if ((*(_DWORD *)(*v3 + 380) - 8) <= 0xFFFFFFFD)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)a1[2];
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)a1[1];
  }
  a1[2] = v3;
  a1[5] = a1[4];
  a1[35] = a1[34];
  sub_20B878B18((uint64_t)(a1 + 40));
  result = a1[10];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    a1[10] = 0;
  }
  return result;
}

_OWORD *sub_20BA087B8(unint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  _OWORD *v19;
  void *v20;
  NSObject *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  int v30;
  int v31;
  _BOOL4 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v46;
  int v47;
  uint64_t *i;
  int v49;
  _BYTE *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  int v70;
  char *v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned __int16 v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  int v82;
  std::string *v83;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int16 v88;
  uint64_t v89;
  BOOL v91;
  const UniChar *v93;
  unsigned int v94;
  unsigned int v95;
  timeval *v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v102;
  unint64_t v103;
  void *v104;
  std::string *v106;
  unsigned __int8 *v107;
  _QWORD v109[8];
  char v110;
  _QWORD v111[8];
  char v112;
  std::string v113;
  _BYTE *v114;
  char v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  _BYTE buf[24];
  _BYTE *v123;
  char v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v120 = a4;
  if ((unint64_t)(a2 + 0xFFFF) <= a3)
    v12 = a2 + 0xFFFF;
  else
    v12 = (unsigned __int8 *)a3;
  if (v12 > a2)
  {
    v13 = *(_DWORD *)(a1 + 304);
    v14 = *(unsigned int **)(a1 + 688);
    v15 = a2;
    while (1)
    {
      v16 = v12 - v15;
      if ((*(_DWORD *)(a1 + 696) - 3) > 2)
      {
        v17 = *v15;
        if (((char)*v15 & 0x80000000) == 0)
          goto LABEL_10;
        if (v16 >= 2 && (v17 & 0xE0) == 0xC0)
        {
          v18 = 2;
          v17 = v15[1] & 0x3F | ((v17 & 0x1F) << 6);
        }
        else
        {
          if (v16 < 3)
            goto LABEL_29;
          if ((v17 & 0xF0) == 0xE0)
          {
            v17 = (v17 << 12) | ((v15[1] & 0x3F) << 6) | v15[2] & 0x3F;
            v18 = 3;
          }
          else
          {
            if (v16 < 4)
              goto LABEL_29;
            if ((v17 & 0xF8) == 0xF0)
            {
              v17 = 0;
              v18 = 4;
            }
            else
            {
              if (v16 < 5)
                goto LABEL_29;
              if ((v17 & 0xFC) == 0xF8)
              {
                v17 = 0;
                v18 = 5;
              }
              else
              {
                if (v16 < 6 || (v17 & 0xFE) != 0xFC)
                {
LABEL_29:
                  v17 = 0;
LABEL_10:
                  v18 = 1;
                  goto LABEL_26;
                }
                v17 = 0;
                v18 = 6;
              }
            }
          }
        }
      }
      else
      {
        if (v16 < 2)
        {
          v19 = 0;
          v8 = *v14;
          if ((v13 & *v14 & 0x3FFFF) == 0)
          {
            v18 = 0;
            goto LABEL_31;
          }
          return v19;
        }
        v17 = *(_WORD *)v15;
        v18 = 2;
      }
LABEL_26:
      v8 = v14[v17];
      if ((v13 & v8 & 0x3FFFF) != 0)
      {
        v15 += v18;
        v13 = v14[v17];
        if (v15 < v12)
          continue;
      }
      goto LABEL_31;
    }
  }
  v18 = 0;
  v15 = a2;
LABEL_31:
  v19 = 0;
  if (v15 && v15 != v12)
  {
    v116 = 0;
    v117 = &v116;
    v118 = 0x2000000000;
    v119 = 0;
    v20 = *(void **)(a4 + 136);
    v21 = sub_20B9A7C5C(5u);
    v22 = v12 - v15;
    v23 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
    v104 = v20;
    v24 = (unint64_t)(v12 - v15) >> 1;
    if (v23)
    {
      sub_20B8D15F4(v15, v24, &v113);
      v83 = &v113;
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v83 = (std::string *)v113.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v83;
      _os_log_debug_impl(&dword_20B7F7000, v21, OS_LOG_TYPE_DEBUG, "[TokenizerImpl::lookup] %s", buf, 0xCu);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      v24 = v22 >> 1;
    }
    v93 = (const UniChar *)v24;
    v113.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C460C88;
    *(_OWORD *)&v113.__r_.__value_.__r.__words[1] = 0uLL;
    v114 = 0;
    v115 = 0;
    v25 = *(_QWORD *)(a1 + 1312);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 184);
      if (v26)
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
        v25 = *(_QWORD *)(a1 + 1312);
        v28 = a6;
        if (v27)
        {
          v106 = *(std::string **)(v25 + 184);
          v107 = (unsigned __int8 *)(v15 - a6);
          v103 = (unint64_t)(v15 - a6) >> 1;
LABEL_42:
          if (*(_BYTE *)(a1 + 1360))
          {
            gettimeofday((timeval *)(a1 + 1368), 0);
            v28 = a6;
            *(_BYTE *)(a1 + 1361) = 1;
          }
          v29 = *(_QWORD **)(a1 + 8);
          if (v29 != *(_QWORD **)(a1 + 16))
          {
            v30 = a5 & 0x200C4;
            v31 = a5 & 0x1000;
            v34 = v22 == a7 || v22 > 3 || v22 == 2;
            if (v30 == 196)
              v35 = 258;
            else
              v35 = 2;
            if (v30 == 196)
              v36 = 257;
            else
              v36 = 1;
            if ((a5 & 0x80000) == 0)
              v35 = (((a5 & 0x80) != 0) << 8) | 2;
            v37 = v31 | v35;
            if ((a5 & 0x80000) == 0)
              v36 = (((a5 & 0x80) != 0) << 8) | 1;
            v38 = v31 | v36;
            v39 = a5 & 0x1000 | (((a5 >> 8) & 7) << 13);
            v40 = v39 | (((a5 & 0x80) != 0) << 8) | 2;
            v41 = v39 | (((a5 & 0x80) != 0) << 8) | 1;
            v42 = v37 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
            if ((a5 & 0x40) != 0)
              v43 = v42;
            else
              v43 = v40;
            v44 = v38 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
            if ((a5 & 0x40) == 0)
              v44 = v41;
            v100 = a1 + 1392;
            v46 = v15 != v28 || (a5 & 0x200C0) != 192 || (a5 & 6) == 0;
            v102 = (a5 >> 3) & 0x10000;
            v97 = v34 & (a5 >> 2);
            v96 = (timeval *)(a1 + 1424);
            if (v46)
              v47 = 0;
            else
              v47 = 256;
            v98 = v47 | v43 & 0xFFFFF8FF;
            v99 = v43;
            v94 = v47 | v44 & 0xFFFFF8FF;
            v95 = v44;
            for (i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
            {
              v49 = *(_DWORD *)(*i + 380);
              if ((a5 & 0x40000) == 0 && v49 == 1 || (a5 & 0x100000) != 0 && (v49 & 0xFFFFFFFD) == 1)
                goto LABEL_103;
              if (*(_BYTE *)(a1 + 1416))
              {
                gettimeofday(v96, 0);
                *(_BYTE *)(a1 + 1417) = 1;
              }
              bzero(v104, 0x3000uLL);
              v50 = sub_20B896F94();
              v51 = v99;
              if (!*v50)
                v51 = v98;
              v52 = *i;
              v53 = *(_QWORD *)(a1 + 1312);
              *(_QWORD *)buf = &off_24C459398;
              *(_QWORD *)&buf[8] = &v120;
              v123 = buf;
              v54 = (*(uint64_t (**)(uint64_t, _QWORD, unsigned __int8 *, int64_t, std::string *, uint64_t, unsigned __int8 *, void *, uint64_t, _BYTE *, unint64_t, uint64_t))(*(_QWORD *)v52 + 88))(v52, v51 | v102, v15, v12 - v15, v106, v53, v107, v104, 512, buf, v103, a8);
              v55 = v123;
              if (v123 == buf)
              {
                v55 = buf;
                v56 = 4;
              }
              else
              {
                if (!v123)
                  goto LABEL_92;
                v56 = 5;
              }
              (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_92:
              sub_20B95AC7C(v100, 0);
              sub_20BA094F8(a1, v120, (__int16)a2, (uint64_t)v15, v12 - v15, a5, v54, v29, v117 + 3, 0);
              if (v97)
              {
                if (*(_BYTE *)(a1 + 1416))
                {
                  gettimeofday(v96, 0);
                  *(_BYTE *)(a1 + 1417) = 1;
                }
                bzero(v104, 0x3000uLL);
                v57 = sub_20B896F94();
                v58 = v95;
                if (!*v57)
                  v58 = v94;
                v59 = *i;
                v60 = *(_QWORD *)(a1 + 1312);
                *(_QWORD *)buf = &off_24C459340;
                *(_QWORD *)&buf[8] = &v120;
                v123 = buf;
                v61 = (*(uint64_t (**)(uint64_t, _QWORD, unsigned __int8 *, int64_t, std::string *, uint64_t, unsigned __int8 *, void *, uint64_t, _BYTE *, unint64_t, uint64_t))(*(_QWORD *)v59 + 88))(v59, v58 | v102, v15, v12 - v15, v106, v60, v107, v104, 512, buf, v103, a8);
                v62 = v123;
                if (v123 == buf)
                {
                  v62 = buf;
                  v63 = 4;
LABEL_101:
                  (*(void (**)(void))(*v62 + 8 * v63))();
                }
                else if (v123)
                {
                  v63 = 5;
                  goto LABEL_101;
                }
                sub_20B95AC7C(v100, 0);
                sub_20BA094F8(a1, v120, (__int16)a2, (uint64_t)v15, v12 - v15, a5, v61, v29, v117 + 3, 1);
              }
LABEL_103:
              ++v29;
            }
          }
          sub_20B95AC7C(a1 + 1336, 0);
          *(_QWORD *)buf = v15;
          *(_QWORD *)&buf[8] = v12 - v15;
          *(_QWORD *)&buf[16] = v107;
          v123 = (_BYTE *)a5;
          if ((a5 & 0x100000) == 0)
          {
            v64 = *(_QWORD *)(a1 + 1304);
            if (v64)
            {
              sub_20BA099E4(a1, *(_QWORD *)(a1 + 168), (__int16)a2, v120, *(_WORD *)(v64 + 52), 7000, (uint64_t)buf, v117 + 3);
              sub_20BA099E4(a1, *(_QWORD *)(a1 + 176), (__int16)a2, v120, *(_WORD *)(*(_QWORD *)(a1 + 1304) + 68), 5200, (uint64_t)buf, v117 + 3);
            }
          }
          v65 = v106[1].__r_.__value_.__s.__data_[8];
          v66 = *(_QWORD *)(a1 + 1520);
          v111[0] = MEMORY[0x24BDAC760];
          v111[1] = 0x40000000;
          v111[2] = sub_20BA09BE4;
          v111[3] = &unk_24C46C868;
          v111[6] = a2;
          v111[7] = v15;
          v112 = v65;
          v111[4] = &v116;
          v111[5] = v120;
          sub_20B8905AC(v66, (UniChar *)v15, (unint64_t)v93, 1, (uint64_t)v111);
          v67 = *(_QWORD **)(a1 + 1520);
          v109[0] = MEMORY[0x24BDAC760];
          v109[1] = 0x40000000;
          v109[2] = sub_20BA09D34;
          v109[3] = &unk_24C46CAE0;
          v109[6] = a2;
          v109[7] = v15;
          v110 = v65;
          v109[4] = &v116;
          v109[5] = v120;
          sub_20B890ADC(v67, 1, (UniChar *)v15, v93, (a5 >> 6) & 1, (uint64_t)v109);
          v68 = v117 + 3;
          v19 = (_OWORD *)v117[3];
          if ((v8 & 0x80000000) == 0 && v19)
            goto LABEL_196;
          v69 = (char *)&v15[v18];
          if (v69 > (char *)v12)
          {
            v19 = sub_20BA09D84(a1, v120, v8, (int)a2, v15, (uint64_t)v69, v65 != 0, v68);
            goto LABEL_196;
          }
          v70 = v65;
          if ((v8 & 0x40000000) == 0)
          {
            v71 = 0;
            v72 = (int)a2;
            goto LABEL_160;
          }
          v72 = (int)a2;
          v73 = 0;
          if (v69 >= (char *)v12)
          {
            v71 = v69;
            goto LABEL_140;
          }
          v71 = v69;
          v74 = v8;
          while (1)
          {
            v75 = v12 - (unsigned __int8 *)v71;
            if ((*(_DWORD *)(a1 + 696) - 3) > 2)
            {
              v76 = *v71;
              if ((*v71 & 0x80000000) == 0)
                goto LABEL_119;
              if (v75 >= 2 && (v76 & 0xE0) == 0xC0)
              {
                v77 = 2;
                v76 = v71[1] & 0x3F | ((v76 & 0x1F) << 6);
              }
              else
              {
                if (v75 < 3)
                  goto LABEL_138;
                if ((v76 & 0xF0) == 0xE0)
                {
                  v76 = (v76 << 12) | ((v71[1] & 0x3F) << 6) | v71[2] & 0x3F;
                  v77 = 3;
                }
                else
                {
                  if (v75 < 4)
                    goto LABEL_138;
                  if ((v76 & 0xF8) == 0xF0)
                  {
                    v76 = 0;
                    v77 = 4;
                  }
                  else
                  {
                    if (v75 < 5)
                      goto LABEL_138;
                    if ((v76 & 0xFC) == 0xF8)
                    {
                      v76 = 0;
                      v77 = 5;
                    }
                    else
                    {
                      if (v75 < 6 || (v76 & 0xFE) != 0xFC)
                      {
LABEL_138:
                        v76 = 0;
LABEL_119:
                        v77 = 1;
                        goto LABEL_123;
                      }
                      v76 = 0;
                      v77 = 6;
                    }
                  }
                }
              }
            }
            else
            {
              if (v75 < 2)
              {
                if ((v74 & **(_DWORD **)(a1 + 688) & 0x3FFFF) == 0)
                {
LABEL_140:
                  if (v71)
                  {
LABEL_141:
                    if (v73 <= *(_QWORD *)(a1 + 992))
                    {
                      v79 = v71 - (char *)v15;
                      if ((a5 & 0x40) == 0 || !v19)
                        goto LABEL_154;
                      if (v79 >= 2)
                      {
                        v80 = v79 >> 1;
                        v81 = v15;
                        while (1)
                        {
                          v82 = *(unsigned __int16 *)v81;
                          v81 += 2;
                          if ((v82 - 123) <= 0xFFFFFFE5)
                            break;
                          if (!--v80)
                            goto LABEL_160;
                        }
LABEL_154:
                        if ((v8 & *(_DWORD *)(a1 + 1288) & 0x3FFFF) != 0 && v79 > 0xA)
                          v79 = 10;
                        sub_20BA09D84(a1, v120, v8, (int)a2, v15, (uint64_t)&v15[v79], v70 != 0, v68);
                      }
                    }
LABEL_160:
                    if ((v8 & 0x3C000000) == 0)
                    {
LABEL_193:
                      v86 = (unint64_t)v69;
LABEL_194:
                      v19 = (_OWORD *)v117[3];
                      if (!v19)
                      {
                        sub_20BA09D84(a1, v120, v8, v72, v15, v86, v70 != 0, v117 + 3);
                        v19 = (_OWORD *)v117[3];
                      }
                      goto LABEL_196;
                    }
                    v85 = 1;
                    while (2)
                    {
                      v86 = (unint64_t)v71;
                      if (v69 != v71)
                      {
                        sub_20BA09D84(a1, v120, v8, v72, v15, (uint64_t)v69, v70 != 0, v117 + 3);
                        v87 = v12 - (unsigned __int8 *)v69;
                        if ((*(_DWORD *)(a1 + 696) - 3) > 2)
                        {
                          v88 = *v69;
                          if (*v69 < 0)
                          {
                            if (v87 >= 2 && (v88 & 0xE0) == 0xC0)
                            {
                              v89 = 2;
                              v88 = v69[1] & 0x3F | ((v88 & 0x1F) << 6);
                              goto LABEL_172;
                            }
                            if (v87 >= 3)
                            {
                              if ((v88 & 0xF0) == 0xE0)
                              {
                                v88 = (v88 << 12) | ((v69[1] & 0x3F) << 6) | v69[2] & 0x3F;
                                v89 = 3;
                                goto LABEL_172;
                              }
                              if (v87 >= 4)
                              {
                                if ((v88 & 0xF8) == 0xF0)
                                {
                                  v88 = 0;
                                  v89 = 4;
                                  goto LABEL_172;
                                }
                                if (v87 >= 5)
                                {
                                  if ((v88 & 0xFC) == 0xF8)
                                  {
                                    v88 = 0;
                                    v89 = 5;
                                    goto LABEL_172;
                                  }
                                  if (v87 >= 6 && (v88 & 0xFE) == 0xFC)
                                  {
                                    v88 = 0;
                                    v89 = 6;
                                    goto LABEL_172;
                                  }
                                }
                              }
                            }
                            v88 = 0;
                          }
                          v89 = 1;
                          goto LABEL_172;
                        }
                        if (v87 < 2)
                        {
                          v89 = 0;
                          v88 = 0;
                        }
                        else
                        {
                          v88 = *(_WORD *)v69;
                          v89 = 2;
                        }
LABEL_172:
                        if ((v8 & 0x3FFFF & *(_DWORD *)(*(_QWORD *)(a1 + 688) + 4 * v88)) == 0)
                          goto LABEL_193;
                        v86 = (unint64_t)&v69[v89];
                      }
                      v91 = v85++ >= ((v8 >> 26) & 0xF) || v86 > (unint64_t)v12;
                      v69 = (char *)v86;
                      if (v91)
                        goto LABEL_194;
                      continue;
                    }
                  }
                }
LABEL_196:
                v113.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C460C88;
                *(_QWORD *)buf = &v113.__r_.__value_.__l.__size_;
                sub_20B8B66F8((void ***)buf);
                _Block_object_dispose(&v116, 8);
                return v19;
              }
              v76 = *(_WORD *)v71;
              v77 = 2;
            }
LABEL_123:
            v78 = *(_DWORD *)(*(_QWORD *)(a1 + 688) + 4 * v76);
            if ((v74 & v78 & 0x3FFFF) != 0)
            {
              v71 += v77;
              ++v73;
              v74 = v78;
              if (v71 < (char *)v12)
                continue;
            }
            goto LABEL_141;
          }
        }
        v24 = (unint64_t)v93;
      }
    }
    sub_20BA04898((unsigned __int16 *)v15, v24, (a5 >> 7) & 0xE | BYTE1(a5) & 0x10 | (a5 >> 1) & 0x20, (int *)v25, *(CFArrayRef **)(a1 + 1320), (uint64_t)buf);
    sub_20B8CC7B0((void ***)&v113.__r_.__value_.__l.__size_);
    *(_OWORD *)&v113.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf[8];
    v114 = v123;
    *(_QWORD *)&buf[16] = 0;
    v123 = 0;
    v115 = v124;
    *(_QWORD *)buf = off_24C460C88;
    *(_QWORD *)&buf[8] = 0;
    v121 = (void **)&buf[8];
    sub_20B8B66F8(&v121);
    v103 = 0;
    v28 = a6;
    v107 = (unsigned __int8 *)(v15 - a6);
    v106 = &v113;
    goto LABEL_42;
  }
  return v19;
}

void sub_20BA09448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 248) = off_24C460C88;
  *(_QWORD *)(v15 - 160) = a15;
  sub_20B8B66F8((void ***)(v15 - 160));
  _Block_object_dispose((const void *)(v15 - 208), 8);
  _Unwind_Resume(a1);
}

unint64_t sub_20BA094F8(unint64_t result, uint64_t a2, __int16 a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, _QWORD *a8, _QWORD *a9, char a10)
{
  uint64_t v13;
  int v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _DWORD *v23;
  unsigned __int16 v24;
  __int16 v25;
  _OWORD *v26;
  _DWORD *v27;
  int v28;
  int v29;
  __int16 v30;
  char v31;
  __int16 v33;
  int v34;
  int v35;
  uint64_t v36;
  float v37;
  unsigned __int8 v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  __int16 v45;
  __int16 v46;
  uint64_t v48;
  unsigned __int16 *v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  float *v53;
  __int16 v54;
  _DWORD *v55;
  unint64_t v56;
  int v57;
  _QWORD *v60;
  unsigned __int8 *v61;
  _WORD *v62;

  v56 = result;
  if (a7)
  {
    v13 = 0;
    v14 = *(_DWORD *)(*a8 + 380);
    v52 = a4 - a3;
    v54 = a4 - a3 + a5;
    v57 = a6 & 0x1700;
    v50 = a6 & 0x1780;
    v48 = *(_QWORD *)(a2 + 136);
    while (1)
    {
      v51 = v13;
      v15 = (_BYTE *)(v48 + 24 * v13);
      result = (*(uint64_t (**)(_QWORD, _BYTE *))(*(_QWORD *)*a8 + 136))(*a8, v15);
      if (result)
        break;
LABEL_75:
      v13 = v51 + 1;
      if (v51 + 1 == a7)
        return result;
    }
    v16 = 0;
    v17 = v48 + 24 * v51;
    v62 = (_WORD *)(v17 + 12);
    v55 = (_DWORD *)(v17 + 8);
    v60 = (_QWORD *)(v17 + 16);
    v61 = (unsigned __int8 *)(v17 + 1);
    v53 = (float *)(v17 + 4);
    v49 = (unsigned __int16 *)(v17 + 14);
    while (1)
    {
      v18 = (*(uint64_t (**)(_QWORD, _BYTE *, unint64_t))(*(_QWORD *)*a8 + 128))(*a8, v15, v16);
      v19 = *(_WORD *)(v18 + 4);
      if ((v19 & 0x40) == 0)
      {
        v20 = v18;
        if (v14 == 6)
          break;
        if (((v19 & 2) != 0 || !a10 || (a6 & 0x20000) != 0 && (v19 & 1) != 0) && ((a6 & 8) == 0 || (v19 & 8) != 0))
        {
          if ((a6 & 2) != 0)
          {
            sub_20B871810(*(_QWORD **)(a2 + 16));
            v22 = v26;
            v26[5] = 0u;
            v26[6] = 0u;
            v26[3] = 0u;
            v26[4] = 0u;
            v26[1] = 0u;
            v26[2] = 0u;
            *v26 = 0u;
            v27 = (_DWORD *)*a8;
            *((_WORD *)v22 + 47) = *(_WORD *)(v20 + 2);
            *((_WORD *)v22 + 46) = *(_WORD *)(v20 + 6);
            *((_DWORD *)v22 + 18) = *(_DWORD *)(v20 + 8) + (v27[95] << 28);
            *((_WORD *)v22 + 42) = *(_WORD *)v20;
            *((_QWORD *)v22 + 7) = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v27 + 144))(v27, v20);
            goto LABEL_22;
          }
          if ((v19 & 1) != 0)
            break;
        }
      }
LABEL_71:
      ++v16;
      result = (*(uint64_t (**)(_QWORD, _BYTE *))(*(_QWORD *)*a8 + 136))(*a8, v15);
      if (v16 >= result)
        goto LABEL_75;
    }
    sub_20B871810(*(_QWORD **)(a2 + 16));
    v22 = v21;
    v21[5] = 0u;
    v21[6] = 0u;
    v21[3] = 0u;
    v21[4] = 0u;
    v21[1] = 0u;
    v21[2] = 0u;
    *v21 = 0u;
    v23 = (_DWORD *)*a8;
    *((_WORD *)v22 + 47) = *(_WORD *)(v20 + 2);
    *((_WORD *)v22 + 46) = *(_WORD *)(v20 + 6);
    *((_DWORD *)v22 + 18) = *(_DWORD *)(v20 + 8) + (v23[95] << 28);
    *((_WORD *)v22 + 42) = *(_WORD *)v20;
    *((_QWORD *)v22 + 7) = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v23 + 144))(v23, v20);
    if ((a6 & 2) == 0)
    {
      if (*(unsigned __int8 *)v62 <= a5)
        v24 = *(unsigned __int8 *)v62;
      else
        v24 = a5;
      *((_WORD *)v22 + 44) = v24;
      v25 = v24 + v52;
      goto LABEL_25;
    }
LABEL_22:
    v24 = a5;
    if ((a6 & 8) != 0)
      v24 = *(unsigned __int8 *)v62;
    *((_WORD *)v22 + 44) = v24;
    v25 = v54;
LABEL_25:
    *((_WORD *)v22 + 45) = v25;
    v28 = *v61;
    if (v14 == 2)
      v29 = 0;
    else
      v29 = *v55 + (v14 << 28);
    *((_DWORD *)v22 + 20) = v29;
    *((_BYTE *)v22 + 108) = *(_BYTE *)(*a8 + 792);
    *((_QWORD *)v22 + 6) = a4;
    *((_QWORD *)v22 + 8) = *v60;
    v30 = *(_WORD *)(v20 + 4);
    if (v14 == 7)
    {
      v31 = 9;
    }
    else if (a5 <= v24 && (a10 & 1) != 0)
    {
      v31 = 5;
    }
    else if ((v30 & 3) == 0 || v14 == 6)
    {
      v31 = 6;
    }
    else
    {
      v31 = 0;
    }
    *((_BYTE *)v22 + 109) = v31;
    *((_BYTE *)v22 + 107) = *v15;
    *((_QWORD *)v22 + 3) = *a9;
    *((_BYTE *)v22 + 106) = v28 & 1;
    v33 = v30 | 0x10;
    if (v14 != 8)
      v33 = v30;
    *((_WORD *)v22 + 52) = v33;
    v34 = *((__int16 *)v22 + 42);
    if ((a6 & 0x80) != 0 && (a6 & 0x80000) != 0 && v28 && (v33 & 2) == 0)
      goto LABEL_71;
    if (v57)
    {
      if ((*v62 & 0x100) != 0)
      {
        v40 = *(_QWORD *)(v56 + 1296);
        v41 = *(__int16 *)(v40 + 552);
        v34 += v41;
        v35 = (int)(float)((float)(*(float *)(v40 + 448) * (float)v41) + 0.0);
        if (!v28)
          goto LABEL_53;
      }
      else
      {
        v35 = 0;
        if (!v28)
          goto LABEL_53;
      }
    }
    else
    {
      v35 = 0;
      if (!v50 || !v28)
        goto LABEL_53;
    }
    v36 = *(_QWORD *)(v56 + 1296);
    v37 = *v53 * (float)*(__int16 *)(v36 + 444);
    v34 = (int)(float)((float)v34 - v37);
    v35 = (int)(float)((float)v35 - (float)(v37 * *(float *)(v36 + 448)));
LABEL_53:
    if ((a6 & 4) != 0)
    {
      v38 = atomic_load((unsigned __int8 *)&qword_25472C318);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_25472C318))
      {
        qword_25472C310 = (uint64_t)sub_20B896F94();
        __cxa_guard_release(&qword_25472C318);
      }
      if ((a6 & 0x40) != 0)
        v39 = *v49 >> 1;
      else
        v39 = (*(unsigned __int8 *)v62 - *((unsigned __int16 *)v22 + 44)) / 2;
      v42 = __OFSUB__(v39, 1);
      v43 = v39 - 1;
      if (v43 < 0 != v42)
      {
        v44 = 0;
      }
      else
      {
        v44 = *(__int16 *)(qword_25472C310 + 536) + v43 * *(__int16 *)(qword_25472C310 + 538);
        v34 += v44;
      }
      v35 += v44;
    }
    if (v34 >= 0x7FFF)
      v45 = 0x7FFF;
    else
      v45 = v34;
    *((_WORD *)v22 + 42) = v45;
    if (v35 >= 0x7FFF)
      v46 = 0x7FFF;
    else
      v46 = v35;
    *((_WORD *)v22 + 43) = v46;
    *a9 = v22;
    goto LABEL_71;
  }
  return result;
}

void sub_20BA099CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C318);
  _Unwind_Resume(a1);
}

void sub_20BA099E4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, __int16 a6, uint64_t a7, _QWORD *a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  __int16 v25;
  std::mutex *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  char *v34;
  char *v35;

  v26 = (std::mutex *)(a1 + 104);
  v27 = std::mutex::try_lock((std::mutex *)(a1 + 104));
  if (a2 && v27)
  {
    v13 = *(void **)(a4 + 136);
    bzero(v13, 0x3000uLL);
    v14 = *(_QWORD *)a7 ? *(_QWORD *)(a7 + 8) >> 1 : 0;
    v30 = v13;
    v15 = sub_20B8F5AC8(a2, *(_QWORD *)(a1 + 1312), *(unsigned __int8 **)a7, v14, (uint64_t)v13, 0x200uLL, *(_DWORD *)(a7 + 24), *(_QWORD *)(a7 + 16));
    v16 = *(_DWORD *)(a2 + 112) == 2 ? 8 : 7;
    if (v15)
    {
      v17 = 0;
      v28 = v15;
      v29 = a2;
      do
      {
        sub_20B8F5CFC(a2, v30[6 * v17 + 2], &v34);
        v19 = v34;
        v18 = v35;
        if (v34 != v35)
        {
          do
          {
            if (v17 <= 0x1FF)
            {
              v20 = *(unsigned __int8 **)a7;
              v21 = *((_QWORD *)v19 + 2);
              v22 = *(_QWORD *)(a4 + 136);
              sub_20B871810(*(_QWORD **)(a4 + 16));
              v23 = (_BYTE *)(v22 + 24 * v17);
              *(_OWORD *)(v24 + 80) = 0u;
              *(_OWORD *)(v24 + 96) = 0u;
              *(_OWORD *)(v24 + 48) = 0u;
              *(_OWORD *)(v24 + 64) = 0u;
              *(_OWORD *)(v24 + 16) = 0u;
              *(_OWORD *)(v24 + 32) = 0u;
              *(_OWORD *)v24 = 0u;
              *(_WORD *)(v24 + 94) = a5;
              *(_WORD *)(v24 + 92) = a5;
              *(_WORD *)(v24 + 84) = a6;
              *(_QWORD *)(v24 + 56) = v21;
              v25 = v23[12];
              *(_WORD *)(v24 + 88) = v25;
              *(_BYTE *)(v24 + 106) = v23[1];
              *(_WORD *)(v24 + 90) = v25 + (_WORD)v20 - a3;
              *(_QWORD *)(v24 + 48) = v20;
              *(_BYTE *)(v24 + 107) = *v23;
              *(_BYTE *)(v24 + 109) = v16;
              *(_QWORD *)(v24 + 24) = *a8;
              *a8 = v24;
            }
            v19 += 56;
          }
          while (v19 != v18);
          v19 = v34;
        }
        if (v19)
        {
          v35 = v19;
          operator delete(v19);
        }
        ++v17;
        a2 = v29;
      }
      while (v17 != v28);
    }
  }
  if (v27)
    std::mutex::unlock(v26);
}

void sub_20BA09BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void sub_20BA09BE4(uint64_t a1, uint64_t a2)
{
  sub_20BA09C34(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 56), 2 * *(_WORD *)(a2 + 8), *(_WORD *)a2, *(_WORD *)(a2 + 2), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a1 + 64), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void sub_20BA09C34(uint64_t a1, __int16 a2, const void *a3, unsigned __int16 a4, __int16 a5, __int16 a6, int a7, int a8, _QWORD *a9)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  _QWORD *v21;

  sub_20B871810(*(_QWORD **)(a1 + 16));
  v18 = v17;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_WORD *)(v17 + 94) = a5;
  *(_WORD *)(v17 + 92) = a5;
  *(_DWORD *)(v17 + 72) = a7;
  *(_WORD *)(v17 + 84) = a6;
  *(_WORD *)(v17 + 86) = a6;
  *(_WORD *)(v17 + 88) = a4;
  *(_WORD *)(v17 + 90) = (_WORD)a3 - a2 + a4;
  *(_QWORD *)(v17 + 48) = a3;
  if (a8)
  {
    if (a3)
      v19 = a4 >> 1;
    else
      v19 = 0;
    v20 = (void *)sub_20BA0E488(a1, v19);
    memcpy(v20, a3, 2 * v19);
    v21 = sub_20BA0E514(a1);
    *v21 = v20;
    v21[1] = (2 * v19);
    *(_QWORD *)(v18 + 64) = v21;
  }
  *(_BYTE *)(v18 + 107) = 0;
  *(_BYTE *)(v18 + 109) = 11;
  *(_QWORD *)(v18 + 24) = *a9;
  *a9 = v18;
}

void sub_20BA09D34(uint64_t a1, uint64_t a2)
{
  sub_20BA09C34(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 56), 2 * *(_WORD *)(a2 + 8), *(_WORD *)a2, *(_WORD *)(a2 + 2), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a1 + 64), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

_OWORD *sub_20BA09D84(uint64_t a1, uint64_t a2, unsigned int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  unsigned int v30;
  uint64_t __n;
  unint64_t v32;

  v8 = a8;
  v9 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 16 * (a3 >> 18));
  v10 = v9[1];
  if (!v10)
    return (_OWORD *)*a8;
  v14 = a1;
  v15 = *v9;
  v16 = a6 - (_QWORD)a5;
  v17 = (a6 - a4);
  v18 = (unsigned __int16)(a6 - (_WORD)a5) >> 1;
  if (!a5)
    v18 = 0;
  __n = 2 * v18;
  v32 = v18;
  v30 = 2 * v18;
  do
  {
    sub_20B871810(*(_QWORD **)(a2 + 16));
    v20 = v19;
    v19[5] = 0u;
    v19[6] = 0u;
    v19[3] = 0u;
    v19[4] = 0u;
    v19[1] = 0u;
    v19[2] = 0u;
    *v19 = 0u;
    v21 = *(_DWORD **)(v14 + 80);
    *((_WORD *)v20 + 47) = *(_WORD *)(v15 + 2);
    *((_WORD *)v20 + 46) = *(_WORD *)(v15 + 6);
    *((_DWORD *)v20 + 18) = *(_DWORD *)(v15 + 8) + (v21[95] << 28);
    *((_WORD *)v20 + 42) = *(_WORD *)v15;
    v22 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v21 + 144))(v21, v15);
    *((_QWORD *)v20 + 6) = a5;
    *((_QWORD *)v20 + 7) = v22;
    *((_WORD *)v20 + 44) = v16;
    *((_WORD *)v20 + 45) = v17;
    *((_QWORD *)v20 + 3) = *v8;
    *((_BYTE *)v20 + 109) = 1;
    *((_DWORD *)v20 + 20) = 0;
    *((_BYTE *)v20 + 108) = *(_BYTE *)(*(_QWORD *)(v14 + 80) + 792);
    if ((_DWORD)a7)
    {
      v23 = v8;
      v24 = v17;
      v25 = v16;
      v26 = a7;
      v27 = (void *)sub_20BA0E488(a2, v32);
      memcpy(v27, a5, __n);
      v28 = sub_20BA0E514(a2);
      *v28 = v27;
      a7 = v26;
      v16 = v25;
      v17 = v24;
      v8 = v23;
      v14 = a1;
      v28[1] = v30;
      *((_QWORD *)v20 + 8) = v28;
    }
    v15 += 12;
    *v8 = v20;
    --v10;
  }
  while (v10);
  return v20;
}

uint64_t sub_20BA09F18(unint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t *v33;
  int v34;
  void *v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::string::value_type v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  int v50;
  std::string *p_p;
  int v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  _QWORD v59[8];
  std::string::value_type v60;
  _QWORD v61[8];
  std::string::value_type v62;
  std::string __p;
  _BYTE *v64;
  char v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  _BYTE buf[24];
  _BYTE *v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v69 = 0;
  v70 = a4;
  v66 = 0;
  v67 = &v66;
  v68 = 0x2000000000;
  if ((unint64_t)(a3 - a2) <= 0xFFFE)
    v8 = a3;
  else
    v8 = a2 + 0xFFFF;
  v9 = a2;
  if (v8 <= a2)
    goto LABEL_32;
  v10 = *(_DWORD *)(a1 + 304);
  v9 = a2;
  while (1)
  {
    v11 = v8 - v9;
    if ((*(_DWORD *)(a1 + 696) - 3) <= 2)
      break;
    v12 = *v9;
    if (((char)*v9 & 0x80000000) == 0)
      goto LABEL_10;
    if (v11 >= 2 && (v12 & 0xE0) == 0xC0)
    {
      v13 = 2;
      v12 = v9[1] & 0x3F | ((v12 & 0x1F) << 6);
    }
    else
    {
      if (v11 < 3)
        goto LABEL_29;
      if ((v12 & 0xF0) == 0xE0)
      {
        v12 = (v12 << 12) | ((v9[1] & 0x3F) << 6) | v9[2] & 0x3F;
        v13 = 3;
      }
      else
      {
        if (v11 < 4)
          goto LABEL_29;
        if ((v12 & 0xF8) == 0xF0)
        {
          v12 = 0;
          v13 = 4;
        }
        else
        {
          if (v11 < 5)
            goto LABEL_29;
          if ((v12 & 0xFC) == 0xF8)
          {
            v12 = 0;
            v13 = 5;
          }
          else
          {
            if (v11 < 6 || (v12 & 0xFE) != 0xFC)
            {
LABEL_29:
              v12 = 0;
LABEL_10:
              v13 = 1;
              goto LABEL_20;
            }
            v12 = 0;
            v13 = 6;
          }
        }
      }
    }
LABEL_20:
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 688) + 4 * v12);
    if ((v10 & v14 & 0x3FFFF) != 0)
    {
      v9 += v13;
      v10 = v14;
      if (v9 < v8)
        continue;
    }
    goto LABEL_32;
  }
  if (v11 >= 2)
  {
    v12 = *(_WORD *)v9;
    v13 = 2;
    goto LABEL_20;
  }
  if ((v10 & **(_DWORD **)(a1 + 688) & 0x3FFFF) != 0)
  {
    v15 = 0;
    goto LABEL_95;
  }
LABEL_32:
  v15 = 0;
  if (v9 && v9 != v8)
  {
    v16 = sub_20B9A7C5C(5u);
    v17 = v8 - v9;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v56 = v17 >> 1;
      sub_20B8D15F4(v9, v17 >> 1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "[TokenizerImpl::lookupOneWord] Input:[%s]", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v56 = v17 >> 1;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C460C88;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v64 = 0;
    v65 = 0;
    if ((a5 & 0x200000) != 0
      || (v18 = *(_QWORD *)(a1 + 1312)) == 0
      || (v19 = *(_QWORD *)(v18 + 184)) == 0
      || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19)
      || (v20 = *(std::string **)(*(_QWORD *)(a1 + 1312) + 184), (a5 & 2) != 0)
      && !v20[1].__r_.__value_.__s.__data_[8])
    {
      sub_20BA04898((unsigned __int16 *)v9, v56, (a5 >> 7) & 0xE | BYTE1(a5) & 0x10 | (a5 >> 1) & 0x20, *(int **)(a1 + 1312), *(CFArrayRef **)(a1 + 1320), (uint64_t)buf);
      sub_20B8CC7B0((void ***)&__p.__r_.__value_.__l.__size_);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf[8];
      v64 = v73;
      *(_QWORD *)&buf[16] = 0;
      v73 = 0;
      v65 = v74;
      *(_QWORD *)buf = off_24C460C88;
      *(_QWORD *)&buf[8] = 0;
      v71 = (void **)&buf[8];
      sub_20B8B66F8(&v71);
      v20 = &__p;
    }
    v21 = *(_QWORD **)(a1 + 8);
    if (v21 != *(_QWORD **)(a1 + 16))
    {
      if ((a5 & 0xA00C4) == 0x800C4)
        v22 = 258;
      else
        v22 = 2;
      v23 = a5 & 0x1000;
      v55 = v23 | v22 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
      if ((a5 & 0x200C4) == 0xC4)
        v24 = (((a5 & 0x40) != 0) << 11) | 0x100;
      else
        v24 = (32 * a5) & 0x800;
      v25 = (32 * a5) & 0x800 | (((a5 & 0x80) != 0) << 8);
      if ((a5 & 0x200C4) == 0xC4)
        v26 = 257;
      else
        v26 = 1;
      if ((a5 & 0x80000) != 0)
        v25 = v24;
      v27 = v25 | v23;
      if ((a5 & 0x80000) == 0)
        v26 = (((a5 & 0x80) != 0) << 8) | 1;
      v28 = v23 | v26;
      if ((a5 & 0x40) == 0)
        v27 = a5 & 0x1000 | ((BYTE1(a5) & 7) << 13) | (((a5 & 0x80) != 0) << 8);
      v29 = v28 & 0xFFFFF7FF | (((a5 & 0x40) != 0) << 11);
      if ((a5 & 0x40) != 0)
        v30 = v29;
      else
        v30 = a5 & 0x1000 | ((BYTE1(a5) & 7) << 13) | (((a5 & 0x80) != 0) << 8) | 1;
      v31 = (a5 & 0x200C0) != 0xC0 || (a5 & 6) == 0;
      v58 = v30;
      v54 = v27;
      if (v31)
        v32 = 0;
      else
        v32 = 256;
      v53 = v27 & 0xF800 | v32;
      v57 = v30 & 0xFFFFF8FF | v32;
      v33 = *(uint64_t **)(a1 + 8);
      while (1)
      {
        v34 = *(_DWORD *)(*v33 + 380);
        if ((a5 & 0x40000) == 0 && v34 == 1 || (a5 & 0x100000) != 0 && (v34 & 0xFFFFFFFD) == 1)
          goto LABEL_86;
        v35 = *(void **)(v70 + 136);
        bzero(v35, 0x3000uLL);
        if ((a5 & 4) != 0)
          break;
        if ((a5 & 8) == 0)
        {
          v36 = *(_BYTE *)sub_20B896F94() == 0;
          v38 = v53;
          v37 = v54;
          goto LABEL_77;
        }
        v39 = v55;
        if (v17 < 3)
          goto LABEL_86;
LABEL_80:
        v40 = *v33;
        v41 = *(_QWORD *)(a1 + 1312);
        *(_QWORD *)buf = &off_24C459238;
        *(_QWORD *)&buf[8] = &v70;
        v73 = buf;
        v42 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t, std::string *, uint64_t, _QWORD, void *, uint64_t, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v40 + 88))(v40, v39, v9, v17, v20, v41, 0, v35, 512, buf, 0, 0);
        v43 = v73;
        if (v73 == buf)
        {
          v43 = buf;
          v44 = 4;
          goto LABEL_84;
        }
        if (v73)
        {
          v44 = 5;
LABEL_84:
          (*(void (**)(void))(*v43 + 8 * v44))();
        }
        sub_20BA094F8(a1, v70, (__int16)a2, (uint64_t)v9, v17, a5, v42, v21, v67 + 3, (a5 & 4) != 0);
LABEL_86:
        ++v33;
        ++v21;
        if (v33 == *(uint64_t **)(a1 + 16))
          goto LABEL_90;
      }
      v36 = *(_BYTE *)sub_20B896F94() == 0;
      v38 = v57;
      v37 = v58;
LABEL_77:
      if (v36)
        v37 = v38;
      v39 = v37 | (a5 >> 3) & 0x10000;
      goto LABEL_80;
    }
LABEL_90:
    v45 = v20[1].__r_.__value_.__s.__data_[8];
    v46 = MEMORY[0x24BDAC760];
    v47 = *(_QWORD *)(a1 + 1520);
    v61[0] = MEMORY[0x24BDAC760];
    v61[1] = 0x40000000;
    v61[2] = sub_20BA0A668;
    v61[3] = &unk_24C4AEB18;
    v61[6] = a2;
    v61[7] = v9;
    v62 = v45;
    v61[4] = &v66;
    v61[5] = v70;
    sub_20B8905AC(v47, (UniChar *)v9, v56, 0, (uint64_t)v61);
    if ((a5 & 4) == 0)
    {
      v48 = v17 - 2;
      v49 = *(_QWORD **)(a1 + 1520);
      v50 = (v17 > 2) & (a5 >> 3);
      if (!v50)
        v48 = v17;
      v59[0] = v46;
      v59[1] = 0x40000000;
      v59[2] = sub_20BA0A6B8;
      v59[3] = &unk_24C4AEB40;
      v59[6] = a2;
      v59[7] = v9;
      v60 = v45;
      v59[4] = &v66;
      v59[5] = v70;
      sub_20B890ADC(v49, v50, (UniChar *)v9, (const UniChar *)(v48 >> 1), (a5 >> 6) & 1, (uint64_t)v59);
    }
    v15 = v67[3];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C460C88;
    *(_QWORD *)buf = &__p.__r_.__value_.__l.__size_;
    sub_20B8B66F8((void ***)buf);
  }
LABEL_95:
  _Block_object_dispose(&v66, 8);
  return v15;
}

void sub_20BA0A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 160) = a17;
  sub_20B8B66F8((void ***)(v17 - 160));
  _Block_object_dispose((const void *)(v17 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_20BA0A668(uint64_t a1, uint64_t a2)
{
  sub_20BA09C34(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 56), 2 * *(_WORD *)(a2 + 8), *(_WORD *)a2, *(_WORD *)(a2 + 2), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a1 + 64), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void sub_20BA0A6B8(uint64_t a1, uint64_t a2)
{
  sub_20BA09C34(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 56), 2 * *(_WORD *)(a2 + 8), *(_WORD *)a2, *(_WORD *)(a2 + 2), *(_DWORD *)(a2 + 16), *(unsigned __int8 *)(a1 + 64), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

uint64_t sub_20BA0A708(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  char *v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _WORD *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  char v35;
  __int16 v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[2];
  _BYTE v45[3072];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 88);
  if (!v4)
    return 0;
  if ((unint64_t)(a3 - a2) <= 0xFFFE)
    v5 = a3;
  else
    v5 = a2 + 0xFFFF;
  if (v5 <= a2)
  {
    v11 = 0;
    v7 = (char *)a2;
    goto LABEL_32;
  }
  v6 = *(_DWORD *)(a1 + 304);
  v7 = (char *)a2;
  while (1)
  {
    v8 = v5 - (unsigned __int8 *)v7;
    if ((*(_DWORD *)(a1 + 696) - 3) <= 2)
      break;
    v9 = *v7;
    if ((*v7 & 0x80000000) == 0)
      goto LABEL_11;
    if (v8 >= 2 && (v9 & 0xE0) == 0xC0)
    {
      v10 = 2;
      v9 = v7[1] & 0x3F | ((v9 & 0x1F) << 6);
    }
    else
    {
      if (v8 < 3)
        goto LABEL_30;
      if ((v9 & 0xF0) == 0xE0)
      {
        v9 = (v9 << 12) | ((v7[1] & 0x3F) << 6) | v7[2] & 0x3F;
        v10 = 3;
      }
      else
      {
        if (v8 < 4)
          goto LABEL_30;
        if ((v9 & 0xF8) == 0xF0)
        {
          v9 = 0;
          v10 = 4;
        }
        else
        {
          if (v8 < 5)
            goto LABEL_30;
          if ((v9 & 0xFC) == 0xF8)
          {
            v9 = 0;
            v10 = 5;
          }
          else
          {
            if (v8 < 6 || (v9 & 0xFE) != 0xFC)
            {
LABEL_30:
              v9 = 0;
LABEL_11:
              v10 = 1;
              goto LABEL_15;
            }
            v9 = 0;
            v10 = 6;
          }
        }
      }
    }
LABEL_15:
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 688) + 4 * v9);
    if ((v6 & v11 & 0x3FFFF) != 0)
    {
      v7 += v10;
      v6 = v11;
      if (v7 < (char *)v5)
        continue;
    }
    goto LABEL_32;
  }
  if (v8 >= 2)
  {
    v9 = *(_WORD *)v7;
    v10 = 2;
    goto LABEL_15;
  }
  v11 = **(_DWORD **)(a1 + 688);
  if ((v6 & v11 & 0x3FFFF) != 0)
    return 0;
LABEL_32:
  v12 = 0;
  if (v7 && v7 != (char *)v5)
  {
    for (i = 0; i != 3072; i += 24)
    {
      v14 = &v45[i];
      *(_WORD *)v14 = 0;
      *(_QWORD *)(v14 + 12) = 0;
      *(_QWORD *)(v14 + 4) = 0;
      *((_DWORD *)v14 + 5) = 0;
    }
    v15 = 0;
    v16 = 0;
    v12 = 0;
    v34 = v5 - (unsigned __int8 *)v7;
    v44[0] = *(_QWORD *)(a1 + 96);
    v44[1] = v4;
    v36 = (_WORD)v7 - (_WORD)a2;
    v39 = v11 >> 18;
    do
    {
      v35 = v15;
      v17 = v44[v16];
      v18 = v7;
      v38 = sub_20B9C68FC(v17, (uint64_t)v7, v34, (uint64_t)v45, 0x80uLL);
      if (v38)
      {
        v19 = 0;
        v20 = *(_QWORD *)(v17 + 352);
        v37 = *(uint64_t **)(v17 + 856);
        do
        {
          v21 = &v45[24 * v19];
          v22 = *((_WORD *)v21 + 6);
          sub_20B936674(&v41, v37, *((unsigned int *)v21 + 2));
          v23 = v42;
          v24 = v43;
          if (v42 < v43)
          {
            v25 = *v41;
            do
            {
              v26 = *(_DWORD *)(v25 + 4 * v23);
              v27 = v20 + 12 * v26;
              v29 = *(_WORD *)(v27 + 4);
              v28 = (_WORD *)(v27 + 4);
              if ((v29 & 0x80) == 0)
              {
                v30 = v20 + 12 * v26;
                sub_20B871810(*(_QWORD **)(a4 + 16));
                *(_OWORD *)(v31 + 80) = 0u;
                *(_OWORD *)(v31 + 96) = 0u;
                *(_OWORD *)(v31 + 48) = 0u;
                *(_OWORD *)(v31 + 64) = 0u;
                *(_OWORD *)(v31 + 16) = 0u;
                *(_OWORD *)(v31 + 32) = 0u;
                *(_OWORD *)v31 = 0u;
                *(_QWORD *)(v31 + 48) = v18;
                *(_WORD *)(v31 + 94) = *(_WORD *)(v30 + 2);
                *(_WORD *)(v31 + 92) = *(_WORD *)(v30 + 6);
                *(_WORD *)(v31 + 104) = *v28;
                *(_WORD *)(v31 + 84) = *(_WORD *)v30;
                v32 = *(_DWORD *)(v17 + 380);
                *(_DWORD *)(v31 + 72) = *(_DWORD *)(v30 + 8) + (v32 << 28);
                *(_WORD *)(v31 + 88) = v22;
                *(_WORD *)(v31 + 90) = v22 + v36;
                v23 = v42;
                v25 = *v41;
                *(_DWORD *)(v31 + 80) = *(_DWORD *)(*v41 + 4 * v42) + (v32 << 28);
                *(_BYTE *)(v31 + 110) = v39;
                *(_QWORD *)(v31 + 24) = v12;
                v24 = v43;
                v12 = v31;
              }
              v42 = ++v23;
            }
            while (v23 < v24);
          }
          ++v19;
        }
        while (v19 != v38);
      }
      v15 = 1;
      v16 = 1;
      v7 = v18;
    }
    while ((v35 & 1) == 0);
  }
  return v12;
}

_BYTE *sub_20BA0AAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int v3;
  uint64_t *v4;

  v3 = *(_DWORD *)(a2 + 80);
  if (v3 >> 28 == 5)
  {
    v4 = (uint64_t *)(a1 + 96);
  }
  else
  {
    if (v3 >> 28)
      return sub_20B87C9E0(a3, byte_20BA613AE);
    v4 = (uint64_t *)(a1 + 88);
  }
  if (*v4)
    return (_BYTE *)sub_20B9C69B4(*v4, v3 & 0xFFFFFFF, a3);
  return sub_20B87C9E0(a3, byte_20BA613AE);
}

uint64_t sub_20BA0AAE8(uint64_t result, uint64_t a2, unsigned __int16 *a3, std::string::size_type a4, void *a5, size_t a6, int a7, int a8)
{
  BOOL v8;
  uint64_t v18;

  if (*(_QWORD *)(result + 1328))
    v8 = a8 == 0;
  else
    v8 = 1;
  if (!v8 && a7 != 0 && a4 != 0 && (a8 | a7) != 0)
  {
    v18 = result;
    result = sub_20BA0ABB4(result, a2, a3, (uint64_t)a3 + a4, 0, a7, a8);
    if ((_DWORD)result != 0x7FFF)
      return sub_20B8AB938(*(_QWORD *)(v18 + 1328), (unsigned __int8 *)a3, a4, a5, a6, a7, a8, (unsigned __int16)result - 1);
  }
  return result;
}

uint64_t sub_20BA0ABB4(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (***v15)();
  NSObject *v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t m;
  uint64_t v40;
  uint64_t n;
  __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  __int16 *v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  uint64_t v52;
  uint64_t k;
  __int16 *v54;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t (***v61)();
  _BYTE v67[24];
  uint64_t (**v68)();
  __int128 v69;
  uint8_t *v70;
  char v71;
  uint8_t buf[8];
  __int128 v73;
  uint8_t *v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v8 = a4 - (_QWORD)a3;
  if (a3)
    v9 = (unint64_t)(a4 - (_QWORD)a3) >> 1;
  else
    v9 = 0;
  v68 = off_24C460C88;
  v69 = 0uLL;
  v70 = 0;
  v71 = 0;
  v10 = *(_QWORD *)(a1 + 1312);
  v11 = a5 >> 7;
  v12 = a5 >> 8;
  if (v10
    && (v13 = *(_QWORD *)(v10 + 184)) != 0
    && (v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13), v10 = *(_QWORD *)(a1 + 1312), v14))
  {
    v15 = *(uint64_t (****)())(v10 + 184);
  }
  else
  {
    sub_20BA04898(a3, v9, v11 & 0xE | v12 & 0x10 | (a5 >> 1) & 0x20, (int *)v10, *(CFArrayRef **)(a1 + 1320), (uint64_t)buf);
    sub_20B8CC7B0((void ***)&v69);
    v69 = v73;
    v70 = v74;
    v74 = 0;
    v71 = v75;
    *(_QWORD *)buf = off_24C460C88;
    v73 = 0uLL;
    *(_QWORD *)v67 = &v73;
    sub_20B8B66F8((void ***)v67);
    v15 = &v68;
  }
  v61 = v15;
  v16 = sub_20B9A7C5C(5u);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "[TokenizerImpl::getMinimumCost]", buf, 2u);
  }
  v17 = *(_QWORD **)(a1 + 8);
  if (v17 != *(_QWORD **)(a1 + 16))
  {
    if ((a5 & 0x200C4) == 0xC4)
      v18 = (((a5 >> 6) & 1) << 11) | 0x100;
    else
      v18 = (32 * a5) & 0x800;
    v19 = (32 * a5) & 0x800 | ((v11 & 1) << 8);
    if ((a5 & 0x200C4) == 0xC4)
      v20 = 257;
    else
      v20 = 1;
    if ((a5 & 0x80000) != 0)
      v19 = v18;
    v21 = v19 | a5 & 0x1000;
    if ((a5 & 0x80000) == 0)
      v20 = ((v11 & 1) << 8) | 1;
    v22 = a5 & 0x1000 | v20;
    if ((a5 & 0x40) == 0)
      v21 = a5 & 0x1000 | ((v12 & 7) << 13) | ((v11 & 1) << 8);
    v23 = v22 & 0xFFFFF7FF | (((a5 >> 6) & 1) << 11);
    if ((a5 & 0x40) != 0)
      v24 = v23;
    else
      v24 = a5 & 0x1000 | ((v12 & 7) << 13) | ((v11 & 1) << 8) | 1;
    v25 = (a5 & 0x200C0) != 0xC0 || (a5 & 6) == 0;
    v59 = v21;
    v60 = (a5 >> 3) & 0x10000;
    if (v25)
      v26 = 0;
    else
      v26 = 256;
    v58 = v21 & 0xF800 | v26;
    v56 = v24 & 0xFFFFF8FF | v26;
    v57 = v24;
    v27 = 0x7FFF;
    while (1)
    {
      if (*(_DWORD *)(*v17 + 380) == 3)
        goto LABEL_88;
      if ((a5 & 0x1700) == 0)
      {
        *(_WORD *)v67 = 0;
        memset(&v67[4], 0, 20);
        v35 = *v17;
        *(_QWORD *)buf = &off_24C459290;
        v74 = buf;
        v36 = (*(uint64_t (**)(uint64_t, _QWORD, unsigned __int16 *, unint64_t, uint64_t (***)(), _QWORD, _QWORD, _BYTE *, uint64_t, uint8_t *, _QWORD, _QWORD))(*(_QWORD *)v35 + 88))(v35, 0, a3, v8, v61, 0, 0, v67, 1, buf, 0, 0);
        v37 = v74;
        if (v74 == buf)
        {
          v37 = buf;
          v38 = 4;
LABEL_61:
          (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
        }
        else if (v74)
        {
          v38 = 5;
          goto LABEL_61;
        }
        if (v36)
        {
          v44 = (*(uint64_t (**)(_QWORD, _BYTE *))(*(_QWORD *)*v17 + 136))(*v17, v67);
          if (v44)
          {
            for (i = 0; i != v44; ++i)
            {
              v46 = (__int16 *)(*(uint64_t (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)*v17 + 128))(*v17, v67, i);
              if (*v46 < v27 && (v8 > 5 || (unsigned __int16)v46[1] == a6 && (unsigned __int16)v46[3] == a7))
                v27 = *v46;
            }
          }
        }
LABEL_71:
        if ((a5 & 4) != 0)
        {
          v43 = *(_QWORD *)(a2 + 136);
          if ((a5 & 0x1700) != 0)
          {
LABEL_73:
            v47 = sub_20B896F94();
            v48 = v57;
            if (!*v47)
              v48 = v56;
            v49 = v48 | v60;
          }
          else
          {
            v49 = 1;
          }
          v50 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v17 + 80))(*v17, v49, a3, v8, 0, 0, 0, v43, 512);
          if (v50)
          {
            for (j = 0; j != v50; ++j)
            {
              v52 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v17 + 136))(*v17, v43 + 24 * j);
              if (v52)
              {
                for (k = 0; k != v52; ++k)
                {
                  v54 = (__int16 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v17 + 128))(*v17, v43 + 24 * j, k);
                  if (*v54 < v27 && (v8 > 5 || (unsigned __int16)v54[1] == a6 && (unsigned __int16)v54[3] == a7))
                    v27 = *v54;
                }
              }
            }
          }
          goto LABEL_88;
        }
        goto LABEL_88;
      }
      v28 = *(_QWORD *)(a2 + 136);
      v29 = sub_20B896F94();
      v30 = v59;
      if (!*v29)
        v30 = v58;
      v31 = *v17;
      *(_QWORD *)buf = &off_24C4592E8;
      v74 = buf;
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, unsigned __int16 *, unint64_t, uint64_t (***)(), _QWORD, _QWORD, uint64_t, uint64_t, uint8_t *, _QWORD, _QWORD))(*(_QWORD *)v31 + 88))(v31, v30 | v60, a3, v8, v61, 0, 0, v28, 512, buf, 0, 0);
      v33 = v74;
      if (v74 == buf)
      {
        v33 = buf;
        v34 = 4;
      }
      else
      {
        if (!v74)
          goto LABEL_46;
        v34 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_46:
      if (v32)
      {
        for (m = 0; m != v32; ++m)
        {
          v40 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v17 + 136))(*v17, v28 + 24 * m);
          if (v40)
          {
            for (n = 0; n != v40; ++n)
            {
              v42 = (__int16 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v17 + 128))(*v17, v28 + 24 * m, n);
              if (*v42 < v27 && (v8 > 5 || (unsigned __int16)v42[1] == a6 && (unsigned __int16)v42[3] == a7))
                v27 = *v42;
            }
          }
        }
        goto LABEL_71;
      }
      if ((a5 & 4) != 0)
      {
        v43 = *(_QWORD *)(a2 + 136);
        goto LABEL_73;
      }
LABEL_88:
      if (++v17 == *(_QWORD **)(a1 + 16))
        goto LABEL_91;
    }
  }
  v27 = 0x7FFF;
LABEL_91:
  v68 = off_24C460C88;
  *(_QWORD *)buf = &v69;
  sub_20B8B66F8((void ***)buf);
  return v27;
}

void sub_20BA0B208(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = v1;
  sub_20B8B66F8((void ***)(v2 - 144));
  _Unwind_Resume(a1);
}

unint64_t sub_20BA0B2A0(uint64_t a1, const void *a2, size_t __n, int a4, int a5, unsigned int a6, void *__dst, unint64_t a8)
{
  unint64_t result;

  result = 0;
  if (__n && a4)
  {
    if (a6)
    {
      result = sub_20BA0B318(a1, (uint64_t)a2, __n, a4, a5, a6, (uint64_t)__dst);
      if ((result > a8) | result & 1)
        return 0;
      else
        return result;
    }
    else if (a8 >= __n)
    {
      memcpy(__dst, a2, __n);
      return __n;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20BA0B318(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v7 = *(uint64_t **)(a1 + 8);
  v8 = *(uint64_t **)(a1 + 16);
  if (v7 == v8)
    return 0;
  v13 = a4 & 0xFFFFFFF;
  while (1)
  {
    v14 = *v7;
    if (*(unsigned __int8 *)(*v7 + 792) == a5)
      break;
    if (++v7 == v8)
      return 0;
  }
  v16 = (a6 >> 2) & 1;
  if ((a6 & 0x10000) != 0)
    v16 = 3;
  v17 = (32 * a6) & 0x800;
  v18 = v16 | v17;
  v19 = v16 & 0xFFFFFEFF | (((a6 >> 7) & 1) << 8);
  v20 = v19 | (32 * a6) & 0xE000;
  v21 = v19 | v17;
  v22 = v21 | 0x100;
  if ((a6 & 0x200C4) != 0xC4)
    v22 = v18;
  if ((a6 & 0x80000) != 0)
    v21 = v22;
  if ((a6 & 0x40) != 0)
    v23 = v21;
  else
    v23 = v20;
  if (!*(_BYTE *)sub_20B896F94())
  {
    if ((a6 & 6) != 0 && (a6 & 0x200C0) == 0xC0)
      v23 |= 0x100u;
    else
      v23 &= ~0x100u;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 96))(v14, v23 & 0xFFFFEFFF | (a6 >> 3) & 0x10000, a2, a3, v13, a7);
}

uint64_t sub_20BA0B454(_QWORD *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;

  if (*(_BYTE *)(a2 + 109) == 11)
  {
    *a3 = sub_20B8912FC(a1[190], *(const UniChar **)(a2 + 48), (unint64_t)*(unsigned __int16 *)(a2 + 88) >> 1, *(_DWORD *)(a2 + 72), a4);
    result = (2 * *a4);
    *a4 = result;
  }
  else
  {
    v7 = (uint64_t *)a1[1];
    v8 = (uint64_t *)a1[2];
    if (v7 != v8)
    {
      v9 = *(_DWORD *)(a2 + 72) & 0xFFFFFFF;
      v10 = *(unsigned __int8 *)(a2 + 108);
      while (*(unsigned __int8 *)(*v7 + 792) != v10)
      {
        if (++v7 == v8)
          return *a4;
      }
      *a3 = sub_20B9C56C4(*v7, v9, a4);
    }
    return *a4;
  }
  return result;
}

BOOL sub_20BA0B4FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;

  v2 = a1[189];
  if (v2)
  {
    v4 = *(_BYTE *)(*(_QWORD *)(a1[185] + (((unint64_t)(a1[188] + v2 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                  + ((a1[188] + v2 - 1) & 0xFFF));
    a1[189] = v2 - 1;
    sub_20BA0EA20(a1 + 184, 1);
    *(_BYTE *)(a2 + 792) = v4;
  }
  return v2 != 0;
}

uint64_t sub_20BA0B56C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char **v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  int64_t v11;
  char **v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  _BYTE __p[12];
  __int16 v49;
  int v50;
  char v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  _BYTE *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)a1[1];
  v6 = (char *)a1[2];
  v7 = (char **)(a1 + 1);
  while (v8 != v6)
  {
    v10 = (_QWORD *)a1[7];
    v9 = (_QWORD *)a1[8];
    if (v10 != v9)
    {
      while (*v10 != *(_QWORD *)v8)
      {
        if (++v10 == v9)
        {
          v10 = (_QWORD *)a1[8];
          break;
        }
      }
    }
    if (v10 == v9)
    {
      v8 += 8;
    }
    else
    {
      if (*(_QWORD *)v8)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)v8 + 8))(*(_QWORD *)v8);
        v6 = (char *)a1[2];
      }
      v11 = v6 - (v8 + 8);
      if (v6 != v8 + 8)
        memmove(v8, v8 + 8, v6 - (v8 + 8));
      v6 = &v8[v11];
      a1[2] = &v8[v11];
    }
  }
  v12 = (char **)(a1 + 7);
  a1[8] = a1[7];
  if (a3)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = operator new();
      sub_20B9C4EB0(v15, 0);
      if ((*(unsigned int (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v15 + 16))(v15, *(_QWORD *)(a2 + 8 * v13), "r")&& sub_20BA0B4FC(a1, v15))
      {
        if (sub_20B88AE5C(*(const char **)(a2 + 8 * v13)))
          *(_DWORD *)(v15 + 380) = 8;
        v17 = (uint64_t *)a1[2];
        v16 = a1[3];
        if ((unint64_t)v17 >= v16)
        {
          v20 = ((char *)v17 - *v7) >> 3;
          if ((unint64_t)(v20 + 1) >> 61)
            sub_20BA0E7FC();
          v21 = v16 - (_QWORD)*v7;
          v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v24 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v23);
          else
            v24 = 0;
          v25 = (uint64_t *)&v24[8 * v20];
          *v25 = v15;
          v18 = v25 + 1;
          v27 = (char *)a1[1];
          v26 = (char *)a1[2];
          if (v26 != v27)
          {
            do
            {
              v28 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *--v25 = v28;
            }
            while (v26 != v27);
            v26 = *v7;
          }
          a1[1] = v25;
          a1[2] = v18;
          a1[3] = &v24[8 * v23];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v17 = v15;
          v18 = v17 + 1;
        }
        a1[2] = v18;
        v30 = (uint64_t *)a1[8];
        v29 = a1[9];
        if ((unint64_t)v30 >= v29)
        {
          v32 = ((char *)v30 - *v12) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            sub_20BA0E7FC();
          v33 = v29 - (_QWORD)*v12;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)sub_20B800BE8((uint64_t)(a1 + 9), v35);
          else
            v36 = 0;
          v37 = (uint64_t *)&v36[8 * v32];
          *v37 = v15;
          v31 = v37 + 1;
          v39 = (char *)a1[7];
          v38 = (char *)a1[8];
          if (v38 != v39)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *--v37 = v40;
            }
            while (v38 != v39);
            v38 = *v12;
          }
          a1[7] = v37;
          a1[8] = v31;
          a1[9] = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30 = v15;
          v31 = v30 + 1;
        }
        a1[8] = v31;
        v41 = sub_20B9A7C5C(9u);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          v45 = *(_QWORD *)(a2 + 8 * v13);
          v46 = *(unsigned __int8 *)(v15 + 792);
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = v45;
          v49 = 1024;
          v50 = v46;
          _os_log_debug_impl(&dword_20B7F7000, v41, OS_LOG_TYPE_DEBUG, "[TI::set_additional_dictionaries] %s has been added with ID %d.", __p, 0x12u);
        }
      }
      else
      {
        v19 = sub_20B9A7C5C(9u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v42 = *(_QWORD *)(a2 + 8 * v13);
          v43 = (char *)sub_20B8715E0(v15 + 424);
          sub_20B80BBD0(__p, v43);
          v44 = __p;
          if (v51 < 0)
            v44 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315394;
          v53 = v42;
          v54 = 2080;
          v55 = v44;
          _os_log_error_impl(&dword_20B7F7000, v19, OS_LOG_TYPE_ERROR, "[TokenizerImpl::set_additional_dictionaries] Failed to open %s: %s", buf, 0x16u);
          if (v51 < 0)
            operator delete(*(void **)__p);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v14 = 0;
      }
      ++v13;
    }
    while (v13 != a3);
  }
  else
  {
    v14 = 1;
  }
  return v14 & 1;
}

void sub_20BA0B994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C40236A4E44);
  _Unwind_Resume(a1);
}

void sub_20BA0B9C0(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20BA0E7FC();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_20B800BE8(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

BOOL sub_20BA0BA9C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char **v6;
  _BOOL8 result;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = (_QWORD *)a1[1];
  v4 = (_QWORD *)a1[2];
  v6 = (char **)(a1 + 1);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = (_QWORD *)a1[2];
        break;
      }
    }
  }
  if (v5 != v4)
    return 0;
  result = sub_20BA0B4FC(a1, a2);
  if (result)
  {
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20BA0E7FC();
      v12 = v8 - (_QWORD)*v6;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = a2;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v6;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = a2;
      v10 = v9 + 1;
    }
    a1[2] = v10;
    return 1;
  }
  return result;
}

uint64_t sub_20BA0BBC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = a1[2];
  v4 = a1[1];
  if (v4 != v3)
  {
    while (*(_QWORD *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v3)
      {
        v4 = a1[2];
        break;
      }
    }
  }
  if (v4 == v3)
    return 0;
  if (*(unsigned __int8 *)(*(_QWORD *)v4 + 792) != 255)
  {
    v7 = *(_BYTE *)(*(_QWORD *)v4 + 792);
    sub_20BA0EA8C(a1 + 184, &v7);
    v3 = a1[2];
  }
  v5 = v3 - (v4 + 8);
  if (v3 != v4 + 8)
    memmove((void *)v4, (const void *)(v4 + 8), v3 - (v4 + 8));
  a1[2] = v4 + v5;
  return 1;
}

uint64_t sub_20BA0BC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t result;

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  do
  {
    while (1)
    {
      v8 = v5;
      v9 = sub_20B9C578C(v6, a2, a3);
      if (!v9)
        break;
      result = *(unsigned int *)(*(_QWORD *)(v6 + 880) + 4 * v9);
      v5 = 1;
      v6 = v7;
      if (v8 & 1 | ((_DWORD)result != 0))
        return result;
    }
    v5 = 1;
    v6 = v7;
  }
  while ((v8 & 1) == 0);
  return 0;
}

uint64_t sub_20BA0BD00(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  __int128 v9;
  uint64_t v10;

  v3 = 0;
  v4 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  v9 = *(_OWORD *)(a1 + 88);
  while (1)
  {
    v5 = v3;
    v6 = *((_QWORD *)&v9 + v4);
    if (*(_QWORD *)(v6 + 896) > (unint64_t)a2)
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 888) + 4 * a2);
      if (v7)
        break;
    }
    v3 = 1;
    v4 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  return sub_20B9C56C4(v6, 4 * v7, a3);
}

BOOL sub_20BA0BDB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  const char *v5;
  uint64_t v6;
  void **v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  _DWORD *v17;
  void **v18;
  char v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  _BOOL8 v26;
  void **v28;
  int v29;
  char *v30;
  int v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  const char *v81;
  unint64_t v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void **v106;
  uint64_t i;
  void *v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  int v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  char *v120;
  void **v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  char *v128;
  void **v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  size_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v166;
  unint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  _QWORD *v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  size_t v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  void **v201;
  void **v202;
  void *v203[2];
  unsigned __int8 v204;
  char *__src[2];
  char v206;
  void *v207[2];
  unsigned __int8 v208;
  void *__p[2];
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  void *v241[2];
  unsigned __int8 v242;
  uint64_t v243;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = (uint64_t)v0;
  v243 = *MEMORY[0x24BDAC8D0];
  sub_20BA08728(v0);
  sub_20B8938D8(v2, "input-method-language", __p);
  v4 = (void **)(v3 + 1448);
  if (*(char *)(v3 + 1471) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 1464) = v210;
  sub_20B8938D8(v2, "dicdir", v207);
  if ((sub_20B934A60((_QWORD *)(v3 + 312), v2) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
    v9 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
    sub_20B828F84(v9, (uint64_t)"(", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_20B828F84(v10, (uint64_t)") [", 3);
    v12 = sub_20B828F84(v11, (uint64_t)"property_.open(param)", 21);
    v13 = sub_20B828F84(v12, (uint64_t)"] ", 2);
    v14 = (char *)sub_20B8715E0(v3 + 704);
    sub_20B80BBD0(__p, v14);
    if ((SBYTE7(v210) & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((SBYTE7(v210) & 0x80u) == 0)
      v16 = BYTE7(v210);
    else
      v16 = (uint64_t)__p[1];
    goto LABEL_41;
  }
  if (sub_20B8A9DA8(v2, "open-mutable-dictionary"))
    v5 = "r+";
  else
    v5 = "r";
  v6 = operator new();
  sub_20B9C4EB0(v6, 0);
  *(_QWORD *)(v3 + 80) = v6;
  sub_20B80BBD0(v241, "unk.dic");
  sub_20B8BC594((uint64_t)v207, (uint64_t)v241, (std::string *)__p);
  if ((SBYTE7(v210) & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (!(*(unsigned int (**)(uint64_t, void **, const char *))(*(_QWORD *)v6 + 16))(v6, v7, v5))
  {
    if (SBYTE7(v210) < 0)
      operator delete(__p[0]);
    if ((char)v242 < 0)
      operator delete(v241[0]);
    goto LABEL_35;
  }
  v8 = sub_20BA0B4FC((_QWORD *)v3, *(_QWORD *)(v3 + 80));
  if (SBYTE7(v210) < 0)
    operator delete(__p[0]);
  if ((char)v242 < 0)
  {
    operator delete(v241[0]);
    if (!v8)
    {
LABEL_35:
      std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
      v21 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
      sub_20B828F84(v21, (uint64_t)"(", 1);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = sub_20B828F84(v22, (uint64_t)") [", 3);
      v24 = sub_20B828F84(v23, (uint64_t)"unkdic_->open(create_filename(prefix, UNK_DIC_FILE).c_str(), mode) && setDictionaryID(unkdic_)", 94);
      v13 = sub_20B828F84(v24, (uint64_t)"] ", 2);
      v25 = (char *)sub_20B8715E0(*(_QWORD *)(v3 + 80) + 424);
      sub_20B80BBD0(__p, v25);
      if ((SBYTE7(v210) & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((SBYTE7(v210) & 0x80u) == 0)
        v16 = BYTE7(v210);
      else
        v16 = (uint64_t)__p[1];
LABEL_41:
      sub_20B828F84(v13, (uint64_t)v15, v16);
      goto LABEL_42;
    }
  }
  else if (!v8)
  {
    goto LABEL_35;
  }
  v17 = (_DWORD *)operator new();
  sub_20B9C4EB0((uint64_t)v17, 0);
  sub_20B80BBD0(v241, "sys.dic");
  sub_20B8BC594((uint64_t)v207, (uint64_t)v241, (std::string *)__p);
  if ((SBYTE7(v210) & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  v19 = (*(uint64_t (**)(_DWORD *, void **, const char *))(*(_QWORD *)v17 + 16))(v17, v18, v5);
  if (SBYTE7(v210) < 0)
    operator delete(__p[0]);
  if ((char)v242 < 0)
  {
    operator delete(v241[0]);
    if ((v19 & 1) != 0)
      goto LABEL_34;
  }
  else if ((v19 & 1) != 0)
  {
LABEL_34:
    v20 = 0;
    goto LABEL_58;
  }
  sub_20B80BBD0(v241, "sys_mini.dic");
  sub_20B8BC594((uint64_t)v207, (uint64_t)v241, (std::string *)__p);
  if ((SBYTE7(v210) & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  v29 = (*(uint64_t (**)(_DWORD *, void **, const char *))(*(_QWORD *)v17 + 16))(v17, v28, v5);
  if (SBYTE7(v210) < 0)
    operator delete(__p[0]);
  if ((char)v242 < 0)
    operator delete(v241[0]);
  if (!v29)
    goto LABEL_62;
  v20 = 9;
LABEL_58:
  if (!sub_20BA0B4FC((_QWORD *)v3, (uint64_t)v17))
  {
LABEL_62:
    std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
    v35 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
    sub_20B828F84(v35, (uint64_t)"(", 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    v37 = sub_20B828F84(v36, (uint64_t)") [", 3);
    v38 = sub_20B828F84(v37, (uint64_t)"succeeded && setDictionaryID(sysdic)", 36);
    v39 = sub_20B828F84(v38, (uint64_t)"] ", 2);
    v40 = (char *)sub_20B8715E0((uint64_t)(v17 + 106));
    sub_20B80BBD0(__p, v40);
    if ((SBYTE7(v210) & 0x80u) == 0)
      v41 = __p;
    else
      v41 = (void **)__p[0];
    if ((SBYTE7(v210) & 0x80u) == 0)
      v42 = BYTE7(v210);
    else
      v42 = (uint64_t)__p[1];
    sub_20B828F84(v39, (uint64_t)v41, v42);
LABEL_42:
    if (SBYTE7(v210) < 0)
      operator delete(__p[0]);
    goto LABEL_44;
  }
  if (v17[95] != v20)
  {
    std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
    v43 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
    sub_20B828F84(v43, (uint64_t)"(", 1);
    v44 = (_QWORD *)std::ostream::operator<<();
    v45 = sub_20B828F84(v44, (uint64_t)") [", 3);
    v46 = sub_20B828F84(v45, (uint64_t)"sysdic->type() == expected_dic_type", 35);
    v47 = sub_20B828F84(v46, (uint64_t)"] ", 2);
    v48 = sub_20B828F84(v47, (uint64_t)"not a system dictionary: ", 25);
    if ((v208 & 0x80u) == 0)
      v49 = v207;
    else
      v49 = (void **)v207[0];
    if ((v208 & 0x80u) == 0)
      v50 = v208;
    else
      v50 = (uint64_t)v207[1];
    sub_20B828F84(v48, (uint64_t)v49, v50);
LABEL_44:
    v26 = 0;
    goto LABEL_45;
  }
  *(_QWORD *)(v3 + 88) = v17;
  v30 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17);
  v31 = sub_20B8BC1E4(v30);
  v32 = *(_QWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 696) = v31;
  v33 = *(_QWORD **)(v3 + 16);
  v202 = (void **)(v3 + 8);
  if ((unint64_t)v33 >= v32)
  {
    v51 = *(_QWORD *)(v3 + 8);
    v52 = ((uint64_t)v33 - v51) >> 3;
    if ((unint64_t)(v52 + 1) >> 61)
      sub_20BA0E7FC();
    v53 = v32 - v51;
    v54 = v53 >> 2;
    if (v53 >> 2 <= (unint64_t)(v52 + 1))
      v54 = v52 + 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v54;
    if (v55)
      v56 = (char *)sub_20B800BE8(v3 + 24, v55);
    else
      v56 = 0;
    v57 = &v56[8 * v52];
    v58 = &v56[8 * v55];
    *(_QWORD *)v57 = v17;
    v34 = v57 + 8;
    v60 = *(char **)(v3 + 8);
    v59 = *(char **)(v3 + 16);
    if (v59 != v60)
    {
      do
      {
        v61 = *((_QWORD *)v59 - 1);
        v59 -= 8;
        *((_QWORD *)v57 - 1) = v61;
        v57 -= 8;
      }
      while (v59 != v60);
      v59 = (char *)*v202;
    }
    *(_QWORD *)(v3 + 8) = v57;
    *(_QWORD *)(v3 + 16) = v34;
    *(_QWORD *)(v3 + 24) = v58;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v33 = v17;
    v34 = v33 + 1;
  }
  v62 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 16) = v34;
  v63 = *(_QWORD **)(v3 + 40);
  v201 = (void **)(v3 + 32);
  if ((unint64_t)v63 >= v62)
  {
    v65 = *(_QWORD *)(v3 + 32);
    v66 = ((uint64_t)v63 - v65) >> 3;
    if ((unint64_t)(v66 + 1) >> 61)
      sub_20BA0E7FC();
    v67 = v62 - v65;
    v68 = v67 >> 2;
    if (v67 >> 2 <= (unint64_t)(v66 + 1))
      v68 = v66 + 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v69 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    if (v69)
      v70 = (char *)sub_20B800BE8(v3 + 48, v69);
    else
      v70 = 0;
    v71 = &v70[8 * v66];
    v72 = &v70[8 * v69];
    *(_QWORD *)v71 = v17;
    v64 = v71 + 8;
    v74 = *(char **)(v3 + 32);
    v73 = *(char **)(v3 + 40);
    if (v73 != v74)
    {
      do
      {
        v75 = *((_QWORD *)v73 - 1);
        v73 -= 8;
        *((_QWORD *)v71 - 1) = v75;
        v71 -= 8;
      }
      while (v73 != v74);
      v73 = (char *)*v201;
    }
    *(_QWORD *)(v3 + 32) = v71;
    *(_QWORD *)(v3 + 40) = v64;
    *(_QWORD *)(v3 + 48) = v72;
    if (v73)
      operator delete(v73);
  }
  else
  {
    *v63 = v17;
    v64 = v63 + 1;
  }
  *(_QWORD *)(v3 + 40) = v64;
  sub_20B8938D8(v2, "userdic", __src);
  if ((v206 & 0x80000000) == 0)
  {
    if (v206)
    {
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      v235 = 0u;
      v236 = 0u;
      v233 = 0u;
      v234 = 0u;
      v231 = 0u;
      v232 = 0u;
      v229 = 0u;
      v230 = 0u;
      v227 = 0u;
      v228 = 0u;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v221 = 0u;
      v222 = 0u;
      v219 = 0u;
      v220 = 0u;
      v217 = 0u;
      v218 = 0u;
      v215 = 0u;
      v216 = 0u;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v76 = (const char *)__src;
      *(_OWORD *)__p = 0u;
      v210 = 0u;
      goto LABEL_111;
    }
LABEL_149:
    if ((v208 & 0x80u) == 0)
      v106 = v207;
    else
      v106 = (void **)v207[0];
    sub_20BA0D494(v3, (const char *)v106);
    for (i = *(_QWORD *)(v3 + 32); i != *(_QWORD *)(v3 + 40); i += 8)
    {
      if (*(_DWORD *)(*(_QWORD *)i + 380) == 5)
      {
        *(_QWORD *)(v3 + 96) = *(_QWORD *)i;
        break;
      }
    }
    *(_QWORD *)(v3 + 1328) = 0;
    sub_20B8938D8(v2, "learndic", __p);
    v108 = (void *)BYTE7(v210);
    if (SBYTE7(v210) < 0)
      v108 = __p[1];
    if (v108)
    {
      v109 = operator new();
      sub_20B8A9F48(v109, 600, 200);
      *(_QWORD *)(v3 + 1328) = v109;
      if ((SBYTE7(v210) & 0x80u) == 0)
        v110 = __p;
      else
        v110 = (void **)__p[0];
      if (!(*(unsigned int (**)(uint64_t, void **, const char *))(*(_QWORD *)v109 + 16))(v109, v110, "r+")
        || !sub_20BA0B4FC((_QWORD *)v3, *(_QWORD *)(v3 + 1328)))
      {
        std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
        v115 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
        sub_20B828F84(v115, (uint64_t)"(", 1);
        v116 = (_QWORD *)std::ostream::operator<<();
        v117 = sub_20B828F84(v116, (uint64_t)") [", 3);
        v118 = sub_20B828F84(v117, (uint64_t)"learndic_->open(learndicpath.c_str(), \"r+\") && setDictionaryID(learndic_)", 73);
        v119 = sub_20B828F84(v118, (uint64_t)"] ", 2);
        v120 = (char *)sub_20B8715E0(*(_QWORD *)(v3 + 1328) + 424);
        sub_20B80BBD0(v241, v120);
        if ((v242 & 0x80u) == 0)
          v121 = v241;
        else
          v121 = (void **)v241[0];
        if ((v242 & 0x80u) == 0)
          v122 = v242;
        else
          v122 = (uint64_t)v241[1];
        sub_20B828F84(v119, (uint64_t)v121, v122);
        if ((char)v242 < 0)
          operator delete(v241[0]);
        v114 = 1;
        goto LABEL_179;
      }
      v241[0] = *(void **)(v3 + 1328);
      sub_20BA0B9C0(v202, v241);
      v241[0] = *(void **)(v3 + 1328);
      sub_20BA0B9C0(v201, v241);
    }
    v111 = operator new();
    v112 = (uint64_t *)v111;
    if ((v208 & 0x80u) == 0)
      v113 = (char *)v207;
    else
      v113 = (char *)v207[0];
    sub_20B890430(v111, v113);
    sub_20BA0D548((uint64_t **)(v3 + 1520), v112);
    v114 = 0;
LABEL_179:
    if (SBYTE7(v210) < 0)
      operator delete(__p[0]);
    goto LABEL_191;
  }
  if (!__src[1])
    goto LABEL_149;
  v239 = 0u;
  v240 = 0u;
  v237 = 0u;
  v238 = 0u;
  v235 = 0u;
  v236 = 0u;
  v233 = 0u;
  v234 = 0u;
  v231 = 0u;
  v232 = 0u;
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v219 = 0u;
  v220 = 0u;
  v217 = 0u;
  v218 = 0u;
  v215 = 0u;
  v216 = 0u;
  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  *(_OWORD *)__p = 0u;
  v210 = 0u;
  v76 = __src[0];
LABEL_111:
  strncpy((char *)v241, v76, 0x2000uLL);
  v77 = sub_20BA0D358((const char *)v241, (unsigned __int8 **)__p);
  if (!v77)
    goto LABEL_149;
  v78 = v77;
  v79 = 0;
  while (1)
  {
    v80 = (_DWORD *)operator new();
    sub_20B9C4EB0((uint64_t)v80, 0);
    v81 = (const char *)__p[v79];
    if (!(*(unsigned int (**)(_DWORD *, const char *, const char *))(*(_QWORD *)v80 + 16))(v80, v81, v5)
      || !sub_20BA0B4FC((_QWORD *)v3, (uint64_t)v80))
    {
      break;
    }
    if (v80[95] != 1)
    {
      std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
      v131 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
      sub_20B828F84(v131, (uint64_t)"(", 1);
      v132 = (_QWORD *)std::ostream::operator<<();
      v133 = sub_20B828F84(v132, (uint64_t)") [", 3);
      v134 = sub_20B828F84(v133, (uint64_t)"d->type() == MECAB_USR_DIC", 26);
      v135 = sub_20B828F84(v134, (uint64_t)"] ", 2);
      v136 = sub_20B828F84(v135, (uint64_t)"not a user dictionary: ", 23);
      v137 = strlen(v81);
      sub_20B828F84(v136, (uint64_t)v81, v137);
      goto LABEL_190;
    }
    v83 = *(char **)(v3 + 16);
    v82 = *(_QWORD *)(v3 + 24);
    if ((unint64_t)v83 >= v82)
    {
      v85 = (v83 - (_BYTE *)*v202) >> 3;
      if ((unint64_t)(v85 + 1) >> 61)
        sub_20BA0E7FC();
      v86 = v82 - (_QWORD)*v202;
      v87 = v86 >> 2;
      if (v86 >> 2 <= (unint64_t)(v85 + 1))
        v87 = v85 + 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
        v88 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v88 = v87;
      if (v88)
        v89 = (char *)sub_20B800BE8(v3 + 24, v88);
      else
        v89 = 0;
      v90 = &v89[8 * v85];
      *(_QWORD *)v90 = v80;
      v84 = v90 + 8;
      v92 = *(char **)(v3 + 8);
      v91 = *(char **)(v3 + 16);
      if (v91 != v92)
      {
        do
        {
          v93 = *((_QWORD *)v91 - 1);
          v91 -= 8;
          *((_QWORD *)v90 - 1) = v93;
          v90 -= 8;
        }
        while (v91 != v92);
        v91 = (char *)*v202;
      }
      *(_QWORD *)(v3 + 8) = v90;
      *(_QWORD *)(v3 + 16) = v84;
      *(_QWORD *)(v3 + 24) = &v89[8 * v88];
      if (v91)
        operator delete(v91);
    }
    else
    {
      *(_QWORD *)v83 = v80;
      v84 = v83 + 8;
    }
    *(_QWORD *)(v3 + 16) = v84;
    v95 = *(char **)(v3 + 40);
    v94 = *(_QWORD *)(v3 + 48);
    if ((unint64_t)v95 >= v94)
    {
      v97 = (v95 - (_BYTE *)*v201) >> 3;
      if ((unint64_t)(v97 + 1) >> 61)
        sub_20BA0E7FC();
      v98 = v94 - (_QWORD)*v201;
      v99 = v98 >> 2;
      if (v98 >> 2 <= (unint64_t)(v97 + 1))
        v99 = v97 + 1;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
        v100 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v100 = v99;
      if (v100)
        v101 = (char *)sub_20B800BE8(v3 + 48, v100);
      else
        v101 = 0;
      v102 = &v101[8 * v97];
      *(_QWORD *)v102 = v80;
      v96 = v102 + 8;
      v104 = *(char **)(v3 + 32);
      v103 = *(char **)(v3 + 40);
      if (v103 != v104)
      {
        do
        {
          v105 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *((_QWORD *)v102 - 1) = v105;
          v102 -= 8;
        }
        while (v103 != v104);
        v103 = (char *)*v201;
      }
      *(_QWORD *)(v3 + 32) = v102;
      *(_QWORD *)(v3 + 40) = v96;
      *(_QWORD *)(v3 + 48) = &v101[8 * v100];
      if (v103)
        operator delete(v103);
    }
    else
    {
      *(_QWORD *)v95 = v80;
      v96 = v95 + 8;
    }
    *(_QWORD *)(v3 + 40) = v96;
    if (++v79 == v78)
      goto LABEL_149;
  }
  std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
  v123 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
  sub_20B828F84(v123, (uint64_t)"(", 1);
  v124 = (_QWORD *)std::ostream::operator<<();
  v125 = sub_20B828F84(v124, (uint64_t)") [", 3);
  v126 = sub_20B828F84(v125, (uint64_t)"d->open(_dic[i], mode) && setDictionaryID(d)", 44);
  v127 = sub_20B828F84(v126, (uint64_t)"] ", 2);
  v128 = (char *)sub_20B8715E0((uint64_t)(v80 + 106));
  sub_20B80BBD0(v203, v128);
  if ((v204 & 0x80u) == 0)
    v129 = v203;
  else
    v129 = (void **)v203[0];
  if ((v204 & 0x80u) == 0)
    v130 = v204;
  else
    v130 = (uint64_t)v203[1];
  sub_20B828F84(v127, (uint64_t)v129, v130);
  if ((char)v204 < 0)
    operator delete(v203[0]);
LABEL_190:
  v114 = 1;
LABEL_191:
  if (v206 < 0)
    operator delete(__src[0]);
  if (v114)
    goto LABEL_44;
  *(_QWORD *)(v3 + 296) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  v138 = (*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 3;
  v139 = (v138 - 1);
  if ((int)v138 - 1 >= 0)
  {
    do
    {
      v140 = *(_QWORD *)(v3 + 256);
      v141 = *(_QWORD *)(v3 + 248);
      if (v141 == *(_QWORD *)(v3 + 264))
      {
        v141 = 0;
        ++v140;
        *(_QWORD *)(v3 + 248) = 0;
        *(_QWORD *)(v3 + 256) = v140;
      }
      v142 = *(_QWORD *)(v3 + 224);
      if (v140 == (*(_QWORD *)(v3 + 232) - v142) >> 3)
      {
        v143 = operator new[]();
        v144 = v143;
        v146 = *(uint64_t **)(v3 + 232);
        v145 = *(_QWORD *)(v3 + 240);
        if ((unint64_t)v146 >= v145)
        {
          v148 = *(_QWORD **)(v3 + 224);
          v149 = v146 - v148;
          v150 = v149 + 1;
          if ((unint64_t)(v149 + 1) >> 61)
            sub_20BA0E7FC();
          v151 = v145 - (_QWORD)v148;
          if (v151 >> 2 > v150)
            v150 = v151 >> 2;
          if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
            v152 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v152 = v150;
          if (v152)
          {
            if (v152 >> 61)
              sub_20B800BC0();
            v153 = (char *)operator new(8 * v152);
          }
          else
          {
            v153 = 0;
          }
          v154 = (uint64_t *)&v153[8 * v149];
          *v154 = v144;
          v147 = v154 + 1;
          if (v146 != v148)
          {
            do
            {
              v155 = *--v146;
              *--v154 = v155;
            }
            while (v146 != v148);
            v146 = *(uint64_t **)(v3 + 224);
          }
          *(_QWORD *)(v3 + 224) = v154;
          *(_QWORD *)(v3 + 232) = v147;
          *(_QWORD *)(v3 + 240) = &v153[8 * v152];
          if (v146)
            operator delete(v146);
        }
        else
        {
          *v146 = v143;
          v147 = v146 + 1;
        }
        *(_QWORD *)(v3 + 232) = v147;
        v142 = *(_QWORD *)(v3 + 224);
        v141 = *(_QWORD *)(v3 + 248);
        v140 = *(_QWORD *)(v3 + 256);
      }
      v156 = *(_QWORD *)(v142 + 8 * v140);
      *(_QWORD *)(v3 + 248) = v141 + 1;
      v157 = v156 + 48 * v141;
      *(_OWORD *)(v157 + 16) = 0u;
      *(_OWORD *)(v157 + 32) = 0u;
      *(_OWORD *)v157 = 0u;
      *(_QWORD *)(v157 + 40) = *(_QWORD *)(v3 + 296);
      v158 = *(_QWORD *)(v3 + 8);
      v159 = *(_QWORD *)(v158 + 8 * v139);
      v160 = (_QWORD *)(v159 + 400);
      if (*(char *)(v159 + 423) < 0)
        v160 = (_QWORD *)*v160;
      *(_QWORD *)v157 = v160;
      v161 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v158 + 8 * v139) + 32))(*(_QWORD *)(v158 + 8 * v139));
      v162 = v156 + 48 * v141;
      *(_QWORD *)(v162 + 8) = v161;
      v163 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v139);
      *(_QWORD *)&v164 = vrev64q_s32(*(int32x4_t *)(v163 + 380)).u64[0];
      *((_QWORD *)&v164 + 1) = *(_QWORD *)(v163 + 388);
      *(_OWORD *)(v162 + 16) = v164;
      *(_WORD *)(v162 + 32) = *(_DWORD *)(v163 + 376);
      *(_QWORD *)(v3 + 296) = v157;
    }
    while (v139-- > 0);
  }
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(v3 + 272);
  v166 = *(_QWORD *)(v3 + 664);
  if (*(_QWORD *)(v3 + 672) != v166)
  {
    v167 = 0;
    while (1)
    {
      v168 = *(const char **)(v166 + 8 * v167);
      (*(void (**)(void **__return_ptr, _QWORD, const char *))(**(_QWORD **)(v3 + 80) + 64))(__p, *(_QWORD *)(v3 + 80), v168);
      if (!LODWORD(__p[1]))
        break;
      v169 = (*(uint64_t (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v3 + 80) + 128))(*(_QWORD *)(v3 + 80), __p, 0);
      v170 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v3 + 80) + 136))(*(_QWORD *)(v3 + 80), __p);
      v171 = v170;
      v173 = *(uint64_t **)(v3 + 280);
      v172 = *(_QWORD *)(v3 + 288);
      if ((unint64_t)v173 >= v172)
      {
        v174 = *(uint64_t **)(v3 + 272);
        v175 = ((char *)v173 - (char *)v174) >> 4;
        v176 = v175 + 1;
        if ((unint64_t)(v175 + 1) >> 60)
          sub_20BA0E7FC();
        v177 = v172 - (_QWORD)v174;
        if (v177 >> 3 > v176)
          v176 = v177 >> 3;
        if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF0)
          v178 = 0xFFFFFFFFFFFFFFFLL;
        else
          v178 = v176;
        if (v178)
        {
          if (v178 >> 60)
            sub_20B800BC0();
          v179 = (char *)operator new(16 * v178);
        }
        else
        {
          v179 = 0;
        }
        v180 = (uint64_t *)&v179[16 * v175];
        *v180 = v169;
        v180[1] = v171;
        v181 = v180;
        if (v173 != v174)
        {
          do
          {
            *((_OWORD *)v181 - 1) = *((_OWORD *)v173 - 1);
            v181 -= 2;
            v173 -= 2;
          }
          while (v173 != v174);
          v173 = *(uint64_t **)(v3 + 272);
        }
        v182 = v180 + 2;
        *(_QWORD *)(v3 + 272) = v181;
        *(_QWORD *)(v3 + 280) = v180 + 2;
        *(_QWORD *)(v3 + 288) = &v179[16 * v178];
        if (v173)
          operator delete(v173);
        *(_QWORD *)(v3 + 280) = v182;
      }
      else
      {
        *v173 = v169;
        v173[1] = v170;
        *(_QWORD *)(v3 + 280) = v173 + 2;
      }
      ++v167;
      v166 = *(_QWORD *)(v3 + 664);
      if (v167 >= (*(_QWORD *)(v3 + 672) - v166) >> 3)
        goto LABEL_242;
    }
    std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
    v189 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
    sub_20B828F84(v189, (uint64_t)"(", 1);
    v190 = (_QWORD *)std::ostream::operator<<();
    v191 = sub_20B828F84(v190, (uint64_t)") [", 3);
    v192 = sub_20B828F84(v191, (uint64_t)"n.value != 0", 12);
    v193 = sub_20B828F84(v192, (uint64_t)"] ", 2);
    v194 = sub_20B828F84(v193, (uint64_t)"cannot find UNK category: ", 26);
    v195 = strlen(v168);
    sub_20B828F84(v194, (uint64_t)v168, v195);
    goto LABEL_44;
  }
LABEL_242:
  v183 = *(_QWORD *)(v3 + 688);
  *(_DWORD *)(v3 + 304) = *(_DWORD *)(v183 + 128);
  *(_DWORD *)(v3 + 1288) = *(_DWORD *)(v183 + 49416);
  sub_20B8938D8(v2, "bos-feature", __p);
  sub_20BA0D584(v3 + 184, (uint64_t)__p);
  if (SBYTE7(v210) < 0)
    operator delete(__p[0]);
  v184 = sub_20B8938D8(v2, "unk-feature", __p);
  v185 = *(_QWORD *)(v3 + 208);
  if (v185)
    MEMORY[0x20BD39C80](v185, 0x1000C8077774924, v184);
  *(_QWORD *)(v3 + 208) = 0;
  v186 = (void *)BYTE7(v210);
  if (SBYTE7(v210) < 0)
    v186 = __p[1];
  if (v186)
    sub_20BA0D584(v3 + 200, (uint64_t)__p);
  v26 = **(_BYTE **)(v3 + 192) != 0;
  if (**(_BYTE **)(v3 + 192))
  {
    v187 = sub_20BA0D610(v2);
    v188 = 24;
    if (v187)
      v188 = v187;
    *(_QWORD *)(v3 + 992) = v188;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)(v3 + 1000 + *(_QWORD *)(*(_QWORD *)(v3 + 1000) - 24)), 0);
    v196 = sub_20B828F84((_QWORD *)(v3 + 1000), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tokenizer.cpp", 66);
    sub_20B828F84(v196, (uint64_t)"(", 1);
    v197 = (_QWORD *)std::ostream::operator<<();
    v198 = sub_20B828F84(v197, (uint64_t)") [", 3);
    v199 = sub_20B828F84(v198, (uint64_t)"*bos_feature_ != '\\0'", 21);
    v200 = sub_20B828F84(v199, (uint64_t)"] ", 2);
    sub_20B828F84(v200, (uint64_t)"bos-feature is undefined in dicrc", 33);
  }
  if (SBYTE7(v210) < 0)
    operator delete(__p[0]);
LABEL_45:
  if ((char)v208 < 0)
    operator delete(v207[0]);
  return v26;
}

void sub_20BA0D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA0D358(const char *a1, unsigned __int8 **a2)
{
  const char *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *i;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  _BYTE *v18;

  v3 = a1;
  v4 = strlen(a1);
  if (v4 < 1)
    return 0;
  v5 = 0;
  v6 = (unint64_t)&v3[v4];
  v7 = 0x10000;
  do
  {
    v8 = v7;
    for (i = (unsigned __int8 *)v3; ; ++i)
    {
      v10 = *i;
      if (v10 != 9 && v10 != 32)
        break;
      ++v3;
    }
    if (v10 == 34)
    {
      v11 = ++i;
      v12 = i;
      if ((unint64_t)i < v6)
      {
        v11 = i;
        v12 = i;
        do
        {
          v13 = *v12;
          if (v13 == 34)
          {
            v14 = *++v12;
            if (v14 != 34)
              break;
          }
          *v11++ = v13;
          ++v12;
        }
        while ((unint64_t)v12 < v6);
      }
      v15 = (unsigned __int8 *)memchr(v12, 44, v6 - (_QWORD)v12);
      if (v15)
        v16 = v15;
      else
        v16 = (unsigned __int8 *)v6;
    }
    else
    {
      v17 = memchr(i, 44, v6 - (_QWORD)v3);
      if (v17)
        v18 = v17;
      else
        v18 = (_BYTE *)v6;
      v16 = &i[v18 - v3];
      v11 = v16;
    }
    v7 = v8 - 1;
    if (v8 < 2)
    {
      *a2 = i;
      ++v5;
      if (v8 == 1)
        return v5;
    }
    else
    {
      *v11 = 0;
      *a2 = i;
      ++v5;
    }
    ++a2;
    v3 = (const char *)(v16 + 1);
  }
  while ((unint64_t)(v16 + 1) < v6);
  return v5;
}

void sub_20BA0D494(uint64_t a1, const char *a2)
{
  _QWORD v2[9];
  _QWORD v3[3];
  char v4;

  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  v4 = 1;
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = sub_20BA0EC5C;
  v2[3] = &unk_24C4AEB68;
  v2[6] = 10;
  v2[7] = "supplement";
  v2[8] = a2;
  v2[4] = v3;
  v2[5] = a1;
  sub_20B8D13EC(a2, (uint64_t)v2);
  _Block_object_dispose(v3, 8);
}

void sub_20BA0D530(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA0D548(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B890560(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20BA0D584(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  const char *v6;
  uint64_t result;

  v4 = (char *)operator new[]();
  v5 = v4;
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  strcpy(v4, v6);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_20BA0D610(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v12[2];
  void *v13;
  uint64_t v14;
  void *__p[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  v2 = a1 + 8;
  sub_20B80BBD0(__p, "max-grouping-size");
  v3 = sub_20B871B2C(v2, __p);
  if (SHIBYTE(v16[0]) < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v3)
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x20BD39CB0]();
    return 0;
  }
  else
  {
    if (*((char *)v3 + 79) < 0)
    {
      sub_20B80ACE0(v12, v3[7], (unint64_t)v3[8]);
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)(v3 + 7);
      v13 = v3[9];
    }
    sub_20B83BFEC((uint64_t)__p);
    v14 = 0;
    if (SHIBYTE(v13) >= 0)
      v5 = v12;
    else
      v5 = (void **)v12[0];
    if (SHIBYTE(v13) >= 0)
      v6 = HIBYTE(v13);
    else
      v6 = (uint64_t)v12[1];
    v7 = sub_20B828F84(v16, (uint64_t)v5, v6);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0
      || (v8 = (_QWORD *)MEMORY[0x20BD39A4C](__p, &v14), (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      || (v9 = sub_20B871C3C(__p), (*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 2) == 0))
    {
      *(_QWORD *)operator new() = 0;
      MEMORY[0x20BD39CB0]();
      v4 = 0;
    }
    else
    {
      v4 = v14;
    }
    __p[0] = *(void **)MEMORY[0x24BEDB7F0];
    v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v16[0] = v10;
    v16[1] = MEMORY[0x24BEDB848] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD39C2C](&v18);
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
  return v4;
}

void sub_20BA0D82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B83C118((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA0D870(_QWORD *a1)
{
  *a1 = &unk_24C4672D0;
  a1[1] = 0;
  sub_20BA0D8E4((uint64_t)a1, (char *)&unk_20BA7675F);
  return a1;
}

void sub_20BA0D8AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_24C467270;
  v3 = v1[1];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA0D8E4(uint64_t a1, char *__s)
{
  char *v4;
  uint64_t result;

  strlen(__s);
  v4 = (char *)operator new[]();
  strcpy(v4, __s);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

void sub_20BA0D958(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C467270;
  v1 = a1[1];
  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0D9B4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C467270;
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  return a1;
}

void sub_20BA0DA00(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C467270;
  v1 = a1[1];
  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA0DA5C(uint64_t a1)
{
  sub_20BA0DB44(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA0DA80(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BA0DB44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = &off_24C467210;
  v2 = a1 + 8;
  sub_20B878B18(a1 + 8);
  if (*(char *)(a1 + 679) < 0)
    operator delete(*(void **)(a1 + 656));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 392) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 392 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 400) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 504);
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  sub_20B878A58(v2);
  return a1;
}

void sub_20BA0DC18(_QWORD *a1)
{
  sub_20BA0DC3C(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0DC3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C467560;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD39C80](v2[v5], 0x1070C802D7A0B02);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20BA0DCD0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)sub_20B87FB70(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)sub_20B87FB70(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)sub_20B87FB70(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)sub_20B87FB70(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)sub_20B87FB70(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)sub_20B87FB70(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_20BA0E0F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BA0E120()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0E134(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459398;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA0E168(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459398;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20BA0E184(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  const void *v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  void *v9;
  _QWORD *result;

  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  v7 = *a4;
  v8 = **(_QWORD **)(a1 + 8);
  v9 = (void *)sub_20BA0E488(v8, v5);
  memcpy(v9, v4, 2 * v5);
  result = sub_20BA0E514(v8);
  *result = v9;
  *((_DWORD *)result + 2) = 2 * v5;
  *((_WORD *)result + 6) = v6;
  *((_WORD *)result + 7) = v7;
  return result;
}

uint64_t sub_20BA0E1F8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E28))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA0E234()
{
  return &unk_24C458E28;
}

void sub_20BA0E244()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0E258(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459340;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA0E28C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459340;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20BA0E2A8(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  const void *v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  void *v9;
  _QWORD *result;

  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  v7 = *a4;
  v8 = **(_QWORD **)(a1 + 8);
  v9 = (void *)sub_20BA0E488(v8, v5);
  memcpy(v9, v4, 2 * v5);
  result = sub_20BA0E514(v8);
  *result = v9;
  *((_DWORD *)result + 2) = 2 * v5;
  *((_WORD *)result + 6) = v6;
  *((_WORD *)result + 7) = v7;
  return result;
}

uint64_t sub_20BA0E31C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E18))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA0E358()
{
  return &unk_24C458E18;
}

void sub_20BA0E368()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0E37C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459238;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA0E3B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459238;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20BA0E3CC(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  const void *v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  void *v9;
  _QWORD *result;

  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  v7 = *a4;
  v8 = **(_QWORD **)(a1 + 8);
  v9 = (void *)sub_20BA0E488(v8, v5);
  memcpy(v9, v4, 2 * v5);
  result = sub_20BA0E514(v8);
  *result = v9;
  *((_DWORD *)result + 2) = 2 * v5;
  *((_WORD *)result + 6) = v6;
  *((_WORD *)result + 7) = v7;
  return result;
}

uint64_t sub_20BA0E440(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458DE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA0E47C()
{
  return &unk_24C458DE8;
}

uint64_t sub_20BA0E488(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 80);
  if (!v3)
  {
    v3 = operator new();
    *(_QWORD *)v3 = &off_24C458FC0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0x2000;
    v5 = *(_QWORD *)(a1 + 80);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 80) = v3;
  }
  return sub_20BA0E590((_QWORD *)v3, a2);
}

_QWORD *sub_20BA0E514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_24C458FE0;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0x2000;
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 48) = v1;
  }
  return sub_20BA0E810((_QWORD *)v1);
}

uint64_t sub_20BA0E590(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1[1];
  v5 = a1[2] - v4;
  v6 = a1[5];
  if (v6 >= v5 >> 4)
  {
LABEL_5:
    if (a1[6] <= a2)
      v10 = a2;
    else
      v10 = a1[6];
    v11 = operator new[]();
    v12 = v11;
    v14 = (char *)a1[2];
    v13 = a1[3];
    if ((unint64_t)v14 >= v13)
    {
      v16 = (char *)a1[1];
      v17 = (v14 - v16) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        sub_20BA0E7FC();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 60)
          sub_20B800BC0();
        v21 = (char *)operator new(16 * v20);
      }
      else
      {
        v21 = 0;
      }
      v23 = &v21[16 * v17];
      *(_QWORD *)v23 = v10;
      *((_QWORD *)v23 + 1) = v12;
      v15 = v23 + 16;
      if (v14 != v16)
      {
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
          v23 -= 16;
          v14 -= 16;
        }
        while (v14 != v16);
        v14 = (char *)a1[1];
      }
      a1[1] = v23;
      a1[2] = v15;
      a1[3] = &v21[16 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = v10;
      *((_QWORD *)v14 + 1) = v11;
      v15 = v14 + 16;
    }
    a1[2] = v15;
    v24 = a1[1];
    v25 = (((uint64_t)v15 - v24) >> 4) - 1;
    a1[4] += a2;
    a1[5] = v25;
    return *(_QWORD *)(v24 + 16 * v25 + 8);
  }
  else
  {
    v7 = v5 >> 4;
    v8 = a1[4];
    v9 = (_QWORD *)(v4 + 16 * v6 + 8);
    while (v8 + a2 >= *(v9 - 1))
    {
      v8 = 0;
      ++v6;
      a1[4] = 0;
      a1[5] = v6;
      v9 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
    result = *v9 + 2 * v8;
    a1[4] = v8 + a2;
  }
  return result;
}

void sub_20BA0E740(_QWORD *a1)
{
  sub_20BA0E764(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0E764(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C458FC0;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (char *)a1[1];
  v3 = (char *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (*(_QWORD *)&v2[16 * v5 + 8])
    {
      MEMORY[0x20BD39C80](*(_QWORD *)&v2[16 * v5 + 8], 0x1000C80BDFB0063);
      v5 = a1[5];
      v2 = (char *)a1[1];
      v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20BA0E7FC()
{
  sub_20B80AD80("vector");
}

_QWORD *sub_20BA0E810(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;

  v2 = a1[5];
  v3 = a1[4];
  if (v3 == a1[6])
  {
    v3 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v4 = a1[1];
  if (v2 == (a1[2] - v4) >> 3)
  {
    v5 = operator new[]();
    v6 = v5;
    v8 = (uint64_t *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20BA0E7FC();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_20B800BC0();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = (uint64_t *)&v15[8 * v11];
      *v16 = v6;
      v9 = v16 + 1;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *--v16 = v17;
        }
        while (v8 != v10);
        v8 = (uint64_t *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v5;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v4 = a1[1];
    v3 = a1[4];
    v2 = a1[5];
  }
  v18 = *(_QWORD *)(v4 + 8 * v2);
  a1[4] = v3 + 1;
  result = (_QWORD *)(v18 + 16 * v3);
  *result = 0;
  result[1] = 0;
  return result;
}

void sub_20BA0E968(_QWORD *a1)
{
  sub_20BA0E98C(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0E98C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C458FE0;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD39C80](v2[v5], 0x1050C80717B85FCLL);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20BA0EA20(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 9) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1000)
    a2 = 1;
  if (v5 < 0x2000)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_20BA0EA8C(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20BA0DCD0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void sub_20BA0EB18()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0EB2C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C4592E8;
  return result;
}

void sub_20BA0EB50(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C4592E8;
}

uint64_t sub_20BA0EB68()
{
  return 0;
}

uint64_t sub_20BA0EB70(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA0EBAC()
{
  return &unk_24C458E08;
}

void sub_20BA0EBBC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA0EBD0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C459290;
  return result;
}

void sub_20BA0EBF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C459290;
}

uint64_t sub_20BA0EC0C()
{
  return 0;
}

uint64_t sub_20BA0EC14(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458DF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA0EC50()
{
  return &unk_24C458DF8;
}

void sub_20BA0EC5C(uint64_t a1, char *__s, _BYTE *a3)
{
  _QWORD *v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  const void *p_p;
  std::string::size_type v16;
  std::string *v17;
  void *v18;
  unsigned __int8 v19;
  void **v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::string v49;
  void *__p;
  _BYTE v51[15];
  unsigned __int8 v52;
  _QWORD v53[3];

  v53[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 40);
  v7 = strlen(__s);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 > v8)
  {
    v9 = v7;
    v10 = strncmp(__s, *(const char **)(a1 + 56), *(_QWORD *)(a1 + 48));
    v11 = v8 >= 5 && v10 == 0;
    if (v11 && !strncmp(&__s[v9 - 4], ".dic", 4uLL))
    {
      v12 = operator new();
      sub_20B9C4EB0(v12, 0);
      sub_20B80BBD0(&__p, *(char **)(a1 + 64));
      if ((v52 & 0x80u) == 0)
        v13 = v52;
      else
        v13 = *(_QWORD *)v51;
      v14 = &v49;
      sub_20B8298D4((uint64_t)&v49, v13 + 1);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      if (v13)
      {
        if ((v52 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        memmove(v14, p_p, v13);
      }
      *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
      v16 = strlen(__s);
      v17 = std::string::append(&v49, __s, v16);
      v18 = (void *)v17->__r_.__value_.__r.__words[0];
      v53[0] = v17->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if ((char)v52 < 0)
        operator delete(__p);
      __p = v18;
      *(_QWORD *)v51 = v53[0];
      *(_QWORD *)&v51[7] = *(_QWORD *)((char *)v53 + 7);
      v52 = v19;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        v19 = v52;
        v18 = __p;
      }
      if ((v19 & 0x80u) == 0)
        v20 = &__p;
      else
        v20 = (void **)v18;
      if (((*(uint64_t (**)(uint64_t, void **, const char *))(*(_QWORD *)v12 + 16))(v12, v20, "r") & 1) == 0)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) && sub_20BA0B4FC(v6, v12))
      {
        v21 = v6[3];
        v22 = (uint64_t *)v6[2];
        if ((unint64_t)v22 >= v21)
        {
          v24 = v6[1];
          v25 = ((uint64_t)v22 - v24) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            sub_20BA0E7FC();
          v26 = v21 - v24;
          v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1))
            v27 = v25 + 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)sub_20B800BE8((uint64_t)(v6 + 3), v28);
          else
            v29 = 0;
          v30 = (uint64_t *)&v29[8 * v25];
          v31 = &v29[8 * v28];
          *v30 = v12;
          v23 = v30 + 1;
          v33 = (char *)v6[1];
          v32 = (char *)v6[2];
          if (v32 != v33)
          {
            do
            {
              v34 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *--v30 = v34;
            }
            while (v32 != v33);
            v32 = (char *)v6[1];
          }
          v6[1] = v30;
          v6[2] = v23;
          v6[3] = v31;
          if (v32)
            operator delete(v32);
        }
        else
        {
          *v22 = v12;
          v23 = v22 + 1;
        }
        v35 = v6[6];
        v6[2] = v23;
        v36 = (uint64_t *)v6[5];
        if ((unint64_t)v36 >= v35)
        {
          v38 = v6[4];
          v39 = ((uint64_t)v36 - v38) >> 3;
          if ((unint64_t)(v39 + 1) >> 61)
            sub_20BA0E7FC();
          v40 = v35 - v38;
          v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
            v43 = (char *)sub_20B800BE8((uint64_t)(v6 + 6), v42);
          else
            v43 = 0;
          v44 = (uint64_t *)&v43[8 * v39];
          v45 = &v43[8 * v42];
          *v44 = v12;
          v37 = v44 + 1;
          v47 = (char *)v6[4];
          v46 = (char *)v6[5];
          if (v46 != v47)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *--v44 = v48;
            }
            while (v46 != v47);
            v46 = (char *)v6[4];
          }
          v6[4] = v44;
          v6[5] = v37;
          v6[6] = v45;
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v36 = v12;
          v37 = v36 + 1;
        }
        v6[5] = v37;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        *a3 = 1;
      }
      if ((char)v52 < 0)
        operator delete(__p);
    }
  }
}

void sub_20BA0F024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA0F08C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)a1 = &off_24C4672B0;
  v2 = (void **)(a1 + 1336);
  sub_20B95AD40((_BYTE *)(a1 + 1336));
  sub_20B95AD40((_BYTE *)(a1 + 1392));
  sub_20BA08728((_QWORD *)a1);
  sub_20BA0D548((uint64_t **)(a1 + 1520), 0);
  sub_20BA0DA80(a1 + 1472);
  if (*(char *)(a1 + 1471) < 0)
    operator delete(*(void **)(a1 + 1448));
  if (*(char *)(a1 + 1415) < 0)
    operator delete(*(void **)(a1 + 1392));
  if (*(char *)(a1 + 1359) < 0)
    operator delete(*v2);
  if (*(char *)(a1 + 1287) < 0)
    operator delete(*(void **)(a1 + 1264));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 1000) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 1000 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 1008) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 1095) < 0)
    operator delete(*(void **)(a1 + 1072));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 1112);
  sub_20BA0DB44(a1 + 312);
  v5 = *(void **)(a1 + 272);
  if (v5)
  {
    *(_QWORD *)(a1 + 280) = v5;
    operator delete(v5);
  }
  sub_20BA0DC3C((_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 200) = &unk_24C467270;
  v6 = *(_QWORD *)(a1 + 208);
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  *(_QWORD *)(a1 + 184) = &unk_24C467270;
  v7 = *(_QWORD *)(a1 + 192);
  if (v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  v8 = *(void **)(a1 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 32);
  if (v9)
  {
    *(_QWORD *)(a1 + 40) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(_QWORD *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_20BA0F23C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C4670A8;
  *(_OWORD *)(a1 + 24) = xmmword_20BA61B60;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  v3 = a1 + 96;
  v12 = (uint64_t *)(a1 + 168);
  v13 = a1 + 72;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 200) = &off_24C466FA8;
  *(_QWORD *)(a1 + 208) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C4675A0;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C467520;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 512;
  *(_QWORD *)(v4 + 8) = &off_24C467028;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = &off_24C467048;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = &off_24C458FA0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = &off_24C466FC8;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = &off_24C458F80;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = &off_24C466FE8;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  v6 = operator new[]();
  for (i = 0; i != 12288; i += 24)
  {
    v8 = v6 + i;
    *(_WORD *)v8 = 0;
    *(_QWORD *)(v8 + 12) = 0;
    *(_QWORD *)(v8 + 4) = 0;
    *(_DWORD *)(v8 + 20) = 0;
  }
  *(_QWORD *)(v4 + 128) = &off_24C467250;
  *(_QWORD *)(v4 + 136) = v6;
  *(_QWORD *)(a1 + 216) = &off_24C467068;
  *(_QWORD *)(a1 + 224) = v4;
  *(_QWORD *)(a1 + 232) = 0;
  sub_20BA0F5D4(v3);
  sub_20BA0F5D4(v13);
  v9 = *(_QWORD *)(a1 + 168);
  if (!((0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 184) - v9) >> 3)) >> 13))
  {
    v10 = *(_QWORD *)(a1 + 176);
    v18 = a1 + 184;
    v14 = (char *)operator new(0x30000uLL);
    v15 = &v14[v10 - v9];
    v16 = v15;
    v17 = v14 + 196608;
    sub_20B91E448(v12, &v14);
    sub_20BA111D0((uint64_t)&v14);
  }
  return a1;
}

void sub_20BA0F45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void **a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  v23 = (void *)v18[13];
  if (v23)
  {
    v18[14] = v23;
    operator delete(v23);
  }
  v18[11] = v14;
  v24 = v18[12];
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v18[9] = v16;
  v25 = v18[10];
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v18[7] = v20;
  v26 = v18[8];
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v18[5] = v17;
  v27 = v18[6];
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v18[3] = v22;
  v28 = v18[4];
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v18[1] = v21;
  v29 = v18[2];
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  MEMORY[0x20BD39CB0](v18, 0xB1C40213A2802);
  *(_QWORD *)(v13 + 200) = &off_24C466FA8;
  v30 = *(_QWORD *)(v13 + 208);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  a13 = a11;
  sub_20B91E3BC((void ***)&a13);
  v31 = *(void **)(v13 + 144);
  if (v31)
  {
    *(_QWORD *)(v13 + 152) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v13 + 120);
  if (v32)
  {
    *(_QWORD *)(v13 + 128) = v32;
    operator delete(v32);
  }
  v33 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 104) = v33;
    operator delete(v33);
  }
  v34 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v13 + 80) = v34;
    operator delete(v34);
  }
  if (*(char *)(v13 + 71) < 0)
    operator delete(*v19);
  _Unwind_Resume(a1);
}

void sub_20BA0F5D4(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = *(_BYTE **)a1;
  if (!((*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 16))
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x10000uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v7 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 0x10000;
    if (v1)
      operator delete(v1);
  }
}

_QWORD *sub_20BA0F664(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467068;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20BA0F6A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C466FA8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20BA0F6E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v9;

  *(_QWORD *)a1 = off_24C4670A8;
  *(_QWORD *)(a1 + 216) = &off_24C467068;
  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 200) = &off_24C466FA8;
  v3 = *(_QWORD *)(a1 + 208);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v9 = (void **)(a1 + 168);
  sub_20B91E3BC(&v9);
  v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(_QWORD *)(a1 + 152) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void sub_20BA0F7BC(uint64_t a1)
{
  sub_20BA0F6E4(a1);
  JUMPOUT(0x20BD39CB0);
}

double sub_20BA0F7E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = *(_QWORD **)(a1 + 224);
  v3 = v2[2];
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  v4 = v2[4];
  if (v4)
  {
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
  }
  v5 = v2[6];
  if (v5)
  {
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
  }
  v6 = v2[8];
  if (v6)
  {
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
  }
  v7 = v2[10];
  if (v7)
  {
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
  }
  v8 = *(_QWORD *)(a1 + 208);
  if (v8)
    *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  if (v9 != v10)
  {
    do
    {
      v11 = v9 - 24;
      sub_20B8292CC(v9 - 24, *(_QWORD **)(v9 - 16));
      v9 = v11;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(a1 + 176) = v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  result = 0.75;
  *(_OWORD *)(a1 + 24) = xmmword_20BA61B60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  return result;
}

uint64_t sub_20BA0F8AC(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)a1 + 80))(a1, __s, v4);
}

void sub_20BA0F8E8(_QWORD *a1, const void *a2, size_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;

  v6 = a1 + 9;
  (*(void (**)(_QWORD *))*a1)(a1);
  v7 = a3 + 4;
  sub_20BA0FB34(v6, a3 + 4);
  v9 = a1[21];
  v8 = a1[22];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
  v11 = a3 + 4 - v10;
  if (a3 + 4 <= v10)
  {
    if (v7 < v10)
    {
      v20 = v9 + 24 * v7;
      if (v8 != v20)
      {
        do
        {
          v21 = v8 - 24;
          sub_20B8292CC(v8 - 24, *(_QWORD **)(v8 - 16));
          v8 = v21;
        }
        while (v21 != v20);
      }
      a1[22] = v20;
    }
  }
  else
  {
    v12 = a1[23];
    if (0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3) >= v11)
    {
      v22 = v8 + 24 * v11;
      v23 = 24 * a3 - 24 * v10 + 96;
      v24 = (_QWORD *)(v8 + 8);
      do
      {
        *v24 = 0;
        v24[1] = 0;
        *(v24 - 1) = v24;
        v24 += 3;
        v23 -= 24;
      }
      while (v23);
      a1[22] = v22;
    }
    else
    {
      if (v7 > 0xAAAAAAAAAAAAAAALL)
        sub_20B80CDD8();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3);
      v14 = 2 * v13;
      if (2 * v13 <= v7)
        v14 = a3 + 4;
      if (v13 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      v31 = a1 + 23;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        sub_20B800BC0();
      v16 = 3 * v15;
      v17 = (char *)operator new(24 * v15);
      v27 = v17;
      v28 = &v17[24 * v10];
      v30 = &v17[8 * v16];
      v18 = 24 * a3 - 24 * v10 + 96;
      v19 = v28 + 8;
      do
      {
        *v19 = 0;
        v19[1] = 0;
        *(v19 - 1) = v19;
        v19 += 3;
        v18 -= 24;
      }
      while (v18);
      v29 = &v17[24 * v7];
      sub_20B91E448(a1 + 21, &v27);
      sub_20BA111D0((uint64_t)&v27);
    }
  }
  sub_20BA0FB34(a1 + 12, a3 + 4);
  if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 168))(a1, 64) & 1) != 0
    || (*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 168))(a1, 4))
  {
    v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 200))(a1);
    v26 = (void *)sub_20BA118C8(v25, a3);
    memcpy(v26, a2, a3);
    a2 = v26;
  }
  a1[1] = a2;
  a1[2] = a3;
  bzero((void *)a1[9], 8 * v7);
  bzero((void *)a1[12], 8 * v7);
}

void sub_20BA0FB34(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    sub_20B80CDD8();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)sub_20B800BE8(v7, v11);
  v13 = &v12[8 * v5];
  v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  v16 = &v13[8 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

uint64_t sub_20BA0FC34()
{
  return 1;
}

uint64_t sub_20BA0FC3C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 232) = a2;
  return result;
}

uint64_t sub_20BA0FC44(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  if (!a1[29])
    return 0;
  v1 = (*(uint64_t (**)(_QWORD *))(*a1 + 200))(a1);
  v2 = (_QWORD *)sub_20B8BBC1C(v1);
  return sub_20B88A79C(v2);
}

void sub_20BA0FC78(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  const char *v22;
  const char **v23;
  const char *v24;
  char *v25;
  std::string::size_type v26;
  _OWORD *v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  void **v33;
  __int128 v34;
  char *v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  void **v42;
  __int128 v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  std::string::size_type size;
  int v51;
  std::string::size_type v52;
  size_t v53;
  char *v54;
  char *v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  size_t v78;
  char *v79;
  void *__p[2];
  void *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  std::string v88;
  void *v89;
  _BYTE *v90;
  uint64_t v91;
  void **v92;
  void **v93;
  void **v94;
  void **v95;
  unint64_t *v96;
  char *v97;
  char *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v5 = strlen(a2) + 1;
  v6 = (char *)sub_20BA118C8(v4, v5);
  strncpy(v6, a2, v5);
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v7 = strlen(a2);
  v92 = (void **)v6;
  v8 = strlen(v6);
  if (v7)
  {
    v9 = 0;
    v10 = &v6[v8];
    while (1)
    {
      v11 = v10;
      if (v6 != v10)
      {
        while (*v6 != 10)
        {
          if (++v6 == v10)
          {
            v11 = v10;
            goto LABEL_8;
          }
        }
        v11 = v6;
      }
LABEL_8:
      *v11 = 0;
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      sub_20B8A7450((void ***)&v88, &v92);
      ++v9;
      if (v11 == v10)
        break;
      v6 = v11 + 1;
      v92 = (void **)(v11 + 1);
      if (v9 == v7)
      {
        v9 = v7;
        break;
      }
    }
    v12 = v89;
    v13 = v90;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v9 = 0;
  }
  if (v9 != (v13 - (_BYTE *)v12) >> 3)
  {
    v14 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/lattice_impl.cpp", 69);
    sub_20B828F84(v14, (uint64_t)"(", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = sub_20B828F84(v15, (uint64_t)") [", 3);
    v17 = sub_20B828F84(v16, (uint64_t)"lsize == lines.size()", 21);
    sub_20B828F84(v17, (uint64_t)"] ", 2);
    sub_20B89423C();
  }
  memset(&v88, 0, sizeof(v88));
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  if (v13 != (_BYTE *)v12)
  {
    v18 = 0;
    while (2)
    {
      v19 = (const char *)v12[v18];
      if (strcmp("EOS", v19))
      {
        v97 = 0;
        v98 = 0;
        v20 = strlen(v19);
        v21 = 0;
        v22 = &v19[v20];
        v23 = (const char **)&v97;
        while (v19 != v22)
        {
          v24 = v19;
          while (*v24 != 9)
          {
            if (++v24 == v22)
              goto LABEL_27;
          }
          *v24 = 0;
          *v23++ = v19;
          ++v21;
          v19 = v24 + 1;
          if (v21 == 2)
            goto LABEL_28;
        }
        v19 = v22;
LABEL_27:
        *v22 = 0;
        *v23 = v19;
        if (v21 != 1)
          break;
LABEL_28:
        v25 = v97;
        v26 = strlen(v97);
        std::string::append(&v88, v97, v26);
        sub_20B80BBD0(__p, v25);
        v27 = v86;
        if ((unint64_t)v86 >= v87)
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-v85] >> 3);
          v30 = v29 + 1;
          if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          if (0x5555555555555556 * ((uint64_t)(v87 - v85) >> 3) > v30)
            v30 = 0x5555555555555556 * ((uint64_t)(v87 - v85) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - v85) >> 3) >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v30;
          v96 = &v87;
          if (v31)
            v32 = (void **)sub_20B828D70((uint64_t)&v87, v31);
          else
            v32 = 0;
          v33 = &v32[3 * v29];
          v92 = v32;
          v93 = v33;
          v95 = &v32[3 * v31];
          v34 = *(_OWORD *)__p;
          v33[2] = v81;
          *(_OWORD *)v33 = v34;
          __p[1] = 0;
          v81 = 0;
          __p[0] = 0;
          v94 = v33 + 3;
          sub_20B83BAB4(&v85, &v92);
          v35 = v86;
          sub_20B83BC3C((uint64_t)&v92);
          v86 = v35;
          if (SHIBYTE(v81) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v28 = *(_OWORD *)__p;
          *((_QWORD *)v86 + 2) = v81;
          *v27 = v28;
          v86 = (char *)v27 + 24;
        }
        sub_20B80BBD0(__p, v98);
        v36 = v83;
        if ((unint64_t)v83 >= v84)
        {
          v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v83[-v82] >> 3);
          v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          if (0x5555555555555556 * ((uint64_t)(v84 - v82) >> 3) > v39)
            v39 = 0x5555555555555556 * ((uint64_t)(v84 - v82) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - v82) >> 3) >= 0x555555555555555)
            v40 = 0xAAAAAAAAAAAAAAALL;
          else
            v40 = v39;
          v96 = &v84;
          if (v40)
            v41 = (void **)sub_20B828D70((uint64_t)&v84, v40);
          else
            v41 = 0;
          v42 = &v41[3 * v38];
          v92 = v41;
          v93 = v42;
          v95 = &v41[3 * v40];
          v43 = *(_OWORD *)__p;
          v42[2] = v81;
          *(_OWORD *)v42 = v43;
          __p[1] = 0;
          v81 = 0;
          __p[0] = 0;
          v94 = v42 + 3;
          sub_20B83BAB4(&v82, &v92);
          v44 = v83;
          sub_20B83BC3C((uint64_t)&v92);
          v83 = v44;
          if (SHIBYTE(v81) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v37 = *(_OWORD *)__p;
          *((_QWORD *)v83 + 2) = v81;
          *v36 = v37;
          v83 = (char *)v36 + 24;
        }
        ++v18;
        v12 = v89;
        if (v18 < (v90 - (_BYTE *)v89) >> 3)
          continue;
      }
      break;
    }
  }
  if (&v83[-v82] != &v86[-v85])
  {
    v45 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/lattice_impl.cpp", 69);
    sub_20B828F84(v45, (uint64_t)"(", 1);
    v46 = (_QWORD *)std::ostream::operator<<();
    v47 = sub_20B828F84(v46, (uint64_t)") [", 3);
    v48 = sub_20B828F84(v47, (uint64_t)"features.size() == surfaces.size()", 34);
    sub_20B828F84(v48, (uint64_t)"] ", 2);
    sub_20B89423C();
  }
  v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  v51 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  v52 = v88.__r_.__value_.__r.__words[0];
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v88.__r_.__value_.__l.__size_;
  v53 = size + 1;
  v54 = (char *)sub_20BA118C8(v49, size + 1);
  v55 = v54;
  if (v51 >= 0)
    v56 = &v88;
  else
    v56 = (std::string *)v52;
  strncpy(v54, (const char *)v56, v53);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 72))(a1, v55);
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  sub_20B871810(*(_QWORD **)(v57 + 16));
  v59 = v58;
  *(_OWORD *)(v58 + 80) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 48) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)v58 = 0u;
  *(_QWORD *)(v58 + 48) = "BOS/EOS";
  *(_QWORD *)(v58 + 56) = "BOS/EOS";
  *(_BYTE *)(v58 + 109) = 2;
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  sub_20B871810(*(_QWORD **)(v60 + 16));
  v62 = (_QWORD *)v61;
  *(_OWORD *)(v61 + 80) = 0u;
  *(_OWORD *)(v61 + 96) = 0u;
  *(_OWORD *)(v61 + 48) = 0u;
  *(_OWORD *)(v61 + 64) = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_OWORD *)(v61 + 32) = 0u;
  *(_OWORD *)v61 = 0u;
  *(_QWORD *)(v61 + 48) = "BOS/EOS";
  *(_QWORD *)(v61 + 56) = "BOS/EOS";
  *(_BYTE *)(v61 + 109) = 3;
  *(_QWORD *)(v59 + 48) = *(_QWORD *)(a1 + 8);
  **(_QWORD **)(a1 + 72) = v59;
  if (v86 == (char *)v85)
  {
    v68 = v59;
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      sub_20B871810(*(_QWORD **)(v66 + 16));
      v68 = v67;
      *(_QWORD *)(v67 + 104) = 0;
      *(_OWORD *)(v67 + 88) = 0u;
      *(_OWORD *)(v67 + 72) = 0u;
      *(_OWORD *)(v67 + 56) = 0u;
      *(_OWORD *)(v67 + 40) = 0u;
      *(_OWORD *)(v67 + 24) = 0u;
      *(_OWORD *)(v67 + 8) = 0u;
      *(_QWORD *)v67 = v59;
      *(_QWORD *)(v59 + 8) = v67;
      *(_QWORD *)(v67 + 48) = *(_QWORD *)(a1 + 8) + v65;
      v69 = v85;
      v70 = v85 + v63;
      if (*(char *)(v85 + v63 + 23) < 0)
        v71 = *(_QWORD *)(v70 + 8);
      else
        LOWORD(v71) = *(unsigned __int8 *)(v85 + v63 + 23);
      *(_WORD *)(v67 + 88) = v71;
      v72 = *(char *)(v70 + 23);
      if (v72 < 0)
        v73 = *(_QWORD *)(v69 + v63 + 8);
      else
        LOWORD(v73) = v72;
      *(_WORD *)(v67 + 90) = v73;
      *(_BYTE *)(v67 + 109) = 0;
      *(_WORD *)(v67 + 84) = 0;
      *(_QWORD *)(v67 + 96) = 0;
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v75 = v82 + v63;
      if (*(char *)(v82 + v63 + 23) < 0)
      {
        v77 = *(const char **)v75;
        v76 = *(_QWORD *)(v75 + 8);
      }
      else
      {
        v76 = *(unsigned __int8 *)(v82 + v63 + 23);
        v77 = (const char *)(v82 + v63);
      }
      v78 = v76 + 1;
      v79 = (char *)sub_20BA118C8(v74, v76 + 1);
      *(_QWORD *)(v68 + 56) = strncpy(v79, v77, v78);
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v65) = v68;
      v65 += *(unsigned __int16 *)(v68 + 88);
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v65) = v68;
      ++v64;
      v63 += 24;
      v59 = v68;
    }
    while (v64 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-v85] >> 3));
  }
  *(_QWORD *)(v68 + 8) = v62;
  *v62 = v68;
  v92 = (void **)&v82;
  sub_20B83AFD0(&v92);
  v92 = (void **)&v85;
  sub_20B83AFD0(&v92);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_20BA10424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  a9 = &a15;
  sub_20B83AFD0((void ***)&a9);
  a15 = &a18;
  sub_20B83AFD0((void ***)&a15);
  if (a26 < 0)
    operator delete(__p);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BA104E8(_QWORD *a1)
{
  uint64_t v2;

  v2 = sub_20BA105E4((uint64_t)a1);
  return sub_20BA10510(a1, v2);
}

uint64_t sub_20BA10510(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[24];
  if (v4)
  {
    if (!(*(unsigned int (**)(_QWORD *))(*a1 + 8))(a1))
      return 0;
    v5 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 376);
    v6 = *(_QWORD *)(v4 + 384);
    v7 = (_QWORD *)(v4 + (v6 >> 1));
    if ((v6 & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v7 + v5);
    if ((v5(v7, a1, a2) & 1) == 0)
      return 0;
  }
  else
  {
    sub_20BA10700((uint64_t)a1, a2);
  }
  if (sub_20B8BAEA8(a2, 1))
    *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_QWORD *)(a2 + 8))++) = 0;
  if (*(_BYTE *)(a2 + 33) || (result = *(_QWORD *)(a2 + 24)) == 0)
  {
    (*(void (**)(_QWORD *, const char *))(*a1 + 320))(a1, "output buffer overflow");
    return 0;
  }
  return result;
}

uint64_t sub_20BA105E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 208);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_24C467230;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_WORD *)(v1 + 32) = 1;
    v3 = *(_QWORD *)(a1 + 208);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 208) = v1;
  }
  return v1;
}

uint64_t sub_20BA1065C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  __int16 v7;

  v5[0] = &off_24C467230;
  v5[1] = 0;
  v5[2] = a3;
  v6 = a2;
  v7 = 0;
  v3 = sub_20BA10510(a1, (uint64_t)v5);
  v5[0] = &off_24C467230;
  if ((_BYTE)v7 && v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  return v3;
}

void sub_20BA106CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA10700(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 8);
  v4 = (uint64_t *)(v3 + 8);
  if (*(_QWORD *)(v3 + 8))
  {
    do
    {
      v5 = *(const void **)(v3 + 48);
      v6 = *(unsigned __int16 *)(v3 + 88);
      if (sub_20B8BAEA8(a2, v6))
      {
        memcpy((void *)(*(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 8)), v5, v6);
        *(_QWORD *)(a2 + 8) += v6;
      }
      if (sub_20B8BAEA8(a2, 1))
        *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_QWORD *)(a2 + 8))++) = 9;
      v7 = sub_20B8BB040(a2, *(char **)(v3 + 56));
      if (sub_20B8BAEA8(v7, 1))
        *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_QWORD *)(a2 + 8))++) = 10;
      v3 = *v4;
      v8 = *v4;
      v9 = *(_QWORD *)(v8 + 8);
      v4 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }
  return sub_20B8BB040(a2, "EOS\n");
}

uint64_t sub_20BA10808(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20BA105E4((uint64_t)a1);
  return sub_20BA10838(a1, a2, v4);
}

uint64_t sub_20BA10838(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  const void *v8;
  size_t v9;
  uint64_t result;

  *(_QWORD *)(a3 + 8) = 0;
  if (!a2)
  {
    v7 = "node is NULL";
LABEL_15:
    (*(void (**)(_QWORD *, const char *))(*a1 + 320))(a1, v7);
    return 0;
  }
  v6 = a1[24];
  if (v6)
  {
    if ((sub_20BA14040(v6, (uint64_t)a1, a2, a3) & 1) == 0)
      return 0;
  }
  else
  {
    v8 = *(const void **)(a2 + 48);
    v9 = *(unsigned __int16 *)(a2 + 88);
    if (sub_20B8BAEA8(a3, v9))
    {
      memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v8, v9);
      *(_QWORD *)(a3 + 8) += v9;
    }
    if (sub_20B8BAEA8(a3, 1))
      *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 9;
    sub_20B8BB040(a3, *(char **)(a2 + 56));
  }
  if (sub_20B8BAEA8(a3, 1))
    *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 0;
  if (*(_BYTE *)(a3 + 33) || (result = *(_QWORD *)(a3 + 24)) == 0)
  {
    v7 = "output buffer overflow";
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_20BA1096C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  __int16 v8;

  v6[0] = &off_24C467230;
  v6[1] = 0;
  v6[2] = a4;
  v7 = a3;
  v8 = 0;
  v4 = sub_20BA10838(a1, a2, (uint64_t)v6);
  v6[0] = &off_24C467230;
  if ((_BYTE)v8 && v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  return v4;
}

void sub_20BA109DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA10A10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20BA105E4((uint64_t)a1);
  return sub_20BA10A40(a1, a2, v4);
}

uint64_t sub_20BA10A40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _OWORD v13[3];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)(a3 + 8) = 0;
  if ((unint64_t)(a2 - 513) < 0xFFFFFFFFFFFFFE00)
  {
    v4 = "nbest size must be 1 <= nbest <= 512";
LABEL_20:
    (*(void (**)(uint64_t *, const char *))(*a1 + 320))(a1, v4);
    return 0;
  }
  v6 = a2;
  do
  {
    if (!(*(unsigned int (**)(uint64_t *))(*a1 + 128))(a1))
      break;
    v7 = a1[24];
    if (v7)
    {
      if (!(*(unsigned int (**)(uint64_t *))(*a1 + 8))(a1))
        return 0;
      v8 = *(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 376);
      v9 = *(_QWORD *)(v7 + 384);
      v10 = (_QWORD *)(v7 + (v9 >> 1));
      if ((v9 & 1) != 0)
        v8 = *(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*v10 + v8);
      if ((v8(v10, a1, a3) & 1) == 0)
        return 0;
    }
    else
    {
      sub_20BA10700((uint64_t)a1, a3);
    }
    --v6;
  }
  while (v6);
  if (a1[24])
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    memset(v13, 0, sizeof(v13));
    BYTE13(v17) = 4;
    v11 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    *(_QWORD *)&v14 = v11 + (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    if (!sub_20BA14040(a1[24], (uint64_t)a1, (uint64_t)v13, a3))
      return 0;
  }
  if (sub_20B8BAEA8(a3, 1))
    *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 0;
  if (*(_BYTE *)(a3 + 33) || (result = *(_QWORD *)(a3 + 24)) == 0)
  {
    v4 = "output buffer overflow";
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_20BA10BB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  __int16 v8;

  v6[0] = &off_24C467230;
  v6[1] = 0;
  v6[2] = a4;
  v7 = a3;
  v8 = 0;
  v4 = sub_20BA10A40(a1, a2, (uint64_t)v6);
  v6[0] = &off_24C467230;
  if ((_BYTE)v8 && v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  return v4;
}

void sub_20BA10C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20BA10C5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 152);
}

uint64_t sub_20BA10C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 144);
  if (v2 == *(_QWORD *)(a1 + 152))
    return 0;
  else
    return *(unsigned __int8 *)(v2 + a2);
}

uint64_t sub_20BA10C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2 == *(_QWORD *)(a1 + 128))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

void sub_20BA10CA4(uint64_t a1, uint64_t a2, char a3)
{
  void **v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char v20;
  size_t v21;

  v6 = *(_QWORD *)(a1 + 144);
  v5 = (void **)(a1 + 144);
  if (v6 == *(_QWORD *)(a1 + 152))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v9 = v8 + 4;
    v6 = *(_QWORD *)(a1 + 144);
    v10 = *(char **)(a1 + 152);
    v11 = v8 + 4 - (_QWORD)&v10[-v6];
    if (v8 + 4 <= (unint64_t)&v10[-v6])
    {
      if (v8 + 4 < (unint64_t)&v10[-v6])
        *(_QWORD *)(a1 + 152) = v6 + v9;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 160);
      if (v12 - (uint64_t)v10 >= v11)
      {
        bzero(*(void **)(a1 + 152), v11);
        *(_QWORD *)(a1 + 152) = &v10[v11];
      }
      else
      {
        if ((v9 & 0x8000000000000000) != 0)
          sub_20B80CDD8();
        v13 = v12 - v6;
        v14 = 2 * v13;
        if (2 * v13 <= v9)
          v14 = v8 + 4;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v21 = v15;
        v16 = (char *)operator new(v15);
        bzero(&v10[(_QWORD)v16 - v6], v11);
        v17 = &v16[v9];
        v18 = &v16[v21];
        if (v10 == (char *)v6)
        {
          v16 = &v10[(_QWORD)v16 - v6];
        }
        else
        {
          v19 = &v10[~v6];
          do
          {
            v20 = *--v10;
            (v19--)[(_QWORD)v16] = v20;
          }
          while (v10 != (char *)v6);
          v10 = (char *)*v5;
        }
        *(_QWORD *)(a1 + 144) = v16;
        *(_QWORD *)(a1 + 152) = v17;
        *(_QWORD *)(a1 + 160) = v18;
        if (v10)
          operator delete(v10);
      }
      v6 = (unint64_t)*v5;
    }
  }
  *(_BYTE *)(v6 + a2) = a3;
}

void **sub_20BA10DF8(void **result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  if (a2 >= a3 || !a4)
    return result;
  v5 = a3;
  v7 = result;
  v8 = result + 15;
  if (result[15] == result[16])
  {
    v9 = (*((uint64_t (**)(void **))*result + 11))(result);
    v10 = v9 + 4;
    v11 = v7[15];
    v12 = v7[16];
    v13 = v12 - v11;
    v14 = (v12 - v11) >> 3;
    if (v9 + 4 > v14)
    {
      v15 = v9;
      v16 = v7[17];
      if (v10 - v14 > (v16 - v12) >> 3)
      {
        if (v10 >> 61)
          sub_20B80CDD8();
        v17 = v16 - v11;
        v18 = v17 >> 2;
        if (v17 >> 2 <= v10)
          v18 = v9 + 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        v20 = (char *)sub_20B800BE8((uint64_t)(v7 + 17), v19);
        v30 = v21;
        v22 = &v20[8 * v14];
        v23 = v20;
        bzero(v22, ((8 * v15 - v13 + 24) & 0xFFFFFFFFFFFFFFF8) + 8);
        v25 = (char *)v7[15];
        v24 = (char *)v7[16];
        if (v24 != v25)
        {
          do
          {
            v26 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v22 - 1) = v26;
            v22 -= 8;
          }
          while (v24 != v25);
          v24 = (char *)*v8;
        }
        v7[15] = v22;
        v7[16] = &v23[8 * v10];
        v7[17] = &v23[8 * v30];
        if (v24)
          operator delete(v24);
        goto LABEL_21;
      }
      bzero(v7[16], ((8 * v9 - v13 + 24) & 0xFFFFFFFFFFFFFFF8) + 8);
      v27 = &v12[8 * (v10 - v14)];
      goto LABEL_20;
    }
    if (v10 < v14)
    {
      v27 = &v11[8 * v10];
LABEL_20:
      v7[16] = v27;
    }
  }
LABEL_21:
  v28 = (*((uint64_t (**)(void **))*v7 + 11))(v7);
  if (v28 < v5)
    v5 = v28;
  (*((void (**)(void **, unint64_t, uint64_t))*v7 + 36))(v7, a2, 1);
  result = (void **)(*((uint64_t (**)(void **, unint64_t, uint64_t))*v7 + 36))(v7, v5, 1);
  v29 = a2 + 1;
  if (a2 + 1 < v5)
  {
    do
      result = (void **)(*((uint64_t (**)(void **, unint64_t, uint64_t))*v7 + 36))(v7, v29++, 2);
    while (v5 != v29);
  }
  *((_QWORD *)*v8 + a2) = a4;
  return result;
}

uint64_t sub_20BA11000()
{
  uint64_t v0;

  v0 = operator new();
  sub_20BA0F23C(v0, 0);
  return v0;
}

void sub_20BA11040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C4086B49158);
  _Unwind_Resume(a1);
}

BOOL sub_20BA11064(_QWORD *a1)
{
  return a1[1] && a1[12] != a1[13] && a1[9] != a1[10];
}

uint64_t sub_20BA11090(uint64_t a1)
{
  return **(_QWORD **)(a1 + 72);
}

uint64_t sub_20BA1109C(_QWORD *a1)
{
  return *(_QWORD *)(a1[12] + 8 * (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1));
}

uint64_t sub_20BA110CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_20BA110D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20BA110DC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * a2);
}

uint64_t sub_20BA110E8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * a2);
}

uint64_t sub_20BA110F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20BA110FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20BA11104(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

double sub_20BA1110C(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_20BA11114(uint64_t a1, float a2)
{
  double result;

  result = a2;
  *(double *)(a1 + 24) = result;
  return result;
}

float sub_20BA11120(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t sub_20BA1112C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232);
}

uint64_t sub_20BA11134(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_20BA1113C(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 40) & a2) != 0;
}

uint64_t sub_20BA1114C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_20BA11154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) |= a2;
  return result;
}

uint64_t sub_20BA11164(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) &= ~a2;
  return result;
}

uint64_t sub_20BA11174(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

double sub_20BA1117C(uint64_t a1)
{
  double result;
  _OWORD *v2;

  sub_20B871810(*(_QWORD **)(*(_QWORD *)(a1 + 224) + 16));
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  return result;
}

uint64_t sub_20BA111AC(uint64_t a1)
{
  uint64_t result;

  result = a1 + 48;
  if (*(char *)(a1 + 71) < 0)
    return *(_QWORD *)result;
  return result;
}

std::string *sub_20BA111C8(std::string *a1, char *a2)
{
  return sub_20B8A741C(a1 + 2, a2);
}

uint64_t sub_20BA111D0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B8292CC(i - 24, *(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BA11220(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C466FA8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA11270(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C466FE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20BA112B0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C458F80;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20BA112F0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C466FC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20BA11330(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C458FA0;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20BA11370(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467048;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_20BA113B0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467028;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BA113F4(_QWORD *a1)
{
  sub_20BA11754(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA1141C(_QWORD *a1)
{
  sub_20BA11440(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA11440(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C467520;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD39C80](v2[v5], 0x1070C80C36FC988);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20BA114D4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467028;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA11524(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467048;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA11574(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C458FA0;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA115C4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C466FC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA11614(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C458F80;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA11664(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C466FE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA116B4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467250;
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1060C8043D569EALL);
  return a1;
}

void sub_20BA116FC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467250;
  v1 = a1[1];
  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1060C8043D569EALL);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA11754(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_24C4675A0;
  a1[16] = &off_24C467250;
  v2 = a1[17];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1060C8043D569EALL);
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  a1[11] = &off_24C466FE8;
  v4 = a1[12];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[9] = &off_24C458F80;
  v5 = a1[10];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  a1[7] = &off_24C466FC8;
  v6 = a1[8];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  a1[5] = &off_24C458FA0;
  v7 = a1[6];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  a1[3] = &off_24C467048;
  v8 = a1[4];
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  a1[1] = &off_24C467028;
  v9 = a1[2];
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_20BA11878(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467068;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA118C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
  {
    v3 = operator new();
    *(_QWORD *)v3 = &unk_24C467290;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0x2000;
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 64) = v3;
  }
  return sub_20B8B3B6C((_QWORD *)v3, a2 + 1);
}

uint64_t sub_20BA11958(uint64_t a1, unsigned int a2)
{
  const __CFLocale *v3;
  const __CFAllocator *Default;
  CFRange v6;

  *(_DWORD *)(a1 + 8) = a2;
  v3 = sub_20B8D0FCC(a2);
  Default = CFAllocatorGetDefault();
  v6.location = 0;
  v6.length = 0;
  *(_QWORD *)a1 = CFStringTokenizerCreate(Default, 0, v6, 1uLL, v3);
  CFRelease(v3);
  return a1;
}

const void **sub_20BA119B0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

BOOL sub_20BA119E0(uint64_t a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  const __CFCharacterSet *v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int CharacterAtIndex;
  unsigned int v11;
  int v12;
  _DWORD *v13;

  Length = CFStringGetLength(theString);
  if (Length < 2)
    return 0;
  v5 = Length;
  v6 = (const __CFCharacterSet *)sub_20B8D298C();
  v7 = 0;
  v8 = 0;
  v9 = MEMORY[0x24BDAC740];
  do
  {
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v7);
    v11 = CharacterAtIndex;
    if ((CharacterAtIndex > 0xFF || (*(_DWORD *)(v9 + 4 * CharacterAtIndex + 60) & 0x400) == 0)
      && !CFCharacterSetIsCharacterMember(v6, CharacterAtIndex))
    {
      v12 = *(_DWORD *)(a1 + 8);
      switch(v12)
      {
        case 1:
          v13 = dword_20BA4F8D8;
          break;
        case 5:
          v13 = dword_20BA538D8;
          break;
        case 2:
          v13 = dword_20BA518D8;
          break;
        default:
          return 0;
      }
      if (((v13[v11 >> 5] >> ~(_BYTE)v11) & 1) == 0)
        return 0;
      ++v8;
    }
    ++v7;
  }
  while (v5 != v7);
  return v8 >= 1 && (double)v5 * 0.5 <= (double)v8;
}

BOOL sub_20BA11B14(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v1 = *(_DWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v2 < 1)
    return 0;
  v3 = v2 >> 2;
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  if (*v1 > 0x257u)
    return 1;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v4 == v6)
      break;
    v8 = v1[v6++];
  }
  while (v8 < 0x258);
  return v7 < v3;
}

_QWORD *sub_20BA11B78(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C4674E0;
  v2 = a1 + 3;
  sub_20BA0D870(a1 + 1);
  sub_20BA0D870(v2);
  sub_20BA0D870(a1 + 5);
  sub_20BA0D870(a1 + 7);
  sub_20BA0D870(a1 + 9);
  sub_20B827F10((uint64_t)(a1 + 11));
  a1[44] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[47] = sub_20BA11CF4;
  a1[48] = 0;
  return a1;
}

void sub_20BA11BEC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[9] = &unk_24C467270;
  v3 = v1[10];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  v1[7] = &unk_24C467270;
  v4 = v1[8];
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  v1[5] = &unk_24C467270;
  v5 = v1[6];
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  v1[3] = &unk_24C467270;
  v6 = v1[4];
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  v1[1] = &unk_24C467270;
  v7 = v1[2];
  if (v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA11CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + 8);
  v5 = (uint64_t *)(v4 + 8);
  if (*(_QWORD *)(v4 + 8))
  {
    do
    {
      v6 = *(const void **)(v4 + 48);
      v7 = *(unsigned __int16 *)(v4 + 88);
      if (sub_20B8BAEA8(a3, v7))
      {
        memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v6, v7);
        *(_QWORD *)(a3 + 8) += v7;
      }
      if (sub_20B8BAEA8(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 9;
      v8 = sub_20B8BB040(a3, *(char **)(v4 + 56));
      if (sub_20B8BAEA8(v8, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 10;
      v4 = *v5;
      v9 = *v5;
      v10 = *(_QWORD *)(v9 + 8);
      v5 = (uint64_t *)(v9 + 8);
    }
    while (v10);
  }
  sub_20B8BB040(a3, "EOS\n");
  return 1;
}

uint64_t sub_20BA11E08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_24C4674E0;
  v2 = a1 + 88;
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 88) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 96) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 200);
  *(_QWORD *)(a1 + 72) = &unk_24C467270;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 56) = &unk_24C467270;
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  *(_QWORD *)(a1 + 40) = &unk_24C467270;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  *(_QWORD *)(a1 + 24) = &unk_24C467270;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = &unk_24C467270;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
  return a1;
}

void sub_20BA11F64(uint64_t a1)
{
  sub_20BA11E08(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA11F88(_QWORD *a1, uint64_t a2)
{
  std::string::size_type v4;
  void **v5;
  int v6;
  int v7;
  void *v9;
  void **v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  uint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  const void *v47;
  uint64_t v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  uint64_t v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *p_str;
  std::string *v63;
  uint64_t v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string *v67;
  std::string *v68;
  uint64_t v69;
  std::string::size_type v70;
  unint64_t v71;
  std::string *p_p;
  std::string *v73;
  uint64_t v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string *v77;
  uint64_t v78;
  std::string::size_type v79;
  std::string::size_type v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  std::string *v87;
  uint64_t v88;
  std::string v90;
  void *v91[2];
  unsigned __int8 v92;
  std::string v93;
  std::string __str;
  std::string __p;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  void **v106;
  std::string::size_type v107;
  unsigned __int8 v108;

  sub_20B8938D8(a2, "output-format-type", &v106);
  a1[47] = sub_20BA11CF4;
  a1[48] = 0;
  v4 = v108;
  if ((v108 & 0x80u) != 0)
    v4 = v107;
  if (v4 == 4)
  {
    if ((v108 & 0x80u) == 0)
      v10 = (void **)&v106;
    else
      v10 = v106;
    if (*(_DWORD *)v10 == 1701736302)
    {
      v9 = sub_20BA12D04;
    }
    else
    {
      if (*(_DWORD *)v10 != 1886221668)
        goto LABEL_18;
      v9 = sub_20BA12D0C;
    }
LABEL_119:
    a1[47] = v9;
    a1[48] = 0;
LABEL_278:
    v88 = 1;
    goto LABEL_281;
  }
  if (v4 == 6)
  {
    v5 = (void **)&v106;
    if ((v108 & 0x80u) != 0)
      v5 = v106;
    v6 = *(_DWORD *)v5;
    v7 = *((unsigned __int16 *)v5 + 2);
    if (v6 == 1634427255 && v7 == 26996)
    {
      v9 = sub_20BA12C10;
      goto LABEL_119;
    }
  }
LABEL_18:
  sub_20B80BBD0(&v105, "%m\\t%H\\n");
  sub_20B80BBD0(&v104, "%m\\t%H\\n");
  sub_20B80BBD0(&v103, "");
  sub_20B80BBD0(&v102, "EOS\\n");
  sub_20B80BBD0(&v101, "");
  sub_20B80BBD0(&v100, "node-format");
  sub_20B80BBD0(&v99, "bos-format");
  sub_20B80BBD0(&v98, "eos-format");
  sub_20B80BBD0(&v97, "unk-format");
  sub_20B80BBD0(&v96, "eon-format");
  v11 = v108;
  if ((v108 & 0x80u) != 0)
    v11 = v107;
  if (v11)
  {
    std::string::append(&v100, "-", 1uLL);
    if ((v108 & 0x80u) == 0)
      v12 = (const std::string::value_type *)&v106;
    else
      v12 = (const std::string::value_type *)v106;
    if ((v108 & 0x80u) == 0)
      v13 = v108;
    else
      v13 = v107;
    std::string::append(&v100, v12, v13);
    std::string::append(&v99, "-", 1uLL);
    if ((v108 & 0x80u) == 0)
      v14 = (const std::string::value_type *)&v106;
    else
      v14 = (const std::string::value_type *)v106;
    if ((v108 & 0x80u) == 0)
      v15 = v108;
    else
      v15 = v107;
    std::string::append(&v99, v14, v15);
    std::string::append(&v98, "-", 1uLL);
    if ((v108 & 0x80u) == 0)
      v16 = (const std::string::value_type *)&v106;
    else
      v16 = (const std::string::value_type *)v106;
    if ((v108 & 0x80u) == 0)
      v17 = v108;
    else
      v17 = v107;
    std::string::append(&v98, v16, v17);
    std::string::append(&v97, "-", 1uLL);
    if ((v108 & 0x80u) == 0)
      v18 = (const std::string::value_type *)&v106;
    else
      v18 = (const std::string::value_type *)v106;
    if ((v108 & 0x80u) == 0)
      v19 = v108;
    else
      v19 = v107;
    std::string::append(&v97, v18, v19);
    std::string::append(&v96, "-", 1uLL);
    if ((v108 & 0x80u) == 0)
      v20 = (const std::string::value_type *)&v106;
    else
      v20 = (const std::string::value_type *)v106;
    if ((v108 & 0x80u) == 0)
      v21 = v108;
    else
      v21 = v107;
    std::string::append(&v96, v20, v21);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v100;
    else
      v22 = (std::string *)v100.__r_.__value_.__r.__words[0];
    sub_20B8938D8(a2, (char *)v22, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_59;
    }
    else
    {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[11] - 24) + 88), 0);
      v37 = sub_20B828F84(a1 + 11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/writer.cpp", 63);
      sub_20B828F84(v37, (uint64_t)"(", 1);
      v38 = (_QWORD *)std::ostream::operator<<();
      v39 = sub_20B828F84(v38, (uint64_t)") [", 3);
      v40 = sub_20B828F84(v39, (uint64_t)"!tmp.empty()", 12);
      v41 = sub_20B828F84(v40, (uint64_t)"] ", 2);
      v42 = sub_20B828F84(v41, (uint64_t)"unkown format type [", 20);
      if ((v108 & 0x80u) == 0)
        v43 = (void **)&v106;
      else
        v43 = v106;
      if ((v108 & 0x80u) == 0)
        v44 = v108;
      else
        v44 = v107;
      v45 = sub_20B828F84(v42, (uint64_t)v43, v44);
      sub_20B828F84(v45, (uint64_t)"]", 1);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_59:
        if (size)
          goto LABEL_60;
LABEL_99:
        v46 = 0;
        goto LABEL_258;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_99;
  }
LABEL_60:
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v100;
  else
    v24 = (std::string *)v100.__r_.__value_.__r.__words[0];
  sub_20B8938D8(a2, (char *)v24, &__p);
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v99;
  else
    v25 = (std::string *)v99.__r_.__value_.__r.__words[0];
  sub_20B8938D8(a2, (char *)v25, &__str);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v98;
  else
    v26 = (std::string *)v98.__r_.__value_.__r.__words[0];
  sub_20B8938D8(a2, (char *)v26, &v93);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v97;
  else
    v27 = (std::string *)v97.__r_.__value_.__r.__words[0];
  sub_20B8938D8(a2, (char *)v27, v91);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v96;
  else
    v28 = (std::string *)v96.__r_.__value_.__r.__words[0];
  sub_20B8938D8(a2, (char *)v28, &v90);
  v29 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  v30 = v105.__r_.__value_.__l.__size_;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  else
    v31 = v105.__r_.__value_.__l.__size_;
  v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = __p.__r_.__value_.__l.__size_;
  if (v31 != v32)
  {
    a1[47] = sub_20BA1307C;
    a1[48] = 0;
LABEL_146:
    std::string::operator=(&v105, &__p);
LABEL_147:
    v59 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    else
      v60 = v103.__r_.__value_.__l.__size_;
    v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = __str.__r_.__value_.__l.__size_;
    if (v60 == v61)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v103.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v103.__r_.__value_.__l.__data_, p_str, v103.__r_.__value_.__l.__size_))
          goto LABEL_164;
      }
      else
      {
        if (!*((_BYTE *)&v103.__r_.__value_.__s + 23))
          goto LABEL_164;
        v63 = &v103;
        while (v63->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
        {
          v63 = (std::string *)((char *)v63 + 1);
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v59)
            goto LABEL_164;
        }
      }
    }
    std::string::operator=(&v103, &__str);
LABEL_164:
    v64 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    else
      v65 = v102.__r_.__value_.__l.__size_;
    v66 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v66 = v93.__r_.__value_.__l.__size_;
    if (v65 == v66)
    {
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = &v93;
      else
        v67 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((_BYTE *)&v102.__r_.__value_.__s + 23))
        {
          v68 = &v102;
          while (v68->__r_.__value_.__s.__data_[0] == v67->__r_.__value_.__s.__data_[0])
          {
            v68 = (std::string *)((char *)v68 + 1);
            v67 = (std::string *)((char *)v67 + 1);
            if (!--v64)
              goto LABEL_181;
          }
          goto LABEL_180;
        }
LABEL_181:
        v69 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v70 = v104.__r_.__value_.__l.__size_;
        v71 = v92;
        if ((v92 & 0x80u) != 0)
          v71 = (unint64_t)v91[1];
        p_p = (std::string *)v91;
        if (v70 == v71)
        {
          if ((v92 & 0x80u) != 0)
            p_p = (std::string *)v91[0];
          if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(v104.__r_.__value_.__l.__data_, p_p, v104.__r_.__value_.__l.__size_))
            {
LABEL_196:
              p_p = (std::string *)v91;
              goto LABEL_214;
            }
          }
          else if (*((_BYTE *)&v104.__r_.__value_.__s + 23))
          {
            v73 = &v104;
            while (v73->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
            {
              v73 = (std::string *)((char *)v73 + 1);
              p_p = (std::string *)((char *)p_p + 1);
              if (!--v69)
                goto LABEL_197;
            }
            goto LABEL_196;
          }
LABEL_197:
          v74 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
          if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
          else
            v75 = v105.__r_.__value_.__l.__size_;
          v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v76 = __p.__r_.__value_.__l.__size_;
          p_p = &__p;
          if (v75 == v76)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (memcmp(v105.__r_.__value_.__l.__data_, p_p, v105.__r_.__value_.__l.__size_))
              {
LABEL_212:
                p_p = &__p;
                goto LABEL_214;
              }
            }
            else if (*((_BYTE *)&v105.__r_.__value_.__s + 23))
            {
              v77 = &v105;
              while (v77->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                v77 = (std::string *)((char *)v77 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v74)
                  goto LABEL_213;
              }
              goto LABEL_212;
            }
LABEL_213:
            p_p = &v105;
          }
        }
LABEL_214:
        std::string::operator=(&v104, p_p);
        v78 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        else
          v79 = v101.__r_.__value_.__l.__size_;
        v80 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v80 = v90.__r_.__value_.__l.__size_;
        if (v79 == v80)
        {
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = &v90;
          else
            v81 = (std::string *)v90.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((_BYTE *)&v101.__r_.__value_.__s + 23))
            {
              v82 = &v101;
              while (v82->__r_.__value_.__s.__data_[0] == v81->__r_.__value_.__s.__data_[0])
              {
                v82 = (std::string *)((char *)v82 + 1);
                v81 = (std::string *)((char *)v81 + 1);
                if (!--v78)
                  goto LABEL_231;
              }
              goto LABEL_230;
            }
LABEL_231:
            if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v105;
            else
              v83 = (std::string *)v105.__r_.__value_.__r.__words[0];
            sub_20BA0D8E4((uint64_t)(a1 + 1), (char *)v83);
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = &v103;
            else
              v84 = (std::string *)v103.__r_.__value_.__r.__words[0];
            sub_20BA0D8E4((uint64_t)(a1 + 3), (char *)v84);
            if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v85 = &v102;
            else
              v85 = (std::string *)v102.__r_.__value_.__r.__words[0];
            sub_20BA0D8E4((uint64_t)(a1 + 5), (char *)v85);
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = &v104;
            else
              v86 = (std::string *)v104.__r_.__value_.__r.__words[0];
            sub_20BA0D8E4((uint64_t)(a1 + 7), (char *)v86);
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = &v101;
            else
              v87 = (std::string *)v101.__r_.__value_.__r.__words[0];
            sub_20BA0D8E4((uint64_t)(a1 + 9), (char *)v87);
            goto LABEL_247;
          }
          if (!memcmp(v101.__r_.__value_.__l.__data_, v81, v101.__r_.__value_.__l.__size_))
            goto LABEL_231;
        }
LABEL_230:
        std::string::operator=(&v101, &v90);
        goto LABEL_231;
      }
      if (!memcmp(v102.__r_.__value_.__l.__data_, v67, v102.__r_.__value_.__l.__size_))
        goto LABEL_181;
    }
LABEL_180:
    std::string::operator=(&v102, &v93);
    goto LABEL_181;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &__p;
  else
    v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v47 = (const void *)v105.__r_.__value_.__r.__words[0];
    if (memcmp(v105.__r_.__value_.__l.__data_, v33, v105.__r_.__value_.__l.__size_))
    {
      a1[47] = sub_20BA1307C;
      a1[48] = 0;
      goto LABEL_145;
    }
  }
  else if (*((_BYTE *)&v105.__r_.__value_.__s + 23))
  {
    v34 = &v105;
    v35 = v33;
    v36 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    while (v34->__r_.__value_.__s.__data_[0] == v35->__r_.__value_.__s.__data_[0])
    {
      v34 = (std::string *)((char *)v34 + 1);
      v35 = (std::string *)((char *)v35 + 1);
      if (!--v36)
        goto LABEL_103;
    }
    goto LABEL_138;
  }
LABEL_103:
  v48 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    v49 = v103.__r_.__value_.__l.__size_;
  v50 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = __str.__r_.__value_.__l.__size_;
  if (v49 != v50)
    goto LABEL_138;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &__str;
  else
    v51 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v103.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v103.__r_.__value_.__l.__data_, v51, v103.__r_.__value_.__l.__size_))
      goto LABEL_138;
  }
  else if (*((_BYTE *)&v103.__r_.__value_.__s + 23))
  {
    v52 = &v103;
    while (v52->__r_.__value_.__s.__data_[0] == v51->__r_.__value_.__s.__data_[0])
    {
      v52 = (std::string *)((char *)v52 + 1);
      v51 = (std::string *)((char *)v51 + 1);
      if (!--v48)
        goto LABEL_121;
    }
    goto LABEL_138;
  }
LABEL_121:
  v53 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  else
    v54 = v102.__r_.__value_.__l.__size_;
  v55 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v55 = v93.__r_.__value_.__l.__size_;
  if (v54 != v55)
    goto LABEL_138;
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = &v93;
  else
    v56 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (!memcmp(v102.__r_.__value_.__l.__data_, v56, v102.__r_.__value_.__l.__size_))
      goto LABEL_137;
LABEL_138:
    a1[47] = sub_20BA1307C;
    a1[48] = 0;
    if ((v29 & 0x80) == 0)
    {
      if (!(_DWORD)v29)
        goto LABEL_147;
      v58 = &v105;
      while (v58->__r_.__value_.__s.__data_[0] == v33->__r_.__value_.__s.__data_[0])
      {
        v58 = (std::string *)((char *)v58 + 1);
        v33 = (std::string *)((char *)v33 + 1);
        if (!--v29)
          goto LABEL_147;
      }
      goto LABEL_146;
    }
    v47 = (const void *)v105.__r_.__value_.__r.__words[0];
LABEL_145:
    if (!memcmp(v47, v33, v30))
      goto LABEL_147;
    goto LABEL_146;
  }
  if (*((_BYTE *)&v102.__r_.__value_.__s + 23))
  {
    v57 = &v102;
    while (v57->__r_.__value_.__s.__data_[0] == v56->__r_.__value_.__s.__data_[0])
    {
      v57 = (std::string *)((char *)v57 + 1);
      v56 = (std::string *)((char *)v56 + 1);
      if (!--v53)
        goto LABEL_137;
    }
    goto LABEL_138;
  }
LABEL_137:
  if (!sub_20BA12FDC((unsigned __int8 *)&v104, (unsigned __int8 *)v91))
    goto LABEL_138;
LABEL_247:
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if ((char)v92 < 0)
    operator delete(v91[0]);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = 1;
LABEL_258:
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v105.__r_.__value_.__l.__data_);
    if ((v46 & 1) != 0)
      goto LABEL_278;
  }
  else if ((v46 & 1) != 0)
  {
    goto LABEL_278;
  }
  v88 = 0;
LABEL_281:
  if ((char)v108 < 0)
    operator delete(v106);
  return v88;
}

void sub_20BA12A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  if (*(char *)(v53 - 169) < 0)
    operator delete(*(void **)(v53 - 192));
  if (*(char *)(v53 - 145) < 0)
    operator delete(*(void **)(v53 - 168));
  if (*(char *)(v53 - 121) < 0)
    operator delete(*(void **)(v53 - 144));
  if (*(char *)(v53 - 97) < 0)
    operator delete(*(void **)(v53 - 120));
  if (*(char *)(v53 - 73) < 0)
    operator delete(*(void **)(v53 - 96));
  if (*(char *)(v53 - 49) < 0)
    operator delete(*(void **)(v53 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_20BA12C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + 8);
  v5 = (uint64_t *)(v4 + 8);
  if (*(_QWORD *)(v4 + 8))
  {
    do
    {
      v6 = *(const void **)(v4 + 48);
      v7 = *(unsigned __int16 *)(v4 + 88);
      if (sub_20B8BAEA8(a3, v7))
      {
        memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v6, v7);
        *(_QWORD *)(a3 + 8) += v7;
      }
      if (sub_20B8BAEA8(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v4 = *v5;
      v8 = *v5;
      v9 = *(_QWORD *)(v8 + 8);
      v5 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }
  if (sub_20B8BAEA8(a3, 1))
    *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 10;
  return 1;
}

uint64_t sub_20BA12D04()
{
  return 1;
}

uint64_t sub_20BA12D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const void *v18;
  size_t v19;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v6)
  {
    v7 = v6;
    do
    {
      v8 = *(unsigned __int8 *)(v7 + 109);
      if (v8 == 3)
      {
        v9 = a3;
        v10 = "EOS";
      }
      else
      {
        if (v8 != 2)
        {
          v18 = *(const void **)(v7 + 48);
          v19 = *(unsigned __int16 *)(v7 + 88);
          if (sub_20B8BAEA8(a3, v19))
          {
            memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v18, v19);
            *(_QWORD *)(a3 + 8) += v19;
          }
          goto LABEL_8;
        }
        v9 = a3;
        v10 = "BOS";
      }
      sub_20B8BB040(v9, v10);
LABEL_8:
      if (sub_20B8BAEA8(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v11 = sub_20B8BB040(a3, *(char **)(v7 + 56));
      if (sub_20B8BAEA8(v11, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v12 = sub_20BA1314C(a3, *(_DWORD *)(v7 + 48) - v5);
      if (sub_20B8BAEA8(v12, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v13 = sub_20BA1314C(a3, *(_DWORD *)(v7 + 48) - v5 + *(unsigned __int16 *)(v7 + 88));
      if (sub_20B8BAEA8(v13, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v14 = sub_20BA13248(a3, *(unsigned __int16 *)(v7 + 92));
      if (sub_20B8BAEA8(v14, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v15 = sub_20BA13248(a3, *(unsigned __int16 *)(v7 + 94));
      if (sub_20B8BAEA8(v15, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v16 = sub_20BA1314C(a3, *(unsigned __int8 *)(v7 + 109));
      if (sub_20B8BAEA8(v16, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      sub_20BA13338(a3, *(_QWORD *)(v7 + 96));
      for (i = *(_QWORD *)(v7 + 40); i; i = *(_QWORD *)(i + 8))
      {
        if (sub_20B8BAEA8(a3, 1))
          *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
        sub_20BA1314C(a3, *(_DWORD *)(i + 16));
      }
      if (sub_20B8BAEA8(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 10;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  return 1;
}

BOOL sub_20BA12FDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_20BA1307C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(char **)(a1 + 32);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!sub_20BA13430(v7, a2, v6, v7, a3))
    return 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v9 = (uint64_t *)(v8 + 8);
  while (1)
  {
    v10 = *v9;
    v11 = *v9;
    v12 = *(_QWORD *)(v11 + 8);
    v9 = (uint64_t *)(v11 + 8);
    if (!v12)
      break;
    if (*(_BYTE *)(v10 + 109) == 1)
      v13 = 64;
    else
      v13 = 16;
    v8 = sub_20BA13430(v8, a2, *(char **)(a1 + v13), v10, a3);
    if ((v8 & 1) == 0)
      return 0;
  }
  return sub_20BA13430(v8, a2, *(char **)(a1 + 48), v10, a3);
}

uint64_t sub_20BA1314C(uint64_t a1, int a2)
{
  char *p_s;
  uint64_t v3;
  unsigned int v4;
  char *v5;
  BOOL v6;
  char *v7;
  char *v8;
  char v9;
  char __s;
  _BYTE v13[71];

  *(_QWORD *)&v13[63] = *MEMORY[0x24BDAC8D0];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v13;
    __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_9:
    *p_s = 48;
    v5 = p_s + 1;
    goto LABEL_10;
  }
  v3 = 0;
  do
  {
    p_s[v3] = (char)a2 % 10 + 48;
    v4 = a2 + 9;
    ++v3;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (!v3)
    goto LABEL_9;
  v5 = &p_s[v3];
LABEL_10:
  v6 = p_s == v5;
  *v5 = 0;
  v7 = v5 - 1;
  if (!v6 && v7 > p_s)
  {
    v8 = p_s + 1;
    do
    {
      v9 = *(v8 - 1);
      *(v8 - 1) = *v7;
      *v7-- = v9;
    }
    while (v8++ < v7);
  }
  return sub_20B8BB040(a1, &__s);
}

uint64_t sub_20BA13248(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  char *v4;
  char *v5;
  char *v6;
  char v7;
  char __s;
  _BYTE v11[71];

  *(_QWORD *)&v11[63] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_6;
  v2 = 0;
  do
  {
    v3 = (unsigned __int16)a2;
    v11[v2++ - 1] = ((unsigned __int16)a2 % 0xAu) | 0x30;
    LOWORD(a2) = (unsigned __int16)a2 / 0xAu;
  }
  while (v3 > 9);
  if (v2)
  {
    v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    v4 = v11;
    __s = 48;
  }
  *v4 = 0;
  v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    v6 = v11;
    do
    {
      v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return sub_20B8BB040(a1, &__s);
}

uint64_t sub_20BA13338(uint64_t a1, uint64_t a2)
{
  char *p_s;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  BOOL v6;
  char *v7;
  char *v8;
  char v9;
  char __s;
  _BYTE v13[71];

  *(_QWORD *)&v13[63] = *MEMORY[0x24BDAC8D0];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v13;
    __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_9:
    *p_s = 48;
    v5 = p_s + 1;
    goto LABEL_10;
  }
  v3 = 0;
  do
  {
    p_s[v3] = (char)a2 % 10 + 48;
    v4 = a2 + 9;
    ++v3;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (!v3)
    goto LABEL_9;
  v5 = &p_s[v3];
LABEL_10:
  v6 = p_s == v5;
  *v5 = 0;
  v7 = v5 - 1;
  if (!v6 && v7 > p_s)
  {
    v8 = p_s + 1;
    do
    {
      v9 = *(v8 - 1);
      *(v8 - 1) = *v7;
      *v7-- = v9;
    }
    while (v8++ < v7);
  }
  return sub_20B8BB040(a1, &__s);
}

uint64_t sub_20BA13430(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::string *v17;
  char v18;
  const char *v19;
  int v20;
  int v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  char *v33;
  int v34;
  BOOL v35;
  int v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *i;
  int v44;
  unsigned __int8 *v45;
  char *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  _BYTE *v52;
  char *v53;
  std::string::value_type *v54;
  char v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  std::string *v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  std::string *v78;
  BOOL v79;
  std::string *v80;
  char *v81;
  std::string::value_type v82;
  uint64_t v83;
  const char *v84;
  const char *v86;
  std::string *v87;
  const char *v88;
  char *__dst;
  uint64_t v91;
  std::string v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v7 = (char *)operator new[]();
  v91 = operator new[]();
  v8 = *a3;
  if (!*a3)
  {
LABEL_187:
    v83 = 1;
    goto LABEL_188;
  }
  v9 = 0;
  v88 = "[iseSCwcnblLh] is required after %p";
  while (1)
  {
    if (v8 != 37)
    {
      if (v8 == 92)
      {
        v11 = *++a3;
        v10 = v11;
        if (v11 <= 101)
        {
          if (v10 == 98)
            v18 = 8;
          else
            v18 = 0;
          if (v10 == 97)
            v18 = 7;
          if (v10 == 92)
            v8 = 92;
          else
            v8 = v18;
        }
        else
        {
          v8 = 0;
          switch(v10)
          {
            case 'n':
              v8 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 'u':
              break;
            case 'r':
              v8 = 13;
              break;
            case 's':
              v8 = 32;
              break;
            case 't':
              v8 = 9;
              break;
            case 'v':
              v8 = 11;
              break;
            default:
              if (v10 == 102)
                v8 = 12;
              else
                v8 = 0;
              break;
          }
        }
      }
      if (sub_20B8BAEA8(a5, 1))
        *(_BYTE *)(*(_QWORD *)(a5 + 24) + (*(_QWORD *)(a5 + 8))++) = v8;
      v13 = (unsigned __int8 *)a3;
      goto LABEL_32;
    }
    v13 = (unsigned __int8 *)(a3 + 1);
    v12 = a3[1];
    if (v12 <= 98)
    {
      switch(a3[1])
      {
        case 'F':
          goto LABEL_36;
        case 'G':
        case 'I':
        case 'J':
        case 'K':
          goto LABEL_199;
        case 'H':
          sub_20B8BB040(a5, *(char **)(a4 + 56));
          goto LABEL_32;
        case 'L':
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
          sub_20B8B3D08(a5, v25);
          goto LABEL_32;
        case 'M':
          v24 = *(unsigned __int16 *)(a4 + 90);
          v23 = (const void *)(*(_QWORD *)(a4 + 48) - v24 + *(unsigned __int16 *)(a4 + 88));
          goto LABEL_55;
        default:
          if (v12 != 37)
          {
            if (v12 != 83)
              goto LABEL_199;
            v23 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
            goto LABEL_55;
          }
          if (!sub_20B8BAEA8(a5, 1))
            goto LABEL_32;
          *(_BYTE *)(*(_QWORD *)(a5 + 24) + *(_QWORD *)(a5 + 8)) = 37;
          v29 = *(_QWORD *)(a5 + 8) + 1;
          break;
      }
      goto LABEL_60;
    }
    if (v12 <= 108)
      break;
    switch(v12)
    {
      case 'm':
        v23 = *(const void **)(a4 + 48);
        v24 = *(unsigned __int16 *)(a4 + 88);
LABEL_55:
        if (sub_20B8BAEA8(a5, v24))
        {
          memcpy((void *)(*(_QWORD *)(a5 + 24) + *(_QWORD *)(a5 + 8)), v23, v24);
          v29 = *(_QWORD *)(a5 + 8) + v24;
LABEL_60:
          *(_QWORD *)(a5 + 8) = v29;
        }
        break;
      case 'p':
        v13 = (unsigned __int8 *)(a3 + 2);
        v26 = a3[2];
        if (v26 <= 98)
        {
          if (v26 == 67)
          {
            v70 = *(_QWORD *)(*(_QWORD *)a4 + 96);
            v69 = *(_QWORD *)(a4 + 96) - *(__int16 *)(a4 + 84);
LABEL_146:
            v28 = v69 - v70;
LABEL_147:
            sub_20BA13338(a5, v28);
            break;
          }
          v27 = (unsigned __int16 *)(a4 + 90);
          if (v26 == 76)
          {
LABEL_129:
            sub_20BA13248(a5, *v27);
            break;
          }
          if (v26 != 83)
            goto LABEL_196;
          v57 = *(_QWORD *)(a4 + 48);
          v58 = *(unsigned __int16 *)(a4 + 90);
          v59 = *(unsigned __int16 *)(a4 + 88);
          if (sub_20B8BAEA8(a5, v58 - v59))
          {
            memcpy((void *)(*(_QWORD *)(a5 + 24) + *(_QWORD *)(a5 + 8)), (const void *)(v57 - v58 + v59), v58 - v59);
            v29 = *(_QWORD *)(a5 + 8) + v58 - v59;
            goto LABEL_60;
          }
        }
        else
        {
          v27 = (unsigned __int16 *)(a4 + 88);
          switch(a3[2])
          {
            case 'c':
              v28 = *(_QWORD *)(a4 + 96);
              goto LABEL_147;
            case 'd':
            case 'f':
            case 'g':
            case 'i':
            case 'j':
            case 'k':
            case 'm':
            case 'o':
            case 'q':
            case 'r':
              goto LABEL_196;
            case 'e':
              v63 = *(_QWORD *)(a4 + 48);
              v64 = v63
                  - (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2)
                  + *(unsigned __int16 *)(a4 + 88);
              goto LABEL_144;
            case 'h':
              v67 = a3[3];
              v66 = (unsigned __int8 *)(a3 + 3);
              v65 = v67;
              v68 = (unsigned __int16 *)(a4 + 92);
              if (v67 != 114)
              {
                v68 = (unsigned __int16 *)(a4 + 94);
                if (v65 != 108)
                {
                  v86 = "lr is required after %ph";
                  goto LABEL_195;
                }
              }
              sub_20BA13248(a5, *v68);
              v13 = v66;
              break;
            case 'l':
              goto LABEL_129;
            case 'n':
              v69 = *(_QWORD *)(a4 + 96);
              v70 = *(_QWORD *)(*(_QWORD *)a4 + 96);
              goto LABEL_146;
            case 'p':
              v13 = (unsigned __int8 *)(a3 + 4);
              v71 = a3[4];
              v72 = a3[3];
              if (v71 == 92)
              {
                LOBYTE(v71) = 0;
                v73 = a3[5];
                v13 = (unsigned __int8 *)(a3 + 5);
                if (v73 <= 101)
                {
                  v22 = v91;
                  switch(v73)
                  {
                    case '\\':
                      LOBYTE(v71) = 92;
                      break;
                    case 'a':
                      LOBYTE(v71) = 7;
                      break;
                    case 'b':
                      LOBYTE(v71) = 8;
                      break;
                  }
                }
                else
                {
                  v22 = v91;
                  switch(a3[5])
                  {
                    case 'n':
                      LOBYTE(v71) = 10;
                      break;
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'u':
                      break;
                    case 'r':
                      LOBYTE(v71) = 13;
                      break;
                    case 's':
                      LOBYTE(v71) = 32;
                      break;
                    case 't':
                      LOBYTE(v71) = 9;
                      break;
                    case 'v':
                      LOBYTE(v71) = 11;
                      break;
                    default:
                      if (v73 == 102)
                        LOBYTE(v71) = 12;
                      break;
                  }
                }
              }
              else
              {
                v22 = v91;
              }
              v75 = *(_QWORD *)(a4 + 40);
              if (v75)
              {
                while (1)
                {
                  if (v75 != *(_QWORD *)(a4 + 40) && sub_20B8BAEA8(a5, 1))
                    *(_BYTE *)(*(_QWORD *)(a5 + 24) + (*(_QWORD *)(a5 + 8))++) = v71;
                  if (v72 != 99)
                    break;
                  sub_20BA1314C(a5, *(_DWORD *)(v75 + 16));
                  v75 = *(_QWORD *)(v75 + 8);
                  if (!v75)
                    goto LABEL_32;
                }
                (*(void (**)(uint64_t, const char *, ...))(*(_QWORD *)a2 + 320))(a2, "[icP] is required after %pp", (const void *)(a4 + 94));
              }
              else
              {
                (*(void (**)(uint64_t, const char *))(*(_QWORD *)a2 + 320))(a2, "no path information is available");
              }
              goto LABEL_192;
            case 's':
              v74 = *(_QWORD *)(a4 + 48);
              v64 = v74 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
LABEL_144:
              sub_20BA1314C(a5, v64);
              goto LABEL_32;
            default:
              if (v26 != 119)
                goto LABEL_196;
              v61 = *(__int16 *)(a4 + 84);
              if ((v61 & 0x80000000) != 0)
              {
                v93.__r_.__value_.__s.__data_[0] = 45;
                v61 = -v61;
                v62 = (std::string *)((char *)&v93.__r_.__value_.__l.__data_ + 1);
              }
              else
              {
                v62 = &v93;
                if (!*(_WORD *)(a4 + 84))
                  goto LABEL_168;
              }
              v76 = 0;
              do
              {
                v62->__r_.__value_.__s.__data_[v76] = v61
                                                    - 10 * (((26215 * (__int16)v61) >> 18) + (26215 * (__int16)v61 < 0))
                                                    + 48;
                v77 = (unsigned __int16)(v61 + 9);
                ++v76;
                v61 = ((26215 * (__int16)v61) >> 18) + ((26215 * (__int16)v61) >> 31);
              }
              while (v77 > 0x12);
              if (v76)
              {
                v78 = (std::string *)((char *)v62 + v76);
                goto LABEL_169;
              }
LABEL_168:
              v62->__r_.__value_.__s.__data_[0] = 48;
              v78 = (std::string *)((char *)&v62->__r_.__value_.__l.__data_ + 1);
LABEL_169:
              v79 = v62 == v78;
              v78->__r_.__value_.__s.__data_[0] = 0;
              v80 = (std::string *)((char *)v78 - 1);
              if (!v79 && v80 > v62)
              {
                v81 = &v62->__r_.__value_.__s.__data_[1];
                do
                {
                  v82 = *(v81 - 1);
                  *(v81 - 1) = v80->__r_.__value_.__s.__data_[0];
                  v80->__r_.__value_.__s.__data_[0] = v82;
                  v80 = (std::string *)((char *)v80 - 1);
                  v56 = v81++ >= (char *)v80;
                }
                while (!v56);
              }
              goto LABEL_114;
          }
        }
        break;
      case 's':
        v14 = *(unsigned __int8 *)(a4 + 109);
        if (!*(_BYTE *)(a4 + 109))
          goto LABEL_108;
        v15 = 0;
        do
        {
          v93.__r_.__value_.__s.__data_[v15++] = (v14 % 0xA) | 0x30;
          v16 = v14 > 9;
          v14 /= 0xAu;
        }
        while (v16);
        if (v15)
        {
          v17 = (std::string *)((char *)&v93 + v15);
        }
        else
        {
LABEL_108:
          v93.__r_.__value_.__s.__data_[0] = 48;
          v17 = (std::string *)((char *)&v93.__r_.__value_.__l.__data_ + 1);
        }
        v17->__r_.__value_.__s.__data_[0] = 0;
        v53 = (char *)&v17[-1].__r_.__value_.__r.__words[2] + 7;
        if (v17 != &v93 && (std::string *)((char *)&v17[-1].__r_.__value_.__r.__words[2] + 7) > &v93)
        {
          v54 = &v93.__r_.__value_.__s.__data_[1];
          do
          {
            v55 = *(v54 - 1);
            *(v54 - 1) = *v53;
            *v53-- = v55;
            v56 = v54++ >= v53;
          }
          while (!v56);
        }
LABEL_114:
        sub_20B8BB040(a5, (char *)&v93);
        break;
      default:
        goto LABEL_199;
    }
LABEL_32:
    v8 = v13[1];
    a3 = (char *)(v13 + 1);
    if (!v8)
      goto LABEL_187;
  }
  if (v12 == 99)
  {
    sub_20BA1314C(a5, *(__int16 *)(a4 + 84));
    goto LABEL_32;
  }
  if (v12 != 102)
  {
LABEL_199:
    v22 = v91;
    sub_20B80BBD0(&v93, "unknown meta char: ");
    std::string::append(&v93, a3 + 1, 1uLL);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = &v93;
    else
      v87 = (std::string *)v93.__r_.__value_.__r.__words[0];
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 320))(a2, v87);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    goto LABEL_192;
  }
LABEL_36:
  v19 = *(const char **)(a4 + 56);
  if (!*v19)
  {
    v86 = "no feature information available";
LABEL_195:
    v88 = v86;
LABEL_196:
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a2 + 320))(a2, v88);
    v83 = 0;
LABEL_188:
    v22 = v91;
    goto LABEL_193;
  }
  __dst = v7;
  if (!v9)
  {
    v37 = strncpy(v7, v19, 0x2000uLL);
    v38 = strlen(v37);
    if (v38 < 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v39 = (unint64_t)&v7[v38];
      v40 = 64;
      v41 = (_QWORD *)v91;
      do
      {
        v42 = v40;
        for (i = v7; ; ++i)
        {
          v44 = *i;
          if (v44 != 9 && v44 != 32)
            break;
          ++v7;
        }
        if (v44 == 34)
        {
          v45 = (unsigned __int8 *)++i;
          v46 = i;
          if ((unint64_t)i < v39)
          {
            v45 = (unsigned __int8 *)i;
            v46 = i;
            do
            {
              v47 = *v46;
              if (v47 == 34)
              {
                v48 = *++v46;
                if (v48 != 34)
                  break;
              }
              *v45++ = v47;
              ++v46;
            }
            while ((unint64_t)v46 < v39);
          }
          v49 = (unsigned __int8 *)memchr(v46, 44, v39 - (_QWORD)v46);
          if (v49)
            v50 = v49;
          else
            v50 = (unsigned __int8 *)v39;
        }
        else
        {
          v51 = memchr(i, 44, v39 - (_QWORD)v7);
          if (v51)
            v52 = v51;
          else
            v52 = (_BYTE *)v39;
          v50 = (unsigned __int8 *)&i[v52 - v7];
          v45 = v50;
        }
        v40 = v42 - 1;
        if (v42 < 2)
        {
          *v41 = i;
          ++v9;
          if (v42 == 1)
            break;
        }
        else
        {
          *v45 = 0;
          *v41 = i;
          ++v9;
        }
        ++v41;
        v7 = (char *)(v50 + 1);
      }
      while ((unint64_t)(v50 + 1) < v39);
    }
  }
  if (*v13 != 70)
  {
    LOBYTE(v20) = 9;
    v7 = __dst;
    goto LABEL_62;
  }
  v13 = (unsigned __int8 *)(a3 + 2);
  v20 = a3[2];
  v7 = __dst;
  if (v20 != 92)
  {
LABEL_62:
    v22 = v91;
    goto LABEL_63;
  }
  v21 = a3[3];
  v13 = (unsigned __int8 *)(a3 + 3);
  if (v21 <= 101)
  {
    if (v21 == 98)
      v60 = 8;
    else
      v60 = 0;
    if (v21 == 97)
      v60 = 7;
    if (v21 == 92)
      LOBYTE(v20) = 92;
    else
      LOBYTE(v20) = v60;
    goto LABEL_62;
  }
  v22 = v91;
  LOBYTE(v20) = 0;
  switch(a3[3])
  {
    case 'n':
      LOBYTE(v20) = 10;
      break;
    case 'o':
    case 'p':
    case 'q':
    case 'u':
      break;
    case 'r':
      LOBYTE(v20) = 13;
      break;
    case 's':
      LOBYTE(v20) = 32;
      break;
    case 't':
      LOBYTE(v20) = 9;
      break;
    case 'v':
      LOBYTE(v20) = 11;
      break;
    default:
      if (v21 == 102)
        LOBYTE(v20) = 12;
      else
        LOBYTE(v20) = 0;
      break;
  }
LABEL_63:
  if (v13[1] != 91)
  {
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a2 + 320))(a2, "cannot find '['");
    goto LABEL_192;
  }
  v30 = 0;
  v31 = 0;
  v13 += 2;
  while (2)
  {
    v32 = (char)*v13;
    if ((v32 - 48) < 0xA)
    {
      v30 = (char)*v13 + 10 * v30 - 48;
LABEL_67:
      ++v13;
      continue;
    }
    break;
  }
  if (v32 == 44 || v32 == 93)
  {
    if (v30 >= v9)
    {
      v84 = "given index is out of range";
      goto LABEL_191;
    }
    v33 = *(char **)(v22 + 8 * v30);
    v34 = *v33;
    v35 = v34 != 42;
    if (v34 == 42)
    {
      v36 = *v13;
    }
    else
    {
      if (v31)
      {
        if (sub_20B8BAEA8(a5, 1))
          *(_BYTE *)(*(_QWORD *)(a5 + 24) + (*(_QWORD *)(a5 + 8))++) = v20;
        v33 = *(char **)(v22 + 8 * v30);
      }
      sub_20B8BB040(a5, v33);
      v36 = *v13;
    }
    if (v36 == 93)
      goto LABEL_32;
    v30 = 0;
    v31 = v35;
    goto LABEL_67;
  }
  v84 = "cannot find ']'";
LABEL_191:
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)a2 + 320))(a2, v84);
LABEL_192:
  v83 = 0;
LABEL_193:
  MEMORY[0x20BD39C80](v22, 0x10C80436913F5);
  MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  return v83;
}

void sub_20BA13FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  MEMORY[0x20BD39C80](a17, 0x10C80436913F5);
  MEMORY[0x20BD39C80](v24, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA14040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v4;
  uint64_t result;

  switch(*(_BYTE *)(a3 + 109))
  {
    case 0:
      v4 = (char **)(a1 + 16);
      goto LABEL_8;
    case 1:
      v4 = (char **)(a1 + 64);
      goto LABEL_8;
    case 2:
      v4 = (char **)(a1 + 32);
      goto LABEL_8;
    case 3:
      v4 = (char **)(a1 + 48);
      goto LABEL_8;
    case 4:
      v4 = (char **)(a1 + 80);
LABEL_8:
      result = sub_20BA13430(a1, a2, *v4, a3, a4);
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_20BA140A0(uint64_t a1, const __CFURL *a2)
{
  const __CFURL *v3;
  CFStringRef v4;
  NSObject *v5;
  const void *v6;
  uint8_t buf[4];
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    v3 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, CFSTR("VulgarWordUsage.db"), 0);
    v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
    v5 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v9 = v4;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::VulgarWordUsageDatabaseWrapper] database: %@", buf, 0xCu);
    }
    v6 = (const void *)LXVulgarWordUsageDatabaseCreate();
    sub_20B8E774C((const void **)a1, v6);
    if (v4)
      CFRelease(v4);
    if (v3)
      CFRelease(v3);
  }
  return a1;
}

void sub_20BA141BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20BA14230(uint64_t a1, CFStringRef theString1)
{
  const __CFString *v4;
  NSObject *v5;
  const void **v6;
  CFStringRef Copy;
  int v8;
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!theString1 || (v4 = *(const __CFString **)(a1 + 8)) == 0 || CFStringCompare(theString1, v4, 0))
  {
    v5 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v8 = 138412290;
      v9 = theString1;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::setAppContext] set appContext: %@", (uint8_t *)&v8, 0xCu);
    }
    v6 = (const void **)(a1 + 8);
    if (theString1 && CFStringGetLength(theString1) >= 1)
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString1);
    else
      Copy = 0;
    sub_20B87E150(v6, Copy);
  }
}

void sub_20BA14338(uint64_t a1, CFStringRef theString1)
{
  const __CFString *v4;
  NSObject *v5;
  const void **v6;
  CFStringRef Copy;
  int v8;
  CFStringRef v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!theString1 || (v4 = *(const __CFString **)(a1 + 16)) == 0 || CFStringCompare(theString1, v4, 0))
  {
    v5 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v8 = 138412290;
      v9 = theString1;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::setRecipientContext] set recipientContext: %@", (uint8_t *)&v8, 0xCu);
    }
    v6 = (const void **)(a1 + 16);
    if (theString1 && CFStringGetLength(theString1) >= 1)
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString1);
    else
      Copy = 0;
    sub_20B87E150(v6, Copy);
  }
}

BOOL sub_20BA14440(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  result = 0;
  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 && *a1)
  {
    v5 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = a1[1];
      v7 = a1[2];
      v8 = 138412802;
      v9 = a2;
      v10 = 2112;
      v11 = v6;
      v12 = 2112;
      v13 = v7;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::incrementUsageCount] vulgarWord: %@, app: %@, recipient: %@", (uint8_t *)&v8, 0x20u);
    }
    return LXVulgarWordUsageDatabaseIncrementUsageCount() != 0;
  }
  return result;
}

uint64_t sub_20BA14534(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int CanAutocorrect;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = *a1;
  if (result)
  {
    CanAutocorrect = LXVulgarWordUsageDatabaseCanAutocorrect();
    v6 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = a1[1];
      v8 = a1[2];
      v9 = 138413058;
      v10 = a2;
      v11 = 1024;
      v12 = CanAutocorrect;
      v13 = 2112;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[VulgarWordUsageDatabaseWrapper::canAutocorrect] vulgarWord: %@, result: %d, app: %@, recipient: %@", (uint8_t *)&v9, 0x26u);
    }
    return CanAutocorrect != 0;
  }
  return result;
}

BOOL sub_20BA14628(_QWORD *a1)
{
  if (!*a1)
    return 0;
  sub_20BA14230((uint64_t)a1, 0);
  sub_20BA14338((uint64_t)a1, 0);
  return LXVulgarWordUsageDatabaseReset() != 0;
}

uint64_t sub_20BA1467C(uint64_t a1, const __CFString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;

  length = a3.length;
  location = a3.location;
  *(_QWORD *)a1 = &off_24C465A70;
  *(_QWORD *)(a1 + 8) = CFStringCreateWithSubstring(0, a2, a3);
  *(_QWORD *)(a1 + 16) = location;
  *(_QWORD *)(a1 + 24) = length;
  *(_BYTE *)(a1 + 32) = CFStringGetCharacterAtIndex(a2, length + location - 1) == 39;
  return a1;
}

uint64_t sub_20BA146E8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C465A70;
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return a1;
}

void sub_20BA14724(uint64_t a1)
{
  sub_20BA146E8(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA14748(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_24C465910;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  a1[2] = v2;
  a1[4] = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BA147C4(_QWORD *a1)
{
  sub_20BA14748(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA147E8(_QWORD *a1, CFStringRef theString, int a3)
{
  char v3;
  char *v6;
  char *v7;
  unint64_t v8;
  CFIndex v9;
  uint64_t v10;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  int CharacterAtIndex;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  CFIndex Length;
  CFIndex v38;
  CFIndex v39;
  CFIndex v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  CFRange v55;
  CFRange v56;

  v3 = a3;
  if (theString && a3)
  {
    v6 = (char *)a1[1];
    v7 = (char *)a1[2];
    if (v7 == v6)
    {
      v9 = 0;
      v8 = a1[4];
      v6 = (char *)a1[2];
      if (!v8)
      {
LABEL_30:
        if (v6 != v7)
        {
          do
          {
            if (*(_QWORD *)v6)
              (*(void (**)(_QWORD))(**(_QWORD **)v6 + 8))(*(_QWORD *)v6);
            v6 += 8;
          }
          while (v6 != v7);
          v6 = (char *)a1[1];
        }
        a1[2] = v6;
        a1[4] = 0;
LABEL_57:
        Length = CFStringGetLength(theString);
        if (Length > v9)
        {
          v38 = Length;
          v39 = Length - 1;
          v40 = v9;
          do
          {
            if (v40 == v39 || CFStringGetCharacterAtIndex(theString, v40) == 39)
            {
              v41 = operator new();
              v56.length = ++v40 - v9;
              v56.location = v9;
              sub_20BA1467C(v41, theString, v56);
              v43 = (uint64_t *)a1[2];
              v42 = a1[3];
              if ((unint64_t)v43 >= v42)
              {
                v45 = a1[1];
                v46 = ((uint64_t)v43 - v45) >> 3;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_81;
                v47 = v42 - v45;
                v48 = v47 >> 2;
                if (v47 >> 2 <= (unint64_t)(v46 + 1))
                  v48 = v46 + 1;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v48;
                if (v49)
                  v49 = (unint64_t)sub_20B87FB70(v49);
                else
                  v50 = 0;
                v51 = (uint64_t *)(v49 + 8 * v46);
                *v51 = v41;
                v44 = v51 + 1;
                v53 = (char *)a1[1];
                v52 = (char *)a1[2];
                if (v52 != v53)
                {
                  do
                  {
                    v54 = *((_QWORD *)v52 - 1);
                    v52 -= 8;
                    *--v51 = v54;
                  }
                  while (v52 != v53);
                  v52 = (char *)a1[1];
                }
                a1[1] = v51;
                a1[2] = v44;
                a1[3] = v49 + 8 * v50;
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *v43 = v41;
                v44 = v43 + 1;
              }
              a1[2] = v44;
              v9 = v40;
            }
            else
            {
              ++v40;
            }
          }
          while (v40 != v38);
        }
        return;
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *(_QWORD *)&v6[8 * v8];
        v11 = CFStringGetLength(theString);
        v12 = CFStringGetLength(theString);
        v13 = *(_QWORD *)(v10 + 24);
        if (v12 - v9 < v13)
          break;
        v14 = v9;
        if (v13 >= 1)
        {
          v15 = 0;
          while (1)
          {
            CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v9 + v15);
            if (CharacterAtIndex != CFStringGetCharacterAtIndex(*(CFStringRef *)(v10 + 8), v15))
              goto LABEL_27;
            if (v13 == ++v15)
            {
              v14 = v9 + v15;
              break;
            }
          }
        }
        if (*(_BYTE *)(v10 + 32))
          v17 = 1;
        else
          v17 = v14 == v11;
        if (!v17)
          break;
        v6 = (char *)a1[1];
        v7 = (char *)a1[2];
        v9 += *(_QWORD *)(*(_QWORD *)&v6[8 * v8++] + 24);
        a1[4] = v8;
        v18 = v7 - v6;
        if (v8 >= (v7 - v6) >> 3)
          goto LABEL_52;
      }
LABEL_27:
      a1[4] = v8;
      v6 = (char *)a1[1];
      v7 = (char *)a1[2];
      if (!v8)
        goto LABEL_30;
    }
    while (1)
    {
      v18 = v7 - v6;
LABEL_52:
      if (v18 >> 3 <= v8)
        break;
      v36 = *(_QWORD *)&v6[8 * (v18 >> 3) - 8];
      if (v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        v6 = (char *)a1[1];
        v7 = (char *)a1[2];
      }
      v7 -= 8;
      a1[2] = v7;
    }
    if ((unint64_t)v18 <= 0x50)
      goto LABEL_57;
  }
  else
  {
    v19 = (_QWORD *)a1[1];
    v20 = (_QWORD *)a1[2];
    if (v19 != v20)
    {
      do
      {
        if (*v19)
          (*(void (**)(_QWORD))(*(_QWORD *)*v19 + 8))(*v19);
        ++v19;
      }
      while (v19 != v20);
      v19 = (_QWORD *)a1[1];
    }
    a1[2] = v19;
    a1[4] = 0;
    if (theString && (v3 & 1) == 0)
    {
      v21 = operator new();
      v55.length = CFStringGetLength(theString);
      v55.location = 0;
      sub_20BA1467C(v21, theString, v55);
      v23 = (uint64_t *)a1[2];
      v22 = a1[3];
      if ((unint64_t)v23 >= v22)
      {
        v25 = a1[1];
        v26 = ((uint64_t)v23 - v25) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
LABEL_81:
          sub_20B80CDD8();
        v27 = v22 - v25;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v29 = (unint64_t)sub_20B87FB70(v29);
        else
          v30 = 0;
        v31 = (uint64_t *)(v29 + 8 * v26);
        v32 = v29 + 8 * v30;
        *v31 = v21;
        v24 = v31 + 1;
        v34 = (char *)a1[1];
        v33 = (char *)a1[2];
        if (v33 != v34)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *--v31 = v35;
          }
          while (v33 != v34);
          v33 = (char *)a1[1];
        }
        a1[1] = v31;
        a1[2] = v24;
        a1[3] = v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      a1[2] = v24;
    }
  }
}

void sub_20BA14BEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned int v5;

  if (a4)
    v5 = (**(_DWORD **)(a1 + 8) >> 4) & 0x20 | (((**(_DWORD **)(a1 + 8) >> 5) & 1) << 7) | (**(_DWORD **)(a1 + 8) >> 2) & 0x40 | ((char)**(_DWORD **)(a1 + 8) >> 7) & 0x18 | 2;
  else
    v5 = (**(_DWORD **)(a1 + 8) >> 4) & 0x20 | (((**(_DWORD **)(a1 + 8) >> 5) & 1) << 7) | (**(_DWORD **)(a1 + 8) >> 2) & 0x40 | ((char)**(_DWORD **)(a1 + 8) >> 7) & 0x18;
  sub_20B9096D0(a2, *(unsigned __int16 **)a3, *(_QWORD *)(a3 + 8), v5, a5);
}

void sub_20BA14C38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BOOL4 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const std::string *i;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  _QWORD *v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  _BYTE *v52;
  void *__p;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  std::string v57;

  v55 = a4;
  v56 = a5;
  v7 = atomic_load((unsigned __int8 *)&qword_25472C328);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472C328))
  {
    qword_25472C320 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472C328);
  }
  v8 = sub_20BA15034();
  if (*(_BYTE *)qword_25472C320)
    v9 = 1;
  else
    v9 = 3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(v10 + 96))
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        if (v56 <= 0x20)
        {
          v12 = v8;
          v41 = *(_OWORD *)(a3 + 16);
          sub_20B8B1680((uint64_t)&v48, v10 + 248, (uint64_t)&v41, (uint64_t)&v55);
          v13 = 0x7FFFFFFF;
          v14 = v12;
          v37 = v11;
          v38 = v9;
          while (1)
          {
            if (v50 < v14)
              goto LABEL_48;
            v15 = *(_QWORD *)(v48[13] + 8 * (v50 - v14));
            v16 = ((v54 - (_BYTE *)__p) >> 1) - v15;
            if (!__p)
              v16 = 0;
            v47[0] = (char *)__p + 2 * v15;
            v47[1] = v16;
            if (!v51)
              goto LABEL_48;
            if ((v52 - (_BYTE *)v51) >> 1 == v15 || v16 < v9)
              goto LABEL_48;
            if ((**(_BYTE **)(a1 + 8) & 2) != 0)
            {
              v19 = **(_QWORD **)(a1 + 16);
              if (v19)
                v18 = CFArrayGetCount(*(CFArrayRef *)(v19 + 32)) == 0;
              else
                v18 = 1;
            }
            else
            {
              v18 = 0;
            }
            sub_20BA14BEC(a1, v11, (uint64_t)v47, v18, &v45);
            v20 = v50 - v14;
            if (v50 >= v14)
            {
              v21 = ((uint64_t)(v48[8] - v48[7]) >> 1) - *(_QWORD *)(v48[13] + 8 * v20);
              if (v21 != -1)
              {
                v22 = *(_QWORD *)(v48[10] + 8 * v20);
                v23 = ((uint64_t)(v48[5] - v48[4]) >> 1) - v22;
                v24 = v49 + 2 * v22;
                if (!v49)
                  v23 = 0;
                v44[0] = v24;
                v44[1] = v23;
                *(_QWORD *)&v41 = v21;
                *((_QWORD *)&v41 + 1) = v23;
                v42 = v14;
                v43 = v44;
                if (v45 != v46)
                {
                  v39 = sub_20BA15CB8(**(_DWORD **)(a1 + 8));
                  v25 = *(_QWORD *)(a3 + 48);
                  memset(&v57, 0, sizeof(v57));
                  for (i = *(const std::string **)(*(_QWORD *)a1 + 16);
                        i != *(const std::string **)(*(_QWORD *)a1 + 24);
                        i = (const std::string *)((char *)i + 32))
                  {
                    if (i[1].__r_.__value_.__s.__data_[4])
                    {
                      std::string::operator=(&v57, i);
                      break;
                    }
                  }
                  v27 = v45;
                  if (v46 != v45)
                  {
                    v28 = 0;
                    v29 = 0;
                    v30 = 0;
                    do
                    {
                      v31 = sub_20B871B2C(v27 + v28, (void **)&v57.__r_.__value_.__l.__data_);
                      v32 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v31[7] + 16))(v31[7]);
                      v33 = ((uint64_t)(v32[1] - *v32) >> 1) - v41;
                      if (v25 <= 0 && v33 <= *(_QWORD *)(a3 + 40))
                      {
                        v34 = 0;
                      }
                      else
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3) & 2) != 0)
                          goto LABEL_43;
                        v34 = 2;
                      }
                      v13 = sub_20BA15D48(v13, v33, a3);
                      v35 = sub_20BA15E04(v34, v30, **(_DWORD **)(a1 + 8));
                      v36 = sub_20BA15650(a1, a2, v45 + v28, a3, v13, v35, v34, (uint64_t *)&v41);
                      if (v29 == 11)
                        break;
                      v30 += v36;
                      if (v30 == v39)
                        break;
LABEL_43:
                      ++v29;
                      v27 = v45;
                      v28 += 32;
                    }
                    while (v29 < (v46 - v45) >> 5);
                  }
                  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v57.__r_.__value_.__l.__data_);
                  v11 = v37;
                  v9 = v38;
                }
              }
            }
            *(_QWORD *)&v41 = &v45;
            sub_20B8882B4((void ***)&v41);
LABEL_48:
            if (--v14 > v12)
            {
              if (__p)
              {
                v54 = __p;
                operator delete(__p);
              }
              if (v51)
              {
                v52 = v51;
                operator delete(v51);
              }
              return;
            }
          }
        }
      }
    }
  }
}

void sub_20BA14FD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C328);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA15034()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C338);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472C338))
  {
    qword_25472C330 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472C338);
  }
  if (*(_BYTE *)qword_25472C330)
    return 2;
  else
    return 6;
}

void sub_20BA150A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C338);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA150BC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20BA150FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 *v12;
  void **v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const std::string *i;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  uint64_t *v27;
  const UniChar *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  CFIndex v34;
  const __CFString *v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void **v58[4];
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  unint64_t v66;
  void *v67;
  _BYTE *v68;
  void *__p;
  void *v70;
  _QWORD v71[2];
  std::string v72;

  v5 = sub_20BA15034();
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(v6 + 96))
    {
      v7 = *(_QWORD **)(v6 + 8);
      if (v7)
      {
        v8 = (void **)v5;
        v9 = *(_QWORD *)(a3 + 184);
        if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) <= 0x20)
        {
          v10 = *(_QWORD *)a1 + 248;
          v62 = *(_OWORD *)(a3 + 96);
          v11 = sub_20B947CC4();
          sub_20B8B1680((uint64_t)v64, v10, (uint64_t)&v62, (uint64_t)v11);
          sub_20BA01F78(v64[2], v9, (uint64_t)&v62);
          v46 = v7;
          if (v63 == *((_QWORD *)&v62 + 1))
            v12 = (__int128 *)v9;
          else
            v12 = &v62;
          v50 = v67;
          v51 = (uint64_t)v12;
          v48 = a3;
          v49 = (v68 - (_BYTE *)v67) >> 1;
          v56 = 0x7FFFFFFF;
          v13 = v8;
          v47 = v8;
          do
          {
            if (v66 >= (unint64_t)v13)
            {
              v14 = *(_QWORD *)(*(_QWORD *)(v64[0] + 104) + 8 * (v66 - (_QWORD)v13));
              if (v14 != -1)
              {
                if ((**(_BYTE **)(a1 + 8) & 2) != 0)
                {
                  v16 = **(_QWORD **)(a1 + 16);
                  if (v16)
                    v15 = CFArrayGetCount(*(CFArrayRef *)(v16 + 32)) == 0;
                  else
                    v15 = 1;
                }
                else
                {
                  v15 = 0;
                }
                sub_20B9099B0(v7, v51, v14, (uint64_t)v50, v49, v15, &v60);
                if (v60 != v61)
                {
                  v17 = v66 - (_QWORD)v13;
                  if (v66 >= (unint64_t)v13)
                  {
                    v20 = ((uint64_t)(*(_QWORD *)(v64[0] + 64) - *(_QWORD *)(v64[0] + 56)) >> 1)
                        - *(_QWORD *)(*(_QWORD *)(v64[0] + 104) + 8 * v17);
                    v21 = *(_QWORD *)(*(_QWORD *)(v64[0] + 80) + 8 * v17);
                    v19 = v65 + 2 * v21;
                    if (v65)
                      v18 = (void **)(((uint64_t)(*(_QWORD *)(v64[0] + 40) - *(_QWORD *)(v64[0] + 32)) >> 1) - v21);
                    else
                      v18 = 0;
                  }
                  else
                  {
                    v18 = 0;
                    v19 = 0;
                    v20 = -1;
                  }
                  v59[0] = v19;
                  v59[1] = v18;
                  v58[0] = (void **)v20;
                  v58[1] = v18;
                  v58[2] = v13;
                  v58[3] = (void **)v59;
                  v55 = *(_QWORD *)(a3 + 128);
                  v53 = sub_20BA15CB8(**(_DWORD **)(a1 + 8));
                  memset(&v72, 0, sizeof(v72));
                  for (i = *(const std::string **)(*(_QWORD *)a1 + 16);
                        i != *(const std::string **)(*(_QWORD *)a1 + 24);
                        i = (const std::string *)((char *)i + 32))
                  {
                    if (i[1].__r_.__value_.__s.__data_[4])
                    {
                      std::string::operator=(&v72, i);
                      break;
                    }
                  }
                  v52 = v13;
                  v23 = v60;
                  if (v61 != v60)
                  {
                    v24 = 0;
                    v25 = 0;
                    v57 = 0;
                    while (1)
                    {
                      v26 = sub_20B871B2C(v23 + v24, (void **)&v72.__r_.__value_.__l.__data_);
                      v27 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v26[7] + 16))(v26[7]);
                      v28 = (const UniChar *)(v60 + v24 + 24);
                      if (*(char *)(v60 + v24 + 47) < 0)
                      {
                        v28 = *(const UniChar **)v28;
                        v29 = *(_QWORD *)(v60 + v24 + 32);
                      }
                      else
                      {
                        v29 = *(unsigned __int8 *)(v60 + v24 + 47);
                      }
                      v31 = *v27;
                      v30 = v27[1];
                      v32 = v58[0];
                      v33 = v29 - (unint64_t)v58[0];
                      v34 = v28 ? v33 : 0;
                      v35 = CFStringCreateWithCharacters(0, &v28[(uint64_t)v58[0]], v34);
                      v71[1] = v35;
                      v36 = a1;
                      v37 = *(int **)(a1 + 8);
                      v38 = *v37;
                      v39 = operator new();
                      sub_20B8D6AB0(v39, v35, (v38 >> 5) & 1, *v37, 0);
                      v40 = ((v30 - v31) >> 1) - (_QWORD)v32;
                      v71[0] = v39;
                      a1 = v36;
                      if (v55 <= 0 && v40 <= *(_QWORD *)(v39 + 120))
                        break;
                      if ((*(_BYTE *)(*(_QWORD *)(v36 + 8) + 3) & 2) == 0)
                      {
                        v41 = 2;
                        goto LABEL_41;
                      }
                      v71[0] = 0;
                      v42 = 4;
LABEL_48:
                      sub_20B8CE6E8((uint64_t)v71, v39);
LABEL_49:
                      if (v35)
                        CFRelease(v35);
                      if ((v42 | 4) == 4)
                      {
                        ++v25;
                        v23 = v60;
                        v24 += 56;
                        if (v25 < 0x6DB6DB6DB6DB6DB7 * ((v61 - v60) >> 3))
                          continue;
                      }
                      goto LABEL_53;
                    }
                    v41 = 0;
LABEL_41:
                    v43 = v39 + 80;
                    v56 = sub_20BA15D48(v56, v40, v43);
                    v44 = sub_20BA15E04(v41, v57, **(_DWORD **)(v36 + 8));
                    v57 += sub_20BA15650(v36, a2, v60 + v24, v43, v56, v44, v41, (uint64_t *)v58);
                    if (v57 == v53 || v25 == 11)
                      v42 = 2;
                    else
                      v42 = 0;
                    v39 = v71[0];
                    v71[0] = 0;
                    if (!v39)
                      goto LABEL_49;
                    goto LABEL_48;
                  }
LABEL_53:
                  v13 = v52;
                  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v72.__r_.__value_.__l.__data_);
                  v8 = v47;
                  a3 = v48;
                  v7 = v46;
                }
                v58[0] = (void **)&v60;
                sub_20B90B6A0(v58);
              }
            }
            v13 = (void **)((char *)v13 - 1);
          }
          while (v13 <= v8);
          *(_QWORD *)&v62 = off_24C460C88;
          v58[0] = (void **)&v62 + 1;
          sub_20B8B66F8(v58);
          if (__p)
          {
            v70 = __p;
            operator delete(__p);
          }
          if (v67)
          {
            v68 = v67;
            operator delete(v67);
          }
        }
      }
    }
  }
}

void sub_20BA15584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_20BA150BC(&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA15650(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t *a8)
{
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  _QWORD *v24;
  _BOOL4 v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _WORD *v31;
  unsigned __int8 v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t **v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  const char *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v57;
  unsigned int v58;
  void *__p;
  void *__dst;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  uint8_t buf[8];
  void *v68;
  _WORD *v69;
  _QWORD v70[2];
  _QWORD v71[3];
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v13 = (uint64_t *)sub_20B909B78(a3, off_2547292C8[0]);
  v14 = (uint64_t *)sub_20B909B78(a3, off_2547292D0);
  v58 = sub_20B909BF4(a3, off_2547292A8[0]);
  v57 = sub_20B909BF4(a3, off_2547292A0[0]);
  v15 = (_QWORD *)sub_20B909B78(a3, off_2547292B0[0]);
  v16 = *v13;
  v17 = v13[1] - *v13;
  v18 = *v14;
  v19 = (v14[1] - *v14) >> 1;
  v70[0] = v18;
  v70[1] = v19;
  if (*a8 > (unint64_t)(v17 >> 1))
    return 0;
  v20 = v15;
  if (a8[2] > (unint64_t)((uint64_t)(v15[1] - *v15) >> 1) || !sub_20B947D74((uint64_t)v70, a8[3]))
    return 0;
  v54 = a2;
  v55 = a1;
  v21 = a8[1];
  v22 = v19 > v21 && *(unsigned __int16 *)(v18 + 2 * v21) == 32;
  if (v18)
    v23 = v19 - v21;
  else
    v23 = 0;
  v24 = (_QWORD *)(*(_QWORD *)v55 + 248);
  buf[0] = 0;
  v25 = !sub_20B969C84(v24, (BOOL *)buf);
  if (buf[0])
    v25 = 1;
  if (!v25 && !v22 && v23)
  {
    v26 = (unsigned __int16 *)(v18 + 2 * v21);
    v27 = MEMORY[0x24BDAC740];
    while (1)
    {
      v29 = *v26++;
      v28 = v29;
      if (!(v29 <= 0x7FuLL ? *(_DWORD *)(v27 + 4 * v28 + 60) & 0x40000 : __maskrune(v28, 0x40000uLL)))
        break;
      if (!--v23)
      {
        v31 = operator new(2uLL);
        *v31 = 32;
        *(_QWORD *)buf = v31;
        v69 = v31 + 1;
        v68 = v31 + 1;
        v32 = 1;
        v33 = 1;
        goto LABEL_22;
      }
    }
  }
  v32 = 0;
  v33 = 0;
  *(_QWORD *)buf = 0;
  v68 = 0;
  v69 = 0;
LABEL_22:
  sub_20B87D570((void **)buf, v33 + v19);
  sub_20B87D600((uint64_t)buf, (uint64_t)v68, (char *)(v18 + 2 * a8[1]), (char *)(v18 + 2 * v19), (uint64_t)(2 * v19 - 2 * a8[1]) >> 1);
  v34 = (const void *)(v16 + 2 * *a8);
  v65 = 0;
  v66 = 0;
  v64 = 0;
  sub_20B909D70(&v64, v34, v16 + 2 * (v17 >> 1), (v16 + 2 * (v17 >> 1) - (uint64_t)v34) >> 1);
  v35 = *a8;
  v36 = a8[1];
  v37 = (_BYTE *)v20[1];
  v38 = (_BYTE *)(*v20 + 2 * a8[2]);
  __dst = 0;
  v63 = 0;
  __p = 0;
  v39 = v37 - v38;
  if (v37 != v38)
  {
    sub_20B80FD0C(&__p, v39 >> 1);
    v40 = (char *)__dst;
    memmove(__dst, v38, v39);
    __dst = &v40[2 * (v39 >> 1)];
  }
  v41 = (_QWORD *)sub_20B929AE4(*(int ***)(v55 + 24), a4, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), (uint64_t)v64, (v65 - (_BYTE *)v64) >> 1, *(uint64_t *)buf, ((uint64_t)v68 - *(_QWORD *)buf) >> 1, v58 >> v35, v57 >> v36, (unsigned __int16 **)&__p, a5, 76, a7, v32, 0);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (*(_QWORD *)buf)
  {
    v68 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (!v41)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v41 + 176))(v41) & 1) != 0)
    goto LABEL_32;
  *(_QWORD *)buf = v41;
  v44 = sub_20B8CD218(v54 + 1, buf);
  if (v44)
    v45 = (uint64_t)v44[3];
  else
    v45 = -1;
  v46 = **(_DWORD **)(v55 + 8);
  if ((~v46 & 0x6000000) != 0 && (v46 & 0x10000000) == 0)
  {
    if (v45 != -1)
    {
      v47 = *(_QWORD *)(v54[6] + 8 * v45);
      v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 112))(v47);
      (*(void (**)(_QWORD *, uint64_t))(*v41 + 488))(v41, v48);
    }
    if (a6)
      v41[1] = a6;
    LOBYTE(v64) = 0;
    (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v41 + 528))(v41, 3, "Adding a phrase learning dictionary candidate", 1);
    *(_QWORD *)buf = v41;
    v71[0] = &unk_24C459188;
    v72 = v71;
    v42 = sub_20B8FDA94(v54, (_QWORD **)buf, 1, &v64, (uint64_t)v71);
    v49 = v72;
    if (v72 == v71)
    {
      v50 = 4;
      v49 = v71;
    }
    else
    {
      if (!v72)
        goto LABEL_54;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_54:
    v51 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    if ((_DWORD)v42)
    {
      v52 = sub_20B9A7C5C(3u);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        return v42;
      *(_WORD *)buf = 0;
      v53 = " ∟ Added";
    }
    else if ((_BYTE)v64)
    {
      v52 = sub_20B9A7C5C(3u);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        return v42;
      *(_WORD *)buf = 0;
      v53 = " ∟ Replaced";
    }
    else
    {
      v52 = sub_20B9A7C5C(3u);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        return v42;
      *(_WORD *)buf = 0;
      v53 = " ∟ REJECTED";
    }
    _os_log_debug_impl(&dword_20B7F7000, v52, OS_LOG_TYPE_DEBUG, v53, buf, 2u);
    return v42;
  }
  if (v45 != -1)
  {
    v42 = *(_QWORD *)(v54[6] + 8 * v45);
    if (!v42)
      goto LABEL_33;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 88))(v42) & 1) == 0)
    {
      *(_DWORD *)(v42 + 204) = 76;
      v42 = 1;
      goto LABEL_33;
    }
  }
LABEL_32:
  v42 = 0;
LABEL_33:
  (*(void (**)(_QWORD *))(*v41 + 16))(v41);
  return v42;
}

void sub_20BA15BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA15CB8(int a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25472C348);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472C348))
  {
    qword_25472C340 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472C348);
  }
  if ((~a1 & 0x6000000) != 0)
    return *(unsigned __int16 *)(qword_25472C340 + 416);
  else
    return 1;
}

void sub_20BA15D30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C348);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA15D48(int a1, int a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t result;
  int v8;

  v6 = atomic_load((unsigned __int8 *)&qword_25472C358);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C358))
  {
    qword_25472C350 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472C358);
  }
  if (a1 != 0x7FFFFFFF)
    return (a1 + 1);
  result = *(__int16 *)(qword_25472C350 + 496);
  v8 = a2 - *(_DWORD *)(a3 + 40);
  if (v8 >= 1)
    return (*(__int16 *)(qword_25472C350 + 512) + *(__int16 *)(qword_25472C350 + 512) * v8 + result);
  return result;
}

void sub_20BA15DEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C358);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA15E04(int a1, int a2, unsigned int a3)
{
  unsigned __int8 v6;
  BOOL v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  v6 = atomic_load((unsigned __int8 *)&qword_25472C368);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C368))
  {
    qword_25472C360 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472C368);
  }
  if (*(_BYTE *)qword_25472C360)
    v7 = 0;
  else
    v7 = (a3 & 0x2000002) == 2;
  v8 = HIBYTE(a3) & 4;
  if (!v7)
    v8 = 0;
  if (v8)
    v9 = a1 == 2;
  else
    v9 = 0;
  v10 = v8 + a2;
  if (v9)
    return v10;
  else
    return 0;
}

void sub_20BA15EA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C368);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA15EBC(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_24C468840;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 2;
  v8 = operator new();
  sub_20B91CA60(v8);
  *v7 = v8;
  if (a5)
  {
    v9 = operator new();
    sub_20B91CA60(v9);
    *(_QWORD *)(a1 + 64) = v9;
  }
  return a1;
}

void sub_20BA15F64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x20BD39CB0](v2, 0x10A0C403A2516C0);
  v4 = *(void **)(v1 + 16);
  if (v4)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA15FA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_24C468840;
  v2 = a1[1];
  if (v2)
  {
    v3 = sub_20B91CB68(v2);
    MEMORY[0x20BD39CB0](v3, 0x10A0C403A2516C0);
  }
  v4 = a1[8];
  if (v4)
  {
    v5 = sub_20B91CB68(v4);
    MEMORY[0x20BD39CB0](v5, 0x10A0C403A2516C0);
  }
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20BA16024(_QWORD *a1)
{
  sub_20BA15FA4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA16048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **v4;
  uint64_t result;
  uint64_t v6;
  void **v7;

  sub_20B91DB0C(*(_QWORD *)(a1 + 8), (uint64_t)&v6);
  sub_20B8F8CD8(a2, (uint64_t)&v6);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    v4 = sub_20B8F8AB8(v3);
    MEMORY[0x20BD39CB0](v4, 0x20C4093837F09);
  }
  result = v6;
  v6 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20BA160C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8F8A30(&a9);
  _Unwind_Resume(a1);
}

void sub_20BA160DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t *v24;
  void *__p[2];
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  __int16 v35;
  int v36;
  _QWORD v37[2];
  char v38;
  _QWORD v39[6];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 (*v43)(_QWORD *, uint64_t);
  void (*v44)(uint64_t);
  _QWORD v45[4];

  if (*(_QWORD *)(a1 + 48) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
  {
    v40 = 0;
    v41 = &v40;
    v42 = 0x4002000000;
    v43 = sub_20BA164C4;
    v44 = sub_20BA164E8;
    memset(v45, 0, 24);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2);
    v7 = *(_QWORD *)(a1 + 8);
    v39[0] = MEMORY[0x24BDAC760];
    v39[1] = 0x40000000;
    v39[2] = sub_20BA16510;
    v39[3] = &unk_24C46C890;
    v39[4] = &v40;
    v39[5] = a1;
    sub_20B91DBF8(v7, v6, (uint64_t)v39);
    v8 = v41[5];
    v9 = (_QWORD *)v41[6];
    if (v9 != (_QWORD *)v8)
    {
      v27 = sub_20B90999C;
      sub_20B888650(v8, v9, (uint64_t (**)(uint64_t, uint64_t))&v27, 126 - 2 * __clz((uint64_t)((uint64_t)v9 - v8) >> 5), 1);
      v10 = 0;
      v38 = 0;
      v11 = -1;
      do
      {
        v12 = v41[5];
        if (++v11 >= (unint64_t)((v41[6] - v12) >> 5))
          break;
        v13 = v12 + v10;
        v14 = *(_DWORD *)(v12 + v10 + 24);
        v33 = 0;
        v34 = 0;
        v35 = v14;
        v36 = 0;
        v37[0] = &v33;
        v16 = *(_QWORD *)(a1 + 16);
        v15 = *(_QWORD *)(a1 + 24);
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        sub_20B80BBD0(__p, off_254729260);
        v17 = sub_20B871B2C(v13, __p);
        if (v26 < 0)
          operator delete(__p[0]);
        if ((void **)(v41[5] + v10 + 8) != v17)
        {
          v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v17[7] + 16))(v17[7]);
          if (&v30 != (void **)v18)
            sub_20B886194((char *)&v30, *(char **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 1);
        }
        v19 = v41[5];
        sub_20B80BBD0(__p, off_254729288[0]);
        v20 = sub_20B871B2C(v19 + v10, __p);
        if (v26 < 0)
          operator delete(__p[0]);
        if ((void **)(v41[5] + v10 + 8) != v20)
        {
          v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v20[7] + 16))(v20[7]);
          if (&v27 != (void **)v21)
            sub_20B886194((char *)&v27, *(char **)v21, *(_QWORD *)(v21 + 8), (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 1);
        }
        if (v31 != v30)
        {
          v22 = v41[5];
          sub_20B80BBD0(__p, off_2547292D0);
          v23 = sub_20B871B2C(v22 + v10, __p);
          if (v26 < 0)
            operator delete(__p[0]);
          v24 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v23[7] + 16))(v23[7]);
          sub_20BA1A2E0((_QWORD *)(a1 + 16), v24, (uint64_t *)&v30, (uint64_t *)&v27, *(_DWORD *)(a1 + 40));
          v37[1] = *(_QWORD *)(a1 + 16) + 2 * ((v15 - v16) >> 1);
          (*(void (**)(uint64_t, _QWORD *, char *))(a3 + 16))(a3, v37, &v38);
        }
        if (v27)
        {
          v28 = v27;
          operator delete(v27);
        }
        if (v30)
        {
          v31 = v30;
          operator delete(v30);
        }
        v10 += 32;
      }
      while (!v38);
    }
    _Block_object_dispose(&v40, 8);
    v30 = v45;
    sub_20B8882B4((void ***)&v30);
  }
}

void sub_20BA16440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 152), 8);
  a19 = v20;
  sub_20B8882B4((void ***)&a19);
  _Unwind_Resume(a1);
}

__n128 sub_20BA164C4(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20BA164E8(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B8882B4(&v1);
}

void sub_20BA16510(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  _QWORD *v27[2];
  void *v28[5];

  v3 = *(_QWORD *)(a1 + 40);
  v27[0] = 0;
  v27[1] = 0;
  v26 = (uint64_t *)v27;
  v25 = 0;
  if (sub_20B91B408(*(uint64_t **)(*(_QWORD *)(v3 + 48) + 40), a2, &v25, &v26))
  {
    v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
    sub_20B88A068((uint64_t *)&v21, (uint64_t)&v26);
    v24 = v25;
    v5 = v4[7];
    v6 = v4[6];
    if (v6 >= v5)
    {
      v10 = v4[5];
      v11 = (uint64_t)(v6 - v10) >> 5;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 59)
        sub_20B88848C();
      v13 = v5 - v10;
      if (v13 >> 4 > v12)
        v12 = v13 >> 4;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
        v14 = 0x7FFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      v28[4] = v4 + 7;
      if (v14)
        v15 = (char *)sub_20B8156D4((uint64_t)(v4 + 7), v14);
      else
        v15 = 0;
      v17 = &v15[32 * v11];
      v28[0] = v15;
      v28[1] = v17;
      v28[3] = &v15[32 * v14];
      *(_QWORD *)v17 = v21;
      v18 = v22;
      *((_QWORD *)v17 + 1) = v22;
      v19 = v17 + 8;
      v20 = v23;
      *((_QWORD *)v17 + 2) = v23;
      if (v20)
      {
        v18[2] = v19;
        v21 = &v22;
        v22 = 0;
        v23 = 0;
      }
      else
      {
        *(_QWORD *)v17 = v19;
      }
      *(_DWORD *)&v15[32 * v11 + 24] = v24;
      v28[2] = v17 + 32;
      sub_20B888418(v4 + 5, v28);
      v16 = v4[6];
      sub_20B8885DC(v28);
    }
    else
    {
      *(_QWORD *)v6 = v21;
      v7 = v22;
      *(_QWORD *)(v6 + 8) = v22;
      v8 = v6 + 8;
      v9 = v23;
      *(_QWORD *)(v6 + 16) = v23;
      if (v9)
      {
        v7[2] = v8;
        v21 = &v22;
        v22 = 0;
        v23 = 0;
      }
      else
      {
        *(_QWORD *)v6 = v8;
      }
      *(_DWORD *)(v6 + 24) = v24;
      v16 = v6 + 32;
    }
    v4[6] = v16;
    sub_20B8896CC((uint64_t)&v21, v22);
  }
  sub_20B8896CC((uint64_t)&v26, v27[0]);
}

void sub_20BA166D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  _QWORD *v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD *);
  v12 = va_arg(va2, _QWORD);
  sub_20B8885DC((void **)va2);
  sub_20B8896CC((uint64_t)va, v5);
  sub_20B8896CC((uint64_t)va1, v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA16718(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8), *(_QWORD *)(a2 + 8));
}

uint64_t sub_20BA16730(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, BOOL *a5)
{
  uint64_t v8;
  BOOL v9;

  *a4 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v9 = 0;
  if ((_DWORD)v8)
    v9 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2) != 0;
  *a5 = v9;
  return v8;
}

uint64_t sub_20BA1679C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v4;

  v2 = *(_QWORD **)(a1 + 8);
  v4 = 0;
  if ((*(unsigned int (**)(_QWORD, _QWORD, unsigned int *))(*(_QWORD *)*v2 + 48))(*v2, *(_QWORD *)(a2 + 8), &v4))
  {
    return v4;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20BA167E0(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) << 8;
}

void **sub_20BA16800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20B91DB80(*(_QWORD **)(a1 + 8), a2, a3);
}

_QWORD *sub_20BA16808(uint64_t a1)
{
  _QWORD *result;

  sub_20B91CC48(*(_QWORD *)(a1 + 8));
  result = *(_QWORD **)(a1 + 64);
  if (result)
    return sub_20B91CC48((uint64_t)result);
  return result;
}

_QWORD *sub_20BA16840(uint64_t a1)
{
  _QWORD *result;
  _BYTE *v3;

  sub_20B91CE94(*(_QWORD **)(a1 + 8));
  result = *(_QWORD **)(a1 + 64);
  if (result)
    result = (_QWORD *)sub_20B91CE94(result);
  v3 = *(_BYTE **)(a1 + 48);
  if (v3)
    *v3 = 0;
  return result;
}

uint64_t sub_20BA1687C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _BYTE *v12;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  void **p_p;

  v6 = sub_20B91D1B0(*(_QWORD **)(a1 + 8), *(void **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1, a3);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)(a1 + 64);
    if (v7)
    {
      v10 = a2;
      v9 = *(char **)a2;
      v8 = *(char **)(v10 + 8);
      if (*(_QWORD *)(a1 + 72) <= (unint64_t)((v8 - v9) >> 1))
      {
        __p = 0;
        v15 = 0;
        v16 = 0;
        p_p = &__p;
        if (v8 == v9)
        {
          v12 = 0;
          v11 = 0;
        }
        else
        {
          do
          {
            v8 -= 2;
            sub_20B888330((uint64_t *)&p_p, v8);
          }
          while (v8 != v9);
          v7 = *(_QWORD **)(a1 + 64);
          v11 = __p;
          v12 = v15;
        }
        sub_20B91D1B0(v7, v11, (v12 - (_BYTE *)v11) >> 1, a3);
        if (__p)
        {
          v15 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return v6;
}

void sub_20BA1695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA1697C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  _BYTE *v12;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  void **p_p;

  v6 = sub_20B91D5BC(*(_QWORD **)(a1 + 8), *a2, (a2[1] - *a2) >> 1, a3);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)(a1 + 64);
    if (v7)
    {
      v10 = a2;
      v9 = *a2;
      v8 = (_WORD *)v10[1];
      if (*(_QWORD *)(a1 + 72) <= (unint64_t)(((uint64_t)v8 - v9) >> 1))
      {
        __p = 0;
        v15 = 0;
        v16 = 0;
        p_p = &__p;
        if (v8 == (_WORD *)v9)
        {
          v12 = 0;
          v11 = 0;
        }
        else
        {
          do
            sub_20B888330((uint64_t *)&p_p, --v8);
          while (v8 != (_WORD *)v9);
          v7 = *(_QWORD **)(a1 + 64);
          v11 = __p;
          v12 = v15;
        }
        sub_20B91D5BC(v7, (uint64_t)v11, (v12 - v11) >> 1, a3);
        if (__p)
        {
          v15 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return v6;
}

void sub_20BA16A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t sub_20BA16A7C()
{
  return fwrite("This functionality has not been implemented for mutable dictionary!\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t sub_20BA16A9C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  void **v9;
  void **v10;
  uint64_t v11;
  void **v12;
  void **v13;
  _QWORD v14[6];
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;

  if (a3)
  {
    if (a2)
    {
      v5 = result;
      result = *(_QWORD *)(result + 64);
      if (result)
      {
        sub_20B91DB0C(result, (uint64_t)&v17);
        sub_20B91DB80(*(_QWORD **)(v5 + 64), (uint64_t)&v17, (uint64_t)&v15);
        v8 = *(_QWORD **)(v5 + 64);
        v14[0] = MEMORY[0x24BDAC760];
        v14[1] = 0x40000000;
        v14[2] = sub_20BA16C08;
        v14[3] = &unk_24C46CB08;
        v14[4] = a5;
        v14[5] = v5;
        sub_20B91DC9C(v8, (uint64_t)&v15, 0, a4 >> 1, v5 + 80, (uint64_t)v14);
        v9 = v16;
        v16 = 0;
        if (v9)
        {
          v10 = sub_20B8F8AB8(v9);
          MEMORY[0x20BD39CB0](v10, 0x20C4093837F09);
        }
        v11 = v15;
        v15 = 0;
        if (v11)
          MEMORY[0x20BD39CB0](v11, 0x1010C40E4C6A875);
        v12 = v18;
        v18 = 0;
        if (v12)
        {
          v13 = sub_20B8F8AB8(v12);
          MEMORY[0x20BD39CB0](v13, 0x20C4093837F09);
        }
        result = v17;
        v17 = 0;
        if (result)
          return MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
      }
    }
  }
  return result;
}

void sub_20BA16BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void **);
  v10 = va_arg(va1, _QWORD);
  sub_20B8F8A30((void ***)va);
  sub_20B8F8A30((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA16C08(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[7];

  if (a3)
  {
    v4 = *(_QWORD *)(result + 32);
    v3 = *(_QWORD *)(result + 40);
    v5 = *(_QWORD *)(v3 + 64);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 0x40000000;
    v6[2] = sub_20BA16C68;
    v6[3] = &unk_24C4AEB90;
    v6[4] = v4;
    v6[5] = v3;
    v6[6] = a3;
    return sub_20B91DBF8(v5, a2, (uint64_t)v6);
  }
  return result;
}

void sub_20BA16C68(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t *v11;
  void *__p[2];
  char v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  __int16 v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  _QWORD *v28[2];

  v3 = *(_QWORD *)(a1 + 40);
  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  v26 = 0;
  if (sub_20B91B408(*(uint64_t **)(*(_QWORD *)(v3 + 48) + 40), a2, &v26, &v27))
  {
    v20 = 0;
    v21 = 0;
    v22 = v26;
    v23 = 0;
    v24 = &v20;
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    sub_20B80BBD0(__p, off_254729260);
    v6 = sub_20B871B2C((uint64_t)&v27, __p);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v28 != (_QWORD **)v6)
    {
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6[7] + 16))(v6[7]);
      if (&v17 != (void **)v7)
        sub_20B886194((char *)&v17, *(char **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 1);
    }
    sub_20B80BBD0(__p, off_254729288[0]);
    v8 = sub_20B871B2C((uint64_t)&v27, __p);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v28 != (_QWORD **)v8)
    {
      v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8[7] + 16))(v8[7]);
      if (&v14 != (void **)v9)
        sub_20B886194((char *)&v14, *(char **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 1);
    }
    if (v18 != v17)
    {
      sub_20B80BBD0(__p, off_2547292D0);
      v10 = sub_20B871B2C((uint64_t)&v27, __p);
      if (v13 < 0)
        operator delete(__p[0]);
      v11 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v10[7] + 16))(v10[7]);
      sub_20BA1A2E0((_QWORD *)(v3 + 16), v11, (uint64_t *)&v17, (uint64_t *)&v14, *(_DWORD *)(v3 + 40));
      v25 = *(_QWORD *)(v3 + 16) + 2 * ((v5 - v4) >> 1);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
  }
  sub_20B8896CC((uint64_t)&v27, v28[0]);
}

void sub_20BA16EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  sub_20B8896CC(v20 - 88, *(_QWORD **)(v20 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_20BA16F18()
{
  return 9;
}

uint64_t sub_20BA16F20(uint64_t a1, int a2, uint64_t *a3, unsigned __int8 *a4, unsigned int a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11)
{
  unint64_t v12;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint8x8_t v39;
  uint64_t result;
  unsigned __int8 *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  __int16 v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unint64_t v60;
  __int16 v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t *v80;
  uint8x8_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int *v85;
  unsigned int v86;
  uint8x8_t v87;

  v12 = a6;
  v17 = a10;
  v18 = a11;
  v19 = a2 & 3;
  if (v19 == 1)
  {
    v25 = (_DWORD *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
    v26 = v25 + 1;
    v27 = v25[1];
    if (v27)
    {
      if (a6)
      {
        v28 = (_WORD)a4 - a9;
        v29 = *a3;
        v30 = a7 + 24 * *a3;
        if (a11)
          v28 = ((_WORD)a4 - a9) | 0x100;
        *(_WORD *)(v30 + 12) = v28;
        *a3 = v29 + 1;
        *(_DWORD *)(v30 + 8) = v27;
        if (v29 + 1 >= a6)
          return 1;
      }
      else
      {
        ++*a3;
      }
    }
    if (a8 != -1)
    {
      if ((a5 & 1) == 0)
      {
        v42 = *v25;
        v41 = (unsigned __int8 *)(v25 + 2);
        v43 = (unint64_t)v26 + v42;
        if ((unint64_t)v41 < v43)
        {
          v44 = a5 + 1;
          v45 = (_WORD)a4 - a9;
          while (1)
          {
            v46 = v41 + 1;
            v47 = *v41;
            if (v44 >= v47 && (v47 & 1) != 0)
            {
              v49 = *v46;
              if (v49 >= a8)
              {
                if (v49 > a8)
                  return 0;
                v50 = v12;
                v51 = v18;
                if (!(_DWORD)v18)
                  a11 = 0;
                v52 = v17;
                v53 = sub_20BA190E0((uint64_t)(v41 + 2), (uint64_t)a4, (int)v47 - 1, v17, &a11);
                v17 = v52;
                v12 = v50;
                v18 = v51;
                if (!v53)
                {
                  if (v50)
                  {
                    v54 = *a3;
                    v55 = a7 + 24 * *a3;
                    *(_WORD *)(v55 + 12) = v45 + v47 - 1;
                    v56 = (_WORD *)(v55 + 12);
                    if (a11)
                      *v56 = (v45 + v47 - 1) | 0x100;
                    v57 = *(_DWORD *)&v46[v47];
                    *a3 = v54 + 1;
                    *(_DWORD *)(a7 + 24 * v54 + 8) = v57;
                    if (v54 + 1 >= v50)
                      return 1;
                  }
                  else
                  {
                    ++*a3;
                  }
                }
              }
            }
            result = 0;
            v41 = &v46[v47 + 4];
            if ((unint64_t)v41 >= v43)
              return result;
          }
        }
      }
      return 0;
    }
    if (!a5)
      return 0;
    v59 = *v25;
    v58 = (unsigned __int8 *)(v25 + 2);
    v60 = (unint64_t)v26 + v59;
    if ((unint64_t)v58 >= v60)
      return 0;
    v61 = (_WORD)a4 - a9;
    while (1)
    {
      v62 = v58 + 1;
      v63 = *v58;
      if (v63 <= a5)
      {
        if ((a5 & 1) != 0)
        {
          if ((v63 & 1) == 0)
            goto LABEL_75;
          v72 = *v62;
          v73 = *a4;
          if (v72 < v73)
            goto LABEL_75;
          if (v72 > v73)
            return 0;
          v74 = v12;
          v75 = v18;
          if (!(_DWORD)v18)
            a11 = 0;
          v76 = v17;
          v77 = sub_20BA190E0((uint64_t)(v58 + 2), (uint64_t)(a4 + 1), (int)v63 - 1, v17, &a11);
          v17 = v76;
          v12 = v74;
          v18 = v75;
          if (v77)
            goto LABEL_75;
          if (!v74)
            goto LABEL_74;
        }
        else
        {
          if ((v63 & 1) != 0)
            goto LABEL_75;
          v64 = v12;
          v65 = v18;
          if (!(_DWORD)v18)
            a11 = 0;
          v66 = v17;
          v67 = sub_20BA190E0((uint64_t)(v58 + 1), (uint64_t)a4, v63, v17, &a11);
          v17 = v66;
          v12 = v64;
          v18 = v65;
          if (v67)
            goto LABEL_75;
          if (!v64)
          {
LABEL_74:
            ++*a3;
            goto LABEL_75;
          }
        }
        v68 = *a3;
        v69 = a7 + 24 * *a3;
        *(_WORD *)(v69 + 12) = v61 + v63;
        v70 = (_WORD *)(v69 + 12);
        if (a11)
          *v70 = (v61 + v63) | 0x100;
        v71 = *(_DWORD *)&v62[v63];
        *a3 = v68 + 1;
        *(_DWORD *)(a7 + 24 * v68 + 8) = v71;
        if (v68 + 1 >= v12)
          return 1;
      }
LABEL_75:
      result = 0;
      v58 = &v62[v63 + 4];
      if ((unint64_t)v58 >= v60)
        return result;
    }
  }
  if (v19 == 2)
  {
    v31 = *(_QWORD *)(a1 + 8);
    v32 = (a2 - 2);
    v33 = *(_DWORD *)(v31 + v32);
    if (v33)
    {
      if (!a6)
      {
        ++*a3;
        if (!a5)
          return 0;
LABEL_78:
        if (a4)
        {
          if ((a5 & 1) == 0)
          {
            v78 = v17;
            v79 = v18;
            v80 = (uint64_t *)sub_20BA0225C(*(unsigned __int16 *)a4, v17);
            if (v80)
              return sub_20BA19218(a1, a2, v81, (uint64_t)a3, (uint64_t)(a4 + 2), a5 - 2, a6, a7, (unint64_t)(v80[1] - *v80) >> 1, *v80, a9, v78, v79);
          }
        }
        v82 = *a4;
        v83 = v82 >> 5;
        if (((*(_DWORD *)(v31 + v32 + 4 * (v82 >> 5) + 4) >> v82) & 1) == 0)
          return 0;
        if (v82 >= 0x20)
        {
          v84 = 0;
          if (v83 <= 1)
            v83 = 1;
          else
            v83 = v83;
          v85 = (unsigned int *)(v32 + v31 + 4);
          do
          {
            v86 = *v85++;
            v87 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
            v87.i16[0] = vaddlv_u8(v87);
            v84 += v87.i32[0];
            --v83;
          }
          while (v83);
        }
        return sub_20BA16F20(a1) != 0;
      }
      v34 = (_WORD)a4 - a9;
      v35 = *a3;
      v36 = a7 + 24 * *a3;
      if (a11)
        v34 = ((_WORD)a4 - a9) | 0x100;
      *(_WORD *)(v36 + 12) = v34;
      *a3 = v35 + 1;
      *(_DWORD *)(v36 + 8) = v33;
      if (v35 + 1 >= a6)
        return 1;
    }
    if (!a5)
      return 0;
    goto LABEL_78;
  }
  if (v19 != 3)
    return 0;
  v20 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + (a2 - 3));
  if (!v20)
    goto LABEL_9;
  if (!a6)
  {
    ++*a3;
    if (a5)
      goto LABEL_25;
    return 0;
  }
  v21 = (_WORD)a4 - a9;
  v22 = *a3;
  v23 = a7 + 24 * *a3;
  if (a11)
    v21 = ((_WORD)a4 - a9) | 0x100;
  *(_WORD *)(v23 + 12) = v21;
  *a3 = v22 + 1;
  *(_DWORD *)(v23 + 8) = v20;
  if (v22 + 1 >= a6)
    return 1;
LABEL_9:
  if (!a5)
    return 0;
LABEL_25:
  if (a4)
  {
    if ((a5 & 1) == 0)
    {
      v37 = v18;
      v38 = (uint64_t *)sub_20BA0225C(*(unsigned __int16 *)a4, a10);
      if (v38)
        return sub_20BA19218(a1, a2, v39, (uint64_t)a3, (uint64_t)(a4 + 2), a5 - 2, v12, a7, (unint64_t)(v38[1] - *v38) >> 1, *v38, a9, a10, v37);
    }
  }
  result = sub_20BA16F20(a1);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_20BA174F8(uint64_t a1, int a2, unsigned __int16 *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, _BYTE *a9, _QWORD *a10)
{
  uint64_t v11;
  _BYTE *v14;
  _BYTE *v17;
  int v18;
  uint64_t *v22;
  uint8x8_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v31;
  unsigned __int8 *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  size_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  char *v65;
  int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint8x8_t v70;
  uint64_t v71;
  void *__src;
  void *__srcb;
  _QWORD *v75;
  int v76;

  v11 = a7;
  v14 = a3;
  v17 = a9;
  v76 = a6;
  v18 = a2 & 3;
  if (v18 == 1)
  {
    v31 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
    if (a5 != -1)
    {
      if ((a4 & 1) == 0)
      {
        v32 = (unsigned __int8 *)(v31 + 2);
        v33 = (unint64_t)v31 + *v31 + 4;
        if ((unint64_t)(v31 + 2) < v33)
        {
          v75 = a10;
          v71 = a8;
          v34 = a4 + 1;
          while (1)
          {
            v36 = v32 + 1;
            v35 = *v32;
            if (v34 == (_DWORD)v35)
            {
              v37 = *v36;
              if (v37 >= a5)
              {
                if (v37 > a5)
                  return 0;
                v38 = v17;
                v39 = v11;
                if (!a6)
                  v76 = 0;
                __src = v32 + 2;
                v40 = sub_20BA190E0((uint64_t)(v32 + 2), (uint64_t)v14, a4, 14, &v76);
                v11 = v39;
                v17 = v38;
                if (!v40 && *(_DWORD *)&v36[v35] == (_DWORD)v11)
                  break;
              }
            }
            result = 0;
            v32 = &v36[v35 + 4];
            if ((unint64_t)v32 >= v33)
              return result;
          }
          memcpy(v38, __src, a4);
          v65 = &v38[~v71 + v35];
LABEL_53:
          *v75 = v65;
          return 1;
        }
      }
      return 0;
    }
    v52 = (int *)(v31 + 1);
    if (!a4)
    {
      v51 = *v52;
LABEL_55:
      if (v51 == (_DWORD)a7)
      {
        *a10 = &a9[-a8];
        return 1;
      }
      return 0;
    }
    v54 = *v31;
    v53 = (unsigned __int8 *)(v31 + 2);
    v55 = (unsigned __int8 *)v52 + v54;
    if (v53 >= v55)
      return 0;
    __srcb = (char *)a3 + 1;
    v75 = a10;
    while (1)
    {
      v57 = v53 + 1;
      v56 = *v53;
      if ((_DWORD)v56 == a4)
      {
        if ((a4 & 1) != 0)
        {
          v62 = *v57;
          v63 = *v14;
          if (v62 < v63)
            goto LABEL_49;
          if (v62 > v63)
            return 0;
          v58 = v11;
          if (!a6)
            v76 = 0;
          v59 = (uint64_t)(v53 + 2);
          v60 = (uint64_t)__srcb;
          v61 = a4 - 1;
        }
        else
        {
          v58 = v11;
          if (!a6)
            v76 = 0;
          v59 = (uint64_t)(v53 + 1);
          v60 = (uint64_t)v14;
          v61 = a4;
        }
        v64 = sub_20BA190E0(v59, v60, v61, 14, &v76);
        v11 = v58;
        if (!v64 && *(_DWORD *)&v57[v56] == (_DWORD)v58)
        {
          memcpy(a9, v57, v56);
          v65 = &a9[v56 - a8];
          goto LABEL_53;
        }
      }
LABEL_49:
      result = 0;
      v53 = &v57[v56 + 4];
      if (v53 >= v55)
        return result;
    }
  }
  if (v18 == 2)
  {
    v75 = a10;
    v42 = *(_QWORD *)(a1 + 8);
    v43 = (a2 - 2);
    v44 = (_DWORD *)(v42 + v43);
    if (a4)
    {
      if (a3)
      {
        if ((a4 & 1) == 0)
        {
          v47 = (uint64_t *)sub_20BA0225C(*a3, 14);
          v44 = (_DWORD *)(v42 + v43);
          v24 = a7;
          v17 = a9;
          v25 = a6;
          v14 = a3;
          if (v47)
          {
            v26 = (uint64_t)(a3 + 1);
            v27 = (a4 - 2);
            v28 = *v47;
            v29 = (unint64_t)(v47[1] - *v47) >> 1;
            return sub_20BA195D8(a1, a2, v23, v26, v27, v29, v28, v25, v24, a8, v17);
          }
        }
      }
      v48 = *v14;
      if (((*(_DWORD *)((char *)v44 + ((v48 >> 3) & 0x1C) + 4) >> v48) & 1) != 0)
      {
        *v17 = v48;
        v49 = *v14;
        v50 = v49 >> 5;
        if (v49 >= 0x20)
        {
          v66 = 0;
          if (v50 <= 1)
            v67 = 1;
          else
            v67 = v50;
          v68 = (unsigned int *)(v43 + v42 + 4);
          do
          {
            v69 = *v68++;
            v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
            v70.i16[0] = vaddlv_u8(v70);
            v66 += v70.i32[0];
            --v67;
          }
          while (v67);
        }
        if (sub_20BA174F8(a1))
          return 1;
      }
    }
    else if (*v44 == (_DWORD)a7)
    {
      v65 = &a9[-a8];
      goto LABEL_53;
    }
    return 0;
  }
  if (v18 != 3)
    return 0;
  if (!a4)
  {
    v51 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + (a2 - 3));
    goto LABEL_55;
  }
  if (a3)
  {
    if ((a4 & 1) == 0)
    {
      v22 = (uint64_t *)sub_20BA0225C(*a3, 14);
      v24 = a7;
      v17 = a9;
      v25 = a6;
      v14 = a3;
      if (v22)
      {
        v26 = (uint64_t)(a3 + 1);
        v27 = (a4 - 2);
        v28 = *v22;
        v29 = (unint64_t)(v22[1] - *v22) >> 1;
        return sub_20BA195D8(a1, a2, v23, v26, v27, v29, v28, v25, v24, a8, v17);
      }
    }
  }
  *v17 = *v14;
  result = sub_20BA174F8(a1);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_20BA17980(uint64_t a1, int a2, _BYTE *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8, uint8x8_t a9, _QWORD *a10)
{
  int v12;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t result;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  uint8x8_t v52;

  v12 = a5;
  v16 = a2 & 3;
  switch(v16)
  {
    case 1:
      v21 = (_DWORD *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
      if (a4 || !(_DWORD)a5 || v21[1] != (_DWORD)a6)
      {
        v23 = *v21;
        v22 = (char *)(v21 + 2);
        v24 = *(_QWORD *)(a1 + 16) + (a2 - 1) + v23 + 4;
        if ((unint64_t)v22 < v24)
        {
          while (1)
          {
            v27 = *v22;
            v25 = v22 + 1;
            v26 = v27;
            v28 = v27 >= a4;
            v29 = v27 > a4;
            if (!v12)
              v28 = v29;
            if (v28)
            {
              v30 = memcmp(v25, a3, (int)a4);
              if (v30 > 0)
                return 0;
              if (!v30 && *(_DWORD *)&v25[v26] == (_DWORD)a6)
                break;
            }
            v22 = &v25[v26 + 4];
            if ((unint64_t)v22 >= v24)
              return 0;
          }
          memcpy(a8, v25, v26);
          v40 = &a8[v26 - a7];
          goto LABEL_33;
        }
        return 0;
      }
      break;
    case 2:
      v31 = *(_QWORD *)(a1 + 8);
      v32 = (a2 - 2);
      v33 = (_DWORD *)(v31 + v32);
      if (a4)
      {
        v34 = *a3;
        if (((*(_DWORD *)((char *)v33 + ((v34 >> 3) & 0x1C) + 4) >> v34) & 1) != 0)
        {
          *a8 = v34;
          v35 = *a3;
          v36 = v35 >> 5;
          if (v35 >= 0x20)
          {
            v37 = 0;
            if (v36 <= 1)
              v41 = 1;
            else
              v41 = v36;
            v42 = (unsigned int *)(v32 + v31 + 4);
            do
            {
              v43 = *v42++;
              a9 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
              a9.i16[0] = vaddlv_u8(a9);
              v37 += a9.i32[0];
              --v41;
            }
            while (v41);
          }
          else
          {
            v37 = 0;
          }
          a9.i32[0] = v33[v36 + 1] & ~(-1 << v35);
          v44 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
          v44.i16[0] = vaddlv_u8(v44);
          result = sub_20BA17980(a1, v33[v44.i32[0] + v37 + 10], a3 + 1, a4 - 1, a5, a6, a7, a8 + 1, a10);
LABEL_40:
          if (!(_DWORD)result)
            return result;
          return 1;
        }
        return 0;
      }
      if (!(_DWORD)a5 || *v33 != (_DWORD)a6)
      {
        v45 = 0;
        v46 = v32 + v31 + 4;
        while (1)
        {
          v47 = v45 >> 5 <= 1 ? 1 : v45 >> 5;
          *a8 = v45;
          v48 = v33[(v45 >> 5) + 1];
          if (((v48 >> v45) & 1) != 0)
          {
            if (v45 >= 0x20u)
            {
              v49 = 0;
              v50 = (unsigned int *)v46;
              do
              {
                v51 = *v50++;
                a9 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
                a9.i16[0] = vaddlv_u8(a9);
                v49 += a9.i32[0];
                --v47;
              }
              while (v47);
            }
            else
            {
              v49 = 0;
            }
            a9.i32[0] = v48 & ~(-1 << (v45 & 0x1F));
            v52 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
            v52.i16[0] = vaddlv_u8(v52);
            if (sub_20BA17980(a1, v33[v49 + v52.i32[0] + 10], a3, 0, 1, a6, a7, a8 + 1, a10))break;
          }
          result = 0;
          if ((_DWORD)++v45 == 256)
            return result;
        }
        return 1;
      }
      break;
    case 3:
      v17 = *(_QWORD *)(a1 + 8);
      v18 = (a2 - 3);
      v19 = (_DWORD *)(v17 + v18);
      if (a4)
      {
        *a8 = *a3;
        result = sub_20BA17980(a1, v19[*a3 + 1], a3 + 1, a4 - 1, a5, a6, a7, a8 + 1, a10);
        goto LABEL_40;
      }
      if (!(_DWORD)a5 || *v19 != (_DWORD)a6)
      {
        v38 = 0;
        v39 = v18 + v17 + 4;
        while (1)
        {
          *a8 = v38;
          result = sub_20BA17980(a1, *(unsigned int *)(v39 + 4 * v38), a3, 0, 1, a6, a7, a8 + 1, a10);
          if ((_DWORD)result)
            break;
          if (++v38 == 256)
            return result;
        }
        return 1;
      }
      break;
    default:
      return 0;
  }
  v40 = &a8[-a7];
LABEL_33:
  *a10 = v40;
  return 1;
}

uint64_t sub_20BA17D2C(int *a1, _BYTE *a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v6;

  v6 = 0;
  sub_20BA17D78((uint64_t)a1, *a1, a2, a3, 0, -1, 0, a4, (uint64_t)a5, a5, &v6, (uint64_t)a2);
  return v6;
}

uint64_t sub_20BA17D78(uint64_t a1, int a2, _BYTE *a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8, uint64_t a9, _BYTE *a10, _QWORD *a11, uint64_t a12)
{
  int v17;
  uint64_t *v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned int *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t *v33;
  uint8x8_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t i;
  _BYTE *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  unsigned int v56;
  uint8x8_t v57;
  int v58;
  unsigned int *v59;
  unsigned int v60;
  uint8x8_t v61;
  int v64;

  v64 = a7;
  v17 = a2 & 3;
  if (v17 != 1)
  {
    if (v17 == 2)
    {
      v30 = *(_QWORD *)(a1 + 8);
      v31 = (a2 - 2);
      v32 = (_DWORD *)(v30 + v31);
      if (!a4)
      {
        if (!a5 || *v32 != a8)
        {
          v51 = 0;
          v52 = v31 + v30 + 4;
          v20 = 1;
          while (1)
          {
            v53 = v51 >> 5 <= 1 ? 1 : v51 >> 5;
            *a10 = v51;
            if (((v32[(v51 >> 5) + 1] >> v51) & 1) != 0)
            {
              if (v51 >= 0x20u)
              {
                v54 = 0;
                v55 = (unsigned int *)v52;
                do
                {
                  v56 = *v55++;
                  v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
                  v57.i16[0] = vaddlv_u8(v57);
                  v54 += v57.i32[0];
                  --v53;
                }
                while (v53);
              }
              if (sub_20BA17D78(a1))
                break;
            }
            if ((_DWORD)++v51 == 256)
              return 0;
          }
          return v20;
        }
        goto LABEL_47;
      }
      if (a3)
      {
        if ((a4 & 1) == 0)
        {
          v33 = (uint64_t *)sub_20BA0225C(*(unsigned __int16 *)a3, 14);
          if (v33)
            return sub_20BA199C8(a1, a2, v34, (uint64_t)(a3 + 2), a4 - 2, (unint64_t)(v33[1] - *v33) >> 1, *v33, a7, a8, a9, a10);
        }
      }
      *a10 = *a3;
      v37 = *a3;
      v38 = v37 >> 5;
      if (((v32[(v37 >> 5) + 1] >> v37) & 1) != 0)
      {
        if (v37 >= 0x20)
        {
          v58 = 0;
          if (v38 <= 1)
            v38 = 1;
          else
            v38 = v38;
          v59 = (unsigned int *)(v31 + v30 + 4);
          do
          {
            v60 = *v59++;
            v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
            v61.i16[0] = vaddlv_u8(v61);
            v58 += v61.i32[0];
            --v38;
          }
          while (v38);
        }
        v36 = a1;
LABEL_92:
        if (sub_20BA17D78(v36))
          return 1;
      }
    }
    else if (v17 == 3)
    {
      if (a4)
      {
        if (a3)
        {
          if ((a4 & 1) == 0)
          {
            v18 = (uint64_t *)sub_20BA0225C(*(unsigned __int16 *)a3, 14);
            if (v18)
              return sub_20BA199C8(a1, a2, v19, (uint64_t)(a3 + 2), a4 - 2, (unint64_t)(v18[1] - *v18) >> 1, *v18, a7, a8, a9, a10);
          }
        }
        *a10 = *a3;
        v36 = a1;
        goto LABEL_92;
      }
      if (!a5 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + (a2 - 3)) != a8)
      {
        for (i = 0; i != 256; ++i)
        {
          *a10 = i;
          v20 = 1;
          if (sub_20BA17D78(a1))
            break;
          v20 = 0;
        }
        return v20;
      }
LABEL_47:
      v40 = &a10[-a9];
      goto LABEL_48;
    }
    return 0;
  }
  v22 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
  if (!a4 && a5 && v22[1] == a8)
    goto LABEL_47;
  if (a6 == -1)
  {
    v41 = (unsigned __int8 *)(v22 + 2);
    v42 = (unint64_t)v22 + *v22 + 4;
    if ((unint64_t)(v22 + 2) >= v42)
      return 0;
    if ((uint64_t)&a3[-a12] >= 0)
      v43 = (unint64_t)&a3[-a12] & 1;
    else
      v43 = -(uint64_t)((unint64_t)&a3[-a12] & 1);
    while (1)
    {
      v45 = v41 + 1;
      v44 = *v41;
      if (a5)
      {
        if (v44 < a4)
          goto LABEL_73;
      }
      else if (v44 <= a4)
      {
        goto LABEL_73;
      }
      if ((a4 & 1) != 0)
      {
        if ((v44 & 1) != 0)
        {
          v46 = *v45;
          v47 = *a3;
          if (v46 >= v47)
          {
            if (v46 > v47)
              return 0;
            if (!a7)
              v64 = 0;
            v48 = (uint64_t)(v41 + 2);
            v49 = (uint64_t)(a3 + 1);
            v50 = a4 - 1;
            goto LABEL_71;
          }
        }
      }
      else if (a4)
      {
        if ((v44 & 1) == 0)
          goto LABEL_68;
      }
      else if (v43 == (v44 & 1))
      {
LABEL_68:
        if (!a7)
          v64 = 0;
        v48 = (uint64_t)(v41 + 1);
        v49 = (uint64_t)a3;
        v50 = a4;
LABEL_71:
        if (!sub_20BA190E0(v48, v49, v50, 14, &v64) && *(_DWORD *)&v45[v44] == a8)
        {
          memcpy(a10, v45, v44);
          v40 = &a10[v44 - a9];
          goto LABEL_48;
        }
      }
LABEL_73:
      v41 = &v45[v44 + 4];
      if ((unint64_t)v41 >= v42)
        return 0;
    }
  }
  if ((a4 & 1) != 0)
    return 0;
  v23 = (unsigned __int8 *)(v22 + 2);
  v24 = (unint64_t)v22 + *v22 + 4;
  if ((unint64_t)(v22 + 2) >= v24)
    return 0;
  v25 = a4 + 1;
  while (1)
  {
    v26 = v23 + 1;
    v27 = *v23;
    if ((v27 & 1) == 0)
      goto LABEL_25;
    if (!a5)
      break;
    if (v27 > a4)
      goto LABEL_19;
LABEL_25:
    v20 = 0;
    v23 = &v26[v27 + 4];
    if ((unint64_t)v23 >= v24)
      return v20;
  }
  if (v25 >= v27)
    goto LABEL_25;
LABEL_19:
  v28 = *v26;
  if (v28 < a6)
    goto LABEL_25;
  if (v28 > a6)
    return 0;
  if (!a7)
    v64 = 0;
  v29 = v23 + 2;
  if (sub_20BA190E0((uint64_t)(v23 + 2), (uint64_t)a3, a4, 14, &v64) || *(_DWORD *)&v26[v27] != a8)
    goto LABEL_25;
  memcpy(a10, v29, (v27 - 1));
  v40 = &a10[~a9 + v27];
LABEL_48:
  *a11 = v40;
  return 1;
}

uint64_t sub_20BA18380(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, uint8x8_t a8)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  _OWORD v27[16];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = a4;
  if (!sub_20B968BE8((uint64_t)a1, *a1, (unsigned __int8 *)a2, a3, &v21, a5, (unint64_t *)&v20, a7, a8, 0, (uint64_t)a2)&& a6 != 0&& a2 != 0&& a3 != 0)
  {
    v18 = sub_20B87C1A0((uint64_t)a2, a3 >> 1);
    v19 = 2 * v18;
    if (2 * v18)
    {
      v28 = 0;
      memset(v27, 0, sizeof(v27));
      v24 = 0u;
      v25 = 0;
      v22[0] = a1;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = a2;
      v22[4] = a3;
      v22[5] = a5;
      v23 = (unint64_t)a7;
      LODWORD(v24) = 2;
      v26 = (char *)v27 + (a3 - v19) + 2;
      LOBYTE(v27[0]) = 1;
      BYTE1(v27[0]) = a3 != v19;
      sub_20BA184F4((uint64_t)v22, *a1, a2, a3 - v19, &a2[(a3 - v19)], v19, 0, 0, 0.0, &v20, 0, 0);
    }
  }
  return v20;
}

BOOL sub_20BA184F4(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, char *a5, uint64_t a6, unsigned __int16 *a7, unsigned int a8, double a9, uint64_t *a10, BOOL a11, int a12)
{
  char *v13;
  float v16;
  int v19;
  unsigned int *v20;
  int v21;
  int v22;
  uint64_t v23;
  __int16 *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  BOOL v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  BOOL v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  float v56;
  int v57;
  unsigned __int8 v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  int v64;
  BOOL v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int *v75;
  unsigned int v76;
  uint8x8_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  char v88;
  int v89;
  char *v90;
  uint64_t v91;
  BOOL v92;
  float *v93;
  size_t v94;
  unint64_t v95;
  unsigned __int16 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  _WORD *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  unsigned int *v112;
  unsigned int v113;
  uint8x8_t v114;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t v121;
  unsigned __int16 *v122;
  size_t __na;
  unsigned __int16 *__nb;
  BOOL v127;
  unint64_t v128;
  uint64_t v129;
  unsigned __int8 v130[16];
  float v131[28];
  uint64_t v132;

  v13 = a5;
  v16 = *(float *)&a9;
  v127 = a11;
  v132 = *MEMORY[0x24BDAC8D0];
  v19 = a2 & 3;
  if ((a2 & 2) == 0)
  {
    if (v19 == 1)
    {
      v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + (a2 - 1));
      v21 = a6 | a4 | a8;
      v22 = *(_DWORD *)(a1 + 64);
      if (a4 < 2)
      {
        v35 = 0;
      }
      else
      {
        v23 = 0;
        while (word_20BA94F18[v23] != *(_WORD *)a3)
        {
          if (++v23 == 8)
          {
            v24 = 0;
            goto LABEL_52;
          }
        }
        v24 = &word_20BA94F18[v23];
LABEL_52:
        if (v24)
          v46 = (char *)v24 - (char *)word_20BA94F18 == -2;
        else
          v46 = 1;
        v35 = !v46;
      }
      if (v22 != 1)
        v35 = 1;
      if (v21 && (v35 & 1) != 0)
        goto LABEL_62;
      v62 = v20[1];
      if (a12)
        v63 = 0;
      else
        v63 = v22 == 2;
      v64 = !v63;
      if (v62 && v64)
      {
        if (*(_QWORD *)(a1 + 40))
        {
          if (*(_BYTE *)(a1 + 81))
            v65 = !a11;
          else
            v65 = 1;
          v66 = 0.0;
          if (!v65)
            v66 = v16;
          v67 = *a10;
          v68 = *(_QWORD *)(a1 + 48) + 24 * *a10;
          *(_WORD *)(v68 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
          *(_BYTE *)(v68 + 1) = a11;
          *(_BYTE *)v68 = *(_BYTE *)(a1 + 82);
          *(float *)(v68 + 4) = v66;
          *(_DWORD *)(v68 + 8) = v62;
          *a10 = v67 + 1;
          if ((unint64_t)(v67 + 1) >= *(_QWORD *)(a1 + 40))
            return 1;
        }
        else
        {
          ++*a10;
        }
      }
      if (v21 || v22 == 2)
      {
LABEL_62:
        v47 = (char *)(v20 + 2);
        v48 = (unint64_t)v20 + *v20 + 4;
        if ((unint64_t)(v20 + 2) < v48)
        {
          v120 = a6;
          __na = (int)a4;
          v117 = a1 + 98;
          v118 = a4;
          while (1)
          {
            v51 = *v47;
            v50 = v47 + 1;
            v49 = v51;
            if (v51 >= a4 && (!a4 || !memcmp(v50, a3, __na)))
            {
              v52 = *(_QWORD *)(a1 + 88);
              v53 = v13;
              v54 = *(_QWORD *)(a1 + 72);
              v131[0] = v16;
              v130[0] = a11;
              v55 = v53;
              if (sub_20BA19DD8(a1, &v50[v118], (v49 - a4), v53, v120, a7, a8, *(_QWORD *)(a1 + 56), v130, a12, v131))
              {
                if (*(_QWORD *)(a1 + 40))
                {
                  v56 = v131[0];
                  v57 = *(_DWORD *)&v50[v49];
                  v58 = v130[0];
                  if (*(_BYTE *)(a1 + 81))
                    v59 = v130[0] == 0;
                  else
                    v59 = 1;
                  if (v59)
                    v56 = 0.0;
                  v60 = *a10;
                  v61 = *(_QWORD *)(a1 + 48) + 24 * *a10;
                  *(_WORD *)(v61 + 12) = *(_WORD *)(a1 + 88) - v117 + *(_DWORD *)(a1 + 72);
                  *(_BYTE *)(v61 + 1) = v58;
                  *(_BYTE *)v61 = *(_BYTE *)(a1 + 82);
                  *(float *)(v61 + 4) = v56;
                  *(_DWORD *)(v61 + 8) = v57;
                  *a10 = v60 + 1;
                  if ((unint64_t)(v60 + 1) >= *(_QWORD *)(a1 + 40))
                    return 1;
                }
                else
                {
                  ++*a10;
                }
              }
              *(_QWORD *)(a1 + 72) = v54;
              *(_QWORD *)(a1 + 88) = v52;
              v13 = v55;
            }
            v47 = &v50[v49 + 4];
            if ((unint64_t)v47 >= v48)
              return 0;
          }
        }
        return 0;
      }
    }
    return 0;
  }
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v26 = (int *)(v25 + (a2 & 0xFFFFFFFC));
  if (v19 == 3)
    v27 = 0;
  else
    v27 = v25 + (a2 & 0xFFFFFFFC);
  v28 = *v26;
  v29 = *(_DWORD *)(a1 + 64);
  if (v29 == 2)
  {
    v30 = a6;
    if (a6 | a4 | a8)
      goto LABEL_119;
    if (a12 && v28)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 81))
          v36 = !a11;
        else
          v36 = 1;
        v37 = 0.0;
        if (!v36)
          v37 = v16;
        v38 = *a10;
        v39 = *(_QWORD *)(a1 + 48) + 24 * *a10;
        *(_WORD *)(v39 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
        *(_BYTE *)(v39 + 1) = a11;
        *(_BYTE *)v39 = *(_BYTE *)(a1 + 82);
        *(float *)(v39 + 4) = v37;
        *(_DWORD *)(v39 + 8) = v28;
        *a10 = v38 + 1;
        if ((unint64_t)(v38 + 1) >= *(_QWORD *)(a1 + 40))
          return 1;
      }
      else
      {
        ++*a10;
      }
    }
    if (!*(_BYTE *)(a1 + 97))
      goto LABEL_119;
    v69 = 0;
    v70 = *(_QWORD *)(a1 + 72);
    v119 = (unsigned int *)(v27 + 4);
    v121 = v27;
    while (1)
    {
      v71 = v69 >> 5;
      if (v69 >> 5 <= 1)
        v71 = 1;
      *(_QWORD *)(a1 + 72) = v70 + 1;
      if (v19 == 3)
        break;
      v73 = v26[(v69 >> 5) + 1];
      if (((v73 >> v69) & 1) != 0)
      {
        if ((v69 & 0xE0) != 0)
        {
          v74 = 0;
          v75 = v119;
          do
          {
            v76 = *v75++;
            a9 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v76));
            LOWORD(a9) = vaddlv_u8(*(uint8x8_t *)&a9);
            v74 += LODWORD(a9);
            --v71;
          }
          while (v71);
        }
        else
        {
          v74 = 0;
        }
        LODWORD(a9) = v73 & ~(-1 << (v69 & 0x1F));
        v77 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&a9);
        v77.i16[0] = vaddlv_u8(v77);
        v72 = *(unsigned int *)(v27 + 4 * (v74 + v77.i32[0]) + 40);
LABEL_117:
        v78 = 1;
        HIDWORD(v116) = 1;
        LOBYTE(v116) = a11;
        v79 = sub_20BA184F4(a1, v72, a3, 0, v13, 0, a7, 0, v16, a10, v116);
        v27 = v121;
        if (v79)
          return v78;
      }
      v70 = *(_QWORD *)(a1 + 72) - 1;
      *(_QWORD *)(a1 + 72) = v70;
      if (++v69 == 256)
        goto LABEL_119;
    }
    v72 = v26[v69 + 1];
    goto LABEL_117;
  }
  v30 = a6;
  if (v29 == 1)
  {
    if (!a4 && v28)
    {
      v40 = a6;
      if (!(_DWORD)a6
        || a6 <= 3
        && (v41 = *(_QWORD *)(a1 + 88) - (a1 + 98), v41 >= 2)
        && (v41 & 0x8000000000000001) != 1
        && *(unsigned __int16 *)((v41 & 0xFFFFFFFFFFFFFFFELL) + a1 + 98 - 2) == *(unsigned __int16 *)a5)
      {
        if (*(_QWORD *)(a1 + 40))
        {
          if (*(_BYTE *)(a1 + 81))
            v42 = !a11;
          else
            v42 = 1;
          v43 = 0.0;
          if (!v42)
            v43 = v16;
          v44 = *a10;
          v45 = *(_QWORD *)(a1 + 48) + 24 * *a10;
          *(_WORD *)(v45 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
          *(_BYTE *)(v45 + 1) = a11;
          *(_BYTE *)v45 = *(_BYTE *)(a1 + 82);
          *(float *)(v45 + 4) = v43;
          *(_DWORD *)(v45 + 8) = v28;
          *a10 = v44 + 1;
          if ((unint64_t)(v44 + 1) >= *(_QWORD *)(a1 + 40))
            return 1;
        }
        else
        {
          ++*a10;
        }
      }
      goto LABEL_122;
    }
  }
  else if (!v29 && !(a6 | a4 | a8))
  {
    if (v28)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        if (*(_BYTE *)(a1 + 81))
          v31 = !a11;
        else
          v31 = 1;
        v32 = 0.0;
        if (!v31)
          v32 = v16;
        v33 = *a10;
        v34 = *(_QWORD *)(a1 + 48) + 24 * *a10;
        *(_WORD *)(v34 + 12) = *(_DWORD *)(a1 + 88) - a1 + *(_DWORD *)(a1 + 72) - 98;
        *(_BYTE *)(v34 + 1) = a11;
        *(_BYTE *)v34 = *(_BYTE *)(a1 + 82);
        *(float *)(v34 + 4) = v32;
        *(_DWORD *)(v34 + 8) = v28;
        *a10 = v33 + 1;
        if ((unint64_t)(v33 + 1) >= *(_QWORD *)(a1 + 40))
          return 1;
      }
      else
      {
        ++*a10;
      }
    }
    return 0;
  }
LABEL_119:
  v40 = v30;
  if (a4)
  {
    v80 = *a3;
    if (v19 == 3)
    {
      v81 = v26[v80 + 1];
    }
    else
    {
      v86 = v80 >> 5;
      v87 = v26[(v80 >> 5) + 1];
      if (((v87 >> v80) & 1) == 0)
        return 0;
      v88 = v80 & 0x1F;
      if (v80 >= 0x20)
      {
        v89 = 0;
        if (v86 <= 1)
          v86 = 1;
        else
          v86 = v86;
        v112 = (unsigned int *)(v27 + 4);
        do
        {
          v113 = *v112++;
          a9 = COERCE_DOUBLE(vcnt_s8((int8x8_t)v113));
          LOWORD(a9) = vaddlv_u8(*(uint8x8_t *)&a9);
          v89 += LODWORD(a9);
          --v86;
        }
        while (v86);
      }
      else
      {
        v89 = 0;
      }
      LODWORD(a9) = v87 & ~(-1 << v88);
      v114 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&a9);
      v114.i16[0] = vaddlv_u8(v114);
      v81 = *(unsigned int *)(v27 + 4 * (v89 + v114.i32[0]) + 40);
    }
    HIDWORD(v116) = a12;
    LOBYTE(v116) = a11;
    return sub_20BA184F4(a1, v81, a3 + 1, a4 - 1, v13, v30, a7, a8, v16, a10, v116) != 0;
  }
LABEL_122:
  if (a8)
  {
    if (!*(_BYTE *)(a1 + 81)
      || (v82 = (char *)a7 - *(_QWORD *)(a1 + 24), (v82 & 1) != 0)
      || (v83 = *(unsigned int *)(a1 + 32), (v83 & 1) != 0)
      || v83 < 2
      || (v84 = *(_QWORD *)(a1 + 56), (v84 & 1) != 0)
      || (v85 = sub_20B8B1CB4(*(int **)(a1 + 8), *(CFArrayRef **)(a1 + 16), v16, (v82 >> 1) + 1, (v84 + (unint64_t)v82) >> 1, (unint64_t)(v84 + v83) >> 1, (uint64_t)v131, 0xEuLL)) == 0)
    {
      LOWORD(v131[0]) = *a7;
      v131[1] = v16;
      v85 = 1;
    }
    else
    {
      if (LOWORD(v131[0]) != *a7)
        LOWORD(v131[0]) = *a7;
      if (v85 < 1)
        return 0;
    }
    v90 = v13;
    v91 = 0;
    v122 = a7 + 1;
    __nb = a7;
    v92 = 1;
    v93 = v131;
    v94 = v40;
    v95 = v85;
    while (1)
    {
      if (!v127)
        v127 = *(unsigned __int16 *)v93 != *__nb;
      v128 = 0;
      v129 = 0;
      if (*(_BYTE *)(a1 + 80))
      {
        if (!*(_BYTE *)(a1 + 96))
          break;
      }
      if (a8 < 4)
        v96 = 0;
      else
        v96 = (unsigned __int16)sub_20BA1A264((uint64_t)__nb, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 56), *(unsigned __int16 *)v93, *(CFArrayRef **)(a1 + 16));
      if (!*(_QWORD *)(a1 + 8) && !*(_QWORD *)(a1 + 16)
        || *(_BYTE *)(a1 + 82) && (!*(_BYTE *)(a1 + 80) || !*(_BYTE *)(a1 + 96)))
      {
        *(_WORD *)v130 = *(_WORD *)v93;
        v128 = 0;
        v129 = 0;
LABEL_157:
        v100 = *(void **)(a1 + 88);
        v98 = 2;
        goto LABEL_158;
      }
      v97 = sub_20B87B054(v127, v90, v94, *(unsigned __int16 *)v93, v130, 16, &v129, (uint64_t *)&v128, v96);
      if ((_DWORD)v97 != -2)
      {
        v98 = v97;
        if ((_DWORD)v97 == -1)
          return v92;
        v99 = v128;
        if (v128 <= 7)
        {
          v100 = *(void **)(a1 + 88);
          if (!(_DWORD)v97)
          {
LABEL_160:
            HIDWORD(v116) = a12;
            LOBYTE(v116) = v127;
            if (sub_20BA184F4(a1, a2, v130, v98, v129, v99, v122, a8 - 2, v93[1], a10, v116))
              return v92;
            *(_QWORD *)(a1 + 88) = v100;
            goto LABEL_162;
          }
LABEL_158:
          memcpy(v100, v90, v94);
          v101 = (_WORD *)(*(_QWORD *)(a1 + 88) + v94);
          *(_QWORD *)(a1 + 88) = v101;
          v99 = v128;
          if (!v128)
          {
            *v101 = *(_WORD *)v93;
            *(_QWORD *)(a1 + 88) += 2;
            v99 = v128;
          }
          goto LABEL_160;
        }
      }
LABEL_162:
      v92 = ++v91 < v95;
      v93 += 2;
      if (v95 == v91)
        return 0;
    }
    *(_WORD *)v130 = *(_WORD *)v93;
    v128 = 0;
    goto LABEL_157;
  }
  if (!v40)
    return 0;
  if (!*(_BYTE *)(a1 + 96))
    return 0;
  v102 = *(_QWORD *)(a1 + 88);
  v103 = sub_20B87B784(v13, v40);
  if (!v103)
    return 0;
  v104 = v103;
  v105 = a7;
  memcpy(*(void **)(a1 + 88), v13, v40);
  *(_QWORD *)(a1 + 88) += v40;
  if (*(_DWORD *)(a1 + 32) == v40 && *(_DWORD *)(a1 + 64) == 2)
    *(_BYTE *)(a1 + 97) = 0;
  v106 = *(_QWORD *)v104;
  if (*((_QWORD *)v104 + 1) == *(_QWORD *)v104)
  {
LABEL_178:
    *(_QWORD *)(a1 + 88) = v102;
    return 0;
  }
  v107 = 0;
  v108 = 0;
  v78 = 1;
  while (1)
  {
    v109 = (uint64_t *)(v106 + v107);
    if (*((char *)v109 + 23) < 0)
    {
      v111 = (uint64_t *)*v109;
      v110 = v109[1];
    }
    else
    {
      v110 = *((unsigned __int8 *)v109 + 23);
      v111 = v109;
    }
    HIDWORD(v116) = 1;
    LOBYTE(v116) = a11;
    if (sub_20BA184F4(a1, a2, v111, v110, 0, 0, v105, 0, v16, a10, v116))
      return v78;
    ++v108;
    v106 = *(_QWORD *)v104;
    v107 += 24;
    if (v108 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v104 + 1) - *(_QWORD *)v104) >> 3))
      goto LABEL_178;
  }
}

uint64_t sub_20BA19018(unsigned int *a1, uint64_t a2, double a3)
{
  double v5;
  uint64_t v8;

  v8 = 0;
  *(_BYTE *)(a2 + 82) = 1;
  *(_QWORD *)(a2 + 72) = 0;
  LODWORD(a3) = 0;
  if (!sub_20BA184F4(a2, *a1, 0, 0, 0, 0, *(unsigned __int16 **)(a2 + 24), *(_DWORD *)(a2 + 32), a3, &v8, 0, 0)
    && *(_BYTE *)(a2 + 80) == 0)
  {
    *(_BYTE *)(a2 + 82) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    LODWORD(v5) = 0;
    sub_20BA184F4(a2, *a1, 0, 0, 0, 0, *(unsigned __int16 **)(a2 + 24), *(_DWORD *)(a2 + 32), v5, &v8, 0, 0);
  }
  return v8;
}

uint64_t sub_20BA190E0(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  int v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;

  if (a3 < 1)
    return 0;
  v10 = 0;
  while (1)
  {
    if (a2)
    {
      if (((a3 - v10) & 1) == 0)
      {
        v11 = sub_20BA0225C(*(unsigned __int16 *)(a2 + v10), a4);
        if (v11)
          break;
      }
    }
    v16 = *(unsigned __int8 *)(a1 + v10);
    v17 = *(unsigned __int8 *)(a2 + v10);
    if (v16 < v17)
      return 0xFFFFFFFFLL;
    if (v16 > v17)
      return 1;
LABEL_13:
    if (++v10 >= a3)
      return 0;
  }
  v12 = (char *)v11[1] - (char *)*v11;
  if ((int)(v12 >> 1) >= 1)
  {
    v13 = 0;
    v14 = *(unsigned __int16 *)(a1 + v10);
    v15 = v12 & 0x1FFFFFFFELL;
    while (v14 != *(unsigned __int16 *)((char *)*v11 + v13))
    {
      v13 += 2;
      if (v15 == v13)
        goto LABEL_21;
    }
    if (v13 && !*a5)
      *a5 = 1;
    ++v10;
    goto LABEL_13;
  }
  LOBYTE(v14) = *(_BYTE *)(a1 + v10);
LABEL_21:
  v19 = *(unsigned __int8 *)(a2 + v10);
  if (v19 > v14)
    return 0xFFFFFFFFLL;
  if (v19 < v14)
    return 1;
  if (*(unsigned __int8 *)(a1 + v10 + 1) < *(unsigned __int8 *)(a2 + v10 + 1))
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t sub_20BA19218(uint64_t a1, int a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  uint8x8_t v50;

  if ((a2 & 3) != 2)
  {
    if ((a2 & 3) == 3 && a9 >= 1)
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 8) + (a2 - 3);
      v17 = a9;
      do
      {
        if (a13)
          v18 = 1;
        else
          v18 = v15 == 0;
        if (!v18)
          a13 = 1;
        v19 = *(_DWORD *)(v16 + 4 * *(unsigned __int8 *)(a10 + 2 * v15) + 4);
        v20 = v19 & 3;
        if ((v19 & 3) != 0)
        {
          v21 = *(unsigned __int8 *)(a10 + ((2 * v15) | 1));
          if (v20 == 2)
          {
            v22 = *(_QWORD *)(a1 + 8);
            v23 = (v19 - 2);
            v24 = v21 >> 5;
            if (((*(_DWORD *)(v22 + v23 + 4 * (v21 >> 5) + 4) >> v21) & 1) != 0)
            {
              if (v21 >= 0x20)
              {
                v26 = 0;
                if (v24 <= 1)
                  v24 = 1;
                else
                  v24 = v24;
                v27 = (unsigned int *)(v22 + v23 + 4);
                do
                {
                  v28 = *v27++;
                  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
                  v29.i16[0] = vaddlv_u8(v29);
                  v26 += v29.i32[0];
                  --v24;
                }
                while (v24);
              }
LABEL_24:
              v25 = a1;
LABEL_25:
              if (sub_20BA16F20(v25))
                return 1;
            }
          }
          else
          {
            if (v20 != 3)
            {
              v25 = a1;
              goto LABEL_25;
            }
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + (v19 - 3) + 4 * v21 + 4) & 3) != 0)
              goto LABEL_24;
          }
        }
        ++v15;
      }
      while (v15 != v17);
    }
    return 0;
  }
  if (a9 < 1)
    return 0;
  v30 = 0;
  v31 = *(_QWORD *)(a1 + 8) + (a2 - 2);
  v32 = a9;
  while (1)
  {
    if (a13)
      v33 = 1;
    else
      v33 = v30 == 0;
    if (!v33)
      a13 = 1;
    v34 = *(unsigned __int8 *)(a10 + 2 * v30);
    v35 = v34 >> 5;
    v36 = *(_DWORD *)(v31 + 4 * (v34 >> 5) + 4);
    if (((v36 >> v34) & 1) == 0)
      goto LABEL_58;
    if (v34 >= 0x20)
    {
      v37 = 0;
      if (v35 <= 1)
        v35 = 1;
      else
        v35 = v35;
      v38 = (unsigned int *)(v31 + 4);
      do
      {
        v39 = *v38++;
        a3 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
        a3.i16[0] = vaddlv_u8(a3);
        v37 += a3.i32[0];
        --v35;
      }
      while (v35);
    }
    else
    {
      v37 = 0;
    }
    a3.i32[0] = v36 & ~(-1 << (v34 & 0x1F));
    a3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    a3.i16[0] = vaddlv_u8(a3);
    v40 = *(_DWORD *)(v31 + 4 * (v37 + a3.i32[0]) + 40);
    v41 = *(unsigned __int8 *)(a10 + ((2 * v30) | 1));
    v42 = v40 & 3;
    if (v42 == 1)
    {
      v43 = a1;
      goto LABEL_57;
    }
    if (v42 != 2)
      break;
    v44 = *(_QWORD *)(a1 + 8);
    v45 = (v40 - 2);
    v46 = v41 >> 5;
    if (((*(_DWORD *)(v44 + v45 + 4 * (v41 >> 5) + 4) >> v41) & 1) != 0)
    {
      if (v41 >= 0x20)
      {
        v47 = 0;
        if (v46 <= 1)
          v46 = 1;
        else
          v46 = v46;
        v48 = (unsigned int *)(v44 + v45 + 4);
        do
        {
          v49 = *v48++;
          v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
          v50.i16[0] = vaddlv_u8(v50);
          v47 += v50.i32[0];
          --v46;
        }
        while (v46);
      }
      goto LABEL_56;
    }
LABEL_58:
    if (++v30 == v32)
      return 0;
  }
  if (v42 != 3 || (*(_DWORD *)(*(_QWORD *)(a1 + 8) + (v40 - 3) + 4 * v41 + 4) & 3) == 0)
    goto LABEL_58;
LABEL_56:
  v43 = a1;
LABEL_57:
  if (!sub_20BA16F20(v43))
    goto LABEL_58;
  return 1;
}

uint64_t sub_20BA195D8(uint64_t a1, int a2, uint8x8_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  uint8x8_t v49;

  if ((a2 & 3) != 2)
  {
    if ((a2 & 3) == 3 && a6 >= 1)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 8) + (a2 - 3);
      v16 = a6;
      do
      {
        if (a8)
          v17 = 1;
        else
          v17 = v14 == 0;
        if (!v17)
          a8 = 1;
        *a11 = *(_BYTE *)(a7 + 2 * v14);
        v18 = *(_DWORD *)(v15 + 4 * *(unsigned __int8 *)(a7 + 2 * v14) + 4);
        v19 = v18 & 3;
        if ((v18 & 3) != 0)
        {
          v20 = *(unsigned __int8 *)(a7 + ((2 * v14) | 1));
          a11[1] = v20;
          if (v19 == 2)
          {
            v21 = *(_QWORD *)(a1 + 8);
            v22 = (v18 - 2);
            v23 = v20 >> 5;
            if (((*(_DWORD *)(v21 + v22 + 4 * (v20 >> 5) + 4) >> v20) & 1) != 0)
            {
              if (v20 >= 0x20)
              {
                v25 = 0;
                if (v23 <= 1)
                  v23 = 1;
                else
                  v23 = v23;
                v26 = (unsigned int *)(v21 + v22 + 4);
                do
                {
                  v27 = *v26++;
                  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
                  v28.i16[0] = vaddlv_u8(v28);
                  v25 += v28.i32[0];
                  --v23;
                }
                while (v23);
              }
LABEL_24:
              v24 = a1;
LABEL_25:
              if (sub_20BA174F8(v24))
                return 1;
            }
          }
          else
          {
            if (v19 != 3)
            {
              v24 = a1;
              goto LABEL_25;
            }
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + (v18 - 3) + 4 * v20 + 4) & 3) != 0)
              goto LABEL_24;
          }
        }
        ++v14;
      }
      while (v14 != v16);
    }
    return 0;
  }
  if (a6 < 1)
    return 0;
  v29 = 0;
  v30 = *(_QWORD *)(a1 + 8) + (a2 - 2);
  v31 = a6;
  while (1)
  {
    if (a8)
      v32 = 1;
    else
      v32 = v29 == 0;
    v33 = *(unsigned __int8 *)(a7 + 2 * v29);
    if (!v32)
      a8 = 1;
    *a11 = v33;
    v34 = v33 >> 5;
    v35 = *(_DWORD *)(v30 + 4 * (v33 >> 5) + 4);
    if (((v35 >> v33) & 1) == 0)
      goto LABEL_58;
    if (v33 >= 0x20)
    {
      v36 = 0;
      if (v34 <= 1)
        v34 = 1;
      else
        v34 = v34;
      v37 = (unsigned int *)(v30 + 4);
      do
      {
        v38 = *v37++;
        a3 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        a3.i16[0] = vaddlv_u8(a3);
        v36 += a3.i32[0];
        --v34;
      }
      while (v34);
    }
    else
    {
      v36 = 0;
    }
    a3.i32[0] = v35 & ~(-1 << (v33 & 0x1F));
    a3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    a3.i16[0] = vaddlv_u8(a3);
    v39 = *(_DWORD *)(v30 + 4 * (v36 + a3.i32[0]) + 40);
    v40 = *(unsigned __int8 *)(a7 + ((2 * v29) | 1));
    a11[1] = v40;
    v41 = v39 & 3;
    if (v41 == 1)
    {
      v42 = a1;
      goto LABEL_57;
    }
    if (v41 != 2)
      break;
    v43 = *(_QWORD *)(a1 + 8);
    v44 = (v39 - 2);
    v45 = v40 >> 5;
    if (((*(_DWORD *)(v43 + v44 + 4 * (v40 >> 5) + 4) >> v40) & 1) != 0)
    {
      if (v40 >= 0x20)
      {
        v46 = 0;
        if (v45 <= 1)
          v45 = 1;
        else
          v45 = v45;
        v47 = (unsigned int *)(v43 + v44 + 4);
        do
        {
          v48 = *v47++;
          v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          v46 += v49.i32[0];
          --v45;
        }
        while (v45);
      }
      goto LABEL_56;
    }
LABEL_58:
    if (++v29 == v31)
      return 0;
  }
  if (v41 != 3 || (*(_DWORD *)(*(_QWORD *)(a1 + 8) + (v39 - 3) + 4 * v40 + 4) & 3) == 0)
    goto LABEL_58;
LABEL_56:
  v42 = a1;
LABEL_57:
  if (!sub_20BA174F8(v42))
    goto LABEL_58;
  return 1;
}

uint64_t sub_20BA199C8(uint64_t a1, int a2, uint8x8_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  uint8x8_t v49;

  if ((a2 & 3) != 2)
  {
    if ((a2 & 3) == 3 && a6 >= 1)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 8) + (a2 - 3);
      v16 = a6;
      do
      {
        if (a8)
          v17 = 1;
        else
          v17 = v14 == 0;
        if (!v17)
          a8 = 1;
        *a11 = *(_BYTE *)(a7 + 2 * v14);
        v18 = *(_DWORD *)(v15 + 4 * *(unsigned __int8 *)(a7 + 2 * v14) + 4);
        v19 = v18 & 3;
        if ((v18 & 3) != 0)
        {
          v20 = *(unsigned __int8 *)(a7 + ((2 * v14) | 1));
          a11[1] = v20;
          if (v19 == 2)
          {
            v21 = *(_QWORD *)(a1 + 8);
            v22 = (v18 - 2);
            v23 = v20 >> 5;
            if (((*(_DWORD *)(v21 + v22 + 4 * (v20 >> 5) + 4) >> v20) & 1) != 0)
            {
              if (v20 >= 0x20)
              {
                v25 = 0;
                if (v23 <= 1)
                  v23 = 1;
                else
                  v23 = v23;
                v26 = (unsigned int *)(v21 + v22 + 4);
                do
                {
                  v27 = *v26++;
                  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
                  v28.i16[0] = vaddlv_u8(v28);
                  v25 += v28.i32[0];
                  --v23;
                }
                while (v23);
              }
LABEL_24:
              v24 = a1;
LABEL_25:
              if (sub_20BA17D78(v24))
                return 1;
            }
          }
          else
          {
            if (v19 != 3)
            {
              v24 = a1;
              goto LABEL_25;
            }
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + (v18 - 3) + 4 * v20 + 4) & 3) != 0)
              goto LABEL_24;
          }
        }
        ++v14;
      }
      while (v14 != v16);
    }
    return 0;
  }
  if (a6 < 1)
    return 0;
  v29 = 0;
  v30 = *(_QWORD *)(a1 + 8) + (a2 - 2);
  v31 = a6;
  while (1)
  {
    if (a8)
      v32 = 1;
    else
      v32 = v29 == 0;
    v33 = *(unsigned __int8 *)(a7 + 2 * v29);
    if (!v32)
      a8 = 1;
    *a11 = v33;
    v34 = v33 >> 5;
    v35 = *(_DWORD *)(v30 + 4 * (v33 >> 5) + 4);
    if (((v35 >> v33) & 1) == 0)
      goto LABEL_58;
    if (v33 >= 0x20)
    {
      v36 = 0;
      if (v34 <= 1)
        v34 = 1;
      else
        v34 = v34;
      v37 = (unsigned int *)(v30 + 4);
      do
      {
        v38 = *v37++;
        a3 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        a3.i16[0] = vaddlv_u8(a3);
        v36 += a3.i32[0];
        --v34;
      }
      while (v34);
    }
    else
    {
      v36 = 0;
    }
    a3.i32[0] = v35 & ~(-1 << (v33 & 0x1F));
    a3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    a3.i16[0] = vaddlv_u8(a3);
    v39 = *(_DWORD *)(v30 + 4 * (v36 + a3.i32[0]) + 40);
    v40 = *(unsigned __int8 *)(a7 + ((2 * v29) | 1));
    a11[1] = v40;
    v41 = v39 & 3;
    if (v41 == 1)
    {
      v42 = a1;
      goto LABEL_57;
    }
    if (v41 != 2)
      break;
    v43 = *(_QWORD *)(a1 + 8);
    v44 = (v39 - 2);
    v45 = v40 >> 5;
    if (((*(_DWORD *)(v43 + v44 + 4 * (v40 >> 5) + 4) >> v40) & 1) != 0)
    {
      if (v40 >= 0x20)
      {
        v46 = 0;
        if (v45 <= 1)
          v45 = 1;
        else
          v45 = v45;
        v47 = (unsigned int *)(v43 + v44 + 4);
        do
        {
          v48 = *v47++;
          v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
          v49.i16[0] = vaddlv_u8(v49);
          v46 += v49.i32[0];
          --v45;
        }
        while (v45);
      }
      goto LABEL_56;
    }
LABEL_58:
    if (++v29 == v31)
      return 0;
  }
  if (v41 != 3 || (*(_DWORD *)(*(_QWORD *)(a1 + 8) + (v39 - 3) + 4 * v40 + 4) & 3) == 0)
    goto LABEL_58;
LABEL_56:
  v42 = a1;
LABEL_57:
  if (!sub_20BA17D78(v42))
    goto LABEL_58;
  return 1;
}

uint64_t sub_20BA19DD8(uint64_t a1, char *a2, unsigned int a3, char *a4, unsigned int a5, unsigned __int16 *a6, unsigned int a7, uint64_t a8, _BYTE *a9, int a10, float *a11)
{
  size_t v11;
  float v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t result;
  char **v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;
  int v38;
  int v39;
  void *v40;
  _WORD *v41;
  size_t v43;
  int v46;
  unint64_t v47;
  uint64_t v48;
  _WORD __s2[8];
  _WORD v50[2];
  float v51;
  uint64_t v52;

  LODWORD(v11) = a5;
  v52 = *MEMORY[0x24BDAC8D0];
  if (!a7)
  {
    if (!a5)
    {
      v32 = *(_DWORD *)(a1 + 64);
      if (v32 >= 2)
      {
        if (v32 == 2 && (a3 || a10))
        {
          v33 = *(_QWORD *)(a1 + 72) + a3;
LABEL_44:
          *(_QWORD *)(a1 + 72) = v33;
          return 1;
        }
        return 0;
      }
      return a3 == 0;
    }
    if (!*(_BYTE *)(a1 + 96))
      return 0;
    v21 = *(_QWORD *)(a1 + 88);
    result = (uint64_t)sub_20B87B784(a4, a5);
    if (!result)
      return result;
    v23 = (char **)result;
    memcpy(*(void **)(a1 + 88), a4, v11);
    *(_QWORD *)(a1 + 88) += v11;
    if (*(_DWORD *)(a1 + 32) == (_DWORD)v11 && *(_DWORD *)(a1 + 64) == 2)
      *(_BYTE *)(a1 + 97) = 0;
    v24 = *v23;
    v25 = v23[1] - *v23;
    if (!v25)
    {
LABEL_33:
      result = 0;
      *(_QWORD *)(a1 + 88) = v21;
      return result;
    }
    v26 = v25 / 24;
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    while (1)
    {
      if (v24[23] < 0)
      {
        v28 = *((_QWORD *)v24 + 1);
        if (a3 < v28)
          goto LABEL_32;
        v29 = *(char **)v24;
      }
      else
      {
        LODWORD(v28) = v24[23];
        v29 = v24;
        if (v28 > a3)
          goto LABEL_32;
      }
      if (!memcmp(a2, v29, v28))
      {
        if (!*(_BYTE *)(a1 + 97))
          return (_DWORD)v28 == a3;
        v30 = *(_DWORD *)(a1 + 64);
        if (v30 >= 2)
        {
          if (v30 == 2)
          {
            v33 = *(_QWORD *)(a1 + 72) + (a3 - v28);
            goto LABEL_44;
          }
        }
        else if (a3 == v28)
        {
          return 1;
        }
      }
LABEL_32:
      v24 += 24;
      if (!--v27)
        goto LABEL_33;
    }
  }
  if (a3)
  {
    v16 = *a11;
    if (*(_BYTE *)(a1 + 81))
    {
      v17 = (char *)a6 - *(_QWORD *)(a1 + 24);
      if ((v17 & 1) == 0)
      {
        v18 = *(unsigned int *)(a1 + 32);
        if ((v18 & 1) == 0 && (a8 & 1) == 0 && v18 >= 2)
        {
          v19 = sub_20B8B1CB4(*(int **)(a1 + 8), *(CFArrayRef **)(a1 + 16), v16, (v17 >> 1) + 1, (a8 + (unint64_t)v17) >> 1, (unint64_t)(v18 + a8) >> 1, (uint64_t)v50, 0xEuLL);
          if (v19)
          {
            if (v19 < 1)
              return 0;
            goto LABEL_47;
          }
          v16 = *a11;
        }
      }
    }
    v50[0] = *a6;
    v51 = v16;
    v19 = 1;
LABEL_47:
    v34 = v50;
    v11 = v11;
    v35 = v19;
    v43 = v11;
    while (1)
    {
      v47 = 0;
      v48 = 0;
      v36 = *a9;
      if (!*a9)
      {
        if (*v34 == *a6)
        {
          v36 = 0;
        }
        else
        {
          v36 = 1;
          *a9 = 1;
        }
      }
      if (a7 < 4)
      {
        v37 = 0;
      }
      else
      {
        v37 = (unsigned __int16)sub_20BA1A264((uint64_t)a6, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 56), *v34, *(CFArrayRef **)(a1 + 16));
        v36 = *a9;
      }
      if ((*(_QWORD *)(a1 + 8) || *(_QWORD *)(a1 + 16))
        && (!*(_BYTE *)(a1 + 82) || *(_BYTE *)(a1 + 80) && *(_BYTE *)(a1 + 96)))
      {
        v38 = sub_20B87B054(v36 != 0, a4, v11, *v34, __s2, 16, &v48, (uint64_t *)&v47, v37);
        if (v38 == -2)
          goto LABEL_73;
        v39 = v38;
        if (v38 == -1)
          return 0;
        if (v47 > 7)
          goto LABEL_73;
        v40 = *(void **)(a1 + 88);
        if (!v38)
        {
LABEL_69:
          if (!memcmp(a2, __s2, v39))
          {
            v46 = *((_DWORD *)v34 + 1);
            if (sub_20BA19DD8(a1, &a2[v39], (a3 - v39), v48, v47, a6 + 1, a7 - 2, a8, a9, a10, &v46))
            {
              *(_DWORD *)a11 = v46;
              return 1;
            }
          }
          v11 = v43;
          goto LABEL_72;
        }
      }
      else
      {
        __s2[0] = *v34;
        v47 = 0;
        v48 = 0;
        v39 = 2;
        v40 = *(void **)(a1 + 88);
      }
      memcpy(v40, a4, v11);
      v41 = (_WORD *)(*(_QWORD *)(a1 + 88) + v11);
      *(_QWORD *)(a1 + 88) = v41;
      if (!v47)
      {
        *v41 = *v34;
        *(_QWORD *)(a1 + 88) += 2;
      }
      if (v39 <= (int)a3)
        goto LABEL_69;
LABEL_72:
      *(_QWORD *)(a1 + 88) = v40;
LABEL_73:
      v34 += 4;
      if (!--v35)
        return 0;
    }
  }
  return *(_DWORD *)(a1 + 64) == 1;
}

const UInt8 *sub_20BA1A264(uint64_t a1, int a2, uint64_t a3, int a4, CFArrayRef *a5)
{
  signed int v7;
  const UInt8 *result;
  const UInt8 *v9;

  if (!a5)
    return (const UInt8 *)*(unsigned __int16 *)(a1 + 2);
  v7 = (((unint64_t)(a1 - a2) + a3) >> 1) + 1;
  result = sub_20B951B88(a5, v7);
  if (result)
  {
    v9 = result;
    if (a4 == 110 && (sub_20B8B2084(a5, v7) & 1) != 0)
      return 0;
    else
      return (const UInt8 *)*(unsigned __int16 *)v9;
  }
  return result;
}

void sub_20BA1A2E0(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  char *v9;
  char **v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  _WORD *v15;
  char *v16;
  char **v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  unint64_t v44;
  char *v45;
  _WORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  _WORD *v68;
  __int16 v69;
  char *v70;
  __int16 v71;
  _WORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int16 v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  __int16 v92;
  unint64_t v93;
  char *v94;
  _WORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int16 v104;
  _WORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  __int16 v115;
  unint64_t v116;
  char *v117;
  _WORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  __int16 v128;
  unint64_t v129;
  char *v130;
  _WORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  __int16 v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  __int16 v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  __int16 v159;
  __int16 v160;

  if (a5 > 4)
  {
    if (a5 == 5)
    {
      sub_20BA1AC04(a3, (uint64_t)a1);
      v17 = (char **)(a1 + 2);
      v16 = (char *)a1[2];
      v18 = (char *)a1[1];
      if (v18 >= v16)
      {
        v34 = (char *)*a1;
        v35 = (uint64_t)&v18[-*a1];
        if (v35 <= -3)
          goto LABEL_223;
        v36 = v35 >> 1;
        v37 = v16 - v34;
        if (v37 <= (v35 >> 1) + 1)
          v38 = v36 + 1;
        else
          v38 = v37;
        if (v37 >= 0x7FFFFFFFFFFFFFFELL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v39);
          v34 = (char *)*a1;
          v18 = (char *)a1[1];
        }
        else
        {
          v40 = 0;
        }
        v80 = &v40[2 * v36];
        v16 = &v40[2 * v39];
        *(_WORD *)v80 = 44;
        v19 = v80 + 2;
        while (v18 != v34)
        {
          v81 = *((_WORD *)v18 - 1);
          v18 -= 2;
          *((_WORD *)v80 - 1) = v81;
          v80 -= 2;
        }
        *a1 = v80;
        a1[1] = v19;
        a1[2] = v16;
        if (v34)
        {
          operator delete(v34);
          v16 = *v17;
        }
      }
      else
      {
        *(_WORD *)v18 = 44;
        v19 = v18 + 2;
      }
      a1[1] = v19;
      if (v19 >= v16)
      {
        v83 = (char *)*a1;
        v84 = (uint64_t)&v19[-*a1];
        if (v84 <= -3)
          goto LABEL_223;
        v85 = v84 >> 1;
        v86 = v16 - v83;
        if (v86 <= (v84 >> 1) + 1)
          v87 = v85 + 1;
        else
          v87 = v86;
        if (v86 >= 0x7FFFFFFFFFFFFFFELL)
          v88 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
        {
          v89 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v88);
          v83 = (char *)*a1;
          v19 = (char *)a1[1];
        }
        else
        {
          v89 = 0;
        }
        v103 = &v89[2 * v85];
        v16 = &v89[2 * v88];
        *(_WORD *)v103 = 42;
        v82 = v103 + 2;
        while (v19 != v83)
        {
          v104 = *((_WORD *)v19 - 1);
          v19 -= 2;
          *((_WORD *)v103 - 1) = v104;
          v103 -= 2;
        }
        *a1 = v103;
        a1[1] = v82;
        a1[2] = v16;
        if (v83)
        {
          operator delete(v83);
          v16 = *v17;
        }
      }
      else
      {
        *(_WORD *)v19 = 42;
        v82 = v19 + 2;
      }
      a1[1] = v82;
      if (v82 >= v16)
      {
        v106 = (char *)*a1;
        v107 = (uint64_t)&v82[-*a1];
        if (v107 <= -3)
          goto LABEL_223;
        v108 = v107 >> 1;
        v109 = v16 - v106;
        if (v109 <= (v107 >> 1) + 1)
          v110 = v108 + 1;
        else
          v110 = v109;
        if (v109 >= 0x7FFFFFFFFFFFFFFELL)
          v111 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
        {
          v112 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v111);
          v106 = (char *)*a1;
          v82 = (char *)a1[1];
        }
        else
        {
          v112 = 0;
        }
        v126 = &v112[2 * v108];
        v127 = &v112[2 * v111];
        *(_WORD *)v126 = 44;
        v105 = v126 + 2;
        while (v82 != v106)
        {
          v128 = *((_WORD *)v82 - 1);
          v82 -= 2;
          *((_WORD *)v126 - 1) = v128;
          v126 -= 2;
        }
        *a1 = v126;
        a1[1] = v105;
        a1[2] = v127;
        if (v106)
          operator delete(v106);
      }
      else
      {
        *(_WORD *)v82 = 44;
        v105 = v82 + 2;
      }
      a1[1] = v105;
      sub_20BA1AC04(a4, (uint64_t)a1);
      v130 = (char *)a1[1];
      v129 = a1[2];
      if ((unint64_t)v130 >= v129)
      {
        v132 = (char *)*a1;
        v133 = (uint64_t)&v130[-*a1];
        if (v133 <= -3)
          goto LABEL_223;
        v134 = v133 >> 1;
        v135 = v129 - (_QWORD)v132;
        if (v135 <= (v133 >> 1) + 1)
          v136 = v134 + 1;
        else
          v136 = v135;
        if (v135 >= 0x7FFFFFFFFFFFFFFELL)
          v137 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v137);
          v132 = (char *)*a1;
          v130 = (char *)a1[1];
        }
        else
        {
          v138 = 0;
        }
        v149 = &v138[2 * v134];
        v150 = &v138[2 * v137];
        *(_WORD *)v149 = 44;
        v131 = v149 + 2;
        while (v130 != v132)
        {
          v151 = *((_WORD *)v130 - 1);
          v130 -= 2;
          *((_WORD *)v149 - 1) = v151;
          v149 -= 2;
        }
        *a1 = v149;
        a1[1] = v131;
        a1[2] = v150;
        if (v132)
          operator delete(v132);
      }
      else
      {
        *(_WORD *)v130 = 44;
        v131 = v130 + 2;
      }
      a1[1] = v131;
      sub_20BA1ADD0(a2, (uint64_t)a1);
      v58 = (char *)a1[1];
      v152 = a1[2];
      if ((unint64_t)v58 >= v152)
      {
        v59 = (char *)*a1;
        v153 = (uint64_t)&v58[-*a1];
        if (v153 > -3)
        {
          v154 = v153 >> 1;
          v155 = v152 - (_QWORD)v59;
          if (v155 <= (v153 >> 1) + 1)
            v156 = v154 + 1;
          else
            v156 = v155;
          if (v155 >= 0x7FFFFFFFFFFFFFFELL)
            v157 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v157 = v156;
          if (v157)
          {
            v158 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v157);
            v59 = (char *)*a1;
            v58 = (char *)a1[1];
          }
          else
          {
            v158 = 0;
          }
          v66 = &v158[2 * v154];
          v67 = &v158[2 * v157];
          *(_WORD *)v66 = 0;
          v68 = v66 + 2;
          while (v58 != v59)
          {
            v160 = *((_WORD *)v58 - 1);
            v58 -= 2;
            *((_WORD *)v66 - 1) = v160;
            v66 -= 2;
          }
          goto LABEL_219;
        }
        goto LABEL_223;
      }
      goto LABEL_201;
    }
    if (a5 != 13)
      return;
  }
  else if (a5 != 2)
  {
    if (a5 != 4)
      return;
    v10 = (char **)(a1 + 2);
    v9 = (char *)a1[2];
    v11 = (char *)a1[1];
    if (v11 >= v9)
    {
      v27 = (char *)*a1;
      v28 = (uint64_t)&v11[-*a1];
      if (v28 <= -3)
        goto LABEL_223;
      v29 = v28 >> 1;
      v30 = v9 - v27;
      if (v30 <= (v28 >> 1) + 1)
        v31 = v29 + 1;
      else
        v31 = v30;
      if (v30 >= 0x7FFFFFFFFFFFFFFELL)
        v32 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v32);
        v27 = (char *)*a1;
        v11 = (char *)a1[1];
      }
      else
      {
        v33 = 0;
      }
      v70 = &v33[2 * v29];
      v9 = &v33[2 * v32];
      *(_WORD *)v70 = 42;
      v12 = v70 + 2;
      while (v11 != v27)
      {
        v71 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v70 - 1) = v71;
        v70 -= 2;
      }
      *a1 = v70;
      a1[1] = v12;
      a1[2] = v9;
      if (v27)
      {
        operator delete(v27);
        v9 = *v10;
      }
    }
    else
    {
      *(_WORD *)v11 = 42;
      v12 = v11 + 2;
    }
    a1[1] = v12;
    if (v12 >= v9)
    {
      v73 = (char *)*a1;
      v74 = (uint64_t)&v12[-*a1];
      if (v74 <= -3)
        goto LABEL_223;
      v75 = v74 >> 1;
      v76 = v9 - v73;
      if (v76 <= (v74 >> 1) + 1)
        v77 = v75 + 1;
      else
        v77 = v76;
      if (v76 >= 0x7FFFFFFFFFFFFFFELL)
        v78 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
      {
        v79 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v78);
        v73 = (char *)*a1;
        v12 = (char *)a1[1];
      }
      else
      {
        v79 = 0;
      }
      v90 = &v79[2 * v75];
      v91 = &v79[2 * v78];
      *(_WORD *)v90 = 44;
      v72 = v90 + 2;
      while (v12 != v73)
      {
        v92 = *((_WORD *)v12 - 1);
        v12 -= 2;
        *((_WORD *)v90 - 1) = v92;
        v90 -= 2;
      }
      *a1 = v90;
      a1[1] = v72;
      a1[2] = v91;
      if (v73)
        operator delete(v73);
    }
    else
    {
      *(_WORD *)v12 = 44;
      v72 = v12 + 2;
    }
    a1[1] = v72;
    sub_20BA1AC04(a3, (uint64_t)a1);
    v94 = (char *)a1[1];
    v93 = a1[2];
    if ((unint64_t)v94 >= v93)
    {
      v96 = (char *)*a1;
      v97 = (uint64_t)&v94[-*a1];
      if (v97 <= -3)
        goto LABEL_223;
      v98 = v97 >> 1;
      v99 = v93 - (_QWORD)v96;
      if (v99 <= (v97 >> 1) + 1)
        v100 = v98 + 1;
      else
        v100 = v99;
      if (v99 >= 0x7FFFFFFFFFFFFFFELL)
        v101 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v101 = v100;
      if (v101)
      {
        v102 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v101);
        v96 = (char *)*a1;
        v94 = (char *)a1[1];
      }
      else
      {
        v102 = 0;
      }
      v113 = &v102[2 * v98];
      v114 = &v102[2 * v101];
      *(_WORD *)v113 = 44;
      v95 = v113 + 2;
      while (v94 != v96)
      {
        v115 = *((_WORD *)v94 - 1);
        v94 -= 2;
        *((_WORD *)v113 - 1) = v115;
        v113 -= 2;
      }
      *a1 = v113;
      a1[1] = v95;
      a1[2] = v114;
      if (v96)
        operator delete(v96);
    }
    else
    {
      *(_WORD *)v94 = 44;
      v95 = v94 + 2;
    }
    a1[1] = v95;
    sub_20BA1AC04(a4, (uint64_t)a1);
    v117 = (char *)a1[1];
    v116 = a1[2];
    if ((unint64_t)v117 >= v116)
    {
      v119 = (char *)*a1;
      v120 = (uint64_t)&v117[-*a1];
      if (v120 <= -3)
        goto LABEL_223;
      v121 = v120 >> 1;
      v122 = v116 - (_QWORD)v119;
      if (v122 <= (v120 >> 1) + 1)
        v123 = v121 + 1;
      else
        v123 = v122;
      if (v122 >= 0x7FFFFFFFFFFFFFFELL)
        v124 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v124 = v123;
      if (v124)
      {
        v125 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v124);
        v119 = (char *)*a1;
        v117 = (char *)a1[1];
      }
      else
      {
        v125 = 0;
      }
      v139 = &v125[2 * v121];
      v140 = &v125[2 * v124];
      *(_WORD *)v139 = 44;
      v118 = v139 + 2;
      while (v117 != v119)
      {
        v141 = *((_WORD *)v117 - 1);
        v117 -= 2;
        *((_WORD *)v139 - 1) = v141;
        v139 -= 2;
      }
      *a1 = v139;
      a1[1] = v118;
      a1[2] = v140;
      if (v119)
        operator delete(v119);
    }
    else
    {
      *(_WORD *)v117 = 44;
      v118 = v117 + 2;
    }
    a1[1] = v118;
    sub_20BA1ADD0(a2, (uint64_t)a1);
    v58 = (char *)a1[1];
    v142 = a1[2];
    if ((unint64_t)v58 >= v142)
    {
      v59 = (char *)*a1;
      v143 = (uint64_t)&v58[-*a1];
      if (v143 > -3)
      {
        v144 = v143 >> 1;
        v145 = v142 - (_QWORD)v59;
        if (v145 <= (v143 >> 1) + 1)
          v146 = v144 + 1;
        else
          v146 = v145;
        if (v145 >= 0x7FFFFFFFFFFFFFFELL)
          v147 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v147 = v146;
        if (v147)
        {
          v148 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v147);
          v59 = (char *)*a1;
          v58 = (char *)a1[1];
        }
        else
        {
          v148 = 0;
        }
        v66 = &v148[2 * v144];
        v67 = &v148[2 * v147];
        *(_WORD *)v66 = 0;
        v68 = v66 + 2;
        while (v58 != v59)
        {
          v159 = *((_WORD *)v58 - 1);
          v58 -= 2;
          *((_WORD *)v66 - 1) = v159;
          v66 -= 2;
        }
LABEL_219:
        *a1 = v66;
        a1[1] = v68;
        a1[2] = v67;
        if (v59)
          operator delete(v59);
        goto LABEL_221;
      }
      goto LABEL_223;
    }
    goto LABEL_201;
  }
  sub_20BA1AC04(a3, (uint64_t)a1);
  v13 = a1[2];
  v14 = (char *)a1[1];
  if ((unint64_t)v14 >= v13)
  {
    v20 = (char *)*a1;
    v21 = (uint64_t)&v14[-*a1];
    if (v21 <= -3)
      goto LABEL_223;
    v22 = v21 >> 1;
    v23 = v13 - (_QWORD)v20;
    if (v23 <= (v21 >> 1) + 1)
      v24 = v22 + 1;
    else
      v24 = v23;
    if (v23 >= 0x7FFFFFFFFFFFFFFELL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      v26 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v25);
      v20 = (char *)*a1;
      v14 = (char *)a1[1];
    }
    else
    {
      v26 = 0;
    }
    v41 = &v26[2 * v22];
    v42 = &v26[2 * v25];
    *(_WORD *)v41 = 44;
    v15 = v41 + 2;
    while (v14 != v20)
    {
      v43 = *((_WORD *)v14 - 1);
      v14 -= 2;
      *((_WORD *)v41 - 1) = v43;
      v41 -= 2;
    }
    *a1 = v41;
    a1[1] = v15;
    a1[2] = v42;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_WORD *)v14 = 44;
    v15 = v14 + 2;
  }
  a1[1] = v15;
  sub_20BA1AC04(a4, (uint64_t)a1);
  v45 = (char *)a1[1];
  v44 = a1[2];
  if ((unint64_t)v45 >= v44)
  {
    v47 = (char *)*a1;
    v48 = (uint64_t)&v45[-*a1];
    if (v48 <= -3)
      goto LABEL_223;
    v49 = v48 >> 1;
    v50 = v44 - (_QWORD)v47;
    if (v50 <= (v48 >> 1) + 1)
      v51 = v49 + 1;
    else
      v51 = v50;
    if (v50 >= 0x7FFFFFFFFFFFFFFELL)
      v52 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
    {
      v53 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v52);
      v47 = (char *)*a1;
      v45 = (char *)a1[1];
    }
    else
    {
      v53 = 0;
    }
    v54 = &v53[2 * v49];
    v55 = &v53[2 * v52];
    *(_WORD *)v54 = 44;
    v46 = v54 + 2;
    while (v45 != v47)
    {
      v56 = *((_WORD *)v45 - 1);
      v45 -= 2;
      *((_WORD *)v54 - 1) = v56;
      v54 -= 2;
    }
    *a1 = v54;
    a1[1] = v46;
    a1[2] = v55;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *(_WORD *)v45 = 44;
    v46 = v45 + 2;
  }
  a1[1] = v46;
  sub_20BA1ADD0(a2, (uint64_t)a1);
  v58 = (char *)a1[1];
  v57 = a1[2];
  if ((unint64_t)v58 >= v57)
  {
    v59 = (char *)*a1;
    v60 = (uint64_t)&v58[-*a1];
    if (v60 > -3)
    {
      v61 = v60 >> 1;
      v62 = v57 - (_QWORD)v59;
      if (v62 <= (v60 >> 1) + 1)
        v63 = v61 + 1;
      else
        v63 = v62;
      if (v62 >= 0x7FFFFFFFFFFFFFFELL)
        v64 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
      {
        v65 = (char *)sub_20B80FD48((uint64_t)(a1 + 2), v64);
        v59 = (char *)*a1;
        v58 = (char *)a1[1];
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[2 * v61];
      v67 = &v65[2 * v64];
      *(_WORD *)v66 = 0;
      v68 = v66 + 2;
      while (v58 != v59)
      {
        v69 = *((_WORD *)v58 - 1);
        v58 -= 2;
        *((_WORD *)v66 - 1) = v69;
        v66 -= 2;
      }
      goto LABEL_219;
    }
LABEL_223:
    sub_20B80CDD8();
  }
LABEL_201:
  *(_WORD *)v58 = 0;
  v68 = v58 + 2;
LABEL_221:
  a1[1] = v68;
}

void sub_20BA1AC04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _WORD *v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int16 v17;
  unint64_t v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;

  v3 = *a1;
  if (a1[1] == *a1)
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_WORD **)(a2 + 8);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(_WORD **)a2;
      v22 = (uint64_t)v19 - *(_QWORD *)a2;
      if (v22 <= -3)
LABEL_40:
        sub_20B80CDD8();
      v23 = v22 >> 1;
      v24 = v18 - (_QWORD)v21;
      if (v24 <= (v22 >> 1) + 1)
        v25 = v23 + 1;
      else
        v25 = v24;
      if (v24 >= 0x7FFFFFFFFFFFFFFELL)
        v26 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        v27 = (char *)sub_20B80FD48(a2 + 16, v26);
        v21 = *(_WORD **)a2;
        v19 = *(_WORD **)(a2 + 8);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[2 * v23];
      v29 = &v27[2 * v26];
      *(_WORD *)v28 = 42;
      v20 = v28 + 2;
      while (v19 != v21)
      {
        v30 = *--v19;
        *((_WORD *)v28 - 1) = v30;
        v28 -= 2;
      }
      *(_QWORD *)a2 = v28;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = v29;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v19 = 42;
      v20 = v19 + 1;
    }
    *(_QWORD *)(a2 + 8) = v20;
  }
  else
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 16);
    v7 = *(_WORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v9 = *(_WORD **)a2;
        v10 = (uint64_t)v7 - *(_QWORD *)a2;
        if (v10 <= -3)
          goto LABEL_40;
        v11 = v10 >> 1;
        v12 = *v6 - (_QWORD)v9;
        if (v12 <= (v10 >> 1) + 1)
          v13 = v11 + 1;
        else
          v13 = *v6 - (_QWORD)v9;
        if (v12 >= 0x7FFFFFFFFFFFFFFELL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_20B80FD48(a2 + 16, v14);
          v9 = *(_WORD **)a2;
          v7 = *(_WORD **)(a2 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[2 * v11];
        *(_WORD *)v16 = *(_WORD *)(v3 + 2 * v5);
        v8 = v16 + 2;
        while (v7 != v9)
        {
          v17 = *--v7;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = &v15[2 * v14];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v7 = *(_WORD *)(v3 + 2 * v5);
        v8 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v8;
      ++v5;
      v3 = *a1;
      v7 = v8;
    }
    while (v5 < (a1[1] - *a1) >> 1);
  }
}

void sub_20BA1ADD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  _WORD *v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int16 v17;

  v2 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 16);
    v7 = *(_WORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v9 = *(_WORD **)a2;
        v10 = (uint64_t)v7 - *(_QWORD *)a2;
        if (v10 <= -3)
          sub_20B80CDD8();
        v11 = v10 >> 1;
        v12 = *v6 - (_QWORD)v9;
        if (v12 <= (v10 >> 1) + 1)
          v13 = v11 + 1;
        else
          v13 = *v6 - (_QWORD)v9;
        if (v12 >= 0x7FFFFFFFFFFFFFFELL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_20B80FD48((uint64_t)v6, v14);
          v9 = *(_WORD **)a2;
          v7 = *(_WORD **)(a2 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[2 * v11];
        *(_WORD *)v16 = *(_WORD *)(v2 + 2 * v5);
        v8 = v16 + 2;
        while (v7 != v9)
        {
          v17 = *--v7;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = &v15[2 * v14];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v7 = *(_WORD *)(v2 + 2 * v5);
        v8 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v8;
      ++v5;
      v2 = *a1;
      v7 = v8;
    }
    while (v5 < (a1[1] - *a1) >> 1);
  }
}

uint64_t sub_20BA1AEE8(uint64_t *a1, _QWORD *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  unint64_t i;
  int v25;
  _BOOL8 v26;
  char v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char v40;

  v5 = *a1;
  v6 = a1[1];
  if ((a3 & 1) != 0)
  {
    if (v6 == *a1)
      return 1;
    v7 = 0;
LABEL_4:
    v8 = 0;
    v9 = *(unsigned __int16 *)(v5 + 2 * v7);
    while ((unsigned __int16)word_20BA4B1C4[v8] != v9)
    {
      if (++v8 == 5)
      {
        if ((v9 - 12549) > 0x24)
          return 0;
LABEL_11:
        v10 = 49;
        switch(v9)
        {
          case 711:
            v10 = 51;
            break;
          case 712:
            goto LABEL_15;
          case 713:
            break;
          case 714:
            v10 = 50;
            break;
          case 715:
            v10 = 52;
            break;
          default:
            if (v9 == 729)
              v10 = 53;
            else
LABEL_15:
              v10 = v9 + 49;
            break;
        }
        v12 = (char *)a2[1];
        v11 = a2[2];
        if ((unint64_t)v12 < v11)
        {
          *v12 = v10;
          v13 = v12 + 1;
          goto LABEL_35;
        }
        v14 = (char *)*a2;
        v15 = &v12[-*a2];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          goto LABEL_62;
        v17 = v11 - (_QWORD)v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v15[(_QWORD)v19];
        v21 = &v15[(_QWORD)v19];
        *v21 = v10;
        v13 = v21 + 1;
        if (v12 != v14)
        {
          v22 = &v12[~(unint64_t)v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != v14);
          v12 = (char *)*a2;
          v20 = v19;
        }
        *a2 = v20;
        a2[1] = v13;
        a2[2] = &v19[v18];
        if (v12)
          operator delete(v12);
LABEL_35:
        a2[1] = v13;
        ++v7;
        v5 = *a1;
        if (v7 >= (a1[1] - *a1) >> 1)
          return 1;
        goto LABEL_4;
      }
    }
    if (v8 != -1 || (unsigned __int16)(v9 - 12549) < 0x25u)
      goto LABEL_11;
    return 0;
  }
  else
  {
    if (v6 == *a1)
      return 1;
    for (i = 0; i < (a1[1] - *a1) >> 1; ++i)
    {
      v25 = *(unsigned __int16 *)(v5 + 2 * i);
      v26 = (v25 - 97) < 0x1A;
      if ((v25 - 97) > 0x19)
        break;
      v27 = v25;
      v29 = (char *)a2[1];
      v28 = a2[2];
      if ((unint64_t)v29 >= v28)
      {
        v31 = (char *)*a2;
        v32 = &v29[-*a2];
        v33 = (unint64_t)(v32 + 1);
        if ((uint64_t)(v32 + 1) < 0)
LABEL_62:
          sub_20B80CDD8();
        v34 = v28 - (_QWORD)v31;
        if (2 * v34 > v33)
          v33 = 2 * v34;
        if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
          v36 = (char *)operator new(v35);
        else
          v36 = 0;
        v37 = &v32[(_QWORD)v36];
        v38 = &v32[(_QWORD)v36];
        *v38 = v27;
        v30 = v38 + 1;
        if (v29 != v31)
        {
          v39 = &v29[~(unint64_t)v31];
          do
          {
            v40 = *--v29;
            (v39--)[(_QWORD)v36] = v40;
          }
          while (v29 != v31);
          v29 = (char *)*a2;
          v37 = v36;
        }
        *a2 = v37;
        a2[1] = v30;
        a2[2] = &v36[v35];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v29 = v27;
        v30 = v29 + 1;
      }
      a2[1] = v30;
      v5 = *a1;
    }
  }
  return v26;
}

uint64_t sub_20BA1B1B0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24C4691D0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 120) = sub_20B9F1A84(a2);
  return a1;
}

void sub_20BA1B238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = *(void **)(v10 + 176);
  if (v13)
  {
    *(_QWORD *)(v10 + 184) = v13;
    operator delete(v13);
  }
  sub_20B9A4B8C(&a10);
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 136) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 96);
  if (v15)
  {
    *(_QWORD *)(v10 + 104) = v15;
    operator delete(v15);
  }
  a10 = (void **)(v10 + 72);
  sub_20B9A4B8C(&a10);
  sub_20B811FE4(v10 + 40);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA1B29C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = &off_24C4691D0;
  sub_20BA1B32C((_QWORD *)a1);
  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 152);
  sub_20B9A4B8C(&v6);
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v6 = (void **)(a1 + 72);
  sub_20B9A4B8C(&v6);
  sub_20B811FE4(a1 + 40);
  return a1;
}

void sub_20BA1B32C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t j;
  void **v8;
  void **v9;

  a1[2] = 0;
  v2 = a1[9];
  for (i = a1[10]; i != v2; i -= 8)
  {
    v5 = *(void ***)(i - 8);
    v4 = v5;
    if (v5)
      sub_20B969128(v4);
  }
  a1[10] = v2;
  a1[13] = a1[12];
  v6 = a1[19];
  for (j = a1[20]; j != v6; j -= 8)
  {
    v9 = *(void ***)(j - 8);
    v8 = v9;
    if (v9)
      sub_20B969128(v8);
  }
  a1[20] = v6;
  a1[23] = a1[22];
  a1[17] = a1[16];
}

void sub_20BA1B3B0(uint64_t a1)
{
  sub_20BA1B29C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA1B3D4(uint64_t a1, char *__s, uint64_t a3)
{
  char v3;
  unsigned int ***v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int **v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  char *v64;
  unint64_t v65;
  char **v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  char *v104;
  char *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v157;
  unsigned int ***v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char **v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  void **v166;
  char **v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  char *v173;
  uint64_t v174;

  v3 = (char)__s;
  sub_20B90CFC0(__s, a3, 1, &v171);
  v5 = (unsigned int ***)(a1 + 40);
  sub_20B82E770(a1 + 40, (__int128 *)&v171);
  v6 = (std::__shared_weak_count *)v172;
  if ((_QWORD)v172)
  {
    v7 = (unint64_t *)(v172 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *v5;
  if (!*v5)
  {
    v20 = sub_20B9547EC();
    sub_20B954DEC((uint64_t)v20, "Dictionary file %s is empty", v21, v22, v23, v24, v25, v26, v3);
    return 0;
  }
  v11 = *v9;
  v10 = (unint64_t)v9[1];
  if (v10 < 4)
  {
    if (!v11)
    {
      v149 = sub_20B9547EC();
      sub_20B954DEC((uint64_t)v149, "Dictionary file %s has an empty header", v150, v151, v152, v153, v154, v155, v3);
      return 0;
    }
    LODWORD(v12) = *v11;
  }
  else
  {
    v12 = *v11;
    if (v10 == (v12 ^ 0xEF718F77))
    {
      v13 = sub_20B9547EC();
      sub_20B954DEC((uint64_t)v13, "Dictionary file %s doesn't support the original format", v14, v15, v16, v17, v18, v19, v3);
      return 0;
    }
  }
  if ((_DWORD)v12 == 105)
  {
    *(_DWORD *)(a1 + 32) = v11[1];
    *(_DWORD *)(a1 + 24) = v11[2];
    v158 = (unsigned int ***)(a1 + 40);
    v159 = v11[3];
    v160 = v11[4];
    v27 = v11[5];
    *(_DWORD *)(a1 + 28) = v27;
    *(_DWORD *)(a1 + 8) = v11[6];
    v28 = (char *)(v11 + 12);
    if (v27)
    {
      v157 = v3;
      v29 = 0;
      v165 = (_QWORD *)(a1 + 72);
      v166 = (void **)(a1 + 128);
      v162 = (char **)(a1 + 96);
      v167 = (char **)(a1 + 176);
      v161 = a1 + 192;
      v163 = a1 + 168;
      v164 = (_QWORD *)(a1 + 152);
      do
      {
        v30 = *(_DWORD *)v28;
        v32 = *(char **)(a1 + 136);
        v31 = *(_QWORD *)(a1 + 144);
        if ((unint64_t)v32 >= v31)
        {
          v34 = (char *)*v166;
          v35 = (v32 - (_BYTE *)*v166) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            sub_20B80CDD8();
          v37 = v31 - (_QWORD)v34;
          if (v37 >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_20B8127BC(a1 + 144, v38);
            v34 = *(char **)(a1 + 128);
            v32 = *(char **)(a1 + 136);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = v30;
          v33 = v40 + 4;
          while (v32 != v34)
          {
            v41 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          *(_QWORD *)(a1 + 128) = v40;
          *(_QWORD *)(a1 + 136) = v33;
          *(_QWORD *)(a1 + 144) = &v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v32 = v30;
          v33 = v32 + 4;
        }
        *(_QWORD *)(a1 + 136) = v33;
        v43 = *((unsigned int *)v28 + 1);
        v42 = *((unsigned int *)v28 + 2);
        v44 = *((_DWORD *)v28 + 4);
        v170 = *((unsigned int *)v28 + 3);
        v45 = *((unsigned int *)v28 + 5);
        v169 = *((unsigned int *)v28 + 6);
        v46 = v28 + 32;
        v47 = *((unsigned int *)v28 + 7);
        sub_20B969098(0, 0, (uint64_t)(v28 + 32), v43);
        v49 = v48;
        v51 = *(_QWORD **)(a1 + 80);
        v50 = *(_QWORD *)(a1 + 88);
        if ((unint64_t)v51 >= v50)
        {
          v168 = v44;
          v54 = (_QWORD *)*v165;
          v55 = ((uint64_t)v51 - *v165) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            sub_20B80CDD8();
          v57 = v50 - (_QWORD)v54;
          if (v57 >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          v174 = a1 + 88;
          if (v58)
          {
            v59 = (char *)sub_20B800BE8(a1 + 88, v58);
            v54 = *(_QWORD **)(a1 + 72);
            v51 = *(_QWORD **)(a1 + 80);
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[8 * v55];
          v61 = &v59[8 * v58];
          v173 = v61;
          *(_QWORD *)v60 = v49;
          *((_QWORD *)&v172 + 1) = v60 + 8;
          if (v51 == v54)
          {
            v52 = v60 + 8;
            v53 = v170;
          }
          else
          {
            v53 = v170;
            do
            {
              v62 = *--v51;
              *((_QWORD *)v60 - 1) = v62;
              v60 -= 8;
              *v51 = 0;
            }
            while (v51 != v54);
            v52 = (_QWORD *)*((_QWORD *)&v172 + 1);
            v61 = v173;
          }
          v63 = *(_OWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v60;
          *(_QWORD *)(a1 + 80) = v52;
          v172 = v63;
          v64 = *(char **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v61;
          v173 = v64;
          v171 = v63;
          sub_20B9A5800((uint64_t)&v171);
          v44 = v168;
        }
        else
        {
          *v51 = v48;
          v52 = v51 + 1;
          v53 = v170;
        }
        *(_QWORD *)(a1 + 80) = v52;
        v28 = (char *)v46 + v43 + v53;
        if (*(_DWORD *)(a1 + 28) != 1)
        {
          v66 = *(char ***)(a1 + 104);
          v65 = *(_QWORD *)(a1 + 112);
          if ((unint64_t)v66 >= v65)
          {
            v68 = ((char *)v66 - *v162) >> 3;
            if ((unint64_t)(v68 + 1) >> 61)
              sub_20B8AD01C();
            v69 = v65 - (_QWORD)*v162;
            v70 = v69 >> 2;
            if (v69 >> 2 <= (unint64_t)(v68 + 1))
              v70 = v68 + 1;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v70;
            if (v71)
              v72 = (char *)sub_20B800BE8(a1 + 112, v71);
            else
              v72 = 0;
            v73 = &v72[8 * v68];
            *(_QWORD *)v73 = v28;
            v67 = v73 + 8;
            v75 = *(char **)(a1 + 96);
            v74 = *(char **)(a1 + 104);
            if (v74 != v75)
            {
              do
              {
                v76 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v73 - 1) = v76;
                v73 -= 8;
              }
              while (v74 != v75);
              v74 = *v162;
            }
            *(_QWORD *)(a1 + 96) = v73;
            *(_QWORD *)(a1 + 104) = v67;
            *(_QWORD *)(a1 + 112) = &v72[8 * v71];
            if (v74)
              operator delete(v74);
          }
          else
          {
            *v66 = v28;
            v67 = v66 + 1;
          }
          *(_QWORD *)(a1 + 104) = v67;
          v28 += v42;
        }
        if (v44)
        {
          sub_20B969098(0, 0, (uint64_t)v28, v45);
          v78 = v77;
          v80 = *(_QWORD **)(a1 + 160);
          v79 = *(_QWORD *)(a1 + 168);
          if ((unint64_t)v80 >= v79)
          {
            v88 = (_QWORD *)*v164;
            v89 = ((uint64_t)v80 - *v164) >> 3;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61)
              sub_20B80CDD8();
            v91 = v79 - (_QWORD)v88;
            if (v91 >> 2 > v90)
              v90 = v91 >> 2;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v92 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            v174 = a1 + 168;
            if (v92)
            {
              v93 = (char *)sub_20B800BE8(v163, v92);
              v88 = *(_QWORD **)(a1 + 152);
              v80 = *(_QWORD **)(a1 + 160);
            }
            else
            {
              v93 = 0;
            }
            v100 = &v93[8 * v89];
            v101 = &v93[8 * v92];
            v173 = v101;
            *(_QWORD *)v100 = v78;
            *((_QWORD *)&v172 + 1) = v100 + 8;
            if (v80 == v88)
            {
              v81 = v100 + 8;
            }
            else
            {
              do
              {
                v102 = *--v80;
                *((_QWORD *)v100 - 1) = v102;
                v100 -= 8;
                *v80 = 0;
              }
              while (v80 != v88);
              v81 = (_QWORD *)*((_QWORD *)&v172 + 1);
              v101 = v173;
            }
            v82 = v47;
            v103 = *(_OWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 152) = v100;
            *(_QWORD *)(a1 + 160) = v81;
            v172 = v103;
            v104 = *(char **)(a1 + 168);
            *(_QWORD *)(a1 + 168) = v101;
            v173 = v104;
            v171 = v103;
            sub_20B9A5800((uint64_t)&v171);
          }
          else
          {
            *v80 = v77;
            v81 = v80 + 1;
            v82 = v47;
          }
          *(_QWORD *)(a1 + 160) = v81;
          v105 = &v28[v45 + v82];
          v107 = *(_QWORD **)(a1 + 184);
          v106 = *(_QWORD *)(a1 + 192);
          if ((unint64_t)v107 >= v106)
          {
            v109 = ((char *)v107 - *v167) >> 3;
            if ((unint64_t)(v109 + 1) >> 61)
              goto LABEL_145;
            v110 = v106 - (_QWORD)*v167;
            v111 = v110 >> 2;
            if (v110 >> 2 <= (unint64_t)(v109 + 1))
              v111 = v109 + 1;
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
              v112 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v112 = v111;
            if (v112)
              v113 = (char *)sub_20B800BE8(v161, v112);
            else
              v113 = 0;
            v114 = &v113[8 * v109];
            *(_QWORD *)v114 = v105;
            v108 = v114 + 8;
            v116 = *(char **)(a1 + 176);
            v115 = *(char **)(a1 + 184);
            if (v115 != v116)
            {
              do
              {
                v117 = *((_QWORD *)v115 - 1);
                v115 -= 8;
                *((_QWORD *)v114 - 1) = v117;
                v114 -= 8;
              }
              while (v115 != v116);
              v115 = *v167;
            }
            *(_QWORD *)(a1 + 176) = v114;
            *(_QWORD *)(a1 + 184) = v108;
            *(_QWORD *)(a1 + 192) = &v113[8 * v112];
            if (v115)
              operator delete(v115);
          }
          else
          {
            *v107 = v105;
            v108 = v107 + 1;
          }
          *(_QWORD *)(a1 + 184) = v108;
          v28 = &v105[v169];
        }
        else
        {
          v83 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
          v84 = v83;
          if (v83)
          {
            v83[8] = 0;
            *((_OWORD *)v83 + 2) = 0u;
            *((_OWORD *)v83 + 3) = 0u;
            *(_OWORD *)v83 = 0u;
            *((_OWORD *)v83 + 1) = 0u;
          }
          v86 = *(_QWORD **)(a1 + 160);
          v85 = *(_QWORD *)(a1 + 168);
          if ((unint64_t)v86 >= v85)
          {
            v94 = (_QWORD *)*v164;
            v95 = ((uint64_t)v86 - *v164) >> 3;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61)
              sub_20B80CDD8();
            v97 = v85 - (_QWORD)v94;
            if (v97 >> 2 > v96)
              v96 = v97 >> 2;
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
              v98 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v98 = v96;
            v174 = a1 + 168;
            if (v98)
            {
              v99 = (char *)sub_20B800BE8(v163, v98);
              v94 = *(_QWORD **)(a1 + 152);
              v86 = *(_QWORD **)(a1 + 160);
            }
            else
            {
              v99 = 0;
            }
            v118 = &v99[8 * v95];
            v119 = &v99[8 * v98];
            v173 = v119;
            *(_QWORD *)v118 = v84;
            *((_QWORD *)&v172 + 1) = v118 + 8;
            if (v86 == v94)
            {
              v87 = v118 + 8;
            }
            else
            {
              do
              {
                v120 = *--v86;
                *((_QWORD *)v118 - 1) = v120;
                v118 -= 8;
                *v86 = 0;
              }
              while (v86 != v94);
              v87 = (_QWORD *)*((_QWORD *)&v172 + 1);
              v119 = v173;
            }
            v121 = *(_OWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 152) = v118;
            *(_QWORD *)(a1 + 160) = v87;
            v172 = v121;
            v122 = *(char **)(a1 + 168);
            *(_QWORD *)(a1 + 168) = v119;
            v173 = v122;
            v171 = v121;
            sub_20B9A5800((uint64_t)&v171);
          }
          else
          {
            *v86 = v83;
            v87 = v86 + 1;
          }
          *(_QWORD *)(a1 + 160) = v87;
          v124 = *(_QWORD **)(a1 + 184);
          v123 = *(_QWORD *)(a1 + 192);
          if ((unint64_t)v124 >= v123)
          {
            v126 = ((char *)v124 - *v167) >> 3;
            if ((unint64_t)(v126 + 1) >> 61)
LABEL_145:
              sub_20B8AD01C();
            v127 = v123 - (_QWORD)*v167;
            v128 = v127 >> 2;
            if (v127 >> 2 <= (unint64_t)(v126 + 1))
              v128 = v126 + 1;
            if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
              v129 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v129 = v128;
            if (v129)
              v130 = (char *)sub_20B800BE8(v161, v129);
            else
              v130 = 0;
            v131 = &v130[8 * v126];
            *(_QWORD *)v131 = 0;
            v125 = v131 + 8;
            v133 = *(char **)(a1 + 176);
            v132 = *(char **)(a1 + 184);
            if (v132 != v133)
            {
              do
              {
                v134 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v131 - 1) = v134;
                v131 -= 8;
              }
              while (v132 != v133);
              v132 = *v167;
            }
            *(_QWORD *)(a1 + 176) = v131;
            *(_QWORD *)(a1 + 184) = v125;
            *(_QWORD *)(a1 + 192) = &v130[8 * v129];
            if (v132)
              operator delete(v132);
          }
          else
          {
            *v124 = 0;
            v125 = v124 + 1;
          }
          *(_QWORD *)(a1 + 184) = v125;
        }
        ++v29;
      }
      while (v29 < *(_DWORD *)(a1 + 28));
      v3 = v157;
      v11 = **v158;
      v10 = (unint64_t)(*v158)[1];
    }
    *(_DWORD *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = v28;
    *(_QWORD *)(a1 + 64) = &v28[v159];
    if (&v28[v159 + v160] == (char *)v11 + v10)
      return 1;
    v135 = sub_20B9547EC();
    sub_20B954DEC((uint64_t)v135, "Dictionary file %s has the wrong content", v136, v137, v138, v139, v140, v141, v3);
  }
  else
  {
    v142 = sub_20B9547EC();
    sub_20B954DEC((uint64_t)v142, "Dictionary file %s is incompatible (version %d, expected version %d)", v143, v144, v145, v146, v147, v148, v3);
  }
  return 0;
}

void sub_20BA1BC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;

  if (v10)
    sub_20B969128(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA1BCC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_20BA1BCCC(uint64_t result, int a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 28) <= a2)
  {
    v2 = 0;
    a2 = -1;
  }
  else
  {
    v2 = *(_QWORD *)(result + 72) + 8 * a2;
  }
  *(_DWORD *)(result + 36) = a2;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t sub_20BA1BCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2);
    v14 = 0;
    v7 = result;
    if ((_BYTE)result)
    {
      v8 = 0;
      v9 = 12 * (result >> 12);
      v10 = 4 * (result >> 12);
      do
      {
        if (*(_DWORD *)(a1 + 28) == 1)
          v11 = *(_QWORD *)(a1 + 56) + v9;
        else
          v11 = *(_QWORD *)(a1 + 56)
              + 12 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * *(int *)(a1 + 36)) + v10 + 4 * v8);
        v12 = *(_QWORD *)(a1 + 64) + *(unsigned int *)(v11 + 8);
        v13[0] = v11;
        v13[1] = v12;
        result = (*(uint64_t (**)(uint64_t, _QWORD *, char *))(a3 + 16))(a3, v13, &v14);
        if (v14)
          break;
        ++v8;
        v9 += 12;
      }
      while (v8 < v7);
    }
  }
  return result;
}

uint64_t sub_20BA1BDF4(uint64_t result, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v4 = a2;
  if ((_BYTE)a2 && !*a4)
  {
    v6 = result;
    v7 = 0;
    v8 = *(_QWORD *)(result + 40);
    v9 = 12 * (a2 >> 12);
    v10 = 4 * (a2 >> 12);
    do
    {
      if (*(_DWORD *)(v8 + 28) == 1)
        v11 = *(_QWORD *)(v8 + 56) + v9;
      else
        v11 = *(_QWORD *)(v8 + 56)
            + 12 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 8 * *(int *)(v8 + 36)) + v10 + 4 * v7);
      v12 = *(_QWORD *)(v8 + 64) + *(unsigned int *)(v11 + 8);
      v13[0] = v11;
      v13[1] = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)(v6 + 32) + 16))(*(_QWORD *)(v6 + 32), v13);
      if (*a4)
        break;
      ++v7;
      v9 += 12;
    }
    while (v7 < v4);
  }
  return result;
}

void **sub_20BA1BEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **result;
  _QWORD v15[5];
  void **v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, unsigned int, uint64_t, _BYTE *);
  void *v21;
  _QWORD *v22;
  uint64_t v23;

  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 56))(&v16);
  sub_20B99BBA0((uint64_t)&v16, a1, a3, (uint64_t)&v18);
  sub_20B902340(&v16, &v18);
  v9 = (void **)v19;
  v19 = 0;
  if (v9)
  {
    v10 = sub_20B8F8AB8(v9);
    MEMORY[0x20BD39CB0](v10, 0x20C4093837F09);
  }
  v11 = v18;
  v18 = 0;
  if (v11)
    MEMORY[0x20BD39CB0](v11, 0x1010C40E4C6A875);
  if (((*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)a1 + 88))(a1, &v16) & 1) != 0)
  {
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 0x40000000;
    v15[2] = sub_20BA1C080;
    v15[3] = &unk_24C46CBC8;
    v15[4] = a5;
    v18 = (void **)MEMORY[0x24BDAC760];
    v19 = 0x40000000;
    v20 = sub_20BA1BDF4;
    v21 = &unk_24C46C8B8;
    v22 = v15;
    v23 = a1;
    (*(void (**)(uint64_t, void ***, uint64_t, void ***))(*(_QWORD *)a1 + 80))(a1, &v16, a4, &v18);
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    v13 = sub_20B8F8AB8(v12);
    MEMORY[0x20BD39CB0](v13, 0x20C4093837F09);
  }
  result = v16;
  v16 = 0;
  if (result)
    return (void **)MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20BA1C068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B8FD7F0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA1C080(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_20BA1C08C(_QWORD **a1, _DWORD **a2, char a3, BOOL *a4, BOOL *a5)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  if (!((unsigned int (*)(_QWORD **))(*a1)[11])(a1))
    return 0;
  v10 = sub_20BA20514(a1[2], a2);
  *a5 = v10 != 0;
  *a4 = (v10 & 0x800) != 0;
  v11 = 1;
  if ((a3 & 0xE) != 0 && *a5)
  {
    if ((a3 & 1) != 0)
      v12 = 256;
    else
      v12 = 512;
    LODWORD(v11) = (v10 & v12) != 0;
    if ((a3 & 1) != 0)
      v13 = (v10 >> 10) & 1;
    else
      v13 = 1;
    if ((a3 & 8) != 0)
      return v13;
    else
      return v11;
  }
  return v11;
}

uint64_t sub_20BA1C148(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) & 0xFFFFFF00;
}

uint64_t sub_20BA1C168(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a1[15];
  if (v3)
    return sub_20B9F1C60(v3, (_WORD *)(a1[8] + *(unsigned int *)(a1[7] + 12 * a2 + 8)));
  else
    return *sub_20B947CC4();
}

_DWORD *sub_20BA1C1B0(_DWORD *result, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void **v16;
  _DWORD *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  void **v21;
  void **v22;
  _QWORD v23[6];
  _DWORD *v24;
  void **v25;
  uint64_t v26;
  void **v27;
  _DWORD *v28;
  void **v29;

  if (a2)
  {
    if (a3)
    {
      v6 = result;
      v7 = (int)result[9];
      if ((_DWORD)v7 != -1)
      {
        if (*(_QWORD *)(*((_QWORD *)result + 22) + 8 * v7))
        {
          v11 = (uint64_t *)(*((_QWORD *)result + 19) + 8 * v7);
          sub_20B908378(&v26, (_DWORD *)*v11);
          sub_20B8F8CD8((uint64_t)&v28, (uint64_t)&v26);
          v12 = v27;
          v27 = 0;
          if (v12)
          {
            v13 = sub_20B8F8AB8(v12);
            MEMORY[0x20BD39CB0](v13, 0x20C4093837F09);
          }
          v14 = v26;
          v26 = 0;
          if (v14)
            MEMORY[0x20BD39CB0](v14, 0x1010C40E4C6A875);
          sub_20BA203BC(v11, &v28, a2, a3, &v26);
          if (((*(uint64_t (**)(_DWORD *, uint64_t *))(*(_QWORD *)v6 + 88))(v6, &v26) & 1) != 0)
          {
            sub_20B8F8CD8((uint64_t)&v24, (uint64_t)&v26);
            v23[0] = MEMORY[0x24BDAC760];
            v23[1] = 0x40000000;
            v23[2] = sub_20BA1C410;
            v23[3] = &unk_24C46CCC0;
            v23[4] = a5;
            v23[5] = v6;
            sub_20B90843C(&v24, *v11, a4, (uint64_t)(v6 + 50), (uint64_t)v23);
            v15 = v25;
            v25 = 0;
            if (v15)
            {
              v16 = sub_20B8F8AB8(v15);
              MEMORY[0x20BD39CB0](v16, 0x20C4093837F09);
            }
            v17 = v24;
            v24 = 0;
            if (v17)
              MEMORY[0x20BD39CB0](v17, 0x1010C40E4C6A875);
          }
          v18 = v27;
          v27 = 0;
          if (v18)
          {
            v19 = sub_20B8F8AB8(v18);
            MEMORY[0x20BD39CB0](v19, 0x20C4093837F09);
          }
          v20 = v26;
          v26 = 0;
          if (v20)
            MEMORY[0x20BD39CB0](v20, 0x1010C40E4C6A875);
          v21 = v29;
          v29 = 0;
          if (v21)
          {
            v22 = sub_20B8F8AB8(v21);
            MEMORY[0x20BD39CB0](v22, 0x20C4093837F09);
          }
          result = v28;
          v28 = 0;
          if (result)
            return (_DWORD *)MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
        }
      }
    }
  }
  return result;
}

void sub_20BA1C3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void **v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, void **);
  v11 = va_arg(va1, _QWORD);
  sub_20B8FD7F0((void ***)va);
  sub_20B8F8A30((void ***)va1);
  sub_20B8F8A30((void ***)(v7 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20BA1C410(uint64_t result, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (a3)
  {
    v4 = a2;
    if ((_BYTE)a2)
    {
      if (!*a4)
      {
        v6 = result;
        v7 = 0;
        v8 = *(_QWORD *)(result + 40);
        v9 = 4 * (a2 >> 12);
        do
        {
          v10 = *(_QWORD *)(v8 + 64);
          v11[0] = *(_QWORD *)(v8 + 56)
                 + 12 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v8 + 176) + 8 * *(int *)(v8 + 36)) + v9 + 4 * v7);
          v11[1] = v10 + *(unsigned int *)(v11[0] + 8);
          result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)(v6 + 32) + 16))(*(_QWORD *)(v6 + 32), v11);
          if (*a4)
            break;
          ++v7;
        }
        while (v7 < v4);
      }
    }
  }
  return result;
}

uint64_t sub_20BA1C4E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_20BA1C4EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_20BA1C4F4()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D3F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D3F8))
  {
    v2 = operator new();
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    qword_25472D3F0 = v2;
    __cxa_guard_release(&qword_25472D3F8);
  }
  return qword_25472D3F0;
}

void sub_20BA1C568(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D3F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA1C580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void **v4;
  CFURLRef v5;

  if ((_DWORD)a2 == 5)
  {
    v4 = (const void **)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
      v5 = sub_20BA1C5E0((_BYTE *)a1, 5);
      sub_20B876164(v4, v5);
      v3 = *(_QWORD *)(a1 + 8);
    }
    if (v3)
      return 5;
    else
      return 2;
  }
  return a2;
}

CFURLRef sub_20BA1C5E0(_BYTE *a1, signed int a2)
{
  _QWORD *v4;
  CFURLRef result;
  _QWORD *v6;

  v4 = (_QWORD *)sub_20B9AE60C();
  result = sub_20B9AE954(v4, a2, 0);
  if (result)
  {
    *a1 = 1;
  }
  else
  {
    v6 = (_QWORD *)sub_20B9AE60C();
    return sub_20B9AE954(v6, a2, 1);
  }
  return result;
}

const __CFURL *sub_20BA1C634(uint64_t a1, CFURLRef relativeURL)
{
  const __CFURL *result;
  const __CFURL *v4;
  const void *v5;
  const void **v6;
  const void *v7;
  _QWORD *v8;
  CFTypeRef v9;

  result = 0;
  if (relativeURL)
  {
    if (!*(_BYTE *)a1)
    {
      result = CFURLCopyAbsoluteURL(relativeURL);
      if (result)
      {
        v4 = result;
        v7 = *(const void **)(a1 + 8);
        v6 = (const void **)(a1 + 8);
        v5 = v7;
        if (!v7 || !CFEqual(result, v5))
        {
          v8 = (_QWORD *)sub_20B9AE60C();
          sub_20B9AE9E0(v8, 5, v4);
          v9 = CFRetain(v4);
          sub_20B876164(v6, v9);
        }
        CFRelease(v4);
        return (const __CFURL *)1;
      }
    }
  }
  return result;
}

void sub_20BA1C6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BA1C6DC(CFStringTokenizerRef *a1, CFStringRef theString, uint64_t a3)
{
  CFIndex Length;
  unint64_t v6;
  unint64_t v7;
  CFRange CurrentTokenRange;
  __CFString *v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const __CFString *v18;
  const char *v19;
  const __CFAllocator *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;
  CFRange v28;

  v27 = *MEMORY[0x24BDAC8D0];
  Length = CFStringGetLength(theString);
  if ((unint64_t)(Length - 201) >= 0xFFFFFFFFFFFFFF3BLL)
  {
    v28.length = Length;
    v28.location = 0;
    CFStringTokenizerSetString(*a1, theString, v28);
    v6 = 0;
    v7 = 0;
    v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      if (!CFStringTokenizerAdvanceToNextToken(*a1))
        break;
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(*a1);
      v9 = (__CFString *)CFStringCreateWithSubstring(v20, theString, CurrentTokenRange);
      v10 = sub_20B8D2A0C();
      v12 = (void *)objc_msgSend_componentsSeparatedByCharactersInSet_(v9, v11, v10);
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v22, v26, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v23;
        do
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v23 != v16)
              objc_enumerationMutation(v12);
            v18 = *(const __CFString **)(*((_QWORD *)&v22 + 1) + 8 * i);
            if (sub_20BA119E0((uint64_t)a1, v18))
              (*(void (**)(uint64_t, const __CFString *))(a3 + 16))(a3, v18);
          }
          v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v19, (uint64_t)&v22, v26, 16);
        }
        while (v15);
      }
      CFRelease(v9);
      if (v6 > 0x13)
        break;
      v7 += CurrentTokenRange.length;
      ++v6;
    }
    while (v7 < 0x33);
  }
}

uint64_t sub_20BA1C894(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_24C469108;
  sub_20BA1C8FC(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  sub_20B9977B0((void ****)(a1 + 96), 0);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20BA1C8FC(uint64_t a1)
{
  std::mutex *v2;
  void ***v3;

  v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v3 = *(void ****)(a1 + 16);
  if (v3)
  {
    if (*v3)
      sub_20B969128(*v3);
    MEMORY[0x20BD39CB0](v3, 0x80C40B8603338);
    *(_QWORD *)(a1 + 16) = 0;
  }
  sub_20B9977B0((void ****)(a1 + 96), 0);
  std::mutex::unlock(v2);
}

uint64_t sub_20BA1C984(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  char v15;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2);
    v7 = *(unsigned __int16 *)(a1[4] + 2 * result);
    v15 = 0;
    if (v7)
    {
      v8 = (result + 1);
      v9 = 1;
      do
      {
        v10 = a1[4];
        v11 = *(unsigned __int16 *)(v10 + 2 * v8);
        v12 = v8 + 1;
        v14[0] = a1 + 10;
        v14[1] = v10 + 2 * (v8 + 1);
        result = (*(uint64_t (**)(uint64_t, _QWORD *, char *))(a3 + 16))(a3, v14, &v15);
        v8 = v12 + v11;
        if (v15)
          v13 = 1;
        else
          v13 = v9 >= v7;
        ++v9;
      }
      while (!v13);
    }
  }
  return result;
}

uint64_t sub_20BA1CA48(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) << 8;
}

void sub_20BA1CA68(uint64_t a1, CFArrayRef theArray)
{
  int v4;
  CFIndex v5;
  const __CFString *ValueAtIndex;
  CFIndex v7;
  const __CFString *v8;
  const __CFNumber *v9;
  const __CFArray *v10;
  CFIndex Length;
  CFIndex v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  BOOL v17;
  __int16 v18;
  CFIndex i;
  const __CFNumber *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void **v29;
  void *v30;
  void **v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  const std::nothrow_t *v51;
  unint64_t v52;
  void *v53;
  BOOL v54;
  void *v55;
  _WORD *v56;
  void **v57;
  unint64_t v58;
  uint64_t v59;
  _WORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _WORD *v68;
  __int16 v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned __int8 **v74;
  uint64_t v75;
  std::string::size_type size;
  unsigned __int8 *v77;
  int v78;
  char *v79;
  std::string *p_s1;
  UniChar *v81;
  __int128 v82;
  UniChar *v83;
  UniChar *v84;
  char *v85;
  UniChar *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unsigned int *v92;
  unsigned int v93;
  unint64_t v94;
  char *v95;
  _WORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  __int16 v105;
  char *v106;
  uint64_t v107;
  char *v108;
  int v109;
  char *v110;
  std::string::size_type v111;
  std::string::size_type v112;
  _WORD *v113;
  void *v114;
  int64_t v115;
  uint64_t v116;
  std::string::size_type v117;
  uint64_t v118;
  char *v119;
  char *v120;
  __int16 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char **v125;
  unint64_t v126;
  std::string::size_type v127;
  _WORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  __int16 v138;
  std::string::size_type v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int16 v151;
  __int128 v152;
  uint64_t *v153;
  int v154;
  __int16 v155;
  const __CFNumber *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  void **valuePtr;
  char *v164;
  char *v165;
  std::string __dst;
  std::string __s1;
  void *v168[2];
  uint64_t v169;
  __int16 v170;
  void *__p[2];
  char *v172;
  UniChar *v173;
  char *v174;
  unint64_t v175;
  UniChar *v176;
  UniChar *v177;
  unint64_t v178;
  CFRange v179;
  CFRange v180;

  if (theArray && CFArrayGetCount(theArray))
  {
    v161 = 0;
    v162 = 0;
    v160 = 0;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v5 = 0;
    v156 = (const __CFNumber *)*MEMORY[0x24BDBD430];
    v154 = v4;
    while (v5 < CFArrayGetCount(theArray))
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v5);
      v7 = v5 + 1;
      v8 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v5 + 1);
      if (v4 == 17)
      {
        v9 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v5 + 2);
        v7 = v5 + 3;
        v10 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v5 + 3);
        if (!ValueAtIndex)
          goto LABEL_84;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        if (!ValueAtIndex)
          goto LABEL_84;
      }
      if (v8)
      {
        if (ValueAtIndex != (const __CFString *)v156 && v8 != (const __CFString *)v156)
        {
          Length = CFStringGetLength(v8);
          v12 = CFStringGetLength(ValueAtIndex);
          if (Length)
          {
            v13 = v12;
            if (v12)
            {
              v176 = 0;
              v177 = 0;
              v178 = 0;
              sub_20B87C6B4((uint64_t)&v176, Length);
              v179.location = 0;
              v179.length = Length;
              CFStringGetCharacters(v8, v179, v176);
              if (v176 != v177)
              {
                v14 = (char *)(v177 - 1);
                if (v177 - 1 > v176)
                {
                  v15 = (char *)(v176 + 1);
                  do
                  {
                    v16 = *((_WORD *)v15 - 1);
                    *((_WORD *)v15 - 1) = *(_WORD *)v14;
                    *(_WORD *)v14 = v16;
                    v14 -= 2;
                    v17 = v15 >= v14;
                    v15 += 2;
                  }
                  while (!v17);
                }
              }
              v173 = 0;
              v174 = 0;
              v175 = 0;
              sub_20B87C6B4((uint64_t)&v173, v13);
              v180.location = 0;
              v180.length = v13;
              CFStringGetCharacters(ValueAtIndex, v180, v173);
              sub_20B82E068(&__dst, v176, (char *)v177 - (char *)v176);
              v18 = 0;
              LOWORD(valuePtr) = 0;
              if (v4 == 17 && v9 && v156 != v9)
              {
                if (CFNumberGetValue(v9, kCFNumberSInt16Type, &valuePtr))
                  v18 = (__int16)valuePtr;
                else
                  v18 = 0;
              }
              valuePtr = 0;
              v164 = 0;
              v165 = 0;
              if (v4 == 17 && v10 && v156 != v10)
              {
                for (i = 0; i < CFArrayGetCount(v10); ++i)
                {
                  v20 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, i);
                  v157 = 0;
                  if (CFNumberGetValue(v20, kCFNumberSInt64Type, &v157))
                  {
                    v21 = v164;
                    if (v164 >= v165)
                    {
                      v23 = (char *)valuePtr;
                      v24 = (v164 - (char *)valuePtr) >> 3;
                      v25 = v24 + 1;
                      if ((unint64_t)(v24 + 1) >> 61)
                        sub_20B9F20C4();
                      v26 = v165 - (char *)valuePtr;
                      if ((v165 - (char *)valuePtr) >> 2 > v25)
                        v25 = v26 >> 2;
                      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
                        v27 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v27 = v25;
                      if (v27)
                      {
                        v28 = (char *)sub_20B800BE8((uint64_t)&v165, v27);
                        v23 = (char *)valuePtr;
                        v21 = v164;
                      }
                      else
                      {
                        v28 = 0;
                      }
                      v29 = (void **)&v28[8 * v24];
                      *v29 = v157;
                      v22 = (char *)(v29 + 1);
                      while (v21 != v23)
                      {
                        v30 = (void *)*((_QWORD *)v21 - 1);
                        v21 -= 8;
                        *--v29 = v30;
                      }
                      valuePtr = v29;
                      v164 = v22;
                      v165 = &v28[8 * v27];
                      if (v23)
                        operator delete(v23);
                    }
                    else
                    {
                      *(_QWORD *)v164 = v157;
                      v22 = v21 + 8;
                    }
                    v164 = v22;
                  }
                }
              }
              __s1 = __dst;
              memset(&__dst, 0, sizeof(__dst));
              v168[1] = 0;
              v169 = 0;
              v168[0] = 0;
              sub_20B87ACC8(v168, v173, (uint64_t)v174, (v174 - (char *)v173) >> 1);
              v155 = v18;
              v170 = v18;
              v31 = valuePtr;
              v32 = v164;
              __p[0] = valuePtr;
              __p[1] = v164;
              v33 = v165;
              v172 = v165;
              v164 = 0;
              v165 = 0;
              valuePtr = 0;
              v34 = v161;
              if (v161 >= v162)
              {
                v36 = v160;
                v37 = 0xCCCCCCCCCCCCCCCDLL * ((v161 - v160) >> 4);
                v38 = v37 + 1;
                if (v37 + 1 > 0x333333333333333)
                  sub_20B80CDD8();
                if (0x999999999999999ALL * ((v162 - v160) >> 4) > v38)
                  v38 = 0x999999999999999ALL * ((v162 - v160) >> 4);
                if (0xCCCCCCCCCCCCCCCDLL * ((v162 - v160) >> 4) >= 0x199999999999999)
                  v39 = 0x333333333333333;
                else
                  v39 = v38;
                if (v39)
                {
                  if (v39 > 0x333333333333333)
                    sub_20B800BC0();
                  v40 = (char *)operator new(80 * v39);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[80 * v37];
                *(std::string *)v41 = __s1;
                v42 = &v40[80 * v39];
                memset(&__s1, 0, sizeof(__s1));
                *(_OWORD *)(v41 + 24) = *(_OWORD *)v168;
                *((_QWORD *)v41 + 5) = v169;
                v168[1] = 0;
                v169 = 0;
                v168[0] = 0;
                *((_WORD *)v41 + 24) = v155;
                *((_QWORD *)v41 + 7) = v31;
                *((_QWORD *)v41 + 8) = v32;
                *((_QWORD *)v41 + 9) = v33;
                __p[0] = 0;
                __p[1] = 0;
                v43 = v41 + 80;
                v172 = 0;
                if (v34 == v36)
                {
                  v160 = &v40[80 * v37];
                  v161 = v41 + 80;
                  v162 = &v40[80 * v39];
                  v4 = v154;
                }
                else
                {
                  v44 = 0;
                  v4 = v154;
                  do
                  {
                    v45 = &v41[v44];
                    v46 = &v34[v44];
                    v47 = *(_OWORD *)&v34[v44 - 80];
                    *((_QWORD *)v45 - 8) = *(_QWORD *)&v34[v44 - 64];
                    *((_OWORD *)v45 - 5) = v47;
                    *((_QWORD *)v46 - 9) = 0;
                    *((_QWORD *)v46 - 8) = 0;
                    *((_QWORD *)v46 - 10) = 0;
                    *((_QWORD *)v45 - 7) = 0;
                    *((_QWORD *)v45 - 6) = 0;
                    *((_QWORD *)v45 - 5) = 0;
                    *(_OWORD *)(v45 - 56) = *(_OWORD *)&v34[v44 - 56];
                    *((_QWORD *)v45 - 5) = *(_QWORD *)&v34[v44 - 40];
                    *((_QWORD *)v46 - 6) = 0;
                    *((_QWORD *)v46 - 5) = 0;
                    *((_QWORD *)v46 - 7) = 0;
                    *((_WORD *)v45 - 16) = *(_WORD *)&v34[v44 - 32];
                    *((_QWORD *)v45 - 2) = 0;
                    *((_QWORD *)v45 - 1) = 0;
                    *((_QWORD *)v45 - 3) = 0;
                    *(_OWORD *)(v45 - 24) = *(_OWORD *)&v34[v44 - 24];
                    *((_QWORD *)v45 - 1) = *(_QWORD *)&v34[v44 - 8];
                    *((_QWORD *)v46 - 3) = 0;
                    *((_QWORD *)v46 - 2) = 0;
                    *((_QWORD *)v46 - 1) = 0;
                    v44 -= 80;
                  }
                  while (&v34[v44] != v36);
                  v34 = v160;
                  v48 = (uint64_t)v161;
                  v160 = &v41[v44];
                  v161 = v41 + 80;
                  v162 = v42;
                  while ((char *)v48 != v34)
                  {
                    v48 -= 80;
                    sub_20BA1DBF0(v48);
                  }
                }
                if (v34)
                  operator delete(v34);
                v161 = v43;
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                v35 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
                *((_QWORD *)v161 + 2) = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
                *((_QWORD *)v34 + 3) = 0;
                *(_OWORD *)v34 = v35;
                memset(&__s1, 0, sizeof(__s1));
                *((_QWORD *)v34 + 4) = 0;
                *((_QWORD *)v34 + 5) = 0;
                *(_OWORD *)(v34 + 24) = *(_OWORD *)v168;
                *((_QWORD *)v34 + 5) = v169;
                v168[0] = 0;
                v168[1] = 0;
                v169 = 0;
                *((_WORD *)v34 + 24) = v170;
                *((_QWORD *)v34 + 7) = 0;
                *((_QWORD *)v34 + 8) = 0;
                *((_QWORD *)v34 + 9) = 0;
                *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
                *((_QWORD *)v34 + 9) = v172;
                __p[0] = 0;
                __p[1] = 0;
                v172 = 0;
                v161 = v34 + 80;
              }
              if (v168[0])
              {
                v168[1] = v168[0];
                operator delete(v168[0]);
              }
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s1.__r_.__value_.__l.__data_);
              if (valuePtr)
              {
                v164 = (char *)valuePtr;
                operator delete(valuePtr);
              }
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              if (v173)
              {
                v174 = (char *)v173;
                operator delete(v173);
              }
              if (v176)
              {
                v177 = v176;
                operator delete(v176);
              }
            }
          }
        }
      }
LABEL_84:
      v5 = v7 + 1;
    }
    v49 = (__int128 *)v160;
    v50 = (__int128 *)v161;
    if (v160 != v161)
    {
      v176 = (UniChar *)sub_20BA1DC94;
      if (v161 - v160 < 1)
      {
LABEL_90:
        v55 = 0;
        v52 = 0;
      }
      else
      {
        v51 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v161 - v160) >> 4);
        while (1)
        {
          v53 = operator new(80 * v52, v51);
          if (v53)
            break;
          v54 = v52 > 1;
          v52 >>= 1;
          if (!v54)
            goto LABEL_90;
        }
        v55 = v53;
      }
      sub_20BA1DCAC(v49, v50, (uint64_t (**)(__int128 *, __int128 *))&v176, 0xCCCCCCCCCCCCCCCDLL * (v50 - v49), (uint64_t)v55, v52);
      if (v55)
        operator delete(v55);
      std::mutex::lock((std::mutex *)(a1 + 104));
      v57 = (void **)(a1 + 56);
      v56 = *(_WORD **)(a1 + 56);
      *(_QWORD *)(a1 + 64) = v56;
      v59 = a1 + 72;
      v58 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v56 >= v58)
      {
        v61 = v58 - (_QWORD)v56;
        if (v61 <= 1)
          v62 = 1;
        else
          v62 = v61;
        if (v61 >= 0x7FFFFFFFFFFFFFFELL)
          v63 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        v64 = sub_20B80FD48(a1 + 72, v63);
        v65 = *(char **)(a1 + 56);
        v66 = *(char **)(a1 + 64);
        v68 = &v64[v67];
        *v64 = 0;
        v60 = v64 + 1;
        while (v66 != v65)
        {
          v69 = *((_WORD *)v66 - 1);
          v66 -= 2;
          *--v64 = v69;
        }
        *(_QWORD *)(a1 + 56) = v64;
        *(_QWORD *)(a1 + 64) = v60;
        *(_QWORD *)(a1 + 72) = v68;
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v56 = 0;
        v60 = v56 + 1;
      }
      *(_QWORD *)(a1 + 64) = v60;
      memset(&__s1, 0, sizeof(__s1));
      v176 = 0;
      v177 = 0;
      v178 = 0;
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v70 = v160;
      if (v161 != v160)
      {
        v71 = 0;
        v72 = 0;
        v73 = 1;
        do
        {
          v74 = (unsigned __int8 **)&v70[80 * v72];
          if (!v72)
            goto LABEL_126;
          v75 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            size = __s1.__r_.__value_.__l.__size_;
          v77 = (unsigned __int8 *)*((unsigned __int8 *)v74 + 23);
          v78 = (char)v77;
          if ((char)v77 < 0)
            v77 = v74[1];
          if ((unsigned __int8 *)size != v77)
            goto LABEL_126;
          if (v78 >= 0)
            v79 = &v70[80 * v72];
          else
            v79 = (char *)*v74;
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(__s1.__r_.__value_.__l.__data_, v79, __s1.__r_.__value_.__l.__size_))
              goto LABEL_126;
          }
          else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *v79)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v79;
              if (!--v75)
                goto LABEL_130;
            }
LABEL_126:
            v81 = v177;
            if ((unint64_t)v177 >= v178)
            {
              v83 = (UniChar *)sub_20B8AD184((uint64_t *)&v176, (__int128 *)&v70[80 * v72]);
            }
            else
            {
              if (*((char *)v74 + 23) < 0)
              {
                sub_20B80ACE0(v177, *v74, (unint64_t)v74[1]);
              }
              else
              {
                v82 = *(_OWORD *)v74;
                *((_QWORD *)v177 + 2) = v74[2];
                *(_OWORD *)v81 = v82;
              }
              v83 = v81 + 12;
            }
            v177 = v83;
            v84 = (UniChar *)v174;
            if ((unint64_t)v174 >= v175)
            {
              v86 = v173;
              v87 = (v174 - (char *)v173) >> 2;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62)
                sub_20B80CDD8();
              v89 = v175 - (_QWORD)v173;
              if ((uint64_t)(v175 - (_QWORD)v173) >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)sub_20B8127BC((uint64_t)&v175, v90);
                v86 = v173;
                v84 = (UniChar *)v174;
              }
              else
              {
                v91 = 0;
              }
              v92 = (unsigned int *)&v91[4 * v87];
              *v92 = v73;
              v85 = (char *)(v92 + 1);
              while (v84 != v86)
              {
                v93 = *((_DWORD *)v84 - 1);
                v84 -= 2;
                *--v92 = v93;
              }
              v173 = (UniChar *)v92;
              v174 = v85;
              v175 = (unint64_t)&v91[4 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_DWORD *)v174 = v73;
              v85 = (char *)(v84 + 2);
            }
            v174 = v85;
            v95 = *(char **)(a1 + 64);
            v94 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v95 >= v94)
            {
              v97 = (char *)*v57;
              v98 = v95 - (_BYTE *)*v57;
              if (v98 <= -3)
                sub_20B80CDD8();
              v99 = v98 >> 1;
              v100 = v94 - (_QWORD)v97;
              if (v100 <= (v98 >> 1) + 1)
                v101 = v99 + 1;
              else
                v101 = v100;
              if (v100 >= 0x7FFFFFFFFFFFFFFELL)
                v102 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                v103 = (char *)sub_20B80FD48(v59, v102);
                v97 = *(char **)(a1 + 56);
                v95 = *(char **)(a1 + 64);
              }
              else
              {
                v103 = 0;
              }
              v104 = &v103[2 * v99];
              *(_WORD *)v104 = 1;
              v96 = v104 + 2;
              while (v95 != v97)
              {
                v105 = *((_WORD *)v95 - 1);
                v95 -= 2;
                *((_WORD *)v104 - 1) = v105;
                v104 -= 2;
              }
              *(_QWORD *)(a1 + 56) = v104;
              *(_QWORD *)(a1 + 64) = v96;
              *(_QWORD *)(a1 + 72) = &v103[2 * v102];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_WORD *)v95 = 1;
              v96 = v95 + 2;
            }
            *(_QWORD *)(a1 + 64) = v96;
            v71 = v73++;
            v70 = v160;
            goto LABEL_167;
          }
LABEL_130:
          ++*((_WORD *)*v57 + v71);
LABEL_167:
          memset(&__dst, 0, sizeof(__dst));
          valuePtr = 0;
          v164 = 0;
          v165 = 0;
          v157 = 0;
          v158 = 0;
          v159 = 0;
          v106 = &v70[80 * v72];
          if (v106[23] < 0)
            v107 = *((_QWORD *)v106 + 1);
          else
            LODWORD(v107) = v106[23];
          v108 = (char *)operator new(2uLL);
          *(_WORD *)v108 = (v107 >> 1) + 48;
          v164 = v108 + 2;
          v165 = v108 + 2;
          v109 = *(_DWORD *)(a1 + 24);
          valuePtr = (void **)v108;
          sub_20BA1A2E0(&__dst, (uint64_t *)v74 + 3, (uint64_t *)&valuePtr, (uint64_t *)&v157, v109);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 17)
          {
            v110 = &v160[80 * v72 + 48];
            v111 = __dst.__r_.__value_.__r.__words[2];
            v112 = __dst.__r_.__value_.__l.__size_;
            if (__dst.__r_.__value_.__l.__size_ >= __dst.__r_.__value_.__r.__words[2])
            {
              v114 = (void *)__dst.__r_.__value_.__r.__words[0];
              v115 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) <= -3)
                sub_20B80CDD8();
              v116 = v115 >> 1;
              if (__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0] <= (v115 >> 1) + 1)
                v117 = v116 + 1;
              else
                v117 = __dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFELL)
                v118 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_20B80FD48((uint64_t)&__dst.__r_.__value_.__r.__words[2], v118);
                v112 = __dst.__r_.__value_.__l.__size_;
                v114 = (void *)__dst.__r_.__value_.__r.__words[0];
              }
              else
              {
                v119 = 0;
              }
              v120 = &v119[2 * v116];
              *(_WORD *)v120 = *(_WORD *)v110;
              v113 = v120 + 2;
              while ((void *)v112 != v114)
              {
                v121 = *(_WORD *)(v112 - 2);
                v112 -= 2;
                *((_WORD *)v120 - 1) = v121;
                v120 -= 2;
              }
              v111 = (std::string::size_type)&v119[2 * v118];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v113;
              __dst.__r_.__value_.__r.__words[2] = v111;
              if (v114)
              {
                operator delete(v114);
                v111 = __dst.__r_.__value_.__r.__words[2];
              }
            }
            else
            {
              *(_WORD *)__dst.__r_.__value_.__l.__size_ = *(_WORD *)v110;
              v113 = (_WORD *)(v112 + 2);
            }
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v113;
            v122 = &v160[80 * v72];
            v123 = *((_QWORD *)v122 + 7);
            v124 = *((_QWORD *)v122 + 8);
            v125 = (char **)(v122 + 56);
            v126 = v124 - v123;
            if ((unint64_t)v113 >= v111)
            {
              v128 = (_WORD *)__dst.__r_.__value_.__r.__words[0];
              v129 = (uint64_t)v113 - __dst.__r_.__value_.__r.__words[0];
              if ((uint64_t)((uint64_t)v113 - __dst.__r_.__value_.__r.__words[0]) <= -3)
                sub_20B80CDD8();
              v130 = v71;
              v131 = v59;
              v132 = v129 >> 1;
              v133 = v111 - __dst.__r_.__value_.__r.__words[0];
              if (v133 <= (v129 >> 1) + 1)
                v134 = v132 + 1;
              else
                v134 = v133;
              if (v133 >= 0x7FFFFFFFFFFFFFFELL)
                v135 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v135 = v134;
              if (v135)
              {
                v136 = (char *)sub_20B80FD48((uint64_t)&__dst.__r_.__value_.__r.__words[2], v135);
                v113 = (_WORD *)__dst.__r_.__value_.__l.__size_;
                v128 = (_WORD *)__dst.__r_.__value_.__r.__words[0];
              }
              else
              {
                v136 = 0;
              }
              v137 = &v136[2 * v132];
              *(_WORD *)v137 = v126 >> 3;
              v127 = (std::string::size_type)(v137 + 2);
              v59 = v131;
              while (v113 != v128)
              {
                v138 = *--v113;
                *((_WORD *)v137 - 1) = v138;
                v137 -= 2;
              }
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
              __dst.__r_.__value_.__l.__size_ = v127;
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v136[2 * v135];
              v71 = v130;
              if (v128)
                operator delete(v128);
            }
            else
            {
              *v113 = v126 >> 3;
              v127 = (std::string::size_type)(v113 + 1);
            }
            __dst.__r_.__value_.__l.__size_ = v127;
            sub_20B87D600((uint64_t)&__dst, v127, *v125, v125[1], (v125[1] - *v125) >> 1);
          }
          v139 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
          v141 = *(char **)(a1 + 64);
          v140 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v141 >= v140)
          {
            v143 = (char *)*v57;
            v144 = v141 - (_BYTE *)*v57;
            if (v144 <= -3)
              sub_20B80CDD8();
            v145 = v144 >> 1;
            v146 = v140 - (_QWORD)v143;
            if (v146 <= (v144 >> 1) + 1)
              v147 = v145 + 1;
            else
              v147 = v146;
            if (v146 >= 0x7FFFFFFFFFFFFFFELL)
              v148 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v148 = v147;
            if (v148)
            {
              v149 = (char *)sub_20B80FD48(v59, v148);
              v143 = *(char **)(a1 + 56);
              v141 = *(char **)(a1 + 64);
            }
            else
            {
              v149 = 0;
            }
            v150 = &v149[2 * v145];
            *(_WORD *)v150 = v139 >> 1;
            v142 = (uint64_t)(v150 + 2);
            while (v141 != v143)
            {
              v151 = *((_WORD *)v141 - 1);
              v141 -= 2;
              *((_WORD *)v150 - 1) = v151;
              v150 -= 2;
            }
            *(_QWORD *)(a1 + 56) = v150;
            *(_QWORD *)(a1 + 64) = v142;
            *(_QWORD *)(a1 + 72) = &v149[2 * v148];
            if (v143)
              operator delete(v143);
          }
          else
          {
            *(_WORD *)v141 = v139 >> 1;
            v142 = (uint64_t)(v141 + 2);
          }
          *(_QWORD *)(a1 + 64) = v142;
          sub_20B943104(a1 + 56, v142, __dst.__r_.__value_.__l.__data_, (char *)__dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 1);
          v152 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          std::string::operator=(&__s1, (const std::string *)&v160[80 * v72]);
          if (v157)
          {
            v158 = v157;
            operator delete(v157);
          }
          if (valuePtr)
          {
            v164 = (char *)valuePtr;
            operator delete(valuePtr);
          }
          if (__dst.__r_.__value_.__r.__words[0])
          {
            __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          v73 += ((*((_QWORD *)&v152 + 1) - (_QWORD)v152) >> 1) + 1;
          ++v72;
          v70 = v160;
        }
        while (v72 < 0xCCCCCCCCCCCCCCCDLL * ((v161 - v160) >> 4));
      }
      v153 = (uint64_t *)operator new();
      sub_20BA2010C(v153, (uint64_t **)&v176, (_DWORD **)&v173);
      sub_20B9977B0((void ****)(a1 + 96), (void ***)v153);
      if (v173)
      {
        v174 = (char *)v173;
        operator delete(v173);
      }
      v173 = (UniChar *)&v176;
      sub_20B83AFD0((void ***)&v173);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      std::mutex::unlock((std::mutex *)(a1 + 104));
    }
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
    sub_20BA1DB80((void ***)&__s1);
  }
}

void sub_20BA1D868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::mutex::unlock(a12);
  __p = &a18;
  sub_20BA1DB80((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA1DA14(uint64_t a1)
{
  uint64_t v2;
  void ***v3;
  uint64_t v4;
  std::mutex *v6;
  char v7;

  v6 = (std::mutex *)(a1 + 104);
  v7 = 0;
  if ((sub_20B98BE30((uint64_t)&v6) & 1) != 0 && (v2 = *(_QWORD *)(a1 + 96)) != 0)
  {
    v3 = *(void ****)(a1 + 16);
    if (v3)
    {
      if (*v3)
        sub_20B969128(*v3);
      MEMORY[0x20BD39CB0](v3, 0x80C40B8603338);
      v2 = *(_QWORD *)(a1 + 96);
    }
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 16) = v2;
    sub_20B824BE4(a1 + 32, (__n128 *)(a1 + 56));
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  if (v7)
    std::mutex::unlock(v6);
  return v4;
}

void sub_20BA1DABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20BA1DAE0(uint64_t a1)
{
  sub_20BA1C894(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20BA1DB08(uint64_t a1)
{
  sub_20BA1C894(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA1DB2C()
{
  return 1;
}

uint64_t sub_20BA1DB34()
{
  return 0;
}

uint64_t sub_20BA1DB40()
{
  return 10;
}

uint64_t sub_20BA1DB48()
{
  return 11;
}

void sub_20BA1DB54(uint64_t a1)
{
  sub_20BA1C894(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA1DB78()
{
  return 17;
}

void sub_20BA1DB80(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_20BA1DBF0(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BA1DBF0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BA1DC44(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BA1DC94(_QWORD *a1, void **a2)
{
  return (sub_20B871BA8(a1, a2) >> 7) & 1;
}

void sub_20BA1DCAC(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), unint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 *v8;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  __n128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  __int16 v35;
  void *__p[2];
  uint64_t v37;

  if (a4 >= 2)
  {
    v8 = (__n128 *)a1;
    if (a4 == 2)
    {
      if ((*a3)(a2 - 5, a1))
        sub_20BA1ED24(v8, (__n128 *)a2 - 5);
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v15 = a1 + 5;
        if (a1 + 5 != a2)
        {
          v16 = 0;
          v17 = a1;
          do
          {
            v18 = v15;
            if ((*a3)(v15, v17))
            {
              v19 = *v18;
              v32 = *((_QWORD *)v18 + 2);
              *(_OWORD *)v31 = v19;
              *((_QWORD *)v18 + 1) = 0;
              *((_QWORD *)v18 + 2) = 0;
              *(_QWORD *)v18 = 0;
              *(_OWORD *)v33 = *(__int128 *)((char *)v17 + 104);
              v34 = *((_QWORD *)v17 + 15);
              *((_QWORD *)v17 + 14) = 0;
              *((_QWORD *)v17 + 15) = 0;
              *((_QWORD *)v17 + 13) = 0;
              v35 = *((_WORD *)v17 + 64);
              *(_OWORD *)__p = *(__int128 *)((char *)v17 + 136);
              v37 = *((_QWORD *)v17 + 19);
              *((_QWORD *)v17 + 17) = 0;
              *((_QWORD *)v17 + 18) = 0;
              v20 = v16;
              *((_QWORD *)v17 + 19) = 0;
              while (1)
              {
                v21 = sub_20BA1EDC0((uint64_t)&v8[5] + v20, (__int128 *)((char *)v8 + v20));
                if (!v20)
                  break;
                v22 = ((uint64_t (*)(void **, uint64_t, __n128))*a3)(v31, (uint64_t)&v8[-5] + v20, v21);
                v20 -= 80;
                if ((v22 & 1) == 0)
                {
                  v23 = (uint64_t)&v8[5] + v20;
                  goto LABEL_17;
                }
              }
              v23 = (uint64_t)v8;
LABEL_17:
              sub_20BA1EDC0(v23, (__int128 *)v31);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v33[0])
              {
                v33[1] = v33[0];
                operator delete(v33[0]);
              }
              if (SHIBYTE(v32) < 0)
                operator delete(v31[0]);
            }
            v15 = v18 + 5;
            v16 += 80;
            v17 = v18;
          }
          while (v18 + 5 != a2);
        }
      }
    }
    else
    {
      v12 = a4 >> 1;
      v13 = (__n128 *)&a1[5 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_20BA1E020(a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5);
        v24 = a5 + 80 * v12;
        v25 = sub_20BA1E020((__int128 *)&v8[5 * (a4 >> 1)], a2, a3, a4 - v12, v24);
        v31[0] = (void *)a4;
        v26 = (__int128 *)(a5 + 80 * a4);
        v27 = (__int128 *)v24;
        v28 = (__int128 *)a5;
        while (v27 != v26)
        {
          if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a3)(v27, v28, v25))
          {
            v25 = sub_20BA1EDC0((uint64_t)v8, v27);
            v27 += 5;
          }
          else
          {
            v25 = sub_20BA1EDC0((uint64_t)v8, v28);
            v28 += 5;
          }
          v8 += 5;
          if (v28 == (__int128 *)v24)
          {
            if (v27 != v26)
            {
              v29 = 0;
              do
              {
                sub_20BA1EDC0((uint64_t)&v8[v29], &v27[v29]);
                v29 += 5;
              }
              while (&v27[v29] != v26);
            }
            goto LABEL_38;
          }
        }
        if (v28 != (__int128 *)v24)
        {
          v30 = 0;
          do
          {
            sub_20BA1EDC0((uint64_t)&v8[v30], &v28[v30]);
            v30 += 5;
          }
          while (&v28[v30] != (__int128 *)v24);
        }
LABEL_38:
        if (a5)
          sub_20BA1EE58((unint64_t *)v31, a5);
      }
      else
      {
        sub_20BA1DCAC(a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v14 = a4 - v12;
        sub_20BA1DCAC(v13, a2, a3, v14, a5, a6);
        sub_20BA1E734(v8, v13, (__n128 *)a2, (uint64_t (**)(__n128 *, __n128 *))a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_20BA1DFF0(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, exception_object);
  if (v1)
    sub_20BA1EE58((unint64_t *)va, v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_20BA1E020(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), unint64_t a4, uint64_t a5)
{
  __int128 *v9;
  __int128 v10;
  __n128 result;
  __int128 *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (a4)
  {
    v9 = a1;
    if (a4 == 2)
    {
      v12 = a2 - 5;
      v13 = (*a3)(a2 - 5, a1);
      v14 = (_QWORD *)(a5 + 24);
      v15 = (_QWORD *)(a5 + 56);
      if (v13)
      {
        v16 = *v12;
        *(_QWORD *)(a5 + 16) = *((_QWORD *)a2 - 8);
        *(_OWORD *)a5 = v16;
        *((_QWORD *)a2 - 9) = 0;
        *((_QWORD *)a2 - 8) = 0;
        *(_QWORD *)v12 = 0;
        *v14 = 0;
        *(_QWORD *)(a5 + 32) = 0;
        *(_QWORD *)(a5 + 40) = 0;
        *(_OWORD *)(a5 + 24) = *(__int128 *)((char *)a2 - 56);
        *(_QWORD *)(a5 + 40) = *((_QWORD *)a2 - 5);
        *((_QWORD *)a2 - 6) = 0;
        *((_QWORD *)a2 - 5) = 0;
        *((_QWORD *)a2 - 7) = 0;
        *(_WORD *)(a5 + 48) = *((_WORD *)a2 - 16);
        *(_QWORD *)(a5 + 64) = 0;
        *(_QWORD *)(a5 + 72) = 0;
        *v15 = 0;
        *(_OWORD *)(a5 + 56) = *(__int128 *)((char *)a2 - 24);
        *(_QWORD *)(a5 + 72) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 3) = 0;
        *((_QWORD *)a2 - 2) = 0;
        *((_QWORD *)a2 - 1) = 0;
        v17 = *v9;
        *(_QWORD *)(a5 + 96) = *((_QWORD *)v9 + 2);
        *(_OWORD *)(a5 + 80) = v17;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(a5 + 104) = 0;
        *(_QWORD *)(a5 + 112) = 0;
        *(_QWORD *)(a5 + 120) = 0;
        result = *(__n128 *)((char *)v9 + 24);
        *(__n128 *)(a5 + 104) = result;
        *(_QWORD *)(a5 + 120) = *((_QWORD *)v9 + 5);
        *((_QWORD *)v9 + 4) = 0;
        *((_QWORD *)v9 + 5) = 0;
        *((_QWORD *)v9 + 3) = 0;
        *(_WORD *)(a5 + 128) = *((_WORD *)v9 + 24);
        *(_QWORD *)(a5 + 144) = 0;
        *(_QWORD *)(a5 + 152) = 0;
        *(_QWORD *)(a5 + 136) = 0;
        v19 = *((_QWORD *)v9 + 7);
        v18 = (_QWORD *)v9 + 7;
        *(_QWORD *)(a5 + 136) = v19;
        v20 = v18 + 1;
        v21 = v18 + 2;
      }
      else
      {
        v46 = *v9;
        *(_QWORD *)(a5 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)a5 = v46;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)v9 = 0;
        *v14 = 0;
        *(_QWORD *)(a5 + 32) = 0;
        *(_QWORD *)(a5 + 40) = 0;
        *(_OWORD *)(a5 + 24) = *(__int128 *)((char *)v9 + 24);
        *(_QWORD *)(a5 + 40) = *((_QWORD *)v9 + 5);
        *((_QWORD *)v9 + 4) = 0;
        *((_QWORD *)v9 + 5) = 0;
        *((_QWORD *)v9 + 3) = 0;
        *(_WORD *)(a5 + 48) = *((_WORD *)v9 + 24);
        *(_QWORD *)(a5 + 64) = 0;
        *(_QWORD *)(a5 + 72) = 0;
        *v15 = 0;
        *(_OWORD *)(a5 + 56) = *(__int128 *)((char *)v9 + 56);
        *(_QWORD *)(a5 + 72) = *((_QWORD *)v9 + 9);
        *((_QWORD *)v9 + 7) = 0;
        *((_QWORD *)v9 + 8) = 0;
        *((_QWORD *)v9 + 9) = 0;
        v47 = *v12;
        *(_QWORD *)(a5 + 96) = *((_QWORD *)a2 - 8);
        *(_OWORD *)(a5 + 80) = v47;
        *((_QWORD *)a2 - 9) = 0;
        *((_QWORD *)a2 - 8) = 0;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(a5 + 104) = 0;
        *(_QWORD *)(a5 + 112) = 0;
        *(_QWORD *)(a5 + 120) = 0;
        result = *(__n128 *)((char *)a2 - 56);
        *(__n128 *)(a5 + 104) = result;
        *(_QWORD *)(a5 + 120) = *((_QWORD *)a2 - 5);
        *((_QWORD *)a2 - 6) = 0;
        *((_QWORD *)a2 - 5) = 0;
        *((_QWORD *)a2 - 7) = 0;
        *(_WORD *)(a5 + 128) = *((_WORD *)a2 - 16);
        *(_QWORD *)(a5 + 144) = 0;
        *(_QWORD *)(a5 + 152) = 0;
        *(_QWORD *)(a5 + 136) = 0;
        v49 = *((_QWORD *)a2 - 3);
        v48 = (_QWORD *)a2 - 3;
        *(_QWORD *)(a5 + 136) = v49;
        v20 = v48 + 1;
        v21 = v48 + 2;
        v18 = v48;
      }
      *(_QWORD *)(a5 + 144) = *v20;
      *(_QWORD *)(a5 + 152) = *v21;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
    }
    else if (a4 == 1)
    {
      v10 = *a1;
      *(_QWORD *)(a5 + 16) = *((_QWORD *)a1 + 2);
      *(_OWORD *)a5 = v10;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 32) = 0;
      *(_QWORD *)(a5 + 40) = 0;
      *(_OWORD *)(a5 + 24) = *(__int128 *)((char *)a1 + 24);
      *(_QWORD *)(a5 + 40) = *((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 3) = 0;
      *(_WORD *)(a5 + 48) = *((_WORD *)a1 + 24);
      *(_QWORD *)(a5 + 64) = 0;
      *(_QWORD *)(a5 + 72) = 0;
      *(_QWORD *)(a5 + 56) = 0;
      result = *(__n128 *)((char *)a1 + 56);
      *(__n128 *)(a5 + 56) = result;
      *(_QWORD *)(a5 + 72) = *((_QWORD *)a1 + 9);
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
    }
    else if ((uint64_t)a4 > 8)
    {
      v31 = &a1[5 * (a4 >> 1)];
      sub_20BA1DCAC(a1, v31, a3, a4 >> 1, a5, a4 >> 1);
      sub_20BA1DCAC(&v9[5 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 80 * (a4 >> 1), a4 - (a4 >> 1));
      v32 = 0;
      v56 = 0;
      v33 = &v9[5 * (a4 >> 1)];
      while (v33 != a2)
      {
        v34 = (*a3)(v33, v9);
        v35 = a5 + v32;
        v36 = a5 + v32;
        v37 = (_QWORD *)(a5 + v32 + 24);
        v38 = (__n128 *)(a5 + v32 + 56);
        if (v34)
        {
          v39 = *v33;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v33 + 2);
          *(_OWORD *)v35 = v39;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = 0;
          *(_QWORD *)v33 = 0;
          *v37 = 0;
          *(_QWORD *)(a5 + v32 + 32) = 0;
          *(_QWORD *)(a5 + v32 + 40) = 0;
          *(_OWORD *)(v36 + 24) = *(__int128 *)((char *)v33 + 24);
          *(_QWORD *)(v36 + 40) = *((_QWORD *)v33 + 5);
          *((_QWORD *)v33 + 4) = 0;
          *((_QWORD *)v33 + 5) = 0;
          *((_QWORD *)v33 + 3) = 0;
          *(_WORD *)(v36 + 48) = *((_WORD *)v33 + 24);
          *(_QWORD *)(a5 + v32 + 64) = 0;
          *(_QWORD *)(a5 + v32 + 72) = 0;
          v38->n128_u64[0] = 0;
          result = *(__n128 *)((char *)v33 + 56);
          *v38 = result;
          *(_QWORD *)(v36 + 72) = *((_QWORD *)v33 + 9);
          *((_QWORD *)v33 + 7) = 0;
          *((_QWORD *)v33 + 8) = 0;
          *((_QWORD *)v33 + 9) = 0;
          v33 += 5;
        }
        else
        {
          v40 = *v9;
          *(_QWORD *)(v35 + 16) = *((_QWORD *)v9 + 2);
          *(_OWORD *)v35 = v40;
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v9 + 2) = 0;
          *(_QWORD *)v9 = 0;
          *v37 = 0;
          *(_QWORD *)(a5 + v32 + 32) = 0;
          *(_QWORD *)(a5 + v32 + 40) = 0;
          *(_OWORD *)(v36 + 24) = *(__int128 *)((char *)v9 + 24);
          *(_QWORD *)(v36 + 40) = *((_QWORD *)v9 + 5);
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v9 + 5) = 0;
          *((_QWORD *)v9 + 3) = 0;
          *(_WORD *)(v36 + 48) = *((_WORD *)v9 + 24);
          *(_QWORD *)(a5 + v32 + 64) = 0;
          *(_QWORD *)(a5 + v32 + 72) = 0;
          v38->n128_u64[0] = 0;
          result = *(__n128 *)((char *)v9 + 56);
          *v38 = result;
          *(_QWORD *)(v36 + 72) = *((_QWORD *)v9 + 9);
          *((_QWORD *)v9 + 7) = 0;
          *((_QWORD *)v9 + 8) = 0;
          *((_QWORD *)v9 + 9) = 0;
          v9 += 5;
        }
        ++v56;
        v32 += 80;
        if (v9 == v31)
        {
          if (v33 != a2)
          {
            v41 = 0;
            do
            {
              v42 = &v33[v41];
              v43 = a5 + v32 + v41 * 16;
              v44 = v33[v41];
              *(_QWORD *)(v43 + 16) = *(_QWORD *)&v33[v41 + 1];
              *(_OWORD *)v43 = v44;
              *((_QWORD *)v42 + 1) = 0;
              *((_QWORD *)v42 + 2) = 0;
              *(_QWORD *)v42 = 0;
              v45 = a5 + v41 * 16 + v32;
              *(_QWORD *)(v45 + 24) = 0;
              *(_QWORD *)(v45 + 32) = 0;
              *(_QWORD *)(v45 + 40) = 0;
              *(_OWORD *)(v45 + 24) = *(__int128 *)((char *)&v33[v41 + 1] + 8);
              *(_QWORD *)(v45 + 40) = *((_QWORD *)&v33[v41 + 2] + 1);
              *((_QWORD *)v42 + 4) = 0;
              *((_QWORD *)v42 + 5) = 0;
              *((_QWORD *)v42 + 3) = 0;
              *(_WORD *)(v45 + 48) = v33[v41 + 3];
              *(_QWORD *)(v45 + 64) = 0;
              *(_QWORD *)(v45 + 72) = 0;
              *(_QWORD *)(v45 + 56) = 0;
              result = *(__n128 *)((char *)&v33[v41 + 3] + 8);
              *(__n128 *)(v45 + 56) = result;
              *(_QWORD *)(v43 + 72) = *((_QWORD *)&v33[v41 + 4] + 1);
              *((_QWORD *)v42 + 7) = 0;
              *((_QWORD *)v42 + 8) = 0;
              *((_QWORD *)v42 + 9) = 0;
              v41 += 5;
            }
            while (v42 + 5 != a2);
          }
          return result;
        }
      }
      if (v9 != v31)
      {
        v50 = 0;
        do
        {
          v51 = a5 + v32 + v50 * 16;
          v52 = &v9[v50];
          v53 = v9[v50];
          *(_QWORD *)(v51 + 16) = *(_QWORD *)&v9[v50 + 1];
          *(_OWORD *)v51 = v53;
          *((_QWORD *)v52 + 1) = 0;
          *((_QWORD *)v52 + 2) = 0;
          *(_QWORD *)v52 = 0;
          v54 = a5 + v50 * 16 + v32;
          *(_QWORD *)(v54 + 24) = 0;
          *(_QWORD *)(v54 + 32) = 0;
          *(_QWORD *)(v54 + 40) = 0;
          *(_OWORD *)(v54 + 24) = *(__int128 *)((char *)&v9[v50 + 1] + 8);
          *(_QWORD *)(v54 + 40) = *((_QWORD *)&v9[v50 + 2] + 1);
          *((_QWORD *)v52 + 4) = 0;
          *((_QWORD *)v52 + 5) = 0;
          *((_QWORD *)v52 + 3) = 0;
          *(_WORD *)(v54 + 48) = v9[v50 + 3];
          *(_QWORD *)(v54 + 64) = 0;
          *(_QWORD *)(v54 + 72) = 0;
          *(_QWORD *)(v54 + 56) = 0;
          result = *(__n128 *)((char *)&v9[v50 + 3] + 8);
          *(__n128 *)(v54 + 56) = result;
          *(_QWORD *)(v51 + 72) = *((_QWORD *)&v9[v50 + 4] + 1);
          *((_QWORD *)v52 + 7) = 0;
          *((_QWORD *)v52 + 8) = 0;
          *((_QWORD *)v52 + 9) = 0;
          v50 += 5;
        }
        while (v52 + 5 != v31);
      }
    }
    else if (a1 != a2)
    {
      v22 = *a1;
      *(_QWORD *)(a5 + 16) = *((_QWORD *)a1 + 2);
      *(_OWORD *)a5 = v22;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 32) = 0;
      *(_QWORD *)(a5 + 40) = 0;
      *(_OWORD *)(a5 + 24) = *(__int128 *)((char *)a1 + 24);
      *(_QWORD *)(a5 + 40) = *((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 3) = 0;
      *(_WORD *)(a5 + 48) = *((_WORD *)a1 + 24);
      *(_QWORD *)(a5 + 64) = 0;
      *(_QWORD *)(a5 + 72) = 0;
      *(_QWORD *)(a5 + 56) = 0;
      result = *(__n128 *)((char *)a1 + 56);
      *(__n128 *)(a5 + 56) = result;
      *(_QWORD *)(a5 + 72) = *((_QWORD *)a1 + 9);
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 9) = 0;
      v55 = 1;
      v23 = a1 + 5;
      if (a1 + 5 != a2)
      {
        v24 = 0;
        v25 = a5;
        do
        {
          v26 = v23;
          v27 = (__int128 *)(v25 + 80);
          if ((*a3)(v23, (__int128 *)v25))
          {
            *v27 = *(_OWORD *)v25;
            *(_QWORD *)(v25 + 96) = *(_QWORD *)(v25 + 16);
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            *(_OWORD *)(v25 + 104) = *(_OWORD *)(v25 + 24);
            *(_QWORD *)(v25 + 120) = *(_QWORD *)(v25 + 40);
            *(_QWORD *)(v25 + 16) = 0;
            *(_QWORD *)(v25 + 24) = 0;
            *(_QWORD *)(v25 + 32) = 0;
            *(_QWORD *)(v25 + 40) = 0;
            *(_WORD *)(v25 + 128) = *(_WORD *)(v25 + 48);
            *(_OWORD *)(v25 + 136) = *(_OWORD *)(v25 + 56);
            *(_QWORD *)(v25 + 152) = *(_QWORD *)(v25 + 72);
            *(_QWORD *)(v25 + 56) = 0;
            *(_QWORD *)(v25 + 64) = 0;
            ++v55;
            v28 = a5;
            *(_QWORD *)(v25 + 72) = 0;
            if (v25 != a5)
            {
              v29 = v24;
              while ((*a3)(v26, (__int128 *)(a5 + v29 - 80)))
              {
                sub_20BA1EDC0(a5 + v29, (__int128 *)(a5 + v29 - 80));
                v29 -= 80;
                if (!v29)
                {
                  v28 = a5;
                  goto LABEL_19;
                }
              }
              v28 = a5 + v29;
            }
LABEL_19:
            result = sub_20BA1EDC0(v28, v26);
          }
          else
          {
            v30 = *v26;
            *(_QWORD *)(v25 + 96) = *((_QWORD *)v26 + 2);
            *v27 = v30;
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = 0;
            *(_QWORD *)v26 = 0;
            *(_QWORD *)(v25 + 104) = 0;
            *(_QWORD *)(v25 + 112) = 0;
            *(_QWORD *)(v25 + 120) = 0;
            *(_OWORD *)(v25 + 104) = *(__int128 *)((char *)v9 + 104);
            *(_QWORD *)(v25 + 120) = *((_QWORD *)v9 + 15);
            *((_QWORD *)v9 + 14) = 0;
            *((_QWORD *)v9 + 15) = 0;
            *((_QWORD *)v9 + 13) = 0;
            *(_WORD *)(v25 + 128) = *((_WORD *)v9 + 64);
            *(_QWORD *)(v25 + 144) = 0;
            *(_QWORD *)(v25 + 152) = 0;
            *(_QWORD *)(v25 + 136) = 0;
            result = *(__n128 *)((char *)v9 + 136);
            *(__n128 *)(v25 + 136) = result;
            *(_QWORD *)(v25 + 152) = *((_QWORD *)v9 + 19);
            *((_QWORD *)v9 + 17) = 0;
            *((_QWORD *)v9 + 18) = 0;
            *((_QWORD *)v9 + 19) = 0;
            ++v55;
          }
          v23 = v26 + 5;
          v24 += 80;
          v25 += 80;
          v9 = v26;
        }
        while (v26 + 5 != a2);
      }
    }
  }
  return result;
}

void sub_20BA1E70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    sub_20BA1EE58(&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20BA1E734(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t (**a4)(__n128 *, __n128 *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(__n128 *, __n128 *);
  unint64_t v28;
  __n128 *v29;
  int v30;
  __n128 *i;
  __n128 *v32;
  __n128 *v33;
  uint64_t v34;
  __n128 *v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __n128 *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  __int128 *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 *v51;
  __n128 v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t (**v66)(__n128 *, __n128 *);
  uint64_t v68;
  unint64_t v69;

  v68 = a6;
  if (!a6)
    return;
  while (a5 > a8 && v68 > a8)
  {
    if (!a5)
      return;
    v14 = 0;
    v15 = -a5;
    while (1)
    {
      v16 = (__n128 *)((char *)v14 + (_QWORD)a1);
      if (((*a4)(a2, (__n128 *)((char *)v14 + (_QWORD)a1)) & 1) != 0)
        break;
      v14 += 5;
      if (__CFADD__(v15++, 1))
        return;
    }
    v19 = -v15;
    v20 = v68;
    v64 = a3;
    v65 = a7;
    v66 = a4;
    if (-v15 >= v68)
    {
      if (v15 == -1)
      {
        sub_20BA1ED24((__n128 *)((char *)v14 + (_QWORD)a1), a2);
        return;
      }
      if (v15 > 0)
        v19 = 1 - v15;
      v26 = v19 >> 1;
      v24 = (__n128 *)((char *)&a1[5 * (v19 >> 1)] + (_QWORD)v14);
      v23 = a2;
      if (a2 != a3)
      {
        v60 = v19 >> 1;
        v27 = *v66;
        v28 = 0xCCCCCCCCCCCCCCCDLL * (a3 - a2);
        v23 = a2;
        do
        {
          v29 = &v23[5 * (v28 >> 1)];
          v30 = v27(v29, v24);
          if (v30)
            v28 += ~(v28 >> 1);
          else
            v28 >>= 1;
          if (v30)
            v23 = v29 + 5;
        }
        while (v28);
        v26 = v60;
        v20 = v68;
      }
      v22 = 0xCCCCCCCCCCCCCCCDLL * (v23 - a2);
    }
    else
    {
      if (v68 >= 0)
        v21 = v68;
      else
        v21 = v68 + 1;
      v22 = v21 >> 1;
      v23 = &a2[5 * (v21 >> 1)];
      v24 = a2;
      if ((__n128 *)((char *)a2 - (char *)a1) != v14)
      {
        v62 = v21 >> 1;
        v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1 - (uint64_t)v14) >> 4);
        v24 = (__n128 *)((char *)v14 + (_QWORD)a1);
        do
        {
          if ((*v66)(v23, &v24[5 * (v25 >> 1)]))
          {
            v25 >>= 1;
          }
          else
          {
            v24 += 5 * (v25 >> 1) + 5;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        v20 = v68;
        v22 = v62;
      }
      v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)a1 - (uint64_t)v14) >> 4);
    }
    if (v24 == a2)
    {
      a3 = v23;
    }
    else if (v23 == a2)
    {
      a3 = v24;
    }
    else
    {
      v61 = v26;
      v63 = v22;
      v17 = sub_20BA1ED24(v24, a2);
      a3 = v24 + 5;
      for (i = a2 + 5; i != v23; i += 5)
      {
        if (a3 == a2)
          a2 = i;
        v17 = sub_20BA1ED24(a3, i);
        a3 += 5;
      }
      if (a3 != a2)
      {
        v32 = a3;
        v33 = a2;
        do
        {
          while (1)
          {
            v17 = sub_20BA1ED24(v32, v33);
            v32 += 5;
            v33 += 5;
            if (v33 == v23)
              break;
            if (v32 == a2)
              a2 = v33;
          }
          v33 = a2;
        }
        while (v32 != a2);
      }
      v20 = v68;
      v26 = v61;
      v22 = v63;
    }
    a5 = -v26 - v15;
    v34 = v20 - v22;
    if (v26 + v22 >= v20 - (v26 + v22) - v15)
    {
      v36 = v23;
      a7 = v65;
      v37 = v26;
      v38 = v22;
      sub_20BA1E734(a3, v36, v64, v66, -v26 - v15, v20 - v22, v65, a8, v17);
      a2 = v24;
      a4 = v66;
      v34 = v38;
      a5 = v37;
    }
    else
    {
      v35 = v24;
      a4 = v66;
      sub_20BA1E734((char *)v14 + (_QWORD)a1, v35, a3, v66, v26, v22, v65, a8, v17);
      v16 = a3;
      a2 = v23;
      a7 = v65;
      a3 = v64;
    }
    v68 = v34;
    a1 = v16;
    if (!v34)
      return;
  }
  if (a5 <= v68)
  {
    if (a1 != a2)
    {
      v48 = 0;
      v49 = 0;
      do
      {
        v50 = a7 + v48 * 16;
        v51 = &a1[v48];
        v52 = a1[v48];
        *(_QWORD *)(v50 + 16) = a1[v48 + 1].n128_u64[0];
        *(__n128 *)v50 = v52;
        v51->n128_u64[1] = 0;
        v51[1].n128_u64[0] = 0;
        v51->n128_u64[0] = 0;
        *(_QWORD *)(v50 + 24) = 0;
        *(_QWORD *)(v50 + 32) = 0;
        *(_QWORD *)(v50 + 40) = 0;
        *(__n128 *)(v50 + 24) = *(__n128 *)((char *)&a1[v48 + 1] + 8);
        *(_QWORD *)(v50 + 40) = a1[v48 + 2].n128_u64[1];
        v51[2].n128_u64[0] = 0;
        v51[2].n128_u64[1] = 0;
        v51[1].n128_u64[1] = 0;
        *(_WORD *)(v50 + 48) = a1[v48 + 3].n128_u16[0];
        *(_QWORD *)(v50 + 64) = 0;
        *(_QWORD *)(v50 + 72) = 0;
        *(_QWORD *)(v50 + 56) = 0;
        *(__n128 *)(v50 + 56) = *(__n128 *)((char *)&a1[v48 + 3] + 8);
        *(_QWORD *)(v50 + 72) = a1[v48 + 4].n128_u64[1];
        v51[3].n128_u64[1] = 0;
        v51[4].n128_u64[0] = 0;
        v51[4].n128_u64[1] = 0;
        ++v49;
        v48 += 5;
      }
      while (&v51[5] != a2);
      v69 = v49;
      if (v48 * 16)
      {
        v53 = (uint64_t)a1;
        v54 = (__int128 *)a7;
        v55 = (__int128 *)(a7 + v48 * 16);
        v56 = a7 + v48 * 16 - 80;
        while (a2 != a3)
        {
          if ((*a4)(a2, (__n128 *)v54))
          {
            sub_20BA1EDC0(v53, (__int128 *)a2);
            a2 += 5;
          }
          else
          {
            sub_20BA1EDC0(v53, v54);
            v54 += 5;
          }
          v53 += 80;
          if (v55 == v54)
            goto LABEL_92;
        }
        if (v55 != v54)
        {
          v59 = 0;
          do
          {
            sub_20BA1EDC0(v53 + v59 * 16, &v54[v59]);
            v59 += 5;
          }
          while ((__int128 *)v56 != &v54[v59 - 5]);
        }
      }
      goto LABEL_92;
    }
  }
  else if (a3 != a2)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      v41 = a7 + v39 * 16;
      v42 = &a2[v39];
      v43 = a2[v39];
      *(_QWORD *)(v41 + 16) = a2[v39 + 1].n128_u64[0];
      *(__n128 *)v41 = v43;
      v42->n128_u64[1] = 0;
      v42[1].n128_u64[0] = 0;
      v42->n128_u64[0] = 0;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0;
      *(_QWORD *)(v41 + 40) = 0;
      *(__n128 *)(v41 + 24) = *(__n128 *)((char *)&a2[v39 + 1] + 8);
      *(_QWORD *)(v41 + 40) = a2[v39 + 2].n128_u64[1];
      v42[2].n128_u64[0] = 0;
      v42[2].n128_u64[1] = 0;
      v42[1].n128_u64[1] = 0;
      *(_WORD *)(v41 + 48) = a2[v39 + 3].n128_u16[0];
      *(_QWORD *)(v41 + 64) = 0;
      *(_QWORD *)(v41 + 72) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(__n128 *)(v41 + 56) = *(__n128 *)((char *)&a2[v39 + 3] + 8);
      *(_QWORD *)(v41 + 72) = a2[v39 + 4].n128_u64[1];
      v42[3].n128_u64[1] = 0;
      v42[4].n128_u64[0] = 0;
      v42[4].n128_u64[1] = 0;
      ++v40;
      v39 += 5;
    }
    while (&v42[5] != a3);
    v69 = v40;
    if (v39 * 16)
    {
      v44 = a7 + v39 * 16;
      v45 = (uint64_t)&a3[-5];
      while (a2 != a1)
      {
        v46 = (*a4)((__n128 *)(v44 - 80), a2 - 5);
        if (v46)
          v47 = (__int128 *)&a2[-5];
        else
          v47 = (__int128 *)(v44 - 80);
        if (v46)
          a2 -= 5;
        else
          v44 -= 80;
        sub_20BA1EDC0(v45, v47);
        v45 -= 80;
        if (v44 == a7)
          goto LABEL_92;
      }
      v57 = 0;
      do
      {
        v58 = v45 + v57;
        v57 -= 80;
        sub_20BA1EDC0(v58, (__int128 *)(v44 + v57));
      }
      while (v44 + v57 != a7);
    }
    goto LABEL_92;
  }
  v69 = 0;
LABEL_92:
  if (a7)
    sub_20BA1EE58(&v69, a7);
}

void sub_20BA1ED04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint64_t v18;

  if (v18)
    sub_20BA1EE58(&a18, v18);
  _Unwind_Resume(exception_object);
}

__n128 sub_20BA1ED24(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  v4 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v4;
  *a2 = result;
  a2[1].n128_u64[0] = v2;
  v5 = a1[1].n128_u64[1];
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v5;
  v6 = a1[2].n128_u64[0];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v6;
  v7 = a1[2].n128_u64[1];
  a1[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v7;
  LOWORD(v7) = a1[3].n128_u16[0];
  a1[3].n128_u16[0] = a2[3].n128_u16[0];
  a2[3].n128_u16[0] = v7;
  v8 = a1[3].n128_u64[1];
  a1[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v8;
  v9 = a1[4].n128_u64[0];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v9;
  v10 = a1[4].n128_u64[1];
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = v10;
  return result;
}

__n128 sub_20BA1EDC0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void *v5;
  __n128 result;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  sub_20B824BE4(a1 + 24, (__n128 *)((char *)a2 + 24));
  v5 = *(void **)(a1 + 56);
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  return result;
}

void sub_20BA1EE58(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  if (*a1)
  {
    v3 = 0;
    v4 = (_QWORD *)(a2 + 32);
    do
    {
      v5 = (void *)v4[3];
      if (v5)
      {
        v4[4] = v5;
        operator delete(v5);
      }
      v6 = (void *)*(v4 - 1);
      if (v6)
      {
        *v4 = v6;
        operator delete(v6);
      }
      if (*((char *)v4 - 9) < 0)
        operator delete((void *)*(v4 - 4));
      ++v3;
      v4 += 10;
    }
    while (v3 < *a1);
  }
}

uint64_t *sub_20BA1EED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFArrayRef *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  *a5 = (uint64_t)&unk_24C499568;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  return sub_20BA1EF50(a5, a1, a2, a3, a4);
}

void sub_20BA1EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  void **v13;

  v13 = v11;
  *v10 = v12;
  a10 = v13;
  sub_20B88DF54(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BA1EF50(uint64_t *result, uint64_t a2, uint64_t a3, CFArrayRef *a4, int a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v9 = result;
    v10 = result + 1;
    v11 = (*(uint64_t (**)(uint64_t *))(*result + 24))(result);
    sub_20BA06BA4(v10, v11 + a3);
    v12 = 0;
    while (1)
    {
      v14[0] = &off_24C4AEBC0;
      v14[1] = v9;
      v15 = v14;
      sub_20BA1F284(v11 + v12, a2, a3, v12, a4, (uint64_t)v14, a5);
      result = v15;
      if (v15 == v14)
        break;
      if (v15)
      {
        v13 = 5;
LABEL_7:
        result = (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v13))();
      }
      if (a3 == ++v12)
        return result;
    }
    result = v14;
    v13 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_20BA1F068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20BA1F0A4(CFArrayRef theArray@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = (uint64_t)&unk_24C499568;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  sub_20BA1F11C(a3, theArray, a2);
}

void sub_20BA1F0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  *v2 = v4;
  sub_20B88DF54((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20BA1F11C(uint64_t *a1, CFArrayRef theArray, int a3)
{
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v7 = Count;
    v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    sub_20BA06BA4(a1 + 1, v8 + v7);
    if (v7 >= 1)
    {
      v9 = 0;
      while (1)
      {
        v10 = (_QWORD *)*((_QWORD *)CFArrayGetValueAtIndex(theArray, v9) + 3);
        v13[0] = &off_24C4AEC40;
        v13[1] = a1;
        v14 = v13;
        sub_20BA1F57C(v8 + v9, v10, v9, (uint64_t)v13, a3);
        v11 = v14;
        if (v14 == v13)
          break;
        if (v14)
        {
          v12 = 5;
LABEL_8:
          (*(void (**)(void))(*v11 + 8 * v12))();
        }
        if (v7 == ++v9)
          return;
      }
      v11 = v13;
      v12 = 4;
      goto LABEL_8;
    }
  }
}

void sub_20BA1F240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20BA1F284(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, CFArrayRef *a5, uint64_t a6, int a7)
{
  char *v12;
  char *i;
  __int128 v14;
  void **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  double v19;
  int v20;
  double v21;
  double v22;
  const UInt8 *v23;
  unsigned __int16 v24;
  unint64_t v25;
  double v26;
  float *v27;
  int v28;
  unsigned __int16 v29;
  double v30;
  double v31;
  int v32;
  void *__p[2];
  uint64_t v34;
  char *v35;
  char *v36;
  unsigned __int16 v37;

  v37 = *(_WORD *)(a2 + 2 * a4);
  sub_20BA1FC9C(*(_QWORD *)(a6 + 24), a1, (uint64_t)&v37, 1, 0.0);
  if (a7)
  {
    sub_20B9DF27C(v37, (uint64_t *)&v35);
    v12 = v35;
    for (i = v36; v12 != i; v12 += 24)
    {
      if (v12[23] < 0)
      {
        sub_20B88DD4C(__p, *(void **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v14 = *(_OWORD *)v12;
        v34 = *((_QWORD *)v12 + 2);
        *(_OWORD *)__p = v14;
      }
      if (v34 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (v34 >= 0)
        v16 = HIBYTE(v34);
      else
        v16 = (uint64_t)__p[1];
      sub_20BA1FC9C(*(_QWORD *)(a6 + 24), a1, (uint64_t)v15, v16, 0.0);
      if (SHIBYTE(v34) < 0)
        operator delete(__p[0]);
    }
    __p[0] = &v35;
    sub_20B83AFD0((void ***)__p);
  }
  else
  {
    sub_20B9DEFF4(v37, &v35);
    v17 = v35;
    v18 = v36;
    if (v35 != v36)
    {
      do
      {
        LOWORD(__p[0]) = *(_WORD *)v17;
        if (v37 == LOWORD(__p[0]))
          v19 = 0.0;
        else
          v19 = -2.7000001;
        sub_20BA1FC9C(*(_QWORD *)(a6 + 24), a1, (uint64_t)__p, 1, v19);
        v17 += 2;
      }
      while (v17 != v18);
      v17 = v35;
    }
    if (v17)
    {
      v36 = v17;
      operator delete(v17);
    }
  }
  if (a5)
  {
    v20 = sub_20B9DE93C(v37);
    v21 = -0.2;
    if (a4 >= 0x28)
      v21 = 0.0;
    v22 = a4 >= 0x14 ? v21 : -1.0;
    v23 = sub_20B951B88(a5, a4);
    if (v23)
    {
      v24 = *(_WORD *)v23;
      if (*(_WORD *)v23)
      {
        v25 = 0;
        v26 = *((float *)v23 + 1);
        v27 = (float *)(v23 + 8);
        do
        {
          LOWORD(v35) = v24;
          if (v20)
            v28 = sub_20B9DE93C(v24) ^ 1;
          else
            LOBYTE(v28) = 0;
          v29 = (v24 & 0xFFDF) - 91;
          if ((unsigned __int16)(v24 - 12644) < 0xFFCDu)
            LOBYTE(v28) = 1;
          if ((v29 > 0xFFE5u || (v28 & 1) == 0) && v37 != v24)
          {
            v30 = *(v27 - 1) - v26;
            if (v30 >= v22)
            {
              v31 = v30 <= -0.00001 ? v30 * 4.0 + -0.3 : 0.0;
              sub_20BA1FC9C(*(_QWORD *)(a6 + 24), a1, (uint64_t)&v35, 1, v31);
              if (v29 <= 0xFFE5u)
              {
                if (v25 > 1)
                  return;
                ++v25;
              }
            }
          }
          v32 = *(unsigned __int16 *)v27;
          v27 += 2;
          v24 = v32;
        }
        while (v32);
      }
    }
  }
}

void sub_20BA1F530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **p_p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  p_p = &__p;
  sub_20B83AFD0(&p_p);
  _Unwind_Resume(a1);
}

void sub_20BA1F57C(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, int a5)
{
  char *v10;
  char *i;
  __int128 v12;
  void **v13;
  uint64_t v14;
  char *v15;
  char *v16;
  double v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  float *v25;
  int v26;
  int v27;
  double v28;
  unsigned int v30;
  double v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  void *__p[2];
  uint64_t v37;
  char *v38;
  char *v39;
  unsigned __int16 v40;

  v40 = (*(uint64_t (**)(_QWORD *))(*a2 + 8))(a2);
  sub_20BA1FC9C(*(_QWORD *)(a4 + 24), a1, (uint64_t)&v40, 1, 0.0);
  if (a5)
  {
    sub_20B9DF27C(v40, (uint64_t *)&v38);
    v10 = v38;
    for (i = v39; v10 != i; v10 += 24)
    {
      if (v10[23] < 0)
      {
        sub_20B88DD4C(__p, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v12 = *(_OWORD *)v10;
        v37 = *((_QWORD *)v10 + 2);
        *(_OWORD *)__p = v12;
      }
      if (v37 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (v37 >= 0)
        v14 = HIBYTE(v37);
      else
        v14 = (uint64_t)__p[1];
      sub_20BA1FC9C(*(_QWORD *)(a4 + 24), a1, (uint64_t)v13, v14, 0.0);
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
    }
    __p[0] = &v38;
    sub_20B83AFD0((void ***)__p);
  }
  else
  {
    sub_20B9DEFF4(v40, &v38);
    v15 = v38;
    v16 = v39;
    if (v38 != v39)
    {
      do
      {
        LOWORD(__p[0]) = *(_WORD *)v15;
        if (v40 == LOWORD(__p[0]))
          v17 = 0.0;
        else
          v17 = -2.7000001;
        sub_20BA1FC9C(*(_QWORD *)(a4 + 24), a1, (uint64_t)__p, 1, v17);
        v15 += 2;
      }
      while (v15 != v16);
      v15 = v38;
    }
    if (v15)
    {
      v39 = v15;
      operator delete(v15);
    }
  }
  v19 = a2[1];
  v18 = (unsigned __int16 *)a2[2];
  if ((unsigned __int16 *)v19 != v18)
  {
    v20 = sub_20B9DE93C(v40);
    v21 = 0;
    v22 = -0.2;
    if (a3 >= 0x28)
      v22 = 0.0;
    if (a3 >= 0x14)
      v23 = v22;
    else
      v23 = -1.0;
    v24 = *(float *)(v19 + 4);
    v25 = (float *)v19;
    do
    {
      v26 = *(unsigned __int16 *)v25;
      if (v20)
        v27 = sub_20B9DE93C(*(unsigned __int16 *)v25) ^ 1;
      else
        LOBYTE(v27) = 0;
      if ((unsigned __int16)(v26 - 12644) < 0xFFCDu)
        LOBYTE(v27) = 1;
      if ((unsigned __int16)((v26 & 0xFFDF) - 65) < 0x1Au || (v27 & 1) == 0)
      {
        v28 = v25[1] - v24;
        if (v26 != v40 && v28 >= v23)
        {
          v30 = (unsigned __int16)((v26 & 0xFFDF) - 65);
          v31 = v28 <= -0.00001 ? v28 * 4.0 + -0.3 : 0.0;
          sub_20BA1FC9C(*(_QWORD *)(a4 + 24), a1, v19, 1, v31);
          v32 = v21 + 1;
          if (v30 < 0x1A)
          {
            v33 = 1;
          }
          else
          {
            ++v21;
            v33 = v32 >= 3;
          }
          if (v33)
          {
            if (v32 <= 2)
              v34 = 0;
            else
              v34 = 6;
            if (v30 < 0x1A)
              v34 = 7;
            if (v34 != 7 && v34 != 0)
              break;
          }
        }
      }
      v25 += 2;
      v19 += 8;
    }
    while (v25 != (float *)v18);
  }
}

void sub_20BA1F84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **p_p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  p_p = &__p;
  sub_20B83AFD0(&p_p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA1F898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFArrayRef *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)LXLatticeCreateMutable();
  *a5 = result;
  if (a2)
  {
    v11 = 0;
    while (1)
    {
      v13[0] = &off_24C46A3F8;
      v13[1] = a5;
      v14 = v13;
      sub_20BA1F284(v11, a1, a2, v11, a3, (uint64_t)v13, a4);
      result = v14;
      if (v14 == v13)
        break;
      if (v14)
      {
        v12 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
      }
      if (a2 == ++v11)
        return result;
    }
    result = v13;
    v12 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_20BA1F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  const void **v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  sub_20B930A90(v13, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA1F9DC@<X0>(const __CFArray *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  CFIndex Count;
  _QWORD *result;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  result = (_QWORD *)LXLatticeCreateMutable();
  *a3 = result;
  if (Count >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = (_QWORD *)*((_QWORD *)CFArrayGetValueAtIndex(a1, v8) + 3);
      v11[0] = &off_24C46A450;
      v11[1] = a3;
      v12 = v11;
      sub_20BA1F57C(v8, v9, v8, (uint64_t)v11, a2);
      result = v12;
      if (v12 == v11)
        break;
      if (v12)
      {
        v10 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
      }
      if (Count == ++v8)
        return result;
    }
    result = v11;
    v10 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_20BA1FADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  const void **v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  sub_20B930A90(v13, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_20BA1FB2C@<X0>(CFArrayRef theArray@<X0>, uint64_t a2@<X8>)
{
  CFIndex v4;
  CFIndex result;
  _QWORD *v6;
  int v7;
  __int16 v8;
  float *v9;
  unsigned __int16 *v10;
  double v11;
  int v12;
  BOOL v13;
  CFIndex v14;
  CFIndex v15;

  v4 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (1)
  {
    result = CFArrayGetCount(theArray);
    if (v4 >= result)
      return result;
    v6 = (_QWORD *)*((_QWORD *)CFArrayGetValueAtIndex(theArray, v4) + 3);
    v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
    v8 = v7;
    if ((v7 - 12593) > 0x32 || (v9 = (float *)v6[1], v10 = (unsigned __int16 *)v6[2], v9 == (float *)v10))
    {
      sub_20B87C0F8(a2, v7);
      ++v4;
    }
    else
    {
      v11 = v9[1];
      while (1)
      {
        v12 = *(unsigned __int16 *)v9;
        v13 = (unsigned __int16)((v12 & 0xFFDF) - 91) < 0xFFE6u || v12 == v7;
        if (!v13 && v11 - v9[1] < 0.0001)
          break;
        v9 += 2;
        if (v9 == (float *)v10)
          goto LABEL_15;
      }
      sub_20B87C0F8(a2, v12);
LABEL_15:
      v14 = *(unsigned __int8 *)(a2 + 23);
      v15 = v4 + 1;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 8);
      v4 = v14;
      if (v14 != v15)
      {
        sub_20B87C0F8(a2, v8);
        v4 = v15;
      }
    }
  }
}

void sub_20BA1FC6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA1FC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v8 = a2;
  v7 = a5;
  v6 = 1;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, double *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v8, v9, &v7, &v6);
}

void sub_20BA1FCF0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA1FD04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4AEBC0;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA1FD38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4AEBC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BA1FD54(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, uint64_t *a5)
{
  return sub_20B9D0908(*(_QWORD *)(a1 + 8), *a2, *(void **)a3, *(_QWORD *)(a3 + 8), *a5, *a4);
}

uint64_t sub_20BA1FD74(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEC20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA1FDB0()
{
  return &unk_24C4AEC20;
}

void sub_20BA1FDC0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA1FDD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4AEC40;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA1FE08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4AEC40;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BA1FE24(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, uint64_t *a5)
{
  return sub_20B9D0908(*(_QWORD *)(a1 + 8), *a2, *(void **)a3, *(_QWORD *)(a3 + 8), *a5, *a4);
}

uint64_t sub_20BA1FE44(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AECA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA1FE80()
{
  return &unk_24C4AECA0;
}

void sub_20BA1FE90()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA1FEA4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A3F8;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA1FED8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A3F8;
  a2[1] = v2;
  return result;
}

void sub_20BA1FEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3;

  v3 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, *(_QWORD *)(a3 + 8));
  LXLatticeAddNode();
  if (v3)
    CFRelease(v3);
}

void sub_20BA1FF68(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA1FF84(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA1FFC0()
{
  return &unk_24C45EE70;
}

void sub_20BA1FFD0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA1FFE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A450;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA20018(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A450;
  a2[1] = v2;
  return result;
}

void sub_20BA20034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3;

  v3 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, *(_QWORD *)(a3 + 8));
  LXLatticeAddNode();
  if (v3)
    CFRelease(v3);
}

void sub_20BA200A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA200C4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA20100()
{
  return &unk_24C45EE80;
}

uint64_t *sub_20BA2010C(uint64_t *a1, uint64_t **a2, _DWORD **a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *__p;
  uint64_t *v34;
  char *v35;
  void *v36;
  char *v37;
  char *v38;

  *a1 = 0;
  v5 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v5[8] = 0;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  __p = 0;
  v34 = 0;
  v35 = 0;
  v8 = *a2;
  v7 = a2[1];
  do
  {
    v9 = v8;
    if (*((char *)v8 + 23) < 0)
      v9 = (uint64_t *)*v8;
    v10 = v37;
    if (v37 >= v38)
    {
      v12 = (v37 - (_BYTE *)v36) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_20B80CDD8();
      v13 = (v38 - (_BYTE *)v36) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if ((unint64_t)(v38 - (_BYTE *)v36) >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_20B800BE8((uint64_t)&v38, v14);
      else
        v15 = 0;
      v16 = &v15[8 * v12];
      *(_QWORD *)v16 = v9;
      v11 = v16 + 8;
      v18 = (char *)v36;
      v17 = v37;
      if (v37 != v36)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v16 - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        v17 = (char *)v36;
      }
      v36 = v16;
      v37 = v11;
      v38 = &v15[8 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v37 = v9;
      v11 = v10 + 8;
    }
    v37 = v11;
    if (*((char *)v8 + 23) < 0)
      v20 = v8[1];
    else
      v20 = *((unsigned __int8 *)v8 + 23);
    v21 = v34;
    if (v34 >= (uint64_t *)v35)
    {
      v23 = __p;
      v24 = v34 - __p;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        sub_20B80CDD8();
      v26 = v35 - (char *)__p;
      if ((v35 - (char *)__p) >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_20B800BE8((uint64_t)&v35, v27);
        v23 = __p;
        v21 = v34;
      }
      else
      {
        v28 = 0;
      }
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v20;
      v22 = v29 + 1;
      while (v21 != v23)
      {
        v30 = *--v21;
        *--v29 = v30;
      }
      __p = v29;
      v35 = &v28[8 * v27];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v34 = v20;
      v22 = v34 + 1;
    }
    v34 = v22;
    v8 += 3;
  }
  while (v8 != v7);
  sub_20B8FCAA0(v6, (v37 - (_BYTE *)v36) >> 3, (unsigned __int8 **)v36, __p, *a3);
  *a1 = v6;
  if (__p)
    operator delete(__p);
  if (v36)
  {
    v37 = (char *)v36;
    operator delete(v36);
  }
  return a1;
}

void sub_20BA20380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BA203BC@<X0>(_QWORD *a1@<X0>, _DWORD **a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;

  if (!a3 || !a4)
    return sub_20B902128(a5, 0);
  v10 = sub_20B902644();
  v11 = *(_QWORD *)(v10 + 8 * (**a2 & 3));
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _DWORD **, _QWORD))(*(_QWORD *)v11 + 16))(v11, *a1, a2, *a3);
  if (a4 >= 2)
  {
    v13 = a4 - 1;
    v14 = a3 + 1;
    do
    {
      if (*(_OWORD *)a5 == 0 || (*(_DWORD *)*a5 & 3) == 0)
        break;
      v15 = *(_QWORD *)(v10 + 8 * (*(_DWORD *)*a5 & 3));
      (*(void (**)(void ***__return_ptr, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)v15 + 16))(&v18, v15, *a1, a5, *v14);
      sub_20B902340((void ***)a5, &v18);
      v16 = v19;
      v19 = 0;
      if (v16)
      {
        v17 = sub_20B8F8AB8(v16);
        MEMORY[0x20BD39CB0](v17, 0x20C4093837F09);
      }
      result = (uint64_t *)v18;
      v18 = 0;
      if (result)
        result = (uint64_t *)MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
      ++v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_20BA20500(_Unwind_Exception *a1)
{
  void ***v1;

  sub_20B8F8A30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA20514(_QWORD *a1, _DWORD **a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_20B902644();
  if (!*a1)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * (**a2 & 3));
  return (*(uint64_t (**)(uint64_t, _QWORD, _DWORD **))(*(_QWORD *)v5 + 40))(v5, *a1, a2);
}

uint64_t BurstTrieCompile(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::locale::id *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  _BYTE *v10;
  const char *v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  void *__p;
  char *v28;
  char *v29;
  uint64_t *v30;
  _BYTE *v31;
  unint64_t v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  std::locale v37;
  std::string __dst[17];
  uint64_t v39;
  char v40[1024];
  _QWORD v41[2];
  _BYTE v42[408];
  _QWORD v43[20];

  v43[19] = *MEMORY[0x24BDAC8D0];
  v36[0] = &off_24C4674A0;
  v36[1] = 0;
  sub_20B8B3F30((uint64_t)v36, "UTF-8", a2);
  sub_20B82EB18(v41);
  v2 = v41[0];
  if ((v42[*(_QWORD *)(v41[0] - 24) + 16] & 5) != 0)
  {
    v3 = 1;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    __p = 0;
    v28 = 0;
    v29 = 0;
    v4 = (std::locale::id *)MEMORY[0x24BEDB350];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(v2 - 24)));
      v5 = std::locale::use_facet(&v37, v4);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v37);
      v6 = (_QWORD *)std::istream::getline();
      if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
        break;
      sub_20B8B21AC(v40, (uint64_t *)&v33, 2uLL);
      if (*((char *)v33 + 23) < 0)
      {
        sub_20B80ACE0(__dst, *(void **)v33, *((_QWORD *)v33 + 1));
      }
      else
      {
        v7 = *v33;
        __dst[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v7;
      }
      sub_20B8B4030((uint64_t)v36, __dst);
      v8 = v31;
      if ((unint64_t)v31 >= v32)
      {
        v10 = (_BYTE *)sub_20B8AD184((uint64_t *)&v30, (__int128 *)__dst);
      }
      else
      {
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20B80ACE0(v31, __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
        }
        else
        {
          v9 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
          *((_QWORD *)v31 + 2) = *((_QWORD *)&__dst[0].__r_.__value_.__l + 2);
          *v8 = v9;
        }
        v10 = (char *)v8 + 24;
      }
      v31 = v10;
      v11 = (char *)v33 + 24;
      if (*((char *)v33 + 47) < 0)
        v11 = *(const char **)v11;
      v12 = atoi(v11);
      v13 = v12;
      v14 = v28;
      if (v28 >= v29)
      {
        v16 = (char *)__p;
        v17 = (v28 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_20B80CDD8();
        v19 = v29 - (_BYTE *)__p;
        if ((v29 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20B8127BC((uint64_t)&v29, v20);
          v16 = (char *)__p;
          v14 = v28;
        }
        else
        {
          v21 = 0;
        }
        v22 = (int *)&v21[4 * v17];
        *v22 = v13;
        v15 = (char *)(v22 + 1);
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *--v22 = v23;
        }
        __p = v22;
        v28 = v15;
        v29 = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v28 = v12;
        v15 = v14 + 4;
      }
      v28 = v15;
      v24 = (uint64_t)v33;
      for (i = v34; i != v24; i -= 24)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      v34 = v24;
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      v2 = v41[0];
    }
    sub_20BA2010C((uint64_t *)&v37, &v30, (_DWORD **)&__p);
    sub_20B851EFC(__dst);
    if ((__dst[1].__r_.__value_.__s.__data_[*(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
    {
      v3 = 1;
    }
    else
    {
      std::ostream::write();
      std::ostream::write();
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)__dst + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__r_.__value_.__r.__words[1]+ *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) | 4);
      v3 = 0;
    }
    __dst[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
    *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words
                              + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
    MEMORY[0x20BD399D4](&__dst[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v39);
    if (v37.__locale_)
      sub_20B969128((void **)v37.__locale_);
    if (__p)
    {
      v28 = (char *)__p;
      operator delete(__p);
    }
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    sub_20B83AFD0((void ***)__dst);
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    sub_20B83AFD0((void ***)__dst);
  }
  v41[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](v42);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](v43);
  sub_20B8B4180(v36);
  return v3;
}

void sub_20BA209F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,void *a23)
{
  uint64_t v24;
  uint64_t v25;

  if (a22.__locale_)
    sub_20B969128((void **)a22.__locale_);
  if (__p)
    operator delete(__p);
  a23 = &a14;
  sub_20B83AFD0((void ***)&a23);
  a23 = &a17;
  sub_20B83AFD0((void ***)&a23);
  v24 = MEMORY[0x24BEDB7E0];
  v25 = *MEMORY[0x24BEDB7E0];
  STACK[0x6A8] = *MEMORY[0x24BEDB7E0];
  *(unint64_t *)((char *)&STACK[0x6A8] + *(_QWORD *)(v25 - 24)) = *(_QWORD *)(v24 + 24);
  MEMORY[0x20BD399D4](&STACK[0x6B8]);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](&STACK[0x850]);
  sub_20B8B4180(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA20B14(uint64_t a1, uint64_t a2, int a3, void *a4, unsigned int a5)
{
  uint64_t v5;
  const void *p_src;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  void *v16;
  uint64_t v17[2];
  void *__src;
  unsigned __int16 v19;
  unsigned __int8 v20;

  LODWORD(v5) = a5;
  if (*(_BYTE *)(a2 + 109) == 1)
  {
    p_src = *(const void **)(a2 + 48);
    v9 = *(unsigned __int16 *)(a2 + 88);
    v10 = v9 >> 1;
    if (!a3 || v9 < 2)
    {
      if (v10 >= a5)
        v5 = a5;
      else
        v5 = v10;
      v11 = (2 * v5);
      goto LABEL_23;
    }
    if (!p_src)
      v10 = 0;
    v17[0] = (uint64_t)p_src;
    v17[1] = v10;
    sub_20B87B938(v17, 0, 0, 0, &__src);
    if ((v20 & 0x80) == 0)
    {
      if (v20 >= v5)
        v5 = v5;
      else
        v5 = v20;
      v11 = (2 * v5);
      p_src = &__src;
      goto LABEL_23;
    }
    if (v19 >= v5)
      v15 = v5;
    else
      v15 = v19;
    v16 = __src;
    memcpy(a4, __src, 2 * v15);
    operator delete(v16);
    return v15;
  }
  else
  {
    __src = 0;
    v12 = (unsigned __int16)sub_20BA20C28(a1, a2, &__src);
    if (v12 >= v5)
      v5 = v5;
    else
      v5 = v12;
    p_src = __src;
    if ((_DWORD)v5)
      v13 = __src == 0;
    else
      v13 = 1;
    if (!v13)
    {
      v11 = 2 * v5;
LABEL_23:
      memcpy(a4, p_src, v11);
    }
  }
  return v5;
}

uint64_t sub_20BA20C28(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  uint64_t result;
  int v5;
  unsigned int v6;

  *a3 = 0;
  v3 = *(unsigned __int16 **)(a2 + 56);
  if (v3)
  {
    *a3 = v3;
    LODWORD(result) = -1;
    do
    {
      v5 = *v3++;
      result = (result + 1);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    return v6 >> 1;
  }
  return result;
}

uint64_t sub_20BA20C80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v18;
  uint64_t v19;
  void *__s1;
  char v22;

  v10 = sub_20BA11000();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 80))(v10, *a2, 2 * a2[1]);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v10, a4) & 1) != 0)
  {
    v22 = 0;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
    v12 = 0;
    while (1)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 56))(v10, v12);
      if (v13)
        break;
LABEL_17:
      if (++v12 > v11)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 336))(v10);
    }
    while (1)
    {
      v14 = *(unsigned __int8 *)(v13 + 109);
      v15 = v14 > 0xA;
      v16 = (1 << v14) & 0x40E;
      if (v15 || v16 == 0)
      {
        if (*(_DWORD *)(v13 + 80))
        {
          if (a2[1] == (unint64_t)*(unsigned __int16 *)(v13 + 90) >> 1)
          {
            __s1 = 0;
            v18 = sub_20BA20C28(a1, v13, &__s1);
            v19 = *(_QWORD *)(a3 + 8);
            if (!v19 || v19 == v18 && !memcmp(__s1, *(const void **)a3, 2 * v19))
            {
              (*(void (**)(uint64_t, uint64_t, char *))(a5 + 16))(a5, v13, &v22);
              if (v22)
                break;
            }
          }
        }
      }
      v13 = *(_QWORD *)(v13 + 24);
      if (!v13)
        goto LABEL_17;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 336))(v10);
}

void sub_20BA20DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA20E24(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  if (result)
  {
    v3 = result;
    v4 = 0;
    result = 0;
    do
    {
      if (*(_QWORD *)(v3 + 48) && *(_WORD *)(v3 + 88))
      {
        ++v4;
        if (a2 && a3 + a2 < (unint64_t)v4)
          return result;
        if (v4 > a3)
          result = (result + *(__int16 *)(v3 + 86));
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20BA20E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 256))(a1, a4 != 0);
  if (a4)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 56))(a1, *(_QWORD *)a4, 2 * *(_QWORD *)(a4 + 8), a5, a6, *(unsigned __int16 *)(a4 + 32), *(unsigned __int16 *)(a4 + 34));
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, 2 * a3, a5, a6);
}

uint64_t sub_20BA20F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned __int8 a4@<W3>, unint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int64x2_t v36;
  unint64_t v37;
  int v38;
  unsigned __int16 *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t i;
  int v43;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int64x2_t v69;
  unint64_t v70;
  int v71;
  unsigned __int16 *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v77;
  unsigned int v78;
  char v79;
  BOOL v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  __int16 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int64x2_t v103;
  unint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  void *__p[2];
  __int128 v110;
  uint64_t v111;
  void *__dst[2];
  uint64_t v113;
  unint64_t v114;
  int64x2_t v115;
  unint64_t v116;
  _QWORD *v117;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  if ((_DWORD)result)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return result;
  }
  v11 = sub_20BA11000();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 176))(v11, 128);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 80))(v11, a2, 2 * a3);
  v12 = (**(uint64_t (***)(uint64_t, uint64_t))a1)(a1, v11);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((v12 & 1) != 0)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v107 = a3;
    v108 = a2;
    v14 = 0;
    if (v13)
    {
      v106 = a4;
      v15 = a4 - 1;
      while ((*(_BYTE *)(v13 + 109) & 0xFE) == 2)
      {
LABEL_67:
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          goto LABEL_94;
      }
      v16 = (unint64_t)*(unsigned __int16 *)(v13 + 88) >> 1;
      v17 = (unint64_t)*(unsigned __int16 *)(v13 + 90) >> 1;
      if ((_DWORD)v16 != (_DWORD)v17)
      {
        v18 = v17 - v16;
        sub_20B877ED0(__p, (void *)(*(_QWORD *)(*(_QWORD *)v13 + 48) + *(unsigned __int16 *)(*(_QWORD *)v13 + 88)), v17 - v16);
        v19 = a5[1];
        v20 = a5[2];
        if (v19 >= v20)
        {
          v22 = (uint64_t)(v19 - *a5) >> 6;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 58)
            sub_20B80CDD8();
          v24 = v20 - *a5;
          if (v24 >> 5 > v23)
            v23 = v24 >> 5;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFC0)
            v25 = 0x3FFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          v117 = a5 + 2;
          if (v25)
            v25 = (unint64_t)sub_20BA2179C(v25);
          else
            v26 = 0;
          v27 = v25 + (v22 << 6);
          v114 = v25;
          v115.i64[0] = v27;
          v116 = v25 + (v26 << 6);
          v28 = *(_OWORD *)__p;
          *(_QWORD *)(v27 + 16) = v110;
          *(_OWORD *)v27 = v28;
          __p[1] = 0;
          *(_QWORD *)&v110 = 0;
          __p[0] = 0;
          *(_DWORD *)(v27 + 24) = -1;
          *(_QWORD *)(v27 + 36) = 0;
          *(_QWORD *)(v27 + 28) = 0;
          *(_DWORD *)(v27 + 44) = 0;
          *(_WORD *)(v27 + 48) = v18;
          *(_WORD *)(v27 + 50) = v18;
          *(_WORD *)(v27 + 52) = v18;
          *(_QWORD *)(v27 + 54) = 0;
          *(_WORD *)(v27 + 62) = 0;
          v29 = v27 + 64;
          v115.i64[1] = v27 + 64;
          v31 = *a5;
          v30 = a5[1];
          v32 = v115.i64[0];
          if (v30 == *a5)
          {
            v36 = vdupq_n_s64(v30);
          }
          else
          {
            do
            {
              v33 = *(_OWORD *)(v30 - 64);
              *(_QWORD *)(v32 - 48) = *(_QWORD *)(v30 - 48);
              *(_OWORD *)(v32 - 64) = v33;
              *(_QWORD *)(v30 - 56) = 0;
              *(_QWORD *)(v30 - 48) = 0;
              *(_QWORD *)(v30 - 64) = 0;
              v34 = *(_OWORD *)(v30 - 40);
              v35 = *(_OWORD *)(v30 - 24);
              *(_QWORD *)(v32 - 8) = *(_QWORD *)(v30 - 8);
              *(_OWORD *)(v32 - 24) = v35;
              *(_OWORD *)(v32 - 40) = v34;
              v32 -= 64;
              v30 -= 64;
            }
            while (v30 != v31);
            v36 = *(int64x2_t *)a5;
            v29 = v115.u64[1];
          }
          *a5 = v32;
          a5[1] = v29;
          v115 = v36;
          v37 = a5[2];
          a5[2] = v116;
          v116 = v37;
          v114 = v36.i64[0];
          sub_20BA217D0((uint64_t)&v114);
          v38 = SBYTE7(v110);
          a5[1] = v29;
          if (v38 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v21 = *(_OWORD *)__p;
          *(_QWORD *)(v19 + 16) = v110;
          *(_OWORD *)v19 = v21;
          *(_DWORD *)(v19 + 24) = -1;
          *(_QWORD *)(v19 + 36) = 0;
          *(_QWORD *)(v19 + 28) = 0;
          *(_DWORD *)(v19 + 44) = 0;
          *(_WORD *)(v19 + 48) = v18;
          *(_WORD *)(v19 + 50) = v18;
          *(_WORD *)(v19 + 52) = v18;
          *(_QWORD *)(v19 + 54) = 0;
          *(_WORD *)(v19 + 62) = 0;
          a5[1] = v19 + 64;
        }
        v14 += v18;
      }
      if (v15 > 1)
        goto LABEL_46;
      if (*(_BYTE *)(v13 + 109) == 1)
      {
LABEL_28:
        sub_20B877ED0(__dst, *(void **)(v13 + 48), (unint64_t)*(unsigned __int16 *)(v13 + 88) >> 1);
LABEL_47:
        v111 = 0;
        *(_OWORD *)__p = 0u;
        v110 = 0u;
        sub_20B93B068((uint64_t)__p, v13, 0, 0);
        WORD4(v110) = WORD5(v110);
        v46 = HIBYTE(v113);
        if (v113 < 0)
          v46 = (__int16)__dst[1];
        WORD6(v110) = v46;
        v47 = a5[1];
        v48 = a5[2];
        if (v47 >= v48)
        {
          v53 = (uint64_t)(v47 - *a5) >> 6;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 58)
            sub_20B80CDD8();
          v55 = v48 - *a5;
          if (v55 >> 5 > v54)
            v54 = v55 >> 5;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFC0)
            v56 = 0x3FFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          v117 = a5 + 2;
          if (v56)
            v56 = (unint64_t)sub_20BA2179C(v56);
          else
            v57 = 0;
          v58 = v56 + (v53 << 6);
          v114 = v56;
          v115.i64[0] = v58;
          v116 = v56 + (v57 << 6);
          v59 = *(_OWORD *)__dst;
          *(_QWORD *)(v58 + 16) = v113;
          *(_OWORD *)v58 = v59;
          __dst[1] = 0;
          v113 = 0;
          __dst[0] = 0;
          v60 = v111;
          v61 = *(_OWORD *)__p;
          *(_OWORD *)(v58 + 40) = v110;
          *(_QWORD *)(v58 + 56) = v60;
          *(_OWORD *)(v58 + 24) = v61;
          v62 = v58 + 64;
          v115.i64[1] = v58 + 64;
          v64 = *a5;
          v63 = a5[1];
          v65 = v115.i64[0];
          if (v63 == *a5)
          {
            v69 = vdupq_n_s64(v63);
          }
          else
          {
            do
            {
              v66 = *(_OWORD *)(v63 - 64);
              *(_QWORD *)(v65 - 48) = *(_QWORD *)(v63 - 48);
              *(_OWORD *)(v65 - 64) = v66;
              *(_QWORD *)(v63 - 56) = 0;
              *(_QWORD *)(v63 - 48) = 0;
              *(_QWORD *)(v63 - 64) = 0;
              v67 = *(_OWORD *)(v63 - 40);
              v68 = *(_OWORD *)(v63 - 24);
              *(_QWORD *)(v65 - 8) = *(_QWORD *)(v63 - 8);
              *(_OWORD *)(v65 - 24) = v68;
              *(_OWORD *)(v65 - 40) = v67;
              v65 -= 64;
              v63 -= 64;
            }
            while (v63 != v64);
            v69 = *(int64x2_t *)a5;
            v62 = v115.u64[1];
          }
          *a5 = v65;
          a5[1] = v62;
          v115 = v69;
          v70 = a5[2];
          a5[2] = v116;
          v116 = v70;
          v114 = v69.i64[0];
          sub_20BA217D0((uint64_t)&v114);
          v71 = SHIBYTE(v113);
          a5[1] = v62;
          v52 = WORD5(v110);
          if (v71 < 0)
            operator delete(__dst[0]);
        }
        else
        {
          v49 = *(_OWORD *)__dst;
          *(_QWORD *)(v47 + 16) = v113;
          *(_OWORD *)v47 = v49;
          v50 = v111;
          v51 = v110;
          *(_OWORD *)(v47 + 24) = *(_OWORD *)__p;
          *(_OWORD *)(v47 + 40) = v51;
          *(_QWORD *)(v47 + 56) = v50;
          a5[1] = v47 + 64;
          v52 = WORD5(v110);
        }
        v14 += v52;
        goto LABEL_67;
      }
      v39 = *(unsigned __int16 **)(v13 + 48);
      v40 = v39 ? (unint64_t)*(unsigned __int16 *)(v13 + 88) >> 1 : 0;
      if (!*(_BYTE *)(v13 + 110))
      {
LABEL_46:
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(__dst, a1, v13);
        goto LABEL_47;
      }
      if (*(_BYTE *)(v13 + 110) == 5)
      {
        if (!v40)
          goto LABEL_28;
        v41 = 0;
        for (i = 0; i != v40; v41 = i >= v40)
        {
          v43 = v39[i];
          if ((v43 - 12353) >= 0x56 && v43 != 12540 && v43 != 12316)
            break;
          ++i;
        }
        if (v41)
          goto LABEL_28;
        goto LABEL_46;
      }
      if (v106 == 1)
      {
        v72 = *(unsigned __int16 **)(v13 + 48);
        v73 = v40;
        if (!v40)
          goto LABEL_28;
        while (1)
        {
          v75 = *v72++;
          v74 = v75;
          if (!(v75 <= 0x7FuLL ? *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v74 + 60) & 0x40000 : __maskrune(v74, 0x40000uLL)))break;
          if (!--v73)
            goto LABEL_28;
        }
      }
      if (!v40)
        goto LABEL_28;
      v77 = 2 * v40;
      while (1)
      {
        v78 = *v39;
        if (v78 <= 0xA0 && (unsigned __int16)(v78 - 33) > 0x5Du)
          break;
        v80 = (unsigned __int16)((v78 & 0xFFDF) - 91) < 0xFFE6u;
        v81 = (unsigned __int16)(v78 + 255);
        v83 = (unsigned __int16)(v78 + 165) < 0xFFE6u;
        v82 = (unsigned __int16)(v78 + 197);
        v83 = v83 && v82 < 0xFFE6;
        v79 = v83;
        if (v81 > 0x64)
          v79 = 0;
        if (!v80)
          goto LABEL_91;
LABEL_92:
        ++v39;
        v77 -= 2;
        if (!v77)
          goto LABEL_28;
      }
      v79 = 0;
LABEL_91:
      if ((v79 & 1) == 0)
        goto LABEL_46;
      goto LABEL_92;
    }
LABEL_94:
    v84 = v107 - v14;
    if (v107 > v14)
    {
      if (v108)
        v85 = v107 - v14;
      else
        v85 = 0;
      sub_20B877ED0(__p, (void *)(v108 + 2 * v14), v85);
      v86 = a5[2];
      v87 = a5[1];
      if (v87 >= v86)
      {
        v89 = (uint64_t)(v87 - *a5) >> 6;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 58)
          sub_20B80CDD8();
        v91 = v86 - *a5;
        if (v91 >> 5 > v90)
          v90 = v91 >> 5;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFC0)
          v92 = 0x3FFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        v117 = a5 + 2;
        if (v92)
          v92 = (unint64_t)sub_20BA2179C(v92);
        else
          v93 = 0;
        v94 = v92 + (v93 << 6);
        v116 = v94;
        v95 = *(_OWORD *)__p;
        v96 = v92 + (v89 << 6);
        *(_QWORD *)(v96 + 16) = v110;
        *(_OWORD *)v96 = v95;
        __p[1] = 0;
        *(_QWORD *)&v110 = 0;
        __p[0] = 0;
        *(_DWORD *)(v96 + 24) = -1;
        *(_QWORD *)(v96 + 36) = 0;
        *(_QWORD *)(v96 + 28) = 0;
        *(_DWORD *)(v96 + 44) = 0;
        *(_WORD *)(v96 + 48) = v84;
        *(_WORD *)(v96 + 50) = v84;
        *(_WORD *)(v96 + 52) = v84;
        *(_QWORD *)(v96 + 54) = 0;
        *(_WORD *)(v96 + 62) = 0;
        v97 = v96 + 64;
        v115.i64[1] = v96 + 64;
        v99 = *a5;
        v98 = a5[1];
        if (v98 == *a5)
        {
          v103 = vdupq_n_s64(v98);
        }
        else
        {
          do
          {
            v100 = *(_OWORD *)(v98 - 64);
            *(_QWORD *)(v96 - 48) = *(_QWORD *)(v98 - 48);
            *(_OWORD *)(v96 - 64) = v100;
            *(_QWORD *)(v98 - 56) = 0;
            *(_QWORD *)(v98 - 48) = 0;
            *(_QWORD *)(v98 - 64) = 0;
            v101 = *(_OWORD *)(v98 - 40);
            v102 = *(_OWORD *)(v98 - 24);
            *(_QWORD *)(v96 - 8) = *(_QWORD *)(v98 - 8);
            *(_OWORD *)(v96 - 24) = v102;
            *(_OWORD *)(v96 - 40) = v101;
            v96 -= 64;
            v98 -= 64;
          }
          while (v98 != v99);
          v103 = *(int64x2_t *)a5;
          v97 = v115.u64[1];
          v94 = v116;
        }
        *a5 = v96;
        a5[1] = v97;
        v115 = v103;
        v104 = a5[2];
        a5[2] = v94;
        v116 = v104;
        v114 = v103.i64[0];
        sub_20BA217D0((uint64_t)&v114);
        v105 = SBYTE7(v110);
        a5[1] = v97;
        if (v105 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v88 = *(_OWORD *)__p;
        *(_QWORD *)(v87 + 16) = v110;
        *(_OWORD *)v87 = v88;
        *(_DWORD *)(v87 + 24) = -1;
        *(_QWORD *)(v87 + 36) = 0;
        *(_QWORD *)(v87 + 28) = 0;
        *(_DWORD *)(v87 + 44) = 0;
        *(_WORD *)(v87 + 48) = v84;
        *(_WORD *)(v87 + 50) = v84;
        *(_WORD *)(v87 + 52) = v84;
        *(_QWORD *)(v87 + 54) = 0;
        *(_WORD *)(v87 + 62) = 0;
        a5[1] = v87 + 64;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 336))(v11);
}

void sub_20BA21720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a18 < 0)
    operator delete(__p);
  sub_20B8CD7B8((void ***)&__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 336))(v27);
  _Unwind_Resume(a1);
}

void *sub_20BA2179C(unint64_t a1)
{
  if (a1 >> 58)
    sub_20B800BC0();
  return operator new(a1 << 6);
}

uint64_t sub_20BA217D0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 8;
      *(_QWORD *)(a1 + 16) = v2 - 8;
      if (*((char *)v2 - 41) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BA21830(uint64_t a1@<X0>, uint64_t a2@<X1>, CFArrayRef *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = (uint64_t)&unk_24C499568;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  sub_20BA218AC(a4, a1, a2, a3);
}

void sub_20BA2188C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  *v2 = v4;
  sub_20B88DF54((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20BA218AC(uint64_t *a1, uint64_t a2, uint64_t a3, CFArrayRef *a4)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t i;
  int v9;
  unsigned __int8 v10;
  unsigned __int16 *v11;
  int v13;
  double v14;
  char v15;
  double v16;
  double v17;
  const UInt8 *v18;
  int v19;
  unint64_t v20;
  double v21;
  float *v22;
  double v23;
  double v25;
  int v27;
  _DWORD *v28;
  unsigned __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;

  if (a3)
  {
    v6 = a1 + 1;
    v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    sub_20BA06BA4(v6, v7 + a3);
    for (i = 0; i != a3; ++i)
    {
      v32 = *(_WORD *)(a2 + 2 * i);
      sub_20BA21D14(*v6, i + v7, &v32, 0.0);
      v31 = 0;
      v9 = v32;
      v10 = atomic_load((unsigned __int8 *)&qword_25472C370);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25472C370))
      {
        qword_25472C378 = 0;
        qword_25472C380 = 0;
        qword_25472C388 = 0;
        v28 = operator new(0x14uLL);
        qword_25472C378 = (uint64_t)v28;
        *(_OWORD *)v28 = xmmword_20BA62380;
        v28[4] = 237309475;
        qword_25472C380 = (uint64_t)(v28 + 5);
        qword_25472C388 = (uint64_t)(v28 + 5);
        __cxa_atexit((void (*)(void *))sub_20BA21E88, &qword_25472C378, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472C370);
      }
      v11 = (unsigned __int16 *)qword_25472C378;
      if (qword_25472C378 != qword_25472C380)
      {
        while (*v11 != v9 && v11[1] != v9)
        {
          v11 += 2;
          if (v11 == (unsigned __int16 *)qword_25472C380)
            goto LABEL_15;
        }
      }
      if (v11 == (unsigned __int16 *)qword_25472C380)
      {
LABEL_15:
        v13 = 0;
      }
      else
      {
        if (*v11 == v9)
          ++v11;
        v13 = *v11;
      }
      v31 = v13;
      v14 = dbl_20BA62390[v32 == v13];
      v15 = v13 != 0;
      if (a4)
      {
        if (i >= 0x28)
          v16 = 0.0;
        else
          v16 = -0.2;
        if (i >= 0x14)
          v17 = v16;
        else
          v17 = -1.0;
        v18 = sub_20B951B88(a4, i);
        if (!v18)
        {
LABEL_38:
          if ((v15 & 1) == 0)
            continue;
LABEL_41:
          sub_20BA21D14(*v6, i + v7, &v31, v14);
          continue;
        }
        v19 = *(unsigned __int16 *)v18;
        if (*(_WORD *)v18)
        {
          v20 = 0;
          v21 = *((float *)v18 + 1);
          v22 = (float *)(v18 + 8);
          while (1)
          {
            v30 = v19;
            v23 = *(v22 - 1) - v21;
            if (v19 != v32 && v23 >= v17)
            {
              v25 = v23 * 4.0 + -0.3;
              if (v25 < v14 && v19 == v31)
                v25 = v14;
              v15 &= v19 != v31;
              sub_20BA21D14(*v6, i + v7, &v30, v25);
              if (v20 > 1)
                goto LABEL_38;
              ++v20;
            }
            v27 = *(unsigned __int16 *)v22;
            v22 += 2;
            v19 = v27;
            if (!v27)
              goto LABEL_38;
          }
        }
      }
      if (v13)
        goto LABEL_41;
    }
  }
}

void sub_20BA21B74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C370);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA21B8C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  _WORD __src[5];

  *a3 = &unk_24C499568;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  if (a2)
  {
    v7 = result;
    sub_20BA06BA4(a3 + 1, a2);
    v8 = 0;
    v9 = a4 / (float)a2;
    do
    {
      __src[0] = *(_WORD *)(v7 + 2 * v8);
      result = sub_20BA21C5C((uint64_t)a3, v8++, __src, 1, 1, v9);
    }
    while (a2 != v8);
  }
  return result;
}

void sub_20BA21C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *v2 = v3 + 16;
  sub_20B88DF54((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA21C5C(uint64_t a1, uint64_t a2, void *__src, int a4, int a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  int v14;
  float v15;
  int v16;
  void *v17;

  v17 = __src;
  v16 = a4;
  v15 = a6;
  v14 = a5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 24 * a2;
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v10 = (_QWORD *)(v7 + 8);
  if (v9 >= v8)
  {
    result = sub_20BA21EB8((uint64_t *)(v6 + 24 * a2), &v17, &v16, &v15, &v14);
  }
  else
  {
    sub_20B877ED0((_QWORD *)v9, __src, a4);
    *(double *)(v9 + 24) = a6;
    *(_QWORD *)(v9 + 32) = a5;
    result = v9 + 40;
    *v10 = v9 + 40;
  }
  *v10 = result;
  return result;
}

void sub_20BA21D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_20BA21D14(uint64_t a1, uint64_t a2, unsigned __int16 *a3, double a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  char *v20;
  double *v21;
  double *v22;
  char *v23;
  _QWORD *v24;

  v7 = a1 + 24 * a2;
  v10 = *(_QWORD *)(v7 + 8);
  v9 = (uint64_t *)(v7 + 8);
  v8 = v10;
  result = (uint64_t)(v9 + 1);
  v12 = v9[1];
  if (v10 >= v12)
  {
    v14 = (uint64_t *)(a1 + 24 * a2);
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *v14) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0x666666666666666)
      sub_20B80CDD8();
    if (0x999999999999999ALL * ((uint64_t)(v12 - *v14) >> 3) > v16)
      v16 = 0x999999999999999ALL * ((uint64_t)(v12 - *v14) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v14) >> 3) >= 0x333333333333333)
      v17 = 0x666666666666666;
    else
      v17 = v16;
    v24 = v9 + 1;
    if (v17)
      v18 = (char *)sub_20B882310(result, v17);
    else
      v18 = 0;
    v20 = v18;
    v21 = (double *)&v18[40 * v15];
    v22 = v21;
    v23 = &v18[40 * v17];
    sub_20B877ED0(v21, a3, 1uLL);
    v19 = v21;
    v21[3] = a4;
    *((_QWORD *)v19 + 4) = 1;
    v22 += 5;
    sub_20B9D0AF4(v14, &v20);
    v13 = *v9;
    result = sub_20B9D0CC0((uint64_t)&v20);
  }
  else
  {
    *(_BYTE *)(v8 + 23) = 1;
    *(_DWORD *)v8 = *a3;
    *(double *)(v8 + 24) = a4;
    *(_QWORD *)(v8 + 32) = 1;
    v13 = v8 + 40;
    *v9 = v8 + 40;
  }
  *v9 = v13;
  return result;
}

void sub_20BA21E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9D0CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA21E88(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20BA21EB8(uint64_t *a1, void **a2, int *a3, float *a4, int *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  float v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  char *v22;
  double *v23;
  double *v24;
  char *v25;
  uint64_t *v26;

  v6 = *a1;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666)
    sub_20B80CDD8();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v6) >> 3);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v8;
  v26 = a1 + 2;
  if (v15)
    v16 = (char *)sub_20B882310(v13, v15);
  else
    v16 = 0;
  v22 = v16;
  v23 = (double *)&v16[40 * v7];
  v24 = v23;
  v25 = &v16[40 * v15];
  v17 = *a4;
  v18 = *a5;
  sub_20B877ED0(v23, *a2, *a3);
  v19 = v23;
  v23[3] = v17;
  *((_QWORD *)v19 + 4) = v18;
  v24 += 5;
  sub_20B9D0AF4(a1, &v22);
  v20 = a1[1];
  sub_20B9D0CC0((uint64_t)&v22);
  return v20;
}

void sub_20BA21FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9D0CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA22000(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFURLRef v15;
  const __CFNumber *v16;
  const __CFString *v17;
  CFURLRef v18;
  const __CFString *v19;
  CFURLRef v20;
  const void *v21;
  const void *v22;
  const __CFNumber *v23;
  uint64_t valuePtr;

  *(_DWORD *)a1 = 0;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationLearningEnabledKey[0]);
  *(_BYTE *)(a1 + 4) = sub_20B8D2794(Value, 1);
  v5 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationDynamicLanguageModelEnabledKey[0]);
  *(_BYTE *)(a1 + 5) = sub_20B8D2794(v5, 1);
  v6 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationUseSpecialSymbolKey[0]);
  *(_BYTE *)(a1 + 6) = sub_20B8D2794(v6, 0);
  v7 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationSyncLearningDataKey[0]);
  *(_BYTE *)(a1 + 7) = sub_20B8D2794(v7, 1);
  v8 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationLiteModeKey[0]);
  *(_BYTE *)(a1 + 8) = sub_20B8D2794(v8, 0);
  v9 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationEnableABTestingKey[0]);
  *(_BYTE *)(a1 + 9) = sub_20B8D2794(v9, 0);
  v10 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationEnableUnilmKey[0]);
  *(_BYTE *)(a1 + 10) = sub_20B8D2794(v10, 0);
  v11 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationUseMontrealLanguageModelKey[0]);
  *(_BYTE *)(a1 + 11) = sub_20B8D2794(v11, 0);
  v12 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomSystemDictionaryDirectoryKey[0]);
  *(_QWORD *)(a1 + 16) = sub_20B8D2878(v12);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomStaticLanguageModelBundleKey[0]);
  *(_QWORD *)(a1 + 40) = sub_20B8D2878(v13);
  v14 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomStaticDialectLanguageModelBundleKey[0]);
  v15 = sub_20B8D2878(v14);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 72) = 0;
  valuePtr = 0;
  v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, kMecabraCreationInputMethodTypeKey[0]);
  if (v16)
  {
    CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
    *(_DWORD *)a1 = valuePtr;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    *(_WORD *)(a1 + 4) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 4))
    {
      v17 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomLearningDictionaryDirectoryKey[0]);
      v18 = sub_20B8D2878(v17);
      sub_20B876164((const void **)(a1 + 24), v18);
      *(_BYTE *)(a1 + 4) = *(_QWORD *)(a1 + 24) != 0;
    }
    if (*(_BYTE *)(a1 + 5))
    {
      v19 = (const __CFString *)CFDictionaryGetValue(theDict, kMecabraCreationCustomDynamicLanguageModelDirectoryKey[0]);
      v20 = sub_20B8D28F4(v19);
      sub_20B876164((const void **)(a1 + 56), v20);
    }
  }
  v21 = CFDictionaryGetValue(theDict, kMecabraCreationCustomAdditionalDictionaryDirectoriesKey[0]);
  if (v21)
    sub_20B8A0168((const void **)(a1 + 32), v21);
  v22 = CFDictionaryGetValue(theDict, kMecabraCreationSecondaryLocaleKey[0]);
  if (v22)
    sub_20B88B52C((const void **)(a1 + 64), v22);
  v23 = (const __CFNumber *)CFDictionaryGetValue(theDict, kMecabraCreationWubixingStandardKey[0]);
  if (v23)
  {
    CFNumberGetValue(v23, kCFNumberCFIndexType, &valuePtr);
    *(_DWORD *)(a1 + 72) = valuePtr;
  }
  return a1;
}

void sub_20BA22320(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  const void **v3;
  const void **v4;
  const void **v5;
  const void **v6;

  sub_20B87E150(v6, 0);
  sub_20B876164(v5, 0);
  sub_20B876164((const void **)(v1 + 48), 0);
  sub_20B876164(v2 + 3, 0);
  sub_20B88B74C(v4, 0);
  sub_20B876164(v3, 0);
  sub_20B876164(v2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA223A0(uint64_t a1, const __CFString *a2)
{
  const void **v4;
  __CFDictionary *Mutable;
  const void *v6;
  uint64_t v8;
  const void *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = CFLocaleCreate(0, a2);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (const void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F198], a2);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F190], (const void *)*MEMORY[0x24BDBD270]);
  v6 = (const void *)LXLexiconCreate();
  sub_20B8E7698((const void **)(a1 + 8), v6);
  if (*v4)
  {
    v8 = operator new();
    v9 = *v4;
    *(_QWORD *)v8 = off_24C4AECC0;
    *(_QWORD *)(v8 + 8) = 0;
    if (v9)
    {
      CFRetain(v9);
      sub_20B8E7698((const void **)(v8 + 8), v9);
    }
    v10 = (_QWORD *)operator new();
    *v10 = off_24C4AEDC8;
    v10[1] = 0;
    v10[2] = v8;
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  }
  else
  {
    sub_20B8E7698((const void **)(a1 + 8), 0);
  }
  if (Mutable)
    CFRelease(Mutable);
  return a1;
}

void sub_20BA2252C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void **v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  sub_20B8CE418((const void **)va, 0);
  v5 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  sub_20B8E7698(v3, 0);
  sub_20B8B0328((const void **)v2, 0);
  _Unwind_Resume(a1);
}

const void ***sub_20BA22588(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const void ***result;
  uint64_t v6;
  _QWORD v7[3];
  const void ***v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = *(const void ****)(a1 + 16);
  if (result)
  {
    v7[0] = &off_24C4AF108;
    v7[1] = a1;
    v7[2] = a4;
    v8 = (const void ***)v7;
    sub_20BA23D00(result, a2, (uint64_t)v7, 0, a3);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = (const void ***)v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (const void ***)((uint64_t (*)(void))(*result)[v6])();
  }
  return result;
}

void sub_20BA22630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

const void ***sub_20BA2266C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  const void ***result;
  uint64_t v7;
  _QWORD v8[3];
  const void ***v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = *(const void ****)(a1 + 16);
  if (result)
  {
    v8[0] = &off_24C4AF208;
    v8[1] = a1;
    v8[2] = a4;
    v9 = (const void ***)v8;
    sub_20BA22748(result, a2, a3, (uint64_t)v8, a5);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = (const void ***)v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (const void ***)((uint64_t (*)(void))(*result)[v7])();
  }
  return result;
}

void sub_20BA2270C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BA22748(const void ***a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C4AF188;
  v7[1] = a4;
  v8 = v7;
  sub_20BA249E0(a1, a2, a3, (uint64_t)v7, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20BA227DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_20BA22818(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int (***v4)(_QWORD, uint64_t, uint64_t, int *);
  _BOOL8 v6;
  uint64_t v7;
  const void *v8;
  unsigned int MetaFlags;
  uint64_t v10;
  int v12;

  v4 = *(unsigned int (****)(_QWORD, uint64_t, uint64_t, int *))(a1 + 16);
  if (!v4)
    return 0;
  v12 = 0;
  v6 = 0;
  if ((**v4)(v4, a2, 2 * a3, &v12))
  {
    v7 = LXLexiconCopyEntryForTokenID();
    v6 = v7 != 0;
    if (v7)
    {
      v8 = (const void *)v7;
      MetaFlags = LXEntryGetMetaFlags();
      LXEntryGetProbability();
      *a4 = MetaFlags;
      a4[1] = v10;
      CFRelease(v8);
    }
  }
  return v6;
}

void sub_20BA228C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B9679A8(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA228DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v8;
  uint64_t v9;
  const void **v11;
  const void **v12;

  (*(void (**)(const void ***__return_ptr))(*(_QWORD *)a1 + 24))(&v12);
  (*(void (**)(const void ***__return_ptr, uint64_t, const void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v11, a1, v12, a2, a3);
  v8 = v11;
  v11 = 0;
  sub_20BA234E8(&v12, v8);
  sub_20BA234E8(&v11, 0);
  v9 = (*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(_QWORD *)a1 + 48))(a1, v12, a4);
  sub_20BA234E8(&v12, 0);
  return v9;
}

void sub_20BA2298C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BA234E8((const void ***)va, 0);
  _Unwind_Resume(a1);
}

const void ***sub_20BA229A8(const void ***result, const void **a2, unint64_t a3, uint64_t a4)
{
  const void ***v7;
  unint64_t v8;
  const void **v9;
  uint64_t v10;
  int v11;
  const void **v12;
  char v13;
  unint64_t v14;
  const void **v15;

  if (a2 && (a3 & 1) == 0)
  {
    v7 = result;
    v13 = 0;
    ((void (*)(const void ***__return_ptr))(*result)[3])(&v12);
    v11 = 0;
    if (a3)
    {
      v8 = 0;
      do
      {
        ((void (*)(const void ***__return_ptr, const void ***, const void **, char *, uint64_t))(*v7)[5])(&v15, v7, v12, (char *)a2 + v8, 2);
        v9 = v15;
        v15 = 0;
        sub_20BA234E8(&v12, v9);
        sub_20BA234E8(&v15, 0);
        if ((((uint64_t (*)(const void ***, const void **))(*v7)[4])(v7, v12) & 1) == 0)
          break;
        if (((unsigned int (*)(const void ***, const void **, int *))(*v7)[6])(v7, v12, &v11))
        {
          v10 = *(_QWORD *)(a4 + 24);
          v14 = v8 + 2;
          v15 = a2;
          if (!v10)
            sub_20B80BB74();
          (*(void (**)(uint64_t, int *, const void ***, unint64_t *, char *))(*(_QWORD *)v10 + 48))(v10, &v11, &v15, &v14, &v13);
          if (v13)
            break;
        }
        v8 = (int)v8 + 2;
      }
      while (v8 < a3);
    }
    return sub_20BA234E8(&v12, 0);
  }
  return result;
}

void sub_20BA22AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BA234E8((const void ***)va, 0);
  _Unwind_Resume(a1);
}

const void ***sub_20BA22AF8(const void ***result, void *a2, size_t a3, const void **a4, uint64_t a5)
{
  const void ***v9;
  const void **v10;
  const void **v11;
  const void ***v12;
  const void ***v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  const void **v17;
  const void **v18[3];
  const void ***v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 && (a3 & 1) == 0)
  {
    v9 = result;
    ((void (*)(const void ***__return_ptr))(*result)[3])(&v17);
    ((void (*)(const void ***__return_ptr, const void ***, const void **, void *, size_t))(*v9)[5])(v18, v9, v17, a2, a3);
    v10 = v18[0];
    v18[0] = 0;
    sub_20BA234E8(&v17, v10);
    sub_20BA234E8(v18, 0);
    if ((((uint64_t (*)(const void ***, const void **))(*v9)[4])(v9, v17) & 1) == 0)
      return sub_20BA234E8(&v17, 0);
    sub_20B82E068(__p, a2, a3);
    v11 = v17;
    v12 = (const void ***)operator new(0x28uLL);
    *v12 = (const void **)&off_24C4AED48;
    v12[1] = (const void **)__p;
    v12[2] = (const void **)a2;
    v12[3] = (const void **)a3;
    v12[4] = a4;
    v19 = v12;
    ((void (*)(const void ***, const void **, const void ***, uint64_t))(*v9)[7])(v9, v11, v18, a5);
    v13 = v19;
    if (v19 == v18)
    {
      v14 = 4;
      v13 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_9;
      v14 = 5;
    }
    ((void (*)(void))(*v13)[v14])();
LABEL_9:
    if (v16 < 0)
      operator delete(__p[0]);
    return sub_20BA234E8(&v17, 0);
  }
  return result;
}

void sub_20BA22C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void **a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,__int16 *a22)
{
  __int16 *v22;
  __int16 *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a17;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  sub_20BA234E8(&a16, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA22CE8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)operator new();
  result = LXLexiconCreateRootCursor();
  *v2 = result;
  *a1 = v2;
  return result;
}

void sub_20BA22D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

BOOL sub_20BA22D60(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

void sub_20BA22D70(UniChar *chars@<X2>, unint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  CFStringRef v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = CFStringCreateWithCharacters(0, chars, a2 >> 1);
  v5 = LXCursorCreateByAdvancing();
  v6 = (_QWORD *)operator new();
  if (v5)
    *v6 = v5;
  else
    *v6 = 0;
  *a3 = v6;
  if (v4)
    CFRelease(v4);
}

void sub_20BA22E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_20B8955E0(&a9, 0);
  sub_20B87E150(&a10, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20BA22E54(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t Entry;
  const void *v5;
  int TokenID;
  _BOOL8 v7;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    return 0;
  Entry = LXCursorCopyFirstEntry();
  if (!Entry)
    return 0;
  v5 = (const void *)Entry;
  TokenID = LXEntryGetTokenID();
  *a3 = TokenID;
  v7 = TokenID != 0;
  CFRelease(v5);
  return v7;
}

void sub_20BA22EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9679A8((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BA22EE0(uint64_t a1, const void **a2, uint64_t a3, unsigned int a4)
{
  const __CFString *v7;
  const void *v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const void **v14;
  const void *v15;
  int64x2_t v16;
  __n128 (*v17)(_QWORD *, uint64_t);
  const __CFString *v18;
  CFIndex v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *i;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t v53;
  const __CFString *cf;
  uint64_t v55;
  unsigned int v56;
  CFIndex v57;
  const void *v58;
  CFIndex Length;
  void **v60;
  int64x2_t v61;
  __n128 (*v62)(_QWORD *, uint64_t);
  void (*v63)(uint64_t);
  _BYTE v64[24];
  const __CFString *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD *, uint64_t, _BYTE *);
  void *v69;
  uint64_t *v70;
  CFIndex v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  _QWORD v78[4];
  void **v79;
  int64x2_t v80;
  uint64_t v81;
  _QWORD *v82;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    v7 = (const __CFString *)LXCursorCopyTraversedCharacters();
    v78[2] = v7;
    Length = CFStringGetLength(v7);
    v77 = 0uLL;
    v78[0] = 0;
    v8 = *a2;
    v63 = (void (*)(uint64_t))v78;
    v9 = (const void **)sub_20B8F6ECC(1uLL);
    v11 = v10;
    *v9 = 0;
    v9[1] = 0;
    sub_20BA239E8(v9, v8);
    v12 = (_QWORD *)*((_QWORD *)&v77 + 1);
    v13 = (_QWORD *)v77;
    cf = v7;
    if (*((_QWORD *)&v77 + 1) == (_QWORD)v77)
    {
      v16 = vdupq_n_s64(*((unint64_t *)&v77 + 1));
      v14 = v9;
    }
    else
    {
      v14 = v9;
      do
      {
        v15 = (const void *)*(v12 - 2);
        v12 -= 2;
        *v12 = 0;
        *(v14 - 2) = v15;
        v14 -= 2;
        v14[1] = (const void *)v12[1];
      }
      while (v12 != v13);
      v16 = (int64x2_t)v77;
    }
    *(_QWORD *)&v77 = v14;
    *((_QWORD *)&v77 + 1) = v9 + 2;
    v61 = v16;
    v17 = (__n128 (*)(_QWORD *, uint64_t))v78[0];
    v78[0] = &v9[2 * v11];
    v62 = v17;
    v60 = (void **)v16.i64[0];
    sub_20BA23A34((uint64_t)&v60);
    *((_QWORD *)&v77 + 1) = v9 + 2;
    sub_20BA23A84(v77, (uint64_t)(v9 + 2), (uint64_t)((uint64_t)v9 - v77 + 16) >> 4);
    v73 = 0;
    v74 = &v73;
    v75 = 0x2000000000;
    v76 = 0;
    if ((_QWORD)v77 != *((_QWORD *)&v77 + 1))
    {
      v57 = a4;
      v56 = a4;
      v55 = a3;
      do
      {
        v66 = MEMORY[0x24BDAC760];
        v67 = 0x40000000;
        v68 = sub_20BA236DC;
        v69 = &unk_24C46C8E0;
        v71 = Length;
        v72 = a3;
        v70 = &v73;
        LXCursorEnumerateEntries();
        if (*((_BYTE *)v74 + 24))
          break;
        v18 = (const __CFString *)LXCursorCopyTraversedCharacters();
        v65 = v18;
        v19 = CFStringGetLength(v18);
        v60 = 0;
        v61.i64[0] = (uint64_t)&v60;
        v61.i64[1] = 0x4002000000;
        v62 = sub_20BA23848;
        v63 = sub_20BA2386C;
        memset(v64, 0, sizeof(v64));
        if ((a4 & 0x80000000) != 0 || v19 - Length < v57)
          LXCursorEnumerateChildren();
        v20 = v77;
        v21 = *((_QWORD *)&v77 + 1) - v77;
        if ((uint64_t)(*((_QWORD *)&v77 + 1) - v77) >= 17)
        {
          v22 = 0;
          v23 = v21 >> 4;
          v58 = *(const void **)v77;
          *(_QWORD *)v77 = 0;
          v24 = *(_QWORD *)(v20 + 8);
          v25 = __OFSUB__(v21 >> 4, 2);
          v26 = (v21 >> 4) - 2;
          if (v26 < 0 != v25)
            v26 = v23 - 1;
          v27 = v26 >> 1;
          v28 = v20;
          do
          {
            v29 = v28;
            v28 += 16 * (v22 + 1);
            v30 = 2 * v22;
            v22 = (2 * v22) | 1;
            v31 = v30 + 2;
            if (v31 < v23 && *(double *)(v28 + 8) < *(double *)(v28 + 24))
            {
              v28 += 16;
              v22 = v31;
            }
            v32 = *(const void **)v28;
            *(_QWORD *)v28 = 0;
            sub_20B8955E0((const void **)v29, v32);
            *(_QWORD *)(v29 + 8) = *(_QWORD *)(v28 + 8);
          }
          while (v22 <= v27);
          if (*((_QWORD *)&v20 + 1) - 16 == v28)
          {
            sub_20B8955E0((const void **)v28, v58);
            *(_QWORD *)(v28 + 8) = v24;
          }
          else
          {
            v33 = *(const void **)(*((_QWORD *)&v20 + 1) - 16);
            *(_QWORD *)(*((_QWORD *)&v20 + 1) - 16) = 0;
            sub_20B8955E0((const void **)v28, v33);
            *(_QWORD *)(v28 + 8) = *(_QWORD *)(*((_QWORD *)&v20 + 1) - 8);
            sub_20B8955E0((const void **)(*((_QWORD *)&v20 + 1) - 16), v58);
            *(_QWORD *)(*((_QWORD *)&v20 + 1) - 8) = v24;
            sub_20BA23A84(v20, v28 + 16, (v28 + 16 - (uint64_t)v20) >> 4);
          }
          a4 = v56;
          a3 = v55;
        }
        v34 = *((_QWORD *)&v77 + 1) - 16;
        sub_20B8955E0((const void **)(*((_QWORD *)&v77 + 1) - 16), 0);
        *((_QWORD *)&v77 + 1) = v34;
        v35 = *(uint64_t **)(v61.i64[0] + 40);
        for (i = *(uint64_t **)(v61.i64[0] + 48); v35 != i; v35 += 2)
        {
          v37 = (_QWORD *)*((_QWORD *)&v77 + 1);
          if (*((_QWORD *)&v77 + 1) >= v78[0])
          {
            v40 = (uint64_t)(*((_QWORD *)&v77 + 1) - v77) >> 4;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 60)
              sub_20B80CDD8();
            v42 = v78[0] - v77;
            if ((uint64_t)(v78[0] - v77) >> 3 > v41)
              v41 = v42 >> 3;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
              v43 = 0xFFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            v82 = v78;
            v44 = (char *)sub_20B8F6ECC(v43);
            v46 = &v44[16 * v40];
            v47 = *v35;
            *v35 = 0;
            *(_QWORD *)v46 = v47;
            *((_QWORD *)v46 + 1) = v35[1];
            v48 = (_QWORD *)*((_QWORD *)&v77 + 1);
            v49 = (_QWORD *)v77;
            if (*((_QWORD *)&v77 + 1) == (_QWORD)v77)
            {
              v52 = vdupq_n_s64(*((unint64_t *)&v77 + 1));
              v50 = &v44[16 * v40];
            }
            else
            {
              v50 = &v44[16 * v40];
              do
              {
                v51 = *(v48 - 2);
                v48 -= 2;
                *v48 = 0;
                *((_QWORD *)v50 - 2) = v51;
                v50 -= 16;
                *((_QWORD *)v50 + 1) = v48[1];
              }
              while (v48 != v49);
              v52 = (int64x2_t)v77;
            }
            v39 = (uint64_t)(v46 + 16);
            *(_QWORD *)&v77 = v50;
            *((_QWORD *)&v77 + 1) = v46 + 16;
            v80 = v52;
            v53 = v78[0];
            v78[0] = &v44[16 * v45];
            v81 = v53;
            v79 = (void **)v52.i64[0];
            sub_20BA23A34((uint64_t)&v79);
          }
          else
          {
            v38 = *v35;
            *v35 = 0;
            *v37 = v38;
            v37[1] = v35[1];
            v39 = (uint64_t)(v37 + 2);
          }
          *((_QWORD *)&v77 + 1) = v39;
          sub_20BA23A84(v77, v39, (v39 - (uint64_t)v77) >> 4);
        }
        _Block_object_dispose(&v60, 8);
        v79 = (void **)v64;
        sub_20BA23B34(&v79);
        if (v18)
          CFRelease(v18);
      }
      while ((_QWORD)v77 != *((_QWORD *)&v77 + 1));
    }
    _Block_object_dispose(&v73, 8);
    v60 = (void **)&v77;
    sub_20BA23B34(&v60);
    if (cf)
      CFRelease(cf);
  }
}

void sub_20BA233E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  uint64_t v39;

  a39 = (void **)(v39 - 208);
  sub_20BA23B34(&a39);
  sub_20B87E150((const void **)(v39 - 176), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA23470(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4AECC0;
  sub_20B8E7698((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20BA234A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C4AECC0;
  sub_20B8E7698((const void **)(a1 + 8), 0);
  JUMPOUT(0x20BD39CB0);
}

const void ***sub_20BA234E8(const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B8955E0(v2, 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20BA2353C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA23550(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C4AED48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20BA23590(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AED48;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BA235B8(_QWORD *a1, uint64_t a2, const void **a3, size_t *a4, uint64_t a5)
{
  size_t v8;
  uint64_t v9;
  size_t v10;
  std::string *v11;
  size_t size;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;
  size_t v17;
  uint64_t *v18;

  v8 = *a4;
  v9 = a1[3];
  v10 = v9 + *a4;
  v11 = (std::string *)a1[1];
  if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
    size = v11->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v13 = *a3;
  if (size < v10)
  {
    std::string::resize(v11, v9 + *a4, 0);
    v11 = (std::string *)a1[1];
    v9 = a1[3];
  }
  if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
    v11 = (std::string *)v11->__r_.__value_.__r.__words[0];
  memcpy((char *)v11 + v9, v13, v8);
  v14 = (uint64_t *)a1[1];
  if (*((char *)v14 + 23) < 0)
    v14 = (uint64_t *)*v14;
  v15 = *(_QWORD *)(a1[4] + 24);
  v17 = v10;
  v18 = v14;
  if (!v15)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, size_t *, uint64_t))(*(_QWORD *)v15 + 48))(v15, a2, &v18, &v17, a5);
}

uint64_t sub_20BA23694(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEDA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA236D0()
{
  return &unk_24C4AEDA8;
}

void sub_20BA236DC(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v5;
  CFIndex Length;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int TokenID;
  const __CFString *v15;
  uint64_t v16;
  char *v17;

  v5 = (const __CFString *)LXEntryCopyString();
  v15 = v5;
  Length = CFStringGetLength(v5);
  if (Length >= a1[5])
  {
    v7 = (char *)operator new[]();
    CFStringGetCString(v5, v7, (2 * Length) | 1, 0x100u);
    v8 = a1[6];
    TokenID = LXEntryGetTokenID();
    v9 = a1[5];
    v10 = &v7[2 * v9];
    v11 = 2 * (Length - v9);
    v12 = *(_QWORD *)(a1[4] + 8);
    v13 = *(_QWORD *)(v8 + 24);
    v16 = v11;
    v17 = v10;
    if (!v13)
      sub_20B80BB74();
    (*(void (**)(uint64_t, int *, char **, uint64_t *, uint64_t))(*(_QWORD *)v13 + 48))(v13, &TokenID, &v17, &v16, v12 + 24);
    *a3 = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24);
    MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  }
  if (v5)
    CFRelease(v5);
}

void sub_20BA23804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20BA23848(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20BA2386C(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20BA23B34(&v1);
}

void sub_20BA23894(uint64_t a1, const void *a2)
{
  double v4;
  double v5;
  double v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  _QWORD *v29;

  v4 = *(double *)(a1 + 40);
  LXCursorConditionalProbability();
  v6 = v4 + v5;
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v8 = v7[6];
  v9 = v7[7];
  if (v8 >= v9)
  {
    v11 = v7[5];
    v12 = (uint64_t)(v8 - v11) >> 4;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20B80CDD8();
    v13 = v9 - v11;
    v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = v7 + 7;
    v16 = (char *)sub_20B8F6ECC(v15);
    v18 = v17;
    v19 = (double *)&v16[16 * v12];
    *v19 = 0.0;
    v19[1] = v6;
    sub_20BA239E8((const void **)v19, a2);
    v21 = (double *)v7[5];
    v20 = (double *)v7[6];
    if (v20 == v21)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = v19;
    }
    else
    {
      v22 = v19;
      do
      {
        v23 = *((_QWORD *)v20 - 2);
        v20 -= 2;
        *v20 = 0.0;
        *((_QWORD *)v22 - 2) = v23;
        v22 -= 2;
        v22[1] = v20[1];
      }
      while (v20 != v21);
      v24 = *(int64x2_t *)(v7 + 5);
    }
    v10 = (char *)(v19 + 2);
    v7[5] = v22;
    v7[6] = v19 + 2;
    v27 = v24;
    v25 = v7[7];
    v7[7] = &v16[16 * v18];
    v28 = v25;
    v26 = v24.i64[0];
    sub_20BA23A34((uint64_t)&v26);
  }
  else
  {
    *(_QWORD *)v8 = 0;
    *(double *)(v8 + 8) = v6;
    sub_20BA239E8((const void **)v8, a2);
    v10 = (char *)(v8 + 16);
  }
  v7[6] = v10;
}

void sub_20BA239E8(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B8955E0(a1, cf);
  }
}

uint64_t sub_20BA23A34(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_20B8955E0((const void **)(i - 16), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BA23A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  double v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = v3 >> 1;
    v6 = *(double *)(a2 - 8);
    if (*(double *)(a1 + 16 * (v3 >> 1) + 8) < v6)
    {
      v7 = a2 - 16;
      v8 = *(const void **)(a2 - 16);
      *(_QWORD *)(a2 - 16) = 0;
      do
      {
        v9 = v7;
        v7 = a1 + 16 * v5;
        v10 = *(const void **)v7;
        *(_QWORD *)v7 = 0;
        sub_20B8955E0((const void **)v9, v10);
        *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
      }
      while (*(double *)(a1 + 16 * v5 + 8) < v6);
      sub_20B8955E0((const void **)v7, v8);
      *(double *)(v7 + 8) = v6;
    }
  }
}

void sub_20BA23B34(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_20B8955E0(v4, 0);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20BA23BA8(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20BA23BB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20BA23BC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20BA23BD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20BA23BE8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C4AEDC8;
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  *(_QWORD *)a1 = off_24C4AECC0;
  sub_20B8E7698((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20BA23C44(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C4AEDC8;
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  *(_QWORD *)a1 = off_24C4AECC0;
  sub_20B8E7698((const void **)(a1 + 8), 0);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA23CB0(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA23D00(a1, a2, a3, 1u, 0);
}

const void **sub_20BA23CBC(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA23DD0(a1, a2, a3, 1u, 0);
}

_QWORD *sub_20BA23CC8(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA23D00(a1, a2, a3, 0, 0);
}

const void **sub_20BA23CD4(const void ***a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA23DD0(a1, a2, a3, 0, 0);
}

_QWORD *sub_20BA23CE0(const void ***a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_20BA22748(a1, a2, 0, a3, a4);
}

const void **sub_20BA23CF0(const void ***a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_20BA249E0(a1, a2, 0, a3, a4);
}

_QWORD *sub_20BA23D00(const void ***a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C4AEF88;
  v7[1] = a3;
  v8 = v7;
  sub_20BA23DD0(a1, a2, (uint64_t)v7, a4, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20BA23D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

const void **sub_20BA23DD0(const void ***a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void **result;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const void **v21;
  const void *v22[3];
  const void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729EE0;
  if ((*(_BYTE *)off_254729EE0(&off_254729EE0) & 1) == 0)
  {
    v19 = (_QWORD *)off_254729EC8(&off_254729EC8);
    sub_20B8F98E4(v19, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v19);
    *(_BYTE *)v10(&off_254729EE0) = 1;
  }
  v11 = off_254729F10;
  if ((*(_BYTE *)off_254729F10(&off_254729F10) & 1) == 0)
  {
    v20 = (_QWORD *)off_254729EF8(&off_254729EF8);
    sub_20B8B3DF8(v20, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v20);
    *(_BYTE *)v11(&off_254729F10) = 1;
  }
  LOBYTE(v22[0]) = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C4AEF08;
  v12[1] = a1;
  v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v23 = (const void **)v12;
  ((void (*)(const void ***__return_ptr, const void ***))(*a1)[3])(&v21, a1);
  off_254729EC8(&off_254729EC8);
  v13 = (uint64_t *)off_254729EF8(&off_254729EF8);
  sub_20BA24048(a1, a2, (uint64_t)v22 + 1, v14, a4, 0, 0, v22, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  sub_20BA234E8(&v21, 0);
  result = v23;
  if (v23 == (const void **)((char *)v22 + 1))
  {
    v18 = 4;
    result = (const void **)((char *)v22 + 1);
  }
  else
  {
    if (!v23)
      return result;
    v18 = 5;
  }
  return (const void **)(*((uint64_t (**)(void))*result + v18))();
}

void sub_20BA23FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void **a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  sub_20BA234E8(&a18, 0);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  _Unwind_Resume(a1);
}

const void ***sub_20BA24048(const void ***result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, const void **a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v26;
  const void ***v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void ***v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  float v42;
  const void ***v43;
  unint64_t v44;
  const void ***v45;
  uint64_t v46;
  float v47;
  int v48;
  char v49;
  const void ***v53;
  const void **v54;
  unint64_t v55;
  double v56;
  unint64_t v57;
  unsigned __int8 v58;
  _BYTE v59[24];
  const void ***v60;
  uint64_t v61;

  v53 = result;
  v18 = a13;
  v17 = a14;
  v19 = a10;
  v20 = a11;
  v61 = *MEMORY[0x24BDAC8D0];
  v58 = a7;
  if (!*(_BYTE *)a8)
  {
    if (((*((uint64_t (**)(const void **, uint64_t))*result[2] + 4))(result[2], a4) & 1) == 0)
      __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
    v26 = a12;
    if (a5)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != v26)
        goto LABEL_38;
    }
    LODWORD(v57) = 0;
    if ((a7 & 1) != 0
      || (result = (const void ***)(*((uint64_t (**)(const void **, uint64_t, unint64_t *))*v53[2] + 6))(v53[2], a4, &v57), (_DWORD)result))
    {
      result = (const void ***)sub_20B920C98(*(_QWORD *)(a3 + 24), a4, v19, 2 * v20, v18, v17, v26, (uint64_t)a8, a9);
    }
    if (!*(_BYTE *)a8)
    {
LABEL_38:
      result = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      if ((unint64_t)result > v26)
      {
        result = (const void ***)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v26);
        v27 = result;
        v57 = 0;
        if (result)
        {
          v28 = 0;
          v49 = a17;
          v29 = a9;
          v30 = a15;
          v31 = a16;
          do
          {
            result = (const void ***)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 72))(a2, v30, v31, v26, v28);
            if (!(_DWORD)result)
              goto LABEL_29;
            v56 = 0.0;
            v56 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 32))(a2, v26, v57)+ v29;
            v55 = 0;
            v55 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v26, v57)+ v26;
            result = (const void ***)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, v26, v57);
            v33 = result;
            v34 = v32;
            v35 = v55;
            if (v55 == v26 && (v49 & 1) != 0)
              goto LABEL_29;
            if (v32)
            {
              (*((void (**)(const void ***__return_ptr, const void **, uint64_t, const void ***, uint64_t))*v53[2]
               + 5))(&v54, v53[2], a4, result, 2 * v32);
              if ((*((unsigned int (**)(const void **, const void **))*v53[2] + 4))(v53[2], v54))
              {
                v36 = a10;
                v37 = a11;
                v38 = 2 * a11;
                v39 = v34;
                do
                {
                  v40 = *(_WORD *)v33;
                  v33 = (const void ***)((char *)v33 + 2);
                  *(_WORD *)(v36 + v38) = v40;
                  v38 += 2;
                  --v39;
                }
                while (v39);
                v41 = a13;
                if (a13)
                {
                  *(_QWORD *)(a13 + 8 * a14) = v57;
                  v37 = a11;
                }
                v42 = v56;
                LOBYTE(v48) = v35 == v26;
                sub_20BA24048(v53, a2, a3, v54, a5, a6, v58, a8, v42, v36, v37 + v34, v55, v41, a14 + 1, v26, v57, v48);
                if (*(_BYTE *)a8)
                  return sub_20BA234E8(&v54, 0);
              }
              result = sub_20BA234E8(&v54, 0);
              if (a6)
              {
                v43 = (const void ***)v55;
                result = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
                if (v43 == result)
                {
                  result = (const void ***)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, v26, v57);
                  if ((_DWORD)result)
                  {
                    v44 = v57;
                    v45 = (const void ***)operator new(0x68uLL);
                    *v45 = (const void **)&off_24C4AEE88;
                    v45[1] = (const void **)v53;
                    v45[2] = (const void **)a4;
                    v45[3] = (const void **)&a10;
                    v45[4] = (const void **)&a11;
                    v45[5] = (const void **)&a13;
                    v45[6] = (const void **)&a14;
                    v45[7] = (const void **)&v57;
                    v45[8] = (const void **)&v58;
                    v45[9] = (const void **)a3;
                    v45[10] = (const void **)&v56;
                    v45[11] = (const void **)&v55;
                    v45[12] = a8;
                    v60 = v45;
                    (*(void (**)(uint64_t, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v26, v44, v59);
                    result = v60;
                    if (v60 == (const void ***)v59)
                    {
                      result = (const void ***)v59;
                      v46 = 4;
                      goto LABEL_32;
                    }
                    if (v60)
                    {
                      v46 = 5;
LABEL_32:
                      result = (const void ***)((uint64_t (*)(void))(*result)[v46])();
                    }
                  }
                }
              }
            }
            else
            {
              v47 = v56;
              LOBYTE(v48) = v55 == v26;
              result = (const void ***)sub_20BA24048(v53, a2, a3, a4, a5, a6, v58, a8, v47, a10, a11, v55, a13, a14, v30, v31, v48);
            }
LABEL_29:
            v28 = v57 + 1;
            v57 = v28;
          }
          while (v28 < (unint64_t)v27);
        }
      }
    }
  }
  return result;
}

void sub_20BA244E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v31;
  uint64_t v32;

  v31 = a30;
  if (a30 == &a27)
  {
    v32 = 4;
    v31 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20BA2453C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA24550(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_24C4AEE88;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20BA245B0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C4AEE88;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

const void ***sub_20BA245F8(uint64_t a1, __int16 **a2, _BYTE *a3)
{
  __int16 *v5;
  __int16 *v6;
  uint64_t v7;
  _WORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  float v12;
  int v14;
  const void **v15;

  v5 = *a2;
  v6 = a2[1];
  v7 = *(_QWORD *)(a1 + 8);
  (*(void (**)(const void ***__return_ptr, _QWORD, _QWORD, __int16 *, uint64_t))(**(_QWORD **)(v7 + 16) + 40))(&v15, *(_QWORD *)(v7 + 16), *(_QWORD *)(a1 + 16), *a2, 2 * (_QWORD)v6);
  if (!(*(unsigned int (**)(_QWORD, const void **))(**(_QWORD **)(v7 + 16) + 32))(*(_QWORD *)(v7 + 16), v15))return sub_20BA234E8(&v15, 0);
  if (v6)
  {
    v8 = (_WORD *)(**(_QWORD **)(a1 + 24) + 2 * **(_QWORD **)(a1 + 32));
    v9 = v6;
    do
    {
      v10 = *v5++;
      *v8++ = v10;
      v9 = (__int16 *)((char *)v9 - 1);
    }
    while (v9);
  }
  v11 = **(_QWORD **)(a1 + 40);
  if (v11)
    *(_QWORD *)(v11 + 8 * **(_QWORD **)(a1 + 48)) = **(_QWORD **)(a1 + 56);
  v14 = 0;
  if (!**(_BYTE **)(a1 + 64))
  {
    if (!(*(unsigned int (**)(_QWORD, const void **, int *))(**(_QWORD **)(v7 + 16) + 48))(*(_QWORD *)(v7 + 16), v15, &v14))goto LABEL_11;
    v11 = **(_QWORD **)(a1 + 40);
  }
  v12 = **(double **)(a1 + 80);
  sub_20B920C98(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24), (uint64_t)v15, **(_QWORD **)(a1 + 24), 2 * ((_QWORD)v6 + **(_QWORD **)(a1 + 32)), v11, **(_QWORD **)(a1 + 48) + 1, **(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 96), v12);
LABEL_11:
  if (**(_BYTE **)(a1 + 96))
    *a3 = 1;
  return sub_20BA234E8(&v15, 0);
}

void sub_20BA24744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BA234E8((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA24760(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEEE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA2479C()
{
  return &unk_24C4AEEE8;
}

void sub_20BA247AC()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA247C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C4AEF08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BA24800(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AEF08;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BA24828(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[2];

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = *(_QWORD *)(a1 + 8);
  v17[0] = 0;
  v17[1] = v9;
  (*(void (**)(_QWORD, uint64_t, _DWORD *))(**(_QWORD **)(v15 + 16) + 48))(*(_QWORD *)(v15 + 16), a2, v17);
  return sub_20BA054E0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v17, v10, v11, v12, v13, v14 - *(int *)(a1 + 24));
}

uint64_t sub_20BA248CC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEF68))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA24908()
{
  return &unk_24C4AEF68;
}

void sub_20BA24918()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA2492C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4AEF88;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA24960(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4AEF88;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BA2497C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20BA055F8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_20BA24998(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AEFE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA249D4()
{
  return &unk_24C4AEFE8;
}

const void **sub_20BA249E0(const void ***a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void **result;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const void **v21;
  const void *v22[3];
  const void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729F40;
  if ((*(_BYTE *)off_254729F40(&off_254729F40) & 1) == 0)
  {
    v19 = (_QWORD *)off_254729F28(&off_254729F28);
    sub_20B8F98E4(v19, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v19);
    *(_BYTE *)v10(&off_254729F40) = 1;
  }
  v11 = off_254729F70;
  if ((*(_BYTE *)off_254729F70(&off_254729F70) & 1) == 0)
  {
    v20 = (_QWORD *)off_254729F58(&off_254729F58);
    sub_20B8B3DF8(v20, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v20);
    *(_BYTE *)v11(&off_254729F70) = 1;
  }
  LOBYTE(v22[0]) = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C4AF008;
  v12[1] = a1;
  v12[2] = a4;
  *((_DWORD *)v12 + 6) = a3;
  *((_DWORD *)v12 + 7) = a5;
  v23 = (const void **)v12;
  ((void (*)(const void ***__return_ptr, const void ***))(*a1)[3])(&v21, a1);
  off_254729F28(&off_254729F28);
  v13 = (uint64_t *)off_254729F58(&off_254729F58);
  sub_20BA24048(a1, a2, (uint64_t)v22 + 1, v14, 1u, 1u, 1u, v22, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  sub_20BA234E8(&v21, 0);
  result = v23;
  if (v23 == (const void **)((char *)v22 + 1))
  {
    v18 = 4;
    result = (const void **)((char *)v22 + 1);
  }
  else
  {
    if (!v23)
      return result;
    v18 = 5;
  }
  return (const void **)(*((uint64_t (**)(void))*result + v18))();
}

void sub_20BA24C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void **a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  sub_20BA234E8(&a18, 0);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_20BA24C5C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA24C70(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C4AF008;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BA24CB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AF008;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BA24CD8(uint64_t a1, uint64_t a2, int *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a8;
  v29 = *a3;
  v27 = v13;
  v28 = v12;
  v25 = v15;
  v26 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 16) + 32))(*(_QWORD *)(v16 + 16)) & 1) == 0)
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  __p = 0;
  v23 = 0;
  v24 = 0;
  sub_20B8FA598(&__p, v11, (uint64_t)v11 + v12, v12);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(v16 + 16);
  v19 = operator new(0x50uLL);
  *v19 = &off_24C4AF078;
  v19[1] = &v28;
  v19[2] = &__p;
  v19[3] = v17;
  v19[4] = &v29;
  v19[5] = &v27;
  v19[6] = &v26;
  v19[7] = &v25;
  v19[8] = a1 + 24;
  v19[9] = a9;
  v31 = v19;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v18 + 56))(v18, a2, v30, *(unsigned int *)(a1 + 28));
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_7:
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
}

void sub_20BA24E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA24EB8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AF0E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA24EF4()
{
  return &unk_24C4AF0E8;
}

void sub_20BA24F04()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA24F18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24C4AF078;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA24F70(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C4AF078;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_20BA24FB0(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t *v15;
  int v16;
  uint64_t result;
  _DWORD v18[2];

  v8 = *a3;
  v9 = *a4;
  v11 = *(_QWORD **)(a1 + 8);
  v10 = *(unint64_t **)(a1 + 16);
  v12 = *v11 + *a4;
  v13 = v10[1] - *v10;
  if (v12 > v13)
    sub_20B871DC8(v10, v12 - v13);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(**(_QWORD **)(a1 + 16) + **(_QWORD **)(a1 + 8) + i) = *(_BYTE *)(v8 + i);
  }
  v15 = *(uint64_t **)(a1 + 40);
  v16 = **(_DWORD **)(a1 + 32);
  v18[0] = *a2;
  v18[1] = v16;
  result = sub_20BA054E0(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24), (uint64_t)v18, **(_QWORD **)(a1 + 16), v12, *v15, **(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 56) - **(int **)(a1 + 64));
  **(_BYTE **)(a1 + 72) = (**(unsigned __int8 **)(a1 + 72) | *a5) != 0;
  return result;
}

uint64_t sub_20BA250A8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AF0D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA250E4()
{
  return &unk_24C4AF0D8;
}

uint64_t sub_20BA250F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v12[0] = a4;
  v12[1] = a5;
  v10 = a8;
  v11 = a7;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v13, v12, a6, &v11, &v10, a9);
}

void sub_20BA25148()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA2515C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4AF108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA25194(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AF108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BA251B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const __CFString *v13;
  unsigned int MetaFlags;
  uint64_t v15;
  void *__p;
  _BYTE *v17;

  v9 = *a3;
  v10 = *a4;
  v11 = LXLexiconCopyEntryForTokenID();
  if (v11)
  {
    v12 = (const void *)v11;
    v13 = (const __CFString *)LXEntryCopyString();
    sub_20B8D0790(v13, (UniChar **)&__p);
    MetaFlags = LXEntryGetMetaFlags();
    LXEntryGetProbability();
    sub_20BA250F0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)__p, (v17 - (_BYTE *)__p) >> 1, MetaFlags, v15, a2, v9, v10, a6);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v13)
      CFRelease(v13);
    CFRelease(v12);
  }
}

void sub_20BA25298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  const void *v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  CFRelease(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA252E0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AF168))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA2531C()
{
  return &unk_24C4AF168;
}

void sub_20BA2532C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA25340(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4AF188;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA25374(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4AF188;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BA25390(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20BA055F8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a2, *a3, *a4, *a7);
}

uint64_t sub_20BA253AC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AF1E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA253E8()
{
  return &unk_24C4AF1E8;
}

void sub_20BA253F8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA2540C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4AF208;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA25444(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4AF208;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BA25464(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const __CFString *v13;
  unsigned int MetaFlags;
  uint64_t v15;
  void *__p;
  _BYTE *v17;

  v9 = *a3;
  v10 = *a4;
  v11 = LXLexiconCopyEntryForTokenID();
  if (v11)
  {
    v12 = (const void *)v11;
    v13 = (const __CFString *)LXEntryCopyString();
    sub_20B8D0790(v13, (UniChar **)&__p);
    MetaFlags = LXEntryGetMetaFlags();
    LXEntryGetProbability();
    sub_20BA250F0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)__p, (v17 - (_BYTE *)__p) >> 1, MetaFlags, v15, a2, v9, v10, a6);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v13)
      CFRelease(v13);
    CFRelease(v12);
  }
}

void sub_20BA25548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  const void *v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  CFRelease(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA25590(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4AF268))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA255CC()
{
  return &unk_24C4AF268;
}

void sub_20BA255D8(uint64_t *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string::size_type v4;
  _QWORD v5[5];
  void *__p[2];
  std::string::size_type v7;
  std::string v8;
  void *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  char v13;

  sub_20B8D1C98(CFSTR("en_US"), &v8);
  v2 = std::string::insert(&v8, 0, "EnglishLexicon_", 0xFuLL);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v7 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = MEMORY[0x24BDAC760];
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = sub_20BA25744;
  v5[3] = &unk_24C46C900;
  v5[4] = CFSTR("en_US");
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v8.__r_.__value_.__r.__words[0] = v4;
  v8.__r_.__value_.__l.__size_ = 0x40000000;
  v8.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_20BA28994;
  v9 = &unk_24C4AF2A0;
  v11 = __p;
  v12 = qword_25472C838;
  v13 = 0;
  v10 = v5;
  sub_20BA28108(__p, (uint64_t)&v8, 0, a1);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20BA25714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA25744(uint64_t a1)
{
  __CFDictionary *Mutable;
  uint64_t v3;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F198], *(const void **)(a1 + 32));
  v3 = operator new();
  sub_20BA26188(v3, (uint64_t)Mutable, 0);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void sub_20BA257DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x1060C404B74122BLL);
  sub_20B8CE418((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BA25814(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 __p;
  uint64_t v5;
  void *v6[2];
  char v7;
  void *v8[2];
  uint64_t v9;
  _QWORD v10[7];
  char v11;

  sub_20B80BBD0(v8, "en_US");
  std::operator+<char>();
  v2 = MEMORY[0x24BDAC760];
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 1174405120;
  v3[2] = sub_20BA259AC;
  v3[3] = &unk_24C46CCE0;
  if (SHIBYTE(v9) < 0)
  {
    sub_20B80ACE0(&__p, v8[0], (unint64_t)v8[1]);
  }
  else
  {
    __p = *(_OWORD *)v8;
    v5 = v9;
  }
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v10[0] = v2;
  v10[1] = 0x40000000;
  v10[2] = sub_20BA28994;
  v10[3] = &unk_24C4AF2A0;
  v10[5] = v6;
  v10[6] = qword_25472C838;
  v11 = 0;
  v10[4] = v3;
  sub_20BA28108(v6, (uint64_t)v10, 0, a1);
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
}

void sub_20BA25960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA259AC(uint64_t a1)
{
  size_t v2;
  std::string *v3;
  const void *v4;
  _QWORD *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  __CFString *v24;
  std::string *v25;
  const __CFURL *v26;
  const __CFURL *v27;
  __CFDictionary *Mutable;
  CFArrayRef v29;
  uint64_t v30;
  NSObject *v31;
  CFStringRef filePath;
  std::string v34;
  std::string v35;
  void *__p[2];
  int64_t v37;
  void *v38;
  size_t v39;
  unsigned __int8 v40;
  std::string v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_20B80BBD0(&v38, "/System/Library/LinguisticData/RequiredAssets_en.bundle/AssetData/");
  if ((v40 & 0x80u) == 0)
    v2 = v40;
  else
    v2 = v39;
  v3 = &v41;
  sub_20B8298D4((uint64_t)&v41, v2 + 8);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v3 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if (v2)
  {
    if ((v40 & 0x80u) == 0)
      v4 = &v38;
    else
      v4 = v38;
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "Phrases-");
  v5 = (_QWORD *)(a1 + 32);
  v6 = *(char *)(a1 + 55);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(a1 + 32);
  else
    v7 = *(const std::string::value_type **)(a1 + 32);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 55);
  else
    v8 = *(_QWORD *)(a1 + 40);
  v9 = std::string::append(&v41, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v35, ".dat", 4uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v37 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if ((v40 & 0x80u) == 0)
    v13 = v40;
  else
    v13 = v39;
  v14 = &v34;
  sub_20B8298D4((uint64_t)&v34, v13 + 6);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if ((v40 & 0x80u) == 0)
      v15 = &v38;
    else
      v15 = v38;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "Delta-");
  v16 = *(char *)(a1 + 55);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)(a1 + 32);
  else
    v17 = *(const std::string::value_type **)(a1 + 32);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a1 + 55);
  else
    v18 = *(_QWORD *)(a1 + 40);
  v19 = std::string::append(&v34, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v41, ".dat", 4uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v37 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  v24 = sub_20B8CFF04((const char *)v23);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v35;
  else
    v25 = (std::string *)v35.__r_.__value_.__r.__words[0];
  filePath = sub_20B8CFF04((const char *)v25);
  v26 = CFURLCreateWithFileSystemPath(0, v24, kCFURLPOSIXPathStyle, 1u);
  v27 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 1u);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (v26 && sub_20B8D00CC(v26))
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F178], v24);
    if (v27)
    {
      if (sub_20B8D00CC(v27))
      {
        v29 = CFArrayCreate(0, (const void **)&filePath, 1, MEMORY[0x24BDBD690]);
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F180], v29);
        if (v29)
          CFRelease(v29);
      }
    }
    v30 = operator new();
    sub_20BA26188(v30, (uint64_t)Mutable, 1);
    if (!Mutable)
      goto LABEL_58;
LABEL_57:
    CFRelease(Mutable);
    goto LABEL_58;
  }
  v31 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 55) < 0)
      v5 = (_QWORD *)*v5;
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_error_impl(&dword_20B7F7000, v31, OS_LOG_TYPE_ERROR, "Failed to find data path for locale %s", (uint8_t *)&v41, 0xCu);
  }
  v30 = 0;
  if (Mutable)
    goto LABEL_57;
LABEL_58:
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  if (filePath)
    CFRelease(filePath);
  if (v24)
    CFRelease(v24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if ((char)v40 < 0)
    operator delete(v38);
  return v30;
}

void sub_20BA25E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BA25FB8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
    return sub_20B80ACE0(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_20BA25FE8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20BA25FFC(uint64_t *a1@<X8>)
{
  unsigned __int8 v2;
  _QWORD v3[7];
  char v4;

  v2 = atomic_load((unsigned __int8 *)&qword_25472D418);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472D418))
  {
    sub_20B80BBD0(&unk_25472D400, "EnglishDynamicLexicon_en_US");
    __cxa_atexit(MEMORY[0x24BEDACF0], &unk_25472D400, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472D418);
  }
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_20BA28994;
  v3[3] = &unk_24C4AF2A0;
  v3[5] = &unk_25472D400;
  v3[6] = qword_25472C838;
  v4 = 0;
  v3[4] = &unk_24C46CF30;
  sub_20BA28108((void **)&unk_25472D400, (uint64_t)v3, 0, a1);
}

void sub_20BA26108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D418);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA26120()
{
  uint64_t v0;

  v0 = operator new();
  sub_20BA26188(v0, 0, 2);
  return v0;
}

void sub_20BA26164(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1060C404B74122BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA26188(uint64_t a1, uint64_t a2, int a3)
{
  const void *View;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xFFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = a3;
  if (a3 == 2)
    View = (const void *)LXLexiconRepositoryCreateView();
  else
    View = (const void *)LXLexiconCreate();
  sub_20B8E7698((const void **)a1, View);
  return a1;
}

void sub_20BA2621C(_Unwind_Exception *a1)
{
  const void **v1;

  sub_20BA2623C((uint64_t)(v1 + 1));
  sub_20B8E7698(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA2623C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_20B83B400(&v3);
  v3 = (void **)(a1 + 24);
  sub_20B8EDDA0(&v3);
  sub_20B87E150((const void **)a1, 0);
  return a1;
}

uint64_t sub_20BA26290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void **v3;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  CFTypeRef v43;
  const void *v44;
  const void **v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *i;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v103;
  void *__p[2];
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v2 = a2;
  v105 = 0u;
  v106 = 0u;
  *(_OWORD *)__p = 0u;
  v3 = *(const void ***)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    do
    {
      v5 = (char *)v105;
      v6 = (char *)__p[1];
      v7 = (uint64_t)(v105 - (unint64_t)__p[1]) >> 3;
      if ((void *)v105 == __p[1])
        v8 = 0;
      else
        v8 = 170 * v7 - 1;
      v9 = *((_QWORD *)&v106 + 1) + v106;
      if (v8 != *((_QWORD *)&v106 + 1) + (_QWORD)v106)
        goto LABEL_38;
      if ((unint64_t)v106 < 0xAA)
      {
        if (v7 >= (uint64_t)(*((_QWORD *)&v105 + 1) - (unint64_t)__p[0]) >> 3)
        {
          if (*((void **)&v105 + 1) == __p[0])
            v22 = 1;
          else
            v22 = (uint64_t)(*((_QWORD *)&v105 + 1) - (unint64_t)__p[0]) >> 2;
          v23 = (char *)sub_20B87FB70(v22);
          v25 = v24;
          v26 = operator new(0xFF0uLL);
          v27 = &v23[8 * v7];
          v28 = &v23[8 * v25];
          if (v7 == v25)
          {
            v29 = 8 * v7;
            if ((uint64_t)(v105 - (unint64_t)__p[1]) < 1)
            {
              v66 = v26;
              v67 = v29 >> 2;
              if ((void *)v105 == __p[1])
                v68 = 1;
              else
                v68 = v67;
              v69 = (char *)sub_20B87FB70(v68);
              v27 = &v69[8 * (v68 >> 2)];
              v28 = &v69[8 * v70];
              if (v23)
                operator delete(v23);
              v23 = v69;
              v26 = v66;
            }
            else
            {
              v30 = v29 >> 3;
              if (v30 >= -1)
                v31 = v30 + 1;
              else
                v31 = v30 + 2;
              v27 -= 8 * (v31 >> 1);
            }
          }
          *(_QWORD *)v27 = v26;
          v71 = v27 + 8;
          for (i = (char *)v105; i != __p[1]; i -= 8)
          {
            if (v27 == v23)
            {
              if (v71 >= v28)
              {
                if (v28 == v23)
                  v77 = 1;
                else
                  v77 = (v28 - v23) >> 2;
                v78 = (char *)sub_20B87FB70(v77);
                v80 = v78;
                v27 = &v78[(2 * v77 + 6) & 0xFFFFFFFFFFFFFFF8];
                v82 = v71 - v23;
                v81 = v71 == v23;
                v71 = v27;
                if (!v81)
                {
                  v71 = &v27[v82 & 0xFFFFFFFFFFFFFFF8];
                  v83 = 8 * (v82 >> 3);
                  v84 = v27;
                  v85 = (uint64_t *)v23;
                  do
                  {
                    v86 = *v85++;
                    *(_QWORD *)v84 = v86;
                    v84 += 8;
                    v83 -= 8;
                  }
                  while (v83);
                }
                v28 = &v78[8 * v79];
                if (v23)
                  operator delete(v23);
                v23 = v80;
              }
              else
              {
                v73 = (v28 - v71) >> 3;
                if (v73 >= -1)
                  v74 = v73 + 1;
                else
                  v74 = v73 + 2;
                v75 = v74 >> 1;
                v27 = &v23[8 * (v74 >> 1)];
                v76 = v23;
                if (v71 != v23)
                {
                  memmove(v27, v23, v71 - v23);
                  v76 = v71;
                }
                v71 = &v76[8 * v75];
              }
            }
            v87 = *((_QWORD *)i - 1);
            *((_QWORD *)v27 - 1) = v87;
            v27 -= 8;
          }
          v88 = __p[0];
          __p[0] = v23;
          __p[1] = v27;
          *(_QWORD *)&v105 = v71;
          *((_QWORD *)&v105 + 1) = v28;
          v2 = a2;
          if (v88)
            operator delete(v88);
          goto LABEL_37;
        }
        v20 = operator new(0xFF0uLL);
        v21 = v20;
        if (*((_QWORD *)&v105 + 1) == (_QWORD)v105)
        {
          if (__p[1] == __p[0])
          {
            if ((void *)v105 == __p[1])
              v48 = 1;
            else
              v48 = (uint64_t)(*((_QWORD *)&v105 + 1) - (unint64_t)__p[1]) >> 2;
            v49 = (char *)sub_20B87FB70(v48);
            v6 = &v49[(2 * v48 + 6) & 0xFFFFFFFFFFFFFFF8];
            v51 = (uint64_t *)__p[1];
            v52 = v6;
            v53 = v105 - (unint64_t)__p[1];
            if ((void *)v105 != __p[1])
            {
              v52 = &v6[v53 & 0xFFFFFFFFFFFFFFF8];
              v54 = 8 * (v53 >> 3);
              v55 = v6;
              do
              {
                v56 = *v51++;
                *(_QWORD *)v55 = v56;
                v55 += 8;
                v54 -= 8;
              }
              while (v54);
            }
            v57 = __p[0];
            __p[0] = v49;
            __p[1] = v6;
            *(_QWORD *)&v105 = v52;
            *((_QWORD *)&v105 + 1) = &v49[8 * v50];
            if (v57)
              operator delete(v57);
          }
          *((_QWORD *)v6 - 1) = v21;
          v58 = (char *)v105;
          v59 = *((_QWORD *)__p[1] - 1);
          if ((_QWORD)v105 == *((_QWORD *)&v105 + 1))
          {
            v60 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if ((void *)v105 == __p[0])
                v89 = 1;
              else
                v89 = (uint64_t)(v105 - (unint64_t)__p[0]) >> 2;
              v90 = (char *)sub_20B87FB70(v89);
              v92 = (uint64_t *)__p[1];
              v58 = &v90[8 * (v89 >> 2)];
              v93 = v105 - (unint64_t)__p[1];
              if ((void *)v105 != __p[1])
              {
                v58 = &v90[8 * (v89 >> 2) + (v93 & 0xFFFFFFFFFFFFFFF8)];
                v94 = 8 * (v93 >> 3);
                v95 = &v90[8 * (v89 >> 2)];
                do
                {
                  v96 = *v92++;
                  *(_QWORD *)v95 = v96;
                  v95 += 8;
                  v94 -= 8;
                }
                while (v94);
              }
              v97 = __p[0];
              __p[0] = v90;
              __p[1] = &v90[8 * (v89 >> 2)];
              *(_QWORD *)&v105 = v58;
              *((_QWORD *)&v105 + 1) = &v90[8 * v91];
              if (v97)
                operator delete(v97);
            }
            else
            {
              v61 = v60 >> 3;
              v14 = v60 >> 3 < -1;
              v62 = (v60 >> 3) + 2;
              if (v14)
                v63 = v62;
              else
                v63 = v61 + 1;
              v64 = v63 >> 1;
              v65 = (char *)__p[1] - 8 * v64;
              if ((void *)v105 != __p[1])
                memmove((char *)__p[1] - 8 * v64, __p[1], v105 - (unint64_t)__p[1]);
              v58 = &v65[v105 - (unint64_t)__p[1]];
              __p[1] = v65;
              *(_QWORD *)&v105 = v58;
            }
          }
          *(_QWORD *)v58 = v59;
        }
        else
        {
          *(_QWORD *)v105 = v20;
        }
      }
      else
      {
        *(_QWORD *)&v106 = v106 - 170;
        v10 = (char *)__p[1] + 8;
        v11 = *(_QWORD *)__p[1];
        __p[1] = (char *)__p[1] + 8;
        if ((_QWORD)v105 == *((_QWORD *)&v105 + 1))
        {
          v12 = v10 - (char *)__p[0];
          if (v10 <= __p[0])
          {
            if ((void *)v105 == __p[0])
              v32 = 1;
            else
              v32 = (uint64_t)(v105 - (unint64_t)__p[0]) >> 2;
            v33 = (char *)sub_20B87FB70(v32);
            v35 = (uint64_t *)__p[1];
            v5 = &v33[8 * (v32 >> 2)];
            v36 = v105 - (unint64_t)__p[1];
            if ((void *)v105 != __p[1])
            {
              v5 = &v33[8 * (v32 >> 2) + (v36 & 0xFFFFFFFFFFFFFFF8)];
              v37 = 8 * (v36 >> 3);
              v38 = &v33[8 * (v32 >> 2)];
              do
              {
                v39 = *v35++;
                *(_QWORD *)v38 = v39;
                v38 += 8;
                v37 -= 8;
              }
              while (v37);
            }
            v40 = __p[0];
            __p[0] = v33;
            __p[1] = &v33[8 * (v32 >> 2)];
            *(_QWORD *)&v105 = v5;
            *((_QWORD *)&v105 + 1) = &v33[8 * v34];
            if (v40)
              operator delete(v40);
          }
          else
          {
            v13 = v12 >> 3;
            v14 = v12 >> 3 < -1;
            v15 = (v12 >> 3) + 2;
            if (v14)
              v16 = v15;
            else
              v16 = v13 + 1;
            v17 = &v10[-8 * (v16 >> 1)];
            v18 = v105 - (_QWORD)v10;
            if ((char *)v105 != v10)
            {
              memmove(&v10[-8 * (v16 >> 1)], v10, v105 - (_QWORD)v10);
              v5 = v10;
            }
            v19 = &v5[-8 * (v16 >> 1)];
            v5 = &v17[v18];
            __p[1] = v19;
            *(_QWORD *)&v105 = &v17[v18];
          }
        }
        *(_QWORD *)v5 = v11;
      }
      *(_QWORD *)&v105 = v105 + 8;
LABEL_37:
      v6 = (char *)__p[1];
      v9 = *((_QWORD *)&v106 + 1) + v106;
LABEL_38:
      v41 = *(_QWORD *)&v6[8 * (v9 / 0xAA)];
      v42 = v9 % 0xAA;
      v44 = v3[1];
      v43 = v3[2];
      v45 = (const void **)(v41 + 24 * v42);
      *v45 = *v3;
      v45[1] = v44;
      if (v43)
        v43 = CFRetain(v43);
      *(_QWORD *)(v41 + 24 * v42 + 16) = v43;
      ++*((_QWORD *)&v106 + 1);
      sub_20BA28D2C(*(const void ***)a1, *(_QWORD *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
      v46 = *(_QWORD *)(a1 + 8);
      v47 = v46 - 24;
      sub_20B8955E0((const void **)(v46 - 8), 0);
      *(_QWORD *)(a1 + 8) = v47;
      v3 = *(const void ***)a1;
    }
    while (*(_QWORD *)a1 != v47);
  }
  v103 = 0;
  do
  {
    if (!*((_QWORD *)&v106 + 1))
      break;
    v107 = *(_QWORD *)(*((_QWORD *)__p[1] + (*((_QWORD *)&v106 + 1) + (_QWORD)v106 - 1) / 0xAAuLL)
                     + 24 * ((*((_QWORD *)&v106 + 1) + (_QWORD)v106 - 1) % 0xAAuLL)
                     + 16);
    v98 = *(_QWORD *)(v2 + 24);
    if (!v98)
      sub_20B80BB74();
    (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v98 + 48))(v98, &v107, &v103);
    sub_20B8955E0((const void **)(*((_QWORD *)__p[1] + (*((_QWORD *)&v106 + 1) + (_QWORD)v106 - 1) / 0xAAuLL)+ 24 * ((*((_QWORD *)&v106 + 1) + (_QWORD)v106 - 1) % 0xAAuLL)+ 16), 0);
    v99 = 170 * ((uint64_t)(v105 - (unint64_t)__p[1]) >> 3) - 1;
    if ((void *)v105 == __p[1])
      v99 = 0;
    v100 = (*((_QWORD *)&v106 + 1))--;
    if ((unint64_t)(v99 - (v100 + v106) - 339) <= 0xFFFFFFFFFFFFFEABLL)
    {
      operator delete(*(void **)(v105 - 8));
      *(_QWORD *)&v105 = v105 - 8;
    }
  }
  while (!v103);
  return sub_20BA27884((uint64_t)__p);
}

void sub_20BA268E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  operator delete(v14);
  if (v13)
    operator delete(v13);
  sub_20BA27884((uint64_t)&a13);
  _Unwind_Resume(a1);
}

CFIndex sub_20BA26928(uint64_t a1, CFStringRef theString, unint64_t a3, double a4)
{
  CFIndex v4;
  const __CFString *v7;
  CFIndex Length;
  CFIndex v9;
  CFIndex v10;
  int CharacterAtIndex;

  if (*(_QWORD *)(a1 + 8) < a3 || *(double *)(a1 + 16) + -0.000001 > a4)
    return 0;
  v4 = 0;
  if (theString)
  {
    v7 = *(const __CFString **)a1;
    if (*(_QWORD *)a1)
    {
      Length = CFStringGetLength(theString);
      v9 = CFStringGetLength(v7);
      if (v9 >= Length)
        v10 = Length;
      else
        v10 = v9;
      if (!v10)
        return 0;
      v4 = 0;
      while (1)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v4);
        if (CharacterAtIndex != CFStringGetCharacterAtIndex(v7, v4))
          break;
        if (v10 == ++v4)
          return v10;
      }
    }
  }
  return v4;
}

void sub_20BA269EC(uint64_t a1, const __CFString *a2, unint64_t a3, double a4)
{
  unint64_t v8;
  CFStringRef Copy;
  unint64_t v10;
  unsigned int CharacterAtIndex;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  __int16 v19;

  v8 = sub_20BA26928(a1, a2, a3, a4);
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  sub_20B87E150((const void **)a1, Copy);
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  sub_20BA26B48((uint64_t *)(a1 + 48), v8);
  if (v8 < CFStringGetLength(a2))
  {
    v10 = v8;
    do
    {
      v19 = 0;
      CharacterAtIndex = CFStringGetCharacterAtIndex(a2, v10);
      v19 = CharacterAtIndex;
      v12 = sub_20B8D1E80(CharacterAtIndex);
      if (*v12 == v12[1])
      {
        v18 = 1;
        v17 = *(_QWORD *)(a1 + 56);
        if (v17 >= *(_QWORD *)(a1 + 64))
        {
          v16 = sub_20BA27B54((uint64_t *)(a1 + 48), &v18, &v19);
        }
        else
        {
          sub_20B8D3AA4(*(_QWORD **)(a1 + 56), 1, &v19);
          v16 = v17 + 24;
          *(_QWORD *)(a1 + 56) = v17 + 24;
        }
      }
      else
      {
        v13 = (uint64_t)v12;
        v14 = *(_QWORD *)(a1 + 56);
        v15 = (uint64_t *)(a1 + 48);
        if (v14 >= *(_QWORD *)(a1 + 64))
        {
          v16 = sub_20BA27CB0(v15, v13);
        }
        else
        {
          sub_20BA27C60((uint64_t)v15, v13);
          v16 = v14 + 24;
        }
      }
      *(_QWORD *)(a1 + 56) = v16;
      ++v10;
    }
    while (v10 < CFStringGetLength(a2));
  }
  sub_20BA26BDC((_QWORD *)(a1 + 24), v8);
}

void sub_20BA26B40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void sub_20BA26B48(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20BA279F0(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_20BA26BDC(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20BA27DC4(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        sub_20B8EDE18(v3 - 24, *(const void ***)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_20BA26C6C(uint64_t a1)
{
  __int128 v2;
  _QWORD v3[3];
  _QWORD v4[3];
  void **v5;

  *(_QWORD *)&v2 = 0;
  *((_QWORD *)&v2 + 1) = 0xFFF0000000000000;
  sub_20B87E150((const void **)(a1 + 8), 0);
  *(_OWORD *)(a1 + 16) = v2;
  sub_20BA27FEC((void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  memset(v3, 0, sizeof(v3));
  sub_20BA28058((uint64_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  memset(v4, 0, sizeof(v4));
  v5 = (void **)v4;
  sub_20B83B400(&v5);
  v5 = (void **)v3;
  sub_20B8EDDA0(&v5);
}

void sub_20BA26D1C(void **a1, uint64_t a2, int a3)
{
  void ***v4;
  uint64_t v5;
  _QWORD v6[4];
  void **v7[3];
  void ***v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*a1)
  {
    memset(v6, 0, 24);
    v7[0] = (void **)&off_24C4697F0;
    v7[1] = a1;
    v7[2] = (void **)v6;
    v8 = v7;
    sub_20BA26E3C((uint64_t)a1, (uint64_t)v7, a3 ^ 1, 1);
    v4 = v8;
    if (v8 == v7)
    {
      v5 = 4;
      v4 = v7;
    }
    else
    {
      if (!v8)
      {
LABEL_7:
        sub_20BA26290((uint64_t)v6, a2);
        v7[0] = (void **)v6;
        sub_20BA28090(v7);
        return;
      }
      v5 = 5;
    }
    ((void (*)(void))(*v4)[v5])();
    goto LABEL_7;
  }
}

void sub_20BA26DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BA28090(&a14);
  _Unwind_Resume(a1);
}

void sub_20BA26E3C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  double v16;
  unint64_t v17;
  double v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  const void *RootCursor;
  _QWORD *v28;
  CFTypeRef v29;
  double v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  UniChar *v39;
  UniChar *v40;
  int v41;
  BOOL v42;
  int v43;
  char *v44;
  char *v45;
  uint64_t v46;
  CFTypeRef v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  const void *v52;
  double v53;
  double v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  CFTypeRef v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t **v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v75;
  int v76;
  uint64_t v77;
  const __CFAllocator *contentsDeallocator;
  uint64_t **v79;
  UniChar *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  CFStringRef cf;
  unint64_t v86;
  UniChar chars;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  int64x2_t v92;
  const void *v93;
  _QWORD v94[2];

  v91 = (char *)operator new(8uLL);
  v92 = vdupq_n_s64(1uLL);
  *(_QWORD *)v91 = 0;
  v84 = a1;
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    LOBYTE(v88) = 1;
    sub_20B932290((uint64_t)&v91, &v88);
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v84 + 64) - *(_QWORD *)(v84 + 56)) >> 3);
  v8 = *(_QWORD *)(v84 + 40);
  sub_20BA26BDC((_QWORD *)(v84 + 32), v7);
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3);
  if (a3)
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3);
  else
    v9 = 0;
  if (v9 <= v7)
  {
    v70 = a3 ^ 1;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    v72 = v7;
    do
    {
      if (v9)
      {
        v10 = *(_QWORD *)(v84 + 32) + 24 * v9;
        v89 = 0;
        v90 = 0;
        v88 = (uint64_t *)&v89;
        v11 = *(double **)(v10 - 24);
        v12 = (double *)(v10 - 16);
        if (v11 != (double *)(v10 - 16))
        {
          while (1)
          {
            v13 = &v89;
            if (v88 == (uint64_t *)&v89)
              break;
            v14 = v89;
            v15 = &v89;
            if (v89)
            {
              do
              {
                v13 = (uint64_t **)v14;
                v14 = (uint64_t *)v14[1];
              }
              while (v14);
            }
            else
            {
              do
              {
                v13 = (uint64_t **)v15[2];
                v42 = *v13 == (uint64_t *)v15;
                v15 = v13;
              }
              while (v42);
            }
            v16 = v11[4];
            v17 = *((_QWORD *)v11 + 5);
            v18 = *((double *)v13 + 4);
            v19 = v13[5];
            if (v19 == (uint64_t *)v17 || vabdd_f64(v18, v16) > 0.3)
            {
              if (v18 > v16)
                break;
            }
            else if ((unint64_t)v19 < v17)
            {
              break;
            }
            v20 = (uint64_t **)sub_20BA29088((uint64_t)&v88, v94, v17, v16);
LABEL_23:
            if (!*v20)
            {
              v21 = (uint64_t *)operator new(0x38uLL);
              v23 = *((_QWORD *)v11 + 5);
              v22 = (CFTypeRef)*((_QWORD *)v11 + 6);
              v21[4] = *((_QWORD *)v11 + 4);
              v21[5] = v23;
              if (v22)
                v22 = CFRetain(v22);
              v21[6] = (uint64_t)v22;
              v24 = v94[0];
              *v21 = 0;
              v21[1] = 0;
              v21[2] = v24;
              *v20 = v21;
              if (*v88)
              {
                v88 = (uint64_t *)*v88;
                v21 = *v20;
              }
              sub_20B82973C(v89, v21);
              ++v90;
            }
            v25 = (double *)*((_QWORD *)v11 + 1);
            if (v25)
            {
              do
              {
                v26 = v25;
                v25 = *(double **)v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v26 = (double *)*((_QWORD *)v11 + 2);
                v42 = *(_QWORD *)v26 == (_QWORD)v11;
                v11 = v26;
              }
              while (!v42);
            }
            v11 = v26;
            if (v26 == v12)
              goto LABEL_46;
          }
          if (v89)
          {
            v94[0] = v13;
            v20 = v13 + 1;
          }
          else
          {
            v94[0] = &v89;
            v20 = &v89;
          }
          goto LABEL_23;
        }
      }
      else
      {
        RootCursor = (const void *)LXLexiconCreateRootCursor();
        v93 = RootCursor;
        v89 = 0;
        v90 = 0;
        v88 = (uint64_t *)&v89;
        v28 = operator new(0x38uLL);
        v28[4] = 0;
        v28[5] = 0;
        if (RootCursor)
        {
          v29 = CFRetain(RootCursor);
          v30 = *((double *)v28 + 4);
          v31 = v28[5];
        }
        else
        {
          v31 = 0;
          v29 = 0;
          v30 = 0.0;
        }
        v28[6] = v29;
        v32 = sub_20BA29088((uint64_t)&v88, v94, v31, v30);
        if (*v32)
        {
          sub_20B8955E0((const void **)v28 + 6, 0);
          operator delete(v28);
          if (RootCursor)
            goto LABEL_45;
        }
        else
        {
          v33 = v94[0];
          *v28 = 0;
          v28[1] = 0;
          v28[2] = v33;
          *v32 = v28;
          if (*v88)
          {
            v88 = (uint64_t *)*v88;
            v28 = (_QWORD *)*v32;
          }
          sub_20B82973C(v89, v28);
          ++v90;
          if (RootCursor)
LABEL_45:
            CFRelease(RootCursor);
        }
      }
LABEL_46:
      v86 = v9;
      v34 = v88;
      if (v88 != (uint64_t *)&v89)
      {
        v35 = v9 == v72;
        v36 = v70;
        if (v9 == v72)
          v36 = 1;
        v76 = v36;
        if (v9 < v71)
          v35 = 1;
        v75 = v35;
        v81 = v9 + *(_QWORD *)(v84 + 16) + 4;
        v77 = v9 + *(_QWORD *)(v84 + 16) + 3;
        while (1)
        {
          if (v76 && (!a4 || LXCursorHasEntries()))
          {
            v37 = *(_QWORD *)(a2 + 24);
            if (!v37)
              sub_20B80BB74();
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 48))(v37, v34 + 4);
          }
          if (!v75)
          {
            v38 = *(_QWORD *)(v84 + 56) + 24 * v86;
            v40 = *(UniChar **)v38;
            v39 = *(UniChar **)(v38 + 8);
            if (*(UniChar **)v38 != v39)
              break;
          }
LABEL_110:
          v68 = (uint64_t *)v34[1];
          if (v68)
          {
            do
            {
              v69 = (uint64_t **)v68;
              v68 = (uint64_t *)*v68;
            }
            while (v68);
          }
          else
          {
            do
            {
              v69 = (uint64_t **)v34[2];
              v42 = *v69 == v34;
              v34 = (uint64_t *)v69;
            }
            while (!v42);
          }
          v34 = (uint64_t *)v69;
          if (v69 == &v89)
            goto LABEL_116;
        }
        v79 = (uint64_t **)(*(_QWORD *)(v84 + 32) + 24 * v86 + 8);
        v80 = *(UniChar **)(v38 + 8);
        v83 = *(_QWORD *)(v84 + 32) + 24 * v86;
        while (2)
        {
          chars = 0;
          chars = *v40;
          if ((chars & 0xF800 | 0x400) != 0xDC00)
          {
            cf = CFStringCreateWithCharactersNoCopy(0, &chars, 1, contentsDeallocator);
            v41 = v92.i8[0] & 0x3F;
            v42 = v92.i64[0] <= 0x3FuLL && v41 == 0;
            if (!v42)
            {
              v43 = 0;
              v44 = v91;
              v45 = &v91[8 * ((unint64_t)v92.i64[0] >> 6)];
              v82 = v45;
              while (1)
              {
                v46 = 1 << v43;
                if (v86 || (*(_QWORD *)v44 & v46) == 0)
                  break;
LABEL_102:
                v44 += 8 * (v43 == 63);
                if (v43 == 63)
                  v43 = 0;
                else
                  ++v43;
                if (v43 == v41 && v44 == v45)
                  goto LABEL_107;
              }
              v47 = CFRetain((CFTypeRef)v34[6]);
              v48 = v34[5];
              v49 = *((double *)v34 + 4);
              if ((*(_QWORD *)v44 & v46) != 0)
              {
                v50 = LXCursorCreateByAdvancing();
                if (v47)
                  CFRelease(v47);
                if (!v50)
                  goto LABEL_102;
                LXCursorConditionalProbability();
                ++v48;
                v49 = v49 + v51;
                v47 = (CFTypeRef)v50;
              }
              v52 = (const void *)LXCursorCreateByAdvancing();
              v93 = v52;
              if (v52)
              {
                LXCursorConditionalProbability();
                v54 = v49 + v53;
                if (v54 < *(double *)(v84 + 24))
                  goto LABEL_99;
                if (*(_QWORD *)(v83 + 16) != v81)
                  goto LABEL_89;
                v55 = v79;
                v56 = *v79;
                v57 = *v79;
                if (*v79)
                {
                  do
                  {
                    v58 = v57;
                    v57 = (uint64_t *)v57[1];
                  }
                  while (v57);
                }
                else
                {
                  do
                  {
                    v58 = v55[2];
                    v42 = *v58 == (_QWORD)v55;
                    v55 = (uint64_t **)v58;
                  }
                  while (v42);
                }
                if (v54 >= *((double *)v58 + 4))
                {
                  v59 = (uint64_t *)v58[1];
                  v60 = v58;
                  if (v59)
                  {
                    do
                    {
                      v61 = v59;
                      v59 = (uint64_t *)*v59;
                    }
                    while (v59);
                  }
                  else
                  {
                    do
                    {
                      v61 = (uint64_t *)v60[2];
                      v42 = *v61 == (_QWORD)v60;
                      v60 = v61;
                    }
                    while (!v42);
                  }
                  if (*(uint64_t **)v83 == v58)
                    *(_QWORD *)v83 = v61;
                  *(_QWORD *)(v83 + 16) = v77;
                  sub_20B860794(v56, v58);
                  sub_20B8955E0((const void **)v58 + 6, 0);
                  operator delete(v58);
                  v52 = v93;
LABEL_89:
                  v62 = operator new(0x38uLL);
                  v63 = v48 + 1;
                  *((double *)v62 + 4) = v54;
                  v62[5] = v48 + 1;
                  if (v52)
                  {
                    v64 = CFRetain(v52);
                    v54 = *((double *)v62 + 4);
                    v63 = v62[5];
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v62[6] = v64;
                  v65 = sub_20BA29088(v83, v94, v63, v54);
                  if (*v65)
                  {
                    sub_20B8955E0((const void **)v62 + 6, 0);
                    operator delete(v62);
                  }
                  else
                  {
                    v66 = v94[0];
                    *v62 = 0;
                    v62[1] = 0;
                    v62[2] = v66;
                    *v65 = v62;
                    v67 = **(_QWORD **)v83;
                    if (v67)
                    {
                      *(_QWORD *)v83 = v67;
                      v62 = (_QWORD *)*v65;
                    }
                    sub_20B82973C(*(uint64_t **)(v83 + 8), v62);
                    ++*(_QWORD *)(v83 + 16);
                  }
                  v45 = v82;
                }
                if (v52)
LABEL_99:
                  CFRelease(v52);
              }
              if (v47)
                CFRelease(v47);
              goto LABEL_102;
            }
LABEL_107:
            v39 = v80;
            if (cf)
              CFRelease(cf);
          }
          if (++v40 == v39)
            goto LABEL_110;
          continue;
        }
      }
LABEL_116:
      sub_20B8EDE18((uint64_t)&v88, (const void **)v89);
      v9 = v86 + 1;
    }
    while (v86 + 1 <= v72);
  }
  if (v91)
    operator delete(v91);
}

void sub_20BA275B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef cf,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 144);
  if (v31)
    operator delete(v31);
  _Unwind_Resume(exception_object);
}

void sub_20BA276A4(void **a1, const __CFString *a2, uint64_t a3, unint64_t a4, double a5)
{
  BOOL v5;
  BOOL v6;

  if (*a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v6 = v5 || a4 == 0;
  if (!v6 && a5 != 0.0)
  {
    sub_20BA269EC((uint64_t)(a1 + 1), a2, a4, a5);
    sub_20BA26D1C(a1, a3, 0);
  }
}

void sub_20BA27704(_QWORD *a1, const __CFString *a2, uint64_t a3, unint64_t a4, __int16 a5, double a6)
{
  BOOL v6;
  BOOL v7;
  _QWORD *v13;
  void ***v14;
  uint64_t v15;
  _QWORD v16[4];
  void **v17[3];
  void ***v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*a1)
    v6 = a2 == 0;
  else
    v6 = 1;
  v7 = v6 || a4 == 0;
  if (!v7 && a6 != 0.0)
  {
    sub_20BA269EC((uint64_t)(a1 + 1), a2, a4, a6);
    memset(v16, 0, 24);
    v13 = operator new(0x30uLL);
    *v13 = &off_24C469798;
    v13[1] = a4;
    *((_WORD *)v13 + 8) = a5;
    *((double *)v13 + 3) = a6;
    v13[4] = a3;
    v13[5] = v16;
    v18 = (void ***)v13;
    sub_20BA26E3C((uint64_t)a1, (uint64_t)v17, 1, 0);
    sub_20BA26290((uint64_t)v16, a3);
    v14 = v18;
    if (v18 == v17)
    {
      v15 = 4;
      v14 = v17;
    }
    else
    {
      if (!v18)
      {
LABEL_14:
        v17[0] = (void **)v16;
        sub_20BA28090(v17);
        return;
      }
      v15 = 5;
    }
    ((void (*)(void))(*v14)[v15])();
    goto LABEL_14;
  }
}

void sub_20BA27834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BA28090(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA27884(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        sub_20B8955E0((const void **)(v7 + 16), 0);
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 170;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BA279F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20B828D70(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20B97FA84(a1, &v15);
    sub_20B83CBC8((uint64_t)&v15);
  }
}

void sub_20BA27B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA27B54(uint64_t *a1, int *a2, _WORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B828D70(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  sub_20B8D3AA4(v16, *a2, a3);
  v17 = v16 + 24;
  sub_20B97FA84(a1, &v15);
  v13 = a1[1];
  sub_20B83CBC8((uint64_t)&v15);
  return v13;
}

void sub_20BA27C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA27C60(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_20B87ACC8(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20BA27CA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BA27CB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20B87ACC8(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  v15 += 24;
  sub_20B97FA84(a1, v14);
  v12 = a1[1];
  sub_20B83CBC8((uint64_t)v14);
  return v12;
}

void sub_20BA27DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA27DC4(_QWORD *result, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  _QWORD *v32;

  v3 = (char **)result;
  v4 = result[2];
  v5 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v5 + 24 * a2;
      v12 = 24 * a2;
      v13 = (_QWORD *)(v5 + 8);
      do
      {
        *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      v11 = result[1];
    }
    result[1] = v11;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *result) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *result) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    v32 = result + 2;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_20B800BC0();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = &v10[24 * v6];
    v15 = &v10[24 * v9];
    v31 = v15;
    v16 = &v14[24 * a2];
    v17 = 24 * a2;
    v18 = v14 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v30.i64[1] = (uint64_t)&v14[24 * a2];
    v20 = *v3;
    v19 = (unint64_t)v3[1];
    if ((char *)v19 == *v3)
    {
      v27 = vdupq_n_s64(v19);
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = &v14[v21];
        *((_QWORD *)v22 - 3) = *(_QWORD *)(v19 + v21 - 24);
        v23 = (uint64_t *)(v19 + v21 - 16);
        v24 = *v23;
        *(_QWORD *)&v14[v21 - 16] = *v23;
        v25 = (uint64_t)&v14[v21 - 16];
        v26 = *(_QWORD *)(v19 + v21 - 8);
        *((_QWORD *)v22 - 1) = v26;
        if (v26)
        {
          *(_QWORD *)(v24 + 16) = v25;
          *(_QWORD *)(v19 + v21 - 24) = v23;
          *v23 = 0;
          *(_QWORD *)(v19 + v21 - 8) = 0;
        }
        else
        {
          *((_QWORD *)v22 - 3) = v25;
        }
        v21 -= 24;
      }
      while ((char *)(v19 + v21) != v20);
      v27 = *(int64x2_t *)v3;
      v14 += v21;
      v16 = (char *)v30.i64[1];
      v15 = v31;
    }
    *v3 = v14;
    v3[1] = v16;
    v30 = v27;
    v28 = v3[2];
    v3[2] = v15;
    v31 = v28;
    v29 = v27.i64[0];
    return (_QWORD *)sub_20BA27F9C((uint64_t)&v29);
  }
  return result;
}

uint64_t sub_20BA27F9C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B8EDE18(i - 24, *(const void ***)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BA27FEC(void **a1)
{
  const void ***v1;
  const void ***v3;
  void *v4;
  const void ***v5;

  v1 = (const void ***)*a1;
  if (*a1)
  {
    v3 = (const void ***)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 3;
        sub_20B8EDE18((uint64_t)(v3 - 3), *(v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20BA28058(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B83B440(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20BA28090(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;
  const void **v6;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        sub_20B8955E0(v4 - 1, 0);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BA28108(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472C398);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C398))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472C390 = v74;
    __cxa_guard_release(&qword_25472C398);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472C3A0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472C3A0))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254729A78, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C3A0);
  }
  std::mutex::lock(&stru_254729A78);
  v8 = (_QWORD *)qword_25472C390;
  v9 = sub_20B828414(qword_25472C390 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BCC8;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472C390;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_254729A78);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20BA28904(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C398);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA28994(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  __int128 *v4;
  int v5;
  const void *v6;
  void *v7;
  __int128 v8;

  v2 = operator new();
  v4 = *(__int128 **)(a1 + 40);
  v3 = *(NSObject **)(a1 + 48);
  v5 = *(unsigned __int8 *)(a1 + 56);
  v6 = *(const void **)(a1 + 32);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = dispatch_group_create();
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = 0;
  v7 = _Block_copy(v6);
  *(_QWORD *)(v2 + 48) = 850045863;
  *(_QWORD *)(v2 + 32) = v7;
  *(_DWORD *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 104) = 0;
  if (*((char *)v4 + 23) < 0)
  {
    sub_20B80ACE0((_BYTE *)(v2 + 112), *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v8 = *v4;
    *(_QWORD *)(v2 + 128) = *((_QWORD *)v4 + 2);
    *(_OWORD *)(v2 + 112) = v8;
  }
  *(_QWORD *)(v2 + 136) = v2 + 48;
  *(_BYTE *)(v2 + 144) = 0;
  dispatch_retain(v3);
  if (!v5)
    sub_20B8EDA68(v2);
  return v2;
}

void sub_20BA28A78(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  void **v3;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 144))
    std::mutex::unlock(*(std::mutex **)(v1 + 136));
  if (*(char *)(v1 + 135) < 0)
    operator delete(*v3);
  std::mutex::~mutex(v2);
  v5 = *(_QWORD *)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    sub_20B8EDD24(v1, v5);
  MEMORY[0x20BD39CB0](v1, 0x10F2C40E01BBEB9);
  _Unwind_Resume(a1);
}

void sub_20BA28AEC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA28B10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20BA28B84(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20BA28B44(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E5B0))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20BA28B84(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  dispatch_time_t v4;
  unsigned int v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned int *)(a1 + 40));
  if (v2 == 1)
  {
    v3 = (uint64_t *)(a1 + 112);
    do
    {
      v4 = dispatch_time(0, 1000000);
      if (sub_20B8ED9E8(a1, v4, 0))
        break;
      v5 = atomic_load((unsigned int *)(a1 + 40));
      if (v5 == 2)
        break;
      v6 = sub_20B9A7C5C(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8 = a1 + 112;
        if (*(char *)(a1 + 135) < 0)
          v8 = *v3;
        *(_DWORD *)buf = 136315138;
        v12 = v8;
        _os_log_error_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_ERROR, "Still waiting for resource [%s] to complete in background.", buf, 0xCu);
      }
      v7 = atomic_load((unsigned int *)(a1 + 40));
    }
    while (v7 == 1);
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  _Block_release(*(const void **)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (*(_BYTE *)(a1 + 144))
    std::mutex::unlock(*(std::mutex **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    sub_20B8EDD24(a1, v9);
  return a1;
}

void sub_20BA28D1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  _Unwind_Resume(a1);
}

void sub_20BA28D2C(const void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  const void *v7;
  const void *v8;
  const void *v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void **v23;
  const void **v24;
  const void *v25;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v7 = *a1;
    v8 = a1[2];
    v9 = a1[1];
    if (v8)
      v10 = CFRetain(v8);
    else
      v10 = 0;
    v11 = 0;
    v12 = v3 >> 1;
    v13 = a1;
    while (1)
    {
      v14 = v13;
      v15 = v11 + 1;
      v13 += 3 * v11 + 3;
      v16 = 2 * v11;
      v11 = (2 * v11) | 1;
      v17 = v16 + 2;
      if (v17 < a3)
      {
        v18 = *((double *)v13 + 3);
        v19 = *(double *)v13;
        v20 = v14[3 * v15 + 1];
        v21 = v13[4];
        if (v20 != v21 && vabdd_f64(v19, v18) <= 0.3)
        {
          if (v20 >= v21)
            goto LABEL_11;
LABEL_10:
          v13 += 3;
          v11 = v17;
          goto LABEL_11;
        }
        if (v19 > v18)
          goto LABEL_10;
      }
LABEL_11:
      *v14 = *v13;
      v22 = v13[2];
      v13[2] = 0;
      sub_20B8955E0(v14 + 2, v22);
      v14[1] = v13[1];
      if (v11 > v12)
      {
        v23 = v13 + 2;
        if ((const void **)(a2 - 24) == v13)
        {
          *v13 = v7;
          sub_20B8955E0(v23, v10);
          v13[1] = v9;
        }
        else
        {
          v25 = *(const void **)(a2 - 8);
          v24 = (const void **)(a2 - 8);
          *v13 = *(v24 - 2);
          *v24 = 0;
          sub_20B8955E0(v23, v25);
          v13[1] = *(v24 - 1);
          *(v24 - 2) = v7;
          sub_20B8955E0(v24, v10);
          *(v24 - 1) = v9;
          sub_20BA28F08((uint64_t)a1, (uint64_t)(v13 + 3), 0xAAAAAAAAAAAAAAABLL * (v13 + 3 - a1));
        }
        return;
      }
    }
  }
}

void sub_20BA28EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
  sub_20B8955E0(a9, 0);
  _Unwind_Resume(a1);
}

void sub_20BA28F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  const void *v12;
  CFTypeRef v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  const void *v21;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = v3 >> 1;
    v7 = a1 + 24 * (v3 >> 1);
    v8 = *(double *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(double *)(a2 - 24);
    v11 = *(_QWORD *)(a2 - 16);
    if (v9 == v11 || vabdd_f64(v8, v10) > 0.3)
    {
      if (v8 <= v10)
        return;
    }
    else if (v9 >= v11)
    {
      return;
    }
    v12 = *(const void **)(a2 - 8);
    if (v12)
    {
      v13 = CFRetain(v12);
      v8 = *(double *)v7;
    }
    else
    {
      v13 = 0;
    }
    *(double *)(a2 - 24) = v8;
    v14 = a1 + 24 * v6;
    v15 = *(const void **)(v14 + 16);
    *(_QWORD *)(v14 + 16) = 0;
    sub_20B8955E0((const void **)(a2 - 8), v15);
    *(_QWORD *)(a2 - 16) = *(_QWORD *)(v7 + 8);
    if (v3 >= 2)
    {
      do
      {
        v17 = v6 - 1;
        v6 = (v6 - 1) >> 1;
        v16 = a1 + 24 * v6;
        v18 = *(double *)v16;
        v19 = *(_QWORD *)(v16 + 8);
        if (v19 == v11 || vabdd_f64(v18, v10) > 0.3)
        {
          if (v18 <= v10)
            goto LABEL_11;
        }
        else if (v19 >= v11)
        {
          goto LABEL_11;
        }
        *(double *)v7 = v18;
        v20 = a1 + 24 * v6;
        v21 = *(const void **)(v20 + 16);
        *(_QWORD *)(v20 + 16) = 0;
        sub_20B8955E0((const void **)(v7 + 16), v21);
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v16 + 8);
        v7 = a1 + 24 * v6;
      }
      while (v17 > 1);
    }
    else
    {
LABEL_11:
      v16 = v7;
    }
    *(double *)v16 = v10;
    sub_20B8955E0((const void **)(v16 + 16), v13);
    *(_QWORD *)(v16 + 8) = v11;
  }
}

_QWORD *sub_20BA29088(uint64_t a1, _QWORD *a2, unint64_t a3, double a4)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      v7 = (_QWORD *)v5;
      v8 = *(double *)(v5 + 32);
      v9 = *(_QWORD *)(v5 + 40);
      if (v9 == a3)
      {
        if (v8 < a4)
          goto LABEL_11;
        goto LABEL_8;
      }
      if (vabdd_f64(a4, v8) <= 0.3)
      {
        if (v9 > a3)
          goto LABEL_11;
LABEL_7:
        if (vabdd_f64(v8, a4) <= 0.3)
        {
          if (v9 >= a3)
            goto LABEL_17;
          goto LABEL_14;
        }
LABEL_8:
        if (v8 <= a4)
          goto LABEL_17;
LABEL_14:
        result = v7 + 1;
        v5 = v7[1];
        if (!v5)
          goto LABEL_17;
      }
      else
      {
        if (v8 >= a4)
          goto LABEL_7;
LABEL_11:
        v5 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_17;
      }
    }
  }
  v7 = result;
LABEL_17:
  *a2 = v7;
  return result;
}

void sub_20BA29124()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA29138(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4697F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20BA29170(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4697F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BA29190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char *v28;
  char *v29;
  uint64_t *v30;

  v4 = *(_QWORD *)(a1 + 8);
  LXCursorTerminationProbability();
  v6 = v5 + *(double *)a2;
  if (v6 >= *(double *)(v4 + 24))
  {
    v7 = *(uint64_t **)(a1 + 16);
    v8 = v7[1];
    v9 = v7[2];
    if (v8 >= v9)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20B80CDD8();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v7) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      v30 = v7 + 2;
      if (v16)
      {
        v18 = sub_20B871730(v16);
      }
      else
      {
        v18 = 0;
        v17 = 0;
      }
      v19 = (char *)&v18[3 * v13];
      v27[0] = v18;
      v27[1] = v19;
      v28 = v19;
      v29 = (char *)&v18[3 * v17];
      v21 = *(_QWORD *)(a2 + 8);
      v20 = *(CFTypeRef *)(a2 + 16);
      *(double *)v19 = v6;
      *((_QWORD *)v19 + 1) = v21;
      if (v20)
      {
        v20 = CFRetain(v20);
        v19 = v28;
      }
      v18[3 * v13 + 2] = v20;
      v28 = v19 + 24;
      sub_20BA293C0(v7, v27);
      v12 = v7[1];
      sub_20BA294A4((uint64_t)v27);
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 8);
      v10 = *(CFTypeRef *)(a2 + 16);
      *(double *)v8 = v6;
      *(_QWORD *)(v8 + 8) = v11;
      if (v10)
        v10 = CFRetain(v10);
      *(_QWORD *)(v8 + 16) = v10;
      v12 = v8 + 24;
      v7[1] = v8 + 24;
    }
    v7[1] = v12;
    sub_20BA28F08(*v7, v12, 0xAAAAAAAAAAAAAAABLL * ((v12 - *v7) >> 3));
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(v22 + 8);
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - *(_QWORD *)v22) >> 3);
    if (v24 > *(_QWORD *)(v4 + 16))
    {
      sub_20BA28D2C(*(const void ***)v22, v23, v24);
      v25 = *(_QWORD *)(v22 + 8);
      v26 = v25 - 24;
      sub_20B8955E0((const void **)(v25 - 8), 0);
      *(_QWORD *)(v22 + 8) = v26;
    }
  }
}

void sub_20BA29358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA29378(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA293B4()
{
  return &unk_24C45EC40;
}

uint64_t *sub_20BA293C0(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 16);
      result = *(uint64_t **)(v4 + v7 - 8);
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(v4 + v7 - 24);
      *(_QWORD *)(v8 - 16) = v9;
      if (result)
        result = (uint64_t *)CFRetain(result);
      *(_QWORD *)(v8 - 8) = result;
      v7 -= 24;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void sub_20BA2947C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 24)
    sub_20B8955E0((const void **)(v1 + 16 + v2), 0);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA294A4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B8955E0((const void **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BA294FC()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20BA29510(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C469798;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20BA29558(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C469798;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BA29588(uint64_t a1, uint64_t a2)
{
  double v2;
  _QWORD v3[6];
  double v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v7 = *(_QWORD *)(a1 + 40);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_20BA296CC;
  v3[3] = &unk_24C4AF2C8;
  v4 = *(double *)(a1 + 24);
  v3[4] = v6;
  v3[5] = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v2 = v4 - *(double *)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3) == v5)
    v2 = fmax(**(double **)v7 + -0.3 - *(double *)a2, v2);
  if (v2 <= 0.0)
    sub_20B895118(*(const void **)(a2 + 16), (uint64_t)v3, *(unsigned __int16 *)(a1 + 16));
  _Block_object_dispose(v6, 8);
}

void sub_20BA2966C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA29684(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC30))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA296C0()
{
  return &unk_24C45EC30;
}

void sub_20BA296CC(uint64_t a1, const void *a2, uint64_t a3, double a4)
{
  double v8;
  double v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  CFTypeRef v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  char *v31;
  char *v32;
  uint64_t *v33;

  if (LXCursorHasEntries())
  {
    v8 = **(double **)(a1 + 40) + a4;
    LXCursorTerminationProbability();
    v10 = v8 + v9;
    if (v10 >= *(double *)(a1 + 48))
    {
      v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + a3;
      v13 = v11[1];
      v14 = v11[2];
      if (v13 >= v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 3);
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 3);
        v18 = 2 * v17;
        if (2 * v17 <= v16 + 1)
          v18 = v16 + 1;
        if (v17 >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v18;
        v33 = v11 + 2;
        if (v19)
        {
          v21 = sub_20B871730(v19);
        }
        else
        {
          v21 = 0;
          v20 = 0;
        }
        v23 = (char *)&v21[3 * v16];
        v30[0] = v21;
        v30[1] = v23;
        v31 = v23;
        v32 = (char *)&v21[3 * v20];
        *(double *)v23 = v10;
        *((_QWORD *)v23 + 1) = v12;
        if (a2)
        {
          v24 = CFRetain(a2);
          v23 = v31;
        }
        else
        {
          v24 = 0;
        }
        v21[3 * v16 + 2] = v24;
        v31 = v23 + 24;
        sub_20BA293C0(v11, v30);
        v22 = v11[1];
        sub_20BA294A4((uint64_t)v30);
      }
      else
      {
        *(double *)v13 = v10;
        *(_QWORD *)(v13 + 8) = v12;
        if (a2)
          v15 = CFRetain(a2);
        else
          v15 = 0;
        *(_QWORD *)(v13 + 16) = v15;
        v22 = v13 + 24;
        v11[1] = v13 + 24;
      }
      v11[1] = v22;
      sub_20BA28F08(*v11, v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - *v11) >> 3));
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v26 = *(_QWORD *)(v25 + 8);
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *(_QWORD *)v25) >> 3);
      if (v27 > *(_QWORD *)(a1 + 56))
      {
        sub_20BA28D2C(*(const void ***)v25, v26, v27);
        v28 = *(_QWORD *)(v25 + 8);
        v29 = v28 - 24;
        sub_20B8955E0((const void **)(v28 - 8), 0);
        *(_QWORD *)(v25 + 8) = v29;
      }
    }
  }
}

void sub_20BA298D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA298F4(uint64_t a1)
{
  id *v2;
  id *v3;
  id *v4;

  v2 = *(id **)a1;
  v3 = *(id **)(a1 + 8);
  while (v2 != v3)

  sub_20B8292CC(a1 + 32, *(_QWORD **)(a1 + 40));
  v4 = *(id **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20BA29958(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  if (*(void ***)a1 != v3)
  {
    do
    {
      v4 = *v2++;

    }
    while (v2 != v3);
    v2 = *(void ***)a1;
  }
  *(_QWORD *)(a1 + 8) = v2;
  sub_20B8292CC(a1 + 32, *(_QWORD **)(a1 + 40));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = a1 + 40;
}

uint64_t sub_20BA299C0(_QWORD *a1, const char *a2, uint64_t a3)
{
  void **v3;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v17;

  v3 = (void **)a1[3];
  if (v3 == (void **)a1[1])
    return 0;
  while (1)
  {
    v5 = *v3;
    v6 = objc_msgSend_rawCandidate(*v3, a2, a3);
    if (!v6)
      break;
    v7 = (_QWORD *)v6;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) ? 40 : 24;
    if (!(*(uint64_t (**)(_QWORD *))(*v7 + v8))(v7))
      break;
    v11 = a1[8];
    v12 = objc_msgSend_rawCandidate(v5, v9, v10);
    if (v12)
    {
      v13 = (_QWORD *)v12;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) ? 40 : 24;
      v15 = (const void *)(*(uint64_t (**)(_QWORD *))(*v13 + v14))(v13);
    }
    else
    {
      v15 = 0;
    }
    if ((sub_20B90FE00(v11, v15, 2048) & 1) == 0)
      break;
    v3 = (void **)(a1[3] + 8);
    a1[3] = v3;
    if (v3 == (void **)a1[1])
      return 0;
  }
  v17 = a1[3];
  a1[3] = v17 + 8;
  return *(_QWORD *)v17;
}

void sub_20BA29AC4(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  unsigned int v33;
  uint64_t *v34;
  char *v36;
  CFIndex v37;

  if (a1[7] <= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3))
  {

  }
  else
  {
    v37 = 0;
    v4 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
    v5 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    sub_20B8D0624(v5, &v37, &v36);
    v6 = (2 * v37);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = v36;
      do
      {
        v9 = *v8++;
        v7 = (1025 * (v7 + v9)) ^ ((1025 * (v7 + v9)) >> 6);
        --v6;
      }
      while (v6);
      LODWORD(v6) = 9 * v7;
    }
    v10 = 32769 * (v6 ^ (v6 >> 11));
    v12 = (uint64_t **)(a1 + 5);
    v11 = a1[5];
    v13 = (uint64_t **)(a1 + 5);
    if (!v11)
      goto LABEL_17;
    v14 = (uint64_t **)(a1 + 5);
    do
    {
      v15 = *(_DWORD *)(v11 + 28);
      v16 = v15 >= v10;
      if (v15 >= v10)
        v17 = (uint64_t *)v11;
      else
        v17 = (uint64_t *)(v11 + 8);
      if (v16)
        v14 = (uint64_t **)v11;
      v11 = *v17;
    }
    while (*v17);
    if (v14 != v12 && v10 >= *((_DWORD *)v14 + 7))
    {

    }
    else
    {
LABEL_17:
      v19 = (_QWORD *)a1[1];
      v18 = a1[2];
      if ((unint64_t)v19 >= v18)
      {
        v21 = ((uint64_t)v19 - *a1) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_20B80CDD8();
        v22 = v18 - *a1;
        v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v24 = (unint64_t)sub_20B87FB70(v24);
        else
          v25 = 0;
        v26 = (_QWORD *)(v24 + 8 * v21);
        v27 = v24 + 8 * v25;
        *v26 = a2;
        v20 = v26 + 1;
        v29 = (char *)*a1;
        v28 = (char *)a1[1];
        if (v28 != (char *)*a1)
        {
          do
          {
            v30 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *--v26 = v30;
          }
          while (v28 != v29);
          v28 = (char *)*a1;
        }
        *a1 = v26;
        a1[1] = v20;
        a1[2] = v27;
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v19 = a2;
        v20 = v19 + 1;
      }
      a1[1] = v20;
      v31 = (uint64_t *)a1[5];
      v32 = (uint64_t **)(a1 + 5);
      if (v31)
      {
        while (1)
        {
          while (1)
          {
            v32 = (uint64_t **)v31;
            v33 = *((_DWORD *)v31 + 7);
            if (v33 <= v10)
              break;
            v31 = *v32;
            v13 = v32;
            if (!*v32)
              goto LABEL_42;
          }
          if (v33 >= v10)
            break;
          v31 = v32[1];
          if (!v31)
          {
            v13 = v32 + 1;
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        v34 = (uint64_t *)operator new(0x20uLL);
        *((_DWORD *)v34 + 7) = v10;
        sub_20B8296A0(v12 - 1, (uint64_t)v32, v13, v34);
      }
    }
    if (v36)
      MEMORY[0x20BD39C80](v36, 0x1000C80BDFB0063);
  }
}

void sub_20BA29CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x20BD39C80](a11, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void sub_20BA29D20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(void ***)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    do
    {
      v6 = *v5++;
      sub_20BA29AC4(a1, v6, a3);
    }
    while (v5 != *(void ***)(a2 + 8));
    v5 = *(void ***)a2;
  }
  v8 = *(_QWORD **)(a2 + 40);
  v7 = (_QWORD *)(a2 + 40);
  *(v7 - 4) = v5;
  sub_20B8292CC((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
  a1[3] = *a1;
}

void sub_20BA29D90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const __CFString *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  void *v20;

  v5 = *(void ***)a2;
  v6 = *(void ***)(a2 + 8);
  if (*(void ***)a2 != v6)
  {
    if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3 >= a3)
      v7 = a3;
    else
      v7 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
    v8 = (uint64_t *)(a1 + 40);
    do
    {
      v20 = *v5;
      v19 = 0;
      v9 = objc_msgSend_rawCandidate(v20, (const char *)a2, a3);
      v10 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v11 = sub_20B8D345C(v10);
      v19 = v11;
      v12 = *v8;
      if (!*v8)
        goto LABEL_17;
      v13 = a1 + 40;
      do
      {
        v14 = *(_DWORD *)(v12 + 28);
        v15 = v14 >= v11;
        if (v14 >= v11)
          v16 = (uint64_t *)v12;
        else
          v16 = (uint64_t *)(v12 + 8);
        if (v15)
          v13 = v12;
        v12 = *v16;
      }
      while (*v16);
      if ((uint64_t *)v13 != v8 && v11 >= *(_DWORD *)(v13 + 28))
      {

      }
      else
      {
LABEL_17:
        sub_20BA29EC0((char **)a1, (char *)(*(_QWORD *)a1 + 8 * v7), (char *)&v20);
        sub_20B90DBA8((uint64_t **)(a1 + 32), &v19, &v19);
        ++v7;
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = *(void ***)a2;
  }
  v18 = *(_QWORD **)(a2 + 40);
  v17 = (_QWORD *)(a2 + 40);
  *(v17 - 4) = v5;
  sub_20B8292CC((uint64_t)(v17 - 1), v18);
  *(v17 - 1) = v17;
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a1;
}

char *sub_20BA29EC0(char **a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    v14 = ((v5 - v6) >> 3) + 1;
    if (v14 >> 61)
      sub_20B80CDD8();
    v16 = v7 >> 3;
    v17 = v9 - (_QWORD)v6;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    if (v18)
    {
      v20 = (char *)sub_20B87FB70(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v24 = 1;
        else
          v24 = v7 >> 2;
        v25 = (char *)sub_20B87FB70(v24);
        v21 = &v25[8 * (v24 >> 2)];
        v22 = &v25[8 * v26];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(_QWORD *)v21 = *(_QWORD *)v3;
    v27 = *a1;
    v28 = v21;
    if (*a1 != v8)
    {
      v29 = v8;
      v28 = v21;
      do
      {
        v30 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v28 - 1) = v30;
        v28 -= 8;
      }
      while (v29 != v27);
    }
    v31 = a1[1];
    v32 = v31 - v8;
    if (v31 != v8)
      memmove(v21 + 8, v8, v31 - v8);
    v33 = *a1;
    *a1 = v28;
    a1[1] = &v21[v32 + 8];
    a1[2] = v22;
    if (v33)
      operator delete(v33);
    return v21;
  }
  else if (v8 == v5)
  {
    *(_QWORD *)v8 = *(_QWORD *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    v10 = v8 + 8;
    v11 = v5 - 8;
    v12 = a1[1];
    while (v11 < v5)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    a1[1] = v12;
    if (v5 != v10)
      memmove(&v5[-8 * ((v5 - v10) >> 3)], v8, v5 - v10);
    if (v8 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v8 = *(_QWORD *)v3;
  }
  return v8;
}

void sub_20BA2A0C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA2A0D8(uint64_t a1, unsigned int a2)
{
  const void **v4;
  CFLocaleRef v5;
  void *v6;
  void *v7;
  const void *v8;
  __int128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (const void **)(a1 + 8);
  *(_QWORD *)a1 = &off_24C462E90;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if (!qword_25472C3C0)
  {
    v10 = xmmword_24C4AF2E8;
    v11 = 0;
    qword_25472C3C0 = _sl_dlopen();
  }
  if (qword_25472C3C0)
  {
    v5 = sub_20B8D0FCC(a2);
    if (v5)
    {
      *(_QWORD *)&v10 = 0;
      *((_QWORD *)&v10 + 1) = &v10;
      v11 = 0x2000000000;
      v6 = off_25472C3C8;
      v12 = off_25472C3C8;
      if (!off_25472C3C8)
      {
        v7 = (void *)sub_20BA2A640();
        v6 = dlsym(v7, "NLStringTokenizerCreate");
        *(_QWORD *)(*((_QWORD *)&v10 + 1) + 24) = v6;
        off_25472C3C8 = v6;
      }
      _Block_object_dispose(&v10, 8);
      if (!v6)
      {
        dlerror();
        abort_report_np();
        __break(1u);
      }
      v8 = (const void *)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, CFLocaleRef))v6)(0, 0, 0, 0, 0, v5);
      sub_20BA2A2C4(v4, v8);
      CFRelease(v5);
    }
  }
  return a1;
}

void sub_20BA2A268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  std::mutex *v3;
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, const void *);
  _Block_object_dispose(va1, 8);
  sub_20B8B0328((const void **)va, 0);
  std::mutex::~mutex(v3);
  sub_20BA2A2C4(v2, 0);
  _Unwind_Resume(a1);
}

void sub_20BA2A2C4(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20BA2A2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a1 + 8))
  {
    v8 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    v9 = *(_QWORD *)(a1 + 8);
    v12 = 0;
    v13 = &v12;
    v14 = 0x2000000000;
    v10 = off_25472C3A8;
    v15 = off_25472C3A8;
    if (!off_25472C3A8)
    {
      v11 = (void *)sub_20BA2A640();
      v10 = dlsym(v11, "NLStringTokenizerSetString");
      v13[3] = (uint64_t)v10;
      off_25472C3A8 = v10;
    }
    _Block_object_dispose(&v12, 8);
    if (v10)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(v9, a2, a3, a4);
      std::mutex::unlock(v8);
    }
    else
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
  }
}

void sub_20BA2A3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

BOOL sub_20BA2A40C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472C3B0;
  v9 = off_25472C3B0;
  if (!off_25472C3B0)
  {
    v3 = (void *)sub_20BA2A640();
    v2 = dlsym(v3, "NLStringTokenizerAdvanceToNextToken");
    v7[3] = (uint64_t)v2;
    off_25472C3B0 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1) != 0;
}

uint64_t sub_20BA2A4D8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472C3B8;
  v9 = off_25472C3B8;
  if (!off_25472C3B8)
  {
    v3 = (void *)sub_20BA2A640();
    v2 = dlsym(v3, "NLStringTokenizerGetCurrentTokenRange");
    v7[3] = (uint64_t)v2;
    off_25472C3B8 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

uint64_t sub_20BA2A5A0()
{
  return 0;
}

uint64_t sub_20BA2A5A8(uint64_t a1)
{
  const void **v2;

  *(_QWORD *)a1 = &off_24C462E90;
  v2 = (const void **)(a1 + 8);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  sub_20BA2A2C4(v2, 0);
  return a1;
}

void sub_20BA2A5EC(uint64_t a1)
{
  const void **v1;

  *(_QWORD *)a1 = &off_24C462E90;
  v1 = (const void **)(a1 + 8);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  sub_20BA2A2C4(v1, 0);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA2A640()
{
  uint64_t v0;
  void *v2;

  if (qword_25472C3C0)
    return qword_25472C3C0;
  qword_25472C3C0 = _sl_dlopen();
  v0 = qword_25472C3C0;
  if (!qword_25472C3C0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

_QWORD *sub_20BA2A700(_QWORD *a1)
{
  const void **v2;

  *a1 = off_24C461CC8;
  v2 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v2, 0);
  return a1;
}

void sub_20BA2A748(_QWORD *a1)
{
  const void **v1;

  *a1 = off_24C461CC8;
  v1 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v1, 0);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA2A7A0(uint64_t a1, const void *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), a2);
  return 1;
}

uint64_t sub_20BA2A7BC()
{
  return 0;
}

uint64_t sub_20BA2A7C4()
{
  uint64_t v0;
  const __CFURL *v1;
  const __CFURL *v2;
  const __CFURL *v3;
  const __CFURL *v4;
  _QWORD *v5;
  UInt8 *v6;
  UInt8 *v7;
  size_t Length;
  UInt8 *v9;
  UInt8 *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  UChar *v20;
  UInt8 v21;
  UChar *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  UChar *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  UChar *v30;
  UInt8 v31;
  UChar *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  UChar *v36;
  uint64_t v37;
  size_t v38;
  UInt8 v39;
  UChar *v40;
  uint64_t v41;
  UChar *v42;
  int v43;
  uint64_t v44;
  size_t v45;
  UInt8 v46;
  UChar *v47;
  uint64_t v48;
  UChar *v49;
  int64_t v50;
  uint64_t v51;
  UInt8 v52;
  UChar *v53;
  UChar *v54;
  uint64_t v55;
  const __CFURL *v57;
  _QWORD *v58;
  UInt8 *v59;
  CFDataRef resourceData;
  SInt32 errorCode;
  UChar __src[7680];
  uint64_t v63;
  CFRange v64;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v63 = *MEMORY[0x24BDAC8D0];
  v6 = (UInt8 *)malloc_type_malloc(0x5CuLL, 0xDC1690DCuLL);
  if (v6)
  {
    v7 = v6;
    errorCode = 0;
    resourceData = 0;
    if (CFURLCreateDataAndPropertiesFromResource((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, &resourceData, 0, 0, &errorCode)&& (Length = CFDataGetLength(resourceData), (v9 = (UInt8 *)malloc_type_malloc(Length, 0xDC1690DCuLL)) != 0))
    {
      v10 = v9;
      v64.location = 0;
      v64.length = Length;
      CFDataGetBytes(resourceData, v64, v9);
      CFRelease(resourceData);
      *v7 = *v10;
      v11 = bswap32(*((unsigned __int16 *)v10 + 1)) >> 16;
      *((_WORD *)v7 + 1) = v11;
      v12 = bswap32(*((unsigned __int16 *)v10 + 2)) >> 16;
      *((_WORD *)v7 + 2) = v12;
      *((_WORD *)v7 + 3) = bswap32(*((unsigned __int16 *)v10 + 3)) >> 16;
      *((_WORD *)v7 + 4) = bswap32(*((unsigned __int16 *)v10 + 4)) >> 16;
      *((_WORD *)v7 + 5) = bswap32(*((unsigned __int16 *)v10 + 5)) >> 16;
      *((_WORD *)v7 + 6) = bswap32(*((unsigned __int16 *)v10 + 6)) >> 16;
      *((_WORD *)v7 + 7) = bswap32(*((unsigned __int16 *)v10 + 7)) >> 16;
      *((_WORD *)v7 + 8) = bswap32(*((unsigned __int16 *)v10 + 8)) >> 16;
      *((_WORD *)v7 + 9) = bswap32(*((unsigned __int16 *)v10 + 9)) >> 16;
      v13 = malloc_type_malloc((__int16)v11 * (uint64_t)(__int16)v12 + (__int16)v11, 0xDC1690DCuLL);
      *(_QWORD *)(v7 + 20) = v13;
      if (v13)
      {
        v57 = v2;
        v58 = v5;
        v59 = v10;
        memmove(v13, v10 + 20, *((__int16 *)v7 + 2) * (uint64_t)*((__int16 *)v7 + 1));
        v14 = *((__int16 *)v7 + 2) * *((__int16 *)v7 + 1);
        v15 = v14 + 20;
        if (v14 >= 1)
        {
          v16 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(v7 + 20) + v16++) ^= *v7;
          while (v16 < *((__int16 *)v7 + 2) * (uint64_t)*((__int16 *)v7 + 1));
        }
        v17 = *((__int16 *)v7 + 3);
        v18 = *((__int16 *)v7 + 4);
        if ((int)v17 > 0)
        {
          v19 = 0;
          v20 = __src;
          do
          {
            memmove(&__src[256 * v19], &v59[v15], v18);
            if (v18 >= 1)
            {
              v21 = *v7;
              v22 = v20;
              v23 = v18;
              do
              {
                *(_BYTE *)v22 ^= v21;
                v22 = (UChar *)((char *)v22 + 1);
                --v23;
              }
              while (v23);
            }
            v15 += v18;
            *(UChar *)((char *)&__src[256 * v19++] + v18) = 0;
            v20 += 256;
          }
          while (v19 != v17);
        }
        v24 = malloc_type_malloc((v18 + 2) * (int)v17, 0xDC1690DCuLL);
        *(_QWORD *)(v7 + 28) = v24;
        if (v24)
        {
          if (*((__int16 *)v7 + 3) >= 1)
          {
            v25 = 0;
            v26 = __src;
            do
            {
              memmove((void *)(*(_QWORD *)(v7 + 28) + (*((__int16 *)v7 + 4) + 2) * (uint64_t)(int)v25++), v26, *((__int16 *)v7 + 4) + 2);
              v26 += 256;
            }
            while (v25 < *((__int16 *)v7 + 3));
          }
          v27 = *((__int16 *)v7 + 5);
          v28 = *((__int16 *)v7 + 6);
          if ((int)v27 > 0)
          {
            v29 = 0;
            v30 = __src;
            do
            {
              memmove(&__src[256 * v29], &v59[v15], v28);
              if (v28 >= 1)
              {
                v31 = *v7;
                v32 = v30;
                v33 = v28;
                do
                {
                  *(_BYTE *)v32 ^= v31;
                  v32 = (UChar *)((char *)v32 + 1);
                  --v33;
                }
                while (v33);
              }
              v15 += v28;
              *(UChar *)((char *)&__src[256 * v29++] + v28) = 0;
              v30 += 256;
            }
            while (v29 != v27);
          }
          v34 = malloc_type_malloc((v28 + 2) * (int)v27, 0xDC1690DCuLL);
          *(_QWORD *)(v7 + 36) = v34;
          if (v34)
          {
            v2 = v57;
            v10 = v59;
            if (*((__int16 *)v7 + 5) >= 1)
            {
              v35 = 0;
              v36 = __src;
              do
              {
                memmove((void *)(*(_QWORD *)(v7 + 36) + (*((__int16 *)v7 + 6) + 2) * (uint64_t)(int)v35++), v36, *((__int16 *)v7 + 6) + 2);
                v36 += 256;
              }
              while (v35 < *((__int16 *)v7 + 5));
            }
            v37 = *((__int16 *)v7 + 7);
            v38 = *((__int16 *)v7 + 7);
            memmove(__src, &v59[v15], v38);
            if ((int)v37 >= 1)
            {
              v39 = *v7;
              v40 = __src;
              v41 = v37;
              do
              {
                *(_BYTE *)v40 ^= v39;
                v40 = (UChar *)((char *)v40 + 1);
                --v41;
              }
              while (v41);
            }
            *(UChar *)((char *)__src + v38) = 0;
            v42 = (UChar *)malloc_type_malloc(v38 + 2, 0xDC1690DCuLL);
            *(_QWORD *)(v7 + 44) = v42;
            if (v42)
            {
              v43 = v15 + v37;
              sub_20B9AD640(v42, __src, *((__int16 *)v7 + 7) + 2);
              v44 = *((__int16 *)v7 + 8);
              v45 = *((__int16 *)v7 + 8);
              memmove(__src, &v59[v43], v45);
              if ((int)v44 >= 1)
              {
                v46 = *v7;
                v47 = __src;
                v48 = v44;
                do
                {
                  *(_BYTE *)v47 ^= v46;
                  v47 = (UChar *)((char *)v47 + 1);
                  --v48;
                }
                while (v48);
              }
              *(UChar *)((char *)__src + v45) = 0;
              v49 = (UChar *)malloc_type_malloc(v45 + 2, 0xDC1690DCuLL);
              *(_QWORD *)(v7 + 52) = v49;
              v5 = v58;
              if (v49)
              {
                sub_20B9AD640(v49, __src, *((__int16 *)v7 + 8) + 2);
                v50 = *((__int16 *)v7 + 9);
                memmove(__src, &v59[(v43 + v44)], v50);
                if (v50 >= 1)
                {
                  v51 = (unsigned __int16)v50;
                  v52 = *v7;
                  v53 = __src;
                  do
                  {
                    *(_BYTE *)v53 ^= v52;
                    v53 = (UChar *)((char *)v53 + 1);
                    --v51;
                  }
                  while (v51);
                }
                *(UChar *)((char *)__src + v50) = 0;
                v54 = (UChar *)malloc_type_malloc(v50 + 2, 0xDC1690DCuLL);
                *(_QWORD *)(v7 + 60) = v54;
                if (v54)
                {
                  sub_20B9AD640(v54, __src, *((__int16 *)v7 + 9) + 2);
                  free(v59);
                  goto LABEL_54;
                }
                errorCode = -108;
                v49 = *(UChar **)(v7 + 52);
              }
              else
              {
                errorCode = -108;
              }
              free(v49);
              v42 = *(UChar **)(v7 + 44);
            }
            else
            {
              errorCode = -108;
              v5 = v58;
            }
            free(v42);
            v34 = *(void **)(v7 + 36);
          }
          else
          {
            errorCode = -108;
            v2 = v57;
            v5 = v58;
            v10 = v59;
          }
          free(v34);
          v24 = *(void **)(v7 + 28);
        }
        else
        {
          errorCode = -108;
          v2 = v57;
          v5 = v58;
          v10 = v59;
        }
        free(v24);
        v13 = *(void **)(v7 + 20);
      }
      else
      {
        errorCode = -108;
      }
      free(v13);
      free(v10);
      v55 = errorCode;
      if (!errorCode)
      {
LABEL_54:
        v55 = sub_20B8CEE70((void **)(v7 + 68), v2);
        if (!(_DWORD)v55)
        {
          *v5 = v7;
          return v55;
        }
      }
    }
    else
    {
      v55 = 4294967188;
    }
    free(v7);
    return v55;
  }
  return 4294967188;
}

void sub_20BA2ADF4(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 20));
    free(*(void **)(a1 + 28));
    free(*(void **)(a1 + 36));
    free(*(void **)(a1 + 44));
    free(*(void **)(a1 + 52));
    free(*(void **)(a1 + 60));
    sub_20B8CEDD4(a1 + 68);
    free((void *)a1);
  }
}

uint64_t sub_20BA2AE54(uint64_t a1, unsigned __int16 *a2, int a3, int a4, uint64_t a5, _DWORD *a6, int *a7, int a8, __int16 a9, char a10)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  size_t v21;
  UChar *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  int *v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _WORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  int v72;
  int v74;
  unsigned __int16 v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  char v79;
  uint64_t v80;
  int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE *v86;
  _BYTE *v87;
  _WORD *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  unsigned __int16 *v93;
  _WORD *v94;
  int v95;
  int32_t v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  int v105;
  int v106;
  _BYTE *v107;
  int v108;
  int v109;
  uint64_t v110;
  char v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  int32_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  _BYTE *v122;
  int v123;
  int v124;
  uint64_t v125;
  _BYTE *v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _WORD *v135;
  int32_t v136;
  int v137;
  __int16 v138;
  int v139;
  int v140;
  int v141;
  int v142;
  char v143;
  int v144;
  _BYTE *v145;
  int v146;
  int v147;
  uint64_t v148;
  _BYTE *v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  _WORD *v158;
  _WORD *v159;
  int v160;
  char v161;
  uint64_t v162;
  __int16 v163;
  int v164;
  int v165;
  _BYTE *v166;
  int v167;
  int v168;
  uint64_t v169;
  _WORD *v170;
  _WORD *v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _WORD *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  int v185;
  __int16 v186;
  uint64_t v187;
  unsigned __int16 *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _DWORD *v193;
  int v194[2];
  int *v195;
  int v196;
  int v197;
  uint64_t v200;
  int v201;
  _BYTE v202[103];
  _BYTE v203[100];
  _BYTE v204[2];
  unsigned __int16 v205[56];
  char v206;
  int v207;
  char v208;
  __int16 v209;
  __int16 v210;
  UChar s[129];
  _DWORD v212[51];
  _BYTE v213[40];
  UChar v214[129];
  UChar v215[127];
  _BYTE v216[2];
  _BYTE v217[68];
  UChar v218[31];
  _BYTE v219[4];
  UChar v220[33];
  _BYTE v221[254];
  _BYTE v222[6];
  uint64_t v223;
  __int16 v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;

  v14 = a3;
  v228 = *MEMORY[0x24BDAC8D0];
  if (a3 > 127)
  {
    v16 = 0;
    do
    {
      if (v16 == 64)
        goto LABEL_8;
      v17 = *(unsigned __int16 *)((char *)a2 + (a3 - 128) + v16 * 2);
      s[v16++] = v17;
    }
    while (v17);
    if (v16 == 64)
    {
LABEL_8:
      v18 = 128;
      goto LABEL_15;
    }
    v18 = 128;
    bzero(&s[v16], 128 - v16 * 2);
LABEL_15:
    v14 = 128;
  }
  else
  {
    if ((a3 - 257) < 0xFFFFFEFD)
      return 4294967186;
    v18 = a3;
    v19 = a3 + ((unsigned __int16)(a3 & 0x8000) >> 15);
    v20 = (uint64_t)(__int16)v19 >> 1;
    v21 = 2 * ((__int16)v19 >> 1);
    v22 = s;
    while (v20)
    {
      v23 = *a2++;
      *v22++ = v23;
      v21 -= 2;
      --v20;
      if (!v23)
      {
        if (v20)
          bzero(v22, v21);
        break;
      }
    }
  }
  *(UChar *)((char *)s + v18) = 0;
  v212[0] = a4;
  v203[0] = a10;
  v24 = v14 - a4;
  if (v14 == a4)
  {
    result = 0;
    *a7 = 0;
    return result;
  }
  v196 = a4;
  v192 = v14;
  v193 = a6;
  *(_QWORD *)v194 = a5;
  v195 = a7;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = a9;
  *(_WORD *)&v222[4] = 0;
  v221[0] = 0;
  LOWORD(a6) = 1;
  v29 = a9;
  do
  {
    v30 = sub_20BA2E0AC(a1, (uint64_t)s, (__int16)v24 - (__int16)v25, 0, &v222[4], v221);
    if (v30)
    {
      v27 = 0;
      v31 = (__int16)a6;
      v26 = v30;
      v29 = v28;
    }
    else
    {
      v32 = sub_20BA2E0AC(a1, (uint64_t)s, (__int16)v24 - (__int16)v25 + v26, v27, &v222[4], v221);
      if (v32)
        v31 = (_WORD)a6 - 1;
      else
        v31 = (__int16)a6;
      if (v32)
      {
        v25 -= v26;
        v26 = v32;
      }
      else
      {
        v26 = 0;
      }
      if (!v32)
        v29 = v28;
    }
    v25 += v26;
    v33 = (__int16)v29 < *(__int16 *)&v222[4] || (unsigned __int16)v29 == 0;
    if (v33)
      v28 = *(__int16 *)&v222[4];
    else
      v28 = v29;
    *(_WORD *)&v202[2 * v31 + 1] = v28;
    v34 = v221[0];
    v203[v31 + 51] = sub_20B98D9C8(v221[0]);
    v35 = (__int16)v25;
    v212[v31] = v35;
    v203[v31] = v34;
    LODWORD(a6) = (__int16)(v31 + 1);
    if ((int)a6 > 49)
    {
      v31 = 0;
      goto LABEL_41;
    }
    if (!v26)
      break;
    ++v27;
  }
  while ((unsigned __int16)v25 != (unsigned __int16)v24);
  if (v26)
    goto LABEL_42;
LABEL_41:
  LOWORD(a6) = v31;
LABEL_42:
  v36 = v195;
  if (!(_WORD)v25 || (__int16)a6 <= 1)
    goto LABEL_342;
  if ((unsigned __int16)a6 >= 0x10u)
  {
    *(_WORD *)(a5 + 66) = v25 + v196;
    v37 = v203[(unsigned __int16)a6 + 50];
    if (v37 == 1)
    {
      v38 = 2;
    }
    else
    {
      if (v37 != 4)
        goto LABEL_342;
      v38 = 6;
    }
    *(_BYTE *)(a5 + 68) = v37;
    *(_BYTE *)(a5 + 69) = v38;
    if ((int)v35 + v196 <= 63)
    {
      LODWORD(v180) = v24 - v35;
      if ((2 * u_strlen((UChar *)((char *)s + v24 - (int)v35)) - 65) < 0xFFFFFFBD)
        return 4294967186;
      v180 = (int)v180;
      sub_20B9AD640((UChar *)a5, (UChar *)((char *)s + (int)v180), 0x42uLL);
      if ((int)v180 >= v192)
      {
LABEL_341:
        result = 0;
        *v193 = -1;
        *v195 = 1;
        return result;
      }
      while (1)
      {
        v221[0] = 0;
        if (!*(_WORD *)(a1 + 82))
          break;
        sub_20BA31438(*(_QWORD *)(a1 + 84), (unsigned __int8 *)s + v180, 2, &v222[4], v221);
        if (!v221[0])
          break;
        v180 += 2;
        if (v180 >= v192)
          goto LABEL_341;
      }
    }
LABEL_342:
    result = 0;
    *v195 = 0;
    return result;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v223 = 0x100010001;
  v224 = 1;
  v225 = 0;
  v42 = *(_QWORD *)(a1 + 60);
  v43 = v42 + 40;
  v226 = 0x1000100010001;
  v227 = 0;
  do
  {
    v44 = (char *)v205 + v40;
    *(unsigned __int16 *)((char *)v205 + v40 + 1) = *(_WORD *)(v43 + v39);
    if (*(_WORD *)&v222[v39 + 4])
    {
      *v44 = 2;
      *(_WORD *)(v44 + 3) = *(_WORD *)(v43 + v39 + 32);
      v45 = v44 + 5;
    }
    else
    {
      v45 = (unsigned __int16 *)((char *)&v205[4 * v41 + 1] - v41 + 1);
      *((_BYTE *)v205 + v40) = -1;
    }
    *v45 = 0;
    ++v41;
    v40 += 7;
    v39 += 2;
  }
  while (v40 != 112);
  v206 = -1;
  v207 = *(unsigned __int16 *)(v42 + 104);
  v208 = -1;
  v209 = *(_WORD *)(v42 + 106);
  v210 = 0;
  *v195 = 0;
  LODWORD(v46) = *v193;
  if (!*v193)
  {
    LODWORD(v46) = (unsigned __int16)a6 - 1;
    *v193 = v46;
  }
  if ((int)v46 >= 1)
  {
    v47 = 0;
    v46 = v46;
    v191 = a5 + 66;
    v197 = (__int16)v25;
LABEL_57:
    if (a8 && v212[v46] != (_DWORD)v35)
      goto LABEL_69;
    v48 = v35;
    if ((2 * u_strlen(s) - 257) < 0xFFFFFEFD)
      goto LABEL_60;
    sub_20B9AD640(v215, s, 0x102uLL);
    if (*v36 >= 46)
    {
      *v36 = v47;
      goto LABEL_344;
    }
    v49 = *(_QWORD *)(a1 + 60);
    v50 = *(unsigned __int16 **)(a1 + 44);
    v220[0] = 0;
    v218[0] = 0;
    *(_WORD *)&v217[2] = 0;
    v201 = 0;
    v200 = 0;
    v51 = v203[v46];
    v52 = v51 - 200 > 3 || v51 == 201;
    v35 = v48;
    if (!v52
      || (v51 & 0xFE) == 2
      || *(unsigned __int16 *)&v203[v46] / 0xAu - 13 < 3
      || v51 - 112 <= 9 && ((1 << (v51 - 112)) & 0x203) != 0
      || (v51 & 0xFE) == 0x72)
    {
      goto LABEL_67;
    }
    v54 = v203[v46];
    v55 = v46;
    do
    {
      v56 = v54;
      v54 = v202[v55 + 102];
      if (v56 <= 0x2C && ((1 << v56) & 0x100000804000) != 0)
        goto LABEL_67;
      v57 = v56 == 93 || v56 == 45;
      v58 = v57 || v56 == 73;
      v59 = v58;
      if (v54 != 100 && v59)
        goto LABEL_67;
      if (v56 - 30 < 3 || v56 == 210)
      {
        if (v54 - 110 <= 0xA && ((1 << (v54 - 110)) & 0x403) != 0)
          goto LABEL_67;
      }
      else if (v54 - 112 <= 9 && ((1 << (v54 - 112)) & 0x203) != 0)
      {
        goto LABEL_67;
      }
      if ((v54 & 0xFE) == 0x72)
      {
        if (v56 - 60 > 0x17 || ((1 << (v56 - 60)) & 0xB0000B) == 0)
          goto LABEL_67;
      }
      else if (v56 == 83)
      {
        if (v54 != 120 && v54 != 150)
          goto LABEL_67;
      }
      else
      {
        if (v56 == 63
          || v54 == 45 && v56 - 110 <= 0x28 && ((1 << (v56 - 110)) & 0x10040100C3FLL) != 0)
        {
          goto LABEL_67;
        }
        v189 = sub_20B98D9C8(v202[v55 + 102]);
        v61 = sub_20B98D9C8(v56);
        v35 = v48;
        if (!(v189 | v61) && v56 <= 0x63 && v54 < 0x64)
          goto LABEL_67;
      }
      --v55;
    }
    while ((unint64_t)(v55 + 1) > 1);
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    while (1)
    {
      v70 = v203[v69];
      if (v70 <= 0x45)
      {
        if (v70 > 0x3D)
          goto LABEL_147;
        if (((1 << v70) & 0x1004010040100401) == 0)
        {
          if (((1 << v70) & 0x2008020080200802) == 0)
          {
LABEL_147:
            if (v51 < 2 || v64 || v63)
              goto LABEL_67;
            ++v66;
            goto LABEL_129;
          }
          goto LABEL_127;
        }
      }
      else
      {
        v71 = v70 - 70;
        if (v70 - 70 > 0x33)
          goto LABEL_123;
        if (((1 << v71) & 0xC3F00C0000000) != 0)
        {
LABEL_141:
          if (v51 < 2 || v64 || v63)
            goto LABEL_67;
          v64 = 0;
          ++v65;
          goto LABEL_145;
        }
        if (((1 << v71) & 0x100401) == 0)
        {
          if (((1 << v71) & 0x200802) == 0)
          {
LABEL_123:
            switch(v203[v69])
            {
              case 0xC8:
              case 0xCA:
                goto LABEL_128;
              case 0xC9:
              case 0xCB:
                break;
              default:
                if (v70 - 130 <= 0x14 && ((1 << (v70 + 126)) & 0x100401) != 0)
                  goto LABEL_141;
                goto LABEL_147;
            }
          }
LABEL_127:
          ++v68;
          goto LABEL_129;
        }
      }
LABEL_128:
      ++v67;
LABEL_129:
      v72 = v70 & 0xFE;
      if (v72 == 200)
      {
        if (v65 | v66)
          goto LABEL_67;
        v66 = 0;
        v65 = 0;
        ++v63;
        v62 = v67 + v68 - v64;
      }
      else if (v72 == 202)
      {
        if (v65 | v66)
          goto LABEL_67;
        if (v67 + v68 == ++v64 + v62 || 0xAAAAAAAAAAAAAAABLL * (v67 + v68 - (v64 + v62)) >= 0x5555555555555556)
          goto LABEL_67;
        v66 = 0;
        v65 = 0;
      }
LABEL_145:
      if (v46 + 1 == ++v69)
      {
        if (v63 >= 2 && v64)
          goto LABEL_67;
        v187 = v49;
        v188 = v50;
        if (v64)
          ++v203[v46 + 51];
        v190 = (v212[0] + v212[v46]);
        if (v190 > 0x100)
          goto LABEL_60;
        sub_20B9AD698((uint64_t)v214, (uint64_t)v215 + (v192 - v190), v190);
        *(UChar *)((char *)v214 + v190) = 0;
        v74 = 2 * u_strlen(v214);
        if ((v74 & 0xFE) != 0)
        {
          v75 = 0;
          v76 = 0;
          v202[0] = 0;
          v77 = v74 & 0xFE;
          v78 = &v213[v77 + 38];
          v79 = v74 - 2;
          do
          {
            if (*(_WORD *)(a1 + 82))
            {
              sub_20BA31438(*(_QWORD *)(a1 + 84), v78, 2, v221, v202);
              if (v202[0] && v221[0] == 101)
                v213[(__int16)v75++] = v79 - v76;
            }
            else
            {
              v202[0] = 0;
            }
            v76 += 2;
            v78 -= 2;
          }
          while (v76 < v77);
          if (v75)
          {
            *(_WORD *)&v222[4] = 0;
            v80 = v213[(__int16)v75 - 1];
            sub_20B9AD698((uint64_t)&v222[4], (uint64_t)v214, v80);
            *(_WORD *)&v222[v80 + 4] = 0;
            if ((__int16)v75 >= 2)
            {
              v81 = v75 - 2;
              while (1)
              {
                v82 = &v213[v81];
                v83 = *v82;
                v84 = v82[1];
                if (v83 - v84 + 2 * u_strlen((const UChar *)&v222[4]) > 0x102)
                  break;
                v85 = v83 - 2;
                v86 = &v222[4];
                v87 = v222;
                do
                {
                  v88 = v86;
                  v89 = *((unsigned __int16 *)v87 + 2);
                  v87 += 2;
                  v86 += 2;
                }
                while (v89);
                v80 = v80 + v83 - 2 - v84;
                v90 = __OFSUB__(v85, v84);
                v91 = v85 - v84;
                if (v91 < 0 != v90)
                  ++v91;
                v92 = (uint64_t)v91 >> 1;
                v93 = (UChar *)((char *)&v214[1] + v84);
                do
                {
                  v94 = v88;
                  if (!v92)
                    break;
                  v95 = *v93++;
                  *v88++ = v95;
                  --v92;
                }
                while (v95);
                *v94 = 0;
                *(_WORD *)&v222[v80 + 4] = 0;
                v53 = v81-- <= 0;
                if (v53)
                  goto LABEL_177;
              }
LABEL_179:
              v36 = v195;
              goto LABEL_60;
            }
LABEL_177:
            v96 = u_strlen((const UChar *)&v222[4]);
            v97 = 2 * (u_strlen(v214) + v96);
            v98 = v213[0];
            if (v97 - v213[0] > 0x102)
              goto LABEL_179;
            sub_20B9AD6F8((uint64_t)&v222[4], (UChar *)((char *)&v214[1] + v213[0]), 0x102uLL);
            *(_WORD *)&v222[v80 + 2 + 2 * u_strlen(v214) - v98] = 0;
            if ((2 * u_strlen((const UChar *)&v222[4]) - 257) < 0xFFFFFEFD)
              goto LABEL_179;
            sub_20B9AD640(v214, (UChar *)&v222[4], 0x102uLL);
          }
        }
        v36 = v195;
        if (sub_20BA2C64C(v214, v220, a1, v205, 0, &v201))
          goto LABEL_60;
        v181 = v201;
        if (!v201)
        {
          v36 = v195;
          if ((2 * u_strlen(v214) - 65) < 0xFFFFFFBD)
            goto LABEL_60;
          sub_20B9AD640(v218, v214, 0x42uLL);
          v136 = u_strlen(v218);
          v137 = v136 << 17;
          if (!(v136 << 17))
            goto LABEL_327;
          if (v137 >= 1)
          {
            v138 = v136;
            v139 = sub_20BA2C5C4(a1, (unsigned __int8 *)v218);
            v36 = v195;
            v35 = v48;
            if (v139 == -11)
              goto LABEL_67;
            v140 = v139;
            v141 = 0;
            v142 = 0;
            v143 = 0;
            v144 = (__int16)(2 * v138);
            while (1)
            {
              if (!((unsigned __int16)v141 | v140))
                v143 = 1;
              if ((2 * u_strlen((const UChar *)&v217[2]) - 63) < 0xFFFFFFBD)
                goto LABEL_60;
              if (v140 == 102)
              {
                v36 = v195;
                v35 = v48;
                if (v142 == 2)
                  goto LABEL_67;
                v145 = v216;
                if (!(_WORD)v141)
                  goto LABEL_67;
                do
                {
                  v146 = *((unsigned __int16 *)v145 + 2);
                  v145 += 2;
                }
                while (v146);
                v147 = *v188;
                *((_WORD *)v145 + 1) = v147;
                v33 = v147 == 0;
                v142 = 2;
                v148 = 4;
                if (v33)
                  v148 = 2;
                *(_WORD *)&v145[v148] = 0;
                v141 += 2;
                if (v144 <= (__int16)v141)
                  goto LABEL_67;
              }
              else
              {
                v149 = v216;
                do
                {
                  v150 = *((unsigned __int16 *)v149 + 2);
                  v149 += 2;
                }
                while (v150);
                if (v142 == 2)
                  v142 = 1;
                v151 = *(unsigned __int16 *)(v187 + 20 + 2 * v140);
                *((_WORD *)v149 + 1) = v151;
                v33 = v151 == 0;
                v152 = 4;
                if (v33)
                  v152 = 2;
                *(_WORD *)&v149[v152] = 0;
                v141 += 2;
                if (v144 <= (__int16)v141)
                  goto LABEL_289;
              }
              v140 = sub_20BA2C5C4(a1, (unsigned __int8 *)v218 + (__int16)v141);
              v36 = v195;
              v35 = v48;
              if (v140 == -11)
                goto LABEL_67;
            }
          }
          v143 = 0;
          v142 = 0;
LABEL_289:
          v36 = v195;
          if ((2 * u_strlen((const UChar *)&v217[2]) - 65) >= 0xFFFFFFBD)
          {
            sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), (UChar *)&v217[2], 0x42uLL);
            v153 = *v195;
            v154 = *(_QWORD *)v194 + 72 * *v195;
            *(_BYTE *)(v154 + 69) = 6;
            v184 = v203[v46 + 51];
            *(_BYTE *)(v154 + 68) = v184;
            v186 = *(_WORD *)&v202[2 * v46 + 1];
            *(_WORD *)(v154 + 70) = v186;
            *v195 = v153 + 1;
            goto LABEL_292;
          }
          goto LABEL_60;
        }
        v36 = v195;
        v35 = v48;
        if ((v46 & 0x8000) != 0)
          goto LABEL_67;
        LOBYTE(v185) = 0;
        v182 = 0;
        v183 = 0;
        v99 = (__int16)v46;
        v100 = (unsigned __int16)v46;
        v101 = (__int16)v46;
LABEL_185:
        v102 = v203[v100];
        if ((v102 - 120) > 9)
        {
          if ((v102 - 110) > 9u)
          {
            v36 = v195;
            if ((v102 - 100) <= 9u)
            {
              v35 = v48;
              if (v185 == 1 || v185 == 4)
                goto LABEL_67;
            }
          }
          else
          {
            v36 = v195;
            v35 = v48;
            if ((v185 == 4 || v185 == 1)
              && ((int)v46 - (int)v101 < 3 || (v203[v101 + 2] + 96) < 0xD8u))
            {
              goto LABEL_67;
            }
          }
        }
        else if (v185 == 4 || v185 == 1)
        {
          v103 = (int)v46 - (int)v101 >= 3 && (v203[v101 + 2] + 126) < 0x1Eu;
          if (v100 < 2)
          {
            v36 = v195;
            v35 = v48;
            if (v100 == 1)
              goto LABEL_206;
            goto LABEL_207;
          }
          if (v203[v99 - 2] - 110 < 0xA)
            v103 = 1;
          v36 = v195;
          v35 = v48;
LABEL_206:
          if (v203[v99 - 1] - 110 >= 0xA)
          {
LABEL_207:
            if (!v103)
              goto LABEL_67;
          }
        }
        v185 = sub_20B98D9C8(v203[v100]);
        if (v185 == 4)
        {
          ++BYTE4(v182);
        }
        else if (v185 == 1)
        {
          LOBYTE(v182) = v182 + 1;
        }
        v104 = (205 * v102) >> 11;
        if ((v104 - 10) < 6)
          v105 = 1;
        else
          v105 = HIDWORD(v183);
        v106 = v183;
        if ((v102 + 46) < 0xAu)
          v106 = 1;
        v183 = __PAIR64__(v105, v106);
        v36 = v195;
        if (v101 == v46)
        {
          v35 = v48;
          if ((v104 - 13) < 3)
            goto LABEL_67;
        }
        if ((2 * u_strlen(v220) - 63) < 0xFFFFFFBD)
          goto LABEL_60;
        if (v102 > 0x9F)
        {
          v36 = v195;
          v35 = v48;
          if ((v102 + 46) > 9u)
            goto LABEL_67;
          v104 = v102 - 194;
        }
        v107 = v219;
        do
        {
          v108 = *((unsigned __int16 *)v107 + 2);
          v107 += 2;
        }
        while (v108);
        v109 = *(unsigned __int16 *)&v204[8 * v104 - v104 + 3];
        *((_WORD *)v107 + 1) = v109;
        v33 = v109 == 0;
        v110 = 4;
        if (v33)
          v110 = 2;
        *(_WORD *)&v107[v110] = 0;
        v99 = v100 - 1;
        --v101;
        v53 = (uint64_t)v100-- <= 0;
        if (v53)
        {
          v36 = v195;
          v35 = v48;
          if (v182 | BYTE4(v182))
          {
            v111 = v182 <= BYTE4(v182) ? 6 : 3;
            v203[v46 + 51] = v111;
            v112 = sub_20B98D9C8(v51);
            v35 = v48;
            if (v112 != 4 && v112 != 1)
              goto LABEL_67;
          }
          if (!WORD2(v183))
            goto LABEL_67;
          if ((2 * u_strlen(v220) - 65) < 0xFFFFFFBD)
            goto LABEL_60;
          sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), v220, 0x42uLL);
          v113 = *v195;
          v114 = *(_QWORD *)v194 + 72 * *v195;
          *(_BYTE *)(v114 + 69) = 0;
          v184 = v203[v46 + 51];
          *(_BYTE *)(v114 + 68) = v184;
          v186 = *(_WORD *)&v202[2 * v46 + 1];
          *(_WORD *)(v114 + 70) = v186;
          v115 = v113 + 1;
          *v195 = v115;
          if ((_WORD)v183)
          {
            v116 = 0;
            goto LABEL_239;
          }
          v143 = 0;
          v142 = 0;
          v137 = 0;
LABEL_292:
          if (v181)
          {
            v36 = v195;
            if (sub_20BA2CF44(a1, v220, v218, (int *)&v200))
              goto LABEL_60;
            v35 = v48;
            if ((_DWORD)v200)
              goto LABEL_67;
            if (sub_20BA2C64C(v218, (UChar *)&v217[2], a1, v205, 1, (int *)&v200 + 1)
              || (2 * u_strlen((const UChar *)&v217[2]) - 65) < 0xFFFFFFBD)
            {
              goto LABEL_60;
            }
            sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), (UChar *)&v217[2], 0x42uLL);
            v155 = *v195;
            v156 = *(_QWORD *)v194 + 72 * *v195;
            *(_BYTE *)(v156 + 69) = 1;
            *(_BYTE *)(v156 + 68) = v184;
            *(_WORD *)(v156 + 70) = v186;
            v157 = v155 + 1;
            *v195 = v155 + 1;
            if (v184 == 6)
            {
              v158 = (_WORD *)(*(_QWORD *)v194 + 72 * v157);
              v158[34] = 2310;
              v159 = (_WORD *)(*(_QWORD *)v194 + 72 * (v155 + 2));
              v159[34] = 1286;
              v158[35] = v186;
              v159[35] = v186;
              v160 = sub_20BA2DD18(a1, v220, v158, v159);
              v157 = *v195;
              if (!v160)
              {
                v157 += 2;
                *v195 = v157;
              }
            }
            v161 = 6;
LABEL_305:
            v162 = *(_QWORD *)v194 + 72 * v157;
            *(_BYTE *)(v162 + 69) = v161;
            *(_BYTE *)(v162 + 68) = v184;
            *(_WORD *)(v162 + 70) = v186;
            v36 = v195;
            if ((2 * u_strlen(v218) - 65) < 0xFFFFFFBD)
              goto LABEL_60;
            sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), v218, 0x42uLL);
            v115 = *v195 + 1;
            *v195 = v115;
            v116 = 1;
LABEL_239:
            if (!v181)
            {
              v36 = v195;
              if ((2 * u_strlen(v214) - 65) >= 0xFFFFFFBD)
              {
                sub_20B9AD640(v218, v214, 0x42uLL);
                if (!sub_20BA2C64C(v218, (UChar *)&v217[2], a1, v205, 1, (int *)&v200 + 1)
                  && (2 * u_strlen((const UChar *)&v217[2]) - 65) >= 0xFFFFFFBD)
                {
                  sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), (UChar *)&v217[2], 0x42uLL);
                  v178 = *v195;
                  v179 = *(_QWORD *)v194 + 72 * *v195;
                  *(_BYTE *)(v179 + 69) = 1;
                  *(_BYTE *)(v179 + 68) = v184;
                  *(_WORD *)(v179 + 70) = v186;
                  v115 = v178 + 1;
                  *v195 = v115;
                  goto LABEL_240;
                }
              }
              goto LABEL_60;
            }
LABEL_240:
            v220[0] = 0;
            *(_WORD *)&v217[2] = 0;
            if (v116)
            {
              v117 = u_strlen(v218);
              if (v117 << 17)
              {
                if (v117 << 17 >= 1)
                {
                  v118 = 0;
                  v119 = (__int16)(2 * v117);
                  do
                  {
                    v120 = sub_20BA2C5C4(a1, (unsigned __int8 *)&v218[v118]);
                    v36 = v195;
                    v35 = v48;
                    if (v120 == -11)
                      goto LABEL_67;
                    v121 = v120;
                    if ((2 * u_strlen(v220) - 63) < 0xFFFFFFBD)
                      goto LABEL_60;
                    v122 = v219;
                    do
                    {
                      v123 = *((unsigned __int16 *)v122 + 2);
                      v122 += 2;
                    }
                    while (v123);
                    v124 = *(unsigned __int16 *)&v204[8 * v121 - v121 + 3];
                    *((_WORD *)v122 + 1) = v124;
                    v33 = v124 == 0;
                    v125 = 4;
                    if (v33)
                      v125 = 2;
                    *(_WORD *)&v122[v125] = 0;
                    v36 = v195;
                    if ((2 * u_strlen((const UChar *)&v217[2]) - 63) < 0xFFFFFFBD)
                      goto LABEL_60;
                    v126 = v216;
                    do
                    {
                      v127 = *((unsigned __int16 *)v126 + 2);
                      v126 += 2;
                    }
                    while (v127);
                    v128 = *(unsigned __int16 *)(v187 + 2 * v121);
                    *((_WORD *)v126 + 1) = v128;
                    v33 = v128 == 0;
                    v129 = 4;
                    if (v33)
                      v129 = 2;
                    *(_WORD *)&v126[v129] = 0;
                    ++v118;
                  }
                  while (v119 > (unsigned __int16)(v118 * 2));
                }
                v36 = v195;
                if ((2 * u_strlen(v220) - 65) >= 0xFFFFFFBD)
                {
                  sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), v220, 0x42uLL);
                  v130 = *v195;
                  v131 = *(_QWORD *)v194 + 72 * *v195;
                  *(_BYTE *)(v131 + 69) = 10;
                  *(_BYTE *)(v131 + 68) = v184;
                  *(_WORD *)(v131 + 70) = v186;
                  *v195 = v130 + 1;
                  if ((2 * u_strlen((const UChar *)&v217[2]) - 65) >= 0xFFFFFFBD)
                  {
                    sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), (UChar *)&v217[2], 0x42uLL);
                    v132 = *v195;
                    v133 = *(_QWORD *)v194 + 72 * *v195;
                    *(_BYTE *)(v133 + 69) = 2;
                    *(_BYTE *)(v133 + 68) = v184;
                    *(_WORD *)(v133 + 70) = v186;
                    v115 = v132 + 1;
                    *v195 = v115;
                    goto LABEL_259;
                  }
                }
LABEL_60:
                *v36 = v47;
                v35 = v48;
                if (v197 == -4)
                {
LABEL_344:
                  *v193 = v46;
                  break;
                }
LABEL_68:
                v47 = *v36;
LABEL_69:
                v53 = v46-- <= 1;
                if (!v53)
                  goto LABEL_57;
LABEL_347:
                result = 0;
                *v193 = -1;
                return result;
              }
            }
            else
            {
LABEL_259:
              if (v115 > v47)
              {
                v134 = v115 - (uint64_t)v47;
                v135 = (_WORD *)(v191 + 72 * v47);
                do
                {
                  *v135 = v190;
                  v135 += 36;
                  --v134;
                }
                while (v134);
              }
            }
          }
          else
          {
            if (!v142 && !v143)
            {
              v36 = v195;
              if ((2 * u_strlen(v220) - 65) >= 0xFFFFFFBD)
              {
                sub_20B9AD640(v218, v220, 0x42uLL);
                v161 = 0;
                v157 = *v195;
                goto LABEL_305;
              }
              goto LABEL_60;
            }
            *(_WORD *)&v217[2] = 0;
            if (v137 >= 1)
            {
              v163 = 0;
              while (1)
              {
                v164 = sub_20BA2C5C4(a1, (unsigned __int8 *)&v218[v163 / 2u]);
                v36 = v195;
                v35 = v48;
                if (v164 == -11)
                  break;
                v165 = v164;
                if ((2 * u_strlen((const UChar *)&v217[2]) - 63) < 0xFFFFFFBD)
                  goto LABEL_60;
                if (v165 == 102)
                {
                  v166 = v216;
                  do
                  {
                    v167 = *((unsigned __int16 *)v166 + 2);
                    v166 += 2;
                  }
                  while (v167);
                  v168 = v188[11];
                  *((_WORD *)v166 + 1) = v168;
                  v33 = v168 == 0;
                  v169 = 4;
                  if (v33)
                    v169 = 2;
                  v170 = &v166[v169];
                }
                else
                {
                  v171 = v217;
                  do
                  {
                    v172 = (unsigned __int16)v171[1];
                    ++v171;
                  }
                  while (v172);
                  v173 = *(unsigned __int16 *)(v187 + 2 * v165);
                  *v171 = v173;
                  if (!v173)
                    --v171;
                  v170 = v171 + 1;
                }
                *v170 = 0;
                v163 += 2;
                if (v137 >> 16 <= v163)
                  goto LABEL_323;
              }
LABEL_67:
              *v36 = v47;
              v197 = -11;
              goto LABEL_68;
            }
LABEL_323:
            v36 = v195;
            if ((2 * u_strlen((const UChar *)&v217[2]) - 65) < 0xFFFFFFBD)
              goto LABEL_60;
            sub_20B9AD640((UChar *)(*(_QWORD *)v194 + 72 * *v195), (UChar *)&v217[2], 0x42uLL);
            v174 = *v195;
            v175 = *(_QWORD *)v194 + 72 * (int)v174;
            *(_BYTE *)(v175 + 69) = 2;
            *(_BYTE *)(v175 + 68) = v184;
            *(_WORD *)(v175 + 70) = v186;
            *v195 = v174 + 1;
            if ((int)v174 >= v47)
            {
              v176 = v174 + 1 - v47;
              v177 = (_WORD *)(v191 + 72 * v47);
              do
              {
                *v177 = v190;
                v177 += 36;
                --v176;
              }
              while (v176);
            }
          }
LABEL_327:
          v197 = 0;
          if (a8)
            *v193 = -1;
          v36 = v195;
          v35 = v48;
          goto LABEL_68;
        }
        goto LABEL_185;
      }
    }
  }
  if (!(_DWORD)v46)
    goto LABEL_347;
  return 0;
}

uint64_t sub_20BA2C5C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  char v3;
  _BYTE v4[258];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (!*(_WORD *)(a1 + 82))
    return 4294967285;
  v3 = 0;
  sub_20BA31438(*(_QWORD *)(a1 + 84), a2, 2, v4, &v3);
  result = v4[0] <= 9u ? v4[0] : v4[0] + 2;
  if (!v3)
    return 4294967285;
  return result;
}

uint64_t sub_20BA2C64C(UChar *s, UChar *a2, uint64_t a3, unsigned __int16 *a4, int a5, int *a6)
{
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  size_t v31;
  unsigned __int8 *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  UChar *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned __int16 v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  _WORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  _WORD *v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  unsigned __int16 *v63;
  unsigned int v64;
  int *v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int32_t v70;
  int *v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _WORD *v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  UChar *v92;
  unsigned __int16 *v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  UChar *v98;
  unsigned int v99;
  _BYTE v100[3];
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  UChar v106[129];
  _WORD v107[25];
  _WORD v108[2];
  UChar sa[129];
  unsigned __int8 v110[10];
  char v111[258];
  uint64_t v112;

  v12 = 0;
  v112 = *MEMORY[0x24BDAC8D0];
  v101 = 0x100010001;
  v102 = 1;
  v103 = 0;
  v104 = 0x1000100010001;
  v105 = 0;
  v13 = *(_QWORD *)(a3 + 44);
  v107[0] = 0;
  v14 = *(_WORD *)(v13 + 28);
  do
    v107[v12] = v14;
  while (v12++ < 24);
  v108[0] = 0;
  sa[0] = 0;
  v16 = 2 * u_strlen(s);
  if (v16 < -5)
    goto LABEL_140;
  v92 = s;
  v98 = a2;
  v17 = 0;
  v94 = 0;
  v99 = 0;
  v18 = (v16 >> 1) - 1;
  if (v16 >> 1 < 1)
    v18 = (v16 >> 1) + 2;
  v91 = v18 >> 2;
  v96 = a5;
  v97 = v16;
  v19 = (v16 >> 1) & 3;
  if (v16 >> 1 <= 0)
    v19 = -(-(v16 >> 1) & 3);
  if (v19)
    v20 = v19;
  else
    v20 = 4;
  v21 = a4 + 46;
  v81 = (unsigned __int16 *)((char *)a4 + 99);
  v93 = a4;
  v83 = a4 + 53;
  v22 = 71;
  if (a5 == 1)
    v22 = 73;
  v88 = v22;
  v23 = 78;
  if (a5 == 1)
    v23 = 80;
  v87 = v23;
  v24 = 85;
  if (a5 == 1)
    v24 = 87;
  v86 = v24;
  v25 = 8;
  if (a5 == 1)
  {
    v25 = 10;
    v21 = a4 + 47;
  }
  v82 = v21;
  v26 = 0;
  v84 = v25;
  v85 = 1;
  v27 = 1;
LABEL_21:
  v95 = 65534;
LABEL_22:
  v28 = 2 * v20;
  if ((v28 - 9) < 0xFFFFFFF5)
    return 4294967186;
  result = 4294967186;
  if ((v20 & 0x80000000) == 0 && (v26 & 0x80000000) == 0)
  {
    v30 = v20;
    v31 = 2 * v20;
    v32 = v110;
    v90 = v26;
    v33 = (UChar *)((char *)v92 + v26);
    do
    {
      if (!v31)
        goto LABEL_30;
      v34 = *v33++;
      *(_WORD *)v32 = v34;
      v32 += 2;
      v31 -= 2;
    }
    while (v34);
    if (v31)
      bzero(v32, v31);
LABEL_30:
    v35 = 0;
    *(_WORD *)&v110[v28] = 0;
    v89 = v20 + v27;
    v36 = v98;
    while (1)
    {
      v100[0] = 0;
      if (!*(_WORD *)(a3 + 82)
        || ((sub_20BA31438(*(_QWORD *)(a3 + 84), &v110[2 * v35], 2, v111, v100), v111[0] <= 9u)
          ? (v37 = v111[0])
          : (v37 = v111[0] + 2),
            !v100[0]))
      {
        v80 = -v27;
        goto LABEL_143;
      }
      if ((_DWORD)v37 == 102)
        break;
      if (v17)
        goto LABEL_39;
      if (v97 == 2 || (_DWORD)v37)
      {
        v38 = v30 - v35;
        if (v96 == 1 || (_DWORD)v37 != 1 || v38 == 1)
        {
          if (v96 == 1 && *(_WORD *)&v100[2 * v37 + 1])
          {
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v40 = (unsigned __int16 *)((char *)&v93[4 * v37 + 1] - v37 + 1);
          }
          else
          {
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v40 = (unsigned __int16 *)((char *)&v93[4 * v37] - v37 + 1);
          }
          v41 = v108;
          do
          {
            v42 = (unsigned __int16)v41[2];
            ++v41;
          }
          while (v42);
          v43 = *v40;
          v44 = 2;
          if (!v43)
            v44 = 1;
          v41[1] = v43;
          v41[v44] = 0;
          v94 = v37;
          v99 += 2;
          v39 = 0xFFFFLL;
        }
        else
        {
          v39 = v95;
        }
        switch((_DWORD)v38)
        {
          case 2:
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v52 = v108;
            do
            {
              v53 = (unsigned __int16)v52[2];
              ++v52;
            }
            while (v53);
            v17 = 0;
            v54 = 2;
            if (!*(unsigned __int16 *)((char *)v93 + v88))
              v54 = 1;
            v52[1] = *(unsigned __int16 *)((char *)v93 + v88);
            v52[v54] = 0;
            v99 += 2;
            v55 = 10;
            break;
          case 3:
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v56 = v108;
            do
            {
              v57 = (unsigned __int16)v56[2];
              ++v56;
            }
            while (v57);
            v17 = 0;
            v58 = 2;
            if (!*(unsigned __int16 *)((char *)v93 + v87))
              v58 = 1;
            v56[1] = *(unsigned __int16 *)((char *)v93 + v87);
            v56[v58] = 0;
            v99 += 2;
            v55 = 11;
            break;
          case 4:
            if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v45 = v39;
            v46 = v108;
            v36 = v98;
            do
            {
              v47 = (unsigned __int16)v46[2];
              ++v46;
            }
            while (v47);
            v17 = 0;
            if (v45 == 65534)
              v48 = v99;
            else
              v48 = 0xFFFFFFFFLL;
            v95 = v48;
            v49 = *(unsigned __int16 *)((char *)v93 + v86);
            v46[1] = v49;
            v50 = v49 == 0;
            v51 = 2;
            if (v50)
              v51 = 1;
            v46[v51] = 0;
            v99 += 2;
            v94 = 12;
            goto LABEL_40;
          default:
            v95 = v39;
            v17 = 0;
            goto LABEL_86;
        }
        v94 = v55;
        v95 = 0xFFFFLL;
LABEL_86:
        v36 = v98;
        goto LABEL_40;
      }
      v17 = 0;
LABEL_40:
      ++v27;
      if (++v35 == v30)
      {
        v59 = v110;
        v60 = v107;
        v61 = v91;
        while (1)
        {
          if (!v30)
            goto LABEL_99;
          v62 = *(unsigned __int16 *)v59;
          if (v62 != *v60)
            break;
          --v30;
          v59 += 2;
          ++v60;
          if (!v62)
            goto LABEL_99;
        }
        if (v91 == 1)
        {
          if ((v94 - 16) > 0xFFFFFFFC)
            goto LABEL_99;
          v64 = v99;
          if ((v95 & 0x8000) == 0)
          {
            v106[0] = 0;
            if ((_WORD)v95)
            {
              if ((unsigned __int16)v95 > 0x100u)
                return 4294967186;
              sub_20B9AD698((uint64_t)v106, (uint64_t)sa, (unsigned __int16)v95);
              *(UChar *)((char *)v106 + (unsigned __int16)v95) = 0;
            }
            if ((2 * u_strlen(v106) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v65 = &v105;
            do
            {
              v66 = *((unsigned __int16 *)v65 + 2);
              v65 = (int *)((char *)v65 + 2);
            }
            while (v66);
            v67 = *(unsigned __int16 *)((char *)v93 + v84);
            *((_WORD *)v65 + 1) = v67;
            v50 = v67 == 0;
            v68 = 4;
            if (v50)
              v68 = 2;
            *(_WORD *)((char *)v65 + v68) = 0;
            *(UChar *)((char *)&v106[1] + (__int16)v95) = 0;
            v69 = 2 * u_strlen(v106);
            if ((v69 - (__int16)v95 + 2 * u_strlen(sa) - 257) < 0xFFFFFEFD)
              return 4294967186;
            sub_20B9AD6F8((uint64_t)v106, (UChar *)((char *)sa + (unsigned __int16)v95), 0x102uLL);
            if ((2 * u_strlen(v106) - 257) < 0xFFFFFEFD)
              return 4294967186;
            sub_20B9AD640(sa, v106, 0x102uLL);
            v64 = v99 + 2;
          }
          v70 = u_strlen(sa);
          v63 = v82;
          if ((2 * v70 - 255) < 0xFFFFFEFD)
            return 4294967186;
          goto LABEL_131;
        }
        if (v91 == 2)
        {
          if ((v94 - 16) > 0xFFFFFFFC)
            goto LABEL_99;
          v64 = v99;
          if ((v95 & 0x8000) == 0)
          {
            v106[0] = 0;
            if ((_WORD)v95)
            {
              if ((unsigned __int16)v95 > 0x100u)
                return 4294967186;
              sub_20B9AD698((uint64_t)v106, (uint64_t)sa, (unsigned __int16)v95);
              *(UChar *)((char *)v106 + (unsigned __int16)v95) = 0;
            }
            if ((2 * u_strlen(v106) - 255) < 0xFFFFFEFD)
              return 4294967186;
            v71 = &v105;
            do
            {
              v72 = *((unsigned __int16 *)v71 + 2);
              v71 = (int *)((char *)v71 + 2);
            }
            while (v72);
            v73 = *(unsigned __int16 *)((char *)v93 + v84);
            *((_WORD *)v71 + 1) = v73;
            v50 = v73 == 0;
            v74 = 4;
            if (v50)
              v74 = 2;
            *(_WORD *)((char *)v71 + v74) = 0;
            *(UChar *)((char *)&v106[1] + (__int16)v95) = 0;
            v75 = 2 * u_strlen(v106);
            if ((v75 - (__int16)v95 + 2 * u_strlen(sa) - 257) < 0xFFFFFEFD)
              return 4294967186;
            sub_20B9AD6F8((uint64_t)v106, (UChar *)((char *)sa + (unsigned __int16)v95), 0x102uLL);
            if ((2 * u_strlen(v106) - 257) < 0xFFFFFEFD)
              return 4294967186;
            sub_20B9AD640(sa, v106, 0x102uLL);
            v64 = v99 + 2;
          }
          if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
            return 4294967186;
          v94 = 14;
          v63 = v81;
          goto LABEL_131;
        }
        if (v91 == 3 && (v94 - 16) <= 0xFFFFFFFC)
        {
          if ((2 * u_strlen(sa) - 255) < 0xFFFFFEFD)
            return 4294967186;
          v94 = 15;
          v63 = v83;
          v64 = v99;
LABEL_131:
          v76 = v108;
          do
          {
            v77 = (unsigned __int16)v76[2];
            ++v76;
          }
          while (v77);
          v85 = 0;
          v78 = *v63;
          v76[1] = v78;
          v50 = v78 == 0;
          v20 = 4;
          v79 = 1;
          if (!v50)
            v79 = 2;
          v76[v79] = 0;
          v99 = v64 + 2;
          v27 = v89;
          v26 = v28 + v90;
          --v91;
          goto LABEL_21;
        }
LABEL_99:
        v27 = v89;
        v26 = v28 + v90;
        v20 = 4;
        --v91;
        if (v61 > 0)
          goto LABEL_22;
        a2 = v98;
        if ((v85 & 1) == 0 && 2 * u_strlen(sa) <= 2)
          sa[0] = 0;
LABEL_140:
        if ((2 * u_strlen(sa) - 65) < 0xFFFFFFBD)
          return 4294967186;
        sub_20B9AD640(a2, sa, 0x42uLL);
        v80 = 0;
LABEL_143:
        result = 0;
        *a6 = v80;
        return result;
      }
    }
    *v36 = 0;
LABEL_39:
    v17 = 1;
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_20BA2CF44(uint64_t a1, const UChar *a2, UChar *a3, int *a4)
{
  UChar *v5;
  unint64_t v7;
  uint64_t v8;
  int32_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int32_t v25;
  UChar *v26;
  int v28;
  int32_t v29;
  UChar *v30;
  int32_t v31;
  int32_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int32_t v40;
  int32_t v41;
  int32_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int32_t v47;
  int v48;
  int v49;
  int v50;
  int32_t v51;
  int32_t v52;
  int v53;
  uint64_t result;
  int v55;
  int32_t v56;
  int32_t v57;
  int v58;
  UChar *v59;
  int v60;
  int32_t v61;
  unsigned __int16 *v62;
  UChar *v63;
  int v64;
  int v65;
  int32_t v66;
  int32_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  UChar *v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v78;
  unsigned __int8 v79;
  int v80;
  UChar *v81;
  int v82;
  char v83;
  _BYTE v84[4];
  _BYTE v85[30];
  unsigned __int8 v86;
  unsigned __int8 v87;
  UChar v88[2];
  UChar v89[60];
  UChar s[33];
  UChar v91[129];
  uint64_t v92;

  v5 = (UChar *)a2;
  v7 = 0;
  v92 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 44) + 28;
  do
  {
    *(_DWORD *)&v88[v7 / 2] = *(unsigned __int16 *)(v8 + dword_20BA63B88[v7 / 4]);
    v7 += 4;
  }
  while (v7 != 48);
  v83 = 0;
  v9 = u_strlen(a2);
  *a3 = 0;
  v10 = 2 * v9;
  s[0] = 0;
  *a4 = 0;
  if (2 * v9 < 0)
  {
    v55 = 0;
    v12 = 0;
    result = 0;
    if (v10 != -2)
      return result;
    goto LABEL_165;
  }
  v80 = 0;
  v76 = 0;
  v73 = 0;
  v79 = 0;
  v75 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v78 = 0;
  v82 = 0;
  v72 = v5 + 1;
  v74 = 0;
  v14 = 1;
  v81 = v5;
  do
  {
    if (!*(_WORD *)(a1 + 82))
    {
      v83 = 0;
LABEL_22:
      v19 = v11;
      goto LABEL_23;
    }
    sub_20BA31438(*(_QWORD *)(a1 + 84), (unsigned __int8 *)v5 + v11, 2, &v86, &v83);
    if (!v83)
      goto LABEL_22;
    if (v86 - 16 >= 0xFFFFFFF9)
      v15 = v86 - 9;
    else
      v15 = 0;
    if ((v86 & 0xFE) == 0x66)
    {
      v16 = v86 - 92;
    }
    else
    {
      if (v86 == 100)
      {
        if (!v11)
        {
          v19 = 0;
          *a4 = 2;
          HIDWORD(v74) = 1;
          goto LABEL_23;
        }
        v25 = u_strlen(s);
        v26 = (UChar *)((char *)v5 + v11 + 2);
        if ((2 * (u_strlen(v26) + v25) - 65) < 0xFFFFFFBD)
          return 4294967186;
        sub_20B9AD6F8((uint64_t)s, v26, 0x42uLL);
        HIDWORD(v74) = 1;
LABEL_60:
        v19 = v10;
        goto LABEL_119;
      }
      if (v86 == 101)
      {
        v78 = 0;
        v82 = 0;
        v13 = 0;
        *a3 = 0;
        v11 += 2;
        *a4 = v11;
        v14 = 1;
        goto LABEL_75;
      }
      if (v86 > 9u || v75 < 0)
        v16 = 0;
      else
        v16 = v86;
      if (v86 > 9u)
        goto LABEL_74;
    }
    if (v13 == 1)
    {
      v17 = 2 * u_strlen(v81);
      if (v17 >= 2)
      {
        v18 = v11 + 2;
        if ((((_WORD)v11 + 2) & 0x8000) == 0 && v18 + 2 <= v17)
        {
          v84[0] = 0;
          if (*(_WORD *)(a1 + 82))
          {
            sub_20BA31438(*(_QWORD *)(a1 + 84), (unsigned __int8 *)v81 + v18, 2, v91, v84);
            if (v84[0])
            {
              if (HIBYTE(v91[0]) == 2 && LOBYTE(v91[0]) - 10 < 3)
              {
                v82 = 0;
                v78 = 0;
                v13 = 0;
                *a3 = 0;
                *a4 = v11;
                v19 = v11 - 2;
LABEL_99:
                v14 = 1;
                goto LABEL_119;
              }
            }
          }
        }
      }
    }
    if (v11 == SWORD2(v76))
    {
      v20 = v13 == 1;
      v13 = v82;
      if (v20 && v78 == 1)
      {
        *a3 = 0;
        *a4 = v11;
        if (v12 < 1)
        {
          v5 = v81;
        }
        else
        {
          v5 = v81;
          if (v87 <= 1u && v86 <= 9u)
          {
            v11 -= 2;
            *a4 = v11;
          }
        }
        v82 = 0;
        v78 = 0;
        v13 = 0;
        goto LABEL_108;
      }
LABEL_46:
      if (v13 == 2)
      {
        v14 = 0;
        v28 = v76;
        if (!v79)
          v28 = v11;
        LODWORD(v76) = v28;
        v85[v79] = v16;
        v13 = 1;
        v82 = 2;
        ++v79;
      }
      else if (v13 == 1)
      {
        v14 = 0;
        if (v86 <= 9u)
          v22 = v86;
        else
          v22 = 0;
        if (v86 - 16 >= 0xFFFFFFF9)
          v23 = v86 - 9;
        else
          v23 = 0;
        v73 = v11;
        LODWORD(v74) = v23;
        v24 = v86 - 92;
        if ((v86 & 0xFE) != 0x66)
          v24 = v22;
        v75 = v24;
        LODWORD(v76) = v11;
        v85[0] = v16;
        v82 = 2;
        v79 = 1;
      }
      else
      {
        v29 = u_strlen(a3);
        v30 = &v88[2 * v16];
        if ((2 * (u_strlen(v30) + v29) - 65) < 0xFFFFFFBD)
          return 4294967186;
        sub_20B9AD6F8((uint64_t)a3, v30, 0x42uLL);
        v14 = 0;
        ++v80;
        v13 = 1;
      }
LABEL_74:
      v5 = v81;
LABEL_75:
      if (v87 != 2 || v86 < 0xAu || v86 > 0xFu)
        goto LABEL_22;
      if (v14 != 1 || v86 > 0xCu)
        goto LABEL_88;
      if (v12 == 3 && v86 == 10)
      {
        v31 = u_strlen(a3);
        v32 = u_strlen(v88);
        if ((2 * (v32 + v31 + u_strlen(v89)) - 65) < 0xFFFFFFBD)
          return 4294967186;
        sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
        sub_20B9AD6F8((uint64_t)a3, v89, 0x42uLL);
        v80 += 2;
      }
      else
      {
        v33 = dword_20BA63B6C[v15];
        if (v12 == v33)
        {
          if ((2 * u_strlen(v89) - 65) < 0xFFFFFFBD)
            return 4294967186;
          sub_20B9AD640(a3, v89, 0x42uLL);
          *a4 = v11;
          ++v80;
          goto LABEL_88;
        }
        v40 = u_strlen(a3);
        if ((2 * (u_strlen(v89) + v40) - 65) < 0xFFFFFFBD)
          return 4294967186;
        sub_20B9AD6F8((uint64_t)a3, v89, 0x42uLL);
        ++v80;
        if (v12 < v33)
        {
          v5 = v81;
          v34 = v82;
          if (v78 == 1)
          {
            v82 = 0;
            v78 = 0;
            v13 = 0;
            *a3 = 0;
            *a4 = v11;
LABEL_108:
            v19 = v11 - 2;
            goto LABEL_109;
          }
          goto LABEL_89;
        }
      }
      v5 = v81;
LABEL_88:
      v34 = v82;
LABEL_89:
      if (v34 == 2)
      {
        v35 = dword_20BA63B6C[v15];
        v36 = v12 - (v35 + v79);
        if (v36 >= 1)
        {
          do
          {
            sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
            --v36;
          }
          while (v36);
        }
        if (v79)
        {
          v37 = v79;
          v38 = v85;
          do
          {
            v39 = *v38++;
            sub_20B9AD6F8((uint64_t)a3, &v88[2 * v39], 0x42uLL);
            --v37;
          }
          while (v37);
        }
        v80 += v12 - v35;
        if (v12 - v35 >= v79)
        {
          v13 = 0;
          v79 = 0;
        }
        else
        {
          if (v86 >= 0xDu)
          {
            if (v80 >= 5)
            {
              v82 = 0;
              v78 = 0;
              v13 = 0;
              v79 = 0;
              *a3 = 0;
              v19 = v11 + 2;
              *a4 = v11 + 2;
              goto LABEL_99;
            }
            v44 = sub_20BA2DEB4(a1, (UChar *)((char *)v72 + v11), v35);
            if (v44 == -11)
            {
              v82 = 0;
              v13 = 0;
              v79 = 0;
              v80 = 0;
              *a3 = 0;
              *a4 = v11 + 2;
            }
            else
            {
              v49 = v44;
              v50 = v35 + ~v44;
              v51 = u_strlen(a3);
              v52 = u_strlen(&v88[2 * v75]);
              if ((2 * (v52 + v51 + u_strlen(v88) * v50) - 65) < 0xFFFFFFBD)
                return 4294967186;
              if (v50 >= 1)
              {
                v53 = v49 + 1;
                do
                {
                  sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
                  ++v53;
                  v14 = 1;
                }
                while (v35 != v53);
                v82 = 0;
                v13 = 0;
                v79 = 0;
                v80 = 0;
                goto LABEL_117;
              }
              v82 = 0;
              v13 = 0;
              v79 = 0;
              v80 = 0;
            }
            v14 = 1;
LABEL_117:
            v78 = 1;
            v12 = v35;
            goto LABEL_118;
          }
          *a3 = 0;
          v41 = u_strlen(a3);
          if ((2 * (u_strlen(&v88[2 * v75]) + v41) - 65) < 0xFFFFFFBD)
            return 4294967186;
          sub_20B9AD6F8((uint64_t)a3, &v88[2 * v75], 0x42uLL);
          v13 = 0;
          v79 = 0;
          *a4 = v11 - 2;
          ++v80;
        }
        v82 = 1;
        v14 = 1;
        goto LABEL_117;
      }
      if (v86 < 0xDu)
      {
        v13 = 0;
        v12 = dword_20BA63B6C[v15];
        v82 = 1;
        v14 = 1;
        v78 = 1;
        goto LABEL_22;
      }
      if (v80 >= 5)
      {
        v82 = 0;
        v78 = 0;
        v13 = 0;
        *a3 = 0;
        v19 = v11 + 2;
        *a4 = v11 + 2;
LABEL_109:
        v14 = 1;
        goto LABEL_23;
      }
      if (!v14)
        goto LABEL_125;
      if (v34)
      {
        v42 = u_strlen(a3);
        if ((2 * (v42 + u_strlen(v88) * v12) - 65) < 0xFFFFFFBD)
          return 4294967186;
        if (v12 >= 1)
        {
          do
          {
            sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
            --v12;
          }
          while (v12);
        }
LABEL_125:
        v12 = dword_20BA63B6C[v15];
        v43 = sub_20BA2DEB4(a1, (UChar *)((char *)v72 + v11), v12);
        if (v43 == -11)
        {
          v82 = 0;
          v13 = 0;
          v12 = 0;
          v80 = 0;
          *a3 = 0;
          *a4 = v11 + 2;
          goto LABEL_141;
        }
        v45 = v43;
        v46 = v12 + ~v43;
        v47 = u_strlen(a3);
        if ((2 * (v47 + u_strlen(v88) * v46) - 65) < 0xFFFFFFBD)
          return 4294967186;
        if (v46 < 1)
        {
          v82 = 0;
          v13 = 0;
          v80 = 0;
LABEL_141:
          v14 = 1;
        }
        else
        {
          v48 = v45 + 1;
          do
          {
            sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
            ++v48;
            v14 = 1;
          }
          while (v12 != v48);
          v82 = 0;
          v13 = 0;
          v80 = 0;
        }
        v78 = 1;
LABEL_118:
        v19 = v11;
        goto LABEL_119;
      }
      v82 = 0;
      v13 = 0;
      v12 = 0;
      v80 = 0;
      *a3 = 0;
      *a4 = v10;
      v14 = 1;
      goto LABEL_60;
    }
    v13 = v82;
    if (v87 != 2)
      goto LABEL_46;
    if (v86 > 9u)
      goto LABEL_46;
    v21 = 2 * u_strlen(v81);
    if (v21 < 2)
      goto LABEL_46;
    v19 = v11 - 2;
    if (((v11 - 2) & 0x8000) != 0)
      goto LABEL_46;
    if ((__int16)v19 + 2 > v21)
      goto LABEL_46;
    v84[0] = 0;
    if (!*(_WORD *)(a1 + 82))
      goto LABEL_46;
    sub_20BA31438(*(_QWORD *)(a1 + 84), (unsigned __int8 *)v81 + (__int16)v19, 2, v91, v84);
    if (!v84[0] || HIBYTE(v91[0]) > 1u || LOBYTE(v91[0]) >= 0xAu)
      goto LABEL_46;
    v82 = 0;
    v78 = 0;
    v13 = 0;
    *a3 = 0;
    *a4 = v11;
    v14 = 1;
    WORD2(v76) = v11;
LABEL_119:
    v5 = v81;
LABEL_23:
    v11 = v19 + 2;
  }
  while (v19 + 2 <= v10);
  if (v14 || v78 != 1 || !v82)
    goto LABEL_162;
  if (v82 == 1)
  {
    v56 = u_strlen(a3);
    v57 = u_strlen(v88);
    v58 = v12 + ~dword_20BA63B6C[(int)v74];
    v59 = &v88[2 * v75];
    if ((2 * (u_strlen(v59) + v56 + v58 * v57) - 65) < 0xFFFFFFBD)
      return 4294967186;
    if (v58 >= 1)
    {
      do
      {
        sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
        --v58;
      }
      while (v58);
    }
LABEL_161:
    sub_20B9AD6F8((uint64_t)a3, v59, 0x42uLL);
    goto LABEL_162;
  }
  if (v73 != (_DWORD)v76)
  {
    v60 = v12 + ~dword_20BA63B6C[(int)v74];
    if (v60 >= 1)
    {
      do
      {
        sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
        --v60;
      }
      while (v60);
    }
    v59 = &v88[2 * v75];
    goto LABEL_161;
  }
  if (v12 < v79)
  {
    result = 0;
    *a4 = v73;
    return result;
  }
  v68 = v12 - v79;
  if (v68 >= 1)
  {
    do
    {
      sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
      --v68;
    }
    while (v68);
  }
  if (v79)
  {
    v69 = v79;
    v70 = v85;
    do
    {
      v71 = *v70++;
      sub_20B9AD6F8((uint64_t)a3, &v88[2 * v71], 0x42uLL);
      --v69;
    }
    while (v69);
  }
LABEL_162:
  if (v14 != 1 || v19 != v10)
  {
    if (!HIDWORD(v74))
      return 0;
    goto LABEL_171;
  }
  v55 = HIDWORD(v74);
  if (v82 || !*a3)
  {
LABEL_165:
    v61 = u_strlen(a3);
    if ((2 * (v61 + u_strlen(v88) * v12) - 65) < 0xFFFFFFBD)
      return 4294967186;
    if (v12 >= 1)
    {
      do
      {
        sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
        --v12;
      }
      while (v12);
    }
    if (v55)
      goto LABEL_171;
    return 0;
  }
  v67 = u_strlen(a3);
  if ((2 * (u_strlen(v88) + v67) - 65) < 0xFFFFFFBD)
    return 4294967186;
  sub_20B9AD6F8((uint64_t)a3, v88, 0x42uLL);
  if (!HIDWORD(v74))
    return 0;
LABEL_171:
  v62 = *(unsigned __int16 **)(a1 + 44);
  v91[0] = 0;
  if ((2 * u_strlen(a3) - 65) < 0xFFFFFFBD)
    return 4294967186;
  v63 = a3 - 1;
  do
  {
    v64 = v63[1];
    ++v63;
  }
  while (v64);
  v65 = *v62;
  *v63 = v65;
  if (!v65)
    --v63;
  v63[1] = 0;
  result = sub_20BA2CF44(a1, s, v91, v84);
  if (!(_DWORD)result)
  {
    v66 = u_strlen(a3);
    if ((2 * (u_strlen(v91) + v66) - 65) > 0xFFFFFFBC)
    {
      sub_20B9AD6F8((uint64_t)a3, v91, 0x42uLL);
      return 0;
    }
    return 4294967186;
  }
  return result;
}

uint64_t sub_20BA2DD18(uint64_t a1, UChar *s, _WORD *a3, _WORD *a4)
{
  uint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  _BYTE v21[258];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 60);
  *a3 = 0;
  *a4 = 0;
  if (2 * u_strlen(s) <= 0)
  {
    *a3 = 0;
    *a4 = 0;
    return 4294967285;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v8 + 20;
  do
  {
    v13 = v11 * 2;
    v20 = 0;
    if (!*(_WORD *)(a1 + 82))
      goto LABEL_8;
    sub_20BA31438(*(_QWORD *)(a1 + 84), (unsigned __int8 *)&s[v11], 2, v21, &v20);
    v14 = v21[0];
    if (v21[0] > 9u)
      v14 = v21[0] + 2;
    if (v20 && v14 < 0xA)
    {
      ++v10;
      v17 = 2 * v14;
      LOBYTE(a3[v11]) = *(_BYTE *)(v12 + v17);
      LOBYTE(a4[v11]) = *(_BYTE *)(v8 + v17);
      v18 = (2 * (v14 & 0x1FF)) | 1;
      v15 = v9 | 1;
      *((_BYTE *)a3 + v15) = *(_BYTE *)(v12 + v18);
      v16 = (_BYTE *)(v8 + v18);
    }
    else
    {
LABEL_8:
      LOBYTE(a3[v11]) = s[v11];
      LOBYTE(a4[v11]) = s[v11];
      v15 = v9 | 1;
      v16 = (char *)s + v15;
      *((_BYTE *)a3 + v15) = *((_BYTE *)s + v15);
    }
    *((_BYTE *)a4 + v15) = *v16;
    ++v11;
    v9 = (__int16)(v13 + 2);
  }
  while (v9 < 2 * u_strlen(s));
  result = 0;
  a3[v11] = 0;
  a4[v11] = 0;
  if (!v10)
    return 4294967285;
  return result;
}

uint64_t sub_20BA2DEB4(uint64_t a1, UChar *s, int a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v14;
  uint64_t result;
  int v16;
  char v18;
  _BYTE v19[258];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = (2 * u_strlen(s));
  if (!(_DWORD)v6 || !*s)
    return 0;
  if ((int)v6 < 1)
  {
    if (a3 < 0)
      return 4294967285;
    LODWORD(v9) = 0;
    v8 = 0;
LABEL_43:
    if (v8 > 0 && (_DWORD)v9 == 0)
      return (v8 - 1);
    else
      return v9;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v18 = 0;
  while (1)
  {
    if (!*(_WORD *)(a1 + 82))
    {
      v18 = 0;
      goto LABEL_34;
    }
    sub_20BA31438(*(_QWORD *)(a1 + 84), (unsigned __int8 *)&s[v7 / 2], 2, v19, &v18);
    if (v18)
      break;
LABEL_34:
    v7 += 2;
    if (v7 >= v6)
    {
      result = 4294967285;
      if (v8 <= a3 && (v11 & 0x80000000) == 0)
      {
        if (v10 != 1)
          goto LABEL_43;
        v16 = dword_20BA63BB8[v11];
        return (v16 + v9);
      }
      return result;
    }
  }
  if ((v19[0] & 0xFE) != 0x64)
  {
    if (v19[0] > 9u)
    {
      if (v19[0] < 0x10u)
      {
        v12 = dword_20BA63BB8[v19[0] - 10];
        if (v19[0] >= 0xDu && v10 != 1)
        {
          v8 = 0;
          v11 = v19[0] - 10;
LABEL_21:
          if (v12 >= a3)
            v11 = -1;
          v10 = 1;
          goto LABEL_34;
        }
        if (v12 > (int)v9 && v10 != 1)
        {
          v14 = v8 - 1;
          if (!v8)
            v14 = 0;
          v9 = (v12 + v14);
          v10 = 2;
          v8 = 0;
          goto LABEL_34;
        }
        if (v10 == 1)
          goto LABEL_21;
      }
      else
      {
        v8 = v8 == 0;
      }
    }
    else
    {
      if (v8 == -1)
        v8 = -1;
      else
        ++v8;
      if (v10)
        v9 = v9;
      else
        v9 = (v8 - 1);
    }
    goto LABEL_34;
  }
  if (v11)
  {
    v16 = dword_20BA63BB8[v11];
    return (v16 + v9);
  }
  return v9;
}

uint64_t sub_20BA2E0AC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _WORD *a5, _BYTE *a6)
{
  uint64_t result;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v20;
  __int16 v21;
  unsigned __int8 v22;
  unsigned __int16 v23;
  char v24;
  UChar s[129];
  UChar v26[129];
  uint64_t v27;

  result = 0;
  v27 = *MEMORY[0x24BDAC8D0];
  if ((int)a3 >= 1)
  {
    v8 = a4;
    if ((a4 & 0x80000000) == 0)
    {
      v11 = 0;
      v22 = 0;
      v12 = a3;
      v13 = a3 >> 1;
      while (a3 >> 1 != v11)
      {
        v14 = *(unsigned __int16 *)(a2 + v11 * 2);
        s[v11++] = v14;
        if (!v14)
        {
          if (v11 != v13)
            bzero(&s[v11], 2 * v13 - v11 * 2);
          break;
        }
      }
      *(UChar *)((char *)s + v12) = 0;
      sub_20B9AD640(v26, s, 0x102uLL);
      v15 = u_strlen(s);
      v26[v15] = 0;
      v20 = 1;
      v21 = 0;
      if (*(unsigned __int16 *)(a1 + 82) < 7u)
      {
LABEL_19:
        v17 = 0;
      }
      else
      {
        v16 = (unsigned __int16)(v15 * 2);
        while (1)
        {
          sub_20BA31680(*(_QWORD *)(a1 + 84) + 192, (uint64_t)v26, v16, &v23, &v22, (uint64_t)&v20);
          v17 = v22;
          if (!v22)
            break;
          v18 = v24;
          if ((v24 & 0xFE) != 2 && (v24 + 36) >= 0xAu)
          {
            if (v8 <= 0)
            {
              v17 = v21;
              *a5 = bswap32(v23) >> 16;
              *a6 = v18;
              return v17 & (--v8 >> 31);
            }
            --v8;
          }
          if (*(unsigned __int16 *)(a1 + 82) <= 6u)
            goto LABEL_19;
        }
      }
      return v17 & (v8 >> 31);
    }
  }
  return result;
}

BOOL sub_20BA2E244(uint64_t *a1)
{
  uint64_t v2;

  sub_20B972178(a1);
  v2 = a1[5];
  if (v2)
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
  return v2 != 0;
}

uint64_t sub_20BA2E284(uint64_t result)
{
  if (*(_BYTE *)(result + 96) && !*(_QWORD *)(result + 8))
  {
    if (*(_QWORD *)(result + 40))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

BOOL sub_20BA2E2AC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 128) && *(_BYTE *)(a1 + 96))
  {
    v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
    v12[0] = &off_24C4591E0;
    v12[1] = a1;
    v13 = v12;
    sub_20B959E14(v8, (uint64_t)v12);
    v9 = v13;
    if (v13 == v12)
    {
      v10 = 4;
      v9 = v12;
      goto LABEL_7;
    }
    if (v13)
    {
      v10 = 5;
LABEL_7:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  return sub_20B9729E4(a1, a2, a3, a4);
}

void sub_20BA2E38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA2E3CC()
{
  return 500;
}

uint64_t sub_20BA2E3D4()
{
  return 600;
}

void sub_20BA2E3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const __CFString *v6;
  void *__p[2];
  char v8;
  uint64_t *v9;
  _QWORD *v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v9 = (uint64_t *)v10;
  v5 = *(const __CFString **)(a3 + 8);
  sub_20B80BBD0(__p, off_2547292C8[0]);
  sub_20B908BB0(&v9, v5, (__int128 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  v6 = *(const __CFString **)(a3 + 16);
  sub_20B80BBD0(__p, off_2547292D0);
  sub_20B908BB0(&v9, v6, (__int128 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  sub_20B917E98(a2, (uint64_t)&v9, 0);
  sub_20B8896CC((uint64_t)&v9, v10[0]);
}

void sub_20BA2E4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  sub_20B8896CC((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_20BA2E4E4(uint64_t a1, uint64_t a2)
{
  int v4;
  const UniChar *v5;
  CFIndex v6;
  uint64_t v7;
  const UniChar *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  const __CFAllocator *v17;
  CFStringRef v18;
  CFStringRef v19;
  CFStringRef v20;
  uint64_t v21;
  _QWORD v22[6];

  v4 = *(char *)(a2 + 55);
  if (v4 >= 0)
    v5 = (const UniChar *)(a2 + 32);
  else
    v5 = *(const UniChar **)(a2 + 32);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 55);
  else
    v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    v7 = 2 * v6;
    v8 = v5;
    do
    {
      v9 = *v8;
      v10 = v9 - 48;
      v11 = v9 - 3664;
      if (v10 < 0xA || v11 <= 9)
        goto LABEL_21;
      ++v8;
      v7 -= 2;
    }
    while (v7);
  }
  v13 = *v5;
  if (v13 == 3633 || (v13 & 0xFFFC) == 0xE48)
  {
LABEL_21:
    v16 = sub_20B947CC4();
    v5 = (const UniChar *)*v16;
    v6 = v16[1];
    goto LABEL_22;
  }
  v14 = 1;
  while (v14 != 13)
  {
    v15 = word_20BA44B70[v14++];
    if (v15 == v13)
    {
      if ((unint64_t)(v14 - 2) > 0xB)
        break;
      goto LABEL_21;
    }
  }
LABEL_22:
  if (!v6)
    return;
  v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v18 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v6);
  v22[5] = v18;
  v19 = CFStringCreateWithCharacters(v17, v5, v6);
  v20 = v19;
  v22[4] = v19;
  if (!v18)
  {
    if (!v19)
      return;
LABEL_27:
    CFRelease(v20);
    if (!v18)
      return;
    goto LABEL_28;
  }
  if (v19)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v22[1] = v18;
    v22[2] = v20;
    v22[3] = v21;
    CFRetain(v18);
    CFRetain(v20);
    v22[0] = &unk_24C45F750;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 216))(a1, v22);
    sub_20B9776FC(v22);
    goto LABEL_27;
  }
LABEL_28:
  CFRelease(v18);
}

void sub_20BA2E674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14)
{
  sub_20B9776FC(&a9);
  sub_20B87E150(&a13, 0);
  sub_20B87E150(&a14, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA2E6B8(uint64_t a1)
{
  sub_20BA14628(*(_QWORD **)(a1 + 128));
  return sub_20B973178(a1);
}

const __CFString *sub_20BA2E6E0(_QWORD *a1, uint64_t a2)
{
  const __CFString *result;
  CFIndex Length;
  unint64_t v6;
  BOOL v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1[1])
    return 0;
  result = *(const __CFString **)(a2 + 8);
  if (!result)
    return result;
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Length = CFStringGetLength(result);
  v6 = CFStringGetLength(*(CFStringRef *)(a2 + 16));
  v8 = (unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0 || v6 == 0 || v6 > 0x20;
  v9 = v8;
  if (!v8)
  {
    v10 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = 138412546;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      _os_log_debug_impl(&dword_20B7F7000, v10, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning phrase %@ (%@)", (uint8_t *)&v13, 0x16u);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 208))(a1, a1[1], a2);
  }
  return (const __CFString *)(v9 ^ 1u);
}

void sub_20BA2E800(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = atomic_load((unsigned __int8 *)&qword_25472C3D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472C3D0))
  {
    sub_20B80BBD0(&qword_25472C3D8, off_2547292C8[0]);
    dword_25472C3F0 = 0;
    word_25472C3F4 = 1;
    byte_25472C3F6 = 0;
    sub_20B80BBD0(qword_25472C3F8, off_2547292D0);
    *(int *)((char *)&dword_25472C410 + 3) = 0;
    dword_25472C410 = 0;
    __cxa_atexit((void (*)(void *))sub_20BA2EA84, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C3D0);
  }
  v4 = 0uLL;
  v5 = 0;
  sub_20B9777DC((char *)&v4, &qword_25472C3D8, (__int128 *)&dword_25472C418, 2uLL);
  sub_20B8825BC(a2);
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20B86F120(&v6);
}

void sub_20BA2E908(_Unwind_Exception *a1)
{
  if (byte_25472C3EF < 0)
    operator delete((void *)qword_25472C3D8);
  __cxa_guard_abort(&qword_25472C3D0);
  _Unwind_Resume(a1);
}

const __CFString *sub_20BA2E940()
{
  return CFSTR("LearningDictionaryThai");
}

const __CFString *sub_20BA2E94C()
{
  return CFSTR("DynamicPhraseLexicon_th_TH.db");
}

void sub_20BA2E95C(_QWORD *a1)
{
  sub_20B9720A4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA2E980()
{
  return 0;
}

uint64_t sub_20BA2E988()
{
  return 0;
}

uint64_t sub_20BA2E990()
{
  return 17;
}

uint64_t sub_20BA2E998()
{
  return 0;
}

uint64_t sub_20BA2E9A0()
{
  return 1;
}

uint64_t sub_20BA2E9AC()
{
  return 0;
}

const __CFString *sub_20BA2E9B4()
{
  return CFSTR("TapTyping");
}

void sub_20BA2E9C8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20BA2E9DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4591E0;
  result[1] = v3;
  return result;
}

uint64_t sub_20BA2EA10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4591E0;
  a2[1] = v2;
  return result;
}

BOOL sub_20BA2EA2C(uint64_t a1, uint64_t *a2)
{
  return sub_20BA14440(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 128), *a2);
}

uint64_t sub_20BA2EA3C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458DD8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BA2EA78()
{
  return &unk_24C458DD8;
}

void sub_20BA2EA84()
{
  uint64_t i;

  for (i = 0; i != -64; i -= 32)
  {
    if (*((char *)&unk_25472C3D0 + i + 63) < 0)
      operator delete(*(void **)((char *)&unk_25472C3D0 + i + 40));
  }
}

_QWORD *MecabraContextCreateMutable(const __CFAllocator *a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint8_t v6[16];

  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraContextCreateMutable]", v6, 2u);
  }
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v4 = operator new();
  sub_20B96A650(v4, a1);
  *v3 = v4;
  return v3;
}

void sub_20BA2EB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4095D43ACALL);
  _Unwind_Resume(a1);
}

void MecabraContextRelease(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraContextRelease] context:%p", (uint8_t *)&v3, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  MEMORY[0x20BD39CB0](a1, 0x20C4093837F09);
}

const __CFString *MecabraContextAddCandidate(uint64_t *a1, void *a2)
{
  uint64_t v2;
  const __CFString *v4;

  if (!a1)
    return 0;
  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = sub_20B96A9F0(a2);
  if ((_DWORD)v4)
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 16), a2);
  return v4;
}

_QWORD *MecabraContextRemoveCandidatesInRange(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
      return (_QWORD *)sub_20B96AA60((uint64_t)result, a2, a3);
  }
  return result;
}

CFIndex MecabraContextGetCandidateCount(uint64_t a1)
{
  const __CFArray *v1;

  if (a1 && *(_QWORD *)a1 && (v1 = *(const __CFArray **)(*(_QWORD *)a1 + 16)) != 0)
    return CFArrayGetCount(v1);
  else
    return 0;
}

const void *MecabraContextGetCandidateAtIndex(uint64_t *a1, CFIndex a2)
{
  uint64_t v2;

  if (a1 && (v2 = *a1) != 0)
    return sub_20B96AAF4(v2, a2);
  else
    return 0;
}

const __CFString *MecabraContextAddInlineCandidate(uint64_t *a1, void *a2)
{
  uint64_t v2;
  const __CFString *v4;

  if (!a1)
    return 0;
  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = sub_20B96A9F0(a2);
  if ((_DWORD)v4)
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 32), a2);
  return v4;
}

_QWORD *MecabraContextRemoveInlineCandidatesInRange(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
      return (_QWORD *)sub_20B96AB44((uint64_t)result, a2, a3);
  }
  return result;
}

CFIndex MecabraContextGetInlineCandidateCount(uint64_t a1)
{
  if (a1 && *(_QWORD *)a1)
    return CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)a1 + 32));
  else
    return 0;
}

const void *MecabraContextGetInlineCandidateAtIndex(uint64_t *a1, CFIndex a2)
{
  uint64_t v2;

  if (a1 && (v2 = *a1) != 0)
    return sub_20B96ABC8(v2, a2);
  else
    return 0;
}

void MecabraContextSetRightContextFromString(uint64_t *a1, const void *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      sub_20B96AC14(v2, a2);
  }
}

uint64_t MecabraContextSetCandidateHistoryForAnalysisString(uint64_t a1, const void *a2, const void *a3)
{
  BOOL v3;
  uint64_t v4;

  if (!a1 || !*(_QWORD *)a1)
    return 0;
  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  if (!v3)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)a1 + 40), a2, a3);
  return v4;
}

void MecabraContextResetCandidateHistory(uint64_t a1)
{
  if (a1)
  {
    if (*(_QWORD *)a1)
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(_QWORD *)a1 + 40));
  }
}

void MecabraContextSetGeometryModel(uint64_t *a1, int a2, const __CFArray *a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *a1;
    if (v3)
      sub_20B96AD78(v3, a2, a3);
  }
}

void MecabraContextSetOption(uint64_t a1, const void *a2, const void *a3)
{
  __CFDictionary *v3;

  if (a1 && *(_QWORD *)a1 && a2)
  {
    v3 = *(__CFDictionary **)(*(_QWORD *)a1 + 56);
    if (v3)
      CFDictionarySetValue(v3, a2, a3);
  }
}

const void *MecabraContextGetOption(uint64_t *a1, const void *a2)
{
  uint64_t v2;

  if (a1 && (v2 = *a1) != 0)
    return sub_20B88826C(v2, a2);
  else
    return 0;
}

void MecabraContextSetAppContext(uint64_t *a1, const void *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      sub_20B96AE3C(v2, a2);
  }
}

void MecabraContextSetRecipientContext(uint64_t *a1, const void *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      sub_20B96B34C(v2, a2);
  }
}

uint64_t MecabraContextSetTextContentType(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_QWORD *)result)
      *(_DWORD *)(*(_QWORD *)result + 64) = a2;
  }
  return result;
}

void MecabraContextSetShuangpinType(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 134218240;
    v6 = a1;
    v7 = 1024;
    v8 = a2;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraContextSetShuangpinType] context:%p type:%d", (uint8_t *)&v5, 0x12u);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*(_QWORD *)a1)
    *(_DWORD *)(*(_QWORD *)a1 + 68) = a2;
}

void MecabraContextSetKeyboardLayout(uint64_t *a1, const __CFArray *a2)
{
  NSObject *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 134217984;
    v6 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraContextSetKeyboardLayout] context:%p", (uint8_t *)&v5, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    sub_20B96B390(*a1, a2);
}

uint64_t sub_20BA2F064(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C45F3B0;
  CFRelease(*(CFTypeRef *)(a1 + 8));
  return a1;
}

void sub_20BA2F0A0(uint64_t a1)
{
  sub_20BA2F064(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA2F0C4(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;

  v10 = sub_20B9C3B4C(a1, 0, CFSTR("ja"), a2, 0, 0, a3, a6 == 1, a6 == 2, 0, 0);
  *(_QWORD *)v10 = &off_24C461EB8;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 104) = a4;
  *(_QWORD *)(v10 + 112) = a5;
  *(_QWORD *)(v10 + 120) = 10000;
  *(_QWORD *)(v10 + 128) = v10 + 128;
  *(_QWORD *)(v10 + 136) = v10 + 128;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_QWORD *)(v10 + 176) = 0;
  *(_DWORD *)(v10 + 184) = 1065353216;
  sub_20B828960(v10 + 152, 0x2710uLL);
  *(_DWORD *)(a1 + 192) = a6;
  *(_QWORD *)(a1 + 196) = 0x3F8147AE3F800000;
  *(_DWORD *)(a1 + 204) = 1112014848;
  sub_20BA2F204(a1);
  return a1;
}

void sub_20BA2F1AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  sub_20B8CECB0(v3);
  sub_20B8CD934(v2);
  v6 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_20B9C40A8(v1);
  _Unwind_Resume(a1);
}

void sub_20BA2F204(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void ***v6;
  uint64_t v7;
  __n128 (*v8)(_QWORD *, uint64_t);
  void (*v9)(uint64_t);
  _QWORD v10[3];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(_QWORD *, uint64_t);
  void (*v15)(uint64_t);
  _QWORD v16[3];
  void **v17;

  v11 = 0;
  v12 = &v11;
  v13 = 0x4002000000;
  v14 = sub_20BA2F4C8;
  v15 = sub_20BA2F4EC;
  memset(v16, 0, sizeof(v16));
  v5 = 0;
  v6 = &v5;
  v7 = 0x4002000000;
  v8 = sub_20BA2F4C8;
  v9 = sub_20BA2F4EC;
  memset(v10, 0, sizeof(v10));
  LMLanguageModelEnumerateDynamicTokensWithBlock();
  sub_20B935F18((uint64_t *)(a1 + 88), v12 + 5, v6 + 5, 1000, 0x40000, 1000, 10000);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    sub_20B8AC0C0(v2);
  }
  else
  {
    v3 = operator new();
    sub_20B8A9F48(v3, 0x40000, 1000);
    v4 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  sub_20B8AAA34(*(_QWORD *)(a1 + 96), 1000, 0, 7);
  _Block_object_dispose(&v5, 8);
  v17 = (void **)v10;
  sub_20B83B400(&v17);
  _Block_object_dispose(&v11, 8);
  v5 = (void **)v16;
  sub_20B83B400(&v5);
}

void sub_20BA2F380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  MEMORY[0x20BD39CB0](v8, 0x10F3C4023F7E159);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v10 - 40) = v9;
  sub_20B83B400((void ***)(v10 - 40));
  _Block_object_dispose((const void *)(v10 - 104), 8);
  sub_20B83B400((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA2F3DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  LMLanguageModelResetDynamicData();
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
    sub_20B8AC0C0(v2);
  result = *(_QWORD *)(a1 + 96);
  if (result)
    return sub_20B8AC0C0(result);
  return result;
}

uint64_t sub_20BA2F424()
{
  LMLanguageModelGetDynamicTokenIDRange();
  return LMLanguageModelCreateStringForTokenID();
}

__n128 sub_20BA2F4C8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20BA2F4EC(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B83B400(&v1);
}

void sub_20BA2F514(_QWORD *a1, int a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  const __CFString *v11;
  const __CFString *v12;
  __CFString *v13;
  const __CFString *v14;
  CFIndex Length;
  const void *v16;
  const void *v17;
  NSObject *v18;
  const void *v19;
  const void *v20;
  CFIndex v21;
  void *__p;
  _BYTE v23[20];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a1[6];
  v7 = *(_QWORD *)(a1[4] + 8);
  v8 = *(_QWORD *)(a1[5] + 8);
  v9 = sub_20B9A7C5C(6u);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  v11 = (const __CFString *)sub_20BA2F424();
  if (!v11)
    goto LABEL_17;
  v12 = v11;
  if (CFStringGetLength(v11))
  {
    v13 = sub_20B96DFA4(*(_QWORD *)(v6 + 104), v12);
    v14 = v13;
    if (v13)
    {
      Length = CFStringGetLength(v13);
      if ((unint64_t)(Length - 1) > 0x1E)
      {
LABEL_15:
        CFRelease(v14);
        goto LABEL_16;
      }
      v21 = 0;
      sub_20B8D0624(v14, 0, &v20);
      sub_20B8D0624(v12, &v21, &v19);
      v16 = v20;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v23[8] = 0;
      __p = 0;
      sub_20B87ACC8(&__p, v20, (uint64_t)v20 + 2 * Length, Length);
      sub_20B9EB160((uint64_t *)(v7 + 40), (uint64_t)&__p);
      if (__p)
      {
        *(_QWORD *)v23 = __p;
        operator delete(__p);
      }
      v17 = v19;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v23[8] = 0;
      __p = 0;
      sub_20B87ACC8(&__p, v19, (uint64_t)v19 + 2 * v21, v21);
      sub_20B9EB160((uint64_t *)(v8 + 40), (uint64_t)&__p);
      if (__p)
      {
        *(_QWORD *)v23 = __p;
        operator delete(__p);
      }
      if (v10 && (v18 = sub_20B9A7C5C(6u), os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)))
      {
        LODWORD(__p) = 67109634;
        HIDWORD(__p) = a2;
        *(_WORD *)v23 = 2112;
        *(_QWORD *)&v23[2] = v12;
        *(_WORD *)&v23[10] = 2112;
        *(_QWORD *)&v23[12] = v14;
        _os_log_debug_impl(&dword_20B7F7000, v18, OS_LOG_TYPE_DEBUG, "Dynamic LM word (%u, %@, %@) loaded.", (uint8_t *)&__p, 0x1Cu);
        if (!v17)
        {
LABEL_13:
          if (v16)
            MEMORY[0x20BD39C80](v16, 0x1000C80BDFB0063);
          goto LABEL_15;
        }
      }
      else if (!v17)
      {
        goto LABEL_13;
      }
      MEMORY[0x20BD39C80](v17, 0x1000C80BDFB0063);
      goto LABEL_13;
    }
  }
LABEL_16:
  CFRelease(v12);
LABEL_17:
  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48) - *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) == 6291456)
    *a3 = 1;
}

void sub_20BA2F768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  if (v17)
  {
    MEMORY[0x20BD39C80](v17, 0x1000C80BDFB0063);
    if (!v16)
      goto LABEL_7;
  }
  else if (!v16)
  {
LABEL_7:
    CFRelease(v15);
    CFRelease(v14);
    _Unwind_Resume(a1);
  }
  MEMORY[0x20BD39C80](v16, 0x1000C80BDFB0063);
  goto LABEL_7;
}

CFIndex sub_20BA2F858(CFIndex result, CFStringRef theString, const __CFString *a3)
{
  uint64_t v5;
  UniChar *v6;
  unsigned __int8 *v7;
  __int16 v8;
  CFIndex v9;
  CFIndex v10;

  if (theString)
  {
    v5 = result;
    result = CFStringGetLength(theString);
    if (a3)
    {
      if (result)
      {
        result = CFStringGetLength(a3);
        if (result)
        {
          v9 = 0;
          v10 = 0;
          v8 = 0;
          v6 = sub_20B8D0A48(theString, &v10, (char *)&v8 + 1);
          v7 = (unsigned __int8 *)sub_20B8D0A48(a3, &v9, (char *)&v8);
          result = sub_20B8AB938(*(_QWORD *)(v5 + 96), v7, 2 * v9, v6, 2 * v10, 0, 0, 10000);
          if (HIBYTE(v8) && v6)
            result = MEMORY[0x20BD39C80](v6, 0x1000C80BDFB0063);
          if (v7)
          {
            if ((_BYTE)v8)
              return MEMORY[0x20BD39C80](v7, 0x1000C80BDFB0063);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_20BA2F950(uint64_t a1, _WORD *__src, unint64_t a3, int a4)
{
  BOOL v7;
  unint64_t i;
  int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v13;
  void *__p[2];
  char v15;

  if (a4 != 5 || !a3)
    goto LABEL_15;
  v7 = 0;
  for (i = 0; i != a3; v7 = i >= a3)
  {
    v9 = (unsigned __int16)__src[i];
    v10 = (v9 - 48) >= 0xA && (unsigned __int16)(v9 + 240) >= 0xAu;
    if (v10 && !sub_20B8DA100(__src[i]) && v9 != 65292 && v9 != 44)
      break;
    ++i;
  }
  if (v7)
    return 3;
LABEL_15:
  sub_20B877ED0(__p, __src, a3);
  if (sub_20B96E6E8((_QWORD *)(a1 + 152), (unsigned __int16 *)__p))
  {
    v11 = *(unsigned int *)sub_20BA2FA98(a1 + 120, (__int128 *)__p);
  }
  else
  {
    v13 = sub_20BA2FB74(a1, __src, a3);
    sub_20B8CDB0C((_QWORD *)(a1 + 120), (uint64_t)__p, (int *)&v13);
    v11 = v13;
  }
  if (v15 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_20BA2FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20BA2FA98(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  char **v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  __int128 *v12;

  v4 = a1 + 32;
  v12 = a2;
  v5 = (char *)*((_QWORD *)sub_20B8CDC5C(a1 + 32, (unsigned __int16 *)a2, (uint64_t)&unk_20BA37B7A, &v12) + 5);
  v7 = *(char **)(a1 + 8);
  v6 = (char **)(a1 + 8);
  if (v7 != v5)
  {
    v8 = sub_20BA304BC((uint64_t)v6, 0, 0, (uint64_t)(v5 + 16));
    v9 = *v6;
    *((_QWORD *)v9 + 1) = v8;
    *(_QWORD *)v8 = v9;
    *v6 = v8;
    *((_QWORD *)v8 + 1) = v6;
    v10 = *(_QWORD **)v5;
    v10[1] = *((_QWORD *)v5 + 1);
    **((_QWORD **)v5 + 1) = v10;
    sub_20B8CD994((int)v6, (void **)v5);
    v12 = a2;
    *((_QWORD *)sub_20B8CDC5C(v4, (unsigned __int16 *)a2, (uint64_t)&unk_20BA37B7A, &v12) + 5) = v8;
    v5 = v8;
  }
  return v5 + 40;
}

uint64_t sub_20BA2FB74(uint64_t a1, UniChar *a2, unint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  CFStringRef v19;
  unsigned int TokenIDForString;

  if (a2
    && a3
    && ((v6 = *a2, v7 = v6 - 48, v8 = (unsigned __int16)(v6 + 240), v7 >= 0xA) ? (v9 = v8 > 9) : (v9 = 0), !v9))
  {
    v10 = 0;
    while (a3 - 1 != v10)
    {
      v11 = a2[v10 + 1];
      v12 = v11 - 48;
      ++v10;
      v13 = (unsigned __int16)(v11 + 240);
      if (v12 >= 0xA && v13 >= 0xA)
      {
        if (v10 < a3)
          goto LABEL_15;
        return 3;
      }
    }
    return 3;
  }
  else
  {
LABEL_15:
    if (a3 == 3)
    {
      if (a2[1] == 12289)
      {
        v15 = *a2;
        v16 = (v15 - 48) >= 0xA && (unsigned __int16)(v15 + 240) >= 0xAu;
        if (!v16 || sub_20B8D9FF4(v15))
        {
          v17 = a2[2];
          v18 = 3;
          if ((v17 - 48) < 0xA || (unsigned __int16)(v17 + 240) < 0xAu || sub_20B8D9FF4(v17))
            return v18;
        }
      }
    }
    else if (!a3)
    {
      return 0;
    }
    v18 = (*(uint64_t (**)(_QWORD, UniChar *, unint64_t))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112), a2, 2 * a3);
    if (!(_DWORD)v18)
    {
      v19 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
      TokenIDForString = LMLanguageModelGetTokenIDForString();
      LMLanguageModelGetDynamicTokenIDRange();
      if (TokenIDForString)
        v18 = TokenIDForString;
      else
        v18 = 0;
      if (v19)
        CFRelease(v19);
    }
  }
  return v18;
}

void sub_20BA2FD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B87E150(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA2FD34(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned __int16 *i;
  int v11;
  _BYTE *v12;

  if (a5)
  {
    v6 = 2 * a5;
    while (1)
    {
      v7 = *a4;
      v8 = &unk_20BA63CE8;
      if (v7 != 12300)
      {
        if (v7 != 12301)
          return sub_20BA2F950(a1, a2, a3, a6);
        v8 = &unk_20BA63CEA;
      }
      if (v8 - (_BYTE *)&unk_20BA63CE8 == -2)
        break;
      ++a4;
      v6 -= 2;
      if (!v6)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (!a3)
      return 0;
    v9 = 2 * a3;
    for (i = a2; ; ++i)
    {
      v11 = *i;
      v12 = &unk_20BA63CEE;
      if (v11 != 65288)
      {
        if (v11 != 65289)
          return sub_20BA2F950(a1, a2, a3, a6);
        v12 = &unk_20BA63CF0;
      }
      if (v12 - (_BYTE *)&unk_20BA63CEE == -2)
        break;
      v9 -= 2;
      if (!v9)
        return 0;
    }
  }
  return sub_20BA2F950(a1, a2, a3, a6);
}

uint64_t sub_20BA2FDF0(uint64_t a1, const __CFString *a2)
{
  UniChar *v3;
  unint64_t v4;
  uint64_t v5;
  UniChar *v7;
  unint64_t v8;

  v8 = 0;
  sub_20B8D0624(a2, (CFIndex *)&v8, &v7);
  v3 = v7;
  if (v7)
    v4 = v8;
  else
    v4 = 0;
  v5 = sub_20BA2FB74(a1, v7, v4);
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C80BDFB0063);
  return v5;
}

void sub_20BA2FE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA2FE90(uint64_t a1, const __CFString *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *__p[2];
  char v10;
  void *v11;
  unint64_t v12;

  v6 = LMLanguageModelAddTokenForString();
  if ((_DWORD)v6 && *(_QWORD *)(a1 + 120))
  {
    v12 = 0;
    sub_20B8D0624(a2, (CFIndex *)&v12, &v11);
    v7 = v11;
    sub_20B877ED0(__p, v11, v12);
    if (sub_20B96E6E8((_QWORD *)(a1 + 152), (unsigned __int16 *)__p))
    {
      sub_20BA2FFA8(a1 + 120, (unsigned __int16 *)__p);
      sub_20B8CDB0C((_QWORD *)(a1 + 120), (uint64_t)__p, a3);
    }
    if (v10 < 0)
      operator delete(__p[0]);
    if (v7)
      MEMORY[0x20BD39C80](v7, 0x1000C80BDFB0063);
  }
  return v6;
}

void sub_20BA2FF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (v15)
    MEMORY[0x20BD39C80](v15, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA2FFA8(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = (_QWORD *)(a1 + 32);
  v4 = (uint64_t *)sub_20B8CDFCC((_QWORD *)(a1 + 32), a2);
  v5 = v4[5];
  v6 = *(_QWORD **)v5;
  v6[1] = *(_QWORD *)(v5 + 8);
  **(_QWORD **)(v5 + 8) = v6;
  --*(_QWORD *)(a1 + 24);
  sub_20B8CD994(a1 + 8, (void **)v5);
  return sub_20B8CE0CC(v3, v4);
}

double sub_20BA3000C(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  double result;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  double v41;
  void *__p;
  char *v43;
  char *v44;

  if (*(_DWORD *)(a1 + 192) == 2)
  {
    __p = 0;
    v43 = 0;
    v8 = a4 + 1;
    v44 = 0;
    sub_20B820518(&__p, a4 + 1);
    if (a4)
    {
      v9 = &a3[a4];
      v10 = v43;
      do
      {
        if (v10 >= v44)
        {
          v12 = (char *)__p;
          v13 = (v10 - (_BYTE *)__p) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            goto LABEL_59;
          v15 = v44 - (_BYTE *)__p;
          if ((v44 - (_BYTE *)__p) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)sub_20B8127BC((uint64_t)&v44, v16);
            v12 = (char *)__p;
            v10 = v43;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = *a3;
          v11 = v18 + 4;
          while (v10 != v12)
          {
            v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          __p = v18;
          v43 = v11;
          v44 = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_DWORD *)v10 = *a3;
          v11 = v10 + 4;
        }
        v43 = v11;
        ++a3;
        v10 = v11;
      }
      while (a3 != v9);
    }
    else
    {
      v11 = v43;
    }
    if (v11 >= v44)
    {
      v22 = (char *)__p;
      v23 = (v11 - (_BYTE *)__p) >> 2;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62)
LABEL_59:
        sub_20B80CDD8();
      v25 = v44 - (_BYTE *)__p;
      if ((v44 - (_BYTE *)__p) >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)sub_20B8127BC((uint64_t)&v44, v26);
        v22 = (char *)__p;
        v11 = v43;
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v23];
      v29 = &v27[4 * v26];
      *(_DWORD *)v28 = a2;
      v21 = v28 + 4;
      while (v11 != v22)
      {
        v30 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v28 - 1) = v30;
        v28 -= 4;
      }
      __p = v28;
      v43 = v21;
      v44 = v29;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_DWORD *)v11 = a2;
      v21 = v11 + 4;
    }
    v43 = v21;
    if (*(_QWORD *)(a1 + 32) >= v8)
      v31 = v8;
    else
      v31 = *(_QWORD *)(a1 + 32);
    if (v31)
    {
      v32 = 0;
      v33 = 0.0;
      v34 = -4;
      do
      {
        if (v32 <= 1)
          v35 = 196;
        else
          v35 = 200;
        v36 = *(float *)(a1 + v35);
        v37 = v32 + 1;
        LMLanguageModelGetUsageCount();
        v39 = v38;
        if (v38 >= v36)
        {
          LMLanguageModelGetUsageCount();
          if (v40 != 0.0 && (v32 != 1 || v40 > *(float *)(a1 + 204)))
            v33 = v33 + (float)(v39 / v40);
        }
        v34 -= 4;
        ++v32;
      }
      while (v31 != v37);
    }
    else
    {
      v33 = 0.0;
    }
    v41 = log10(v33 / (double)v31);
    if (__p)
    {
      v43 = (char *)__p;
      operator delete(__p);
    }
    return v41;
  }
  else
  {
    LMLanguageModelConditionalProbability();
  }
  return result;
}

void sub_20BA30320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BA30348(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  double result;

  if (*(_DWORD *)(a1 + 192) == 2)
  {
    if (a3 < 1)
      return 0.0;
    v6 = 0;
    v7 = 0.0;
    do
    {
      v7 = v7 + sub_20BA3000C(a1, a2[v6], a2, v6);
      ++v6;
    }
    while (a3 != v6);
    return v7;
  }
  else
  {
    LMLanguageModelJointProbability();
  }
  return result;
}

uint64_t sub_20BA303E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_20B8CECB0((uint64_t)(a1 + 19));
  sub_20B8CD934(a1 + 16);
  v2 = a1[12];
  a1[12] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[11];
  a1[11] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20B9C40A8((uint64_t)a1);
}

void sub_20BA30448(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_20B8CECB0((uint64_t)(a1 + 19));
  sub_20B8CD934(a1 + 16);
  v2 = a1[12];
  a1[12] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[11];
  a1[11] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_20B9C40A8((uint64_t)a1);
  JUMPOUT(0x20BD39CB0);
}

char *sub_20BA304BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  _BYTE *v8;

  v7 = (char *)operator new(0x30uLL);
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  v8 = v7 + 16;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20B88DD4C(v8, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a4;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a4 + 16);
  }
  *((_DWORD *)v7 + 10) = *(_DWORD *)(a4 + 24);
  return v7;
}

void sub_20BA30528(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA3053C(_QWORD *a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = sub_20BA30970(a2);
  *a1 = v4;
  return a1;
}

void sub_20BA30594(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BA305B8(_QWORD *a1, int a2, double a3)
{
  _QWORD *v6;
  id v7;
  const char *v8;
  uint64_t v9;

  v6 = (_QWORD *)operator new();
  v7 = sub_20BA30970(a2);
  *v6 = v7;
  if (v7)
    objc_msgSend_setValidSequenceCorrectionThreshold_(v7, v8, v9, a3);
  *a1 = v6;
  return a1;
}

void sub_20BA30628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA3064C@<X0>(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v5 = objc_msgSend_count(a1, a2, a3);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v42 = a4;
  if (v5)
  {
    if (v5 >= 0x38E38E38E38E38FLL)
      sub_20B80CDD8();
    v7 = 9 * v5;
    v8 = 72 * v5;
    v9 = (char *)operator new(72 * v5);
    *v42 = v9;
    v42[2] = &v9[8 * v7];
    v10 = 72 * ((v8 - 72) / 0x48uLL) + 72;
    bzero(v9, v10);
    v43 = v9;
    v42[1] = &v9[v10];
  }
  else
  {
    v43 = 0;
  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v6, (uint64_t)&v49, v53, 16, v42);
  v14 = result;
  if (result)
  {
    v15 = 0;
    v46 = *(_QWORD *)v50;
    do
    {
      v16 = 0;
      v44 = v15;
      v17 = &v43[72 * v15 + 64];
      v47 = v14;
      do
      {
        if (*(_QWORD *)v50 != v46)
          objc_enumerationMutation(a1);
        v18 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v16);
        v19 = objc_msgSend_range(v18, v12, v13);
        if (v19 == 0x7FFFFFFFFFFFFFFFLL)
          v22 = -1;
        else
          v22 = v19;
        v48 = v22;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL)
          v23 = 0;
        else
          v23 = v20;
        v24 = objc_msgSend_replacementString(v18, v20, v21);
        v27 = objc_msgSend_modificationType(v18, v25, v26);
        v30 = objc_msgSend_syllableRange(v18, v28, v29);
        if (v30 == 0x7FFFFFFFFFFFFFFFLL)
          v33 = -1;
        else
          v33 = v30;
        if (v30 == 0x7FFFFFFFFFFFFFFFLL)
          v34 = 0;
        else
          v34 = v31;
        v35 = objc_msgSend_additionalSyllableRange(v18, v31, v32);
        v37 = v36;
        objc_msgSend_modificationScore(v18, v36, v38);
        if (v35 == 0x7FFFFFFFFFFFFFFFLL)
          v40 = 0;
        else
          v40 = v37;
        if (v35 == 0x7FFFFFFFFFFFFFFFLL)
          v41 = -1;
        else
          v41 = v35;
        *((_QWORD *)v17 - 8) = v48;
        *((_QWORD *)v17 - 7) = v23;
        *((_QWORD *)v17 - 6) = v24;
        *((_DWORD *)v17 - 10) = v27;
        *((_QWORD *)v17 - 4) = v33;
        *((_QWORD *)v17 - 3) = v34;
        ++v16;
        *((_QWORD *)v17 - 2) = v41;
        *((_QWORD *)v17 - 1) = v40;
        *(_QWORD *)v17 = v39;
        v17 += 72;
      }
      while (v47 != v16);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v12, (uint64_t)&v49, v53, 16);
      v14 = result;
      v15 = v44 + v16;
    }
    while (result);
  }
  return result;
}

void sub_20BA3089C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
  {
    *(_QWORD *)(a9 + 8) = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BA308D0@<X0>(void ***a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t result;
  uint64_t v28;

  v5 = (void *)objc_msgSend_correction(**a1, a2, a3);
  v8 = objc_msgSend_range(v5, v6, v7);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    v11 = -1;
  else
    v11 = v8;
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    v12 = 0;
  else
    v12 = v9;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v12;
  *(_QWORD *)(a4 + 16) = objc_msgSend_replacementString(v5, v9, v10);
  *(_DWORD *)(a4 + 24) = objc_msgSend_modificationType(v5, v13, v14);
  v17 = objc_msgSend_syllableRange(v5, v15, v16);
  if (v17 == 0x7FFFFFFFFFFFFFFFLL)
    v20 = -1;
  else
    v20 = v17;
  if (v17 == 0x7FFFFFFFFFFFFFFFLL)
    v21 = 0;
  else
    v21 = v18;
  *(_QWORD *)(a4 + 32) = v20;
  *(_QWORD *)(a4 + 40) = v21;
  v22 = objc_msgSend_additionalSyllableRange(v5, v18, v19);
  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
    v25 = -1;
  else
    v25 = v22;
  if (v22 == 0x7FFFFFFFFFFFFFFFLL)
    v26 = 0;
  else
    v26 = v23;
  *(_QWORD *)(a4 + 48) = v25;
  *(_QWORD *)(a4 + 56) = v26;
  result = objc_msgSend_modificationScore(v5, v23, v24);
  *(_QWORD *)(a4 + 64) = v28;
  return result;
}

id sub_20BA30970(int a1)
{
  void *v2;
  const char *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)sub_20B93ABBC();
  v4 = (void *)objc_msgSend_classNamed_(v2, v3, (uint64_t)CFSTR("PRAutocorrectionContext"));
  v6 = 2;
  if (a1 == 2)
    v6 = 4;
  if (a1 == 1)
    v7 = (void *)objc_msgSend_autocorrectionContextOfType_(v4, v5, 3);
  else
    v7 = (void *)objc_msgSend_autocorrectionContextOfType_(v4, v5, v6);
  return v7;
}

void sub_20BA309BC(uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x20BD39CB0);
  }
}

uint64_t *sub_20BA30A08(char *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new();
  sub_20BA30EE8(v2, a1);
  return v2;
}

void sub_20BA30A4C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2;
  MEMORY[0x20BD39CB0](v4, 0x1030C4059851DCDLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20BA30A3CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BA30A9C()
{
  unsigned __int8 v0;
  char *v2;
  uint64_t *v3;
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D428);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D428))
  {
    sub_20B80BBD0(v4, "/System/Library/LinguisticData/RequiredAssets_zh.bundle/AssetData/reading-lookup.dat");
    if (SHIBYTE(v5) < 0)
    {
      sub_20B80ACE0(__p, v4[0], (unint64_t)v4[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v4;
      v7 = v5;
    }
    if (v7 >= 0)
      v2 = (char *)__p;
    else
      v2 = (char *)__p[0];
    v3 = sub_20BA30A08(v2);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v5) < 0)
      operator delete(v4[0]);
    qword_25472D420 = (uint64_t)v3;
    __cxa_guard_release(&qword_25472D428);
  }
  return qword_25472D420;
}

void sub_20BA30B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25472D428);
  _Unwind_Resume(a1);
}

uint64_t sub_20BA30BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t result;

  result = sub_20BA30C44(a1, a2, a3, a4, a5, a6, a7);
  if (!(_DWORD)result)
    return sub_20BA30CC0(a1, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_20BA30C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t result;

  result = CFBurstTrieContainsUTF8String();
  if ((_DWORD)result)
    return sub_20BA30D88(a1, 0, 0, 0, a5, a6, a7);
  return result;
}

uint64_t sub_20BA30CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v12 = 0;
  LODWORD(v13) = 0;
  v14 = a2 + 2 * a3;
  while (a4 > v13)
  {
    v15 = v13;
    v13 = (v13 + 1);
    if ((*(_WORD *)(v14 + 2 * v15) & 0xFC00) == 0xD800
      && a4 != v13
      && (*(_WORD *)(v14 + 2 * v13) & 0xFC00) == 0xDC00)
    {
      LODWORD(v13) = v15 + 2;
    }
    v16 = sub_20BA30C44(a1, v14, v15, (v13 - v15), a5, a6 + v12, a7 - (int)v12);
    v12 = (v16 + v12);
    if (!v16)
      return 0;
  }
  return v12;
}

uint64_t sub_20BA30D88(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  const char *v19;
  size_t v20;
  unsigned int v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  size_t v29;

  if (!a3)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 40) + 2 * a2;
  v29 = a7;
  v23 = a4;
  v24 = a3;
  v12 = 2 * a4;
  v13 = 2 * (a4 - 1);
  do
  {
    if (a4)
    {
      v14 = 0;
      v15 = 0;
      v25 = v11;
      v26 = v8;
      v16 = v11 + 2 * v8;
      do
      {
        v17 = *(unsigned __int16 *)(v16 + v14);
        if (!v14)
        {
          v18 = v17 >> 14;
          if (a5 == 1 && v18 == 2)
            break;
          v17 &= 0x3FFFu;
          if (a5 == 2 && v18 == 1)
            break;
        }
        v19 = (const char *)(*(_QWORD *)(a1 + 48) + v17 + *(unsigned __int16 *)(a1 + 8) * (unint64_t)v17);
        v20 = strlen(v19);
        v21 = v20 + v10;
        if (v20 + v10 > v29)
          break;
        strncpy((char *)(a6 + v10), v19, v20);
        v10 = v21;
        v15 |= v13 == v14;
        v14 += 2;
      }
      while (v12 != v14);
      a4 = v23;
      v11 = v25;
      v8 = v26;
      if ((v15 & 1) != 0)
        break;
    }
    v11 += 2 * v9++ * a4;
    v8 += a4;
  }
  while (v9 != v24);
  return v10;
}

uint64_t *sub_20BA30EE8(uint64_t *a1, char *__s)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *exception;
  __int128 v12;

  *a1 = 0;
  *((_WORD *)a1 + 4) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  v3 = (uint64_t)(a1 + 2);
  *((_OWORD *)a1 + 2) = 0u;
  a1[6] = 0;
  sub_20B90CFC0(__s, (uint64_t)"r", 1, &v12);
  sub_20B82E770(v3, &v12);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_WORD **)a1[2];
  *a1 = (uint64_t)v7;
  if (*v7 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20BA310BC((uint64_t)exception, 2);
    goto LABEL_11;
  }
  *((_WORD *)a1 + 4) = v7[1];
  v8 = CFBurstTrieCreateFromMapBytes();
  a1[4] = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20BA310BC((uint64_t)exception, 1);
LABEL_11:
    __cxa_throw(exception, (struct type_info *)&unk_24C45BB60, (void (*)(void *))sub_20BA31154);
  }
  v9 = *a1;
  a1[5] = (uint64_t)v7 + *(unsigned int *)(*a1 + 8);
  a1[6] = (uint64_t)v7 + *(unsigned int *)(v9 + 4);
  return a1;
}

void sub_20BA31030()
{
  __break(1u);
}

void sub_20BA310A0()
{
  __cxa_end_catch();
  JUMPOUT(0x20BA310A8);
}

uint64_t sub_20BA310BC(uint64_t a1, int a2)
{
  const std::string::value_type *v3;
  size_t v4;

  *(_QWORD *)a1 = off_24C460540;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2 == 2)
  {
    v3 = "Reading lookup version error.";
    v4 = 29;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "Reading lookup index trie error.";
    v4 = 32;
LABEL_5:
    sub_20B8A7360((std::string *)(a1 + 8), v3, v4);
  }
  return a1;
}

void sub_20BA31130(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_20BA31154(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C460540;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t sub_20BA31190(const __CFString *a1, int a2)
{
  uint64_t v2;
  unint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  CFIndex v12;

  if ((a2 - 3) < 0xFFFFFFFE)
    return 0;
  v2 = sub_20BA30A9C();
  if (!v2)
    return v2;
  v12 = 0;
  sub_20B8D0624(a1, &v12, &v11);
  if (!v12)
  {
    v2 = 0;
    v8 = v11;
    if (!v11)
      return v2;
    goto LABEL_13;
  }
  v5 = v12 * *(unsigned __int16 *)(v2 + 8);
  v6 = (const char *)operator new[]();
  if (a2 == 1)
    v7 = 1;
  else
    v7 = 2;
  v8 = v11;
  v9 = sub_20BA30BBC(v2, v11, 0, v12, v7, (uint64_t)v6, v5);
  if (v9 && v5 > v9)
  {
    v6[v9] = 0;
    v2 = (uint64_t)CFStringCreateWithCString(0, v6, 0x8000100u);
  }
  else
  {
    v2 = 0;
  }
  MEMORY[0x20BD39C80](v6, 0x1000C8077774924);
  if (v8)
LABEL_13:
    MEMORY[0x20BD39C80](v8, 0x1000C80BDFB0063);
  return v2;
}

void sub_20BA312C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void sub_20BA31310(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C460540;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20BA31360(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void *sub_20BA3137C(uint64_t a1, int a2, _QWORD *a3, _BYTE *a4, void *__dst, _WORD *a6)
{
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  void *result;
  int v15;
  unsigned int v16;

  v11 = a2;
  v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + a2);
  v13 = *v12;
  *a6 = v13;
  result = memmove(__dst, v12 + 1, v13);
  if (*a6)
  {
    v15 = 0;
    do
    {
      *((_BYTE *)__dst + v15++) ^= 0x6Cu;
      v16 = (unsigned __int16)*a6;
    }
    while (v16 > v15);
  }
  else
  {
    v16 = 0;
  }
  *a4 = *(_BYTE *)(v11 + v16 + *(_QWORD *)(a1 + 8) + 1);
  *a3 = *(_QWORD *)(a1 + 8) + v11 + (unsigned __int16)*a6 + 2;
  return result;
}

uint64_t sub_20BA31438(uint64_t result, unsigned __int8 *a2, int a3, _BYTE *a4, _BYTE *a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 __len;
  const void *__len_1;
  unsigned __int16 __n;
  _QWORD __n_2[6];

  __n_2[5] = *MEMORY[0x24BDAC8D0];
  __n = 0;
  __len_1 = 0;
  __len = 0;
  v9 = 0xFFFF;
  v10 = 1;
  while (1)
  {
    v11 = v9 + 1;
    v12 = (__int16)(v9 + 1);
    if (v12 == a3)
      break;
    v13 = a2[(__int16)(a3 - 2 - v9)];
    v14 = *(_DWORD **)result;
    v15 = v13 + *(_DWORD *)(*(_QWORD *)result + 8 * v10) + 2;
    if (v15 > **(_DWORD **)result || v14[2 * v15 + 1] != v10)
      goto LABEL_14;
    v16 = v14[2 * v15];
    v10 = v15;
    v9 = v11;
    if (v16 < 0)
    {
      result = (uint64_t)sub_20BA3137C(result, -v16, &__len_1, &__len, __n_2, &__n);
      if (v12 + __n + 1 == a3)
      {
        result = memcmp(__n_2, a2, __n);
        if (!(_DWORD)result)
        {
          v17 = __len;
          result = (uint64_t)memmove(a4, __len_1, __len);
          for (*a5 = v17; v17; --v17)
            *a4++ ^= 0x6Cu;
          return result;
        }
      }
LABEL_14:
      *a5 = 0;
      return result;
    }
  }
  v18 = *(_DWORD **)result;
  v19 = *(_DWORD *)(*(_QWORD *)result + 8 * v10);
  if (v19 >= **(_DWORD **)result)
    goto LABEL_14;
  v20 = 2 * v19;
  if (v18[v20 + 3] != v10)
    goto LABEL_14;
  v21 = v18[v20 + 2];
  if ((v21 & 0x80000000) == 0)
    goto LABEL_14;
  sub_20BA3137C(result, -v21, &__len_1, &__len, __n_2, &__n);
  v22 = __len;
  result = (uint64_t)memmove(a4, __len_1, __len);
  for (*a5 = v22; v22; --v22)
    *a4++ ^= 0x6Cu;
  return result;
}

void *sub_20BA31620(void *__src, size_t __len, _BYTE *__dst, _BYTE *a4)
{
  _BYTE *v5;
  int v6;
  uint64_t v7;
  void *result;

  v5 = __dst;
  v6 = __len;
  v7 = __len;
  result = memmove(__dst, __src, __len);
  *a4 = v6;
  if (v6)
  {
    do
    {
      *v5++ ^= 0x6Cu;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_20BA31680(uint64_t result, uint64_t a2, int a3, _BYTE *a4, _BYTE *a5, uint64_t a6)
{
  int v7;
  int v9;
  int v10;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  __int16 v26;
  _DWORD __n[3];
  _BYTE __s1[40];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(__int16 *)(a6 + 4);
  if (v7 < a3)
  {
    v9 = *(_DWORD *)a6;
    if ((*(_DWORD *)a6 & 0x80000000) == 0)
    {
      v10 = *(_DWORD *)(result + 24);
      if (v9 <= v10)
      {
        *(_QWORD *)&__n[1] = 0;
        HIBYTE(__n[0]) = 0;
        v14 = v7;
        LOWORD(__n[0]) = 0;
        while (1)
        {
          v15 = 2 * v9;
          if (v14 > v7)
          {
            v16 = *(_QWORD *)result;
            v17 = *(_DWORD *)(*(_QWORD *)result + 4 * v15);
            if (v17 >= 1 && v17 < v10)
            {
              v19 = 2 * v17;
              if (*(_DWORD *)(v16 + 4 * (v19 + 3)) == v9)
              {
                v20 = *(_DWORD *)(v16 + 4 * (v19 + 2));
                if (v20 < 0)
                {
                  sub_20BA3137C(result, -v20, &__n[1], (_BYTE *)__n + 3, __s1, __n);
                  result = (uint64_t)sub_20BA31620(*(void **)&__n[1], HIBYTE(__n[0]), a4, a5);
                  *(_DWORD *)a6 = v9;
                  *(_WORD *)(a6 + 4) = v14;
                  return result;
                }
              }
            }
          }
          v21 = a3 - v14;
          if (a3 <= v14)
            goto LABEL_4;
          v22 = *(_QWORD *)result;
          v23 = *(unsigned __int8 *)(a2 + (__int16)(v21 - 1)) + *(_DWORD *)(*(_QWORD *)result + 4 * v15) + 2;
          v24 = v23 >= 1 && v23 <= v10;
          if (!v24 || *(_DWORD *)(v22 + 4 * ((2 * v23) | 1u)) != v9)
            goto LABEL_4;
          v25 = *(_DWORD *)(v22 + 4 * (2 * v23));
          if (v25 < 0)
            break;
          ++v14;
          v9 = v23;
        }
        result = (uint64_t)sub_20BA3137C(result, -v25, &__n[1], (_BYTE *)__n + 3, __s1, __n);
        v26 = __n[0];
        if (((v21 + ~LOWORD(__n[0])) & 0x8000) == 0 && LOWORD(__n[0]) + v14 < a3)
        {
          result = memcmp(__s1, (const void *)(a2 + (__int16)(v21 + ~LOWORD(__n[0]))), LOWORD(__n[0]));
          if (!(_DWORD)result)
          {
            result = (uint64_t)sub_20BA31620(*(void **)&__n[1], HIBYTE(__n[0]), a4, a5);
            *(_DWORD *)a6 = -1;
            *(_WORD *)(a6 + 4) = v14 + v26 + 1;
            return result;
          }
        }
      }
    }
  }
LABEL_4:
  *a5 = 0;
  return result;
}

uint64_t sub_20BA31884(unsigned __int16 *a1, const char *a2, unsigned int a3, unsigned int a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16[100];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)objc_msgSend_stringWithCharacters_length_(MEMORY[0x24BDD17C8], a2, (uint64_t)a2, a3 >> 1);
  objc_msgSend_getCString_maxLength_encoding_(v6, v7, (uint64_t)v16, 100, 4);
  printf("%s \n", v16);
  v8 = a4 >> 28;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (_WORD *)(*((_QWORD *)a1 + 1) + 2 * (a4 & 0xFFFFFF));
    v11 = 2 * (HIBYTE(a4) & 0xF);
    v12 = v11;
    do
    {
      printf("reading %d: ", v9);
      if ((a4 & 0xF000000) != 0)
      {
        v13 = 0;
        do
        {
          if (v13)
            v14 = (unsigned __int16)v10[v13 / 2];
          else
            v14 = *v10 & 0x3FFF;
          printf("%s", (const char *)(*((_QWORD *)a1 + 2) + v14 + *a1 * (unint64_t)v14));
          v13 += 2;
        }
        while (v11 != v13);
      }
      putchar(10);
      ++v9;
      v10 = (_WORD *)((char *)v10 + v12);
      v12 += v11;
    }
    while (v9 != v8);
  }
  result = putchar(10);
  ++dword_25472C418;
  return result;
}

uint64_t ReadingLookupDictionaryBuild(int a1, char *const *a2)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char **v9;
  int v10;
  int v11;
  int v12;
  _WORD *v13;
  int v14;
  int v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  void *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  void *v51;
  const char *v52;
  const char *v53;
  void *v54;
  const char *v55;
  const char *v56;
  void *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  ssize_t v67;
  FILE *v69;
  int v70;
  char *v71;
  void *v72;
  uint64_t v73;
  _WORD __buf[2];
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  stat v83;
  char v84[132];
  char v85[100];
  stat v86;
  _BYTE v87[100];
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x20BD3A22C]();
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = (const char **)MEMORY[0x24BDAF270];
  while (1)
  {
    while (1)
    {
      v10 = getopt_long(a1, a2, "r:w:o:d:", (const option *)&off_254729AF8, 0);
      if (v10 <= 110)
        break;
      switch(v10)
      {
        case 'o':
          v6 = *v9;
          break;
        case 'w':
          v7 = (uint64_t)*v9;
          break;
        case 'r':
          v8 = *v9;
          break;
        default:
          goto LABEL_9;
      }
    }
    if (v10 == -1)
      break;
    if (v10 == 100)
      v5 = *v9;
    else
LABEL_9:
      sub_20BA320BC(*(const char **)a2);
  }
  if (v5)
  {
    v11 = open(v5, 0);
    if ((v11 & 0x80000000) == 0)
    {
      v12 = v11;
      fstat(v11, &v86);
      v13 = mmap(0, v86.st_size, 1, 1, v12, 0);
      if (!CFBurstTrieCreateFromMapBytes())
        __assert_rtn("dumpDictionary", "BuildReadingLookupDictionary.mm", 84, "trie");
      *(_QWORD *)&v83.st_dev = 0;
      LOWORD(v83.st_dev) = v13[1];
      v83.st_ino = (__darwin_ino64_t)v13 + *((unsigned int *)v13 + 2);
      *(_QWORD *)&v83.st_uid = (char *)v13 + *((unsigned int *)v13 + 1);
      CFBurstTrieCreateCursorForBytes();
      CFBurstTrieTraverseFromCursor();
      CFBurstTrieCursorRelease();
      CFBurstTrieRelease();
      close(v12);
      munmap(v13, v86.st_size);
      printf("%d words\n", dword_25472C418);
      goto LABEL_40;
    }
    v69 = (FILE *)*MEMORY[0x24BDAC8D8];
LABEL_52:
    fprintf(v69, "Cannot open %s\n");
LABEL_54:
    exit(1);
  }
  if (!v8 || !v7 || !v6)
  {
    sub_20BA320BC(*(const char **)a2);
    goto LABEL_54;
  }
  v72 = v4;
  v14 = open(v8, 0);
  if (v14 < 0)
  {
    v69 = (FILE *)*MEMORY[0x24BDAC8D8];
    goto LABEL_52;
  }
  v15 = v14;
  fstat(v14, &v83);
  v70 = v15;
  v71 = (char *)mmap(0, v83.st_size, 1, 1, v15, 0);
  v16 = (void *)MEMORY[0x24BDD17C8];
  v18 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v17, v7, 4);
  v20 = (void *)objc_msgSend_stringWithContentsOfFile_encoding_error_(v16, v19, v18, 4, 0);
  v22 = (void *)objc_msgSend_componentsSeparatedByString_(v20, v21, (uint64_t)CFSTR("\n"));
  CFBurstTrieCreate();
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v79, v84, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v80;
    do
    {
      v27 = 0;
      v73 = v25;
      do
      {
        if (*(_QWORD *)v80 != v26)
          objc_enumerationMutation(v22);
        v28 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * v27);
        v29 = (void *)MEMORY[0x20BD3A22C]();
        v32 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x24BDD14A8], v30, v31);
        v34 = (void *)objc_msgSend_stringByTrimmingCharactersInSet_(v28, v33, v32);
        if (objc_msgSend_length(v34, v35, v36) && (objc_msgSend_hasPrefix_(v34, v37, (uint64_t)CFSTR("#")) & 1) == 0)
        {
          v39 = (void *)objc_msgSend_componentsSeparatedByString_(v34, v38, (uint64_t)CFSTR(","));
          v41 = (void *)objc_msgSend_objectAtIndex_(v39, v40, 0);
          if (!objc_msgSend_length(v41, v42, v43))
            __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 178, "[word length] > 0");
          objc_msgSend_getCString_maxLength_encoding_(v41, v44, (uint64_t)v87, 100, 4);
          v46 = (void *)objc_msgSend_objectAtIndex_(v39, v45, 1);
          if ((objc_msgSend_isEqualToString_(v46, v47, (uint64_t)CFSTR("*")) & 1) == 0)
          {
            if (objc_msgSend_count(v39, v48, v49) != 4)
              __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 183, "[components count] == 4");
            v51 = (void *)objc_msgSend_objectAtIndex_(v39, v50, 1);
            objc_msgSend_getCString_maxLength_encoding_(v51, v52, (uint64_t)v85, 100, 4);
            atoi(v85);
            v54 = (void *)objc_msgSend_objectAtIndex_(v39, v53, 2);
            objc_msgSend_getCString_maxLength_encoding_(v54, v55, (uint64_t)v85, 100, 4);
            atoi(v85);
            v57 = (void *)objc_msgSend_objectAtIndex_(v39, v56, 3);
            objc_msgSend_getCString_maxLength_encoding_(v57, v58, (uint64_t)v85, 100, 4);
            if (atoi(v85) >> 24)
              __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 193, "offset <= 0xFFFFFF");
            objc_msgSend_getCharacters_(v41, v59, (uint64_t)&v86);
            objc_msgSend_length(v41, v60, v61);
            v25 = v73;
            if (!CFBurstTrieAddUTF8String())
              __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 198, "CFBurstTrieAddUTF8String(trie, (UInt8*)utf16String, [word length] * sizeof(unichar), payload)");
          }
        }
        objc_autoreleasePoolPop(v29);
        ++v27;
      }
      while (v25 != v27);
      v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v62, (uint64_t)&v79, v84, 16);
    }
    while (v25);
  }
  v63 = *(_DWORD *)(v71 + 6);
  v64 = v63 - *(_DWORD *)(v71 + 2) + 24;
  __buf[0] = 1;
  __buf[1] = *(_WORD *)v71;
  v75 = 24;
  v76 = v64;
  v78 = 0;
  v77 = (LODWORD(v83.st_size) - v63 + v64);
  v65 = open(v6, 1537, 384);
  if (v65 < 0)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Cannot create %s\n");
    goto LABEL_54;
  }
  v66 = v65;
  v4 = v72;
  if (write(v65, __buf, 0x18uLL) != 24)
    __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 225, "numByteWritten == sizeof(ReadingLookupDictionaryHeader)");
  v67 = write(v66, v71 + 10, v83.st_size - 10);
  if (v67 != v83.st_size - 10)
    __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 227, "numByteWritten == statBuffer.st_size - sizeof(ReadingHeader)");
  if (!CFBurstTrieSerializeWithFileDescriptor())
    __assert_rtn("ReadingLookupDictionaryBuild", "BuildReadingLookupDictionary.mm", 228, "CFBurstTrieSerializeWithFileDescriptor(trie, outputFile, kCFBurstTrieReadOnly | kCFBurstTrieBitmapCompression | kCFBurstTrieSortByKey)");
  close(v66);
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Created reading lookup dictioanry at %s\n", v6);
  close(v70);
LABEL_40:
  objc_autoreleasePoolPop(v4);
  return 0;
}

uint64_t sub_20BA320BC(const char *a1)
{
  FILE **v2;

  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s --reading-list PATH --word-index PATH --output PATH\n", a1);
  fwrite("or\n", 3uLL, 1uLL, *v2);
  return fprintf(*v2, "%s --dump PATH\n", a1);
}

void sub_20BA32128()
{
  __assert_rtn("addListNode", "BurstTrie.cpp", 577, "listcount <= trie->reserved[ContainerSize]");
}

void sub_20BA32150()
{
  __assert_rtn("addListNodeRanked", "BurstTrie.cpp", 716, "listcount <= trie->reserved[ContainerSize]");
}

void sub_20BA32178()
{
  __assert_rtn("advanceMapCursorTrieList", "BurstTrie.cpp", 1854, "cursor->prfxlen <= head->restlen");
}

void sub_20BA321A0()
{
  __assert_rtn("burstTrieCreateCursorWithTrieLevelRef", "BurstTrie.cpp", 2633, "nullptr == trie->mapbase");
}

uint64_t AnalyticsIsEventUsed()
{
  return MEMORY[0x24BE1A1A8]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

uint64_t CEMCreateEmojiCharacterSet()
{
  return MEMORY[0x24BE1B1F8]();
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x24BE1B200]();
}

uint64_t CEMEmojiLocaleDataCreateEmojiTokensForString()
{
  return MEMORY[0x24BE1B210]();
}

uint64_t CEMEmojiLocaleDataEnableAdaptation()
{
  return MEMORY[0x24BE1B218]();
}

uint64_t CEMEmojiLocaleDataGetMecabraFlags()
{
  return MEMORY[0x24BE1B228]();
}

uint64_t CEMEmojiLocaleDataRecordEmojiEngagement()
{
  return MEMORY[0x24BE1B230]();
}

uint64_t CEMEmojiLocaleDataResetAdaptationDatabase()
{
  return MEMORY[0x24BE1B238]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x24BE1B258]();
}

uint64_t CEMStringContainsEmoji()
{
  return MEMORY[0x24BE1B278]();
}

uint64_t CEMStringIsSingleEmoji()
{
  return MEMORY[0x24BE1B280]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x24BDBB7A8]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x24BDBB7C0](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F8](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB810](allocator, capacity, theArray);
}

void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2)
{
  MEMORY[0x24BDBB818](theArray, idx1, idx2);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x24BDBB870](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x24BDBB878](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x24BDBB880](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x24BDBB898](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x24BDBB8A0](theArray, range.location, range.length, comparator, context);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x24BDBBA80](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x24BDBBA98](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x24BDBBAA8](bundleID);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBAC8](bundle);
}

uint64_t CFBurstTrieAddUTF8String()
{
  return MEMORY[0x24BDBBB00]();
}

uint64_t CFBurstTrieContainsUTF8String()
{
  return MEMORY[0x24BDBBB10]();
}

uint64_t CFBurstTrieCreate()
{
  return MEMORY[0x24BDBBB18]();
}

uint64_t CFBurstTrieCreateCursorForBytes()
{
  return MEMORY[0x24BDBBB20]();
}

uint64_t CFBurstTrieCreateFromMapBytes()
{
  return MEMORY[0x24BDBBB30]();
}

uint64_t CFBurstTrieCursorRelease()
{
  return MEMORY[0x24BDBBB48]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x24BDBBB60]();
}

uint64_t CFBurstTrieSerializeWithFileDescriptor()
{
  return MEMORY[0x24BDBBB70]();
}

uint64_t CFBurstTrieTraverseFromCursor()
{
  return MEMORY[0x24BDBBB78]();
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x24BDBBBE0](theSet, theRange.location, theRange.length);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x24BDBBBE8](theSet, theString);
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x24BDBBBF8](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x24BDBBC00](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x24BDBBC08](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x24BDBBC18](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x24BDBBC20](theSetIdentifier);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
  MEMORY[0x24BDBBC28](theSet);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x24BDBBC30](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x24BDBBC38](theSet, *(_QWORD *)&theChar);
}

void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x24BDBBC48](theSet, theString);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x24BDBBC50](theSet, theOtherSet);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x24BDBBC68]();
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x24BDBBC88](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range)
{
  MEMORY[0x24BDBBCC8](theData, range.location, range.length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x24BDBBD20](theData, length);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x24BDBBD40](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x24BDBBD60](allocator, formatter, at);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x24BDBBD88](formatter, formatString);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDE0](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x24BDBBE40](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x24BDBBE48](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE50](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x24BDBBE70](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x24BDBBEE0](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x24BDBBF48](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x24BDBBF78](locale);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x24BDBBF88]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x24BDBBF98](locale, key);
}

uint64_t CFLog()
{
  return MEMORY[0x24BDBBFA0]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x24BDBC040](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x24BDBC060]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x24BDBC070](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x24BDBC088](center, observer, name, object);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x24BDBC098](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x24BDBC138](number);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDBC1C0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1D8](allocator, xmlData, mutabilityOption, errorString);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1F0](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString)
{
  return MEMORY[0x24BDBC210](propertyList, stream, format, errorString);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x24BDBC218](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x24BDBC230](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC258](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x24BDBC3C0](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x24BDBC3D0](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x24BDBC3D8](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x24BDBC3E8](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x24BDBC3F8](theSet);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x24BDBC420](theSet);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x24BDBC4A8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x24BDBC4B0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x24BDBC4B8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x24BDBC4C0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4E0](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x24BDBC510](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x24BDBC518](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x24BDBC520](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC540](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC560](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC578](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x24BDBC580](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC588](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x24BDBC5B0](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x24BDBC5B8](theString, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x24BDBC5D0](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC5D8](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x24BDBC5E0](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x24BDBC618](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x24BDBC620](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x24BDBC628](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x24BDBC640](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x24BDBC650](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC660](length, *(_QWORD *)&encoding);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2;
  CFIndex v3;
  CFRange result;

  v2 = MEMORY[0x24BDBC680](theString, theIndex);
  result.length = v3;
  result.location = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x24BDBC6A8](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x24BDBC6B0](theString, suffix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
  MEMORY[0x24BDBC6B8](str, idx, insertedStr);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x24BDBC6C8](theString, locale);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x24BDBC6D0](theString, theForm);
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
  MEMORY[0x24BDBC6E0](theString, range.location, range.length, replacement);
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
  MEMORY[0x24BDBC6E8](theString, replacement);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x24BDBC6F8](tokenizer);
}

CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute)
{
  return (CFTypeRef)MEMORY[0x24BDBC708](tokenizer, attribute);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x24BDBC710](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x24BDBC718](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x24BDBC728](tokenizer, string, range.location, range.length);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x24BDBC730](string, range, transform, reverse);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
  MEMORY[0x24BDBC738](theString, trimString);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x24BDBC740](theString);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x24BDBC748](theString, locale);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x24BDBC790](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x24BDBC7A8](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC7F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x24BDBC808](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x24BDBC810](allocator, url);
}

Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
{
  return MEMORY[0x24BDBC818](alloc, url, resourceData, properties, desiredProperties, errorCode);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC828](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x24BDBC898](url, resolveAgainstBase, buffer, maxBufLen);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x24BDBC8A8](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x24BDBC8B0]();
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x24BDBC8C0](url, error);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x24BDBC8C8](url, key, propertyValue, error);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x24BDBC968](stream);
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x24BDBC988](alloc, fileURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x24BDBC9A8](stream);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x24BDBC9E0](stream, buffer, bufferLength);
}

uint64_t ChineseTokenizerAdvanceToNextToken()
{
  return MEMORY[0x24BED3C00]();
}

uint64_t ChineseTokenizerCreate()
{
  return MEMORY[0x24BED3C08]();
}

uint64_t ChineseTokenizerGetCurrentTokenRange()
{
  return MEMORY[0x24BED3C10]();
}

uint64_t ChineseTokenizerRelease()
{
  return MEMORY[0x24BED3C18]();
}

uint64_t ChineseTokenizerSetCustomWordCheckBlock()
{
  return MEMORY[0x24BED3C20]();
}

uint64_t ChineseTokenizerSetString()
{
  return MEMORY[0x24BED3C28]();
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x24BE5F7C0]();
}

uint64_t LMLanguageModelAdaptationIsEnabled()
{
  return MEMORY[0x24BE5EB10]();
}

uint64_t LMLanguageModelAddObserver()
{
  return MEMORY[0x24BE5EB18]();
}

uint64_t LMLanguageModelAddOrUpdateTokenWithAttributes()
{
  return MEMORY[0x24BE5EB20]();
}

uint64_t LMLanguageModelAddTokenForString()
{
  return MEMORY[0x24BE5EB28]();
}

uint64_t LMLanguageModelAddTransientVocabulary()
{
  return MEMORY[0x24BE5EB30]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x24BE5EB38]();
}

uint64_t LMLanguageModelCopyTokenAttributes()
{
  return MEMORY[0x24BE5EB48]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x24BE5EB50]();
}

uint64_t LMLanguageModelCreatePredictionEnumerator()
{
  return MEMORY[0x24BE5EB58]();
}

uint64_t LMLanguageModelCreateStringForTokenID()
{
  return MEMORY[0x24BE5EB60]();
}

uint64_t LMLanguageModelDecrementUsageCount()
{
  return MEMORY[0x24BE5EB68]();
}

uint64_t LMLanguageModelEnumerateDynamicTokensWithBlock()
{
  return MEMORY[0x24BE5EB78]();
}

uint64_t LMLanguageModelFlushDynamicData()
{
  return MEMORY[0x24BE5EB88]();
}

uint64_t LMLanguageModelGetDynamicTokenIDRange()
{
  return MEMORY[0x24BE5EB90]();
}

uint64_t LMLanguageModelGetLastOfflineAdaptationTime()
{
  return MEMORY[0x24BE5EB98]();
}

uint64_t LMLanguageModelGetOrder()
{
  return MEMORY[0x24BE5EBA0]();
}

uint64_t LMLanguageModelGetTestingParameters()
{
  return MEMORY[0x24BE5EBA8]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x24BE5EBB0]();
}

uint64_t LMLanguageModelGetUsageCount()
{
  return MEMORY[0x24BE5EBB8]();
}

uint64_t LMLanguageModelIncrementUsageCount()
{
  return MEMORY[0x24BE5EBC0]();
}

uint64_t LMLanguageModelIncrementUsageCountWithEffectiveTime()
{
  return MEMORY[0x24BE5EBC8]();
}

uint64_t LMLanguageModelJointProbability()
{
  return MEMORY[0x24BE5EBD8]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x24BE5EBE8]();
}

uint64_t LMLanguageModelRemoveObserver()
{
  return MEMORY[0x24BE5EBF8]();
}

uint64_t LMLanguageModelReset()
{
  return MEMORY[0x24BE5EC00]();
}

uint64_t LMLanguageModelResetDynamicData()
{
  return MEMORY[0x24BE5EC08]();
}

uint64_t LMLanguageModelSetParameterValue()
{
  return MEMORY[0x24BE5EC10]();
}

uint64_t LMLanguageModelTokenHasAttributes()
{
  return MEMORY[0x24BE5EC18]();
}

uint64_t LMLanguageModelTokenIDisUnknown()
{
  return MEMORY[0x24BE5EC20]();
}

uint64_t LMLanguageModelTokenSequenceIsBlocklisted()
{
  return MEMORY[0x24BE5EC28]();
}

uint64_t LMLexiconCreate()
{
  return MEMORY[0x24BE5EC30]();
}

uint64_t LMLexiconCursorFirstTokenID()
{
  return MEMORY[0x24BE5EC38]();
}

uint64_t LMLexiconCursorGetTraversedCharacters()
{
  return MEMORY[0x24BE5EC40]();
}

uint64_t LMLexiconCursorHasChildren()
{
  return MEMORY[0x24BE5EC48]();
}

uint64_t LMLexiconCursorHasEntries()
{
  return MEMORY[0x24BE5EC50]();
}

uint64_t LMLexiconCursorTraversedLength()
{
  return MEMORY[0x24BE5EC58]();
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters()
{
  return MEMORY[0x24BE5EC60]();
}

uint64_t LMLexiconGetRootCursor()
{
  return MEMORY[0x24BE5EC68]();
}

uint64_t LMLexiconRelease()
{
  return MEMORY[0x24BE5EC70]();
}

uint64_t LMLexiconResetCursors()
{
  return MEMORY[0x24BE5EC78]();
}

uint64_t LMPredictionEnumeratorAdvance()
{
  return MEMORY[0x24BE5EC80]();
}

uint64_t LMPredictionEnumeratorGetPrediction()
{
  return MEMORY[0x24BE5EC88]();
}

uint64_t LMPredictionEnumeratorRelease()
{
  return MEMORY[0x24BE5EC90]();
}

uint64_t LMVocabularyContainsLemma()
{
  return MEMORY[0x24BE5ECB0]();
}

uint64_t LMVocabularyContainsLemmaForCharacters()
{
  return MEMORY[0x24BE5ECB8]();
}

uint64_t LMVocabularyGetSharedVocabulary()
{
  return MEMORY[0x24BE5ECC0]();
}

uint64_t LXAnalyzerCandidateCopySurface()
{
  return MEMORY[0x24BE5EFE0]();
}

uint64_t LXAnalyzerCandidateEnumerateMorphemeLexiconEntriesAndLengths()
{
  return MEMORY[0x24BE5EFE8]();
}

uint64_t LXAnalyzerCandidateGetMorphemeCount()
{
  return MEMORY[0x24BE5EFF0]();
}

uint64_t LXAnalyzerCandidateGetNodeScore()
{
  return MEMORY[0x24BE5EFF8]();
}

uint64_t LXAnalyzerCandidateGetScore()
{
  return MEMORY[0x24BE5F000]();
}

uint64_t LXAnalyzerCreate()
{
  return MEMORY[0x24BE5F008]();
}

uint64_t LXAnalyzerEnumerateCandidatesWithLattice()
{
  return MEMORY[0x24BE5F010]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x24BE5F018]();
}

uint64_t LXCursorCopyFirstEntry()
{
  return MEMORY[0x24BE5F020]();
}

uint64_t LXCursorCopyTraversedCharacters()
{
  return MEMORY[0x24BE5F028]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x24BE5F030]();
}

uint64_t LXCursorCreateByAdvancingWithUTF16()
{
  return MEMORY[0x24BE5F038]();
}

uint64_t LXCursorEnumerateChildren()
{
  return MEMORY[0x24BE5F048]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x24BE5F050]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x24BE5F060]();
}

uint64_t LXCursorHash()
{
  return MEMORY[0x24BE5F068]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x24BE5F078]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x24BE5F080]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x24BE5F088]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x24BE5F090]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x24BE5F098]();
}

uint64_t LXLatticeAddNode()
{
  return MEMORY[0x24BE5F0B0]();
}

uint64_t LXLatticeCreateMutable()
{
  return MEMORY[0x24BE5F0B8]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x24BE5F0D0]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x24BE5F0D8]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x24BE5F0E0]();
}

uint64_t LXLexiconRepositoryCreateView()
{
  return MEMORY[0x24BE5F110]();
}

uint64_t LXVulgarWordUsageDatabaseCanAutocorrect()
{
  return MEMORY[0x24BE5F140]();
}

uint64_t LXVulgarWordUsageDatabaseCreate()
{
  return MEMORY[0x24BE5F148]();
}

uint64_t LXVulgarWordUsageDatabaseIncrementUsageCount()
{
  return MEMORY[0x24BE5F150]();
}

uint64_t LXVulgarWordUsageDatabasePerformMaintenance()
{
  return MEMORY[0x24BE5F158]();
}

uint64_t LXVulgarWordUsageDatabaseReset()
{
  return MEMORY[0x24BE5F160]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x24BDAC728](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x24BDBD0A8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x24BDBD0B0]();
}

uint64_t _CFStringTokenizerSetLocale()
{
  return MEMORY[0x24BDBD0C0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void language_modeling::v1::Prediction::~Prediction(language_modeling::v1::Prediction *this)
{
  MEMORY[0x24BE5ECC8](this);
}

uint64_t language_modeling::v1::LanguageModel::deallocateInternalBuffers(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x24BE5ECE8](this);
}

uint64_t language_modeling::v1::LanguageModel::init()
{
  return MEMORY[0x24BE5ECF0]();
}

uint64_t language_modeling::v1::LanguageModel::LanguageModel(language_modeling::v1::LanguageModel *this)
{
  return MEMORY[0x24BE5ED00](this);
}

void language_modeling::v1::LanguageModel::~LanguageModel(language_modeling::v1::LanguageModel *this)
{
  MEMORY[0x24BE5ED08](this);
}

uint64_t language_modeling::v1::LinguisticContext::push_back()
{
  return MEMORY[0x24BE5ED10]();
}

uint64_t language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  return MEMORY[0x24BE5ED28](this);
}

void language_modeling::v1::LinguisticContext::~LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  MEMORY[0x24BE5ED30](this);
}

void language_modeling::v1::LanguageModelSession::~LanguageModelSession(language_modeling::v1::LanguageModelSession *this)
{
  MEMORY[0x24BE5ED50](this);
}

uint64_t language_modeling::v1::Prediction::probability(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x24BE5ED98](this);
}

uint64_t language_modeling::v1::Prediction::exactPredictionString(language_modeling::v1::Prediction *this)
{
  return MEMORY[0x24BE5EDA0](this);
}

uint64_t language_modeling::v1::LanguageModel::makeSession()
{
  return MEMORY[0x24BE5EDB0]();
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus()
{
  return MEMORY[0x24BE5EDB8]();
}

{
  return MEMORY[0x24BE5EDC0]();
}

uint64_t language_modeling::v1::LanguageModelSession::predictions(language_modeling::v1::LanguageModelSession *this, const language_modeling::v1::LinguisticContext *a2)
{
  return MEMORY[0x24BE5EDD8](this, a2);
}

std::string::size_type std::string::find(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  return MEMORY[0x24BEDA9A8](this, __s, __pos, __n);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA10](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x24BEDABD8](__ns);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC60](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x24BEDAE58]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE78]();
}

{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE90]();
}

{
  return MEMORY[0x24BEDAEA8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF58]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF70]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x24BEDAFD8](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x24BEDAFE0](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x24BEDAFE8](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB308](a1, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x24BEDB378](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x24BEDB3A0]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
  MEMORY[0x24BEDB480](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  return (std::ios_base::Init *)MEMORY[0x24BEDB508](this);
}

void std::ios_base::Init::~Init(std::ios_base::Init *this)
{
  MEMORY[0x24BEDB510](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24C457F48();
}

void operator delete(void *__p)
{
  off_24C457F50(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24C457F58(__p, a2);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_24C457F60(__p, a2);
}

uint64_t operator delete()
{
  return off_24C457F68();
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_24C457F70(__sz);
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C457F78(__sz, a2);
}

uint64_t operator new[]()
{
  return off_24C457F80();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C457F88(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C457F90(__sz, a2);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_24C457F98(__sz, a2);
}

uint64_t operator new()
{
  return off_24C457FA0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x24BEDB900]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
  MEMORY[0x24BDACF10](termFunc, objAddr);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x24BDAD038](a1, *(_QWORD *)&a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x24BDAD310](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t cblas_saxpy_NEWLAPACK()
{
  return MEMORY[0x24BDB2BA0]();
}

uint64_t cblas_scopy_NEWLAPACK()
{
  return MEMORY[0x24BDB2BB0]();
}

uint64_t cblas_sdot_NEWLAPACK()
{
  return MEMORY[0x24BDB2BC0]();
}

uint64_t cblas_sgemm_NEWLAPACK()
{
  return MEMORY[0x24BDB2BD0]();
}

uint64_t cblas_sscal_NEWLAPACK()
{
  return MEMORY[0x24BDB2C20]();
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x24BEDF1A8](dest, destLen, source, sourceLen);
}

uLong compressBound(uLong sourceLen)
{
  return MEMORY[0x24BEDF1B8](sourceLen);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDB8](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

long double expm1(long double __x)
{
  long double result;

  MEMORY[0x24BDAE290](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

int flock(int a1, int a2)
{
  return MEMORY[0x24BDAE3B0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double frexp(long double __x, int *__e)
{
  long double result;

  MEMORY[0x24BDAE480](__e, __x);
  return result;
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x24BDAE548](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

int getopt_long(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return MEMORY[0x24BDAE6B0](*(_QWORD *)&a1, a2, a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

kern_return_t host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x24BDAE820](*(_QWORD *)&host_priv, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE838](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE840](a1, a2);
  return result;
}

size_t iconv(iconv_t a1, char **a2, size_t *a3, char **a4, size_t *a5)
{
  return MEMORY[0x24BEDBF18](a1, a2, a3, a4, a5);
}

int iconv_close(iconv_t a1)
{
  return MEMORY[0x24BEDBF20](a1);
}

iconv_t iconv_open(const char *a1, const char *a2)
{
  return (iconv_t)MEMORY[0x24BEDBF28](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAB0](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x24BDAEAB8](a1);
  return result;
}

float log1pf(float a1)
{
  float result;

  MEMORY[0x24BDAEAC8](a1);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAEB28](a1, a2);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x24BDAEB68]();
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAED00](a1, a2, *(_QWORD *)&a3);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAEFE0](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3F0](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

int openat_authenticated_np(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x24BDAF248](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x24BDAF410](log, ptr);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x24BDAF4D8]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF778](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF790](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x24BDAF7A0](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7C8](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x24BDAF860](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x24BDAF880](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x24BDAF888](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x24BDAF910](a1, a2);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x24BDAF928]();
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF930](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x24BDAF938](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF940](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF958](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x24BDAF960](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x24BDAF9A0](a1, *(_QWORD *)&a2, a3);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x24BDAFA10]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BDAFB38](__p, __ec);
}

int rmdir(const char *a1)
{
  return MEMORY[0x24BDAFBB0](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  return MEMORY[0x24BEDDF20](p);
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  return (sqlite3_backup *)MEMORY[0x24BEDDF28](pDest, zDestName, pSource, zSourceName);
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  return MEMORY[0x24BEDDF40](p, *(_QWORD *)&nPage);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF48](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x24BEDDF58](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x24BEDDF60](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE008](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x24BEDE010](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x24BEDE020](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE028](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE050](a1, *(_QWORD *)&iCol);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x24BEDE100](db);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x24BEDE118](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE140](pStmt);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x24BEDE180](a1);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return MEMORY[0x24BEDE1B8](filename, ppDb);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x24BEDE1C0](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x24BEDE1D0](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE1E0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE2A8](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x24BDAFF20](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF38](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x24BDB00F0](*(_QWORD *)&a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x24BDB0150](a1);
  return result;
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x24BEDBF38](*(_QWORD *)&c);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x24BEDBF50](*(_QWORD *)&c);
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x24BEDBF68](*(_QWORD *)&c, *(_QWORD *)&which);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x24BEDBF80](*(_QWORD *)&c, *(_QWORD *)&which);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x24BEDBFA8](*(_QWORD *)&c);
}

UBool u_isgraph(UChar32 c)
{
  return MEMORY[0x24BEDBFB0](*(_QWORD *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x24BEDBFD0](*(_QWORD *)&c);
}

UChar *__cdecl u_strFindFirst(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
{
  return (UChar *)MEMORY[0x24BEDBFE0](s, *(_QWORD *)&length, substring, *(_QWORD *)&subLength);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x24BEDC018](dst, src);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x24BEDC020](s);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x24BEDC038](*(_QWORD *)&c);
}

UChar32 u_toupper(UChar32 c)
{
  return MEMORY[0x24BEDC040](*(_QWORD *)&c);
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x24BEDC068](*(_QWORD *)&c);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x24BEDF298](dest, destLen, source, sourceLen);
}

uint64_t unum_close()
{
  return MEMORY[0x24BEDC1B8]();
}

uint64_t unum_formatInt64()
{
  return MEMORY[0x24BEDC1D8]();
}

uint64_t unum_open()
{
  return MEMORY[0x24BEDC208]();
}

uint64_t unum_parseInt64()
{
  return MEMORY[0x24BEDC220]();
}

uint64_t uscript_hasScript()
{
  return MEMORY[0x24BEDC278]();
}

uint64_t uset_close()
{
  return MEMORY[0x24BEDC2E8]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x24BEDC2F8]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x24BEDC310]();
}

uint64_t utrans_close()
{
  return MEMORY[0x24BEDC358]();
}

uint64_t utrans_openU()
{
  return MEMORY[0x24BEDC360]();
}

uint64_t utrans_transUChars()
{
  return MEMORY[0x24BEDC368]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0370](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0458](a1, a2, a3);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B30](a1, a2, a3);
}

void vvlog10f(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B40](a1, a2, a3);
}

void vvtanhf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3BA0](a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

