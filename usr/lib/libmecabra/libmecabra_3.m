void sub_20B928C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);
  _Unwind_Resume(exception_object);
}

void sub_20B928CCC(uint64_t a1, _WORD *a2, unint64_t a3)
{
  int **v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  void *__p;
  char *v34;
  unint64_t v35;

  v6 = *(int ***)(a1 + 40);
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v7)
  {
    if (*(_BYTE *)(a1 + 96))
      v8 = 1;
    else
      v8 = 4;
    sub_20B9289C8(v6, *(_QWORD **)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 1, v8, 2 * (*(_BYTE *)(a1 + 96) == 0));
    v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  v9 = 2 * v7 + 2;
  if (a2)
    v10 = a3;
  else
    v10 = 0;
  sub_20B9289C8(v6, *(_QWORD **)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), a2, v10, v9, 2);
  __p = 0;
  v34 = 0;
  v35 = 0;
  sub_20B87D570(&__p, 0x5BuLL);
  if (!*(_BYTE *)(a1 + 97))
  {
    v11 = v34;
    if ((unint64_t)v34 >= v35)
    {
      v13 = (char *)__p;
      v14 = v34 - (_BYTE *)__p;
      if (v34 - (_BYTE *)__p <= -3)
        sub_20B80CDD8();
      v15 = v14 >> 1;
      if (v35 - (unint64_t)__p <= (v14 >> 1) + 1)
        v16 = v15 + 1;
      else
        v16 = v35 - (_QWORD)__p;
      if (v35 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        v18 = (char *)sub_20B80FD48((uint64_t)&v35, v17);
        v13 = (char *)__p;
        v11 = v34;
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[2 * v15];
      v20 = &v18[2 * v17];
      *(_WORD *)v19 = 12306;
      v12 = v19 + 2;
      while (v11 != v13)
      {
        v21 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v19 - 1) = v21;
        v19 -= 2;
      }
      __p = v19;
      v34 = v12;
      v35 = (unint64_t)v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_WORD *)v34 = 12306;
      v12 = v11 + 2;
    }
    v34 = v12;
  }
  sub_20B8B17F4(*(_WORD **)(a1 + 72), *(_WORD **)(a1 + 80), (uint64_t)&__p);
  v22 = v34;
  if ((unint64_t)v34 >= v35)
  {
    v24 = (char *)__p;
    v25 = v34 - (_BYTE *)__p;
    if (v34 - (_BYTE *)__p <= -3)
      sub_20B80CDD8();
    v26 = v25 >> 1;
    if (v35 - (unint64_t)__p <= (v25 >> 1) + 1)
      v27 = v26 + 1;
    else
      v27 = v35 - (_QWORD)__p;
    if (v35 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
    {
      v29 = (char *)sub_20B80FD48((uint64_t)&v35, v28);
      v24 = (char *)__p;
      v22 = v34;
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[2 * v26];
    v31 = &v29[2 * v28];
    *(_WORD *)v30 = 32;
    v23 = v30 + 2;
    while (v22 != v24)
    {
      v32 = *((_WORD *)v22 - 1);
      v22 -= 2;
      *((_WORD *)v30 - 1) = v32;
      v30 -= 2;
    }
    __p = v30;
    v34 = v23;
    v35 = (unint64_t)v31;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_WORD *)v34 = 32;
    v23 = v22 + 2;
  }
  v34 = v23;
  sub_20B8B17F4(a2, &a2[a3], (uint64_t)&__p);
  sub_20B9289C8(v6, *(_QWORD **)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), __p, (v34 - (_BYTE *)__p) >> 1, 2 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 3, 2);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B928FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B928FC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v2 = (_QWORD *)(a1 + 72);
  v2[2] = 0;
  return sub_20B87ACC8(v2, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 1);
}

void sub_20B928FE4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

BOOL sub_20B928FFC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t i;
  int v4;
  uint64_t v5;

  if (a2 < 1)
  {
    return 1;
  }
  else
  {
    v2 = 0;
    for (i = 0; i != a2; v2 = i >= a2)
    {
      v4 = *(unsigned __int16 *)(a1 + 2 * i);
      if ((v4 - 12549) >= 0x25)
      {
        v5 = 0;
        while ((unsigned __int16)word_20BA4B1C4[v5] != v4)
        {
          if (++v5 == 5)
            return v2;
        }
        if (v5 == -1)
          break;
      }
      ++i;
    }
  }
  return v2;
}

uint64_t sub_20B929070()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CEA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CEA0))
  {
    qword_25472CE98 = (uint64_t)sub_20B9290E0();
    __cxa_guard_release(&qword_25472CEA0);
  }
  return qword_25472CE98;
}

void sub_20B9290C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CEA0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_20B9290E0()
{
  _QWORD *v0;
  const char *v1;
  const char *v2;
  const __CFString *v3;
  CFPropertyListRef v4;

  v0 = (_QWORD *)sub_20B9AE60C();
  v1 = (const char *)sub_20B9AE738(v0, 2, off_254729648[0], off_254729610[0], 0);
  if (v1[23] >= 0)
    v2 = v1;
  else
    v2 = *(const char **)v1;
  v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  v4 = sub_20B8D266C(v3);
  if (v3)
    CFRelease(v3);
  return v4;
}

void sub_20B92916C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B929184(const __CFArray *a1)
{
  uint64_t v2;
  const __CFDictionary *v3;
  CFIndex v4;
  const __CFAllocator *v5;
  const __CFString *ValueAtIndex;
  CFIndex v7;
  int CharacterAtIndex;
  uint64_t v9;
  const void *Value;
  CFStringRef v11;
  _BOOL8 v12;
  CFRange v14;

  v2 = sub_20B929070();
  if (!v2)
    return 0;
  v3 = (const __CFDictionary *)v2;
  if (CFArrayGetCount(a1) < 1)
    return 1;
  v4 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  do
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v4);
    v7 = CFStringGetLength(ValueAtIndex) - 1;
    CharacterAtIndex = CFStringGetCharacterAtIndex(ValueAtIndex, v7);
    v9 = 0;
    while ((unsigned __int16)word_20BA4B1C4[v9] != CharacterAtIndex)
    {
      if (++v9 == 5)
        goto LABEL_9;
    }
    if (v9 == -1)
    {
LABEL_9:
      Value = CFDictionaryGetValue(v3, ValueAtIndex);
      goto LABEL_11;
    }
    v14.location = 0;
    v14.length = v7;
    v11 = CFStringCreateWithSubstring(v5, ValueAtIndex, v14);
    Value = CFDictionaryGetValue(v3, v11);
    CFRelease(v11);
LABEL_11:
    v12 = Value != 0;
    if (!Value)
      break;
    CFArraySetValueAtIndex(a1, v4++, Value);
  }
  while (v4 < CFArrayGetCount(a1));
  return v12;
}

void sub_20B9292C0(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v6 = &a1[a2];
    v7 = a1;
    while (2)
    {
      for (i = 0; i != 5; ++i)
      {
        if (*v7 == (unsigned __int16)word_20BA4B1C4[i])
        {
          if (v7 != v6)
          {
            v9 = (char *)v7 - (char *)a1;
            if ((char *)v7 - (char *)a1 != -2)
            {
              v10 = 0;
              v11 = 0;
              v12 = a3 + 2;
              while (2)
              {
                v13 = v9 >> 1;
                v14 = (v9 >> 1) - v11 + 1;
                if ((unint64_t)v10 >= *v12)
                {
                  v15 = *a3;
                  v16 = v10 - *a3;
                  v17 = v16 + 1;
                  if ((unint64_t)(v16 + 1) >> 61)
                    sub_20B80CDD8();
                  v18 = *v12 - (_QWORD)v15;
                  if (v18 >> 2 > v17)
                    v17 = v18 >> 2;
                  v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v17;
                  if (v19)
                  {
                    v20 = (char *)sub_20B800BE8((uint64_t)(a3 + 2), v19);
                    v15 = *a3;
                    v10 = a3[1];
                  }
                  else
                  {
                    v20 = 0;
                  }
                  v21 = (uint64_t *)&v20[8 * v16];
                  *v21 = v14;
                  v22 = v21 + 1;
                  while (v10 != v15)
                  {
                    v23 = *--v10;
                    *--v21 = v23;
                  }
                  *a3 = v21;
                  a3[1] = v22;
                  a3[2] = (uint64_t *)&v20[8 * v19];
                  if (v15)
                    operator delete(v15);
                  v10 = v22;
                }
                else
                {
                  *v10++ = v14;
                }
                a3[1] = v10;
                v11 = v13 + 1;
                if (a2 > v13 + 1)
                {
                  v24 = &a1[v11];
LABEL_30:
                  v25 = 0;
                  while (*v24 != (unsigned __int16)word_20BA4B1C4[v25])
                  {
                    if (++v25 == 5)
                    {
                      if (++v24 != v6)
                        goto LABEL_30;
                      return;
                    }
                  }
                  if (v24 != v6)
                  {
                    v9 = (char *)v24 - (char *)a1;
                    if (v9 != -2)
                      continue;
                  }
                }
                break;
              }
            }
          }
          return;
        }
      }
      if (++v7 != v6)
        continue;
      break;
    }
  }
}

void sub_20B929480(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B9294A0(const __CFString *a1)
{
  unsigned __int16 *v2;
  unint64_t v3;
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  CFIndex *v6;
  CFIndex *v7;
  CFIndex v8;
  CFIndex v9;
  CFStringRef v10;
  CFStringRef v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15;
  CFIndex *v16;
  CFRange v17;

  sub_20B8D09C0(a1, __p);
  if ((v14 & 0x80u) == 0)
    v2 = (unsigned __int16 *)__p;
  else
    v2 = (unsigned __int16 *)__p[0];
  if ((v14 & 0x80u) == 0)
    v3 = v14;
  else
    v3 = (unint64_t)__p[1];
  sub_20B9292C0(v2, v3, (uint64_t **)&v15);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], ((char *)v16 - (_BYTE *)v15) >> 3, MEMORY[0x24BDBD690]);
  __p[0] = Mutable;
  v6 = (CFIndex *)v15;
  v7 = v16;
  if (v15 != v16)
  {
    v8 = 0;
    do
    {
      v9 = *v6;
      v17.location = v8;
      v17.length = *v6;
      v10 = CFStringCreateWithSubstring(v4, a1, v17);
      CFArrayAppendValue(Mutable, v10);
      if (v10)
        CFRelease(v10);
      v8 += v9;
      ++v6;
    }
    while (v6 != v7);
  }
  if ((sub_20B929184(Mutable) & 1) == 0)
  {
    v11 = 0;
    if (!Mutable)
      goto LABEL_19;
    goto LABEL_18;
  }
  v11 = CFStringCreateByCombiningStrings(v4, Mutable, &stru_24C4B3660);
  if (Mutable)
LABEL_18:
    CFRelease(Mutable);
LABEL_19:
  if (v15)
  {
    v16 = (CFIndex *)v15;
    operator delete(v15);
  }
  return v11;
}

void sub_20B9295F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  sub_20B8B035C((const void **)&a11, 0);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20B929658(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C4601F0;
  sub_20B92969C((uint64_t)a1);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B92969C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  v2 = a1 + 8;
  if (v1 != v3)
  {
    do
    {
      if (*v1)
        (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
      ++v1;
    }
    while (v1 != v3);
    v1 = *(_QWORD **)v2;
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  if (v1)
    operator delete(v1);
}

void sub_20B929714(_QWORD *a1)
{
  sub_20B929658(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B929738(_QWORD *a1, const __CFString *a2, int a3, char a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v10 = operator new();
  *(_QWORD *)v10 = &off_24C45F3B0;
  *(_QWORD *)(v10 + 8) = CFStringCreateCopy(0, a2);
  *(_DWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 20) = a4;
  *(_BYTE *)(v10 + 21) = a5;
  v11 = a1[3];
  v12 = (uint64_t *)a1[2];
  if ((unint64_t)v12 >= v11)
  {
    v14 = a1[1];
    v15 = ((uint64_t)v12 - v14) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      sub_20B929898();
    v16 = v11 - v14;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v18);
    else
      v19 = 0;
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v10;
    v13 = v20 + 1;
    v23 = (char *)a1[1];
    v22 = (char *)a1[2];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *--v20 = v24;
      }
      while (v22 != v23);
      v22 = (char *)a1[1];
    }
    a1[1] = v20;
    a1[2] = v13;
    a1[3] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v12 = v10;
    v13 = v12 + 1;
  }
  a1[2] = v13;
  return v10;
}

void sub_20B929874(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40CAE7B1C5);
  _Unwind_Resume(a1);
}

void sub_20B929898()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B9298AC(int a1, CFMutableDictionaryRef theDict, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v6;
  const void *v8;
  int v9;
  int v10;
  __CFString **v11;

  result = 0;
  if (a3 && (a4 & 1) == 0)
  {
    v6 = *(unsigned __int8 *)(a3 + 87);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a3 + 72);
    if (v6)
    {
      return 0;
    }
    else
    {
      v8 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionaryAddValue(theDict, CFSTR("predictionCandidateAccepted"), (const void *)*MEMORY[0x24BDBD270]);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
      result = 1;
      v10 = v9 - 67;
      v11 = &off_24C49C780;
      switch(v10)
      {
        case 0:
          v11 = &off_24C49C798;
          goto LABEL_14;
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 8:
        case 11:
        case 12:
          return result;
        case 4:
          v11 = &off_24C49C758;
          goto LABEL_14;
        case 7:
        case 9:
          v11 = &off_24C49C790;
          goto LABEL_14;
        case 10:
          goto LABEL_14;
        case 13:
          v11 = &off_24C49C788;
          goto LABEL_14;
        default:
          if (&off_24C49C780 != 88)
            return result;
          v11 = &off_24C49C768;
LABEL_14:
          CFDictionaryAddValue(theDict, *v11, v8);
          result = 1;
          break;
      }
    }
  }
  return result;
}

void sub_20B9299C0()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9299D4(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, char a8, double a9, int a10, int a11, const void *a12)
{
  uint64_t v20;

  v20 = operator new();
  sub_20B916250(v20, *(void **)a3, *(_QWORD *)(a3 + 8), *(void **)a2, *(_QWORD *)(a2 + 8), *(void **)a4, *(_QWORD *)(a4 + 8), a5, a6, a8, a7, a10, a11, **a1);
  (*(void (**)(uint64_t, double))(*(_QWORD *)v20 + 400))(v20, a9);
  *(double *)(v20 + 184) = a9;
  if (a12)
    sub_20B8CD320((const void **)(v20 + 232), a12);
  return v20;
}

void sub_20B929AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C4074548AAFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B929AE4(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, int a9, int a10, unsigned __int16 **a11, int a12, int a13, int a14, unsigned __int8 a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  BOOL v34;
  __int16 v35;
  __int16 v36;
  unsigned __int16 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unint64_t v52;
  unint64_t v53;
  __int16 v54;
  __int16 v55;
  unint64_t v56;
  void *__p;
  char *v60;
  char *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[3];

  v16 = 0;
  v64[0] = a3;
  v64[1] = a4;
  v63[0] = a5;
  v63[1] = a6;
  v62[0] = a7;
  v62[1] = a8;
  if (a5)
  {
    if (a7)
    {
      v16 = 0;
      __p = 0;
      v60 = 0;
      v61 = 0;
      if (a8 <= 0x20 && a6 <= 0x20)
      {
        v19 = a2;
        if (a8 && a6)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = a8 - 1;
          while (1)
          {
            v24 = v21;
            while (1)
            {
              v25 = v24 + 1;
              if (v23 == v24 || ((1 << v24) & a10) != 0)
                break;
              ++v24;
              if (a8 == v25)
              {
                v25 = -1;
                break;
              }
            }
            v26 = 0;
            while (a6 - v22 - 1 != v26 && ((1 << (v22 + v26)) & a9) == 0)
            {
              if (a6 - v22 == ++v26)
                goto LABEL_58;
            }
            v16 = 0;
            if (v25 == -1)
              break;
            v27 = v22 + v26;
            if (v22 + v26 == -2)
              break;
            v28 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)__p) >> 3);
            v29 = *a11;
            if (v28 >= a11[1] - *a11)
              goto LABEL_58;
            v16 = 0;
            if (v25 <= v21 || v27 < v22)
              break;
            v30 = v26 + 1;
            v55 = v26 + 1;
            v56 = v22 + v26;
            if (*(_BYTE *)(a2 + 56))
            {
              v52 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)__p) >> 3);
              v53 = v21;
              sub_20B8C8314(a2, v22 + a16);
              v32 = v31;
              if (sub_20B8C8314(a2, a16 + 1 + v22 + v26))
                v34 = v33 == 0;
              else
                v34 = 1;
              if (v34)
                v30 = 0;
              else
                v30 = v33 - v32;
              v29 = *a11;
              v20 = v60;
              v27 = v22 + v26;
              v28 = v52;
              v21 = v53;
            }
            v35 = a15;
            if (v21)
              v35 = 0;
            v36 = v35 - v21 + v25;
            v37 = v29[v28];
            if (v20 >= v61)
            {
              v54 = v36;
              v38 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)__p) >> 3);
              v39 = v38 + 1;
              if (v38 + 1 > 0x666666666666666)
                sub_20B8821D4();
              if (0x999999999999999ALL * ((v61 - (_BYTE *)__p) >> 3) > v39)
                v39 = 0x999999999999999ALL * ((v61 - (_BYTE *)__p) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((v61 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
                v40 = 0x666666666666666;
              else
                v40 = v39;
              if (v40)
                v41 = (char *)sub_20B882310((uint64_t)&v61, v40);
              else
                v41 = 0;
              v42 = &v41[40 * v38];
              *(_DWORD *)v42 = 3;
              *((_DWORD *)v42 + 5) = 0;
              *(_QWORD *)(v42 + 12) = 0;
              *(_QWORD *)(v42 + 4) = 0;
              *((_WORD *)v42 + 12) = v54;
              *((_WORD *)v42 + 13) = v30;
              *((_WORD *)v42 + 14) = v55;
              *((_WORD *)v42 + 15) = v37;
              *((_WORD *)v42 + 16) = v37;
              *((_WORD *)v42 + 17) = 0;
              v42[36] = 0;
              *(_WORD *)(v42 + 37) = 513;
              v42[39] = 0;
              v44 = (char *)__p;
              v43 = v60;
              v45 = v42;
              if (v60 == __p)
              {
                v19 = a2;
              }
              else
              {
                v19 = a2;
                do
                {
                  v46 = *(_OWORD *)(v43 - 40);
                  v47 = *(_OWORD *)(v43 - 24);
                  *((_QWORD *)v45 - 1) = *((_QWORD *)v43 - 1);
                  *(_OWORD *)(v45 - 24) = v47;
                  *(_OWORD *)(v45 - 40) = v46;
                  v45 -= 40;
                  v43 -= 40;
                }
                while (v43 != v44);
                v43 = v44;
              }
              v20 = v42 + 40;
              __p = v45;
              v60 = v42 + 40;
              v61 = &v41[40 * v40];
              if (v43)
              {
                v48 = v42 + 40;
                operator delete(v43);
                v20 = v48;
              }
              v27 = v56;
            }
            else
            {
              *(_DWORD *)v20 = 3;
              *(_QWORD *)(v20 + 12) = 0;
              *(_QWORD *)(v20 + 4) = 0;
              *((_DWORD *)v20 + 5) = 0;
              *((_WORD *)v20 + 12) = v36;
              *((_WORD *)v20 + 13) = v30;
              *((_WORD *)v20 + 14) = v55;
              *((_WORD *)v20 + 15) = v37;
              *((_WORD *)v20 + 16) = v37;
              *((_WORD *)v20 + 17) = 0;
              v20[36] = 0;
              *(_WORD *)(v20 + 37) = 513;
              v20[39] = 0;
              v20 += 40;
              v19 = a2;
            }
            v60 = v20;
            if (v25 < a8)
            {
              v22 = v27 + 1;
              v21 = v25;
              if (v27 + 1 < a6)
                continue;
            }
            goto LABEL_54;
          }
        }
        else
        {
LABEL_54:
          sub_20B8B2334(0);
          v49 = *a11;
          v50 = a11[1];
          if (*a11 == v50)
          {
LABEL_57:
            v16 = sub_20B9299D4(a1, (uint64_t)v64, (uint64_t)v62, (uint64_t)v63, a12, 0, (uint64_t)&__p, 0, 0.0, a13, a14, 0);
            *(_BYTE *)(v16 + 224) = 1;
            *(_QWORD *)(v16 + 160) = *(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 48);
          }
          else
          {
            while (qword_25472C9B0 > (unint64_t)*v49)
            {
              if (++v49 == v50)
                goto LABEL_57;
            }
LABEL_58:
            v16 = 0;
          }
        }
        if (__p)
        {
          v60 = (char *)__p;
          operator delete(__p);
        }
      }
    }
  }
  return v16;
}

void sub_20B929F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B929F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _WORD *v9;
  _WORD **v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD v29[2];
  uint64_t v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  void *__p[2];
  CFTypeRef cf[2];

  sub_20B8B2334(0);
  if (!a2)
    return a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (!v4)
    return 0;
  v5 = v4 - 1;
  do
  {
    v6 = v5;
    if (!v5)
      break;
    --v5;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 352))(a2, v6 - 1);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 344))(a2, v6);
  }
  while (!sub_20B8B252C((uint64_t)&qword_25472C9B0, v7, v8));
  v30 = a1;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)cf = 0u;
  v9 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
  v10 = (_WORD **)(a2 + 96);
  v11 = *(char *)(a2 + 119);
  v12 = (_WORD *)(a2 + 96);
  if (v11 < 0)
  {
    v12 = *v10;
    if (v6)
      goto LABEL_8;
LABEL_26:
    v13 = 0;
    if ((v11 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!v6)
    goto LABEL_26;
LABEL_8:
  v13 = 0;
  v14 = 1;
  do
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 568))(a2, v14 - 1);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, v14 - 1);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 320))(a2, v14 - 1);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 344))(a2, v14 - 1);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 352))(a2, v14 - 1);
    sub_20B8CD43C(&v30, v9, v15, v16, v12, v17, v18, v19);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 568))(a2, v14 - 1);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 320))(a2, v14 - 1);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 320))(a2, v14 - 1);
    v9 += v20;
    v12 += v21;
    ++v14;
    v13 += v22;
  }
  while (v6 + 1 != v14);
  v10 = (_WORD **)(a2 + 96);
  if ((*(_BYTE *)(a2 + 119) & 0x80) != 0)
LABEL_11:
    v10 = (_WORD **)*v10;
LABEL_12:
  if (v10)
    v23 = v13;
  else
    v23 = 0;
  v29[0] = v10;
  v29[1] = v23;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v25 = *(_DWORD *)(a2 + 220);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2);
  a2 = sub_20B8CD5F8((uint64_t)&v30, (uint64_t)v29, v24, v25, 0, v26, v27);
  if (cf[1])
    CFRelease(cf[1]);
  cf[1] = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v32[1])
  {
    *(void **)&v33 = v32[1];
    operator delete(v32[1]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  return a2;
}

void sub_20B92A264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B8CD6A0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B92A280(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t v36[2];
  void *__p;
  char v38;
  _OWORD v39[2];
  int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  void *v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v2 = a2;
  if (a2)
  {
    v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 48))(a2);
    if (v4)
    {
      v5 = v4;
      v42 = a1;
      *(_OWORD *)v43 = 0u;
      *(_OWORD *)v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v6 = (_WORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 544))(v2);
      v7 = v2 + 24;
      if (*((char *)v2 + 119) < 0)
        v7 = (_WORD *)*((_QWORD *)v2 + 12);
      if (*((char *)v2 + 87) >= 0)
        v8 = (uint64_t)(v2 + 16);
      else
        v8 = *((_QWORD *)v2 + 8);
      v9 = v5 - 1;
      if (v5 == 1)
      {
        v35 = 0;
      }
      else
      {
        v10 = 0;
        v35 = 0;
        do
        {
          v11 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 568))(v2, v10);
          v12 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 312))(v2, v10);
          v13 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 320))(v2, v10);
          v14 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 344))(v2, v10);
          v15 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 352))(v2, v10);
          sub_20B8CD43C(&v42, v6, v11, v12, v7, v13, v14, v15);
          v16 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 568))(v2, v10);
          v17 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 320))(v2, v10);
          v18 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 312))(v2, v10);
          v19 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 312))(v2, v10);
          v6 += v16;
          v7 += v17;
          v8 += 2 * v18;
          ++v10;
          v35 += v19;
        }
        while (v9 != v10);
      }
      v20 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 568))(v2, v9);
      v41 = (*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 320))(v2, v9) - 1;
      v21 = (*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 320))(v2, v9);
      memset(v39, 0, sizeof(v39));
      v40 = 1065353216;
      if (!v8)
        v21 = 0;
      v36[0] = v8;
      v36[1] = v21;
      sub_20B87B938(v36, 0, (uint64_t)v39, 0, &__p);
      if (v38 < 0)
        operator delete(__p);
      v22 = sub_20B891738(v39, (unint64_t *)&v41);
      if (v22)
      {
        v23 = v22[3];
        v24 = v41;
        v25 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 344))(v2, v9);
        v26 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 352))(v2, v9);
        sub_20B8CD43C(&v42, v6, v20 - 1, v23, v7, v24, v25, v26);
        v27 = v41;
        sub_20B84055C((uint64_t)v39);
        if (*((char *)v2 + 119) < 0)
          v28 = (_DWORD *)*((_QWORD *)v2 + 12);
        else
          v28 = v2 + 24;
        v29 = v27 + v35;
        if (!v28)
          v29 = 0;
        *(_QWORD *)&v39[0] = v28;
        *((_QWORD *)&v39[0] + 1) = v29;
        v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 112))(v2);
        v31 = v2[55];
        v32 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 96))(v2);
        v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 408))(v2);
        v2 = (_DWORD *)sub_20B8CD5F8((uint64_t)&v42, (uint64_t)v39, v30, v31, 0, v32, v33);
      }
      else
      {
        sub_20B84055C((uint64_t)v39);
        v2 = 0;
      }
      if (*((_QWORD *)&v47 + 1))
        CFRelease(*((CFTypeRef *)&v47 + 1));
      *((_QWORD *)&v47 + 1) = 0;
      if ((_QWORD)v46)
      {
        *((_QWORD *)&v46 + 1) = v46;
        operator delete((void *)v46);
      }
      if (v44[1])
      {
        *(void **)&v45 = v44[1];
        operator delete(v44[1]);
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_20B92A668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20B84055C((uint64_t)va);
  sub_20B8CD6A0((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_20B92A6A8(void *a1, unint64_t a2)
{
  unsigned __int16 *v4;
  void *__p[2];
  char v7;

  sub_20B92A708();
  sub_20B877ED0(__p, a1, a2);
  v4 = sub_20B92B1B4((unsigned __int16 *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4 != 0;
}

void sub_20B92A708()
{
  unsigned __int8 v0;
  uint64_t v1;
  void *__p[2];
  uint64_t v3;
  void *v4[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  void *__dst[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int16 v44;
  __int128 v45;
  uint64_t v46;
  __int16 v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  __int128 v51;
  uint64_t v52;
  __int16 v53;
  __int128 v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  uint64_t v61;
  __int16 v62;
  __int128 v63;
  uint64_t v64;
  __int16 v65;
  __int128 v66;
  uint64_t v67;
  __int16 v68;
  __int128 v69;
  uint64_t v70;
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  __int16 v74;
  __int128 v75;
  uint64_t v76;
  __int16 v77;
  __int128 v78;
  uint64_t v79;
  __int16 v80;
  __int128 v81;
  uint64_t v82;
  __int16 v83;
  __int128 v84;
  uint64_t v85;
  __int16 v86;
  __int128 v87;
  uint64_t v88;
  __int16 v89;
  __int128 v90;
  uint64_t v91;
  __int16 v92;
  __int128 v93;
  uint64_t v94;
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  __int16 v98;
  __int128 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25472B8D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472B8D0))
  {
    sub_20B87C9E0(__dst, (char *)L"今日");
    if (SHIBYTE(v41) < 0)
    {
      sub_20B88DD4C(&v42, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      v42 = *(_OWORD *)__dst;
      v43 = v41;
    }
    v44 = 0;
    sub_20B87C9E0(v38, (char *)L"明日");
    if (SHIBYTE(v39) < 0)
    {
      sub_20B88DD4C(&v45, v38[0], (unint64_t)v38[1]);
    }
    else
    {
      v45 = *(_OWORD *)v38;
      v46 = v39;
    }
    v47 = 1;
    sub_20B87C9E0(&v36, byte_20BA94C82);
    if (SHIBYTE(v37) < 0)
    {
      sub_20B88DD4C(&v48, (void *)v36, *((unint64_t *)&v36 + 1));
    }
    else
    {
      v48 = v36;
      v49 = v37;
    }
    v50 = 2;
    sub_20B87C9E0(v34, byte_20BA94C8A);
    if (SHIBYTE(v35) < 0)
    {
      sub_20B88DD4C(&v51, v34[0], (unint64_t)v34[1]);
    }
    else
    {
      v51 = *(_OWORD *)v34;
      v52 = v35;
    }
    v53 = 3;
    sub_20B87C9E0(&v32, asc_20BA94C94);
    if (SHIBYTE(v33) < 0)
    {
      sub_20B88DD4C(&v54, (void *)v32, *((unint64_t *)&v32 + 1));
    }
    else
    {
      v54 = v32;
      v55 = v33;
    }
    v56 = 4;
    sub_20B87C9E0(v30, byte_20BA94C9E);
    if (SHIBYTE(v31) < 0)
    {
      sub_20B88DD4C(&v57, v30[0], (unint64_t)v30[1]);
    }
    else
    {
      v57 = *(_OWORD *)v30;
      v58 = v31;
    }
    v59 = 4;
    sub_20B87C9E0(&v28, (char *)L"昨日");
    if (SHIBYTE(v29) < 0)
    {
      sub_20B88DD4C(&v60, (void *)v28, *((unint64_t *)&v28 + 1));
    }
    else
    {
      v60 = v28;
      v61 = v29;
    }
    v62 = 255;
    sub_20B87C9E0(v26, byte_20BA94CA8);
    if (SHIBYTE(v27) < 0)
    {
      sub_20B88DD4C(&v63, v26[0], (unint64_t)v26[1]);
    }
    else
    {
      v63 = *(_OWORD *)v26;
      v64 = v27;
    }
    v65 = 254;
    sub_20B87C9E0(&v24, byte_20BA94CB0);
    if (SHIBYTE(v25) < 0)
    {
      sub_20B88DD4C(&v66, (void *)v24, *((unint64_t *)&v24 + 1));
    }
    else
    {
      v66 = v24;
      v67 = v25;
    }
    v68 = 256;
    sub_20B87C9E0(v22, "eg\bg");
    if (SHIBYTE(v23) < 0)
    {
      sub_20B88DD4C(&v69, v22[0], (unint64_t)v22[1]);
    }
    else
    {
      v69 = *(_OWORD *)v22;
      v70 = v23;
    }
    v71 = 257;
    sub_20B87C9E0(&v20, byte_20BA94CBC);
    if (SHIBYTE(v21) < 0)
    {
      sub_20B88DD4C(&v72, (void *)v20, *((unint64_t *)&v20 + 1));
    }
    else
    {
      v72 = v20;
      v73 = v21;
    }
    v74 = 258;
    sub_20B87C9E0(v18, "HQ\bg");
    if (SHIBYTE(v19) < 0)
    {
      sub_20B88DD4C(&v75, v18[0], (unint64_t)v18[1]);
    }
    else
    {
      v75 = *(_OWORD *)v18;
      v76 = v19;
    }
    v77 = 511;
    sub_20B87C9E0(&v16, aHq);
    if (SHIBYTE(v17) < 0)
    {
      sub_20B88DD4C(&v78, (void *)v16, *((unint64_t *)&v16 + 1));
    }
    else
    {
      v78 = v16;
      v79 = v17;
    }
    v80 = 510;
    sub_20B87C9E0(v14, byte_20BA94CD2);
    if (SHIBYTE(v15) < 0)
    {
      sub_20B88DD4C(&v81, v14[0], (unint64_t)v14[1]);
    }
    else
    {
      v81 = *(_OWORD *)v14;
      v82 = v15;
    }
    v83 = 512;
    sub_20B87C9E0(v12, "egt^");
    if (SHIBYTE(v13) < 0)
    {
      sub_20B88DD4C(&v84, v12[0], (unint64_t)v12[1]);
    }
    else
    {
      v84 = *(_OWORD *)v12;
      v85 = v13;
    }
    v86 = 513;
    sub_20B87C9E0(v10, byte_20BA94CDE);
    if (SHIBYTE(v11) < 0)
    {
      sub_20B88DD4C(&v87, v10[0], (unint64_t)v10[1]);
    }
    else
    {
      v87 = *(_OWORD *)v10;
      v88 = v11;
    }
    v89 = 514;
    sub_20B87C9E0(v8, byte_20BA94CE6);
    if (SHIBYTE(v9) < 0)
    {
      sub_20B88DD4C(&v90, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      v90 = *(_OWORD *)v8;
      v91 = v9;
    }
    v92 = 767;
    sub_20B87C9E0(v6, "(ft^");
    if (SHIBYTE(v7) < 0)
    {
      sub_20B88DD4C(&v93, v6[0], (unint64_t)v6[1]);
    }
    else
    {
      v93 = *(_OWORD *)v6;
      v94 = v7;
    }
    v95 = 767;
    sub_20B87C9E0(v4, byte_20BA94CF2);
    if (SHIBYTE(v5) < 0)
    {
      sub_20B88DD4C(&v96, v4[0], (unint64_t)v4[1]);
    }
    else
    {
      v96 = *(_OWORD *)v4;
      v97 = v5;
    }
    v98 = 766;
    sub_20B87C9E0(__p, "HQ");
    if (SHIBYTE(v3) < 0)
    {
      sub_20B88DD4C(&v99, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v99 = *(_OWORD *)__p;
      v100 = v3;
    }
    v101 = 765;
    sub_20B92CAF8((uint64_t *)&v42, 20);
    v1 = 80;
    do
    {
      if (SHIBYTE(__dst[v1 + 1]) < 0)
        operator delete(__dst[v1 - 1]);
      v1 -= 4;
    }
    while (v1 * 8);
    if (SHIBYTE(v3) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v5) < 0)
      operator delete(v4[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[0]);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)v16);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(__dst[0]);
    __cxa_atexit((void (*)(void *))sub_20B92CFEC, &xmmword_25472CEA8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B8D0);
  }
}

void sub_20B92AEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  char a91;
  char *v91;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  if (a80 < 0)
    operator delete(a79);
  if (a82 < 0)
    operator delete(a81);
  if (a84 < 0)
    operator delete(a83);
  if (a86 < 0)
    operator delete(a85);
  if (a88 < 0)
    operator delete(a87);
  if (a90 < 0)
    operator delete(a89);
  for (; v91 != &a91; v91 -= 32)
  {
    if (*(v91 - 9) < 0)
      operator delete(*((void **)v91 - 4));
  }
  __cxa_guard_abort(&qword_25472B8D0);
  _Unwind_Resume(a1);
}

void sub_20B92B1A0()
{
  JUMPOUT(0x20B92B0D4);
}

void sub_20B92B1AC()
{
  JUMPOUT(0x20B92B114);
}

unsigned __int16 *sub_20B92B1B4(unsigned __int16 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 **v8;
  unsigned __int16 *i;
  unint64_t v10;

  v2 = sub_20B89ACFC((uint64_t)&qword_25472CEC0, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_25472CEA8 + 1);
  if (!*((_QWORD *)&xmmword_25472CEA8 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472CEA8 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_25472CEA8 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_25472CEA8 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_25472CEA8 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int16 ***)(xmmword_25472CEA8 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int16 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v4 == v10)
    {
      if (sub_20B89AD3C((uint64_t)&dword_25472CEC8, i + 8, a1))
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

__CFArray *sub_20B92B2C4(void *a1, const char *a2, uint64_t a3)
{
  __CFArray *Mutable;
  unsigned __int8 v6;
  unsigned __int8 v7;
  const char *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t *v15;
  const char *v16;
  uint64_t v17;
  unsigned __int8 v18;
  const char *v19;
  const char *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const void *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const void *v46;
  const char *v47;
  const char *v48;
  const void *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;
  const void *v54;
  const char *v55;
  const void *v56;
  const char *v57;
  const char *v58;
  const void *v59;
  const char *v60;
  const char *v61;
  const void *v62;
  const char *v63;
  const char *v64;
  const void *v65;
  const char *v66;
  const char *v67;
  const void *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  const void *v73;
  const char *v74;
  const char *v75;
  const void *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const void *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const void *v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  void *__p[2];
  char v92;

  Mutable = (__CFArray *)a2;
  v6 = atomic_load((unsigned __int8 *)&qword_25472B8E0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472B8E0))
  {
    qword_25472B8D8 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x24BDBCEA0], a2, (uint64_t)CFSTR("ja_JP"));
    __cxa_guard_release(&qword_25472B8E0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472B8F0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472B8F0))
  {
    qword_25472B8E8 = objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x24BDBCEA0], a2, (uint64_t)CFSTR("en_US"));
    __cxa_guard_release(&qword_25472B8F0);
  }
  if (qword_25472B930 != -1)
    dispatch_once(&qword_25472B930, &unk_24C46CDF0);
  objc_msgSend_setYear_((void *)qword_25472B8F8, a2, 0x7FFFFFFFFFFFFFFFLL);
  objc_msgSend_setMonth_((void *)qword_25472B8F8, v8, 0x7FFFFFFFFFFFFFFFLL);
  objc_msgSend_setDay_((void *)qword_25472B8F8, v9, 0x7FFFFFFFFFFFFFFFLL);
  if (Mutable)
  {
    v10 = (void *)qword_25472B8F8;
    sub_20B92A708();
    sub_20B877ED0(__p, a1, (unint64_t)Mutable);
    v13 = sub_20B92B1B4((unsigned __int16 *)__p);
    if (v92 < 0)
      operator delete(__p[0]);
    if (v13)
    {
      v12 = *((char *)v13 + 40);
      v14 = *((unsigned __int8 *)v13 + 41);
      if (v14 == 2)
      {
        objc_msgSend_setYear_(v10, v11, v12);
      }
      else if (v14 == 1)
      {
        objc_msgSend_setMonth_(v10, v11, v12);
      }
      else if (!*((_BYTE *)v13 + 41))
      {
        objc_msgSend_setDay_(v10, v11, v12);
      }
    }
    v15 = (uint64_t *)MEMORY[0x24BDBCA18];
    if (!a3)
    {
      if (sub_20B8D150C("MECABRA_TEST"))
      {
        v18 = atomic_load((unsigned __int8 *)&qword_25472B940);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25472B940))
        {
          qword_25472B938 = (uint64_t)objc_alloc_init(MEMORY[0x24BDBCE68]);
          __cxa_guard_release(&qword_25472B940);
        }
        objc_msgSend_setYear_((void *)qword_25472B938, v16, 2014);
        objc_msgSend_setMonth_((void *)qword_25472B938, v19, 5);
        objc_msgSend_setDay_((void *)qword_25472B938, v20, 30);
        v22 = (void *)objc_msgSend_calendarWithIdentifier_(MEMORY[0x24BDBCE48], v21, *v15);
        v24 = objc_msgSend_dateFromComponents_(v22, v23, qword_25472B938);
      }
      else
      {
        v24 = objc_msgSend_date(MEMORY[0x24BDBCE60], v16, v17);
      }
      a3 = v24;
    }
    if (objc_msgSend_day((void *)qword_25472B8F8, v11, v12) == 0x7FFFFFFFFFFFFFFFLL
      && objc_msgSend_month((void *)qword_25472B8F8, v25, v26) == 0x7FFFFFFFFFFFFFFFLL
      && objc_msgSend_year((void *)qword_25472B8F8, v27, v28) == 0x7FFFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 6, MEMORY[0x24BDBD690]);
    v30 = (void *)objc_msgSend_calendarWithIdentifier_(MEMORY[0x24BDBCE48], v29, *v15);
    v32 = objc_msgSend_dateByAddingComponents_toDate_options_(v30, v31, qword_25472B8F8, a3, 0);
    if (objc_msgSend_day((void *)qword_25472B8F8, v33, v34) != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_setCalendar_((void *)qword_25472B900, v35, qword_25472B908);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v57, (uint64_t)CFSTR("M/d"));
      v59 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v58, v32);
      CFArrayAppendValue(Mutable, v59);
      objc_msgSend_setDateStyle_((void *)qword_25472B900, v60, 1);
      v62 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v61, v32);
      CFArrayAppendValue(Mutable, v62);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v63, (uint64_t)CFSTR("M月d日(E)"));
      v65 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v64, v32);
      CFArrayAppendValue(Mutable, v65);
      objc_msgSend_setDateStyle_((void *)qword_25472B900, v66, 3);
      v68 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v67, v32);
      CFArrayAppendValue(Mutable, v68);
      objc_msgSend_setCalendar_((void *)qword_25472B900, v69, qword_25472B910);
      objc_msgSend_setDateStyle_((void *)qword_25472B900, v70, 3);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v71, (uint64_t)CFSTR("Gy年M月d日"));
      v73 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v72, v32);
      CFArrayAppendValue(Mutable, v73);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v74, (uint64_t)CFSTR("GGGGGyy/MM/dd"));
      v76 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v75, v32);
      CFArrayAppendValue(Mutable, v76);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v77, (uint64_t)CFSTR("EEEE"));
      v56 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v78, v32);
      goto LABEL_32;
    }
    if (objc_msgSend_month((void *)qword_25472B8F8, v35, v36) != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_setCalendar_((void *)qword_25472B900, v37, qword_25472B908);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v79, (uint64_t)CFSTR("M月"));
      v81 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v80, v32);
      CFArrayAppendValue(Mutable, v81);
      objc_msgSend_setLocale_((void *)qword_25472B900, v82, qword_25472B8E8);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v83, (uint64_t)CFSTR("MMMM"));
      v85 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v84, v32);
      CFArrayAppendValue(Mutable, v85);
      objc_msgSend_setLocale_((void *)qword_25472B900, v86, qword_25472B8D8);
      v88 = objc_msgSend_component_fromDate_((void *)qword_25472B908, v87, 8, v32);
      v56 = (const void *)objc_msgSend_objectAtIndex_((void *)qword_25472B918, v89, v88 - 1);
      goto LABEL_32;
    }
    if (objc_msgSend_year((void *)qword_25472B8F8, v37, v38) != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_setCalendar_((void *)qword_25472B900, v39, qword_25472B908);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v40, (uint64_t)CFSTR("y年"));
      v42 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v41, v32);
      CFArrayAppendValue(Mutable, v42);
      objc_msgSend_setCalendar_((void *)qword_25472B900, v43, qword_25472B910);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v44, (uint64_t)CFSTR("Gy年"));
      v46 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v45, v32);
      CFArrayAppendValue(Mutable, v46);
      objc_msgSend_setDateFormat_((void *)qword_25472B900, v47, (uint64_t)CFSTR("GGGGGy"));
      v49 = (const void *)objc_msgSend_stringFromDate_((void *)qword_25472B900, v48, v32);
      CFArrayAppendValue(Mutable, v49);
      v51 = objc_msgSend_component_fromDate_((void *)qword_25472B908, v50, 4, v32);
      if (v51 >= 1)
      {
        v53 = (v51 + 8) % 0xCuLL;
        v54 = (const void *)objc_msgSend_objectAtIndexedSubscript_((void *)qword_25472B920, v52, v53);
        CFArrayAppendValue(Mutable, v54);
        v56 = (const void *)objc_msgSend_objectAtIndexedSubscript_((void *)qword_25472B928, v55, v53);
LABEL_32:
        CFArrayAppendValue(Mutable, v56);
      }
    }
  }
  return Mutable;
}

void sub_20B92B898(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B940);
  _Unwind_Resume(a1);
}

void *sub_20B92B8D0()
{
  const char *v0;
  const char *v1;
  const char *v2;
  const char *v3;
  const char *v4;
  void *result;

  qword_25472B8F8 = (uint64_t)objc_alloc_init(MEMORY[0x24BDBCE68]);
  qword_25472B908 = (uint64_t)(id)objc_msgSend_calendarWithIdentifier_(MEMORY[0x24BDBCE48], v0, *MEMORY[0x24BDBCA18]);
  qword_25472B910 = (uint64_t)(id)objc_msgSend_calendarWithIdentifier_(MEMORY[0x24BDBCE48], v1, *MEMORY[0x24BDBCA58]);
  qword_25472B900 = (uint64_t)objc_alloc_init(MEMORY[0x24BDD1500]);
  objc_msgSend_setLocale_((void *)qword_25472B900, v2, qword_25472B8D8);
  objc_msgSend_setFormatterBehavior_((void *)qword_25472B900, v3, 1040);
  objc_msgSend_setTimeStyle_((void *)qword_25472B900, v4, 0);
  qword_25472B918 = &unk_24C4B8E20;
  qword_25472B920 = &unk_24C4B8E38;
  result = &unk_24C4B8E50;
  qword_25472B928 = (uint64_t)result;
  return result;
}

void sub_20B92B99C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  _WORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  __int16 *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v32;
  __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  __int16 *v40;
  __int16 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int16 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int16 v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int16 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int16 v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  __int16 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int16 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __int16 v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  __int16 v124;
  __int16 v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  BOOL v132;
  BOOL v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  __int16 v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  __int16 v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  __int16 *v163;
  __int16 v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  __int16 v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  __int16 v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  __int16 v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  __int16 v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  __int16 v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int16 v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  __int16 v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  __int16 v245;
  int v246;
  __int16 v247;
  __int16 v248;
  char *__p;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 - 2 <= 2)
  {
    v5 = *(_WORD **)a1;
    if (v4 == 4)
      v6 = 2;
    else
      v6 = 1;
    __p = 0;
    v258 = 0;
    if (v4 > 2)
    {
      if (a2)
        v8 = 58;
      else
        v8 = -230;
      v246 = a2;
      v247 = v8;
      v7 = 2;
      v9 = v6;
      do
      {
        if (v4 - v9 == 2)
          v10 = 100;
        else
          v10 = 10;
        if (v9 == v4 - 2 && a3 / v10 <= 24 && a3 % v10 <= 59)
        {
          v11 = __p;
          v12 = v258;
          v252 = __p;
          if (v4 == 4)
          {
            if (__p >= v258)
            {
              if ((unint64_t)(v258 - __p) <= 1)
                v14 = 1;
              else
                v14 = v258 - __p;
              if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL)
                v15 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v15 = v14;
              v17 = (char *)sub_20B80FD48((uint64_t)&v258, v15);
              v18 = __p;
              v19 = __p;
              *(_WORD *)v17 = *v5;
              v11 = v17 + 2;
              v20 = v17;
              while (v19 != __p)
              {
                v21 = *((_WORD *)v19 - 1);
                v19 -= 2;
                *((_WORD *)v20 - 1) = v21;
                v20 -= 2;
              }
              v12 = &v17[2 * v16];
              __p = v20;
              v258 = v12;
              if (v18)
              {
                operator delete(v18);
                v12 = v258;
              }
            }
            else
            {
              *(_WORD *)__p = *v5;
              v11 = __p + 2;
            }
            v252 = v11;
            v13 = 1;
          }
          else
          {
            v13 = 0;
          }
          if (v11 >= v12)
          {
            v23 = __p;
            v24 = v11 - __p;
            if (v11 - __p <= -3)
              goto LABEL_422;
            v25 = v24 >> 1;
            v26 = v12 - __p;
            if (v26 <= (v24 >> 1) + 1)
              v27 = v25 + 1;
            else
              v27 = v26;
            if (v26 >= 0x7FFFFFFFFFFFFFFELL)
              v28 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            if (v28)
            {
              v29 = (char *)sub_20B80FD48((uint64_t)&v258, v28);
              v23 = __p;
              v11 = v252;
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[2 * v25];
            *(_WORD *)v30 = v5[v13];
            v22 = (__int16 *)(v30 + 2);
            while (v11 != v23)
            {
              v31 = *((_WORD *)v11 - 1);
              v11 -= 2;
              *((_WORD *)v30 - 1) = v31;
              v30 -= 2;
            }
            v12 = &v29[2 * v28];
            __p = v30;
            v258 = v12;
            if (v23)
            {
              operator delete(v23);
              v12 = v258;
            }
          }
          else
          {
            *(_WORD *)v11 = v5[v13];
            v22 = (__int16 *)(v11 + 2);
          }
          if (v22 >= (__int16 *)v12)
          {
            v33 = (__int16 *)__p;
            v34 = (char *)v22 - __p;
            if ((char *)v22 - __p <= -3)
              sub_20B80CDD8();
            v35 = v34 >> 1;
            v36 = v12 - __p;
            if (v36 <= (v34 >> 1) + 1)
              v37 = v35 + 1;
            else
              v37 = v36;
            if (v36 >= 0x7FFFFFFFFFFFFFFELL)
              v38 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
            {
              v39 = (char *)sub_20B80FD48((uint64_t)&v258, v38);
              v33 = (__int16 *)__p;
            }
            else
            {
              v39 = 0;
            }
            v40 = (__int16 *)&v39[2 * v35];
            *v40 = v247;
            v32 = (char *)(v40 + 1);
            while (v22 != v33)
            {
              v41 = *--v22;
              *--v40 = v41;
            }
            v12 = &v39[2 * v38];
            __p = (char *)v40;
            v258 = v12;
            if (v33)
            {
              operator delete(v33);
              v12 = v258;
            }
          }
          else
          {
            *v22 = v247;
            v32 = (char *)(v22 + 1);
          }
          v42 = v13 + 1;
          if (v32 >= v12)
          {
            v44 = __p;
            v45 = v32 - __p;
            if (v32 - __p < -2)
              goto LABEL_422;
            v46 = v45 >> 1;
            v47 = v12 - __p;
            if (v47 <= (v45 >> 1) + 1)
              v48 = v46 + 1;
            else
              v48 = v47;
            if (v47 >= 0x7FFFFFFFFFFFFFFELL)
              v49 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v49 = v48;
            if (v49)
            {
              v50 = (char *)sub_20B80FD48((uint64_t)&v258, v49);
              v44 = __p;
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[2 * v46];
            *(_WORD *)v51 = v5[v42];
            v43 = v51 + 2;
            while (v32 != v44)
            {
              v52 = *((_WORD *)v32 - 1);
              v32 -= 2;
              *((_WORD *)v51 - 1) = v52;
              v51 -= 2;
            }
            v12 = &v50[2 * v49];
            __p = v51;
            v258 = v12;
            if (v44)
            {
              operator delete(v44);
              v12 = v258;
            }
          }
          else
          {
            *(_WORD *)v32 = v5[v42];
            v43 = v32 + 2;
          }
          v53 = v13 | 2;
          if (v43 >= v12)
          {
            v54 = __p;
            v55 = v43 - __p;
            if (v43 - __p < -2)
              goto LABEL_422;
            v56 = v55 >> 1;
            v57 = v12 - __p;
            if (v57 <= (v55 >> 1) + 1)
              v58 = v56 + 1;
            else
              v58 = v57;
            if (v57 >= 0x7FFFFFFFFFFFFFFELL)
              v59 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)sub_20B80FD48((uint64_t)&v258, v59);
              v54 = __p;
            }
            else
            {
              v60 = 0;
            }
            v61 = &v60[2 * v56];
            *(_WORD *)v61 = v5[v53];
            while (v43 != v54)
            {
              v62 = *((_WORD *)v43 - 1);
              v43 -= 2;
              *((_WORD *)v61 - 1) = v62;
              v61 -= 2;
            }
            __p = v61;
            v258 = &v60[2 * v59];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *(_WORD *)v43 = v5[v53];
          }
          (*(void (**)(void))(a4 + 16))();
          v63 = __p;
          v64 = v258;
          v253 = __p;
          if (v4 == 4)
          {
            if (__p >= v258)
            {
              if ((unint64_t)(v258 - __p) <= 1)
                v66 = 1;
              else
                v66 = v258 - __p;
              if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL)
                v67 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v67 = v66;
              v69 = (char *)sub_20B80FD48((uint64_t)&v258, v67);
              v70 = __p;
              v71 = __p;
              *(_WORD *)v69 = *v5;
              v63 = v69 + 2;
              v72 = v69;
              while (v71 != __p)
              {
                v73 = *((_WORD *)v71 - 1);
                v71 -= 2;
                *((_WORD *)v72 - 1) = v73;
                v72 -= 2;
              }
              v64 = &v69[2 * v68];
              __p = v72;
              v258 = v64;
              if (v70)
              {
                operator delete(v70);
                v64 = v258;
              }
            }
            else
            {
              *(_WORD *)__p = *v5;
              v63 = __p + 2;
            }
            v253 = v63;
            v65 = 1;
          }
          else
          {
            v65 = 0;
          }
          if (v63 >= v64)
          {
            v75 = __p;
            v76 = v63 - __p;
            if (v63 - __p < -2)
              goto LABEL_422;
            v77 = v76 >> 1;
            v78 = v64 - __p;
            if (v78 <= (v76 >> 1) + 1)
              v79 = v77 + 1;
            else
              v79 = v78;
            if (v78 >= 0x7FFFFFFFFFFFFFFELL)
              v80 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v80 = v79;
            if (v80)
            {
              v81 = (char *)sub_20B80FD48((uint64_t)&v258, v80);
              v75 = __p;
              v63 = v253;
            }
            else
            {
              v81 = 0;
            }
            v82 = &v81[2 * v77];
            *(_WORD *)v82 = v5[v65];
            v74 = v82 + 2;
            while (v63 != v75)
            {
              v83 = *((_WORD *)v63 - 1);
              v63 -= 2;
              *((_WORD *)v82 - 1) = v83;
              v82 -= 2;
            }
            v64 = &v81[2 * v80];
            __p = v82;
            v258 = v64;
            if (v75)
            {
              operator delete(v75);
              v64 = v258;
            }
          }
          else
          {
            *(_WORD *)v63 = v5[v65];
            v74 = v63 + 2;
          }
          if (v74 >= v64)
          {
            v85 = __p;
            v86 = v74 - __p;
            if (v74 - __p <= -3)
              sub_20B80CDD8();
            v87 = v86 >> 1;
            v88 = v64 - __p;
            if (v88 <= (v86 >> 1) + 1)
              v89 = v87 + 1;
            else
              v89 = v88;
            if (v88 >= 0x7FFFFFFFFFFFFFFELL)
              v90 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v90 = v89;
            if (v90)
            {
              v91 = (char *)sub_20B80FD48((uint64_t)&v258, v90);
              v85 = __p;
            }
            else
            {
              v91 = 0;
            }
            v92 = &v91[2 * v87];
            *(_WORD *)v92 = 26178;
            v84 = v92 + 2;
            while (v74 != v85)
            {
              v93 = *((_WORD *)v74 - 1);
              v74 -= 2;
              *((_WORD *)v92 - 1) = v93;
              v92 -= 2;
            }
            v64 = &v91[2 * v90];
            __p = v92;
            v258 = v64;
            if (v85)
            {
              operator delete(v85);
              v64 = v258;
            }
          }
          else
          {
            *(_WORD *)v74 = 26178;
            v84 = v74 + 2;
          }
          v94 = v65 + 1;
          if (v84 >= v64)
          {
            v96 = __p;
            v97 = v84 - __p;
            if (v84 - __p < -2)
              goto LABEL_422;
            v98 = v97 >> 1;
            v99 = v64 - __p;
            if (v99 <= (v97 >> 1) + 1)
              v100 = v98 + 1;
            else
              v100 = v99;
            if (v99 >= 0x7FFFFFFFFFFFFFFELL)
              v101 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v101 = v100;
            if (v101)
            {
              v102 = (char *)sub_20B80FD48((uint64_t)&v258, v101);
              v96 = __p;
            }
            else
            {
              v102 = 0;
            }
            v103 = &v102[2 * v98];
            *(_WORD *)v103 = v5[v94];
            v95 = v103 + 2;
            while (v84 != v96)
            {
              v104 = *((_WORD *)v84 - 1);
              v84 -= 2;
              *((_WORD *)v103 - 1) = v104;
              v103 -= 2;
            }
            v64 = &v102[2 * v101];
            __p = v103;
            v258 = v64;
            if (v96)
            {
              operator delete(v96);
              v64 = v258;
            }
          }
          else
          {
            *(_WORD *)v84 = v5[v94];
            v95 = v84 + 2;
          }
          v105 = v65 | 2;
          if (v95 >= v64)
          {
            v107 = __p;
            v108 = v95 - __p;
            if (v95 - __p < -2)
LABEL_422:
              sub_20B80CDD8();
            v109 = v108 >> 1;
            v110 = v64 - __p;
            if (v110 <= (v108 >> 1) + 1)
              v111 = v109 + 1;
            else
              v111 = v110;
            if (v110 >= 0x7FFFFFFFFFFFFFFELL)
              v112 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v112 = v111;
            if (v112)
            {
              v113 = (char *)sub_20B80FD48((uint64_t)&v258, v112);
              v107 = __p;
            }
            else
            {
              v113 = 0;
            }
            v114 = &v113[2 * v109];
            *(_WORD *)v114 = v5[v105];
            v106 = v114 + 2;
            while (v95 != v107)
            {
              v115 = *((_WORD *)v95 - 1);
              v95 -= 2;
              *((_WORD *)v114 - 1) = v115;
              v114 -= 2;
            }
            v64 = &v113[2 * v112];
            __p = v114;
            v258 = v64;
            if (v107)
            {
              operator delete(v107);
              v64 = v258;
            }
          }
          else
          {
            *(_WORD *)v95 = v5[v105];
            v106 = v95 + 2;
          }
          if (v106 >= v64)
          {
            v116 = __p;
            v117 = v106 - __p;
            if (v106 - __p <= -3)
              sub_20B80CDD8();
            v118 = v117 >> 1;
            v119 = v64 - __p;
            if (v119 <= (v117 >> 1) + 1)
              v120 = v118 + 1;
            else
              v120 = v119;
            if (v119 >= 0x7FFFFFFFFFFFFFFELL)
              v121 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v121 = v120;
            if (v121)
            {
              v122 = (char *)sub_20B80FD48((uint64_t)&v258, v121);
              v116 = __p;
            }
            else
            {
              v122 = 0;
            }
            v123 = &v122[2 * v118];
            *(_WORD *)v123 = 20998;
            while (v106 != v116)
            {
              v124 = *((_WORD *)v106 - 1);
              v106 -= 2;
              *((_WORD *)v123 - 1) = v124;
              v123 -= 2;
            }
            __p = v123;
            v258 = &v122[2 * v121];
            if (v116)
              operator delete(v116);
          }
          else
          {
            *(_WORD *)v106 = 20998;
          }
          (*(void (**)(void))(a4 + 16))();
        }
        v133 = v9++ == 2;
      }
      while (!v133);
      a2 = v246;
    }
    else if (v6 <= 1)
    {
      v7 = 1;
    }
    else
    {
      v7 = v6;
    }
    if (a2)
      v125 = 47;
    else
      v125 = -241;
    v248 = v125;
    do
    {
      if (v4 - v6 == 2)
        v126 = 100;
      else
        v126 = 10;
      v127 = (unsigned __int16)*v5;
      if (v127 != 48 && v127 != 65296)
      {
        v128 = (unsigned __int16)v5[v6];
        if (v128 != 48)
        {
          v129 = a3 / v126;
          v130 = a3 % v126;
          v131 = a3 / v126 - 1;
          v132 = v130 < 1 || v131 > 0xB;
          v133 = v132 || v128 == 65296;
          if (!v133 && v130 <= word_20BA4B22C[v131])
          {
            v134 = __p;
            v135 = v258;
            v254 = __p;
            if (v129 < 0xA)
            {
              v136 = 0;
            }
            else
            {
              if (__p >= v258)
              {
                if ((unint64_t)(v258 - __p) <= 1)
                  v137 = 1;
                else
                  v137 = v258 - __p;
                if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL)
                  v138 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v138 = v137;
                v140 = (char *)sub_20B80FD48((uint64_t)&v258, v138);
                v141 = __p;
                v142 = __p;
                *(_WORD *)v140 = *v5;
                v134 = v140 + 2;
                v143 = v140;
                while (v142 != __p)
                {
                  v144 = *((_WORD *)v142 - 1);
                  v142 -= 2;
                  *((_WORD *)v143 - 1) = v144;
                  v143 -= 2;
                }
                v135 = &v140[2 * v139];
                __p = v143;
                v258 = v135;
                if (v141)
                {
                  operator delete(v141);
                  v135 = v258;
                }
              }
              else
              {
                *(_WORD *)__p = v127;
                v134 = __p + 2;
              }
              v254 = v134;
              v136 = 1;
            }
            if (v134 >= v135)
            {
              v146 = __p;
              v147 = v134 - __p;
              if (v134 - __p <= -3)
                goto LABEL_423;
              v148 = v147 >> 1;
              v149 = v135 - __p;
              if (v149 <= (v147 >> 1) + 1)
                v150 = v148 + 1;
              else
                v150 = v149;
              if (v149 >= 0x7FFFFFFFFFFFFFFELL)
                v151 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_20B80FD48((uint64_t)&v258, v151);
                v146 = __p;
                v134 = v254;
              }
              else
              {
                v152 = 0;
              }
              v153 = &v152[2 * v148];
              *(_WORD *)v153 = v5[v136];
              v145 = v153 + 2;
              while (v134 != v146)
              {
                v154 = *((_WORD *)v134 - 1);
                v134 -= 2;
                *((_WORD *)v153 - 1) = v154;
                v153 -= 2;
              }
              v135 = &v152[2 * v151];
              __p = v153;
              v258 = v135;
              if (v146)
              {
                operator delete(v146);
                v135 = v258;
              }
            }
            else
            {
              *(_WORD *)v134 = v5[v136];
              v145 = v134 + 2;
            }
            if (v145 >= v135)
            {
              v156 = __p;
              v157 = v145 - __p;
              if (v145 - __p <= -3)
                sub_20B80CDD8();
              v158 = v157 >> 1;
              v159 = v135 - __p;
              if (v159 <= (v157 >> 1) + 1)
                v160 = v158 + 1;
              else
                v160 = v159;
              if (v159 >= 0x7FFFFFFFFFFFFFFELL)
                v161 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v161 = v160;
              if (v161)
              {
                v162 = (char *)sub_20B80FD48((uint64_t)&v258, v161);
                v156 = __p;
              }
              else
              {
                v162 = 0;
              }
              v163 = (__int16 *)&v162[2 * v158];
              *v163 = v248;
              v155 = (char *)(v163 + 1);
              while (v145 != v156)
              {
                v164 = *((_WORD *)v145 - 1);
                v145 -= 2;
                *--v163 = v164;
              }
              v135 = &v162[2 * v161];
              __p = (char *)v163;
              v258 = v135;
              if (v156)
              {
                operator delete(v156);
                v135 = v258;
              }
            }
            else
            {
              *(_WORD *)v145 = v248;
              v155 = v145 + 2;
            }
            v165 = v136 + 1;
            v255 = v155;
            if (v130 >= 10)
            {
              if (v155 >= v135)
              {
                v167 = __p;
                v168 = v155 - __p;
                if (v155 - __p < -2)
                  goto LABEL_423;
                v169 = v168 >> 1;
                v170 = v135 - __p;
                if (v170 <= (v168 >> 1) + 1)
                  v171 = v169 + 1;
                else
                  v171 = v170;
                if (v170 >= 0x7FFFFFFFFFFFFFFELL)
                  v172 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v172 = v171;
                if (v172)
                {
                  v173 = (char *)sub_20B80FD48((uint64_t)&v258, v172);
                  v167 = __p;
                }
                else
                {
                  v173 = 0;
                }
                v174 = &v173[2 * v169];
                *(_WORD *)v174 = v5[v165];
                v166 = v174 + 2;
                while (v155 != v167)
                {
                  v175 = *((_WORD *)v155 - 1);
                  v155 -= 2;
                  *((_WORD *)v174 - 1) = v175;
                  v174 -= 2;
                }
                v135 = &v173[2 * v172];
                __p = v174;
                v258 = v135;
                if (v167)
                {
                  operator delete(v167);
                  v135 = v258;
                }
              }
              else
              {
                *(_WORD *)v155 = v5[v165];
                v166 = v155 + 2;
              }
              v165 = v136 | 2;
              v255 = v166;
              v155 = v166;
            }
            if (v155 >= v135)
            {
              v176 = __p;
              v177 = v155 - __p;
              if (v155 - __p < -2)
                goto LABEL_423;
              v178 = v177 >> 1;
              v179 = v135 - __p;
              if (v179 <= (v177 >> 1) + 1)
                v180 = v178 + 1;
              else
                v180 = v179;
              if (v179 >= 0x7FFFFFFFFFFFFFFELL)
                v181 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v181 = v180;
              if (v181)
              {
                v182 = (char *)sub_20B80FD48((uint64_t)&v258, v181);
                v176 = __p;
                v155 = v255;
              }
              else
              {
                v182 = 0;
              }
              v183 = &v182[2 * v178];
              *(_WORD *)v183 = v5[v165];
              while (v155 != v176)
              {
                v184 = *((_WORD *)v155 - 1);
                v155 -= 2;
                *((_WORD *)v183 - 1) = v184;
                v183 -= 2;
              }
              __p = v183;
              v258 = &v182[2 * v181];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_WORD *)v155 = v5[v165];
            }
            (*(void (**)(void))(a4 + 16))();
            v185 = __p;
            v186 = v258;
            v256 = __p;
            if (v129 < 0xA)
            {
              v187 = 0;
            }
            else
            {
              if (__p >= v258)
              {
                if ((unint64_t)(v258 - __p) <= 1)
                  v188 = 1;
                else
                  v188 = v258 - __p;
                if ((unint64_t)(v258 - __p) >= 0x7FFFFFFFFFFFFFFELL)
                  v189 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v189 = v188;
                v191 = (char *)sub_20B80FD48((uint64_t)&v258, v189);
                v192 = __p;
                v193 = __p;
                *(_WORD *)v191 = *v5;
                v185 = v191 + 2;
                v194 = v191;
                while (v193 != __p)
                {
                  v195 = *((_WORD *)v193 - 1);
                  v193 -= 2;
                  *((_WORD *)v194 - 1) = v195;
                  v194 -= 2;
                }
                v186 = &v191[2 * v190];
                __p = v194;
                v258 = v186;
                if (v192)
                {
                  operator delete(v192);
                  v186 = v258;
                }
              }
              else
              {
                *(_WORD *)__p = *v5;
                v185 = __p + 2;
              }
              v256 = v185;
              v187 = 1;
            }
            if (v185 >= v186)
            {
              v197 = __p;
              v198 = v185 - __p;
              if (v185 - __p < -2)
                goto LABEL_423;
              v199 = v198 >> 1;
              v200 = v186 - __p;
              if (v200 <= (v198 >> 1) + 1)
                v201 = v199 + 1;
              else
                v201 = v200;
              if (v200 >= 0x7FFFFFFFFFFFFFFELL)
                v202 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v202 = v201;
              if (v202)
              {
                v203 = (char *)sub_20B80FD48((uint64_t)&v258, v202);
                v197 = __p;
                v185 = v256;
              }
              else
              {
                v203 = 0;
              }
              v204 = &v203[2 * v199];
              *(_WORD *)v204 = v5[v187];
              v196 = v204 + 2;
              while (v185 != v197)
              {
                v205 = *((_WORD *)v185 - 1);
                v185 -= 2;
                *((_WORD *)v204 - 1) = v205;
                v204 -= 2;
              }
              v186 = &v203[2 * v202];
              __p = v204;
              v258 = v186;
              if (v197)
              {
                operator delete(v197);
                v186 = v258;
              }
            }
            else
            {
              *(_WORD *)v185 = v5[v187];
              v196 = v185 + 2;
            }
            if (v196 >= v186)
            {
              v207 = __p;
              v208 = v196 - __p;
              if (v196 - __p <= -3)
                sub_20B80CDD8();
              v209 = v208 >> 1;
              v210 = v186 - __p;
              if (v210 <= (v208 >> 1) + 1)
                v211 = v209 + 1;
              else
                v211 = v210;
              if (v210 >= 0x7FFFFFFFFFFFFFFELL)
                v212 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v212 = v211;
              if (v212)
              {
                v213 = (char *)sub_20B80FD48((uint64_t)&v258, v212);
                v207 = __p;
              }
              else
              {
                v213 = 0;
              }
              v214 = &v213[2 * v209];
              *(_WORD *)v214 = 26376;
              v206 = v214 + 2;
              while (v196 != v207)
              {
                v215 = *((_WORD *)v196 - 1);
                v196 -= 2;
                *((_WORD *)v214 - 1) = v215;
                v214 -= 2;
              }
              v186 = &v213[2 * v212];
              __p = v214;
              v258 = v186;
              if (v207)
              {
                operator delete(v207);
                v186 = v258;
              }
            }
            else
            {
              *(_WORD *)v196 = 26376;
              v206 = v196 + 2;
            }
            v216 = v187 + 1;
            v257 = v206;
            if (v130 >= 10)
            {
              if (v206 >= v186)
              {
                v218 = __p;
                v219 = v206 - __p;
                if (v206 - __p < -2)
                  goto LABEL_423;
                v220 = v219 >> 1;
                v221 = v186 - __p;
                if (v221 <= (v219 >> 1) + 1)
                  v222 = v220 + 1;
                else
                  v222 = v221;
                if (v221 >= 0x7FFFFFFFFFFFFFFELL)
                  v223 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v223 = v222;
                if (v223)
                {
                  v224 = (char *)sub_20B80FD48((uint64_t)&v258, v223);
                  v218 = __p;
                }
                else
                {
                  v224 = 0;
                }
                v225 = &v224[2 * v220];
                *(_WORD *)v225 = v5[v216];
                v217 = v225 + 2;
                while (v206 != v218)
                {
                  v226 = *((_WORD *)v206 - 1);
                  v206 -= 2;
                  *((_WORD *)v225 - 1) = v226;
                  v225 -= 2;
                }
                v186 = &v224[2 * v223];
                __p = v225;
                v258 = v186;
                if (v218)
                {
                  operator delete(v218);
                  v186 = v258;
                }
              }
              else
              {
                *(_WORD *)v206 = v5[v216];
                v217 = v206 + 2;
              }
              v216 = v187 | 2;
              v257 = v217;
              v206 = v217;
            }
            if (v206 >= v186)
            {
              v228 = __p;
              v229 = v206 - __p;
              if (v206 - __p < -2)
LABEL_423:
                sub_20B80CDD8();
              v230 = v229 >> 1;
              v231 = v186 - __p;
              if (v231 <= (v229 >> 1) + 1)
                v232 = v230 + 1;
              else
                v232 = v231;
              if (v231 >= 0x7FFFFFFFFFFFFFFELL)
                v233 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v233 = v232;
              if (v233)
              {
                v234 = (char *)sub_20B80FD48((uint64_t)&v258, v233);
                v228 = __p;
                v206 = v257;
              }
              else
              {
                v234 = 0;
              }
              v235 = &v234[2 * v230];
              *(_WORD *)v235 = v5[v216];
              v227 = v235 + 2;
              while (v206 != v228)
              {
                v236 = *((_WORD *)v206 - 1);
                v206 -= 2;
                *((_WORD *)v235 - 1) = v236;
                v235 -= 2;
              }
              v186 = &v234[2 * v233];
              __p = v235;
              v258 = v186;
              if (v228)
              {
                operator delete(v228);
                v186 = v258;
              }
            }
            else
            {
              *(_WORD *)v206 = v5[v216];
              v227 = v206 + 2;
            }
            if (v227 >= v186)
            {
              v237 = __p;
              v238 = v227 - __p;
              if (v227 - __p <= -3)
                sub_20B80CDD8();
              v239 = v238 >> 1;
              v240 = v186 - __p;
              if (v240 <= (v238 >> 1) + 1)
                v241 = v239 + 1;
              else
                v241 = v240;
              if (v240 >= 0x7FFFFFFFFFFFFFFELL)
                v242 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v242 = v241;
              if (v242)
              {
                v243 = (char *)sub_20B80FD48((uint64_t)&v258, v242);
                v237 = __p;
              }
              else
              {
                v243 = 0;
              }
              v244 = &v243[2 * v239];
              *(_WORD *)v244 = 26085;
              while (v227 != v237)
              {
                v245 = *((_WORD *)v227 - 1);
                v227 -= 2;
                *((_WORD *)v244 - 1) = v245;
                v244 -= 2;
              }
              __p = v244;
              v258 = &v243[2 * v242];
              if (v237)
                operator delete(v237);
            }
            else
            {
              *(_WORD *)v227 = 26085;
            }
            (*(void (**)(void))(a4 + 16))();
          }
        }
      }
      v133 = v6++ == v7;
    }
    while (!v133);
    if (__p)
      operator delete(__p);
  }
}

void sub_20B92CAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B92CAF8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 *i;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35[2];
  char v36;

  xmmword_25472CEA8 = 0u;
  *(_OWORD *)&qword_25472CEB8 = 0u;
  dword_25472CEC8 = 1065353216;
  if (a2)
  {
    v2 = (uint64_t)result;
    v34 = &result[4 * a2];
    while (1)
    {
      v3 = (unint64_t)&xmmword_25472CEA8 + 8;
      v4 = sub_20B89ACFC((uint64_t)&qword_25472CEC0, v2);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_25472CEA8 + 1);
      if (*((_QWORD *)&xmmword_25472CEA8 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472CEA8 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v3 = v4;
          if (v4 >= *((_QWORD *)&xmmword_25472CEA8 + 1))
            v3 = v4 % *((_QWORD *)&xmmword_25472CEA8 + 1);
        }
        else
        {
          v3 = (*((_QWORD *)&xmmword_25472CEA8 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int16 ***)(xmmword_25472CEA8 + 8 * v3);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int16 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              result = (uint64_t *)sub_20B89AD3C((uint64_t)&dword_25472CEC8, i + 8, (unsigned __int16 *)v2);
              if ((result & 1) != 0)
                goto LABEL_77;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      v35[0] = (uint64_t)v12;
      v35[1] = (uint64_t)&qword_25472CEB8;
      v36 = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = v12 + 16;
      if (*(char *)(v2 + 23) < 0)
      {
        sub_20B88DD4C(v13, *(void **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v2;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v2 + 16);
        *(_OWORD *)v13 = v14;
      }
      *((_WORD *)v12 + 20) = *(_WORD *)(v2 + 24);
      v36 = 1;
      v15 = (float)(unint64_t)(qword_25472CEC0 + 1);
      if (v6 && (float)(*(float *)&dword_25472CEC8 * (float)v6) >= v15)
        goto LABEL_68;
      v16 = (v6 & (v6 - 1)) == 0;
      if (v6 < 3)
        v16 = 0;
      v17 = (2 * v6) | !v16;
      v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25472CEC8);
      prime = (int8x8_t)(v17 <= v18 ? v18 : v17);
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v6 = *((_QWORD *)&xmmword_25472CEA8 + 1);
      if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472CEA8 + 1))
        break;
      if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472CEA8 + 1))
      {
        v26 = vcvtps_u32_f32((float)(unint64_t)qword_25472CEC0 / *(float *)&dword_25472CEC8);
        if (*((_QWORD *)&xmmword_25472CEA8 + 1) < 3uLL
          || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472CEA8 + 8)),
              v27.i16[0] = vaddlv_u8(v27),
              v27.u32[0] > 1uLL))
        {
          v26 = std::__next_prime(v26);
        }
        else
        {
          v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2)
            v26 = v28;
        }
        if (*(_QWORD *)&prime <= v26)
          prime = (int8x8_t)v26;
        if (*(_QWORD *)&prime >= v6)
        {
          v6 = *((_QWORD *)&xmmword_25472CEA8 + 1);
        }
        else
        {
          if (prime)
            break;
          v33 = (void *)xmmword_25472CEA8;
          *(_QWORD *)&xmmword_25472CEA8 = 0;
          if (v33)
            operator delete(v33);
          v6 = 0;
          *((_QWORD *)&xmmword_25472CEA8 + 1) = 0;
        }
      }
LABEL_63:
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v5 >= v6)
          v3 = v5 % v6;
        else
          v3 = v5;
      }
      else
      {
        v3 = (v6 - 1) & v5;
      }
LABEL_68:
      v31 = *(_QWORD **)(xmmword_25472CEA8 + 8 * v3);
      if (v31)
      {
        *(_QWORD *)v35[0] = *v31;
        *v31 = v35[0];
      }
      else
      {
        *(_QWORD *)v35[0] = qword_25472CEB8;
        qword_25472CEB8 = v35[0];
        *(_QWORD *)(xmmword_25472CEA8 + 8 * v3) = &qword_25472CEB8;
        if (*(_QWORD *)v35[0])
        {
          v32 = *(_QWORD *)(*(_QWORD *)v35[0] + 8);
          if ((v6 & (v6 - 1)) != 0)
          {
            if (v32 >= v6)
              v32 %= v6;
          }
          else
          {
            v32 &= v6 - 1;
          }
          *(_QWORD *)(xmmword_25472CEA8 + 8 * v32) = v35[0];
        }
      }
      v35[0] = 0;
      ++qword_25472CEC0;
      result = sub_20B92CFF0(v35);
LABEL_77:
      v2 += 32;
      if ((uint64_t *)v2 == v34)
        return result;
    }
    if (*(_QWORD *)&prime >> 61)
      sub_20B800BC0();
    v20 = operator new(8 * *(_QWORD *)&prime);
    v21 = (void *)xmmword_25472CEA8;
    *(_QWORD *)&xmmword_25472CEA8 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((int8x8_t *)&xmmword_25472CEA8 + 1) = prime;
    do
      *(_QWORD *)(xmmword_25472CEA8 + 8 * v22++) = 0;
    while (*(_QWORD *)&prime != v22);
    v23 = (_QWORD **)qword_25472CEB8;
    if (qword_25472CEB8)
    {
      v24 = *(_QWORD *)(qword_25472CEB8 + 8);
      v25 = (uint8x8_t)vcnt_s8(prime);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        if (v24 >= *(_QWORD *)&prime)
          v24 %= *(_QWORD *)&prime;
      }
      else
      {
        v24 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(xmmword_25472CEA8 + 8 * v24) = &qword_25472CEB8;
      for (j = *v23; j; v24 = v30)
      {
        v30 = j[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(xmmword_25472CEA8 + 8 * v30))
          {
            *(_QWORD *)(xmmword_25472CEA8 + 8 * v30) = v23;
            goto LABEL_59;
          }
          *v23 = (_QWORD *)*j;
          *j = **(_QWORD **)(xmmword_25472CEA8 + 8 * v30);
          **(_QWORD **)(xmmword_25472CEA8 + 8 * v30) = j;
          j = v23;
        }
        v30 = v24;
LABEL_59:
        v23 = (_QWORD **)j;
        j = (_QWORD *)*j;
      }
    }
    v6 = (unint64_t)prime;
    goto LABEL_63;
  }
  return result;
}

void sub_20B92CFBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B92CFF0((uint64_t *)va);
  sub_20B89AE0C((uint64_t)&xmmword_25472CEA8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B92CFF0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20B92D040()
{
  JUMPOUT(0x20BD39CB0);
}

double sub_20B92D054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  UChar32 v9;
  int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  double *v14;
  double *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  double v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  int v31;
  char v32;
  std::string *p_str;
  std::string::size_type size;
  std::string::size_type v35;
  int v36;
  unsigned int v37;
  std::string::size_type v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  std::string *v45;
  std::string *v46;
  unsigned int v47;
  std::string *v48;
  std::string::size_type v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  _BOOL4 v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  unint64_t v60;
  int v61;
  double *v62;
  UChar32 v63;
  double v64;
  double v65;
  int v66;
  BOOL v67;
  unint64_t i;
  int v69;
  double *v73;
  uint64_t v75;
  unsigned __int16 *v76;
  _BOOL4 v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  std::string v81;
  std::string __str;
  char v83[9];

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
  if (v6)
  {
    v7 = (unsigned __int16 *)v5;
    v8 = 2 * v6;
    while (1)
    {
      v9 = *v7;
      v10 = u_charType(v9);
      v11 = v9 != 12295 && v10 == 10;
      v12 = v11;
      v13 = 1;
      if (v10 == 11 || v12 || (v9 - 13056) < 0x7B || (v9 - 13183) <= 0x80)
        break;
      ++v7;
      v8 -= 2;
      if (!v8)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    v13 = 0;
  }
  v14 = (double *)sub_20B896F94();
  v15 = v14;
  v16 = *(_DWORD **)a3;
  v17 = *(_DWORD **)(a3 + 8);
  v18 = a1;
  if (*(_DWORD **)a3 == v17)
  {
LABEL_24:
    v21 = 0.0;
    if (!v13)
      return v21;
  }
  else
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v20 = *(_DWORD **)a3;
    do
    {
      if (*(_DWORD *)(v19 + 60) == *v20 || *(_DWORD *)(v19 + 56) == *v20)
        return v14[14];
      ++v20;
    }
    while (v20 != v17);
    while (*v16)
    {
      if (++v16 == v17)
        goto LABEL_24;
    }
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
    return 0.0;
  v22 = 0;
  v21 = 0.0;
  v73 = v15;
  do
  {
    v23 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 560))(a2, v22);
    if ((*v23 - 3) < 2)
      goto LABEL_130;
    if (*v23 == 9)
    {
      v21 = v21 + v15[13];
      goto LABEL_130;
    }
    v24 = v23;
    v26 = sub_20B916C5C(a2, v22);
    if (v22)
      v27 = *v24 == 5;
    else
      v27 = 0;
    v28 = v27;
    v75 = v25;
    v76 = (unsigned __int16 *)v26;
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 8) + 8) + 40))(&__str, *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8), v26, v25, v24, v28);
    v79 = 0;
    v80 = 0;
    v29 = 0;
    v77 = 0;
    v30 = 0;
    v31 = 0;
LABEL_37:
    v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    while ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v31 >= HIBYTE(__str.__r_.__value_.__r.__words[2]))
        goto LABEL_99;
      v35 = v31;
      v36 = v31 + 1;
      v37 = __str.__r_.__value_.__s.__data_[v31];
      if ((__str.__r_.__value_.__s.__data_[v31] & 0x80000000) == 0)
      {
LABEL_49:
        v31 = v36;
        goto LABEL_73;
      }
      v38 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_51:
      if (v38 == v36)
        goto LABEL_97;
      v39 = v36;
      if (v37 < 0xE0)
      {
        if (v37 < 0xC2)
          goto LABEL_97;
        v42 = v37 & 0x1F;
      }
      else
      {
        if (v37 > 0xEF)
        {
          if (v37 > 0xF4)
            goto LABEL_97;
          v43 = p_str->__r_.__value_.__s.__data_[v36];
          if (((byte_20BA4B260[v43 >> 4] >> (v37 + 16)) & 1) == 0)
            goto LABEL_97;
          v44 = v31 + 2;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ == v44)
              goto LABEL_97;
          }
          else
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == v44)
              goto LABEL_97;
            v45 = &__str;
          }
          v41 = v45->__r_.__value_.__s.__data_[v44] ^ 0x80;
          if (v41 > 0x3F)
          {
LABEL_97:
            v59 = 0.0;
            if ((v30 & 1) == 0)
              goto LABEL_127;
            v60 = v80 + 1;
            goto LABEL_100;
          }
          v36 = v31 + 2;
          v40 = v43 & 0x3F | ((v37 - 240) << 6);
        }
        else
        {
          v40 = v37 & 0xF;
          if (((a00000000000000[v37 & 0xF] >> (p_str->__r_.__value_.__s.__data_[v36] >> 5)) & 1) == 0)
            goto LABEL_97;
          v41 = p_str->__r_.__value_.__s.__data_[v36] & 0x3F;
        }
        if (size == ++v36)
          goto LABEL_97;
        v39 = v36;
        v42 = v41 | (v40 << 6);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &__str;
      else
        v46 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v47 = v46->__r_.__value_.__s.__data_[v39] ^ 0x80;
      if (v47 > 0x3F)
        goto LABEL_97;
      v37 = v47 | (v42 << 6);
      v31 = v36 + 1;
LABEL_73:
      if (v37 != 32)
      {
        std::string::basic_string(&v81, &__str, v35, v31 - v35, (std::allocator<char> *)v83);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v81;
        else
          v48 = (std::string *)v81.__r_.__value_.__r.__words[0];
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        else
          v49 = v81.__r_.__value_.__l.__size_;
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 8);
        v51 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v50 + 504))(v50, v48, v49);
        v52 = v51 == 0;
        if (v51)
        {
          v53 = 0;
        }
        else
        {
          v54 = u_charType(v37);
          v55 = 1;
          if (v54 != 27 && v37 - 65038 >= 2 && v37 != 8205)
            v55 = v54 == 26;
          v78 = v77 && v55;
          if ((v78 & 1) != 0)
          {
            v53 = v55;
          }
          else
          {
            v56 = sub_20B917630(v37);
            v53 = v55;
            v57 = v80;
            if (v56 == -1)
              v57 = v80 + 1;
            v80 = v57;
          }
          v58 = v79;
          if (v29)
            v58 = v79 + (v78 ^ 1u);
          v79 = v58;
          v18 = a1;
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        v30 |= v52;
        v29 = v52;
        v77 = v53;
        v15 = v73;
        goto LABEL_37;
      }
    }
    if (v31 < SLODWORD(__str.__r_.__value_.__r.__words[1]))
    {
      v35 = v31;
      v36 = v31 + 1;
      v37 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + v31);
      if ((*(char *)(__str.__r_.__value_.__r.__words[0] + v31) & 0x80000000) == 0)
        goto LABEL_49;
      v38 = __str.__r_.__value_.__l.__size_;
      goto LABEL_51;
    }
LABEL_99:
    v59 = 0.0;
    v60 = v80;
    if ((v30 & 1) == 0)
      goto LABEL_127;
LABEL_100:
    v61 = v24[1];
    v62 = (double *)sub_20B896F94();
    v63 = *v76;
    if (v63 == 9787 || (u_charType(v63) - 19) > 0xA)
    {
      if (v61 < 18001)
      {
        v64 = 0.0;
        if (v61 >= 3001)
          v64 = ((double)v61 + -3000.0) / 15000.0 * v62[8] + 0.0;
      }
      else
      {
        v64 = v62[8] + 0.0;
      }
      if (!v75)
        goto LABEL_126;
      if (v75 == 1)
      {
        v65 = v62[11];
      }
      else
      {
        v66 = *v76;
        if ((v66 - 12353) < 0x56 || v66 == 12316 || v66 == 12540)
          goto LABEL_126;
        v67 = 0;
        for (i = 1; i != v75; ++i)
        {
          v69 = v76[i];
          if ((v69 - 12353) >= 0x56 && v69 != 12540 && v69 != 12316)
            break;
          v67 = i >= v75 - 1;
        }
        if (!v67)
          goto LABEL_126;
        v65 = v62[12];
      }
      v64 = v64 + v65;
    }
    else
    {
      v64 = v62[7];
    }
LABEL_126:
    v59 = v64 + (double)v60 * v15[9] + (double)v79 * v15[10];
    v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_127:
    if (v32 < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v21 = v21 + v59;
LABEL_130:
    ++v22;
  }
  while (v22 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2));
  return v21;
}

void sub_20B92D664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B92D6A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  double *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  double v25;
  uint64_t v26;
  float v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  const void *v39;
  unint64_t v40;
  int *v41;
  const void *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  _BOOL4 v48;
  BOOL v49;
  const void *v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  _BOOL4 v55;
  BOOL v56;
  BOOL v57;
  double v58;
  NSObject *v59;
  NSObject *v60;
  void *v61;
  unint64_t v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  unint64_t v73;
  std::string v74;
  void *v75[3];
  void *v76[3];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE __p[22];
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v80 = -1;
  v8 = (double *)sub_20B896F94();
  v9 = v8;
  v10 = *(_QWORD *)(a2 + 48);
  if ((*(_QWORD *)(a2 + 56) - v10) >> 3 >= (unint64_t)*((unsigned __int16 *)v8 + 156))
    v11 = *((unsigned __int16 *)v8 + 156);
  else
    v11 = (*(_QWORD *)(a2 + 56) - v10) >> 3;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a3);
    v77 = 0;
    v78 = 0;
    v79 = 0;
    sub_20B8E5488(&v77, v11);
    v70 = a3;
    v71 = v9;
    sub_20B873D84(v76, (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3, &v80);
    v13 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(a2 + 56) != v13)
    {
      v14 = 0;
      do
      {
        v15 = *(_QWORD *)(v13 + 8 * v14);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 408))(v15) == 1
          || 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 3) >= v11)
        {
          break;
        }
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 408))(v15);
        if (v16 != 71 && (v16 != 76 && v16 != 74 || v17))
        {
          *((_QWORD *)v76[0] + v14) = 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 3);
          (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(__p, *(_QWORD *)(a1 + 8), v15);
          sub_20B8E5538(&v77, (uint64_t)__p);
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
        }
        ++v14;
        v13 = *(_QWORD *)(a2 + 48);
      }
      while (v14 < (*(_QWORD *)(a2 + 56) - v13) >> 3);
    }
    v18 = sub_20B9A7C5C(0xCu);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v66 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      v67 = "Montreal";
      if (v66 == 1)
        v67 = "RNNLM";
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v67;
      _os_log_debug_impl(&dword_20B7F7000, v18, OS_LOG_TYPE_DEBUG, "[Inference Engine: %s]", __p, 0xCu);
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 8) + 64))(v75, *(_QWORD *)(a1 + 8), &v77, 0);
    v19 = v71;
    v20 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3;
    *(_QWORD *)__p = 0;
    sub_20B844970(a4, v20, __p);
    v21 = v70;
    v22 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(a2 + 56) != v22)
    {
      v23 = 0;
      v68 = a4;
      v72 = a1;
      while (1)
      {
        v24 = *(int **)(v22 + 8 * v23);
        if ((*(unsigned int (**)(int *))(*(_QWORD *)v24 + 408))(v24) == 1)
          goto LABEL_89;
        if (((*(unsigned int (**)(int *))(*(_QWORD *)v24 + 96))(v24) == 76
           || (*(unsigned int (**)(int *))(*(_QWORD *)v24 + 96))(v24) == 74)
          && !(*(unsigned int (**)(int *))(*(_QWORD *)v24 + 408))(v24))
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, int *))(**(_QWORD **)(a1 + 8) + 16))(__p, *(_QWORD *)(a1 + 8), v24);
          v28 = sub_20B92D054(a1, (uint64_t)v24, (uint64_t)__p);
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
          v25 = 0.0;
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(int *))(*(_QWORD *)v24 + 96))(v24) == 71)
          break;
        v26 = *((_QWORD *)v76[0] + v23);
        if (v26 == -1)
        {
          v25 = v19[5];
          goto LABEL_32;
        }
        v27 = *((float *)v75[0] + v26);
        v28 = sub_20B92D054(a1, (uint64_t)v24, v77 + 24 * v26);
        v25 = v27;
LABEL_33:
        v29 = 0.0;
        if ((*(unsigned int (**)(int *))(*(_QWORD *)v24 + 96))(v24) != 71)
          v29 = (*(double (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v21, v24)* 0.1;
        if ((**(_DWORD **)(a1 + 24) & 0x6000002) == 0x4000002)
          v30 = 0.0;
        else
          v30 = v19[3];
        v31 = (*(uint64_t (**)(int *))(*(_QWORD *)v24 + 48))(v24);
        if (v31)
        {
          v32 = v31 - 1;
          if (*(_DWORD *)(*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v24 + 560))(v24, v31 - 1) == 8
            || *(_DWORD *)(*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v24 + 560))(v24, v32) == 10)
          {
            v30 = v19[4];
            v33 = (const void *)(*(uint64_t (**)(int *))(*(_QWORD *)v24 + 544))(v24);
            v35 = v34;
            v36 = (*(uint64_t (**)(int *))(*(_QWORD *)v24 + 552))(v24);
            v73 = v37;
            if (v35 < 5 || (v38 = *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56) == v38))
            {
LABEL_75:
              a1 = v72;
            }
            else
            {
              v39 = (const void *)v36;
              v69 = v23;
              v40 = 0;
              while (1)
              {
                v41 = *(int **)(v38 + 8 * v40);
                if (v41 != v24 && (*(unsigned int (**)(int *))(*(_QWORD *)v41 + 408))(v41) != 1)
                {
                  v42 = (const void *)(*(uint64_t (**)(int *))(*(_QWORD *)v41 + 544))(v41);
                  v44 = v43;
                  v45 = (*(uint64_t (**)(int *))(*(_QWORD *)v41 + 552))(v41);
                  v47 = v33 || v44 == 0;
                  v48 = v47;
                  v49 = v35 >= v44 && v44 + 2 >= v35;
                  if (v49 && v48)
                  {
                    v51 = (const void *)v45;
                    v52 = v46;
                    v53 = memcmp(v33, v42, 2 * v44);
                    v54 = v39 || v52 == 0;
                    v55 = v54;
                    v56 = !v53 && v73 >= v52;
                    v57 = !v56 || !v55;
                    if (!v57 && !memcmp(v39, v51, 2 * v52))
                      break;
                  }
                }
                ++v40;
                v38 = *(_QWORD *)(a2 + 48);
                if (v40 >= (*(_QWORD *)(a2 + 56) - v38) >> 3)
                {
                  a4 = v68;
                  v23 = v69;
                  v21 = v70;
                  v19 = v71;
                  goto LABEL_75;
                }
              }
              v65 = *((_QWORD *)v76[0] + v40);
              v21 = v70;
              a1 = v72;
              if (v65 != -1 && v25 > *((float *)v75[0] + v65))
                v25 = *((float *)v75[0] + v65);
              a4 = v68;
              v23 = v69;
              v19 = v71;
            }
          }
        }
        v58 = v30 * (double)v24[55] / v19[2];
        *(double *)(*a4 + 8 * v23) = v29 + v28 + v25 - v58;
        v59 = sub_20B9A7C5C(0xCu);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
        {
          v60 = sub_20B9A7C5C(0xCu);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            v61 = (void *)(*(uint64_t (**)(int *))(*(_QWORD *)v24 + 544))(v24);
            sub_20B8D15F4(v61, v62, &v74);
            v63 = &v74;
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v63 = (std::string *)v74.__r_.__value_.__r.__words[0];
            v64 = *(_QWORD *)(*a4 + 8 * v23);
            *(_DWORD *)__p = 136316418;
            *(_QWORD *)&__p[4] = v63;
            *(_WORD *)&__p[12] = 2048;
            *(double *)&__p[14] = v25;
            v82 = 2048;
            v83 = v64;
            v84 = 2048;
            v85 = -v28;
            v86 = 2048;
            v87 = -v29;
            v88 = 2048;
            v89 = v58;
            _os_log_debug_impl(&dword_20B7F7000, v60, OS_LOG_TYPE_DEBUG, "[%s] Adjust Static LM Score: %.3f -> %.3f Penalties: (UNK: %.3f, LM: %.3f, Match: %.3f)", __p, 0x3Eu);
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
          }
        }
        ++v23;
        v22 = *(_QWORD *)(a2 + 48);
        if (v23 >= (*(_QWORD *)(a2 + 56) - v22) >> 3)
          goto LABEL_89;
      }
      v25 = (*(double (**)(int *))(*(_QWORD *)v24 + 392))(v24);
LABEL_32:
      v28 = 0.0;
      goto LABEL_33;
    }
LABEL_89:
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    if (v76[0])
    {
      v76[1] = v76[0];
      operator delete(v76[0]);
    }
    *(_QWORD *)__p = &v77;
    sub_20B83B400((void ***)__p);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_20B92DE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  a31 = &a27;
  sub_20B83B400((void ***)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20B92DEFC(const __CFURL **a1, uint64_t a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  const __CFURL *v11;
  uint64_t v12;
  const __CFURL *v13;
  uint64_t v14;
  const __CFURL *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint8_t buf[24];
  uint8_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(0xDu);
  v5 = os_signpost_id_make_with_pointer(v4, a1);
  v6 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "MecabraThaiInit", "ThaiEngine engine init", buf, 2u);
    }
  }
  v8 = operator new();
  *(_QWORD *)v8 = a2;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_DWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  v9 = operator new();
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)v9 = off_24C461CC8;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v9 + 16) = -1;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_DWORD *)(v9 + 56) = 1065353216;
  *(_QWORD *)v9 = &unk_24C462908;
  *(_QWORD *)(v9 + 8) = Mutable;
  *(_QWORD *)(v8 + 72) = v9;
  sub_20B9F4098(a1[2], CFSTR("th.rnnlm"), CFSTR("th"), (uint64_t *)(v8 + 80));
  v11 = a1[2];
  v12 = operator new();
  sub_20B876788(v12, v11);
  *(_QWORD *)(v8 + 88) = v12;
  v13 = a1[3];
  v14 = operator new();
  sub_20BA140A0(v14, v13);
  *(_QWORD *)(v8 + 96) = v14;
  v15 = a1[3];
  v16 = (_QWORD *)operator new();
  sub_20B9718AC(v16, v15, 1);
  *v16 = &unk_24C466B68;
  v16[16] = v14;
  *(_QWORD *)(v8 + 104) = v16;
  v17 = operator new();
  sub_20BA223A0(v17, CFSTR("th_TH"));
  *(_QWORD *)(v8 + 112) = v17;
  v18 = *(_QWORD *)(v8 + 80);
  v19 = (_QWORD *)operator new();
  *v19 = &unk_24C460230;
  v19[1] = v8 + 56;
  v19[2] = v18;
  v20 = (_QWORD *)operator new();
  v21 = v19[2];
  *v20 = &unk_24C461F30;
  v20[1] = v8 + 56;
  v20[2] = v21;
  v19[3] = v20;
  v19[4] = v17;
  v19[5] = 0;
  *v19 = &unk_24C466D20;
  *(_QWORD *)(v8 + 120) = v19;
  v22 = *(_QWORD *)(v8 + 112);
  v24 = *(_QWORD *)(v8 + 80);
  v23 = *(_QWORD *)(v8 + 88);
  v25 = (_QWORD *)operator new();
  *v25 = &unk_24C4617D8;
  v25[1] = v22;
  v26 = (_QWORD *)operator new();
  *v26 = &unk_24C460BC0;
  v26[1] = v24;
  v25[2] = v26;
  v25[3] = 0;
  *v25 = &unk_24C466C88;
  v25[4] = v23;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 128) = v25;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_WORD *)(v8 + 160) = 0;
  *(_DWORD *)(v8 + 200) = 1065353216;
  *(_QWORD *)(v8 + 208) = 0;
  v27 = operator new();
  *(_QWORD *)buf = &off_24C46A298;
  v34 = buf;
  sub_20B9579B4(v27, CFSTR("th_TH"), v8 + 160, (uint64_t)buf);
  *(_QWORD *)(v8 + 216) = v27;
  v28 = v34;
  if (v34 == buf)
  {
    v29 = 4;
    v28 = buf;
    goto LABEL_8;
  }
  if (v34)
  {
    v29 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  }
  *(_BYTE *)(v8 + 224) = 1;
  v30 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v31 = v30;
    if (os_signpost_enabled(v30))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v31, OS_SIGNPOST_INTERVAL_END, v5, "MecabraThaiInit", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  return v8;
}

void sub_20B92E378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8E783C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B92E5C0()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x60C4082687C62);
  JUMPOUT(0x20B92E538);
}

void sub_20B92E5E0()
{
  JUMPOUT(0x20B92E538);
}

void sub_20B92E5E8()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x10F3C4082E6510BLL);
  JUMPOUT(0x20B92E550);
}

void sub_20B92E608()
{
  JUMPOUT(0x20B92E550);
}

void sub_20B92E610()
{
  JUMPOUT(0x20B92E568);
}

void sub_20B92E618()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x10A1C4010E18BA4);
  JUMPOUT(0x20B92E580);
}

void sub_20B92E638()
{
  JUMPOUT(0x20B92E580);
}

void sub_20B92E640()
{
  JUMPOUT(0x20B92E5B8);
}

uint64_t sub_20B92E648(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  CFArrayRef *v13;
  CFIndex Length;
  NSObject *v15;
  os_signpost_id_t v16;
  NSObject *v17;
  const void **v18;
  os_signpost_id_t ptr;
  uint8_t v21[8];
  uint64_t v22;
  void *__p;
  _BYTE *v24;
  void **v25;
  _BYTE buf[24];
  __int128 v27;
  int v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a2;
    _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[ThaiEngine::analyzeString] analysisStr: [%@]", buf, 0xCu);
  }
  ptr = 0;
  v9 = sub_20B9A7C5C(0xDu);
  ptr = os_signpost_id_make_with_pointer(v9, &ptr);
  v10 = sub_20B9A7C5C(0xDu);
  v11 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v11, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 32))(*(_QWORD *)(a1 + 104));
  sub_20B9727D8(*(_QWORD *)(a1 + 104), 1);
  v13 = 0;
  if (a2 && a5)
  {
    Length = CFStringGetLength(a2);
    if (Length <= CFArrayGetCount((CFArrayRef)a5))
    {
      v13 = (CFArrayRef *)operator new();
      sub_20B95169C((uint64_t)v13, a5, a2);
    }
    else
    {
      v13 = 0;
    }
  }
  *(_QWORD *)buf = &unk_24C460D28;
  *(_OWORD *)&buf[8] = 0u;
  v27 = 0u;
  v28 = 1065353216;
  memset(v29, 0, 24);
  sub_20B8D0790(a2, (UniChar **)&__p);
  sub_20BA21830((uint64_t)__p, (v24 - (_BYTE *)__p) >> 1, v13, (uint64_t *)v21);
  sub_20B92EB38(a1, buf, (uint64_t)v21, (uint64_t)&__p, 0);
  *(_QWORD *)v21 = &unk_24C499568;
  v25 = (void **)&v22;
  sub_20B88DF54(&v25);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  sub_20B9F491C((uint64_t)buf);
  v15 = sub_20B9A7C5C(0xDu);
  v16 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v15;
    if (os_signpost_enabled(v15))
    {
      *(_WORD *)v21 = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v17, OS_SIGNPOST_INTERVAL_END, v16, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, v21, 2u);
    }
  }
  sub_20B92E9DC(a1, (uint64_t)buf);
  *(_QWORD *)buf = &unk_24C460D28;
  *(_QWORD *)v21 = v29;
  sub_20B882410((void ***)v21);
  sub_20B84055C((uint64_t)&buf[8]);
  if (v13)
  {
    v18 = sub_20B951828((const void **)v13);
    MEMORY[0x20BD39CB0](v18, 0x60C40AA6EF139);
  }
  return 1;
}

void sub_20B92E944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  MEMORY[0x20BD39CB0](v19, 0x60C40AA6EF139);
  sub_20B931EA8((const void ***)&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B92E9DC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  __int16 v11[8];

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  v4 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v11[0] = 0;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[ThaiEngine::fillResultCandidateSet] Final Candidates", (uint8_t *)v11, 2u);
  }
  v5 = *(uint64_t **)(a2 + 48);
  v6 = *(uint64_t **)(a2 + 56);
  if (v5 != v6)
  {
    v7 = 1;
    do
    {
      v8 = *v5;
      *(_QWORD *)(*v5 + 8) = v7;
      if (v7 <= 4)
      {
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v8 + 528))(v8, 12, "Autocorrected", 1);
        v8 = *v5;
      }
      *v5++ = 0;
      v9 = (void *)sub_20B8E1754(v8);
      (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v9);

      ++v7;
    }
    while (v5 != v6);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72));
}

uint64_t sub_20B92EAEC(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 80))(*(_QWORD *)(a1 + 104));
  v3 = *(uint64_t **)(a1 + 96);
  if (v3)
  {
    result = *v3;
    if (*v3)
      return LXVulgarWordUsageDatabasePerformMaintenance();
  }
  return result;
}

uint64_t sub_20B92EB38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *p_dst;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 *v26;
  char *v27;
  __int128 v28;
  float v29;
  char *v30;
  unint64_t v31;
  uint64_t **v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t (***v39)(_QWORD);
  __int128 *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  CFTypeRef cf;
  _BYTE v80[128];
  uint64_t **v81;
  __int128 **v82;
  _BYTE v83[32];
  int v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 *v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t **v91;
  _QWORD v92[3];
  _QWORD *v93;
  __int128 __dst;
  void **v95;
  __int128 *v96;
  __int128 *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  float v102;
  __int16 v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)(a4 + 8);
  sub_20B9F9ECC(*(_QWORD *)(a1 + 128), *(_WORD **)a4, (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 1, a3, a5, (uint64_t)v80);
  v10 = (uint64_t)(*v9 - *(_QWORD *)a4) >> 1;
  v71 = *(void **)a4;
  v72 = v10;
  v73 = 0;
  v74 = 0;
  v75 = v71;
  v76 = v10;
  v77 = a3;
  v78 = v80;
  cf = 0;
  if ((*(_BYTE *)(a1 + 58) & 4) == 0)
  {
    v11 = *(_QWORD *)(a1 + 152);
    if (v11)
    {
      v12 = atomic_load((unsigned __int8 *)(v11 + 97));
      if ((v12 & 1) == 0)
      {
        v13 = atomic_load((unsigned __int8 *)(v11 + 96));
        if ((v13 & 1) != 0)
        {
          LODWORD(v82) = 0;
          v14 = *(_BYTE **)(a1 + 152);
          v15 = v77;
          v16 = (__int128 *)operator new(0x20uLL);
          *(_QWORD *)v16 = &off_24C46AFA8;
          *((_QWORD *)v16 + 1) = a2;
          *((_QWORD *)v16 + 2) = &v71;
          *((_QWORD *)v16 + 3) = &v82;
          v96 = v16;
          sub_20B8F63BC(v14, v15, (uint64_t)&__dst, -1);
          p_dst = v96;
          if (v96 == &__dst)
          {
            v18 = 4;
            p_dst = &__dst;
          }
          else
          {
            if (!v96)
              goto LABEL_10;
            v18 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v18))();
        }
      }
    }
  }
LABEL_10:
  if (a2[6] != a2[7])
    goto LABEL_100;
  (*(void (**)(_QWORD, _QWORD *, void **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), a2, &v71, a1 + 8, *(unsigned int *)(a1 + 56));
  v19 = *(_DWORD *)(a1 + 56);
  if ((v19 & 0x40000) != 0)
    goto LABEL_68;
  v20 = *(_QWORD *)(a1 + 104);
  if (!v20)
    goto LABEL_68;
  v21 = *(_QWORD **)(v20 + 8);
  if (!v21)
    goto LABEL_68;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  *(_QWORD *)&__dst = &off_24C46AEA0;
  *((_QWORD *)&__dst + 1) = &v88;
  v95 = &v71;
  v96 = &__dst;
  sub_20B9189A8(v21, v77, (uint64_t)&__dst);
  v22 = v96;
  if (v96 == &__dst)
  {
    v23 = 4;
    v22 = &__dst;
  }
  else
  {
    if (!v96)
      goto LABEL_19;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_19:
  if (v88 == v89)
    goto LABEL_67;
  sub_20B930AC4((uint64_t)v88, v89, 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((char *)v89 - (char *)v88) >> 3)), 1);
  v24 = 0x2E8BA2E8BA2E8BA3 * (((char *)v89 - (char *)v88) >> 3);
  v82 = (__int128 **)&unk_24C460D28;
  if (v24 >= 2)
    v24 = 2;
  memset(v83, 0, sizeof(v83));
  v84 = 1065353216;
  v86 = 0;
  v87 = 0;
  v85 = 0;
  if (!v24)
  {
LABEL_50:
    (*(void (**)(_QWORD, __int128 ***, uint64_t))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128), &v82, a1 + 8);
    v37 = v85;
    v38 = v86;
    if (v85 == v86)
      goto LABEL_66;
    while (1)
    {
      v39 = (uint64_t (***)(_QWORD))*v37;
      sub_20B930554(*v37, v72);
      v91 = (uint64_t **)(**v39)(v39);
      *(_QWORD *)&__dst = &unk_24C459188;
      v96 = &__dst;
      sub_20B8FDA94(a2, &v91, 1, 0, (uint64_t)&__dst);
      v40 = v96;
      if (v96 == &__dst)
        break;
      if (v96)
      {
        v41 = 5;
LABEL_55:
        (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
      }
      v42 = v91;
      v91 = 0;
      if (v42)
        ((void (*)(uint64_t **))(*v42)[2])(v42);
      if (++v37 == v38)
        goto LABEL_66;
    }
    v40 = &__dst;
    v41 = 4;
    goto LABEL_55;
  }
  v25 = 0;
  v70 = 88 * v24;
  while (1)
  {
    v26 = v88;
    v27 = (char *)v88 + v25;
    if (*((char *)v88 + v25 + 23) < 0)
    {
      sub_20B88DD4C(&__dst, *(void **)v27, *((_QWORD *)v27 + 1));
    }
    else
    {
      v28 = *(_OWORD *)v27;
      v95 = (void **)*((_QWORD *)v27 + 2);
      __dst = v28;
    }
    v96 = 0;
    v97 = 0;
    v98 = 0;
    sub_20B88DCD4(&v96, *(const void **)((char *)v26 + v25 + 24), *(_QWORD *)((char *)v26 + v25 + 32), (uint64_t)(*(_QWORD *)((char *)v26 + v25 + 32) - *(_QWORD *)((char *)v26 + v25 + 24)) >> 3);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    sub_20B87ACC8(&v99, *(const void **)((char *)v26 + v25 + 48), *(_QWORD *)((char *)v26 + v25 + 56), (uint64_t)(*(_QWORD *)((char *)v26 + v25 + 56) - *(_QWORD *)((char *)v26 + v25 + 48)) >> 1);
    v29 = *(float *)((char *)v26 + v25 + 72);
    v103 = *(_WORD *)((char *)v26 + v25 + 76);
    v102 = v29;
    v30 = SHIBYTE(v95) >= 0 ? (char *)&__dst : (char *)__dst;
    v31 = SHIBYTE(v95) >= 0 ? HIBYTE(v95) : *((_QWORD *)&__dst + 1);
    sub_20B88C9DC(v30, v31, v71, v72, v103 & 1, 76, 6, 0, (uint64_t *)&v91, v102);
    v32 = v91;
    if (!v91)
      break;
    v91 = 0;
    v92[0] = &unk_24C459188;
    v81 = v32;
    v93 = v92;
    sub_20B8FDA94(&v82, &v81, 1, 0, (uint64_t)v92);
    v33 = v93;
    if (v93 == v92)
    {
      v33 = v92;
      v34 = 4;
      goto LABEL_38;
    }
    if (v93)
    {
      v34 = 5;
LABEL_38:
      (*(void (**)(void))(*v33 + 8 * v34))();
    }
    v35 = v81;
    v81 = 0;
    if (v35)
      ((void (*)(uint64_t **))(*v35)[2])(v35);
    v36 = v91;
    v91 = 0;
    if (v36)
      ((void (*)(uint64_t **))(*v36)[2])(v36);
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    if (SHIBYTE(v95) < 0)
      operator delete((void *)__dst);
    v25 += 88;
    if (v70 == v25)
      goto LABEL_50;
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (SHIBYTE(v95) < 0)
    operator delete((void *)__dst);
LABEL_66:
  v82 = (__int128 **)&unk_24C460D28;
  v91 = &v85;
  sub_20B882410((void ***)&v91);
  sub_20B84055C((uint64_t)v83);
LABEL_67:
  v82 = &v88;
  sub_20B931D88((void ***)&v82);
  v19 = *(_DWORD *)(a1 + 56);
LABEL_68:
  if ((v19 & 0x40000) == 0)
  {
    v43 = *(_QWORD *)(a1 + 152);
    if (v43)
    {
      v44 = atomic_load((unsigned __int8 *)(v43 + 97));
      if ((v44 & 1) == 0)
      {
        v45 = atomic_load((unsigned __int8 *)(v43 + 96));
        if ((v45 & 1) != 0)
        {
          LODWORD(v82) = 0;
          v46 = *(_QWORD *)(a1 + 152);
          v47 = v77;
          v48 = (__int128 *)operator new(0x20uLL);
          *(_QWORD *)v48 = &off_24C46B000;
          *((_QWORD *)v48 + 1) = a2;
          *((_QWORD *)v48 + 2) = &v71;
          *((_QWORD *)v48 + 3) = &v82;
          v96 = v48;
          sub_20B8F62A0(v46, v47, (uint64_t)&__dst, 3);
          v49 = v96;
          if (v96 == &__dst)
          {
            v50 = 4;
            v49 = &__dst;
LABEL_76:
            (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
          }
          else if (v96)
          {
            v50 = 5;
            goto LABEL_76;
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 58) & 4) == 0)
  {
    v51 = *(_QWORD *)(a1 + 136);
    if (v51)
    {
      v52 = atomic_load((unsigned __int8 *)(v51 + 97));
      if ((v52 & 1) == 0)
      {
        v53 = atomic_load((unsigned __int8 *)(v51 + 96));
        if ((v53 & 1) != 0)
        {
          LODWORD(v82) = 0;
          v54 = *(_QWORD *)(a1 + 136);
          v55 = v77;
          v56 = (__int128 *)operator new(0x28uLL);
          *(_QWORD *)v56 = &off_24C46AF50;
          *((_QWORD *)v56 + 1) = a1;
          *((_QWORD *)v56 + 2) = a2;
          *((_QWORD *)v56 + 3) = &v71;
          *((_QWORD *)v56 + 4) = &v82;
          v96 = v56;
          sub_20B8F62A0(v54, v55, (uint64_t)&__dst, 3);
          v57 = v96;
          if (v96 == &__dst)
          {
            v58 = 4;
            v57 = &__dst;
LABEL_85:
            (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
          }
          else if (v96)
          {
            v58 = 5;
            goto LABEL_85;
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 58) & 4) == 0)
  {
    v59 = *(_QWORD *)(a1 + 144);
    if (v59)
    {
      v60 = atomic_load((unsigned __int8 *)(v59 + 97));
      if ((v60 & 1) == 0)
      {
        v61 = atomic_load((unsigned __int8 *)(v59 + 96));
        if ((v61 & 1) != 0)
        {
          LODWORD(v82) = 0;
          v62 = *(_QWORD *)(a1 + 144);
          v63 = v77;
          v64 = (__int128 *)operator new(0x28uLL);
          *(_QWORD *)v64 = &off_24C46AEF8;
          *((_QWORD *)v64 + 1) = a1;
          *((_QWORD *)v64 + 2) = a2;
          *((_QWORD *)v64 + 3) = &v71;
          *((_QWORD *)v64 + 4) = &v82;
          v96 = v64;
          sub_20B8F5F30(v62, v63, (uint64_t)&__dst);
          v65 = v96;
          if (v96 == &__dst)
          {
            v66 = 4;
            v65 = &__dst;
LABEL_94:
            (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
          }
          else if (v96)
          {
            v66 = 5;
            goto LABEL_94;
          }
        }
      }
    }
  }
  *(_QWORD *)&__dst = &unk_24C469588;
  *((_QWORD *)&__dst + 1) = sub_20B8FF5C0;
  v96 = &__dst;
  sub_20B8FDD20(a2, (uint64_t)&__dst);
  v67 = v96;
  if (v96 == &__dst)
  {
    v68 = 4;
    v67 = &__dst;
LABEL_99:
    (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
  }
  else if (v96)
  {
    v68 = 5;
    goto LABEL_99;
  }
LABEL_100:
  if (cf)
    CFRelease(cf);
  return sub_20B9D98E4((uint64_t)v80);
}

void sub_20B92F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  const void *v17;
  va_list va;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v17 = va_arg(va1, const void *);
  v16 = *(_QWORD **)(v13 - 168);
  if (v16 == v12)
  {
    v14 = 4;
    v16 = (_QWORD *)(v13 - 192);
  }
  else
  {
    if (!v16)
      goto LABEL_7;
    v14 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v14))();
LABEL_7:
  sub_20B930A90((const void **)va, 0);
  sub_20B9D98E4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B92F4DC(void *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  JUMPOUT(0x20B92F4D4);
}

void sub_20B92F4EC()
{
  JUMPOUT(0x20B92F4D4);
}

uint64_t sub_20B92F4F4(uint64_t *a1, CFArrayRef theArray, int a3, uint64_t a4)
{
  uint64_t v8;
  _BOOL8 v10;
  const __CFString *v11;
  const __CFString *v12;
  CFIndex Length;
  CFMutableArrayRef v14;
  uint64_t v15;
  uint64_t v16;

  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray))
  {
    v8 = sub_20B9112A8(theArray);
    if (v8)
    {
      if (v8 == CFArrayGetCount(theArray))
        return sub_20B92F9B0(a1, theArray, a3, a4);
    }
    else
    {
      v11 = sub_20B911348(theArray);
      if (v11)
      {
        v12 = v11;
        Length = CFStringGetLength(v11);
        v10 = Length != 0;
        if (Length)
        {
          sub_20B92F658((uint64_t)a1, a4, a3);
          v14 = sub_20B91158C(theArray);
          sub_20B92E648((uint64_t)a1, v12, v15, v16, v14);
          if (v14)
            CFRelease(v14);
        }
        CFRelease(v12);
        return v10;
      }
    }
    return 0;
  }
  sub_20B92F658((uint64_t)a1, a4, a3);
  sub_20B92F774((uint64_t)a1);
  return 1;
}

void sub_20B92F624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_20B88B74C(&a9, 0);
  sub_20B87E150(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B92F658(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (a2)
  {
    v6 = operator new();
    sub_20B96A820(v6, a2);
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = *(_QWORD *)(a1 + 64);
    }
    sub_20B8B362C(a1 + 8, v6);
    v8 = *(_QWORD *)(a1 + 104);
    v9 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270];
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v11 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v11 = 0;
    }
    sub_20B8B362C(a1 + 8, v11);
    v8 = *(_QWORD *)(a1 + 104);
    v9 = 1;
  }
  *(_BYTE *)(v8 + 96) = v9;
  result = sub_20B9F4868(a3, a2, 0);
  *(_DWORD *)(a1 + 56) = result;
  return result;
}

void sub_20B92F750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4095D43ACALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B92F774(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  os_signpost_id_t ptr;
  uint8_t buf[8];
  BOOL (*v17)(_QWORD *, _QWORD *);
  uint8_t *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  ptr = 0;
  v2 = sub_20B9A7C5C(0xDu);
  ptr = os_signpost_id_make_with_pointer(v2, &ptr);
  v3 = sub_20B9A7C5C(0xDu);
  v4 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v3;
    if (os_signpost_enabled(v3))
    {
      LOWORD(v12) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, (uint8_t *)&v12, 2u);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 16))(&v12, *(_QWORD *)(a1 + 120), a1 + 8);
  *(_QWORD *)buf = &unk_24C469588;
  v17 = sub_20B8FF5C0;
  v18 = buf;
  sub_20B8FDD20(&v12, (uint64_t)buf);
  v6 = v18;
  if (v18 == buf)
  {
    v7 = 4;
    v6 = buf;
    goto LABEL_8;
  }
  if (v18)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  sub_20B8FED50((uint64_t)&v12, 5u, (uint64_t)"Final", 0, 1u);
  sub_20B92E9DC(a1, (uint64_t)&v12);
  v8 = sub_20B9A7C5C(0xDu);
  v9 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v10, OS_SIGNPOST_INTERVAL_END, v9, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v12 = &unk_24C460D28;
  *(_QWORD *)buf = &v14;
  sub_20B882410((void ***)buf);
  sub_20B84055C((uint64_t)&v13);
  return 1;
}

void sub_20B92F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B881268((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B92F9B0(uint64_t *a1, const __CFArray *a2, int a3, uint64_t a4)
{
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  BOOL v13;
  CFIndex v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  _BOOL4 v18;
  const void *v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  const __CFArray *v28;
  __CFArray *Mutable;
  CFIndex v30;
  const __CFArray *ValueAtIndex;
  __CFString *v32;
  CFIndex v33;
  const __CFArray *v34;
  __CFString *v35;
  void *v36;
  char v37;
  NSObject *v38;
  __CFString *v39;
  NSObject *v40;
  float v41;
  float v42;
  const void **v43;
  const void **v44;
  const void **v45;
  _BYTE *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54[3];
  CFArrayRef theArray;
  __CFString *v56;
  uint64_t v57;
  void *__p;
  _BYTE *v59;
  void **v60;
  _QWORD v61[3];
  _QWORD *v62;
  _BYTE buf[24];
  __int128 v64;
  int v65;
  const void **v66;
  const void **v67;
  uint64_t v68;
  __CFArray *v69;
  __int128 v70;
  __int128 v71;
  int v72;
  _QWORD v73[6];

  v73[3] = *MEMORY[0x24BDAC8D0];
  sub_20B92F658((uint64_t)a1, a4, a3);
  if (a4)
    *(_QWORD *)(a1[27] + 144) = a4;
  (*(void (**)(uint64_t))(*(_QWORD *)a1[13] + 32))(a1[13]);
  sub_20B9727D8(a1[13], 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1[27] + 16))(a1[27]);
  Count = CFArrayGetCount(a2);
  v8 = Count - 1;
  if (Count < 1)
  {
LABEL_18:
    if (*(_QWORD *)(a1[27] + 16) - *(_QWORD *)(a1[27] + 8) < 0x10uLL)
      return 0;
    theArray = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    memset(v54, 0, sizeof(v54));
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v22 = a1[27];
    v23 = operator new(0x28uLL);
    *v23 = &off_24C46A240;
    v23[1] = a1;
    v23[2] = &theArray;
    v23[3] = v54;
    v23[4] = &v51;
    *(_QWORD *)&v71 = v23;
    sub_20B956C94(v22, 0x32uLL, (uint64_t)&v69, 1);
    v24 = (void **)v71;
    if ((__CFArray **)v71 == &v69)
    {
      v25 = 4;
      v24 = (void **)&v69;
    }
    else
    {
      if (!(_QWORD)v71)
      {
LABEL_26:
        v26 = v51;
        v20 = v51 != v52;
        if (v51 == v52)
          goto LABEL_77;
        v27 = sub_20B9A7C5C(0xFu);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v28 = theArray;
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          v30 = 0;
          v69 = Mutable;
          while (v30 < CFArrayGetCount(v28))
          {
            ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v28, v30);
            v32 = sub_20B93036C(ValueAtIndex, CFSTR("|"));
            *(_QWORD *)buf = v32;
            CFArrayAppendValue(Mutable, v32);
            if (v32)
              CFRelease(v32);
            ++v30;
          }
          sub_20B9F4A64((unint64_t)"[CPSearch]", Mutable, &v51);
          if (Mutable)
            CFRelease(Mutable);
        }
        v33 = 0;
        v69 = (__CFArray *)&unk_24C460D28;
        v70 = 0u;
        v71 = 0u;
        v72 = 1065353216;
        memset(v73, 0, 24);
LABEL_36:
        if (v33 >= CFArrayGetCount(theArray))
        {
          *(_QWORD *)buf = &unk_24C469588;
          *(_QWORD *)&buf[8] = sub_20B8FF5C0;
          *(_QWORD *)&v64 = buf;
          sub_20B8FDD20(&v69, (uint64_t)buf);
          v49 = (_QWORD *)v64;
          if ((_BYTE *)v64 == buf)
          {
            v50 = 4;
            v49 = buf;
            v20 = v20;
LABEL_75:
            (*(void (**)(void))(*v49 + 8 * v50))();
          }
          else
          {
            v20 = v20;
            if ((_QWORD)v64)
            {
              v50 = 5;
              goto LABEL_75;
            }
          }
          sub_20B9F49BC(&v69);
          sub_20B92E9DC((uint64_t)a1, (uint64_t)&v69);
          v69 = (__CFArray *)&unk_24C460D28;
          *(_QWORD *)buf = v73;
          sub_20B882410((void ***)buf);
          sub_20B84055C((uint64_t)&v70);
          v26 = v51;
LABEL_77:
          if (v26)
          {
            v52 = v26;
            operator delete(v26);
          }
          if (v54[0])
            operator delete(v54[0]);
          if (theArray)
            CFRelease(theArray);
          return v20;
        }
        v34 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v33);
        v35 = sub_20B93036C(v34, 0);
        if (!CFStringGetLength(v35))
          goto LABEL_66;
        *(_DWORD *)buf = 0;
        v56 = 0;
        sub_20B8D0624(v35, (CFIndex *)&v56, &__p);
        v36 = __p;
        if (sub_20BA22818(a1[14], (uint64_t)__p, (uint64_t)v56, buf))
        {
          v37 = sub_20B930328((uint64_t)a1, (uint64_t)v35, *(int *)buf);
          if (!v36)
          {
LABEL_43:
            if ((v37 & 1) != 0)
              goto LABEL_66;
            v38 = sub_20B9A7C5C(0xFu);
            if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
              goto LABEL_48;
            v39 = sub_20B93036C(v34, CFSTR("|"));
            v56 = v39;
            v40 = sub_20B9A7C5C(0xFu);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v33;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v39;
              _os_log_debug_impl(&dword_20B7F7000, v40, OS_LOG_TYPE_DEBUG, "[CPSearch Candidate] Index: %ld %@", buf, 0x16u);
              if (!v39)
                goto LABEL_48;
            }
            else if (!v39)
            {
LABEL_48:
              *(_QWORD *)buf = &unk_24C460D28;
              *(_OWORD *)&buf[8] = 0u;
              v64 = 0u;
              v65 = 1065353216;
              v67 = 0;
              v68 = 0;
              v66 = 0;
              v41 = *((float *)v51 + v33);
              v42 = *(float *)v51;
              sub_20B8D0790(v35, (UniChar **)&__p);
              sub_20BA21B8C((uint64_t)__p, (v59 - (_BYTE *)__p) >> 1, &v56, (float)(v41 - v42) * 0.3);
              sub_20B92EB38((uint64_t)a1, buf, (uint64_t)&v56, (uint64_t)&__p, 1);
              v56 = (__CFString *)&unk_24C499568;
              v60 = (void **)&v57;
              sub_20B88DF54(&v60);
              if (__p)
              {
                v59 = __p;
                operator delete(__p);
              }
              v44 = v66;
              v43 = v67;
              if (((*(_QWORD *)((char *)v54[0] + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v33) & 1) != 0
                && v66 != v67)
              {
                v45 = v66;
                do
                {
                  if (*v45)
                  {
                    v46 = __dynamic_cast(*v45, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C378, 0);
                    if (v46)
                      v46[154] = 1;
                  }
                  ++v45;
                }
                while (v45 != v43);
              }
              while (1)
              {
                if (v44 == v43)
                {
                  *(_QWORD *)buf = &unk_24C460D28;
                  v56 = (__CFString *)&v66;
                  sub_20B882410((void ***)&v56);
                  sub_20B84055C((uint64_t)&buf[8]);
LABEL_66:
                  if (v35)
                    CFRelease(v35);
                  ++v33;
                  goto LABEL_36;
                }
                v61[0] = &unk_24C459188;
                v62 = v61;
                sub_20B8FDA94(&v69, (_QWORD **)v44, 1, 0, (uint64_t)v61);
                v47 = v62;
                if (v62 == v61)
                {
                  v47 = v61;
                  v48 = 4;
                }
                else
                {
                  if (!v62)
                    goto LABEL_63;
                  v48 = 5;
                }
                (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_63:
                ++v44;
              }
            }
            CFRelease(v39);
            goto LABEL_48;
          }
        }
        else
        {
          v37 = 0;
          if (!v36)
            goto LABEL_43;
        }
        MEMORY[0x20BD39C80](v36, 0x1000C80BDFB0063);
        goto LABEL_43;
      }
      v25 = 5;
    }
    (*((void (**)(void))*v24 + v25))();
    goto LABEL_26;
  }
  v9 = Count;
  v10 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(a2, 0) + 3);
  if (!v10)
    return 0;
  v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45CA68, 0);
  if (!v11)
    return 0;
  v12 = v11;
  v13 = 0;
  v14 = 1;
  do
  {
    if (v14 - 1 >= v8 || (v15 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(a2, v14) + 3)) == 0)
    {
      v17 = a1[27];
LABEL_12:
      v18 = 1;
      goto LABEL_13;
    }
    v16 = __dynamic_cast(v15, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45CA68, 0);
    v17 = a1[27];
    if (!v16)
      goto LABEL_12;
    v18 = v12[16] == 2;
LABEL_13:
    if (!sub_20B9551A8(v17, (uint64_t)v12, v18))
      break;
    v13 = v14 >= v9;
    if (v9 == v14)
      break;
    v19 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(a2, v14) + 3);
    if (!v19)
      break;
    v12 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45CA68, 0);
    ++v14;
  }
  while (v12);
  if (v13)
    goto LABEL_18;
  return 0;
}

void sub_20B930140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B930328(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 & 0x1000000) != 0)
    return 1;
  if ((a3 & 0x800000) == 0)
    return 0;
  if ((*(_BYTE *)(a1 + 58) & 4) != 0)
    return 1;
  return sub_20BA14534(*(uint64_t **)(a1 + 96), a2) ^ 1;
}

__CFString *sub_20B93036C(const __CFArray *a1, const __CFString *a2)
{
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  CFIndex i;
  const __CFString *ValueAtIndex;

  Mutable = CFStringCreateMutable(0, 0);
  Count = CFArrayGetCount(a1);
  v6 = Count - 1;
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
      CFStringAppend(Mutable, ValueAtIndex);
      if (a2 && i < v6)
        CFStringAppend(Mutable, a2);
    }
  }
  return Mutable;
}

BOOL sub_20B930404(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v5 = (_QWORD *)a4;
    sub_20B92F658(a1, a4, a3);
    if (v5)
    {
      sub_20B96AE80((uint64_t)v5);
      v5 = (_QWORD *)v5[6];
    }
    if (CFStringGetLength(a2) < 1)
      sub_20B92F774(a1);
    else
      sub_20B92E648(a1, a2, v7, v8, v5);
  }
  return a2 != 0;
}

uint64_t sub_20B930480(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  sub_20B8D0790(a2, (UniChar **)&__p);
  sub_20B88C9DC((char *)__p, (v8 - (_BYTE *)__p) >> 1, __p, (v8 - (_BYTE *)__p) >> 1, 0, 0, 6, 0, &v6, 0.0);
  v2 = v6;
  v6 = 0;
  v3 = sub_20B8E1754(v2);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_20B930518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 16))(a9);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B930554(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  if (*(char *)(a1 + 55) >= 0)
    v4 = *(unsigned __int8 *)(a1 + 55);
  else
    v4 = *(_DWORD *)(a1 + 40);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v5);
  v7 = v4 - a2;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  switch(v9)
  {
    case 'A':
      v13 = (int)(*(float *)(a1 + 96) * -4400.0) + 20000;
      if (v7 >= 1)
        v8 = v13 + 6000 * v7;
      else
        v8 = v13;
      break;
    case 'U':
      v8 = ((int)(*(float *)(a1 + 96) * -4400.0) + 8000);
      break;
    case 'L':
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v11 = 1000 * v7;
      if (v7 <= 0)
        v11 = 0;
      v12 = v11 - 8000 * v6 + v8;
      if (v10)
        v8 = v12;
      else
        v8 = 5000;
      break;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1) & 1) == 0)
    *(_DWORD *)(a1 + 136) = 83;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, v8);
}

void sub_20B9306B0(_QWORD *a1)
{
  const __CFURL *v2;
  const __CFURL *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  if (*(_BYTE *)(*a1 + 7))
  {
    v2 = CFURLCreateWithFileSystemPath(0, *(CFStringRef *)(*a1 + 136), kCFURLPOSIXPathStyle, 1u);
    v8[1] = (uint64_t)v2;
    if (v2)
    {
      v3 = v2;
      sub_20B9F4098(v2, CFSTR("th.rnnlm"), CFSTR("th"), v8);
      v4 = v8[0];
      if (v8[0])
      {
        v8[0] = 0;
        v5 = a1[10];
        a1[10] = v4;
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          v4 = a1[10];
          v5 = v8[0];
        }
        *(_QWORD *)(*(_QWORD *)(a1[16] + 16) + 8) = v4;
        v6 = a1[15];
        v7 = a1[10];
        *(_QWORD *)(v6 + 16) = v7;
        *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) = v7;
        *(_BYTE *)(*a1 + 7) = 0;
        v8[0] = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      CFRelease(v3);
    }
  }
}

void sub_20B93078C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9307A4(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_24C461808;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_DWORD *)(v4 + 88) = 1065353216;
    *(_WORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_DWORD *)(v4 + 112) = 2;
    *(_QWORD *)(v4 + 120) = 0;
    v5 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(_QWORD *)(a1 + 136);
    }
    sub_20B8F4AC4(v4, a2, *(unsigned __int8 *)(a1 + 224));
  }
}

void sub_20B930850(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_24C461808;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_DWORD *)(v4 + 88) = 1065353216;
    *(_WORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_DWORD *)(v4 + 112) = 1;
    *(_QWORD *)(v4 + 120) = 0;
    v5 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(_QWORD *)(a1 + 144);
    }
    sub_20B8F4AC4(v4, a2, *(unsigned __int8 *)(a1 + 224));
  }
}

void sub_20B9308FC(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_24C461808;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_DWORD *)(v4 + 88) = 1065353216;
    *(_WORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_DWORD *)(v4 + 112) = 3;
    *(_QWORD *)(v4 + 120) = 0;
    v5 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(_QWORD *)(a1 + 152);
    }
    sub_20B8F4AC4(v4, a2, *(unsigned __int8 *)(a1 + 224));
  }
}

uint64_t sub_20B9309A8(uint64_t a1, const char *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;

  if (!a3)
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 104) + 104);
  if (!v4)
    return 0;
  v5 = objc_msgSend_rawCandidate(a3, a2, (uint64_t)a3);
  v8 = (const __CFString *)v5;
  if (v5)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v10 = 40;
    if (!v9)
      v10 = 24;
    v8 = (const __CFString *)(*(uint64_t (**)(const __CFString *))((char *)v8->isa + v10))(v8);
  }
  v11 = objc_msgSend_rawCandidate(v4, v6, v7);
  if (v11)
  {
    v12 = (_QWORD *)v11;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v14 = 40;
    if (!v13)
      v14 = 24;
    v15 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v12 + v14))(v12);
  }
  else
  {
    v15 = 0;
  }
  if (CFStringCompare(v8, v15, 0) == kCFCompareEqualTo)
    return sub_20B9730D8(*(_QWORD *)(a1 + 104));
  else
    return 0;
}

void sub_20B930A90(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B930AC4(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  int v19;
  unint64_t v20;
  __int128 *v21;
  __int128 *v22;
  int v23;
  __int128 *v24;
  int v25;
  unint64_t v26;
  __int128 *v27;
  int v28;
  int v29;
  int v30;
  __int128 *v31;
  BOOL v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  __int128 *v39;
  __int128 *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  void *v101[2];
  uint64_t v102;
  void *v103[2];
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  int v107;
  __int16 v108;
  int v109;
  void *v110[2];
  uint64_t v111;
  void *v112[2];
  uint64_t v113;
  void *__p[2];
  uint64_t v115;
  int v116;
  __int16 v117;
  int v118;

void sub_20B9316FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;

  v7 = (int *)(a2 + 80);
  v6 = *(_DWORD *)(a2 + 80);
  v8 = (int *)(a1 + 80);
  v10 = (int *)(a3 + 80);
  v9 = *(_DWORD *)(a3 + 80);
  if (v6 > *(_DWORD *)(a1 + 80))
  {
    if (v9 <= v6)
    {
      sub_20B931AE8((uint64_t *)a1, (__int128 *)a2);
      v12 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 80) = v12;
      if (*v10 <= v12)
        return;
      sub_20B931AE8((uint64_t *)a2, (__int128 *)a3);
      v8 = v7;
    }
    else
    {
      sub_20B931AE8((uint64_t *)a1, (__int128 *)a3);
    }
    v7 = v10;
    goto LABEL_10;
  }
  if (v9 > v6)
  {
    sub_20B931AE8((uint64_t *)a2, (__int128 *)a3);
    v11 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a3 + 80) = v11;
    if (*(_DWORD *)(a2 + 80) > *v8)
    {
      sub_20B931AE8((uint64_t *)a1, (__int128 *)a2);
LABEL_10:
      v13 = *v8;
      *v8 = *v7;
      *v7 = v13;
    }
  }
}

BOOL sub_20B9317F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  int v28;
  __int16 v29;
  int v30;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 80))
      {
        sub_20B931AE8((uint64_t *)a1, (__int128 *)(a2 - 88));
        v6 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        return 1;
      }
      return result;
    case 3:
      sub_20B9316FC(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_20B931C54(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_20B931C54(a1, a1 + 88, a1 + 176, a1 + 264);
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 344))
      {
        sub_20B931AE8((uint64_t *)(a1 + 264), (__int128 *)(a2 - 88));
        v16 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v16;
        if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
        {
          sub_20B931AE8((uint64_t *)(a1 + 176), (__int128 *)(a1 + 264));
          v17 = *(_DWORD *)(a1 + 256);
          v18 = *(_DWORD *)(a1 + 344);
          *(_DWORD *)(a1 + 256) = v18;
          *(_DWORD *)(a1 + 344) = v17;
          if (v18 > *(_DWORD *)(a1 + 168))
          {
            sub_20B931AE8((uint64_t *)(a1 + 88), (__int128 *)(a1 + 176));
            v19 = *(_DWORD *)(a1 + 168);
            v20 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)(a1 + 168) = v20;
            *(_DWORD *)(a1 + 256) = v19;
            if (v20 > *(_DWORD *)(a1 + 80))
            {
              sub_20B931AE8((uint64_t *)a1, (__int128 *)(a1 + 88));
              v21 = *(_DWORD *)(a1 + 80);
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 168);
              *(_DWORD *)(a1 + 168) = v21;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 176;
      sub_20B9316FC(a1, a1 + 88, a1 + 176);
      v8 = a1 + 264;
      if (a1 + 264 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 80);
    if (v11 > *(_DWORD *)(v7 + 80))
    {
      *(_OWORD *)v22 = *(_OWORD *)v8;
      v23 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)v24 = *(_OWORD *)(v8 + 24);
      v25 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v8 + 48);
      v27 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v12 = *(_DWORD *)(v8 + 72);
      v29 = *(_WORD *)(v8 + 76);
      v28 = v12;
      v13 = v9;
      v30 = v11;
      while (1)
      {
        sub_20B931D0C(a1 + v13 + 264, (__int128 *)(a1 + v13 + 176));
        if (v13 == -176)
          break;
        v14 = *(_DWORD *)(a1 + v13 + 168);
        v13 -= 88;
        if (v30 <= v14)
        {
          v15 = a1 + v13 + 264;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      sub_20B931D0C(v15, (__int128 *)v22);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
      if (++v10 == 8)
        return v8 + 88 == a2;
    }
    v7 = v8;
    v9 += 88;
    v8 += 88;
    if (v8 == a2)
      return 1;
  }
}

__n128 sub_20B931AE8(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void *v12;
  void *v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  int v17;
  __int16 v18;
  _BYTE v19[15];

  v4 = *a1;
  *(_QWORD *)v19 = a1[1];
  *(_QWORD *)&v19[7] = *(uint64_t *)((char *)a1 + 15);
  v5 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v7 = *(_OWORD *)(a1 + 3);
  v6 = a1 + 3;
  v8 = a1[5];
  *v6 = 0;
  a1[4] = 0;
  a1[5] = 0;
  v15 = v7;
  v16 = *((__n128 *)a1 + 3);
  v9 = a1[8];
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v18 = *((_WORD *)a1 + 38);
  v17 = *((_DWORD *)a1 + 18);
  v10 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((_BYTE *)a2 + 23) = 0;
  *(_WORD *)a2 = 0;
  sub_20B824BE4((uint64_t)v6, (__n128 *)((char *)a2 + 24));
  sub_20B824BE4((uint64_t)(a1 + 6), (__n128 *)a2 + 3);
  v11 = *((_DWORD *)a2 + 18);
  *((_WORD *)a1 + 38) = *((_WORD *)a2 + 38);
  *((_DWORD *)a1 + 18) = v11;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v4;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v19;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v19[7];
  *((_BYTE *)a2 + 23) = v5;
  v12 = (void *)*((_QWORD *)a2 + 3);
  if (v12)
  {
    *((_QWORD *)a2 + 4) = v12;
    operator delete(v12);
  }
  *(__int128 *)((char *)a2 + 24) = v15;
  *((_QWORD *)a2 + 5) = v8;
  v13 = (void *)*((_QWORD *)a2 + 6);
  if (v13)
  {
    *((_QWORD *)a2 + 7) = v13;
    operator delete(v13);
  }
  result = v16;
  a2[3] = (__int128)v16;
  *((_QWORD *)a2 + 8) = v9;
  *((_DWORD *)a2 + 18) = v17;
  *((_WORD *)a2 + 38) = v18;
  return result;
}

void sub_20B931C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;

  sub_20B9316FC(a1, a2, a3);
  if (*(_DWORD *)(a4 + 80) > *(_DWORD *)(a3 + 80))
  {
    sub_20B931AE8((uint64_t *)a3, (__int128 *)a4);
    v8 = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a3 + 80) = *(_DWORD *)(a4 + 80);
    *(_DWORD *)(a4 + 80) = v8;
    if (*(_DWORD *)(a3 + 80) > *(_DWORD *)(a2 + 80))
    {
      sub_20B931AE8((uint64_t *)a2, (__int128 *)a3);
      v9 = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
      *(_DWORD *)(a3 + 80) = v9;
      if (*(_DWORD *)(a2 + 80) > *(_DWORD *)(a1 + 80))
      {
        sub_20B931AE8((uint64_t *)a1, (__int128 *)a2);
        v10 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
        *(_DWORD *)(a2 + 80) = v10;
      }
    }
  }
}

uint64_t sub_20B931D0C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  int v5;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_WORD *)a2 = 0;
  sub_20B824BE4(a1 + 24, (__n128 *)((char *)a2 + 24));
  sub_20B824BE4(a1 + 48, (__n128 *)a2 + 3);
  v5 = *((_DWORD *)a2 + 18);
  *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 38);
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  return a1;
}

void sub_20B931D88(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_20B88DA78(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B931DFC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B931E10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46A298;
  return result;
}

void sub_20B931E34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46A298;
}

BOOL sub_20B931E4C(uint64_t a1, unsigned __int16 *a2)
{
  return *a2 - 3585 < 0x5B;
}

uint64_t sub_20B931E60(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE30))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B931E9C()
{
  return &unk_24C45EE30;
}

const void **sub_20B931EA8(const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B951828(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B931EE8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B931EFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46A240;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B931F3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A240;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B931F64(uint64_t a1, _QWORD **a2, uint64_t a3, double *a4)
{
  _QWORD *v5;
  double v6;
  uint64_t v7;
  __CFArray *Mutable;
  const void *v9;
  int v10;
  BOOL v11;
  const void *v12;
  __CFArray *v13;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  unint64_t v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  char *v29;
  float v30;
  int v31;
  BOOL v32;

  v5 = *a2;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v9 = *(const void **)(*v5 + 112);
  if (v9
    && CFStringGetLength(*(CFStringRef *)(*v5 + 112))
    && (sub_20B930328(v7, (uint64_t)v9, *(_DWORD *)(*v5 + 104)) & 1) == 0)
  {
    v10 = *(_DWORD *)(*v5 + 104);
    CFArrayAppendValue(Mutable, v9);
    v11 = (v10 & 0x3800002) != 0;
    while (1)
    {
      v5 = (_QWORD *)v5[1];
      if (!v5 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5) & 1) != 0)
        break;
      v12 = *(const void **)(*v5 + 112);
      if (!v12
        || !CFStringGetLength(*(CFStringRef *)(*v5 + 112))
        || (sub_20B930328(v7, (uint64_t)v12, *(_DWORD *)(*v5 + 104)) & 1) != 0)
      {
        goto LABEL_4;
      }
      v11 = v11 || (*(_DWORD *)(*v5 + 104) & 0x3800002) != 0;
      CFArrayAppendValue(Mutable, v12);
    }
    if (CFArrayGetCount(Mutable))
    {
      v13 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      Count = CFArrayGetCount(Mutable);
      while (Count > 0)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, --Count);
        CFArrayAppendValue(v13, ValueAtIndex);
      }
      CFArrayAppendValue(**(CFMutableArrayRef **)(a1 + 16), v13);
      v16 = *(_QWORD *)(a1 + 24);
      v32 = v11;
      sub_20B932290(v16, &v32);
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(float **)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      if ((unint64_t)v18 >= v19)
      {
        v22 = *(float **)v17;
        v23 = ((uint64_t)v18 - *(_QWORD *)v17) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          sub_20B80CDD8();
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_20B8127BC(v17 + 16, v26);
          v22 = *(float **)v17;
          v18 = *(float **)(v17 + 8);
        }
        else
        {
          v27 = 0;
        }
        v28 = (float *)&v27[4 * v23];
        v29 = &v27[4 * v26];
        v30 = v6;
        *v28 = v30;
        v21 = v28 + 1;
        while (v18 != v22)
        {
          v31 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v28-- - 1) = v31;
        }
        *(_QWORD *)v17 = v28;
        *(_QWORD *)(v17 + 8) = v21;
        *(_QWORD *)(v17 + 16) = v29;
        if (v22)
          operator delete(v22);
      }
      else
      {
        v20 = v6;
        *v18 = v20;
        v21 = v18 + 1;
      }
      *(_QWORD *)(v17 + 8) = v21;
      if (v13)
        CFRelease(v13);
    }
  }
LABEL_4:
  if (Mutable)
    CFRelease(Mutable);
}

void sub_20B9321F8(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B932248(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B932284()
{
  return &unk_24C45EE20;
}

void sub_20B932290(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      sub_20B80CDD8();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20B932334((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void sub_20B932334(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_20B80CDD8();
    v10 = 0;
    v11 = 0uLL;
    sub_20B8293DC(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_20B9323F0(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_20B9323D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9323F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v6 = v5 - 1;
  }
  v7 = v6 >> 6;
  if (v5 >= 0x41)
    v8 = v7;
  else
    v8 = 0;
  *(_QWORD *)(*a1 + 8 * v8) = 0;
LABEL_9:
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)a3;
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *a1 + 8 * (v4 >> 6);
  v18 = *(_QWORD *)a2;
  v19 = v9;
  v16 = v10;
  v17 = v11;
  v14 = v12;
  v15 = v4 & 0x3F;
  sub_20B932494(&v18, &v16, &v14, (uint64_t)&v13);
}

void sub_20B932494(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  sub_20B932520((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_20B932520(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_20B9325F4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B932608(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46AEA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B932640(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AEA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B932660(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  __int16 **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int16 v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;
  int v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v24 = *a4;
  v6 = (__int16 **)sub_20B909B78(a3, off_2547292D0);
  sub_20B932868(&v22, *v6, v6[1], v6[1] - *v6);
  v7 = HIBYTE(v23);
  if (v23 < 0)
    v7 = *((_QWORD *)&v22 + 1);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 == *(_QWORD *)(v8 + 8))
  {
    if (v23 >= 0)
      v9 = &v22;
    else
      v9 = (__int128 *)v22;
    v10 = memcmp(v9, *(const void **)v8, 2 * v7) != 0;
  }
  else
  {
    v10 = 1;
  }
  v11 = *(_DWORD *)(a2 + 4);
  v16 = v23;
  *(_OWORD *)v15 = v22;
  v23 = 0;
  v22 = 0uLL;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = v11;
  v21 = v10;
  v12 = *(uint64_t **)(a1 + 8);
  v13 = v12[1];
  if (v13 >= v12[2])
  {
    v14 = sub_20B932904(v12, (__int128 *)v15, &v24);
  }
  else
  {
    sub_20B932A28((_QWORD *)v12[1], (__int128 *)v15, &v24);
    v14 = v13 + 88;
    v12[1] = v13 + 88;
  }
  v12[1] = v14;
  if (__p[1])
  {
    *(void **)&v19 = __p[1];
    operator delete(__p[1]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_20B9327C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v19 - 41) < 0)
    operator delete(*(void **)(v19 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B932820(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F060))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B93285C()
{
  return &unk_24C45F060;
}

_QWORD *sub_20B932868(_QWORD *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  if (a4 > 0xA)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a4 | 3) != 0xB)
      v8 = a4 | 3;
    result = sub_20B80FD48((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_WORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 2);
  }
  *(_WORD *)v4 = 0;
  return result;
}

uint64_t sub_20B932904(uint64_t *a1, __int128 *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x1745D1745D1745DLL)
    v11 = 0x2E8BA2E8BA2E8BALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B932B7C(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[88 * v5];
  v18 = &v12[88 * v11];
  sub_20B932A28(v16, a2, a3);
  v17 = v16 + 88;
  sub_20B932B08(a1, &v15);
  v13 = a1[1];
  sub_20B932C68((uint64_t)&v15);
  return v13;
}

void sub_20B932A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B932C68((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B932A28(_QWORD *__dst, __int128 *a2, _DWORD *a3)
{
  __int128 v6;
  int v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v6;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_20B88DCD4(__dst + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  __dst[6] = 0;
  __dst[7] = 0;
  __dst[8] = 0;
  sub_20B87ACC8(__dst + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 1);
  v7 = *((_DWORD *)a2 + 18);
  *((_WORD *)__dst + 38) = *((_WORD *)a2 + 38);
  *((_DWORD *)__dst + 18) = v7;
  *((_DWORD *)__dst + 20) = *a3;
  return __dst;
}

void sub_20B932AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B932B08(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_20B932BC4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_20B932B7C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_20B800BC0();
  return operator new(88 * a2);
}

__n128 sub_20B932BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;
  int v12;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a7 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 88);
      *(_QWORD *)(v9 - 72) = *(_QWORD *)(a3 + v7 - 72);
      *(_OWORD *)(v9 - 88) = v10;
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v8 - 72) = 0;
      *(_QWORD *)(v8 - 88) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_OWORD *)(v9 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 64) = 0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      result = *(__n128 *)(a3 + v7 - 40);
      *(__n128 *)(v9 - 40) = result;
      *(_QWORD *)(v9 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      v12 = *(_DWORD *)(a3 + v7 - 16);
      *(_WORD *)(v9 - 12) = *(_WORD *)(a3 + v7 - 12);
      *(_DWORD *)(v9 - 16) = v12;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_20B932C68(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_20B88DA78(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B932CB8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B932CCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46AF50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B932D0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AF50;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20B932D34(uint64_t a1, uint64_t a2, float *a3, _BYTE *a4)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  char v11;
  _QWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (**(int **)(a1 + 32) >= 2)
    *a4 = 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(char **)(a2 + 16);
  v10 = *(void **)v6;
  v11 = v7 != v8 || memcmp(*(const void **)(a2 + 16), *(const void **)v6, 2 * v7) != 0;
  sub_20B88C9DC(v9, v7, v10, v8, v11, 65, 6, 0, (uint64_t *)&v22, v5);
  sub_20B930554((uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  v12 = v22;
  v13 = (*(uint64_t (**)(_QWORD *))(*v22 + 112))(v22);
  v14 = *(_DWORD **)(a1 + 32);
  v15 = (*v14)++;
  (*(void (**)(_QWORD *, _QWORD))(*v12 + 480))(v12, (v15 + v13));
  v16 = *(_QWORD **)(a1 + 16);
  v21 = v22;
  v22 = 0;
  v23[0] = &unk_24C459188;
  v24 = v23;
  sub_20B8FDA94(v16, &v21, 1, 0, (uint64_t)v23);
  v17 = v24;
  if (v24 == v23)
  {
    v18 = 4;
    v17 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_11:
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 16))(v19);
  result = v22;
  v22 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  return result;
}

void sub_20B932F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B932F78(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F080))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B932FB4()
{
  return &unk_24C45F080;
}

void sub_20B932FC4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B932FD8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46AEF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B933018(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AEF8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20B933040(uint64_t a1, uint64_t a2, float *a3, _BYTE *a4)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  char v11;
  _QWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (**(int **)(a1 + 32) >= 2)
    *a4 = 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(char **)(a2 + 16);
  v10 = *(void **)v6;
  v11 = v7 != v8 || memcmp(*(const void **)(a2 + 16), *(const void **)v6, 2 * v7) != 0;
  sub_20B88C9DC(v9, v7, v10, v8, v11, 85, 6, 0, (uint64_t *)&v22, v5);
  sub_20B930554((uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  v12 = v22;
  v13 = (*(uint64_t (**)(_QWORD *))(*v22 + 112))(v22);
  v14 = *(_DWORD **)(a1 + 32);
  v15 = (*v14)++;
  (*(void (**)(_QWORD *, _QWORD))(*v12 + 480))(v12, (v15 + v13));
  v16 = *(_QWORD **)(a1 + 16);
  v21 = v22;
  v22 = 0;
  v23[0] = &unk_24C459188;
  v24 = v23;
  sub_20B8FDA94(v16, &v21, 1, 0, (uint64_t)v23);
  v17 = v24;
  if (v24 == v23)
  {
    v18 = 4;
    v17 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_11:
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 16))(v19);
  result = v22;
  v22 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  return result;
}

void sub_20B93320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B933284(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F070))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9332C0()
{
  return &unk_24C45F070;
}

void sub_20B9332D0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9332E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46AFA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B933324(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AFA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B93334C(_QWORD *a1, uint64_t a2, float *a3)
{
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  CFNumberRef v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  _QWORD *v23;
  int v24[2];
  _QWORD valuePtr[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = (uint64_t *)a1[2];
  v7 = v6[5] - 1;
  v8 = *v6;
  if (!*v6)
    v7 = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(char **)(a2 + 16);
  v11 = v9 != v7 || memcmp(*(const void **)(a2 + 16), (const void *)(v8 + 2), 2 * v7) != 0;
  sub_20B88C9DC(v10, v9, (void *)v8, v6[1], v11, 89, 6, 0, (uint64_t *)v24, v5);
  v12 = *(_QWORD *)v24;
  v13 = (_DWORD *)a1[3];
  v14 = (*v13)++;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 480))(v12, (v14 + 10000));
  v15 = *(_QWORD *)v24;
  valuePtr[0] = *(unsigned __int16 *)(a2 + 32);
  v16 = CFNumberCreate(0, kCFNumberCFIndexType, valuePtr);
  sub_20B88AE28((const void **)(v15 + 120), v16);
  sub_20B959CC0(*(uint64_t *)v24, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v17 = *(_QWORD **)v24;
  *(_BYTE *)(*(_QWORD *)v24 + 152) = 0;
  v18 = (_QWORD *)a1[1];
  v23 = v17;
  *(_QWORD *)v24 = 0;
  valuePtr[0] = &unk_24C459188;
  v26 = valuePtr;
  sub_20B8FDA94(v18, &v23, 1, 0, (uint64_t)valuePtr);
  v19 = v26;
  if (v26 == valuePtr)
  {
    v20 = 4;
    v19 = valuePtr;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  v21 = v23;
  v23 = 0;
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 16))(v21);
  result = *(_QWORD *)v24;
  *(_QWORD *)v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B933524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B93359C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9335D8()
{
  return &unk_24C45F090;
}

void sub_20B9335E8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9335FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B93363C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B000;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B933664(_QWORD *a1, uint64_t a2, float *a3)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  CFNumberRef v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  _QWORD *v23;
  int v24[2];
  _QWORD valuePtr[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = a1[2];
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(char **)(a2 + 16);
  v10 = *(void **)v6;
  v11 = v7 != v8 || memcmp(*(const void **)(a2 + 16), *(const void **)v6, 2 * v7) != 0;
  sub_20B88C9DC(v9, v7, v10, v8, v11, 89, 6, 0, (uint64_t *)v24, v5);
  v12 = *(_QWORD *)v24;
  v13 = (_DWORD *)a1[3];
  v14 = (*v13)++;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 480))(v12, (v14 + 10000));
  v15 = *(_QWORD *)v24;
  valuePtr[0] = *(unsigned __int16 *)(a2 + 32);
  v16 = CFNumberCreate(0, kCFNumberCFIndexType, valuePtr);
  sub_20B88AE28((const void **)(v15 + 120), v16);
  sub_20B959CC0(*(uint64_t *)v24, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v17 = *(_QWORD **)v24;
  *(_BYTE *)(*(_QWORD *)v24 + 152) = 0;
  v18 = (_QWORD *)a1[1];
  v23 = v17;
  *(_QWORD *)v24 = 0;
  valuePtr[0] = &unk_24C459188;
  v26 = valuePtr;
  sub_20B8FDA94(v18, &v23, 1, 0, (uint64_t)valuePtr);
  v19 = v26;
  if (v26 == valuePtr)
  {
    v20 = 4;
    v19 = valuePtr;
  }
  else
  {
    if (!v26)
      goto LABEL_9;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_9:
  v21 = v23;
  v23 = 0;
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 16))(v21);
  result = *(_QWORD *)v24;
  *(_QWORD *)v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B933834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9338AC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F0A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9338E8()
{
  return &unk_24C45F0A0;
}

void sub_20B933984()
{
  _QWORD *v0;
  char *v1;
  int v2;
  const UInt8 *v3;
  CFIndex v4;
  CFURLRef v5;
  const char *v6;

  v0 = (_QWORD *)sub_20B9AE60C();
  v1 = (char *)sub_20B9AE738(v0, 3, off_254729648[0], off_254729620[0], 0);
  v2 = v1[23];
  if (v2 >= 0)
    v3 = (const UInt8 *)v1;
  else
    v3 = *(const UInt8 **)v1;
  if (v2 >= 0)
    v4 = v1[23];
  else
    v4 = *((_QWORD *)v1 + 1);
  v5 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  qword_25472B948 = objc_msgSend_informationDictionaryAtPath_(MecabraWordProperties, v6, (uint64_t)v5);
  if (v5)
    CFRelease(v5);
}

void sub_20B933A58()
{
  _QWORD *v0;
  char *v1;
  int v2;
  const UInt8 *v3;
  CFIndex v4;
  CFURLRef v5;
  const char *v6;

  v0 = (_QWORD *)sub_20B9AE60C();
  v1 = (char *)sub_20B9AE738(v0, 3, off_254729648[0], off_254729628[0], 0);
  v2 = v1[23];
  if (v2 >= 0)
    v3 = (const UInt8 *)v1;
  else
    v3 = *(const UInt8 **)v1;
  if (v2 >= 0)
    v4 = v1[23];
  else
    v4 = *((_QWORD *)v1 + 1);
  v5 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  qword_25472B958 = objc_msgSend_informationDictionaryAtPath_(MecabraWordProperties, v6, (uint64_t)v5);
  if (v5)
    CFRelease(v5);
}

void sub_20B933C24()
{
  _QWORD *v0;
  char *v1;
  int v2;
  const UInt8 *v3;
  CFIndex v4;
  id v5;
  const char *v6;
  CFURLRef v7;

  v0 = (_QWORD *)sub_20B9AE60C();
  v1 = (char *)sub_20B9AE738(v0, 3, off_254729648[0], off_254729618[0], 0);
  v2 = v1[23];
  if (v2 >= 0)
    v3 = (const UInt8 *)v1;
  else
    v3 = *(const UInt8 **)v1;
  if (v2 >= 0)
    v4 = v1[23];
  else
    v4 = *((_QWORD *)v1 + 1);
  v7 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  v5 = objc_alloc(MEMORY[0x24BDBCE30]);
  qword_25472B968 = objc_msgSend_initWithContentsOfURL_(v5, v6, (uint64_t)v7);

}

uint64_t sub_20B934A60(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  std::string v8;
  void *v9[2];
  char v10;

  sub_20B8938D8(a2, "dicdir", v9);
  sub_20B80BBD0(__p, "char.bin");
  sub_20B8BC594((uint64_t)v9, (uint64_t)__p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v8;
  else
    v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
  v4 = sub_20B934B58(a1, (char *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
  return v4;
}

void sub_20B934B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B934B58(_QWORD *a1, char *a2)
{
  int *v4;
  int v5;
  _DWORD *v6;
  char *v7;
  int v8;
  char **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;

  if ((sub_20B8769A0((uint64_t)(a1 + 1), a2, "r") & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[49] - 24) + 392), 0);
    v21 = sub_20B828F84(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/char_property.cpp", 70);
    sub_20B828F84(v21, (uint64_t)"(", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = sub_20B828F84(v22, (uint64_t)") [", 3);
    v24 = sub_20B828F84(v23, (uint64_t)"cmmap_.open(filename, \"r\")", 26);
    v25 = "] ";
    v26 = 2;
LABEL_25:
    sub_20B828F84(v24, (uint64_t)v25, v26);
    return 0;
  }
  v4 = (int *)a1[2];
  v5 = *v4;
  if (((32 * *v4) | 4u) + 262140 != a1[3])
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[49] - 24) + 392), 0);
    v27 = sub_20B828F84(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/char_property.cpp", 70);
    sub_20B828F84(v27, (uint64_t)"(", 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_20B828F84(v28, (uint64_t)") [", 3);
    v30 = sub_20B828F84(v29, (uint64_t)"fsize == cmmap_.size()", 22);
    v31 = sub_20B828F84(v30, (uint64_t)"] ", 2);
    v32 = sub_20B828F84(v31, (uint64_t)"invalid file size: ", 19);
    v26 = strlen(a2);
    v24 = v32;
    v25 = a2;
    goto LABEL_25;
  }
  v6 = v4 + 1;
  v7 = (char *)a1[44];
  a1[45] = v7;
  if (v5)
  {
    v8 = 0;
    v9 = (char **)(a1 + 44);
    v10 = a1 + 46;
    do
    {
      if ((unint64_t)v7 >= *v10)
      {
        v11 = (v7 - *v9) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_20B80CDD8();
        v12 = *v10 - (_QWORD)*v9;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_20B800BE8((uint64_t)(a1 + 46), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v6;
        v7 = v16 + 8;
        v18 = (char *)a1[44];
        v17 = (char *)a1[45];
        if (v17 != v18)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = *v9;
        }
        a1[44] = v16;
        a1[45] = v7;
        a1[46] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v7 = v6;
        v7 += 8;
      }
      v6 += 8;
      a1[45] = v7;
      ++v8;
    }
    while (v8 != v5);
  }
  a1[47] = v6;
  return 1;
}

uint64_t (*sub_20B934DCC(uint64_t a1))(void *a1, char *a2, uint64_t a3)
{
  uint64_t v2;
  char v3;
  uint64_t (*v4)(void *, char *, uint64_t);
  uint64_t (*v5)(void *, char *, uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 64);
  if (v2 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) & 1) == 0)
  {
    if (**(_BYTE **)(a1 + 32))
      return sub_20B934E58;
    v3 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2);
    v4 = sub_20B935008;
    v5 = sub_20B9350F8;
  }
  else
  {
    v3 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 2);
    v4 = sub_20B9352A8;
    v5 = sub_20B9354FC;
  }
  if (v3 < 0)
    return v4;
  else
    return v5;
}

uint64_t sub_20B934E58(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  void *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t result;
  double v16;
  const void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  void *v22;
  int v23;
  int v24;

  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (v5)
    v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v8 = 0;
  v9 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
  if (v9)
    v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v10 = 0;
  v11 = (*(double (**)(void *))(*(_QWORD *)v8 + 392))(v8);
  v14 = (*(double (**)(void *))(*(_QWORD *)v10 + 392))(v10);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v16 = v14 * 1.05;
      result = v16 > v11;
      if (v16 > v11)
        return result;
    }
    goto LABEL_15;
  }
  if (v11 * 1.05 <= v14)
    result = 0;
  else
    result = -1;
  if (!result)
  {
LABEL_15:
    v17 = (const void *)objc_msgSend_rawCandidate(a1, v12, v13);
    if (v17)
      v20 = __dynamic_cast(v17, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v20 = 0;
    v21 = (const void *)objc_msgSend_rawCandidate(a2, v18, v19);
    if (v21)
      v22 = __dynamic_cast(v21, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v22 = 0;
    v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 112))(v20);
    if (v23 >= (*(int (**)(void *))(*(_QWORD *)v22 + 112))(v22))
    {
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 112))(v20);
      return v24 > (*(int (**)(void *))(*(_QWORD *)v22 + 112))(v22);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_20B935008(void *a1, char *a2, uint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  const void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  void *v13;
  int v14;
  int v15;

  result = sub_20B935D58(a1, a2, a3);
  if (!result)
  {
    v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
    if (v8)
      v11 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v11 = 0;
    v12 = (const void *)objc_msgSend_rawCandidate(a2, v9, v10);
    if (v12)
      v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v13 = 0;
    v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 112))(v11);
    if (v14 >= (*(int (**)(void *))(*(_QWORD *)v13 + 112))(v13))
    {
      v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 112))(v11);
      return v15 > (*(int (**)(void *))(*(_QWORD *)v13 + 112))(v13);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_20B9350F8(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  void *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  double v14;
  uint64_t result;
  double v16;
  const void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  void *v22;
  int v23;
  int v24;

  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (v5)
    v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v8 = 0;
  v9 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
  if (v9)
    v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v10 = 0;
  v11 = (*(double (**)(void *))(*(_QWORD *)v8 + 392))(v8);
  v14 = (*(double (**)(void *))(*(_QWORD *)v10 + 392))(v10);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v16 = v14 * 1.15;
      result = v16 > v11;
      if (v16 > v11)
        return result;
    }
    goto LABEL_15;
  }
  if (v11 * 1.15 <= v14)
    result = 0;
  else
    result = -1;
  if (!result)
  {
LABEL_15:
    v17 = (const void *)objc_msgSend_rawCandidate(a1, v12, v13);
    if (v17)
      v20 = __dynamic_cast(v17, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v20 = 0;
    v21 = (const void *)objc_msgSend_rawCandidate(a2, v18, v19);
    if (v21)
      v22 = __dynamic_cast(v21, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v22 = 0;
    v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 112))(v20);
    if (v23 >= (*(int (**)(void *))(*(_QWORD *)v22 + 112))(v22))
    {
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 112))(v20);
      return v24 > (*(int (**)(void *))(*(_QWORD *)v22 + 112))(v22);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_20B9352A8(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  char v7;
  char v8;
  const __CFString *v9;
  CFIndex Length;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  const void *v17;
  void *v18;
  char v19;
  char v20;
  const __CFString *v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t result;
  const char *v28;
  uint64_t v29;
  const void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  void *v35;
  int v36;
  int v37;

  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 104))(v6);
  v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 104))(v6);
  v9 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 24))(v6);
  Length = CFStringGetLength(v9);
  if ((v8 & 4) != 0
    && ((v13 = Length, (*(unsigned int (**)(void *))(*(_QWORD *)v6 + 200))(v6))
      ? (v14 = v13 < 5)
      : (v14 = 0),
        v14))
  {
    v16 = 2;
  }
  else
  {
    if ((v7 & 0x10) != 0)
      v15 = 1;
    else
      v15 = 2;
    if ((v7 & 4) != 0)
      v16 = 0;
    else
      v16 = v15;
  }
  v17 = (const void *)objc_msgSend_rawCandidate(a2, v11, v12);
  v18 = __dynamic_cast(v17, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 104))(v18);
  v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 104))(v18);
  v21 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 24))(v18);
  v22 = CFStringGetLength(v21);
  if ((v20 & 4) != 0
    && ((v24 = v22, (*(unsigned int (**)(void *))(*(_QWORD *)v18 + 200))(v18))
      ? (v25 = v24 < 5)
      : (v25 = 0),
        v25))
  {
    v26 = 2;
  }
  else if ((v19 & 4) != 0)
  {
    v26 = 0;
  }
  else if ((v19 & 0x10) != 0)
  {
    v26 = 1;
  }
  else
  {
    v26 = 2;
  }
  if (v16 < v26)
    return -1;
  if (v16 > v26)
    return 1;
  result = sub_20B935D58(a1, a2, v23);
  if (!result)
  {
    v30 = (const void *)objc_msgSend_rawCandidate(a1, v28, v29);
    if (v30)
      v33 = __dynamic_cast(v30, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v33 = 0;
    v34 = (const void *)objc_msgSend_rawCandidate(a2, v31, v32);
    if (v34)
      v35 = __dynamic_cast(v34, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v35 = 0;
    v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 112))(v33);
    if (v36 < (*(int (**)(void *))(*(_QWORD *)v35 + 112))(v35))
      return -1;
    v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 112))(v33);
    return v37 > (*(int (**)(void *))(*(_QWORD *)v35 + 112))(v35);
  }
  return result;
}

uint64_t sub_20B9354FC(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  char v7;
  const char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  const void *v12;
  void *v13;
  char v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  const void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  void *v24;
  double v25;
  const char *v26;
  uint64_t v27;
  double v28;
  double v29;
  const void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  void *v35;
  int v36;
  int v37;

  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 104))(v6);
  if ((v7 & 0x10) != 0)
    v10 = 1;
  else
    v10 = 2;
  if ((v7 & 4) != 0)
    v11 = 0;
  else
    v11 = v10;
  v12 = (const void *)objc_msgSend_rawCandidate(a2, v8, v9);
  v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 104))(v13);
  if ((v14 & 0x10) != 0)
    v17 = 1;
  else
    v17 = 2;
  if ((v14 & 4) != 0)
    v17 = 0;
  if (v11 < v17)
    return -1;
  if (v11 > v17)
    return 1;
  v19 = (const void *)objc_msgSend_rawCandidate(a1, v15, v16);
  if (v19)
    v22 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v22 = 0;
  v23 = (const void *)objc_msgSend_rawCandidate(a2, v20, v21);
  if (v23)
    v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v24 = 0;
  v25 = (*(double (**)(void *))(*(_QWORD *)v22 + 392))(v22);
  v28 = (*(double (**)(void *))(*(_QWORD *)v24 + 392))(v24);
  if (v25 <= v28)
  {
    if (v25 < v28)
    {
      v29 = v28 * 1.15;
      result = v29 > v25;
      if (v29 > v25)
        return result;
    }
  }
  else
  {
    if (v25 * 1.15 <= v28)
      result = 0;
    else
      result = -1;
    if (result)
      return result;
  }
  v30 = (const void *)objc_msgSend_rawCandidate(a1, v26, v27);
  if (v30)
    v33 = __dynamic_cast(v30, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v33 = 0;
  v34 = (const void *)objc_msgSend_rawCandidate(a2, v31, v32);
  if (v34)
    v35 = __dynamic_cast(v34, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v35 = 0;
  v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 112))(v33);
  if (v36 < (*(int (**)(void *))(*(_QWORD *)v35 + 112))(v35))
    return -1;
  v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 112))(v33);
  return v37 > (*(int (**)(void *))(*(_QWORD *)v35 + 112))(v35);
}

uint64_t sub_20B935744(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  char v7;
  const char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  const void *v12;
  void *v13;
  char v14;
  unsigned int v15;

  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 104))(v6);
  if ((v7 & 0x10) != 0)
    v10 = 1;
  else
    v10 = 2;
  if ((v7 & 4) != 0)
    v11 = 0;
  else
    v11 = v10;
  v12 = (const void *)objc_msgSend_rawCandidate(a2, v8, v9);
  v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 104))(v13);
  if ((v14 & 0x10) != 0)
    v15 = 1;
  else
    v15 = 2;
  if ((v14 & 4) != 0)
    v15 = 0;
  if (v11 < v15)
    return -1;
  if (v11 > v15)
    return 1;
  return sub_20B935824(a1, a2, 0);
}

uint64_t sub_20B935824(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  void *v10;
  const __CFString *Length;
  const char *v12;
  uint64_t v13;
  const __CFString *v14;
  NSObject *v15;
  NSObject *v16;
  CFIndex v17;
  const void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const void *v23;
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (v5)
    v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v8 = 0;
  v9 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
  if (v9)
    v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v10 = 0;
  Length = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 56))(v8);
  v14 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 56))(v10);
  if (!Length && (v15 = sub_20B9A7C5C(3u), os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)))
  {
    v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 24))(v8);
    v29 = 138412290;
    v30 = v27;
    _os_log_fault_impl(&dword_20B7F7000, v15, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v29, 0xCu);
    if (v14)
      goto LABEL_12;
  }
  else if (v14)
  {
    goto LABEL_12;
  }
  v16 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
  {
    v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 24))(v10);
    v29 = 138412290;
    v30 = v28;
    _os_log_fault_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v29, 0xCu);
  }
LABEL_12:
  if (Length)
    Length = (const __CFString *)CFStringGetLength(Length);
  if (v14)
    v17 = CFStringGetLength(v14);
  else
    v17 = 0;
  if (Length == (const __CFString *)v17)
  {
    v18 = (const void *)objc_msgSend_rawCandidate(a1, v12, v13);
    if (v18)
      v21 = __dynamic_cast(v18, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v21 = 0;
    v23 = (const void *)objc_msgSend_rawCandidate(a2, v19, v20);
    if (v23)
      v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v24 = 0;
    v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 112))(v21);
    if (v25 >= (*(int (**)(void *))(*(_QWORD *)v24 + 112))(v24))
    {
      v26 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 112))(v21);
      return v26 > (*(int (**)(void *))(*(_QWORD *)v24 + 112))(v24);
    }
    else
    {
      return -1;
    }
  }
  else if ((uint64_t)Length < v17)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

uint64_t (*sub_20B935AD8(_QWORD *a1))(void *a1, char *a2, uint64_t a3)
{
  if ((*(_BYTE *)(a1[3] + 25) & 0x40) == 0
    && (CFArrayGetCount(*(CFArrayRef *)(*a1 + 8)) || CFArrayGetCount(*(CFArrayRef *)(a1[1] + 8))))
  {
    return sub_20B935B34;
  }
  else
  {
    return sub_20B935744;
  }
}

uint64_t sub_20B935B34(void *a1, char *a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  char v7;
  const char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  const void *v12;
  void *v13;
  char v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  const void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  void *v24;
  int v25;
  int v26;

  v5 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 104))(v6);
  if ((v7 & 0x10) != 0)
    v10 = 1;
  else
    v10 = 2;
  if ((v7 & 4) != 0)
    v11 = 0;
  else
    v11 = v10;
  v12 = (const void *)objc_msgSend_rawCandidate(a2, v8, v9);
  v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 104))(v13);
  if ((v14 & 0x10) != 0)
    v17 = 1;
  else
    v17 = 2;
  if ((v14 & 4) != 0)
    v17 = 0;
  if (v11 < v17)
    return -1;
  if (v11 > v17)
    return 1;
  v19 = (const void *)objc_msgSend_rawCandidate(a1, v15, v16);
  if (v19)
    v22 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v22 = 0;
  v23 = (const void *)objc_msgSend_rawCandidate(a2, v20, v21);
  if (v23)
    v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v24 = 0;
  v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 112))(v22);
  if (v25 < (*(int (**)(void *))(*(_QWORD *)v24 + 112))(v24))
    return -1;
  v26 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 112))(v22);
  return v26 > (*(int (**)(void *))(*(_QWORD *)v24 + 112))(v24);
}

uint64_t sub_20B935CB0(void *a1, char *a2, uint64_t a3)
{
  const __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Length;
  const char *v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;

  v4 = (const __CFString *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4)
  {
    v5 = (__CFString *)v4;
    v6 = (*((uint64_t (**)(const __CFString *))v4->isa + 5))(v4);
    v7 = 40;
    if (!v6)
      v7 = 24;
    v4 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v5->isa + v7))(v5);
  }
  Length = CFStringGetLength(v4);
  v11 = (const __CFString *)objc_msgSend_rawCandidate(a2, v9, v10);
  if (v11)
  {
    v12 = (__CFString *)v11;
    v13 = (*((uint64_t (**)(const __CFString *))v11->isa + 5))(v11);
    v14 = 40;
    if (!v13)
      v14 = 24;
    v11 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v12->isa + v14))(v12);
  }
  v15 = CFStringGetLength(v11);
  if (Length > v15)
    return -1;
  else
    return Length < v15;
}

uint64_t sub_20B935D58(void *a1, char *a2, uint64_t a3)
{
  const void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  void *v9;
  double v10;
  double v11;
  char v12;
  const __CFString *v13;
  CFIndex Length;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  const __CFString *v19;
  CFIndex v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;

  v4 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4)
    v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v7 = 0;
  v8 = (const void *)objc_msgSend_rawCandidate(a2, v5, v6);
  if (v8)
    v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v9 = 0;
  v10 = (*(double (**)(void *))(*(_QWORD *)v7 + 392))(v7);
  v11 = (*(double (**)(void *))(*(_QWORD *)v9 + 392))(v9);
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 104))(v7);
  v13 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 24))(v7);
  Length = CFStringGetLength(v13);
  if ((v12 & 4) != 0)
  {
    v16 = Length;
    v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 200))(v7);
    if (v16 < 5)
      v15 = v17;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 104))(v9);
  v19 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 24))(v9);
  v20 = CFStringGetLength(v19);
  if ((v18 & 4) != 0)
  {
    v22 = v20;
    v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 200))(v9);
    if (v22 < 5)
      v21 = v23;
    else
      v21 = 0;
  }
  else
  {
    v21 = 0;
  }
  if ((v15 | v21) == 1)
  {
    if ((v15 ^ 1 | v21) == 1)
      return (uint64_t)((unint64_t)((v15 ^ 1) & v21) << 63) >> 63;
    else
      return 1;
  }
  else if (v10 <= v11)
  {
    return v10 < v11 && v11 * 1.15 > v10;
  }
  else if (v10 * 1.15 <= v11)
  {
    return 0;
  }
  else
  {
    return -1;
  }
}

BOOL sub_20B935F18(uint64_t *a1, uint64_t *a2, _QWORD *a3, int a4, int a5, int a6, __int16 a7)
{
  __int16 v7;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v39;
  void *__p;
  void *v43;
  char *v44;

  v7 = a7;
  v13 = atomic_load((unsigned __int8 *)&qword_25472B980);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25472B980))
  {
    sub_20B8B2334(0);
    word_25472B978 = word_25472C9E4;
    __cxa_guard_release(&qword_25472B980);
    v7 = a7;
  }
  v14 = *a1;
  if (!*a1)
  {
    v14 = operator new();
    sub_20B8A9F48(v14, a5, a6);
    v15 = *a1;
    *a1 = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = *a1;
    }
  }
  if (!*(_BYTE *)(v14 + 837))
  {
    sub_20B8AAA34(v14, a4, 0, 7);
    v14 = *a1;
  }
  __p = 0;
  v43 = 0;
  v44 = 0;
  v16 = *a2;
  v17 = a2[1];
  v39 = v14;
  if (v17 == *a2)
  {
    v19 = 0;
  }
  else
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a2) >> 3);
    if (v18 > 0x666666666666666)
      sub_20B80CDD8();
    v19 = (char *)sub_20B9362A4(v18);
    __p = v19;
    v43 = v19;
    v44 = &v19[40 * v20];
    v16 = *a2;
    v17 = a2[1];
  }
  if (v17 != v16)
  {
    v21 = 0;
    v22 = word_25472B978;
    do
    {
      v23 = (uint64_t *)(*a3 + 24 * v21);
      v24 = *v23;
      v25 = v23[1] - *v23;
      v26 = (uint64_t *)(v16 + 24 * v21);
      v27 = *v26;
      v28 = v26[1] - *v26;
      if (v19 >= v44)
      {
        v30 = (char *)__p;
        v31 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)__p) >> 3) + 1;
        if (v31 > 0x666666666666666)
          sub_20B80CDD8();
        if (0x999999999999999ALL * ((v44 - (_BYTE *)__p) >> 3) > v31)
          v31 = 0x999999999999999ALL * ((v44 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v44 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v32 = 0x666666666666666;
        else
          v32 = v31;
        if (v32)
          v32 = (unint64_t)sub_20B9362A4(v32);
        else
          v33 = 0;
        v34 = (_QWORD *)(v32 + 8 * ((v19 - (_BYTE *)__p) >> 3));
        *v34 = v27;
        v34[1] = v28;
        v34[2] = v24;
        v34[3] = v25;
        *((_WORD *)v34 + 16) = v22;
        *((_WORD *)v34 + 17) = v22;
        v7 = a7;
        *((_WORD *)v34 + 18) = a7;
        v35 = (char *)v34;
        if (v19 != v30)
        {
          do
          {
            v36 = *(_OWORD *)(v19 - 40);
            v37 = *(_OWORD *)(v19 - 24);
            *((_QWORD *)v35 - 1) = *((_QWORD *)v19 - 1);
            *(_OWORD *)(v35 - 24) = v37;
            *(_OWORD *)(v35 - 40) = v36;
            v35 -= 40;
            v19 -= 40;
          }
          while (v19 != v30);
          v19 = v30;
        }
        v29 = v34 + 5;
        __p = v35;
        v44 = (char *)(v32 + 40 * v33);
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v19 = v27;
        *((_QWORD *)v19 + 1) = v28;
        *((_QWORD *)v19 + 2) = v24;
        *((_QWORD *)v19 + 3) = v25;
        *((_WORD *)v19 + 16) = v22;
        *((_WORD *)v19 + 17) = v22;
        v29 = v19 + 40;
        *((_WORD *)v19 + 18) = v7;
      }
      v43 = v29;
      ++v21;
      v16 = *a2;
      v19 = (char *)v29;
    }
    while (v21 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_20B8ABAD8(v39, (const void ***)&__p);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  return v39 != 0;
}

void sub_20B93623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  __cxa_guard_abort(&qword_25472B980);
  _Unwind_Resume(a1);
}

void *sub_20B9362A4(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    sub_20B800BC0();
  return operator new(40 * a1);
}

void sub_20B9362E8(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v7;
  _DWORD *v8;
  _DWORD **v9;
  unint64_t v10;
  char **v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  v4 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= a2)
  {
    sub_20B936410(a1, a2 + 1);
    v4 = *a1;
  }
  v7 = v4 + 24 * a2;
  v9 = (_DWORD **)(v7 + 8);
  v8 = *(_DWORD **)(v7 + 8);
  v11 = (char **)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 16);
  if ((unint64_t)v8 >= v10)
  {
    v13 = *(_DWORD **)v7;
    v14 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      sub_20B80CDD8();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)sub_20B8127BC((uint64_t)v11, v17);
      v8 = *v9;
      v13 = *(_DWORD **)v7;
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a3;
    v12 = v19 + 4;
    while (v8 != v13)
    {
      v21 = *--v8;
      *((_DWORD *)v19 - 1) = v21;
      v19 -= 4;
    }
    *(_QWORD *)v7 = v19;
    *v9 = v12;
    *v11 = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v8 = a3;
    v12 = v8 + 1;
  }
  *v9 = v12;
}

void sub_20B936410(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20B9366D8(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_20B9364A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char **v23;
  char *v24;
  char *v25;
  int v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;

  v28 = 0u;
  v29 = 0u;
  v30 = 1065353216;
  v27 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (v4 == *a1)
  {
    result = sub_20B84055C((uint64_t)&v28);
LABEL_23:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (uint64_t *)(v3 + 24 * v7);
    v9 = *v8;
    if (*v8 == v8[1])
    {
      v10 = *v8;
    }
    else
    {
      sub_20B9368B0((uint64_t)&v28, &v27, &v27);
      v7 = v27;
      v3 = *a1;
      v4 = a1[1];
      v9 = *(_QWORD *)(*a1 + 24 * v27);
      v10 = *(_QWORD *)(*a1 + 24 * v27 + 8);
    }
    v11 = v10 - v9;
    if ((unint64_t)v11 <= 4)
      v12 = 0;
    else
      v12 = v11 >> 2;
    v6 += 1 + v12;
    v27 = ++v7;
  }
  while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
  v13 = DWORD2(v29);
  result = sub_20B84055C((uint64_t)&v28);
  if (!v6)
    goto LABEL_23;
  LODWORD(v28) = -1;
  result = (uint64_t)sub_20B8D9040(a2, v6 + 2, &v28);
  v15 = *a1;
  v16 = a1[1];
  v17 = (v16 - *a1) / 24;
  v18 = *a2;
  v19 = (_DWORD *)(*a2 + 4 * v6);
  *v19 = v13;
  v19[1] = v17 - 1;
  if (v16 != v15)
  {
    v20 = 0;
    v21 = 0;
    if (v17 <= 1)
      v22 = 1;
    else
      v22 = v17;
    do
    {
      v23 = (char **)(v15 + 24 * v20);
      v24 = *v23;
      v25 = v23[1];
      if (v24 != v25)
      {
        if (v25 - v24 == 4)
        {
          *(_DWORD *)(v18 + 4 * v20) = *(_DWORD *)v24;
        }
        else
        {
          *(_DWORD *)(v18 + 4 * v20) = (v21 << 8) | (((_DWORD)v25 - (_DWORD)v24) >> 2) | 0x80000000;
          do
          {
            v26 = *(_DWORD *)v24;
            v24 += 4;
            result = v17 + v21;
            *(_DWORD *)(v18 + 4 * result) = v26;
            ++v21;
          }
          while (v24 != v25);
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  return result;
}

void sub_20B936660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B84055C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B936674(uint64_t **result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *result = a2;
  result[1] = (uint64_t *)a3;
  result[2] = (uint64_t *)(a3 + 1);
  if (a2)
  {
    v3 = a2[1];
    if (v3)
    {
      v4 = *a2;
      if (*(_DWORD *)(*a2 + 4 * v3 - 8))
      {
        v5 = *(unsigned int *)(v4 + 4 * a3);
        if ((_DWORD)v5 != -1)
        {
          if ((v5 & 0x80000000) == 0)
            return result;
          v6 = ((v5 >> 8) & 0x7FFFFF) + *(unsigned int *)(v4 + 4 * v3 - 4) + 1;
          result[1] = (uint64_t *)v6;
          a3 = v6 + v5;
        }
      }
    }
  }
  result[2] = (uint64_t *)a3;
  return result;
}

void sub_20B9366D8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B873738();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20B828D70(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20B93683C(a1, &v15);
    sub_20B83CBC8((uint64_t)&v15);
  }
}

void sub_20B936828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B93683C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B873C38((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20B9368B0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20B828960(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20B936AB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B936AC8(uint64_t a1, int a2, CFTypeRef cf, uint64_t a4)
{
  CFTypeID v8;
  const UInt8 *BytePtr;
  unint64_t Length;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  const UInt8 *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *__p;
  char *v29;
  char *v30;

  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFDataGetTypeID())
    {
      v26 = a2;
      v27 = a4;
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      Length = CFDataGetLength((CFDataRef)cf);
      __p = 0;
      v29 = 0;
      v30 = 0;
      if (Length >= 8)
      {
        v11 = 0;
        v12 = 0;
        v13 = Length >> 3;
        do
        {
          v14 = &BytePtr[8 * v12];
          v15 = v14 + 4;
          if (v11 >= v30)
          {
            v16 = (v11 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              sub_20B936DB4();
            v17 = (v30 - (_BYTE *)__p) >> 2;
            if (v17 <= v16 + 1)
              v17 = v16 + 1;
            if ((unint64_t)(v30 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            v19 = (char *)sub_20B800BE8((uint64_t)&v30, v18);
            v21 = &v19[8 * v16];
            *(_WORD *)v21 = *(_WORD *)v14;
            *((_DWORD *)v21 + 1) = *v15;
            v23 = (char *)__p;
            v22 = v29;
            v24 = v21;
            if (v29 != __p)
            {
              do
              {
                v25 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v24 - 1) = v25;
                v24 -= 8;
              }
              while (v22 != v23);
              v22 = (char *)__p;
            }
            v11 = v21 + 8;
            __p = v24;
            v29 = v21 + 8;
            v30 = &v19[8 * v20];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_WORD *)v11 = *(_WORD *)v14;
            *((_DWORD *)v11 + 1) = *v15;
            v11 += 8;
          }
          v29 = v11;
          ++v12;
        }
        while (v12 != v13);
      }
      sub_20B936C98(a1, v26, (float **)&__p, v27);
      if (__p)
      {
        v29 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_20B936C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B936C98(uint64_t result, int a2, float **a3, uint64_t a4)
{
  float *v4;
  unsigned __int16 *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *i;
  BOOL v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  _DWORD v15[2];

  v4 = *a3;
  v5 = (unsigned __int16 *)a3[1];
  if (*a3 != (float *)v5)
  {
    v7 = result;
    v8 = 0;
    for (i = (unsigned __int16 *)(v4 + 2); *(i - 4) != a2; i += 4)
    {
      ++v8;
      if (*(i - 4))
        v10 = i == v5;
      else
        v10 = 1;
      if (v10)
        return result;
    }
    v11 = 0;
    v12 = *((float *)i - 1);
    do
    {
      if (v8)
      {
        if (!*(_WORD *)v4)
          break;
        v13 = v12 - v4[1];
        v14 = 1.0;
        if (v13 > 0.0)
        {
          v14 = 0.0;
          if (v13 < *(float *)v7)
            v14 = 1.0 - (float)((float)(v13 * 100.0) / (float)(*(float *)v7 * 100.0));
        }
        if (v14 >= *(float *)(v7 + 4))
        {
          v15[0] = *(unsigned __int16 *)v4;
          *(float *)&v15[1] = v14;
          result = (*(uint64_t (**)(uint64_t, _DWORD *))(a4 + 16))(a4, v15);
          if ((unint64_t)++v11 > *(_QWORD *)(v7 + 8))
            break;
        }
      }
      v4 += 2;
      --v8;
    }
    while (v4 != (float *)v5);
  }
  return result;
}

void sub_20B936DB4()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B936DC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *exception;
  __int128 v10;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = sub_20B8FD294(*(_DWORD *)a2);
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a2 + 136);
  v4[5] = 0;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v4 + 5;
  v4[6] = 0;
  v4[7] = 0x7FFFFFFFLL;
  v4[8] = v5;
  *(_QWORD *)(a1 + 16) = v4;
  v6 = (_QWORD *)operator new();
  v6[5] = 0;
  v7 = *(_QWORD *)(a2 + 136);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v6 + 5;
  v6[6] = 0;
  v6[7] = 0x7FFFFFFFLL;
  v6[8] = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = sub_20B9F1A84(*(_DWORD *)a2);
  *(_DWORD *)(a1 + 40) = 0;
  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B80BBD0(&v10, "Failed to create completion component.");
    sub_20B9387E0(exception, &v10);
    __cxa_throw(exception, (struct type_info *)&unk_24C45BBB0, (void (*)(void *))sub_20B936F74);
  }
  return a1;
}

void sub_20B936F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  int v18;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_20B939B5C(v16, 0);
      sub_20B939B5C(v15 + 1, 0);
      sub_20B939B20(v15, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void sub_20B936F74(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C4607D8;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t sub_20B936FB0(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 16);
  sub_20BA29958(*(_QWORD *)(a1 + 16));
  sub_20BA29958(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 40) = 0;
  sub_20B939B5C((uint64_t *)(a1 + 24), 0);
  sub_20B939B5C(v2, 0);
  sub_20B939B20((uint64_t *)(a1 + 8), 0);
  return a1;
}

uint64_t sub_20B93701C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B936DC8(v2, a1);
  return v2;
}

void sub_20B937060(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2;
  MEMORY[0x20BD39CB0](v4, 0x1060C40C17344BBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20B937050);
  }
  _Unwind_Resume(a1);
}

void sub_20B9370B0(uint64_t a1, CFStringRef theString, unint64_t a3, char a4)
{
  CFIndex Length;
  CFIndex v8;
  unint64_t v9;
  UniChar *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UniChar *v14;
  uint64_t v15;
  UniChar *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  _QWORD v22[2];
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  __n128 (*v26)(_QWORD *, uint64_t);
  void (*v27)(uint64_t);
  void *__p;
  void *v29;
  uint64_t v30;
  UniChar *v31;

  if ((a4 & 8) == 0)
  {
    Length = CFStringGetLength(theString);
    if (Length >= 3)
    {
      if ((unint64_t)Length >= 0xA)
        v8 = Length - 10;
      else
        v8 = 0;
      if ((unint64_t)Length >= 0xA)
        v9 = 10;
      else
        v9 = Length;
      sub_20B8D06F4(theString, v8, v9, &v31);
      v10 = v31;
      if (a3)
      {
        v11 = 0;
        v12 = v9 - 2;
        v13 = 1;
        v14 = v31;
        do
        {
          v15 = *(_QWORD *)(a1 + 8);
          if (v9 < *(_QWORD *)(v15 + 32))
          {
            v23 = 0;
            v24 = (uint64_t **)&v23;
            v25 = 0x4002000000;
            v26 = sub_20B9372AC;
            v27 = sub_20B9372D0;
            v29 = 0;
            v30 = 0;
            __p = 0;
            v16 = v10;
            if (v10)
              v17 = v9;
            else
              v17 = 0;
            v22[0] = v14;
            v22[1] = v17;
            v21[0] = MEMORY[0x24BDAC760];
            v21[1] = 0x40000000;
            v21[2] = sub_20B9372E8;
            v21[3] = &unk_24C46C3D0;
            v21[4] = &v23;
            v21[5] = a1;
            sub_20B8FD324(v15, (uint64_t)v22, (uint64_t)v21);
            sub_20B937514(*(_QWORD **)(a1 + 24), v24 + 5);
            v18 = *(uint64_t **)(a1 + 16);
            v19 = *v18;
            v20 = v18[1];
            _Block_object_dispose(&v23, 8);
            if (__p)
            {
              v29 = __p;
              operator delete(__p);
            }
            v11 += (v20 - v19) >> 3;
            v10 = v16;
          }
          if (v13 >= v12)
            break;
          ++v13;
          ++v14;
          --v9;
        }
        while (v11 < a3);
      }
      if (v10)
        MEMORY[0x20BD39C80](v10, 0x1000C80BDFB0063);
    }
  }
}

void sub_20B937264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v25)
    MEMORY[0x20BD39C80](v25, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

__n128 sub_20B9372AC(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9372D0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B9372E8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unsigned __int16 *v37[2];
  _QWORD v38[2];

  if (a3)
  {
    *a4 = 1;
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 40);
    v7 = (char *)sub_20B9F1C60(v6[4], *(_WORD **)(a2 + 8));
    v9 = v8;
    v38[0] = v7;
    v38[1] = v8;
    v37[0] = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6[4] + 24))(v6[4], *(_QWORD *)(a2 + 8), 1);
    v37[1] = v10;
    v11 = (2 * v9);
    if ((_DWORD)v11)
    {
      v12 = 0;
      do
      {
        v13 = *v7++;
        v12 = (1025 * (v12 + v13)) ^ ((1025 * (v12 + v13)) >> 6);
        --v11;
      }
      while (v11);
      v14 = 9 * v12;
    }
    else
    {
      v14 = 0;
    }
    v15 = sub_20B90C51C((uint64_t)v38, *(_QWORD *)(*(_QWORD *)(*v6 + 88) + 8));
    sub_20B939B98(&v35, v15);
    if (v35)
    {
      v16 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v17 = operator new();
      sub_20B9F6610(v17, &v35, **(_DWORD **)a2, v37, 32769 * (v14 ^ (v14 >> 11)));
      v19 = (uint64_t *)v16[6];
      v18 = v16[7];
      if ((unint64_t)v19 >= v18)
      {
        v21 = v16[5];
        v22 = ((uint64_t)v19 - v21) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          sub_20B80CDD8();
        v23 = v18 - v21;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)sub_20B87FB70(v25);
        else
          v26 = 0;
        v27 = (uint64_t *)(v25 + 8 * v22);
        v28 = v25 + 8 * v26;
        *v27 = v17;
        v20 = v27 + 1;
        v30 = (char *)v16[5];
        v29 = (char *)v16[6];
        if (v29 != v30)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v27 = v31;
          }
          while (v29 != v30);
          v29 = (char *)v16[5];
        }
        v16[5] = v27;
        v16[6] = v20;
        v16[7] = v28;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v19 = v17;
        v20 = v19 + 1;
      }
      v16[6] = v20;
    }
    v32 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
}

void sub_20B9374E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x20BD39CB0](v9, 0x10E1C40CFE76A11);
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B937514(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = *v4++;
      v7 = (void *)sub_20B8E1754(v6);
      sub_20BA29AC4(a1, v7, v8);
    }
    while (v4 != v5);
    v4 = *a2;
  }
  a2[1] = v4;
  a1[3] = *a1;
}

uint64_t sub_20B937574(uint64_t *a1, uint64_t a2, int a3, unint64_t a4, char a5)
{
  const __CFString *v8;
  uint64_t Length;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  UniChar *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  const char *CStringPtr;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t CursorByAdvancingWithCharacters;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[13];
  char v59;
  void *__p;
  size_t __n;
  _QWORD v62[3];
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  __n128 (*v69)(uint64_t, uint64_t);
  uint64_t (*v70)();
  const __CFString *v71;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79[2];
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  CFRange v83;

  *((_DWORD *)a1 + 10) = a3;
  v8 = *(const __CFString **)(a2 + 152);
  Length = CFStringGetLength(v8);
  v11 = *(_QWORD *)(a2 + 160);
  v10 = *(_QWORD *)(a2 + 168);
  v12 = 2 * Length;
  v13 = (UniChar *)operator new[]();
  v56 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 8);
  v57 = a4;
  if (*(_BYTE *)(a2 + 133))
  {
    v83.location = 0;
    v83.length = Length;
    CFStringGetCharacters(v8, v83, v13);
    __p = 0;
    __n = 0;
    v62[0] = 0;
    v54 = Length;
    if (Length >= 1)
    {
      v14 = (char *)sub_20B80FD48((uint64_t)v62, Length);
      v15 = v14;
      v17 = v16;
      v18 = 0;
      v19 = &v14[2 * v54];
      do
      {
        *(_WORD *)&v14[v18] = v13[v18 / 2];
        v18 += 2;
      }
      while (v12 != v18);
      if (__p)
      {
        v20 = (-2 - (_QWORD)__p) & 0xFFFFFFFFFFFFFFFELL;
        v21 = &v14[v20 ^ 0xFFFFFFFFFFFFFFFELL];
        memcpy(v21, (const void *)(v20 ^ 0xFFFFFFFFFFFFFFFELL), v20 + 2);
      }
      else
      {
        v21 = v14;
      }
      if (__n)
        memcpy(v19, 0, __n);
      v24 = __p;
      __p = v21;
      __n += (size_t)v19;
      v62[0] = &v15[2 * v17];
      if (v24)
        operator delete(v24);
    }
    sub_20B88F908(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 8), (uint64_t *)&__p);
    if (a4 && v10 != v11)
    {
      v25 = 0;
      v26 = 0;
      v27 = (v10 - v11) >> 3;
      do
      {
        v28 = *(_QWORD *)(a2 + 160);
        if (*(_QWORD *)(v28 + 8 * v26))
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v29 = *(_QWORD *)(v28 + 8 * v26);
          v30 = __p;
          v31 = (char *)__p + 2 * v54 + -2 * v29;
          CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
          sub_20B938408((uint64_t)&v66, *a1, CursorByAdvancingWithCharacters, (_QWORD *)a2, v26, a5);
          v33 = *(_QWORD *)(a2 + 160);
          v34 = *(_QWORD *)(v33 + 8 * v26);
          v79[0] = (uint64_t)&v13[v54 - v29];
          v79[1] = v34;
          v35 = *(_QWORD *)(v33 + 8 * v26);
          if (!v30)
            v35 = 0;
          v78[0] = v31;
          v78[1] = v35;
          sub_20B937AA4(a1, v79, (uint64_t)v78, (uint64_t)&v66, (uint64_t)&v80);
          v36 = 126 - 2 * __clz(v81 - v80);
          if (v81 == v80)
            v37 = 0;
          else
            v37 = v36;
          sub_20B9388B4(v80, v81, v37, 1);
          sub_20B937514((_QWORD *)a1[2], &v80);
          v38 = (uint64_t *)a1[2];
          v40 = *v38;
          v39 = v38[1];
          sub_20B93879C(&v66);
          if (v80)
          {
            v81 = v80;
            operator delete(v80);
          }
          v25 += (v39 - v40) >> 3;
          a4 = v57;
        }
        ++v26;
      }
      while (v26 < v27 && v25 < a4);
    }
    if (__p)
    {
      __n = (size_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    v66 = 0;
    v67 = &v66;
    v68 = 0xE002000000;
    v69 = sub_20B937C50;
    v70 = nullsub_295;
    v71 = v8;
    v74 = 0;
    v75 = Length;
    v22 = Length;
    if (CFStringGetCharactersPtr(v8))
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(v8, 0x600u);
    v76 = 0;
    v77 = 0;
    v73 = CStringPtr;
    if (a4)
    {
      v42 = *(_QWORD *)(a2 + 160);
      v41 = *(_QWORD *)(a2 + 168);
      if (v41 != v42)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          v45 = *(_QWORD *)(v42 + 8 * v43);
          if (v45 && v45 < *(_QWORD *)(a1[1] + 32))
          {
            __p = 0;
            __n = (size_t)&__p;
            v62[0] = 0x4002000000;
            v62[1] = sub_20B9372AC;
            v62[2] = sub_20B9372D0;
            v64 = 0;
            v65 = 0;
            v63 = 0;
            v58[0] = MEMORY[0x24BDAC760];
            v58[1] = 0x40000000;
            v58[2] = sub_20B93822C;
            v58[3] = &unk_24C49D540;
            v58[6] = a1;
            v58[7] = v56;
            v58[8] = v22 - v45;
            v58[9] = v45;
            v58[10] = a2;
            v58[11] = v43;
            v59 = a5;
            v58[12] = v13;
            v58[4] = &v66;
            v58[5] = &__p;
            sub_20B937CB8((uint64_t)a1, v8, (uint64_t)(v67 + 5), v22 - v45, v45, v13, (uint64_t)v58);
            v46 = *(uint64_t **)(__n + 40);
            v47 = *(uint64_t **)(__n + 48);
            v48 = 126 - 2 * __clz(v47 - v46);
            if (v47 == v46)
              v49 = 0;
            else
              v49 = v48;
            sub_20B9388B4(v46, v47, v49, 1);
            sub_20B937514((_QWORD *)a1[2], (uint64_t **)(__n + 40));
            v50 = (uint64_t *)a1[2];
            v52 = *v50;
            v51 = v50[1];
            _Block_object_dispose(&__p, 8);
            if (v63)
            {
              v64 = v63;
              operator delete(v63);
            }
            v44 += (v51 - v52) >> 3;
            v42 = *(_QWORD *)(a2 + 160);
            v41 = *(_QWORD *)(a2 + 168);
            a4 = v57;
          }
          ++v43;
        }
        while (v43 < (v41 - v42) >> 3 && v44 < a4);
      }
    }
    _Block_object_dispose(&v66, 8);
  }
  return MEMORY[0x20BD39C80](v13, 0x1000C80BDFB0063);
}

void sub_20B937A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B937AA4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[12];
  _QWORD v16[4];
  _QWORD v17[4];
  _QWORD v18[4];

  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v18[3] = 0;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2000000000;
  v17[3] = 0;
  v7 = a2[1] - 1;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v16[3] = 0;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 0x40000000;
  v15[2] = sub_20B939CE8;
  v15[3] = &unk_24C46CB80;
  v15[4] = v18;
  v15[5] = v17;
  v15[6] = v16;
  v15[7] = a1;
  v15[8] = a2;
  v15[9] = a4;
  v15[10] = a3;
  v15[11] = a5;
  sub_20B8FD424(a1[1], (uint64_t)a2, v7 < 2, (uint64_t)v15);
  v8 = *(_QWORD *)(*a1 + 136);
  v9 = *(uint64_t **)(v8 + 48);
  v10 = *(uint64_t **)(v8 + 56);
  if (v9 != v10)
  {
    v11 = 2 * (v7 < 2);
    do
    {
      v12 = *(_DWORD *)*a1 - 1;
      if (v12 > 4)
        v13 = 0;
      else
        v13 = dword_20BA4BE1C[v12];
      v14 = *v9;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*v9 + 48))(*v9, v13);
      sub_20BA1BEE0(v14, *a2, 2 * a2[1], v11, (uint64_t)v15);
      ++v9;
    }
    while (v9 != v10);
  }
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v18, 8);
}

void sub_20B937C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

__n128 sub_20B937C50(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  result = *(__n128 *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(__n128 *)(a1 + 168) = result;
  return result;
}

void sub_20B937CB8(uint64_t a1, const __CFString *a2, uint64_t a3, CFIndex a4, CFIndex a5, UniChar *a6, uint64_t a7)
{
  CFIndex v8;
  uint64_t v10;
  CFRange RangeOfComposedCharactersAtIndex;
  CFIndex v13;
  CFIndex location;
  CFIndex v15;
  UniChar *v16;
  CFIndex v17;
  CFIndex v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  UniChar v22;
  uint64_t v23;
  CFIndex v24;
  uint64_t v25;
  CFIndex v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  uint64_t v30;
  unsigned __int16 v31;
  CFIndex v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  CFIndex v37;
  CFIndex v38;
  unint64_t v39;
  uint64_t v40;
  CFIndex v41;
  CFIndex v42;
  uint64_t v43;
  UniChar v44;
  uint64_t v45;
  CFIndex v46;
  uint64_t v47;
  CFIndex v48;
  uint64_t v49;
  uint64_t v50;
  CFIndex v51;
  CFIndex v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  CFIndex v56;
  uint64_t v57;
  uint64_t v58;
  CFIndex v59;
  CFIndex v60;
  CFIndex v61;
  CFIndex v62;
  char *v66;
  char *v67;
  CFRange v68;
  CFRange v69;
  CFRange v70;
  CFRange v71;
  CFRange v72;

  if (a2)
  {
    v8 = a4;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8);
    if (v10)
    {
      while (1)
      {
        RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a2, v8);
        v13 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
        if (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length == CFStringGetLength(a2))
          break;
        if (RangeOfComposedCharactersAtIndex.length == 1)
        {
          if (RangeOfComposedCharactersAtIndex.location < 0)
          {
            v35 = 0;
            v33 = a1;
          }
          else
          {
            v32 = *(_QWORD *)(a3 + 160);
            v33 = a1;
            if (v32 <= RangeOfComposedCharactersAtIndex.location)
            {
              v35 = 0;
            }
            else
            {
              v34 = *(_QWORD *)(a3 + 136);
              if (v34)
              {
                v35 = *(_WORD *)(v34 + 2 * (*(_QWORD *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location));
              }
              else
              {
                v57 = *(_QWORD *)(a3 + 144);
                if (v57)
                {
                  v35 = *(char *)(v57 + *(_QWORD *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location);
                }
                else
                {
                  if (*(_QWORD *)(a3 + 176) <= RangeOfComposedCharactersAtIndex.location
                    || (v59 = *(_QWORD *)(a3 + 168), v59 > RangeOfComposedCharactersAtIndex.location))
                  {
                    v60 = RangeOfComposedCharactersAtIndex.location - 4;
                    if (RangeOfComposedCharactersAtIndex.location < 4uLL)
                      v60 = 0;
                    if (v60 + 64 < v32)
                      v32 = v60 + 64;
                    *(_QWORD *)(a3 + 168) = v60;
                    *(_QWORD *)(a3 + 176) = v32;
                    v71.location = *(_QWORD *)(a3 + 152) + v60;
                    v71.length = v32 - v60;
                    CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v71, (UniChar *)a3);
                    v59 = *(_QWORD *)(a3 + 168);
                  }
                  v35 = *(_WORD *)(a3 + 2 * (RangeOfComposedCharactersAtIndex.location - v59));
                }
              }
            }
          }
          sub_20B88F22C(v10, v35, &v66);
          v53 = v67;
          if (v67 != v66)
          {
            v55 = 0;
            v56 = RangeOfComposedCharactersAtIndex.location - v8;
            v53 = v66;
            do
            {
              a6[v56] = *(_WORD *)&v53[2 * v55];
              sub_20B937CB8(v33, a2, a3, RangeOfComposedCharactersAtIndex.location + 1, a5 - 1, a6 + 1, a7);
              ++v55;
              v53 = v66;
            }
            while (v55 < (v67 - v66) >> 1);
          }
LABEL_76:
          if (v53)
          {
            v67 = v53;
            operator delete(v53);
          }
          return;
        }
        if (v8 <= RangeOfComposedCharactersAtIndex.location)
          location = RangeOfComposedCharactersAtIndex.location;
        else
          location = v8;
        v15 = v13 - location;
        if (v13 - location >= 1)
        {
          v16 = &a6[-v8];
          v17 = -location;
          v18 = location + 64;
          do
          {
            if ((unint64_t)location >= 4)
              v19 = 4;
            else
              v19 = location;
            if (location < 0 || (v20 = *(_QWORD *)(a3 + 160), v20 <= location))
            {
              v22 = 0;
            }
            else
            {
              v21 = *(_QWORD *)(a3 + 136);
              if (v21)
              {
                v22 = *(_WORD *)(v21 + 2 * (location + *(_QWORD *)(a3 + 152)));
              }
              else
              {
                v23 = *(_QWORD *)(a3 + 144);
                if (v23)
                {
                  v22 = *(char *)(v23 + *(_QWORD *)(a3 + 152) + location);
                }
                else
                {
                  if (*(_QWORD *)(a3 + 176) <= location || (v24 = *(_QWORD *)(a3 + 168), v24 > location))
                  {
                    v25 = v19 + v17;
                    v26 = v18 - v19;
                    v27 = location - v19;
                    v28 = v27 + 64;
                    if (v27 + 64 >= v20)
                      v28 = *(_QWORD *)(a3 + 160);
                    *(_QWORD *)(a3 + 168) = v27;
                    *(_QWORD *)(a3 + 176) = v28;
                    if (v20 >= v26)
                      v20 = v26;
                    v68.length = v20 + v25;
                    v68.location = v27 + *(_QWORD *)(a3 + 152);
                    CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v68, (UniChar *)a3);
                    v24 = *(_QWORD *)(a3 + 168);
                  }
                  v22 = *(_WORD *)(a3 - 2 * v24 + 2 * location);
                }
              }
            }
            v16[location++] = v22;
            --v17;
            ++v18;
          }
          while (v13 != location);
        }
        a5 -= v15;
        a6 += v15;
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8);
        v8 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
        if (!v10)
          goto LABEL_33;
      }
      if (RangeOfComposedCharactersAtIndex.length == 1)
      {
        if (RangeOfComposedCharactersAtIndex.location < 0
          || (v29 = *(_QWORD *)(a3 + 160), v29 <= RangeOfComposedCharactersAtIndex.location))
        {
          v31 = 0;
        }
        else
        {
          v30 = *(_QWORD *)(a3 + 136);
          if (v30)
          {
            v31 = *(_WORD *)(v30 + 2 * (*(_QWORD *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location));
          }
          else
          {
            v58 = *(_QWORD *)(a3 + 144);
            if (v58)
            {
              v31 = *(char *)(v58 + *(_QWORD *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location);
            }
            else
            {
              if (*(_QWORD *)(a3 + 176) <= RangeOfComposedCharactersAtIndex.location
                || (v61 = *(_QWORD *)(a3 + 168), v61 > RangeOfComposedCharactersAtIndex.location))
              {
                v62 = RangeOfComposedCharactersAtIndex.location - 4;
                if (RangeOfComposedCharactersAtIndex.location < 4uLL)
                  v62 = 0;
                if (v62 + 64 < v29)
                  v29 = v62 + 64;
                *(_QWORD *)(a3 + 168) = v62;
                *(_QWORD *)(a3 + 176) = v29;
                v72.location = *(_QWORD *)(a3 + 152) + v62;
                v72.length = v29 - v62;
                CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v72, (UniChar *)a3);
                v61 = *(_QWORD *)(a3 + 168);
              }
              v31 = *(_WORD *)(a3 + 2 * (RangeOfComposedCharactersAtIndex.location - v61));
            }
          }
        }
        sub_20B88F22C(v10, v31, &v66);
        v53 = v67;
        if (v67 != v66)
        {
          v54 = 0;
          v53 = v66;
          do
          {
            a6[RangeOfComposedCharactersAtIndex.location - v8] = *(_WORD *)&v53[2 * v54];
            (*(void (**)(uint64_t))(a7 + 16))(a7);
            ++v54;
            v53 = v66;
          }
          while (v54 < (v67 - v66) >> 1);
        }
        goto LABEL_76;
      }
      if (RangeOfComposedCharactersAtIndex.length >= 1)
      {
        v36 = 0;
        v37 = -RangeOfComposedCharactersAtIndex.location;
        v38 = RangeOfComposedCharactersAtIndex.location + 64;
        v39 = RangeOfComposedCharactersAtIndex.location;
        do
        {
          if (v39 >= 4)
            v40 = 4;
          else
            v40 = v39;
          v41 = RangeOfComposedCharactersAtIndex.location + v36;
          if (RangeOfComposedCharactersAtIndex.location + v36 < 0 || (v42 = *(_QWORD *)(a3 + 160), v42 <= v41))
          {
            v44 = 0;
          }
          else
          {
            v43 = *(_QWORD *)(a3 + 136);
            if (v43)
            {
              v44 = *(_WORD *)(v43 + 2 * (RangeOfComposedCharactersAtIndex.location + v36 + *(_QWORD *)(a3 + 152)));
            }
            else
            {
              v45 = *(_QWORD *)(a3 + 144);
              if (v45)
              {
                v44 = *(char *)(v45 + *(_QWORD *)(a3 + 152) + RangeOfComposedCharactersAtIndex.location + v36);
              }
              else
              {
                if (*(_QWORD *)(a3 + 176) <= v41 || (v46 = *(_QWORD *)(a3 + 168), v46 > v41))
                {
                  v47 = v40 + v37;
                  v48 = v38 - v40;
                  v49 = -v40;
                  v50 = 64 - v40;
                  v51 = v36 + RangeOfComposedCharactersAtIndex.location - v40;
                  v52 = RangeOfComposedCharactersAtIndex.location + v36 + v50;
                  if (v52 >= v42)
                    v52 = *(_QWORD *)(a3 + 160);
                  *(_QWORD *)(a3 + 168) = v51;
                  *(_QWORD *)(a3 + 176) = v52;
                  if (v42 >= v48)
                    v42 = v48;
                  v70.length = v42 + v47;
                  v70.location = RangeOfComposedCharactersAtIndex.location + v36 + v49 + *(_QWORD *)(a3 + 152);
                  CFStringGetCharacters(*(CFStringRef *)(a3 + 128), v70, (UniChar *)a3);
                  v46 = *(_QWORD *)(a3 + 168);
                }
                v44 = *(_WORD *)(a3 + 2 * RangeOfComposedCharactersAtIndex.location - 2 * v46 + 2 * v36);
              }
            }
          }
          *(UniChar *)((char *)&a6[v36++] + 2 * RangeOfComposedCharactersAtIndex.location - 2 * v8) = v44;
          ++v39;
          --v37;
          ++v38;
        }
        while (RangeOfComposedCharactersAtIndex.length != v36);
      }
    }
    else
    {
      v13 = a4;
LABEL_33:
      v69.location = v13;
      v69.length = a5;
      CFStringGetCharacters(a2, v69, a6);
    }
    (*(void (**)(void))(a7 + 16))();
  }
}

void sub_20B93820C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B93822C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t CursorByAdvancingWithCharacters;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD v24[2];
  uint64_t v25[2];
  _QWORD v26[8];
  CFRange v27;

  v2 = *(uint64_t **)(a1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (*(uint64_t *)(a1 + 72) >= 1 && v3 != 0)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = -v8;
    v10 = v8 + 64;
    do
    {
      if ((unint64_t)v8 >= 4)
        v11 = 4;
      else
        v11 = v8;
      LOWORD(v26[0]) = 0;
      if (v8 < 0 || (v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v13 = *(_QWORD *)(v12 + 200), v13 <= v8))
      {
        v15 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(v12 + 176);
        if (v14)
        {
          v15 = *(_WORD *)(v14 + 2 * (v8 + *(_QWORD *)(v12 + 192)));
        }
        else
        {
          v18 = *(_QWORD *)(v12 + 184);
          if (v18)
          {
            v15 = *(char *)(v18 + *(_QWORD *)(v12 + 192) + v8);
          }
          else
          {
            if (*(_QWORD *)(v12 + 216) <= v8 || (v19 = *(_QWORD *)(v12 + 208), v19 > v8))
            {
              v20 = v11 + v9;
              v21 = v10 - v11;
              v22 = v8 - v11;
              v23 = v22 + 64;
              if (v22 + 64 >= v13)
                v23 = *(_QWORD *)(v12 + 200);
              *(_QWORD *)(v12 + 208) = v22;
              *(_QWORD *)(v12 + 216) = v23;
              if (v13 >= v21)
                v13 = v21;
              v27.length = v13 + v20;
              v27.location = v22 + *(_QWORD *)(v12 + 192);
              CFStringGetCharacters(*(CFStringRef *)(v12 + 168), v27, (UniChar *)(v12 + 40));
              v19 = *(_QWORD *)(v12 + 208);
            }
            v15 = *(_WORD *)(v12 - 2 * v19 + 2 * v8 + 40);
          }
        }
      }
      LOWORD(v26[0]) = v15;
      CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      v3 = CursorByAdvancingWithCharacters;
      ++v8;
      --v9;
      ++v10;
    }
    while (v8 < *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64) && CursorByAdvancingWithCharacters != 0);
  }
  sub_20B938408((uint64_t)v26, *v2, v3, *(_QWORD **)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 72);
  if (!v5)
    v6 = 0;
  v25[0] = *(_QWORD *)(a1 + 96);
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  sub_20B937AA4(v2, v25, (uint64_t)v24, (uint64_t)v26, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  return sub_20B93879C(v26);
}

void sub_20B9383F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B93879C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B938408(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, char a6)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  CFStringRef *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const __CFString *v17;
  unint64_t Length;
  unint64_t v19;
  BOOL v20;
  CFIndex v21;
  CFRange v22;
  const __CFString *v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  _BYTE *v30;
  int64_t v31;
  double v32;
  void *__p;
  _BYTE *v35;
  const __CFString *v36;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (char *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4[20] + 8 * a5);
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = a6;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 32);
  v10 = v9 - 1;
  v11 = a4[27] - a4[26];
  if ((a6 & 1) != 0)
  {
    v12 = (CFStringRef *)(a4 + 18);
LABEL_11:
    v17 = *v12;
    Length = CFStringGetLength(*v12);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = Length >= v19;
    v21 = Length - v19;
    if (v20)
      v22.length = v21;
    else
      v22.length = 0;
    v22.location = 0;
    v23 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v17, v22);
    v36 = v23;
    v24 = (_QWORD *)operator new();
    sub_20B872064((uint64_t)v24, v23, *(_QWORD *)a1, 1);
    sub_20B87306C(v24, 1, &__p);
    if (v8 != (char *)&__p)
      sub_20B939A18(v8, (char *)__p, (uint64_t)v35, (v35 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    if (!*(_BYTE *)(a1 + 56))
    {
      v26 = *(_QWORD *)(a1 + 16);
      v25 = *(_BYTE **)(a1 + 24);
      v27 = (uint64_t)&v25[-v26] >> 2;
      v28 = v27 > v10;
      v29 = v27 - v10;
      if (v28)
      {
        v30 = (_BYTE *)(v26 + 4 * v29);
        v31 = v25 - v30;
        if (v25 != v30)
          memmove(*(void **)(a1 + 16), v30, v25 - v30);
        *(_QWORD *)(a1 + 24) = v26 + v31;
      }
    }
    (*(void (**)(_QWORD *))(*v24 + 16))(v24);
    if (v23)
      CFRelease(v23);
    goto LABEL_26;
  }
  if (!v11 || (v13 = (_QWORD *)a4[23], (_QWORD *)a4[24] == v13) || (v14 = v11 >> 2, v14 != *v13))
  {
    v12 = (CFStringRef *)(a4 + 19);
    goto LABEL_11;
  }
  v15 = v14 - v13[a5];
  if (v15 >= v9)
  {
    v16 = v15 - v10;
    v15 = v10;
  }
  else
  {
    if (v15 < (uint64_t)v10)
      sub_20B9386C4(a1 + 16);
    v16 = 0;
  }
  if (v15 >= 1)
    sub_20B93980C((uint64_t)v8, *(_QWORD *)(a1 + 24), (char *)(a4[26] + 4 * v16), (char *)(a4[26] + 4 * v16 + 4 * v15), v15);
LABEL_26:
  LMLanguageModelJointProbability();
  *(double *)(a1 + 48) = -v32;
  return a1;
}

void sub_20B938630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void **v13;
  void *v15;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 24) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9386C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v4 - *(_QWORD *)a1) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      sub_20B80CDD8();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (char *)sub_20B8127BC(v2, v10);
      v6 = *(_DWORD **)a1;
      v4 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *(_DWORD *)v12 = 1;
    v5 = v12 + 4;
    while (v4 != v6)
    {
      v14 = *--v4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v4 = 1;
    v5 = v4 + 1;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

_QWORD *sub_20B93879C(_QWORD *a1)
{
  void *v2;

  sub_20B9689BC(*(uint64_t **)(*(_QWORD *)(*a1 + 72) + 8));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20B9387E0(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_24C4607D8;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_20B938834(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B938848(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C4607D8;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B938898(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_20B9388B4(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t *v40;
  uint64_t v41;
  double v42;
  uint64_t *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t *v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  double v73;
  uint64_t *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t *v102;
  double v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  int64_t v114;
  uint64_t v115;

void sub_20B93927C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v6 = *a1;
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)*a2 + 176))(*a2);
  v8 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v9 = *a2;
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)*a3 + 176))(*a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9);
  if (v7 >= v8)
  {
    if (v10 < v11)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      v15 = (*(double (**)(uint64_t))(*(_QWORD *)*a2 + 176))(*a2);
      if (v15 < (*(double (**)(uint64_t))(*(_QWORD *)v14 + 176))(v14))
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  else
  {
    v12 = *a1;
    if (v10 >= v11)
    {
      *a1 = *a2;
      *a2 = v12;
      v17 = (*(double (**)(uint64_t))(*(_QWORD *)*a3 + 176))(*a3);
      if (v17 < (*(double (**)(uint64_t))(*(_QWORD *)v12 + 176))(v12))
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v12;
    }
  }
}

BOOL sub_20B9393D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t *v19;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = (*(double (**)(_QWORD))(*(_QWORD *)*(a2 - 1) + 176))(*(a2 - 1));
      if (v7 < (*(double (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20B93927C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20B9395C0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_20B9396C4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      sub_20B93927C(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)*v10 + 176))(*v10);
    if (v14 < (*(double (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13))
    {
      v15 = *v10;
      v16 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16)
          break;
        v17 = *(uint64_t *)((char *)a1 + v16 + 8);
        v18 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 176))(v15);
        v16 -= 8;
        if (v18 >= (*(double (**)(uint64_t))(*(_QWORD *)v17 + 176))(v17))
        {
          v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v15;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void sub_20B9395C0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  sub_20B93927C(a1, a2, a3);
  v8 = *a3;
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)*a4 + 176))(*a4);
  if (v9 < (*(double (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    v11 = *a2;
    v12 = (*(double (**)(uint64_t))(*(_QWORD *)*a3 + 176))(*a3);
    if (v12 < (*(double (**)(uint64_t))(*(_QWORD *)v11 + 176))(v11))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      v15 = (*(double (**)(uint64_t))(*(_QWORD *)*a2 + 176))(*a2);
      if (v15 < (*(double (**)(uint64_t))(*(_QWORD *)v14 + 176))(v14))
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
}

void sub_20B9396C4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;

  sub_20B9395C0(a1, a2, a3, a4);
  v10 = *a4;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)*a5 + 176))(*a5);
  if (v11 < (*(double (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10))
  {
    v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)*a4 + 176))(*a4);
    if (v14 < (*(double (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13))
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      v17 = (*(double (**)(uint64_t))(*(_QWORD *)*a3 + 176))(*a3);
      if (v17 < (*(double (**)(uint64_t))(*(_QWORD *)v16 + 176))(v16))
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        v19 = *a1;
        v20 = (*(double (**)(uint64_t))(*(_QWORD *)*a2 + 176))(*a2);
        if (v20 < (*(double (**)(uint64_t))(*(_QWORD *)v19 + 176))(v19))
        {
          v21 = *a1;
          *a1 = *a2;
          *a2 = v21;
        }
      }
    }
  }
}

char *sub_20B93980C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      sub_20B80CDD8();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_20B8127BC(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = sub_20B873B74((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_20B9399E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B939A18(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_20B80CDD8();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20B81277C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_20B939B20(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B811FE4(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B939B5C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20BA298F4(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

_QWORD *sub_20B939B98(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C46BB78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20B939BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B939CAC((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B939C14(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B939C38(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20B90C8AC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B939C6C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E550))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B939CAC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B90C8AC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B939CE8(_QWORD *a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  double v38;
  double v39;
  void **v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  _BOOL4 v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t CursorByAdvancingWithCharacters;
  int TokenID;
  char *v84;
  char *v85;
  char *v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  int v108;
  _BOOL4 v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  int v116;
  double v117;
  double v118;
  unint64_t v119;
  double v120;
  double v121;
  BOOL v122;
  double v123;
  double v124;
  uint64_t v125;
  unsigned int v126;
  char *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _BOOL4 v154;
  void **v155;
  char v156;
  void **v157;
  int **v158;
  _DWORD *v159;
  unsigned __int16 *v160;
  unint64_t v161;
  char v162;
  void *v163;
  void *v164;
  uint64_t v165;
  void *v166;
  char *v167;
  unint64_t v168;
  void *__p;
  _DWORD *v170;
  _QWORD v171[2];

  v4 = a1[7];
  v5 = *(_QWORD *)(a1[8] + 8);
  v6 = sub_20B9F1C60(*(_QWORD *)(v4 + 32), a2[1]);
  v8 = v7;
  v159 = (_DWORD *)v4;
  v9 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32), a2[1], 1);
  v11 = v10;
  v160 = v9;
  v161 = v10;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = &v8[-v5];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v6 + 2 * v5;
  v12 = *(double *)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v12 != 0.0)
    goto LABEL_37;
  v14 = a1[9];
  v13 = (uint64_t *)a1[10];
  v15 = *v13;
  v16 = v13[1];
  LODWORD(v166) = 0;
  sub_20B9689F0(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)v14 + 72) + 8), v15, v16, &v166);
  v170 = 0;
  v171[0] = 0;
  __p = 0;
  sub_20B873D0C(&__p, *(const void **)(v14 + 16), *(_QWORD *)(v14 + 24), (uint64_t)(*(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 16)) >> 2);
  v18 = v170;
  v17 = (char *)v171[0];
  if ((unint64_t)v170 >= v171[0])
  {
    v20 = __p;
    v21 = ((char *)v170 - (_BYTE *)__p) >> 2;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62)
      goto LABEL_235;
    v23 = v171[0] - (_QWORD)__p;
    if ((uint64_t)(v171[0] - (_QWORD)__p) >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      v25 = (char *)sub_20B8127BC((uint64_t)v171, v24);
      v20 = __p;
      v18 = v170;
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[4 * v21];
    v17 = &v25[4 * v24];
    *(_DWORD *)v26 = (_DWORD)v166;
    v19 = v26 + 4;
    while (v18 != v20)
    {
      v27 = *--v18;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    __p = v26;
    v170 = v19;
    v171[0] = v17;
    if (v20)
    {
      operator delete(v20);
      v17 = (char *)v171[0];
    }
  }
  else
  {
    *v170 = (_DWORD)v166;
    v19 = (char *)(v18 + 1);
  }
  v170 = v19;
  if (v19 >= v17)
  {
    v29 = (char *)__p;
    v30 = (v19 - (_BYTE *)__p) >> 2;
    v31 = v30 + 1;
    if (!((unint64_t)(v30 + 1) >> 62))
    {
      v32 = v17 - (_BYTE *)__p;
      if (v32 >> 1 > v31)
        v31 = v32 >> 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)sub_20B8127BC((uint64_t)v171, v33);
        v29 = (char *)__p;
        v19 = (char *)v170;
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[4 * v30];
      v36 = &v34[4 * v33];
      *(_DWORD *)v35 = 2;
      v28 = v35 + 4;
      while (v19 != v29)
      {
        v37 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v35 - 1) = v37;
        v35 -= 4;
      }
      __p = v35;
      v170 = v28;
      v171[0] = v36;
      if (v29)
        operator delete(v29);
      goto LABEL_34;
    }
LABEL_235:
    sub_20B80CDD8();
  }
  *(_DWORD *)v19 = 2;
  v28 = v19 + 4;
LABEL_34:
  v170 = v28;
  LMLanguageModelJointProbability();
  v39 = v38;
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = -v39;
  v12 = *(double *)(*(_QWORD *)(a1[6] + 8) + 24);
LABEL_37:
  v40 = (void **)a1[9];
  v41 = (char *)v40[2];
  v42 = (char *)v40[3];
  if (v41 == v42)
    v43 = 0;
  else
    v43 = *((_DWORD *)v42 - 1);
  v44 = v159[10];
  v47 = v42 - v41 == 4 && v43 == 1 || v43 == 502;
  if (((*a2)[1] & 0x800) != 0 && !v47)
    return;
  v155 = v40 + 2;
  v154 = v47;
  __p = 0;
  v170 = 0;
  v171[0] = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v48 = *(uint64_t **)(*((_QWORD *)*v40 + 9) + 8);
  v158 = a2;
  v157 = v40;
  v156 = v44;
  if (v11)
  {
    v49 = 0;
    v50 = 0;
    do
    {
      v51 = v9[v49] - 48;
      LODWORD(v163) = 0;
      sub_20B9689F0(v48, v6 + 2 * v50, v51, &v163);
      v52 = v167;
      if ((unint64_t)v167 >= v168)
      {
        v54 = (char *)v166;
        v55 = (v167 - (_BYTE *)v166) >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          sub_20B80CDD8();
        v57 = v168 - (_QWORD)v166;
        if ((uint64_t)(v168 - (_QWORD)v166) >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)sub_20B8127BC((uint64_t)&v168, v58);
          v54 = (char *)v166;
          v52 = v167;
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[4 * v55];
        *(_DWORD *)v60 = (_DWORD)v163;
        v53 = v60 + 4;
        while (v52 != v54)
        {
          v61 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        v166 = v60;
        v167 = v53;
        v168 = (unint64_t)&v59[4 * v58];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_DWORD *)v167 = (_DWORD)v163;
        v53 = v52 + 4;
      }
      v167 = v53;
      v62 = v170;
      if ((unint64_t)v170 >= v171[0])
      {
        v64 = __p;
        v65 = ((char *)v170 - (_BYTE *)__p) >> 3;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
          sub_20B80CDD8();
        v67 = v171[0] - (_QWORD)__p;
        if ((uint64_t)(v171[0] - (_QWORD)__p) >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)sub_20B800BE8((uint64_t)v171, v68);
          v64 = __p;
          v62 = v170;
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        *v70 = v51;
        v63 = v70 + 1;
        while (v62 != v64)
        {
          v71 = *((_QWORD *)v62 - 1);
          v62 -= 2;
          *--v70 = v71;
        }
        __p = v70;
        v170 = v63;
        v171[0] = &v69[8 * v68];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)v170 = v51;
        v63 = v62 + 2;
      }
      v170 = v63;
      v50 += v51;
      ++v49;
    }
    while (v49 < v161);
  }
  else
  {
    if (!v40[1])
      goto LABEL_109;
    v72 = (unint64_t)v40[5];
    if ((unint64_t)v8 <= v72)
      goto LABEL_109;
    while (1)
    {
      v73 = *(_QWORD *)(*((_QWORD *)*v40 + 11) + 8);
      v74 = *(unsigned __int16 *)(v6 + 2 * v72);
      v77 = *(_QWORD *)(v73 + 8);
      v75 = v73 + 8;
      v76 = v77;
      if (v77)
      {
        v78 = v75;
        do
        {
          v79 = *(unsigned __int16 *)(v76 + 26);
          v80 = v79 >= v74;
          if (v79 >= v74)
            v81 = (uint64_t *)v76;
          else
            v81 = (uint64_t *)(v76 + 8);
          if (v80)
            v78 = v76;
          v76 = *v81;
        }
        while (*v81);
        if (v78 != v75 && *(unsigned __int16 *)(v78 + 26) <= v74)
          LOWORD(v74) = *(_WORD *)(v78 + 28);
      }
      LOWORD(v163) = v74;
      CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      if (!CursorByAdvancingWithCharacters)
        break;
      if ((char *)++v72 == v8)
        goto LABEL_105;
    }
    if ((char *)v72 != v8)
      goto LABEL_109;
LABEL_105:
    if (LMLexiconCursorHasEntries())
    {
      TokenID = 0;
      if (CursorByAdvancingWithCharacters && *v48)
        TokenID = LMLexiconCursorFirstTokenID();
    }
    else
    {
LABEL_109:
      TokenID = 0;
    }
    v84 = v167;
    if ((unint64_t)v167 >= v168)
    {
      v86 = (char *)v166;
      v87 = (v167 - (_BYTE *)v166) >> 2;
      v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 62)
        sub_20B80CDD8();
      v89 = v168 - (_QWORD)v166;
      if ((uint64_t)(v168 - (_QWORD)v166) >> 1 > v88)
        v88 = v89 >> 1;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
        v90 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v90 = v88;
      if (v90)
      {
        v91 = (char *)sub_20B8127BC((uint64_t)&v168, v90);
        v86 = (char *)v166;
        v84 = v167;
      }
      else
      {
        v91 = 0;
      }
      v92 = &v91[4 * v87];
      v93 = &v91[4 * v90];
      *(_DWORD *)v92 = TokenID;
      v85 = v92 + 4;
      while (v84 != v86)
      {
        v94 = *((_DWORD *)v84 - 1);
        v84 -= 4;
        *((_DWORD *)v92 - 1) = v94;
        v92 -= 4;
      }
      v166 = v92;
      v167 = v85;
      v168 = (unint64_t)v93;
      if (v86)
        operator delete(v86);
    }
    else
    {
      *(_DWORD *)v167 = TokenID;
      v85 = v84 + 4;
    }
    v167 = v85;
    v95 = v170;
    if ((unint64_t)v170 >= v171[0])
    {
      v97 = __p;
      v98 = ((char *)v170 - (_BYTE *)__p) >> 3;
      v99 = v98 + 1;
      if ((unint64_t)(v98 + 1) >> 61)
        sub_20B80CDD8();
      v100 = v171[0] - (_QWORD)__p;
      if ((uint64_t)(v171[0] - (_QWORD)__p) >> 2 > v99)
        v99 = v100 >> 2;
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
        v101 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v101 = v99;
      if (v101)
      {
        v102 = (char *)sub_20B800BE8((uint64_t)v171, v101);
        v97 = __p;
        v95 = v170;
      }
      else
      {
        v102 = 0;
      }
      v103 = &v102[8 * v98];
      v104 = &v102[8 * v101];
      *(_QWORD *)v103 = v8;
      v96 = v103 + 8;
      while (v95 != v97)
      {
        v105 = *((_QWORD *)v95 - 1);
        v95 -= 2;
        *((_QWORD *)v103 - 1) = v105;
        v103 -= 8;
      }
      __p = v103;
      v170 = v96;
      v171[0] = v104;
      if (v97)
        operator delete(v97);
    }
    else
    {
      *(_QWORD *)v170 = v8;
      v96 = v95 + 2;
    }
    v170 = v96;
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v106 = (char *)v157[2];
  v107 = (uint64_t)v157[3];
  if (v106 == (char *)v107)
    v108 = 0;
  else
    v108 = *(_DWORD *)(v107 - 4);
  v111 = v107 - (_QWORD)v106 == 4 && v108 == 1 || v108 == 502;
  if (v155 == &v163)
  {
    v112 = 0;
  }
  else
  {
    sub_20B939A18((char *)&v163, v106, v107, (v107 - (uint64_t)v106) >> 2);
    v112 = (uint64_t)v164;
  }
  sub_20B93980C((uint64_t)&v163, v112, (char *)v166, v167, (v167 - (_BYTE *)v166) >> 2);
  LMLanguageModelJointProbability();
  v114 = -v113;
  if (v111)
  {
    LMLanguageModelJointProbability();
    v114 = v115 * -0.5 + v114 * 0.5;
  }
  v162 = 0;
  v116 = LMLanguageModelTokenSequenceIsBlocklisted() ^ 1;
  if ((v156 & 2) == 0 && (v116 & 1) != 0)
  {
    if (*((_BYTE *)v157 + 56))
    {
      if (v154)
      {
        v117 = v114 + 0.2;
        goto LABEL_168;
      }
      v122 = (v156 & 8) == 0;
      v120 = 0.0;
      v123 = -2.0;
    }
    else
    {
      v120 = 0.0;
      if ((v156 & 8) == 0 && (unint64_t)v157[5] > 2)
        v121 = 0.0;
      else
        v121 = v114;
      if (v154 || (v156 & 8) == 0 && (unint64_t)v157[5] > 2)
        goto LABEL_186;
      if ((v156 & 8) != 0)
      {
LABEL_181:
        if (v114 + v120 >= v12)
        {
          v116 = 0;
        }
        else
        {
          v124 = v114 - *((double *)v157 + 6);
          v116 = v124 < 5.0;
          if (*((_BYTE *)v157 + 56) && v124 < 5.0)
          {
            v118 = v114 + 0.2;
            goto LABEL_185;
          }
        }
LABEL_188:
        v121 = v114;
        goto LABEL_189;
      }
      v122 = (_BYTE *)v157[3] - (_BYTE *)v157[2] == 4;
      v120 = -0.15;
      v123 = -0.5;
    }
    if (v122)
      v120 = v123;
    goto LABEL_181;
  }
  if (!*((_BYTE *)v157 + 56) || ((v116 ^ 1) & 1) != 0)
    goto LABEL_188;
  v117 = v114 + 0.2;
  v118 = v114 + 0.2;
  if (v154)
  {
LABEL_168:
    v119 = (unint64_t)v157[5];
    v118 = 0.0;
    if (v119 <= 2)
    {
      if (v119 == 2)
        v118 = v117 + -1.0;
      else
        v118 = v117;
    }
  }
LABEL_185:
  v121 = v118 + log2((double)(unint64_t)v157[5]) * -0.5;
LABEL_186:
  v116 = 1;
LABEL_189:
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v166)
  {
    v167 = (char *)v166;
    operator delete(v166);
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v116)
  {
    v125 = (2 * *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24));
    if ((_DWORD)v125)
    {
      v126 = 0;
      v127 = *(char **)(*(_QWORD *)(a1[5] + 8) + 24);
      do
      {
        v128 = *v127++;
        v126 = (1025 * (v126 + v128)) ^ ((1025 * (v126 + v128)) >> 6);
        --v125;
      }
      while (v125);
      v129 = 9 * v126;
    }
    else
    {
      v129 = 0;
    }
    v130 = sub_20B90C51C(a1[8], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v159 + 88) + 8));
    sub_20B939B98(&__p, v130);
    v131 = *(void **)(*(_QWORD *)(a1[4] + 8) + 24);
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
      v131 = 0;
    v163 = *(void **)(*(_QWORD *)(a1[5] + 8) + 24);
    v164 = v131;
    v132 = sub_20B90C51C((uint64_t)&v163, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v159 + 88) + 8));
    sub_20B939B98(&v166, v132);
    if (__p && v166)
    {
      v133 = (void **)a1[11];
      v134 = operator new();
      sub_20B9F63E8(v134, (uint64_t *)&__p, (uint64_t *)&v166, **v158, &v160, 32769 * (v129 ^ (v129 >> 11)), 524800, v121);
      v136 = (uint64_t *)v133[1];
      v135 = (unint64_t)v133[2];
      if ((unint64_t)v136 >= v135)
      {
        v138 = ((char *)v136 - (_BYTE *)*v133) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          sub_20B80CDD8();
        v139 = v135 - (_QWORD)*v133;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)sub_20B87FB70(v141);
        else
          v142 = 0;
        v143 = (uint64_t *)(v141 + 8 * v138);
        v144 = v141 + 8 * v142;
        *v143 = v134;
        v137 = v143 + 1;
        v146 = (char *)*v133;
        v145 = (char *)v133[1];
        if (v145 != *v133)
        {
          do
          {
            v147 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v143 = v147;
          }
          while (v145 != v146);
          v145 = (char *)*v133;
        }
        *v133 = v143;
        v133[1] = v137;
        v133[2] = (void *)v144;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *v136 = v134;
        v137 = v136 + 1;
      }
      v133[1] = v137;
    }
    v148 = (std::__shared_weak_count *)v167;
    if (v167)
    {
      v149 = (unint64_t *)(v167 + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v151 = (std::__shared_weak_count *)v170;
    if (v170)
    {
      v152 = (unint64_t *)(v170 + 2);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
  }
}

void sub_20B93A8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B93A950(int a1, __CFDictionary *a2, void *lpsrc)
{
  void *v4;
  unint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  CFNumberRef v8;
  _QWORD valuePtr[2];

  if (!lpsrc)
    return 0;
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  v5 = (unint64_t)v4;
  if (!v4)
    return v5;
  if (!(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 24))(v4)
    || !(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 56))(v5)
    && !(*(unsigned int (**)(unint64_t))(*(_QWORD *)v5 + 216))(v5))
  {
    return 0;
  }
  v6 = (const __CFString *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 440))(v5);
  valuePtr[1] = v6;
  v5 = v6 != 0;
  if (v6)
  {
    v7 = v6;
    valuePtr[0] = CFStringGetLength(v6);
    v8 = CFNumberCreate(0, kCFNumberCFIndexType, valuePtr);
    CFDictionaryAddValue(a2, CFSTR("acceptedSyllableLength"), v8);
    if (v8)
      CFRelease(v8);
    CFRelease(v7);
  }
  return v5;
}

void sub_20B93AA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  sub_20B88AE28((const void **)va, 0);
  sub_20B87E150((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_20B93AA9C()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B93AAB0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = objc_opt_class();
    return MEMORY[0x24BEDD108](v1, sel_isMemberOfClass_, v2);
  }
  return result;
}

uint64_t sub_20B93AAE8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = objc_msgSend_defaultManager(MEMORY[0x24BDD1580], a2, a3);
  return MEMORY[0x24BEDD108](v4, sel_removeItemAtURL_error_, a1);
}

uint64_t sub_20B93AB18(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v4 = objc_msgSend_standardUserDefaults(MEMORY[0x24BDBCF50], a2, a3);
  v6 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v5, a1, 4);
  return MEMORY[0x24BEDD108](v4, sel_BOOLForKey_, v6);
}

void *sub_20B93AB60(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void *result;
  const char *v9;
  uint64_t v10;

  v4 = (void *)objc_msgSend_standardUserDefaults(MEMORY[0x24BDBCF50], a2, a3);
  v6 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v5, a1, 1);
  result = (void *)objc_msgSend_stringForKey_(v4, v7, v6);
  if (result)
    return (void *)objc_msgSend_UTF8String(result, v9, v10);
  return result;
}

uint64_t sub_20B93ABBC()
{
  if (qword_25472B988 != -1)
    dispatch_once(&qword_25472B988, &unk_24C46CE30);
  return qword_25472B990;
}

void sub_20B93ABFC()
{
  __CFString *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;

  v0 = sub_20B8CFF04("/System/Library/PrivateFrameworks/ProofReader.framework");
  v3 = objc_msgSend_stringByStandardizingPath(v0, v1, v2);
  qword_25472B990 = (uint64_t)(id)objc_msgSend_bundleWithPath_(MEMORY[0x24BDD1488], v4, v3);
  CFRelease(v0);
}

CFStringRef sub_20B93AC48(CFStringRef theString, int a2, char a3)
{
  __CFString *MutableCopy;
  const __CFString *v5;

  if ((a3 & 1) == 0)
    return CFStringCreateCopy(0, theString);
  MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  if (sub_20B8D0E3C(a2) == 2 || sub_20B8D0E3C(a2) == 5)
    v5 = CFSTR("Traditional - Simplified");
  else
    v5 = CFSTR("Simplified - Traditional");
  CFStringTransform(MutableCopy, 0, v5, 0);
  return MutableCopy;
}

uint64_t sub_20B93ACD4(int a1)
{
  if (qword_25472B9B0 != -1)
    dispatch_once(&qword_25472B9B0, &unk_24C49D560);
  switch(a1)
  {
    case 5:
      return qword_25472B9A8;
    case 2:
      return qword_25472B9A0;
    case 1:
      return qword_25472B998;
  }
  return 0;
}

void *sub_20B93AD58()
{
  void *result;

  qword_25472B998 = &unk_24C4B8E80;
  qword_25472B9A0 = &unk_24C4B8E98;
  result = &unk_24C4B8EB0;
  qword_25472B9A8 = (uint64_t)result;
  return result;
}

uint64_t sub_20B93ADA8(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[512];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (qword_25472B9C0 != -1)
    dispatch_once(&qword_25472B9C0, &unk_24C49D580);
  result = objc_msgSend_length(a1, a2, a3);
  if (result)
  {
    v7 = result;
    if (objc_msgSend__fastCharacterContents(a1, v5, v6))
    {
      return uset_containsAllCodePoints() != 0;
    }
    else
    {
      v9 = 0;
      while (1)
      {
        if (v7 >= 0x100)
        {
          v10 = 256;
          objc_msgSend_getCharacters_range_(a1, v8, (uint64_t)v11, v9, 256);
        }
        else
        {
          v10 = v7;
          objc_msgSend_getCharacters_range_(a1, v8, (uint64_t)v11, v9, v7);
        }
        result = uset_containsAllCodePoints();
        if (!(_DWORD)result)
          break;
        v9 += v10;
        v7 -= v10;
        if (!v7)
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20B93AEC0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B93AEDC(a1, a2, a3);
  qword_25472B9B8 = result;
  return result;
}

uint64_t sub_20B93AEDC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  HIDWORD(v9) = 0;
  v3 = objc_msgSend_length(CFSTR("[[:Hani:]]"), a2, a3);
  if (objc_msgSend__fastCharacterContents(CFSTR("[[:Hani:]]"), v4, v5))
  {
    result = uset_openPattern();
  }
  else
  {
    MEMORY[0x24BDAC7A8]();
    objc_msgSend_getCharacters_range_(CFSTR("[[:Hani:]]"), v8, (uint64_t)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 0, v3);
    result = uset_openPattern();
  }
  if (SHIDWORD(v9) >= 1)
  {
    if (result)
    {
      uset_close();
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B93AFD4(unsigned int a1)
{
  if (a1 > 6)
    return 0;
  else
    return (uint64_t)*(&off_24C49D5A0 + (int)a1);
}

_QWORD *sub_20B93AFF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_20B93DFD4((uint64_t)(a1 + 1));
  a1[55] = sub_20B896F94();
  sub_20B8B2334(0);
  a1[56] = &qword_25472C9B0;
  a1[57] = a3;
  a1[2] = a2;
  return a1;
}

void sub_20B93B054(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8B812C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B93B068(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  char v13;

  v4 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8) >> 1;
    v6 = *(unsigned __int16 *)(a2 + 88) >> 1;
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 88) >> 1;
    LOWORD(v5) = v6;
  }
  *(_WORD *)(result + 26) = v5;
  *(_DWORD *)(result + 20) = v6;
  v7 = *(_WORD *)(a2 + 104);
  if ((v7 & 0x10) != 0)
  {
    v9 = 8;
  }
  else if ((v7 & 0x20) != 0)
  {
    v9 = 10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 109) - 7;
    if (v8 > 4)
      v9 = 0;
    else
      v9 = dword_20BA4BE80[(char)v8];
  }
  v10 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(result + 8) = *(unsigned __int8 *)(a2 + 109);
  *(_DWORD *)(result + 12) = v10;
  v11 = *(__int16 *)(a2 + 84);
  *(_DWORD *)result = v9;
  *(_DWORD *)(result + 4) = v11;
  HIDWORD(v12) = *(_DWORD *)(a2 + 92);
  LODWORD(v12) = HIDWORD(v12);
  *(_DWORD *)(result + 30) = v12 >> 16;
  *(_BYTE *)(result + 36) = *(_BYTE *)(a2 + 108);
  if (((a3 == 1) & a4) != 0)
    v13 = 4;
  else
    v13 = 0;
  *(_BYTE *)(result + 37) = v13 | (8 * (*(_BYTE *)(a2 + 107) != 0)) | *(_BYTE *)(result + 37) & 0xF0 | (2 * (*(_BYTE *)(a2 + 106) != 0)) | (*(_BYTE *)(a2 + 106) == 0);
  *(_WORD *)(result + 24) = a3;
  if (v4)
    LODWORD(v4) = *(unsigned __int8 *)(v4 + 14);
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void sub_20B93B164(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *i;
  unint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  __int16 *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  BOOL v48;
  int v49;
  int v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  BOOL v65;
  void *__p;
  char *v67;
  char *v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  void *v72;
  _BYTE *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _OWORD v78[9];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)a1[57];
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  __p = 0;
  v67 = 0;
  v68 = 0;
  if (a2)
  {
    v65 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (v10 >> 5) & 1;
    v15 = a2;
    do
    {
      v16 = *(unsigned __int8 *)(v15 + 109);
      if (v16 != 2)
      {
        if (a5 < 1)
        {
          v12 += *(__int16 *)(v15 + 84);
          v17 = *(__int16 *)(v15 + 86);
          if (*(_QWORD *)v15)
          {
            v12 += (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, *(unsigned __int16 *)(*(_QWORD *)v15 + 92), *(unsigned __int16 *)(v15 + 94));
            v16 = *(unsigned __int8 *)(v15 + 109);
          }
          v11 += v17;
          if (v16 != 3)
          {
            if (v16 == 5)
              v13 = 1;
            v18 = sub_20BA20B14(*a1, v15, v14, word_25472B9F8, 0x80u);
            v19 = v18;
            if (v18)
            {
              v20 = v18;
              sub_20B87C64C((char *)&v72, (char *)word_25472B9F8, v18);
              v21 = *(_QWORD *)(v15 + 64);
              if (v21)
                sub_20B87C64C((char *)&v69, *(char **)v21, (unint64_t)*(unsigned int *)(v21 + 8) >> 1);
              v77 = 0;
              v75 = 0u;
              v76 = 0u;
              sub_20B93B068((uint64_t)&v75, v15, v19, a6);
              if (*(unsigned __int16 *)(a1[56] + 50) == *(unsigned __int16 *)(v15 + 94))
              {
                v22 = atomic_load((unsigned __int8 *)&qword_25472B9C8);
                if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_25472B9C8))
                {
                  v78[5] = *(_OWORD *)&off_24C49D628;
                  v78[6] = xmmword_24C49D638;
                  v78[7] = unk_24C49D648;
                  v78[8] = xmmword_24C49D658;
                  v78[1] = *(_OWORD *)&off_24C49D5E8;
                  v78[2] = xmmword_24C49D5F8;
                  v78[3] = *(_OWORD *)&off_24C49D608;
                  v78[4] = xmmword_24C49D618;
                  v78[0] = xmmword_24C49D5D8;
                  sub_20B8CE870((uint64_t)&qword_25472B9D0, v78, 9);
                  __cxa_atexit((void (*)(void *))sub_20B8C97A8, &qword_25472B9D0, &dword_20B7F7000);
                  __cxa_guard_release(&qword_25472B9C8);
                }
                v23 = sub_20B8CEB50((uint64_t)&unk_25472B9E8, word_25472B9F8, v20);
                if (qword_25472B9D8)
                {
                  v24 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25472B9D8);
                  v24.i16[0] = vaddlv_u8(v24);
                  if (v24.u32[0] > 1uLL)
                  {
                    v25 = v23;
                    if (v23 >= qword_25472B9D8)
                      v25 = v23 % qword_25472B9D8;
                  }
                  else
                  {
                    v25 = (qword_25472B9D8 - 1) & v23;
                  }
                  v26 = *(_QWORD **)(qword_25472B9D0 + 8 * v25);
                  if (v26)
                  {
                    for (i = (_QWORD *)*v26; i; i = (_QWORD *)*i)
                    {
                      v28 = i[1];
                      if (v23 == v28)
                      {
                        if (i[3] == v20)
                        {
                          v29 = (unsigned __int16 *)i[2];
                          v30 = v20;
                          v31 = (__int16 *)word_25472B9F8;
                          while ((unsigned __int16)*v31 == *v29)
                          {
                            ++v29;
                            ++v31;
                            if (!--v30)
                              goto LABEL_36;
                          }
                        }
                      }
                      else
                      {
                        if (v24.u32[0] > 1uLL)
                        {
                          if (v28 >= qword_25472B9D8)
                            v28 %= (unint64_t)qword_25472B9D8;
                        }
                        else
                        {
                          v28 &= qword_25472B9D8 - 1;
                        }
                        if (v28 != v25)
                          break;
                      }
                    }
                  }
                }
                LODWORD(v75) = 5;
              }
LABEL_36:
              v32 = v67;
              if (v67 >= v68)
              {
                v36 = __p;
                v37 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - (_BYTE *)__p) >> 3);
                v38 = v37 + 1;
                if (v37 + 1 > 0x666666666666666)
                  sub_20B8821D4();
                if (0x999999999999999ALL * ((v68 - (_BYTE *)__p) >> 3) > v38)
                  v38 = 0x999999999999999ALL * ((v68 - (_BYTE *)__p) >> 3);
                if (0xCCCCCCCCCCCCCCCDLL * ((v68 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
                  v39 = 0x666666666666666;
                else
                  v39 = v38;
                if (v39)
                {
                  v40 = (char *)sub_20B882310((uint64_t)&v68, v39);
                  v36 = __p;
                  v32 = v67;
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[8 * ((v67 - (_BYTE *)__p) >> 3)];
                v42 = v75;
                v43 = v76;
                *((_QWORD *)v41 + 4) = v77;
                *(_OWORD *)v41 = v42;
                *((_OWORD *)v41 + 1) = v43;
                if (v32 == v36)
                {
                  v47 = &v40[40 * v37];
                }
                else
                {
                  v44 = &v40[40 * v37];
                  do
                  {
                    v45 = *(_OWORD *)((char *)v32 - 40);
                    v46 = *(_OWORD *)((char *)v32 - 24);
                    v47 = v44 - 40;
                    *((_QWORD *)v44 - 1) = *((_QWORD *)v32 - 1);
                    *(_OWORD *)(v44 - 24) = v46;
                    *(_OWORD *)(v44 - 40) = v45;
                    v32 = (_OWORD *)((char *)v32 - 40);
                    v44 -= 40;
                  }
                  while (v32 != v36);
                }
                v35 = v41 + 40;
                __p = v47;
                v67 = v41 + 40;
                v68 = &v40[40 * v39];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                v33 = v75;
                v34 = v76;
                *((_QWORD *)v67 + 4) = v77;
                *v32 = v33;
                v32[1] = v34;
                v35 = (char *)v32 + 40;
              }
              v67 = v35;
            }
            v48 = v65 || *(_BYTE *)(v15 + 106) != 0;
            v65 = v48;
          }
        }
        else
        {
          --a5;
        }
      }
      v15 = *(_QWORD *)(v15 + 8);
    }
    while (v15);
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v65 = 0;
  }
  if (a7)
  {
    v49 = 1;
    v11 = sub_20BA20E24(a2, 1, a5);
    v50 = 78;
  }
  else
  {
    v49 = 2 * (v13 == 1);
    v50 = 77;
  }
  v52 = v69;
  v51 = v70;
  v53 = sub_20B947CC4();
  v54 = (int *)a1[57];
  v55 = operator new();
  v56 = v55;
  if (v51 == v52)
    v57 = a3;
  else
    v57 = v52;
  if (v51 == v52)
    v58 = a4;
  else
    v58 = (v51 - v52) >> 1;
  sub_20B916250(v55, v72, (v73 - (_BYTE *)v72) >> 1, v57, v58, (void *)*v53, v53[1], v12, v11, v13, (uint64_t)&__p, v50, v49, *v54);
  *a8 = v56;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v56 + 512))(v56, v65);
  if (__p)
  {
    v67 = (char *)__p;
    operator delete(__p);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
}

void sub_20B93B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  __cxa_guard_abort(&qword_25472B9C8);
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_20B93B7AC(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_WORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_WORD **)a1;
    v9 = (uint64_t)v6 - *(_QWORD *)a1;
    if (v9 <= -3)
      sub_20B80CDD8();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_20B80FD48(v4, v13);
      v8 = *(_WORD **)a1;
      v6 = *(_WORD **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = *a2;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *--v6;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t sub_20B93B88C(uint64_t a1, _QWORD *a2, uint64_t *a3, int a4, _DWORD *a5, unsigned int *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v22;
  BOOL v23;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _DWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  unsigned __int16 *v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _WORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void *v74;
  char *v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  _QWORD *v86;
  __int16 *v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  char *v91;
  unsigned __int16 *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  int v98;
  int v99;
  int v100;
  void *v101;
  uint64_t *v102;
  int v103;
  int *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  __int16 v110;
  uint64_t v111;
  char *v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  int v118;
  char v119;
  int v120;
  int *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  const char *v126;
  void *v127;
  _QWORD *v128;
  uint64_t v129;
  void *v130;
  char v131;
  int v132;
  BOOL v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  void *__s1;
  char *__s1a;
  int __s1b;
  _DWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  void *v149;
  void *__p[2];
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  _QWORD v156[3];
  _QWORD *v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 544))(*a3);
  if (!v12)
    return 0;
  v148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 408))(*a3);
  v13 = *a3;
  if (a6)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 480))(*a3, *a6);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 488))(*a3, *a6);
    v14 = *a6;
    v15 = v148;
  }
  else
  {
    sub_20B8B2334(0);
    v16 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 304))(v13);
    v17 = *v16;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16[1] - *v16) >> 3) < 2
      || *(_BYTE *)(v17 + 38) == 1
      || *(_BYTE *)(v17 + 78) == 1)
    {
      goto LABEL_35;
    }
    v18 = *(unsigned __int16 *)(v17 + 30);
    v19 = *(unsigned __int16 *)(v17 + 70);
    __s1 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 544))(v13);
    v20 = *(unsigned __int16 *)(*v16 + 24);
    sub_20B8B2334(0);
    if ((unsigned __int16)word_25472CA00 > v18 || (unsigned __int16)word_25472CA02 < v18)
    {
      v22 = (unsigned __int16)word_25472CA0A < v18 || (unsigned __int16)word_25472CA08 > v18;
      v23 = !v22 || (unsigned __int16)word_25472CA0E == v18;
      if (!v23 && (unsigned __int16)word_25472CA0C != v18)
        goto LABEL_35;
    }
    sub_20B8B2334(0);
    v25 = (unsigned __int16)word_25472CA00 <= v19 && (unsigned __int16)word_25472CA02 >= v19;
    if (v25
      || ((unsigned __int16)word_25472CA08 <= v19 ? (v26 = (unsigned __int16)word_25472CA0A >= v19) : (v26 = 0),
          v26
       || ((unsigned __int16)word_25472CA0E != v19 ? (v27 = (unsigned __int16)word_25472CA0C == v19) : (v27 = 1),
           v27
        || v18 == (unsigned __int16)word_25472CA0E
        && (v19 != (unsigned __int16)word_25472CA10 ? (v133 = v19 == (unsigned __int16)word_25472CA12) : (v133 = 1), v133))))
    {
LABEL_35:
      v28 = 0;
    }
    else
    {
      v28 = 2000;
      if ((_DWORD)v20 == 2)
      {
        if (!memcmp(__s1, "g0Y0", 2 * v20))
          v28 = 0;
        else
          v28 = 2000;
      }
    }
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 544))(v13);
    v30 = *v16;
    v144 = a1;
    if (v16[1] != *v16)
    {
      v31 = v29;
      v32 = 0;
      v33 = 0;
      v34 = 24;
      do
      {
        v35 = sub_20B8DA374(v31, *(unsigned __int16 *)(v30 + v34), 0, 0);
        if (v33 == v35)
          v36 = 15000;
        else
          v36 = 25000;
        if (v35)
          v37 = v33 == 0;
        else
          v37 = 1;
        if (v37)
          v36 = 0;
        v28 += v36;
        v30 = *v16;
        v31 += 2 * *(unsigned __int16 *)(*v16 + v34);
        ++v32;
        v34 += 40;
        v33 = v35;
      }
      while (v32 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16[1] - *v16) >> 3));
    }
    v38 = *a3;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 112))(*a3);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 480))(v38, (v39 + v28));
    v40 = *a3;
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 384))(*a3);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 488))(v40, (v41 + v28));
    v42 = (_DWORD *)*a3;
    v15 = v148;
    a1 = v144;
    if (v148 != 1)
      v42[55] += v28;
    v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v42 + 112))(v42);
  }
  v43 = *(_QWORD *)*a3;
  if (v15 != 1)
  {
    v60 = (unsigned __int16 *)(*(uint64_t (**)(void))(v43 + 544))();
    if (a4)
    {
      v62 = v61;
      if (v61)
      {
        v63 = v60;
        if (*v60 != 32)
        {
          v65 = MEMORY[0x24BDAC740];
          while (1)
          {
            v67 = *v63++;
            v66 = v67;
            if (!(v67 <= 0x7FuLL ? *(_DWORD *)(v65 + 4 * v66 + 60) & 0x40000 : __maskrune(v66, 0x40000uLL)))
              break;
            if (!--v62)
            {
              v145 = a1;
              v69 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 544))(*a3);
              v71 = v70;
              __p[0] = 0;
              __p[1] = 0;
              *(_QWORD *)&v151 = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)*a3 + 544))(*a3);
              sub_20B87D570(__p, v72 + 1);
              v73 = (char *)__p[1];
              if (__p[1] >= (void *)v151)
              {
                v75 = (char *)__p[0];
                v76 = (char *)__p[1] - (char *)__p[0];
                if ((char *)__p[1] - (char *)__p[0] <= -3)
                  sub_20B80CDD8();
                v77 = v76 >> 1;
                if ((unint64_t)v151 - (unint64_t)__p[0] <= (v76 >> 1) + 1)
                  v78 = v77 + 1;
                else
                  v78 = v151 - (unint64_t)__p[0];
                if ((unint64_t)v151 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFELL)
                  v79 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v79 = v78;
                if (v79)
                {
                  v80 = (char *)sub_20B80FD48((uint64_t)&v151, v79);
                  v75 = (char *)__p[0];
                  v73 = (char *)__p[1];
                }
                else
                {
                  v80 = 0;
                }
                v108 = &v80[2 * v77];
                v109 = &v80[2 * v79];
                *(_WORD *)v108 = 32;
                v74 = v108 + 2;
                while (v73 != v75)
                {
                  v110 = *((_WORD *)v73 - 1);
                  v73 -= 2;
                  *((_WORD *)v108 - 1) = v110;
                  v108 -= 2;
                }
                __p[0] = v108;
                __p[1] = v74;
                *(_QWORD *)&v151 = v109;
                if (v75)
                  operator delete(v75);
              }
              else
              {
                *(_WORD *)__p[1] = 32;
                v74 = v73 + 2;
              }
              __p[1] = v74;
              sub_20B8B17F4(v69, &v69[v71], (uint64_t)__p);
              v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 304))(*a3);
              v153 = 0;
              v154 = 0;
              v155 = 0;
              sub_20B882248(&v153, *(const void **)v111, *(_QWORD *)(v111 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v111 + 8) - *(_QWORD *)v111) >> 3));
              v112 = v153;
              if (v153 == v154)
              {
                v86 = 0;
              }
              else
              {
                ++*((_WORD *)v153 + 12);
                v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 200))(*a3);
                v138 = v14;
                v114 = *(char *)(*a3 + 87);
                if (v114 >= 0)
                  v115 = *a3 + 64;
                else
                  v115 = *(_QWORD *)(*a3 + 64);
                if (v114 >= 0)
                  v116 = *(unsigned __int8 *)(*a3 + 87);
                else
                  v116 = *(_QWORD *)(*a3 + 72);
                v117 = sub_20B947CC4();
                __s1b = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 112))(*a3);
                v147 = v116;
                v149 = (void *)v115;
                v136 = v113;
                v118 = *(_DWORD *)(*a3 + 220);
                v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 376))(*a3);
                v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 408))(*a3);
                v121 = *(int **)(v145 + 456);
                v86 = (_QWORD *)operator new();
                sub_20B916250((uint64_t)v86, __p[0], ((char *)__p[1] - (char *)__p[0]) >> 1, v149, v147, (void *)*v117, v117[1], __s1b, v118, v119, (uint64_t)&v153, 77, v120, *v121);
                (*(void (**)(_QWORD *, double))(*v86 + 400))(v86, 0.0);
                v14 = v138;
                v86[23] = 0;
                (*(void (**)(_QWORD *, _QWORD))(*v86 + 512))(v86, v136);
                sub_20B8B76AC((_QWORD **)(v145 + 8), (uint64_t)v86);
                v112 = v153;
              }
              if (v112)
              {
                v154 = v112;
                operator delete(v112);
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_146;
            }
          }
        }
      }
    }
    (*(void (**)(uint64_t, double))(*(_QWORD *)*a3 + 400))(*a3, 0.0);
    v64 = *a3;
    *(_QWORD *)(v64 + 184) = 0;
    sub_20B8B76AC((_QWORD **)(a1 + 8), v64);
    goto LABEL_148;
  }
  if ((*(uint64_t (**)(void))(v43 + 48))() != 1 || (**(_BYTE **)(a1 + 456) & 4) != 0)
    goto LABEL_106;
  v44 = (_QWORD *)*a3;
  v45 = *(char *)(*a3 + 87);
  v46 = v45 >= 0 ? (unsigned __int16 *)(*a3 + 64) : *(unsigned __int16 **)(*a3 + 64);
  v47 = v45 >= 0 ? *(unsigned __int8 *)(*a3 + 87) : v44[9];
  v48 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD *))(*v44 + 544))(v44);
  if (!v48 || !v49)
    goto LABEL_107;
  v50 = *v48;
  v51 = v50 - 48;
  v52 = (unsigned __int16)(v50 + 240);
  if (v51 >= 0xA && v52 > 9)
    goto LABEL_107;
  v54 = 1;
  while (v49 != v54)
  {
    v55 = v48[v54];
    v56 = v55 - 48;
    ++v54;
    v57 = (unsigned __int16)(v55 + 240);
    if (v56 >= 0xA && v57 >= 0xA)
    {
      v59 = v54 - 1;
      goto LABEL_96;
    }
  }
  v59 = v49;
  if (v59 < v49 || !v47)
    goto LABEL_107;
LABEL_96:
  v81 = 0;
  while (1)
  {
    v82 = v46[v81];
    v83 = v82 - 48;
    v84 = (unsigned __int16)(v82 + 240);
    if (v83 >= 0xA && v84 > 9)
      break;
    if (v47 == ++v81)
    {
      v81 = v47;
      break;
    }
  }
  if (v49 < v81)
  {
LABEL_106:
    v86 = 0;
  }
  else
  {
LABEL_107:
    v135 = v47;
    v137 = v14;
    v146 = a1;
    v87 = (__int16 *)sub_20B896F94();
    v88 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 560))(*a3, 0);
    v134 = *(unsigned __int16 *)(v88 + 26);
    __s1a = (char *)*(unsigned __int16 *)(v88 + 24);
    *(_OWORD *)__p = *(_OWORD *)v88;
    v151 = *(_OWORD *)(v88 + 16);
    v152 = *(_QWORD *)(v88 + 32);
    v89 = operator new(0x28uLL);
    v154 = (char *)v89 + 40;
    v155 = (char *)v89 + 40;
    v90 = v151;
    *v89 = *(_OWORD *)__p;
    v89[1] = v90;
    *((_QWORD *)v89 + 4) = v152;
    v153 = (char *)v89;
    if (a4)
    {
      if ((_DWORD)__s1a)
      {
        v91 = (char *)v89;
        if (*(_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 544))(*a3) != 32)
        {
          v92 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 544))(*a3);
          if (v92)
          {
            v93 = MEMORY[0x24BDAC740];
            v94 = __s1a;
            while (1)
            {
              v96 = *v92++;
              v95 = v96;
              if (!(v96 <= 0x7FuLL ? *(_DWORD *)(v93 + 4 * v95 + 60) & 0x40000 : __maskrune(v95, 0x40000uLL)))
                break;
              if (!--v94)
              {
                v86 = 0;
                goto LABEL_125;
              }
            }
          }
        }
      }
    }
    v143 = a2;
    v98 = **(_DWORD **)(v146 + 456);
    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 112))(*a3);
    v142 = a5;
    v100 = v87[144];
    v101 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 544))(*a3);
    v102 = sub_20B947CC4();
    v103 = *(_DWORD *)(*a3 + 220);
    v104 = *(int **)(v146 + 456);
    v105 = operator new();
    v86 = (_QWORD *)v105;
    if (v46)
      v106 = v134;
    else
      v106 = 0;
    if (v101)
      v107 = (unint64_t)__s1a;
    else
      v107 = 0;
    sub_20B916250(v105, v101, v107, v46, v106, (void *)*v102, v102[1], v99 + ((v135 - (_DWORD)v134) << ((v98 & 0x20) != 0)) * v100, v103, 0, (uint64_t)&v153, 78, 1, *v104);
    sub_20B8B76AC((_QWORD **)(v146 + 8), (uint64_t)v86);
    a5 = v142;
    a2 = v143;
    v15 = v148;
    v91 = v153;
    if (v153)
    {
LABEL_125:
      v154 = v91;
      operator delete(v91);
    }
    v14 = v137;
  }
LABEL_146:
  v122 = *a3;
  *a3 = (uint64_t)v86;
  if (v122)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 16))(v122);
LABEL_148:
    v86 = (_QWORD *)*a3;
  }
  if (!v86)
    return 0;
  v123 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v86 + 304))(v86);
  if (*v123 != v123[1]
    && *(_DWORD *)*v123 == 9
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 176))(*a3) & 1) != 0)
  {
    return 0;
  }
  if (v15 == 1)
    v126 = "[ME::addCandidateFromMecabNode] Adding a partial candidate";
  else
    v126 = "[ME::addCandidateFromMecabNode] Adding a non-partial candidate";
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)*a3 + 528))(*a3, 3, v126, 1);
  if (v15 == 1)
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 112))(*a3);
  v127 = (void *)*a3;
  *a3 = 0;
  __p[0] = v127;
  v156[0] = &unk_24C459188;
  v157 = v156;
  v124 = sub_20B8FDA94(a2, (_QWORD **)__p, 1, 0, (uint64_t)v156);
  v128 = v157;
  if (v157 == v156)
  {
    v129 = 4;
    v128 = v156;
    goto LABEL_164;
  }
  if (v157)
  {
    v129 = 5;
LABEL_164:
    (*(void (**)(void))(*v128 + 8 * v129))();
  }
  v130 = __p[0];
  __p[0] = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 16))(v130);
  v131 = v124 ^ 1;
  if (!a5)
    v131 = 1;
  if ((v131 & 1) == 0)
  {
    v132 = *a5;
    if (*a5 <= v14)
      v132 = v14;
    *a5 = v132;
    return 1;
  }
  return v124;
}

void sub_20B93C394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B93C4DC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  _OWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  int v61;
  uint64_t *v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  char v73;
  void *__p;
  char *v75;
  char *v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a1[57] & 4) != 0)
    return 0;
  v10 = *((char *)a5 + 87);
  if (v10 >= 0)
    v11 = a5 + 8;
  else
    v11 = (void *)a5[8];
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 87);
  else
    v12 = a5[9];
  v13 = (*(uint64_t (**)(_QWORD *))(*a5 + 544))(a5);
  v14 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a5 + 304))(a5);
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3);
  if (v15 < 2)
  {
    v16 = 0;
    goto LABEL_56;
  }
  v18 = v14;
  v19 = *(_DWORD *)a1[57];
  __p = 0;
  v75 = 0;
  v76 = 0;
  sub_20B8B3708(&__p, v15);
  v67 = v19;
  v71 = a3;
  v72 = v12;
  v68 = (void *)v13;
  v69 = v11;
  v70 = a2;
  v20 = *v18;
  if (v18[1] != *v18)
  {
    v21 = 0;
    v22 = 0;
    v73 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = (__int128 *)(v20 + 40 * v21);
      if (*((_BYTE *)v25 + 38) != 1)
      {
        v26 = a1[56];
        v27 = *(unsigned __int16 *)(v20 + 40 * v21 + 30);
        v28 = *(_QWORD *)(v26 + 40);
        if (v23)
        {
          if (v28 <= v27 || (v29 = *(_BYTE *)(*(_QWORD *)(v26 + 32) + v27), (v29 & 1) == 0))
          {
            if ((v73 & 1) != 0)
              goto LABEL_48;
            v73 = 0;
            v23 = 1;
            goto LABEL_27;
          }
          if ((*(_DWORD *)&v73 & ((v29 & 2) >> 1) & 1) != 0)
            goto LABEL_48;
          v23 = 1;
          v31 = 1;
          goto LABEL_26;
        }
        if (v28 > v27)
        {
          v30 = *(_BYTE *)(*(_QWORD *)(v26 + 32) + v27);
          v23 = (v30 & 2) != 0;
          if ((v30 & 2) != 0)
            v31 = v30 & 1;
          else
            v31 = 0;
LABEL_26:
          v73 = v31;
          goto LABEL_27;
        }
        v23 = 0;
        v73 = 0;
      }
LABEL_27:
      v32 = v75;
      if (v75 >= v76)
      {
        v36 = __p;
        v37 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - (_BYTE *)__p) >> 3);
        v38 = v37 + 1;
        if (v37 + 1 > 0x666666666666666)
          sub_20B8821D4();
        if (0x999999999999999ALL * ((v76 - (_BYTE *)__p) >> 3) > v38)
          v38 = 0x999999999999999ALL * ((v76 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v76 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v39 = 0x666666666666666;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_20B882310((uint64_t)&v76, v39);
          v36 = __p;
          v32 = v75;
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[40 * v37];
        v42 = *v25;
        v43 = v25[1];
        *((_QWORD *)v41 + 4) = *((_QWORD *)v25 + 4);
        *(_OWORD *)v41 = v42;
        *((_OWORD *)v41 + 1) = v43;
        if (v32 == v36)
        {
          v47 = &v40[40 * v37];
        }
        else
        {
          v44 = &v40[40 * v37];
          do
          {
            v45 = *(_OWORD *)((char *)v32 - 40);
            v46 = *(_OWORD *)((char *)v32 - 24);
            v47 = v44 - 40;
            *((_QWORD *)v44 - 1) = *((_QWORD *)v32 - 1);
            *(_OWORD *)(v44 - 24) = v46;
            *(_OWORD *)(v44 - 40) = v45;
            v32 = (_OWORD *)((char *)v32 - 40);
            v44 -= 40;
          }
          while (v32 != v36);
        }
        v35 = v41 + 40;
        __p = v47;
        v75 = v41 + 40;
        v76 = &v40[40 * v39];
        if (v36)
          operator delete(v36);
      }
      else
      {
        v33 = *v25;
        v34 = v25[1];
        *((_QWORD *)v75 + 4) = *((_QWORD *)v25 + 4);
        *v32 = v33;
        v32[1] = v34;
        v35 = (char *)v32 + 40;
      }
      v75 = v35;
      v48 = *v18 + 40 * v21;
      v49 = *(_DWORD *)(v48 + 4);
      v24 += v49
           + (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, v22, *(unsigned __int16 *)(v48 + 30));
      v20 = *v18;
      v22 = *(unsigned __int16 *)(*v18 + 40 * v21++ + 32);
      if (0xCCCCCCCCCCCCCCCDLL * ((v18[1] - *v18) >> 3) <= v21)
        goto LABEL_48;
    }
  }
  v24 = 0;
  v22 = 0;
LABEL_48:
  v50 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, v22, 0);
  v51 = (char *)__p;
  if (__p == v75)
  {
    v56 = 0;
    v55 = 0;
  }
  else
  {
    v52 = 0;
    v53 = 0;
    v54 = (char *)__p;
    do
    {
      v52 += *((_WORD *)v54 + 13);
      v53 += *((_WORD *)v54 + 12);
      v54 += 40;
    }
    while (v54 != v75);
    v55 = v52;
    v56 = v53;
  }
  if (v12 == v55)
  {
    v16 = 0;
    a2 = v70;
    if (!__p)
      goto LABEL_56;
    goto LABEL_55;
  }
  v61 = sub_20BA20E24(v71, 0xCCCCCCCCCCCCCCCDLL * ((v75 - (_BYTE *)__p) >> 3), a4);
  v62 = sub_20B947CC4();
  v63 = (int *)a1[57];
  v64 = operator new();
  v16 = (_QWORD *)v64;
  if (v68)
    v65 = v56;
  else
    v65 = 0;
  if (v69)
    v66 = v55;
  else
    v66 = 0;
  sub_20B916250(v64, v68, v65, v69, v66, (void *)*v62, v62[1], v50 + v24 + ((1500 * (v72 - (_DWORD)v55)) << ((v67 & 0x20) == 0)), v61, 0, (uint64_t)&__p, 78, 1, *v63);
  (*(void (**)(_QWORD *, double))(*v16 + 400))(v16, 0.0);
  a2 = v70;
  v16[23] = 0;
  sub_20B8B76AC((_QWORD **)a1 + 1, (uint64_t)v16);
  v51 = (char *)__p;
  if (__p)
  {
LABEL_55:
    v75 = v51;
    operator delete(v51);
  }
LABEL_56:
  __p = v16;
  v77[0] = &unk_24C459188;
  v78 = v77;
  v17 = sub_20B8FDA94(a2, (_QWORD **)&__p, 2, 0, (uint64_t)v77);
  v57 = v78;
  if (v78 == v77)
  {
    v58 = 4;
    v57 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_61;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_61:
  v59 = __p;
  __p = 0;
  if (v59)
    (*(void (**)(void *))(*(_QWORD *)v59 + 16))(v59);
  return v17;
}

void sub_20B93CA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  MEMORY[0x20BD39CB0](v28, 0x10F3C4074548AAFLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20B93CAD8(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7, unsigned __int8 a8, int *a9, uint64_t a10)
{
  _QWORD *v11;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v46;
  const char *v47;
  const char *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  const UniChar *v60;
  CFIndex v61;
  uint64_t v62;
  CFStringRef v63;
  NSObject *v64;
  _BOOL4 v66;
  char v67;
  unint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  const void *v79;
  uint64_t v80;
  int v81;
  unsigned __int16 **v82;
  char *v83;
  unsigned __int16 *v84;
  unsigned __int16 **v85;
  unsigned __int16 **v86;
  unsigned __int16 *v87;
  char *v88;
  unsigned __int16 **v89;
  unsigned __int16 *v90;
  char *v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  BOOL v99;
  char v101;
  uint64_t v102;
  char v103;
  int v104;
  BOOL v105;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unsigned __int16 *v110;
  _BOOL4 v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  int v124;
  _QWORD *v125;
  _BOOL4 v126;
  uint64_t v127;
  unint64_t v128;
  _BOOL4 v129;
  unint64_t v130;
  char *v131;
  int v132;
  char v134;
  _OWORD *v136;
  __int16 v137;
  int v138;
  _BYTE *v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  int v144;
  char v145;
  int *v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  void **v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  char *v162;
  int v163;
  _QWORD *v164;
  const char *v165;
  uint64_t v166;
  int v167;
  int v168;
  const char *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BOOL4 v173;
  unint64_t v174;
  int v175;
  int v176;
  char v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  size_t v181;
  unint64_t v182;
  _BOOL4 v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  unsigned int v187;
  unsigned __int16 *v188;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BOOL4 v193;
  uint64_t v194;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v201;
  uint64_t v202;
  const __CFString *v203;
  void **v204;
  uint64_t (**v205)();
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  void *__p;
  _BYTE *v211;
  uint64_t v212;
  BOOL v213;
  __int16 v214;
  void *v215;
  _BYTE *v216;
  uint64_t v217;
  void *__src[3];
  char *v219;
  uint64_t v220;
  _QWORD v221[3];
  _QWORD *v222;
  _BYTE buf[12];
  __int16 v224;
  CFStringRef v225;
  __int16 v226;
  unsigned int v227;
  uint64_t v228;

  v11 = a5;
  v228 = *MEMORY[0x24BDAC8D0];
  v213 = 0;
  v183 = sub_20B969C84(a5, &v213);
  if (v11[8] == v11[7] && a4 == 0)
    return 0;
  v194 = *(_QWORD *)(a10 + 184);
  v175 = *(unsigned __int8 *)(v194 + 32);
  v15 = 300;
  if (a7)
    v15 = 302;
  v180 = *(unsigned __int16 *)(a1[55] + v15);
  if (a7)
    v16 = 4;
  else
    v16 = 0;
  v17 = *(_DWORD *)a1[57];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 224))(*a1);
  v19 = sub_20B969844(v17, v18);
  v20 = *(_QWORD *)v11[10];
  v21 = v11[4];
  v22 = (v11[5] - v21) >> 1;
  v23 = v21 + 2 * v20;
  if (v22 <= v20)
    v23 = 0;
  v179 = v23;
  if (v21)
    v24 = v22 - v20;
  else
    v24 = 0;
  v78 = v22 > v20;
  v25 = *(_QWORD *)v11[13];
  v26 = v11[7];
  if (!v78)
    v24 = 0;
  v197 = v24;
  v27 = (v11[8] - v26) >> 1;
  if (v27 <= v25)
    v28 = 0;
  else
    v28 = (char *)(v26 + 2 * v25);
  if (v26)
    v29 = v27 - v25;
  else
    v29 = 0;
  if (v27 <= v25)
    v29 = 0;
  v191 = v11[1];
  v192 = v11[2];
  v30 = !v213 || v183;
  __p = 0;
  v211 = 0;
  v212 = 0;
  v178 = v29;
  sub_20B87C64C((char *)&__p, v28, v29 - v213);
  v32 = __p;
  v31 = v211;
  sub_20B87C64C((char *)&__p, a3, a4);
  v33 = 0xCCCCCCCCCCCCCCCDLL * ((v192 - v191) >> 3);
  v190 = v33;
  if (v30)
  {
    v34 = v33 - *(unsigned __int16 *)(a1[55] + 340);
    v33 = v34 & ~(v34 >> 63);
  }
  if ((~*(_DWORD *)a1[57] & 0x81000000) != 0)
  {
    v36 = 1;
    v198 = a4;
  }
  else
  {
    v35 = sub_20B8FD8DC(a2);
    v36 = 2;
    if (v35 == -1)
      v37 = a4;
    else
      v37 = 0;
    v198 = v37;
    if (v35 != -1 && a4)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v35);
      v41 = *(char **)(v38 + 64);
      v39 = v38 + 64;
      v40 = v41;
      v42 = *(char *)(v39 + 23);
      if (v42 >= 0)
        v40 = (char *)v39;
      a3 = v40;
      v43 = *(_QWORD *)(v39 + 8);
      if (v42 >= 0)
        v43 = v42;
      v198 = v43;
      v36 = 2;
    }
  }
  if (v33 > v190)
  {
    v182 = 0;
    goto LABEL_45;
  }
  v168 = v36;
  v164 = (_QWORD *)a2;
  v182 = 0;
  v170 = 0;
  v187 = v19 & 0xFFFFFFDF | v16;
  v46 = (v31 - v32) >> 1;
  v47 = "exact";
  if (a7)
    v47 = "prefix";
  v169 = v47;
  if (a7)
    v48 = "[MJ::makeMecabSingleWordCandidates] Adding a single-word prefix candidate";
  else
    v48 = "[MJ::makeMecabSingleWordCandidates] Adding a single-word exact candidate";
  v165 = v48;
  if (a7)
    v49 = 2;
  else
    v49 = 0;
  v163 = v49;
  v50 = a4;
  v51 = 0xCCCCCCCCCCCCCCCDLL * ((v192 - v191) >> 3);
  v185 = (v31 - v32) >> 1;
  v186 = v11;
  while (2)
  {
    v52 = 0;
    v53 = v11[13];
    v54 = *(_QWORD *)(v53 + 8 * v33);
    if (v33 == v51)
      v55 = v46;
    else
      v55 = *(_QWORD *)(v53 + 8 * v33);
    if (v192 != v191 && v33 != v51)
      v52 = *(unsigned __int16 *)(v11[1] + 40 * v33 + 30);
    v56 = *(_QWORD *)(v11[10] + 8 * v33);
    v196 = v56;
    if (!v50 && v197 - v56 < 2)
      goto LABEL_253;
    v201 = v197 - v56;
    v57 = v46 - v55;
    v205 = off_24C460C88;
    v209 = 0;
    v207 = 0;
    v208 = 0;
    v206 = 0;
    v58 = (uint64_t (***)())v194;
    if (*(_BYTE *)(v194 + 32))
    {
      v58 = (uint64_t (***)())v194;
      if (v46 != v55)
      {
        sub_20B9B5A9C((uint64_t)&v206, v46 - v55);
        v59 = 0;
        do
        {
          LOWORD(__src[0]) = 0;
          LOWORD(__src[0]) = *((_WORD *)__p + v55 + v59);
          sub_20B8B6470((uint64_t)&v205, v59++, __src, 1uLL, 1, 0, 0xFFFFFF, -1, 0.0, 255);
        }
        while (v57 != v59);
        sub_20B9B6AAC(&v206, v207, *(__int128 ***)(v194 + 8), *(__int128 ***)(v194 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v194 + 16) - *(_QWORD *)(v194 + 8)) >> 3));
        v209 = 1;
        v58 = &v205;
        v50 = a4;
      }
    }
    *(_QWORD *)(a10 + 184) = v58;
    v60 = (const UniChar *)((char *)__p + 2 * v55);
    if (__p)
      v61 = v57 + v50;
    else
      v61 = 0;
    v62 = sub_20B9699F4((const UniChar *)__p + v55, v61, a6);
    v204 = (void **)v62;
    v63 = CFStringCreateWithCharacters(0, v60, v61);
    v203 = v63;
    v64 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v169;
      v224 = 2112;
      v225 = v63;
      v226 = 1024;
      v227 = v187;
      _os_log_debug_impl(&dword_20B7F7000, v64, OS_LOG_TYPE_DEBUG, "[MJ::makeMecabSingleWordCandidates] Searching single-word %s candidates for [%@] with option: 0x%.6X", buf, 0x1Cu);
    }
    if ((sub_20BA20E78(*a1, (uint64_t)v60, v61, v62, 0, v187) & 1) == 0)
    {
      v156 = 4;
      goto LABEL_248;
    }
    if (v62)
      v62 = *(_QWORD *)(v62 + 16);
    v66 = v197 != v196 && v52 != 0;
    v193 = v66;
    v67 = !v183;
    if (v33 != v190)
      v67 = 1;
    v177 = v67;
    if (v179)
      v68 = v201;
    else
      v68 = 0;
    v188 = &word_20BA3BB2A[7 * v52];
    v184 = v68;
    if (a6)
      v69 = v178 == v54;
    else
      v69 = 1;
    v70 = !v69;
    v176 = v70;
    v181 = 2 * v68;
    do
    {
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 240))(*a1);
      if (!v71)
        break;
      if ((*(_DWORD *)a1[57] & 0x4000000) != 0)
        v72 = v61;
      else
        v72 = v198;
      if ((*(_DWORD *)a1[57] & 0x4000000) != 0)
        v73 = (void *)v60;
      else
        v73 = a3;
      sub_20B93B164(a1, v71, v73, v72, v62, a8, 0, &v202);
      v74 = v202;
      v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 544))(v202);
      v77 = v76;
      if (v76)
        v78 = v76 > v201;
      else
        v78 = 0;
      if (!v78)
        goto LABEL_152;
      v79 = (const void *)v75;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 48))(v74) != 1)
        goto LABEL_152;
      v80 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 560))(v74, 0);
      if (v193)
      {
        v81 = *(unsigned __int16 *)(v80 + 30);
        sub_20B8B2334(0);
        v82 = (unsigned __int16 **)(&off_24C499C48 + 2 * *v188);
        v83 = (char *)v82[1];
        v84 = &word_20BA3BB2A[7 * v81];
        v85 = (unsigned __int16 **)(&off_24C499C48 + 2 * *v84);
        if (v83 != (char *)v85[1])
          goto LABEL_152;
        v86 = (unsigned __int16 **)(&off_24C499C48 + 2 * v188[1]);
        v87 = *v86;
        v88 = (char *)v86[1];
        v89 = (unsigned __int16 **)(&off_24C499C48 + 2 * v84[1]);
        v90 = *v89;
        v91 = (char *)v89[1];
        if (v83)
        {
          v92 = *v82;
          v93 = *v85;
          while (*v93 == *v92)
          {
            ++v92;
            ++v93;
            if (!--v83)
              goto LABEL_115;
          }
          goto LABEL_147;
        }
LABEL_115:
        if (v88 != v91)
          goto LABEL_147;
        if (v88)
        {
          while (*v90 == *v87)
          {
            ++v87;
            ++v90;
            if (!--v88)
              goto LABEL_119;
          }
LABEL_147:
          v108 = 7;
          goto LABEL_148;
        }
      }
LABEL_119:
      if (v197 != v196 && !a4 && v77 >= v201 + 1)
      {
        v94 = 0;
        v95 = 0;
        v96 = (uint64_t)v79 + 2 * v201 - 2;
        while (1)
        {
          v97 = v94;
          v98 = *(unsigned __int16 *)(v96 + 2 * v95);
          v99 = (v98 - 12449) < 0x5A || v98 == 12316;
          if (!v99 && v98 != 12540)
            break;
          v94 = 1;
          v95 = 1;
          if ((v97 & 1) != 0)
            goto LABEL_147;
        }
        v101 = 0;
        v102 = 0;
        while (1)
        {
          v103 = v101;
          v104 = *(unsigned __int16 *)(v96 + 2 * v102);
          v105 = (v104 - 12353) < 0x56 || v104 == 12540;
          if (!v105 && v104 != 12316)
            break;
          v101 = 1;
          v102 = 1;
          if ((v103 & 1) != 0)
            goto LABEL_147;
        }
      }
      v107 = v201;
      if (!v79)
        v107 = 0;
      if (v107 != v184 || memcmp(v79, (const void *)(v179 + 2 * v196), v181))
        goto LABEL_147;
      if (**(_DWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 304))(v74) != 9
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 176))(v74) & 1) == 0)
      {
        v110 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 544))(v74);
        v173 = 0;
        v111 = v110[v201] != 32;
        v112 = v177;
        if (v213)
          v112 = 1;
        if ((v112 & 1) == 0)
        {
          v113 = v109;
          if (v109)
          {
            while (1)
            {
              v115 = *v110++;
              v114 = v115;
              if (v115 <= 0x7FuLL)
              {
                if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v114 + 60) & 0x40000) == 0)
                {
LABEL_166:
                  v173 = 0;
                  break;
                }
              }
              else if (!__maskrune(v114, 0x40000uLL))
              {
                goto LABEL_166;
              }
              if (!--v113)
              {
                v173 = v111;
                break;
              }
            }
          }
        }
        v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 544))(v74);
        v118 = v117;
        v119 = *(char *)(v74 + 87);
        v120 = v74 + 64;
        if (v119 < 0)
          v120 = *(_QWORD *)(v74 + 64);
        v171 = v120;
        if (v119 >= 0)
          v121 = *(unsigned __int8 *)(v74 + 87);
        else
          v121 = *(_QWORD *)(v74 + 72);
        v122 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 304))(v74);
        if (*v122 == v122[1] || v118 <= v201)
        {
          v124 = 0;
          v125 = 0;
          goto LABEL_229;
        }
        v166 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 560))(v74, 0);
        v126 = v175 != 0;
        v159 = *(_WORD *)(v166 + 32);
        v161 = *(_WORD *)(v166 + 30);
        v127 = v118 - v201;
        if (!v116)
          v127 = 0;
        v219 = (char *)(v116 + 2 * v201);
        v220 = v127;
        v128 = v121 - v57;
        v129 = v121 > v57;
        if (!v171)
          v128 = 0;
        if (v126 && v129)
          v130 = v128;
        else
          v130 = 0;
        if (v126 && v129)
          v131 = (char *)(v171 + 2 * v57);
        else
          v131 = 0;
        if (v127 == 1)
        {
          v132 = *(unsigned __int16 *)(v116 + 2 * v201);
          if (v132 == 33 || v132 == 65281)
          {
            v134 = 1;
          }
          else
          {
            v134 = v132 == 65311 || v132 == 63;
            if (!v173 && v132 != 63 && v132 != 65311)
LABEL_205:
              v134 = sub_20B969D6C((uint64_t *)&v219);
          }
        }
        else
        {
          if (!v173)
            goto LABEL_205;
          v134 = 0;
        }
        sub_20B8D74E4(__src, 1uLL);
        v136 = __src[0];
        *((_QWORD *)__src[0] + 4) = 0;
        *v136 = 0u;
        v136[1] = 0u;
        *((_BYTE *)v136 + 38) = 2;
        *((_WORD *)v136 + 12) = v220 + v173;
        v137 = *(unsigned __int8 *)(v74 + 87);
        if ((v137 & 0x80u) != 0)
          v137 = *(_DWORD *)(v74 + 72);
        *((_WORD *)v136 + 13) = v137 - v57;
        *((_WORD *)v136 + 15) = v161;
        *((_WORD *)v136 + 16) = v159;
        v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 112))(v74);
        v162 = v131;
        v139 = __src[0];
        *((_DWORD *)__src[0] + 1) = v138;
        v139[37] = v139[37] & 0xFE | v134;
        *(_DWORD *)v139 = *(_DWORD *)v166;
        if (v175)
          v140 = v171;
        else
          v140 = (uint64_t)v60;
        v141 = sub_20B8B79DC((uint64_t)(a1 + 1), v140, v166, v187, buf, 0x1FEuLL, *(_DWORD *)a1[57]);
        v125 = 0;
        v124 = 0;
        if (v141 >= 2 && v141 >> 1 > v57)
        {
          v172 = (v141 >> 1) - v57;
          *((_WORD *)__src[0] + 14) = (v141 >> 1) - v57;
          if (v176)
          {
            v142 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 304))(a6) + 8) - 36);
            v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 112))(v74)
                 - v142
                 + *(__int16 *)(a1[55] + 290);
            v144 = 70;
          }
          else
          {
            v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 112))(v74);
            v144 = 77;
          }
          v216 = 0;
          v215 = 0;
          v217 = 0;
          if (v173)
          {
            v214 = 32;
            sub_20B93B7AC((uint64_t)&v215, &v214);
          }
          v160 = v144;
          v167 = v143;
          v174 = v130;
          sub_20B87C64C((char *)&v215, v219, v220);
          v158 = *(_DWORD *)(v74 + 220);
          v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 376))(v74);
          v146 = (int *)a1[57];
          v147 = operator new();
          v125 = (_QWORD *)v147;
          if (v174)
            v148 = v162;
          else
            v148 = a3;
          if (v174)
            v149 = v174;
          else
            v149 = v198;
          sub_20B916250(v147, v215, (v216 - (_BYTE *)v215) >> 1, v148, v149, &buf[2 * v57], v172, v167, v158, v145, (uint64_t)__src, v160, v163, *v146);
          (*(void (**)(_QWORD *, double))(*v125 + 400))(v125, 0.0);
          v125[23] = 0;
          if (v215)
          {
            v216 = v215;
            operator delete(v215);
          }
          v124 = v176;
        }
        if (__src[0])
        {
          __src[1] = __src[0];
          operator delete(__src[0]);
        }
LABEL_229:
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
        if (!v125)
        {
          v108 = 7;
          continue;
        }
        if (!v124 || (++v170, v170 <= 8))
        {
          (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v125 + 528))(v125, 3, v165, 1);
          v150 = v168;
          if (a9)
          {
            v151 = (*(uint64_t (**)(_QWORD *))(*v125 + 112))(v125);
            v152 = *a9;
            if (*a9 <= v151)
              v152 = v151;
            *a9 = v152;
            v150 = v168;
          }
          v202 = 0;
          *(_QWORD *)buf = v125;
          v221[0] = &unk_24C459188;
          v222 = v221;
          sub_20B8FDA94(v164, (_QWORD **)buf, v150, 0, (uint64_t)v221);
          v153 = v222;
          if (v222 == v221)
          {
            v153 = v221;
            v154 = 4;
LABEL_241:
            (*(void (**)(void))(*v153 + 8 * v154))();
          }
          else if (v222)
          {
            v154 = 5;
            goto LABEL_241;
          }
          v155 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v155)
            (*(void (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155);
          v125 = 0;
        }
        v108 = 8 * (++v182 > v180);
        v74 = (uint64_t)v125;
LABEL_148:
        v202 = 0;
        if (!v74)
          continue;
        goto LABEL_153;
      }
LABEL_152:
      v202 = 0;
      v108 = 7;
LABEL_153:
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
    }
    while (v108 != 8);
    v156 = 2 * (v182 > v180);
    v63 = v203;
LABEL_248:
    v11 = v186;
    v51 = 0xCCCCCCCCCCCCCCCDLL * ((v192 - v191) >> 3);
    if (v63)
      CFRelease(v63);
    v157 = v204;
    if (v204)
    {
      free(*v204);
      MEMORY[0x20BD39CB0](v157, 0x1010C40B1660244);
    }
    v205 = off_24C460C88;
    *(_QWORD *)buf = &v206;
    sub_20B8B66F8((void ***)buf);
    v50 = a4;
    v46 = v185;
    if ((v156 | 4) == 4)
    {
LABEL_253:
      if (++v33 > v51)
        break;
      continue;
    }
    break;
  }
LABEL_45:
  *(_QWORD *)(a10 + 184) = v194;
  v44 = v182 != 0;
  if (__p)
  {
    v211 = __p;
    operator delete(__p);
  }
  return v44;
}

void sub_20B93D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a64;
  void **a65;
  uint64_t a66;
  void *a71;
  uint64_t a72;
  uint64_t v72;
  void *v74;
  void *v75;

  v74 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v74;
    operator delete(v74);
  }
  v75 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v75;
    operator delete(v75);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
  sub_20B87E150(&a64, 0);
  sub_20B8CE758(&a65, 0);
  a66 = (uint64_t)off_24C460C88;
  STACK[0x270] = a44;
  sub_20B8B66F8((void ***)&STACK[0x270]);
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B93DB30(uint64_t *a1, _QWORD *a2, _QWORD *a3, void *a4, unint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, char a9, _DWORD *a10)
{
  uint64_t result;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  _QWORD *v32;

  if (a5 < 2)
    return 0;
  v17 = *a1;
  v18 = *(_DWORD *)a1[57];
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 224))(*a1);
  v20 = sub_20B969960(v18, v19);
  result = sub_20BA20E78(v17, (uint64_t)a4, a5, a6, 0, v20);
  if ((_DWORD)result)
  {
    v21 = 304;
    if (a9)
      v21 = 306;
    v22 = *(unsigned __int16 *)(a1[55] + v21);
    if (a6)
      a6 = *(_QWORD *)(a6 + 16);
    v23 = 0;
    v24 = 1;
    do
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 240))(*a1);
      if (!v25)
        break;
      v26 = v25;
      sub_20B93B164(a1, v25, a4, a5, a6, a8, 0, (uint64_t *)&v32);
      sub_20B93C4DC(a1, a3, v26, a6, v32);
      if (v23 < v22)
        v23 += sub_20B93B88C((uint64_t)a1, a2, (uint64_t *)&v32, a7, a10, 0);
      v27 = a1[55];
      if (v24 > *(unsigned __int16 *)(v27 + 308) || v23 > v22)
        v29 = 3;
      else
        v29 = *(unsigned __int16 *)(v27 + 336) >= (unint64_t)((uint64_t)(a3[7] - a3[6]) >> 3) ? 0 : 3;
      if (v32)
        (*(void (**)(_QWORD *))(*v32 + 16))(v32);
      ++v24;
    }
    while (!v29);
    return 1;
  }
  return result;
}

void sub_20B93DCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 16))(a12);
  _Unwind_Resume(exception_object);
}

void sub_20B93DD08(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4)
{
  NSObject *v7;
  _QWORD *v8;
  _QWORD *i;
  NSObject *v10;
  uint64_t v11;
  int v12;
  _QWORD **v13;
  _QWORD **v14;
  int v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD **)(a3 + 48);
    for (i = *(_QWORD **)(a3 + 56); v8 != i; ++v8)
    {
      v10 = sub_20B9A7C5C(3u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 112))(*v8);
        *(_DWORD *)buf = 138412546;
        v24 = v11;
        v25 = 1024;
        v26 = v12;
        _os_log_debug_impl(&dword_20B7F7000, v10, OS_LOG_TYPE_DEBUG, "Partial phrase: %@ (weight: %d)", buf, 0x12u);
      }
    }
  }
  v13 = *(_QWORD ***)(a3 + 48);
  v14 = *(_QWORD ***)(a3 + 56);
  if (v13 != v14)
  {
    if (*v13)
    {
      v15 = (*(uint64_t (**)(_QWORD))(**v13 + 112))(*v13) + 4000;
      v13 = *(_QWORD ***)(a3 + 48);
      v14 = *(_QWORD ***)(a3 + 56);
    }
    else
    {
      v15 = 4000;
    }
    if (v13 != v14)
    {
      while ((*(int (**)(_QWORD))(**v13 + 112))(*v13) >= v15)
      {
LABEL_20:
        if (++v13 == v14)
          return;
      }
      v16 = (uint64_t)*v13;
      ++*a4;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 480))(v16);
      (*(void (**)(_QWORD, uint64_t, const char *, uint64_t))(**v13 + 528))(*v13, 3, "Adding a partial phrase candidate", 1);
      v21[0] = &unk_24C459188;
      v22 = v21;
      v17 = sub_20B8FDA94(a2, v13, 1, 0, (uint64_t)v21);
      v18 = v22;
      if (v22 == v21)
      {
        v18 = v21;
        v19 = 4;
      }
      else
      {
        if (!v22)
          goto LABEL_17;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_17:
      if ((v17 & 1) == 0)
      {
        v20 = sub_20B9A7C5C(3u);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_20B7F7000, v20, OS_LOG_TYPE_DEBUG, "∟ rejected", buf, 2u);
        }
      }
      goto LABEL_20;
    }
  }
}

void sub_20B93DF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B93DFD4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C462BA8;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20B8789BC(a1 + 16);
  sub_20B80627C((_QWORD *)(a1 + 360));
  sub_20B7F8B20((_OWORD *)(a1 + 368));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  return a1;
}

void sub_20B93E030(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B806284(v2);
  sub_20B878A58(v1);
  _Unwind_Resume(a1);
}

__CFArray *sub_20B93E054(int a1, uint64_t a2, __CFArray *a3, const __CFString *a4)
{
  __CFArray *v4;
  CFStringRef v7;

  v4 = a3;
  if (!a3)
    return v4;
  if (!sub_20B93E134(a1))
    return 0;
  if (a1 == 5 && a4)
  {
    v7 = sub_20B9294A0(a4);
    v4 = sub_20B96534C();
    if (v7)
      CFRelease(v7);
    return v4;
  }
  return sub_20B96534C();
}

void sub_20B93E11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B93E134(int a1)
{
  unint64_t v1;
  unsigned __int8 v3;
  unsigned int v4;
  int v5;
  __int16 v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD **v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *j;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  void *v40;
  CFStringRef cf;
  void *__p[2];
  uint64_t v43;
  _QWORD v44[2];
  char v45;

  v3 = atomic_load((unsigned __int8 *)&qword_25472BAF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472BAF8))
  {
    *(_OWORD *)&qword_25472BB10 = 0u;
    xmmword_25472BB00 = 0u;
    dword_25472BB20 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_20B93E868, &xmmword_25472BB00, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472BAF8);
  }
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  v4 = sub_20B8D0E3C(a1) + 1;
  if (v4 <= 7)
  {
    v5 = 1 << v4;
    if ((v5 & 0x5C) != 0)
    {
      v6 = 26746;
    }
    else
    {
      if ((v5 & 0xA1) != 0)
        return 0;
      v6 = 24938;
    }
    HIBYTE(v43) = 2;
    LOWORD(__p[0]) = v6;
    BYTE2(__p[0]) = 0;
  }
  if (!sub_20B93E90C((unsigned __int8 *)__p))
  {
    if (v43 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    cf = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v7, 0x8000100u);
    v8 = sub_20B828414((uint64_t)&qword_25472BB18, (uint64_t)__p);
    v9 = v8;
    v10 = *((_QWORD *)&xmmword_25472BB00 + 1);
    if (*((_QWORD *)&xmmword_25472BB00 + 1))
    {
      v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472BB00 + 8));
      v11.i16[0] = vaddlv_u8(v11);
      v12 = v11.u32[0];
      if (v11.u32[0] > 1uLL)
      {
        v1 = v8;
        if (v8 >= *((_QWORD *)&xmmword_25472BB00 + 1))
          v1 = v8 % *((_QWORD *)&xmmword_25472BB00 + 1);
      }
      else
      {
        v1 = (*((_QWORD *)&xmmword_25472BB00 + 1) - 1) & v8;
      }
      v14 = *(unsigned __int8 ***)(xmmword_25472BB00 + 8 * v1);
      if (v14)
      {
        for (i = *v14; i; i = *(unsigned __int8 **)i)
        {
          v16 = *((_QWORD *)i + 1);
          if (v16 == v9)
          {
            if ((sub_20B8288BC((uint64_t)&dword_25472BB20, i + 16, (unsigned __int8 *)__p) & 1) != 0)
              goto LABEL_89;
          }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v10)
                v16 %= v10;
            }
            else
            {
              v16 &= v10 - 1;
            }
            if (v16 != v1)
              break;
          }
        }
      }
    }
    v17 = operator new(0x30uLL);
    v18 = v17;
    v44[0] = v17;
    v44[1] = &qword_25472BB10;
    v45 = 0;
    *v17 = 0;
    v17[1] = v9;
    if (SHIBYTE(v43) < 0)
    {
      sub_20B80ACE0((_BYTE *)v17 + 16, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *((_OWORD *)v17 + 1) = *(_OWORD *)__p;
      v17[4] = v43;
    }
    v18[5] = CEMCreateEmojiLocaleData();
    v45 = 1;
    v19 = (float)(unint64_t)(qword_25472BB18 + 1);
    if (v10 && (float)(*(float *)&dword_25472BB20 * (float)v10) >= v19)
    {
LABEL_79:
      v35 = *(uint64_t **)(xmmword_25472BB00 + 8 * v1);
      v36 = v44[0];
      if (v35)
      {
        *(_QWORD *)v44[0] = *v35;
      }
      else
      {
        *(_QWORD *)v44[0] = qword_25472BB10;
        qword_25472BB10 = v36;
        *(_QWORD *)(xmmword_25472BB00 + 8 * v1) = &qword_25472BB10;
        if (!*(_QWORD *)v36)
          goto LABEL_88;
        v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10)
            v37 %= v10;
        }
        else
        {
          v37 &= v10 - 1;
        }
        v35 = (uint64_t *)(xmmword_25472BB00 + 8 * v37);
      }
      *v35 = v36;
LABEL_88:
      v44[0] = 0;
      ++qword_25472BB18;
      sub_20B93EA1C((uint64_t)v44);
LABEL_89:
      if (cf)
        CFRelease(cf);
      goto LABEL_91;
    }
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v19 / *(float *)&dword_25472BB20);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *((_QWORD *)&xmmword_25472BB00 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472BB00 + 1))
      goto LABEL_45;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472BB00 + 1))
    {
      v30 = vcvtps_u32_f32((float)(unint64_t)qword_25472BB18 / *(float *)&dword_25472BB20);
      if (*((_QWORD *)&xmmword_25472BB00 + 1) < 3uLL
        || (v31 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472BB00 + 8)),
            v31.i16[0] = vaddlv_u8(v31),
            v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)&xmmword_25472BB00 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = (void *)xmmword_25472BB00;
          *(_QWORD *)&xmmword_25472BB00 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *((int8x8_t *)&xmmword_25472BB00 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472BB00 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD **)qword_25472BB10;
          if (qword_25472BB10)
          {
            v28 = *(_QWORD *)(qword_25472BB10 + 8);
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472BB00 + 8 * v28) = &qword_25472BB10;
            for (j = *v27; j; v28 = v34)
            {
              v34 = j[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(_QWORD *)&prime)
                  v34 %= *(_QWORD *)&prime;
              }
              else
              {
                v34 &= *(_QWORD *)&prime - 1;
              }
              if (v34 != v28)
              {
                if (!*(_QWORD *)(xmmword_25472BB00 + 8 * v34))
                {
                  *(_QWORD *)(xmmword_25472BB00 + 8 * v34) = v27;
                  goto LABEL_70;
                }
                *v27 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472BB00 + 8 * v34);
                **(_QWORD **)(xmmword_25472BB00 + 8 * v34) = j;
                j = v27;
              }
              v34 = v28;
LABEL_70:
              v27 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_74;
        }
        v40 = (void *)xmmword_25472BB00;
        *(_QWORD *)&xmmword_25472BB00 = 0;
        if (v40)
          operator delete(v40);
        v10 = 0;
        *((_QWORD *)&xmmword_25472BB00 + 1) = 0;
      }
    }
LABEL_74:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v1 = v9 % v10;
      else
        v1 = v9;
    }
    else
    {
      v1 = (v10 - 1) & v9;
    }
    goto LABEL_79;
  }
LABEL_91:
  v38 = sub_20B93E90C((unsigned __int8 *)__p);
  if (!v38)
    sub_20B83B31C("unordered_map::at: key not found");
  v13 = v38 + 40;
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  return v13;
}

void sub_20B93E6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20B93EA1C((uint64_t)&a17);
  sub_20B87E150(&a10, 0);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *MecabraCopyEmojiCharacterArrayForString(int a1, __CFArray *a2)
{
  int v2;

  if (a1 == 1)
    v2 = 11;
  else
    v2 = 12;
  return sub_20B93E054(v2, 0, a2, 0);
}

__CFArray *MecabraCopyEmojiCharacterArrayForStringWithReading(int a1, __CFArray *a2, const __CFString *a3)
{
  return sub_20B93E054(a1, 0, a2, a3);
}

unsigned __int8 *sub_20B93E778(int a1)
{
  unsigned __int8 *result;

  result = sub_20B93E134(a1);
  if (result)
    return (unsigned __int8 *)CEMEmojiLocaleDataGetMecabraFlags();
  return result;
}

unsigned __int8 *sub_20B93E7CC(int a1)
{
  unsigned __int8 *result;

  result = sub_20B93E134(a1);
  if (result)
    return (unsigned __int8 *)CEMEmojiLocaleDataEnableAdaptation();
  return result;
}

unsigned __int8 *sub_20B93E804(int a1)
{
  unsigned __int8 *result;

  result = sub_20B93E134(a1);
  if (result)
    return (unsigned __int8 *)CEMEmojiLocaleDataRecordEmojiEngagement();
  return result;
}

unsigned __int8 *sub_20B93E844(int a1)
{
  unsigned __int8 *result;

  result = sub_20B93E134(a1);
  if (result)
    return (unsigned __int8 *)CEMEmojiLocaleDataResetAdaptationDatabase();
  return result;
}

uint64_t sub_20B93E868(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20B93E8C4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_20B93E8C4(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 24) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *sub_20B93E90C(unsigned __int8 *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *i;
  unint64_t v10;

  v2 = sub_20B828414((uint64_t)&qword_25472BB18, (uint64_t)a1);
  v3 = *((_QWORD *)&xmmword_25472BB00 + 1);
  if (!*((_QWORD *)&xmmword_25472BB00 + 1))
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472BB00 + 8));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
    if (v2 >= *((_QWORD *)&xmmword_25472BB00 + 1))
      v7 = v2 % *((_QWORD *)&xmmword_25472BB00 + 1);
  }
  else
  {
    v7 = (*((_QWORD *)&xmmword_25472BB00 + 1) - 1) & v2;
  }
  v8 = *(unsigned __int8 ***)(xmmword_25472BB00 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = *(unsigned __int8 **)i)
  {
    v10 = *((_QWORD *)i + 1);
    if (v10 == v4)
    {
      if ((sub_20B8288BC((uint64_t)&dword_25472BB20, i + 16, a1) & 1) != 0)
        return i;
    }
    else
    {
      if (v6 > 1)
      {
        if (v10 >= v3)
          v10 %= v3;
      }
      else
      {
        v10 &= v3 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

void sub_20B93EA1C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B93E8C4((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t sub_20B93EA60(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  signed int v12;
  _QWORD *v13;
  int64x2_t *v14;
  int v15;
  const __CFURL *v16;
  const __CFString *v17;
  CFURLRef v18;
  const __CFString *v19;
  CFURLRef v20;
  const char *v21;
  uint64_t v22;
  CFURLRef v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int64x2_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int64x2_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int64x2_t v77;
  char *v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  int64x2_t v93;
  char *v94;
  int64x2_t *v96;
  uint64_t v97;
  int64x2_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = sub_20B8D0E3C(v6);
  if (v7 == 5)
  {
    v8 = sub_20BA1C4F4();
    v7 = sub_20BA1C580(v8, 5);
  }
  sub_20B9F6CA8(a1 + 8, v7, *((const void **)a2 + 5), *((const void **)a2 + 6), *((const void **)a2 + 7), a3, *((_BYTE *)a2 + 8), *((_BYTE *)a2 + 9), 1, 0);
  v9 = (_QWORD *)operator new();
  v9[5] = 0;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v9 + 5;
  v9[6] = 0;
  v9[7] = 0x7FFFFFFFLL;
  v9[8] = a3;
  *(_QWORD *)(a1 + 184) = v9;
  v10 = (_QWORD *)operator new();
  v10[5] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v10 + 5;
  v10[6] = 0;
  v10[7] = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 200) = 0;
  v10[8] = a3;
  *(_QWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 208) = 0;
  sub_20B98B9E8(a1 + 216, 16, a3);
  sub_20B98B9E8(a1 + 312, 8, a3);
  *(_QWORD *)(a1 + 408) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 416) = sub_20B9547EC();
  v11 = operator new();
  v12 = sub_20B8D0E3C(*a2);
  sub_20B90CD24(v11, v12);
  *(_QWORD *)(a1 + 424) = v11;
  *(_QWORD *)(a1 + 432) = a3;
  v13 = (_QWORD *)operator new();
  *v13 = &unk_24C461E58;
  *(_QWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  if (**(_QWORD **)(*(_QWORD *)(a1 + 80) + 8) && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8))
  {
    v14 = (int64x2_t *)(a1 + 448);
    v96 = (int64x2_t *)(a1 + 472);
    v15 = sub_20B8D0E3C(*a2);
    v16 = (const __CFURL *)*((_QWORD *)a2 + 3);
    v17 = sub_20B90897C(v15);
    if (v17)
    {
      v18 = sub_20B8D0CC0(v16, v17);
      if (v18)
      {
        v19 = sub_20B9089A0(v15);
        v20 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x24BDBD240], v16, v19, 1u);
        v23 = v20;
        if (v20)
        {
          sub_20B93AAE8((uint64_t)v20, v21, v22);
          CFRelease(v23);
        }
        sub_20B93AAE8((uint64_t)v18, v21, v22);
        CFRelease(v18);
      }
    }
    v24 = sub_20B8D0E3C(*(_DWORD *)a1) == 1;
    v25 = sub_20B943528(a1 + 8, v24);
    sub_20B93F300((uint64_t *)(a1 + 200), v25);
    v26 = sub_20B93701C(a1 + 8);
    sub_20B93F33C((uint64_t *)(a1 + 208), v26);
    v27 = *(_QWORD *)(a1 + 112);
    if (v27)
      (*(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v27 + 40))(v27, 10, &unk_24C46CE50);
    v28 = (_QWORD *)operator new();
    v29 = v28;
    *v28 = &unk_24C465298;
    v31 = *(_QWORD **)(a1 + 456);
    v30 = *(_QWORD *)(a1 + 464);
    if ((unint64_t)v31 >= v30)
    {
      v33 = ((uint64_t)v31 - v14->i64[0]) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        sub_20B80CDD8();
      v34 = v30 - v14->i64[0];
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      v100 = a1 + 464;
      if (v36)
        v37 = (char *)sub_20B800BE8(a1 + 464, v36);
      else
        v37 = 0;
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      v99 = v39;
      *(_QWORD *)v38 = v29;
      v32 = v38 + 8;
      v98.i64[1] = (uint64_t)(v38 + 8);
      v41 = *(_QWORD **)(a1 + 448);
      v40 = *(_QWORD **)(a1 + 456);
      if (v40 == v41)
      {
        v43 = vdupq_n_s64((unint64_t)v40);
      }
      else
      {
        do
        {
          v42 = *--v40;
          *v40 = 0;
          *((_QWORD *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v40 != v41);
        v43 = *v14;
        v32 = (_QWORD *)v98.i64[1];
        v39 = v99;
      }
      *(_QWORD *)(a1 + 448) = v38;
      *(_QWORD *)(a1 + 456) = v32;
      v98 = v43;
      v44 = *(char **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = v39;
      v99 = v44;
      v97 = v43.i64[0];
      sub_20B8821E8((uint64_t)&v97);
    }
    else
    {
      *v31 = v28;
      v32 = v31 + 1;
    }
    *(_QWORD *)(a1 + 456) = v32;
    v45 = (_QWORD *)operator new();
    *v45 = &unk_24C462B58;
    v45[1] = &off_24C469FD8;
    v45[4] = v45 + 1;
    v45[2] = a1;
    v101 = v45;
    v47 = *(_QWORD **)(a1 + 456);
    v46 = *(_QWORD *)(a1 + 464);
    if ((unint64_t)v47 >= v46)
    {
      v49 = v14->i64[0];
      v50 = ((uint64_t)v47 - v14->i64[0]) >> 3;
      if ((unint64_t)(v50 + 1) >> 61)
        sub_20B80CDD8();
      v51 = v46 - v49;
      v52 = v51 >> 2;
      if (v51 >> 2 <= (unint64_t)(v50 + 1))
        v52 = v50 + 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v52;
      v100 = a1 + 464;
      if (v53)
      {
        v54 = (char *)sub_20B800BE8(a1 + 464, v53);
        v45 = v101;
      }
      else
      {
        v54 = 0;
      }
      v55 = &v54[8 * v50];
      v56 = &v54[8 * v53];
      v99 = v56;
      v101 = 0;
      *(_QWORD *)v55 = v45;
      v48 = v55 + 8;
      v98.i64[1] = (uint64_t)(v55 + 8);
      v58 = *(_QWORD **)(a1 + 448);
      v57 = *(_QWORD **)(a1 + 456);
      if (v57 == v58)
      {
        v60 = vdupq_n_s64((unint64_t)v57);
      }
      else
      {
        do
        {
          v59 = *--v57;
          *v57 = 0;
          *((_QWORD *)v55 - 1) = v59;
          v55 -= 8;
        }
        while (v57 != v58);
        v60 = *(int64x2_t *)(a1 + 448);
        v48 = (_QWORD *)v98.i64[1];
        v56 = v99;
      }
      *(_QWORD *)(a1 + 448) = v55;
      *(_QWORD *)(a1 + 456) = v48;
      v98 = v60;
      v61 = *(char **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = v56;
      v99 = v61;
      v97 = v60.i64[0];
      sub_20B8821E8((uint64_t)&v97);
    }
    else
    {
      v101 = 0;
      *v47 = v45;
      v48 = v47 + 1;
    }
    *(_QWORD *)(a1 + 456) = v48;
    sub_20B940CA0((uint64_t *)&v101, 0);
    v62 = (_QWORD *)operator new();
    v63 = v62;
    *v62 = &unk_24C464FD8;
    v65 = *(_QWORD **)(a1 + 480);
    v64 = *(_QWORD *)(a1 + 488);
    if ((unint64_t)v65 >= v64)
    {
      v67 = ((uint64_t)v65 - v96->i64[0]) >> 3;
      if ((unint64_t)(v67 + 1) >> 61)
        sub_20B80CDD8();
      v68 = v64 - v96->i64[0];
      v69 = v68 >> 2;
      if (v68 >> 2 <= (unint64_t)(v67 + 1))
        v69 = v67 + 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      v100 = a1 + 488;
      if (v70)
        v71 = (char *)sub_20B800BE8(a1 + 488, v70);
      else
        v71 = 0;
      v72 = &v71[8 * v67];
      v73 = &v71[8 * v70];
      v99 = v73;
      *(_QWORD *)v72 = v63;
      v66 = v72 + 8;
      v98.i64[1] = (uint64_t)(v72 + 8);
      v75 = *(_QWORD **)(a1 + 472);
      v74 = *(_QWORD **)(a1 + 480);
      if (v74 == v75)
      {
        v77 = vdupq_n_s64((unint64_t)v74);
      }
      else
      {
        do
        {
          v76 = *--v74;
          *v74 = 0;
          *((_QWORD *)v72 - 1) = v76;
          v72 -= 8;
        }
        while (v74 != v75);
        v77 = *v96;
        v66 = (_QWORD *)v98.i64[1];
        v73 = v99;
      }
      *(_QWORD *)(a1 + 472) = v72;
      *(_QWORD *)(a1 + 480) = v66;
      v98 = v77;
      v78 = *(char **)(a1 + 488);
      *(_QWORD *)(a1 + 488) = v73;
      v99 = v78;
      v97 = v77.i64[0];
      sub_20B8821E8((uint64_t)&v97);
    }
    else
    {
      *v65 = v62;
      v66 = v65 + 1;
    }
    *(_QWORD *)(a1 + 480) = v66;
    v79 = (_QWORD *)operator new();
    *v79 = &unk_24C462B58;
    v79[1] = &off_24C46A030;
    v79[4] = v79 + 1;
    v79[2] = a1;
    v101 = v79;
    v81 = *(_QWORD **)(a1 + 480);
    v80 = *(_QWORD *)(a1 + 488);
    if ((unint64_t)v81 >= v80)
    {
      v83 = ((uint64_t)v81 - v96->i64[0]) >> 3;
      if ((unint64_t)(v83 + 1) >> 61)
        sub_20B80CDD8();
      v84 = v80 - v96->i64[0];
      v85 = v84 >> 2;
      if (v84 >> 2 <= (unint64_t)(v83 + 1))
        v85 = v83 + 1;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v85;
      v100 = a1 + 488;
      if (v86)
      {
        v87 = (char *)sub_20B800BE8(a1 + 488, v86);
        v79 = v101;
      }
      else
      {
        v87 = 0;
      }
      v88 = &v87[8 * v83];
      v89 = &v87[8 * v86];
      v99 = v89;
      v101 = 0;
      *(_QWORD *)v88 = v79;
      v82 = v88 + 8;
      v98.i64[1] = (uint64_t)(v88 + 8);
      v91 = *(_QWORD **)(a1 + 472);
      v90 = *(_QWORD **)(a1 + 480);
      if (v90 == v91)
      {
        v93 = vdupq_n_s64((unint64_t)v90);
      }
      else
      {
        do
        {
          v92 = *--v90;
          *v90 = 0;
          *((_QWORD *)v88 - 1) = v92;
          v88 -= 8;
        }
        while (v90 != v91);
        v93 = *v96;
        v82 = (_QWORD *)v98.i64[1];
        v89 = v99;
      }
      *(_QWORD *)(a1 + 472) = v88;
      *(_QWORD *)(a1 + 480) = v82;
      v98 = v93;
      v94 = *(char **)(a1 + 488);
      *(_QWORD *)(a1 + 488) = v89;
      v99 = v94;
      v97 = v93.i64[0];
      sub_20B8821E8((uint64_t)&v97);
    }
    else
    {
      v101 = 0;
      *v81 = v79;
      v82 = v81 + 1;
    }
    *(_QWORD *)(a1 + 480) = v82;
    sub_20B940CA0((uint64_t *)&v101, 0);
  }
  return a1;
}

void sub_20B93F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;

  a18 = a12;
  sub_20B882394(&a18);
  a18 = a11;
  sub_20B882394(&a18);
  v25 = v18[55];
  v18[55] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_20B940B68(v18 + 53, 0);
  sub_20B98BAB8(v23);
  sub_20B98BAB8(v22);
  sub_20B93F33C(v21, 0);
  sub_20B93F300(v20, 0);
  sub_20B939B5C(v18 + 24, 0);
  sub_20B939B5C(v18 + 23, 0);
  sub_20B9F7C44(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_20B93F300(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B9434A0(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B93F33C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B936FB0(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

BOOL sub_20B93F378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 2)
    return 0;
  LMVocabularyGetSharedVocabulary();
  return LMVocabularyContainsLemmaForCharacters() != 0;
}

uint64_t sub_20B93F3C0(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B93EA60(v4, a1, a2);
  return v4;
}

void sub_20B93F414(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1060C4077409654);
  _Unwind_Resume(a1);
}

uint64_t sub_20B93F438(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v4 = (void **)(a1 + 472);
  sub_20B882394(&v4);
  v4 = (void **)(a1 + 448);
  sub_20B882394(&v4);
  v2 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B940B68((uint64_t *)(a1 + 424), 0);
  sub_20B98BAB8((uint64_t *)(a1 + 312));
  sub_20B98BAB8((uint64_t *)(a1 + 216));
  sub_20B93F33C((uint64_t *)(a1 + 208), 0);
  sub_20B93F300((uint64_t *)(a1 + 200), 0);
  sub_20B939B5C((uint64_t *)(a1 + 192), 0);
  sub_20B939B5C((uint64_t *)(a1 + 184), 0);
  sub_20B9F7C44(a1 + 8);
  return a1;
}

void sub_20B93F4EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = a1[54];
  if (*(_BYTE *)(v2 + 105))
  {
    if (sub_20B93F554((uint64_t)a1))
      return;
    v2 = a1[54];
  }
  if (*(_BYTE *)(v2 + 104))
  {
    sub_20B93F628(a1, 0);
    v3 = a1 + 1;
    sub_20B9F7DAC(v3);
    sub_20B9F7FE4((int *)v3);
  }
}

BOOL sub_20B93F554(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  signed int v5;

  v2 = sub_20B8D0E3C(*(_DWORD *)a1);
  if (v2 == 5)
  {
    sub_20B93F628((uint64_t *)a1, 0);
    sub_20B9F80E0(a1 + 8, 5);
    v3 = sub_20B93701C(a1 + 8);
    sub_20B93F33C((uint64_t *)(a1 + 208), v3);
    v4 = operator new();
    v5 = sub_20B8D0E3C(*(_DWORD *)a1);
    sub_20B90CD24(v4, v5);
    sub_20B940B68((uint64_t *)(a1 + 424), v4);
  }
  return v2 == 5;
}

void sub_20B93F604(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void sub_20B93F628(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_20B9F7CE0(a1 + 1, a2);
  v3 = a1[25];
  if (v3)
  {
    *(_DWORD *)(v3 + 8) = 0;
    sub_20BA29958(*(_QWORD *)(v3 + 16));
    sub_20B9670A4(*(uint64_t **)(v3 + 48));
  }
  v4 = a1[26];
  if (v4)
  {
    sub_20BA29958(*(_QWORD *)(v4 + 16));
    sub_20BA29958(*(_QWORD *)(v4 + 24));
    *(_DWORD *)(v4 + 40) = 0;
  }
  sub_20BA29958(a1[41]);
  sub_20BA29958(a1[29]);
  sub_20BA29958(a1[24]);
  sub_20BA29958(a1[23]);
}

void sub_20B93F6A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_20B93F628(a1, 1);
  v2 = a1[25];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
      sub_20B95B65C(v3);
  }
}

void sub_20B93F6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  char *v7;
  const char *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  CFStringRef v12;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v7 = sub_20B8D101C(*(_DWORD *)(a1 + 8));
  v8 = (const char *)CFStringCreateWithCString(0, v7, 0x8000100u);
  v10 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(a2 + 8);
  while (v10 != v9)
  {
    (*(void (**)(_QWORD, CFMutableDictionaryRef, uint64_t, _QWORD))(*(_QWORD *)*v10 + 16))(*v10, Mutable, a3, 0);
    ++v10;
  }
  v11 = sub_20B8D1044(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, 0x8000100u);
  sub_20B90C8E8(*(_QWORD *)(a1 + 440), v8, (uint64_t)v12, (uint64_t)Mutable);
  if (v12)
    CFRelease(v12);
  if (v8)
    CFRelease(v8);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_20B93F804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  sub_20B87E150((const void **)va, 0);
  sub_20B87E150((const void **)va1, 0);
  sub_20B8CE418((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B93F848(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  unint64_t v35;
  void **v36;
  const void *v37;
  const char *v38;
  uint64_t v39;
  _QWORD *v40;
  const void *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  double *v46;
  double *v47;
  uint64_t v48;
  double v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const __CFArray *v57;
  const __CFArray *v58;
  CFIndex v59;
  const __CFString *ValueAtIndex;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  double v67;
  int *v68;
  char v69;

  if (!a2)
  {
    v11 = (const void *)*MEMORY[0x24BDBD270];
LABEL_7:
    LMLanguageModelSetParameterValue();
    goto LABEL_8;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 416) + 4) <= 7u)
    sub_20B96AE80(a2);
  v10 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode);
  v11 = (const void *)*MEMORY[0x24BDBD270];
  if (v10 != (const void *)*MEMORY[0x24BDBD270])
    goto LABEL_7;
  v12 = v10;
  LMLanguageModelSetParameterValue();
  v11 = v12;
LABEL_8:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8)
    || !**(_QWORD **)(*(_QWORD *)(a1 + 80) + 8)
    || !*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8))
  {
    return 0;
  }
  sub_20B93F628((uint64_t *)a1, 0);
  *(_DWORD *)(a1 + 4) = (a4 << 8) & 0x4000;
  *(_QWORD *)(a1 + 408) = a3;
  v68 = (int *)(a1 + 8);
  v13 = sub_20B9034A0(a2, a1 + 8, a5);
  if (a2 && *(_DWORD *)(a2 + 64) == 21)
    a5 |= 0x10u;
  v16 = sub_20B9435C8(*(_QWORD *)(a1 + 200), v13, a5);
  if (!*(_BYTE *)(v13 + 132)
    && !*(_BYTE *)(v13 + 104)
    && (v27 = *(_QWORD *)(a1 + 208)) != 0
    && *(_QWORD *)(a1 + 408)
    && (v14 = *(const __CFString **)(v13 + 144)) != 0)
  {
    sub_20B9370B0(v27, v14, 1uLL, a5);
    v17 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 24) + 8)
                  - **(_QWORD **)(*(_QWORD *)(a1 + 208) + 24)) >> 3;
  }
  else
  {
    v17 = 0;
  }
  if (!*(_BYTE *)(v13 + 131) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13) & 1) == 0)
  {
    v18 = *(const __CFString **)(v13 + 152);
    v19 = *(_QWORD *)(v13 + 112);
    v20 = *(uint64_t **)(a1 + 208);
    if (v20)
    {
      if (!*(_BYTE *)(v13 + 104))
      {
        v21 = *(_QWORD *)(a1 + 408);
        if (v17 < v21)
        {
          sub_20B937574(v20, v13, a5, v21, v16);
          v17 += (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 16) + 8)
                         - **(_QWORD **)(*(_QWORD *)(a1 + 208) + 16)) >> 3;
        }
      }
    }
    v22 = *(_QWORD *)(v13 + 8);
    if ((!v22 || sub_20B88826C(v22, kMecabraContextOptionPrivateMode) != v11) && v17 <= *(_QWORD *)(a1 + 408))
    {
      sub_20B98BE84((uint64_t *)(a1 + 216), v18, (uint64_t *)(v13 + 160), v19);
      v17 += (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8) - **(_QWORD **)(a1 + 232)) >> 3;
    }
    v23 = *(_QWORD *)(v13 + 8);
    if ((!v23 || sub_20B88826C(v23, kMecabraContextOptionPrivateMode) != v11) && v17 <= *(_QWORD *)(a1 + 408))
      sub_20B98BE84((uint64_t *)(a1 + 312), v18, (uint64_t *)(v13 + 160), v19);
  }
  v69 = 0;
  if (!*(_BYTE *)(v13 + 132))
  {
    v24 = *(_QWORD *)(a1 + 208);
    v25 = !v24 || *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8) - **(_QWORD **)(v24 + 16) < 0x30uLL;
    sub_20B943740(*(_QWORD *)(a1 + 200), v13, a5, v25, &v69);
    if ((a5 & 8) == 0)
    {
      sub_20B9400BC(a1, v13, 1);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) == **(_QWORD **)(a1 + 192))
        sub_20B9400BC(a1, v13, 0);
    }
  }
  v28 = *(_QWORD **)(a1 + 184);
  v28[7] = *(_QWORD *)(a1 + 408);
  v29 = *(_QWORD *)(a1 + 208);
  if (v29)
    sub_20BA29D20(v28, *(_QWORD *)(v29 + 24), v15);
  v30 = *(_QWORD *)(a1 + 200);
  if (v30)
  {
    v31 = *(_QWORD *)(a1 + 208);
    if (v31)
    {
      v32 = *(_QWORD *)(v30 + 16);
      v33 = *(_QWORD *)(v31 + 16);
      v34 = *(void ***)v33;
      v36 = *(void ***)v32;
      v35 = *(_QWORD *)(v32 + 8);
      if (*(_QWORD *)v32 < v35 && (unint64_t)v34 < *(_QWORD *)(v33 + 8))
      {
        while (1)
        {
          v37 = (const void *)objc_msgSend_rawCandidate(*v36, (const char *)v14, v15, v68);
          if (v37)
          {
            if (__dynamic_cast(v37, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C550, 0))
            {
              break;
            }
          }
          v41 = (const void *)objc_msgSend_rawCandidate(*v36, v38, v39);
          if (v41)
            v44 = __dynamic_cast(v41, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45BA50, 0);
          else
            v44 = 0;
          v45 = (const void *)objc_msgSend_rawCandidate(*v34, v42, v43);
          if (v45)
          {
            v46 = (double *)__dynamic_cast(v45, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45BA18, 0);
            if (!v44)
              goto LABEL_63;
            v47 = v46;
            if (!v46)
              goto LABEL_62;
            v49 = (*(double (**)(void *))(*(_QWORD *)v44 + 176))(v44);
            v40 = *(_QWORD **)(a1 + 184);
            if (v49 > v47[14])
            {
              sub_20BA29AC4(*(_QWORD **)(a1 + 184), *v34, v48);
              v40[3] = *v40;
LABEL_62:
              ++v34;
              goto LABEL_64;
            }
            sub_20BA29AC4(*(_QWORD **)(a1 + 184), *v36, v48);
            goto LABEL_52;
          }
          if (v44)
            goto LABEL_62;
LABEL_63:
          ++v36;
LABEL_64:
          v35 = *(_QWORD *)(v32 + 8);
          if ((unint64_t)v36 >= v35 || (unint64_t)v34 >= *(_QWORD *)(v33 + 8))
            goto LABEL_69;
        }
        v40 = *(_QWORD **)(a1 + 184);
        sub_20BA29AC4(v40, *v36, v39);
LABEL_52:
        v40[3] = *v40;
        goto LABEL_63;
      }
LABEL_69:
      while ((unint64_t)v36 < v35)
      {
        v50 = *(_QWORD **)(a1 + 184);
        sub_20BA29AC4(v50, *v36, v15);
        v50[3] = *v50;
        ++v36;
        v35 = *(_QWORD *)(v32 + 8);
      }
      while ((unint64_t)v34 < *(_QWORD *)(v33 + 8))
      {
        v51 = *(_QWORD **)(a1 + 184);
        sub_20BA29AC4(v51, *v34, v15);
        v51[3] = *v51;
        ++v34;
      }
      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 16);
      *(_QWORD *)(v52 + 8) = *(_QWORD *)v52;
      sub_20B8292CC(v52 + 32, *(_QWORD **)(v52 + 40));
      *(_QWORD *)(v52 + 32) = v52 + 40;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 40) = 0;
      v53 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 16);
      *(_QWORD *)(v53 + 8) = *(_QWORD *)v53;
      sub_20B8292CC(v53 + 32, *(_QWORD **)(v53 + 40));
      *(_QWORD *)(v53 + 32) = v53 + 40;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 40) = 0;
    }
  }
  sub_20BA29D20(*(_QWORD **)(a1 + 184), *(_QWORD *)(a1 + 232), v15);
  sub_20BA29D20(*(_QWORD **)(a1 + 184), *(_QWORD *)(a1 + 328), v54);
  sub_20BA29D90(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), 2uLL);
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
  if (v55 == **(_QWORD **)(a1 + 184))
  {
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
  }
  else
  {
    sub_20B93F6E0(a1, a1 + 448, 0);
    v55 = **(_QWORD **)(a1 + 184);
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8);
  }
  if ((unint64_t)(v56 - v55) <= 0x28)
  {
    if (v56 == v55 && *(_BYTE *)(v13 + 104)
      || (!v69 ? (v65 = v56 == v55) : (v65 = 1),
          !v65 ? (v66 = 0) : (v66 = 1),
          (a5 & 0x18) == 0
       && v66
       && !*(_BYTE *)(v13 + 128)
       && *(_QWORD *)(v13 + 56) != *(_QWORD *)(v13 + 48)
       && (LMLanguageModelConditionalProbability(), v67 >= -2.5)))
    {
      v57 = (const __CFArray *)sub_20B93ACD4(*v68);
      v58 = v57;
      if (v57 && CFArrayGetCount(v57) >= 1)
      {
        v59 = 0;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v58, v59);
          v61 = *(_QWORD **)(a1 + 184);
          v62 = operator new();
          sub_20B9C970C(v62, &stru_24C4B3660, ValueAtIndex, 0, 0, 0.0);
          v63 = (void *)sub_20B8E1754(v62);
          sub_20BA29AC4(v61, v63, v64);
          v61[3] = *v61;
          ++v59;
        }
        while (v59 < CFArrayGetCount(v58));
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return 1;
}

void sub_20B93FF44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B93FFA4(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8)
    && **(_QWORD **)(*(_QWORD *)(a1 + 80) + 8)
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8))
  {
    return sub_20BA299C0(*(_QWORD **)(a1 + 184), a2, a3);
  }
  else
  {
    return 0;
  }
}

void sub_20B93FFE0(_QWORD *a1, const __CFArray *a2)
{
  if (*(_QWORD *)(*(_QWORD *)(a1[2] + 32) + 8) && **(_QWORD **)(a1[10] + 8))
  {
    if (*(_QWORD *)(a1[12] + 8))
      sub_20B98BB2C((uint64_t)(a1 + 39), a2);
  }
}

void sub_20B940018(_QWORD *a1, const __CFArray *a2)
{
  if (*(_QWORD *)(*(_QWORD *)(a1[2] + 32) + 8) && **(_QWORD **)(a1[10] + 8))
  {
    if (*(_QWORD *)(a1[12] + 8))
      sub_20B98BB2C((uint64_t)(a1 + 27), a2);
  }
}

void sub_20B940050(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B93F6E0((uint64_t)a1, (uint64_t)(a1 + 59), a2);
    if (*(_QWORD *)(*(_QWORD *)(a1[2] + 32) + 8))
    {
      if (**(_QWORD **)(a1[10] + 8))
      {
        if (*(_QWORD *)(a1[12] + 8))
          sub_20B93F628(a1, 0);
      }
    }
  }
}

void sub_20B9400BC(uint64_t a1, uint64_t a2, int a3)
{
  const __CFString *v4;
  const __CFAllocator *v7;
  __CFString *v8;
  uint64_t v9;
  const __CFString *v10;
  CFRange v11;
  const __CFString *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  const __CFString *ValueAtIndex;
  CFIndex v25;
  CFRange v27;
  _QWORD v28[7];
  const __CFString *v29;
  const __CFString **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  CFIndex Length;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  CFTypeRef cf;

  v4 = *(const __CFString **)(a2 + 144);
  if (v4)
  {
    v37 = 0;
    v38 = &v37;
    v39 = 0x3002000000;
    v40 = sub_20B940414;
    v41 = sub_20B940424;
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    cf = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v4);
    v8 = (__CFString *)v38[5];
    if (v8)
    {
      CFStringTrimWhitespace(v8);
      v33 = 0;
      v34 = &v33;
      v35 = 0x2000000000;
      Length = 0;
      Length = CFStringGetLength((CFStringRef)v38[5]);
      v9 = v34[3];
      if (v9)
      {
        if (a3)
        {
          v29 = 0;
          v30 = &v29;
          v31 = 0x2000000000;
          v32 = 0;
          v10 = (const __CFString *)v38[5];
          v28[0] = MEMORY[0x24BDAC760];
          v28[1] = 0x40000000;
          v28[2] = sub_20B940430;
          v28[3] = &unk_24C49D670;
          v28[4] = &v37;
          v28[5] = &v29;
          v28[6] = &v33;
          sub_20B8D0C18(v10, 1, (uint64_t)v28);
          v11.length = v34[3];
          if (v11.length >= 2 && (uint64_t)v30[3] <= 4)
          {
            v11.location = 0;
            v12 = CFStringCreateWithSubstring(v7, (CFStringRef)v38[5], v11);
            sub_20B94050C(a1, v12, 1);
            if (v12)
              CFRelease(v12);
          }
          _Block_object_dispose(&v29, 8);
        }
        else if (v9 >= 1)
        {
          sub_20B94050C(a1, (CFStringRef)v38[5], 0);
          if (*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) == **(_QWORD **)(a1 + 192))
          {
            v13 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48);
            if (v13 >= 1)
            {
              v14 = (unint64_t)v13 >> 2;
              do
              {
                v15 = *(_QWORD *)(a1 + 424);
                v18 = *(_QWORD *)(v15 + 32);
                v16 = v15 + 32;
                v17 = v18;
                if (!v18)
                  break;
                v19 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * (v14 - 1));
                v20 = v16;
                do
                {
                  v21 = *(_DWORD *)(v17 + 28);
                  v22 = v21 >= v19;
                  if (v21 >= v19)
                    v23 = (uint64_t *)v17;
                  else
                    v23 = (uint64_t *)(v17 + 8);
                  if (v22)
                    v20 = v17;
                  v17 = *v23;
                }
                while (*v23);
                if (v20 == v16)
                  break;
                if (*(_DWORD *)(v20 + 28) > v19)
                  break;
                ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 96), v14 - 1);
                v25 = CFStringGetLength(ValueAtIndex);
                v34[3] -= v25;
              }
              while (v14-- > 1);
            }
            v27.length = v34[3];
            if (v27.length >= 1)
            {
              v27.location = 0;
              v29 = CFStringCreateWithSubstring(v7, (CFStringRef)v38[5], v27);
              sub_20B94050C(a1, v29, 0);
              sub_20B87E150((const void **)&v29, 0);
            }
          }
        }
      }
      _Block_object_dispose(&v33, 8);
    }
    _Block_object_dispose(&v37, 8);
    if (cf)
      CFRelease(cf);
  }
}

void sub_20B940384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  const void *v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, const void *);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  sub_20B87E150((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  sub_20B8A89DC((const void **)(v9 + 40), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B940414(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_20B940424(uint64_t a1)
{
  sub_20B8A89DC((const void **)(a1 + 40), 0);
}

void sub_20B940430(_QWORD *a1, CFRange range, _BYTE *a3)
{
  CFIndex length;
  CFStringRef v6;
  CFRange v7;

  length = range.length;
  v7.location = range.location;
  v7.length = length;
  v6 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(*(_QWORD *)(a1[4] + 8) + 40), v7);
  if (!CEMStringIsSingleEmoji() || *(uint64_t *)(*(_QWORD *)(a1[5] + 8) + 24) > 14)
  {
    *a3 = 1;
    if (!v6)
      return;
    goto LABEL_6;
  }
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) -= length;
  ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v6)
LABEL_6:
    CFRelease(v6);
}

void sub_20B9404F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

UniChar *sub_20B94050C(uint64_t a1, CFStringRef theString, int a3)
{
  const __CFString *v4;
  CFIndex Length;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  CFIndex v13;
  CFIndex v14;
  __CFArray *v15;
  unsigned __int8 v16;
  const __CFString *v17;
  const __CFString *v18;
  _QWORD *v19;
  _QWORD *v20;
  _BYTE *v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t *v37;
  int v38;
  char v39;
  unint64_t v40;
  char *v41;
  CFIndex i;
  const __CFString *ValueAtIndex;
  _QWORD *v44;
  uint64_t v45;
  __int16 v46;
  _WORD *v47;
  void *v48;
  uint64_t v49;
  UniChar *result;
  uint64_t v51;
  unsigned int v52;
  char v53;
  CFIndex v54;
  const __CFString *v55;
  const __CFAllocator *contentsDeallocator;
  CFIndex v57;
  const __CFAllocator *alloc;
  CFIndex v59;
  __CFArray *cf;
  void *__s2;
  _BYTE *v62;
  void *__p;
  _BYTE *v64;
  _WORD *v65;
  const __CFString *v66;
  const __CFString *v67;
  __CFArray *v68;
  __CFArray *v69;
  UniChar *v70;
  CFRange v71;
  CFRange v72;

  v4 = theString;
  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (Length <= 15)
      v7 = 0;
    else
      v7 = Length - 15;
  }
  else
  {
    Length = 0;
    v7 = 0;
  }
  if (Length >= 15)
    v8 = 15;
  else
    v8 = Length;
  if (a3)
    v9 = 1;
  else
    v9 = 2;
  if (a3)
    v10 = -2;
  else
    v10 = -1;
  sub_20B8D06F4(v4, v7, v8, &v70);
  v59 = v8 + v10;
  if (v8 + v10 >= 0)
  {
    v11 = *(uint64_t **)(a1 + 192);
    v12 = v11[1];
    if (v12 == *v11)
    {
      v13 = 0;
      alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v55 = v4;
      contentsDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
      v51 = a1 + 8;
      v52 = v9;
      v53 = a3;
      v54 = v7;
      v57 = v8;
      while (1)
      {
        v14 = v8 - v13;
        if (v13 && v14 == 1)
        {
          if (v13 >= v59)
            goto LABEL_73;
          goto LABEL_72;
        }
        v69 = (__CFArray *)CFStringCreateWithCharactersNoCopy(alloc, &v70[v13], v8 - v13, contentsDeallocator);
        cf = v69;
        v15 = sub_20B93E054(*(_DWORD *)a1, v9, v69, 0);
        v68 = v15;
        if (!v15)
          goto LABEL_65;
        v16 = sub_20B93E778(*(_DWORD *)a1);
        v71.location = v13 + v7;
        v71.length = v14;
        v17 = CFStringCreateWithSubstring(alloc, v4, v71);
        v67 = v17;
        if ((a3 & 1) != 0 || (v16 & 3) == 0)
        {
LABEL_58:
          for (i = 0; i < CFArrayGetCount(v15); ++i)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, i);
            v44 = *(_QWORD **)(a1 + 192);
            v45 = operator new();
            v46 = CFStringGetLength(ValueAtIndex);
            v47 = operator new(2uLL);
            *v47 = v46;
            v64 = v47 + 1;
            v65 = v47 + 1;
            __p = v47;
            *(_WORD *)(v45 + 16) = 0;
            *(_QWORD *)v45 = off_24C460098;
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v45 + 24) = &unk_24C460190;
            sub_20BA07F40((_QWORD *)(v45 + 32), v17, ValueAtIndex, 0, dword_20BA4BE94, (uint64_t)&__p);
            *(_QWORD *)(v45 + 104) = 0;
            *(_DWORD *)(v45 + 112) = 576;
            v48 = (void *)sub_20B8E1754(v45);
            sub_20BA29AC4(v44, v48, v49);
            v44[3] = *v44;
            operator delete(v47);
          }
          v38 = 0;
          goto LABEL_62;
        }
        v72.length = v57;
        v72.location = v54;
        v18 = CFStringCreateWithSubstring(alloc, v55, v72);
        v66 = v18;
        v19 = (_QWORD *)operator new();
        sub_20B872064((uint64_t)v19, v17, v51, 1);
        v20 = (_QWORD *)operator new();
        sub_20B872064((uint64_t)v20, v18, v51, 1);
        sub_20B87306C(v20, 0, &__p);
        sub_20B87306C(v19, 0, &__s2);
        v21 = __s2;
        if ((v16 & 2) != 0)
        {
          v22 = (unint64_t)(v64 - (_BYTE *)__p) >> 2;
          v23 = ((unint64_t)(v62 - (_BYTE *)__s2) >> 2) - 1;
          while (1)
          {
            v24 = v22;
            v22 = (v22 - 1);
            if ((v22 & 0x80000000) != 0 || (v23 & 0x80000000) != 0)
              break;
            v25 = *((_DWORD *)__s2 + v23--);
            if (v25 != *((_DWORD *)__p + v22))
              goto LABEL_32;
          }
          if ((v22 & 0x80000000) != 0)
            goto LABEL_46;
LABEL_32:
          v26 = 0;
          v27 = *(_QWORD *)(a1 + 424);
          v30 = *(_QWORD *)(v27 + 8);
          v28 = v27 + 8;
          v29 = v30;
          v31 = 1;
          do
          {
            if (v29)
            {
              v32 = *((_DWORD *)__p + v26);
              v33 = v28;
              v34 = v29;
              do
              {
                v35 = *(_DWORD *)(v34 + 28);
                v36 = v35 >= v32;
                if (v35 >= v32)
                  v37 = (uint64_t *)v34;
                else
                  v37 = (uint64_t *)(v34 + 8);
                if (v36)
                  v33 = v34;
                v34 = *v37;
              }
              while (*v37);
              if (v33 != v28 && *(_DWORD *)(v33 + 28) <= v32)
                break;
            }
            v31 = v26++ < v22;
          }
          while (v26 != v24);
          if (v31)
            break;
        }
LABEL_46:
        if ((v16 & 1) != 0)
        {
          v40 = (v64 - (_BYTE *)__p) >> 2;
          if (v40 < (v62 - (_BYTE *)__s2) >> 2)
            break;
          v41 = (char *)__p + 4 * v40 + -4 * ((v62 - (_BYTE *)__s2) >> 2);
          if (memcmp(v41, __s2, v64 - v41))
            break;
        }
        v38 = 0;
        v39 = 1;
        if (v21)
          goto LABEL_52;
LABEL_53:
        if (__p)
        {
          v64 = __p;
          operator delete(__p);
        }
        (*(void (**)(_QWORD *))(*v20 + 16))(v20);
        (*(void (**)(_QWORD *))(*v19 + 16))(v19);
        if (v18)
          CFRelease(v18);
        if ((v39 & 1) != 0)
          goto LABEL_58;
LABEL_62:
        if (v17)
          CFRelease(v17);
        v9 = v52;
        LOBYTE(a3) = v53;
        v7 = v54;
        v4 = v55;
        if (v38)
        {
LABEL_66:
          CFRelease(v15);
          goto LABEL_67;
        }
LABEL_65:
        v38 = 0;
        if (v15)
          goto LABEL_66;
LABEL_67:
        v8 = v57;
        if (cf)
          CFRelease(cf);
        if (v38 || v13 >= v59)
          goto LABEL_73;
        v11 = *(uint64_t **)(a1 + 192);
        v12 = *v11;
LABEL_72:
        ++v13;
        if (v11[1] != v12)
          goto LABEL_73;
      }
      v39 = 0;
      v38 = 2;
      if (!v21)
        goto LABEL_53;
LABEL_52:
      v62 = v21;
      operator delete(v21);
      goto LABEL_53;
    }
  }
LABEL_73:
  result = v70;
  if (v70)
    return (UniChar *)MEMORY[0x20BD39C80](v70, 0x1000C80BDFB0063);
  return result;
}

void sub_20B940A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,const void *a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  sub_20B87E150(&a25, 0);
  sub_20B87E150((const void **)(v27 - 120), 0);
  sub_20B88B74C((const void **)(v27 - 112), 0);
  sub_20B87E150((const void **)(v27 - 104), 0);
  if (a10)
    MEMORY[0x20BD39C80](a10, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B940B68(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B8292CC(v2 + 24, *(_QWORD **)(v2 + 32));
    sub_20B8292CC(v2, *(_QWORD **)(v2 + 8));
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B940BC8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B940BDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469FD8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B940C10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469FD8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B940C2C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 13))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 176) + 16))(*(_QWORD *)(v1 + 176), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 32));
  else
    return 0;
}

uint64_t sub_20B940C58(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EDB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B940C94()
{
  return &unk_24C45EDB0;
}

uint64_t *sub_20B940CA0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 32);
    if (v3 == (_QWORD *)(v2 + 8))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 8);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B940D18()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B940D2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A030;
  result[1] = v3;
  return result;
}

uint64_t sub_20B940D60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A030;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B940D7C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 13))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 176) + 16))(*(_QWORD *)(v1 + 176), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 32));
  else
    return 0;
}

uint64_t sub_20B940DA8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EDC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B940DE4()
{
  return &unk_24C45EDC0;
}

uint64_t sub_20B940DF0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  *(double *)(a1 + 16) = a4;
  if (a3)
  {
    v5 = a3 + 8;
    v6 = *(unsigned __int8 *)(a3 + 8);
    *(_QWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = a3 + 24;
    v14 = 0;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 32))(a2, &v14);
    v8 = (const void *)v7;
    v9 = v14;
    if (v14 - 2 < 0)
    {
      if (2 - v14 >= v6)
        v11 = v6;
      else
        v11 = 2 - v14;
      v12 = (char *)(a1 - 4 * v14 + 8);
      memcpy(&v12[-4 * v11], (const void *)(v5 - 4 * v11), 4 * v11);
      memcpy(v12, v8, 4 * v9);
      v10 = v11 + v9;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)(v7 + 4 * (v14 - 2));
      v10 = 2;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = 0;
    v10 = 1;
    *(_DWORD *)(a1 + 4) = 1;
  }
  *(_BYTE *)(a1 + 8) = v10;
  return a1;
}

double sub_20B940ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  const void *v5;
  _BYTE *v6;
  double v7;
  unint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  double v13;
  unint64_t v15;

  v15 = 0;
  v3 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a2 + 32))(a2, &v15);
  v4 = 0.0;
  if (v15 - 127 >= 0xFFFFFFFFFFFFFF82)
  {
    v5 = (const void *)v3;
    v6 = (_BYTE *)(a1 + 8);
    LMLanguageModelConditionalProbability();
    v4 = -v7;
    v8 = v15;
    if (v15 >= 2)
    {
      v9 = *v6 != 0;
      if (*v6)
        v10 = -1;
      else
        v10 = 0;
      memcpy(&unk_25472CED0, &v6[4 * v10], 4 * (*v6 != 0));
      memcpy((char *)&unk_25472CED0 + 4 * v9, v5, 4 * v8);
      v11 = (char *)&unk_25472CED0 + 4 * v9 - 4;
      v12 = 1;
      do
      {
        LMLanguageModelConditionalProbability();
        v4 = v4 - v13;
        ++v12;
        v11 += 4;
      }
      while (v12 < v15);
    }
  }
  return v4;
}

_QWORD *sub_20B940FF4(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = result;
  v2 = (_QWORD *)*result;
  v3 = (_QWORD *)result[1];
  while (v3 != v2)
  {
    v4 = (_QWORD *)*--v3;
    result = v4;
    *v3 = 0;
    if (v4)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v1[1] = v2;
  *((_WORD *)v1 + 12) = 1;
  return result;
}

_QWORD *sub_20B94104C(_QWORD *result, int a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = result[1];
  if ((unint64_t)(v2 - *result) >= 9)
  {
    v4 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 8) + 56))(*(_QWORD *)(v2 - 8));
    if ((_DWORD)result == a2)
    {
      v5 = v4[1];
      v7 = *(_QWORD **)(v5 - 8);
      v6 = (_QWORD *)(v5 - 8);
      result = v7;
      *v6 = 0;
      if (v7)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      v4[1] = v6;
    }
  }
  return result;
}

uint64_t sub_20B9410B4(uint64_t **a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t *v30;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = a1[1];
  if (*a1 == v6 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*(v6 - 1) + 56))(*(v6 - 1)) != a2)
  {
    if (a2 == 1)
    {
      v7 = operator new();
      *(_QWORD *)v7 = &off_24C4681B0;
      *(_QWORD *)(v7 + 8) = 1;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      v15 = (unint64_t)a1[2];
      v9 = a1[1];
      if ((unint64_t)v9 >= v15)
      {
        v17 = v9 - *a1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_20B80CDD8();
        v18 = v15 - (_QWORD)*a1;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v35 = a1 + 2;
        if (v20)
          v20 = (unint64_t)sub_20B87FB70(v20);
        else
          v21 = 0;
        v22 = (uint64_t *)(v20 + 8 * v17);
        v23 = v20 + 8 * v21;
        v34 = v23;
        *v22 = v7;
        v16 = v22 + 1;
        v33.i64[1] = (uint64_t)(v22 + 1);
        v27 = *a1;
        v24 = a1[1];
        if (v24 != *a1)
        {
          do
          {
            v28 = *--v24;
            *v24 = 0;
            *--v22 = v28;
          }
          while (v24 != v27);
          goto LABEL_31;
        }
LABEL_32:
        v29 = vdupq_n_s64((unint64_t)v24);
        goto LABEL_33;
      }
LABEL_15:
      *v9 = v7;
      v16 = v9 + 1;
LABEL_34:
      a1[1] = v16;
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*(a1[1] - 1) + 16))(*(a1[1] - 1), a3);
    }
    if (!a2)
    {
      v7 = operator new();
      *(_QWORD *)v7 = &off_24C467AF8;
      *(_OWORD *)(v7 + 8) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      v8 = (unint64_t)a1[2];
      v9 = a1[1];
      if ((unint64_t)v9 >= v8)
      {
        v10 = v9 - *a1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_20B80CDD8();
        v11 = v8 - (_QWORD)*a1;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v35 = a1 + 2;
        if (v13)
          v13 = (unint64_t)sub_20B87FB70(v13);
        else
          v14 = 0;
        v22 = (uint64_t *)(v13 + 8 * v10);
        v23 = v13 + 8 * v14;
        v34 = v23;
        *v22 = v7;
        v16 = v22 + 1;
        v33.i64[1] = (uint64_t)(v22 + 1);
        v25 = *a1;
        v24 = a1[1];
        if (v24 != *a1)
        {
          do
          {
            v26 = *--v24;
            *v24 = 0;
            *--v22 = v26;
          }
          while (v24 != v25);
LABEL_31:
          v29 = *(int64x2_t *)a1;
          v16 = (uint64_t *)v33.i64[1];
          v23 = v34;
LABEL_33:
          *a1 = v22;
          a1[1] = v16;
          v33 = v29;
          v30 = a1[2];
          a1[2] = (uint64_t *)v23;
          v34 = (unint64_t)v30;
          v32 = v29.i64[0];
          sub_20B8821E8((uint64_t)&v32);
          goto LABEL_34;
        }
        goto LABEL_32;
      }
      goto LABEL_15;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*(a1[1] - 1) + 16))(*(a1[1] - 1), a3);
}

void sub_20B941318(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B941338(int64x2_t *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  int64x2_t *v35;

  v6 = a1->i64[1];
  if (a1->i64[0] == v6
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 - 8) + 56))(*(_QWORD *)(v6 - 8)) != a2)
  {
    if (a2 == 2)
    {
      v7 = operator new();
      *(_QWORD *)v7 = &off_24C467AA8;
      *(_QWORD *)(v7 + 8) = 1;
      v15 = a1[1].u64[0];
      v9 = (uint64_t *)a1->i64[1];
      if ((unint64_t)v9 >= v15)
      {
        v17 = ((uint64_t)v9 - a1->i64[0]) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_20B80CDD8();
        v18 = v15 - a1->i64[0];
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v35 = a1 + 1;
        if (v20)
          v20 = (unint64_t)sub_20B87FB70(v20);
        else
          v21 = 0;
        v22 = (uint64_t *)(v20 + 8 * v17);
        v23 = v20 + 8 * v21;
        v34 = v23;
        *v22 = v7;
        v16 = v22 + 1;
        v33.i64[1] = (uint64_t)(v22 + 1);
        v27 = (_QWORD *)a1->i64[0];
        v24 = (_QWORD *)a1->i64[1];
        if (v24 != (_QWORD *)a1->i64[0])
        {
          do
          {
            v28 = *--v24;
            *v24 = 0;
            *--v22 = v28;
          }
          while (v24 != v27);
          goto LABEL_31;
        }
LABEL_32:
        v29 = vdupq_n_s64((unint64_t)v24);
        goto LABEL_33;
      }
LABEL_15:
      *v9 = v7;
      v16 = v9 + 1;
LABEL_34:
      a1->i64[1] = (uint64_t)v16;
      goto LABEL_35;
    }
    if (a2 == 1)
    {
      v7 = operator new();
      *(_QWORD *)v7 = &off_24C4681B0;
      *(_QWORD *)(v7 + 8) = 1;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      v8 = a1[1].u64[0];
      v9 = (uint64_t *)a1->i64[1];
      if ((unint64_t)v9 >= v8)
      {
        v10 = ((uint64_t)v9 - a1->i64[0]) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_20B80CDD8();
        v11 = v8 - a1->i64[0];
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v35 = a1 + 1;
        if (v13)
          v13 = (unint64_t)sub_20B87FB70(v13);
        else
          v14 = 0;
        v22 = (uint64_t *)(v13 + 8 * v10);
        v23 = v13 + 8 * v14;
        v34 = v23;
        *v22 = v7;
        v16 = v22 + 1;
        v33.i64[1] = (uint64_t)(v22 + 1);
        v25 = (_QWORD *)a1->i64[0];
        v24 = (_QWORD *)a1->i64[1];
        if (v24 != (_QWORD *)a1->i64[0])
        {
          do
          {
            v26 = *--v24;
            *v24 = 0;
            *--v22 = v26;
          }
          while (v24 != v25);
LABEL_31:
          v29 = *a1;
          v16 = (_QWORD *)v33.i64[1];
          v23 = v34;
LABEL_33:
          a1->i64[0] = (uint64_t)v22;
          a1->i64[1] = (uint64_t)v16;
          v33 = v29;
          v30 = a1[1].i64[0];
          a1[1].i64[0] = v23;
          v34 = v30;
          v32 = v29.i64[0];
          sub_20B8821E8((uint64_t)&v32);
          goto LABEL_34;
        }
        goto LABEL_32;
      }
      goto LABEL_15;
    }
  }
LABEL_35:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1->i64[1] - 8) + 40))(*(_QWORD *)(a1->i64[1] - 8), a3);
  a1[1].i8[8] = 0;
  return result;
}

void sub_20B94159C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CFMutableStringRef sub_20B9415BC(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  CFMutableStringRef Mutable;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char v17;
  CFIndex Length;
  const __CFString *v19;
  CFIndex v20;
  CFIndex v21;
  unint64_t v22;
  CFIndex *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char v29;
  const __CFString *v30;
  CFIndex *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  CFIndex *v37;
  CFIndex *v38;
  const __CFString *v39;

  if (*a2 == a2[1] || *a1 == a1[1])
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v7 = (_QWORD *)*a1;
  v8 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 56))(*v7) == 2)
      {
        v11 = *a2;
        v12 = a2[1];
        v13 = (v12 - *a2) >> 3;
        if (v9 < v13)
        {
          while (1)
          {
            v14 = *(_QWORD *)(v11 + 8 * v9);
            v15 = *(_QWORD *)(v14 + 8);
            if (v10 < v15)
              break;
LABEL_11:
            v10 = 0;
            if (++v9 == v13)
            {
              v9 = (v12 - *a2) >> 3;
              goto LABEL_41;
            }
          }
          v16 = (char *)(*(_QWORD *)(v14 + 32) + 4 * v10 + 3);
          while (1)
          {
            v17 = *v16;
            v16 += 4;
            if ((v17 & 1) != 0)
              break;
            if (v15 == ++v10)
              goto LABEL_11;
          }
        }
        v25 = v10;
        if (v9 < v13)
        {
          while (1)
          {
            v26 = *(_QWORD **)(v11 + 8 * v9);
            if (v25 < v26[1])
              break;
LABEL_22:
            v25 = 0;
            v10 = 0;
            if (++v9 >= (v12 - v11) >> 3)
              goto LABEL_41;
          }
          v27 = v26[2];
          v28 = (char *)(v26[4] + 4 * v25 + 3);
          while (1)
          {
            v29 = *v28;
            v28 += 4;
            if ((v29 & 1) == 0)
              break;
            v30 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(v27 + 2 * v25), 0);
            CFStringAppend(Mutable, v30);
            ++v25;
            v11 = *a2;
            if (v25 >= *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v9) + 8))
            {
              v12 = a2[1];
              goto LABEL_22;
            }
          }
        }
        v10 = v25;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 56))(*v7) == 1)
        {
          Length = CFStringGetLength(Mutable);
          v19 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 48))(*v7);
          v20 = CFStringGetLength(v19);
          v21 = v20;
          v23 = *(CFIndex **)(a3 + 8);
          v22 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v23 >= v22)
          {
            v31 = *(CFIndex **)a3;
            v32 = ((uint64_t)v23 - *(_QWORD *)a3) >> 4;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60)
              sub_20B80CDD8();
            v34 = v22 - (_QWORD)v31;
            if (v34 >> 3 > v33)
              v33 = v34 >> 3;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
              v35 = 0xFFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_20B829AD0(a3 + 16, v35);
              v31 = *(CFIndex **)a3;
              v23 = *(CFIndex **)(a3 + 8);
            }
            else
            {
              v36 = 0;
            }
            v37 = (CFIndex *)&v36[16 * v32];
            *v37 = Length;
            v37[1] = v21;
            v38 = v37;
            if (v23 != v31)
            {
              do
              {
                *((_OWORD *)v38 - 1) = *((_OWORD *)v23 - 1);
                v38 -= 2;
                v23 -= 2;
              }
              while (v23 != v31);
              v31 = *(CFIndex **)a3;
            }
            v24 = v37 + 2;
            *(_QWORD *)a3 = v38;
            *(_QWORD *)(a3 + 8) = v37 + 2;
            *(_QWORD *)(a3 + 16) = &v36[16 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *v23 = Length;
            v23[1] = v20;
            v24 = v23 + 2;
          }
          *(_QWORD *)(a3 + 8) = v24;
        }
        v39 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 48))(*v7);
        CFStringAppend(Mutable, v39);
      }
LABEL_41:
      ++v7;
    }
    while (v7 != v8);
  }
  return Mutable;
}

__CFString *sub_20B941888(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  const __CFAllocator *v7;
  CFMutableStringRef Mutable;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  const void *v13;
  const __CFString *v14;
  CFIndex Length;
  CFRange v16;
  CFIndex v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char v28;
  const __CFAllocator *alloc;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  CFStringRef theString[2];
  CFRange v36;

  if (!a2)
    return 0;
  if ((*(_QWORD *)(a2 + 40) & 0x300) == 0x100)
    return sub_20B9D69C4(a2);
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  theString[1] = Mutable;
  v33 = *(_QWORD *)(a2 + 8);
  if (v33 && *(_QWORD *)(a2 + 48))
  {
    v34 = *(_QWORD *)(a2 + 48);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v31 = *(_QWORD *)(a2 + 16);
    v32 = *(_QWORD *)(a2 + 32);
    v30 = *(_DWORD *)a2;
    alloc = v7;
    while (1)
    {
      v12 = (unsigned __int8 *)(v32 + 4 * v9);
      if ((v12[3] & 3) == 0)
        break;
      theString[0] = 0;
      v13 = (const void *)sub_20B9E08C0(*(unsigned __int16 *)(v31 + 2 * v9), *(_DWORD *)a2);
      sub_20B88B52C((const void **)theString, v13);
      v14 = theString[0];
      if (v30 == 1)
      {
        Length = CFStringGetLength(theString[0]);
        v16.length = *v12;
        v14 = theString[0];
        if (Length != v16.length)
        {
          v16.location = 0;
          v14 = CFStringCreateWithSubstring(v7, theString[0], v16);
          if (theString[0])
            CFRelease(theString[0]);
          theString[0] = v14;
        }
      }
      CFStringAppend(Mutable, v14);
      v17 = *(unsigned __int8 *)(v32 + 4 * v9 + 1);
      if (theString[0])
        CFRelease(theString[0]);
      v34 -= v17;
      ++v9;
LABEL_16:
      if (v9 < v33)
      {
        a3 += v17;
        if (v34)
          continue;
      }
      return Mutable;
    }
    while (v11 < (uint64_t)(a1[1] - *a1) >> 3)
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8 * v11) + 24))(*(_QWORD *)(*a1 + 8 * v11));
      v19 = a3 - v10;
      if (a3 < v10)
        v20 = 1;
      else
        v20 = v18;
      if ((v20 & 1) == 0
        && a3 <= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8 * v11) + 32))(*(_QWORD *)(*a1 + 8 * v11))
               + v10)
      {
        v21 = *(_QWORD *)(*a1 + 8 * v11);
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
        if (v34 >= v22 - v19)
          v17 = v22 - v19;
        else
          v17 = v34;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21))
        {
          v23 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
          if (v17 + v19 <= CFStringGetLength(v23))
          {
            v36.location = a3 - v10;
            v36.length = v17;
            v24 = CFStringCreateWithSubstring(alloc, v23, v36);
            theString[0] = v24;
            CFStringAppend(Mutable, v24);
            v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8 * v11) + 32))(*(_QWORD *)(*a1 + 8 * v11));
            v26 = v34 - v17;
            v34 -= v17;
            if (v9 < v33 && v26)
            {
              v27 = (char *)(v32 + 3 + 4 * v9);
              while (1)
              {
                v28 = *v27;
                v27 += 4;
                if ((v28 & 3) != 0)
                  break;
                if (v33 == ++v9)
                {
                  v9 = v33;
                  break;
                }
              }
            }
            if (v24)
              CFRelease(v24);
            v10 += v25;
            ++v11;
            v7 = alloc;
            goto LABEL_16;
          }
        }
        break;
      }
      v10 += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8 * v11) + 32))(*(_QWORD *)(*a1 + 8 * v11));
      ++v11;
    }
    if (!Mutable)
      return Mutable;
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void sub_20B941BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20B8A89DC((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B941C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v3 || *(_BYTE *)(a1 + 24))
    return 0;
  v6 = 0;
  v7 = a2 + a3;
  v8 = *(_QWORD *)a1 + 8;
  do
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 - 8) + 32))(*(_QWORD *)(v8 - 8));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 - 8) + 24))(*(_QWORD *)(v8 - 8));
    if (a2 < v9 + v6)
      v11 = v10;
    else
      v11 = 0;
    if (v6 < v7)
      result = v11;
    else
      result = 0;
    if ((result & 1) != 0)
      break;
    v6 += v9;
    v12 = v8 == v3;
    v8 += 8;
  }
  while (!v12);
  return result;
}

_QWORD *sub_20B941CAC(_QWORD *a1)
{
  *a1 = &off_24C467AF8;
  sub_20B941D50((uint64_t)(a1 + 1));
  return a1;
}

void sub_20B941CDC(_QWORD *a1)
{
  *a1 = &off_24C467AF8;
  sub_20B941D50((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD39CB0);
}

void sub_20B941D1C(uint64_t a1, __int16 a2)
{
  sub_20B941D8C(a1 + 8, a2);
}

uint64_t sub_20B941D24()
{
  return 0;
}

uint64_t sub_20B941D2C(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1;
}

uint64_t sub_20B941D40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20B941D48()
{
  return 0;
}

uint64_t sub_20B941D50(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  sub_20B87E150((const void **)a1, 0);
  return a1;
}

void sub_20B941D8C(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  CFStringRef v18;

  v4 = a1 + 24;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(char **)(a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(char **)(a1 + 8);
    v9 = v6 - v8;
    if (v6 - v8 <= -3)
      sub_20B80CDD8();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_20B80FD48(v4, v13);
      v8 = *(char **)(a1 + 8);
      v6 = *(char **)(a1 + 16);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = a2;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v6 = a2;
    v7 = v6 + 2;
  }
  *(_QWORD *)(a1 + 16) = v7;
  v18 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], *(const UniChar **)(a1 + 8), ((uint64_t)v7 - *(_QWORD *)(a1 + 8)) >> 1);
  sub_20B87E150((const void **)a1, v18);
}

_QWORD *sub_20B941E8C(_QWORD *a1)
{
  *a1 = &off_24C4681B0;
  sub_20B941D50((uint64_t)(a1 + 2));
  return a1;
}

void sub_20B941EBC(_QWORD *a1)
{
  *a1 = &off_24C4681B0;
  sub_20B941D50((uint64_t)(a1 + 2));
  JUMPOUT(0x20BD39CB0);
}

void sub_20B941EFC(uint64_t a1, __int16 a2)
{
  sub_20B941D8C(a1 + 16, a2);
}

uint64_t sub_20B941F04()
{
  return 1;
}

uint64_t sub_20B941F0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20B941F14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_20B941F1C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B941F24()
{
  return 1;
}

void sub_20B941F30()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B941F48()
{
  return 1;
}

uint64_t sub_20B941F50(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20B941F58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_20B941F60()
{
  return 0;
}

uint64_t sub_20B941F68()
{
  return 2;
}

uint64_t sub_20B941F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  int v8;
  double v9;
  uint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFMutableStringRef Mutable;
  const __CFString *v15;
  __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFIndex Length;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v25;
  std::__shared_weak_count **v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count **v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)a1 = &unk_24C460B90;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 392))(a2);
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v8;
  *(_BYTE *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = v9;
  *(_QWORD *)a1 = off_24C468970;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &unk_24C468BD8;
  v10 = (**(uint64_t (***)(uint64_t))(a2 + *(_QWORD *)(*(_QWORD *)a2 - 32)))(a2 + *(_QWORD *)(*(_QWORD *)a2 - 32));
  *(_OWORD *)(a1 + 72) = 0u;
  v11 = (int64x2_t *)(a1 + 72);
  *(_QWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 560))(a2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20B94308C((_QWORD *)(a1 + 104), *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2);
  v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v15 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  if (v15)
    v16 = CFStringCreateMutable(v13, 0);
  else
    v16 = 0;
  v17 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  CFStringAppend(Mutable, v17);
  if (v16)
    CFStringAppend(v16, v15);
  v18 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  Length = CFStringGetLength(v18);
  if (a4)
  {
    v20 = Length;
    v21 = 0;
    while (1)
    {
      v22 = *(unsigned int *)(a3 + 4 * v21);
      v23 = (std::__shared_weak_count *)operator new(0x78uLL);
      v23->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      v23->__shared_weak_owners_ = 0;
      v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9F0;
      v25 = v23 + 1;
      sub_20B9993A0((uint64_t)&v23[1], v22, v20, a5, a6);
      if (!LOBYTE(v23[4].__shared_weak_owners_))
        break;
      v26 = *(std::__shared_weak_count ***)(a1 + 80);
      v27 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v26 >= v27)
      {
        v30 = ((uint64_t)v26 - v11->i64[0]) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          sub_20B80CDD8();
        v32 = v27 - v11->i64[0];
        if (v32 >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        v56 = a1 + 88;
        v34 = (char *)sub_20B8F6ECC(v33);
        v36 = (std::__shared_weak_count **)&v34[16 * v30];
        *v36 = v25;
        v36[1] = v23;
        do
          v37 = __ldxr(p_shared_owners);
        while (__stxr(v37 + 1, p_shared_owners));
        v39 = *(_QWORD **)(a1 + 72);
        v38 = *(_QWORD **)(a1 + 80);
        if (v38 == v39)
        {
          v42 = vdupq_n_s64((unint64_t)v38);
          v40 = &v34[16 * v30];
        }
        else
        {
          v40 = &v34[16 * v30];
          do
          {
            v41 = *((_OWORD *)v38 - 1);
            v38 -= 2;
            *((_OWORD *)v40 - 1) = v41;
            v40 -= 16;
            *v38 = 0;
            v38[1] = 0;
          }
          while (v38 != v39);
          v42 = *v11;
        }
        v29 = v36 + 2;
        *(_QWORD *)(a1 + 72) = v40;
        *(_QWORD *)(a1 + 80) = v36 + 2;
        v54 = v42;
        v43 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = &v34[16 * v35];
        v55 = v43;
        v53 = v42.i64[0];
        sub_20B9061D0((uint64_t)&v53);
      }
      else
      {
        *v26 = v25;
        v26[1] = v23;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
        v29 = v26 + 2;
      }
      *(_QWORD *)(a1 + 80) = v29;
      CFStringAppend(Mutable, (CFStringRef)v23[3].__vftable);
      ((void (*)(std::__shared_weak_count *))v25->__get_deleter)(v25);
      v20 += v44;
      if (v16)
      {
        v45 = (const __CFString *)((uint64_t (*)(std::__shared_weak_count *))v25->__vftable[1].__get_deleter)(v25);
        CFStringAppend(v16, v45);
      }
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      if (++v21 == a4)
        goto LABEL_37;
    }
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_37:
  *(_QWORD *)(a1 + 56) = Mutable;
  *(_QWORD *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 96) = sub_20B8D345C(Mutable);
  return a1;
}

void sub_20B94231C(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a8);
  v10 = *a3;
  if (*a3)
  {
    *(_QWORD *)(v8 + 112) = v10;
    operator delete(v10);
  }
  sub_20B8E736C((void ***)va);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9423A4(uint64_t a1)
{
  const void *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  void **v7;

  *(_QWORD *)a1 = off_24C468970;
  *(_QWORD *)(a1 + 40) = &unk_24C468BD8;
  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  v7 = (void **)(a1 + 72);
  sub_20B8E736C(&v7);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return a1;
}

void sub_20B942438(uint64_t a1)
{
  sub_20B9423A4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B94245C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;

  if ((a2 & 0x8000000000000000) != 0 || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) <= a2)
    return 0;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
  if (a2 >= v4)
    return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * (a2 - v4));
  else
    return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 48) + 120))(*(_QWORD *)(a1 + 48), a2);
}

uint64_t sub_20B9424DC(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 0;
  return v2;
}

uint64_t sub_20B942514(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_20B942544(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
}

void sub_20B942550(_QWORD **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t i;
  void *v6;
  void *__dst;
  uint64_t v8;
  void *v9;
  char *v10;
  void *__p;
  char *v12;

  if ((a2 - 1) > 1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    (*(void (**)(void **__return_ptr))(*a1[6] + 432))(&v9);
    v6 = 0;
    __dst = 0;
    v8 = 0;
    for (i = (*(uint64_t (**)(_QWORD *))(*a1[6] + 48))(a1[6]);
          i < ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
          ++i)
    {
      ((void (*)(void **__return_ptr, _QWORD **, unint64_t))(*a1)[53])(&__p, a1, i);
      sub_20B943104((uint64_t)&v6, (uint64_t)__dst, (char *)__p, v12, (v12 - (_BYTE *)__p) >> 1);
      if (__p)
      {
        v12 = (char *)__p;
        operator delete(__p);
      }
    }
    sub_20B87D570((void **)a3, (((_BYTE *)__dst - (_BYTE *)v6) >> 1) + ((v10 - (_BYTE *)v9) >> 1));
    sub_20B943104(a3, *(_QWORD *)(a3 + 8), (char *)v9, v10, (v10 - (_BYTE *)v9) >> 1);
    sub_20B943104(a3, *(_QWORD *)(a3 + 8), (char *)v6, (char *)__dst, ((_BYTE *)__dst - (_BYTE *)v6) >> 1);
    if (v6)
    {
      __dst = v6;
      operator delete(v6);
    }
    if (v9)
    {
      v10 = (char *)v9;
      operator delete(v9);
    }
  }
  else
  {
    (*(void (**)(_QWORD *))(*a1[6] + 432))(a1[6]);
  }
}

void sub_20B9426B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B942728(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  const UniChar *v19;
  char *v20;
  CFStringRef v21;
  void *v23;
  void *v24;
  void *__p;
  char *v26;
  char *v27;

  __p = 0;
  v26 = 0;
  v27 = 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, i);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 56))(&v23);
      v5 = v24;
      if (v24 != v23)
      {
        v6 = 0;
        if ((unint64_t)(((_BYTE *)v24 - (_BYTE *)v23) >> 1) <= 1)
          v7 = 1;
        else
          v7 = ((_BYTE *)v24 - (_BYTE *)v23) >> 1;
        v8 = v26;
        do
        {
          v9 = *((_WORD *)v23 + v6) + 48;
          if (v8 >= v27)
          {
            v11 = (char *)__p;
            v12 = v8 - (_BYTE *)__p;
            if (v8 - (_BYTE *)__p <= -3)
              sub_20B80CDD8();
            v13 = v12 >> 1;
            if (v27 - (_BYTE *)__p <= (unint64_t)((v12 >> 1) + 1))
              v14 = v13 + 1;
            else
              v14 = v27 - (_BYTE *)__p;
            if ((unint64_t)(v27 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v15 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
            {
              v16 = (char *)sub_20B80FD48((uint64_t)&v27, v15);
              v11 = (char *)__p;
              v8 = v26;
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[2 * v13];
            *(_WORD *)v17 = v9;
            v10 = v17 + 2;
            while (v8 != v11)
            {
              v18 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *((_WORD *)v17 - 1) = v18;
              v17 -= 2;
            }
            __p = v17;
            v26 = v10;
            v27 = &v16[2 * v15];
            if (v11)
              operator delete(v11);
          }
          else
          {
            *(_WORD *)v8 = v9;
            v10 = v8 + 2;
          }
          v26 = v10;
          ++v6;
          v8 = v10;
        }
        while (v6 != v7);
        v5 = v23;
      }
      if (v5)
      {
        v24 = v5;
        operator delete(v5);
      }
    }
    v19 = (const UniChar *)__p;
    v20 = v26;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v21 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v19, (v20 - (char *)v19) >> 1);
  if (__p)
  {
    v26 = (char *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_20B9428FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *sub_20B94293C(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  const __CFString *v7;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v3)
  {
    v4 = v3;
    for (i = 0; i != v4; ++i)
    {
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, i);
      v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      CFStringAppend(Mutable, v7);
      CFRelease(v7);
    }
  }
  return Mutable;
}

uint64_t sub_20B9429E4()
{
  return 0;
}

uint64_t sub_20B9429EC()
{
  return 1;
}

uint64_t sub_20B9429F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_20B9429FC(uint64_t a1)
{
  int v1;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if ((v1 & 2) != 0)
    return 77;
  if ((v1 & 8) != 0)
    return 65;
  if ((v1 & 0x10) != 0)
    return 85;
  if ((v1 & 4) != 0)
    return 76;
  return (v1 << 10 >> 31) & 0x59;
}

uint64_t sub_20B942A54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_20B942A5C()
{
  return 0;
}

uint64_t sub_20B942A64(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) >> 6) & 1;
}

BOOL sub_20B942A84(uint64_t a1, char a2, char a3)
{
  _BOOL8 result;

  result = 1;
  if ((a2 & 1) == 0 && (a3 & 1) == 0)
    return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) & 0x40) == 0;
  return result;
}

uint64_t sub_20B942ABC(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) >> 1) & 1;
}

uint64_t sub_20B942ADC(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) >> 13) & 1;
}

uint64_t sub_20B942AFC(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) >> 14) & 1;
}

BOOL sub_20B942B1C(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1);
  v2 = *(_DWORD **)v1;
  v3 = *(_DWORD **)(v1 + 8);
  if (*(_DWORD **)v1 != v3)
  {
    while (*v2 != 1)
    {
      if (++v2 == v3)
      {
        v2 = *(_DWORD **)(v1 + 8);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t sub_20B942B68()
{
  return 0;
}

uint64_t sub_20B942B70()
{
  return 0;
}

uint64_t sub_20B942B78()
{
  return 0;
}

uint64_t sub_20B942B80()
{
  return 0;
}

double sub_20B942B88(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_20B942B90(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t sub_20B942B98()
{
  return 0;
}

uint64_t sub_20B942BA0()
{
  return 0;
}

uint64_t sub_20B942BA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t (***v3)(_QWORD);
  const __CFString *v4;
  CFAllocatorRef *v5;
  CFStringRef Copy;
  const __CFString *v7;
  CFStringRef v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = *(_DWORD *)(a1 - 20);
  *(_BYTE *)(v2 + 24) = *(_BYTE *)(a1 - 16);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)v2 = off_24C468970;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 40) = &unk_24C468BD8;
  v3 = (uint64_t (***)(_QWORD))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 32));
  *(_QWORD *)(v2 + 48) = (**v3)(v3);
  v4 = *(const __CFString **)(a1 + 16);
  v5 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v4)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v4);
  else
    Copy = 0;
  *(_QWORD *)(v2 + 56) = Copy;
  v7 = *(const __CFString **)(a1 + 24);
  if (v7)
    v8 = CFStringCreateCopy(*v5, v7);
  else
    v8 = 0;
  *(_QWORD *)(v2 + 72) = 0;
  v9 = (int64x2_t *)(v2 + 72);
  *(_QWORD *)(v2 + 64) = v8;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  sub_20B94308C((_QWORD *)(v2 + 104), *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (v11 - v10) >> 4;
  v13 = *(_QWORD *)(v2 + 72);
  if (v12 > (*(_QWORD *)(v2 + 88) - v13) >> 4)
  {
    if (v11 - v10 < 0)
      sub_20B80CDD8();
    v14 = *(_QWORD *)(v2 + 80);
    v47 = v2 + 88;
    v15 = (char *)sub_20B8F6ECC(v12);
    v18 = *(_QWORD **)(v2 + 72);
    v17 = *(_QWORD **)(v2 + 80);
    if (v17 == v18)
    {
      v21 = vdupq_n_s64((unint64_t)v17);
      v19 = &v15[v14 - v13];
    }
    else
    {
      v19 = &v15[v14 - v13];
      do
      {
        v20 = *((_OWORD *)v17 - 1);
        v17 -= 2;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *v17 = 0;
        v17[1] = 0;
      }
      while (v17 != v18);
      v21 = *v9;
    }
    *(_QWORD *)(v2 + 72) = v19;
    *(_QWORD *)(v2 + 80) = &v15[v14 - v13];
    v45 = v21;
    v22 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 88) = &v15[16 * v16];
    v46 = v22;
    v44 = v21.i64[0];
    sub_20B9061D0((uint64_t)&v44);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
  }
  if (v11 != v10)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(v10 + 16 * v23);
      v25 = operator new(0x78uLL);
      v25[1] = 0;
      v25[2] = 0;
      v26 = v25 + 3;
      *v25 = &off_24C46B9F0;
      sub_20B9996A8((uint64_t)(v25 + 3), v24);
      v28 = *(_QWORD **)(v2 + 80);
      v27 = *(_QWORD *)(v2 + 88);
      if ((unint64_t)v28 >= v27)
      {
        v30 = ((uint64_t)v28 - v9->i64[0]) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          sub_20B80CDD8();
        v32 = v27 - v9->i64[0];
        if (v32 >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        v47 = v2 + 88;
        v34 = (char *)sub_20B8F6ECC(v33);
        v36 = &v34[16 * v30];
        *(_QWORD *)v36 = v26;
        *((_QWORD *)v36 + 1) = v25;
        v38 = *(_QWORD **)(v2 + 72);
        v37 = *(_QWORD **)(v2 + 80);
        if (v37 == v38)
        {
          v41 = vdupq_n_s64((unint64_t)v37);
          v39 = &v34[16 * v30];
        }
        else
        {
          v39 = &v34[16 * v30];
          do
          {
            v40 = *((_OWORD *)v37 - 1);
            v37 -= 2;
            *((_OWORD *)v39 - 1) = v40;
            v39 -= 16;
            *v37 = 0;
            v37[1] = 0;
          }
          while (v37 != v38);
          v41 = *v9;
        }
        v29 = v36 + 16;
        *(_QWORD *)(v2 + 72) = v39;
        *(_QWORD *)(v2 + 80) = v36 + 16;
        v45 = v41;
        v42 = *(_QWORD *)(v2 + 88);
        *(_QWORD *)(v2 + 88) = &v34[16 * v35];
        v46 = v42;
        v44 = v41.i64[0];
        sub_20B9061D0((uint64_t)&v44);
      }
      else
      {
        *v28 = v26;
        v28[1] = v25;
        v29 = v28 + 2;
      }
      *(_QWORD *)(v2 + 80) = v29;
      v10 = *(_QWORD *)(a1 + 32);
      ++v23;
    }
    while (v23 < (*(_QWORD *)(a1 + 40) - v10) >> 4);
  }
  return v2;
}

void sub_20B942E98(_Unwind_Exception *a1, void **a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a4);
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(v4 + 112) = v6;
    operator delete(v6);
  }
  sub_20B8E736C((void ***)va);
  v7 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  MEMORY[0x20BD39CB0](v4, 0x10E1C40E0ACAB4CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B942F40(_QWORD *a1)
{
  return sub_20B942BA8((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20B942F50(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B942F58(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B942F60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48))
       + ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4);
}

uint64_t sub_20B942F98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B942FA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B942FB8(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48)) | 0x200;
}

uint64_t sub_20B942FDC()
{
  return 0;
}

uint64_t sub_20B942FE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_20B942FEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 192))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B942FFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 200))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B94300C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 208))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B94301C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 216))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B94302C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 224))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B94303C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_20B943044()
{
  return 1;
}

uint64_t sub_20B94304C()
{
  return 2;
}

uint64_t sub_20B943054(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 416))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B943064()
{
  return 0;
}

uint64_t sub_20B94306C()
{
  return 0;
}

uint64_t sub_20B943074(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 552))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B943084(uint64_t a1)
{
  return a1 + 104;
}

_QWORD *sub_20B94308C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B81277C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B9430E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B943104(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      sub_20B80CDD8();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_20B80FD48(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = sub_20B87D804((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_20B9432D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B943308(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B943318(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B943348(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20B943358(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = (_QWORD *)operator new();
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 136);
  v6[5] = 0;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v6 + 5;
  v6[6] = 0;
  v6[7] = 0x7FFFFFFFLL;
  v6[8] = v7;
  *(_BYTE *)(a1 + 24) = a3;
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)(a1 + 32) = 0;
    v8 = (_QWORD *)operator new();
    *(_QWORD *)(a1 + 40) = v8;
    *v8 = a2;
  }
  else
  {
    v9 = (_QWORD *)operator new();
    *v9 = a2;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 48) = sub_20B96621C();
  return a1;
}

void sub_20B943438(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B939B5C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9434A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 16);
  *((_DWORD *)v3 - 2) = 0;
  sub_20BA29958(v2);
  sub_20B9670A4(*(uint64_t **)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0x60C4044C4A2DFLL);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    MEMORY[0x20BD39CB0](v5, 0x60C4044C4A2DFLL);
  sub_20B939B5C(v3, 0);
  return a1;
}

uint64_t sub_20B943528(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B943358(v4, a1, a2);
  return v4;
}

void sub_20B94357C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x1020C40EB9B8EADLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20B943568);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B9435C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;

  if (!*(_BYTE *)(a1 + 24))
  {
    v7 = **(_QWORD **)(a1 + 32);
    v6 = *(_QWORD *)(v7 + 24);
    if (v6)
    {
      sub_20B87646C(*(_QWORD *)(v7 + 24));
      goto LABEL_6;
    }
    return 0;
  }
  v5 = **(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(v5 + 56);
  if (!v6)
    return 0;
  sub_20B8EDEE4(*(_QWORD *)(v5 + 56));
LABEL_6:
  v8 = atomic_load((unsigned int *)(v6 + 40));
  if (v8 != 2 || !*(_QWORD *)v6)
    return 0;
  result = 0;
  if ((a3 & 8) == 0 && !*(_BYTE *)(a2 + 128))
  {
    v10 = *(const __CFString **)(a2 + 144);
    if (!v10 || (unint64_t)CFStringGetLength(v10) < 2 || CEMStringContainsEmoji())
      return 0;
    if ((a3 & 4) != 0)
    {
      v13 = 0;
      sub_20B8D0624(v10, &v13, &v12);
      v11 = v12;
      if (LMLexiconGetCursorByAdvancingWithCharacters() && (LMLexiconCursorHasChildren() & 1) != 0)
      {
        if (v11)
          MEMORY[0x20BD39C80](v11, 0x1000C80BDFB0063);
        return 0;
      }
      if (v11)
        MEMORY[0x20BD39C80](v11, 0x1000C80BDFB0063);
    }
    return 1;
  }
  return result;
}

void sub_20B943718(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void sub_20B943740(uint64_t a1, uint64_t a2, int a3, char a4, _BYTE *a5)
{
  unint64_t v9;
  const void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  char v17;
  const __CFArray *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex Count;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  CFIndex v26;
  const __CFString *ValueAtIndex;
  CFIndex v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  const __CFString *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  const __CFString *v38;
  int *v39;
  uint64_t v40;
  int *v41;
  int *v42;
  int v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char **v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  double v52;
  uint64_t Prediction;
  double v54;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  CFMutableStringRef Mutable;
  const __CFString *v61;
  CFIndex Length;
  __int16 v63;
  _BOOL4 v64;
  char *v66;
  char *v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int16 v75;
  const __CFString *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  const __CFString *v80;
  void *v81;
  uint64_t v82;
  int v83;
  char v85;
  char v86;
  int v87;
  const __CFAllocator *alloc;
  CFAllocatorRef alloca;
  const __CFAllocator *v91;
  char v92;
  int v93;
  CFTypeRef v94;
  BOOL v95;
  char v96;
  double v97;
  CFTypeRef cf;
  void *__p;
  char *v100;
  unint64_t v101;
  int v102[2];
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
  {
    LMLanguageModelCreatePredictionEnumerator();
    if ((LMPredictionEnumeratorAdvance() & 1) != 0)
    {
      v92 = a4;
      v9 = 0;
      while (1)
      {
        LODWORD(__p) = 0;
        if (LMPredictionEnumeratorGetPrediction() < 1)
          break;
        if (!LMLanguageModelTokenHasAttributes())
          break;
        v10 = (const void *)LMLanguageModelCopyTokenAttributes();
        if (!v10)
          break;
        v11 = *(_QWORD **)(a1 + 16);
        v12 = operator new();
        *(_WORD *)(v12 + 16) = 0;
        *(_QWORD *)v12 = off_24C462F08;
        *(_QWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 24) = &unk_24C462FE8;
        *(_QWORD *)(v12 + 32) = CFRetain(v10);
        *(_QWORD *)(v12 + 40) = 0;
        v13 = (void *)sub_20B8E1754(v12);
        sub_20BA29AC4(v11, v13, v14);
        v11[3] = *v11;
        CFRelease(v10);
        v15 = LMPredictionEnumeratorAdvance();
        if (v9++ >= 2)
          v17 = 0;
        else
          v17 = v15;
        if ((v17 & 1) == 0)
        {
          LMPredictionEnumeratorRelease();
          a4 = v92;
          goto LABEL_34;
        }
      }
      LMPredictionEnumeratorRelease();
      a4 = v92;
      if (v9)
      {
LABEL_34:
        if (sub_20B9435C8(a1, a2, a3))
        {
          v94 = (CFTypeRef)10;
          v95 = (a3 & 4) != 0;
          v96 = a4 ^ 1;
          v32 = *(const __CFString **)(a2 + 144);
          if (*(_BYTE *)(a1 + 24))
            sub_20B95AF18(*(uint64_t **)(a1 + 40), v32, a5, (uint64_t)&__p);
          else
            sub_20B8D87BC(*(uint64_t **)(a1 + 32), v32, (uint64_t)&v94, a5, (uint64_t)&__p);
          v34 = (char *)__p;
          if (__p != &v100)
          {
            v35 = 0;
            do
            {
              v36 = *(_QWORD **)(a1 + 16);
              v37 = operator new();
              v38 = (const __CFString *)*((_QWORD *)v34 + 8);
              v39 = (int *)*((_QWORD *)v34 + 9);
              v40 = *((_QWORD *)v34 + 6);
              v41 = (int *)*((_QWORD *)v34 + 10);
              v42 = v39;
              if (v39 == v41)
              {
LABEL_47:
                v43 = 262688;
                if (!v34[56])
                {
                  if (*(_BYTE *)(a1 + 24))
                    v43 = 4194848;
                  else
                    v43 = 131616;
                }
              }
              else
              {
                while (!sub_20B9C45B0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32), *v42))
                {
                  if (++v42 == v41)
                    goto LABEL_47;
                }
                v43 = 2592;
              }
              *(_WORD *)(v37 + 16) = 0;
              *(_QWORD *)v37 = off_24C460098;
              *(_QWORD *)(v37 + 8) = 0;
              *(_QWORD *)(v37 + 24) = &unk_24C460190;
              sub_20BA07F40((_QWORD *)(v37 + 32), 0, v38, v38, v39, (uint64_t)(v34 + 96));
              *(_QWORD *)(v37 + 104) = v40;
              *(_DWORD *)(v37 + 112) = v43;
              v44 = (void *)sub_20B8E1754(v37);
              sub_20BA29AC4(v36, v44, v45);
              v36[3] = *v36;
              if (v35 == 9)
                break;
              v46 = (char *)*((_QWORD *)v34 + 1);
              if (v46)
              {
                do
                {
                  v47 = (char **)v46;
                  v46 = *(char **)v46;
                }
                while (v46);
              }
              else
              {
                do
                {
                  v47 = (char **)*((_QWORD *)v34 + 2);
                  v23 = *v47 == v34;
                  v34 = (char *)v47;
                }
                while (!v23);
              }
              ++v35;
              v34 = (char *)v47;
            }
            while (v47 != &v100);
          }
          sub_20B8D9674((uint64_t)&__p, v100);
          return;
        }
        v33 = (_QWORD *)(a2 + 48);
        if (CFArrayGetCount(*(CFArrayRef *)(a2 + 96)) != (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2)
          return;
        *(_DWORD *)(a1 + 8) = a3;
        v94 = 0;
        if (*(_BYTE *)(a2 + 128))
        {
          if ((a3 & 0x28) != 0)
          {
            v87 = 0;
          }
          else
          {
            v49 = atomic_load((unsigned __int8 *)&qword_25472BB30);
            if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_25472BB30))
            {
              qword_25472BB28 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, &unk_20BA4C27C);
              __cxa_guard_release(&qword_25472BB30);
            }
            LMLanguageModelSetParameterValue();
            v87 = 1;
          }
        }
        else
        {
          sub_20B8A0168(&v94, *(CFTypeRef *)(a2 + 96));
          v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32);
          if (!sub_20B9B8CE8((uint64_t)v33) || (sub_20B9B8D50(v33, v48) & 1) == 0)
          {
LABEL_74:
            if (v94)
              CFRelease(v94);
            return;
          }
          v87 = 0;
        }
        sub_20B9C430C();
        LMLanguageModelCreatePredictionEnumerator();
        cf = 0;
        alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        do
        {
          if (LMPredictionEnumeratorAdvance() != 1)
            break;
          v97 = 0.0;
          if (LMPredictionEnumeratorGetPrediction() < 1)
            break;
        }
        while (LMLanguageModelTokenHasAttributes());
        if (v87)
        {
          v50 = atomic_load((unsigned __int8 *)&qword_25472BB40);
          if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_25472BB40))
          {
            qword_25472BB38 = (uint64_t)CFNumberCreate(alloc, kCFNumberFloatType, &unk_20BA4C280);
            __cxa_guard_release(&qword_25472BB40);
          }
          LMLanguageModelSetParameterValue();
        }
        LMPredictionEnumeratorRelease();
        if (cf)
          CFRelease(cf);
        goto LABEL_74;
      }
    }
    else
    {
      LMPredictionEnumeratorRelease();
    }
  }
  if (!*(_BYTE *)(a2 + 104))
    goto LABEL_34;
  v18 = *(const __CFArray **)(a2 + 96);
  if (!v18)
    return;
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56) - v19;
  v21 = v20 >> 2;
  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 96));
  v23 = v20 >> 2 != Count || Count == 0;
  if (v23)
    return;
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (!v24)
    return;
  sub_20B87646C(*(_QWORD *)(*(_QWORD *)a1 + 40));
  v25 = atomic_load((unsigned int *)(v24 + 40));
  if (v25 != 2 || !*(_QWORD *)v24)
    return;
  if (v20 < 1)
  {
    v28 = v21 - 1;
    if ((*(_DWORD *)(v19 + 4 * (v21 - 1)) - 1) < 0x1F3)
      return;
  }
  else
  {
    v26 = 0;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v18, v26);
      if (sub_20B9449F8(ValueAtIndex))
        return;
      ++v26;
    }
    while (v21 != v26);
    v28 = v21 - 1;
    if ((*(_DWORD *)(v19 + 4 * (v21 - 1)) - 1) < 0x1F3)
      return;
    v29 = v20 >> 2;
    while (1)
    {
      v30 = v29 - 1;
      v31 = (const __CFString *)CFArrayGetValueAtIndex(v18, v29 - 1);
      if ((sub_20B944988(a1, v31, 2) & 1) != 0)
        break;
      --v29;
      if (v30 <= 0)
      {
        v29 = v30 - 1;
        break;
      }
    }
    if (v21 <= v29)
      return;
  }
  LMLanguageModelCreatePredictionEnumerator();
  if (v20 < 1)
    alloca = 0;
  else
    alloca = (CFAllocatorRef)CFArrayGetValueAtIndex(v18, v28);
  if (LMPredictionEnumeratorAdvance())
  {
    v51 = 0;
    v91 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v52 = 0.0;
    do
    {
      v97 = 0.0;
      Prediction = LMPredictionEnumeratorGetPrediction();
      if (Prediction < 1)
        break;
      if (v102[0] >= 0x1F4u)
      {
        v54 = v97;
        if (v51 >= 4 && (v97 < -3.0 || v52 - v97 > 2.0))
          break;
        v93 = *(unsigned __int8 *)(a2 + 105);
        __p = 0;
        v100 = 0;
        v101 = 0;
        v56 = *(unsigned int **)(*(_QWORD *)a1 + 40);
        if (v56)
        {
          sub_20B87646C(*(_QWORD *)(*(_QWORD *)a1 + 40));
          v57 = atomic_load(v56 + 10);
          if (v57 == 2 && (v58 = *(_QWORD *)v56) != 0)
          {
            v59 = 0;
            Mutable = 0;
            v94 = 0;
            while (1)
            {
              if (v102[v59] < 0x1F4)
                goto LABEL_129;
              v61 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 32))(v58);
              if (v94)
                CFRelease(v94);
              v94 = v61;
              if (!v61)
                goto LABEL_129;
              Length = CFStringGetLength(v61);
              v63 = Length;
              v64 = Prediction != 1;
              if (Length != 1)
                v64 = 0;
              if (Length <= 1 && !v64)
              {
LABEL_129:
                if (!Mutable)
                {
                  v83 = 0;
                  goto LABEL_142;
                }
                if (CFStringGetLength(Mutable) < 2)
                {
                  v83 = 0;
                }
                else
                {
                  v76 = (const __CFString *)sub_20B967324(*(_QWORD *)(a1 + 48), (uint64_t)alloca, Mutable, v93 == 0);
                  cf = v76;
                  v77 = *(_QWORD **)(a1 + 16);
                  v78 = operator new();
                  v79 = v78;
                  if (v76)
                    v80 = v76;
                  else
                    v80 = Mutable;
                  *(_WORD *)(v78 + 16) = 0;
                  *(_QWORD *)v78 = off_24C460098;
                  *(_QWORD *)(v78 + 8) = 0;
                  *(_QWORD *)(v78 + 24) = &unk_24C460190;
                  sub_20BA07F40((_QWORD *)(v78 + 32), 0, v80, v80, v102, (uint64_t)&__p);
                  *(double *)(v79 + 104) = v54;
                  *(_DWORD *)(v79 + 112) = 544;
                  v81 = (void *)sub_20B8E1754(v79);
                  sub_20BA29AC4(v77, v81, v82);
                  v77[3] = *v77;
                  if (cf)
                    CFRelease(cf);
                  v83 = 1;
                }
                goto LABEL_141;
              }
              if (!Mutable)
                Mutable = CFStringCreateMutable(v91, 0);
              if ((sub_20B944988(a1, v61, 134) & 1) != 0)
                break;
              if (!v93 || v59)
              {
                CFStringAppend(Mutable, CFSTR(" "));
                ++v63;
                v61 = (const __CFString *)v94;
              }
              CFStringAppend(Mutable, v61);
              v66 = v100;
              if ((unint64_t)v100 >= v101)
              {
                v68 = (char *)__p;
                v69 = v100 - (_BYTE *)__p;
                if (v100 - (_BYTE *)__p <= -3)
                  sub_20B80CDD8();
                v70 = v69 >> 1;
                if (v101 - (unint64_t)__p <= (v69 >> 1) + 1)
                  v71 = v70 + 1;
                else
                  v71 = v101 - (_QWORD)__p;
                if (v101 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
                  v72 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v72 = v71;
                if (v72)
                {
                  v73 = (char *)sub_20B80FD48((uint64_t)&v101, v72);
                  v68 = (char *)__p;
                  v66 = v100;
                }
                else
                {
                  v73 = 0;
                }
                v74 = &v73[2 * v70];
                *(_WORD *)v74 = v63;
                v67 = v74 + 2;
                while (v66 != v68)
                {
                  v75 = *((_WORD *)v66 - 1);
                  v66 -= 2;
                  *((_WORD *)v74 - 1) = v75;
                  v74 -= 2;
                }
                __p = v74;
                v100 = v67;
                v101 = (unint64_t)&v73[2 * v72];
                if (v68)
                  operator delete(v68);
              }
              else
              {
                *(_WORD *)v100 = v63;
                v67 = v66 + 2;
              }
              v100 = v67;
              if (++v59 == Prediction)
                goto LABEL_129;
            }
            v83 = 0;
            if (!Mutable)
              goto LABEL_142;
LABEL_141:
            CFRelease(Mutable);
LABEL_142:
            if (v94)
              CFRelease(v94);
          }
          else
          {
            v83 = 0;
          }
          if (__p)
          {
            v100 = (char *)__p;
            operator delete(__p);
            if ((v83 & 1) != 0)
              goto LABEL_146;
          }
          else if (v83)
          {
LABEL_146:
            if (v97 > v52 || v51 == 0)
              v52 = v97;
            ++v51;
          }
        }
      }
      v85 = LMPredictionEnumeratorAdvance();
      if (v51 < 10)
        v86 = v85;
      else
        v86 = 0;
    }
    while ((v86 & 1) != 0);
  }
  LMPredictionEnumeratorRelease();
}

void sub_20B9447D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34)
{
  __cxa_guard_abort(&qword_25472BB30);
  sub_20B88B74C(&a29, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B944988(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  uint64_t result;

  if (!theString)
    return 0;
  result = CFStringGetLength(theString);
  if (result)
  {
    if (sub_20B9449F8(theString))
      return 1;
    else
      return sub_20B9671AC(*(uint64_t **)(a1 + 48), theString, a3);
  }
  return result;
}

BOOL sub_20B9449F8(const __CFString *a1)
{
  uint64_t v2;

  v2 = 1;
  if (CFStringCompare(a1, CFSTR("taiwan"), 1uLL))
    return CFStringCompare(a1, CFSTR("tibet"), 1uLL) == kCFCompareEqualTo;
  return v2;
}

uint64_t sub_20B944A4C(uint64_t a1, const __CFURL *a2)
{
  CFMutableArrayRef Mutable;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24C462080;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20B944C24((_QWORD *)(a1 + 16), a2, "", 0);
  sub_20B944C24((_QWORD *)(a1 + 24), a2, "logJointProb", 0xCuLL);
  sub_20B944C24((_QWORD *)(a1 + 32), a2, "batch32", 7uLL);
  sub_20B944C24((_QWORD *)(a1 + 40), a2, "logJointProb_batch32", 0x14uLL);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = &off_24C461B20;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  sub_20B88B74C((const void **)(a1 + 56), 0);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = (_QWORD *)operator new();
  *v5 = &off_24C4625F0;
  v5[1] = Mutable;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_20B944B8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void **v3;
  const void **v4;
  uint64_t v6;

  sub_20B94735C(v4);
  sub_20B94735C(v3);
  sub_20B94735C(v2);
  v6 = v1[1];
  *v1 = &unk_24C4629A8;
  v1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void sub_20B944C24(_QWORD *a1, CFURLRef url, char *a3, unint64_t a4)
{
  char *v8;
  char v9;
  char *v10;
  CFStringRef v11;
  NSObject *v12;
  std::string *v13;
  __int128 v14;
  UInt8 *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  CFURLRef v19;
  std::string::size_type *v20;
  void *v21;
  std::string::size_type *v22;
  void *v23;
  uint64_t *v24;
  void *v25;
  CFDictionaryRef v26;
  void *v27;
  void *v28;
  const void *v29;
  CFStringRef v30;
  NSObject *v31;
  std::string v32;
  void *__p[2];
  char v34;
  CFErrorRef error;
  void *values;
  uint64_t v37;
  std::string v38;
  UInt8 buffer[16];
  uint64_t v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!url)
  {
    *a1 = 0;
    return;
  }
  error = 0;
  if (!CFURLResourceIsReachable(url, &error))
  {
    v11 = CFErrorCopyDescription(error);
    __p[0] = (void *)v11;
    v12 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buffer = 138412290;
      *(_QWORD *)&buffer[4] = v11;
      _os_log_debug_impl(&dword_20B7F7000, v12, OS_LOG_TYPE_DEBUG, "Montreal assets are not reachable: %@", buffer, 0xCu);
    }
    CFRelease(error);
    *a1 = 0;
    if (v11)
      CFRelease(v11);
    return;
  }
  if (CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
    v8 = (char *)buffer;
  else
    v8 = (char *)&unk_20BA71DF9;
  sub_20B80BBD0(__p, v8);
  v9 = v34;
  if ((v34 & 0x80000000) == 0)
  {
    if (v34)
    {
      v10 = (char *)__p;
      goto LABEL_16;
    }
LABEL_54:
    *a1 = 0;
    if ((v9 & 0x80) == 0)
      return;
    goto LABEL_63;
  }
  if (!__p[1])
    goto LABEL_54;
  v10 = (char *)__p[0];
LABEL_16:
  sub_20B80BBD0(&v32, v10);
  if (a4)
  {
    sub_20B83DFAC(&v38, a3, &a3[a4], a4);
    v13 = std::string::insert(&v38, 0, "#", 1uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v40 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)buffer = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v15 = buffer;
    else
      v15 = *(UInt8 **)buffer;
    if (v40 >= 0)
      v16 = HIBYTE(v40);
    else
      v16 = *(_QWORD *)&buffer[8];
    std::string::append(&v32, (const std::string::value_type *)v15, v16);
    if (SHIBYTE(v40) < 0)
      operator delete(*(void **)buffer);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v32;
  else
    v17 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  v19 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v17, size, 0);
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)buffer = 0;
  *(_QWORD *)&buffer[8] = buffer;
  v40 = 0x2000000000;
  v20 = (std::string::size_type *)qword_25472BB70;
  v41 = (void *)qword_25472BB70;
  if (!qword_25472BB70)
  {
    v21 = (void *)sub_20B946EF8();
    v20 = (std::string::size_type *)dlsym(v21, "kMRLNeuralNetworkOptionModelURLKey");
    *(_QWORD *)(*(_QWORD *)&buffer[8] + 24) = v20;
    qword_25472BB70 = (uint64_t)v20;
  }
  _Block_object_dispose(buffer, 8);
  if (!v20)
    goto LABEL_65;
  v38.__r_.__value_.__r.__words[0] = *v20;
  *(_QWORD *)buffer = 0;
  *(_QWORD *)&buffer[8] = buffer;
  v40 = 0x2000000000;
  v22 = (std::string::size_type *)qword_25472BB78;
  v41 = (void *)qword_25472BB78;
  if (!qword_25472BB78)
  {
    v23 = (void *)sub_20B946EF8();
    v22 = (std::string::size_type *)dlsym(v23, "kMRLNeuralNetworkOptionModelTypeKey");
    *(_QWORD *)(*(_QWORD *)&buffer[8] + 24) = v22;
    qword_25472BB78 = (uint64_t)v22;
  }
  _Block_object_dispose(buffer, 8);
  if (!v22)
    goto LABEL_65;
  v38.__r_.__value_.__l.__size_ = *v22;
  values = v19;
  v37 = 0;
  *(_QWORD *)buffer = 0;
  *(_QWORD *)&buffer[8] = buffer;
  v40 = 0x2000000000;
  v24 = (uint64_t *)qword_25472BB80;
  v41 = (void *)qword_25472BB80;
  if (!qword_25472BB80)
  {
    v25 = (void *)sub_20B946EF8();
    v24 = (uint64_t *)dlsym(v25, "kMRLNeuralNetworkModelTypeE5RT");
    *(_QWORD *)(*(_QWORD *)&buffer[8] + 24) = v24;
    qword_25472BB80 = (uint64_t)v24;
  }
  _Block_object_dispose(buffer, 8);
  if (!v24)
    goto LABEL_65;
  v37 = *v24;
  v26 = CFDictionaryCreate(0, (const void **)&v38.__r_.__value_.__l.__data_, (const void **)&values, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)buffer = 0;
  *(_QWORD *)&buffer[8] = buffer;
  v40 = 0x2000000000;
  v27 = off_25472BB88;
  v41 = off_25472BB88;
  if (!off_25472BB88)
  {
    v28 = (void *)sub_20B946EF8();
    v27 = dlsym(v28, "MRLNeuralNetworkCreate");
    *(_QWORD *)(*(_QWORD *)&buffer[8] + 24) = v27;
    off_25472BB88 = v27;
  }
  _Block_object_dispose(buffer, 8);
  if (!v27)
  {
LABEL_65:
    dlerror();
    abort_report_np();
    __break(1u);
  }
  v29 = (const void *)((uint64_t (*)(CFDictionaryRef, CFErrorRef *))v27)(v26, &error);
  if (!error)
  {
    *a1 = v29;
    if (!v26)
      goto LABEL_58;
    goto LABEL_57;
  }
  v30 = CFErrorCopyDescription(error);
  v31 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buffer = 138412290;
    *(_QWORD *)&buffer[4] = v30;
    _os_log_debug_impl(&dword_20B7F7000, v31, OS_LOG_TYPE_DEBUG, "Montreal model creation by MRLNeuralNetworkCreate caught an error: %@", buffer, 0xCu);
  }
  CFRelease(error);
  *a1 = 0;
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v26)
LABEL_57:
    CFRelease(v26);
LABEL_58:
  if (v19)
    CFRelease(v19);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v34 < 0)
LABEL_63:
    operator delete(__p[0]);
}

void sub_20B94511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B94524C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C461B20;
  sub_20B88B74C((const void **)(a1 + 8), 0);
  return a1;
}

uint64_t sub_20B945280(uint64_t a1, const __CFURL *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24C462080;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20B944C24((_QWORD *)(a1 + 16), a2, "", 0);
  sub_20B944C24((_QWORD *)(a1 + 24), a2, "logJointProb", 0xCuLL);
  sub_20B944C24((_QWORD *)(a1 + 32), a2, "batch32", 7uLL);
  sub_20B944C24((_QWORD *)(a1 + 40), a2, "logJointProb_batch32", 0x14uLL);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = &off_24C461B20;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_DWORD *)(a1 + 64) = 1;
  sub_20B88B74C((const void **)(a1 + 56), 0);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v9 = (_QWORD *)operator new();
  *v9 = &off_24C4625F0;
  v9[1] = Mutable;
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_20B9453E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void **v3;
  const void **v4;
  uint64_t v6;

  sub_20B94735C(v4);
  sub_20B94735C(v3);
  sub_20B94735C(v2);
  v6 = v1[1];
  *v1 = &unk_24C4629A8;
  v1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

BOOL sub_20B945480(_QWORD *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = a1[2];
  v3 = v2 != 0;
  if (!v2)
  {
    v4 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9) = 0;
      _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for prediction isn't avaiable.", (uint8_t *)&v9, 2u);
    }
  }
  if (!a1[3])
  {
    v5 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136315138;
      v10 = "logJointProb";
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for joint probability isn't avaiable. Does the bundle contain function name '%s'?", (uint8_t *)&v9, 0xCu);
    }
    v3 = 0;
  }
  if (!a1[4])
  {
    v6 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136315138;
      v10 = "batch32";
      _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for batched prediction isn't avaiable. Does the bundle contain function name '%s'?", (uint8_t *)&v9, 0xCu);
    }
    v3 = 0;
  }
  if (!a1[5])
  {
    v7 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v9 = 136315138;
      v10 = "logJointProb_batch32";
      _os_log_debug_impl(&dword_20B7F7000, v7, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::isModelAvaiable] model for batched joint probability isn't avaiable. Does the bundle contain function name '%s'?", (uint8_t *)&v9, 0xCu);
    }
    return 0;
  }
  return v3;
}

void sub_20B94565C(uint64_t a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, float **a4@<X8>)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  unsigned __int16 *v14;
  const __CFArray *v15;
  uint64_t v22;
  float v23;
  unint64_t v24;
  float *v25;
  float *v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  float *v33;
  int v34;
  NSObject *v35;
  unint64_t v36;
  const __CFArray *v37;
  __CFArray *Mutable;
  unint64_t i;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  __int128 v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t j;
  uint64_t v59;
  unint64_t v60;
  float *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  int64x2_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  const __CFArray *v79;
  __int16 *v80;
  float *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  __CFArray *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  CFIndex v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  int64x2_t v101;
  _QWORD v102[2];
  void *value[2];
  uint64_t v104;
  float v105;
  uint8_t buf[8];
  int64x2_t v107;
  char *v108;
  _QWORD *v109;
  CFRange v110;
  CFRange v111;

  if (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) - 33 > 0xFFFFFFFFFFFFFFE3)
  {
    v35 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v35, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::jointProbabilityBatchedInference]", buf, 2u);
    }
    v98 = *a2;
    v99 = a2[1];
    v36 = 0xAAAAAAAAAAAAAAABLL * (v99 - *a2);
    *(_DWORD *)buf = 0;
    v97 = v36;
    sub_20B814634(a4, v36, buf);
    v37 = *(const __CFArray **)(a1 + 56);
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    if (v37 && CFArrayGetCount(v37))
    {
      for (i = 0; i < CFArrayGetCount(v37); ++i)
      {
        v40 = 32;
        do
        {
          v110.location = i;
          v110.length = 1;
          CFArrayAppendArray(Mutable, v37, v110);
          --v40;
        }
        while (v40);
      }
    }
    v41 = *a2;
    v42 = a2[1];
    if (*a2 == v42)
    {
      v55 = 0;
      v56 = 0;
      v102[0] = 0;
      v101 = 0uLL;
    }
    else
    {
      v43 = 0;
      do
      {
        v45 = *v41;
        v44 = v41[1];
        v41 += 3;
        v46 = (v44 - v45) >> 2;
        if (v43 <= v46)
          v43 = v46;
      }
      while (v41 != v42);
      v105 = (float)*(int *)(*(_QWORD *)(a1 + 8) + 48);
      v102[0] = 0;
      v101 = 0uLL;
      if (v43)
      {
        if (v43 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        v109 = v102;
        v47 = (char *)sub_20B871730(v43);
        *(_QWORD *)buf = v47;
        v107.i64[0] = (uint64_t)v47;
        v49 = &v47[24 * v48];
        v107.i64[1] = (uint64_t)v47;
        v108 = v49;
        v50 = (_QWORD *)v101.i64[1];
        v51 = (_QWORD *)v101.i64[0];
        if (v101.i64[1] == v101.i64[0])
        {
          v54 = vdupq_n_s64(v101.u64[1]);
          v52 = v47;
        }
        else
        {
          v52 = v47;
          do
          {
            *((_QWORD *)v52 - 3) = 0;
            *((_QWORD *)v52 - 2) = 0;
            v52 -= 24;
            *((_QWORD *)v52 + 2) = 0;
            v53 = *(_OWORD *)(v50 - 3);
            v50 -= 3;
            *(_OWORD *)v52 = v53;
            *((_QWORD *)v52 + 2) = v50[2];
            *v50 = 0;
            v50[1] = 0;
            v50[2] = 0;
          }
          while (v50 != v51);
          v54 = v101;
          v47 = (char *)v107.i64[1];
          v49 = v108;
        }
        v101.i64[0] = (uint64_t)v52;
        v101.i64[1] = (uint64_t)v47;
        v107 = v54;
        v57 = (char *)v102[0];
        v102[0] = v49;
        v108 = v57;
        *(_QWORD *)buf = v54.i64[0];
        sub_20B947074((uint64_t)buf);
        for (j = 0; j != v43; ++j)
        {
          sub_20B814634(value, 0x20uLL, &v105);
          v59 = (char *)a2[1] - (char *)*a2;
          if (v59)
          {
            v60 = v59 / 24;
            v61 = (float *)value[0];
            if (v60 <= 1)
              v60 = 1;
            v62 = *a2 + 1;
            do
            {
              v63 = *(v62 - 1);
              if (j < (*v62 - v63) >> 2)
                *v61 = (float)*(int *)(v63 + 4 * j);
              ++v61;
              v62 += 3;
              --v60;
            }
            while (v60);
          }
          v64 = v101.i64[1];
          if (v101.i64[1] >= v102[0])
          {
            v65 = 0xAAAAAAAAAAAAAAABLL * ((v101.i64[1] - v101.i64[0]) >> 3) + 1;
            if (v65 > 0xAAAAAAAAAAAAAAALL)
              sub_20B80CDD8();
            if (0x5555555555555556 * ((v102[0] - v101.i64[0]) >> 3) > v65)
              v65 = 0x5555555555555556 * ((v102[0] - v101.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v102[0] - v101.i64[0]) >> 3) >= 0x555555555555555)
              v66 = 0xAAAAAAAAAAAAAAALL;
            else
              v66 = v65;
            v109 = v102;
            v67 = (char *)sub_20B871730(v66);
            v68 = &v67[8 * ((v101.i64[1] - v101.i64[0]) >> 3)];
            *(_QWORD *)buf = v67;
            v107.i64[0] = (uint64_t)v68;
            v108 = &v67[24 * v69];
            *(_QWORD *)v68 = 0;
            *((_QWORD *)v68 + 1) = 0;
            *((_QWORD *)v68 + 2) = 0;
            *(_OWORD *)v68 = *(_OWORD *)value;
            *((_QWORD *)v68 + 2) = v104;
            value[0] = 0;
            value[1] = 0;
            v104 = 0;
            v70 = v68 + 24;
            v107.i64[1] = (uint64_t)(v68 + 24);
            v71 = (_QWORD *)v101.i64[1];
            v72 = (_QWORD *)v101.i64[0];
            v73 = v107.i64[0];
            if (v101.i64[1] == v101.i64[0])
            {
              v75 = vdupq_n_s64(v101.u64[1]);
            }
            else
            {
              do
              {
                *(_QWORD *)(v73 - 24) = 0;
                *(_QWORD *)(v73 - 16) = 0;
                v73 -= 24;
                *(_QWORD *)(v73 + 16) = 0;
                v74 = *(_OWORD *)(v71 - 3);
                v71 -= 3;
                *(_OWORD *)v73 = v74;
                *(_QWORD *)(v73 + 16) = v71[2];
                *v71 = 0;
                v71[1] = 0;
                v71[2] = 0;
              }
              while (v71 != v72);
              v75 = v101;
              v70 = (_QWORD *)v107.i64[1];
            }
            v101.i64[0] = v73;
            v107 = v75;
            v76 = (char *)v102[0];
            v102[0] = v108;
            v108 = v76;
            *(_QWORD *)buf = v75.i64[0];
            sub_20B947074((uint64_t)buf);
            v101.i64[1] = (uint64_t)v70;
            if (value[0])
            {
              value[1] = value[0];
              operator delete(value[0]);
            }
          }
          else
          {
            *(_QWORD *)v101.i64[1] = 0;
            *(_QWORD *)(v64 + 8) = 0;
            *(_QWORD *)(v64 + 16) = 0;
            *(_OWORD *)v64 = *(_OWORD *)value;
            *(_QWORD *)(v64 + 16) = v104;
            v101.i64[1] = v64 + 24;
          }
        }
        v56 = v101.i64[1];
        v55 = v101.i64[0];
      }
      else
      {
        v55 = 0;
        v56 = 0;
      }
    }
    if (v56 - v55 != 24)
    {
      v77 = 0;
      if (v97 <= 1)
        v78 = 1;
      else
        v78 = v97;
      do
      {
        sub_20B9460FC(*(_QWORD *)(a1 + 40), (uint64_t)CFSTR("input"), 32, *(_QWORD *)(v55 + 24 * v77++));
        sub_20B9460FC(*(_QWORD *)(a1 + 40), (uint64_t)CFSTR("label"), 32, *(_QWORD *)(v101.i64[0] + 24 * v77));
        sub_20B9461DC(*(_QWORD *)(a1 + 40), (uint64_t)Mutable);
        v79 = (const __CFArray *)sub_20B946324(*(_QWORD *)(a1 + 40));
        sub_20B946568(Mutable, v79);
        v80 = (__int16 *)sub_20B9463E0(*(_QWORD *)(a1 + 40));
        if (v99 != v98)
        {
          v81 = *a4;
          v82 = *a2 + 1;
          v83 = v78;
          do
          {
            if (v77 < (uint64_t)(*v82 - *(v82 - 1)) >> 2)
            {
              _H0 = *v80;
              __asm { FCVT            D0, H0 }
              *(float *)&_D0 = *v81 + _D0 * 0.434294482;
              *v81 = *(float *)&_D0;
            }
            ++v81;
            ++v80;
            v82 += 3;
            --v83;
          }
          while (v83);
        }
        v55 = v101.i64[0];
      }
      while (v77 < 0xAAAAAAAAAAAAAAABLL * ((v101.i64[1] - v101.i64[0]) >> 3) - 1);
    }
    if (v99 != v98 && a3)
    {
      v86 = 0;
      if (v97 <= 1)
        v87 = 1;
      else
        v87 = v97;
      do
      {
        v88 = *(_QWORD *)(a1 + 72);
        v89 = &(*a2)[3 * v86];
        v91 = *v89;
        v90 = v89[1];
        v92 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
        v93 = (v90 - v91) >> 2;
        v94 = v93 - 15;
        if (v93 < 0xF)
          v94 = 0;
        if (v94 < v93)
        {
          if (v93 >= 0xF)
            v95 = 15;
          else
            v95 = (v90 - v91) >> 2;
          v96 = v86 + 32 * v93 - 32 * v95;
          do
          {
            v111.location = v96;
            v111.length = 1;
            CFArrayAppendArray(v92, Mutable, v111);
            v96 += 32;
            --v95;
          }
          while (v95);
        }
        if (v92)
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(v88 + 8), v92);
          CFRelease(v92);
        }
        ++v86;
      }
      while (v86 != v87);
    }
    *(_QWORD *)buf = &v101;
    sub_20B9470D4((void ***)buf);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v7 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v7, OS_LOG_TYPE_DEBUG, "[MontrealLanguageModel::jointProbabilitySingleInference]", buf, 2u);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = operator new();
    *(_WORD *)v8 = 15;
    *(_QWORD *)(v8 + 8) = CFArrayCreateMutable(0, 15, MEMORY[0x24BDBD690]);
    *(_QWORD *)buf = v8;
    v9 = *a2;
    v10 = a2[1];
    if (*a2 != v10)
    {
      do
      {
        sub_20B94604C(*(unsigned __int16 **)buf, *(CFArrayRef *)(a1 + 56));
        v11 = *v9;
        v12 = 0.0;
        if (v9[1] - *v9 != 4)
        {
          v13 = 0;
          do
          {
            LODWORD(value[0]) = 0;
            *(float *)value = (float)*(int *)(v11 + 4 * v13);
            sub_20B9460FC(*(_QWORD *)(a1 + 24), (uint64_t)CFSTR("input"), 1, (uint64_t)value);
            v101.i32[0] = 0;
            *(float *)v101.i32 = (float)*(int *)(*v9 + 4 * v13 + 4);
            sub_20B9460FC(*(_QWORD *)(a1 + 24), (uint64_t)CFSTR("label"), 1, (uint64_t)&v101);
            sub_20B9461DC(*(_QWORD *)(a1 + 24), *(_QWORD *)(*(_QWORD *)buf + 8));
            v14 = *(unsigned __int16 **)buf;
            v15 = (const __CFArray *)sub_20B946324(*(_QWORD *)(a1 + 24));
            sub_20B9462A0(v14, v15);
            ++v13;
            _H0 = *(_WORD *)sub_20B9463E0(*(_QWORD *)(a1 + 24));
            __asm { FCVT            S0, H0 }
            v12 = v12 + _S0;
            v11 = *v9;
          }
          while (v13 < ((v9[1] - *v9) >> 2) - 1);
        }
        if ((a3 & 1) != 0)
        {
          v22 = *(_QWORD *)(a1 + 72);
          sub_20B9464A4(value, *(unsigned __int16 **)buf);
          if (value[0])
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(v22 + 8), value[0]);
            if (value[0])
              CFRelease(value[0]);
          }
        }
        v23 = v12 * 0.434294482;
        v25 = a4[1];
        v24 = (unint64_t)a4[2];
        if ((unint64_t)v25 >= v24)
        {
          v27 = *a4;
          v28 = v25 - *a4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            sub_20B80CDD8();
          v30 = v24 - (_QWORD)v27;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)sub_20B8127BC((uint64_t)(a4 + 2), v31);
            v27 = *a4;
            v25 = a4[1];
          }
          else
          {
            v32 = 0;
          }
          v33 = (float *)&v32[4 * v28];
          *v33 = v23;
          v26 = v33 + 1;
          while (v25 != v27)
          {
            v34 = *((_DWORD *)v25-- - 1);
            *((_DWORD *)v33-- - 1) = v34;
          }
          *a4 = v33;
          a4[1] = v26;
          a4[2] = (float *)&v32[4 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a4[1] = v26;
        v9 += 3;
      }
      while (v9 != v10);
    }
    sub_20B946518((uint64_t *)buf);
  }
}

void sub_20B945F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  const void *v22;
  void *v24;

  if (v22)
    CFRelease(v22);
  v24 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B94604C(unsigned __int16 *a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  __CFArray *Mutable;
  const void **v7;
  CFMutableArrayRef MutableCopy;
  CFRange v9;

  if (theArray && CFArrayGetCount(theArray))
  {
    Count = CFArrayGetCount(theArray);
    v5 = *a1;
    if (Count <= v5)
    {
      MutableCopy = CFArrayCreateMutableCopy(0, Count, theArray);
      v7 = (const void **)(a1 + 4);
    }
    else
    {
      Mutable = CFArrayCreateMutable(0, v5, MEMORY[0x24BDBD690]);
      v9.length = *a1;
      v9.location = Count - v9.length;
      CFArrayAppendArray(Mutable, theArray, v9);
      v7 = (const void **)(a1 + 4);
      MutableCopy = Mutable;
    }
    sub_20B8B035C(v7, MutableCopy);
  }
  else
  {
    CFArrayRemoveAllValues(*((CFMutableArrayRef *)a1 + 1));
  }
}

uint64_t sub_20B9460FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  _Unwind_Exception *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v8 = off_25472BB50;
  v15 = off_25472BB50;
  if (!off_25472BB50)
  {
    v9 = (void *)sub_20B946EF8();
    v8 = dlsym(v9, "MRLNeuralNetworkSetInput");
    v13[3] = (uint64_t)v8;
    off_25472BB50 = v8;
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    v11 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v11);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8)(a1, a2, a3, 1, a4, 0);
}

uint64_t sub_20B9461DC(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _Unwind_Exception *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v4 = off_25472BB58;
  v11 = off_25472BB58;
  if (!off_25472BB58)
  {
    v5 = (void *)sub_20B946EF8();
    v4 = dlsym(v5, "MRLNeuralNetworkPredict");
    v9[3] = (uint64_t)v4;
    off_25472BB58 = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    v7 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v7);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v4)(a1, a2, 0);
}

void sub_20B9462A0(unsigned __int16 *a1, CFArrayRef theArray)
{
  const __CFArray *v4;

  v4 = (const __CFArray *)*((_QWORD *)a1 + 1);
  if (v4)
  {
    while (CFArrayGetCount(v4) >= *a1)
    {
      CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)a1 + 1), 0);
      v4 = (const __CFArray *)*((_QWORD *)a1 + 1);
    }
  }
  if (CFArrayGetCount(theArray) != 1)
    __assert_rtn("extendStates", "MontrealLanguageModel.cpp", 193, "CFArrayGetCount(other) == otherExpectedSize");
  sub_20B946568(*((__CFArray **)a1 + 1), theArray);
}

uint64_t sub_20B946324(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472BB60;
  v9 = off_25472BB60;
  if (!off_25472BB60)
  {
    v3 = (void *)sub_20B946EF8();
    v2 = dlsym(v3, "MRLNeuralNetworkCopyStates");
    v7[3] = (uint64_t)v2;
    off_25472BB60 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t, _QWORD))v2)(a1, 0);
}

uint64_t sub_20B9463E0(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472BB68;
  v9 = off_25472BB68;
  if (!off_25472BB68)
  {
    v3 = (void *)sub_20B946EF8();
    v2 = dlsym(v3, "MRLNeuralNetworkGetOutput");
    v7[3] = (uint64_t)v2;
    off_25472BB68 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t, const __CFString *, _QWORD))v2)(a1, CFSTR("logits"), 0);
}

void sub_20B9464A4(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t v2;
  const void **v3;
  CFMutableArrayRef Mutable;

  v3 = (const void **)(a2 + 4);
  v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    *((_QWORD *)a2 + 1) = 0;
    *a1 = v2;
    Mutable = CFArrayCreateMutable(0, *a2, MEMORY[0x24BDBD690]);
    sub_20B8B035C(v3, Mutable);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_20B946500(_Unwind_Exception *a1)
{
  const void **v1;

  sub_20B8B035C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B946518(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20B8B035C((const void **)(v2 + 8), 0);
    MEMORY[0x20BD39CB0](v2, 0x1020C400CC4F872);
  }
  return a1;
}

void sub_20B946568(__CFArray *a1, CFArrayRef theArray)
{
  CFRange v4;

  v4.length = CFArrayGetCount(theArray);
  v4.location = 0;
  CFArrayAppendArray(a1, theArray, v4);
  CFRelease(theArray);
}

uint64_t *sub_20B9465A8@<X0>(uint64_t *result@<X0>, const void ***a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  const void **v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  CFArrayRef *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  const __CFArray *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  unint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v51;
  int *v55;
  uint64_t v59;
  char *v60;
  _DWORD *v61;
  uint64_t v62;
  double v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  float *v73;
  float v74;
  char *v75;
  char *v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  const void **v81;
  void *value;
  int *v84;
  uint64_t v85;
  float v86;
  unsigned __int16 *v87;

  if (a3 >= 0x3E9F)
    v6 = 16031;
  else
    v6 = a3;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v7 = *a2;
  v81 = a2[1];
  if (*a2 != v81)
  {
    v8 = result;
    v9 = (unint64_t)(v6 - 2) >> 1;
    v10 = a5 + 2;
    v79 = v9;
    v80 = v9 + 1;
    do
    {
      if (*v7)
        v11 = (CFArrayRef *)__dynamic_cast(*v7, (const struct __class_type_info *)&unk_24C45BD18, (const struct __class_type_info *)&unk_24C45C0B8, 0);
      else
        v11 = 0;
      v12 = operator new();
      *(_WORD *)v12 = 15;
      *(_QWORD *)(v12 + 8) = CFArrayCreateMutable(0, 15, MEMORY[0x24BDBD690]);
      v87 = (unsigned __int16 *)v12;
      sub_20B94604C((unsigned __int16 *)v12, v11[1]);
      v86 = 0.0;
      v86 = (float)(*((int (**)(CFArrayRef *))*v11 + 4))(v11);
      sub_20B9460FC(v8[2], (uint64_t)CFSTR("input"), 1, (uint64_t)&v86);
      sub_20B9461DC(v8[2], *((_QWORD *)v87 + 1));
      v13 = v87;
      v14 = (const __CFArray *)sub_20B946324(v8[2]);
      sub_20B9462A0(v13, v14);
      if (a4)
      {
        v15 = v8[9];
        sub_20B9464A4(&value, v87);
        if (value)
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 8), value);
          if (value)
            CFRelease(value);
        }
      }
      v16 = sub_20B9463E0(v8[2]);
      v85 = v16;
      sub_20B947150(&value, 0x3E9FuLL);
      v18 = (int *)value;
      v17 = v84;
      if (value != v84)
      {
        v19 = 0;
        v20 = (int *)value;
        do
          *v20++ = v19++;
        while (v20 != v17);
      }
      if (v6)
      {
        if (v6 != 1)
        {
          v21 = v80;
          v22 = &v18[v79];
          do
          {
            sub_20B9471C4((uint64_t)v18, &v85, v6, v22--);
            --v21;
          }
          while (v21);
        }
        v23 = &v18[v6];
        if (v23 != v17)
        {
          v24 = &v18[v6];
          do
          {
            v25 = *v24;
            _H0 = *(_WORD *)(v16 + 2 * v25);
            v27 = *v18;
            _H1 = *(_WORD *)(v16 + 2 * v27);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 > _S1)
            {
              *v24 = v27;
              *v18 = v25;
              sub_20B9471C4((uint64_t)v18, &v85, v6, v18);
            }
            ++v24;
          }
          while (v24 != v17);
        }
        if (v6 != 1)
        {
          v35 = v6;
          do
          {
            v36 = 0;
            v37 = *v18;
            v38 = v18;
            do
            {
              v39 = v38;
              v38 += v36 + 1;
              v40 = 2 * v36;
              v36 = (2 * v36) | 1;
              v41 = v40 + 2;
              if (v41 < v35)
              {
                _H0 = *(_WORD *)(v16 + 2 * *v38);
                _H1 = *(_WORD *)(v16 + 2 * v38[1]);
                __asm
                {
                  FCVT            S1, H1
                  FCVT            S0, H0
                }
                if (_S0 > _S1)
                {
                  ++v38;
                  v36 = v41;
                }
              }
              *v39 = *v38;
            }
            while (v36 <= (uint64_t)((unint64_t)(v35 - 2) >> 1));
            if (v38 == --v23)
            {
              *v38 = v37;
            }
            else
            {
              *v38 = *v23;
              *v23 = v37;
              v46 = (char *)v38 - (char *)v18 + 4;
              if (v46 >= 5)
              {
                v47 = (((unint64_t)v46 >> 2) - 2) >> 1;
                v48 = &v18[v47];
                v49 = *v48;
                _H1 = *(_WORD *)(v16 + 2 * v49);
                v51 = *v38;
                _H0 = *(_WORD *)(v16 + 2 * v51);
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                if (_S1 > _S0)
                {
                  do
                  {
                    v55 = v48;
                    *v38 = v49;
                    if (!v47)
                      break;
                    v47 = (v47 - 1) >> 1;
                    v48 = &v18[v47];
                    v49 = *v48;
                    _H1 = *(_WORD *)(v16 + 2 * v49);
                    __asm { FCVT            S1, H1 }
                    v38 = v55;
                  }
                  while (_S1 > _S0);
                  *v55 = v51;
                }
              }
            }
          }
          while (v35-- > 2);
        }
        v59 = 0;
        v60 = (char *)a5[1];
        do
        {
          v61 = value;
          v62 = *((int *)value + v59);
          _H0 = *(_WORD *)(v16 + 2 * v62);
          __asm { FCVT            D0, H0 }
          v65 = _D0 * 0.434294482;
          if ((unint64_t)v60 >= *v10)
          {
            v67 = (uint64_t)&v60[-*a5] >> 3;
            if ((unint64_t)(v67 + 1) >> 61)
              sub_20B80CDD8();
            v68 = *v10 - *a5;
            v69 = v68 >> 2;
            if (v68 >> 2 <= (unint64_t)(v67 + 1))
              v69 = v67 + 1;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
              v70 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v70 = v69;
            v71 = (char *)sub_20B800BE8((uint64_t)(a5 + 2), v70);
            v73 = (float *)&v71[8 * v67];
            *v73 = *(float *)&v61[v59];
            v74 = v65;
            v73[1] = v74;
            v76 = (char *)*a5;
            v75 = (char *)a5[1];
            v77 = v73;
            if (v75 != (char *)*a5)
            {
              do
              {
                v78 = *((_QWORD *)v75 - 1);
                v75 -= 8;
                *((_QWORD *)v77 - 1) = v78;
                v77 -= 2;
              }
              while (v75 != v76);
              v75 = (char *)*a5;
            }
            v60 = (char *)(v73 + 2);
            *a5 = v77;
            a5[1] = v73 + 2;
            a5[2] = &v71[8 * v72];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *(_DWORD *)v60 = v62;
            v66 = v65;
            *((float *)v60 + 1) = v66;
            v60 += 8;
          }
          a5[1] = v60;
          ++v59;
        }
        while (v59 != v6);
        v18 = (int *)value;
      }
      if (v18)
      {
        v84 = v18;
        operator delete(v18);
      }
      result = sub_20B946518((uint64_t *)&v87);
      ++v7;
    }
    while (v7 != v81);
  }
  return result;
}

void sub_20B946A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  sub_20B8B035C((const void **)&__p, 0);
  sub_20B946518(&a18);
  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_20B946AE4(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;
  unsigned __int16 *v5;
  const __CFArray *v6;
  CFMutableArrayRef Mutable;
  _QWORD *v8;
  uint64_t v9;
  CFTypeRef cf;
  float v11;
  unsigned __int16 *v12;
  void *__p;
  _BYTE *v14;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(&__p);
  v2 = operator new();
  *(_WORD *)v2 = 15;
  *(_QWORD *)(v2 + 8) = CFArrayCreateMutable(0, 15, MEMORY[0x24BDBD690]);
  v12 = (unsigned __int16 *)v2;
  v3 = (int *)__p;
  if (v14 - (_BYTE *)__p != 4)
  {
    v4 = 0;
    do
    {
      LODWORD(cf) = 0;
      *(float *)&cf = (float)v3[v4];
      sub_20B9460FC(*(_QWORD *)(a1 + 24), (uint64_t)CFSTR("input"), 1, (uint64_t)&cf);
      v11 = 0.0;
      v11 = (float)*((int *)__p + v4 + 1);
      sub_20B9460FC(*(_QWORD *)(a1 + 24), (uint64_t)CFSTR("label"), 1, (uint64_t)&v11);
      sub_20B9461DC(*(_QWORD *)(a1 + 24), *((_QWORD *)v12 + 1));
      v5 = v12;
      v6 = (const __CFArray *)sub_20B946324(*(_QWORD *)(a1 + 24));
      sub_20B9462A0(v5, v6);
      ++v4;
      v3 = (int *)__p;
    }
    while (v4 < ((v14 - (_BYTE *)__p) >> 2) - 1);
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v8 = (_QWORD *)operator new();
  *v8 = &off_24C4625F0;
  v8[1] = Mutable;
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20B9464A4(&cf, v12);
  sub_20B8A0168((const void **)(a1 + 56), cf);
  if (cf)
    CFRelease(cf);
  *(_DWORD *)(a1 + 64) = *((_DWORD *)v14 - 1);
  sub_20B946518((uint64_t *)&v12);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20B946CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  sub_20B946518(&a11);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B946D28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_20B946D30@<X0>(uint64_t a1@<X0>, CFIndex a2@<X1>, uint64_t *a3@<X8>)
{
  const __CFAllocator *v4;
  const __CFArray *ValueAtIndex;
  CFArrayRef Copy;
  uint64_t result;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 72) + 8), a2);
  Copy = CFArrayCreateCopy(v4, ValueAtIndex);
  result = operator new();
  *(_QWORD *)result = &off_24C461B20;
  *(_QWORD *)(result + 8) = Copy;
  *(_DWORD *)(result + 16) = 0;
  *a3 = result;
  return result;
}

void sub_20B946DA4(uint64_t a1)
{
  sub_20B9472BC(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B946DC8(_QWORD **a1)
{
  void *__p[2];
  char v3;

  (*(void (**)(void **__return_ptr))(*a1[1] + 24))(__p);
  ((void (*)(_QWORD **, void **))(*a1)[13])(a1, __p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20B946E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B946E48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B946E58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 1, a2 + 8);
}

uint64_t sub_20B946E78(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)a1 + 72))(a1, *a2, (uint64_t)(a2[1] - *a2) >> 1, a2 + 3);
}

BOOL sub_20B946E98(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  return v1 && *(_QWORD *)(v1 + 8) && sub_20B945480(a1);
}

uint64_t sub_20B946EB4()
{
  return 2;
}

uint64_t sub_20B946EBC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t *sub_20B946EC4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20B99ABD0(*(_QWORD *)(a1 + 8), a2, *(_DWORD *)(a1 + 64), a3);
}

BOOL sub_20B946EDC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) != 0;
}

uint64_t sub_20B946EF0()
{
  return 0;
}

uint64_t sub_20B946EF8()
{
  uint64_t v0;
  void *v2;

  if (qword_25472BB48)
    return qword_25472BB48;
  qword_25472BB48 = _sl_dlopen();
  v0 = qword_25472BB48;
  if (!qword_25472BB48)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_20B946FB8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C461B20;
  sub_20B88B74C((const void **)(a1 + 8), 0);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B946FFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CFArrayRef Copy;
  uint64_t result;
  int v6;

  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFArrayRef *)(a1 + 8));
  result = operator new();
  v6 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C461B20;
  *(_QWORD *)(result + 8) = Copy;
  *(_DWORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t sub_20B94706C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_20B947074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B9470D4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20B947150(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B81277C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20B9471A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9471C4(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v18;
  uint64_t v20;
  uint64_t v24;
  uint64_t v25;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 | 1;
      v7 = (int *)(result + 4 * (v5 | 1));
      v8 = v5 + 2;
      v9 = *a2;
      if (v8 < a3)
      {
        _H0 = *(_WORD *)(v9 + 2 * *v7);
        _H1 = *(_WORD *)(v9 + 2 * v7[1]);
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 > _S1)
        {
          ++v7;
          v6 = v8;
        }
      }
      v18 = *v7;
      _H1 = *(_WORD *)(v9 + 2 * v18);
      v20 = *a4;
      _H0 = *(_WORD *)(v9 + 2 * v20);
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      if (_S1 <= _S0)
      {
        do
        {
          *a4 = v18;
          a4 = v7;
          if (v4 < v6)
            break;
          v24 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v25 = v24 + 2;
          if (v25 < a3)
          {
            _H1 = *(_WORD *)(v9 + 2 * *v7);
            _H2 = *(_WORD *)(v9 + 2 * v7[1]);
            __asm
            {
              FCVT            S2, H2
              FCVT            S1, H1
            }
            if (_S1 > _S2)
            {
              ++v7;
              v6 = v25;
            }
          }
          v18 = *v7;
          _H1 = *(_WORD *)(v9 + 2 * v18);
          __asm { FCVT            S1, H1 }
        }
        while (_S1 <= _S0);
        *a4 = v20;
      }
    }
  }
  return result;
}

uint64_t sub_20B9472BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C462080;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 48) = &off_24C461B20;
  sub_20B88B74C((const void **)(a1 + 56), 0);
  sub_20B94735C((const void **)(a1 + 40));
  sub_20B94735C((const void **)(a1 + 32));
  sub_20B94735C((const void **)(a1 + 24));
  sub_20B94735C((const void **)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &unk_24C4629A8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20B94735C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

uint64_t sub_20B94738C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4625F0;
  sub_20B8B035C((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20B9473C0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4625F0;
  sub_20B8B035C((const void **)(a1 + 8), 0);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B947404@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  char *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v3 = a2;
    v4 = (char *)result;
    while (1)
    {
      v6 = 0;
      v7 = 2 * v3;
      while (*(_WORD *)&v4[2 * v6] == 12387)
      {
        ++v6;
        v7 -= 2;
        if (!v7)
        {
          v6 = ((v3 - 1) & 0x7FFFFFFFFFFFFFFFLL) + 1;
          break;
        }
      }
      if (v3 - 1 >= v6)
        v8 = v6;
      else
        v8 = v3 - 1;
      v9 = sub_20B94761C(*(unsigned __int16 *)&v4[2 * v8]);
      v11 = v9;
      v12 = v10;
      if (v8)
      {
        if (v10)
        {
          v13 = 0;
          while (*(unsigned __int16 *)v9 != (unsigned __int16)word_20BA4C322[v13])
          {
            if (++v13 == 6)
              goto LABEL_17;
          }
        }
        --v8;
        v11 = sub_20B94761C(*(unsigned __int16 *)&v4[2 * v8]);
        v12 = v14;
      }
LABEL_17:
      if (!v4)
        break;
      if (v3 - v8 < 2)
        break;
      v15 = &v4[2 * v8];
      if (!sub_20B9476D8(*(unsigned __int16 *)v15)
        || !sub_20B9476D8(*((unsigned __int16 *)v15 + 1))
        || byte_20BA4C424[*(unsigned __int16 *)v15 - 12353] < 0)
      {
        break;
      }
      v16 = 0;
      v17 = -1;
      do
      {
        if (*((unsigned __int16 *)v15 + 1) == word_20BA4C478[v16])
          v17 = v16;
        ++v16;
      }
      while (v16 != 9);
      if (v17 < 0)
        break;
      v18 = 9 * byte_20BA4C424[*(unsigned __int16 *)v15 - 12353] + v17;
      if (v18 > 0xCE)
        break;
      v19 = (char *)*(&off_24C49D9F0 + v18);
      if (!*(_WORD *)v19)
        break;
      v20 = 0;
      do
        v21 = &v19[2 * v20++];
      while (*((_WORD *)v21 + 1));
      if (!v20)
        break;
      v22 = v8 + 2;
      if (v8)
        goto LABEL_41;
LABEL_42:
      result = sub_20B88DACC((uint64_t)a3, v19, v20);
      if (v4)
      {
        v4 += 2 * v22;
        v3 -= v22;
        if (v3)
          continue;
      }
      return result;
    }
    v22 = v8 + 1;
    if (v12)
      v19 = v11;
    else
      v19 = v4;
    if (v12 <= 1)
      v20 = 1;
    else
      v20 = v12;
    if (!v8)
      goto LABEL_42;
    do
    {
LABEL_41:
      sub_20B87C0F8((uint64_t)a3, *(_WORD *)v19);
      --v8;
    }
    while (v8);
    goto LABEL_42;
  }
  return result;
}

void sub_20B9475FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20B94761C(unsigned int a1)
{
  char *result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  if (sub_20B9476D8(a1))
  {
    result = (char *)*(&off_24C49D750 + a1 - 12353);
    if (*(_WORD *)result)
    {
      v3 = 0;
      do
        v4 = &result[2 * v3++];
      while (*((_WORD *)v4 + 1));
    }
  }
  else
  {
    v5 = 0;
    result = byte_20BA93B9E;
    while (word_20BA4C48A[v5] != a1)
    {
      if (++v5 == 6)
        return result;
    }
    result = (char *)*(&off_24C49E068 + v5);
    if (*(_WORD *)result)
    {
      v6 = 0;
      do
        v7 = &result[2 * v6++];
      while (*((_WORD *)v7 + 1));
    }
  }
  return result;
}

BOOL sub_20B9476D8(unsigned int a1)
{
  unsigned __int8 v1;
  int v4;
  unsigned int v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25472BB98);
  if ((v1 & 1) == 0)
  {
    v5 = a1;
    v4 = __cxa_guard_acquire(&qword_25472BB98);
    a1 = v5;
    if (v4)
    {
      word_25472BB90 = 12437;
      __cxa_guard_release(&qword_25472BB98);
      a1 = v5;
    }
  }
  return a1 > 0x3040 && (unsigned __int16)word_25472BB90 > a1;
}

uint64_t sub_20B947754()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D0D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D0D8))
  {
    v2 = operator new();
    qword_25472D0D0 = sub_20B9477DC(v2);
    __cxa_guard_release(&qword_25472D0D8);
  }
  return qword_25472D0D0;
}

void sub_20B9477C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D0D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9477DC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_20B947858;
  block[3] = &unk_24C49D6A8;
  block[4] = a1;
  if (qword_25472D0E0 != -1)
    dispatch_once(&qword_25472D0E0, block);
  return a1;
}

void sub_20B947858(uint64_t a1)
{
  dispatch_group_t *v1;
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  char *__path[2];

  v1 = *(dispatch_group_t **)(a1 + 32);
  v2 = (char *)sub_20B8CFF04("/System/Library/PrivateFrameworks/EmojiFoundation.framework/EmojiFoundation");
  __path[1] = v2;
  if (v2)
  {
    v3 = v2;
    sub_20B8D154C((const __CFString *)v2, __path);
    v4 = __path[0];
    v5 = dlopen(__path[0], 2);
    if (v4)
      MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
    if (v5)
    {
      qword_25472D0E8 = (uint64_t)objc_getClass("EMFEmojiLocaleData");
      qword_25472D0F0 = (uint64_t)objc_getClass("EMFEmojiPreferencesService");
      qword_25472D0F8 = (uint64_t)objc_getClass("EMFEmojiToken");
    }
    *v1 = dispatch_group_create();
    CFRelease(v3);
  }
  else
  {
    *v1 = dispatch_group_create();
  }
}

void sub_20B947934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B947974(NSObject **a1, unsigned int a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD v19[6];

  if (qword_25472D0E8)
    v3 = qword_25472D0F0 == 0;
  else
    v3 = 1;
  if (!v3 && qword_25472D0F8 != 0)
  {
    v7 = sub_20B93AFD4(a2);
    if (v7)
    {
      v9 = objc_msgSend_emojiLocaleDataWithLocaleIdentifier_((void *)qword_25472D0E8, v8, v7);
      v11 = objc_msgSend_emojiTokenWithString_localeData_((void *)qword_25472D0F8, v10, a3, v9);
      if (v11)
      {
        v13 = v11;
        v14 = (void *)objc_msgSend_sharedServiceWithMachName_((void *)qword_25472D0F0, v12, 0);
        v15 = *a1;
        v18 = objc_msgSend_dispatchQueue(v14, v16, v17);
        v19[0] = MEMORY[0x24BDAC760];
        v19[1] = 3221225472;
        v19[2] = sub_20B947A5C;
        v19[3] = &unk_24C49D6D0;
        v19[4] = v14;
        v19[5] = v13;
        dispatch_group_async(v15, v18, v19);
      }
    }
  }
}

uint64_t sub_20B947A5C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (void *)objc_msgSend_preferences(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_didUseEmoji_(v4, v5, *(_QWORD *)(a1 + 40));
  v8 = objc_msgSend_preferences(*(void **)(a1 + 32), v6, v7);
  return MEMORY[0x24BEDD108](v8, sel_writeEmojiDefaults, v9);
}

uint64_t sub_20B947A90(uint64_t a1, const char *a2)
{
  BOOL v2;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  void *UsedVariantEmojiForEmoji;
  const char *v15;
  uint64_t v16;

  if (qword_25472D0E8)
    v2 = qword_25472D0F0 == 0;
  else
    v2 = 1;
  if (v2 || qword_25472D0F8 == 0)
    return 0;
  v5 = (void *)objc_msgSend_sharedServiceWithMachName_((void *)qword_25472D0F0, a2, 0);
  v7 = (void *)objc_msgSend_emojiTokenWithString_localeData_((void *)qword_25472D0F8, v6, (uint64_t)a2, 0);
  if (!objc_msgSend_supportsSkinToneVariants(v7, v8, v9))
    return 0;
  v12 = (void *)objc_msgSend_preferences(v5, v10, v11);
  UsedVariantEmojiForEmoji = (void *)objc_msgSend_lastUsedVariantEmojiForEmoji_(v12, v13, (uint64_t)v7);
  return objc_msgSend_string(UsedVariantEmojiForEmoji, v15, v16);
}

uint64_t sub_20B947B28@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  const __CFString *v4;

  v3 = 0;
  if (result <= 5 && ((1 << result) & 0x34) != 0)
  {
    if ((_DWORD)result == 2)
      v4 = CFSTR("zh-Hans-Lati-CN-pinyin");
    else
      v4 = CFSTR("zh-Hant-Lati-TW-pinyin");
    v3 = operator new();
    result = sub_20B9C3B4C(v3, 0xFFFFFFFF, v4, 0, 0, CFSTR("syllablenew.lm"), 0, 0, 0, 1u, 0);
  }
  *a2 = v3;
  return result;
}

void sub_20B947BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

uint64_t sub_20B947C00@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  signed int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  v4 = (_QWORD *)sub_20B9AE60C();
  if (a1 == 5)
    v5 = 2;
  else
    v5 = 1;
  if (a1 == 13)
    v6 = 5;
  else
    v6 = v5;
  v7 = (char *)sub_20B9AE6A0(v4, v6, off_254729648[0], off_2547295C8[0]);
  if (v7[23] >= 0)
    v8 = v7;
  else
    v8 = *(char **)v7;
  v9 = operator new();
  result = sub_20B9F14AC(v9, v8);
  *a2 = v9;
  return result;
}

void sub_20B947C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10B0C40A1109CE3);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B947CC4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D110);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D110))
  {
    qword_25472D100 = 0;
    *(_QWORD *)algn_25472D108 = 0;
    __cxa_guard_release(&qword_25472D110);
  }
  return &qword_25472D100;
}

uint64_t *sub_20B947D18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D128);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D128))
  {
    qword_25472D118 = (uint64_t)L"";
    unk_25472D120 = 0;
    __cxa_guard_release(&qword_25472D128);
  }
  return &qword_25472D118;
}

BOOL sub_20B947D74(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) < v2)
    return 0;
  v3 = *(const void **)a1;
  return (!v2 || v3 != 0) && memcmp(v3, *(const void **)a2, 2 * v2) == 0;
}

BOOL sub_20B947DC0(uint64_t *a1, const void *a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a1[1];
  v4 = v3 >= a3;
  v5 = v3 - a3;
  if (v4 && ((v6 = *a1, !a3) || v6))
    return memcmp((const void *)(v6 + 2 * v5), a2, 2 * a3) == 0;
  else
    return 0;
}

void sub_20B947E04(_QWORD *a1, __int16 a2, double a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  char *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  uint64_t v20;
  char *v21;
  float v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[3];
  v6 = (uint64_t)(a1 + 3);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v12 = (void **)(v6 - 16);
    v13 = *(_QWORD *)(v6 - 16);
    v14 = (uint64_t)(v9 - v13) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_20B936DB4();
    v16 = v7 - v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v18 = (char *)sub_20B800BE8(v6, v17);
    v19 = (float *)&v18[8 * v14];
    v21 = &v18[8 * v20];
    *(_WORD *)v19 = a2;
    v22 = a3;
    v19[1] = v22;
    v11 = (char *)(v19 + 2);
    v24 = (char *)a1[1];
    v23 = (char *)a1[2];
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v19 - 1) = v25;
        v19 -= 2;
      }
      while (v23 != v24);
      v23 = (char *)*v12;
    }
    a1[1] = v19;
    a1[2] = v11;
    a1[3] = v21;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_WORD *)v9 = a2;
    v10 = a3;
    *(float *)(v9 + 4) = v10;
    v11 = (char *)(v9 + 8);
  }
  a1[2] = v11;
}

BOOL sub_20B947EF0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2))
    return 0;
  v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return v5 == (**(unsigned int (***)(uint64_t))a2)(a2);
}

__CFString *sub_20B947F74(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  unsigned __int16 *i;
  unsigned __int16 *v5;
  uint64_t v6;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = (**(uint64_t (***)(uint64_t))a1)(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("{type:%d,%c,"), v3, *(unsigned __int16 *)(a1 + 32));
  v5 = *(unsigned __int16 **)(a1 + 8);
  for (i = *(unsigned __int16 **)(a1 + 16); v5 != i; v5 += 4)
  {
    v6 = *v5;
    if (v5 == i - 4)
      CFStringAppendFormat(Mutable, 0, CFSTR("%c:%.2f"), v6, *((float *)v5 + 1));
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%c:%.2f,"), v6, *((float *)v5 + 1));
    i = *(unsigned __int16 **)(a1 + 16);
  }
  CFStringAppend(Mutable, CFSTR("}\n"));
  return Mutable;
}

BOOL sub_20B948058(uint64_t a1, const void *a2)
{
  _BOOL8 result;
  void *v5;

  result = sub_20B947EF0(a1, (uint64_t)a2);
  if (result)
  {
    v5 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45BD60, 0);
    if (!v5)
      __cxa_bad_cast();
    if (vabdd_f64(*((double *)v5 + 4), *(double *)(a1 + 32)) >= 2.22044605e-16
      || vabdd_f64(*((double *)v5 + 5), *(double *)(a1 + 40)) >= 2.22044605e-16
      || vabdd_f64(*((double *)v5 + 6), *(double *)(a1 + 48)) >= 2.22044605e-16
      || vabdd_f64(*((double *)v5 + 7), *(double *)(a1 + 56)) >= 2.22044605e-16)
    {
      return 0;
    }
    else
    {
      return (*((_BYTE *)v5 + 68) == 0) ^ (*(_BYTE *)(a1 + 68) != 0);
    }
  }
  return result;
}

uint64_t sub_20B94812C(uint64_t result, uint64_t a2)
{
  float *v2;
  unsigned __int16 *v3;
  BOOL v5;
  char v6;

  v6 = 0;
  v2 = *(float **)(result + 8);
  v3 = *(unsigned __int16 **)(result + 16);
  if (v2 != (float *)v3)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *, float))(a2 + 16))(a2, *(unsigned __int16 *)v2, &v6, v2[1]);
      v2 += 2;
      if (v6)
        v5 = 1;
      else
        v5 = v2 == (float *)v3;
    }
    while (!v5);
  }
  return result;
}

uint64_t sub_20B948194(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD v4[5];
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_20B948238;
  v4[3] = &unk_24C49D6F8;
  v5 = a2;
  v4[4] = &v6;
  sub_20B94812C(a1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_20B948220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B948238(uint64_t result, int a2, _BYTE *a3)
{
  if (a2 == *(char *)(result + 40))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

__CFString *sub_20B94825C(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  unsigned int v4;
  unsigned __int16 *i;
  unsigned __int16 *v6;
  uint64_t v7;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("{type:%d,%c,%d,%.2f,%.2f,%.2f,%.2f,%d,"), v3, v4, *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 68));
  v6 = *(unsigned __int16 **)(a1 + 8);
  for (i = *(unsigned __int16 **)(a1 + 16); v6 != i; v6 += 4)
  {
    v7 = *v6;
    if (v6 == i - 4)
      CFStringAppendFormat(Mutable, 0, CFSTR("%c:%.2f"), v7, *((float *)v6 + 1));
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%c:%.2f,"), v7, *((float *)v6 + 1));
    i = *(unsigned __int16 **)(a1 + 16);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("}\n"));
  return Mutable;
}

void sub_20B948378(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  _QWORD *v11;
  unsigned __int16 *v12;
  float *v13;
  unint64_t v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 (*v34)(__n128 *, __n128 *);
  void (*v35)(uint64_t);
  const char *v36;
  void *__p;
  void *v38;
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  void (*v42)(_QWORD *, __int16, float);
  void *v43;
  _QWORD *v44;
  uint64_t *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  v32 = &v31;
  v33 = 0x4812000000;
  v34 = sub_20B948648;
  v35 = sub_20B94866C;
  v36 = "";
  __p = 0;
  v38 = 0;
  v39 = 0;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v30[3] = 0;
  v41[0] = MEMORY[0x24BDAC760];
  v41[1] = 3321888768;
  v42 = sub_20B948684;
  v43 = &unk_24C49D720;
  v11 = v46;
  v44 = v30;
  sub_20B86D7F0((uint64_t)v46, a3);
  v45 = &v31;
  v13 = *(float **)(a1 + 8);
  v12 = *(unsigned __int16 **)(a1 + 16);
  v40 = 0;
  if (v13 != (float *)v12)
  {
    v14 = 0;
    v15 = 0.0;
    do
    {
      if (v40)
        v16 = 1;
      else
        v16 = v14 >= a2;
      if (v16)
        break;
      v17 = v13[1];
      v18 = v17;
      if (v14)
      {
        v19 = v17 >= a6 && (float)(v15 - v17) <= a5;
        v18 = v15;
        if (!v19)
          break;
      }
      ((void (*)(_QWORD *, _QWORD, char *))v42)(v41, *(unsigned __int16 *)v13, &v40);
      ++v14;
      v13 += 2;
      v15 = v18;
    }
    while (v13 != (float *)v12);
  }
  v20 = v32;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v21 = (char *)v20[6];
  v22 = (char *)v20[7];
  v23 = v22 - v21;
  if (v22 != v21)
  {
    if (v23 < 0)
      sub_20B936DB4();
    v24 = sub_20B800BE8((uint64_t)(a4 + 2), v23 >> 3);
    v25 = 0;
    *a4 = v24;
    a4[1] = v24;
    a4[2] = &v24[v26];
    v27 = v24;
    do
    {
      v28 = *(_QWORD *)v21;
      v21 += 8;
      *v27++ = v28;
      ++v25;
    }
    while (v21 != v22);
    a4[1] = &v24[v25];
  }
  if (v47 == v46)
  {
    v29 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_24;
    v29 = 5;
    v11 = v47;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v29))(v11);
LABEL_24:
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(&v31, 8);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
}

void sub_20B9485C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  _Block_object_dispose(&a10, 8);
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_20B948648(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_20B94866C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_20B948684(_QWORD *a1, __int16 a2, float a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int16 v23;

  if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    goto LABEL_4;
  v23 = a2;
  v6 = a1[9];
  if (!v6)
    sub_20B80BB74();
  if (((*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v6 + 48))(v6, &v23) & 1) == 0)
  {
LABEL_4:
    v7 = *(_QWORD **)(a1[5] + 8);
    v8 = v7[7];
    v9 = v7[8];
    if (v8 >= v9)
    {
      v11 = v7[6];
      v12 = (uint64_t)(v8 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_20B936DB4();
      v14 = v9 - v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v16 = (char *)sub_20B800BE8((uint64_t)(v7 + 8), v15);
      v17 = (float *)&v16[8 * v12];
      v19 = &v16[8 * v18];
      *(_WORD *)v17 = a2;
      v17[1] = a3;
      v10 = (char *)(v17 + 2);
      v21 = (char *)v7[6];
      v20 = (char *)v7[7];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v17 - 1) = v22;
          v17 -= 2;
        }
        while (v20 != v21);
        v20 = (char *)v7[6];
      }
      v7[6] = v17;
      v7[7] = v10;
      v7[8] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_WORD *)v8 = a2;
      *(float *)(v8 + 4) = a3;
      v10 = (char *)(v8 + 8);
    }
    v7[7] = v10;
  }
  ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
}

uint64_t sub_20B9487CC(uint64_t a1, uint64_t a2)
{
  return sub_20B86D7F0(a1 + 48, a2 + 48);
}

_QWORD *sub_20B9487D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

CFStringRef sub_20B94880C(uint64_t (***a1)(_QWORD))
{
  const __CFAllocator *v1;
  uint64_t v2;

  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = (**a1)(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("type:%d;"), v2);
}

uint64_t sub_20B94885C()
{
  return 0;
}

uint64_t sub_20B948864(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32);
}

_QWORD *sub_20B94886C(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C460C48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B9488A8(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C460C48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9488F4()
{
  return 0;
}

uint64_t sub_20B948904()
{
  return 3;
}

uint64_t sub_20B94890C(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_24C461C00;
  v4 = (void **)(a1 + 32);
  sub_20B83B400(&v4);
  *(_QWORD *)a1 = &unk_24C460C48;
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B94896C(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_24C461C00;
  v4 = (void **)(a1 + 32);
  sub_20B83B400(&v4);
  *(_QWORD *)a1 = &unk_24C460C48;
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return MEMORY[0x20BD39CB0](a1, 0xA1C40B41E38F6);
}

uint64_t sub_20B9489E0()
{
  return 1;
}

uint64_t sub_20B9489E8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 70);
}

_QWORD *sub_20B9489F0(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C460C48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B948A2C(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C460C48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B948A78()
{
  return 2;
}

_QWORD *sub_20B948A80(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C460C48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B948ABC(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C460C48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B948B08(uint64_t a1, void *a2, const void *a3, void *a4, uint64_t a5, int a6, char a7, unsigned int a8)
{
  _WORD *v16;
  char *v17;
  _WORD *v18;
  _WORD *v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *__src;
  void *v40;
  unsigned int v41;
  uint64_t v42[2];
  void *v43;
  uint64_t v44;
  unsigned __int8 v45;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B94E530((_QWORD *)a1, *(const void **)a5, *(_QWORD *)(a5 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 1));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_DWORD *)(a1 + 176) = a6;
  *(_BYTE *)(a1 + 180) = a7;
  v16 = operator new(0xAuLL);
  __src = a2;
  v40 = a4;
  v41 = a8;
  v17 = (char *)(v16 + 5);
  v16[4] = 0;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v16 + 5;
  *(_QWORD *)(a1 + 112) = v16 + 5;
  v18 = *(_WORD **)a5;
  v19 = *(_WORD **)(a5 + 8);
  if (*(_WORD **)a5 != v19)
  {
    do
    {
      v20 = v18[4];
      v21 = ((unint64_t)(unsigned __int16)(v18[2] + *((_WORD *)v17 - 3)) << 32) | ((unint64_t)*((unsigned __int16 *)v17 - 2) << 48) | ((unint64_t)(unsigned __int16)(v18[1] + *((_WORD *)v17 - 4)) << 16) | (unsigned __int16)(*v18 + *((_WORD *)v17 - 5));
      v22 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v17 >= v22)
      {
        v23 = *(_QWORD *)(a1 + 96);
        v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v17[-v23] >> 1);
        v25 = v24 + 1;
        if (v24 + 1 > 0x1999999999999999)
          sub_20B80CDD8();
        v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v23) >> 1);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0xCCCCCCCCCCCCCCCLL)
          v27 = 0x1999999999999999;
        else
          v27 = v25;
        if (v27)
          v27 = (unint64_t)sub_20B94E5D4(v27);
        else
          v28 = 0;
        v29 = v27 + 10 * v24;
        *(_QWORD *)v29 = v21;
        *(_WORD *)(v29 + 8) = v20;
        v31 = *(_WORD **)(a1 + 96);
        v30 = *(_WORD **)(a1 + 104);
        v32 = v29;
        if (v30 != v31)
        {
          do
          {
            v33 = *(_QWORD *)(v30 - 5);
            v30 -= 5;
            v34 = v30[4];
            *(_QWORD *)(v32 - 10) = v33;
            v32 -= 10;
            *(_WORD *)(v32 + 8) = v34;
          }
          while (v30 != v31);
          v30 = *(_WORD **)(a1 + 96);
        }
        v17 = (char *)(v29 + 10);
        *(_QWORD *)(a1 + 96) = v32;
        *(_QWORD *)(a1 + 104) = v29 + 10;
        *(_QWORD *)(a1 + 112) = v27 + 10 * v28;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_QWORD *)v17 = v21;
        *((_WORD *)v17 + 4) = v20;
        v17 += 10;
      }
      *(_QWORD *)(a1 + 104) = v17;
      v18 += 5;
    }
    while (v18 != v19);
  }
  sub_20B87C6B4(a1 + 24, *((unsigned __int16 *)v17 - 5));
  sub_20B87C6B4(a1 + 48, *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) - 8));
  sub_20B87C6B4(a1 + 72, *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) - 6));
  memcpy(*(void **)(a1 + 24), __src, 2 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) - 10));
  memcpy(*(void **)(a1 + 48), a3, 2 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) - 8));
  memcpy(*(void **)(a1 + 72), v40, 2 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) - 6));
  v35 = *(_QWORD *)(a1 + 24);
  v36 = (*(_QWORD *)(a1 + 32) - v35) >> 1;
  if (!v35)
    v36 = 0;
  v42[0] = *(_QWORD *)(a1 + 24);
  v42[1] = v36;
  sub_20B87B938(v42, (unint64_t *)(a1 + 120), a1 + 136, (v41 >> 30) & 1, &v43);
  if ((v45 & 0x80) != 0)
  {
    v37 = v43;
    *(_WORD *)(a1 + 128) = v44;
    operator delete(v37);
  }
  else
  {
    *(_WORD *)(a1 + 128) = v45;
  }
  return a1;
}

void sub_20B948E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  sub_20B84055C(v16);
  v18 = *(void **)(v15 + 96);
  if (v18)
  {
    *(_QWORD *)(v15 + 104) = v18;
    operator delete(v18);
  }
  v19 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v15 + 80) = v19;
    operator delete(v19);
  }
  v20 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v15 + 56) = v20;
    operator delete(v20);
  }
  v21 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v15 + 32) = v21;
    operator delete(v21);
  }
  v22 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B948E80(uint64_t a1, void *a2, unint64_t a3, uint64_t *a4, int a5, int a6, int a7, int a8)
{
  _QWORD *v14;

  v14 = sub_20B877ED0((_QWORD *)a1, a2, a3);
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  sub_20B94E618(v14 + 3, *a4, a4[1], 0xD37A6F4DE9BD37A7 * ((a4[1] - *a4) >> 3));
  *(_DWORD *)(a1 + 52) = a6;
  *(_DWORD *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = a8;
  sub_20B948F50(a1, a5);
  return a1;
}

void sub_20B948F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B8CC684((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void sub_20B948F50(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13[2];
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;

  v17 = 0;
  v4 = sub_20B949800(a1);
  if (v4)
  {
    v5 = a1;
    if (*(char *)(a1 + 23) < 0)
      v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    if (v6 == v7)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v8 += *(unsigned __int16 *)(*(_QWORD *)(v6 + 104) - 10);
        v6 += 184;
      }
      while (v6 != v7);
    }
    v10 = v5 + 2 * v8;
    if (v5)
      v11 = v4;
    else
      v11 = 0;
    v13[0] = v10;
    v13[1] = v11;
    sub_20B87B938(v13, &v17, 0, (*(_DWORD *)(a1 + 56) >> 30) & 1, &v14);
    if ((char)v16 < 0)
    {
      v12 = v15;
      operator delete(v14);
    }
    else
    {
      v12 = v16;
    }
    v9 = -10000 * (v12 - v17);
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a1 + 48) = v9 + a2;
}

uint64_t sub_20B949030(uint64_t a1, _QWORD *a2, int a3)
{
  char *v6;
  int v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned __int8 v11;
  int v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  double v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  unsigned int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _WORD *v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  unsigned int v61;
  double v62;
  int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  int v78;
  int v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *__p;
  char *v94;
  unint64_t v95;
  __int128 v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  void **v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t *v104;

  v6 = (char *)(a2 + 8);
  v7 = *((char *)a2 + 87);
  if (v7 >= 0)
    v8 = a2 + 8;
  else
    v8 = (void *)a2[8];
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = a2[9];
  v10 = sub_20B877ED0((_QWORD *)a1, v8, v9);
  v10[3] = 0;
  v81 = (void **)(v10 + 3);
  v10[4] = 0;
  v10[5] = 0;
  *((_DWORD *)v10 + 13) = *((_DWORD *)a2 + 55);
  *((_DWORD *)v10 + 14) = a3;
  v82 = a1;
  *(_DWORD *)(a1 + 60) = (*(uint64_t (**)(_QWORD *))(*a2 + 408))(a2);
  *(_DWORD *)(a1 + 64) = (*(uint64_t (**)(_QWORD *))(*a2 + 96))(a2);
  v11 = atomic_load((unsigned __int8 *)&qword_25472BBA8);
  v89 = a2;
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25472BBA8))
  {
    sub_20B8B2334(0);
    qword_25472BBA0 = (uint64_t)&qword_25472C9B0;
    __cxa_guard_release(&qword_25472BBA8);
  }
  v83 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 304))(a2);
  v84 = (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
  v12 = *((char *)a2 + 87);
  v13 = v12 < 0;
  v14 = (char *)a2[8];
  if (v12 >= 0)
    v14 = v6;
  v15 = *((unsigned __int8 *)a2 + 87);
  if (v13)
    v15 = a2[9];
  v98 = v14;
  v99 = v15;
  v16 = (*(uint64_t (**)(_QWORD *))(*a2 + 552))(a2);
  v18 = v17;
  v19 = (*(uint64_t (**)(_QWORD *))(*a2 + 544))(a2);
  v21 = v20;
  v22 = sub_20B87C4D0((uint64_t)&v98, *(_DWORD *)(a1 + 56));
  v23 = sub_20B87C1A0(v16, v18);
  v24 = sub_20B87C1A0(v19, v21);
  v87 = (char *)v19;
  v88 = (char *)v16;
  if (v22
    && v22 == v24
    && v22 == v23
    && (*(_BYTE *)(a1 + 56) & 0x20) != 0
    && (*(unsigned int (**)(_QWORD *))(*a2 + 96))(a2) != 71)
  {
    v80 = (*(uint64_t (**)(_QWORD *))(*a2 + 408))(a2);
    v25 = v21;
    if (!v80)
    {
      v99 -= v22;
      v18 -= v22;
      v25 = v21 - v22;
    }
  }
  else
  {
    v25 = v21;
  }
  v96 = 0uLL;
  v97 = 0;
  __p = 0;
  v94 = 0;
  v95 = 0;
  if (v84)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = (double)v99;
    do
    {
      v33 = (unsigned __int16 *)(*v83 + 40 * v28);
      v34 = v33[13];
      v35 = v33[14];
      v36 = v33[12];
      v37 = v33[15];
      v38 = v33[16];
      v85 = v29;
      v86 = v31;
      LOWORD(v33) = v99 - v31;
      v90 = v25;
      v91 = v18;
      v39 = v25 - v29;
      v40 = (unsigned __int16)(v99 - v31);
      if (v34 >= (unsigned __int16)v33)
        v41 = v40;
      else
        v41 = v34;
      if (v35 >= (unsigned __int16)(v18 - v30))
        v42 = v18 - v30;
      else
        v42 = v35;
      if (v36 >= v39)
        v43 = v39;
      else
        v43 = v36;
      if ((unint64_t)v27 >= v95)
      {
        v44 = v42;
        v46 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v26) >> 1) + 1;
        if (v46 > 0x1999999999999999)
          sub_20B80CDD8();
        v45 = v43;
        if (0x999999999999999ALL * ((uint64_t)(v95 - (_QWORD)v26) >> 1) > v46)
          v46 = 0x999999999999999ALL * ((uint64_t)(v95 - (_QWORD)v26) >> 1);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v95 - (_QWORD)v26) >> 1) >= 0xCCCCCCCCCCCCCCCLL)
          v47 = 0x1999999999999999;
        else
          v47 = v46;
        if (v47)
          v47 = (unint64_t)sub_20B94E5D4(v47);
        else
          v48 = 0;
        v49 = (_WORD *)(v47 + 2 * ((v27 - v26) >> 1));
        *v49 = v41;
        v49[1] = v44;
        v49[2] = v45;
        v49[3] = v37;
        v49[4] = v38;
        v50 = v49;
        if (v27 != v26)
        {
          do
          {
            v51 = *(_QWORD *)(v27 - 10);
            v27 -= 10;
            v52 = *((_WORD *)v27 + 4);
            *(_QWORD *)(v50 - 5) = v51;
            v50 -= 5;
            v50[4] = v52;
          }
          while (v27 != v26);
          v26 = (char *)__p;
        }
        v27 = (char *)(v49 + 5);
        __p = v50;
        v94 = (char *)(v49 + 5);
        v95 = v47 + 10 * v48;
        if (v26)
          operator delete(v26);
        v26 = (char *)v50;
      }
      else
      {
        *(_WORD *)v27 = v41;
        v44 = v42;
        *((_WORD *)v27 + 1) = v42;
        v45 = v43;
        *((_WORD *)v27 + 2) = v43;
        *((_WORD *)v27 + 3) = v37;
        *((_WORD *)v27 + 4) = v38;
        v27 += 10;
      }
      v94 = v27;
      v92 = v28;
      if (v28 == v84 - 1
        || (v53 = v41,
            v54 = qword_25472BBA0,
            v55 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v89 + 352))(v89, v28),
            ++v28,
            v56 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v89 + 344))(v89, v92 + 1),
            sub_20B8B252C(v54, v55, v56)))
      {
        v26 = (char *)__p;
        if (__p == v27)
        {
          v57 = 0;
          v59 = v89;
          v60 = v91;
        }
        else
        {
          v57 = 0;
          v58 = (char *)__p;
          v59 = v89;
          v60 = v91;
          do
          {
            v61 = *(unsigned __int16 *)v58;
            v58 += 10;
            v57 += v61;
          }
          while (v58 != v27);
        }
        v62 = (double)v57 * (double)(*(int (**)(_QWORD *))(*v59 + 112))(v59) / v32;
        v63 = (int)v62;
        v64 = v98;
        v65 = *((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1) >= v97)
        {
          v67 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)&v96 + 1) - v96) >> 3);
          v68 = v67 + 1;
          if (v67 + 1 > 0x1642C8590B21642)
            sub_20B80CDD8();
          if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v97 - v96) >> 3) > v68)
            v68 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v97 - v96) >> 3);
          if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v97 - v96) >> 3) >= 0xB21642C8590B21)
            v69 = 0x1642C8590B21642;
          else
            v69 = v68;
          v104 = &v97;
          if (v69)
            v69 = (unint64_t)sub_20B94E724(v69);
          else
            v70 = 0;
          v100 = (void **)v69;
          v101 = v69 + 184 * v67;
          v102 = v101;
          v103 = v69 + 184 * v70;
          sub_20B948B08(v101, v64, v88, v87, (uint64_t)&__p, v63, 0, *(_DWORD *)(v82 + 56));
          v102 += 184;
          sub_20B94E76C((uint64_t *)&v96, &v100);
          v66 = *((_QWORD *)&v96 + 1);
          sub_20B94E908((uint64_t)&v100);
          v26 = (char *)__p;
        }
        else
        {
          sub_20B948B08(*((uint64_t *)&v96 + 1), v98, v88, v87, (uint64_t)&__p, (int)v62, 0, *(_DWORD *)(v82 + 56));
          v66 = v65 + 184;
        }
        v31 = 0;
        v30 = 0;
        v29 = 0;
        *((_QWORD *)&v96 + 1) = v66;
        v71 = *(_QWORD *)(v66 - 80);
        v72 = *(unsigned __int16 *)(v71 - 10);
        v98 += 2 * v72;
        v99 -= v72;
        v73 = *(unsigned __int16 *)(v71 - 8);
        v18 = v60 - v73;
        v74 = *(unsigned __int16 *)(v71 - 6);
        v87 += 2 * v74;
        v88 += 2 * v73;
        v25 = v90 - v74;
        v94 = v26;
        v28 = v92 + 1;
        v27 = v26;
      }
      else
      {
        v31 = v86 + v53;
        v30 += v44;
        v29 = v85 + v45;
        v25 = v90;
        v18 = v91;
      }
    }
    while (v28 != v84);
  }
  v75 = *v81;
  if (*v81)
  {
    v76 = *(_QWORD *)(v82 + 32);
    v77 = *v81;
    if ((void *)v76 != v75)
    {
      do
      {
        v76 -= 184;
        sub_20B8CC6F4(v76);
      }
      while ((void *)v76 != v75);
      v77 = *v81;
    }
    *(_QWORD *)(v82 + 32) = v75;
    operator delete(v77);
    *v81 = 0;
    v81[1] = 0;
    v81[2] = 0;
  }
  *(_OWORD *)(v82 + 24) = v96;
  *(_QWORD *)(v82 + 40) = v97;
  v97 = 0;
  v96 = 0uLL;
  v78 = (*(uint64_t (**)(_QWORD *))(*v89 + 112))(v89);
  sub_20B948F50(v82, v78);
  if (__p)
    operator delete(__p);
  v100 = (void **)&v96;
  sub_20B8CC684(&v100);
  return v82;
}

void sub_20B94974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __cxa_guard_abort(&qword_25472BBA8);
  a27 = a10;
  sub_20B8CC684((void ***)&a27);
  if (*(char *)(a12 + 23) < 0)
    operator delete(*(void **)a12);
  _Unwind_Resume(a1);
}

unint64_t sub_20B949800(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v3 += *(unsigned __int16 *)(*(_QWORD *)(v1 + 104) - 10);
      v1 += 184;
    }
    while (v1 != v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 > v3)
      return v4 - v3;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 23);
    if (v3 < v4)
      return v4 - v3;
  }
  return 0;
}

double sub_20B949860(uint64_t a1, void *a2, unint64_t a3)
{
  double result;
  __int128 __dst;
  uint64_t v6;

  sub_20B877ED0(&__dst, a2, a3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_20B9498AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14[2];
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;

  v18 = 0;
  v2 = a1;
  if (*(char *)(a1 + 23) < 0)
    v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v5 += *(unsigned __int16 *)(*(_QWORD *)(v3 + 104) - 10);
      v3 += 184;
    }
    while (v3 != v4);
  }
  v6 = v2 + 2 * v5;
  v7 = sub_20B949800(a1);
  if (v2)
    v8 = v7;
  else
    v8 = 0;
  v14[0] = v6;
  v14[1] = v8;
  sub_20B87B938(v14, (unint64_t *)&v18, 0, (*(_DWORD *)(a1 + 56) >> 30) & 1, &v15);
  v9 = *(_DWORD *)(a1 + 48);
  v10 = v18;
  if ((char)v17 < 0)
  {
    v11 = v16;
    operator delete(v15);
  }
  else
  {
    v11 = v17;
  }
  v12 = v11 - v10;
  if (v10 > 0)
    ++v12;
  return (v9 + 10000 * v12);
}

uint64_t sub_20B949984(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  std::string *v12;
  std::string __p;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;
  _BYTE buf[22];
  __int16 v20;
  std::string *v21;
  std::string *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x24BDAC8D0];
  sub_20B83BFEC((uint64_t)v14);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      sub_20B94EC08((uint64_t)buf, v4);
      sub_20B8D15F4(v25, *(v28 - 3), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v8 = sub_20B828F84(&v15, (uint64_t)p_p, size);
      sub_20B828F84(v8, (uint64_t)" ", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_20B84055C((uint64_t)v29);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v4 += 184;
    }
    while (v4 != v5);
  }
  v9 = sub_20B9A7C5C(8u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_20B871648((uint64_t)v16, &__p);
    v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "logSegments";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = a2;
    v20 = 2080;
    v21 = v12;
    _os_log_debug_impl(&dword_20B7F7000, v9, OS_LOG_TYPE_DEBUG, "[%s] %s: %s\n", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v14[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15 = v10;
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v18);
}

void sub_20B949BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_20B83C118((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B949C34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20B84055C(a1 + 136);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

_QWORD *sub_20B949CAC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_20B94E6D4(a1, a3);
    a1[1] = sub_20B94EFD8(a2, a2 + 184 * a3, a1[1]);
  }
  return a1;
}

void sub_20B949D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B8CC684(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B949D40(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  if (!a2)
    goto LABEL_15;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = (*(_QWORD *)(a3 + 32) - v4) >> 3;
  v6 = 0xD37A6F4DE9BD37A7 * v5 - 1;
  if (0xD37A6F4DE9BD37A7 * v5 == 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (uint64_t *)(v4 + 104);
    do
    {
      v9 = *v8;
      v8 += 23;
      v7 += *(unsigned __int16 *)(v9 - 10);
      --v6;
    }
    while (v6);
  }
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = 0;
  if (v11 != v10 && v7 >= 1)
  {
    v14 = (uint64_t *)(v10 + 104);
    do
    {
      v15 = *v14;
      v14 += 23;
      v7 -= *(unsigned __int16 *)(v15 - 10);
      ++v12;
    }
    while (v12 < 0xD37A6F4DE9BD37A7 * ((v11 - v10) >> 3) && v7 > 0);
  }
  if (!v7)
  {
    *result = 0;
    result[1] = 0;
    v16 = v10 + 184 * v12;
    result[2] = 0;
    if (v11 != v16)
    {
      sub_20B94E6D4(result, 0xD37A6F4DE9BD37A7 * ((v11 - v16) >> 3));
      result = (_QWORD *)sub_20B94EFD8(v16, v11, v3[1]);
      v3[1] = result;
    }
  }
  else
  {
LABEL_15:
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

void sub_20B949E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B8CC684(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B949E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t i;
  int v16;
  uint64_t v19;
  unsigned __int16 *v21;
  char *v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  if (a1 == a2)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v5 = a1;
    do
    {
      sub_20B8B17F4(*(_WORD **)(v5 + 72), (_WORD *)(*(_QWORD *)(v5 + 72) + 2 * *(unsigned __int16 *)(*(_QWORD *)(v5 + 104) - 6)), (uint64_t)&v21);
      v5 += 184;
    }
    while (v5 != a2);
    v6 = (char *)v21;
    v7 = v22;
  }
  v8 = v7 - v6;
  v9 = v8 >> 1;
  if (v6)
    v10 = v8 >> 1;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a3 + 72);
  v12 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 104) - 6);
  if (!v11)
    v12 = 0;
  if (v10 < v12)
    v12 = v10;
  if (v12)
  {
    v13 = 0;
    while (*(unsigned __int16 *)(v11 + 2 * v13) == *(unsigned __int16 *)&v6[2 * v13])
    {
      if (v12 == ++v13)
      {
        v13 = v12;
        break;
      }
    }
    if (v13 && (float)((float)(unint64_t)v9 * 0.6) < (float)v13)
    {
      v14 = 0;
      for (i = 0; i != v13; v14 = i >= v13)
      {
        v16 = *(unsigned __int16 *)(v11 + 2 * i);
        if ((v16 - 12353) >= 0x56 && v16 != 12540 && v16 != 12316)
          break;
        ++i;
      }
      if (!v14)
      {
        v19 = 1;
        if (!v6)
          return v19;
        goto LABEL_34;
      }
    }
  }
  v19 = 0;
  if (v6)
  {
LABEL_34:
    v22 = v6;
    operator delete(v6);
  }
  return v19;
}

void sub_20B949FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B949FFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 v34;
  __int16 v36;
  _WORD *v37;
  NSObject *v38;
  __CFString *v39;
  const void **v40;
  __CFDictionary *v41;
  CFMutableDictionaryRef Mutable;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47[2];
  uint64_t v48;
  void *v49[2];
  void *v50[2];
  __int128 v51;
  void *v52[2];
  CFMutableDictionaryRef theDict[2];
  _BYTE __p[18];
  unsigned __int8 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_25472BBB8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25472BBB8))
  {
    sub_20B8B2334(0);
    qword_25472BBB0 = (uint64_t)&qword_25472C9B0;
    __cxa_guard_release(&qword_25472BBB8);
  }
  v48 = *(_QWORD *)(a2 + 8);
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)v50 = 0u;
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  *(_OWORD *)theDict = 0u;
  v9 = *(uint64_t **)(a3 + 24);
  v10 = *(uint64_t **)(a3 + 32);
  if (v9 == v10)
    goto LABEL_18;
  do
  {
    v11 = *v9;
    if (v9[1] != *v9)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        sub_20B8CD43C(&v48, (_WORD *)(v9[9] + 2 * *(unsigned __int16 *)(v9[12] + v12 + 4)), *(unsigned __int16 *)(v11 + v12 + 4), *(_WORD *)(v11 + v12), (_WORD *)(v9[6] + 2 * *(unsigned __int16 *)(v9[12] + v12 + 2)), *(unsigned __int16 *)(v11 + v12 + 2), *(_WORD *)(v11 + v12 + 6), *(_WORD *)(v11 + v12 + 8));
        ++v13;
        v11 = *v9;
        v12 += 10;
      }
      while (v13 < 0xCCCCCCCCCCCCCCCDLL * ((v9[1] - *v9) >> 1));
    }
    v9 += 23;
  }
  while (v9 != v10);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 32);
  if (v14 == v15)
  {
LABEL_18:
    v20 = 0;
    v21 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(v15 - 176);
    if (*(_QWORD *)(v15 - 184) == v16)
    {
      v20 = 0;
    }
    else
    {
      v17 = *(unsigned __int16 *)(v16 - 4);
      v20 = v17 == 1607 || v17 == 1612 || (v17 - 1609) < 2;
    }
    v21 = 0;
    do
    {
      v21 += *(unsigned __int16 *)(*(_QWORD *)(v14 + 104) - 10);
      v14 += 184;
    }
    while (v14 != v15);
  }
  v22 = a4[1];
  v23 = sub_20B9498AC(a3);
  v24 = v22 > v21;
  v25 = v22 - v21;
  if (v24)
  {
    v26 = *a4;
    v27 = *(unsigned __int16 *)(*a4 + 2 * a4[1] - 2);
    if (v27 != 12289 && v27 != 65292)
    {
      v43 = 0;
      while ((unsigned __int16)word_20BA4C41C[v43] != v27)
      {
        if (++v43 == 4)
        {
          if ((v27 - 12300) < 2 || (v27 - 65288) < 2)
            break;
          v20 = 0;
          if (v25)
            goto LABEL_30;
          goto LABEL_41;
        }
      }
    }
    --v25;
    v20 = 1;
    if (v25)
    {
LABEL_30:
      v29 = v26 + 2 * v21;
      if (v26)
        v30 = v25;
      else
        v30 = 0;
      v47[0] = v29;
      v47[1] = v30;
      sub_20B87B938(v47, 0, 0, (**(_DWORD **)a2 >> 30) & 1, __p);
      if ((v55 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = *(_WORD **)__p;
      if ((v55 & 0x80u) == 0)
        v32 = v55;
      else
        v32 = *(_QWORD *)&__p[8];
      sub_20B8CD43C(&v48, v31, v32, v25, v31, v32, 0, 0);
      if ((char)v55 < 0)
        operator delete(*(void **)__p);
    }
LABEL_41:
    if (v20)
    {
      v33 = *(unsigned __int16 *)(*a4 + 2 * a4[1] - 2);
      v34 = atomic_load((unsigned __int8 *)&qword_25472BBD8);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_25472BBD8))
      {
        sub_20B8B2334(0);
        qword_25472BBD0 = (uint64_t)&qword_25472C9B0;
        __cxa_guard_release(&qword_25472BBD8);
      }
      if (v33 == 12289 || v33 == 65292)
      {
        v45 = 587;
      }
      else
      {
        v44 = 0;
        v45 = 582;
        while ((unsigned __int16)word_20BA4C41C[v44] != v33)
        {
          if (++v44 == 4)
          {
            v36 = 0;
            v45 = 585;
            if (v33 > 65287)
            {
              if (v33 == 65288)
                break;
              v46 = 65289;
            }
            else
            {
              if (v33 == 12300)
                break;
              v46 = 12301;
            }
            if (v33 == v46)
            {
              v45 = 584;
              break;
            }
            goto LABEL_50;
          }
        }
      }
      v36 = word_20BA4138A[v45];
LABEL_50:
      v20 = 1;
      v37 = (_WORD *)(*a4 + 2 * a4[1] - 2);
      sub_20B8CD43C(&v48, v37, 1, 1, v37, 1, v36, v36);
    }
  }
  v38 = sub_20B9A7C5C(8u);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = "createCandidateFromAnalysis";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v20;
    _os_log_debug_impl(&dword_20B7F7000, v38, OS_LOG_TYPE_DEBUG, "[%s] endingWithPunctuation:%d", __p, 0x12u);
  }
  v39 = kMecabraCandidateAttributeIsEndingWithPunctuation[0];
  if (v20)
    v40 = (const void **)MEMORY[0x24BDBD270];
  else
    v40 = (const void **)MEMORY[0x24BDBD268];
  v41 = theDict[1];
  if (!theDict[1])
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    sub_20B8CE418((const void **)&theDict[1], Mutable);
    v41 = theDict[1];
  }
  CFDictionarySetValue(v41, v39, *v40);
  *a1 = sub_20B8CD5F8((uint64_t)&v48, (uint64_t)a4, v23, *(_DWORD *)(a3 + 52), 0, *(_DWORD *)(a3 + 64), 0);
  if (theDict[1])
    CFRelease(theDict[1]);
  theDict[1] = 0;
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v50[1])
  {
    *(void **)&v51 = v50[1];
    operator delete(v50[1]);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_20B94A524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_guard_abort(&qword_25472BBD8);
  sub_20B8CD6A0((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B94A598(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = (_QWORD *)*a2;
  if (*a2)
  {
    result[1] = 1;
    (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*result + 528))(result, 8, "candidate to be added to top", 1);
    return (_QWORD *)sub_20B8FDEF4(a1, a2, 0);
  }
  return result;
}

uint64_t sub_20B94A5FC(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  NSObject *v8;
  __CFString *v9;
  NSObject *v10;
  _QWORD *v11;
  unint64_t v12;
  NSObject *v13;
  void **p_p;
  unsigned int *v15;
  uint64_t v16;
  UniChar *v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  const __CFString *v28;
  NSObject *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const UniChar *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t i;
  UniChar v43;
  unsigned int v44;
  unsigned __int16 v45;
  BOOL v46;
  NSObject *v48;
  _BOOL8 v49;
  int v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  const void *v66;
  unint64_t v67;
  unint64_t v68;
  const void *v69;
  unint64_t v70;
  BOOL v71;
  int v72;
  BOOL v73;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  void *v81;
  NSObject *v82;
  uint64_t v83;
  NSObject *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  int *v97;
  uint64_t v98;
  uint64_t j;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  UniChar *v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  NSObject *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  size_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  BOOL v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  NSObject *v146;
  NSObject *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  _BOOL4 v162;
  _BOOL4 v163;
  _BOOL4 v164;
  int v165;
  _BOOL4 v166;
  _BOOL4 v167;
  NSObject *v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  NSObject *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  const __CFString *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int16 *v226;
  int v227;
  BOOL v229;
  unsigned int v231;
  unsigned __int16 v232;
  BOOL v233;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unsigned __int16 v238;
  _BOOL4 v239;
  NSObject *v240;
  int v241;
  int v242;
  const char *v243;
  CFStringRef v244;
  _QWORD *v245;
  _QWORD *v246;
  const __CFString *v247;
  const void **v248;
  void *v249;
  unsigned __int8 v250;
  uint64_t v251;
  uint64_t v252;
  const __CFString *v253;
  CFIndex v254;
  const __CFString *v255;
  const __CFString *v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  BOOL v260;
  unint64_t v262;
  CFIndex k;
  int v264;
  int v265;
  NSObject *v266;
  uint64_t v267;
  NSObject *v268;
  const char *v269;
  int v270;
  uint64_t v271;
  NSObject *v272;
  uint64_t v273;
  NSObject *v274;
  int v275;
  int v276;
  int v277;
  const __CFString *v278;
  uint64_t v279;
  BOOL v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v284;
  NSObject *v285;
  unsigned int v287;
  NSObject *v288;
  _QWORD *v289;
  uint64_t v290;
  __int16 v291;
  _WORD *v292;
  void *v293;
  int v294;
  NSObject *v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  BOOL v299;
  unint64_t v301;
  NSObject *v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  int v308;
  int v309;
  int v310;
  unsigned __int16 *v311;
  unint64_t v312;
  int v313;
  unint64_t v315;
  unsigned __int16 *v316;
  int v317;
  int *v319;
  const void *v320;
  UniChar *v321;
  unint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  CFTypeRef v326;
  uint64_t v327;
  CFTypeRef v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  _QWORD *v333;
  _QWORD *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  const void *v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v344;
  const void *v345;
  unint64_t v346;
  unint64_t v347;
  const __CFString *v348;
  unint64_t Length;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  NSObject *v353;
  uint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  unsigned int v357;
  uint64_t v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  uint64_t v362;
  __int16 v363;
  __int16 v364;
  _WORD *v365;
  void *v366;
  unsigned int v367;
  __int16 v368;
  __int16 v369;
  NSObject *v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t v379;
  __int16 v380;
  __int16 v381;
  _WORD *v382;
  void *v383;
  __int16 v384;
  unsigned int v385;
  __int16 v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  NSObject *v398;
  uint64_t v399;
  uint64_t v400;
  NSObject *v401;
  int v402;
  const __CFString *v403;
  const __CFString *v404;
  unint64_t v405;
  unint64_t v406;
  int CharacterAtIndex;
  BOOL v408;
  unint64_t v410;
  const char *v411;
  NSObject *v412;
  const __CFString *v413;
  unsigned __int16 v414;
  const __CFString *v415;
  unsigned __int16 v416;
  const __CFString *v417;
  unsigned __int16 v418;
  uint64_t v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  uint64_t v423;
  __int16 v424;
  __int16 v425;
  _WORD *v426;
  void *v427;
  __int16 v428;
  unsigned int v429;
  __int16 v430;
  NSObject *v431;
  NSObject *v432;
  uint64_t v433;
  int v434;
  int v435;
  const __CFString *v436;
  int v437;
  const __CFString *v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t *v450;
  int v451;
  char v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  int v459;
  uint64_t v460;
  const void **v461;
  unsigned int v462;
  int v463;
  uint64_t *v464;
  uint64_t v465;
  unint64_t v470;
  _QWORD *v471;
  char *v472;
  char *v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void *v481[2];
  unsigned __int8 v482;
  uint64_t v483;
  uint64_t v484;
  CFTypeRef cf;
  unint64_t v486;
  unsigned __int8 v487;
  _QWORD v488[2];
  void *__p;
  _BYTE *v490;
  _WORD *v491;
  uint8_t buf[44];
  __int16 v493;
  _BYTE v494[10];
  uint64_t v495;
  void *v496;
  void *v497;
  void *v498;
  void *v499;
  void *v500;
  uint64_t v501;
  _BYTE v502[48];
  _QWORD v503[15];

  v503[12] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 56) || !*(_QWORD *)(a2 + 8))
    return 0;
  v7 = a3;
  v8 = sub_20B9A7C5C(8u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = (__CFString *)CFStringCreateWithCharacters(0, *(const UniChar **)a2, *(_QWORD *)(a2 + 8));
    __p = v9;
    v10 = sub_20B9A7C5C(8u);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (!v9)
        goto LABEL_7;
      goto LABEL_6;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "stabilizeCandidates";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    _os_log_debug_impl(&dword_20B7F7000, v10, OS_LOG_TYPE_DEBUG, "[%s] raw analysis string: %@", buf, 0x16u);
    if (v9)
LABEL_6:
      CFRelease(v9);
  }
LABEL_7:
  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
    v11 = 0;
  else
    v11 = **(_QWORD ***)a4;
  v12 = *(_QWORD *)(a2 + 8);
  v457 = v7;
  if (v12 <= 1)
  {
    v13 = sub_20B9A7C5C(8u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "updateBestAnalysis";
      _os_log_debug_impl(&dword_20B7F7000, v13, OS_LOG_TYPE_DEBUG, "[%s] reset best analysis for short input", buf, 0xCu);
    }
    p_p = (void **)(a1 + 2);
    v15 = a1[2];
    a1[2] = 0;
    if (!v15)
      goto LABEL_51;
LABEL_50:
    sub_20B8CC624((uint64_t)p_p, (uint64_t)v15);
    goto LABEL_51;
  }
  v16 = (uint64_t)a1[2];
  v458 = v11;
  v464 = (uint64_t *)(a1 + 2);
  if (!v16)
    goto LABEL_26;
  v17 = *(UniChar **)a2;
  if (*(char *)(v16 + 23) < 0)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
    {
      v19 = *(unsigned int **)v16;
      goto LABEL_21;
    }
LABEL_26:
    if (!a6)
    {
      v7 = v457;
      if (v458
        && (v28 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v458 + 56))(v458),
            (unint64_t)CFStringGetLength(v28) < *(_QWORD *)(a2 + 8)))
      {
        v29 = sub_20B9A7C5C(8u);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          v279 = (*(uint64_t (**)(_QWORD *))(*v458 + 24))(v458);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "updateBestAnalysis";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v279;
          _os_log_debug_impl(&dword_20B7F7000, v29, OS_LOG_TYPE_DEBUG, "[%s] updating best analysis from history: %@", buf, 0x16u);
        }
        v30 = (int *)*a1;
        v31 = operator new();
        sub_20B949030(v31, v458, *v30);
        v32 = *v464;
        *v464 = v31;
        if (v32)
        {
          sub_20B8CC624((uint64_t)v464, v32);
          v31 = *v464;
        }
        sub_20B949860(v31, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v104 = sub_20B9A7C5C(8u);
        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "updateBestAnalysis";
          _os_log_debug_impl(&dword_20B7F7000, v104, OS_LOG_TYPE_DEBUG, "[%s] updating best analysis from converted analysis string", buf, 0xCu);
        }
        v481[0] = 0;
        sub_20B87B938((uint64_t *)a2, (unint64_t *)v481, 0, (**a1 >> 30) & 1, buf);
        v105 = operator new();
        v106 = v105;
        v107 = *(UniChar **)a2;
        v108 = *(_QWORD *)(a2 + 8);
        v490 = 0;
        v491 = 0;
        __p = 0;
        v109 = buf[23];
        if ((buf[23] & 0x80u) != 0)
          v109 = *(_DWORD *)&buf[8];
        sub_20B948E80(v105, v107, v108, (uint64_t *)&__p, 10000 * (v109 - LODWORD(v481[0])), 0, **a1, 77);
        v110 = *v464;
        *v464 = v106;
        if (v110)
          sub_20B8CC624((uint64_t)v464, v110);
        cf = &__p;
        sub_20B8CC684((void ***)&cf);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
      goto LABEL_51;
    }
LABEL_27:
    v25 = (int *)*a1;
    v7 = v457;
    v26 = (unsigned __int8 *)operator new();
    sub_20B949030((uint64_t)v26, a6, *v25);
    __p = v26;
    if ((char)v26[23] < 0)
    {
      v33 = v26;
      v26 = *(unsigned __int8 **)v26;
      v27 = *((_QWORD *)v33 + 1);
    }
    else
    {
      v27 = v26[23];
    }
    if (!v26)
      v27 = 0;
    *(_QWORD *)buf = v26;
    *(_QWORD *)&buf[8] = v27;
    if (sub_20B947D74(a2, (uint64_t)buf))
    {
      v34 = sub_20B9A7C5C(8u);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "updateBestAnalysis";
        _os_log_debug_impl(&dword_20B7F7000, v34, OS_LOG_TYPE_DEBUG, "[%s] update best analysis based on truncated candidate", buf, 0xCu);
      }
      v35 = __p;
      __p = 0;
      v36 = (uint64_t)(a1 + 2);
      v37 = *v464;
      *v464 = (uint64_t)v35;
      if (!v37)
        goto LABEL_51;
    }
    else
    {
      v38 = sub_20B9A7C5C(8u);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "updateBestAnalysis";
        _os_log_debug_impl(&dword_20B7F7000, v38, OS_LOG_TYPE_DEBUG, "[%s] reset best analysis for unaligned truncated candidate", buf, 0xCu);
      }
      v36 = (uint64_t)(a1 + 2);
      v37 = *v464;
      *v464 = 0;
      if (!v37)
        goto LABEL_48;
    }
    sub_20B8CC624(v36, v37);
LABEL_48:
    v15 = (unsigned int *)__p;
    __p = 0;
    if (!v15)
      goto LABEL_51;
    p_p = &__p;
    goto LABEL_50;
  }
  v18 = *(unsigned __int8 *)(v16 + 23);
  if (!*(_BYTE *)(v16 + 23))
    goto LABEL_26;
  v19 = a1[2];
LABEL_21:
  v20 = 0;
  v21 = *(_QWORD *)(v16 + 24);
  v22 = *(_QWORD *)(v16 + 32);
  v23 = v21;
  while (v18 > v12 || memcmp(v19, v17, 2 * v18))
  {
    if ((v22 - v21) / 184 == v20)
      goto LABEL_26;
    v24 = *(unsigned __int16 *)(*(_QWORD *)(v23 + 104) - 10);
    v18 -= v24;
    v19 = (unsigned int *)((char *)v19 + 2 * v24);
    ++v20;
    v23 += 184;
  }
  if (a6 && v20)
    goto LABEL_27;
  v7 = v457;
  if (v20)
  {
    if (v23 == v22)
    {
      v115 = v21;
    }
    else
    {
      v115 = v21;
      do
      {
        sub_20B824BE4(v21, (__n128 *)v23);
        sub_20B824BE4(v21 + 24, (__n128 *)(v23 + 24));
        sub_20B824BE4(v21 + 48, (__n128 *)(v23 + 48));
        sub_20B824BE4(v21 + 72, (__n128 *)(v23 + 72));
        sub_20B824BE4(v21 + 96, (__n128 *)(v23 + 96));
        v116 = *(_QWORD *)(v23 + 120);
        *(_WORD *)(v21 + 128) = *(_WORD *)(v23 + 128);
        *(_QWORD *)(v21 + 120) = v116;
        sub_20B8D6D60(v21 + 136, (uint64_t *)(v23 + 136));
        v117 = *(_DWORD *)(v23 + 176);
        *(_BYTE *)(v21 + 180) = *(_BYTE *)(v23 + 180);
        *(_DWORD *)(v21 + 176) = v117;
        v115 += 184;
        v23 += 184;
        v21 += 184;
      }
      while (v23 != v22);
      v22 = *(_QWORD *)(v16 + 32);
    }
    while (v22 != v115)
    {
      v22 -= 184;
      sub_20B8CC6F4(v22);
    }
    *(_QWORD *)(v16 + 32) = v115;
    v16 = *v464;
    v17 = *(UniChar **)a2;
    v12 = *(_QWORD *)(a2 + 8);
  }
  sub_20B949860(v16, v17, v12);
  v240 = sub_20B9A7C5C(8u);
  if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "updateBestAnalysis";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v20;
    _os_log_debug_impl(&dword_20B7F7000, v240, OS_LOG_TYPE_DEBUG, "[%s] updating best analysis from previous best analysis (segment gap: %zu)", buf, 0x16u);
  }
LABEL_51:
  v39 = *(const UniChar **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)*a1 & 0x20) == 0)
  {
    if (!v40)
      goto LABEL_63;
    v41 = 0;
    for (i = 0; i != v40; v41 = i >= v40)
    {
      v43 = v39[i];
      v46 = (unsigned __int16)((v43 & 0xFFDF) - 65) >= 0x1Au;
      v44 = (unsigned __int16)(v43 + 191);
      v45 = v43 + 223;
      v46 = v46 && v44 >= 0x1A;
      if (v46 && v45 > 0x19u)
        break;
      ++i;
    }
    if (v41)
    {
LABEL_63:
      v48 = sub_20B9A7C5C(8u);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "stabilizeCandidates";
        _os_log_debug_impl(&dword_20B7F7000, v48, OS_LOG_TYPE_DEBUG, "[%s] Temporary Roman mode ", buf, 0xCu);
      }
      return 0;
    }
  }
  v51 = v39[v40 - 1];
  if (v51 != 12289 && v51 != 65292)
  {
    for (j = 0; j != 4; ++j)
    {
      if ((unsigned __int16)word_20BA4C41C[j] == v51)
        goto LABEL_72;
    }
    if ((v51 - 12300) >= 2 && (v51 - 65288) >= 2)
    {
      v459 = 0;
LABEL_79:
      v483 = 0;
      sub_20B87B938((uint64_t *)a2, (unint64_t *)&v483, 0, (**a1 >> 30) & 1, v481);
      v58 = v482;
      if ((v482 & 0x80u) != 0)
        v58 = (uint64_t)v481[1];
      v448 = v58;
      if ((v482 & 0x80u) == 0)
        v59 = v481;
      else
        v59 = (void **)v481[0];
      if (a6 && ((*(void (**)(_QWORD *))(*a6 + 544))(a6), (v61 = v60) != 0))
      {
        (*(void (**)(_QWORD *))(*a6 + 552))(a6);
        v465 = 0;
        if (!v448)
          goto LABEL_119;
        v63 = v62;
        if (v448 <= v62)
          goto LABEL_119;
        v64 = *(_QWORD **)(v457 + 48);
        v65 = *(_QWORD **)(v457 + 56);
        if (v64 != v65)
        {
          while (1)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v64 + 88))(*v64) & 1) == 0
              && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v64 + 408))(*v64) != 1)
            {
              v465 = *v64;
              v66 = (const void *)(*(uint64_t (**)(void))(*(_QWORD *)*v64 + 544))();
              v68 = v67;
              v69 = (const void *)(*(uint64_t (**)(_QWORD *))(*a6 + 544))(a6);
              if (v68 >= v70)
              {
                v71 = v66 || v70 == 0;
                if (v71 && !memcmp(v66, v69, 2 * v70))
                {
                  v72 = *(unsigned __int16 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 544))(v465)
                                            + 2 * v61);
                  v73 = (v72 - 12353) < 0x56 || v72 == 12540;
                  if (!v73 && v72 != 12316)
                    break;
                  v75 = *((unsigned __int16 *)v59 + v63);
                  if ((v75 - 12353) >= 0x56 && v75 != 12540 && v75 != 12316)
                    break;
                  if (v72 == v75)
                    break;
                }
              }
            }
            if (++v64 == v65)
              goto LABEL_118;
          }
LABEL_119:
          if (v483 >= 1)
          {
            v79 = (uint64_t)a1[2];
            if (v79)
            {
              if (!a6 && v465)
              {
                v80 = sub_20B9498AC((uint64_t)a1[2]);
                if ((int)(v80 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 112))(v465)) > 4999)
                  goto LABEL_130;
                v79 = (uint64_t)a1[2];
              }
              sub_20B949FFC((uint64_t *)&__p, (uint64_t)a1, v79, (uint64_t *)a2);
              v81 = __p;
              if (__p)
              {
                v82 = sub_20B9A7C5C(8u);
                if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
                {
                  v241 = sub_20B9498AC((uint64_t)a1[2]);
                  v242 = v465;
                  if (v465)
                    v242 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 112))(v465);
                  v243 = "enabled";
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "stabilizeCandidates";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v241;
                  if (!a6)
                    v243 = "disabled";
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v242;
                  *(_WORD *)&buf[24] = 2080;
                  *(_QWORD *)&buf[26] = v243;
                  _os_log_debug_impl(&dword_20B7F7000, v82, OS_LOG_TYPE_DEBUG, "[%s] there is incomplete romaji and best analysis(weight:%d) can be trusted over top candidate(weight:%d) when truncated input is %s", buf, 0x22u);
                }
                v480 = (uint64_t)v81;
                sub_20B94A598(v457, &v480);
                v83 = v480;
                v480 = 0;
                if (v83)
                  (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
                v49 = 1;
                goto LABEL_651;
              }
            }
          }
LABEL_130:
          v84 = sub_20B9A7C5C(8u);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG) && *(_QWORD *)(a5 + 56) != *(_QWORD *)(a5 + 48))
          {
            v85 = 0;
            v86 = *MEMORY[0x24BEDB7F0];
            v88 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
            v87 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            v89 = MEMORY[0x24BEDB848] + 16;
            do
            {
              sub_20B83BFEC((uint64_t)buf);
              sub_20B828F84(&buf[16], (uint64_t)"Last-bunsetsu candidate #", 25);
              v90 = v85 + 1;
              std::ostream::operator<<();
              v91 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * v85);
              sub_20B871648((uint64_t)&buf[24], &__p);
              if (SHIBYTE(v491) >= 0)
                v92 = &__p;
              else
                v92 = __p;
              (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v91 + 528))(v91, 8, v92, 1);
              if (SHIBYTE(v491) < 0)
                operator delete(__p);
              *(_QWORD *)buf = v86;
              *(_QWORD *)&buf[*(_QWORD *)(v86 - 24)] = v88;
              *(_QWORD *)&buf[16] = v87;
              *(_QWORD *)&buf[24] = v89;
              if (SHIBYTE(v500) < 0)
                operator delete(v498);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x20BD39C2C](&v501);
              v85 = v90;
            }
            while (v90 < (uint64_t)(*(_QWORD *)(a5 + 56) - *(_QWORD *)(a5 + 48)) >> 3);
          }
          if (!v465)
          {
            v49 = 0;
LABEL_651:
            if ((char)v482 < 0)
              operator delete(v481[0]);
            return v49;
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v465 + 528))(v465, 8, "top candidate", 1);
          v93 = (int *)*a1;
          v94 = operator new();
          sub_20B949030(v94, (_QWORD *)v465, *v93);
          v479 = v94;
          v95 = sub_20B8FD8DC(v457);
          if (v95 == -1)
          {
            v478 = 0;
          }
          else
          {
            v96 = *(_QWORD **)(*(_QWORD *)(v457 + 48) + 8 * v95);
            v478 = 0;
            if (v96)
            {
              v97 = (int *)*a1;
              v98 = operator new();
              sub_20B949030(v98, v96, *v97);
              *(_QWORD *)buf = 0;
              v478 = v98;
            }
          }
          v100 = v479;
          v101 = (uint64_t)a1[2];
          v449 = (uint64_t *)(a1 + 2);
          v476 = 0;
          v477 = 0;
          v475 = 0;
          if (!v479)
            goto LABEL_384;
          if (!v101)
          {
            v102 = *(_QWORD *)(v479 + 24);
            v103 = *(_QWORD *)(v479 + 32);
            if (0xD37A6F4DE9BD37A7 * ((v103 - v102) >> 3) < 2)
              goto LABEL_366;
            goto LABEL_156;
          }
          v102 = *(_QWORD *)(v479 + 24);
          v103 = *(_QWORD *)(v479 + 32);
          if (v102 != v103 && *(_DWORD *)(v479 + 64) == 76)
          {
LABEL_156:
            sub_20B94E954((uint64_t **)v102, (uint64_t **)(v103 - 184), &v475);
LABEL_366:
            v456 = 1;
            goto LABEL_385;
          }
          v454 = v479;
          if (*(_DWORD *)(v479 + 60) == 2)
          {
            v112 = *(_QWORD *)(v101 + 24);
            v111 = *(_QWORD *)(v101 + 32);
            if (0xD37A6F4DE9BD37A7 * ((v111 - v112) >> 3) > 0xD37A6F4DE9BD37A7 * ((v103 - v102) >> 3))
            {
              if (v102 == v103)
              {
                v113 = 0;
              }
              else
              {
                v113 = 0;
                v114 = *(_QWORD *)(v479 + 24);
                do
                {
                  v113 += *(unsigned __int16 *)(*(_QWORD *)(v114 + 104) - 6);
                  v114 += 184;
                }
                while (v114 != v103);
              }
              if (v112 == v111)
              {
                v120 = 0;
              }
              else
              {
                v120 = 0;
                do
                {
                  v120 += *(unsigned __int16 *)(*(_QWORD *)(v112 + 104) - 6);
                  v112 += 184;
                }
                while (v112 != v111);
                if (v120 > v113)
                  goto LABEL_206;
              }
              v121 = (char *)operator new[]();
              v122 = 2 * v120;
              v123 = (char *)operator new[]();
              v124 = *(_QWORD *)(v479 + 24);
              v125 = *(_QWORD *)(v479 + 32);
              if (v124 != v125)
              {
                v126 = v121;
                do
                {
                  v127 = *(unsigned __int16 *)(*(_QWORD *)(v124 + 104) - 6);
                  if (*(_WORD *)(*(_QWORD *)(v124 + 104) - 6))
                  {
                    memmove(v126, *(const void **)(v124 + 72), 2 * v127);
                    v127 = *(unsigned __int16 *)(*(_QWORD *)(v124 + 104) - 6);
                  }
                  v126 += 2 * v127;
                  v124 += 184;
                }
                while (v124 != v125);
              }
              v128 = *(_QWORD *)(v101 + 24);
              v129 = *(_QWORD *)(v101 + 32);
              if (v128 != v129)
              {
                v130 = v123;
                do
                {
                  v131 = *(_QWORD *)(v128 + 104);
                  v132 = *(unsigned __int16 *)(v131 - 6);
                  if (*(_WORD *)(v131 - 6))
                    memmove(v130, *(const void **)(v128 + 72), 2 * v132);
                  v130 += 2 * v132;
                  v128 += 184;
                }
                while (v128 != v129);
              }
              v133 = memcmp(v121, v123, v122);
              MEMORY[0x20BD39C80](v123, 0x1000C80BDFB0063);
              MEMORY[0x20BD39C80](v121, 0x1000C80BDFB0063);
              if (!v133)
              {
                sub_20B94E954(*(uint64_t ***)(v101 + 24), (uint64_t **)(*(_QWORD *)(v101 + 32) - 184), &v475);
                v274 = sub_20B9A7C5C(8u);
                if (os_log_type_enabled(v274, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = "makeSegmentsExceptLast";
                  _os_log_debug_impl(&dword_20B7F7000, v274, OS_LOG_TYPE_DEBUG, "[%s] compound noun found, returning best segments", buf, 0xCu);
                }
LABEL_519:
                v456 = 0x100000000;
LABEL_385:
                sub_20B949984(&v475, (uint64_t)"segments except last");
                v208 = (uint64_t *)(a1 + 2);
                v209 = *v449;
                v210 = v456;
                if (!(_BYTE)v456
                  || (v211 = v479) == 0
                  || (v212 = *(_QWORD *)(v479 + 24), v213 = *(_QWORD *)(v479 + 32), v212 == v213))
                {
                  v215 = sub_20B9A7C5C(8u);
                  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = "makeLastSegments";
                    _os_log_debug_impl(&dword_20B7F7000, v215, OS_LOG_TYPE_DEBUG, "[%s] ignoring top segment", buf, 0xCu);
                    if (!v209)
                      goto LABEL_412;
                  }
                  else if (!v209)
                  {
LABEL_412:
                    v472 = 0;
                    v473 = 0;
LABEL_413:
                    v474 = 0;
LABEL_414:
                    v208 = (uint64_t *)(a1 + 2);
                    goto LABEL_608;
                  }
                  v216 = *(_QWORD *)(v209 + 32);
                  if (*(_QWORD *)(v209 + 24) != v216)
                  {
                    sub_20B94EC08((uint64_t)buf, v216 - 184);
                    v208 = (uint64_t *)(a1 + 2);
                    v472 = 0;
                    v473 = 0;
                    v474 = 0;
                    __p = &v472;
                    LOBYTE(v490) = 0;
                    v472 = (char *)operator new(0xB8uLL);
                    v473 = v472;
                    v474 = (unint64_t)(v472 + 184);
                    v473 = (char *)sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                    sub_20B84055C((uint64_t)v502);
                    if (v499)
                    {
                      v500 = v499;
                      operator delete(v499);
                    }
                    if (v496)
                    {
                      v497 = v496;
                      operator delete(v496);
                    }
                    if (*(_QWORD *)&v494[2])
                    {
                      v495 = *(_QWORD *)&v494[2];
                      operator delete(*(void **)&v494[2]);
                    }
                    if (*(_QWORD *)&buf[24])
                    {
                      *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
                      operator delete(*(void **)&buf[24]);
                    }
                    if (*(_QWORD *)buf)
                    {
                      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                      operator delete(*(void **)buf);
                    }
LABEL_608:
                    if (a6)
                    {
                      v303 = v472;
                      if (v472 == v473)
                      {
                        if (BYTE4(v456))
                        {
                          v304 = *(_QWORD *)(*v208 + 32) - 184;
                          if ((unint64_t)v472 >= v474)
                          {
                            v305 = sub_20B94EAF0((uint64_t *)&v472, v304);
                          }
                          else
                          {
                            sub_20B94EC08((uint64_t)v472, v304);
                            v305 = (uint64_t)v303 + 184;
                          }
                          v473 = (char *)v305;
                        }
                      }
                    }
                    sub_20B949984((uint64_t *)&v472, (uint64_t)"last segments");
                    v306 = v472;
                    v307 = v473;
                    *(_QWORD *)buf = &v475;
                    while (v306 != v307)
                    {
                      sub_20B94E9A0((uint64_t **)buf, (uint64_t)v306);
                      v306 += 184;
                    }
                    if (*v208)
                      v308 = sub_20B9498AC(*v208);
                    else
                      v308 = 10000 * v448;
                    if (v210)
                      v308 = sub_20B9498AC(v479);
                    v309 = *(_DWORD *)(v465 + 220);
                    v310 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 96))(v465);
                    if (v310 != 71)
                      goto LABEL_641;
                    if (v475 != v476)
                    {
                      v311 = *(unsigned __int16 **)(v476 - 112);
                      if (v311)
                      {
                        v312 = *(unsigned __int16 *)(*(_QWORD *)(v476 - 80) - 6);
                        if (!*(_WORD *)(*(_QWORD *)(v476 - 80) - 6))
                        {
LABEL_640:
                          v310 = 71;
                          goto LABEL_641;
                        }
                        v313 = *v311;
                        if (v313 == 32 || (v313 & 0xFFFFFFDF) - 65 <= 0x19)
                        {
                          v315 = 0;
                          v316 = v311 + 1;
                          while (v312 - 1 != v315)
                          {
                            v317 = v316[v315++];
                            if (v317 != 32 && (v317 & 0xFFFFFFDF) - 65 >= 0x1A)
                            {
                              if (v315 >= v312)
                                goto LABEL_640;
                              goto LABEL_639;
                            }
                          }
                          goto LABEL_640;
                        }
                      }
                    }
LABEL_639:
                    v310 = 77;
LABEL_641:
                    v319 = (int *)*a1;
                    v320 = (const void *)operator new();
                    v321 = *(UniChar **)a2;
                    v322 = *(_QWORD *)(a2 + 8);
                    memset(buf, 0, 24);
                    sub_20B94E618(buf, v475, v476, 0xD37A6F4DE9BD37A7 * ((uint64_t)(v476 - v475) >> 3));
                    sub_20B948E80((uint64_t)v320, v321, v322, (uint64_t *)buf, v308, v309, *v319, v310);
                    cf = v320;
                    __p = buf;
                    sub_20B8CC684((void ***)&__p);
                    v49 = cf != 0;
                    if (cf)
                    {
                      sub_20B949FFC((uint64_t *)buf, (uint64_t)a1, (uint64_t)cf, (uint64_t *)a2);
                      v323 = *(_QWORD **)buf;
                      (*(void (**)(uint64_t))(*(_QWORD *)v465 + 392))(v465);
                      (*(void (**)(_QWORD *))(*v323 + 400))(v323);
                      v323[23] = *(_QWORD *)(v465 + 184);
                      v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 200))(v465);
                      (*(void (**)(_QWORD *, uint64_t))(*v323 + 512))(v323, v324);
                      v471 = v323;
                      sub_20B94A598(v457, (uint64_t *)&v471);
                      v325 = (uint64_t)v471;
                      v471 = 0;
                      if (v325)
                        (*(void (**)(uint64_t))(*(_QWORD *)v325 + 16))(v325);
                      v326 = cf;
                      cf = 0;
                      v327 = *v449;
                      *v449 = (uint64_t)v326;
                      if (v327)
                      {
                        sub_20B8CC624((uint64_t)v449, v327);
                        v328 = cf;
                        cf = 0;
                        if (v328)
                          sub_20B8CC624((uint64_t)&cf, (uint64_t)v328);
                      }
                    }
                    *(_QWORD *)buf = &v472;
                    sub_20B8CC684((void ***)buf);
                    *(_QWORD *)buf = &v475;
                    sub_20B8CC684((void ***)buf);
                    v329 = v478;
                    v478 = 0;
                    if (v329)
                      sub_20B8CC624((uint64_t)&v478, v329);
                    v330 = v479;
                    v479 = 0;
                    if (v330)
                      sub_20B8CC624((uint64_t)&v479, v330);
                    goto LABEL_651;
                  }
                  goto LABEL_412;
                }
                if (*(_DWORD *)(v479 + 64) == 76)
                {
                  sub_20B94EC08((uint64_t)buf, v213 - 184);
                  v472 = 0;
                  v473 = 0;
                  v474 = 0;
                  __p = &v472;
                  LOBYTE(v490) = 0;
                  v472 = (char *)operator new(0xB8uLL);
                  v473 = v472;
                  v474 = (unint64_t)(v472 + 184);
                  v214 = sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
LABEL_596:
                  v473 = (char *)v214;
                  sub_20B84055C((uint64_t)v502);
                  if (v499)
                  {
                    v500 = v499;
                    operator delete(v499);
                  }
                  if (v496)
                  {
                    v497 = v496;
                    operator delete(v496);
                  }
                  if (*(_QWORD *)&v494[2])
                  {
                    v495 = *(_QWORD *)&v494[2];
                    operator delete(*(void **)&v494[2]);
                  }
                  if (*(_QWORD *)&buf[24])
                  {
                    *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
                    operator delete(*(void **)&buf[24]);
                  }
                  v293 = *(void **)buf;
                  if (!*(_QWORD *)buf)
                    goto LABEL_607;
                  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
LABEL_606:
                  operator delete(v293);
LABEL_607:
                  v210 = 1;
                  goto LABEL_608;
                }
                v217 = 0;
                v218 = v478;
                if (BYTE4(v456) && v209)
                {
                  v219 = *(_QWORD *)(v209 + 32);
                  if (*(_QWORD *)(v209 + 24) == v219)
                    v217 = 0;
                  else
                    v217 = v219 - 184;
                }
                if (*(_WORD *)(v213 - 56) == 1 && *(int *)(v213 - 8) > 8000)
                  goto LABEL_410;
                v221 = *(_QWORD *)(v213 - 80);
                v222 = *(unsigned __int16 *)(v221 - 6);
                v455 = v217;
                if (!*(_WORD *)(v221 - 6) || *(_QWORD *)(a5 + 48) == *(_QWORD *)(a5 + 56))
                  goto LABEL_570;
                v223 = **a1;
                v224 = *(_QWORD *)(v213 - 160);
                v225 = *(unsigned __int16 *)(v221 - 10);
                if (v224)
                {
                  if ((_DWORD)v225)
                  {
                    v226 = *(unsigned __int16 **)(v213 - 160);
                    do
                    {
                      v227 = *v226;
                      if (v227 != 12316 && v227 != 12540)
                      {
                        v229 = (v227 - 12353) < 0x56 || v227 == 12316;
                        if (v229 || v227 == 12540)
                          goto LABEL_441;
                        v46 = (unsigned __int16)((v227 & 0xFFDF) - 65) >= 0x1Au;
                        v231 = (unsigned __int16)(v227 + 191);
                        v232 = v227 + 223;
                        v233 = v46 && v231 >= 0x1A;
                        if (!v233 || v232 < 0x1Au)
                          goto LABEL_441;
                      }
                      ++v226;
                    }
                    while ((unint64_t)v226 < v224 + 2 * v225);
                    if (v222 <= v225)
                    {
LABEL_570:
                      if (v209)
                      {
                        v294 = sub_20B9498AC(v211);
                        v217 = v455;
                        if ((int)(v294 - sub_20B9498AC(v209)) >= 5001)
                        {
                          if (v455)
                          {
                            if (*(_BYTE *)(v455 + 180))
                            {
                              v295 = sub_20B9A7C5C(8u);
                              v217 = v455;
                              if (os_log_type_enabled(v295, OS_LOG_TYPE_DEBUG))
                              {
                                *(_DWORD *)buf = 136315138;
                                *(_QWORD *)&buf[4] = "isBestSegmentReliable";
                                _os_log_debug_impl(&dword_20B7F7000, v295, OS_LOG_TYPE_DEBUG, "[%s] ignoring best segment since it's a prefix segment", buf, 0xCu);
                              }
                            }
                            else
                            {
                              if (*(unsigned __int16 *)(v213 - 56) < 3u)
                                goto LABEL_655;
                              v399 = sub_20B94F058(*(_QWORD **)(a5 + 48), *(_QWORD **)(a5 + 56), v455);
                              v400 = sub_20B94F058(*(_QWORD **)(a5 + 48), *(_QWORD **)(a5 + 56), v213 - 184);
                              v401 = sub_20B9A7C5C(8u);
                              if (os_log_type_enabled(v401, OS_LOG_TYPE_DEBUG))
                              {
                                if (v399)
                                {
                                  v463 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v399 + 112))(v399);
                                  v436 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v399 + 24))(v399);
                                }
                                else
                                {
                                  v463 = 0;
                                  v436 = CFSTR("NULL");
                                }
                                if (v400)
                                {
                                  v437 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v400 + 112))(v400);
                                  v438 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v400 + 24))(v400);
                                }
                                else
                                {
                                  v437 = 0;
                                  v438 = CFSTR("NULL");
                                }
                                *(_DWORD *)buf = 136316418;
                                *(_QWORD *)&buf[4] = "isBestSegmentReliable";
                                *(_WORD *)&buf[12] = 1024;
                                *(_DWORD *)&buf[14] = v463;
                                *(_WORD *)&buf[18] = 2112;
                                *(_QWORD *)&buf[20] = v436;
                                *(_WORD *)&buf[28] = 1024;
                                *(_DWORD *)&buf[30] = v437;
                                *(_WORD *)&buf[34] = 2112;
                                *(_QWORD *)&buf[36] = v438;
                                v493 = 1024;
                                *(_DWORD *)v494 = 5000;
                                _os_log_debug_impl(&dword_20B7F7000, v401, OS_LOG_TYPE_DEBUG, "[%s] bestLBCandidate(weight:%d) %@, topLBCandidate(weight:%d) %@, threshold: %d", buf, 0x32u);
                                v210 = v456;
                              }
                              v217 = v455;
                              if (v399)
                              {
                                if (!v400
                                  || (!*(_BYTE *)(v455 + 180) || v399 != v400)
                                  && (v402 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v399 + 112))(v399),
                                      v217 = v455,
                                      (int)(v402 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)v400 + 112))(v400)) <= 4999))
                                {
LABEL_655:
                                  sub_20B949D40(&__p, v218, v211);
                                  v331 = v455;
                                  if (__p == v490
                                    || (v332 = sub_20B9498AC(v218), (int)(v332 - sub_20B9498AC(v211)) > 6999)
                                    || !sub_20B949E84((uint64_t)__p, (uint64_t)v490, v455))
                                  {
                                    v398 = sub_20B9A7C5C(8u);
                                    if (os_log_type_enabled(v398, OS_LOG_TYPE_DEBUG))
                                    {
                                      v434 = sub_20B9498AC(v209);
                                      v435 = sub_20B9498AC(v211);
                                      *(_DWORD *)buf = 136315650;
                                      *(_QWORD *)&buf[4] = "makeLastSegments";
                                      *(_WORD *)&buf[12] = 1024;
                                      *(_DWORD *)&buf[14] = v434;
                                      *(_WORD *)&buf[18] = 1024;
                                      *(_DWORD *)&buf[20] = v435;
                                      _os_log_debug_impl(&dword_20B7F7000, v398, OS_LOG_TYPE_DEBUG, "[%s] best analysis(%d) has a much lower weight than  top analysis(%d), using best segment", buf, 0x18u);
                                      v331 = v455;
                                    }
                                    sub_20B94EC08((uint64_t)buf, v331);
                                    sub_20B949CAC(&v472, (uint64_t)buf, 1uLL);
                                    sub_20B84055C((uint64_t)v502);
                                    if (v499)
                                    {
                                      v500 = v499;
                                      operator delete(v499);
                                    }
                                    if (v496)
                                    {
                                      v497 = v496;
                                      operator delete(v496);
                                    }
                                    if (*(_QWORD *)&v494[2])
                                    {
                                      v495 = *(_QWORD *)&v494[2];
                                      operator delete(*(void **)&v494[2]);
                                    }
                                    if (*(_QWORD *)&buf[24])
                                    {
                                      *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
                                      operator delete(*(void **)&buf[24]);
                                    }
                                    if (*(_QWORD *)buf)
                                    {
                                      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                                      operator delete(*(void **)buf);
                                    }
                                    v210 = 0;
                                  }
                                  else
                                  {
                                    v472 = 0;
                                    v473 = 0;
                                    v474 = 0;
                                    sub_20B94E618(&v472, (uint64_t)__p, (uint64_t)v490, 0xD37A6F4DE9BD37A7 * ((v490 - (_BYTE *)__p) >> 3));
                                  }
                                  *(_QWORD *)buf = &__p;
                                  sub_20B8CC684((void ***)buf);
                                  goto LABEL_414;
                                }
                              }
                            }
                          }
                        }
                      }
                      if (*(_DWORD *)(v211 + 60) != 2)
                      {
                        v302 = sub_20B9A7C5C(8u);
                        if (os_log_type_enabled(v302, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136315138;
                          *(_QWORD *)&buf[4] = "makeLastSegmentFromTopSegment";
                          _os_log_debug_impl(&dword_20B7F7000, v302, OS_LOG_TYPE_DEBUG, "[%s] using exact top segment", buf, 0xCu);
                        }
                        sub_20B94EC08((uint64_t)buf, v213 - 184);
                        v472 = 0;
                        v473 = 0;
                        v474 = 0;
                        __p = &v472;
                        LOBYTE(v490) = 0;
                        v472 = (char *)operator new(0xB8uLL);
                        v473 = v472;
                        v474 = (unint64_t)(v472 + 184);
                        v214 = sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                        v208 = (uint64_t *)(a1 + 2);
                        goto LABEL_596;
                      }
                      if (!*(_WORD *)(v213 - 56))
                      {
                        v472 = 0;
                        v473 = 0;
                        v210 = 1;
                        goto LABEL_413;
                      }
                      v296 = *(unsigned __int16 *)(*(_QWORD *)(v213 - 80) - 6);
                      if (*(_WORD *)(*(_QWORD *)(v213 - 80) - 6))
                      {
                        v297 = 0;
                        while (1)
                        {
                          v298 = *(unsigned __int16 *)(*(_QWORD *)(v213 - 112) + 2 * v297);
                          v299 = (v298 - 12449) < 0x5A || v298 == 12540;
                          if (!v299 && v298 != 12316)
                            break;
                          if (v296 == ++v297)
                          {
                            v297 = *(unsigned __int16 *)(*(_QWORD *)(v213 - 80) - 6);
                            break;
                          }
                        }
                        if (v297 >= v296)
                          v301 = *(unsigned __int16 *)(*(_QWORD *)(v213 - 80) - 6);
                        else
                          v301 = v297;
                      }
                      else
                      {
                        v301 = 0;
                      }
                      v462 = **a1;
                      v333 = *(_QWORD **)(a5 + 48);
                      v334 = *(_QWORD **)(a5 + 56);
                      if (v333 == v334)
                      {
                        v336 = 0;
                        Length = 0;
                      }
                      else
                      {
                        v470 = v301;
                        v335 = 0;
                        v336 = 0;
                        do
                        {
                          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v333 + 408))(*v333) != 2)
                          {
                            v337 = *v333;
                            v338 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v333 + 544))(*v333);
                            v340 = *(const void **)(v213 - 112);
                            if (v340)
                            {
                              v341 = v339;
                              v342 = *(_QWORD *)(v213 - 80);
                              if (v339 < *(unsigned __int16 *)(v342 - 6) && v335 < v339)
                              {
                                v344 = *(unsigned __int8 *)(v337 + 87);
                                if ((v344 & 0x80u) != 0)
                                  v344 = *(_QWORD *)(v337 + 72);
                                if (v344 <= *(unsigned __int16 *)(v342 - 10))
                                {
                                  v345 = (const void *)v338;
                                  v346 = *(unsigned __int16 *)(v342 - 8);
                                  (*(void (**)(uint64_t))(*(_QWORD *)v337 + 552))(v337);
                                  if (v347 <= v346 && !memcmp(v340, v345, 2 * v341))
                                  {
                                    v336 = v337;
                                    v335 = v341;
                                  }
                                }
                              }
                            }
                          }
                          ++v333;
                        }
                        while (v333 != v334);
                        if (v336)
                        {
                          v348 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v336 + 24))(v336);
                          v301 = v470;
                          Length = CFStringGetLength(v348);
                          v217 = v455;
                        }
                        else
                        {
                          Length = 0;
                          v217 = v455;
                          v301 = v470;
                        }
                      }
                      if (v217
                        && (v351 = *(unsigned __int16 *)(*(_QWORD *)(v217 + 104) - 6),
                            *(unsigned __int16 *)(*(_QWORD *)(v213 - 80) - 6) >= v351))
                      {
                        v390 = *(_QWORD *)(v213 - 112);
                        if (v390)
                          v391 = *(unsigned __int16 *)(*(_QWORD *)(v213 - 80) - 6);
                        else
                          v391 = 0;
                        cf = *(CFTypeRef *)(v213 - 112);
                        v486 = v391;
                        v392 = *(_QWORD *)(v217 + 72);
                        v393 = v301;
                        if (v392)
                          v394 = v351;
                        else
                          v394 = 0;
                        v488[0] = v392;
                        v488[1] = v394;
                        if (!sub_20B947D74((uint64_t)&cf, (uint64_t)v488))
                          v351 = 0;
                        if (v394 >= v391)
                          v395 = v391;
                        else
                          v395 = v394;
                        v301 = v393;
                        if (v395)
                        {
                          v396 = 0;
                          while (*(unsigned __int16 *)(v390 + 2 * v396) == *(unsigned __int16 *)(v392 + 2 * v396))
                          {
                            if (v395 == ++v396)
                            {
                              v396 = v395;
                              break;
                            }
                          }
                          v397 = v393 <= Length ? Length : v393;
                          if (v396 > v397)
                          {
                            sub_20B94EC08((uint64_t)buf, v455);
                            v472 = 0;
                            v473 = 0;
                            v474 = 0;
                            __p = &v472;
                            LOBYTE(v490) = 0;
                            v208 = (uint64_t *)(a1 + 2);
                            v472 = (char *)operator new(0xB8uLL);
                            v473 = v472;
                            v474 = (unint64_t)(v472 + 184);
                            v214 = sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                            goto LABEL_596;
                          }
                        }
                      }
                      else
                      {
                        v351 = 0;
                      }
                      if (v351 <= Length)
                        v352 = Length;
                      else
                        v352 = v351;
                      if (v301 >= v352)
                      {
                        v353 = sub_20B9A7C5C(8u);
                        if (os_log_type_enabled(v353, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136315394;
                          *(_QWORD *)&buf[4] = "makeLastSegmentFromTopSegment";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v301;
                          _os_log_debug_impl(&dword_20B7F7000, v353, OS_LOG_TYPE_DEBUG, "[%s] using the katakana part (len:%zu) of top segment (prefix matched)", buf, 0x16u);
                        }
                        v354 = *(_QWORD *)(v213 - 64);
                        v355 = (unint64_t)*(unsigned __int16 *)(v213 - 56) - v354 >= v301
                             ? v301
                             : *(unsigned __int16 *)(v213 - 56) - v354;
                        *(_QWORD *)buf = v355;
                        v356 = sub_20B8B6C54((_QWORD *)(v213 - 48), (unint64_t *)buf);
                        if (v356)
                        {
                          v357 = *((unsigned __int16 *)v356 + 12);
                          if (*((_WORD *)v356 + 12))
                          {
                            v358 = *(_QWORD *)(v213 - 80);
                            v359 = *(unsigned __int16 *)(v358 - 10);
                            v360 = *(unsigned __int16 *)(v358 - 8);
                            v361 = *(unsigned __int16 *)(v358 - 6);
                            v362 = *(_QWORD *)(v213 - 176);
                            v363 = *(_WORD *)(v362 - 4);
                            v364 = *(_WORD *)(v362 - 2);
                            v365 = operator new(0xAuLL);
                            v366 = v365;
                            v367 = (unsigned __int16)v355;
                            if (v361 >= (unsigned __int16)v355)
                              v368 = v355;
                            else
                              v368 = v361;
                            if (v360 < (unsigned __int16)v355)
                              v367 = v360;
                            v490 = v365 + 5;
                            v491 = v365 + 5;
                            if (v359 >= v357)
                              v369 = v357;
                            else
                              v369 = v359;
                            *v365 = v369;
                            v365[1] = v367;
                            v365[2] = v368;
                            v365[3] = v363;
                            v365[4] = v364;
                            __p = v365;
                            sub_20B948B08((uint64_t)buf, *(void **)(v213 - 160), *(const void **)(v213 - 136), *(void **)(v213 - 112), (uint64_t)&__p, 5000 * v367, 1, v462);
                            operator delete(v366);
                            v473 = 0;
                            v474 = 0;
                            v472 = 0;
                            __p = &v472;
                            LOBYTE(v490) = 0;
                            v208 = (uint64_t *)(a1 + 2);
                            v472 = (char *)operator new(0xB8uLL);
                            v473 = v472;
                            v474 = (unint64_t)(v472 + 184);
                            v214 = sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                            goto LABEL_596;
                          }
                        }
                      }
                      if (v351 > Length)
                      {
                        v370 = sub_20B9A7C5C(8u);
                        if (os_log_type_enabled(v370, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 136315138;
                          *(_QWORD *)&buf[4] = "makeLastSegmentFromTopSegment";
                          _os_log_debug_impl(&dword_20B7F7000, v370, OS_LOG_TYPE_DEBUG, "[%s] using best segment", buf, 0xCu);
                        }
                        v371 = *(_QWORD *)(v455 + 104);
                        v372 = *(unsigned __int16 *)(v371 - 10);
                        v373 = *(unsigned __int16 *)(v371 - 8);
                        v374 = *(unsigned __int16 *)(v371 - 6);
                        v375 = *(_QWORD *)(v213 - 80);
                        v376 = *(unsigned __int16 *)(v375 - 10);
                        v377 = *(unsigned __int16 *)(v375 - 8);
                        v378 = *(unsigned __int16 *)(v375 - 6);
                        v379 = *(_QWORD *)(v213 - 176);
                        v380 = *(_WORD *)(v379 - 4);
                        v381 = *(_WORD *)(v379 - 2);
                        v382 = operator new(0xAuLL);
                        v383 = v382;
                        if (v378 >= v374)
                          v384 = v374;
                        else
                          v384 = v378;
                        if (v377 >= v373)
                          v385 = v373;
                        else
                          v385 = v377;
                        v490 = v382 + 5;
                        v491 = v382 + 5;
                        if (v376 >= v372)
                          v386 = v372;
                        else
                          v386 = v376;
                        *v382 = v386;
                        v382[1] = v385;
                        v382[2] = v384;
                        v382[3] = v380;
                        v382[4] = v381;
                        __p = v382;
                        sub_20B948B08((uint64_t)buf, *(void **)(v213 - 160), *(const void **)(v213 - 136), *(void **)(v213 - 112), (uint64_t)&__p, 5000 * v385, 1, v462);
                        operator delete(v383);
                        v473 = 0;
                        v474 = 0;
                        v472 = 0;
                        __p = &v472;
                        LOBYTE(v490) = 0;
                        v208 = (uint64_t *)(a1 + 2);
                        v472 = (char *)operator new(0xB8uLL);
                        v473 = v472;
                        v474 = (unint64_t)(v472 + 184);
                        v214 = sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                        goto LABEL_596;
                      }
                      if (Length)
                      {
                        v387 = *(_QWORD *)(v336 + 64);
                        v388 = *(char *)(v336 + 87);
                        if (v388 >= 0)
                          v387 = v336 + 64;
                        v389 = *(_QWORD *)(v336 + 72);
                        if (v388 >= 0)
                          v389 = *(unsigned __int8 *)(v336 + 87);
                        *(_QWORD *)buf = v387;
                        *(_QWORD *)&buf[8] = v389;
                        sub_20B87B938((uint64_t *)buf, 0, 0, (v462 >> 30) & 1, &cf);
                        if ((v487 & 0x80) != 0)
                        {
                          if (v486 >= 3)
                          {
LABEL_792:
                            v412 = sub_20B9A7C5C(8u);
                            if (os_log_type_enabled(v412, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)buf = 136315138;
                              *(_QWORD *)&buf[4] = "makeLastSegmentFromTopSegment";
                              _os_log_debug_impl(&dword_20B7F7000, v412, OS_LOG_TYPE_DEBUG, "[%s] using partial candidate", buf, 0xCu);
                            }
                            v413 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v336 + 56))(v336);
                            v414 = CFStringGetLength(v413);
                            v415 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v336 + 232))(v336);
                            v416 = CFStringGetLength(v415);
                            v417 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v336 + 24))(v336);
                            v418 = CFStringGetLength(v417);
                            v419 = *(_QWORD *)(v213 - 80);
                            v420 = *(unsigned __int16 *)(v419 - 10);
                            v421 = *(unsigned __int16 *)(v419 - 8);
                            v422 = *(unsigned __int16 *)(v419 - 6);
                            v423 = *(_QWORD *)(v213 - 176);
                            v424 = *(_WORD *)(v423 - 4);
                            v425 = *(_WORD *)(v423 - 2);
                            v426 = operator new(0xAuLL);
                            v427 = v426;
                            v428 = v418;
                            if (v422 < v418)
                              v428 = v422;
                            v429 = v416;
                            if (v421 < v416)
                              v429 = v421;
                            v430 = v414;
                            v490 = v426 + 5;
                            v491 = v426 + 5;
                            if (v420 < v414)
                              v430 = v420;
                            *v426 = v430;
                            v426[1] = v429;
                            v426[2] = v428;
                            v426[3] = v424;
                            v426[4] = v425;
                            __p = v426;
                            sub_20B948B08((uint64_t)buf, *(void **)(v213 - 160), *(const void **)(v213 - 136), *(void **)(v213 - 112), (uint64_t)&__p, 5000 * v429, 1, v462);
                            operator delete(v427);
                            v473 = 0;
                            v474 = 0;
                            v472 = 0;
                            __p = &v472;
                            LOBYTE(v490) = 0;
                            v208 = (uint64_t *)(a1 + 2);
                            v472 = (char *)operator new(0xB8uLL);
                            v473 = v472;
                            v474 = (unint64_t)(v472 + 184);
                            v473 = (char *)sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                            sub_20B84055C((uint64_t)v502);
                            if (v499)
                            {
                              v500 = v499;
                              operator delete(v499);
                            }
                            if (v496)
                            {
                              v497 = v496;
                              operator delete(v496);
                            }
                            if (*(_QWORD *)&v494[2])
                            {
                              v495 = *(_QWORD *)&v494[2];
                              operator delete(*(void **)&v494[2]);
                            }
                            if (*(_QWORD *)&buf[24])
                            {
                              *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
                              operator delete(*(void **)&buf[24]);
                            }
                            if (*(_QWORD *)buf)
                            {
                              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                              operator delete(*(void **)buf);
                            }
                            if (((char)v487 & 0x80000000) == 0)
                              goto LABEL_607;
                            v293 = (void *)cf;
                            goto LABEL_606;
                          }
                          operator delete((void *)cf);
                        }
                        else if (v487 >= 3u)
                        {
                          goto LABEL_792;
                        }
                      }
                      v220 = sub_20B9A7C5C(8u);
                      if (!os_log_type_enabled(v220, OS_LOG_TYPE_DEBUG))
                        goto LABEL_411;
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = "makeLastSegmentFromTopSegment";
                      v411 = "[%s] expanding the last segment to hiragana string";
                      goto LABEL_787;
                    }
                  }
                }
LABEL_441:
                if (v224)
                  v235 = v225;
                else
                  v235 = 0;
                *(_QWORD *)buf = *(_QWORD *)(v213 - 160);
                *(_QWORD *)&buf[8] = v235;
                sub_20B87B938((uint64_t *)buf, 0, 0, (v223 >> 30) & 1, &__p);
                v236 = HIBYTE(v491);
                v237 = HIBYTE(v491);
                if (SHIBYTE(v491) < 0)
                  v236 = (unint64_t)v490;
                if (v236 > 3)
                {
                  v238 = 0;
                  v239 = 0;
                  goto LABEL_551;
                }
                v440 = v236;
                v441 = v212;
                v244 = CFStringCreateWithCharactersNoCopy(0, *(const UniChar **)(v213 - 112), *(unsigned __int16 *)(*(_QWORD *)(v213 - 80) - 6), (CFAllocatorRef)*MEMORY[0x24BDBD258]);
                cf = v244;
                v246 = *(_QWORD **)(a5 + 48);
                v245 = *(_QWORD **)(a5 + 56);
                v444 = v218;
                if (v246 == v245)
                {
LABEL_465:
                  v442 = 0;
                  v451 = 1000000;
                }
                else
                {
                  while (1)
                  {
                    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v246 + 408))(*v246))
                    {
                      v247 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v246 + 24))(*v246);
                      if (CFStringHasPrefix(v244, v247))
                        break;
                    }
                    if (++v246 == v245)
                      goto LABEL_465;
                  }
                  v244 = (CFStringRef)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v246 + 24))(*v246);
                  v451 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v246 + 112))(*v246);
                  v403 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v246 + 24))(*v246);
                  v404 = v403;
                  if (v403)
                  {
                    v405 = 0;
                    v406 = CFStringGetLength(v403);
                    if (v406)
                    {
                      while (1)
                      {
                        CharacterAtIndex = CFStringGetCharacterAtIndex(v404, v405);
                        v408 = (CharacterAtIndex - 12449) < 0x5A || CharacterAtIndex == 12540;
                        if (!v408 && CharacterAtIndex != 12316)
                          break;
                        if (v406 == ++v405)
                        {
                          v405 = v406;
                          break;
                        }
                      }
                      v210 = v456;
                    }
                    if (v405 >= v406)
                      v410 = v406;
                    else
                      v410 = v405;
                    v442 = v410;
                  }
                  else
                  {
                    v442 = 0;
                  }
                  v432 = sub_20B9A7C5C(8u);
                  if (os_log_type_enabled(v432, OS_LOG_TYPE_DEBUG))
                  {
                    v433 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v246 + 24))(*v246);
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "isTopSegmentSurfaceUnreliable";
                    *(_WORD *)&buf[12] = 2112;
                    *(_QWORD *)&buf[14] = v433;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v451;
                    *(_WORD *)&buf[28] = 2048;
                    *(_QWORD *)&buf[30] = v442;
                    _os_log_debug_impl(&dword_20B7F7000, v432, OS_LOG_TYPE_DEBUG, "[%s] top candidate: %@ (%d) prefix katakana length: %zu", buf, 0x26u);
                    v210 = v456;
                  }
                }
                v248 = *(const void ***)(a5 + 48);
                v461 = *(const void ***)(a5 + 56);
                if (v248 == v461)
                {
                  v446 = 0;
                  v447 = 0;
                  v453 = 1000000;
LABEL_526:
                  v280 = v440 < 3 && v213 - v441 == 184;
                  v281 = 3000;
                  if (!v280)
                    v281 = 0;
                  v282 = v446 + v281 + dword_20BA4C410[v440 - 1];
                  if (v442 != v440 || v442 >= 3)
                    v284 = v282;
                  else
                    v284 = v282 + 1000;
                  if (v442 == v447)
                    v238 = v442;
                  else
                    v238 = 0;
                  v285 = sub_20B9A7C5C(8u);
                  v218 = v444;
                  if (os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "isTopSegmentSurfaceUnreliable";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v238;
                    *(_WORD *)&buf[18] = 2048;
                    *(_QWORD *)&buf[20] = v284;
                    _os_log_debug_impl(&dword_20B7F7000, v285, OS_LOG_TYPE_DEBUG, "[%s] Katakana common prefix: %d, threshold: %ld", buf, 0x1Cu);
                  }
                  v239 = v453 != 1000000 && v284 + v451 > (unint64_t)v453;
LABEL_548:
                  if (cf)
                    CFRelease(cf);
                  v237 = HIBYTE(v491);
LABEL_551:
                  if (v237 < 0)
                    operator delete(__p);
                  v217 = v455;
                  if (v239)
                  {
                    if (v238)
                    {
                      v287 = **a1;
                      v288 = sub_20B9A7C5C(8u);
                      if (os_log_type_enabled(v288, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136315138;
                        *(_QWORD *)&buf[4] = "makeReliableKanaSegment";
                        _os_log_debug_impl(&dword_20B7F7000, v288, OS_LOG_TYPE_DEBUG, "[%s] top segment is not reliable, but using the common katakana part", buf, 0xCu);
                      }
                      *(_QWORD *)buf = v238;
                      v289 = sub_20B8B6C54((_QWORD *)(v213 - 48), (unint64_t *)buf);
                      if (v289)
                      {
                        v290 = v289[3];
                        if (v290)
                        {
                          sub_20B8B2334(0);
                          v291 = word_25472C9E0;
                          v292 = operator new(0xAuLL);
                          v490 = v292 + 5;
                          v491 = v292 + 5;
                          *v292 = v290;
                          v292[1] = v238;
                          v292[2] = v238;
                          v292[3] = v291;
                          v292[4] = v291;
                          __p = v292;
                          sub_20B948B08((uint64_t)buf, *(void **)(v213 - 160), *(const void **)(v213 - 136), *(void **)(v213 - 112), (uint64_t)&__p, 5000 * v238, 0, v287);
                          v472 = 0;
                          v473 = 0;
                          v474 = 0;
                          cf = &v472;
                          LOBYTE(v486) = 0;
                          v472 = (char *)operator new(0xB8uLL);
                          v473 = v472;
                          v474 = (unint64_t)(v472 + 184);
                          v208 = (uint64_t *)(a1 + 2);
                          v473 = (char *)sub_20B94EFD8((uint64_t)buf, (uint64_t)v503, (uint64_t)v472);
                          sub_20B84055C((uint64_t)v502);
                          if (v499)
                          {
                            v500 = v499;
                            operator delete(v499);
                          }
                          if (v496)
                          {
                            v497 = v496;
                            operator delete(v496);
                          }
                          if (*(_QWORD *)&v494[2])
                          {
                            v495 = *(_QWORD *)&v494[2];
                            operator delete(*(void **)&v494[2]);
                          }
                          if (*(_QWORD *)&buf[24])
                          {
                            *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
                            operator delete(*(void **)&buf[24]);
                          }
                          if (*(_QWORD *)buf)
                          {
                            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                            operator delete(*(void **)buf);
                          }
                          v293 = v292;
                          goto LABEL_606;
                        }
                      }
                    }
LABEL_410:
                    v220 = sub_20B9A7C5C(8u);
                    if (!os_log_type_enabled(v220, OS_LOG_TYPE_DEBUG))
                    {
LABEL_411:
                      v210 = 0;
                      goto LABEL_412;
                    }
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = "makeReliableKanaSegment";
                    v411 = "[%s] top segment is not reliable";
LABEL_787:
                    _os_log_debug_impl(&dword_20B7F7000, v220, OS_LOG_TYPE_DEBUG, v411, buf, 0xCu);
                    goto LABEL_411;
                  }
                  goto LABEL_570;
                }
                v446 = 0;
                v447 = 0;
                v453 = 1000000;
                while (1)
                {
                  if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v248 + 408))(*v248) != 1)
                  {
                    if (*v248)
                      v249 = __dynamic_cast(*v248, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
                    else
                      v249 = 0;
                    v250 = atomic_load((unsigned __int8 *)&qword_25472BBC8);
                    if ((v250 & 1) == 0 && __cxa_guard_acquire(&qword_25472BBC8))
                    {
                      sub_20B8B2334(0);
                      qword_25472BBC0 = (uint64_t)&qword_25472C9B0;
                      __cxa_guard_release(&qword_25472BBC8);
                      v210 = v456;
                    }
                    if (v249)
                    {
                      if ((*(uint64_t (**)(void *))(*(_QWORD *)v249 + 48))(v249))
                      {
                        v251 = (*(uint64_t (**)(void *))(*(_QWORD *)v249 + 48))(v249);
                        v252 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v249 + 560))(v249, v251 - 1);
                        if (sub_20B91371C(qword_25472BBC0, *(unsigned __int16 *)(v252 + 32)))
                        {
                          v431 = sub_20B9A7C5C(8u);
                          if (os_log_type_enabled(v431, OS_LOG_TYPE_DEBUG))
                          {
                            v439 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 24))(*v248);
                            *(_DWORD *)buf = 136315394;
                            *(_QWORD *)&buf[4] = "isTopSegmentSurfaceUnreliable";
                            *(_WORD *)&buf[12] = 2112;
                            *(_QWORD *)&buf[14] = v439;
                            _os_log_debug_impl(&dword_20B7F7000, v431, OS_LOG_TYPE_DEBUG, "[%s] last bunsetsu candidates have a hatsu-onbin verb: %@", buf, 0x16u);
                            v238 = 0;
                            v239 = 1;
                            v210 = v456;
                          }
                          else
                          {
                            v238 = 0;
                            v239 = 1;
                          }
                          v218 = v444;
                          goto LABEL_548;
                        }
                      }
                    }
                    v253 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 24))(*v248);
                    v254 = CFStringGetLength(v244);
                    if (v254 <= CFStringGetLength(v253))
                    {
                      for (k = 0; k < CFStringGetLength(v244); ++k)
                      {
                        v264 = CFStringGetCharacterAtIndex(v253, k);
                        v265 = CFStringGetCharacterAtIndex(v244, k);
                        if (v264 != v265
                          && ((v264 - 48) >= 0xA
                           && (unsigned __int16)(v264 + 240) >= 0xAu
                           && !sub_20B8D9FF4(v264)
                           || (v265 - 48) >= 0xA
                           && (unsigned __int16)(v265 + 240) >= 0xAu
                           && !sub_20B8D9FF4(v265)))
                        {
                          goto LABEL_477;
                        }
                      }
                      if (v451 <= (*(int (**)(const void *))(*(_QWORD *)*v248 + 112))(*v248))
                        goto LABEL_511;
                      v451 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 112))(*v248);
                      v266 = sub_20B9A7C5C(8u);
                      if (!os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG))
                        goto LABEL_511;
                      v267 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 24))(*v248);
                      *(_DWORD *)buf = 136315906;
                      *(_QWORD *)&buf[4] = "isTopSegmentSurfaceUnreliable";
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v267;
                      *(_WORD *)&buf[22] = 1024;
                      *(_DWORD *)&buf[24] = v451;
                      *(_WORD *)&buf[28] = 2048;
                      *(_QWORD *)&buf[30] = v442;
                      v268 = v266;
                      v269 = "[%s] top candidate (updated): %@ (%d) prefix katakana length: %zu";
                    }
                    else
                    {
LABEL_477:
                      if (v453 != 1000000)
                        goto LABEL_511;
                      v453 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 112))(*v248);
                      v255 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 24))(*v248);
                      v256 = v255;
                      if (v255)
                      {
                        v257 = 0;
                        v258 = CFStringGetLength(v255);
                        if (v258)
                        {
                          while (1)
                          {
                            v259 = CFStringGetCharacterAtIndex(v256, v257);
                            v260 = (v259 - 12449) < 0x5A || v259 == 12540;
                            if (!v260 && v259 != 12316)
                              break;
                            if (v258 == ++v257)
                            {
                              v257 = v258;
                              break;
                            }
                          }
                        }
                        v262 = v257 >= v258 ? v258 : v257;
                        v447 = v262;
                      }
                      else
                      {
                        v447 = 0;
                      }
                      v270 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 408))(*v248);
                      v271 = 1000;
                      if (v270 != 2)
                        v271 = 0;
                      v446 = v271;
                      v272 = sub_20B9A7C5C(8u);
                      if (!os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
                        goto LABEL_511;
                      v273 = (*(uint64_t (**)(const void *))(*(_QWORD *)*v248 + 24))(*v248);
                      *(_DWORD *)buf = 136315906;
                      *(_QWORD *)&buf[4] = "isTopSegmentSurfaceUnreliable";
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v273;
                      *(_WORD *)&buf[22] = 1024;
                      *(_DWORD *)&buf[24] = v453;
                      *(_WORD *)&buf[28] = 2048;
                      *(_QWORD *)&buf[30] = v447;
                      v268 = v272;
                      v269 = "[%s] second top candidate: %@ (%d) prefix katakana length: %zu";
                    }
                    _os_log_debug_impl(&dword_20B7F7000, v268, OS_LOG_TYPE_DEBUG, v269, buf, 0x26u);
                  }
LABEL_511:
                  if (++v248 == v461)
                    goto LABEL_526;
                }
              }
              v100 = v479;
              v102 = *(_QWORD *)(v479 + 24);
              v103 = *(_QWORD *)(v479 + 32);
            }
          }
LABEL_206:
          if (v102 == v103)
          {
            v134 = 0;
          }
          else
          {
            v134 = 0;
            do
            {
              v134 += *(unsigned __int16 *)(*(_QWORD *)(v102 + 104) - 10);
              v102 += 184;
            }
            while (v102 != v103);
          }
          v135 = *(_QWORD *)(v101 + 24);
          v136 = *(_QWORD *)(v101 + 32);
          if (v135 == v136)
          {
            v137 = 0;
          }
          else
          {
            v137 = 0;
            do
            {
              v137 += *(unsigned __int16 *)(*(_QWORD *)(v135 + 104) - 10);
              v135 += 184;
            }
            while (v135 != v136);
          }
          v138 = sub_20B9498AC(v100);
          v139 = sub_20B9498AC(v101);
          if (v448 < 1)
          {
            v141 = 0x7FFFFFFF;
          }
          else
          {
            v140 = 6;
            if ((unint64_t)v448 < 6)
              v140 = v448;
            v141 = dword_20BA4C3EC[v140 - 1];
          }
          v142 = (unint64_t)(v134 - v137) > 5 || v138 - v139 < v141;
          v143 = v459;
          if (v142)
            v143 = 1;
          if (v143)
            v144 = v100;
          else
            v144 = v101;
          if (v143)
            v145 = (uint64_t *)(v100 + 24);
          else
            v145 = (uint64_t *)(v101 + 24);
          v450 = v145;
          v146 = sub_20B9A7C5C(8u);
          if (os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG))
          {
            v275 = sub_20B9498AC(v101);
            v276 = sub_20B9498AC(v100);
            if (v448 >= 1)
            {
              v350 = 6;
              if ((unint64_t)v448 < 6)
                v350 = v448;
              v277 = dword_20BA4C3EC[v350 - 1];
            }
            else
            {
              v277 = 0x7FFFFFFF;
            }
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "makeSegmentsExceptLast";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v275;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v276;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v277;
            _os_log_debug_impl(&dword_20B7F7000, v146, OS_LOG_TYPE_DEBUG, "[%s] best-analysis:%d top-analysis:%d threshold:%d", buf, 0x1Eu);
          }
          v147 = sub_20B9A7C5C(8u);
          if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
          {
            v278 = CFSTR("best");
            if (v450 == (uint64_t *)(v100 + 24))
              v278 = CFSTR("top");
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "makeSegmentsExceptLast";
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v278;
            _os_log_debug_impl(&dword_20B7F7000, v147, OS_LOG_TYPE_DEBUG, "[%s] using %@ segments as reference", buf, 0x16u);
          }
          sub_20B949984((uint64_t *)(v100 + 24), (uint64_t)"top segment");
          sub_20B949984((uint64_t *)(v101 + 24), (uint64_t)"best segment");
          v149 = *(_QWORD *)(v100 + 24);
          v148 = *(_QWORD *)(v100 + 32);
          if (v149 == v148)
            v150 = 0;
          else
            v150 = *(_QWORD *)(v100 + 24);
          v152 = *(_QWORD *)(v101 + 24);
          v151 = *(_QWORD *)(v101 + 32);
          if (v152 == v151)
            v153 = 0;
          else
            v153 = *(_QWORD *)(v101 + 24);
          v154 = *(_QWORD *)(v144 + 24);
          v155 = v450[1];
          if (v154 != v155)
          {
            v456 = 0;
            v156 = 0;
            v452 = 0;
            v157 = 0;
            v158 = 0;
            v159 = 0;
            v160 = 0xD37A6F4DE9BD37A7 * ((v155 - v154) >> 3);
            v445 = v101;
            v443 = v459 ^ 1;
            while (1)
            {
              v161 = v150 == 0;
              if (v150 && v159 < v157)
              {
                do
                {
                  if (v150 >= *(_QWORD *)(v454 + 32) - 184)
                    break;
                  v159 += *(unsigned __int16 *)(*(_QWORD *)(v150 + 104) - 10);
                  v150 += 184;
                }
                while (v159 < v157);
                v161 = 0;
              }
              v162 = v153 != 0;
              if (v153 && v158 < v157)
              {
                do
                {
                  if (v153 >= *(_QWORD *)(v445 + 32) - 184)
                    break;
                  v158 += *(unsigned __int16 *)(*(_QWORD *)(v153 + 104) - 10);
                  v153 += 184;
                }
                while (v158 < v157);
                v162 = 1;
              }
              v460 = *(unsigned __int16 *)(*(_QWORD *)(v154 + 184 * v156 + 104) - 10);
              if (v161)
              {
                v163 = 0;
                if (!v162)
                  goto LABEL_255;
              }
              else
              {
                v163 = *(unsigned __int16 *)(*(_QWORD *)(v150 + 104) - 10) == *(unsigned __int16 *)(*(_QWORD *)(v154 + 184 * v156 + 104) - 10);
                if (!v162)
                {
LABEL_255:
                  v164 = 0;
                  goto LABEL_258;
                }
              }
              v164 = *(unsigned __int16 *)(*(_QWORD *)(v153 + 104) - 10) == (_DWORD)v460;
LABEL_258:
              if (v156 != v160 - 1)
              {
                v166 = v150 != 0;
                if (v150)
                  v167 = v162;
                else
                  v167 = 0;
                if (!v167)
                  goto LABEL_282;
                if (v158 != v157)
                  v164 = 0;
                v166 = v159 == v157 && v163;
                if (v166 && v164)
                {
                  v168 = sub_20B9A7C5C(8u);
                  v169 = v160 + ~v156;
                  if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
                  {
                    v193 = *(_DWORD *)(v150 + 176);
                    v194 = *(_DWORD *)(v153 + 176);
                    v195 = 2;
                    if (v169 < 2)
                      v195 = v169;
                    v196 = dword_20BA4C404[v195];
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "shouldChooseTopSegment";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v193;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v194;
                    *(_WORD *)&buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v196;
                    _os_log_debug_impl(&dword_20B7F7000, v168, OS_LOG_TYPE_DEBUG, "[%s] topSegment:%d, bestSegment:%d, threshold:%d", buf, 0x1Eu);
                  }
                  if ((v452 & 1) == 0 && *(_QWORD *)v153 != *(_QWORD *)(v153 + 8))
                  {
                    v170 = 2;
                    if (v169 < 2)
                      v170 = v169;
                    if (*(_DWORD *)(v150 + 176) - *(_DWORD *)(v153 + 176) >= dword_20BA4C404[v170])
                    {
LABEL_280:
                      if (!v162)
                        goto LABEL_385;
                      v171 = 0;
LABEL_285:
                      v172 = sub_20B9A7C5C(8u);
                      if (os_log_type_enabled(v172, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136315650;
                        v188 = CFSTR("best");
                        if (v171)
                          v188 = CFSTR("top");
                        *(_QWORD *)&buf[4] = "makeSegmentsExceptLast";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v156;
                        *(_WORD *)&buf[22] = 2112;
                        *(_QWORD *)&buf[24] = v188;
                        _os_log_debug_impl(&dword_20B7F7000, v172, OS_LOG_TYPE_DEBUG, "[%s] segment[%zu]: from %@ segments", buf, 0x20u);
                      }
                      if (v171)
                        v173 = v150;
                      else
                        v173 = v153;
                      v174 = v476;
                      if (v476 >= v477)
                      {
                        v180 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v476 - v475) >> 3);
                        v181 = v180 + 1;
                        if (v180 + 1 > 0x1642C8590B21642)
                          sub_20B80CDD8();
                        if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3) > v181)
                          v181 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3);
                        if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v477 - v475) >> 3) >= 0xB21642C8590B21)
                          v182 = 0x1642C8590B21642;
                        else
                          v182 = v181;
                        *(_QWORD *)&buf[32] = &v477;
                        if (v182)
                          v182 = (unint64_t)sub_20B94E724(v182);
                        else
                          v183 = 0;
                        *(_QWORD *)buf = v182;
                        *(_QWORD *)&buf[8] = v182 + 184 * v180;
                        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                        *(_QWORD *)&buf[24] = v182 + 184 * v183;
                        sub_20B94EC08(*(uint64_t *)&buf[8], v173);
                        *(_QWORD *)&buf[16] += 184;
                        sub_20B94E76C(&v475, buf);
                        v175 = v476;
                        sub_20B94E908((uint64_t)buf);
                      }
                      else
                      {
                        sub_20B94EC08(v476, v173);
                        v175 = v174 + 184;
                      }
                      v176 = v460;
                      v476 = v175;
                      v452 |= v171;
                      goto LABEL_314;
                    }
                  }
                }
                else
                {
LABEL_282:
                  if (!v166)
                    goto LABEL_280;
                }
                if (v161)
                  goto LABEL_385;
                v171 = 1;
                goto LABEL_285;
              }
              if (v158 == v157)
              {
                v165 = v443;
                if (v153 != *(_QWORD *)(v445 + 32) - 184)
                  v165 = 0;
                HIDWORD(v456) = v165;
              }
              else
              {
                HIDWORD(v456) = 0;
              }
              v176 = v460;
              if (v159 == v157)
              {
                v177 = v150 == *(_QWORD *)(v454 + 32) - 184;
                if (v150 == *(_QWORD *)(v454 + 32) - 184)
                  goto LABEL_302;
              }
              else
              {
                v177 = 0;
              }
              if (HIDWORD(v456) && v150 < *(_QWORD *)(v454 + 32) - 184)
              {
                v159 += *(unsigned __int16 *)(*(_QWORD *)(v150 + 104) - 10);
                v150 += 184;
                if (v157 + v460 == v159)
                {
                  v178 = v476;
                  if (v476 >= v477)
                  {
                    v184 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v476 - v475) >> 3);
                    v185 = v184 + 1;
                    if (v184 + 1 > 0x1642C8590B21642)
                      sub_20B80CDD8();
                    if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3) > v185)
                      v185 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3);
                    if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v477 - v475) >> 3) >= 0xB21642C8590B21)
                      v186 = 0x1642C8590B21642;
                    else
                      v186 = v185;
                    *(_QWORD *)&buf[32] = &v477;
                    if (v186)
                      v186 = (unint64_t)sub_20B94E724(v186);
                    else
                      v187 = 0;
                    *(_QWORD *)buf = v186;
                    *(_QWORD *)&buf[8] = v186 + 184 * v184;
                    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                    *(_QWORD *)&buf[24] = v186 + 184 * v187;
                    sub_20B94EC08(*(uint64_t *)&buf[8], v153);
                    *(_QWORD *)&buf[16] += 184;
                    sub_20B94E76C(&v475, buf);
                    v179 = v476;
                    sub_20B94E908((uint64_t)buf);
                  }
                  else
                  {
                    sub_20B94EC08(v476, v153);
                    v179 = v178 + 184;
                  }
                  v476 = v179;
                  if (v150 >= *(_QWORD *)(v454 + 32) - 184)
                  {
                    v456 = 1;
                  }
                  else
                  {
                    LOBYTE(v456) = v157 + v460 == v159;
                    do
                    {
                      if (v179 >= v477)
                      {
                        v189 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v179 - v475) >> 3);
                        v190 = v189 + 1;
                        if (v189 + 1 > 0x1642C8590B21642)
                          sub_20B80CDD8();
                        if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3) > v190)
                          v190 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3);
                        if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v477 - v475) >> 3) >= 0xB21642C8590B21)
                          v191 = 0x1642C8590B21642;
                        else
                          v191 = v190;
                        *(_QWORD *)&buf[32] = &v477;
                        if (v191)
                          v191 = (unint64_t)sub_20B94E724(v191);
                        else
                          v192 = 0;
                        *(_QWORD *)buf = v191;
                        *(_QWORD *)&buf[8] = v191 + 184 * v189;
                        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                        *(_QWORD *)&buf[24] = v191 + 184 * v192;
                        sub_20B94EC08(*(uint64_t *)&buf[8], v150);
                        *(_QWORD *)&buf[16] += 184;
                        sub_20B94E76C(&v475, buf);
                        v179 = v476;
                        sub_20B94E908((uint64_t)buf);
                      }
                      else
                      {
                        sub_20B94EC08(v179, v150);
                        v179 += 184;
                      }
                      v476 = v179;
                      v150 += 184;
                    }
                    while (v150 < *(_QWORD *)(v454 + 32) - 184);
                    BYTE4(v456) = 0;
                  }
                }
                else
                {
                  LOBYTE(v456) = 0;
                }
                goto LABEL_314;
              }
LABEL_302:
              LOBYTE(v456) = v177;
LABEL_314:
              v157 += v176;
              ++v156;
              v154 = *v450;
              v160 = 0xD37A6F4DE9BD37A7 * ((v450[1] - *v450) >> 3);
              if (v156 >= v160)
                goto LABEL_385;
            }
          }
          if (v150)
          {
            if (v150 < v148 - 184)
            {
              v197 = v476;
              do
              {
                if (v197 >= v477)
                {
                  v198 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v197 - v475) >> 3);
                  v199 = v198 + 1;
                  if (v198 + 1 > 0x1642C8590B21642)
                    sub_20B80CDD8();
                  if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3) > v199)
                    v199 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3);
                  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v477 - v475) >> 3) >= 0xB21642C8590B21)
                    v200 = 0x1642C8590B21642;
                  else
                    v200 = v199;
                  *(_QWORD *)&buf[32] = &v477;
                  if (v200)
                    v200 = (unint64_t)sub_20B94E724(v200);
                  else
                    v201 = 0;
                  *(_QWORD *)buf = v200;
                  *(_QWORD *)&buf[8] = v200 + 184 * v198;
                  *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                  *(_QWORD *)&buf[24] = v200 + 184 * v201;
                  sub_20B94EC08(*(uint64_t *)&buf[8], v149);
                  *(_QWORD *)&buf[16] += 184;
                  sub_20B94E76C(&v475, buf);
                  v197 = v476;
                  sub_20B94E908((uint64_t)buf);
                }
                else
                {
                  sub_20B94EC08(v197, v149);
                  v197 += 184;
                }
                v476 = v197;
                v149 += 184;
                v456 = 1;
              }
              while (v149 < *(_QWORD *)(v454 + 32) - 184);
              goto LABEL_385;
            }
            goto LABEL_366;
          }
          if (v153)
          {
            if (v153 < v151 - 184)
            {
              v202 = v476;
              do
              {
                if (v202 >= v477)
                {
                  v204 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v202 - v475) >> 3);
                  v205 = v204 + 1;
                  if (v204 + 1 > 0x1642C8590B21642)
                    sub_20B80CDD8();
                  if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3) > v205)
                    v205 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(v477 - v475) >> 3);
                  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v477 - v475) >> 3) >= 0xB21642C8590B21)
                    v206 = 0x1642C8590B21642;
                  else
                    v206 = v205;
                  *(_QWORD *)&buf[32] = &v477;
                  v203 = v101;
                  if (v206)
                    v206 = (unint64_t)sub_20B94E724(v206);
                  else
                    v207 = 0;
                  *(_QWORD *)buf = v206;
                  *(_QWORD *)&buf[8] = v206 + 184 * v204;
                  *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                  *(_QWORD *)&buf[24] = v206 + 184 * v207;
                  sub_20B94EC08(*(uint64_t *)&buf[8], v152);
                  *(_QWORD *)&buf[16] += 184;
                  sub_20B94E76C(&v475, buf);
                  v202 = v476;
                  sub_20B94E908((uint64_t)buf);
                }
                else
                {
                  sub_20B94EC08(v202, v152);
                  v202 += 184;
                  v203 = v101;
                }
                v476 = v202;
                v152 += 184;
                v456 = 0x100000000;
              }
              while (v152 < *(_QWORD *)(v203 + 32) - 184);
              goto LABEL_385;
            }
            goto LABEL_519;
          }
LABEL_384:
          v456 = 0;
          goto LABEL_385;
        }
      }
      else
      {
        v76 = sub_20B8FD978(v7);
        if (v76 != -1)
        {
          v77 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v76);
          if (v77)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 88))(v77))
              v78 = 0;
            else
              v78 = v77;
            v465 = v78;
            goto LABEL_119;
          }
        }
      }
LABEL_118:
      v465 = 0;
      goto LABEL_119;
    }
  }
LABEL_72:
  v53 = (uint64_t)a1[2];
  if (!v53 || (sub_20B949FFC((uint64_t *)buf, (uint64_t)a1, v53, (uint64_t *)a2), (v54 = *(_QWORD *)buf) == 0))
  {
LABEL_78:
    v459 = 1;
    goto LABEL_79;
  }
  v55 = sub_20B8CD218((_QWORD *)(v7 + 8), buf);
  if (!v55
    || (v56 = v55[3], v56 == (uint64_t *)-1)
    || (v57 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * (_QWORD)v56),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 408))(v57)))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
    goto LABEL_78;
  }
  v118 = sub_20B9A7C5C(8u);
  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "stabilizeCandidates";
    _os_log_debug_impl(&dword_20B7F7000, v118, OS_LOG_TYPE_DEBUG, "[%s] candidate has a punctuation, using best analysis", buf, 0xCu);
  }
  v484 = v54;
  sub_20B94A598(v7, &v484);
  v119 = v484;
  v484 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
  return 1;
}

void sub_20B94DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v63;
  uint64_t v64;

  __cxa_guard_abort(&qword_25472BBC8);
  sub_20B87E150((const void **)&a52, 0);
  if (a62 < 0)
    operator delete(__p);
  a35 = (uint64_t)&a38;
  sub_20B8CC684((void ***)&a35);
  v63 = a41;
  a41 = 0;
  if (v63)
    sub_20B8CC624((uint64_t)&a41, v63);
  v64 = a42;
  a42 = 0;
  if (v64)
    sub_20B8CC624((uint64_t)&a42, v64);
  if (a49 < 0)
    operator delete(a44);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B94E530(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x199999999999999ALL)
      sub_20B80CDD8();
    result = sub_20B94E5D4(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 10 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_20B94E5B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B94E5D4(unint64_t a1)
{
  if (a1 >= 0x199999999999999ALL)
    sub_20B800BC0();
  return operator new(10 * a1);
}

_QWORD *sub_20B94E618(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B94E6D4(result, a4);
    v7 = v6[1];
    if (a2 != a3)
    {
      v8 = 0;
      do
      {
        result = (_QWORD *)sub_20B94EC08(v7 + v8, a2 + v8);
        v8 += 184;
      }
      while (a2 + v8 != a3);
      v7 += v8;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_20B94E69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8CC684(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B94E6D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1642C8590B21643)
    sub_20B80CDD8();
  result = (char *)sub_20B94E724(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

void *sub_20B94E724(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643)
    sub_20B800BC0();
  return operator new(184 * a1);
}

uint64_t *sub_20B94E76C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 184) = 0;
      *(_QWORD *)(v6 - 176) = 0;
      *(_QWORD *)(v6 - 168) = 0;
      *(_OWORD *)(v6 - 184) = *(_OWORD *)(v2 + v5 - 184);
      *(_QWORD *)(v6 - 168) = *(_QWORD *)(v2 + v5 - 168);
      *(_QWORD *)(v7 - 184) = 0;
      *(_QWORD *)(v7 - 176) = 0;
      *(_QWORD *)(v7 - 168) = 0;
      *(_QWORD *)(v6 - 160) = 0;
      *(_QWORD *)(v6 - 152) = 0;
      *(_QWORD *)(v6 - 144) = 0;
      *(_OWORD *)(v6 - 160) = *(_OWORD *)(v2 + v5 - 160);
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v2 + v5 - 144);
      *(_QWORD *)(v7 - 160) = 0;
      *(_QWORD *)(v7 - 152) = 0;
      *(_QWORD *)(v7 - 144) = 0;
      *(_QWORD *)(v6 - 136) = 0;
      *(_QWORD *)(v6 - 128) = 0;
      *(_QWORD *)(v6 - 120) = 0;
      *(_OWORD *)(v6 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(_QWORD *)(v6 - 120) = *(_QWORD *)(v2 + v5 - 120);
      *(_QWORD *)(v7 - 136) = 0;
      *(_QWORD *)(v7 - 128) = 0;
      *(_QWORD *)(v7 - 120) = 0;
      *(_QWORD *)(v6 - 112) = 0;
      *(_QWORD *)(v6 - 104) = 0;
      *(_QWORD *)(v6 - 96) = 0;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v6 - 96) = *(_QWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v7 - 112) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v6 - 88) = 0;
      *(_QWORD *)(v6 - 80) = 0;
      *(_QWORD *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(_QWORD *)(v6 - 72) = *(_QWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      v8 = *(_QWORD *)(v2 + v5 - 64);
      *(_WORD *)(v6 - 56) = *(_WORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 64) = v8;
      v9 = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v6 - 48) = v9;
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 40) = 0;
      v10 = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v4 + v5 - 32) = v10;
      v11 = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 24) = v11;
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      if (v11)
      {
        v12 = *(_QWORD *)(v10 + 8);
        v13 = *(_QWORD *)(v6 - 40);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13)
            v12 %= v13;
        }
        else
        {
          v12 &= v13 - 1;
        }
        *(_QWORD *)(v9 + 8 * v12) = v4 + v5 - 32;
        *(_QWORD *)(v2 + v5 - 32) = 0;
        *(_QWORD *)(v2 + v5 - 24) = 0;
      }
      v14 = *(_DWORD *)(v7 - 8);
      *(_BYTE *)(v6 - 4) = *(_BYTE *)(v7 - 4);
      *(_DWORD *)(v6 - 8) = v14;
      v5 -= 184;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v15 = *result;
  *result = v4;
  a2[1] = v15;
  v16 = result[1];
  result[1] = a2[2];
  a2[2] = v16;
  v17 = result[2];
  result[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B94E908(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    sub_20B8CC6F4(i - 184);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_20B94E954(uint64_t **result, uint64_t **a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v5 = a3;
  if (result != a2)
  {
    v4 = (uint64_t)result;
    do
    {
      result = sub_20B94E9A0(&v5, v4);
      v4 += 184;
    }
    while ((uint64_t **)v4 != a2);
  }
  return result;
}

uint64_t **sub_20B94E9A0(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = (unint64_t *)(*a1 + 2);
  if (v5 >= *v6)
  {
    v8 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v5 - *v4) >> 3);
    if (v8 + 1 > 0x1642C8590B21642)
      sub_20B80CDD8();
    v9 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*v6 - *v4) >> 3);
    if (v9 <= v8 + 1)
      v9 = v8 + 1;
    if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*v6 - *v4) >> 3) >= 0xB21642C8590B21)
      v10 = 0x1642C8590B21642;
    else
      v10 = v9;
    v17 = v6;
    if (v10)
      v10 = (unint64_t)sub_20B94E724(v10);
    else
      v11 = 0;
    v13 = v10;
    v14 = v10 + 184 * v8;
    v16 = v10 + 184 * v11;
    sub_20B94EC08(v14, a2);
    v15 = v14 + 184;
    sub_20B94E76C(v4, &v13);
    v7 = v4[1];
    sub_20B94E908((uint64_t)&v13);
  }
  else
  {
    sub_20B94EC08((*a1)[1], a2);
    v7 = v5 + 184;
    v4[1] = v5 + 184;
  }
  v4[1] = v7;
  return a1;
}

void sub_20B94EAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B94E908((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B94EAF0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v2 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1642C8590B21642)
    sub_20B80CDD8();
  v6 = a1 + 2;
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21)
    v7 = 0x1642C8590B21642;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)sub_20B94E724(v7);
  else
    v8 = 0;
  v11 = v7;
  v12 = v7 + 184 * v2;
  v14 = v7 + 184 * v8;
  sub_20B94EC08(v12, a2);
  v13 = v12 + 184;
  sub_20B94E76C(a1, &v11);
  v9 = a1[1];
  sub_20B94E908((uint64_t)&v11);
  return v9;
}

void sub_20B94EBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B94E908((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B94EC08(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int v26;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B94E530((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 1);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 1);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v4 = a1 + 96;
  *(_QWORD *)(a1 + 112) = 0;
  sub_20B94E530((_QWORD *)(a1 + 96), *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 1));
  v5 = *(_QWORD *)(a2 + 120);
  v6 = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = 0u;
  v7 = (uint64_t *)(a1 + 136);
  *(_WORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_20B828960(a1 + 136, *(_QWORD *)(a2 + 144));
  v8 = *(_QWORD **)(a2 + 152);
  if (v8)
  {
    v9 = (_QWORD *)(a1 + 152);
    v10 = *(_QWORD *)(a1 + 144);
    do
    {
      v11 = v8[2];
      if (v10)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v4 = v8[2];
          if (v10 <= v11)
            v4 = v11 % v10;
        }
        else
        {
          v4 = v11 & (v10 - 1);
        }
        v13 = *(_QWORD **)(*v7 + 8 * v4);
        if (v13)
        {
          for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
          {
            v15 = i[1];
            if (v15 == v11)
            {
              if (i[2] == v11)
                goto LABEL_41;
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v10)
                  v15 %= v10;
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v4)
                break;
            }
          }
        }
      }
      v16 = operator new(0x20uLL);
      *v16 = 0;
      v16[1] = v11;
      *((_OWORD *)v16 + 1) = *((_OWORD *)v8 + 1);
      v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
      v18 = *(float *)(a1 + 168);
      if (!v10 || (float)(v18 * (float)v10) < v17)
      {
        v19 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v19 = 1;
        v20 = v19 | (2 * v10);
        v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        sub_20B828960(a1 + 136, v22);
        v10 = *(_QWORD *)(a1 + 144);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v10 <= v11)
            v4 = v11 % v10;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v10 - 1) & v11;
        }
      }
      v23 = *v7;
      v24 = *(_QWORD **)(*v7 + 8 * v4);
      if (v24)
      {
        *v16 = *v24;
      }
      else
      {
        *v16 = *v9;
        *v9 = v16;
        *(_QWORD *)(v23 + 8 * v4) = v9;
        if (!*v16)
          goto LABEL_40;
        v25 = *(_QWORD *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v25 >= v10)
            v25 %= v10;
        }
        else
        {
          v25 &= v10 - 1;
        }
        v24 = (_QWORD *)(*v7 + 8 * v25);
      }
      *v24 = v16;
LABEL_40:
      ++*(_QWORD *)(a1 + 160);
LABEL_41:
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  v26 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v26;
  return a1;
}

void sub_20B94EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  sub_20B84055C(v13);
  v15 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 104) = v15;
    operator delete(v15);
  }
  v16 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 80) = v16;
    operator delete(v16);
  }
  v17 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v12 + 56) = v17;
    operator delete(v17);
  }
  v18 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 32) = v18;
    operator delete(v18);
  }
  v19 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B94EFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20B94EC08(a3 + v6, a1 + v6);
      v6 += 184;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20B94F034(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 184;
    do
    {
      sub_20B8CC6F4(v4 + v2);
      v2 -= 184;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B94F058(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  const void *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  unint64_t v12;
  BOOL v14;

  if (a1 == a2)
    return 0;
  v5 = a1;
  v6 = 0;
  v7 = 0x7FFFFFFF;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 408))(*v5) != 1)
    {
      v8 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 544))(*v5);
      v10 = v9;
      v11 = *(const void **)(a3 + 72);
      v12 = v11 ? *(unsigned __int16 *)(*(_QWORD *)(a3 + 104) - 6) : 0;
      if (v7 > (*(int (**)(_QWORD))(*(_QWORD *)*v5 + 112))(*v5) && v10 >= v12)
      {
        if (v8)
          v14 = 1;
        else
          v14 = v12 == 0;
        if (v14 && !memcmp(v8, v11, 2 * v12))
        {
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 112))(*v5);
          v6 = *v5;
        }
      }
    }
    ++v5;
  }
  while (v5 != a2);
  return v6;
}

uint64_t sub_20B94F15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = a4;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_24C467B48;
  v5 = a1 + 168;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  sub_20B9246B8((_QWORD *)(a1 + 200), a2);
  sub_20B873120(v5, 0xAuLL);
  return a1;
}

void sub_20B94F1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  sub_20B924684((const void **)(v2 + 208), 0);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 176) = v5;
    operator delete(v5);
  }
  sub_20B828E34((void ***)va);
  sub_20B9063DC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B94F234(uint64_t a1)
{
  sub_20B828E74((uint64_t *)(a1 + 144));
  *(_DWORD *)(a1 + 192) = 0;
  return sub_20B882F18((uint64_t *)a1);
}

void sub_20B94F260(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v6 = (_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 56))
  {
    if (*(_DWORD *)(a2 + 64) == 1
      || (v7 = *(_QWORD *)(a1 + 88), v7 != *(_QWORD *)(a1 + 80)) && *(_DWORD *)(v7 - 4) == 2)
    {
      sub_20B95160C((uint64_t *)(a1 + 144));
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 64);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      *(_DWORD *)(a1 + 192) = 0;
      sub_20B882F18((uint64_t *)a1);
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v8 - *(_QWORD *)(a1 + 24)) >= 5)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 88) - v9) >> 3) >= 2)
    {
      v10 = *(_DWORD *)(a1 + 192);
      if (v10)
      {
        if (!*(_BYTE *)(v9 + 8 * ((*(_QWORD *)(a1 + 88) - v9) >> 3) - 8))
          *(_DWORD *)(v8 - 4) = v10;
      }
    }
  }
  sub_20B88318C((uint64_t *)a1, a2, a3);
}

uint64_t sub_20B94F344()
{
  char *v0;
  char *v1;
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t i;
  void **v8;
  void *__p[2];
  char v10;
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[3];
  int v77;
  _QWORD v78[3];
  int v79;
  _QWORD v80[3];
  int v81;
  _QWORD v82[3];
  int v83;
  _QWORD v84[3];
  int v85;
  _QWORD v86[3];
  int v87;
  _QWORD v88[3];
  int v89;
  _QWORD v90[3];
  int v91;
  _QWORD v92[3];
  int v93;
  _QWORD v94[3];
  int v95;
  _QWORD v96[3];
  int v97;
  _QWORD v98[3];
  int v99;
  _QWORD v100[3];
  int v101;
  _QWORD v102[3];
  int v103;
  _QWORD v104[3];
  int v105;
  _QWORD v106[3];
  int v107;
  _QWORD v108[3];
  int v109;
  _QWORD v110[3];
  int v111;
  _QWORD v112[3];
  int v113;
  _QWORD v114[3];
  int v115;
  _QWORD v116[3];
  int v117;
  _QWORD v118[3];
  int v119;
  _QWORD v120[3];
  int v121;
  _QWORD v122[3];
  int v123;
  _QWORD v124[3];
  int v125;
  _QWORD v126[3];
  int v127;
  _QWORD v128[3];
  int v129;
  _QWORD v130[3];
  int v131;
  _QWORD v132[3];
  int v133;
  _QWORD v134[3];
  int v135;
  _QWORD v136[3];
  int v137;
  _QWORD v138[3];
  int v139;
  _QWORD v140[3];
  int v141;
  _QWORD v142[3];
  int v143;
  _QWORD v144[3];
  int v145;
  _QWORD v146[3];
  int v147;
  _QWORD v148[3];
  int v149;
  _QWORD v150[3];
  int v151;
  _QWORD v152[3];
  int v153;
  _QWORD v154[3];
  int v155;
  _QWORD v156[3];
  int v157;
  _QWORD v158[3];
  int v159;
  _QWORD v160[3];
  int v161;
  _QWORD v162[3];
  int v163;
  _QWORD v164[3];
  int v165;
  _QWORD v166[3];
  int v167;
  _QWORD v168[3];
  int v169;
  _QWORD v170[3];
  int v171;
  _QWORD v172[3];
  int v173;
  _QWORD v174[3];
  int v175;
  _QWORD v176[3];
  int v177;
  _QWORD v178[3];
  int v179;
  _QWORD v180[3];
  int v181;
  _QWORD v182[3];
  int v183;
  _QWORD v184[3];
  int v185;
  _QWORD v186[3];
  int v187;
  _QWORD v188[3];
  int v189;
  _QWORD v190[3];
  int v191;
  _QWORD v192[3];
  int v193;
  _QWORD v194[3];
  int v195;
  _QWORD v196[3];
  int v197;
  _QWORD v198[3];
  int v199;
  _QWORD v200[3];
  int v201;
  _QWORD v202[3];
  int v203;
  _QWORD v204[3];
  int v205;
  _QWORD v206[3];
  int v207;
  _QWORD v208[3];
  int v209;
  _QWORD v210[3];
  int v211;
  _QWORD v212[3];
  int v213;
  _QWORD v214[3];
  int v215;
  _QWORD v216[3];
  int v217;
  _QWORD v218[3];
  int v219;
  _QWORD v220[3];
  int v221;
  _QWORD v222[3];
  int v223;
  _QWORD v224[3];
  int v225;
  _QWORD v226[3];
  int v227;
  _QWORD v228[3];
  int v229;
  _QWORD v230[3];
  int v231;
  _QWORD v232[3];
  int v233;
  _QWORD v234[3];
  int v235;
  _QWORD v236[3];
  int v237;
  _QWORD v238[3];
  int v239;
  _QWORD v240[3];
  int v241;
  _QWORD v242[3];
  int v243;
  _QWORD v244[3];
  int v245;
  _QWORD v246[3];
  int v247;
  _QWORD v248[3];
  int v249;
  _QWORD v250[3];
  int v251;
  _QWORD v252[3];
  int v253;
  _QWORD v254[3];
  int v255;
  _QWORD v256[3];
  int v257;
  _QWORD v258[3];
  int v259;
  _QWORD v260[3];
  int v261;
  _QWORD v262[3];
  int v263;
  _QWORD v264[3];
  int v265;
  _QWORD v266[3];
  int v267;
  _QWORD v268[3];
  int v269;
  _QWORD v270[3];
  int v271;
  _QWORD v272[3];
  int v273;
  _QWORD v274[3];
  int v275;
  _QWORD v276[3];
  int v277;
  _QWORD v278[3];
  int v279;
  _QWORD v280[3];
  int v281;
  _QWORD v282[3];
  int v283;
  _QWORD v284[3];
  int v285;
  _QWORD v286[3];
  int v287;
  _QWORD v288[3];
  int v289;
  _QWORD v290[3];
  int v291;
  _QWORD v292[3];
  int v293;
  _QWORD v294[3];
  int v295;
  _QWORD v296[3];
  int v297;
  _QWORD v298[3];
  int v299;
  _QWORD v300[3];
  int v301;
  _QWORD v302[3];
  int v303;
  _QWORD v304[3];
  int v305;
  _QWORD v306[3];
  int v307;
  _QWORD v308[3];
  int v309;
  _QWORD v310[3];
  int v311;
  _QWORD v312[3];
  int v313;
  _QWORD v314[3];
  int v315;
  _QWORD v316[3];
  int v317;
  _QWORD v318[3];
  int v319;
  _QWORD v320[3];
  int v321;
  _QWORD v322[3];
  int v323;
  _QWORD v324[3];
  int v325;
  _QWORD v326[3];
  int v327;
  _QWORD v328[3];
  int v329;
  _QWORD v330[3];
  int v331;
  _QWORD v332[3];
  int v333;
  _QWORD v334[3];
  int v335;
  _QWORD v336[3];
  int v337;
  _QWORD v338[3];
  int v339;
  _QWORD v340[3];
  int v341;
  _QWORD v342[3];
  int v343;
  _QWORD v344[3];
  int v345;
  _QWORD v346[3];
  int v347;
  _QWORD v348[3];
  int v349;
  _QWORD v350[3];
  int v351;
  _QWORD v352[3];
  int v353;
  _QWORD v354[3];
  int v355;
  _QWORD v356[3];
  int v357;
  _QWORD v358[3];
  int v359;
  _QWORD v360[3];
  int v361;
  _QWORD v362[3];
  int v363;
  _QWORD v364[3];
  int v365;
  _QWORD v366[3];
  int v367;
  _QWORD v368[3];
  int v369;
  _QWORD v370[3];
  int v371;
  _QWORD v372[3];
  int v373;
  _QWORD v374[3];
  int v375;
  _QWORD v376[3];
  int v377;
  _QWORD v378[3];
  int v379;
  _QWORD v380[3];
  int v381;
  _QWORD v382[3];
  int v383;
  _QWORD v384[3];
  int v385;
  _QWORD v386[3];
  int v387;
  _QWORD v388[3];
  int v389;
  _QWORD v390[3];
  int v391;
  _QWORD v392[3];
  int v393;
  _QWORD v394[3];
  int v395;
  _QWORD v396[3];
  int v397;
  _QWORD v398[3];
  int v399;
  _QWORD v400[3];
  int v401;
  _QWORD v402[3];
  int v403;
  _QWORD v404[3];
  int v405;
  _QWORD v406[3];
  int v407;
  _QWORD v408[3];
  int v409;
  uint64_t v410;

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v410 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25472BBE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472BBE0))
  {
    sub_20B80BBD0(__p, "gh");
    v11 = 1;
    sub_20B80BBD0(v12, "gy");
    v13 = 2;
    sub_20B80BBD0(v14, "gt");
    v15 = 3;
    sub_20B80BBD0(v16, "fg");
    v17 = 4;
    sub_20B80BBD0(v18, "ft");
    v19 = 5;
    sub_20B80BBD0(v20, "fr");
    v21 = 6;
    sub_20B80BBD0(v22, "dr");
    v23 = 7;
    sub_20B80BBD0(v24, "de");
    v25 = 8;
    sub_20B80BBD0(v26, "se");
    v27 = 9;
    sub_20B80BBD0(v28, "sw");
    v29 = 10;
    sub_20B80BBD0(v30, "aw");
    v31 = 11;
    sub_20B80BBD0(v32, "aq");
    v33 = 12;
    sub_20B80BBD0(v34, "ws");
    v35 = 13;
    sub_20B80BBD0(v36, "ed");
    v37 = 14;
    sub_20B80BBD0(v38, "rd");
    v39 = 15;
    sub_20B80BBD0(v40, "rf");
    v41 = 16;
    sub_20B80BBD0(v42, "tf");
    v43 = 17;
    sub_20B80BBD0(v44, "tg");
    v45 = 18;
    sub_20B80BBD0(v46, "yg");
    v47 = 19;
    sub_20B80BBD0(v48, "yh");
    v49 = 20;
    sub_20B80BBD0(v50, "yu");
    v51 = 21;
    sub_20B80BBD0(v52, "uh");
    v53 = 22;
    sub_20B80BBD0(v54, "uj");
    v55 = 23;
    sub_20B80BBD0(v56, "iu");
    v57 = 24;
    sub_20B80BBD0(v58, "ij");
    v59 = 25;
    sub_20B80BBD0(v60, "io");
    v61 = 26;
    sub_20B80BBD0(v62, "oi");
    v63 = 27;
    sub_20B80BBD0(v64, "ik");
    v65 = 28;
    sub_20B80BBD0(v66, "ju");
    v67 = 29;
    sub_20B80BBD0(v68, "hu");
    v69 = 30;
    sub_20B80BBD0(v70, "hy");
    v71 = 31;
    sub_20B80BBD0(v72, "gf");
    v73 = 32;
    sub_20B80BBD0(v74, "fd");
    v75 = 33;
    sub_20B80BBD0(v76, "df");
    v77 = 34;
    sub_20B80BBD0(v78, "ds");
    v79 = 35;
    sub_20B80BBD0(v80, "er");
    v81 = 36;
    sub_20B80BBD0(v82, "xc");
    v83 = 37;
    sub_20B80BBD0(v84, "ty");
    v85 = 38;
    sub_20B80BBD0(v86, "yt");
    v87 = 39;
    sub_20B80BBD0(v88, "uy");
    v89 = 40;
    sub_20B80BBD0(v90, "ui");
    v91 = 41;
    sub_20B80BBD0(v92, "tr");
    v93 = 42;
    sub_20B80BBD0(v94, "rt");
    v95 = 43;
    sub_20B80BBD0(v96, "re");
    v97 = 44;
    sub_20B80BBD0(v98, "ew");
    v99 = 45;
    sub_20B80BBD0(v100, "es");
    v101 = 46;
    sub_20B80BBD0(v102, "sd");
    v103 = 47;
    sub_20B80BBD0(v104, "xd");
    v105 = 48;
    sub_20B80BBD0(v106, "xz");
    v107 = 49;
    sub_20B80BBD0(v108, "cx");
    v109 = 50;
    sub_20B80BBD0(v110, "cf");
    v111 = 51;
    sub_20B80BBD0(v112, "fc");
    v113 = 52;
    sub_20B80BBD0(v114, "gv");
    v115 = 53;
    sub_20B80BBD0(v116, "hg");
    v117 = 54;
    sub_20B80BBD0(v118, "hj");
    v119 = 55;
    sub_20B80BBD0(v120, "jh");
    v121 = 56;
    sub_20B80BBD0(v122, "hb");
    v123 = 57;
    sub_20B80BBD0(v124, "bn");
    v125 = 58;
    sub_20B80BBD0(v126, "nb");
    v127 = 59;
    sub_20B80BBD0(v128, "bh");
    v129 = 60;
    sub_20B80BBD0(v130, "sa");
    v131 = 61;
    sub_20B80BBD0(v132, "as");
    v133 = 62;
    sub_20B80BBD0(v134, "vg");
    v135 = 63;
    sub_20B80BBD0(v136, "vb");
    v137 = 64;
    sub_20B80BBD0(v138, "we");
    v139 = 65;
    sub_20B80BBD0(v140, "sz");
    v141 = 66;
    sub_20B80BBD0(v142, "zs");
    v143 = 67;
    sub_20B80BBD0(v144, "cv");
    v145 = 68;
    sub_20B80BBD0(v146, "vc");
    v147 = 69;
    sub_20B80BBD0(v148, "bv");
    v149 = 70;
    sub_20B80BBD0(v150, "dx");
    v151 = 71;
    sub_20B80BBD0(v152, "op");
    v153 = 72;
    sub_20B80BBD0(v154, "lo");
    v155 = 73;
    sub_20B80BBD0(v156, "lk");
    v157 = 74;
    sub_20B80BBD0(v158, "kl");
    v159 = 75;
    sub_20B80BBD0(v160, "km");
    v161 = 76;
    sub_20B80BBD0(v162, "mn");
    v163 = 77;
    sub_20B80BBD0(v164, "nm");
    v165 = 78;
    sub_20B80BBD0(v166, "zx");
    v167 = 79;
    sub_20B80BBD0(v168, "ok");
    v169 = 80;
    sub_20B80BBD0(v170, "ko");
    v171 = 81;
    sub_20B80BBD0(v172, "kj");
    v173 = 82;
    sub_20B80BBD0(v174, "jk");
    v175 = 83;
    sub_20B80BBD0(v176, "jn");
    v177 = 84;
    sub_20B80BBD0(v178, "nj");
    v179 = 85;
    sub_20B80BBD0(v180, "az");
    v181 = 86;
    sub_20B80BBD0(v182, "ji");
    v183 = 87;
    sub_20B80BBD0(v184, "po");
    v185 = 88;
    sub_20B80BBD0(v186, "mk");
    v187 = 89;
    sub_20B80BBD0(v188, "wq");
    v189 = 90;
    sub_20B80BBD0(v190, "qw");
    v191 = 91;
    sub_20B80BBD0(v192, "ol");
    v193 = 92;
    sub_20B80BBD0(v194, "qa");
    v195 = 93;
    sub_20B80BBD0(v196, "ki");
    v197 = 94;
    sub_20B80BBD0(v198, "wa");
    v199 = 95;
    sub_20B80BBD0(v200, "za");
    v201 = 96;
    sub_20B80BBD0(v202, "lp");
    v203 = 97;
    sub_20B80BBD0(v204, "ml");
    v205 = 98;
    sub_20B80BBD0(v206, "lm");
    v207 = 99;
    sub_20B80BBD0(v208, "pl");
    v209 = 100;
    sub_20B80BBD0(v210, "GH");
    v211 = 101;
    sub_20B80BBD0(v212, "GY");
    v213 = 102;
    sub_20B80BBD0(v214, "GT");
    v215 = 103;
    sub_20B80BBD0(v216, "FG");
    v217 = 104;
    sub_20B80BBD0(v218, "FT");
    v219 = 105;
    sub_20B80BBD0(v220, "FR");
    v221 = 106;
    sub_20B80BBD0(v222, "DR");
    v223 = 107;
    sub_20B80BBD0(v224, "DE");
    v225 = 108;
    sub_20B80BBD0(v226, "SE");
    v227 = 109;
    sub_20B80BBD0(v228, "SW");
    v229 = 110;
    sub_20B80BBD0(v230, "AW");
    v231 = 111;
    sub_20B80BBD0(v232, "AQ");
    v233 = 112;
    sub_20B80BBD0(v234, "WS");
    v235 = 113;
    sub_20B80BBD0(v236, "ED");
    v237 = 114;
    sub_20B80BBD0(v238, "RD");
    v239 = 115;
    sub_20B80BBD0(v240, "RF");
    v241 = 116;
    sub_20B80BBD0(v242, "TF");
    v243 = 117;
    sub_20B80BBD0(v244, "TG");
    v245 = 118;
    sub_20B80BBD0(v246, "YG");
    v247 = 119;
    sub_20B80BBD0(v248, "YH");
    v249 = 120;
    sub_20B80BBD0(v250, "YU");
    v251 = 121;
    sub_20B80BBD0(v252, "UH");
    v253 = 122;
    sub_20B80BBD0(v254, "UJ");
    v255 = 123;
    sub_20B80BBD0(v256, "IU");
    v257 = 124;
    sub_20B80BBD0(v258, "IJ");
    v259 = 125;
    sub_20B80BBD0(v260, "IO");
    v261 = 126;
    sub_20B80BBD0(v262, "OI");
    v263 = 127;
    sub_20B80BBD0(v264, "IK");
    v265 = 128;
    sub_20B80BBD0(v266, "JU");
    v267 = 129;
    sub_20B80BBD0(v268, "HU");
    v269 = 130;
    sub_20B80BBD0(v270, "HY");
    v271 = 131;
    sub_20B80BBD0(v272, "GF");
    v273 = 132;
    sub_20B80BBD0(v274, "FD");
    v275 = 133;
    sub_20B80BBD0(v276, "DF");
    v277 = 134;
    sub_20B80BBD0(v278, "DS");
    v279 = 135;
    sub_20B80BBD0(v280, "ER");
    v281 = 136;
    sub_20B80BBD0(v282, "XC");
    v283 = 137;
    sub_20B80BBD0(v284, "TY");
    v285 = 138;
    sub_20B80BBD0(v286, "YT");
    v287 = 139;
    sub_20B80BBD0(v288, "UY");
    v289 = 140;
    sub_20B80BBD0(v290, "UI");
    v291 = 141;
    sub_20B80BBD0(v292, "TR");
    v293 = 142;
    sub_20B80BBD0(v294, "RT");
    v295 = 143;
    sub_20B80BBD0(v296, "RE");
    v297 = 144;
    sub_20B80BBD0(v298, "EW");
    v299 = 145;
    sub_20B80BBD0(v300, "ES");
    v301 = 146;
    sub_20B80BBD0(v302, "SD");
    v303 = 147;
    sub_20B80BBD0(v304, "XD");
    v305 = 148;
    sub_20B80BBD0(v306, "XZ");
    v307 = 149;
    sub_20B80BBD0(v308, "CX");
    v309 = 150;
    sub_20B80BBD0(v310, "CF");
    v311 = 151;
    sub_20B80BBD0(v312, "FC");
    v313 = 152;
    sub_20B80BBD0(v314, "GV");
    v315 = 153;
    sub_20B80BBD0(v316, "HG");
    v317 = 154;
    sub_20B80BBD0(v318, "HJ");
    v319 = 155;
    sub_20B80BBD0(v320, "JH");
    v321 = 156;
    sub_20B80BBD0(v322, "HB");
    v323 = 157;
    sub_20B80BBD0(v324, "BN");
    v325 = 158;
    sub_20B80BBD0(v326, "NB");
    v327 = 159;
    sub_20B80BBD0(v328, "BH");
    v329 = 160;
    sub_20B80BBD0(v330, "SA");
    v331 = 161;
    sub_20B80BBD0(v332, "AS");
    v333 = 162;
    sub_20B80BBD0(v334, "VG");
    v335 = 163;
    sub_20B80BBD0(v336, "VB");
    v337 = 164;
    sub_20B80BBD0(v338, "WE");
    v339 = 165;
    sub_20B80BBD0(v340, "SZ");
    v341 = 166;
    sub_20B80BBD0(v342, "ZS");
    v343 = 167;
    sub_20B80BBD0(v344, "CV");
    v345 = 168;
    sub_20B80BBD0(v346, "VC");
    v347 = 169;
    sub_20B80BBD0(v348, "BV");
    v349 = 170;
    sub_20B80BBD0(v350, "DX");
    v351 = 171;
    sub_20B80BBD0(v352, "OP");
    v353 = 172;
    sub_20B80BBD0(v354, "LO");
    v355 = 173;
    sub_20B80BBD0(v356, "LK");
    v357 = 174;
    sub_20B80BBD0(v358, "KL");
    v359 = 175;
    sub_20B80BBD0(v360, "KM");
    v361 = 176;
    sub_20B80BBD0(v362, "MN");
    v363 = 177;
    sub_20B80BBD0(v364, "NM");
    v365 = 178;
    sub_20B80BBD0(v366, "ZX");
    v367 = 179;
    sub_20B80BBD0(v368, "OK");
    v369 = 180;
    sub_20B80BBD0(v370, "KO");
    v371 = 181;
    sub_20B80BBD0(v372, "KJ");
    v373 = 182;
    sub_20B80BBD0(v374, "JK");
    v375 = 183;
    sub_20B80BBD0(v376, "JN");
    v377 = 184;
    sub_20B80BBD0(v378, "NJ");
    v379 = 185;
    sub_20B80BBD0(v380, "AZ");
    v381 = 186;
    sub_20B80BBD0(v382, "JI");
    v383 = 187;
    sub_20B80BBD0(v384, "PO");
    v385 = 188;
    sub_20B80BBD0(v386, "MK");
    v387 = 189;
    sub_20B80BBD0(v388, "WQ");
    v389 = 190;
    sub_20B80BBD0(v390, "QW");
    v391 = 191;
    sub_20B80BBD0(v392, "OL");
    v393 = 192;
    sub_20B80BBD0(v394, "QA");
    v395 = 193;
    sub_20B80BBD0(v396, "KI");
    v397 = 194;
    sub_20B80BBD0(v398, "WA");
    v399 = 195;
    sub_20B80BBD0(v400, "ZA");
    v401 = 196;
    sub_20B80BBD0(v402, "LP");
    v403 = 197;
    sub_20B80BBD0(v404, "ML");
    v405 = 198;
    sub_20B80BBD0(v406, "LM");
    v407 = 199;
    sub_20B80BBD0(v408, "PL");
    v409 = 200;
    sub_20B907D58((uint64_t)qword_25472BBE8, (unsigned __int8 *)__p, 200);
    for (i = 0; i != -800; i -= 4)
    {
      if (SHIBYTE(v408[i + 2]) < 0)
        operator delete((void *)v408[i]);
    }
    __cxa_atexit((void (*)(void *))sub_20B907824, qword_25472BBE8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472BBE0);
  }
  sub_20B80BBD0(__p, v1);
  v3 = sub_20B87A31C(qword_25472BBE8, (unsigned __int8 *)__p);
  v4 = v3;
  if ((v10 & 0x80000000) == 0)
  {
    if (v3)
      goto LABEL_4;
    return -1;
  }
  operator delete(__p[0]);
  if (!v4)
    return -1;
LABEL_4:
  sub_20B80BBD0(__p, v1);
  v8 = __p;
  v5 = *((unsigned int *)sub_20B9080F0((uint64_t)qword_25472BBE8, (unsigned __int8 *)__p, (uint64_t)&unk_20BA37B7A, (__int128 **)&v8)+ 10);
  if (v10 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20B950D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;

  v19 = (char *)(v17 + 6391);
  v20 = -6400;
  v21 = v19;
  while (1)
  {
    v22 = *v21;
    v21 -= 32;
    if (v22 < 0)
      operator delete(*(void **)(v19 - 23));
    v19 = v21;
    v20 += 32;
    if (!v20)
    {
      __cxa_guard_abort(&qword_25472BBE0);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20B951120(uint64_t result, char *a2, uint64_t a3, int a4)
{
  uint64_t v4;

  *(_DWORD *)(result + 192) = a4;
  if (a3)
  {
    v4 = a3;
    do
    {
      result = __toupper(*a2);
      *a2++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_20B95115C(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 **v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t i;
  unsigned __int128 v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  float v27;
  double v28;
  float v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 **v47;
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  double v51;
  void *__p;
  char *v53;
  char *v54;
  void *__dst[2];
  uint64_t v56;
  unsigned __int128 v57;
  uint64_t v58;

  if (*(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 152))
  {
    v2 = (_OWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 56))
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 32);
        if ((unint64_t)(v4 - 10) >= 0xFFFFFFFFFFFFFFF8)
        {
          v57 = 0uLL;
          v58 = 0;
          sub_20B95160C((uint64_t *)&v57);
          v57 = *(_OWORD *)(a1 + 48);
          v58 = *(_QWORD *)(a1 + 64);
          *v2 = 0u;
          v2[1] = 0u;
          v5 = *(unsigned __int16 ***)(a1 + 144);
          v47 = *(unsigned __int16 ***)(a1 + 152);
          if (v5 != v47)
          {
            v6 = v4 - 1;
            v46 = 1 - v4;
            do
            {
              v7 = *v5;
              v8 = v5[1];
              v9 = v8 - *v5;
              if (v9 >= v6)
              {
                if (v9 - v6 >= v9)
                {
                  v13 = 0;
                }
                else
                {
                  v14 = *(_DWORD **)(a1 + 168);
                  v15 = &v7[v9];
                  v16 = v46;
                  do
                    *v14++ = v15[v16] + 1000;
                  while (!__CFADD__(v16++, 1));
                  v13 = v6;
                }
              }
              else
              {
                v10 = *(_DWORD **)(a1 + 168);
                *v10 = 1;
                if (v7 == v8)
                {
                  v13 = 1;
                }
                else
                {
                  v11 = 1;
                  do
                  {
                    v12 = *v7++;
                    v13 = v11 + 1;
                    v10[v11++] = v12 + 1000;
                  }
                  while (v7 != v8);
                }
              }
              v18 = *((_QWORD *)&v57 + 1);
              v20 = v57;
              v48 = v20 >> 64;
              for (i = v20; i != v18; i += 32)
              {
                v21 = *((double *)v5 + 3) + *(double *)(i + 24);
                v22 = *(_QWORD *)(a1 + 56);
                if ((unint64_t)(v22 - *(_QWORD *)(a1 + 48)) < 0x140 || v21 > *(double *)(v22 - 8))
                {
                  __dst[0] = 0;
                  __dst[1] = 0;
                  v56 = 0;
                  sub_20B87ACC8(__dst, *v5, (uint64_t)v5[1], v5[1] - *v5);
                  sub_20B943104((uint64_t)__dst, (uint64_t)__dst[1], *(char **)i, *(char **)(i + 8), (uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 1);
                  sub_20B8AE5DC(&__p, 1uLL);
                  v23 = 0;
                  v24 = v13;
                  do
                  {
                    if (v23 >= (uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 1)
                      break;
                    v25 = *(unsigned __int16 *)(*(_QWORD *)i + 2 * v23) + 1000;
                    v26 = (*(double (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v25, *(_QWORD *)(a1 + 168), v24);
                    v27 = *(float *)(sub_20B8956BC(1u) + 8);
                    *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v24) = v25;
                    v28 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v25);
                    v29 = *(float *)(sub_20B8956BC(1u) + 8);
                    v30 = v53;
                    if (v53 >= v54)
                    {
                      v32 = (char *)__p;
                      v33 = (v53 - (_BYTE *)__p) >> 2;
                      v34 = v33 + 1;
                      if ((unint64_t)(v33 + 1) >> 62)
                        sub_20B80CDD8();
                      v35 = v54 - (_BYTE *)__p;
                      if ((v54 - (_BYTE *)__p) >> 1 > v34)
                        v34 = v35 >> 1;
                      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                        v36 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v36 = v34;
                      if (v36)
                      {
                        v37 = (char *)sub_20B8127BC((uint64_t)&v54, v36);
                        v32 = (char *)__p;
                        v30 = v53;
                      }
                      else
                      {
                        v37 = 0;
                      }
                      v38 = &v37[4 * v33];
                      *(_DWORD *)v38 = v25;
                      v31 = v38 + 4;
                      while (v30 != v32)
                      {
                        v39 = *((_DWORD *)v30 - 1);
                        v30 -= 4;
                        *((_DWORD *)v38 - 1) = v39;
                        v38 -= 4;
                      }
                      __p = v38;
                      v53 = v31;
                      v54 = &v37[4 * v36];
                      if (v32)
                        operator delete(v32);
                    }
                    else
                    {
                      *(_DWORD *)v53 = v25;
                      v31 = v30 + 4;
                    }
                    ++v24;
                    v53 = v31;
                    v21 = v21 + v26 * v27 - v28 * v29;
                    ++v23;
                  }
                  while (v23 != v6);
                  *(_OWORD *)v49 = *(_OWORD *)__dst;
                  v50 = v56;
                  __dst[0] = 0;
                  __dst[1] = 0;
                  v56 = 0;
                  v51 = v21;
                  sub_20B884D50(a1, (unint64_t)v49, 0xAuLL);
                  if (v49[0])
                  {
                    v49[1] = v49[0];
                    operator delete(v49[0]);
                  }
                  if (__p)
                  {
                    v53 = (char *)__p;
                    operator delete(__p);
                  }
                  if (__dst[0])
                  {
                    __dst[1] = __dst[0];
                    operator delete(__dst[0]);
                  }
                }
                v18 = v48;
              }
              v5 += 4;
            }
            while (v5 != v47);
            v40 = *(uint64_t **)(a1 + 48);
            v41 = *(uint64_t **)(a1 + 56);
            if (v40 != v41)
            {
              v42 = *(_QWORD *)(a1 + 72);
              do
              {
                v44 = *v40;
                v43 = v40[1];
                v40 += 4;
                v45 = (v43 - v44) >> 1;
                if (v42 <= v45)
                  v42 = v45;
              }
              while (v40 != v41);
              *(_QWORD *)(a1 + 72) = v42;
            }
          }
          v49[0] = &v57;
          sub_20B828E34((void ***)v49);
        }
      }
    }
  }
}

void sub_20B95154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  __p = &a25;
  sub_20B828E34((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_20B9515BC(uint64_t a1)
{
  sub_20B951644(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B9515E0(_QWORD *a1)
{
  return a1[3] == a1[4] && a1[18] == a1[19];
}

uint64_t sub_20B951604(uint64_t a1)
{
  return a1 + 200;
}

void sub_20B95160C(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B828E74(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20B951644(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_20B924684((const void **)(a1 + 208), 0);
  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 144);
  sub_20B828E34(&v4);
  return sub_20B9063DC(a1);
}

uint64_t sub_20B95169C(uint64_t a1, const void *a2, CFTypeRef cf)
{
  const void **v5;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = (const void **)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
    sub_20B8A0168((const void **)a1, a2);
  if (cf)
    sub_20B88B52C(v5, cf);
  sub_20B95172C((const void **)a1);
  return a1;
}

void sub_20B9516FC(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;

  sub_20B8CE418(v1 + 2, 0);
  sub_20B87E150(v2, 0);
  sub_20B88B74C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B95172C(const void **a1)
{
  _BYTE *v2;
  const __CFAllocator *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;

  v2 = sub_20B9547EC();
  if (*v2 && (v2[9] & 4) != 0 && *a1)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    sub_20B8CE418(a1 + 2, Mutable);
    CFDictionarySetValue((CFMutableDictionaryRef)a1[2], CFSTR("keys"), *a1);
    v7 = CFDictionaryCreateMutable(v3, 0, v4, v5);
    CFDictionarySetValue((CFMutableDictionaryRef)a1[2], CFSTR("log likelihoods"), v7);
    if (v7)
      CFRelease(v7);
  }
}

void sub_20B951810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87AA1C((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void **sub_20B951828(const void **a1)
{
  sub_20B951874((uint64_t)a1);
  sub_20B8CE418(a1 + 2, 0);
  sub_20B87E150(a1 + 1, 0);
  sub_20B88B74C(a1, 0);
  return a1;
}

void sub_20B951874(uint64_t a1)
{
  const void **v2;

  v2 = (const void **)(a1 + 16);
  if (*(_QWORD *)(a1 + 16))
    sub_20B9518C4(a1);
  sub_20B8CE418(v2, 0);
  sub_20B88B74C((const void **)a1, 0);
  sub_20B87E150((const void **)(a1 + 8), 0);
}

void sub_20B9518C4(uint64_t a1)
{
  unint64_t v2;
  const __CFAllocator *v3;
  __CFDateFormatter *v4;
  CFAbsoluteTime Current;
  CFStringRef StringWithAbsoluteTime;
  const __CFString *v7;
  const __CFURL *v8;
  const __CFData *v9;
  __CFWriteStream *v10;
  __CFWriteStream *v11;
  const UInt8 *BytePtr;
  CFIndex Length;
  char v14;
  CFErrorRef *p_error;
  CFErrorRef error;

  v2 = atomic_load(&qword_25472BC18);
  if (v2 != -1)
  {
    error = (CFErrorRef)&v14;
    p_error = &error;
    std::__call_once(&qword_25472BC18, &p_error, (void (__cdecl *)(void *))sub_20B951DF0);
  }
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = (__CFDateFormatter *)qword_25472BC10;
  Current = CFAbsoluteTimeGetCurrent();
  StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(v3, v4, Current);
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("/tmp/GeometryModel/%@-%@.plist"), *(_QWORD *)(a1 + 8), StringWithAbsoluteTime);
  v8 = CFURLCreateWithFileSystemPath(0, v7, kCFURLPOSIXPathStyle, 0);
  error = 0;
  v9 = CFPropertyListCreateData(v3, *(CFPropertyListRef *)(a1 + 16), kCFPropertyListXMLFormat_v1_0, 0, &error);
  v10 = CFWriteStreamCreateWithFile(0, v8);
  if (v10)
  {
    v11 = v10;
    if (CFWriteStreamOpen(v10))
    {
      BytePtr = CFDataGetBytePtr(v9);
      Length = CFDataGetLength(v9);
      CFWriteStreamWrite(v11, BytePtr, Length);
      CFWriteStreamClose(v11);
    }
    CFRelease(v11);
  }
  CFRelease(StringWithAbsoluteTime);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
}

void sub_20B951A24(const void **a1, const void *a2, const __CFString *a3)
{
  CFTypeID v6;
  uint64_t Length;
  __CFArray *Mutable;
  CFIndex i;
  int CharacterAtIndex;
  unsigned __int16 v11;
  const void *ValueAtIndex;
  __CFData *v13;
  UInt8 bytes[8];

  sub_20B951874((uint64_t)a1);
  if (a2)
  {
    if (a3)
    {
      v6 = CFGetTypeID(a2);
      if (v6 == CFArrayGetTypeID())
      {
        Length = CFStringGetLength(a3);
        if (Length == CFArrayGetCount((CFArrayRef)a2))
        {
          Mutable = CFArrayCreateMutable(0, Length, MEMORY[0x24BDBD690]);
          if (Length >= 1)
          {
            for (i = 0; i != Length; ++i)
            {
              CharacterAtIndex = CFStringGetCharacterAtIndex(a3, i);
              v11 = CharacterAtIndex;
              if ((CharacterAtIndex - 65) < 0x1A || (CharacterAtIndex - 12353) <= 0x52)
              {
                v13 = CFDataCreateMutable(0, 8);
                *(_DWORD *)bytes = v11;
                *(_DWORD *)&bytes[4] = 0;
                CFDataAppendBytes(v13, bytes, 8);
                CFArrayAppendValue(Mutable, v13);
                CFRelease(v13);
              }
              else
              {
                ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
                CFArrayAppendValue(Mutable, ValueAtIndex);
              }
            }
          }
          if (Mutable)
          {
            sub_20B88B74C(a1, Mutable);
            sub_20B88B52C(a1 + 1, a3);
            sub_20B95172C(a1);
          }
        }
      }
    }
  }
}

const UInt8 *sub_20B951B88(CFArrayRef *a1, CFIndex a2)
{
  const __CFArray *v3;
  const __CFData *ValueAtIndex;

  if (a2 < 0)
    return 0;
  v3 = *a1;
  if (!v3 || CFArrayGetCount(v3) <= a2)
    return 0;
  ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*a1, a2);
  return CFDataGetBytePtr(ValueAtIndex);
}

const __CFArray *sub_20B951BDC(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex Count;
  const __CFAllocator *v3;
  CFIndex v4;
  const __CFData *ValueAtIndex;
  const __CFData *v6;
  CFTypeID v7;
  CFIndex Length;
  unint64_t v9;
  CFMutableStringRef Mutable;
  const UInt8 *BytePtr;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  __CFString *theString;
  CFIndex v19;
  const __CFArray *v20;

  if (result)
  {
    v1 = result;
    result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      Count = CFArrayGetCount(v1);
      v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      result = (const __CFArray *)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
      if (Count >= 1)
      {
        theString = (__CFString *)result;
        v19 = Count;
        v4 = 0;
        v20 = v1;
        do
        {
          ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v1, v4);
          if (ValueAtIndex)
          {
            v6 = ValueAtIndex;
            v7 = CFGetTypeID(ValueAtIndex);
            if (v7 == CFDataGetTypeID())
            {
              Length = CFDataGetLength(v6);
              if (Length)
              {
                v9 = Length;
                Mutable = CFStringCreateMutable(v3, 0);
                BytePtr = CFDataGetBytePtr(v6);
                if (v9 < 8)
                  __assert_rtn("createStringFromGeometryData", "GeometryModel.cpp", 201, "numKeys > 0");
                v12 = (float *)BytePtr;
                v13 = 0;
                v14 = v9 >> 3;
                do
                {
                  if (!*(_WORD *)v12)
                    break;
                  if (v13)
                    v15 = CFSTR(",");
                  else
                    v15 = CFSTR("{");
                  CFStringAppend(Mutable, v15);
                  v16 = CFStringCreateWithFormat(v3, 0, CFSTR("%C:%f"), *(unsigned __int16 *)v12, v12[1]);
                  CFStringAppend(Mutable, v16);
                  if (v16)
                    CFRelease(v16);
                  ++v13;
                  v12 += 2;
                }
                while (v14 != v13);
                if (CFStringGetLength(Mutable) <= 0)
                  v17 = CFSTR("{0:0}");
                else
                  v17 = CFSTR("};");
                CFStringAppend(Mutable, v17);
                Count = v19;
                v1 = v20;
                if (Mutable)
                {
                  CFStringAppend(theString, Mutable);
                  CFRelease(Mutable);
                }
              }
            }
          }
          ++v4;
        }
        while (v4 != Count);
        return (const __CFArray *)theString;
      }
    }
  }
  return result;
}

void sub_20B951DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B951DF0()
{
  const __CFLocale *System;

  System = CFLocaleGetSystem();
  qword_25472BC10 = (uint64_t)CFDateFormatterCreate(0, System, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat((CFDateFormatterRef)qword_25472BC10, CFSTR("yyyy-MM-dd@HHmm.ssSS"));
  return mkdir("/tmp/GeometryModel", 0x1C0u);
}

void sub_20B951E38(_QWORD *a1@<X8>)
{
  const __CFString *v2;

  v2 = (const __CFString *)LXAnalyzerCandidateCopySurface();
  sub_20B8D09C0(v2, a1);
  if (v2)
    CFRelease(v2);
}

void sub_20B951E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void **sub_20B951E9C(const void **a1, const void *a2, int a3, const void *a4)
{
  __CFDictionary *Mutable;
  CFNumberRef v8;
  const void *v9;
  int valuePtr;

  valuePtr = a3;
  *a1 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F198], a2);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F170], v8);
  if (a4)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F168], a4);
  v9 = (const void *)LXAnalyzerCreate();
  sub_20B8E75D8(a1, v9);
  if (v8)
    CFRelease(v8);
  if (Mutable)
    CFRelease(Mutable);
  return a1;
}

void sub_20B951FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void **v3;
  va_list va;

  va_start(va, a3);
  sub_20B8CE418((const void **)va, 0);
  sub_20B8E75D8(v3, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B951FF8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return LXAnalyzerEnumerateCandidatesWithLattice();
  return result;
}

void sub_20B952054(uint64_t a1, const void *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;
  char v7;

  v7 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  cf = 0;
  sub_20B952228(&cf, a2);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    sub_20B80BB74();
  (*(void (**)(uint64_t, CFTypeRef *, char *))(*(_QWORD *)v5 + 48))(v5, &cf, &v7);
  if (cf)
    CFRelease(cf);
  if (v7)
    *a3 = 1;
}

void sub_20B9520D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B952274(&a9, 0);
  _Unwind_Resume(a1);
}

char *sub_20B9520E8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20B828D20(result, a4);
    result = sub_20B95216C((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20B95214C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B83AFD0(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B95216C(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20B88DD4C(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20B8CD900((uint64_t)v9);
  return v4;
}

void sub_20B952214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B8CD900((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B952228(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B952274(a1, cf);
  }
}

void sub_20B952274(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void *MecabraCreateASCIIStringFromWubixing(void *a1)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(0xAu, a1);
}

void *MecabraCreateWubixingStringFromASCII(void *a1)
{
  return MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(0xAu, a1);
}

uint64_t sub_20B9522C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_24C461558;
  v4 = a1[37];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[44];
  a1[44] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[42];
  a1[42] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[41];
  a1[41] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[40];
  a1[40] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[39];
  a1[39] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20B8E8388(a1 + 36, 0, a3);
  return sub_20B886A70((uint64_t)a1);
}

void sub_20B952388(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_20B9522C0(a1, a2, a3);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9523AC(uint64_t a1, int a2, const __CFURL *a3, void *a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[5];
  _QWORD v14[5];

  if (qword_25472BC40 != -1)
    dispatch_once(&qword_25472BC40, &unk_24C46CF90);
  sub_20B88683C(a1, a3, a4, 1u, (const __CFArray *)qword_25472BC38);
  *(_QWORD *)a1 = &off_24C461558;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = a5;
  *(_BYTE *)(a1 + 304) = 1;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = a2;
  v10 = (_QWORD *)operator new();
  *v10 = &unk_24C461E58;
  *(_QWORD *)(a1 + 352) = v10;
  v11 = (_QWORD *)operator new();
  v13[4] = a1;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = sub_20B9525E8;
  v14[3] = &unk_24C4993E0;
  v14[4] = a1;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = sub_20B9525F8;
  v13[3] = &unk_24C49F398;
  sub_20B9B4974(v11, a4, v14, v13);
  *(_QWORD *)(a1 + 296) = v11;
  (*(void (**)(_QWORD *))(*v11 + 16))(v11);
  sub_20B95275C(a1);
  return a1;
}

void sub_20B952524(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x20BD39CB0](v2, 0x10E1C407767CB23);
  v6 = v1[44];
  v1[44] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[42];
  v1[42] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[41];
  v1[41] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[40];
  v1[40] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *v3;
  *v3 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_20B8E8388(v1 + 36, 0, v5);
  sub_20B886A70((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9525E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_20B9525F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v3 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 && a3)
  {
    v5 = (void *)sub_20B953950(*(_QWORD *)(a1 + 32), a3);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v13, v17, 16);
    if (v3)
    {
      v8 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (objc_msgSend_hasPrefix_(v10, v7, a2))
          {
            v3 = objc_msgSend_copy(v10, v7, v11);
            goto LABEL_13;
          }
        }
        v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v13, v17, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_13:
    if (v5)
      CFRelease(v5);
  }
  return v3;
}

void sub_20B952724(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20B854468(exception_object);
}

uint64_t sub_20B95275C(uint64_t a1)
{
  int v2;
  __CFString **v3;
  __CFString **v4;
  __CFString *v5;
  void *v6;
  char *v7;
  const char *v8;
  const char *v9;
  void *v10;
  int v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const __CFString *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 344);
  v3 = &off_24C49C918;
  if (v2 != 1)
    v3 = &off_24C49C910;
  if (v2 == 2)
    v4 = &off_24C49C920;
  else
    v4 = v3;
  v5 = *v4;
  v6 = (void *)MEMORY[0x24BDD17C8];
  v7 = sub_20B8D101C(*(_DWORD *)(a1 + 72));
  v9 = (const char *)objc_msgSend_stringWithUTF8String_(v6, v8, (uint64_t)v7);
  v10 = (void *)MEMORY[0x24BDD17C8];
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  v12 = sub_20B8D1044(v11, 0);
  v14 = objc_msgSend_stringWithUTF8String_(v10, v13, (uint64_t)v12);
  v18 = CFSTR("wubixingStandard");
  v19[0] = v5;
  v16 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v15, (uint64_t)v19, &v18, 1);
  return sub_20B90C8E8(*(_QWORD *)(a1 + 352), v9, v14, v16);
}

id sub_20B95286C()
{
  void *InputKeys;
  const char *v1;
  uint64_t v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  id result;

  InputKeys = (void *)MecabraInputKeyPropertiesGetInputKeys(2);
  v2 = objc_msgSend_stringByAppendingString_(InputKeys, v1, (uint64_t)CFSTR(" "));
  qword_25472BC20 = (uint64_t)(id)objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x24BDD14A8], v3, v2);
  result = (id)objc_msgSend_invertedSet((void *)qword_25472BC20, v4, v5);
  qword_25472BC28 = (uint64_t)result;
  return result;
}

void *sub_20B9528C4(_QWORD *a1, __CFString *a2, int a3)
{
  __CFString *v4;
  __CFString **v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD **v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD **v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD **v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __CFArray *v42;
  __CFArray *v43;
  unsigned __int8 v44;
  CFIndex Count;
  CFIndex v46;
  uint64_t v47;
  CFIndex v48;
  const __CFString *ValueAtIndex;
  const __CFString *v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  void *v72;
  uint64_t *v73;
  void *__p;
  uint64_t *v75;
  char *v76;
  void *v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD **v80;
  _QWORD *v81[2];
  _QWORD **v82;
  _QWORD *v83[2];
  CFArrayRef v84;

  v4 = a2;
  if ((a3 & 1) != 0)
  {
    v6 = off_24C499B58;
    v7 = 98306;
  }
  else
  {
    v8 = objc_msgSend_rangeOfString_(a2, (const char *)a2, (uint64_t)CFSTR("z"));
    v6 = off_24C499B50;
    v7 = 32770;
    if (v8 && v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v4 = (__CFString *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v4, v9, (uint64_t)CFSTR("z"), CFSTR("?"));
      v6 = off_24C499B68;
      v7 = 32770;
    }
  }
  v10 = (uint64_t)*v6;
  v83[0] = 0;
  v83[1] = 0;
  v81[1] = 0;
  v82 = v83;
  v80 = v81;
  v81[0] = 0;
  sub_20B88756C(a1, (uint64_t)&v80, v4, v10, (uint64_t)&v82, v7);
  v11 = v80;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  if (v80 == v81)
  {
    v18 = 0;
    v22 = 0;
  }
  else
  {
    v12 = 0;
    v13 = v80;
    do
    {
      v14 = v12;
      v15 = v13[1];
      if (v15)
      {
        do
        {
          v16 = (_QWORD **)v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD **)v13[2];
          v17 = *v16 == v13;
          v13 = v16;
        }
        while (!v17);
      }
      ++v12;
      v13 = v16;
    }
    while (v16 != v81);
    if (v14 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20B80CDD8();
    v18 = sub_20B800BE8((uint64_t)&v79, v12);
    v77 = v18;
    v79 = &v18[v19];
    do
    {
      *v18 = v11[4];
      v20 = (_QWORD *)v11[1];
      if (v20)
      {
        do
        {
          v21 = (_QWORD **)v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD **)v11[2];
          v17 = *v21 == v11;
          v11 = v21;
        }
        while (!v17);
      }
      ++v18;
      v11 = v21;
    }
    while (v21 != v81);
    v22 = v77;
    v78 = v18;
  }
  v23 = 126 - 2 * __clz(((char *)v18 - v22) >> 3);
  __p = sub_20B87EE10;
  if (v18 == (_QWORD *)v22)
    v24 = 0;
  else
    v24 = v23;
  sub_20B953EF4((uint64_t)v22, v18, (uint64_t (**)(_QWORD))&__p, v24, 1);
  v27 = (void *)objc_msgSend_array(MEMORY[0x24BDBCEB8], v25, v26);
  v28 = v27;
  if (a3)
  {
    sub_20B88C078(v27, (uint64_t *)v77, v78, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_83;
  }
  v30 = (uint64_t *)v77;
  v29 = v78;
  v75 = 0;
  v76 = 0;
  __p = 0;
  if (v77 != v78)
  {
    v72 = v27;
    v73 = v78;
    do
    {
      v31 = *v30;
      v32 = v75;
      if (v75 >= (uint64_t *)v76)
      {
        v34 = ((char *)v75 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          sub_20B80CDD8();
        v35 = (v76 - (_BYTE *)__p) >> 2;
        if (v35 <= v34 + 1)
          v35 = v34 + 1;
        if ((unint64_t)(v76 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)sub_20B800BE8((uint64_t)&v76, v36);
        else
          v37 = 0;
        v38 = &v37[8 * v34];
        *(_QWORD *)v38 = v31;
        v33 = (uint64_t *)(v38 + 8);
        v40 = (char *)__p;
        v39 = (char *)v75;
        if (v75 != __p)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *((_QWORD *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          v39 = (char *)__p;
        }
        __p = v38;
        v75 = v33;
        v76 = &v37[8 * v36];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v75 = v31;
        v33 = v32 + 1;
      }
      v75 = v33;
      v42 = (__CFArray *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      v43 = sub_20B93E054(10, 0, v42, 0);
      v84 = v43;
      if (v43)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        v44 = sub_20B93E778(10);
        Count = CFArrayGetCount(v43);
        if (Count < 1)
          goto LABEL_72;
        v46 = 0;
        v47 = 2;
        if ((v44 & 4) != 0)
          v47 = 3;
        v48 = v47 >= Count ? Count : v47;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v84, v46);
          v50 = (const __CFString *)a1[2];
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 112))(v31);
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 80))(v31);
          v53 = sub_20B886B2C(a1, 64, ValueAtIndex, v50, v51, v52);
          v54 = v53;
          v55 = v75;
          if (v75 >= (uint64_t *)v76)
          {
            v57 = ((char *)v75 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v57 + 1) >> 61)
              sub_20B80CDD8();
            v58 = (v76 - (_BYTE *)__p) >> 2;
            if (v58 <= v57 + 1)
              v58 = v57 + 1;
            if ((unint64_t)(v76 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
              v60 = (char *)sub_20B800BE8((uint64_t)&v76, v59);
            else
              v60 = 0;
            v61 = (uint64_t *)&v60[8 * v57];
            *v61 = v54;
            v56 = v61 + 1;
            v63 = (char *)__p;
            v62 = (char *)v75;
            if (v75 != __p)
            {
              do
              {
                v64 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *--v61 = v64;
              }
              while (v62 != v63);
              v62 = (char *)__p;
            }
            __p = v61;
            v75 = v56;
            v76 = &v60[8 * v59];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v75 = v53;
            v56 = v55 + 1;
          }
          v75 = v56;
          ++v46;
        }
        while (v46 != v48);
        v43 = v84;
        v29 = v73;
        if (v84)
LABEL_72:
          CFRelease(v43);
      }
      ++v30;
    }
    while (v30 != v29);
    v66 = (uint64_t *)__p;
    v65 = v75;
    if (__p == v75)
    {
      v28 = v72;
      if (v75)
      {
LABEL_82:
        v75 = v65;
        operator delete(v65);
      }
    }
    else
    {
      v67 = -1;
      v28 = v72;
      do
      {
        v68 = *v66;
        if (v67)
        {
          v69 = (void *)sub_20B8E1754(v68);
          objc_msgSend_addObject_(v72, v70, (uint64_t)v69);

        }
        else if (v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68);
        }
        ++v66;
        --v67;
      }
      while (v66 != v65);
      v65 = (uint64_t *)__p;
      if (__p)
        goto LABEL_82;
    }
  }
LABEL_83:
  if (v77)
  {
    v78 = (uint64_t *)v77;
    operator delete(v77);
  }
  sub_20B8292CC((uint64_t)&v80, v81[0]);
  sub_20B8292CC((uint64_t)&v82, v83[0]);
  return v28;
}

void sub_20B952E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,_QWORD *a22)
{
  if (__p)
    operator delete(__p);
  sub_20B8292CC((uint64_t)&a18, a19);
  sub_20B8292CC((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

unint64_t sub_20B952EB4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t result;
  const char *v9;
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a3;
  result = objc_msgSend_count(a2, (const char *)a2, a3);
  if (result > v5)
  {
    v10 = 0;
    do
    {
      v11 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v9, v5);
      if (!MecabraCandidateIsEmojiCandidate(v11, v12, v13))
      {
        v16 = objc_msgSend_rawCandidate(v11, v14, v15);
        if (!v16)
        {
          v10 = 0;
          if ((a4 & 1) != 0)
            goto LABEL_8;
LABEL_7:
          objc_msgSend_addObject_(*(void **)(a1 + 40), v14, (uint64_t)v11);
          goto LABEL_8;
        }
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 80))(v16);
      }
      if (((v10 ^ a4) & 1) == 0)
        goto LABEL_7;
LABEL_8:
      ++v5;
      result = objc_msgSend_count(a2, v14, v15);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t sub_20B952F6C(uint64_t result, const char *a2, uint64_t a3)
{
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  id v48;
  const char *v49;
  uint64_t *v50;
  const void *v51;
  CFTypeRef v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *k;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  const char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v3 = *(__CFString **)(result + 24);
  if (v3)
  {
    v4 = result;
    if (objc_msgSend_length(*(void **)(result + 24), a2, a3))
    {
      v5 = *(_QWORD *)(v4 + 320);
      if (v5)
      {
        v6 = atomic_load((unsigned __int8 *)(v5 + 97));
        if ((v6 & 1) == 0)
        {
          v7 = atomic_load((unsigned __int8 *)(v5 + 96));
          if ((v7 & 1) != 0)
          {
            v8 = *(_QWORD *)(v4 + 312);
            *(_QWORD *)(v4 + 312) = *(_QWORD *)(v4 + 320);
            *(_QWORD *)(v4 + 320) = 0;
            if (v8)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          }
        }
      }
      sub_20B953A68(v4, (uint64_t *)(v4 + 312), v3, 32784, 0x7FFFLL);
    }
    v9 = sub_20B9528C4((_QWORD *)v4, v3, 0);
    v10 = sub_20B8878CC((_QWORD *)v4, v3, 0);
    if (objc_msgSend_count(v9, v11, v12))
    {
      v14 = 0;
      while (1)
      {
        v15 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v13, v14);
        v18 = (const __CFString *)objc_msgSend_rawCandidate(v15, v16, v17);
        if (v18)
        {
          v19 = (__CFString *)v18;
          if ((*((uint64_t (**)(const __CFString *))v18->isa + 5))(v18))
            v20 = 40;
          else
            v20 = 24;
          v18 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v19->isa + v20))(v19);
        }
        if (CFStringGetLength(v18) != 1 && !MecabraCandidateIsEmojiCandidate(v15, v13, v21))
          break;
        v22 = objc_msgSend_rawCandidate(v15, v13, v21);
        if (v22)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 80))(v22) & 1) != 0)
            break;
        }
        objc_msgSend_addObject_(*(void **)(v4 + 40), v13, (uint64_t)v15);
        if (++v14 >= (unint64_t)objc_msgSend_count(v9, v23, v24))
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v14 = 0;
    }
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v85, v90, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v86;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v86 != v28)
            objc_enumerationMutation(v10);
          v30 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * i);
          v31 = objc_msgSend_rawCandidate(v30, v25, v26);
          if ((!v31 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 80))(v31) & 1) == 0)
            && (MecabraCandidateGetWubixingType(v30, v25, v26) & 2) == 0)
          {
            objc_msgSend_addObject_(*(void **)(v4 + 40), v25, (uint64_t)v30);
          }
        }
        v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v25, (uint64_t)&v85, v90, 16);
      }
      while (v27);
    }
    sub_20B952EB4(v4, v9, v14, 0);
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v32, (uint64_t)&v81, v89, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v82;
      do
      {
        for (j = 0; j != v35; ++j)
        {
          if (*(_QWORD *)v82 != v36)
            objc_enumerationMutation(v10);
          v38 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * j);
          v39 = objc_msgSend_rawCandidate(v38, v33, v34);
          if (v39 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 80))(v39) & 1) != 0
            || (MecabraCandidateGetWubixingType(v38, v33, v40) & 2) != 0)
          {
            objc_msgSend_addObject_(*(void **)(v4 + 40), v33, (uint64_t)v38);
          }
        }
        v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v33, (uint64_t)&v81, v89, 16);
      }
      while (v35);
    }
    if (objc_msgSend_length(v3, v33, v34))
    {
      v41 = *(_QWORD *)(v4 + 336);
      if (v41)
      {
        v42 = atomic_load((unsigned __int8 *)(v41 + 97));
        if ((v42 & 1) == 0)
        {
          v43 = atomic_load((unsigned __int8 *)(v41 + 96));
          if ((v43 & 1) != 0)
          {
            v44 = *(_QWORD *)(v4 + 328);
            *(_QWORD *)(v4 + 328) = *(_QWORD *)(v4 + 336);
            *(_QWORD *)(v4 + 336) = 0;
            if (v44)
              (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
          }
        }
      }
      sub_20B953A68(v4, (uint64_t *)(v4 + 328), v3, 32776, 5);
    }
    sub_20B952EB4(v4, v9, v14, 1);
    if ((*(_BYTE *)(v4 + 32) & 2) == 0)
    {
      v47 = *(void **)(v4 + 40);
      v48 = sub_20B8878CC((_QWORD *)v4, v3, 2u);
      objc_msgSend_addObjectsFromArray_(v47, v49, (uint64_t)v48);
    }
    v50 = (uint64_t *)(v4 + 288);
    if (!*(_QWORD *)(v4 + 288))
    {
      v51 = (const void *)sub_20B8D291C();
      v52 = CFRetain(v51);
      v53 = *(_QWORD *)(v4 + 280);
      v54 = operator new();
      sub_20B98F48C(v54, 2, 0, 0, 0, v52, 0, 0, v53);
      sub_20B8E8388((uint64_t *)(v4 + 288), v54, v55);
      if (v52)
        CFRelease(v52);
    }
    v56 = (void *)objc_msgSend_array(MEMORY[0x24BDBCEB8], v45, v46);
    if (sub_20B990694(*(_QWORD *)(v4 + 288), v3, *(_QWORD *)(v4 + 32) & 0x40, *(_QWORD *)(v4 + 256)))
    {
      for (k = sub_20B992070(*v50); k; k = sub_20B992070(*v50))
      {
        if (qword_25472BC30 != -1)
          dispatch_once(&qword_25472BC30, &unk_24C46CE70);
        if (MecabraCandidateGetMatchedLengthType(k, v57, v58) != 1)
        {
          v62 = objc_msgSend_rawCandidate(k, v60, v61);
          v64 = (_QWORD *)v62;
          if (v62)
          {
            v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
            v66 = 40;
            if (!v65)
              v66 = 24;
            v64 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v64 + v66))(v64);
          }
          if ((objc_msgSend_rangeOfCharacterFromSet_(v64, v63, qword_25472BC20) == 0x7FFFFFFFFFFFFFFFLL
             || objc_msgSend_rangeOfCharacterFromSet_(v64, v67, qword_25472BC28) == 0x7FFFFFFFFFFFFFFFLL
             && objc_msgSend_length(v64, v76, v77) != 1)
            && (!MecabraCandidateIsEmojiCandidate(k, v67, v68)
             || (v71 = objc_msgSend_rawCandidate(k, v69, v70)) == 0
             || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 80))(v71) & 1) == 0))
          {
            if (MecabraCandidateIsAutocorrectionCandidate(k, v69, v70)
              || (v74 = objc_msgSend_rawCandidate(k, v72, v73),
                  ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 104))(v74) & 0x80) != 0)
              || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v74 + 96))(v74) == 71
              || (sub_20B8E1620(k, v72, v75) & 1) == 0)
            {
              objc_msgSend_addObject_(v56, v72, (uint64_t)k);
            }
          }
        }
      }
    }
    result = objc_msgSend_addObjectsFromArray_(*(void **)(v4 + 40), v57, (uint64_t)v56);
    if ((*(_BYTE *)(v4 + 32) & 2) == 0)
    {
      v78 = *(void **)(v4 + 40);
      v79 = sub_20B9528C4((_QWORD *)v4, v3, 1);
      return objc_msgSend_addObjectsFromArray_(v78, v80, (uint64_t)v79);
    }
  }
  return result;
}

void sub_20B953568(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9535BC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  const char *v6;
  char isEqualToString;
  _BOOL8 result;

  result = 0;
  if (objc_msgSend_length(a2, (const char *)a2, (uint64_t)a3) == 1)
  {
    isEqualToString = objc_msgSend_isEqualToString_(a3, v6, (uint64_t)CFSTR("IDXPrefixMatch"));
    if (a4 >= 20 && (isEqualToString & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t sub_20B953618(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const UInt8 *v5;
  int v6;
  CFIndex v7;
  const UInt8 *v8;
  const __CFURL *v9;
  uint64_t v10;

  v4 = (_QWORD *)sub_20B9AE60C();
  v5 = (const UInt8 *)sub_20B9AE738(v4, 1, off_254729648[0], off_2547295F8[0], 0);
  v6 = *((char *)v5 + 23);
  if (v6 >= 0)
    v7 = v5[23];
  else
    v7 = *((_QWORD *)v5 + 1);
  if (v7)
  {
    if (v6 >= 0)
      v8 = v5;
    else
      v8 = *(const UInt8 **)v5;
    v9 = CFURLCreateFromFileSystemRepresentation(0, v8, v7, 1u);
  }
  else
  {
    v9 = 0;
  }
  v10 = operator new();
  sub_20B9523AC(v10, *(_DWORD *)(a1 + 72), v9, *(void **)(a1 + 24), a2);
  if (v9)
    CFRelease(v9);
  return v10;
}

void sub_20B9536F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x10E1C404196B466);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B95372C(uint64_t *a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t v6;

  if (!CFArrayGetCount(theArray) || (CFArrayGetCount(theArray) & 1) != 0)
  {
    *a1 = 0;
  }
  else
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_24C461808;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_DWORD *)(v6 + 88) = 1065353216;
    *(_WORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_DWORD *)(v6 + 112) = 0;
    *(_QWORD *)(v6 + 120) = 0;
    *a1 = v6;
    sub_20B8F4AC4(v6, theArray, *(unsigned __int8 *)(a2 + 304));
  }
}

void sub_20B9537E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B953804(uint64_t a1, CFArrayRef theArray)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (theArray && CFArrayGetCount(theArray))
  {
    sub_20B95372C(&v6, a1, theArray);
    result = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v6;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20B9538A8(uint64_t a1, CFArrayRef theArray)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (theArray && CFArrayGetCount(theArray))
  {
    sub_20B95372C(&v6, a1, theArray);
    result = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v6;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 328);
    *(_QWORD *)(a1 + 328) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 336) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20B953950(uint64_t a1, uint64_t a2)
{
  MecabraWordProperties *v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;

  v4 = [MecabraWordProperties alloc];
  v6 = (void *)objc_msgSend_initWithString_language_(v4, v5, a2, 1);
  v8 = (void *)objc_msgSend_wubixingCodesForStandard_(v6, v7, *(unsigned int *)(a1 + 344));

  return objc_msgSend_copy(v8, v9, v10);
}

void *sub_20B9539A0(uint64_t a1, void *a2)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(0xAu, a2);
}

BOOL sub_20B9539A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_20B8D298C();
  if (MecabraCandidateIsEmojiCandidate(a2, v4, v5))
    return 0;
  v9 = (_QWORD *)objc_msgSend_rawCandidate(a2, v6, v7);
  if (v9)
  {
    v11 = v9;
    v12 = (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
    v13 = 40;
    if (!v12)
      v13 = 24;
    v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v11 + v13))(v11);
  }
  return objc_msgSend_rangeOfCharacterFromSet_(v9, v10, v3) == 0x7FFFFFFFFFFFFFFFLL;
}

void *sub_20B953A30(uint64_t a1, const char *a2)
{
  void *result;

  result = *(void **)(a1 + 16);
  if (result)
    return (void *)(objc_msgSend_rangeOfString_(result, a2, (uint64_t)CFSTR("z")) == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_20B953A60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 296);
}

void sub_20B953A68(uint64_t a1, uint64_t *a2, const __CFString *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[8];
  int v14;
  _QWORD v15[4];
  UniChar *v16;
  UniChar *v17;

  v10 = *(_QWORD *)(a1 + 256);
  if (!v10)
  {
    if (!*a2)
      return;
    goto LABEL_9;
  }
  if (sub_20B88826C(v10, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270] && *a2 != 0)
  {
LABEL_9:
    sub_20B8D0790(a3, &v16);
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2020000000;
    v15[3] = 0;
    v12 = *a2;
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = sub_20B953BA4;
    v13[3] = &unk_24C49F3C0;
    v14 = a4;
    v13[4] = a3;
    v13[5] = v15;
    v13[6] = a1;
    v13[7] = a5;
    sub_20B8F5C28(v12, (uint64_t)v16, v17 - v16, (uint64_t)v13);
    _Block_object_dispose(v15, 8);
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
}

void sub_20B953B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v12;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  v12 = *(void **)(v10 - 72);
  if (v12)
  {
    *(_QWORD *)(v10 - 64) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_20B953BA4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  CFIndex v4;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = CFStringCreateWithCharacters(0, *(const UniChar **)(a2 + 16), v4);
    v8 = sub_20B886B2C((_QWORD *)v6, *(_DWORD *)(a1 + 64), v7, *(const __CFString **)(a1 + 32), 0, 0);
    v9 = (void *)sub_20B8E1754(v8);
    objc_msgSend_addObject_(*(void **)(v6 + 40), v10, (uint64_t)v9);

    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (a3 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == *(_QWORD *)(a1 + 56))
      *a3 = 1;
    if (v7)
      CFRelease(v7);
  }
}

void sub_20B953C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B953C94(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unsigned __int8 v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0;
  sub_20B8A25B4(*(_QWORD *)(a1 + 8), a4, a5, &v24, &v22);
  LODWORD(v12) = 0;
  switch((char)v22)
  {
    case 1:
      LODWORD(v12) = *(unsigned __int8 *)v24;
      break;
    case 2:
      LODWORD(v12) = *(unsigned __int16 *)v24;
      break;
    case 4:
      LODWORD(v12) = *v24;
      break;
    case 8:
      v12 = *(_QWORD *)v24;
      break;
    default:
      break;
  }
  v13 = *(_DWORD *)(a1 + 344);
  if (v13 == 1)
    v14 = 4;
  else
    v14 = 2;
  if (v13 == 2)
    v15 = 8;
  else
    v15 = v14;
  if ((v15 & v12) != 0)
  {
    v21 = (id)sub_20B8867EC(v25, v23);
    if (!objc_msgSend_isEqualToString_(a3, v16, (uint64_t)CFSTR("IDXPrefixMatch"))
      || (unint64_t)objc_msgSend_length(a2, v17, v18) > 2
      || (unint64_t)objc_msgSend_length(v21, v19, v20) <= 1)
    {
      (*(void (**)(uint64_t, id, _QWORD, uint64_t, uint64_t))(a7 + 16))(a7, v21, v12 >> 4, v12 & 1, a6);
    }

  }
}

uint64_t sub_20B953E34(uint64_t a1, uint64_t a2, int a3)
{
  int v3;

  if (a3 == 2)
    v3 = 65540;
  else
    v3 = 4;
  return (v3 & 0xFFFF7FFF | (((sub_20B909BF4(a2, off_2547292B8) >> 1) & 1) << 15)) ^ 0x8000;
}

uint64_t sub_20B953E80(uint64_t a1, uint64_t a2)
{
  return (sub_20B909BF4(a2, off_2547292B8) >> 2) & 1;
}

uint64_t sub_20B953EA8()
{
  return 10;
}

uint64_t sub_20B953EB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 304) = a2;
  return result;
}

uint64_t sub_20B953EB8()
{
  return 0;
}

CFArrayRef sub_20B953EC0()
{
  CFArrayRef result;

  result = CFArrayCreate(0, (const void **)&off_2547293C0, 2, MEMORY[0x24BDBD690]);
  qword_25472BC38 = (uint64_t)result;
  return result;
}

uint64_t sub_20B953EF4(uint64_t result, uint64_t *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v82 = a2 - 2;
  v85 = a2;
  v80 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = v85;
    v12 = (char *)v85 - (char *)v10;
    v13 = v85 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v85 - 1), *v8);
        if ((_DWORD)result)
        {
          v40 = *v8;
          *v8 = *(v85 - 1);
          *(v85 - 1) = v40;
        }
        return result;
      case 3:
        return sub_20B8802F8(v8, v8 + 1, v9, a3);
      case 4:
        return sub_20B88057C(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return sub_20B88062C(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v12 <= 191)
        {
          v41 = v8 + 1;
          v43 = v8 == v85 || v41 == v85;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v49 + 8) = *(uint64_t *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(uint64_t *)((char *)v8 + v49 - 8));
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = (uint64_t *)((char *)v8 + v49 + 8);
                      goto LABEL_74;
                    }
                  }
                  v50 = v8;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != v85);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v41 = v8 + 1;
            }
            while (v8 + 1 != v85);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v85)
          {
            v51 = (unint64_t)(v13 - 2) >> 1;
            v83 = v51;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = v52;
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v8[v58];
                    if (2 * v53 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                    {
                      ++v54;
                      v58 = 2 * v53 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  v11 = v85;
                  v52 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v59 = (unint64_t)v12 >> 3;
            do
            {
              v60 = v11;
              v61 = 0;
              v62 = v59 - 2;
              v84 = *v8;
              if (v59 < 2)
                v62 = v59 - 1;
              v63 = v62 >> 1;
              v64 = v8;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v59)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v64[v61 + 1], v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v11 = v60 - 1;
              if (v65 == v60 - 1)
              {
                *v65 = v84;
              }
              else
              {
                *v65 = *v11;
                *v11 = v84;
                v68 = (char *)v65 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, *v65);
                  if ((_DWORD)result)
                  {
                    v71 = *v65;
                    do
                    {
                      v72 = v70;
                      *v65 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, v71);
                      v65 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v59-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v8[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_20B8802F8(v15, v8, v9, a3);
        }
        else
        {
          sub_20B8802F8(v8, v15, v9, a3);
          sub_20B8802F8(v8 + 1, v15 - 1, v82, a3);
          sub_20B8802F8(v8 + 2, &v8[v14 + 1], v80, a3);
          v11 = v85;
          sub_20B8802F8(v15 - 1, v15, &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v8 - 1), *v8) & 1) == 0)
        {
          v31 = *v8;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v8, *v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v32 = v10[1];
              ++v10;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v8 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v85)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = v85;
          if (v10 < v85)
          {
            v34 = v85;
            do
            {
              v35 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        do
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v8[v17];
        v21 = v11;
        if (v17 == 1)
        {
          v21 = v11;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = v20 - 1;
        }
        else
        {
          v24 = &v8[v17];
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = v24 - 1;
        }
        if (v29 != v8)
          *v8 = *v29;
        *v29 = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = sub_20B953EF4(v8, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v30 = sub_20B954648(v8, v29, a3);
        v10 = v29 + 1;
        result = sub_20B954648(v29 + 1, v85, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_20B954648(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20B8802F8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20B88057C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20B88062C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_20B8802F8(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void *sub_20B9547EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D158);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D158))
  {
    sub_20B9548DC((uint64_t)&unk_25472D130);
    __cxa_atexit((void (*)(void *))sub_20B95487C, &unk_25472D130, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472D158);
  }
  return &unk_25472D130;
}

void sub_20B954864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D158);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95487C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*(_BYTE *)(a1 + 24))
    fclose(*(FILE **)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t sub_20B9548DC(uint64_t a1)
{
  CFIndex AppIntegerValue;
  BOOL v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  FILE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Boolean keyExistsAndHasValidFormat;

  *(_BYTE *)a1 = 0;
  keyExistsAndHasValidFormat = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("MecabraLogLevel"), (CFStringRef)*MEMORY[0x24BDBD568], &keyExistsAndHasValidFormat);
  v4 = AppIntegerValue > 7 || AppIntegerValue < 0 || keyExistsAndHasValidFormat == 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  if (v4)
    v6 = 0x7FFFFFFF;
  else
    v6 = AppIntegerValue;
  *(_DWORD *)(a1 + 4) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (sub_20B8D150C("DEBUG_PRINT_NODES"))
    *v5 |= 2uLL;
  if (sub_20B8D150C("DEBUG_PRINT_WORD_GROUPS"))
    *v5 |= 0x1000uLL;
  if (sub_20B8D150C("DEBUG_PRINT_SYLLABLE_LATTICE"))
    *v5 |= 0x2000uLL;
  if (sub_20B8D150C("DEBUG_PRINT_SAMPLE_LATTICE"))
    *v5 |= 0x2000000uLL;
  if (sub_20B8D150C("DEBUG_PRINT_CONNECTED_NODES"))
    *v5 |= 4uLL;
  if (sub_20B8D150C("DEBUG_PRINT_HYPOTHESES"))
    *v5 |= 0xCuLL;
  if (sub_20B8D150C("DEBUG_PRINT_HYPOTHESIS_SETS"))
    *v5 |= 0x10uLL;
  if (sub_20B8D150C("DEBUG_PRINT_SYLLABLE_HYPOTHESIS"))
    *v5 |= 0x1000000uLL;
  if (sub_20B8D150C("DEBUG_HOMOPHONE_PHRASES"))
    *v5 |= 0x40uLL;
  if (sub_20B8D150C("DEBUG_NGRAM_SCORE"))
    *v5 |= 0x80uLL;
  if (sub_20B8D150C("DEBUG_NGRAM_QUANTIZATION"))
    *v5 |= 0x100uLL;
  if (sub_20B8D150C("DEBUG_PINYIN_TEXT_CHECKING"))
    *v5 |= 0x200uLL;
  if (sub_20B8D150C("MECABRA_LOG_TIMING"))
    *v5 |= 0x20uLL;
  if (sub_20B8D150C("MECABRA_LOG_STATISTICS"))
    *v5 |= 0x800uLL;
  if (sub_20B8D150C("DEBUG_PRINT_CHARACTER_LATTICE"))
    *v5 |= 0x80000uLL;
  if (sub_20B8D150C("DEBUG_PRINT_BEST_BACKTRACE"))
    *v5 |= 0x4000uLL;
  if (sub_20B8D150C("DEBUG_RERANKING"))
    *v5 |= 0x8000uLL;
  if (sub_20B8D150C("DEBUG_LEARNING"))
    *v5 |= 0x10000uLL;
  if (sub_20B8D150C("DEBUG_DYNAMIC_CANDIDATES"))
    *v5 |= 0x20000uLL;
  if (sub_20B8D150C("DEBUG_ENGINE"))
    *v5 |= 0x40000uLL;
  if (sub_20B8D150C("DEBUG_PREDICTION"))
    *v5 |= 0x100000uLL;
  if (sub_20B8D150C("DEBUG_PRINT_ADAPTATION"))
    *v5 |= 0x200000uLL;
  if (sub_20B8D150C("DEBUG_PRUNING"))
    *v5 |= 0x400000uLL;
  v7 = sub_20B8D150C("DEBUG_LIVE_CONVERSION");
  v8 = *v5;
  if (v7)
  {
    *v5 = v8 | 0x800000;
  }
  else if (!v8)
  {
    goto LABEL_65;
  }
  *(_BYTE *)a1 = 1;
  v11 = getenv("MECABRA_LOG_DESTINATION");
  if (v11 || (v11 = (const char *)sub_20B93AB60((uint64_t)"MECABRA_LOG_DESTINATION", v9, v10)) != 0)
  {
    v12 = fopen(v11, "a+");
    *(_QWORD *)(a1 + 16) = v12;
    if (!v12)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Cannot open specified log file %s.\nAll logging is turned off.\n", v11);
      *(_BYTE *)a1 = 0;
      return a1;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *MEMORY[0x24BDAC8D8];
  }
LABEL_65:
  if (*(_BYTE *)a1)
  {
    if (sub_20B8D150C("MECABRA_LOG_BUFFERED"))
    {
      v13 = (_QWORD *)operator new();
      v14 = *(_QWORD *)(a1 + 16);
      *v13 = off_24C45F720;
      v13[1] = v14;
      v13[3] = 0;
      v13[4] = 0;
      v13[2] = 0;
    }
    else
    {
      v13 = (_QWORD *)operator new();
      v15 = *(_QWORD *)(a1 + 16);
      *v13 = &unk_24C45F678;
      v13[1] = v15;
    }
    v16 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v13;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return a1;
}

void sub_20B954D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B954D48(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_BYTE *)result)
  {
    if ((*(_QWORD *)(result + 8) & a2) != 0)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), a3, &a9);
  }
  return result;
}

uint64_t sub_20B954D9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_BYTE *)result)
  {
    if ((*(_QWORD *)(result + 8) & a2) != 0)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), a3, &a9);
  }
  return result;
}

void sub_20B954DEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFStringRef v9;
  CFStringRef v10;
  char cStr[1024];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  vsprintf(cStr, a2, &a9);
  v9 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v9)
  {
    v10 = v9;
    CFLog();
    CFRelease(v10);
  }
}

uint64_t sub_20B954E84(uint64_t a1, const char *a2, va_list a3)
{
  return vfprintf(*(FILE **)(a1 + 8), a2, a3);
}

void sub_20B954E90()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B954EA4(uint64_t a1)
{
  return fflush(*(FILE **)(a1 + 8));
}

uint64_t sub_20B954EAC(uint64_t a1, char *__format, va_list a3)
{
  uint64_t v4;
  std::string *v5;
  std::string::size_type v6;
  char __str[1024];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = vsnprintf(__str, 0x400uLL, __format, a3);
  v5 = (std::string *)(a1 + 16);
  if ((v4 & 0x80000000) != 0)
  {
    std::string::append(v5, "Log message exceeded the 1024-byte length limit.", 0x30uLL);
  }
  else
  {
    v6 = strlen(__str);
    std::string::append(v5, __str, v6);
  }
  return v4;
}

uint64_t sub_20B954F5C(uint64_t a1)
{
  FILE *v2;
  const char *v3;
  uint64_t result;

  v2 = *(FILE **)(a1 + 8);
  v3 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v3 = *(const char **)v3;
  fputs(v3, v2);
  result = fflush(*(FILE **)(a1 + 8));
  if (*(char *)(a1 + 39) < 0)
  {
    **(_BYTE **)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 39) = 0;
  }
  return result;
}

uint64_t sub_20B954FB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C45F720;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20B954FF4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C45F720;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B955040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_24C461078;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_20B958748((_QWORD *)(a1 + 32), 256);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 152) = a2;
  sub_20B86D7F0(a1 + 160, a3);
  return a1;
}

void sub_20B9550D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v6 = *v4;
  *v4 = 0;
  if (v6)
    sub_20B9587E8((uint64_t)v4, v6);
  sub_20B882354(v3);
  sub_20B958794(v2);
  sub_20B9585CC((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20B95511C(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 8);
  sub_20B95860C(a1 + 8, *(uint64_t **)(a1 + 8));
  sub_20B95515C((uint64_t)(v1 + 3));
  v1[11] = v1[10];
  v1[14] = v1[13];
}

void sub_20B95515C(uint64_t a1)
{
  void **v2;
  void *v3;

  v2 = *(void ***)a1;
  if (*(_QWORD *)a1 < *(_QWORD *)(a1 + 8))
  {
    do
    {
      v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < *(_QWORD *)(a1 + 8));
    v2 = *(void ***)a1;
  }
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
}

BOOL sub_20B9551A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 *v13;
  __int16 v14;
  uint64_t v15;
  __int16 *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  std::locale *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  _QWORD *v64;
  double *v65;
  double v66;
  _QWORD *v67;
  _QWORD *v68;
  BOOL v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  double v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  double v93;
  unint64_t v94;
  char *v95;
  double v96;
  uint64_t v97;
  char *v99;
  __int128 *v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  unint64_t v107;
  double v108;
  double v109;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _BYTE *v114;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  void *v124[2];
  char v125;
  std::locale v126;
  uint64_t v127;
  unsigned __int8 v128;
  _QWORD v129[2];
  uint64_t v130;
  _QWORD v131[10];
  char v132;
  _QWORD v133[21];

  v133[19] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v3 = (uint64_t *)(a1 + 88);
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3);
  v7 = v6 + 2;
  v8 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  if (v6 + 2 >= v9 >> 3)
  {
    v13 = *(__int16 **)(a2 + 8);
    if (v13 == *(__int16 **)(a2 + 16))
      v14 = 0;
    else
      v14 = *v13;
    v123 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    LOWORD(v129[0]) = v14;
    v15 = *(_QWORD *)(a1 + 184);
    if (!v15)
      sub_20B80BB74();
    if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v129))
    {
      v16 = *(__int16 **)(a2 + 8);
      if (v16 == *(__int16 **)(a2 + 16))
        v17 = 0;
      else
        v17 = *v16;
      sub_20BA013EC((uint64_t)v3, a2, v17);
      v18 = v6 + 1;
      if (v5 == v4
        || *(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) - 4) == 2 && *(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) + 36) != 2)
      {
        v19 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = 0;
        if (v19)
          sub_20B9587E8(a1 + 136, v19);
      }
      sub_20B955C60(a1, a2, v6 + 1, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3), 1);
      sub_20B95638C((_QWORD *)a1, v6 + 1);
      v20 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD **)(v20 - 8);
      v21 = (uint64_t *)(v20 - 8);
      v22 = v23;
      if (*v23 == v23[1] && v22[3] == v22[4]
        || v5 != v4
        && (*(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) - 4) != 2 || *(_DWORD *)(*v3 + 8 * ((v5 - v4) >> 3) + 36) == 2)
        && !v22[8]
        && *(_QWORD *)(*(_QWORD *)(*v8 + 0x6666666666666668 * ((v5 - v4) >> 3)) + 64))
      {
        sub_20B95860C((uint64_t)v8, v21);
        sub_20B955C60(a1, a2, v6 + 1, 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3), 0);
        sub_20B95638C((_QWORD *)a1, v6 + 1);
      }
      v24 = sub_20B9547EC();
      if (*v24 && (v24[11] & 2) != 0)
      {
        v25 = sub_20B9547EC();
        sub_20B83BFEC((uint64_t)v129);
        if (v18 < v7)
        {
          sub_20B828F84(&v130, (uint64_t)"ColumnIndex = ", 14);
          v26 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v26, (uint64_t)", sampleIndex = ", 16);
          v27 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
          v28 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
          std::locale::~locale(&v126);
          std::ostream::put();
          std::ostream::flush();
          sub_20B910C80(*(_QWORD **)(*v8 + 8 * v18), &v126);
          v29 = (v128 & 0x80u) == 0 ? &v126 : (std::locale *)v126.__locale_;
          v30 = (v128 & 0x80u) == 0 ? v128 : v127;
          sub_20B828F84(&v130, (uint64_t)v29, v30);
          if ((char)v128 < 0)
            operator delete(v126.__locale_);
        }
        sub_20B871648((uint64_t)v131, v124);
        v129[0] = *MEMORY[0x24BEDB7F0];
        v31 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        *(_QWORD *)((char *)v129 + *(_QWORD *)(v129[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v130 = v31;
        v131[0] = MEMORY[0x24BEDB848] + 16;
        if (v132 < 0)
          operator delete((void *)v131[8]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x20BD39C2C](v133);
        if (v125 >= 0)
          v37 = v124;
        else
          v37 = (void **)v124[0];
        sub_20B954D48((uint64_t)v25, 0x2000000u, (uint64_t)v37, v32, v33, v34, v35, v36, v116);
        if (v125 < 0)
          operator delete(v124[0]);
      }
      v38 = sub_20B9547EC();
      if (*v38 && (v38[9] & 0x40) != 0)
        sub_20B9564C8(a1, ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1, 0x50uLL, 0);
    }
    v9 = v123;
    if (a3)
    {
      v39 = *(_QWORD *)(a1 + 16);
      v40 = *(_QWORD *)(a1 + 8);
      v41 = operator new();
      v42 = *(_QWORD *)(a1 + 16);
      v43 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v41 + 56) = 0;
      *(_OWORD *)v41 = 0u;
      *(_OWORD *)(v41 + 16) = 0u;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_QWORD *)(v41 + 48) = v41 + 56;
      *(_QWORD *)(v41 + 64) = 0;
      *(_QWORD *)(v41 + 72) = (v42 - v43) >> 3;
      v44 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v41;
      if (v44)
      {
        sub_20B9587E8(a1 + 136, v44);
        v43 = *(_QWORD *)(a1 + 8);
        v42 = *(_QWORD *)(a1 + 16);
      }
      if (v43 == v42)
        goto LABEL_103;
      v45 = (v42 - v43) >> 3;
      v46 = v45 - 1;
      if (v45 == 1)
        goto LABEL_103;
      v47 = 0;
      v48 = 1 - v45;
      v49 = v43 + 8 * v45 - 8;
      while (1)
      {
        v50 = *(uint64_t **)(v49 + 8 * v47);
        v51 = *v50;
        v52 = v50[1];
        if (*v50 != v52)
          break;
        if (v48 == --v47)
          goto LABEL_103;
      }
      if (!v47)
      {
LABEL_63:
        v55 = *(_QWORD **)(v42 - 8);
        if (*v55 != v55[1])
        {
          v56 = v55[9];
          v57 = (_QWORD *)v55[6];
          v58 = v55 + 7;
          v122 = v56;
          v117 = v7;
          if (v57 == v55 + 7)
          {
            v70 = 0;
            v71 = 0;
          }
          else
          {
            v59 = *v3;
            v60 = (double *)(*v3 + 40 * v56);
            v61 = *v60;
            v62 = v60[1];
            v63 = 1.79769313e308;
            v64 = v57;
            do
            {
              v65 = (double *)(v59 + 40 * *(_QWORD *)(*(_QWORD *)v64[4] + 16));
              v66 = hypot(v61 - *v65, v62 - v65[1]);
              if (v66 < v63)
                v63 = v66;
              v67 = (_QWORD *)v64[1];
              if (v67)
              {
                do
                {
                  v68 = v67;
                  v67 = (_QWORD *)*v67;
                }
                while (v67);
              }
              else
              {
                do
                {
                  v68 = (_QWORD *)v64[2];
                  v69 = *v68 == (_QWORD)v64;
                  v64 = v68;
                }
                while (!v69);
              }
              v64 = v68;
            }
            while (v68 != v58);
            v70 = 0;
            v71 = 0;
            v72 = 0;
            v73 = 0;
            if (v63 <= 60.025)
              v74 = 60.025;
            else
              v74 = v63 + 60.025;
            do
            {
              v75 = v57[4];
              v76 = (double *)(*v3 + 40 * *(_QWORD *)(*(_QWORD *)v75 + 16));
              if (hypot(*(double *)(*v3 + 40 * v56) - *v76, *(double *)(*v3 + 40 * v56 + 8) - v76[1]) < v74)
              {
                if (v73 >= v72)
                {
                  v77 = (v73 - v70) >> 3;
                  v78 = v77 + 1;
                  if ((unint64_t)(v77 + 1) >> 61)
                    sub_20B80CDD8();
                  if ((v72 - v70) >> 2 > v78)
                    v78 = (v72 - v70) >> 2;
                  if ((unint64_t)(v72 - v70) >= 0x7FFFFFFFFFFFFFF8)
                    v79 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v79 = v78;
                  if (v79)
                  {
                    if (v79 >> 61)
                      sub_20B800BC0();
                    v80 = (char *)operator new(8 * v79);
                  }
                  else
                  {
                    v80 = 0;
                  }
                  v81 = &v80[8 * v77];
                  *(_QWORD *)v81 = v75;
                  v71 = v81 + 8;
                  while (v73 != v70)
                  {
                    v82 = *((_QWORD *)v73 - 1);
                    v73 -= 8;
                    *((_QWORD *)v81 - 1) = v82;
                    v81 -= 8;
                  }
                  v72 = &v80[8 * v79];
                  if (v70)
                    operator delete(v70);
                  v70 = v81;
                  v73 = v71;
                  v56 = v122;
                }
                else
                {
                  *(_QWORD *)v73 = v75;
                  v73 += 8;
                  v71 = v73;
                }
              }
              v83 = (_QWORD *)v57[1];
              if (v83)
              {
                do
                {
                  v84 = v83;
                  v83 = (_QWORD *)*v83;
                }
                while (v83);
              }
              else
              {
                do
                {
                  v84 = (_QWORD *)v57[2];
                  v69 = *v84 == (_QWORD)v57;
                  v57 = v84;
                }
                while (!v69);
              }
              v57 = v84;
            }
            while (v84 != v58);
          }
          v90 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a1 + 136));
          v91 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v56);
          if (v70 == v71)
          {
            v121 = -1.79769313e308;
            v94 = -1;
          }
          else
          {
            v92 = 0;
            v93 = -1.79769313e308;
            v94 = -1;
            v95 = v70;
            do
            {
              v96 = *(double *)(*(_QWORD *)v95 + 32);
              if (v93 < *(double *)(*(_QWORD *)v95 + 56) - v96)
                v93 = *(double *)(*(_QWORD *)v95 + 56) - v96;
              if (v92 <= 2)
              {
                v97 = v91 - *(_QWORD *)(*(_QWORD *)v95 + 72);
                if (v94 > v97 && v97 > -1)
                  v94 = v91 - *(_QWORD *)(*(_QWORD *)v95 + 72);
              }
              ++v92;
              v95 += 8;
            }
            while (v95 != v71);
            v121 = v93 + -3.0;
          }
          if (v70 != v71)
          {
            v119 = *(double *)(*(_QWORD *)(a1 + 96) - 16);
            v120 = (double)(v94 + 2);
            v99 = v70;
            do
            {
              v100 = *(__int128 **)v99;
              v101 = *(double *)(*(_QWORD *)v99 + 16);
              v102 = pow(*(double *)(*(_QWORD *)(a1 + 88) + 40 * v56 + 24) * 0.00666666667, 0.6);
              v103 = (*(double (**)(uint64_t, uint64_t, __int128 *, double))(*(_QWORD *)a1 + 64))(a1, v90, v100, 0.0);
              v104 = vabdd_f64(v119, v101);
              v105 = -(v102 * fmin(v104 / v101 / 0.3, 1.0));
              v106 = *((double *)v100 + 6);
              v107 = *((_QWORD *)v100 + 9);
              v108 = (double)(v91 - v107);
              if (v91 <= v107)
                v109 = 0.0;
              else
                v109 = -v108;
              if (v105 + v106 > v121 && v108 < v120)
              {
                v118 = *v100;
                v111 = *((_QWORD *)v100 + 2);
                v112 = *((_QWORD *)v100 + 8);
                v113 = sub_20B9569F0((char **)(a1 + 32));
                *(_OWORD *)v113 = v118;
                *((_QWORD *)v113 + 2) = v111;
                *((double *)v113 + 3) = v104;
                *((double *)v113 + 4) = v103;
                *((double *)v113 + 5) = v105;
                *((double *)v113 + 6) = v106;
                *((double *)v113 + 7) = v103 + v105 + v106 + v109;
                *((_QWORD *)v113 + 8) = v112;
                *((_QWORD *)v113 + 9) = v107;
                sub_20B910884(*(_QWORD *)(a1 + 136), (uint64_t)v113);
              }
              v99 += 8;
              v56 = v122;
            }
            while (v99 != v71);
          }
          v7 = v117;
          if (v70)
            operator delete(v70);
LABEL_138:
          v114 = sub_20B9547EC();
          v9 = v123;
          if (*v114 && (v114[9] & 0x40) != 0)
          {
            sub_20B9564C8(a1, (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3, 0x14uLL, 1);
            v9 = v123;
          }
          return v7 >= v9 >> 3;
        }
LABEL_103:
        if (v39 != v40)
        {
          v85 = 1;
          while (1)
          {
            v86 = *(_QWORD *)(*v8 + 8 * v85);
            v87 = *(uint64_t **)(v86 + 24);
            if (v87 != *(uint64_t **)(v86 + 32))
              break;
            if (++v85 > (unint64_t)((v39 - v40) >> 3))
              goto LABEL_138;
          }
          if (v85)
          {
            v88 = *v87;
            v89 = sub_20B9569F0((char **)(a1 + 32));
            *(_QWORD *)v89 = v88;
            *(_OWORD *)(v89 + 8) = 0u;
            *(_OWORD *)(v89 + 24) = 0u;
            *(_OWORD *)(v89 + 40) = 0u;
            *(_OWORD *)(v89 + 56) = 0u;
            *((_QWORD *)v89 + 9) = 0;
            sub_20B910884(*(_QWORD *)(a1 + 136), (uint64_t)v89);
          }
        }
        goto LABEL_138;
      }
      v129[0] = &off_24C4696E8;
      v129[1] = a1;
      v53 = v129;
      v130 = v46;
      v131[0] = v129;
      do
      {
        if (!v53)
          sub_20B80BB74();
        (*(void (**)(_QWORD *, uint64_t))(*v53 + 48))(v53, v51);
        v51 += 8;
        v53 = (_QWORD *)v131[0];
      }
      while (v51 != v52);
      if ((_QWORD *)v131[0] == v129)
      {
        v54 = 4;
        v53 = v129;
      }
      else
      {
        if (!v131[0])
        {
LABEL_62:
          v42 = *(_QWORD *)(a1 + 16);
          goto LABEL_63;
        }
        v54 = 5;
      }
      (*(void (**)(void))(*v53 + 8 * v54))();
      goto LABEL_62;
    }
  }
  return v7 >= v9 >> 3;
}

void sub_20B955B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;

  if (v35)
    operator delete(v35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B955C60(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  _BOOL8 v48;
  int v49;
  float v50;
  float v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  float *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void *__p;
  unsigned __int16 *v75;
  _OWORD v76[2];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return result;
  LODWORD(v5) = a5;
  v9 = (_QWORD *)result;
  v10 = *(_QWORD **)(result + 8);
  v11 = *(_QWORD **)(result + 16);
  if (v11 == v10)
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = 0;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_QWORD *)(v12 + 48) = v12 + 56;
    v78[0] = v12;
    v13 = v9[3];
    v14 = (uint64_t *)v9[2];
    if ((unint64_t)v14 >= v13)
    {
      v16 = (_QWORD *)v9[1];
      v17 = v14 - v16;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        sub_20B80CDD8();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8;
      v21 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v20)
        v21 = v18;
      v77 = v9 + 3;
      if (v21)
      {
        v21 = (unint64_t)sub_20B87FB70(v21);
        v12 = v78[0];
        v16 = (_QWORD *)v9[1];
        v14 = (uint64_t *)v9[2];
      }
      else
      {
        v22 = 0;
      }
      v23 = (uint64_t *)(v21 + 8 * v17);
      *(_QWORD *)&v76[0] = v21;
      *((_QWORD *)&v76[0] + 1) = v23;
      *((_QWORD *)&v76[1] + 1) = v21 + 8 * v22;
      v78[0] = 0;
      *v23 = v12;
      *(_QWORD *)&v76[1] = v23 + 1;
      if (v14 == v16)
      {
        v15 = v23 + 1;
      }
      else
      {
        do
        {
          v24 = *--v14;
          *v14 = 0;
          *--v23 = v24;
        }
        while (v14 != v16);
        v15 = *(_QWORD **)&v76[1];
      }
      v25 = *(_OWORD *)(v9 + 1);
      v9[1] = v23;
      v9[2] = v15;
      *(_OWORD *)((char *)v76 + 8) = v25;
      v26 = v9[3];
      v9[3] = *((_QWORD *)&v76[1] + 1);
      *((_QWORD *)&v76[1] + 1) = v26;
      *(_QWORD *)&v76[0] = v25;
      sub_20B95866C((uint64_t)v76);
    }
    else
    {
      v78[0] = 0;
      *v14 = v12;
      v15 = v14 + 1;
      v9[2] = v15;
    }
    v9[2] = v15;
    v27 = v78[0];
    v78[0] = 0;
    if (v27)
      sub_20B9587E8((uint64_t)v78, v27);
    sub_20B9565E0(v9, 0);
    v10 = (_QWORD *)v9[1];
    v11 = (_QWORD *)v9[2];
  }
  if (a3 == v11 - v10)
  {
    v28 = operator new();
    *(_QWORD *)(v28 + 56) = 0;
    *(_OWORD *)v28 = 0u;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_QWORD *)(v28 + 48) = v28 + 56;
    *(_QWORD *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 72) = a4;
    v78[0] = v28;
    v29 = v9[3];
    v30 = (uint64_t *)v9[2];
    if ((unint64_t)v30 >= v29)
    {
      v31 = (_QWORD *)v9[1];
      v32 = v30 - v31;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        sub_20B80CDD8();
      v34 = v29 - (_QWORD)v31;
      if (v34 >> 2 > v33)
        v33 = v34 >> 2;
      v20 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8;
      v35 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v20)
        v35 = v33;
      v77 = v9 + 3;
      if (v35)
      {
        v35 = (unint64_t)sub_20B87FB70(v35);
        v28 = v78[0];
        v31 = (_QWORD *)v9[1];
        v30 = (uint64_t *)v9[2];
      }
      else
      {
        v36 = 0;
      }
      v37 = (uint64_t *)(v35 + 8 * v32);
      *(_QWORD *)&v76[0] = v35;
      *((_QWORD *)&v76[0] + 1) = v37;
      *((_QWORD *)&v76[1] + 1) = v35 + 8 * v36;
      v78[0] = 0;
      *v37 = v28;
      *(_QWORD *)&v76[1] = v37 + 1;
      if (v30 == v31)
      {
        v11 = v37 + 1;
      }
      else
      {
        do
        {
          v38 = *--v30;
          *v30 = 0;
          *--v37 = v38;
        }
        while (v30 != v31);
        v11 = *(_QWORD **)&v76[1];
      }
      v39 = *(_OWORD *)(v9 + 1);
      v9[1] = v37;
      v9[2] = v11;
      *(_OWORD *)((char *)v76 + 8) = v39;
      v40 = v9[3];
      v9[3] = *((_QWORD *)&v76[1] + 1);
      *((_QWORD *)&v76[1] + 1) = v40;
      *(_QWORD *)&v76[0] = v39;
      sub_20B95866C((uint64_t)v76);
    }
    else
    {
      v78[0] = 0;
      *v30 = v28;
      v11 = v30 + 1;
      v9[2] = v11;
    }
    v9[2] = v11;
    v41 = v78[0];
    v78[0] = 0;
    if (v41)
    {
      sub_20B9587E8((uint64_t)v78, v41);
      v11 = (_QWORD *)v9[2];
    }
  }
  memset(v76, 0, sizeof(v76));
  LODWORD(v77) = 1065353216;
  if (a4)
  {
    v42 = v9[11];
    v43 = *(_DWORD *)(v42 + 40 * a4 - 4) != 2
       || *(_DWORD *)(v42 + 40 * a4 + 36) == 2
       || *(_QWORD *)(*(_QWORD *)(v9[1] + 8 * a3 - 8) + 64) == 0;
    if (a4 > 2)
    {
      v48 = 0;
      goto LABEL_54;
    }
  }
  else
  {
    v43 = 0;
  }
  v44 = v9[11];
  v45 = v9[12] - v44;
  v46 = 0xCCCCCCCCCCCCCCCDLL * (v45 >> 3);
  if (v45)
    v47 = *(unsigned __int16 *)(v44 + 34);
  else
    v47 = 0;
  if (v46 <= a4)
    v49 = 0;
  else
    v49 = *(unsigned __int16 *)(v44 + 40 * a4 + 34);
  v48 = v47 == v49;
LABEL_54:
  v80[0] = &off_24C49F3F0;
  v80[1] = v9;
  v81 = v80;
  v50 = -2.0;
  if (!(_DWORD)v5)
    v50 = -5.0;
  v51 = 0.8;
  if ((_DWORD)v5)
  {
    v52 = 2;
  }
  else
  {
    v51 = 5.0;
    v52 = 5;
  }
  sub_20B948378(a2, v52, (uint64_t)v80, &__p, v51, v50);
  v53 = v11 - 1;
  v54 = v81;
  if (v81 == v80)
  {
    v55 = 4;
    v54 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_64;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_64:
  if (!v43)
    goto LABEL_76;
  v72 = v9[1];
  v56 = *(_QWORD **)(v72 + 8 * (a3 - 1));
  v57 = v56[9];
  v58 = operator new(0x58uLL);
  *v58 = &off_24C469690;
  v58[1] = v9;
  v71 = a2;
  v58[2] = a2;
  v58[3] = v53;
  v58[4] = a3;
  v58[5] = a4;
  v58[6] = v57;
  v73 = v5;
  *((_BYTE *)v58 + 56) = v5;
  v58[8] = v76;
  v58[9] = &__p;
  *((_BYTE *)v58 + 80) = v48;
  v79 = v58;
  sub_20B9107D4(v56, 0, (uint64_t)v78, 0);
  v59 = v79;
  v5 = a3 - 1;
  if (v79 == v78)
  {
    v62 = 4;
    v59 = v78;
    v60 = v73;
    v61 = v72;
  }
  else
  {
    v60 = v73;
    v61 = v72;
    if (!v79)
      goto LABEL_70;
    v62 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v62))();
LABEL_70:
  v63 = *(_QWORD **)(v61 + 8 * v5);
  v64 = operator new(0x48uLL);
  *v64 = &off_24C49F460;
  v64[1] = v9;
  v64[2] = v71;
  v64[3] = v53;
  v64[4] = a3;
  v64[5] = a4;
  v64[6] = v57;
  v64[7] = v76;
  *((_BYTE *)v64 + 64) = v60;
  v79 = v64;
  sub_20B9107D4(v63, 0, (uint64_t)v78, 0);
  v65 = v79;
  if (v79 == v78)
  {
    v67 = 4;
    v65 = v78;
    v66 = v73;
  }
  else
  {
    v66 = v73;
    if (!v79)
      goto LABEL_75;
    v67 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v67))();
LABEL_75:
  v68 = *(_QWORD **)(v61 + 8 * v5);
  LOBYTE(v5) = v66;
  if (*v68 != v68[1])
  {
LABEL_76:
    v69 = (float *)__p;
    v70 = v75;
    while (v69 != (float *)v70)
    {
      (*(void (**)(_QWORD *, _QWORD *, unint64_t, _QWORD, _BOOL8, float))(*v9 + 48))(v9, v53, a4, *(unsigned __int16 *)v69, v48, v69[1]);
      v69 += 2;
    }
  }
  if (!a4
    && (v5 & 1) == 0
    && *(_QWORD *)*v53 == *(_QWORD *)(*v53 + 8)
    && *(_QWORD *)(*v53 + 24) == *(_QWORD *)(*v53 + 32))
  {
    sub_20B9565E0(v9, a3);
  }
  if (__p)
  {
    v75 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
  return sub_20B84055C((uint64_t)v76);
}

void sub_20B9562BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  sub_20B84055C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B95638C(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = result[1];
  if (a2 <= (result[2] - v2) >> 3)
  {
    v4 = (uint64_t **)(v2 + 8 * a2);
    v5 = **v4;
    v6 = (*v4)[1];
    if (v5 != v6)
    {
      v7 = result;
      result = operator new(0x20uLL);
      *result = &off_24C469740;
      result[1] = v7;
      result[2] = a2;
      result[3] = v4;
      v10 = result;
      do
      {
        if (!result)
          sub_20B80BB74();
        (*(void (**)(_QWORD *, uint64_t))(*result + 48))(result, v5);
        v5 += 8;
        result = v10;
      }
      while (v5 != v6);
      if (v10 == v9)
      {
        v8 = 4;
        result = v9;
      }
      else
      {
        if (!v10)
          return result;
        v8 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
    }
  }
  return result;
}

void sub_20B956488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9564C8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *result;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9547EC();
  sub_20B954D48((uint64_t)v8, 0x4000u, (uint64_t)"Nbest for column %lu\n", v9, v10, v11, v12, v13, a2);
  v14 = operator new(0x20uLL);
  *v14 = &off_24C46A870;
  v14[1] = a1;
  *((_BYTE *)v14 + 16) = a4;
  v14[3] = a2;
  v18 = v14;
  sub_20B956C94(a1, a3, (uint64_t)v17, a4);
  result = v18;
  if (v18 == v17)
  {
    v16 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_20B9565A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B9565E0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 24))(a1, *(_QWORD *)(a1[1] + 8 * a2));
  if (v4)
    sub_20B956634((uint64_t)a1, a2, v4, 0, 0);
}

void sub_20B956634(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  double *v21;
  long double v22;
  double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;

  v5 = *(_QWORD *)(a1 + 8);
  if (a2 > (*(_QWORD *)(a1 + 16) - v5) >> 3)
    return;
  v11 = *(_QWORD **)(v5 + 8 * a2);
  v12 = v11[9];
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(double *)(v13 + 40 * v12 + 24);
  if (a5)
  {
    v15 = *(double *)(a5 + 32);
    v16 = v11[8];
    if (v16 < 0x50)
      goto LABEL_26;
    v17 = v11 + 7;
    v18 = (_QWORD *)v11[7];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)v18[1];
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v17[2];
        v20 = *v19 == (_QWORD)v17;
        v17 = v19;
      }
      while (v20);
    }
    if (*(double *)(v19[4] + 56) < v15)
    {
LABEL_26:
      v21 = (double *)(v13 + 40 * *(_QWORD *)(*(_QWORD *)a5 + 16));
      v22 = hypot(*(double *)(v13 + 40 * v12) - *v21, *(double *)(v13 + 40 * v12 + 8) - v21[1]);
      v23 = *(double *)(a5 + 16);
      v24 = *(double *)(a5 + 24) + v14 - v21[3] - v22;
      v25 = v24 / (v22 + v23);
      v26 = -(pow(v14 * 0.00666666667, 0.6) * fmin(v25 / 0.3, 1.0));
      if (a4)
        v27 = *(double *)(a4 + 48);
      else
        v27 = 0.0;
      v29 = v27 + *(double *)(a3 + 24) * 0.8;
      v31 = *(_QWORD *)(a3 + 64) + *(_QWORD *)(a4 + 72);
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v12);
      v33 = (double)(v32 - v31);
      if (v32 <= v31)
        v33 = -0.0;
      v34 = v15 + v26 + v29 - v33;
      if (v16 < 0x50)
        goto LABEL_27;
      v37 = (_QWORD *)v11[7];
      v36 = v11 + 7;
      v35 = v37;
      if (v37)
      {
        do
        {
          v38 = v35;
          v35 = (_QWORD *)v35[1];
        }
        while (v35);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v36[2];
          v20 = *v38 == (_QWORD)v36;
          v36 = v38;
        }
        while (v20);
      }
      if (*(double *)(v38[4] + 56) < v34)
      {
LABEL_27:
        v39 = *(_QWORD *)(a5 + 64);
LABEL_38:
        v46 = sub_20B9569F0((char **)(a1 + 32));
        *(_QWORD *)v46 = a3;
        *((_QWORD *)v46 + 1) = a4;
        *((double *)v46 + 2) = v23;
        *((double *)v46 + 3) = v24;
        *((double *)v46 + 4) = v15;
        *((double *)v46 + 5) = v26;
        *((double *)v46 + 6) = v29;
        *((double *)v46 + 7) = v34;
        *((_QWORD *)v46 + 8) = v39;
        *((_QWORD *)v46 + 9) = v31;
        sub_20B910884(*(_QWORD *)(v5 + 8 * a2), (uint64_t)v46);
        return;
      }
    }
    return;
  }
  if (a2 && a4)
  {
    v23 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a3, a4) + 0.0;
    v24 = vabdd_f64(v14, v23);
    v15 = (*(double (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 64))(a1, a3, a4, 0.3);
    v26 = -(pow(*(double *)(*(_QWORD *)(a1 + 88) + 40 * v12 + 24) * 0.00666666667, 0.6) * fmin(v24 / v23 / 0.3, 1.0));
    v28 = *(double *)(a3 + 24);
    v11 = *(_QWORD **)(v5 + 8 * a2);
LABEL_17:
    v29 = *(double *)(a4 + 48) + v28 * 0.8;
    v30 = *(_QWORD *)(a4 + 72);
    goto LABEL_29;
  }
  v28 = *(double *)(a3 + 24);
  v26 = 0.0;
  if (a4)
  {
    v23 = 0.0;
    v24 = 0.0;
    v15 = 0.0;
    goto LABEL_17;
  }
  v30 = 0;
  v15 = 0.0;
  v29 = v28 * 0.8 + 0.0;
  v24 = 0.0;
  v23 = 0.0;
LABEL_29:
  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v12);
  v31 = *(_QWORD *)(a3 + 64) + v30;
  v41 = (double)(v40 - v31);
  if (v40 <= v31)
    v41 = -0.0;
  v34 = v29 + v15 + v26 - v41;
  if (v11[8] < 0x50uLL)
    goto LABEL_37;
  v44 = (_QWORD *)v11[7];
  v43 = v11 + 7;
  v42 = v44;
  if (v44)
  {
    do
    {
      v45 = v42;
      v42 = (_QWORD *)v42[1];
    }
    while (v42);
  }
  else
  {
    do
    {
      v45 = (_QWORD *)v43[2];
      v20 = *v45 == (_QWORD)v43;
      v43 = v45;
    }
    while (v20);
  }
  if (*(double *)(v45[4] + 56) < v34)
  {
LABEL_37:
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3, a4);
    goto LABEL_38;
  }
}

char *sub_20B9569F0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = a1[3];
  if (v2)
  {
    v4 = a1[4];
    v3 = a1[5];
    v5 = v4 - v2;
    if ((char *)(0xCCCCCCCCCCCCCCCDLL * ((v4 - v2) >> 4)) != v3)
      goto LABEL_22;
  }
  else
  {
    v5 = 80 * (_QWORD)a1[5];
  }
  v4 = (char *)malloc_type_malloc(v5, 0x106004000061B68uLL);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20B80CDD8();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_20B800BE8((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v8 = v14 + 8;
    v17 = *a1;
    v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v7 = v4;
    v8 = v7 + 8;
  }
  a1[1] = v8;
  a1[3] = v4;
LABEL_22:
  ++*((_DWORD *)a1 + 12);
  a1[4] = v4 + 80;
  return v4;
}

void sub_20B956B30(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  if (a3 == 1)
    return;
  v6 = (_QWORD **)(a1[1] + 8 * a3);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v8 = (*(uint64_t (**)(_QWORD *, _QWORD **, _QWORD *, uint64_t))(*a1 + 88))(a1, v6, a2, v7);
  if (!v8)
  {
    v15 = sub_20B910554(*v6, a2);
    if (!(_DWORD)v7)
      return;
    v16 = v15;
    v17 = *(uint64_t **)(*a2 + 32);
    v18 = *(uint64_t **)(*a2 + 40);
    while (v17 != v18)
    {
      v19 = *v17++;
      sub_20B956634((uint64_t)a1, a3, v16, *(_QWORD *)(v19 + 8), v19);
    }
    v20 = (_BYTE *)(v16 + 56);
    goto LABEL_22;
  }
  v9 = v8;
  v10 = *a2;
  v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_QWORD *)(v8 + 64);
  if (v11 <= v12)
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v10 + 64);
  v14 = *(double *)(v10 + 24);
  if (v14 > *(double *)(v8 + 24))
  {
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v10 + 16);
    *(double *)(v8 + 24) = v14;
LABEL_13:
    *(_QWORD *)(v8 + 64) = v13;
    goto LABEL_14;
  }
  if (v12 < v11)
    goto LABEL_13;
LABEL_14:
  if ((_DWORD)v7)
  {
    v20 = (_BYTE *)(v8 + 56);
    v21 = *(uint64_t **)(v10 + 32);
    if (!*(_BYTE *)(v8 + 56))
    {
      v22 = *(uint64_t **)(v10 + 40);
      if (v21 != v22)
      {
        do
        {
          v23 = *v21++;
          sub_20B956634((uint64_t)a1, a3, v9, *(_QWORD *)(v23 + 8), v23);
        }
        while (v21 != v22);
        v21 = *(uint64_t **)(v10 + 32);
      }
    }
    if (v21 != *(uint64_t **)(v10 + 40))
LABEL_22:
      *v20 = 1;
  }
}

void sub_20B956C94(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  __CFString *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  if (a4)
    v6 = (uint64_t *)(a1 + 136);
  else
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 16) - 8);
  v7 = *v6;
  v8 = *(_QWORD **)(v7 + 48);
  v9 = (_QWORD *)(v7 + 56);
  if (v8 != (_QWORD *)(v7 + 56))
  {
    v10 = 0;
    do
    {
      v11 = v8[4];
      v12 = sub_20B8BCC20((_QWORD *)v11);
      if (v12)
      {
        v13 = v12;
        sub_20B884D08(a3, v11, (uint64_t)v12, *(double *)(v11 + 56));
        CFRelease(v13);
        if (++v10 >= a2)
          break;
      }
      v14 = (_QWORD *)v8[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v8[2];
          v16 = *v15 == (_QWORD)v8;
          v8 = v15;
        }
        while (!v16);
      }
      v8 = v15;
    }
    while (v15 != v9);
  }
}

void sub_20B956D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B956D94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20B86D7F0((uint64_t)v15, a6);
  sub_20B955040(a1, a5, (uint64_t)v15);
  v11 = v16;
  if (v16 == v15)
  {
    v12 = 4;
    v11 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  *(_QWORD *)a1 = &off_24C462240;
  *(_QWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 200) = a3;
  if (a3)
    v13 = *(_QWORD *)(a3 + 32);
  else
    v13 = 0;
  *(_QWORD *)(a1 + 208) = v13;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = a4;
  return a1;
}

void sub_20B956E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B956EC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void **v9;

  *(_QWORD *)a1 = off_24C461078;
  v2 = (_QWORD *)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 184);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v5)
    sub_20B9587E8(a1 + 136, v5);
  v6 = *(void **)(a1 + 112);
  if (v6)
  {
    *(_QWORD *)(a1 + 120) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 88);
  if (v7)
  {
    *(_QWORD *)(a1 + 96) = v7;
    operator delete(v7);
  }
  sub_20B958794(a1 + 32);
  v9 = (void **)(a1 + 8);
  sub_20B9585CC(&v9);
  return a1;
}

void sub_20B956F70(_QWORD *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v2 = a1 + 1;
  v1 = (uint64_t *)a1[1];
  a1[28] = a1[27];
  sub_20B95860C((uint64_t)(a1 + 1), v1);
  sub_20B95515C((uint64_t)(v2 + 3));
  v2[11] = v2[10];
  v2[14] = v2[13];
}

void sub_20B956FB8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  _QWORD *v12;
  int *v13;
  int v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v4 = a2[1] - *a2;
  v5 = v4 >> 1;
  v6 = (v4 >> 1) + 1;
  v7 = a1[26];
  v8 = v6 >= v7;
  v9 = v6 - v7;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  if (v10 < v4 >> 1)
  {
    v11 = (void **)(a1 + 27);
    v12 = a1 + 29;
    v13 = (int *)a1[28];
    do
    {
      v14 = *(unsigned __int16 *)(*a2 + 2 * v10) + 1000;
      if ((unint64_t)v13 >= *v12)
      {
        v16 = (int *)*v11;
        v17 = ((char *)v13 - (_BYTE *)*v11) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_20B80CDD8();
        v19 = *v12 - (_QWORD)v16;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_20B8127BC((uint64_t)(a1 + 29), v20);
          v16 = (int *)a1[27];
          v13 = (int *)a1[28];
        }
        else
        {
          v21 = 0;
        }
        v22 = (int *)&v21[4 * v17];
        *v22 = v14;
        v15 = v22 + 1;
        while (v13 != v16)
        {
          v23 = *--v13;
          *--v22 = v23;
        }
        a1[27] = v22;
        a1[28] = v15;
        a1[29] = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v13 = v14;
        v15 = v13 + 1;
      }
      a1[28] = v15;
      ++v10;
      v13 = v15;
    }
    while (v10 != v5);
  }
}

unsigned __int16 *sub_20B9570FC(unsigned __int16 *result, _QWORD **a2, uint64_t *a3, uint64_t a4, int a5, float a6)
{
  unsigned __int16 *v9;
  int v10;
  char v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  int v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  unsigned __int16 *v25;

  v9 = result;
  v10 = *((_DWORD *)result + 60);
  if (v10 == 1)
  {
    v11 = 49;
    switch(a5)
    {
      case 711:
        v11 = 51;
        break;
      case 712:
        goto LABEL_18;
      case 713:
        break;
      case 714:
        v11 = 50;
        break;
      case 715:
        v11 = 52;
        break;
      default:
        if (a5 == 729)
          v11 = 53;
        else
LABEL_18:
          v11 = a5 + 49;
        break;
    }
  }
  else if (v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = a5;
  }
  v12 = *a3;
  v13 = *(unsigned __int16 **)(*a3 + 72);
  if (v13)
  {
    result = sub_20B9F17AC(*((_QWORD *)result + 24), v13, v11);
    if (result)
    {
      v14 = result;
      v15 = result[1];
      if (v10
        || v11 != 118
        || (v16 = &(&off_24C4A0588)[2 * v15], (v17 = v16[1]) != 0) && (*v16)[(_QWORD)v17 - 1] == 118)
      {
        v18 = v15 + 1000;
        v19 = *(_QWORD *)(v12 + 8) + 1;
        v20 = *(double *)(v12 + 24) + a6;
        v21 = *(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(*((_QWORD *)v9 + 11) + 40 * a4 + 32);
        v22 = operator new();
        v23 = *((_DWORD *)v9 + 60);
        *(_QWORD *)(v22 + 16) = a4;
        *(double *)(v22 + 24) = v20;
        *(_QWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        *(_BYTE *)(v22 + 56) = 0;
        *(_QWORD *)v22 = &off_24C461B78;
        *(_QWORD *)(v22 + 8) = v19;
        *(_QWORD *)(v22 + 64) = v21;
        *(_QWORD *)(v22 + 72) = v14;
        *(_DWORD *)(v22 + 80) = v18;
        *(_DWORD *)(v22 + 84) = v23;
        v24 = *a2;
        v25 = (unsigned __int16 *)v22;
        sub_20B910334(v24, &v25, 0);
        result = v25;
        v25 = 0;
        if (result)
          return (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_20B9572BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_20B9572E0(uint64_t a1, _QWORD **a2, uint64_t a3, int a4, float a5)
{
  int v9;
  char v10;
  unsigned __int16 *result;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  unsigned __int16 *v19;

  v9 = *(_DWORD *)(a1 + 240);
  if (v9 == 1)
  {
    v10 = 49;
    switch(a4)
    {
      case 711:
        v10 = 51;
        break;
      case 712:
        goto LABEL_14;
      case 713:
        break;
      case 714:
        v10 = 50;
        break;
      case 715:
        v10 = 52;
        break;
      default:
        if (a4 == 729)
          v10 = 53;
        else
LABEL_14:
          v10 = a4 + 49;
        break;
    }
  }
  else if (v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = a4;
  }
  result = *(unsigned __int16 **)(a1 + 192);
  v12 = **(unsigned __int16 ***)result;
  if (v12)
  {
    result = sub_20B9F17AC((uint64_t)result, v12, v10);
    if (result)
    {
      v13 = result;
      v14 = result[1] + 1000;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 40 * a3 + 32);
      v16 = operator new();
      v17 = *(_DWORD *)(a1 + 240);
      *(_QWORD *)(v16 + 16) = a3;
      *(double *)(v16 + 24) = a5;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_BYTE *)(v16 + 56) = 0;
      *(_QWORD *)v16 = &off_24C461B78;
      *(_QWORD *)(v16 + 8) = 1;
      *(_QWORD *)(v16 + 64) = v15;
      *(_QWORD *)(v16 + 72) = v13;
      *(_DWORD *)(v16 + 80) = v14;
      *(_DWORD *)(v16 + 84) = v17;
      v18 = *a2;
      v19 = (unsigned __int16 *)v16;
      sub_20B910334(v18, &v19, 0);
      result = v19;
      v19 = 0;
      if (result)
        return (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_20B95744C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B957470(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = ***(_QWORD ***)(a1 + 192);
  v5 = operator new();
  v6 = *(_DWORD *)(a1 + 240);
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 41) = 0u;
  *(_QWORD *)v5 = &off_24C461B78;
  *(_QWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = v4;
  *(_DWORD *)(v5 + 80) = 1;
  *(_DWORD *)(v5 + 84) = v6;
  v10 = v5;
  v7 = sub_20B910334(a2, &v10, 1);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v7;
}

void sub_20B957524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B957548(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = ***(_QWORD ***)(a1 + 192);
  v5 = operator new();
  v6 = *(_DWORD *)(a1 + 240);
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 41) = 0u;
  *(_QWORD *)v5 = &off_24C461B78;
  *(_QWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = v4;
  *(_DWORD *)(v5 + 80) = 2;
  *(_DWORD *)(v5 + 84) = v6;
  v10 = v5;
  v7 = sub_20B910334(a2, &v10, 0);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v7;
}

void sub_20B957600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

double sub_20B957624(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  int v6;
  char v7;
  char **v8;
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;
  double v13;
  uint64_t v14;
  int v15;
  char v16;
  char **v17;
  unint64_t v18;
  char v19;
  char **v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v28[2];
  char v29;

  v5 = *(_QWORD *)(a2 + 72);
  if (v5)
    v5 = *(unsigned __int16 *)(v5 + 2);
  v6 = *(_DWORD *)(a1 + 240);
  if (v6 == 2)
  {
    v10 = 0;
    v11 = &off_24C4A2768;
LABEL_8:
    v8 = &v11[2 * v5];
    v9 = (unint64_t)v8[1];
    v7 = 1;
    goto LABEL_9;
  }
  if (v6 != 1)
  {
    v10 = 0;
    v11 = &off_24C4A0588;
    goto LABEL_8;
  }
  v7 = 0;
  v8 = (char **)(&off_24C4A65A8 + 2 * v5);
  v9 = 2 * (_QWORD)v8[1];
  v10 = 1;
LABEL_9:
  v12 = *v8;
  v28[0] = (uint64_t)*v8;
  v28[1] = v9;
  v29 = v10;
  v13 = sub_20B880838(v28, *(_BYTE **)(a1 + 152));
  if (!a3 || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3) & 1) != 0)
    return v13;
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 72);
  if (v14)
    v14 = *(unsigned __int16 *)(v14 + 2);
  v15 = *(_DWORD *)(a1 + 240);
  if (v15 == 2)
  {
    v19 = 0;
    v20 = &off_24C4A2768;
LABEL_18:
    v17 = &v20[2 * v14];
    v18 = (unint64_t)v17[1];
    v16 = 1;
    goto LABEL_19;
  }
  if (v15 != 1)
  {
    v19 = 0;
    v20 = &off_24C4A0588;
    goto LABEL_18;
  }
  v16 = 0;
  v17 = (char **)(&off_24C4A65A8 + 2 * v14);
  v18 = 2 * (_QWORD)v17[1];
  v19 = 1;
LABEL_19:
  v21 = v9 >> v10;
  if (v9 >> v10)
  {
    if ((v7 & 1) != 0)
      LOWORD(v21) = *v12;
    else
      LOWORD(v21) = *(_WORD *)v12;
  }
  v22 = v13 + a3[2];
  v23 = v18 >> v19;
  if (v23)
  {
    v24 = *v17;
    v25 = (v23 - 1) << v19;
    if ((v16 & 1) != 0)
      v26 = v24[v25];
    else
      v26 = *(_WORD *)&v24[v25];
  }
  else
  {
    v26 = 0;
  }
  return v22 + sub_20B8807F4((unsigned __int16)v21, v26, *(_BYTE **)(a1 + 152));
}

double sub_20B9577D0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  double v6;

  v5 = *(double *)(a3 + 32);
  sub_20B964D14(a2, *(_QWORD *)(a1 + 200), (_QWORD *)a3, (int **)(a1 + 216));
  return v5 + v6 + a4;
}

uint64_t sub_20B95780C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  if (a3)
  {
    v3 = *(_QWORD *)(a2 + 72);
    if (v3)
      v3 = *(unsigned __int16 *)(v3 + 2);
    return v3 + 542 * *(_QWORD *)(a3 + 64);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 72);
    if (v5)
      return *(unsigned __int16 *)(v5 + 2);
    else
      return 0;
  }
}

uint64_t sub_20B957848(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = a2[2];
  if (v2 > 1)
    return 1;
  if (v2)
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(*a2 + 32) + 32))(**(_QWORD **)(*a2 + 32));
  return 0;
}

uint64_t sub_20B957880(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v9[0] = &off_24C46AA28;
  v9[1] = a3;
  v10 = v9;
  v5 = sub_20B910BF0(v4, a4, (uint64_t)v9);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

void sub_20B957924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_20B95795C(uint64_t a1, int a2)
{
  uint64_t v2;
  __int16 *v3;
  BOOL v5;

  if (*(_DWORD *)(a1 + 240) != 1)
    return 0;
  v2 = 0;
  while ((unsigned __int16)word_20BA4B1C4[v2] != a2)
  {
    if (++v2 == 5)
    {
      v3 = 0;
      goto LABEL_8;
    }
  }
  v3 = &word_20BA4B1C4[v2];
LABEL_8:
  if (v3)
    v5 = (char *)v3 - (char *)word_20BA4B1C4 == -2;
  else
    v5 = 1;
  return !v5;
}

uint64_t sub_20B9579B4(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  const __CFLocale *v9;
  int v10;
  __CFDictionary *Mutable;
  const void *v12;
  const void *RootCursor;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20B86D7F0((uint64_t)v15, a4);
  sub_20B955040(a1, a3, (uint64_t)v15);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  *(_QWORD *)a1 = &off_24C461DE0;
  v9 = CFLocaleCreate(0, a2);
  v10 = sub_20B8D0E78(v9);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 208) = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F198], a2);
  v12 = (const void *)LXLexiconCreate();
  sub_20B8E7698((const void **)(a1 + 200), v12);
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  sub_20B8955E0((const void **)(a1 + 208), RootCursor);
  if (Mutable)
    CFRelease(Mutable);
  return a1;
}

void sub_20B957B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B957BE4(uint64_t result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  _QWORD **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  if (a2)
  {
    v11 = (_QWORD **)result;
    if (LXCursorHasEntries())
    {
      return LXCursorEnumerateEntries();
    }
    else
    {
      v12 = operator new();
      sub_20B964F28(v12, a2, 0, 0, a3, a4, a5, a6);
      v13 = *v11;
      v14 = v12;
      sub_20B910334(v13, &v14, 0);
      result = v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_20B957CF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 72);
  *(_QWORD *)(v1 - 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B957D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v4 = operator new();
  sub_20B964F28(v4, *(CFTypeRef *)(a1 + 32), a2, 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(double *)(a1 + 56));
  v5 = **(_QWORD ***)(a1 + 72);
  v7 = v4;
  sub_20B910334(v5, &v7, 0);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20B957DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B957E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  const void *v10;

  v10 = (const void *)LXCursorCreateByAdvancingWithUTF16();
  sub_20B957BE4(a2, v10, *(_QWORD *)(*(_QWORD *)a3 + 8) + 1, a4, *(_QWORD *)(*(_QWORD *)a3 + 64) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 40 * a4 + 32), *(double *)(*(_QWORD *)a3 + 24) + a5);
  if (v10)
    CFRelease(v10);
}

void sub_20B957ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B8955E0(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B957EEC(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  const void *v8;

  v8 = (const void *)LXCursorCreateByAdvancingWithUTF16();
  sub_20B957BE4(a2, v8, 1, a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 40 * a3 + 32), a4);
  if (v8)
    CFRelease(v8);
}

void sub_20B957F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B8955E0(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B957F98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = operator new();
  sub_20B964F28(v4, *(CFTypeRef *)(a1 + 208), 0, 1, 1, 0, 0, 0.0);
  v8 = v4;
  v5 = sub_20B910334(a2, &v8, 1);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v5;
}

void sub_20B958038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B95807C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = operator new();
  sub_20B964F28(v4, *(CFTypeRef *)(a1 + 208), 0, 0, 1, 0, 0, 0.0);
  v8 = v4;
  v5 = sub_20B910334(a2, &v8, 0);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v5;
}

void sub_20B95811C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B958160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, float a7)
{
  sub_20B957E18(a1, a2, a3, a4, a7);
  if ((a6 & 1) == 0 && *(_DWORD *)(a1 + 192) == 6)
  {
    if (sub_20B8F23DC(a5))
      sub_20B957E18(a1, a2, a3, a4, a7);
  }
}

void sub_20B9581FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, float a6)
{
  sub_20B957EEC(a1, a2, a3, a6);
  if ((a5 & 1) == 0 && *(_DWORD *)(a1 + 192) == 6)
  {
    if (sub_20B8F23DC(a4))
      sub_20B957EEC(a1, a2, a3, a6);
  }
}

double sub_20B958290(uint64_t a1, uint64_t a2, double *a3)
{
  const __CFString *v5;
  _BYTE *v7;
  double v8;
  CFIndex Length;
  CFIndex v10;
  CFIndex v11;
  int CharacterAtIndex;
  int v13;
  double v14;
  const __CFString *v15;
  double v16;
  const __CFString *v17;
  CFIndex v18;
  int v19;
  double v20;
  _BYTE *v21;
  double v22;

  v5 = *(const __CFString **)(a2 + 112);
  if (!v5)
  {
    LODWORD(v15) = 0;
    v8 = 0.0;
    goto LABEL_14;
  }
  v7 = *(_BYTE **)(a1 + 152);
  v8 = 0.0;
  if (CFStringGetLength(*(CFStringRef *)(a2 + 112)))
  {
    Length = CFStringGetLength(v5);
    v10 = Length - 2;
    if (Length >= 2)
    {
      v11 = 0;
      do
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(v5, v11++);
        v13 = CFStringGetCharacterAtIndex(v5, v11);
        v14 = 0.0;
        if (v7 && *v7)
          v14 = sub_20B8D5108((uint64_t)v7, CharacterAtIndex, v13);
        v8 = v8 + v14;
      }
      while (v11 - 1 != v10);
    }
  }
  v15 = *(const __CFString **)(a2 + 112);
  if (!v15)
  {
LABEL_14:
    if (!a3)
      return v8;
    goto LABEL_15;
  }
  if (CFStringGetLength(v15))
  {
    LODWORD(v15) = CFStringGetCharacterAtIndex(v15, 0);
    if (!a3)
      return v8;
  }
  else
  {
    LODWORD(v15) = 0;
    if (!a3)
      return v8;
  }
LABEL_15:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3) & 1) == 0)
  {
    v16 = a3[2];
    v17 = *(const __CFString **)(*(_QWORD *)a3 + 112);
    if (v17 && CFStringGetLength(v17))
    {
      v18 = CFStringGetLength(v17);
      v19 = CFStringGetCharacterAtIndex(v17, v18 - 1);
    }
    else
    {
      v19 = 0;
    }
    v20 = v8 + v16;
    v21 = *(_BYTE **)(a1 + 152);
    v22 = 0.0;
    if (v21 && *v21)
      v22 = sub_20B8D5108((uint64_t)v21, (int)v15, v19);
    return v20 + v22;
  }
  return v8;
}

double sub_20B958410(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(double *)(a4 + 32) + *(double *)(a3 + 96) + a1;
}

uint64_t sub_20B958424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
    v3 = *(_QWORD *)(a3 + 64);
  else
    v3 = 0;
  return *(_QWORD *)(a2 + 88) + v3;
}

uint64_t sub_20B958440(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = a2[2];
  if (v2 > 1)
    return 1;
  if (v2 == 1)
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(*a2 + 32) + 32))(**(_QWORD **)(*a2 + 32));
  return 0;
}

uint64_t sub_20B958478(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v9[0] = &off_24C46A9D0;
  v9[1] = a3;
  v10 = v9;
  v5 = sub_20B910BF0(v4, a4, (uint64_t)v9);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

void sub_20B95851C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_20B958554(uint64_t a1, __int16 a2)
{
  return (a2 & 0xFFFC) == 0xE48 && *(_DWORD *)(a1 + 192) == 6;
}

uint64_t sub_20B958574()
{
  return 0;
}

void sub_20B958580(_QWORD *a1)
{
  sub_20B9586C4(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9585A8(uint64_t a1)
{
  sub_20B958700(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9585CC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B95860C((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_20B95860C(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(uint64_t **)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        result = sub_20B9587E8((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_20B95866C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      sub_20B9587E8(i - 8, v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B9586C4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C462240;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  return sub_20B956EC0((uint64_t)a1);
}

uint64_t sub_20B958700(uint64_t a1)
{
  const void **v2;

  *(_QWORD *)a1 = &off_24C461DE0;
  v2 = (const void **)(a1 + 200);
  sub_20B8955E0((const void **)(a1 + 208), 0);
  sub_20B8E7698(v2, 0);
  return sub_20B956EC0(a1);
}

_QWORD *sub_20B958748(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[5] = a2;
  sub_20B95515C((uint64_t)a1);
  return a1;
}

void sub_20B958778(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B958794(uint64_t a1)
{
  void **v2;
  void *v3;

  v2 = *(void ***)a1;
  if (*(_QWORD *)a1 < *(_QWORD *)(a1 + 8))
  {
    do
    {
      v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < *(_QWORD *)(a1 + 8));
    v2 = *(void ***)a1;
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B9587E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    sub_20B8292CC(a2 + 48, *(_QWORD **)(a2 + 56));
    v4 = (void **)(a2 + 24);
    sub_20B882394(&v4);
    v4 = (void **)a2;
    sub_20B882394(&v4);
    return MEMORY[0x20BD39CB0](a2, 0x1020C409D1DDB13);
  }
  return result;
}

void sub_20B958854()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B958868(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C49F3F0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B95889C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C49F3F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9588B8(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_20B9588CC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EBF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B958908()
{
  return &unk_24C45EBF0;
}

void sub_20B958918()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B95892C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24C469690;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B958984(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C469690;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

_QWORD *sub_20B9589C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;
  BOOL v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  float **v13;
  float *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unint64_t *v17;

  v4 = *(_QWORD **)(a1 + 8);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  result = sub_20B891738(*(_QWORD **)(a1 + 64), &v16);
  if (result)
  {
    if (!*((_BYTE *)result + 24))
      return result;
    goto LABEL_12;
  }
  if (v16 == *(_QWORD *)(a1 + 48))
  {
    v6 = 1;
  }
  else
  {
    v7 = v4[11];
    v8 = (double *)(v7 + 40 * v16);
    v9 = (double *)(v7 + 40 * *(_QWORD *)(a1 + 40));
    v10 = hypot(*v9 - *v8, v9[1] - v8[1]);
    v11 = v9[3] - v8[3];
    v6 = v11 - v10 <= 140.0 && (v11 - v10 <= 70.0 || v11 <= v10 * 2.2);
  }
  v12 = *(_QWORD *)(a1 + 64);
  v17 = &v16;
  result = sub_20B958B68(v12, &v16, (uint64_t)&unk_20BA37B7A, &v17);
  *((_BYTE *)result + 24) = v6;
  if (v6)
  {
LABEL_12:
    v13 = *(float ***)(a1 + 72);
    v14 = *v13;
    v15 = (unsigned __int16 *)v13[1];
    while (v14 != (float *)v15)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))(*v4 + 40))(v4, *(_QWORD *)(a1 + 24), a2, *(_QWORD *)(a1 + 40), *(unsigned __int16 *)v14, *(unsigned __int8 *)(a1 + 80), v14[1]);
      v14 += 2;
    }
  }
  return result;
}

uint64_t sub_20B958B20(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B958B5C()
{
  return &unk_24C45EC00;
}

_QWORD *sub_20B958B68(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_BYTE *)v11 + 24) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20B828960(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_20B958D74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B958D8C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B958DA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24C49F460;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_20B958DF0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C49F460;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B958E28(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(*a2 + 16);
  v8 = *(_QWORD *)(v6 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = *(_QWORD *)(*a2 + 16);
      if (v8 <= v7)
        v2 = v7 % v8;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)v6 + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              goto LABEL_40;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = v7;
  *((_BYTE *)v11 + 24) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(v6 + 24) + 1);
  v14 = *(float *)(v6 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20B828960(v6, v18);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)v6;
  v20 = *(_QWORD **)(*(_QWORD *)v6 + 8 * v2);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v2) = v6 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)v6 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(v6 + 24);
LABEL_40:
  if (*((_BYTE *)v11 + 24))
    v22 = 1;
  else
    v22 = *(_BYTE *)(a1 + 64) == 0;
  if (v22)
    sub_20B956B30(v5, a2, *(_QWORD *)(a1 + 32));
}

void sub_20B959068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95907C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49F4C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9590B8()
{
  return &unk_24C49F4C0;
}

void sub_20B9590C8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9590DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4696E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B959114(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4696E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B959134(uint64_t a1, _QWORD *a2)
{
  sub_20B956B30(*(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 16));
}

uint64_t sub_20B959140(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B95917C()
{
  return &unk_24C45EC10;
}

void sub_20B95918C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9591A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C469740;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9591E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C469740;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B959208(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  if (!*(_BYTE *)(*a2 + 56))
  {
    v3 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(*a2 + 8);
    if (v3 >= 0)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v3);
      v6 = *(_QWORD **)(v5 + 48);
      v7 = (_QWORD *)(v5 + 56);
      if (v6 != (_QWORD *)(v5 + 56))
      {
        do
        {
          sub_20B956634(v4, *(_QWORD *)(a1 + 16), *a2, v6[4], 0);
          v9 = (_QWORD *)v6[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v6[2];
              v11 = *v10 == (_QWORD)v6;
              v6 = v10;
            }
            while (!v11);
          }
          v6 = v10;
        }
        while (v10 != v7);
      }
    }
  }
}

uint64_t sub_20B9592C4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B959300()
{
  return &unk_24C45EC20;
}

void sub_20B959310()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B959324(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46A870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B959364(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A870;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B95938C(uint64_t a1, uint64_t a2, const __CFString **a3)
{
  const __CFString *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;

  v3 = *a3;
  v4 = sub_20B9547EC();
  sub_20B8D154C(v3, &v12);
  v5 = v12;
  result = sub_20B954D48((uint64_t)v4, 0x4000u, (uint64_t)"%s(%.2f, %.2f, %.2f, %.2f, %.2f, %ld/%ld, %.2f, %.2f)\n", v6, v7, v8, v9, v10, (uint64_t)v12);
  if (v5)
    JUMPOUT(0x20BD39C80);
  return result;
}

void sub_20B95947C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9594A4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9594E0()
{
  return &unk_24C45EF40;
}

void sub_20B9594F0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B959504(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46AA28;
  result[1] = v3;
  return result;
}

uint64_t sub_20B959538(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46AA28;
  a2[1] = v2;
  return result;
}

BOOL sub_20B959554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a1 + 8);
  return *(_DWORD *)(*(_QWORD *)a2 + 80) == *(_DWORD *)(v2 + 80)
      && *(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(v2 + 8) + 1;
}

uint64_t sub_20B959590(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9595CC()
{
  return &unk_24C45EF90;
}

void sub_20B9595DC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9595F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A9D0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B959624(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A9D0;
  a2[1] = v2;
  return result;
}

BOOL sub_20B959640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a1 + 8);
  return *(_QWORD *)(*(_QWORD *)a2 + 88) == *(_QWORD *)(v2 + 88)
      && *(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(v2 + 8) + 1;
}

uint64_t sub_20B95967C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9596B8()
{
  return &unk_24C45EF80;
}

uint64_t sub_20B9596C4(uint64_t a1, char *__src, unint64_t a3, void *a4, unint64_t a5, char a6, int a7, int a8, float a9, int a10, int a11, char a12)
{
  unsigned __int16 *v21;
  CFStringRef v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  BOOL v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  __int16 v38;
  char *v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  _BYTE *v62;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  void *__p;
  __int16 v74;
  unsigned __int8 v75;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C462648;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C462878;
  v21 = (unsigned __int16 *)(a1 + 32);
  if (a3)
    sub_20B877ED0((_QWORD *)(a1 + 32), __src, a3);
  else
    sub_20B87C9E0((_BYTE *)(a1 + 32), byte_20BA93B9E);
  *(_QWORD *)(a1 + 56) = CFStringCreateWithCharacters(0, (const UniChar *)__src, a3);
  if (a5)
    sub_20B877ED0((_QWORD *)(a1 + 64), a4, a5);
  else
    sub_20B87C9E0((_BYTE *)(a1 + 64), byte_20BA93B9E);
  v22 = CFStringCreateWithCharacters(0, (const UniChar *)a4, a5);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 88) = v22;
  *(float *)(a1 + 96) = a9;
  *(_QWORD *)(a1 + 104) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = a7;
  *(_DWORD *)(a1 + 140) = a8;
  *(_DWORD *)(a1 + 144) = a10;
  *(_DWORD *)(a1 + 148) = a11;
  *(_BYTE *)(a1 + 152) = 1;
  *(_BYTE *)(a1 + 153) = a6;
  v23 = (char **)(a1 + 160);
  *(_BYTE *)(a1 + 154) = 0;
  sub_20B8D74E4((_QWORD *)(a1 + 160), 1uLL);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v24 + 32) = 0;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  if (!a3 || *(_DWORD *)(a1 + 140) != 4 || a12)
  {
    if (!a12)
      goto LABEL_30;
    v29 = *(char *)(a1 + 55);
    v30 = v29 < 0;
    v31 = *(unsigned __int16 **)(a1 + 32);
    if (v29 >= 0)
      v31 = v21;
    v32 = *(unsigned __int8 *)(a1 + 55);
    if (v30)
      v32 = *(_QWORD *)(a1 + 40);
    if (v32)
    {
      v33 = &v31[v32];
      v34 = v31;
      while (2)
      {
        v35 = 0;
        while (*(unsigned __int16 *)&a112141718191a1[v35] != *v34)
        {
          v35 += 2;
          if (v35 == 38)
          {
            v46 = v31;
            while (2)
            {
              v47 = 0;
              while (*(unsigned __int16 *)&aO1p1q1r1s1t1u1_0[v47] != *v46)
              {
                v47 += 2;
                if (v47 == 24)
                {
                  v48 = 2 * v32 - 2;
                  do
                  {
                    v49 = *v31++;
                    v50 = (unsigned __int16)(v49 + 10332);
                    v51 = v50 >= 0xD45C;
                    v36 = v50 < 0xD45C;
                    v52 = !v51 || v48 == 0;
                    v48 -= 2;
                  }
                  while (!v52);
                  goto LABEL_59;
                }
              }
              v36 = 0;
              if (++v46 != v33)
                continue;
              goto LABEL_59;
            }
          }
        }
        v36 = 0;
        if (++v34 != v33)
          continue;
        break;
      }
    }
    else
    {
LABEL_30:
      v36 = 0;
    }
LABEL_59:
    v39 = *(char **)(a1 + 160);
    v39[38] = v36;
    if (*(char *)(a1 + 55) < 0)
      v53 = *(_QWORD *)(a1 + 40);
    else
      LOWORD(v53) = *(unsigned __int8 *)(a1 + 55);
    *((_WORD *)v39 + 12) = v53;
    LODWORD(v53) = *(char *)(a1 + 87);
    if ((v53 & 0x80000000) != 0)
      v53 = *(_QWORD *)(a1 + 72);
    else
      LOWORD(v53) = v53;
    *((_WORD *)v39 + 13) = v53;
    LODWORD(v53) = *(char *)(a1 + 87);
    if ((v53 & 0x80000000) != 0)
      v53 = *(_QWORD *)(a1 + 72);
    else
      LOWORD(v53) = v53;
    *((_WORD *)v39 + 14) = v53;
    goto LABEL_86;
  }
  v25 = 2 * a3;
  v26 = __src;
  while ((unsigned __int16)((unsigned __int16)(*(_WORD *)v26 + 21504) >> 2) >= 0xAE9u
       && (unsigned __int16)(*(_WORD *)v26 - 12593) >= 0x33u)
  {
    v26 += 2;
    v25 -= 2;
    if (!v25)
    {
      v26 = &__src[2 * a3];
      break;
    }
  }
  if (*(char *)(a1 + 55) < 0)
  {
    v28 = *(unsigned __int16 **)(a1 + 32);
    v27 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v27 = *(unsigned __int8 *)(a1 + 55);
    v28 = v21;
  }
  sub_20B9DEF34(v28, v27, &__p);
  v37 = v26 - __src;
  if ((char)v75 < 0)
  {
    v38 = v74;
    operator delete(__p);
  }
  else
  {
    v38 = v75;
  }
  v39 = *v23;
  (*v23)[38] = 0;
  if (!(unsigned __int16)(v37 >> 1))
  {
    if (*(char *)(a1 + 55) < 0)
      v45 = *(_QWORD *)(a1 + 40);
    else
      LOWORD(v45) = *(unsigned __int8 *)(a1 + 55);
    *((_WORD *)v39 + 12) = v45;
    LODWORD(v45) = *(char *)(a1 + 87);
    if ((v45 & 0x80000000) != 0)
      v45 = *(_QWORD *)(a1 + 72);
    else
      LOWORD(v45) = v45;
    *((_WORD *)v39 + 13) = v45;
    *((_WORD *)v39 + 14) = v38;
LABEL_86:
    v62 = v39 + 37;
LABEL_87:
    *v62 |= 1u;
    *(_DWORD *)v39 = 0;
    return a1;
  }
  v40 = v37 >> 1;
  *((_WORD *)v39 + 12) = v37 >> 1;
  *((_WORD *)v39 + 13) = v37 >> 1;
  *((_WORD *)v39 + 14) = v37 >> 1;
  v39[37] |= 1u;
  v41 = *(unsigned __int16 **)(a1 + 32);
  if (*(char *)(a1 + 55) >= 0)
    v41 = v21;
  if (v41)
    v42 = (unsigned __int16)(v37 >> 1);
  else
    v42 = 0;
  if (v42)
  {
    v43 = 2 * v42;
    while (*v41 - 48 < 0xA)
    {
      ++v41;
      v43 -= 2;
      if (!v43)
        goto LABEL_45;
    }
    v44 = 1;
  }
  else
  {
LABEL_45:
    v44 = 5;
  }
  *(_DWORD *)v39 = v44;
  if ((unsigned __int16)(v37 >> 1) != a3)
  {
    v54 = *(_QWORD *)(a1 + 176);
    v55 = *(_QWORD *)(a1 + 168);
    if (v55 >= v54)
    {
      v72 = v38;
      v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - (_QWORD)v39) >> 3);
      if (v57 + 1 > 0x666666666666666)
        sub_20B8821D4();
      v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - (_QWORD)v39) >> 3);
      v59 = 2 * v58;
      if (2 * v58 <= v57 + 1)
        v59 = v57 + 1;
      if (v58 >= 0x333333333333333)
        v60 = 0x666666666666666;
      else
        v60 = v59;
      if (v60)
        v61 = (char *)sub_20B882310(a1 + 176, v60);
      else
        v61 = 0;
      v64 = &v61[40 * v57];
      v65 = &v61[40 * v60];
      *((_QWORD *)v64 + 4) = 0;
      *(_OWORD *)v64 = 0u;
      *((_OWORD *)v64 + 1) = 0u;
      v56 = v64 + 40;
      v67 = *(char **)(a1 + 160);
      v66 = *(char **)(a1 + 168);
      if (v66 == v67)
      {
        v38 = v72;
      }
      else
      {
        v38 = v72;
        do
        {
          v68 = *(_OWORD *)(v66 - 40);
          v69 = *(_OWORD *)(v66 - 24);
          *((_QWORD *)v64 - 1) = *((_QWORD *)v66 - 1);
          *(_OWORD *)(v64 - 24) = v69;
          *(_OWORD *)(v64 - 40) = v68;
          v64 -= 40;
          v66 -= 40;
        }
        while (v66 != v67);
        v66 = *v23;
      }
      *(_QWORD *)(a1 + 160) = v64;
      *(_QWORD *)(a1 + 168) = v56;
      *(_QWORD *)(a1 + 176) = v65;
      if (v66)
        operator delete(v66);
    }
    else
    {
      *(_QWORD *)(v55 + 32) = 0;
      *(_OWORD *)v55 = 0u;
      *(_OWORD *)(v55 + 16) = 0u;
      v56 = (char *)(v55 + 40);
    }
    *(_QWORD *)(a1 + 168) = v56;
    *((_QWORD *)v56 - 1) = 0;
    *(_OWORD *)(v56 - 24) = 0u;
    *(_OWORD *)(v56 - 40) = 0u;
    v70 = *(_QWORD *)(a1 + 168);
    v39 = (char *)(v70 - 40);
    *(_BYTE *)(v70 - 2) = 0;
    *(_WORD *)(v70 - 16) = a3 - v40;
    if (*(char *)(a1 + 87) < 0)
      v71 = *(_QWORD *)(a1 + 72);
    else
      LOWORD(v71) = *(unsigned __int8 *)(a1 + 87);
    *(_WORD *)(v70 - 14) = v71 - v40;
    *(_WORD *)(v70 - 12) = v38 - (v37 >> 1);
    v62 = (_BYTE *)(v70 - 3);
    goto LABEL_87;
  }
  return a1;
}

void sub_20B959C2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  const void **v5;
  const void **v6;
  void *v8;

  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 168) = v8;
    operator delete(v8);
  }
  sub_20B88B74C(v6, 0);
  sub_20B88AE28(v5, 0);
  sub_20B87E150((const void **)(v1 + 88), 0);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  sub_20B87E150((const void **)(v1 + 56), 0);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20B959CC0(uint64_t a1, char *a2, CFIndex capacity)
{
  uint64_t v3;
  __CFArray *Mutable;
  CFNumberRef v7;

  v3 = capacity;
  Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x24BDBD690]);
  if (v3 >= 1)
  {
    do
    {
      v7 = CFNumberCreate(0, kCFNumberCFIndexType, a2);
      CFArrayAppendValue(Mutable, v7);
      if (v7)
        CFRelease(v7);
      a2 += 8;
      --v3;
    }
    while (v3);
  }
  sub_20B88B74C((const void **)(a1 + 128), Mutable);
}

void sub_20B959D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88AE28((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFLocaleRef sub_20B959D7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v6;
  int v7;
  const __CFString *v8;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 168) - v2;
  v4 = v3 && 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) > a2;
  if (!v4 || *(_BYTE *)(v2 + 38) == 1)
    return 0;
  v6 = *(_DWORD *)(v2 + 40 * a2);
  if (v6 == 1)
  {
    v8 = CFSTR("en_US");
  }
  else
  {
    if (v6 == 5 && v3 == 40)
      return 0;
    v7 = *(_DWORD *)(a1 + 140);
    if (v7 == 4)
    {
      v8 = CFSTR("ko_KR");
      return CFLocaleCreate(0, v8);
    }
    if (v7 != 6)
      return 0;
    v8 = CFSTR("th_TH");
  }
  return CFLocaleCreate(0, v8);
}

void sub_20B959E14(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  const __CFAllocator *v9;
  uint64_t v10;
  CFStringRef v11;
  uint64_t v12;
  CFStringRef v13;
  CFRange v14;

  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 != v7)
  {
    v8 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v10 = *(unsigned __int16 *)(v6 + 24);
      if ((*(_BYTE *)(v6 + 37) & 0x10) != 0)
      {
        v14.location = v8;
        v14.length = *(unsigned __int16 *)(v6 + 24);
        v11 = CFStringCreateWithSubstring(v9, v4, v14);
        v13 = v11;
        v12 = *(_QWORD *)(a2 + 24);
        if (!v12)
          sub_20B80BB74();
        (*(void (**)(uint64_t, CFStringRef *))(*(_QWORD *)v12 + 48))(v12, &v13);
        if (v11)
          CFRelease(v11);
      }
      v8 += v10;
      v6 += 40;
    }
    while (v6 != v7);
  }
}

void sub_20B959EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B87E150(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B959F14(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  CFIndex v10;
  uint64_t v11;
  CFIndex v12;
  CFStringRef v13;
  NSObject *v14;
  const __CFString *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  int v19;
  double v20;
  double v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  CFStringRef v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  double v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  CFRange v50;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9A7C5C(a2);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    return;
  v9 = sub_20B9A7C5C(a2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(const __CFString **)(a1 + 8);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v26 = v16;
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) < 32)
      v17 = 63;
    else
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1))
      v18 = "prefix";
    else
      v18 = "exact";
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v20 = *(float *)(a1 + 96);
    v21 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
    if (v21 >= -100.0)
      v22 = *(_QWORD *)&v21;
    else
      v22 = 0xC059000000000000;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    v24 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 136317698;
    v28 = a3;
    v29 = 2048;
    v30 = v15;
    v31 = 2112;
    v32 = v26;
    v33 = 2112;
    v34 = v25;
    v35 = 1024;
    v36 = v17;
    v37 = 2080;
    v38 = v18;
    v39 = 1024;
    v40 = v19;
    v41 = 2048;
    v42 = v20;
    v43 = 2048;
    v44 = v22;
    v45 = 1024;
    v46 = v23;
    v47 = 2048;
    v48 = v24;
    _os_log_debug_impl(&dword_20B7F7000, v9, OS_LOG_TYPE_DEBUG, "%s (%ld): [%@] (%@), type: %c, length: %s, cost: %d, geometry: %.3f, prob: %3.3lf, autocorrected: %d, rank: %ld", buf, 0x64u);
    if (!a4)
      return;
  }
  else if (!a4)
  {
    return;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11);
      v50.location = v10;
      v50.length = v12;
      v13 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 56), v50);
      v14 = sub_20B9A7C5C(a2);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        break;
      if (v13)
        goto LABEL_8;
LABEL_9:
      v10 += v12;
      if (++v11 >= (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
        return;
    }
    *(_DWORD *)buf = 134218242;
    v28 = v11 + 1;
    v29 = 2112;
    v30 = v13;
    _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "   #%lu: [%@]\n", buf, 0x16u);
    if (!v13)
      goto LABEL_9;
LABEL_8:
    CFRelease(v13);
    goto LABEL_9;
  }
}

void sub_20B95A238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B95A268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;

  v2 = operator new();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = off_24C462648;
  *(_QWORD *)(v2 + 8) = v4;
  *(_QWORD *)(v2 + 24) = &unk_24C462878;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20B88DD4C((_BYTE *)(v2 + 32), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(v2 + 48) = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v3 + 56) = 0;
  if (*(char *)(a1 + 87) < 0)
  {
    sub_20B88DD4C((_BYTE *)(v3 + 64), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v3 + 80) = *(_QWORD *)(a1 + 80);
  }
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a1 + 96);
  *(_QWORD *)(v3 + 104) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(v3 + 112) = *(_DWORD *)(a1 + 112);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 136);
  *(_BYTE *)(v3 + 152) = *(_BYTE *)(a1 + 152);
  *(_WORD *)(v3 + 153) = *(_WORD *)(a1 + 153);
  v5 = *(const void **)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  sub_20B882248((_QWORD *)(v3 + 160), v5, v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)v5) >> 3));
  v7 = *(const void **)(a1 + 56);
  if (v7)
    sub_20B88B52C((const void **)(v3 + 56), v7);
  v8 = *(const void **)(a1 + 88);
  if (v8)
    sub_20B88B52C((const void **)(v3 + 88), v8);
  return v3;
}

void sub_20B95A3C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  const void **v3;

  sub_20B87E150(v3, 0);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  MEMORY[0x20BD39CB0](v1, 0x10F3C402D14F19CLL);
  _Unwind_Resume(a1);
}

void sub_20B95A450(uint64_t a1)
{
  sub_20B95A784(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B95A474(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B95A47C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B95A488()
{
  return 0;
}

unint64_t sub_20B95A490(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3);
}

uint64_t sub_20B95A4AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_20B95A4B4()
{
  return 1;
}

uint64_t sub_20B95A4BC()
{
  return 0;
}

uint64_t sub_20B95A4C4()
{
  return 0;
}

uint64_t sub_20B95A4CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_20B95A4D4()
{
  return 1;
}

uint64_t sub_20B95A4DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_20B95A4E4()
{
  return 0;
}

uint64_t sub_20B95A4EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 160);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 168) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 24);
}

uint64_t sub_20B95A528()
{
  return 0;
}

uint64_t sub_20B95A530(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;

  if (*(char *)(a1 + 55) < 0)
  {
    v1 = *(char **)(a1 + 32);
    v2 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v1 = (char *)(a1 + 32);
    LODWORD(v2) = *(unsigned __int8 *)(a1 + 55);
  }
  v3 = (2 * v2);
  if ((_DWORD)v3)
  {
    v4 = 0;
    do
    {
      v5 = *v1++;
      v4 = (1025 * (v4 + v5)) ^ ((1025 * (v4 + v5)) >> 6);
      --v3;
    }
    while (v3);
    v6 = 9 * v4;
  }
  else
  {
    v6 = 0;
  }
  return 32769 * (v6 ^ (v6 >> 11));
}

uint64_t sub_20B95A584(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_20B95A58C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

BOOL sub_20B95A594(uint64_t a1)
{
  const __CFString *v3;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 69)
    return 1;
  v3 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return sub_20B896388(v3);
}

uint64_t sub_20B95A5E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_20B95A5EC()
{
  return 0;
}

const __CFString *sub_20B95A5F4()
{
  return &stru_24C4B3660;
}

uint64_t sub_20B95A600(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B95A608()
{
  return 1;
}

uint64_t sub_20B95A610(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t sub_20B95A618()
{
  return 0;
}

uint64_t sub_20B95A620()
{
  return 0;
}

uint64_t sub_20B95A628(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_20B95A630(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 160);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 168) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 26);
}

uint64_t sub_20B95A66C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 160);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 168) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 28);
}

uint64_t sub_20B95A6A8(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
}

uint64_t sub_20B95A6C0()
{
  return 0;
}

uint64_t sub_20B95A6C8()
{
  return 0;
}

uint64_t sub_20B95A6D0()
{
  return 0;
}

BOOL sub_20B95A6D8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 144) == 2;
}

double sub_20B95A6E8(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t sub_20B95A6F0(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  return result;
}

uint64_t sub_20B95A6F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_20B95A700(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

uint64_t sub_20B95A708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t sub_20B95A718(uint64_t result, char a2)
{
  *(_BYTE *)(result + 153) = a2;
  return result;
}

__n128 sub_20B95A720(__n128 *a1, __n128 *a2)
{
  void *v4;
  __n128 *v5;
  __n128 result;

  v5 = a1 + 10;
  v4 = (void *)a1[10].n128_u64[0];
  if (v4)
  {
    a1[10].n128_u64[1] = (unint64_t)v4;
    operator delete(v4);
    v5->n128_u64[0] = 0;
    v5->n128_u64[1] = 0;
    v5[1].n128_u64[0] = 0;
  }
  result = *a2;
  a1[10] = *a2;
  a1[11].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_20B95A77C(uint64_t a1)
{
  return sub_20B95A268(a1 - 24);
}

uint64_t sub_20B95A784(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C462648;
  *(_QWORD *)(a1 + 24) = &unk_24C462878;
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  sub_20B88B74C((const void **)(a1 + 128), 0);
  sub_20B88AE28((const void **)(a1 + 120), 0);
  sub_20B87E150((const void **)(a1 + 88), 0);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_20B87E150((const void **)(a1 + 56), 0);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20B95A81C(_QWORD *a1)
{
  sub_20BA15FA4(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B95A840(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  _WORD *v7;
  uint64_t v8;
  _QWORD v9[7];
  void *__p;
  void *v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 104))(a1))
  {
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x2000000000;
    v14 = 0;
    v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2);
    v7 = operator new(2uLL);
    *v7 = 42;
    v8 = a1[1];
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1174405120;
    v9[2] = sub_20B95A9A0;
    v9[3] = &unk_24C46C438;
    v9[6] = a1;
    __p = 0;
    v11 = 0;
    v12 = 0;
    sub_20B87ACC8(&__p, v7, (uint64_t)(v7 + 1), 1);
    v9[4] = a3;
    v9[5] = v13;
    sub_20B91DBF8(v8, v6, (uint64_t)v9);
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
    operator delete(v7);
    _Block_object_dispose(v13, 8);
  }
}

void sub_20B95A95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  operator delete(v19);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_20B95A9A0(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  int v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int *v14;
  uint64_t v15;
  BOOL v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20[3];
  void *v21;
  void *v22;
  uint64_t v23;

  v4 = a2;
  v6 = (_QWORD *)a1[6];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  memset(v20, 0, sizeof(v20));
  __p = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  if (sub_20B8D4C70(v6[42], a2, (uint64_t)&v21, (uint64_t)v20, (uint64_t)&__p, &v16))
  {
    v10 = v4;
    v11 = 4 * v16;
    v12 = 0;
    v13 = 0;
    v14 = &v10;
    v8 = v6[2];
    v9 = v6[3];
    v7 = v6 + 2;
    sub_20BA1A2E0(v7, (uint64_t *)&v21, (uint64_t *)&__p, a1 + 7, *((_DWORD *)v7 + 6));
    v15 = *v7 + v9 - v8;
    (*(void (**)(void))(a1[4] + 16))();
    if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
      *a3 = 1;
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20[0])
    operator delete(v20[0]);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_20B95AAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  v19 = *(void **)(v17 - 72);
  if (v19)
  {
    *(_QWORD *)(v17 - 64) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B95AAFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return sub_20B87ACC8(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 1);
}

void sub_20B95AB18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

uint64_t sub_20B95AB30()
{
  return 14;
}

uint64_t sub_20B95AB38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_20B95AB40()
{
  return 1;
}

uint64_t sub_20B95AB48()
{
  return 0;
}

uint64_t sub_20B95AB58(int a1, CFMutableDictionaryRef theDict)
{
  const void *v3;

  if (!theDict)
    __assert_rtn("handleCandidate", "PredictionCandidateDisplayedTracker.cpp", 17, "payload");
  v3 = (const void *)*MEMORY[0x24BDBD270];
  CFDictionaryAddValue(theDict, CFSTR("completionCandidatesAppeared"), (const void *)*MEMORY[0x24BDBD270]);
  CFDictionaryAddValue(theDict, CFSTR("predictionCandidateListDisplayed"), v3);
  return 1;
}

void sub_20B95ABDC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B95ABF0(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;
  _DWORD *v4;
  int v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  v4 = sub_20B9547EC();
  v5 = (v4[2] >> 5) & 1;
  if (!*(_BYTE *)v4)
    LOBYTE(v5) = 0;
  *((_BYTE *)__dst + 24) = v5;
  *((_BYTE *)__dst + 25) = 0;
  __dst[6] = 0;
  return __dst;
}

void sub_20B95AC60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B95AC7C(uint64_t result, int a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  timeval v11;

  if (*(_BYTE *)(result + 24))
  {
    v2 = result;
    if (*(_BYTE *)(result + 25))
    {
      result = gettimeofday(&v11, 0);
      *(_BYTE *)(v2 + 25) = 0;
      *(double *)(v2 + 48) = *(double *)(v2 + 48)
                           + (double)(v11.tv_usec - *(_DWORD *)(v2 + 40)) / 1000000.0
                           + (double)(v11.tv_sec - *(_QWORD *)(v2 + 32));
      if (a2)
      {
        v4 = sub_20B9547EC();
        v10 = v2;
        if (*(char *)(v2 + 23) < 0)
          v10 = *(_QWORD *)v2;
        return sub_20B954D48((uint64_t)v4, 0x20u, (uint64_t)"[%s] paused at (%lu, %lu), total time elapsed %.8f seconds\n", v5, v6, v7, v8, v9, v10);
      }
    }
  }
  return result;
}

_BYTE *sub_20B95AD40(_BYTE *result)
{
  _BYTE *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result[24])
  {
    v1 = result;
    v2 = sub_20B9547EC();
    v8 = (uint64_t)v1;
    if ((char)v1[23] < 0)
      v8 = *(_QWORD *)v1;
    sub_20B954D48((uint64_t)v2, 0x20u, (uint64_t)"[%s] Total time elapsed %.8f seconds\n", v3, v4, v5, v6, v7, v8);
    result = (_BYTE *)*((_QWORD *)sub_20B9547EC() + 4);
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

_QWORD *sub_20B95ADC0(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v10;
  _DWORD *v11;
  _BYTE *v12;

  v2 = __dst;
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v3 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  if (v5 == 4)
  {
    if ((v3 & 0x80u) == 0)
      v11 = (_DWORD *)a2;
    else
      v11 = *(_DWORD **)a2;
    if (*v11 == 1047736124)
    {
      __dst = sub_20B80BBD0(__dst, "");
      v10 = 2;
      goto LABEL_34;
    }
  }
  else if (v5 == 3)
  {
    v6 = (v3 & 0x80u) == 0 ? (unsigned __int16 *)a2 : *(unsigned __int16 **)a2;
    v7 = *v6;
    v8 = *((unsigned __int8 *)v6 + 2);
    if (v7 == 29500 && v8 == 62)
    {
      __dst = sub_20B80BBD0(__dst, "");
      v10 = 1;
      goto LABEL_34;
    }
  }
  if ((v3 & 0x80) != 0)
  {
    v12 = *(_BYTE **)a2;
    if (*v12 == 120 && v12[v4 - 1] == 120 && v4 > 1)
    {
      __dst = sub_20B80ACE0(__dst, v12, v4);
      goto LABEL_33;
    }
    __dst = sub_20B80ACE0(__dst, v12, v4);
    v10 = 0;
  }
  else
  {
    if (*(_BYTE *)a2 == 120 && v3 >= 2 && *(_BYTE *)(a2 + v3 - 1) == 120)
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      __dst[2] = *(_QWORD *)(a2 + 16);
LABEL_33:
      v10 = 3;
      goto LABEL_34;
    }
    v10 = 0;
    *(_OWORD *)__dst = *(_OWORD *)a2;
    __dst[2] = *(_QWORD *)(a2 + 16);
  }
LABEL_34:
  *((_DWORD *)v2 + 6) = v10;
  return __dst;
}

void sub_20B95AF18(uint64_t *a1@<X0>, const __CFString *a2@<X1>, _BYTE *a3@<X3>, uint64_t a4@<X8>)
{
  void **v5;
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  CFIndex v21;
  CFStringRef v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  language_modeling::v1::Prediction *v27;
  language_modeling::v1::Prediction *v28;
  void **v29;
  CFIndex v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  const __CFString *v40;
  void **v41;
  void **v42;
  BOOL v43;
  CFStringRef v44;
  uint64_t *v45;
  void *v46[3];
  unsigned int v47;
  CFStringRef theString2;
  void *v49[2];
  unsigned __int8 v50;
  void *v51[3];
  char v52[8];
  void *v53;
  char *v54;
  void *__p;
  language_modeling::v1::Prediction *v56;
  char v57;
  void **__dst[2];
  char v59;
  char v60;
  uint64_t v61;
  CFRange v62;

  *a3 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = (void **)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v6 = *(_QWORD *)(*a1 + 56);
  if (!v6)
    return;
  sub_20B8EDEE4(*(_QWORD *)(*a1 + 56));
  v9 = atomic_load((unsigned int *)(v6 + 40));
  if (v9 != 2 || !*(_QWORD *)v6)
    return;
  v10 = *a1;
  v11 = (_QWORD *)operator new();
  sub_20B872064((uint64_t)v11, a2, v10, 1);
  sub_20B87306C(v11, 1, &v53);
  v12 = (char *)v53;
  if (v54 - (_BYTE *)v53 == 4)
  {
    v13 = (char *)v53;
    if (*(_DWORD *)v53 == 1)
    {
LABEL_15:
      language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)v52);
      v16 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v11 + 24))(v11);
      if (v16)
      {
        v17 = (*(uint64_t (**)(_QWORD *))(*v11 + 48))(v11);
        if (v17)
        {
          v18 = 0;
          while (1)
          {
            v19 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 120))(v11, v18);
            v20 = v19[2];
            if (v20 == 501)
            {
              sub_20B80BBD0(&__p, "#");
              sub_20B95ADC0(__dst, (uint64_t)&__p);
              goto LABEL_22;
            }
            if (v20 == 502)
            {
              sub_20B80BBD0(&__p, "*");
              sub_20B95ADC0(__dst, (uint64_t)&__p);
LABEL_22:
              MEMORY[0x20BD397DC](v52, __dst);
              if (v60 < 0)
                operator delete(__dst[0]);
              if (v57 < 0)
                operator delete(__p);
              goto LABEL_33;
            }
            v62.location = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 24))(v19);
            v62.length = v21;
            v22 = CFStringCreateWithSubstring(0, v16, v62);
            v51[0] = (void *)v22;
            sub_20B8D1C98(v22, &__p);
            sub_20B95ADC0(__dst, (uint64_t)&__p);
            MEMORY[0x20BD397DC](v52, __dst);
            if (v60 < 0)
              operator delete(__dst[0]);
            if ((v57 & 0x80000000) == 0)
              break;
            operator delete(__p);
            if (v22)
              goto LABEL_32;
LABEL_33:
            if (v17 == ++v18)
              goto LABEL_34;
          }
          if (!v22)
            goto LABEL_33;
LABEL_32:
          CFRelease(v22);
          goto LABEL_33;
        }
      }
LABEL_34:
      v23 = *(_QWORD *)(*a1 + 56);
      if (!v23
        || (sub_20B8EDEE4(*(_QWORD *)(*a1 + 56)), v24 = atomic_load((unsigned int *)(v23 + 40)), v24 != 2)
        || !*(_QWORD *)v23
        || (v25 = *(_QWORD *)(*a1 + 56),
            sub_20B8EDEE4(v25),
            atomic_load((unsigned int *)(v25 + 40)),
            !language_modeling::v1::LanguageModel::blocklistStatus()))
      {
        v26 = *(unsigned int **)(*a1 + 56);
        sub_20B8EDEE4((uint64_t)v26);
        atomic_load(v26 + 10);
        language_modeling::v1::LanguageModelSession::predictions(*(language_modeling::v1::LanguageModelSession **)(*(_QWORD *)v26 + 16), (const language_modeling::v1::LinguisticContext *)v52);
        sub_20B8D9040(v51, 1uLL, dword_20BA4DA98);
        v27 = (language_modeling::v1::Prediction *)__p;
        v28 = v56;
        if (__p != v56)
        {
          do
          {
            language_modeling::v1::Prediction::exactPredictionString(v27);
            if ((v50 & 0x80u) == 0)
              v29 = v49;
            else
              v29 = (void **)v49[0];
            if ((v50 & 0x80u) == 0)
              v30 = v50;
            else
              v30 = (CFIndex)v49[1];
            theString2 = sub_20B8D2DD4((UInt8 *)v29, v30);
            v47 = 0;
            sub_20B968A64(*(uint64_t **)(*(_QWORD *)(*a1 + 72) + 8), theString2, &v47);
            v31 = *(_QWORD *)(*a1 + 56);
            if (!v31
              || (v32 = v47,
                  sub_20B8EDEE4(*(_QWORD *)(*a1 + 56)),
                  v33 = atomic_load((unsigned int *)(v31 + 40)),
                  v33 != 2)
              || !*(_QWORD *)v31)
            {
LABEL_55:
              v38 = language_modeling::v1::Prediction::probability(v27);
              v39 = *(void ***)a4;
              if (*(void ***)a4 == v5)
                goto LABEL_65;
              while (1)
              {
                v40 = (const __CFString *)v39[8];
                if (v40)
                {
                  if (theString2 && CFStringCompare(v40, theString2, 0) == kCFCompareEqualTo)
                    break;
                }
                v41 = (void **)v39[1];
                if (v41)
                {
                  do
                  {
                    v42 = v41;
                    v41 = (void **)*v41;
                  }
                  while (v41);
                }
                else
                {
                  do
                  {
                    v42 = (void **)v39[2];
                    v43 = *v42 == v39;
                    v39 = v42;
                  }
                  while (!v43);
                }
                v39 = v42;
                if (v42 == v5)
                  goto LABEL_65;
              }
              if (v39 == v5)
              {
LABEL_65:
                v44 = theString2;
                LOWORD(__dst[0]) = CFStringGetLength(theString2);
                sub_20B8D3AA4(v46, 1, __dst);
                __dst[0] = (void **)operator new(0x78uLL);
                __dst[1] = v5;
                v59 = 0;
                sub_20B8D90C0((uint64_t)(__dst[0] + 4), v44, (uint64_t)v51, (uint64_t)v46, 0, 0.0, *(double *)&v38);
                v59 = 1;
                v45 = sub_20B8D92F0(a4, &v61, (uint64_t)(__dst[0] + 4));
                if (!*v45)
                {
                  sub_20B8296A0((uint64_t **)a4, v61, (uint64_t **)v45, (uint64_t *)__dst[0]);
                  __dst[0] = 0;
                }
                sub_20B8D9364((uint64_t)__dst, 0);
                if (v46[0])
                {
                  v46[1] = v46[0];
                  operator delete(v46[0]);
                }
              }
              goto LABEL_69;
            }
            v34 = *(_QWORD *)(*a1 + 56);
            sub_20B8EDEE4(v34);
            atomic_load((unsigned int *)(v34 + 40));
            sub_20B95ADC0(__dst, (uint64_t)v49);
            v35 = language_modeling::v1::LanguageModel::blocklistStatus();
            v36 = v35;
            if (v60 < 0)
            {
              operator delete(__dst[0]);
              if (v36)
                goto LABEL_69;
            }
            else if (v35)
            {
              goto LABEL_69;
            }
            if (sub_20B9C45B0(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 32), v32))
              goto LABEL_55;
            v37 = sub_20B978A58(*(_QWORD **)(*(_QWORD *)(*a1 + 120) + 8), v32);
            if (!v37 || (*(_WORD *)(v37 + 4) & 0x800) == 0)
              goto LABEL_55;
LABEL_69:
            if (theString2)
              CFRelease(theString2);
            if ((char)v50 < 0)
              operator delete(v49[0]);
            v27 = (language_modeling::v1::Prediction *)((char *)v27 + 8);
          }
          while (v27 != v28);
        }
        if (v51[0])
        {
          v51[1] = v51[0];
          operator delete(v51[0]);
        }
        __dst[0] = &__p;
        sub_20B95B6D0(__dst);
      }
      language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)v52);
      v12 = (char *)v53;
      goto LABEL_81;
    }
  }
  else if ((unint64_t)(v54 - (_BYTE *)v53) <= 8)
  {
    v13 = (char *)v53;
  }
  else
  {
    v13 = v54 - 8;
  }
  v14 = v54;
  while (v14 != v13)
  {
    v15 = *((_DWORD *)v14 - 1);
    if (v14 == v54 && v15 == 502)
      break;
    v14 -= 4;
    if (v15 > 0x257)
      goto LABEL_15;
  }
LABEL_81:
  if (v12)
  {
    v54 = v12;
    operator delete(v12);
  }
  (*(void (**)(_QWORD *))(*v11 + 16))(v11);
}

void sub_20B95B4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&a23);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  sub_20B8D9674(v33, *(_QWORD **)(v33 + 8));
  _Unwind_Resume(a1);
}

void sub_20B95B65C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int *v4;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (v1)
  {
    sub_20B8EDEE4(*(_QWORD *)(*(_QWORD *)a1 + 56));
    v3 = atomic_load((unsigned int *)(v1 + 40));
    if (v3 == 2)
    {
      if (*(_QWORD *)v1)
      {
        v4 = *(unsigned int **)(*(_QWORD *)a1 + 56);
        sub_20B8EDEE4((uint64_t)v4);
        atomic_load(v4 + 10);
        language_modeling::v1::LanguageModel::deallocateInternalBuffers(*(language_modeling::v1::LanguageModel **)(*(_QWORD *)v4 + 8));
      }
    }
  }
}

void sub_20B95B6D0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)(v4 - 8));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_20B95B740(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 8) = xmmword_20BA4DAA0;
  *(_DWORD *)(a1 + 4) = 5000;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0x3FC999999999999AuLL);
  *(_OWORD *)(a1 + 40) = xmmword_20BA4DAB0;
  *(_OWORD *)(a1 + 56) = xmmword_20BA4DAC0;
  *(_OWORD *)(a1 + 72) = xmmword_20BA4DAD0;
  *(_OWORD *)(a1 + 88) = xmmword_20BA4DAE0;
  *(_OWORD *)(a1 + 104) = xmmword_20BA4DAF0;
  *(_OWORD *)(a1 + 120) = xmmword_20BA4DB00;
  *(_OWORD *)(a1 + 136) = xmmword_20BA4DB10;
  *(_OWORD *)(a1 + 152) = xmmword_20BA4DB20;
  *(_OWORD *)(a1 + 168) = xmmword_20BA4DB30;
  *(_OWORD *)(a1 + 184) = xmmword_20BA4DB40;
  *(_OWORD *)(a1 + 200) = xmmword_20BA4DB50;
  *(_OWORD *)(a1 + 224) = xmmword_20BA4DB60;
  *(_QWORD *)(a1 + 216) = 0x4008000000000000;
  *(int32x2_t *)(a1 + 240) = vdup_n_s32(0x3A98u);
  *(_WORD *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 264) = 1;
  *(_WORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = xmmword_20BA4DB70;
  *(_QWORD *)(a1 + 304) = 0x19006400180010;
  *(_WORD *)(a1 + 312) = 32;
  *(_DWORD *)(a1 + 328) = 196610;
  *(_QWORD *)(a1 + 336) = 0x80002012C7FFFLL;
  *(_DWORD *)(a1 + 352) = 983050;
  *(_DWORD *)(a1 + 368) = 655365;
  *(_WORD *)(a1 + 376) = 3;
  *(_QWORD *)(a1 + 392) = 0x3F0000003E99999ALL;
  *(_DWORD *)(a1 + 400) = 1060320051;
  *(_OWORD *)(a1 + 404) = xmmword_20BA4DB80;
  *(_WORD *)(a1 + 420) = 2;
  *(_DWORD *)(a1 + 432) = 5;
  *(_DWORD *)(a1 + 440) = 0x1FFFF;
  *(_WORD *)(a1 + 444) = 3000;
  *(_DWORD *)(a1 + 448) = 1070386381;
  *(_DWORD *)(a1 + 464) = 45878700;
  *(_QWORD *)(a1 + 472) = 0x640FA24057803E8;
  *(_WORD *)(a1 + 480) = 500;
  *(_DWORD *)(a1 + 496) = 65540000;
  *(_DWORD *)(a1 + 512) = 65537500;
  *(_DWORD *)(a1 + 520) = 458815536;
  *(_WORD *)(a1 + 524) = 5000;
  *(_QWORD *)(a1 + 528) = 0x300000002;
  *(_DWORD *)(a1 + 536) = 65538000;
  *(_DWORD *)(a1 + 552) = 327683000;
  *(_DWORD *)(a1 + 560) = 655362;
  *(_WORD *)(a1 + 564) = 20000;
  *(_DWORD *)(a1 + 568) = 1080033280;
  *(_QWORD *)(a1 + 576) = 850045863;
  *(_QWORD *)(a1 + 632) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 248) = a1;
  *(_QWORD *)(a1 + 272) = a1;
  *(_QWORD *)(a1 + 344) = a1;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 384) = a1;
  *(_QWORD *)(a1 + 424) = a1;
  *(_QWORD *)(a1 + 456) = a1;
  *(_QWORD *)(a1 + 488) = a1;
  *(_QWORD *)(a1 + 504) = a1;
  *(_QWORD *)(a1 + 544) = a1;
  *(_QWORD *)(a1 + 320) = a1;
  return result;
}

BOOL sub_20B95B9A8(uint64_t a1, const __CFURL *a2)
{
  const __CFAllocator *v3;
  __CFReadStream *v4;
  int v5;
  const __CFDictionary *v6;

  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  v5 = CFReadStreamOpen(v4);
  if (v5)
  {
    v6 = (const __CFDictionary *)CFPropertyListCreateWithStream(v3, v4, 0, 0, 0, 0);
    CFReadStreamClose(v4);
    sub_20B95BA8C(a1, v6);
    if (v6)
      CFRelease(v6);
  }
  if (v4)
    CFRelease(v4);
  return v5 != 0;
}

void sub_20B95BA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8D45A8((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95BA8C(uint64_t a1, const __CFDictionary *a2)
{
  std::mutex *v4;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  char v8;
  const __CFNumber *v9;
  char v10;
  const __CFNumber *v11;
  char v12;
  const __CFNumber *v13;
  char v14;
  const __CFNumber *v15;
  char v16;
  const __CFNumber *v17;
  char v18;
  const __CFNumber *v19;
  char v20;
  const __CFNumber *v21;
  char v22;
  const __CFNumber *v23;
  char v24;
  const __CFNumber *v25;
  char v26;
  const __CFNumber *v27;
  char v28;
  const __CFNumber *v29;
  char v30;
  const __CFNumber *v31;
  char v32;
  const __CFNumber *v33;
  char v34;
  const __CFNumber *v35;
  char v36;
  const __CFNumber *v37;
  char v38;
  const __CFNumber *v39;
  char v40;
  const __CFNumber *v41;
  char v42;
  const __CFNumber *v43;
  char v44;
  const __CFNumber *v45;
  char v46;
  const __CFNumber *v47;
  char v48;
  const __CFNumber *v49;
  char v50;
  const __CFNumber *v51;
  char v52;
  const __CFNumber *v53;
  char v54;
  const __CFNumber *v55;
  char v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  const __CFNumber *v60;
  double v61;
  char v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  double v65;
  char v66;

  v4 = (std::mutex *)(a1 + 576);
  std::mutex::lock((std::mutex *)(a1 + 576));
  v5 = sub_20B95BF54(a2, CFSTR("kEmbedded"));
  if ((unint64_t)v5 >> 32)
    *(_BYTE *)a1 = (_DWORD)v5 == 1;
  v6 = sub_20B95BF54(a2, CFSTR("kJointProbabilityCostFactor"));
  if ((unint64_t)v6 >> 32)
    *(_DWORD *)(a1 + 4) = (_DWORD)v6;
  v7 = sub_20B95BF94(a2, CFSTR("kDiscriminativeCostWeight"));
  if (v8)
    *(_QWORD *)(a1 + 8) = v7;
  v9 = sub_20B95BF94(a2, CFSTR("kCostFactor"));
  if (v10)
    *(_QWORD *)(a1 + 16) = v9;
  v11 = sub_20B95BF94(a2, CFSTR("kMatchPenaltyWeight"));
  if (v12)
    *(_QWORD *)(a1 + 24) = v11;
  v13 = sub_20B95BF94(a2, CFSTR("kMatchPenaltyWeightForSpecialToken"));
  if (v14)
    *(_QWORD *)(a1 + 32) = v13;
  v15 = sub_20B95BF94(a2, CFSTR("kSingleWordLMScore"));
  if (v16)
    *(_QWORD *)(a1 + 40) = v15;
  v17 = sub_20B95BF94(a2, CFSTR("kDynamicLMScoreWeight"));
  if (v18)
    *(_QWORD *)(a1 + 48) = v17;
  v19 = sub_20B95BF94(a2, CFSTR("kSymbolUnkPenalty"));
  if (v20)
    *(_QWORD *)(a1 + 56) = v19;
  v21 = sub_20B95BF94(a2, CFSTR("kMaxUnkPenalty"));
  if (v22)
    *(_QWORD *)(a1 + 64) = v21;
  v23 = sub_20B95BF94(a2, CFSTR("kRareUnkPenalty"));
  if (v24)
    *(_QWORD *)(a1 + 72) = v23;
  v25 = sub_20B95BF94(a2, CFSTR("kConsecutiveUnkPenalty"));
  if (v26)
    *(_QWORD *)(a1 + 80) = v25;
  v27 = sub_20B95BF94(a2, CFSTR("kSingleUnkCharWordPenalty"));
  if (v28)
    *(_QWORD *)(a1 + 88) = v27;
  v29 = sub_20B95BF94(a2, CFSTR("kSingleUnkCharWithOkuriganaWordPenalty"));
  if (v30)
    *(_QWORD *)(a1 + 96) = v29;
  v31 = sub_20B95BF94(a2, CFSTR("kDynamicKatakanaPenalty"));
  if (v32)
    *(_QWORD *)(a1 + 104) = v31;
  v33 = sub_20B95BF94(a2, CFSTR("kOtherSymbolOrLetterPenalty"));
  if (v34)
    *(_QWORD *)(a1 + 112) = v33;
  v35 = sub_20B95BF94(a2, CFSTR("kPenaltyForDynamicNumbers"));
  if (v36)
    *(_QWORD *)(a1 + 120) = v35;
  v37 = sub_20B95BF94(a2, CFSTR("kPenaltyForArabicNumberByReading"));
  if (v38)
    *(_QWORD *)(a1 + 128) = v37;
  v39 = sub_20B95BF94(a2, CFSTR("kPenaltyForArabicNumberAtEOSByReading"));
  if (v40)
    *(_QWORD *)(a1 + 136) = v39;
  v41 = sub_20B95BF94(a2, CFSTR("kPenaltyForArabicNumberSingleWordOnHWKeyboard"));
  if (v42)
    *(_QWORD *)(a1 + 144) = v41;
  v43 = sub_20B95BF94(a2, CFSTR("kPenaltyForWordWithArabicNumber"));
  if (v44)
    *(_QWORD *)(a1 + 152) = v43;
  v45 = sub_20B95BF94(a2, CFSTR("kPenaltyForUnlikelyNumberUnitCombination"));
  if (v46)
    *(_QWORD *)(a1 + 160) = v45;
  v47 = sub_20B95BF94(a2, CFSTR("kPenaltyForSymbolConversion"));
  if (v48)
    *(_QWORD *)(a1 + 168) = v47;
  v49 = sub_20B95BF94(a2, CFSTR("kPenaltyForKanjiNumberWithUnit"));
  if (v50)
    *(_QWORD *)(a1 + 176) = v49;
  v51 = sub_20B95BF94(a2, CFSTR("kRewardForSingleNumberConversion"));
  if (v52)
    *(_QWORD *)(a1 + 200) = v51;
  v53 = sub_20B95BF94(a2, CFSTR("kRewardForNumberWithUnit"));
  if (v54)
    *(_QWORD *)(a1 + 208) = v53;
  v55 = sub_20B95BF94(a2, CFSTR("kRewardForNumberWithParticle"));
  if (v56)
    *(_QWORD *)(a1 + 216) = v55;
  v57 = sub_20B95BF54(a2, CFSTR("kNumLexicalPreferenceTargetsForSWKeyboard"));
  if ((unint64_t)v57 >> 32)
    *(_DWORD *)(a1 + 528) = (_DWORD)v57;
  v58 = sub_20B95BF54(a2, CFSTR("kNumLexicalPreferenceTargetsForHWKeyboard"));
  if ((unint64_t)v58 >> 32)
    *(_DWORD *)(a1 + 532) = (_DWORD)v58;
  v59 = sub_20B95BF54(a2, CFSTR("kMaxNumExactCandidatesForSWKeyboard"));
  if ((unint64_t)v59 >> 32)
    *(_DWORD *)(a1 + 224) = (_DWORD)v59;
  v60 = sub_20B95BF54(a2, CFSTR("kMaxNumExactCandidatesForHWKeyboard"));
  if ((unint64_t)v60 >> 32)
    *(_DWORD *)(a1 + 228) = (_DWORD)v60;
  v61 = COERCE_DOUBLE(sub_20B95BF94(a2, CFSTR("kMaxNumPrefixCandidates")));
  if (v62)
    *(_DWORD *)(a1 + 232) = (int)v61;
  v63 = sub_20B95BF54(a2, CFSTR("kSinglePhraseExactMatchCandidatePruningThreshold"));
  if ((unint64_t)v63 >> 32)
    *(_DWORD *)(a1 + 236) = (_DWORD)v63;
  v64 = sub_20B95BF54(a2, CFSTR("kMultiPhraseExactMatchCandidatePruningThreshold"));
  if ((unint64_t)v64 >> 32)
    *(_DWORD *)(a1 + 240) = (_DWORD)v64;
  v65 = COERCE_DOUBLE(sub_20B95BF94(a2, CFSTR("kPrefixMatchCandidatePruningThreshold")));
  if (v66)
    *(_DWORD *)(a1 + 244) = (int)v65;
  std::mutex::unlock(v4);
  return 1;
}

void sub_20B95BEB8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const __CFNumber *sub_20B95BF54(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  unsigned int valuePtr;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberIntType, &valuePtr))
      return (const __CFNumber *)(valuePtr | 0x100000000);
    else
      return 0;
  }
  return result;
}

const __CFNumber *sub_20B95BF94(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  uint64_t valuePtr;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberDoubleType, &valuePtr))
      return (const __CFNumber *)valuePtr;
    else
      return 0;
  }
  return result;
}

CFDictionaryRef sub_20B95BFDC(uint64_t a1)
{
  CFDictionaryRef v2;
  uint64_t i;
  void *values[35];
  const void *__dst[36];

  __dst[35] = *(const void **)MEMORY[0x24BDAC8D0];
  memcpy(__dst, &off_24C49F4D0, 0x118uLL);
  values[0] = CFNumberCreate(0, kCFNumberIntType, (const void *)a1);
  values[1] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 4));
  values[2] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 8));
  values[3] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 16));
  values[4] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 24));
  values[5] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 32));
  values[6] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 40));
  values[7] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 48));
  values[8] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 56));
  values[9] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 64));
  values[10] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 72));
  values[11] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 80));
  values[12] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 88));
  values[13] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 96));
  values[14] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 104));
  values[15] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 112));
  values[16] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 120));
  values[17] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 128));
  values[18] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 136));
  values[19] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 144));
  values[20] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 152));
  values[21] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 160));
  values[22] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 168));
  values[23] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 176));
  values[24] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 200));
  values[25] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 208));
  values[26] = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 216));
  values[27] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 528));
  values[28] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 532));
  values[29] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 224));
  values[30] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 228));
  values[31] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 232));
  values[32] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 236));
  values[33] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 240));
  values[34] = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 244));
  v2 = CFDictionaryCreate(0, __dst, (const void **)values, 35, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  for (i = 0; i != 35; ++i)
    CFRelease(values[i]);
  return v2;
}

uint64_t sub_20B95C34C(uint64_t a1, uint64_t a2)
{
  char v3;
  void *__p[2];
  char v6;

  *(_QWORD *)a1 = off_24C460DD0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C460D28;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = &unk_24C460D28;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 208) = 0;
  v3 = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 229) = 1;
  *(_BYTE *)(a1 + 230) = v3;
  *(_OWORD *)(a1 + 248) = 0u;
  sub_20B93DFD4(a1 + 264);
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 720) = 850045863;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_QWORD *)(a1 + 816) = off_24C460C88;
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_BYTE *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 856) = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  *(_QWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 876) = 0;
  *(_QWORD *)(a1 + 880) = 850045863;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  sub_20B80BBD0(__p, "Conversion");
  sub_20B95ABF0((_QWORD *)(a1 + 952), (__int128 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  sub_20B8B0EB0(a1 + 1008);
  return a1;
}

void sub_20B95C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  const void ***v21;
  void **v22;
  uint64_t *v23;
  uint64_t *v24;
  std::mutex *v25;
  std::mutex *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (*(char *)(v17 + 975) < 0)
    operator delete(*v22);
  std::mutex::~mutex(v26);
  v27 = *(_QWORD *)(v17 + 864);
  *(_QWORD *)(v17 + 864) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  sub_20B8A89DC((const void **)(v17 + 856), 0);
  *(_QWORD *)(v17 + 816) = off_24C460C88;
  a12 = v17 + 824;
  sub_20B8B66F8((void ***)&a12);
  v28 = *(_QWORD *)(v17 + 800);
  *(_QWORD *)(v17 + 800) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(v17 + 792);
  *(_QWORD *)(v17 + 792) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (uint64_t *)(v17 + 712);
  v31 = *(_QWORD *)(v17 + 784);
  *(_QWORD *)(v17 + 784) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  std::mutex::~mutex(v25);
  v32 = *v30;
  *v30 = 0;
  if (v32)
    sub_20B8CEBF4(v17 + 712, v32);
  v33 = *(_QWORD *)(v17 + 704);
  *(_QWORD *)(v17 + 704) = 0;
  if (v33)
    MEMORY[0x20BD39CB0](v33, 0x70C40F770AEC6);
  sub_20B95FE48(v24, 0);
  sub_20B8B812C(a10);
  v34 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = 0;
  if (v34)
    sub_20B8CE6E8(v18 + 24, v34);
  v35 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v17 + 240) = v35;
    operator delete(v35);
  }
  sub_20B87E150(v20, 0);
  sub_20B931EA8(v21, 0);
  v36 = *v23;
  *v23 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 336))(v36);
  v37 = *(_QWORD *)(v17 + 176);
  *(_QWORD *)(v17 + 176) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(v17 + 168);
  *(_QWORD *)(v17 + 168) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_20B881268(v19);
  sub_20B881268(a11);
  v39 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 16) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95C6E4(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v16;

  *(_QWORD *)a1 = off_24C460DD0;
  v2 = (void **)(a1 + 952);
  sub_20B95AD40((_BYTE *)(a1 + 952));
  sub_20B8B0F78(a1 + 1008);
  if (*(char *)(a1 + 975) < 0)
    operator delete(*v2);
  std::mutex::~mutex((std::mutex *)(a1 + 880));
  v3 = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  sub_20B8A89DC((const void **)(a1 + 856), 0);
  *(_QWORD *)(a1 + 816) = off_24C460C88;
  v16 = (void **)(a1 + 824);
  sub_20B8B66F8(&v16);
  v4 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 792) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 784) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::mutex::~mutex((std::mutex *)(a1 + 720));
  v7 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;
  if (v7)
    sub_20B8CEBF4(a1 + 712, v7);
  v8 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 704) = 0;
  if (v8)
    MEMORY[0x20BD39CB0](v8, 0x70C40F770AEC6);
  sub_20B95FE48((uint64_t *)(a1 + 696), 0);
  sub_20B8B812C(a1 + 264);
  v9 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v9)
    sub_20B8CE6E8(a1 + 256, v9);
  v10 = *(void **)(a1 + 232);
  if (v10)
  {
    *(_QWORD *)(a1 + 240) = v10;
    operator delete(v10);
  }
  sub_20B87E150((const void **)(a1 + 216), 0);
  sub_20B931EA8((const void ***)(a1 + 200), 0);
  v11 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 336))(v11);
  v12 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *(_QWORD *)(a1 + 96) = &unk_24C460D28;
  v16 = (void **)(a1 + 144);
  sub_20B882410(&v16);
  sub_20B84055C(a1 + 104);
  *(_QWORD *)(a1 + 24) = &unk_24C460D28;
  v16 = (void **)(a1 + 72);
  sub_20B882410(&v16);
  sub_20B84055C(a1 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return a1;
}

uint64_t sub_20B95C90C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  CFRange v9;

  v6 = *(__CFString **)(a1 + 856);
  v9.length = CFStringGetLength(v6);
  v9.location = 0;
  CFStringDelete(v6, v9);
  sub_20B95C9D8(a1, 0, a2, a3);
  std::mutex::lock((std::mutex *)(a1 + 880));
  *(_DWORD *)(a1 + 944) = 0;
  sub_20B931EA8((const void ***)(a1 + 200), 0);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 216))(*(_QWORD *)(a1 + 192), 0);
  v7 = sub_20B95CDD4(a1, 0, a2, a3, 0, 1);
  std::mutex::unlock((std::mutex *)(a1 + 880));
  return v7;
}

void sub_20B95C9C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const void *sub_20B95C9D8(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex v12;
  uint64_t v13;
  unint64_t v14;
  const void *result;
  const __CFArray *v16;
  CFIndex v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const void *v36;
  uint64_t (***v37)(_QWORD);
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  CFIndex Length;
  UChar32 CharacterAtIndex;
  unsigned __int32 v48;
  CFTypeRef cf;

  sub_20B9727D8(*(_QWORD *)(a1 + 176), 1);
  sub_20B97293C(*(_QWORD *)(a1 + 176));
  if (a2)
    sub_20B8B1020((_BYTE *)(a1 + 1008), a2, 0, a3, a4, 0);
  if (!a4)
  {
    v13 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_14;
  }
  v8 = operator new();
  sub_20B96A820(v8, a4);
  v9 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!(a3 >> 31))
    goto LABEL_14;
  if (CFArrayGetCount(*(CFArrayRef *)(a4 + 32)))
    goto LABEL_14;
  v10 = *(const __CFArray **)(a4 + 16);
  if (!v10 || !CFArrayGetCount(v10))
    goto LABEL_14;
  v11 = *(const __CFArray **)(a4 + 16);
  if (v11)
    v12 = CFArrayGetCount(v11) - 1;
  else
    v12 = -1;
  v39 = (void *)sub_20B96AAF4(a4, v12);
  v42 = objc_msgSend_rawCandidate(v39, v40, v41);
  v43 = (const __CFString *)v42;
  if (v42)
  {
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v45 = 40;
    if (!v44)
      v45 = 24;
    v43 = (const __CFString *)(*(uint64_t (**)(const __CFString *))((char *)v43->isa + v45))(v43);
  }
  Length = CFStringGetLength(v43);
  if (!Length
    || (CharacterAtIndex = CFStringGetCharacterAtIndex(v43, Length - 1),
        v48 = ublock_getCode(CharacterAtIndex) - 58,
        v48 > 0x25))
  {
LABEL_14:
    LODWORD(v14) = 0;
    goto LABEL_15;
  }
  v14 = (0x3000203003uLL >> v48) & 1;
LABEL_15:
  result = *(const void **)(a1 + 864);
  *(_QWORD *)(a1 + 864) = 0;
  if (result)
    result = (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)result + 16))(result);
  if (a4)
  {
    sub_20B96AE80(a4);
    if ((_DWORD)v14)
    {
      sub_20B95D6F0(a1, a4, 1);
      v16 = *(const __CFArray **)(a4 + 16);
      if (v16)
        v17 = CFArrayGetCount(v16) - 1;
      else
        v17 = -1;
      v20 = (void *)sub_20B96AAF4(a4, v17);
      if (a2 && CFStringGetLength(a2))
      {
        cf = 0;
        if ((a3 & 0x100) != 0)
          cf = sub_20B87B810(a2, 0, 0, 0);
        else
          sub_20B88B52C(&cf, a2);
        v23 = objc_msgSend_rawCandidate(v20, v21, v22);
        v24 = (_QWORD *)v23;
        if (v23)
        {
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
          v26 = 40;
          if (!v25)
            v26 = 24;
          v27 = (*(uint64_t (**)(_QWORD *))(*v24 + v26))(v24);
        }
        else
        {
          v27 = 0;
        }
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)a1 + 88))(a1, v27, cf, 0, 0);
        if (v28)
        {
          v20 = (void *)sub_20B8E1754(v28);
          v29 = *(_QWORD *)(a1 + 168);
          if (sub_20B96A9F0(v20))
            CFArrayAppendValue(*(CFMutableArrayRef *)(v29 + 16), v20);

        }
        if (cf)
          CFRelease(cf);
      }
      result = (const void *)objc_msgSend_rawCandidate(v20, v18, v19);
      if (result)
      {
        result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        if (result)
        {
          v32 = (const void *)objc_msgSend_rawCandidate(v20, v30, v31);
          v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
          (*(void (**)(void *, uint64_t, const char *, uint64_t))(*(_QWORD *)v33 + 528))(v33, 4, "[ME:analyzeStringWithContext] Using a truncated context candidate", 1);
          v36 = (const void *)objc_msgSend_rawCandidate(v20, v34, v35);
          v37 = (uint64_t (***)(_QWORD))__dynamic_cast(v36, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
          v38 = (**v37)(v37);
          result = *(const void **)(a1 + 864);
          *(_QWORD *)(a1 + 864) = v38;
          if (result)
            return (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)result + 16))(result);
        }
      }
    }
    else
    {
      sub_20B95D6F0(a1, a4, 0);
      return (const void *)sub_20B95DBA0(a1, a4, 0);
    }
  }
  return result;
}

void sub_20B95CD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95CDD4(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4, const __CFArray *a5, char a6)
{
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;
  const __CFString *v18;
  CFIndex v19;
  int CharacterAtIndex;
  CFIndex Length;
  unint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  char **v29;
  CFIndex v30;
  void *ValueAtIndex;
  const char *v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __CFString *Mutable;
  const __CFString *v49;

  v12 = atomic_load((unsigned __int8 *)&qword_25472BC50);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25472BC50))
  {
    qword_25472BC48 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472BC50);
  }
  v13 = *(_QWORD *)(a1 + 176);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    sub_20B9727D8(*(_QWORD *)(a1 + 176), 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 176) + 96) = (a3 & 0x80) == 0;
  }
  *(_DWORD *)(a1 + 872) = 1;
  *(_BYTE *)(a1 + 876) = 0;
  sub_20B9B5A9C(a1 + 824, 0);
  *(_BYTE *)(a1 + 848) = 0;
  if ((a6 & 1) == 0)
  {
    if (!a2 || !CFStringGetLength(a2))
    {
      result = 0;
      *(_DWORD *)(a1 + 208) = 0;
      return result;
    }
    if (!*(_DWORD *)(a1 + 208))
      *(_DWORD *)(a1 + 208) = 1;
    if (a3 >> 31
      && (v14 = *(_QWORD *)(a1 + 864)) != 0
      && (*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 232))(*(_QWORD *)(a1 + 864))
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14)
      && (v15 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 232))(v14),
          CFStringGetLength(v15))
      && (v16 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14),
          CFStringGetLength(v16)))
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      if (v17)
      {
        v18 = (const __CFString *)v17;
        v19 = 0;
        while (v19 < CFStringGetLength(v18))
        {
          CharacterAtIndex = CFStringGetCharacterAtIndex(v18, v19++);
          if ((CharacterAtIndex & 0xFFFFFFDF) - 65 < 0x1A)
            goto LABEL_19;
        }
      }
      Mutable = CFStringCreateMutable(0, 0);
      v49 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
      CFStringAppend(Mutable, v49);
      CFStringAppend(Mutable, a2);
      sub_20B87E150((const void **)(a1 + 216), Mutable);
    }
    else
    {
LABEL_19:
      sub_20B95D3E4(a1, a2);
    }
  }
  *(_DWORD *)(a1 + 184) = sub_20B969EE8(a3, a4, (_BYTE *)qword_25472BC48);
  if (sub_20B8D1888(a2))
    *(_DWORD *)(a1 + 184) |= 4u;
  if (a2)
  {
    Length = CFStringGetLength(a2);
    if (*(_BYTE *)qword_25472BC48)
    {
      v22 = Length;
      if (Length >= 1
        && (CFStringGetCharacterAtIndex(a2, 0) - 65 < 0x1A
         || v22 >= 2 && CFStringGetCharacterAtIndex(a2, 1) - 65 <= 0x19))
      {
        v23 = *(_DWORD *)(a1 + 184);
        if ((v23 & 0x4000000) != 0)
        {
          *(_DWORD *)(a1 + 184) = v23 & 0xFFFFFFDF;
          if ((v23 & 4) != 0)
            *(_DWORD *)(a1 + 184) = v23 & 0xFFFFFFDD;
        }
      }
    }
  }
  if ((a3 & 0x40000) != 0 || *(_BYTE *)(a1 + 230))
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    if (v25)
      LOBYTE(v25) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  }
  *(_BYTE *)(a1 + 228) = v25;
  *(_DWORD *)(a1 + 808) = 0;
  if (a4)
  {
    v26 = sub_20B88826C(a4, kMecabraContextOptionDisabledLearningBasedGenerationBigramPhrase);
    v27 = (const void *)*MEMORY[0x24BDBD270];
    if (v26 == (const void *)*MEMORY[0x24BDBD270])
      *(_BYTE *)(a1 + 808) = 1;
    if (sub_20B88826C(a4, kMecabraContextOptionDisabledLearningBasedGenerationUnigramPhrase) == v27)
      *(_BYTE *)(a1 + 809) = 1;
    if (sub_20B88826C(a4, kMecabraContextOptionDisabledLearningBasedGenerationLexicalPreference) == v27)
      *(_BYTE *)(a1 + 810) = 1;
    if (sub_20B88826C(a4, kMecabraContextOptionDisabledLearningBasedGenerationNonLexicalPreference) == v27)
      *(_BYTE *)(a1 + 811) = 1;
    if (sub_20B88826C(a4, kMecabraContextOptionPrivateMode) == v27)
    {
      *(_DWORD *)(a1 + 808) = 16843009;
      v28 = *(_QWORD *)(a1 + 176);
      if (v28)
        *(_BYTE *)(v28 + 96) = 0;
    }
  }
  v29 = (char **)(a1 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  if (a5 && CFArrayGetCount(a5) >= 1)
  {
    v30 = 0;
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a5, v30);
      v34 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v32, v33);
      if (v34)
        v35 = __dynamic_cast(v34, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      else
        v35 = 0;
      v37 = *(_QWORD **)(a1 + 240);
      v36 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v37 >= v36)
      {
        v39 = ((char *)v37 - *v29) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          sub_20B80CDD8();
        v40 = v36 - (_QWORD)*v29;
        v41 = v40 >> 2;
        if (v40 >> 2 <= (unint64_t)(v39 + 1))
          v41 = v39 + 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v43 = (char *)sub_20B800BE8(a1 + 248, v42);
        else
          v43 = 0;
        v44 = &v43[8 * v39];
        *(_QWORD *)v44 = v35;
        v38 = v44 + 8;
        v46 = *(char **)(a1 + 232);
        v45 = *(char **)(a1 + 240);
        if (v45 != v46)
        {
          do
          {
            v47 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v44 - 1) = v47;
            v44 -= 8;
          }
          while (v45 != v46);
          v45 = *v29;
        }
        *(_QWORD *)(a1 + 232) = v44;
        *(_QWORD *)(a1 + 240) = v38;
        *(_QWORD *)(a1 + 248) = &v43[8 * v42];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *v37 = v35;
        v38 = v37 + 1;
      }
      *(_QWORD *)(a1 + 240) = v38;
      ++v30;
    }
    while (v30 < CFArrayGetCount(a5));
  }
  return 1;
}

void sub_20B95D2D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472BC50);
  _Unwind_Resume(a1);
}

unint64_t sub_20B95D2EC(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _QWORD *v4;
  unsigned __int16 **v5;
  unsigned __int16 *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  CFRange v11;

  if (!*(_BYTE *)(a1 + 848))
    return 0;
  v3 = *(const void **)(a2 + 24);
  if (!v3)
    return 0;
  v4 = __dynamic_cast(v3, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45C120, 0);
  if (!v4)
    return 0;
  v5 = (unsigned __int16 **)v4[4];
  if (v5 == (unsigned __int16 **)v4[5])
    return 0;
  v6 = *v5;
  if (*(_QWORD *)(v4[4] + 8) - (_QWORD)v6 != 4)
    return 0;
  v7 = *v6;
  if (*v6)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824)) >> 3);
    if (v8 > v7)
    {
      v9 = v6[1];
      v11.location = 0;
      v11.length = v8 - v7;
      CFStringDelete(*(CFMutableStringRef *)(a1 + 856), v11);
      sub_20BA04B7C((uint64_t **)(a1 + 816), v7, v9);
      std::mutex::lock((std::mutex *)(a1 + 880));
      *(_DWORD *)(a1 + 944) = 0;
      v7 = 1;
      *(_DWORD *)(a1 + 872) = 1;
      *(_BYTE *)(a1 + 876) = 0;
      std::mutex::unlock((std::mutex *)(a1 + 880));
      return v7;
    }
    return 0;
  }
  return v7;
}

uint64_t sub_20B95D3D8(uint64_t a1)
{
  return sub_20B9727D8(*(_QWORD *)(a1 + 176), 1);
}

uint64_t sub_20B95D3E4(uint64_t a1, const __CFString *a2)
{
  const void **v3;
  CFStringRef Copy;
  uint64_t result;

  v3 = (const void **)(a1 + 216);
  Copy = CFStringCreateCopy(0, a2);
  sub_20B87E150(v3, Copy);
  result = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_20B95D438(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4, const __CFArray *a5, const __CFArray *a6)
{
  NSObject *v12;
  CFArrayRef *v13;
  CFIndex v14;
  const __CFString *v15;
  CFIndex Length;
  const void **v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  const __CFString *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v12 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v23 = 138412290;
    v24 = a2;
    _os_log_debug_impl(&dword_20B7F7000, v12, OS_LOG_TYPE_DEBUG, "[MecabraEngine::analyzeString] analysisStr: [%@]", (uint8_t *)&v23, 0xCu);
  }
  std::mutex::lock((std::mutex *)(a1 + 880));
  v13 = *(CFArrayRef **)(a1 + 200);
  *(_DWORD *)(a1 + 944) = 0;
  if (v13)
  {
    if (a5)
    {
      v14 = *v13 ? CFArrayGetCount(*v13) : 0;
      if (v14 > CFArrayGetCount(a5))
      {
        if (a2)
        {
          v15 = *(const __CFString **)(a1 + 216);
          if (v15)
          {
            if (!CFStringHasPrefix(v15, a2))
              *(_DWORD *)(a1 + 208) = 1;
          }
        }
      }
    }
    sub_20B931EA8((const void ***)(a1 + 200), 0);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 216))(*(_QWORD *)(a1 + 192), 0);
  }
  if (a2)
  {
    if (a5)
    {
      Length = CFStringGetLength(a2);
      if (Length <= CFArrayGetCount(a5))
      {
        v17 = (const void **)operator new();
        sub_20B95169C((uint64_t)v17, a5, a2);
        sub_20B931EA8((const void ***)(a1 + 200), v17);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 216))(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));
      }
    }
  }
  v18 = sub_20B95CDD4(a1, a2, a3, a4, a6, 0);
  if ((_DWORD)v18)
  {
    v19 = *(_DWORD *)(a1 + 184);
    v20 = operator new();
    sub_20B8D6AB0(v20, *(const __CFString **)(a1 + 216), (v19 >> 5) & 1, *(_DWORD *)(a1 + 184), *(_DWORD *)(a1 + 808));
    v21 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v20;
    if (v21)
    {
      sub_20B8CE6E8(a1 + 256, v21);
      v20 = *(_QWORD *)(a1 + 256);
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 192) + 208))(*(_QWORD *)(a1 + 192), v20);
  }
  std::mutex::unlock((std::mutex *)(a1 + 880));
  return v18;
}

void sub_20B95D690(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x60C40AA6EF139);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95D6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *Count;
  uint64_t v7;
  char *v8;
  CFIndex v9;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int IsSingleEmoji;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  const void *v29;
  const char *v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  void **v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  char v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[10];
  char v44;
  uint64_t v45;

  Count = *(const __CFArray **)(a2 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  v7 = 0;
  v8 = (char *)Count - a3;
  v9 = (CFIndex)Count - a3;
  while (v9-- >= 1)
  {
    v11 = (void *)sub_20B96AAF4(a2, v9);
    v14 = objc_msgSend_rawCandidate(v11, v12, v13);
    if (v14)
    {
      v15 = (_QWORD *)v14;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14))
        v16 = 40;
      else
        v16 = 24;
      (*(void (**)(_QWORD *))(*v15 + v16))(v15);
    }
    IsSingleEmoji = CEMStringIsSingleEmoji();
    if (IsSingleEmoji)
      v18 = v7 + 1;
    else
      v18 = v7;
    if (IsSingleEmoji)
    {
      v19 = v7 + 1;
      v7 = v18;
      if (v19 < 3)
        continue;
    }
    goto LABEL_17;
  }
  v18 = v7;
LABEL_17:
  v20 = (uint64_t)&v8[-v18 - 4];
  if (v20 < 0)
    v20 = -1;
  v21 = v20 + 1;
  if (v20 + 1 >= (uint64_t)v8)
    return 1;
  v22 = 0;
  v23 = *MEMORY[0x24BEDB7F0];
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  LODWORD(v24) = 1;
  v36 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v25 = (void *)sub_20B96AAF4(a2, v21 + v22);
    v26 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v29 = (const void *)objc_msgSend_rawCandidate(v25, v27, v28);
      if (v29)
      {
        if (__dynamic_cast(v29, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0))
        {
          sub_20B83BFEC((uint64_t)v41);
          sub_20B828F84(&v42, (uint64_t)"[ME::acceptLeftContext] #", 25);
          std::ostream::operator<<();
          v32 = (const void *)objc_msgSend_rawCandidate(v25, v30, v31);
          if (v32)
            v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
          else
            v33 = 0;
          sub_20B871648((uint64_t)v43, __p);
          if (v40 >= 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          (*(void (**)(void *, uint64_t, void **, uint64_t))(*(_QWORD *)v33 + 528))(v33, 6, v34, 1);
          if (v40 < 0)
            operator delete(__p[0]);
          v41[0] = v23;
          *(_QWORD *)((char *)v41 + *(_QWORD *)(v23 - 24)) = v38;
          v42 = v37;
          v43[0] = v36;
          if (v44 < 0)
            operator delete((void *)v43[8]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x20BD39C2C](&v45);
        }
      }
    }
    v24 = v24 & sub_20B95D9D4(a1, v25, 0, 0);
    ++v22;
  }
  while (v21 + v22 < (uint64_t)v8);
  return v24;
}

void sub_20B95D9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_20B83C118((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95D9D4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const void *v16;
  const char *v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v8 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v22 = objc_msgSend_rawCandidate(a2, v9, v10);
      if (v22)
      {
        v23 = (_QWORD *)v22;
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
        v25 = 40;
        if (!v24)
          v25 = 24;
        v22 = (*(uint64_t (**)(_QWORD *))(*v23 + v25))(v23);
      }
      v26 = 138412802;
      v27 = v22;
      v28 = 1024;
      v29 = a3;
      v30 = 1024;
      v31 = 1;
      _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[ME::acceptCandidate] S:%@ isPartial:%d performLearning:%d", (uint8_t *)&v26, 0x18u);
    }
  }
  if (*(_DWORD *)(a1 + 872) != 2)
    *(_DWORD *)(a1 + 872) = 2;
  v11 = 0;
  *(_BYTE *)(a1 + 876) = 0;
  if (a4)
    v11 = *(_BYTE *)(a1 + 230) == 0;
  v12 = (*(uint64_t (**)(_QWORD, void *, uint64_t, _BOOL8))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), a2, a3, v11);
  v13 = *(void **)(*(_QWORD *)(a1 + 176) + 104);
  v16 = (const void *)objc_msgSend_rawCandidate(v13, v14, v15);
  if (v16
    && __dynamic_cast(v16, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0))
  {
    v19 = (const void *)objc_msgSend_rawCandidate(v13, v17, v18);
    v20 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    (*(void (**)(void *, uint64_t, const char *, uint64_t))(*(_QWORD *)v20 + 528))(v20, 6, "[ME::acceptCandidate] Accepted", 1);
  }
  return v12;
}

uint64_t sub_20B95DBA0(uint64_t a1, uint64_t a2, int a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  const void *v15;
  const char *v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[10];
  char v32;
  uint64_t v33;

  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
  v7 = Count - 1;
  if (Count < 1)
    return 1;
  v8 = Count;
  v9 = 0;
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v26 = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  LODWORD(v10) = 1;
  v23 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v11 = (void *)sub_20B96ABC8(a2, v9);
    v12 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v15 = (const void *)objc_msgSend_rawCandidate(v11, v13, v14);
      if (v15)
      {
        if (__dynamic_cast(v15, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0))
        {
          sub_20B83BFEC((uint64_t)v29);
          sub_20B828F84(&v30, (uint64_t)"[ME::acceptInlineContext] #", 27);
          std::ostream::operator<<();
          v18 = (const void *)objc_msgSend_rawCandidate(v11, v16, v17);
          if (v18)
            v19 = __dynamic_cast(v18, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
          else
            v19 = 0;
          sub_20B871648((uint64_t)v31, __p);
          if (v28 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          (*(void (**)(void *, uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 528))(v19, 6, v20, 1);
          if (v28 < 0)
            operator delete(__p[0]);
          v29[0] = v26;
          *(_QWORD *)((char *)v29 + *(_QWORD *)(v26 - 24)) = v25;
          v30 = v24;
          v31[0] = v23;
          if (v32 < 0)
            operator delete((void *)v31[8]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x20BD39C2C](&v33);
        }
      }
    }
    if (v9 < v7)
      v21 = 1;
    else
      v21 = a3 ^ 1u;
    v10 = v10 & sub_20B95D9D4(a1, v11, v21, a3);
    ++v9;
  }
  while (v8 != v9);
  return v10;
}

void sub_20B95DDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
    operator delete(__p);
  sub_20B83C118((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95DDF4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t result;

  v6 = sub_20B896F94();
  *(_DWORD *)(a1 + 184) = sub_20B969EE8(a2, a3, v6) & 0xFDFFFFFF;
  if ((a2 & 0x40000) != 0 || *(_BYTE *)(a1 + 230))
  {
    result = 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    if ((_DWORD)result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  }
  *(_BYTE *)(a1 + 228) = result;
  return result;
}

uint64_t sub_20B95DE78(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  _BYTE *v9;
  const __CFArray *v10;
  const __CFArray *v11;

  v8 = sub_20B896F94();
  if (!a2)
    return 0;
  v9 = v8;
  sub_20B95C9D8(a1, a2, a3, a4);
  if (CFStringGetLength(a2) < 1)
  {
    sub_20B95DDF4(a1, a3, a4);
    return 1;
  }
  if (!a4)
  {
    v10 = 0;
    goto LABEL_9;
  }
  v10 = *(const __CFArray **)(a4 + 48);
  if (*v9)
  {
LABEL_9:
    v11 = 0;
    return sub_20B95D438(a1, a2, a3, a4, v10, v11);
  }
  v11 = (const __CFArray *)sub_20B96A4EC(a4, a2);
  return sub_20B95D438(a1, a2, a3, a4, v10, v11);
}

__CFArray *sub_20B95DF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFIndex Count;
  void *v7;
  const char *v8;
  uint64_t v9;
  const void *v10;
  __CFArray *v11;
  __CFArray *Mutable;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[2];
  char v28;
  void *__p;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(*(CFArrayRef *)(a4 + 32));
  if (!Count)
    return 0;
  v7 = (void *)sub_20B96ABC8(a4, Count - 1);
  v10 = (const void *)objc_msgSend_rawCandidate(v7, v8, v9);
  if (!v10)
    return 0;
  v11 = (__CFArray *)__dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  Mutable = v11;
  if (v11)
  {
    v13 = (uint64_t *)(*(uint64_t (**)(__CFArray *))(*(_QWORD *)v11 + 304))(v11);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 == v15)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v16 += *(_WORD *)(v14 + 20);
        v14 += 40;
      }
      while (v14 != v15);
    }
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824)) >> 3);
    if (v17 <= v16)
      v18 = 0;
    else
      v18 = (unsigned __int16)(v17 - v16);
    v19 = (*(uint64_t (**)(__CFArray *))(*(_QWORD *)Mutable + 48))(Mutable);
    if (v19)
      v20 = *(_DWORD *)(*v13 + 40 * v19 - 24) << 16;
    else
      v20 = 0;
    v21 = operator new(4uLL);
    *v21 = v20 | v18;
    __p = 0;
    v30 = 0;
    v31 = 0;
    sub_20B87ACC8(&__p, v21, (uint64_t)(v21 + 1), 2);
    v25 = 0;
    v26 = 0;
    v27[0] = 0;
    v27[1] = &v25;
    v28 = 0;
    v25 = operator new(0x18uLL);
    v26 = v25;
    v27[0] = v25 + 3;
    v26 = sub_20B885FD4((uint64_t)v27, (uint64_t)&__p, (uint64_t)&v32, v25);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v22 = (_QWORD *)operator new();
    sub_20B95FC1C(v22, (uint64_t *)&v25);
    v23 = (void *)sub_20B8B0430((uint64_t)v22);
    __p = v23;
    CFArrayAppendValue(Mutable, v23);
    if (v23)
      CFRelease(v23);
    __p = &v25;
    sub_20B83B400((void ***)&__p);
    operator delete(v21);
  }
  return Mutable;
}

void sub_20B95E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B95E240(uint64_t a1, const char *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;

  if (!a3)
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 176) + 104);
  if (!v4)
    return 0;
  v5 = objc_msgSend_rawCandidate(a3, a2, (uint64_t)a3);
  v8 = (const __CFString *)v5;
  if (v5)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v10 = 40;
    if (!v9)
      v10 = 24;
    v8 = (const __CFString *)(*(uint64_t (**)(const __CFString *))((char *)v8->isa + v10))(v8);
  }
  v11 = objc_msgSend_rawCandidate(v4, v6, v7);
  if (v11)
  {
    v12 = (_QWORD *)v11;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v14 = 40;
    if (!v13)
      v14 = 24;
    v15 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v12 + v14))(v12);
  }
  else
  {
    v15 = 0;
  }
  if (CFStringCompare(v8, v15, 0) == kCFCompareEqualTo)
    return sub_20B9730D8(*(_QWORD *)(a1 + 176));
  else
    return 0;
}

void sub_20B95E328(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  if (*(_DWORD *)(a1 + 944) == 1)
  {
    *(_DWORD *)(a1 + 944) = 2;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 144))(*(_QWORD *)(a1 + 192));
  }
  std::mutex::unlock(v2);
}

void sub_20B95E378(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95E38C(uint64_t a1)
{
  std::mutex *v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t v16[16];
  uint8_t buf[8];
  os_signpost_id_t ptr;

  v2 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  *(_DWORD *)(a1 + 944) = 1;
  std::mutex::unlock(v2);
  if (!*(_BYTE *)(a1 + 876))
  {
    ptr = 0;
    v3 = sub_20B9A7C5C(0xDu);
    ptr = os_signpost_id_make_with_pointer(v3, &ptr);
    v4 = sub_20B9A7C5C(0xDu);
    v5 = ptr;
    if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v6 = v4;
      if (os_signpost_enabled(v4))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
    sub_20B95E570(a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 96));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
    v7 = *(uint64_t **)(a1 + 72);
    v8 = *(uint64_t **)(a1 + 80);
    while (v7 != v8)
    {
      v9 = *v7;
      *v7++ = 0;
      v10 = (void *)sub_20B8E1754(v9);
      (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v10);

    }
    sub_20B8C8284((_QWORD *)(a1 + 24));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
    v11 = sub_20B9A7C5C(0xDu);
    v12 = ptr;
    if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v13 = v11;
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)v16 = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v13, OS_SIGNPOST_INTERVAL_END, v12, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, v16, 2u);
      }
    }
  }
  std::mutex::lock(v2);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 944) = 0;
  std::mutex::unlock(v2);
  return v14;
}

void sub_20B95E55C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B95E570(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 872);
  if (v4 == 2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  }
  else if (v4 == 1)
  {
    if (*(_QWORD *)(a1 + 832) == *(_QWORD *)(a1 + 824) || !*(_BYTE *)(a1 + 848))
      sub_20B95EF34(a1, a2, a3);
    else
      sub_20B95EDC4(a1, a2, a3);
  }
  *(_BYTE *)(a1 + 876) = 1;
}

uint64_t sub_20B95E5E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BOOL4 v5;

  *(_BYTE *)(a1 + 876) = 0;
  sub_20B97293C(*(_QWORD *)(a1 + 176));
  result = sub_20B95D6F0(a1, a2, 0);
  if ((_DWORD)result)
  {
    v5 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270];
    return sub_20B95DBA0(a1, a2, v5);
  }
  return result;
}

uint64_t sub_20B95E664(uint64_t a1)
{
  uint64_t result;

  sub_20B9727D8(*(_QWORD *)(a1 + 176), 1);
  result = *(_QWORD *)(a1 + 192);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t sub_20B95E6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(_QWORD *, uint64_t);
  uint64_t (*v15)(uint64_t);
  void *v16;
  _OWORD v17[2];
  int v18;
  _QWORD v19[3];
  void **v20;

  v11 = 0;
  v12 = &v11;
  v13 = 0x7002000000;
  v14 = sub_20B95E83C;
  v15 = sub_20B95E898;
  v16 = &unk_24C460D28;
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  memset(v19, 0, sizeof(v19));
  v3 = *(_QWORD *)(a1 + 800);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = sub_20B95E8E4;
  v10[3] = &unk_24C46C470;
  v10[4] = &v11;
  v10[5] = a1;
  sub_20B9B53D8(v3, a2, (uint64_t)v10);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
  v4 = (uint64_t *)v12[11];
  v5 = (uint64_t *)v12[12];
  while (v4 != v5)
  {
    v6 = *v4;
    *v4 = 0;
    v7 = (void *)sub_20B8E1754(v6);
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v7);

    ++v4;
  }
  (*(void (**)(_QWORD, uint64_t (*)(void *, char *, uint64_t), uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                           + 32))(*(_QWORD *)(a1 + 16), sub_20B935CB0, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  _Block_object_dispose(&v11, 8);
  v16 = &unk_24C460D28;
  v20 = (void **)v19;
  sub_20B882410(&v20);
  sub_20B84055C((uint64_t)v17);
  return v8;
}

void sub_20B95E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_20B881268(v8 + 40);
  _Unwind_Resume(a1);
}

__n128 sub_20B95E83C(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = &unk_24C460D28;
  sub_20B95FDD8((uint64_t)(a1 + 6), (uint64_t *)(a2 + 48));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 11) = result;
  a1[13] = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_20B95E898(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 40) = &unk_24C460D28;
  v3 = (void **)(a1 + 88);
  sub_20B882410(&v3);
  return sub_20B84055C(a1 + 48);
}

uint64_t sub_20B95E8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 176))(*(_QWORD *)(a1 + 40));
  return sub_20B963728(v4, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24), a2, 1000, 0, 0);
}

BOOL sub_20B95E934(uint64_t a1, char *a2, int *a3)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  CFMutableArrayRef Mutable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  _DWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(0xDu);
  v7 = os_signpost_id_make_with_pointer(v6, (const void *)a1);
  v8 = sub_20B9A7C5C(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      v10 = *a3;
      v22[0] = 67109120;
      v22[1] = v10;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MecabraEngineOpen", "Open MecabraEngine with input method: %d", (uint8_t *)v22, 8u);
    }
  }
  v11 = sub_20B8BBF28(a2);
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 336))(v12);
    v11 = *(_QWORD *)(a1 + 192);
  }
  *(_QWORD *)(a1 + 272) = v11;
  v13 = (_QWORD *)operator new();
  sub_20B93AFF4(v13, v11, a1 + 184);
  sub_20B95FE48((uint64_t *)(a1 + 696), (uint64_t)v13);
  v14 = operator new();
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)v14 = off_24C461CC8;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v14 + 16) = -1;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_DWORD *)(v14 + 56) = 1065353216;
  *(_QWORD *)v14 = &unk_24C462908;
  *(_QWORD *)(v14 + 8) = Mutable;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, *((_QWORD *)a3 + 3));
  v18 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!*(_BYTE *)(a1 + 230))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 16))(*(_QWORD *)(a1 + 176));
  v19 = sub_20B9A7C5C(0xDu);
  if (v7 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    v20 = v19;
    if (os_signpost_enabled(v19))
    {
      LOWORD(v22[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v20, OS_SIGNPOST_INTERVAL_END, v7, "MecabraEngineOpen", (const char *)&unk_20BA9505F, (uint8_t *)v22, 2u);
    }
  }
  return *(_QWORD *)(a1 + 192) != 0;
}

void sub_20B95EBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4010E18BA4);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95EBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  __CFDictionary *v9;
  BOOL v10;
  CFStringRef v11;
  void *v13;
  _OWORD v14[2];
  int v15;
  _QWORD v16[3];
  void **p_isa;

  *(_QWORD *)a4 = &unk_24C460D28;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_DWORD *)(a4 + 40) = 1065353216;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  v13 = &unk_24C460D28;
  memset(v14, 0, sizeof(v14));
  v15 = 1065353216;
  memset(v16, 0, sizeof(v16));
  v8 = (_QWORD *)operator new();
  sub_20B96A650((uint64_t)v8, 0);
  v9 = (__CFDictionary *)v8[7];
  if (kMecabraContextOptionNoPruning)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
    CFDictionarySetValue(v9, kMecabraContextOptionNoPruning, (const void *)*MEMORY[0x24BDBD270]);
  v11 = CFStringCreateWithCharacters(0, *(const UniChar **)a2, *(_QWORD *)(a2 + 8));
  p_isa = &v11->isa;
  if (v11)
  {
    sub_20B95D438(a1, v11, a3, (uint64_t)v8, 0, 0);
    sub_20B95E570(a1, (_QWORD *)a4, &v13);
    CFRelease(v11);
  }
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v13 = &unk_24C460D28;
  p_isa = (void **)v16;
  sub_20B882410(&p_isa);
  return sub_20B84055C((uint64_t)v14);
}

void sub_20B95ED54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_20B881268((uint64_t)&a9);
  sub_20B881268(v9);
  _Unwind_Resume(a1);
}

_WORD *sub_20B95EDC4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_20B8C8284(a2);
  sub_20B8C8284(a3);
  sub_20B95D3E4(a1, *(const __CFString **)(a1 + 856));
  v6 = (*(_DWORD *)(a1 + 184) >> 5) & 1;
  v7 = operator new();
  sub_20B8D6AB0(v7, *(const __CFString **)(a1 + 216), v6, *(_DWORD *)(a1 + 184), *(_DWORD *)(a1 + 808));
  v8 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v7;
  if (v8)
  {
    sub_20B8CE6E8(a1 + 256, v8);
    v7 = *(_QWORD *)(a1 + 256);
  }
  *(_QWORD *)(v7 + 184) = a1 + 816;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 208))(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 256));
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 200))(a1, a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 272))(a1, a2);
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 216))(a1, a2, a3);
  v9 = (uint64_t *)a2[6];
  v10 = a2[7] - (_QWORD)v9;
  if (v10)
  {
    v11 = 0;
    v12 = v10 >> 3;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v13 = v9[v11++];
      *(_QWORD *)(v13 + 8) = v11;
    }
    while (v12 != v11);
    do
    {
      v14 = *v9++;
      *(_BYTE *)(v14 + 225) = 1;
      --v12;
    }
    while (v12);
  }
  return sub_20B87AED0(a2);
}

void sub_20B95EF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F2C4008B6E913);
  _Unwind_Resume(a1);
}

void sub_20B95EF34(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  NSObject *v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD v25[2];
  __int128 v26;
  _BYTE buf[24];
  _BYTE *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v23 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v23;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[ME::convert] [%@]", buf, 0xCu);
  }
  sub_20B8C8284(a2);
  sub_20B8C8284(a3);
  if (*(_QWORD *)(a1 + 216))
  {
    v7 = *(_DWORD *)(a1 + 184);
    if ((v7 & 0x100000) != 0)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 248))(a1, a2);
      return;
    }
    sub_20BA04898(*(unsigned __int16 **)(*(_QWORD *)(a1 + 256) + 96), *(_QWORD *)(*(_QWORD *)(a1 + 256) + 104), (v7 >> 6) & 8 | v7 & 0x20 | (v7 >> 4) & 0x10 | ((char)v7 >> 7) & 6, *(int **)(a1 + 256), *(CFArrayRef **)(a1 + 200), (uint64_t)buf);
    sub_20B8CC7B0((void ***)(a1 + 824));
    *(_OWORD *)(a1 + 824) = *(_OWORD *)&buf[8];
    *(_QWORD *)(a1 + 840) = v28;
    *(_QWORD *)&buf[16] = 0;
    v28 = 0;
    *(_BYTE *)(a1 + 848) = v29;
    *(_QWORD *)buf = off_24C460C88;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&v26 = &buf[8];
    sub_20B8B66F8((void ***)&v26);
    *(_BYTE *)(a1 + 848) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 256) + 184) = a1 + 816;
    v8 = *(_BYTE **)(a1 + 800);
    if (!v8)
    {
LABEL_16:
      if (*(_BYTE *)(a1 + 976))
      {
        gettimeofday((timeval *)(a1 + 984), 0);
        *(_BYTE *)(a1 + 977) = 1;
      }
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 200))(a1, a2, a3);
      sub_20B95AC7C(a1 + 952, 0);
      std::mutex::lock((std::mutex *)(a1 + 880));
      if (*(_DWORD *)(a1 + 944) == 2)
      {
        sub_20B8C8284(a2);
        std::mutex::unlock((std::mutex *)(a1 + 880));
      }
      else
      {
        std::mutex::unlock((std::mutex *)(a1 + 880));
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 272))(a1, a2);
        (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 208))(a1, a2, a3);
        if (*(_QWORD *)(a1 + 864))
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 256))(a1, a2);
        sub_20B8FED50((uint64_t)a2, 0xCu, (uint64_t)"## Final ##", 0, 1u);
        v17 = a2[6];
        v18 = a2[7];
        v19 = v18 - v17;
        if (v18 != v17)
        {
          v20 = 0;
          v21 = v19 >> 3;
          if (v21 <= 1)
            v21 = 1;
          do
          {
            v22 = *(_QWORD *)(v17 + 8 * v20++);
            *(_QWORD *)(v22 + 8) = v20;
          }
          while (v21 != v20);
        }
        sub_20B87AED0(a2);
      }
      return;
    }
    v9 = *(_QWORD *)(a1 + 256);
    v10 = *(_QWORD *)(v9 + 112);
    v11 = *(_QWORD *)(v9 + 120);
    v12 = *(_QWORD *)(v9 + 184);
    v24 = 0;
    v26 = *(_OWORD *)(v9 + 80);
    v25[0] = v10 + 2;
    v25[1] = v11 - 1;
    v13 = (*(_DWORD *)(a1 + 184) & 2) == 0;
    v14 = operator new(0x30uLL);
    if (v13)
    {
      *v14 = &off_24C46A818;
      v14[1] = v25;
      v14[2] = a1;
      v14[3] = a2;
      v14[4] = &v26;
      v14[5] = &v24;
      v28 = v14;
      sub_20B8F6044(v8, v12, (uint64_t)buf);
    }
    else
    {
      *v14 = &off_24C46A7C0;
      v14[1] = v25;
      v14[2] = a1;
      v14[3] = a2;
      v14[4] = &v26;
      v14[5] = &v24;
      v28 = v14;
      sub_20B8F63BC(v8, v12, (uint64_t)buf, -1);
    }
    v15 = v28;
    if (v28 == buf)
    {
      v16 = 4;
      v15 = buf;
    }
    else
    {
      if (!v28)
        goto LABEL_15;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_15:
    if (v24)
      return;
    goto LABEL_16;
  }
}

void sub_20B95F2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B95F304(_QWORD *a1, _QWORD *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int **v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1[98];
  if (v7)
  {
    sub_20B8F671C(v7, a5, a6, (uint64_t)&v15);
    v11 = v15;
    v12 = v16;
    if (v15 != v16)
    {
      v13 = 12000;
      do
      {
        v14 = (int **)(*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
        sub_20B961F8C(v14, a2, a3, a4, *(void **)v11, *(_QWORD *)(v11 + 8), *(void **)(v11 + 16), *(_QWORD *)(v11 + 24), 0.0, 0, 0, v13++, 0, 0, 1, 65, 0, 1);
        v11 += 56;
      }
      while (v11 != v12);
      v11 = v15;
    }
    if (v11)
    {
      v16 = v11;
      operator delete((void *)v11);
    }
  }
}

void sub_20B95F3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B95F404(_QWORD *a1, _QWORD *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int **v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1[99];
  if (v7)
  {
    sub_20B8F671C(v7, a5, a6, (uint64_t)&v15);
    v11 = v15;
    v12 = v16;
    if (v15 != v16)
    {
      v13 = 7000;
      do
      {
        v14 = (int **)(*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
        sub_20B961F8C(v14, a2, a3, a4, *(void **)v11, *(_QWORD *)(v11 + 8), *(void **)(v11 + 16), *(_QWORD *)(v11 + 24), 0.0, 0, 0, v13++, 0, 0, 1, 85, 0, 1);
        v11 += 56;
      }
      while (v11 != v12);
      v11 = v15;
    }
    if (v11)
    {
      v16 = v11;
      operator delete((void *)v11);
    }
  }
}

void sub_20B95F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B95F504(uint64_t a1, void **a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  void ***v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  _DWORD v18[3];
  _QWORD v19[2];
  _QWORD v20[2];
  void **v21[3];
  void ***v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 800))
  {
    v4 = *(_QWORD *)(a1 + 256);
    v5 = *(unsigned __int16 **)(v4 + 80);
    v6 = *(_QWORD *)(v4 + 88);
    v7 = *(_QWORD *)(v4 + 112);
    v8 = *(_QWORD *)(v4 + 120);
    v10 = (_BYTE *)(a1 + 184);
    v9 = *(_DWORD *)(a1 + 184);
    v18[0] = 0;
    sub_20BA04898(v5, v6, (v9 >> 6) & 8 | v9 & 0x20 | (v9 >> 4) & 0x10 | ((char)v9 >> 7) & 6, (int *)v4, *(CFArrayRef **)(a1 + 200), (uint64_t)&v16);
    v20[0] = v5;
    v20[1] = v6;
    v19[0] = v7;
    v19[1] = v8;
    v11 = *(_QWORD *)(a1 + 800);
    if ((*v10 & 2) != 0)
    {
      v13 = (void ***)operator new(0x38uLL);
      *v13 = (void **)&off_24C46A710;
      v13[1] = (void **)v19;
      v13[2] = (void **)v18;
      v13[3] = (void **)&v16;
      v13[4] = (void **)a1;
      v13[5] = a2;
      v13[6] = (void **)v20;
      v22 = v13;
      sub_20B8F62A0(v11, (uint64_t)&v16, (uint64_t)v21, 0xFFFFFFFFLL);
    }
    else
    {
      v12 = (void ***)operator new(0x30uLL);
      *v12 = (void **)&off_24C46A768;
      v12[1] = (void **)v19;
      v12[2] = (void **)a1;
      v12[3] = a2;
      v12[4] = (void **)v20;
      v12[5] = (void **)v18;
      v22 = v12;
      sub_20B8F5F30(v11, (uint64_t)&v16, (uint64_t)v21);
    }
    v14 = v22;
    if (v22 == v21)
    {
      v15 = 4;
      v14 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_10:
        v16 = off_24C460C88;
        v21[0] = (void **)&v17;
        sub_20B8B66F8(v21);
        return;
      }
      v15 = 5;
    }
    ((void (*)(void))(*v14)[v15])();
    goto LABEL_10;
  }
}

void sub_20B95F6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  a15 = (void **)&a10;
  sub_20B8B66F8(&a15);
  _Unwind_Resume(a1);
}

void sub_20B95F730(uint64_t a1, void **a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  std::mutex *v12;

  v12 = (std::mutex *)(a1 + 720);
  if (std::mutex::try_lock((std::mutex *)(a1 + 720)))
  {
    sub_20B95F304((_QWORD *)a1, a2, a3, a4, a5, a6);
    sub_20B95F404((_QWORD *)a1, a2, a3, a4, a5, a6);
    sub_20B95F504(a1, a2);
    std::mutex::unlock(v12);
  }
}

void sub_20B95F7E8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B95F7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::mutex *v10;
  int v11;

  v10 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  v11 = *(_DWORD *)(a1 + 944);
  std::mutex::unlock(v10);
  if (v11 != 2)
  {
    std::mutex::lock((std::mutex *)(a1 + 720));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a2, a3, a4, a5);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 72))(*(_QWORD *)(a1 + 192));
    std::mutex::unlock((std::mutex *)(a1 + 720));
  }
}

void sub_20B95F8B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B95F8CC(uint64_t a1, void **a2)
{
  std::mutex *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  v5 = *(_DWORD *)(a1 + 944);
  std::mutex::unlock(v4);
  if (v5 != 2)
  {
    v6 = *(_QWORD **)(a1 + 256);
    if (!*(_BYTE *)(a1 + 809))
    {
      v7 = *(_QWORD *)(a1 + 704);
      if (*(_BYTE *)(v6[23] + 32))
        sub_20BA150FC(v7, a2, *(_QWORD *)(a1 + 256));
      else
        sub_20BA14C38(v7, a2, (uint64_t)(v6 + 10), v6[14], v6[15]);
      if ((*(_BYTE *)(a1 + 184) & 0x20) != 0)
        sub_20BA14C38(*(_QWORD *)(a1 + 704), a2, (uint64_t)(v6 + 10), v6[12], v6[13]);
    }
    sub_20B9FCE40(*(_QWORD *)(a1 + 712), a2, (uint64_t)(v6 + 10));
    if ((*(_BYTE *)(a1 + 187) & 2) == 0)
      sub_20B95F730(a1, a2, (void *)v6[12], v6[13], v6[14], v6[15]);
  }
}

void sub_20B95F9A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *i;
  double v4;
  double v5;
  int v6;
  double *v7;

  v2 = *(_QWORD **)(a2 + 48);
  for (i = *(_QWORD **)(a2 + 56); v2 != i; ++v2)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 96))(*v2) != 83)
    {
      v4 = (*(double (**)(_QWORD))(*(_QWORD *)*v2 + 392))(*v2);
      if (v4 == -1.79769313e308)
        v5 = -100.0;
      else
        v5 = v4;
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 112))(*v2);
      v7 = (double *)sub_20B896F94();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 480))(*v2, (int)(v7[1] * (double)v6 - (double)*((int *)v7 + 1) * v5));
    }
  }
}

__CFDictionary *sub_20B95FA74(_QWORD *a1, int a2, const __CFDictionary *a3)
{
  __CFDictionary *Mutable;
  const __CFString *Value;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (***v12)(_QWORD);
  uint64_t v13;
  void *v14;
  char *v16;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    if (a2 == 2)
    {
      v9 = (char *)CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      v16 = v9;
      v10 = (_QWORD *)a1[18];
      v11 = (_QWORD *)a1[19];
      while (v10 != v11)
      {
        v12 = (uint64_t (***)(_QWORD))(*v10 + *(_QWORD *)(*(_QWORD *)*v10 - 32));
        v13 = (**v12)(v12);
        v14 = (void *)sub_20B8E1754(v13);
        CFArrayAppendValue((CFMutableArrayRef)v9, v14);

        ++v10;
      }
      CFDictionarySetValue(Mutable, CFSTR("candidates"), v9);
      if (v9)
        CFRelease(v9);
    }
    else if (a2 == 1)
    {
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("wordListFile"));
      if (Value)
      {
        sub_20B8D154C(Value, &v16);
        v8 = v16;
        (*(void (**)(_QWORD *, char *))(*a1 + 144))(a1, v16);
        if (v8)
          MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
      }
    }
  }
  return Mutable;
}

void sub_20B95FBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

double sub_20B95FC10()
{
  return 0.0;
}

_QWORD *sub_20B95FC1C(_QWORD *a1, uint64_t *a2)
{
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_24C461C00;
  a1[1] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_20B95FCA4(a1 + 4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_20B95FC78(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &unk_24C460C48;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B95FCA4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20B828D20(result, a4);
    result = sub_20B95FD28((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20B95FD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B83B400(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B95FD28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_20B87ACC8(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 1);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B886084((uint64_t)v8);
  return v4;
}

void sub_20B95FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B886084((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B95FDD8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t *sub_20B95FE48(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B8B812C(v2 + 8);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B95FE94(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B95FECC()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B95FEE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C46A7C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20B95FF28(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C46A7C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B95FF58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 == *(_QWORD *)(v5 + 8))
    v7 = 2 * (memcmp(*(const void **)a2, *(const void **)v5, 2 * v6) != 0);
  else
    v7 = 2;
  v8 = !sub_20B947D74(a2, v5);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  result = sub_20B963728(v9, *(_QWORD **)(a1 + 24), **(void ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, **(_DWORD **)(a1 + 40) + 1000, v7, v8);
  ++**(_DWORD **)(a1 + 40);
  return result;
}

uint64_t sub_20B960014(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B960050()
{
  return &unk_24C45EF20;
}

void sub_20B960060()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B960074(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C46A818;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20B9600BC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C46A818;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9600EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 != *(_QWORD *)(v4 + 8) || memcmp(*(const void **)a2, *(const void **)v4, 2 * v6) != 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5);
  result = sub_20B963728(v8, *(_QWORD **)(a1 + 24), **(void ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, **(_DWORD **)(a1 + 40) + 1000, 0, v7);
  ++**(_DWORD **)(a1 + 40);
  return result;
}

uint64_t sub_20B96018C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF30))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9601C8()
{
  return &unk_24C45EF30;
}

void sub_20B9601D8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9601EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24C46A710;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_20B960234(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C46A710;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B960264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = sub_20B947D74(a2, v6);
  v9 = v8;
  v10 = **(_DWORD **)(a1 + 16) + 1000;
  v11 = 2 * (v5 != v7);
  if (v5 != v7 && !v8)
  {
    if (v5 && (**(_WORD **)a2 & 0xFFDFu) - 65 <= 0x19)
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
    if (v7 >= 2)
      v12 = 0;
    else
      v12 = 20000;
    v10 += v12;
    v11 = 2;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  result = sub_20B963728(v13, *(_QWORD **)(a1 + 40), **(void ***)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), a2, v10, v11, !v9);
  ++**(_DWORD **)(a1 + 16);
  return result;
}

uint64_t sub_20B96035C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B960398()
{
  return &unk_24C45EF00;
}

void sub_20B9603A8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9603BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C46A768;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20B960404(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C46A768;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B960434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 != *(_QWORD *)(v4 + 8) || memcmp(*(const void **)a2, *(const void **)v4, 2 * v6) != 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5);
  result = sub_20B963728(v8, *(_QWORD **)(a1 + 24), **(void ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, **(_DWORD **)(a1 + 40) + 1000, 0, v7);
  ++**(_DWORD **)(a1 + 40);
  return result;
}

uint64_t sub_20B9604D4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B960510()
{
  return &unk_24C45EF10;
}

id sub_20B96051C(void *a1, const char *a2, uint64_t a3)
{
  id v3;
  uint64_t v4;
  const char *v5;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = objc_msgSend_length(a1, a2, a3);
  if (v4 != 1)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x3052000000;
    v11 = sub_20B9605F8;
    v12 = sub_20B960608;
    v13 = 0;
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = sub_20B960614;
    v7[3] = &unk_24C49BB18;
    v7[4] = &v8;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v3, v5, 0, v4, 2, v7);
    v3 = (id)v9[5];
    _Block_object_dispose(&v8, 8);
  }
  return v3;
}

void sub_20B9605E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20B9605F8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_20B960608(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_20B960614(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t result;

  result = objc_msgSend_copy(a2, (const char *)a2, a3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *a7 = 1;
  return result;
}

void *sub_20B960650(void *a1, const char *a2, uint64_t a3)
{
  int v3;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  const char *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v3 = a3;
  v25 = *MEMORY[0x24BDAC8D0];
  v5 = (void *)objc_msgSend_array(MEMORY[0x24BDBCEB8], a2, a3);
  v7 = (void *)objc_msgSend_componentsSeparatedByString_(a1, v6, (uint64_t)CFSTR(" "));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v20, v24, 16);
  if (v9)
  {
    v11 = v9;
    v12 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v21 != v12)
          objc_enumerationMutation(v7);
        v14 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (!objc_msgSend_hasPrefix_(v14, v10, (uint64_t)CFSTR("s:")))
        {
          if (objc_msgSend_hasPrefix_(v14, v10, (uint64_t)CFSTR("t:")))
          {
            v16 = CFSTR("t:");
            if (v3 == 1)
              continue;
LABEL_12:
            v17 = objc_msgSend_length(v16, v10, v15);
            v14 = (void *)objc_msgSend_substringFromIndex_(v14, v18, v17);
          }
          objc_msgSend_addObject_(v5, v10, (uint64_t)v14);
          continue;
        }
        if (v3 != 2)
        {
          v16 = CFSTR("s:");
          if (v3 != 5)
            goto LABEL_12;
        }
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v20, v24, 16);
    }
    while (v11);
  }
  return v5;
}

uint64_t sub_20B9607D8(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  __CFString *v23;
  const char *v24;
  const char *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  void *v34;
  const char *v35;
  __int16 v36;
  _QWORD block[6];

  v4 = a1;
  if ((unint64_t)(a3 - 5) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    v34 = (void *)objc_msgSend_currentHandler(MEMORY[0x24BDD1448], a2, a3);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v34, v35, (uint64_t)a2, v4, CFSTR("NSString+CharacterInformationAdditions.mm"), 89, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("toneNumber >= 1 && toneNumber <= 4"));
  }
  else
  {
    v8 = a1;
    if (objc_msgSend_rangeOfString_(a1, a2, (uint64_t)CFSTR("v")) != 0x7FFFFFFFFFFFFFFFLL)
      v8 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v4, v6, (uint64_t)CFSTR("v"), CFSTR("ü"));
    if (qword_25472BC60 != -1)
      dispatch_once(&qword_25472BC60, &unk_24C46CE90);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_20B960B00;
    block[3] = &unk_24C49F698;
    block[4] = v4;
    block[5] = a2;
    if (qword_25472BC70 != -1)
      dispatch_once(&qword_25472BC70, block);
    if (qword_25472BC58 && qword_25472BC68)
    {
      v9 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x24BDD14A8], v6, v7);
      v13 = objc_msgSend_rangeOfCharacterFromSet_(v8, v10, v9);
      if (v13 == 0x7FFFFFFFFFFFFFFFLL)
        v13 = objc_msgSend_length(v8, v11, v12);
      v14 = objc_msgSend_rangeOfCharacterFromSet_options_range_(v8, v11, qword_25472BC58, 1, 0, v13);
      v16 = objc_msgSend_rangeOfCharacterFromSet_options_range_(v8, v15, qword_25472BC58, 5, 0, v13);
      if (v14 != 0x7FFFFFFFFFFFFFFFLL && v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v18 = v16 - v14;
        if (v16 >= v14)
        {
          v19 = v18 + 1;
          v20 = (void *)objc_msgSend_substringWithRange_(v8, v17, v14, v18 + 1);
          v23 = (__CFString *)(id)objc_msgSend_mutableCopy(v20, v21, v22);
          if (objc_msgSend_objectForKey_((void *)qword_25472BC68, v24, (uint64_t)v23))
          {
            v26 = (void *)objc_msgSend_objectForKey_((void *)qword_25472BC68, v25, (uint64_t)v23);
            v29 = objc_msgSend_unsignedIntegerValue(v26, v27, v28) + 1;
          }
          else
          {
            v29 = 0x8000000000000000;
          }
          v36 = word_20BA4E184[a3 - 1];
          v30 = objc_msgSend_stringWithCharacters_length_(MEMORY[0x24BDD17C8], v25, (uint64_t)&v36, 1);
          objc_msgSend_insertString_atIndex_(v23, v31, v30, v29);
          CFStringNormalize(v23, kCFStringNormalizationFormC);
          return objc_msgSend_stringByReplacingCharactersInRange_withString_(v8, v32, v14, v19, v23);
        }
      }
    }
  }
  return (uint64_t)v4;
}

void sub_20B960A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  id v9;
  const char *v10;
  uint64_t v11;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    objc_msgSend_callStackSymbols(v9, v10, v11);
    NSLog(CFSTR("%@"));
    objc_end_catch();
    JUMPOUT(0x20B9609E4);
  }
  _Unwind_Resume(exception_object);
}

id sub_20B960AD0(uint64_t a1, const char *a2)
{
  id result;

  result = (id)objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x24BDD14A8], a2, (uint64_t)CFSTR("aeiouü"));
  qword_25472BC58 = (uint64_t)result;
  return result;
}

uint64_t sub_20B960B00(uint64_t a1, const char *a2)
{
  const char *v2;
  id v3;
  const char *v4;
  uint64_t result;
  _QWORD v6[9];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[10];
  const __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19[8] = xmmword_24C49F668;
  v19[9] = *(_OWORD *)off_24C49F678;
  v20 = CFSTR("üe");
  v19[4] = xmmword_24C49F628;
  v19[5] = *(_OWORD *)&off_24C49F638;
  v19[6] = xmmword_24C49F648;
  v19[7] = *(_OWORD *)&off_24C49F658;
  v19[0] = xmmword_24C49F5E8;
  v19[1] = *(_OWORD *)&off_24C49F5F8;
  v19[2] = xmmword_24C49F608;
  v19[3] = *(_OWORD *)&off_24C49F618;
  v6[0] = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x24BDD16E0], a2, 0);
  v6[1] = v6[0];
  v6[2] = v6[0];
  v6[3] = v6[0];
  v6[4] = v6[0];
  v6[5] = v6[0];
  v6[6] = v6[0];
  v6[7] = v6[0];
  v6[8] = v6[0];
  v7 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x24BDD16E0], v2, 1);
  v8 = v7;
  v9 = v7;
  v10 = v7;
  v11 = v7;
  v12 = v6[0];
  v13 = v7;
  v14 = v7;
  v15 = v7;
  v16 = v7;
  v17 = v7;
  v18 = v7;
  v3 = objc_alloc(MEMORY[0x24BDBCE70]);
  result = objc_msgSend_initWithObjects_forKeys_count_(v3, v4, (uint64_t)v6, v19, 21);
  qword_25472BC68 = result;
  return result;
}

uint64_t sub_20B960C00(void *a1, const char *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;

  v6 = objc_msgSend_length(a1, a2, a3);
  if (qword_25472BC90 != -1)
    dispatch_once(&qword_25472BC90, &unk_24C49F700);
  return objc_msgSend_compare_options_range_locale_(a1, v5, a3, 512, 0, v6, qword_25472BC88);
}

uint64_t sub_20B960C74(void *a1, const char *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;

  v6 = objc_msgSend_length(a1, a2, a3);
  if (qword_25472BCA0 != -1)
    dispatch_once(&qword_25472BCA0, &unk_24C49F720);
  return objc_msgSend_compare_options_range_locale_(a1, v5, a3, 512, 0, v6, qword_25472BC98);
}

uint64_t sub_20B960CE8(void *a1, const char *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  int isEqualToString;
  const char *v28;
  unsigned int v29;
  uint64_t v30;

  v6 = objc_msgSend_length(a1, a2, (uint64_t)a3);
  if (qword_25472BCA0 != -1)
    dispatch_once(&qword_25472BCA0, &unk_24C49F720);
  v7 = objc_msgSend_compare_options_range_locale_(a1, v5, (uint64_t)a3, 512, 0, v6, qword_25472BC98);
  v10 = objc_msgSend_length(a1, v8, v9);
  if (v10)
  {
    v13 = v10;
    if (v10 == objc_msgSend_length(a3, v11, v12))
    {
      v15 = v13 - 1;
      v16 = (void *)objc_msgSend_substringToIndex_(a1, v14, v15);
      v18 = objc_msgSend_substringToIndex_(a3, v17, v15);
      if (objc_msgSend_isEqualToString_(v16, v19, v18))
      {
        v21 = objc_msgSend_substringFromIndex_(a1, v20, v15);
        v24 = objc_msgSend_substringFromIndex_(a3, v22, v15);
        v25 = 0;
        do
        {
          v26 = off_24C49F6B8[v25];
          isEqualToString = objc_msgSend_isEqualToString_(v26, v23, v21);
          v29 = objc_msgSend_isEqualToString_(v26, v28, v24);
          if (v29)
            v30 = 1;
          else
            v30 = v7;
          if (isEqualToString)
            v7 = (isEqualToString & v29) - 1;
          else
            v7 = v30;
          if ((isEqualToString & 1) != 0)
            break;
          if ((v29 & 1) != 0)
            break;
        }
        while (v25++ != 4);
      }
    }
  }
  return v7;
}

__CFString *sub_20B960E44(void *a1, const char *a2, uint64_t a3)
{
  __CFString *v3;

  v3 = (__CFString *)(id)objc_msgSend_mutableCopy(a1, a2, a3);
  CFStringTransform(v3, 0, (CFStringRef)*MEMORY[0x24BDBD668], 0);
  return v3;
}

const __CFString *sub_20B960E84(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  const __CFString *result;
  const char *v10;
  __CFString *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v4 = objc_msgSend_length(a1, a2, a3);
  if (!v4)
    return &stru_24C4B3660;
  v6 = v4 - 1;
  v7 = objc_msgSend_characterAtIndex_(a1, v5, v4 - 1);
  result = (const __CFString *)objc_msgSend_substringToIndex_(a1, v8, v6);
  v11 = (__CFString *)result;
  if ((v7 - 49) > 3)
  {
    if (v7 != 53)
      return (const __CFString *)a1;
  }
  else
  {
    v12 = objc_msgSend_characterAtIndex_(a1, v10, v6) - 48;
    v14 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v11, v13, (uint64_t)CFSTR("v"), CFSTR("ü"));
    return (const __CFString *)MEMORY[0x24BEDD108](v14, sel_stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber_, v12);
  }
  return result;
}

const __CFString *sub_20B960F34(void *a1, const char *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  void *v22;
  uint64_t v23;
  const char *v24;

  v3 = a1;
  v4 = objc_msgSend_length(a1, a2, a3);
  if (!v4)
    return &stru_24C4B3660;
  v6 = v4 - 1;
  v7 = objc_msgSend_characterAtIndex_(v3, v5, v4 - 1);
  if ((v7 - 49) <= 4)
  {
    v10 = v7;
    v13 = (void *)objc_msgSend_substringToIndex_(v3, v8, v6);
    if (qword_25472BCB0 != -1)
      dispatch_once(&qword_25472BCB0, &unk_24C49F740);
    v14 = (void *)qword_25472BCA8;
    v15 = objc_msgSend_lowercaseString(v13, v11, v12);
    v17 = (void *)objc_msgSend_objectForKey_(v14, v16, v15);
    if (objc_msgSend_length(v17, v18, v19))
      return (const __CFString *)objc_msgSend_stringByAppendingString_(v17, v20, (uint64_t)off_24C49F6B8[(v10 - 48) - 1]);
    return (const __CFString *)v3;
  }
  if (qword_25472BCB0 != -1)
    dispatch_once(&qword_25472BCB0, &unk_24C49F740);
  v22 = (void *)qword_25472BCA8;
  v23 = objc_msgSend_lowercaseString(v3, v8, v9);
  return (const __CFString *)objc_msgSend_objectForKey_(v22, v24, v23);
}

__CFString *sub_20B961068(void *a1, const char *a2, uint64_t a3)
{
  __CFString *result;
  const char *v5;

  result = (__CFString *)objc_msgSend_length(a1, a2, a3);
  if (result)
    return off_24C49F6B8[objc_msgSend_characterAtIndex_(a1, v5, (uint64_t)&result[-1].length + 7) - 49];
  return result;
}

void *sub_20B9610AC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  const char *v12;

  if (qword_25472BC80 != -1)
    dispatch_once(&qword_25472BC80, &unk_24C49F6E0);
  v4 = objc_msgSend_length(a1, a2, a3);
  v8 = (void *)objc_msgSend_string(MEMORY[0x24BDD16A8], v5, v6);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v10 = objc_msgSend_characterAtIndex_(a1, v7, i);
      if (v10 - 49 <= 4)
      {
        v11 = objc_msgSend_objectAtIndex_((void *)qword_25472BC78, v7, v10 - 49);
        objc_msgSend_appendFormat_(v8, v12, (uint64_t)CFSTR("%@"), v11);
      }
    }
  }
  return v8;
}

uint64_t sub_20B961180()
{
  id v0;
  const char *v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x24BDBCE30]);
  result = objc_msgSend_initWithObjects_(v0, v1, (uint64_t)CFSTR("⼀"), CFSTR("⼁"), CFSTR("⼃"), CFSTR("⼂"), CFSTR("乛"), 0);
  qword_25472BC78 = result;
  return result;
}

uint64_t sub_20B9611E4()
{
  id v0;
  const char *v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x24BDBCEA0]);
  result = objc_msgSend_initWithLocaleIdentifier_(v0, v1, (uint64_t)CFSTR("zh-Hans"));
  qword_25472BC88 = result;
  return result;
}

uint64_t sub_20B961214()
{
  id v0;
  const char *v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x24BDBCEA0]);
  result = objc_msgSend_initWithLocaleIdentifier_(v0, v1, (uint64_t)CFSTR("zh-Hant"));
  qword_25472BC98 = result;
  return result;
}

void sub_20B961244()
{
  _QWORD *v0;
  char *v1;
  int v2;
  const UInt8 *v3;
  CFIndex v4;
  CFURLRef v5;
  id v6;
  const char *v7;

  v0 = (_QWORD *)sub_20B9AE60C();
  v1 = (char *)sub_20B9AE738(v0, 3, off_254729648[0], off_254729608[0], 0);
  v2 = v1[23];
  if (v2 >= 0)
    v3 = (const UInt8 *)v1;
  else
    v3 = *(const UInt8 **)v1;
  if (v2 >= 0)
    v4 = v1[23];
  else
    v4 = *((_QWORD *)v1 + 1);
  v5 = CFURLCreateFromFileSystemRepresentation(0, v3, v4, 0);
  v6 = objc_alloc(MEMORY[0x24BDBCE70]);
  qword_25472BCA8 = objc_msgSend_initWithContentsOfURL_(v6, v7, (uint64_t)v5);
  if (v5)
    CFRelease(v5);
}

uint64_t sub_20B9612DC(int a1, CFStringRef theString, char a3)
{
  unsigned __int8 v5;
  unint64_t Length;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t i;
  CFRange RangeOfComposedCharactersAtIndex;
  char *v12;
  CFRange *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  CFRange *v20;
  CFRange *v21;
  char *v22;
  char *v23;
  __int128 v24;
  BOOL v25;
  CFCharacterSetRef Predefined;
  CFIndex *v27;
  const __CFCharacterSet *v28;
  uint64_t v29;
  CFIndex v30;
  const __CFCharacterSet *v31;
  const __CFCharacterSet *v32;
  const __CFCharacterSet *v33;
  const __CFAllocator *v34;
  const __CFString *v35;
  char *v36;
  uint64_t v37;
  const __CFString *v38;
  unint64_t v39;
  uint64_t v40;
  CFIndex *v41;
  CFIndex v42;
  int CharacterAtIndex;
  const __CFString *v44;
  const __CFString *cf;
  const __CFString *v48;
  const __CFString *theStringa;
  void *v50[3];
  void *__p;
  char *v52;
  _QWORD v53[3];
  CFRange v54;
  CFRange v55;
  CFRange v56;

  v5 = atomic_load((unsigned __int8 *)&qword_25472BCC8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25472BCC8))
  {
    qword_25472BCC0 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472BCC8);
  }
  __p = 0;
  v52 = 0;
  v53[0] = 0;
  Length = CFStringGetLength(theString);
  v7 = Length;
  if (Length)
  {
    if (Length >> 60)
      sub_20B80CDD8();
    v8 = (char *)sub_20B829AD0((uint64_t)v53, Length);
    __p = &v8[(unint64_t)v52 & 0xFFFFFFFFFFFFFFF0];
    v52 = (char *)__p;
    v53[0] = &v8[16 * v9];
  }
  if (v7)
  {
    for (i = 0; i < v7; i += RangeOfComposedCharactersAtIndex.length)
    {
      RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(theString, i);
      v12 = v52;
      if ((unint64_t)v52 >= v53[0])
      {
        v14 = (char *)__p;
        v15 = (v52 - (_BYTE *)__p) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          sub_20B80CDD8();
        v17 = v53[0] - (_QWORD)__p;
        if ((uint64_t)(v53[0] - (_QWORD)__p) >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_20B829AD0((uint64_t)v53, v18);
          v14 = (char *)__p;
          v12 = v52;
        }
        else
        {
          v19 = 0;
        }
        v20 = (CFRange *)&v19[16 * v15];
        *v20 = RangeOfComposedCharactersAtIndex;
        v21 = v20;
        if (v12 != v14)
        {
          do
          {
            v21[-1] = *((CFRange *)v12 - 1);
            --v21;
            v12 -= 16;
          }
          while (v12 != v14);
          v14 = (char *)__p;
        }
        v13 = v20 + 1;
        __p = v21;
        v52 = (char *)&v20[1];
        v53[0] = &v19[16 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v52 = RangeOfComposedCharactersAtIndex.location;
        *((_QWORD *)v12 + 1) = RangeOfComposedCharactersAtIndex.length;
        v13 = (CFRange *)(v12 + 16);
      }
      v52 = (char *)v13;
    }
  }
  if ((a3 & 1) == 0 && __p != v52)
  {
    v22 = v52 - 16;
    if (v52 - 16 > __p)
    {
      v23 = (char *)__p + 16;
      do
      {
        v24 = *((_OWORD *)v23 - 1);
        *((_OWORD *)v23 - 1) = *(_OWORD *)v22;
        *(_OWORD *)v22 = v24;
        v22 -= 16;
        v25 = v23 >= v22;
        v23 += 16;
      }
      while (!v25);
    }
  }
  if (!a1 && !*(_BYTE *)qword_25472BCC0)
  {
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
    v27 = (CFIndex *)__p;
    if (__p == v52)
    {
      v29 = 0;
    }
    else
    {
      v28 = Predefined;
      v29 = 0;
      do
      {
        v54.location = *v27;
        v30 = v27[1];
        v54.length = v30;
        if (CFStringFindCharacterFromSet(theString, v28, v54, 0, 0))
          break;
        v29 += v30;
        v27 += 2;
      }
      while (v27 != (CFIndex *)v52);
    }
    if (v29 >= 10)
      v40 = 10;
    else
      v40 = v29;
    goto LABEL_78;
  }
  v31 = (const __CFCharacterSet *)sub_20B9618D0();
  if (a1 || (a3 & 1) != 0)
  {
    if (a1 == 4)
    {
      v31 = (const __CFCharacterSet *)qword_25472BCD8;
      if (!qword_25472BCD8)
      {
        v33 = (const __CFCharacterSet *)sub_20B9618D0();
        qword_25472BCD8 = (uint64_t)CFCharacterSetCreateMutableCopy(0, v33);
        CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_25472BCD8, CFSTR("'‘’"));
        v31 = (const __CFCharacterSet *)qword_25472BCD8;
      }
    }
  }
  else
  {
    v31 = (const __CFCharacterSet *)qword_25472BCD0;
    if (!qword_25472BCD0)
    {
      v32 = (const __CFCharacterSet *)sub_20B9618D0();
      qword_25472BCD0 = (uint64_t)CFCharacterSetCreateMutableCopy(0, v32);
      CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_25472BCD0, CFSTR("(<[{（＜［｛「『【〈《"));
      CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_25472BCD0, CFSTR("、"));
      v31 = (const __CFCharacterSet *)qword_25472BCD0;
    }
  }
  sub_20B8D0790(theString, (UniChar **)v50);
  v48 = 0;
  theStringa = 0;
  cf = 0;
  if (__p == v52
    || (v34 = (const __CFAllocator *)*MEMORY[0x24BDBD258],
        v35 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v50[0] + *(_QWORD *)__p, *((_QWORD *)__p + 1), (CFAllocatorRef)*MEMORY[0x24BDBD258]), v36 = (char *)__p, theStringa = v35, v52 == __p))
  {
    v40 = 0;
    goto LABEL_70;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  do
  {
    v41 = (CFIndex *)&v36[v37];
    v55.location = *v41;
    v42 = v41[1];
    v55.length = v42;
    if (CFStringFindCharacterFromSet(theString, v31, v55, 0, 0))
      break;
    if (v39 != ((v52 - (_BYTE *)__p) >> 4) - 1)
      v48 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v50[0] + *(_QWORD *)((char *)__p + v37 + 16), *(_QWORD *)((char *)__p + v37 + 24), v34);
    if (CFStringGetLength(v35))
    {
      v38 = theStringa;
      CharacterAtIndex = CFStringGetCharacterAtIndex(theStringa, 0);
      v44 = cf;
      if (!cf)
      {
        v35 = v48;
        if (CharacterAtIndex == 32)
        {
          if (!v48)
            goto LABEL_70;
          v56.length = CFStringGetLength(v48);
          v56.location = 0;
          if (CFStringFindCharacterFromSet(v48, v31, v56, 0, 0))
            goto LABEL_68;
        }
        goto LABEL_63;
      }
      if (CharacterAtIndex == 32 && sub_20B961940(cf) && (sub_20B961940(v48) & 1) != 0)
        goto LABEL_67;
    }
    else
    {
      v44 = cf;
      v38 = theStringa;
      if (!cf)
      {
        v35 = v48;
LABEL_63:
        cf = v38;
        goto LABEL_64;
      }
    }
    CFRelease(v44);
    cf = v38;
    v35 = v48;
LABEL_64:
    v48 = 0;
    theStringa = v35;
    v40 += v42;
    ++v39;
    v36 = (char *)__p;
    v37 += 16;
  }
  while (v39 < (v52 - (_BYTE *)__p) >> 4);
  if (!v38)
    goto LABEL_70;
  v44 = v38;
LABEL_67:
  CFRelease(v44);
  v35 = v48;
  if (!v48)
    goto LABEL_70;
LABEL_68:
  CFRelease(v35);
LABEL_70:
  if (theStringa)
    CFRelease(theStringa);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
LABEL_78:
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  return v40;
}

void sub_20B961830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_guard_abort(&qword_25472BCC8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9618D0()
{
  uint64_t result;
  __CFCharacterSet *Mutable;
  const __CFCharacterSet *Predefined;
  __CFCharacterSet *v3;
  const __CFCharacterSet *v4;

  result = qword_25472BCB8;
  if (!qword_25472BCB8)
  {
    Mutable = CFCharacterSetCreateMutable(0);
    qword_25472BCB8 = (uint64_t)Mutable;
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
    CFCharacterSetUnion(Mutable, Predefined);
    v3 = (__CFCharacterSet *)qword_25472BCB8;
    v4 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
    CFCharacterSetUnion(v3, v4);
    CFCharacterSetRemoveCharactersInString((CFMutableCharacterSetRef)qword_25472BCB8, CFSTR("'- "));
    return qword_25472BCB8;
  }
  return result;
}

uint64_t sub_20B961940(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  CFIndex v4;
  CFIndex v5;
  unsigned int CharacterAtIndex;
  uint64_t result;

  if (!a1)
    return 1;
  Length = CFStringGetLength(a1);
  v3 = Length - 1;
  if (Length < 1)
    return 1;
  v4 = Length;
  v5 = 0;
  while (1)
  {
    CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v5);
    if (CharacterAtIndex >> 10 == 54 && v5 < v3)
      LOWORD(CharacterAtIndex) = CFStringGetCharacterAtIndex(a1, ++v5) + ((_WORD)CharacterAtIndex << 10) + 9216;
    if (!u_hasBinaryProperty((unsigned __int16)CharacterAtIndex, UCHAR_IDEOGRAPHIC)
      && u_getIntPropertyValue((unsigned __int16)CharacterAtIndex, UCHAR_EAST_ASIAN_WIDTH) != 3
      && !uscript_hasScript())
    {
      result = uscript_hasScript();
      if (!(_DWORD)result)
        break;
    }
    if (++v5 >= v4)
      return 1;
  }
  return result;
}

_QWORD *sub_20B961A20(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = sub_20B896F94();
  sub_20B8B2334(0);
  a1[2] = &qword_25472C9B0;
  a1[3] = sub_20B8D0FCC(0);
  return a1;
}

uint64_t sub_20B961A6C(int a1, void *a2, unint64_t a3, void *a4, unint64_t a5, void *a6, unint64_t a7, __int16 a8, double a9, __int16 a10, int a11, int a12, int a13, int a14, int a15, char a16)
{
  uint64_t v23;
  BOOL v24;
  void *__p[3];
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;

  if (!a6 && a7)
    return 0;
  v23 = 0;
  if (a3)
    v24 = a2 == 0;
  else
    v24 = 0;
  if (!v24 && a5 <= 0xFF)
  {
    v30 = 0x20000;
    v29 = 0u;
    v28 = 0u;
    WORD2(v29) = a3;
    WORD3(v29) = a5;
    WORD4(v29) = a7;
    WORD5(v29) = a8;
    WORD6(v29) = a10;
    BYTE1(v30) = a16;
    v27 = a1;
    v23 = operator new();
    sub_20B90447C(__p, 1uLL, (__int128 *)&v27);
    sub_20B916250(v23, a2, a3, a4, a5, a6, a7, a11, a12, 0, (uint64_t)__p, a13, a14, a15);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_BYTE *)(v23 + 224) = 1;
    (*(void (**)(uint64_t, double))(*(_QWORD *)v23 + 400))(v23, a9);
    *(double *)(v23 + 184) = a9;
  }
  return v23;
}

void sub_20B961BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD39CB0](v14, 0x10F3C4074548AAFLL);
  _Unwind_Resume(a1);
}

void sub_20B961C0C(uint64_t a1, _QWORD *a2, void *a3, unint64_t a4, unsigned __int16 *a5, unint64_t a6)
{
  __int16 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  __int16 v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *__p;
  _BYTE *v25;
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v12 = *(_WORD *)(*(_QWORD *)(a1 + 16) + 48);
  sub_20B8D315C(a5, a6, &__p);
  v13 = (_QWORD *)sub_20B961A6C(0, __p, (v25 - (_BYTE *)__p) >> 1, a3, a4, a5, a6, v12, 0.0, v12, 0, 0, 83, 0, **(_DWORD **)a1, 1);
  v14 = v13;
  v23 = v13;
  if (!v13)
    goto LABEL_18;
  v26 = v13;
  v15 = sub_20B8CD218(a2 + 1, &v26);
  if (v15)
  {
    v16 = v15[3];
    v17 = *(__int16 *)(*(_QWORD *)(a1 + 8) + 432);
    v18 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 432);
    if (v16 != (uint64_t *)-1)
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 8) + 432))
        v19 = (unint64_t)v16 >= v17;
      else
        v19 = 0;
      if (!v19)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  else
  {
    v18 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 432);
  }
  v17 = v18;
LABEL_11:
  v14[1] = v17;
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v14 + 528))(v14, 3, "Adding a single dynamic word candidate", 1);
  v27[0] = &unk_24C459188;
  v28 = v27;
  sub_20B8FDA94(a2, &v23, 0, 0, (uint64_t)v27);
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_16;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_16:
  v22 = v23;
  v23 = 0;
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 16))(v22);
LABEL_18:
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_20B961DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B961E64(uint64_t a1, _QWORD *a2, void *a3, unint64_t a4, unsigned __int16 *a5, unint64_t a6)
{
  __int16 v12;
  void **v13;
  unsigned __int8 v14;
  unint64_t v15;
  void *__p[2];
  unsigned __int8 v17;

  v12 = *(_WORD *)(*(_QWORD *)(a1 + 16) + 48);
  v13 = __p;
  sub_20B8D31B0(a5, a6, __p);
  v14 = v17;
  if ((v17 & 0x80u) == 0)
  {
    v15 = v17;
  }
  else
  {
    v13 = (void **)__p[0];
    v15 = (unint64_t)__p[1];
  }
  if (a6 != v15 || memcmp(a5, v13, 2 * a6))
  {
    sub_20B961F8C((int **)a1, a2, a3, a4, a5, a6, v13, v15, 0.0, v12, v12, 0, 0, 1023, 1, 83, 0, 2);
    v14 = v17;
  }
  if ((v14 & 0x80) != 0)
    operator delete(__p[0]);
}

void sub_20B961F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B961F8C(int **a1, _QWORD *a2, void *a3, unint64_t a4, void *a5, unint64_t a6, void *a7, unint64_t a8, double a9, __int16 a10, __int16 a11, int a12, int a13, int a14, char a15, int a16, int a17, int a18)
{
  unsigned int v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  uint8_t buf[16];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  HIDWORD(v20) = a16 - 65;
  LODWORD(v20) = a16 - 65;
  v19 = v20 >> 2;
  if (v19 > 6)
    v21 = 0;
  else
    v21 = dword_20BA4E18C[v19];
  v22 = (_QWORD *)sub_20B961A6C(v21, a7, a8, a3, a4, a5, a6, a10, a9, a11, a12, a13, a16, a17, **a1, a15);
  v30 = v22;
  if (!v22)
    return 0;
  v22[1] = a14;
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v22 + 528))(v22, 3, "Adding a single dynamic word candidate", 1);
  v31[0] = &unk_24C459188;
  v32 = v31;
  v23 = sub_20B8FDA94(a2, &v30, a18, 0, (uint64_t)v31);
  v24 = v32;
  if (v32 == v31)
  {
    v25 = 4;
    v24 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_11:
  if ((v23 & 1) == 0)
  {
    v26 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v26, OS_LOG_TYPE_DEBUG, " ∟ Rejected", buf, 2u);
    }
  }
  v27 = v30;
  v30 = 0;
  if (v27)
    (*(void (**)(_QWORD *))(*v27 + 16))(v27);
  return v23;
}

void sub_20B962154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 16))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9621B0(uint64_t a1, _QWORD *a2, void *a3, unint64_t a4, void *a5, unint64_t a6)
{
  int v6;
  uint64_t v8;

  v6 = *(__int16 *)(*(_QWORD *)(a1 + 8) + 440);
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 48);
  return sub_20B961F8C((int **)a1, a2, a3, a4, a5, a6, a5, a6, 0.0, v8, v8, *(int *)((char *)&v8 + 2), HIWORD(v8), v6 & ~(v6 >> 31), 1, 83, 0, 2);
}

void sub_20B962210(uint64_t a1, const UniChar *a2, unint64_t a3, int a4, uint64_t a5)
{
  const __CFAllocator *v10;
  const __CFString *v11;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  const __CFString *v14;
  CFIndex v15;
  CFMutableStringRef v16;
  CFIndex v17;
  CFMutableStringRef v18;
  uint64_t v19;
  UChar32 v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v25;
  CFComparisonResult v26;
  CFIndex v27;
  CFIndex v28;
  CFMutableStringRef v29;
  CFComparisonResult v30;
  _BOOL8 v31;
  _BOOL8 v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v39;
  uint64_t v40;
  const UniChar *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v49;
  uint64_t v50;
  CFComparisonResult v51;
  CFComparisonResult v52;
  CFComparisonResult v53;

  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  Length = CFStringGetLength(v11);
  MutableCopy = CFStringCreateMutableCopy(v10, Length, v11);
  CFStringNormalize(MutableCopy, kCFStringNormalizationFormKC);
  v14 = sub_20B8D9994(MutableCopy);
  if (CFStringCompare(MutableCopy, v14, 0) == kCFCompareEqualTo)
    goto LABEL_76;
  if (CFStringCompare(v11, MutableCopy, 0) == kCFCompareEqualTo)
  {
    v15 = CFStringGetLength(v11);
    v16 = CFStringCreateMutableCopy(v10, v15, v11);
    v17 = CFStringGetLength(v11);
    v18 = CFStringCreateMutableCopy(v10, v17, v11);
    CFStringLowercase(v16, *(CFLocaleRef *)(a1 + 24));
    CFStringUppercase(v18, *(CFLocaleRef *)(a1 + 24));
    v52 = CFStringCompare(v16, v11, 0);
    v51 = CFStringCompare(v18, v11, 0);
    v19 = *(_QWORD *)(a1 + 8);
    if (a3)
    {
      v50 = *(_QWORD *)(a1 + 8);
      v20 = *a2;
      if ((v20 - 12353) < 0x56)
        goto LABEL_15;
      v21 = 1;
      v22 = *a2;
      v23 = 1;
      do
      {
        if (v22 == 12316 || v22 == 12540)
          break;
        v23 = v21 < a3;
        if (a3 == v21)
          break;
        v22 = a2[v21++];
      }
      while ((v22 - 12353) >= 0x56);
      if (v23)
      {
LABEL_15:
        v25 = 0;
LABEL_16:
        v26 = v52;
LABEL_52:
        v32 = 0;
        if (a3 && a2 && !**(_BYTE **)(a1 + 8))
        {
          v43 = *a2;
          if ((v43 - 48) < 0xA || (unsigned __int16)(v43 + 240) <= 9u)
          {
            v44 = 1;
            while (a3 != v44)
            {
              v45 = a2[v44];
              v46 = v45 - 48;
              ++v44;
              v47 = (unsigned __int16)(v45 + 240);
              if (v46 >= 0xA && v47 >= 0xA)
              {
                v49 = v44 - 1;
                goto LABEL_67;
              }
            }
            v49 = a3;
LABEL_67:
            v32 = v49 >= a3;
          }
          else
          {
            v32 = 0;
          }
        }
LABEL_68:
        (*(void (**)(uint64_t, const __CFString *, uint64_t, _BOOL8))(a5 + 16))(a5, v11, v25, v32);
        if (v26)
          (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, _QWORD))(a5 + 16))(a5, v16, 0, 0);
        if (v51)
          (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, _QWORD))(a5 + 16))(a5, v18, 0, 0);
        (*(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(a5 + 16))(a5, v14, 0, 0);
        CFStringReplaceAll(v16, v14);
        CFStringReplaceAll(v18, v14);
        CFStringLowercase(v16, *(CFLocaleRef *)(a1 + 24));
        CFStringUppercase(v18, *(CFLocaleRef *)(a1 + 24));
        (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, _QWORD))(a5 + 16))(a5, v16, 0, 0);
        (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, _QWORD))(a5 + 16))(a5, v18, 0, 0);
        if (v18)
          CFRelease(v18);
        if (v16)
          goto LABEL_75;
        goto LABEL_76;
      }
      if ((a4 - 19) < 4)
      {
        v25 = 1;
        goto LABEL_16;
      }
      v40 = 2 * a3;
      v41 = a2;
      v26 = v52;
      do
      {
        v42 = *v41;
        if (v42 == 46 || v42 == 64)
        {
          v25 = 1;
          goto LABEL_52;
        }
        ++v41;
        v40 -= 2;
      }
      while (v40);
      if (u_isupper(v20) || a3 >= 2 && u_isupper(a2[1]))
      {
        v25 = *(__int16 *)(v50 + 418);
        goto LABEL_52;
      }
      v19 = v50;
      if (v52 == kCFCompareEqualTo)
      {
        v25 = 0;
        goto LABEL_52;
      }
    }
    else
    {
      v32 = 0;
      v25 = (a4 - 23) > 0xFFFFFFFB;
      if ((a4 - 23) > 0xFFFFFFFB)
      {
        v26 = v52;
        goto LABEL_68;
      }
      v26 = v52;
      if (v52 == kCFCompareEqualTo)
        goto LABEL_68;
    }
    v25 = *(__int16 *)(v19 + 420);
    goto LABEL_52;
  }
  if (CFStringCompare(v11, v14, 0))
  {
    (*(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(a5 + 16))(a5, v11, 0, 0);
    goto LABEL_76;
  }
  v27 = CFStringGetLength(v11);
  v16 = CFStringCreateMutableCopy(v10, v27, v11);
  v28 = CFStringGetLength(v11);
  v29 = CFStringCreateMutableCopy(v10, v28, v11);
  CFStringLowercase(v16, *(CFLocaleRef *)(a1 + 24));
  CFStringUppercase(v29, *(CFLocaleRef *)(a1 + 24));
  v30 = CFStringCompare(v16, v11, 0);
  v53 = CFStringCompare(v29, v11, 0);
  if (**(_BYTE **)(a1 + 8))
    goto LABEL_18;
  v31 = 0;
  if (a2 && a3)
  {
    v33 = *a2;
    if ((v33 - 48) >= 0xA && (unsigned __int16)(v33 + 240) > 9u)
    {
LABEL_18:
      v31 = 0;
      goto LABEL_19;
    }
    v34 = 1;
    while (a3 != v34)
    {
      v35 = a2[v34];
      v36 = v35 - 48;
      ++v34;
      v37 = (unsigned __int16)(v35 + 240);
      if (v36 >= 0xA && v37 >= 0xA)
      {
        v39 = v34 - 1;
        goto LABEL_84;
      }
    }
    v39 = a3;
LABEL_84:
    v31 = v39 >= a3;
  }
LABEL_19:
  (*(void (**)(uint64_t, const __CFString *, _QWORD, _BOOL8))(a5 + 16))(a5, v11, 0, v31);
  if (v30)
    (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, _QWORD))(a5 + 16))(a5, v16, 0, 0);
  if (v53)
    (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, _QWORD))(a5 + 16))(a5, v29, 0, 0);
  if (v29)
    CFRelease(v29);
  if (v16)
LABEL_75:
    CFRelease(v16);
LABEL_76:
  if (v14)
    CFRelease(v14);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v11)
    CFRelease(v11);
}

void sub_20B9627A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  const void *v7;
  va_list va1;
  const void *v9;
  va_list va2;
  const void *v11;
  va_list va3;
  va_list va4;

  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  v11 = va_arg(va4, const void *);
  sub_20B8A89DC((const void **)va, 0);
  sub_20B8A89DC((const void **)va1, 0);
  sub_20B87E150((const void **)va2, 0);
  sub_20B8A89DC((const void **)va3, 0);
  sub_20B87E150((const void **)va4, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B962854(uint64_t a1, uint64_t a2, const UniChar *a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  __int16 v7;
  uint64_t v8;
  _QWORD v10[12];
  __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  int v17;

  v7 = *(_WORD *)(*(_QWORD *)(a1 + 16) + 48);
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v17 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = sub_20B962940;
  v10[3] = &unk_24C46C498;
  v10[6] = a1;
  v10[7] = a3;
  v10[8] = a4;
  v10[9] = a2;
  v10[10] = a5;
  v10[11] = a6;
  v11 = v7;
  v10[4] = &v12;
  v10[5] = v16;
  sub_20B962210(a1, a3, a4, a7, (uint64_t)v10);
  v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(v16, 8);
  return v8;
}

void sub_20B96291C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B962940(uint64_t a1, const __CFString *a2, int a3, int a4)
{
  int **v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  void *v14;
  int v15;
  _QWORD *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  void *v24;
  unint64_t v25;

  v7 = *(int ***)(a1 + 48);
  v25 = 0;
  sub_20B8D0624(a2, (CFIndex *)&v25, &v24);
  v8 = v24;
  if (v24)
    v9 = v25;
  else
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = **(unsigned __int16 **)(a1 + 56);
    if (v11 <= 0x7F)
    {
      v12 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x8000;
    }
    else
    {
      v12 = __maskrune(v11, 0x8000uLL);
      v10 = *(_QWORD *)(a1 + 64);
    }
    if (v12 && v10 == v9)
    {
      v14 = *(void **)(a1 + 56);
      if (!memcmp(v14, v8, 2 * v9))
      {
        v15 = 0;
        goto LABEL_19;
      }
      v10 = v9;
    }
  }
  if (a4)
    v15 = 1;
  else
    v15 = 2;
  v14 = *(void **)(a1 + 56);
  v9 = v10;
LABEL_19:
  v16 = *(_QWORD **)(a1 + 72);
  v17 = *(void **)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  if (v8)
    v19 = v25;
  else
    v19 = 0;
  v20 = *(_WORD *)(a1 + 96);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v22 = *(_DWORD *)(v21 + 24);
  *(_DWORD *)(v21 + 24) = v22 + 1;
  result = sub_20B961F8C(v7, v16, v14, v9, v17, v18, v8, v19, 0.0, v20, v20, v22, 0, a3, 1, 83, 0, v15);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= result;
  if (v8)
    return MEMORY[0x20BD39C80](v8, 0x1000C80BDFB0063);
  return result;
}

void sub_20B962AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B962AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  const char *v9;
  __CFArray *v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  CFIndex v16;
  const __CFString *ValueAtIndex;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  void *__p;
  _BYTE *v44;
  __int128 v45;
  _QWORD v46[2];
  void **v47;
  __int128 v48;
  char *v49;
  _QWORD *v50;

  v2 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 56) == v2)
    return 0;
  v3 = a2;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(v2 + 8 * v5);
    v7 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 544))(v6);
    v9 = (const char *)v8;
    if (sub_20B92A6A8(v7, v8))
    {
      v10 = sub_20B92B2C4(v7, v9, 0);
      v46[1] = v10;
      if (v10)
      {
        v11 = v10;
        if (**(_BYTE **)(a1 + 8))
        {
          v12 = sub_20B8FD83C(v3);
          v13 = (*(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48)) >> 3;
          if (v12 != -1)
            LODWORD(v13) = v12;
          v14 = v13 + 2;
          v15 = v14 <= 3 ? 3 : v14;
        }
        else
        {
          v15 = 3;
        }
        v16 = 0;
        v45 = 0uLL;
        v46[0] = 0;
        while (v16 < CFArrayGetCount(v11))
        {
          if (v15 == *(__int16 *)(*(_QWORD *)(a1 + 8) + 432))
            ++v15;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v16);
          sub_20B8D0790(ValueAtIndex, (UniChar **)&__p);
          v18 = *(unsigned __int8 *)(v6 + 87);
          v19 = *(void **)(v6 + 64);
          v20 = *(_QWORD *)(v6 + 72);
          v22 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 552))(v6);
          if ((v18 & 0x80u) == 0)
            v23 = (void *)(v6 + 64);
          else
            v23 = v19;
          if ((v18 & 0x80u) == 0)
            v24 = v18;
          else
            v24 = v20;
          v25 = sub_20B961A6C(0, __p, (v44 - (_BYTE *)__p) >> 1, v23, v24, v22, v21, 0, 0.0, 0, 0, 0, 83, 0, **(_DWORD **)a1, 0);
          v26 = v25;
          *(_QWORD *)(v25 + 8) = v15;
          v27 = (_QWORD *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1) >= v46[0])
          {
            v29 = (_QWORD *)v45;
            v30 = (uint64_t)(*((_QWORD *)&v45 + 1) - v45) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              sub_20B80CDD8();
            v32 = v46[0] - v45;
            if ((uint64_t)(v46[0] - v45) >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            v50 = v46;
            if (v33)
            {
              v34 = (char *)sub_20B800BE8((uint64_t)v46, v33);
              v27 = (_QWORD *)*((_QWORD *)&v45 + 1);
              v29 = (_QWORD *)v45;
            }
            else
            {
              v34 = 0;
            }
            v35 = (uint64_t *)&v34[8 * v30];
            v36 = &v34[8 * v33];
            v49 = v36;
            *v35 = v26;
            *((_QWORD *)&v48 + 1) = v35 + 1;
            if (v27 == v29)
            {
              v28 = v35 + 1;
            }
            else
            {
              do
              {
                v37 = *--v27;
                *v27 = 0;
                *--v35 = v37;
              }
              while (v27 != v29);
              v28 = (_QWORD *)*((_QWORD *)&v48 + 1);
              v36 = v49;
            }
            v38 = v45;
            *(_QWORD *)&v45 = v35;
            *((_QWORD *)&v45 + 1) = v28;
            v48 = v38;
            v39 = (char *)v46[0];
            v46[0] = v36;
            v49 = v39;
            v47 = (void **)v38;
            sub_20B8CD36C((uint64_t)&v47);
          }
          else
          {
            **((_QWORD **)&v45 + 1) = v25;
            v28 = v27 + 1;
          }
          *((_QWORD *)&v45 + 1) = v28;
          if (__p)
          {
            v44 = __p;
            operator delete(__p);
          }
          ++v15;
          ++v16;
        }
        v3 = a2;
        v40 = sub_20B8FE318(a2, (uint64_t **)&v45, v5 + 1);
        v47 = (void **)&v45;
        sub_20B882410(&v47);
        CFRelease(v11);
        if (v40)
          break;
      }
    }
    ++v5;
    v2 = *(_QWORD *)(v3 + 48);
    if (v5 >= (*(_QWORD *)(v3 + 56) - v2) >> 3)
      return 0;
  }
  return 1;
}

void sub_20B962DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,const void *a22)
{
  sub_20B88B74C(&a22, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B962E38(uint64_t a1, _QWORD *a2, unsigned __int16 *a3, unint64_t a4, int a5)
{
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unint64_t v18;
  void ***p_dst;
  unint64_t v20;
  int v21;
  unint64_t v22;
  void ***v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  void **v36;
  unint64_t v37;
  void ***v38;
  unint64_t v39;
  _QWORD v41[9];
  __int128 v42;
  _QWORD v43[2];
  void (*v44)(uint64_t);
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  void **__dst;
  uint64_t v59;
  uint64_t (*v60)(_QWORD *, void *, unint64_t);
  void *v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;

  v10 = sub_20B8DA374((uint64_t)a3, a4, 0, 0);
  v11 = v10 - 1;
  if ((v10 - 1) > 1)
    return v11 < 2;
  v12 = v10;
  v13 = v10 == 1;
  v14 = 0;
  if (a4)
  {
    while (1)
    {
      v15 = a3[v14];
      v16 = v15 == 48 || v15 == 65296;
      if (!v16 && v15 != 12295)
        break;
      if (a4 == ++v14)
      {
        v14 = a4;
        break;
      }
    }
  }
  v54 = 0;
  v55 = &v54;
  v56 = 0x2000000000;
  v57 = a5;
  sub_20B877ED0(&__dst, a3, a4);
  v18 = HIBYTE(v60);
  if (SHIBYTE(v60) >= 0)
    p_dst = &__dst;
  else
    p_dst = (void ***)__dst;
  if (SHIBYTE(v60) < 0)
    v18 = v59;
  if (p_dst)
    v20 = v18;
  else
    v20 = 0;
  v21 = *((_DWORD *)v55 + 6);
  *((_DWORD *)v55 + 6) = v21 + 1;
  sub_20B961F8C((int **)a1, a2, a3, a4, a3, a4, p_dst, v20, 0.0, 0, 0, 0, 0, v21, 0, 83, 0, 2);
  if (v12 == 1)
  {
    if (!sub_20B8D9880((uint64_t)&__dst))
      goto LABEL_34;
LABEL_25:
    v22 = HIBYTE(v60);
    if (SHIBYTE(v60) >= 0)
      v23 = &__dst;
    else
      v23 = (void ***)__dst;
    if (SHIBYTE(v60) < 0)
      v22 = v59;
    if (v23)
      v24 = v22;
    else
      v24 = 0;
    v25 = *((_DWORD *)v55 + 6);
    *((_DWORD *)v55 + 6) = v25 + 1;
    sub_20B961F8C((int **)a1, a2, a3, a4, a3, a4, v23, v24, 0.0, 0, 0, 0, 0, v25, 0, 83, 0, 2);
    goto LABEL_34;
  }
  if (sub_20B8D976C((uint64_t)&__dst))
    goto LABEL_25;
LABEL_34:
  if (SHIBYTE(v60) < 0)
    operator delete(__dst);
  if (a4 <= 0x12)
  {
    v26 = 0;
    if (a4)
    {
      v27 = a3;
      v28 = a4;
      do
      {
        v30 = *v27++;
        v29 = v30;
        if (v30 >> 4 <= 0xFF0)
          v31 = -48;
        else
          v31 = -65296;
        v26 = v29 + 10 * v26 + v31;
        --v28;
      }
      while (v28);
      if (v26 >= 1000)
      {
        __dst = 0;
        v59 = 0;
        v60 = 0;
        v32 = *((_DWORD *)v55 + 6);
        *((_DWORD *)v55 + 6) = v32 + 2;
        v33 = v12 == 1;
        if (v12 == 1)
          v34 = v32 + 1;
        else
          v34 = v32;
        if (v33)
          v35 = v32;
        else
          v35 = v32 + 1;
        if (sub_20B8D9B30(v26, (uint64_t)&__dst))
        {
          v36 = SHIBYTE(v60) >= 0 ? (void **)&__dst : __dst;
          v37 = SHIBYTE(v60) >= 0 ? HIBYTE(v60) : v59;
          sub_20B961F8C((int **)a1, a2, a3, a4, a3, a4, v36, v37, 0.0, 0, 0, 0, 0, v35, 0, 83, 0, 1);
          if (sub_20B8D9880((uint64_t)&__dst))
          {
            if (SHIBYTE(v60) >= 0)
              v38 = &__dst;
            else
              v38 = (void ***)__dst;
            if (SHIBYTE(v60) >= 0)
              v39 = HIBYTE(v60);
            else
              v39 = v59;
            sub_20B961F8C((int **)a1, a2, a3, a4, a3, a4, v38, v39, 0.0, 0, 0, 0, 0, v34, 0, 83, 0, 1);
          }
        }
        if (SHIBYTE(v60) < 0)
          operator delete(__dst);
      }
    }
    v43[0] = MEMORY[0x24BDAC760];
    v43[1] = 0x40000000;
    v44 = sub_20B9632B0;
    v45 = &unk_24C49F790;
    v48 = a4;
    v49 = a3;
    v53 = v13;
    v50 = a4;
    v51 = v26;
    v52 = a2;
    v46 = &v54;
    v47 = a1;
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 0x40000000;
    v41[2] = sub_20B9633A4;
    v41[3] = &unk_24C49F7E0;
    v41[6] = v26;
    v41[7] = v14;
    v41[8] = a2;
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = a4;
    v41[4] = &v54;
    v41[5] = a1;
    if (**(_BYTE **)(a1 + 8))
    {
      sub_20B9632B0((uint64_t)v43);
      sub_20B9633A4((uint64_t)v41);
    }
    else
    {
      __dst = (void **)MEMORY[0x24BDAC760];
      v59 = 0x40000000;
      v60 = sub_20B963410;
      v61 = &unk_24C49F7B8;
      v63 = a1;
      v64 = a2;
      v65 = v42;
      v62 = &v54;
      sub_20B8913E0(v26, v14, (uint64_t)&__dst);
      v44((uint64_t)v43);
    }
  }
  _Block_object_dispose(&v54, 8);
  return v11 < 2;
}

void sub_20B963278(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_20B9632B0(uint64_t a1)
{
  int v1;
  int v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 48) <= 4uLL)
  {
    v1 = *(unsigned __int8 *)(a1 + 88);
    v2 = *(_DWORD *)(a1 + 72);
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 0x40000000;
    v3[2] = sub_20B963330;
    v3[3] = &unk_24C49F768;
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_OWORD *)(a1 + 56);
    v4 = *(_OWORD *)(a1 + 32);
    sub_20B92B99C(a1 + 56, v1, v2, (uint64_t)v3);
  }
}

uint64_t sub_20B963330(_QWORD *a1, void *a2, unint64_t a3)
{
  _QWORD *v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  int **v8;
  uint64_t v9;
  int v10;

  v4 = (_QWORD *)a1[6];
  v5 = (void *)a1[7];
  v6 = a1[8];
  if (a2)
    v7 = a3;
  else
    v7 = 0;
  v8 = (int **)a1[5];
  v9 = *(_QWORD *)(a1[4] + 8);
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  return sub_20B961F8C(v8, v4, v5, v6, v5, v6, a2, v7, 0.0, 0, 0, 0, 0, v10, 0, 83, 0, 1);
}

void sub_20B9633A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 48);
  v1 = *(_QWORD *)(a1 + 56);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_20B963410;
  v3[3] = &unk_24C49F7B8;
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 72);
  v4 = *(_OWORD *)(a1 + 32);
  sub_20B8913E0(v2, v1, (uint64_t)v3);
}

uint64_t sub_20B963410(_QWORD *a1, void *a2, unint64_t a3)
{
  _QWORD *v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  int **v8;
  uint64_t v9;
  int v10;

  v4 = (_QWORD *)a1[6];
  v5 = (void *)a1[7];
  v6 = a1[8];
  if (a2)
    v7 = a3;
  else
    v7 = 0;
  v8 = (int **)a1[5];
  v9 = *(_QWORD *)(a1[4] + 8);
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  return sub_20B961F8C(v8, v4, v5, v6, v5, v6, a2, v7, 0.0, 0, 0, 0, 0, v10, 0, 83, 0, 1);
}

uint64_t sub_20B963484(int **a1, _QWORD *a2, void *a3, unint64_t a4, const UniChar *a5, CFIndex a6, int a7)
{
  uint64_t *v14;
  void *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint8_t buf[16];
  CFTypeRef cf;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v14 = sub_20B947D18();
  v15 = (void *)*v14;
  v16 = v14[1];
  v17 = sub_20B947D18();
  v18 = sub_20B961A6C(7, a3, a4, v15, v16, (void *)*v17, v17[1], 0, 0.0, 0, 0, 0, 69, 0, **a1, 0);
  if (!v18)
    return 0;
  v19 = v18;
  cf = CFStringCreateWithCharacters(0, a5, a6);
  sub_20B88B52C((const void **)(v19 + 128), cf);
  *(_QWORD *)(v19 + 8) = a7;
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v19 + 528))(v19, 3, "Adding a single dynamic word candidate", 1);
  *(_QWORD *)buf = v19;
  v28[0] = &unk_24C459188;
  v29 = v28;
  v20 = sub_20B8FDA94(a2, (_QWORD **)buf, 1, 0, (uint64_t)v28);
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
    goto LABEL_7;
  }
  if (v29)
  {
    v22 = 5;
LABEL_7:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  v23 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  if ((v20 & 1) == 0)
  {
    v24 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_DEBUG, " ∟ Rejected", buf, 2u);
    }
  }
  if (cf)
    CFRelease(cf);
  return v20;
}

void sub_20B963688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B963728(uint64_t a1, _QWORD *a2, void *a3, unint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  const void **v11;
  CFNumberRef v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const void **v16;
  const void **valuePtr;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v11 = (const void **)sub_20B961A6C(11, *(void **)(a5 + 16), *(_QWORD *)(a5 + 24), a3, a4, *(void **)a5, *(_QWORD *)(a5 + 8), *(_WORD *)(*(_QWORD *)(a1 + 16) + 66), 0.0, *(_WORD *)(*(_QWORD *)(a1 + 16) + 66), a6, 0, 89, a7, **(_DWORD **)a1, 0);
  sub_20B916B4C((uint64_t)v11, *(char **)(a5 + 40), *(_QWORD *)(a5 + 48));
  LODWORD(valuePtr) = *(unsigned __int16 *)(a5 + 32);
  v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  sub_20B88AE28(v11 + 31, v12);
  (*((void (**)(const void **, uint64_t))*v11 + 64))(v11, a8);
  valuePtr = v11;
  v19[0] = &unk_24C459188;
  v20 = v19;
  v13 = sub_20B8FDA94(a2, &valuePtr, 1, 0, (uint64_t)v19);
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  v16 = valuePtr;
  valuePtr = 0;
  if (v16)
    (*((void (**)(const void **))*v16 + 2))(v16);
  return v13;
}

void sub_20B9638A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  _Unwind_Resume(exception_object);
}

void sub_20B963910(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  void *v5;
  const __CFArray *v7;
  CFIndex Count;
  BOOL v9;
  const void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  CFIndex v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *(void **)(a1 + 136);
  if (v5 && objc_msgSend_rawCandidate(v5, a2, a3))
  {
    v7 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 16);
    if (v7)
      Count = CFArrayGetCount(v7);
    else
      Count = 0;
    while (1)
    {
      v9 = Count-- < 1;
      if (v9)
        break;
      v10 = *(const void **)(a1 + 136);
      if (v10 == sub_20B96AAF4(*(_QWORD *)(a1 + 8), Count))
      {
        v13 = objc_msgSend_rawCandidate(*(void **)(a1 + 136), v11, v12);
        v14 = v13;
        v15 = (unint64_t)a4[2];
        v16 = (uint64_t *)a4[1];
        if ((unint64_t)v16 >= v15)
        {
          v18 = ((char *)v16 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_20B80CDD8();
          v19 = v15 - (_QWORD)*a4;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)sub_20B800BE8((uint64_t)(a4 + 2), v21);
          else
            v22 = 0;
          v23 = (uint64_t *)&v22[8 * v18];
          v24 = &v22[8 * v21];
          *v23 = v14;
          v17 = v23 + 1;
          v26 = (char *)*a4;
          v25 = (char *)a4[1];
          if (v25 != *a4)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v23 = v27;
            }
            while (v25 != v26);
            v25 = (char *)*a4;
          }
          *a4 = v23;
          a4[1] = v17;
          a4[2] = v24;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v16 = v13;
          v17 = v16 + 1;
        }
        a4[1] = v17;
        if (Count + 1 >= 2 && v17 != *a4)
        {
          v28 = Count - 1;
          do
          {
            if (*(_QWORD *)(a1 + 32) <= (unint64_t)(((_BYTE *)a4[1] - (_BYTE *)*a4) >> 3))
              break;
            v29 = (void *)sub_20B96AAF4(*(_QWORD *)(a1 + 8), v28);
            v32 = v29;
            if (v29 && objc_msgSend_rawCandidate(v29, v30, v31))
            {
              v35 = objc_msgSend_rawCandidate(v32, v33, v34);
              v36 = v35;
              v38 = (uint64_t *)a4[1];
              v37 = (unint64_t)a4[2];
              if ((unint64_t)v38 >= v37)
              {
                v40 = ((char *)v38 - (_BYTE *)*a4) >> 3;
                if ((unint64_t)(v40 + 1) >> 61)
                  sub_20B80CDD8();
                v41 = v37 - (_QWORD)*a4;
                v42 = v41 >> 2;
                if (v41 >> 2 <= (unint64_t)(v40 + 1))
                  v42 = v40 + 1;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                  v43 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v43 = v42;
                if (v43)
                  v44 = (char *)sub_20B800BE8((uint64_t)(a4 + 2), v43);
                else
                  v44 = 0;
                v45 = (uint64_t *)&v44[8 * v40];
                *v45 = v36;
                v39 = v45 + 1;
                v47 = (char *)*a4;
                v46 = (char *)a4[1];
                if (v46 != *a4)
                {
                  do
                  {
                    v48 = *((_QWORD *)v46 - 1);
                    v46 -= 8;
                    *--v45 = v48;
                  }
                  while (v46 != v47);
                  v46 = (char *)*a4;
                }
                *a4 = v45;
                a4[1] = v39;
                a4[2] = &v44[8 * v43];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *v38 = v35;
                v39 = v38 + 1;
              }
              a4[1] = v39;
            }
            v9 = v28-- <= 0;
          }
          while (!v9);
        }
        return;
      }
    }
  }
}

void sub_20B963B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B963BB4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

_QWORD *sub_20B963BBC(_QWORD *result, uint64_t a2)
{
  if (!a2)
    result[16] = (uint64_t)(result[7] - result[6]) >> 2;
  return result;
}

BOOL sub_20B963BD8(_QWORD *a1)
{
  return !a1[15] || (unint64_t)(((uint64_t)(a1[7] - a1[6]) >> 2) - a1[16]) < a1[14];
}

void sub_20B963C10(uint64_t a1)
{
  sub_20B9D8644(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B963C34(uint64_t a1, int *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  int v9;
  int v10;
  unint64_t v11;

  result = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
  if (result)
  {
    result[4] = a1;
    result[5] = a4;
    *result = a2;
    *((_DWORD *)result + 20) = 0;
    if (a2 && a3 >= 0x10)
    {
      *((_DWORD *)result + 20) = a1 == 0;
      v9 = *a2;
      result[1] = a2 + 4;
      if (v9 == 1953655141)
        v10 = a2[3];
      else
        v10 = 0;
      *((_DWORD *)result + 4) = v10;
      v11 = (a3 - 16) >> 3;
    }
    else
    {
      v11 = 0;
      result[1] = 0;
      *((_DWORD *)result + 4) = 0;
    }
    result[3] = v11;
  }
  return result;
}

void sub_20B963CE8(_DWORD *a1)
{
  void *v2;

  if (a1)
  {
    if (a1[20])
    {
      v2 = *(void **)a1;
      if (*(_QWORD *)a1)
        free(v2);
    }
    free(a1);
  }
}

uint64_t sub_20B963D24(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (*(_QWORD *)(a1 + 24) < 2uLL)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    v5 = 1;
    while (1)
    {
      v6 = *(unsigned int *)(v4 + 8 * v5);
      if ((v6 & 0x80000000) != 0)
        return 4294967294;
      v7 = v6 + *a2 + 1;
      if (*(_DWORD *)(v4 + 8 * v7 + 4) != v5)
        return 0xFFFFFFFFLL;
      ++a2;
      v5 = v7;
      if (!--a3)
        goto LABEL_10;
    }
  }
  else
  {
    v7 = 1;
LABEL_10:
    v8 = *(unsigned int *)(v4 + 8 * v7);
    result = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v4 + 8 * v8 + 4) == v7)
    {
      v9 = *(_DWORD *)(v4 + 8 * v8);
      if (v9 < 0)
        return -v9;
      else
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_20B963DBC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  result = 0;
  if (a3 && *(_QWORD *)(a1 + 24) >= 2uLL)
  {
    result = 0;
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 8);
    LODWORD(v9) = *(_DWORD *)(v8 + 8);
    LODWORD(v10) = 1;
    do
    {
      v11 = v10;
      v10 = v9 + *(unsigned __int8 *)(a2 + v7) + 1;
      if (*(_DWORD *)(v8 + 8 * v10 + 4) != v11)
        break;
      v9 = *(unsigned int *)(v8 + 8 * v10);
      if (*(_DWORD *)(v8 + 8 * v9 + 4) == (_DWORD)v10)
      {
        v12 = *(_DWORD *)(v8 + 8 * v9);
        if (v12 < 0)
        {
          if (a4)
          {
            v13 = a5 + 24 * result;
            *(_DWORD *)(v13 + 8) = -v12;
            *(_WORD *)(v13 + 12) = v7 + 1;
            if (++result >= a4)
              return result;
          }
          else
          {
            ++result;
          }
        }
      }
      ++v7;
    }
    while (a3 != v7);
  }
  return result;
}

uint64_t sub_20B963E6C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(_DWORD *, size_t, _QWORD);
  _DWORD *v11;
  size_t v12;
  char *v13;
  unsigned int v14;
  _DWORD *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int i;
  unsigned int v26;
  int v27;
  int v29;
  unsigned int v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  char *v50;
  unsigned int v52;
  _BYTE v53[514];
  _BYTE v54[514];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8 <= 1)
  {
    v9 = v8 + 0x2000;
    v10 = *(uint64_t (**)(_DWORD *, size_t, _QWORD))(a1 + 32);
    v11 = *(_DWORD **)a1;
    v12 = 8 * v9 + 16;
    if (v10)
    {
      v13 = (char *)v10(v11, v12, *(_QWORD *)(a1 + 40));
      *(_QWORD *)a1 = v13;
    }
    else
    {
      v13 = (char *)malloc_type_realloc(v11, v12, 0x86994945uLL);
      *(_QWORD *)a1 = v13;
      if (!*(_DWORD *)(a1 + 80))
        *(_DWORD *)(a1 + 80) = 1;
    }
    if (!v13)
      return 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 8) = v13 + 16;
    if (!*(_QWORD *)(a1 + 32))
      bzero(&v13[8 * *(_QWORD *)(a1 + 24) + 16], 8 * (v9 - *(_QWORD *)(a1 + 24)));
    *(_QWORD *)(a1 + 24) = v9;
  }
  v14 = *(_DWORD *)(a1 + 16);
  if (!v14)
  {
    v15 = *(_DWORD **)a1;
    *(_QWORD *)v15 = 0x1074726965;
    v15[2] = 65793;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = 1;
    v14 = 1;
    *(_DWORD *)(a1 + 16) = 1;
  }
  v16 = 0;
  v17 = 1;
  while (1)
  {
    if (a3 == v16)
    {
      v18 = *(_QWORD *)(a1 + 8);
      if (v14 < v17)
      {
        v19 = 0;
        goto LABEL_26;
      }
      v19 = *(_DWORD *)(v18 + 8 * v17);
    }
    else
    {
      v20 = v14 >= v17 ? *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17) : 0;
      v19 = v20 + *(unsigned __int8 *)(a2 + v16) + 1;
    }
    if (v14 < v19)
    {
      if (v17)
        goto LABEL_30;
      goto LABEL_28;
    }
    v18 = *(_QWORD *)(a1 + 8);
LABEL_26:
    if (*(_DWORD *)(v18 + 8 * v19 + 4) != v17)
    {
LABEL_30:
      v22 = -a4;
      while (1)
      {
        if (v16 == a3)
          v23 = 0;
        else
          v23 = *(unsigned __int8 *)(a2 + v16) + 1;
        v52 = v17;
        v24 = *(_DWORD *)(a1 + 16);
        if (v24 < v17 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17))
        {
          for (i = 1; ; ++i)
          {
            v26 = i + v23;
            v27 = v24 >= i + v23 ? *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26 + 4) : 0;
            if (v26 != 1 && v27 == 0)
              break;
          }
          if (sub_20B964340(a1, v17, i) == -1)
          {
LABEL_76:
            v45 = 0xFFFFFFFFLL;
            goto LABEL_80;
          }
          v24 = *(_DWORD *)(a1 + 16);
        }
        if (v24 >= v17)
          v29 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17);
        else
          v29 = 0;
        v30 = v29 + v23;
        v31 = v24 >= v29 + v23 && *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30 + 4) != 0;
        if (v30 != 1 && !v31)
        {
          v32 = v17;
          v17 = v30;
          goto LABEL_69;
        }
        v33 = sub_20B964734(a1, v17, (uint64_t)v54);
        if (v30 != 1)
        {
          if (v24 >= v30)
          {
            v36 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30 + 4);
            v37 = sub_20B964734(a1, v36, (uint64_t)v53);
            if (v33 + 1 >= v37)
            {
              v35 = v37;
              goto LABEL_63;
            }
          }
          else
          {
            v34 = sub_20B964734(a1, 0, (uint64_t)v53);
            if (v33 + 1 >= v34)
            {
              v35 = v34;
              v36 = 0;
LABEL_63:
              v38 = v53;
              v39 = a1;
              v40 = v17;
              v41 = v36;
              v42 = 0;
              v43 = 0;
              goto LABEL_64;
            }
          }
        }
        v38 = v54;
        v39 = a1;
        v40 = v17;
        v41 = v17;
        v35 = v33;
        v42 = v23;
        v43 = 1;
LABEL_64:
        if (sub_20B9647A0(v39, v40, v41, (uint64_t)v38, v35, v42, v43, &v52) == -1)
          goto LABEL_76;
        v32 = v52;
        v24 = *(_DWORD *)(a1 + 16);
        if (v24 >= v52)
          v44 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v52);
        else
          v44 = 0;
        v17 = v44 + v23;
LABEL_69:
        if ((v24 < v17 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17 + 4))
          && (sub_20B964520(a1, v17, v32) == -1 || !v23 && sub_20B964340(a1, v17, v22) == -1))
        {
          goto LABEL_76;
        }
        if (++v16 > a3)
          goto LABEL_79;
      }
    }
    v21 = *(_DWORD *)(v18 + 8 * v19);
    if (v21 < 0)
      break;
LABEL_28:
    ++v16;
    v17 = v19;
    if (v16 > a3)
      goto LABEL_79;
  }
  v45 = 0;
  if (!(v21 + a4))
    goto LABEL_80;
  if (sub_20B964340(a1, v19, -a4) == -1)
    return 0xFFFFFFFFLL;
LABEL_79:
  v45 = 0;
LABEL_80:
  v46 = *(unsigned int *)(a1 + 16);
  v47 = *(_DWORD **)a1;
  *(_DWORD *)(*(_QWORD *)a1 + 12) = v46;
  if ((unint64_t)(*(_QWORD *)(a1 + 24) + ~v46) <= 0x101)
  {
    v48 = (v46 + 259);
    v49 = *(uint64_t (**)(void))(a1 + 32);
    if (v49)
    {
      v50 = (char *)v49();
      *(_QWORD *)a1 = v50;
    }
    else
    {
      v50 = (char *)malloc_type_realloc(v47, 8 * v48 + 16, 0x86994945uLL);
      *(_QWORD *)a1 = v50;
      if (!*(_DWORD *)(a1 + 80))
        *(_DWORD *)(a1 + 80) = 1;
    }
    if (v50)
    {
      *(_QWORD *)(a1 + 8) = v50 + 16;
      if (!*(_QWORD *)(a1 + 32))
        bzero(&v50[8 * *(_QWORD *)(a1 + 24) + 16], 8 * (v48 - *(_QWORD *)(a1 + 24)));
      *(_QWORD *)(a1 + 24) = v48;
      return v45;
    }
    return 0xFFFFFFFFLL;
  }
  return v45;
}

uint64_t sub_20B964340(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void *, size_t, _QWORD);
  void *v9;
  size_t v10;
  char *v11;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 <= a2)
  {
    v7 = v6 + 0x2000;
    v8 = *(uint64_t (**)(void *, size_t, _QWORD))(a1 + 32);
    v9 = *(void **)a1;
    v10 = 8 * v7 + 16;
    if (v8)
    {
      v11 = (char *)v8(v9, v10, *(_QWORD *)(a1 + 40));
      *(_QWORD *)a1 = v11;
      if (!v11)
        return 0xFFFFFFFFLL;
      goto LABEL_7;
    }
    v11 = (char *)malloc_type_realloc(v9, v10, 0x86994945uLL);
    *(_QWORD *)a1 = v11;
    if (*(_DWORD *)(a1 + 80))
    {
      if (v11)
      {
LABEL_7:
        *(_QWORD *)(a1 + 8) = v11 + 16;
        if (!*(_QWORD *)(a1 + 32))
          bzero(&v11[8 * *(_QWORD *)(a1 + 24) + 16], 8 * (v7 - *(_QWORD *)(a1 + 24)));
        *(_QWORD *)(a1 + 24) = v7;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 80) = 1;
      if (v11)
        goto LABEL_7;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 16) < a2)
    *(_DWORD *)(a1 + 16) = a2;
  result = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2) = a3;
  return result;
}

uint64_t sub_20B964420(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  int v11;

  v4 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = 1;
  while (1)
  {
    if (a3 == v4)
    {
      v7 = *(_QWORD *)(a1 + 8);
      if (v5 < v6)
      {
        v8 = 0;
        goto LABEL_14;
      }
      v8 = *(_DWORD *)(v7 + 8 * v6);
    }
    else
    {
      v9 = v5 >= v6 ? *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) : 0;
      v8 = v9 + *(unsigned __int8 *)(a2 + v4) + 1;
    }
    if (v5 >= v8)
      break;
    if (v6)
      return 0xFFFFFFFFLL;
LABEL_16:
    ++v4;
    v6 = v8;
    if (v4 > a3)
      return 0xFFFFFFFFLL;
  }
  v7 = *(_QWORD *)(a1 + 8);
LABEL_14:
  if (*(_DWORD *)(v7 + 8 * v8 + 4) != v6)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)(v7 + 8 * v8) & 0x80000000) == 0)
    goto LABEL_16;
  result = sub_20B964340(a1, v8, 0);
  if ((_DWORD)result != -1)
  {
    v11 = sub_20B964520(a1, v8, 0);
    result = 0;
    if (v11 == -1)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_20B964520(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void *, size_t, _QWORD);
  void *v9;
  size_t v10;
  char *v11;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 <= a2)
  {
    v7 = v6 + 0x2000;
    v8 = *(uint64_t (**)(void *, size_t, _QWORD))(a1 + 32);
    v9 = *(void **)a1;
    v10 = 8 * v7 + 16;
    if (v8)
    {
      v11 = (char *)v8(v9, v10, *(_QWORD *)(a1 + 40));
      *(_QWORD *)a1 = v11;
      if (!v11)
        return 0xFFFFFFFFLL;
      goto LABEL_7;
    }
    v11 = (char *)malloc_type_realloc(v9, v10, 0x86994945uLL);
    *(_QWORD *)a1 = v11;
    if (*(_DWORD *)(a1 + 80))
    {
      if (v11)
      {
LABEL_7:
        *(_QWORD *)(a1 + 8) = v11 + 16;
        if (!*(_QWORD *)(a1 + 32))
          bzero(&v11[8 * *(_QWORD *)(a1 + 24) + 16], 8 * (v7 - *(_QWORD *)(a1 + 24)));
        *(_QWORD *)(a1 + 24) = v7;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 80) = 1;
      if (v11)
        goto LABEL_7;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 16) < a2)
    *(_DWORD *)(a1 + 16) = a2;
  result = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2 + 4) = a3;
  return result;
}

uint64_t sub_20B964600(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(unsigned int *)(v14 + 8 * a6);
  if (a7)
  {
    if (*(_DWORD *)(v14 + 8 * v15 + 4) == a6)
    {
      v16 = *(_DWORD *)(v14 + 8 * v15);
      if (v16 < 0)
      {
        if (*a3)
        {
          --*a3;
        }
        else if (a2)
        {
          v22 = *a4;
          v23 = a5 + 24 * *a4;
          *(_DWORD *)(v23 + 8) = -v16;
          *a4 = v22 + 1;
          *(_WORD *)(v23 + 12) = a8;
          if (v22 + 1 >= a2)
            return 1;
        }
        else
        {
          ++*a4;
        }
      }
    }
  }
  v17 = a8 + 1;
  v18 = (v15 + 1);
  v19 = 257;
  v20 = 1;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18 + 4) != a6
       || !sub_20B964600(a1, a2, a3, a4, a5, v18, 1, v17))
  {
    v18 = (v18 + 1);
    if (--v19 <= 1)
      return 0;
  }
  return v20;
}

uint64_t sub_20B964734(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= a2)
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
  else
    v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if (v3 >= v4 + (int)v5)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v4 + v5) + 4);
    else
      v7 = 0;
    if (v7 == a2)
      *(_WORD *)(a3 + 2 * v6++) = v5;
    ++v5;
  }
  while (v5 != 257);
  return v6;
}

uint64_t sub_20B9647A0(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unint64_t a5, __int16 a6, int a7, unsigned int *a8)
{
  unsigned int v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t result;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int *v38;

  v14 = *(_DWORD *)(a1 + 16);
  if (v14 >= a3)
  {
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a3);
    if (a7)
    {
LABEL_3:
      v16 = 0;
      *(_WORD *)(a4 + 2 * a5) = a6;
      v17 = 1;
      do
      {
        v18 = v17 + *(__int16 *)(a4 + 2 * v16);
        if (v14 >= v18)
          v19 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18 + 4);
        else
          v19 = 0;
        ++v16;
        if (v18 == 1 || v19 != 0)
        {
          ++v17;
          v16 = 0;
        }
      }
      while (v16 < a5 + 1);
      goto LABEL_25;
    }
  }
  else
  {
    v15 = 0;
    if (a7)
      goto LABEL_3;
  }
  v21 = 0;
  v17 = 1;
  do
  {
    v22 = v17 + *(__int16 *)(a4 + 2 * v21);
    if (v14 >= v22)
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22 + 4);
    else
      v23 = 0;
    ++v21;
    if (v22 == 1 || v23 != 0)
    {
      ++v17;
      v21 = 0;
    }
  }
  while (v21 < a5);
LABEL_25:
  result = sub_20B964340(a1, a3, v17);
  if ((_DWORD)result != -1)
  {
    v38 = a8;
    if (a5)
    {
      v26 = 0;
      while (1)
      {
        v27 = *(_DWORD *)(a1 + 16);
        v28 = v27 >= a3 ? *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a3) : 0;
        v29 = *(__int16 *)(a4 + 2 * v26);
        v30 = (v15 + v29);
        v31 = v27 >= v30 ? *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v15 + v29)) : 0;
        v32 = v28 + v29;
        result = sub_20B964340(a1, v28 + v29, v31);
        if ((_DWORD)result == -1)
          break;
        result = sub_20B964520(a1, v32, a3);
        if ((_DWORD)result == -1)
          break;
        if (*(_DWORD *)(a1 + 16) >= v30 && *(int *)(*(_QWORD *)(a1 + 8) + 8 * v30) >= 1)
        {
          v33 = 0;
          do
          {
            v34 = *(_DWORD *)(a1 + 16);
            v35 = v34 >= v30 ? *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) : 0;
            v36 = v35 + v33;
            if (v35 + v33 > v34)
              break;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v36 + 4) == (_DWORD)v30)
            {
              result = sub_20B964520(a1, v36, v32);
              if ((_DWORD)result == -1)
                return result;
            }
          }
          while (++v33 != 257);
        }
        result = sub_20B964340(a1, v30, 0);
        if ((_DWORD)result == -1)
          break;
        result = sub_20B964520(a1, v30, 0);
        if ((_DWORD)result == -1)
          break;
        ++v26;
        if ((_DWORD)v30 == a2 && a2 != a3)
          a2 = v32;
        if (v26 == a5)
          goto LABEL_54;
      }
    }
    else
    {
LABEL_54:
      result = 0;
      *v38 = a2;
    }
  }
  return result;
}

uint64_t sub_20B964A30(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  __CFString **v9;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v5 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5), (_DWORD)result))
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
        v7 = (const void **)MEMORY[0x24BDBD270];
        if (v6 >= 2)
        {
          v8 = (const void *)*MEMORY[0x24BDBD270];
          CFDictionaryAddValue(a2, CFSTR("phraseCandidateAccepted"), (const void *)*MEMORY[0x24BDBD270]);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 288))(v5))
            CFDictionaryAddValue(a2, CFSTR("dialectPhraseCandidateAccepted"), v8);
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) == 76)
        {
          v9 = &off_24C49C720;
        }
        else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) == 85)
        {
          v9 = &off_24C49C718;
        }
        else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) == 65)
        {
          v9 = &off_24C49C728;
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) != 77)
          {
LABEL_19:
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5))
              CFDictionaryAddValue(a2, CFSTR("extensionCandidateAccepted"), *v7);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5))
              CFDictionaryAddValue(a2, CFSTR("emojiCandidateAccepted"), *v7);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 264))(v5))
              CFDictionaryAddValue(a2, CFSTR("otaNonRegionalLexiconCandidateAccepted"), *v7);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5))
              CFDictionaryAddValue(a2, CFSTR("otaRegionalLexiconCandidateAccepted"), *v7);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5))
              CFDictionaryAddValue(a2, CFSTR("autocorrectionCandidateAccepted"), *v7);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 416))(v5) & 0x400) != 0)
              CFDictionaryAddValue(a2, CFSTR("fuzzyPinyinEnabled"), *v7);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 192))(v5))
              CFDictionaryAddValue(a2, CFSTR("fuzzyPinyinCandidateAccepted"), *v7);
            return 1;
          }
          v9 = &off_24C49C6D8;
        }
        CFDictionaryAddValue(a2, *v9, *v7);
        goto LABEL_19;
      }
    }
  }
  return result;
}

void sub_20B964D00()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B964D14(uint64_t a1, uint64_t a2, _QWORD *a3, int **a4)
{
  int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int16 v16;
  unsigned int v17;
  __int16 *v18;
  __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v23;

  v5 = *(_DWORD *)(a1 + 84);
  if (a3)
  {
    v6 = 0;
    v7 = *a4;
    v8 = a4[1];
    v9 = 1;
    while (1)
    {
      v10 = *(_DWORD *)(*a3 + 80);
      if (v10 == 1)
      {
        if (v7 != v8)
        {
          v11 = v8 - 1;
          v12 = v8 - 1;
          do
          {
            v13 = v6;
            v14 = *v12--;
            *((_DWORD *)&unk_25472D160 + v9--) = v14;
            if (v6)
              break;
            v6 = 1;
            v15 = v11 == v7;
            v11 = v12;
          }
          while (!v15);
          goto LABEL_16;
        }
        v10 = 1;
      }
      else if (v5 == 1)
      {
        v16 = v10 - 1000;
        v17 = v16;
        v18 = (__int16 *)((char *)&unk_20BA5932C + 2 * v16 - 28);
        v19 = &aXxxxxfffffyyyy[v16 - 428];
        if (v17 < 0x1AC)
          v19 = v18;
        v10 = (unsigned __int16)*v19 + 1000;
      }
      *((_DWORD *)&unk_25472D160 + v9--) = v10;
      a3 = (_QWORD *)a3[1];
      v13 = v6;
LABEL_16:
      if (!v13)
      {
        v6 = 1;
        if (a3)
          continue;
      }
      v20 = v13 + 1;
      goto LABEL_20;
    }
  }
  v20 = 0;
  v9 = 1;
LABEL_20:
  v21 = *(unsigned int *)(a1 + 80);
  if (v5 == 1 && (v21 - 1) >= 2)
  {
    v23 = &aXxxxxfffffyyyy[(unsigned __int16)(v21 - 1000) - 428];
    if ((unsigned __int16)(v21 - 1000) < 0x1ACu)
      v23 = (__int16 *)((char *)&unk_20BA5932C + 2 * (unsigned __int16)(v21 - 1000) - 28);
    v21 = (unsigned __int16)*v23 + 1000;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v21, (char *)&unk_25472D160 + 4 * v9 + 4, v20);
}

BOOL sub_20B964E48(uint64_t a1)
{
  _QWORD *v2;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 8) & 2) != 0)
    return 1;
  v2 = sub_20B9E07E0();
  return *(_DWORD *)(a1 + 84) == 1 && sub_20B886524(v2, (unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2)) != 0;
}

void sub_20B964EA4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 84);
  if (v2 == 2)
  {
    v6 = *(_QWORD *)(a1 + 72);
    if (v6)
      v6 = *(unsigned __int16 *)(v6 + 2);
    v4 = 2 * v6;
    v5 = &off_24C4A2768;
    goto LABEL_10;
  }
  if (v2 != 1)
  {
    if (v2)
    {
      v7 = "";
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 72);
    if (v3)
      v3 = *(unsigned __int16 *)(v3 + 2);
    v4 = 2 * v3;
    v5 = &off_24C4A0588;
LABEL_10:
    v7 = v5[v4];
LABEL_15:
    sub_20B80BBD0(a2, v7);
    return;
  }
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
    v8 = *(unsigned __int16 *)(v8 + 2);
  sub_20B8D15F4(*(&off_24C4A65A8 + 2 * v8), (unint64_t)*(&off_24C4A65A8 + 2 * v8 + 1), a2);
}

uint64_t sub_20B964F28(uint64_t a1, CFTypeRef cf, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a7;
  *(_QWORD *)a1 = &off_24C461A98;
  if (cf)
  {
    *(_QWORD *)(a1 + 72) = CFRetain(cf);
    *(_BYTE *)(a1 + 80) = a4;
    v11 = LXCursorHash();
  }
  else
  {
    v11 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = a4;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (a3)
  {
    LXEntryGetProbability();
    *(_QWORD *)(a1 + 96) = v12;
    v13 = (const void *)LXEntryCopyString();
    sub_20B87E150((const void **)(a1 + 112), v13);
    *(_DWORD *)(a1 + 104) = LXEntryGetMetaFlags();
    *(_QWORD *)(a1 + 88) = sub_20B8D345C(*(const __CFString **)(a1 + 112));
  }
  return a1;
}

void sub_20B964FFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_20B8955E0((const void **)(v1 + 72), 0);
  *(_QWORD *)v1 = off_24C460C00;
  v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(_QWORD *)(v1 + 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20B96504C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C460C00;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B965088(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C460C00;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

double sub_20B9650D4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 56) = *(_BYTE *)(a1 + 56);
  *(_QWORD *)v4 = &off_24C461B78;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v4 + 72) = v5;
  result = *(double *)(a1 + 80);
  *(double *)(v4 + 80) = result;
  *a2 = v4;
  return result;
}

BOOL sub_20B96514C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) == 1;
}

uint64_t sub_20B96515C()
{
  return 0;
}

void sub_20B965170(uint64_t a1)
{
  sub_20B9652F0(a1);
  JUMPOUT(0x20BD39CB0);
}

CFTypeRef sub_20B965194@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef result;

  v4 = operator new();
  *(_BYTE *)(v4 + 56) = *(_BYTE *)(a1 + 56);
  v5 = *(CFTypeRef *)(a1 + 72);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)v4 = &off_24C461A98;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  if (v5)
    v5 = CFRetain(v5);
  *(_QWORD *)(v4 + 72) = v5;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  result = *(CFTypeRef *)(a1 + 112);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(v4 + 112) = result;
  *a2 = v4;
  return result;
}

void sub_20B965250(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  void *v4;

  sub_20B8955E0(v2, 0);
  *v1 = off_24C460C00;
  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  MEMORY[0x20BD39CB0](v1, 0x10E1C4004FE7129);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9652A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

BOOL sub_20B9652AC()
{
  return LXCursorHasEntries() != 0;
}

uint64_t sub_20B9652CC()
{
  return 1;
}

_QWORD *sub_20B9652D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v2;

  v2 = *(const __CFString **)(a1 + 112);
  if (v2)
    return sub_20B8D1C98(v2, a2);
  else
    return sub_20B80BBD0(a2, "");
}

uint64_t sub_20B9652F0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24C461A98;
  sub_20B87E150((const void **)(a1 + 112), 0);
  sub_20B8955E0((const void **)(a1 + 72), 0);
  *(_QWORD *)a1 = off_24C460C00;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

__CFArray *sub_20B96534C()
{
  const __CFArray *EmojiTokensForString;
  const __CFArray *v1;
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  const char *String;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  EmojiTokensForString = (const __CFArray *)CEMEmojiLocaleDataCreateEmojiTokensForString();
  if (!EmojiTokensForString)
    return 0;
  v1 = EmojiTokensForString;
  Count = CFArrayGetCount(EmojiTokensForString);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, MEMORY[0x24BDBD690]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(v1, i);
      String = (const char *)CEMEmojiTokenGetString();
      v6 = sub_20B947754();
      v7 = sub_20B947A90(v6, String);
      if (v7)
        v8 = (const void *)v7;
      else
        v8 = String;
      CFArrayAppendValue(Mutable, v8);
    }
  }
  CFRelease(v1);
  return Mutable;
}

void sub_20B965440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88B74C((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B965468(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *p_p;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  float *v19;
  float v20;
  double v21;
  float *v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  uint64_t v28;
  uint8_t v29[16];
  float *v30;
  void *__p;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = &unk_24C460D28;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) == 0)
    return;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
  v8 = *(_QWORD *)(a1 + 24);
  v34 = xmmword_20BA39430;
  *(_QWORD *)&v35 = 10;
  DWORD2(v35) = 1077936128;
  v43[0] = &off_24C46B108;
  v44 = v43;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, __int128 *, _QWORD *))(*(_QWORD *)v8 + 16))(&v39, v8, v7, 8, &v34, v43);
  v9 = v44;
  if (v44 == v43)
  {
    v10 = 4;
    v9 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_8;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_8:
  *(_QWORD *)&v34 = 0;
  DWORD2(v34) = 0;
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v38 = 0;
  v11 = v39;
  v12 = v40;
  if (v39 == v40)
    goto LABEL_43;
  do
  {
    if (*(char *)(v11 + 23) < 0)
    {
      v14 = *(char **)v11;
      v13 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      v13 = *(unsigned __int8 *)(v11 + 23);
      v14 = (char *)v11;
    }
    sub_20B8AE824(v14, v13, (uint64_t)&__p);
    if ((v33 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v33 & 0x80u) == 0)
      v16 = v33;
    else
      v16 = v32;
    if (sub_20B90DD8C(a1, (uint64_t)p_p, v16))
      goto LABEL_38;
    v17 = (v33 & 0x80u) == 0 ? (__int16 *)&__p : (__int16 *)__p;
    v18 = (v33 & 0x80u) == 0 ? v33 : v32;
    sub_20B90DE2C(a1, (int *)&v34, v17, v18, **(_DWORD **)(a1 + 8), (uint64_t *)&v30);
    if (!v30)
      goto LABEL_38;
    (*(void (**)(float *, double))(*(_QWORD *)v30 + 400))(v30, *(float *)(v11 + 24));
    v19 = v30;
    v20 = v30[24];
    v21 = (*(double (**)(float *))(*(_QWORD *)v30 + 392))(v30);
    (*(void (**)(float *, _QWORD))(*(_QWORD *)v19 + 480))(v19, (int)(v21 * -5500.0 + v20 * -4400.0));
    (*(void (**)(float *, uint64_t, const char *, _QWORD))(*(_QWORD *)v30 + 528))(v30, 10, "[predictPhrasesWithLanguageModel]", 0);
    v22 = v30;
    v30 = 0;
    *(_QWORD *)v29 = v22;
    v41[0] = &unk_24C459188;
    v42 = v41;
    v23 = sub_20B8FDA94((_QWORD *)a3, (_QWORD **)v29, 2, 0, (uint64_t)v41);
    v24 = v42;
    if (v42 == v41)
    {
      v24 = v41;
      v25 = 4;
      goto LABEL_30;
    }
    if (v42)
    {
      v25 = 5;
LABEL_30:
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
    v26 = *(_QWORD **)v29;
    *(_QWORD *)v29 = 0;
    if (v26)
      (*(void (**)(_QWORD *))(*v26 + 16))(v26);
    if ((v23 & 1) == 0)
    {
      v27 = sub_20B9A7C5C(0xAu);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v29 = 0;
        _os_log_debug_impl(&dword_20B7F7000, v27, OS_LOG_TYPE_DEBUG, " ∟ Rejected", v29, 2u);
      }
    }
    v28 = (uint64_t)v30;
    v30 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
LABEL_38:
    if ((char)v33 < 0)
      operator delete(__p);
    v11 += 32;
  }
  while (v11 != v12);
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
LABEL_43:
  *(_QWORD *)&v34 = &v39;
  sub_20B86F120((void ***)&v34);
}

void sub_20B965828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;

  v37 = *(_QWORD **)(v35 - 136);
  if (v37 == v34)
  {
    v38 = 4;
    v37 = (_QWORD *)(v35 - 160);
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_6:
  sub_20B881268(v33);
  _Unwind_Resume(a1);
}

void sub_20B96592C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  char *v25;
  __int16 *v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  double v32;
  _QWORD *v33;
  float v34;
  double v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  _QWORD *v41;
  void **v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45[2];
  uint64_t v46;
  int v47;
  void *v48[3];
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  void **v57;
  char v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = &unk_24C460D28;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_DWORD *)(a4 + 40) = 1065353216;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    v10 = a3 ? v9 : 0;
    if ((v10 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
      LODWORD(v49) = 1;
      HIDWORD(v49) = *(_DWORD *)(a3 + 96);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
      v12 = *(_QWORD *)(a3 + 32);
      v50 = v11;
      v13 = *(char *)(a3 + 55);
      if (v13 >= 0)
        v14 = a3 + 32;
      else
        v14 = v12;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a3 + 55);
      else
        v15 = *(_QWORD *)(a3 + 40);
      v51 = v14;
      v52 = v15;
      v16 = *(unsigned __int8 *)(a3 + 87);
      v17 = a3 + 64;
      if ((v16 & 0x80u) != 0)
      {
        v17 = *(_QWORD *)(a3 + 64);
        v16 = *(_QWORD *)(a3 + 72);
      }
      v53 = v17;
      v54 = v16;
      __p[1] = 0;
      v56 = 0;
      __p[0] = 0;
      sub_20B881F78(*(_QWORD ***)(a1 + 16));
      *(_OWORD *)__p = *(_OWORD *)v45;
      v56 = v46;
      if (!sub_20B90DC60(&v49, *(_QWORD *)(a1 + 16), 0))
      {
LABEL_62:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return;
      }
      v18 = *(_QWORD *)(a1 + 16);
      v63 = 0;
      v64 = 0;
      v65 = 0;
      sub_20B83C9C4(&v63, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      v45[0] = 0;
      v45[1] = 0;
      v46 = 0;
      v57 = v45;
      v58 = 0;
      v45[0] = operator new(0x18uLL);
      v45[1] = v45[0];
      v46 = (uint64_t)v45[0] + 24;
      v45[1] = sub_20B88248C((uint64_t)&v46, (uint64_t)&v63, (uint64_t)&v66, (_QWORD *)v45[0]);
      (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 64))(v48, v18, v45, 1);
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
      v57 = v45;
      sub_20B83B400(&v57);
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      (*(void (**)(void ***__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 96))(&v57, *(_QWORD *)(a1 + 16), 0);
      (*((void (**)(void **, _QWORD))*v57 + 3))(v57, *((unsigned int *)__p[1] - 1));
      v19 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)v45 = xmmword_20BA39440;
      v46 = 16;
      v47 = 1082130432;
      v61[0] = &off_24C4594A0;
      v62 = v61;
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, void **, uint64_t, void **, _QWORD *))(*(_QWORD *)v19 + 16))(&v63, v19, v57, 8, v45, v61);
      v20 = v62;
      if (v62 == v61)
      {
        v21 = 4;
        v20 = v61;
      }
      else
      {
        if (!v62)
        {
LABEL_24:
          v22 = v63;
          v23 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              if (*((float *)v22 + 6) < -1.7)
                goto LABEL_60;
              if ((char)v22[23] < 0)
              {
                v25 = *(char **)v22;
                v24 = *((_QWORD *)v22 + 1);
              }
              else
              {
                v24 = v22[23];
                v25 = (char *)v22;
              }
              sub_20B8AE824(v25, v24, (uint64_t)v45);
              v26 = v46 >= 0 ? (__int16 *)v45 : (__int16 *)v45[0];
              v27 = v46 >= 0 ? (void *)HIBYTE(v46) : v45[1];
              sub_20B90DE2C(a1, (int *)&v49, v26, (uint64_t)v27, **(_DWORD **)(a1 + 8), (uint64_t *)&v44);
              if (v44)
                break;
LABEL_57:
              if (SHIBYTE(v46) < 0)
                operator delete(v45[0]);
              v22 += 32;
              if (v22 == v23)
                goto LABEL_60;
            }
            v28 = *((char *)v44 + 55);
            if (v28 >= 0)
              v29 = (uint64_t)(v44 + 4);
            else
              v29 = v44[4];
            if (v28 >= 0)
              v30 = *((unsigned __int8 *)v44 + 55);
            else
              v30 = v44[5];
            if (sub_20B90DD8C(a1, v29, v30))
            {
LABEL_55:
              v41 = v44;
              v44 = 0;
              if (v41)
                (*(void (**)(_QWORD *))(*v41 + 16))(v41);
              goto LABEL_57;
            }
            v31 = v44;
            v32 = (*(double (**)(uint64_t))(*(_QWORD *)a3 + 392))(a3);
            (*(void (**)(_QWORD *, double))(*v31 + 400))(v31, v32 + *((float *)v22 + 6));
            v33 = v44;
            v34 = *(float *)(a3 + 96);
            v35 = (*(double (**)(_QWORD *))(*v44 + 392))(v44);
            (*(void (**)(_QWORD *, _QWORD))(*v33 + 480))(v33, (int)(v35 * -5500.0 + v34 * -4400.0));
            (*(void (**)(_QWORD *, uint64_t, const char *, _QWORD))(*v44 + 528))(v44, 10, "[expandPhrasesWithLanguageModel]", 0);
            v43 = v44;
            v44 = 0;
            v59[0] = &unk_24C459188;
            v60 = v59;
            v36 = sub_20B8FDA94((_QWORD *)a4, &v43, 2, 0, (uint64_t)v59);
            v37 = v60;
            if (v60 == v59)
            {
              v37 = v59;
              v38 = 4;
            }
            else
            {
              if (!v60)
              {
LABEL_50:
                v39 = v43;
                v43 = 0;
                if (v39)
                  (*(void (**)(_QWORD *))(*v39 + 16))(v39);
                if ((v36 & 1) == 0)
                {
                  v40 = sub_20B9A7C5C(0xAu);
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(v43) = 0;
                    _os_log_debug_impl(&dword_20B7F7000, v40, OS_LOG_TYPE_DEBUG, " ∟ Rejected", (uint8_t *)&v43, 2u);
                  }
                }
                goto LABEL_55;
              }
              v38 = 5;
            }
            (*(void (**)(void))(*v37 + 8 * v38))();
            goto LABEL_50;
          }
LABEL_60:
          v45[0] = &v63;
          sub_20B86F120((void ***)v45);
          v42 = v57;
          v57 = 0;
          if (v42)
            (*((void (**)(void **))*v42 + 1))(v42);
          goto LABEL_62;
        }
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
      goto LABEL_24;
    }
  }
}

void sub_20B965EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;

  v40 = *(_QWORD **)(v38 - 160);
  if (v40 == v37)
  {
    v41 = 4;
    v40 = (_QWORD *)(v38 - 184);
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_6:
  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  if (__p)
    operator delete(__p);
  sub_20B881268(v36);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B966034(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C460230;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B96607C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C460230;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9660D8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9660EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46B108;
  return result;
}

void sub_20B966110(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46B108;
}

uint64_t sub_20B966128()
{
  return 1;
}

uint64_t sub_20B966130(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F0D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B96616C()
{
  return &unk_24C45F0D0;
}

void sub_20B96617C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B966190()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C4594A0;
  return result;
}

void sub_20B9661B4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C4594A0;
}

uint64_t sub_20B9661CC()
{
  return 1;
}

uint64_t sub_20B9661D4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E58))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B966210()
{
  return &unk_24C458E58;
}

uint64_t sub_20B96621C()
{
  unsigned __int8 v0;
  uint64_t *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D268);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D268))
  {
    v2 = (uint64_t *)operator new();
    sub_20B9662C8(v2);
    qword_25472D260 = (uint64_t)v2;
    __cxa_guard_release(&qword_25472D268);
  }
  return qword_25472D260;
}

void sub_20B966290(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C400FA29667);
  __cxa_guard_abort(&qword_25472D268);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9662C8(uint64_t *a1)
{
  uint64_t v2;

  sub_20BA255D8(a1);
  sub_20BA25814(a1 + 2);
  sub_20BA25FFC(a1 + 4);
  v2 = operator new();
  sub_20B919DB8(v2, 0, CFSTR("en_US"));
  a1[6] = v2;
  return a1;
}

void sub_20B966340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  MEMORY[0x20BD39CB0](v5, 0x1020C40F89CB87BLL);
  sub_20B811FE4(v3);
  sub_20B811FE4(v2);
  sub_20B811FE4(v1);
  _Unwind_Resume(a1);
}

void sub_20B966398(uint64_t *a1, const __CFString *a2, __int16 a3, unsigned int a4, uint64_t a5, int a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  CFIndex Length;
  _QWORD *v21;
  __int16 v22;
  void **v23;
  uint64_t v24;
  const void **v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  char *v44;
  void *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  const void *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  uint64_t v104;
  char v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void *__p[2];
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  if (a2 && a4)
  {
    if (a6 == 2)
    {
      v14 = a1[4];
      v13 = a1[5];
    }
    else if (a6 == 1)
    {
      v14 = a1[2];
      v13 = a1[3];
    }
    else
    {
      v14 = *a1;
      v13 = a1[1];
    }
    v109 = v14;
    v110 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    sub_20B8EDA68(v14);
    v17 = atomic_load((unsigned int *)(v14 + 40));
    if (v17 == 2 && *(_QWORD *)v14)
    {
      sub_20B8EDA68(v109);
      v18 = atomic_load((unsigned int *)(v109 + 40));
      if (v18 == 2)
        v19 = *(_QWORD **)v109;
      else
        v19 = 0;
      Length = CFStringGetLength(a2);
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v21 = operator new(0x30uLL);
      *v21 = &off_24C46AB88;
      v21[1] = a1;
      if (a4 >= 4)
        v22 = 4;
      else
        v22 = a4;
      v21[2] = Length;
      v21[3] = &v106;
      *((_WORD *)v21 + 16) = a4;
      *((double *)v21 + 5) = a7;
      *((_QWORD *)&v112 + 1) = v21;
      sub_20BA27704(v19, a2, (uint64_t)__p, (unsigned __int16)(v22 + a4), a3, a7);
      v23 = (void **)*((_QWORD *)&v112 + 1);
      if (*((void ***)&v112 + 1) == __p)
      {
        v24 = 4;
        v23 = __p;
      }
      else
      {
        if (!*((_QWORD *)&v112 + 1))
        {
LABEL_24:
          v112 = 0u;
          v113 = 0u;
          *(_OWORD *)__p = 0u;
          v104 = a5;
          while (1)
          {
            v25 = (const void **)v106;
            if (v106 == v107)
            {
              v105 = 0;
              do
              {
                if (!*((_QWORD *)&v113 + 1))
                  break;
                v94 = *((_QWORD *)&v113 + 1) + v113 - 1;
                v95 = *((_QWORD *)__p[1] + v94 / 0xAA);
                v96 = v94 % 0xAA;
                v97 = (const void *)LXEntryCopyString();
                sub_20B966EAC(*(_QWORD *)(v104 + 24), (uint64_t)v97, *(_QWORD *)(v95 + 24 * v96 + 8), (uint64_t)&v105, *(double *)(v95 + 24 * v96));
                v98 = *((_QWORD *)__p[1] + (*((_QWORD *)&v113 + 1) + (_QWORD)v113 - 1) / 0xAAuLL)
                    + 24 * ((*((_QWORD *)&v113 + 1) + (_QWORD)v113 - 1) % 0xAAuLL);
                sub_20B9679A8((const void **)(v98 + 16), 0);
                sub_20B87E150((const void **)(v98 + 8), 0);
                v99 = 170 * ((uint64_t)(v112 - (unint64_t)__p[1]) >> 3) - 1;
                if ((void *)v112 == __p[1])
                  v99 = 0;
                v100 = (*((_QWORD *)&v113 + 1))--;
                if ((unint64_t)(v99 - (v100 + v113) - 339) <= 0xFFFFFFFFFFFFFEABLL)
                {
                  operator delete(*(void **)(v112 - 8));
                  *(_QWORD *)&v112 = v112 - 8;
                }
                if (v97)
                  CFRelease(v97);
              }
              while (!v105);
              sub_20B966EF4((uint64_t)__p);
              if (v106)
              {
                sub_20B9679DC((uint64_t)&v106, (uint64_t)v106);
                operator delete(v106);
              }
              goto LABEL_132;
            }
            v26 = (char *)__p[1];
            v27 = (char *)v112;
            v28 = v112 - (unint64_t)__p[1];
            v29 = (uint64_t)(v112 - (unint64_t)__p[1]) >> 3;
            if ((void *)v112 == __p[1])
              v30 = 0;
            else
              v30 = 170 * v29 - 1;
            if (v30 == *((_QWORD *)&v113 + 1) + (_QWORD)v113)
            {
              if ((unint64_t)v113 >= 0xAA)
              {
                *(_QWORD *)&v113 = v113 - 170;
                v31 = (char *)__p[1] + 8;
                v32 = *(_QWORD *)__p[1];
                __p[1] = (char *)__p[1] + 8;
                if ((_QWORD)v112 == *((_QWORD *)&v112 + 1))
                {
                  v33 = __p[0];
                  if (v31 <= __p[0])
                  {
                    if ((void *)v112 == __p[0])
                      v49 = 1;
                    else
                      v49 = (uint64_t)(v112 - (unint64_t)__p[0]) >> 2;
                    if (v49 >> 61)
                      goto LABEL_139;
                    v50 = (char *)operator new(8 * v49);
                    v52 = v27 - v31;
                    v51 = v27 == v31;
                    v27 = &v50[8 * (v49 >> 2)];
                    if (!v51)
                    {
                      v27 = &v50[8 * (v49 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                      v53 = 8 * (v52 >> 3);
                      v54 = &v50[8 * (v49 >> 2)];
                      do
                      {
                        v55 = *(_QWORD *)v31;
                        v31 += 8;
                        *(_QWORD *)v54 = v55;
                        v54 += 8;
                        v53 -= 8;
                      }
                      while (v53);
                    }
                    __p[0] = v50;
                    __p[1] = &v50[8 * (v49 >> 2)];
                    *(_QWORD *)&v112 = v27;
                    *((_QWORD *)&v112 + 1) = &v50[8 * v49];
                    if (v33)
                    {
                      operator delete(v33);
                      v27 = (char *)v112;
                    }
                  }
                  else
                  {
                    v34 = (v31 - (char *)__p[0]) >> 3;
                    if (v34 >= -1)
                      v35 = v34 + 1;
                    else
                      v35 = v34 + 2;
                    v36 = &v31[-8 * (v35 >> 1)];
                    v37 = v112 - (_QWORD)v31;
                    if ((char *)v112 != v31)
                    {
                      memmove(&v31[-8 * (v35 >> 1)], v31, v112 - (_QWORD)v31);
                      v27 = (char *)__p[1];
                    }
                    v38 = &v27[-8 * (v35 >> 1)];
                    v27 = &v36[v37];
                    __p[1] = v38;
                    *(_QWORD *)&v112 = &v36[v37];
                  }
                }
                *(_QWORD *)v27 = v32;
LABEL_61:
                v27 = (char *)(v112 + 8);
                *(_QWORD *)&v112 = v112 + 8;
                goto LABEL_62;
              }
              v39 = (char *)*((_QWORD *)&v112 + 1);
              v40 = (char *)__p[0];
              if (v29 < (unint64_t)((uint64_t)(*((_QWORD *)&v112 + 1) - (unint64_t)__p[0]) >> 3))
              {
                v41 = operator new(0xFF0uLL);
                v42 = v41;
                if (v39 == v27)
                {
                  if (v26 == v40)
                  {
                    if (v27 == v26)
                      v73 = 1;
                    else
                      v73 = (v39 - v26) >> 2;
                    if (v73 >> 61)
                      goto LABEL_139;
                    v74 = (char *)operator new(8 * v73);
                    v57 = &v74[(2 * v73 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v75 = v57;
                    if (v27 != v26)
                    {
                      v76 = 8 * v29;
                      v77 = &v74[(2 * v73 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v78 = v26;
                      v75 = &v57[8 * v29];
                      do
                      {
                        v79 = *(_QWORD *)v78;
                        v78 += 8;
                        *(_QWORD *)v77 = v79;
                        v77 += 8;
                        v76 -= 8;
                      }
                      while (v76);
                    }
                    __p[0] = v74;
                    __p[1] = &v74[(2 * v73 + 6) & 0xFFFFFFFFFFFFFFF8];
                    *(_QWORD *)&v112 = v75;
                    *((_QWORD *)&v112 + 1) = &v74[8 * v73];
                    if (v26)
                    {
                      operator delete(v26);
                      v57 = (char *)__p[1];
                    }
                  }
                  else
                  {
                    v57 = v26;
                  }
                  *((_QWORD *)v57 - 1) = v42;
                  v81 = (char *)__p[1];
                  v80 = (char *)v112;
                  __p[1] = (char *)__p[1] - 8;
                  v82 = *(_QWORD *)__p[1];
                  __p[1] = v81;
                  if ((_QWORD)v112 == *((_QWORD *)&v112 + 1))
                  {
                    v83 = __p[0];
                    if (v81 <= __p[0])
                    {
                      if ((void *)v112 == __p[0])
                        v88 = 1;
                      else
                        v88 = (uint64_t)(v112 - (unint64_t)__p[0]) >> 2;
                      if (v88 >> 61)
                        goto LABEL_139;
                      v89 = (char *)operator new(8 * v88);
                      v90 = v80 - v81;
                      v51 = v80 == v81;
                      v80 = &v89[8 * (v88 >> 2)];
                      if (!v51)
                      {
                        v80 = &v89[8 * (v88 >> 2) + (v90 & 0xFFFFFFFFFFFFFFF8)];
                        v91 = 8 * (v90 >> 3);
                        v92 = &v89[8 * (v88 >> 2)];
                        do
                        {
                          v93 = *(_QWORD *)v81;
                          v81 += 8;
                          *(_QWORD *)v92 = v93;
                          v92 += 8;
                          v91 -= 8;
                        }
                        while (v91);
                      }
                      __p[0] = v89;
                      __p[1] = &v89[8 * (v88 >> 2)];
                      *(_QWORD *)&v112 = v80;
                      *((_QWORD *)&v112 + 1) = &v89[8 * v88];
                      if (v83)
                      {
                        operator delete(v83);
                        v80 = (char *)v112;
                      }
                    }
                    else
                    {
                      v84 = (v81 - (char *)__p[0]) >> 3;
                      if (v84 >= -1)
                        v85 = v84 + 1;
                      else
                        v85 = v84 + 2;
                      v86 = &v81[-8 * (v85 >> 1)];
                      v87 = v112 - (_QWORD)v81;
                      if ((char *)v112 != v81)
                      {
                        memmove(&v81[-8 * (v85 >> 1)], v81, v112 - (_QWORD)v81);
                        v81 = (char *)__p[1];
                      }
                      v80 = &v86[v87];
                      __p[1] = &v81[-8 * (v85 >> 1)];
                      *(_QWORD *)&v112 = &v86[v87];
                    }
                  }
                  *(_QWORD *)v80 = v82;
                }
                else
                {
                  *(_QWORD *)v27 = v41;
                }
                goto LABEL_61;
              }
              if (*((void **)&v112 + 1) == __p[0])
                v43 = 1;
              else
                v43 = (uint64_t)(*((_QWORD *)&v112 + 1) - (unint64_t)__p[0]) >> 2;
              if (v43 >> 61)
LABEL_139:
                sub_20B800BC0();
              v44 = (char *)operator new(8 * v43);
              v45 = operator new(0xFF0uLL);
              v46 = &v44[8 * v29];
              v47 = &v44[8 * v43];
              if (v29 == v43)
              {
                if (v28 < 1)
                {
                  if (v27 == v26)
                    v58 = 1;
                  else
                    v58 = v28 >> 2;
                  if (v58 >> 61)
                    sub_20B800BC0();
                  v46 = (char *)operator new(8 * v58);
                  v47 = &v46[8 * v58];
                  operator delete(v44);
                  v26 = (char *)__p[1];
                  v27 = (char *)v112;
                  v44 = v46;
                }
                else
                {
                  v48 = v29 + 2;
                  if (v29 >= -1)
                    v48 = v29 + 1;
                  v46 -= 8 * (v48 >> 1);
                }
              }
              *(_QWORD *)v46 = v45;
              v59 = v46 + 8;
              if (v27 != v26)
              {
                do
                {
                  if (v46 == v44)
                  {
                    if (v59 >= v47)
                    {
                      if (v47 == v46)
                        v64 = 1;
                      else
                        v64 = (v47 - v46) >> 2;
                      if (v64 >> 61)
                        sub_20B800BC0();
                      v65 = (char *)operator new(8 * v64);
                      v44 = v65;
                      v60 = &v65[(2 * v64 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v61 = v60;
                      v66 = v59 - v46;
                      if (v59 != v46)
                      {
                        v61 = &v60[v66 & 0xFFFFFFFFFFFFFFF8];
                        v67 = 8 * (v66 >> 3);
                        v68 = &v65[(2 * v64 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v69 = v46;
                        do
                        {
                          v70 = *(_QWORD *)v69;
                          v69 += 8;
                          *(_QWORD *)v68 = v70;
                          v68 += 8;
                          v67 -= 8;
                        }
                        while (v67);
                      }
                      v47 = &v65[8 * v64];
                      operator delete(v46);
                    }
                    else
                    {
                      v62 = (v47 - v59) >> 3;
                      if (v62 >= -1)
                        v63 = v62 + 1;
                      else
                        v63 = v62 + 2;
                      v61 = &v59[8 * (v63 >> 1)];
                      v60 = &v46[8 * (v63 >> 1)];
                      if (v59 == v46)
                      {
                        v44 = v59;
                      }
                      else
                      {
                        memmove(&v46[8 * (v63 >> 1)], v46, v59 - v46);
                        v44 = v46;
                      }
                    }
                  }
                  else
                  {
                    v60 = v46;
                    v61 = v59;
                  }
                  v71 = *((_QWORD *)v27 - 1);
                  v27 -= 8;
                  *((_QWORD *)v60 - 1) = v71;
                  v46 = v60 - 8;
                  v59 = v61;
                }
                while (v27 != __p[1]);
              }
              v72 = __p[0];
              __p[0] = v44;
              __p[1] = v46;
              v27 = v59;
              *(_QWORD *)&v112 = v59;
              *((_QWORD *)&v112 + 1) = v47;
              if (v72)
              {
                operator delete(v72);
                v27 = (char *)v112;
              }
            }
LABEL_62:
            if (v27 == __p[1])
              v56 = 0;
            else
              v56 = *((_QWORD *)__p[1] + (*((_QWORD *)&v113 + 1) + (_QWORD)v113) / 0xAAuLL)
                  + 24 * ((*((_QWORD *)&v113 + 1) + (_QWORD)v113) % 0xAAuLL);
            sub_20B9678F4(v56, v25[2], v25[1], *(double *)v25);
            ++*((_QWORD *)&v113 + 1);
            sub_20B966C90((uint64_t *)&v106);
          }
        }
        v24 = 5;
      }
      (*((void (**)(void))*v23 + v24))();
      goto LABEL_24;
    }
LABEL_132:
    v101 = v110;
    if (v110)
    {
      p_shared_owners = (unint64_t *)&v110->__shared_owners_;
      do
        v103 = __ldaxr(p_shared_owners);
      while (__stlxr(v103 - 1, p_shared_owners));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
  }
}

void sub_20B966BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;

  operator delete(v23);
  operator delete(v22);
  sub_20B966EF4((uint64_t)&a19);
  sub_20B96706C(&a13);
  sub_20B811FE4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20B966C90(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void **v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef cf;

  v1 = (uint64_t)a1;
  v2 = *a1;
  v3 = a1[1];
  v4 = v3 - *a1;
  if (v4 >= 25)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    sub_20B9678F4((uint64_t)&v21, *(const void **)(v2 + 16), *(CFTypeRef *)(v2 + 8), *(double *)v2);
    v6 = 0;
    v7 = v2;
    do
    {
      v8 = v7 + 24 * v6 + 24;
      v9 = (2 * v6) | 1;
      v10 = 2 * v6 + 2;
      if (v10 < v5 && sub_20B967B60(v7 + 24 * v6 + 24, v7 + 24 * v6 + 48))
      {
        v8 += 24;
        v9 = v10;
      }
      *(_QWORD *)v7 = *(_QWORD *)v8;
      v11 = *(const void **)(v8 + 16);
      *(_QWORD *)(v8 + 16) = 0;
      sub_20B9679A8((const void **)(v7 + 16), v11);
      v12 = *(const void **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      sub_20B87E150((const void **)(v7 + 8), v12);
      v7 = v8;
      v6 = v9;
    }
    while (v9 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
    v13 = (const void **)(v8 + 16);
    if (v8 == v3 - 24)
    {
      *(_QWORD *)v8 = v21;
      v18 = cf;
      cf = 0;
      sub_20B9679A8(v13, v18);
      v19 = v22;
      v22 = 0;
      sub_20B87E150((const void **)(v8 + 8), v19);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)(v3 - 24);
      v14 = *(const void **)(v3 - 8);
      *(_QWORD *)(v3 - 8) = 0;
      sub_20B9679A8(v13, v14);
      v15 = *(const void **)(v3 - 16);
      *(_QWORD *)(v3 - 16) = 0;
      sub_20B87E150((const void **)(v8 + 8), v15);
      *(_QWORD *)(v3 - 24) = v21;
      v16 = cf;
      cf = 0;
      sub_20B9679A8((const void **)(v3 - 8), v16);
      v17 = v22;
      v22 = 0;
      sub_20B87E150((const void **)(v3 - 16), v17);
      sub_20B967A3C(v2, v8 + 24, 0xAAAAAAAAAAAAAAABLL * ((v8 + 24 - v2) >> 3));
    }
    v1 = (uint64_t)a1;
    if (cf)
      CFRelease(cf);
    cf = 0;
    if (v22)
      CFRelease(v22);
    v3 = a1[1];
  }
  sub_20B9679DC(v1, v3 - 24);
}

void sub_20B966E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B966EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v7 = a3;
  v6 = a5;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v8, &v7, &v6, a4);
}

uint64_t sub_20B966EF4(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        sub_20B9679A8((const void **)(v7 + 16), 0);
        sub_20B87E150((const void **)(v7 + 8), 0);
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 170;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20B96706C(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B9679DC((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_20B9670A4(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *a1;
  sub_20B8EDA68(*a1);
  v3 = atomic_load((unsigned int *)(v2 + 40));
  if (v3 == 2 && *(_QWORD *)v2)
  {
    v4 = *a1;
    sub_20B8EDA68(*a1);
    v5 = atomic_load((unsigned int *)(v4 + 40));
    if (v5 == 2)
      v6 = *(_QWORD *)v4;
    else
      v6 = 0;
    sub_20BA26C6C(v6);
  }
  v7 = a1[6];
  if (v7)
  {
    v8 = *(_QWORD **)(v7 + 8);
    if (v8)
    {
      if (sub_20B911EF0(v8))
        sub_20B919E2C(a1[6]);
    }
  }
}

void sub_20B967138(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  sub_20B8EDA68(v2);
  v3 = atomic_load((unsigned int *)(v2 + 40));
  if (v3 == 2 && *(_QWORD *)v2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    sub_20B8EDA68(v4);
    v5 = atomic_load((unsigned int *)(v4 + 40));
    if (v5 == 2)
      v6 = *(_QWORD *)v4;
    else
      v6 = 0;
    sub_20BA26C6C(v6);
  }
}

CFIndex sub_20B9671AC(uint64_t *a1, CFStringRef theString, uint64_t a3)
{
  CFIndex result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (theString)
  {
    result = CFStringGetLength(theString);
    if (!result)
      return result;
    v7 = *a1;
    sub_20B8EDA68(*a1);
    v8 = atomic_load((unsigned int *)(v7 + 40));
    if (v8 == 2 && *(_QWORD *)v7)
    {
      v9 = *a1;
      sub_20B8EDA68(v9);
      v10 = atomic_load((unsigned int *)(v9 + 40));
      if (v10 == 2)
        v11 = *(void ***)v9;
      else
        v11 = 0;
      v15 = 0;
      v12 = operator new(0x20uLL);
      *v12 = &off_24C46AB30;
      v12[1] = a3;
      v12[2] = theString;
      v12[3] = &v15;
      v17 = v12;
      sub_20BA276A4(v11, theString, (uint64_t)v16, 0xFFFFFFFFuLL, -INFINITY);
      v13 = v17;
      if (v17 == v16)
      {
        v14 = 4;
        v13 = v16;
      }
      else
      {
        if (!v17)
          return v15 != 0;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
      return v15 != 0;
    }
  }
  return 0;
}

void sub_20B9672EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B967324(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  void **v11;
  uint64_t v12;
  const __CFAllocator *v14;
  const void *v15;
  CFStringRef v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  CFTypeRef cf[2];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;
  CFRange v26;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  sub_20B8EDA68(v7);
  v8 = atomic_load((unsigned int *)(v7 + 40));
  if (v8 != 2 || !*(_QWORD *)v7)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  sub_20B8EDA68(v9);
  v10 = atomic_load((unsigned int *)(v9 + 40));
  if (v10 == 2)
    v11 = *(void ***)v9;
  else
    v11 = 0;
  v21 = 0;
  if (a4)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26.length = CFStringGetLength(a3) - 1;
    v26.location = 1;
    v15 = CFStringCreateWithSubstring(v14, a3, v26);
  }
  else
  {
    v15 = CFRetain(a3);
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  }
  cf[1] = v15;
  v16 = CFStringCreateWithFormat(v14, 0, CFSTR("%@%@"), v22, v15);
  cf[0] = v16;
  v17 = operator new(0x28uLL);
  *(_QWORD *)v17 = &off_24C46AC38;
  v17[8] = a4;
  *((_QWORD *)v17 + 2) = &v21;
  *((_QWORD *)v17 + 3) = &v22;
  *((_QWORD *)v17 + 4) = cf;
  v24 = v17;
  sub_20BA276A4(v11, v16, (uint64_t)v23, 0xFFFFFFFFuLL, -INFINITY);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_16;
  }
  if (v24)
  {
    v19 = 5;
LABEL_16:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  v12 = v21;
  if (cf[0])
    CFRelease(cf[0]);
  if (v15)
    CFRelease(v15);
  return v12;
}

void sub_20B9674F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B96756C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (sub_20B911EF0(v4))
        sub_20B919EA8(*(_QWORD *)(a1 + 48), a2);
    }
  }
}

void sub_20B9675B8(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (sub_20B911EF0(v4))
        sub_20B919FDC(*(_QWORD *)(a1 + 48), a2);
    }
  }
}

uint64_t sub_20B967604(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    v3 = result;
    result = *(_QWORD *)(v2 + 8);
    if (result)
    {
      result = sub_20B911EF0((_QWORD *)result);
      if ((_DWORD)result)
        return sub_20B91A244(*(_QWORD *)(v3 + 48), a2);
    }
  }
  return result;
}

unint64_t sub_20B967650(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    result = sub_20B911EF0((_QWORD *)result);
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      if (v4)
        return (*(_DWORD *)(v4 + 8) - 5) < 0x60;
      return 0;
    }
  }
  return result;
}

void sub_20B9676A8(uint64_t a1, __int16 a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v12;
  _QWORD v13[7];
  __int16 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  int v20;

  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v7 = *(_QWORD **)(v5 + 8);
    if (v7)
    {
      if (sub_20B911EF0(v7))
      {
        v20 = 0;
        v12 = *(_QWORD *)(a1 + 48);
        v13[0] = MEMORY[0x24BDAC760];
        v13[1] = 0x40000000;
        v13[2] = sub_20B967760;
        v13[3] = &unk_24C46C4B8;
        v13[4] = a1;
        *(double *)&v13[5] = a4;
        *(double *)&v13[6] = a5;
        v14 = a2;
        v15 = a3;
        v16 = &v20;
        v17 = a1;
        v18 = 0;
        v19 = a2;
        sub_20B91A390(v12, (uint64_t)v13);
      }
    }
  }
}

_BYTE *sub_20B967760(_BYTE *result, const __CFString *a2, _BYTE *a3, float a4)
{
  _BYTE *v6;
  uint64_t *v7;
  double v8;
  char *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((double *)result + 5) <= a4)
  {
    v6 = result;
    v7 = (uint64_t *)*((_QWORD *)result + 4);
    v8 = *((double *)result + 6);
    v9 = (char *)operator new(0x28uLL);
    *(_QWORD *)v9 = &off_24C46ABE0;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v6 + 56);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v6 + 72);
    v12 = v9;
    sub_20B966398(v7, a2, 0, 4u, (uint64_t)v11, 0, v8);
    result = v12;
    if (v12 == v11)
    {
      v10 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        goto LABEL_7;
      v10 = 5;
    }
    result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
LABEL_7:
    if (*((_DWORD *)v6 + 22) < (int)*((unsigned __int16 *)v6 + 46))
      return result;
  }
  *a3 = 1;
  return result;
}

void sub_20B967878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

const void ***sub_20B9678B0(const void ***result)
{
  const void **v1;
  const void ***v2;

  v1 = result[6];
  if (v1)
  {
    v2 = result;
    result = (const void ***)v1[1];
    if (result)
    {
      result = (const void ***)sub_20B911EF0(result);
      if ((_DWORD)result)
        return sub_20B919E2C((uint64_t)v2[6]);
    }
  }
  return result;
}

uint64_t sub_20B9678F4(uint64_t a1, const void *a2, CFTypeRef cf, double a4)
{
  _QWORD *v6;
  CFTypeRef v7;
  CFTypeRef v8;

  *(double *)a1 = a4;
  v6 = (_QWORD *)(a1 + 8);
  if (cf)
    v7 = CFRetain(cf);
  else
    v7 = 0;
  *v6 = v7;
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

void sub_20B967958(_Unwind_Exception *a1)
{
  const void **v1;

  sub_20B87E150(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B967970(uint64_t a1)
{
  sub_20B9679A8((const void **)(a1 + 16), 0);
  sub_20B87E150((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20B9679A8(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B9679DC(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {
    sub_20B9679A8((const void **)(i - 8), 0);
    sub_20B87E150((const void **)(i - 16), 0);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20B967A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef cf;

  if (a3 >= 2)
  {
    v5 = (unint64_t)(a3 - 2) >> 1;
    v6 = (const void **)(a1 + 24 * v5);
    v7 = (const void **)(a2 - 24);
    if (sub_20B967B60((uint64_t)v6, a2 - 24))
    {
      sub_20B9678F4((uint64_t)&v13, *(const void **)(a2 - 8), *(CFTypeRef *)(a2 - 16), *(double *)(a2 - 24));
      do
      {
        v8 = v6;
        *v7 = *v6;
        v9 = v6[2];
        v6[2] = 0;
        sub_20B9679A8(v7 + 2, v9);
        v10 = v6[1];
        v6[1] = 0;
        sub_20B87E150(v7 + 1, v10);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (const void **)(a1 + 24 * v5);
        v7 = v8;
      }
      while (sub_20B967B60((uint64_t)v6, (uint64_t)&v13));
      *v8 = v13;
      v11 = cf;
      cf = 0;
      sub_20B9679A8(v8 + 2, v11);
      v12 = v14;
      v14 = 0;
      sub_20B87E150(v8 + 1, v12);
      if (cf)
        CFRelease(cf);
      cf = 0;
      if (v14)
        CFRelease(v14);
    }
  }
}

void sub_20B967B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B967970((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B967B60(uint64_t a1, uint64_t a2)
{
  unint64_t Length;
  unint64_t v5;
  double v6;
  double v7;

  Length = CFStringGetLength(*(CFStringRef *)(a1 + 8));
  v5 = CFStringGetLength(*(CFStringRef *)(a2 + 8));
  v6 = *(double *)a1;
  v7 = *(double *)a2;
  if (Length == v5 || vabdd_f64(v6, v7) > 0.3)
    return v6 > v7;
  else
    return Length < v5;
}

void sub_20B967BD8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B967BEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C46AB88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20B967C34(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C46AB88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B967C64(uint64_t a1)
{
  const __CFString *v1;
  _QWORD v2[4];

  v2[0] = 0;
  v2[1] = v2;
  v2[2] = 0x2000000000;
  v2[3] = *(_QWORD *)(a1 + 24);
  v1 = (const __CFString *)LXCursorCopyTraversedCharacters();
  CFStringGetLength(v1);
  LXCursorEnumerateEntries();
  CFRelease(v1);
  _Block_object_dispose(v2, 8);
}

void sub_20B967D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B967D58(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EFD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B967D94()
{
  return &unk_24C45EFD0;
}

void sub_20B967DA0(uint64_t a1, const void *a2)
{
  char MetaFlags;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t Length;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  _QWORD v35[3];
  char v36;
  __int128 v37;
  __int128 v38;

  MetaFlags = LXEntryGetMetaFlags();
  if ((MetaFlags & 2) == 0)
  {
    if ((MetaFlags & 0x84) != 0)
    {
      if (*(_BYTE *)(a1 + 66))
        return;
      v5 = -1.0;
    }
    else
    {
      v5 = 0.0;
    }
    LXEntryGetProbability();
    v7 = v5 + v6;
    if (v7 >= *(double *)(a1 + 40))
    {
      v8 = *(_QWORD *)(a1 + 48);
      if (v7 >= -3.8 || v8 >= 3)
      {
        v10 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v11 = *v10;
        v12 = v10[1];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v10) >> 3) >= *(unsigned __int16 *)(a1 + 64))
        {
          v13 = *(double *)v11;
          Length = CFStringGetLength(*(CFStringRef *)(v11 + 8));
          if (v8 == Length || vabdd_f64(v7, v13) > 0.3)
          {
            if (v7 <= v13)
              return;
          }
          else if (v8 >= Length)
          {
            return;
          }
          v10 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
          v12 = v10[1];
        }
        v15 = v10[2];
        if (v12 >= v15)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v10) >> 3);
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v10) >> 3);
          v19 = 2 * v18;
          if (2 * v18 <= v17 + 1)
            v19 = v17 + 1;
          if (v18 >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v19;
          v34 = v10 + 2;
          if (v20)
          {
            if (v20 > 0xAAAAAAAAAAAAAAALL)
              sub_20B800BC0();
            v21 = (char *)operator new(24 * v20);
          }
          else
          {
            v21 = 0;
          }
          v30 = v21;
          v31 = &v21[24 * v17];
          v32 = (uint64_t)v31;
          v33 = &v21[24 * v20];
          sub_20B9678F4((uint64_t)v31, a2, *(CFTypeRef *)(a1 + 56), v7);
          v22 = (uint64_t)v31;
          v32 = (uint64_t)(v31 + 24);
          v24 = *v10;
          v23 = v10[1];
          *(_QWORD *)&v38 = v31;
          *((_QWORD *)&v38 + 1) = v31;
          v37 = v38;
          v35[0] = v10 + 2;
          v35[1] = &v37;
          v35[2] = &v38;
          v36 = 0;
          while (v23 != v24)
          {
            v25 = *(double *)(v23 - 24);
            v23 -= 24;
            sub_20B9678F4(v22 - 24, *(const void **)(v23 + 16), *(CFTypeRef *)(v23 + 8), v25);
            v22 = *((_QWORD *)&v38 + 1) - 24;
            *((_QWORD *)&v38 + 1) -= 24;
          }
          v36 = 1;
          sub_20B968114((uint64_t)v35);
          v26 = *v10;
          *v10 = v22;
          v30 = (char *)v26;
          v31 = (char *)v26;
          v27 = v10[1];
          v16 = v32;
          v10[1] = v32;
          v32 = v27;
          v28 = v10[2];
          v10[2] = (uint64_t)v33;
          v33 = (char *)v28;
          sub_20B9680AC((uint64_t)&v30);
        }
        else
        {
          sub_20B9678F4(v12, a2, *(CFTypeRef *)(a1 + 56), v7);
          v16 = v12 + 24;
          v10[1] = v12 + 24;
        }
        v10[1] = v16;
        sub_20B967A3C(*v10, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - *v10) >> 3));
        v29 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        if (0xAAAAAAAAAAAAAAABLL * ((v29[1] - *v29) >> 3) > *(unsigned __int16 *)(a1 + 64))
          sub_20B966C90(v29);
      }
    }
  }
}

void sub_20B96807C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9680AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9680AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B9679A8((const void **)(i - 8), 0);
    sub_20B87E150((const void **)(i - 16), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B968114(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_20B9679A8((const void **)(v3 + 16), 0);
      sub_20B87E150((const void **)(v3 + 8), 0);
      v3 += 24;
    }
  }
  return a1;
}

void sub_20B96817C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B968190(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46AB30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9681D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AB30;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9681F8()
{
  return LXCursorEnumerateEntries();
}

uint64_t sub_20B96825C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EFC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B968298()
{
  return &unk_24C45EFC0;
}

void sub_20B9682A4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  BOOL *v5;
  const __CFString *v6;

  v5 = *(BOOL **)(a1 + 56);
  if ((*(_QWORD *)(a1 + 32) & LXEntryGetMetaFlags()) != 0)
  {
    v6 = (const __CFString *)LXEntryCopyString();
    *v5 = CFStringCompare(v6, *(CFStringRef *)(a1 + 40), 0) == kCFCompareEqualTo;
    if (v6)
      CFRelease(v6);
  }
  if (*v5)
  {
    if (a3)
      *a3 = 1;
    **(_BYTE **)(a1 + 48) = 1;
  }
}

void sub_20B96834C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B968368()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B96837C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46AC38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9683BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AC38;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9683E4()
{
  return LXCursorEnumerateEntries();
}

uint64_t sub_20B968450(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EFF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B96848C()
{
  return &unk_24C45EFF0;
}

void sub_20B968498(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v5;
  CFIndex Length;
  int v7;
  CFIndex v8;
  CFRange v9;

  v5 = (const __CFString *)LXEntryCopyString();
  if (CFStringHasPrefix(v5, **(CFStringRef **)(a1 + 32)))
  {
    Length = CFStringGetLength(**(CFStringRef **)(a1 + 32));
    v7 = *(unsigned __int8 *)(a1 + 56);
    v8 = CFStringGetLength(v5);
    if (v7)
      v9.location = Length;
    else
      v9.location = Length + 1;
    v9.length = v8 - v9.location;
    **(_QWORD **)(a1 + 40) = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v9);
    *a3 = 1;
    **(_BYTE **)(a1 + 48) = 1;
  }
  if (v5)
    CFRelease(v5);
}

void sub_20B968558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B968578()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B96858C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46ABE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9685CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46ABE0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9685F4(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, uint64_t a5)
{
  uint64_t result;

  result = sub_20B966EAC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *a2, *a3, a5, *a4);
  ++**(_DWORD **)(a1 + 24);
  return result;
}

uint64_t sub_20B96863C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EFE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B968678()
{
  return &unk_24C45EFE0;
}

uint64_t sub_20B968684(int a1, void *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  const __CFString *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  int CharacterAtIndex;
  uint64_t v17;
  __int16 *v18;
  BOOL v19;
  int v20;
  int v21;
  __CFString **v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v5 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5), (_DWORD)result))
      {
        (*(void (**)(unsigned __int16 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 432))(&v23, v5, 1);
        v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
        v8 = objc_msgSend_dictionaryWithCapacity_(MEMORY[0x24BDBCED8], v7, 0);
        v10 = v23;
        v11 = v24;
        if (v23 == v24)
        {
          v12 = 0;
          if (!v23)
          {
LABEL_32:
            if (v12)
            {
              objc_msgSend_addEntriesFromDictionary_(a2, v9, (uint64_t)v12);
              return 1;
            }
            return 0;
          }
LABEL_31:
          v24 = v10;
          operator delete(v10);
          goto LABEL_32;
        }
        v12 = (void *)v8;
        v13 = 0;
        v14 = 0;
        LODWORD(v15) = 0;
        do
        {
          v15 = *v10 + (uint64_t)(int)v15;
          CharacterAtIndex = CFStringGetCharacterAtIndex(v6, v15 - 1);
          v17 = 0;
          while ((unsigned __int16)word_20BA94D80[v17] != CharacterAtIndex)
          {
            if (++v17 == 5)
            {
              v18 = 0;
              goto LABEL_13;
            }
          }
          v18 = &word_20BA94D80[v17];
LABEL_13:
          if (v18)
            v19 = (char *)v18 - (char *)word_20BA94D80 == -2;
          else
            v19 = 1;
          v20 = v19;
          v14 |= v20 ^ 1;
          v13 |= v20;
          ++v10;
        }
        while (v10 != v11);
        v21 = v13 ^ 1;
        if (((v14 ^ 1) & 1) != 0 || (v21 & 1) != 0)
        {
          if (((v14 ^ 1 | v13) & 1) != 0)
          {
            if (((v14 | v21) & 1) != 0)
              goto LABEL_30;
            v22 = &off_24C49C700;
          }
          else
          {
            v22 = &off_24C49C6F8;
          }
        }
        else
        {
          v22 = &off_24C49C708;
        }
        objc_msgSend_setObject_forKeyedSubscript_(v12, v9, MEMORY[0x24BDBD1C8], *v22);
LABEL_30:
        v10 = v23;
        if (!v23)
          goto LABEL_32;
        goto LABEL_31;
      }
    }
  }
  return result;
}

void sub_20B968880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9688A4()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t *sub_20B9688B8(uint64_t *a1, unsigned int a2)
{
  __CFDictionary *Mutable;
  CFLocaleRef v5;

  *a1 = 0;
  a1[1] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = sub_20B8D0FCC(a2);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEB8], v5);
  if (a2 - 1 <= 1)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEC8], (const void *)*MEMORY[0x24BDBD270]);
  *a1 = LMLexiconCreate();
  CFRelease(Mutable);
  CFRelease(v5);
  if (*a1)
    a1[1] = LMLexiconGetRootCursor();
  return a1;
}

_QWORD *sub_20B96898C(_QWORD *a1)
{
  if (*a1)
    LMLexiconRelease();
  return a1;
}

uint64_t sub_20B9689BC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    LMLexiconResetCursors();
    result = LMLexiconGetRootCursor();
    a1[1] = result;
  }
  return result;
}

uint64_t sub_20B9689F0(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    result = LMLexiconGetCursorByAdvancingWithCharacters();
    if (result)
    {
      result = LMLexiconCursorHasEntries();
      if ((_DWORD)result)
      {
        if (a4)
          *a4 = LMLexiconCursorFirstTokenID();
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20B968A64(uint64_t *a1, const __CFString *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  CFIndex v9;

  v9 = 0;
  sub_20B8D0624(a2, &v9, &v8);
  v5 = v8;
  if (!v9)
  {
    v6 = 0;
    result = 0;
    if (!v8)
      return result;
    goto LABEL_5;
  }
  if (v8)
  {
    v6 = sub_20B9689F0(a1, v8, v9, a3);
LABEL_5:
    MEMORY[0x20BD39C80](v5, 0x1000C80BDFB0063);
    return v6;
  }
  return 0;
}

void sub_20B968B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t sub_20B968B24(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;
  uint64_t HasEntries;
  uint64_t result;
  uint64_t v5;
  CFIndex v6;

  if (!a2)
    return 0;
  v6 = 0;
  sub_20B8D0624(a2, &v6, &v5);
  v2 = v5;
  if (!v6)
  {
    HasEntries = 0;
    result = 0;
    if (!v5)
      return result;
    goto LABEL_7;
  }
  if (!v5)
    return 0;
  LMLexiconGetCursorByAdvancingWithCharacters();
  HasEntries = LMLexiconCursorHasEntries();
LABEL_7:
  MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  return HasEntries;
}

void sub_20B968BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

BOOL sub_20B968BE8(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, _QWORD *a5, unint64_t a6, unint64_t *a7, uint64_t a8, uint8x8_t a9, int a10, uint64_t a11)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  uint8x8_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint8x8_t v61;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;

  v17 = a2 & 3;
  switch(v17)
  {
    case 1:
      v22 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
      if (!a4)
      {
        v23 = v22[1];
        if (a10 && v23 != 0)
        {
          if (*a5)
          {
            --*a5;
          }
          else if (a6)
          {
            v63 = *a7;
            v64 = a8 + 24 * *a7;
            *(_WORD *)(v64 + 12) = (_WORD)a3 - a11;
            *a7 = v63 + 1;
            *(_DWORD *)(v64 + 8) = v23;
            if (v63 + 1 >= a6)
              return 1;
          }
          else
          {
            ++*a7;
          }
        }
      }
      v25 = (char *)(v22 + 2);
      v26 = (unint64_t)v22 + *v22 + 4;
      if ((unint64_t)(v22 + 2) < v26)
      {
        v69 = (_WORD)a3 - a11;
        do
        {
          v29 = *v25;
          v27 = v25 + 1;
          v28 = v29;
          v30 = v29 >= a4;
          v31 = v29 > a4;
          if (!a10)
            v30 = v31;
          if (v30)
          {
            v32 = memcmp(v27, a3, (int)a4);
            if (v32 > 0)
              return 0;
            if (!v32)
            {
              if (*a5)
              {
                --*a5;
              }
              else if (a6)
              {
                v33 = *a7;
                v34 = a8 + 24 * *a7;
                *(_WORD *)(v34 + 12) = v69 + v28;
                v35 = *(_DWORD *)&v27[v28];
                *a7 = ++v33;
                *(_DWORD *)(v34 + 8) = v35;
                if (v33 >= a6)
                  return 1;
              }
              else
              {
                ++*a7;
              }
            }
          }
          v25 = &v27[v28 + 4];
        }
        while ((unint64_t)v25 < v26);
      }
      return 0;
    case 2:
      v36 = *(_QWORD *)(a1 + 8);
      v37 = (a2 - 2);
      v38 = (int *)(v36 + v37);
      if (a4)
      {
        v39 = *a3;
        v40 = v39 >> 5;
        v41 = v38[(v39 >> 5) + 1];
        if (((v41 >> v39) & 1) == 0)
          return 0;
        v42 = v39 & 0x1F;
        if (v39 >= 0x20)
        {
          v43 = 0;
          if (v40 <= 1)
            v40 = 1;
          else
            v40 = v40;
          v59 = (unsigned int *)(v37 + v36 + 4);
          do
          {
            v60 = *v59++;
            a9 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
            a9.i16[0] = vaddlv_u8(a9);
            v43 += a9.i32[0];
            --v40;
          }
          while (v40);
        }
        else
        {
          v43 = 0;
        }
        a9.i32[0] = v41 & ~(-1 << v42);
        v61 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
        v61.i16[0] = vaddlv_u8(v61);
        v21 = sub_20B968BE8(a1, v38[v43 + v61.i32[0] + 10], a3 + 1, a4 - 1, a5, a6, a7, a8, 0, a11);
        return v21 != 0;
      }
      if (a10)
      {
        v49 = *v38;
        if (*v38)
        {
          if (*a5)
          {
            --*a5;
          }
          else if (a6)
          {
            v67 = *a7;
            v68 = a8 + 24 * *a7;
            *(_WORD *)(v68 + 12) = (_WORD)a3 - a11;
            *a7 = v67 + 1;
            *(_DWORD *)(v68 + 8) = v49;
            if (v67 + 1 >= a6)
              return 1;
          }
          else
          {
            ++*a7;
          }
        }
      }
      v50 = 0;
      v51 = a3 + 1;
      v52 = v37 + v36 + 4;
      v48 = 1;
      while (1)
      {
        v53 = v50 >> 5 <= 1 ? 1 : v50 >> 5;
        v54 = v38[(v50 >> 5) + 1];
        if (((v54 >> v50) & 1) != 0)
        {
          if ((v50 & 0xE0) != 0)
          {
            v55 = 0;
            v56 = (unsigned int *)v52;
            do
            {
              v57 = *v56++;
              a9 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
              a9.i16[0] = vaddlv_u8(a9);
              v55 += a9.i32[0];
              --v53;
            }
            while (v53);
          }
          else
          {
            v55 = 0;
          }
          a9.i32[0] = v54 & ~(-1 << (v50 & 0x1F));
          v58 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
          v58.i16[0] = vaddlv_u8(v58);
          if (sub_20B968BE8(a1, v38[v55 + v58.i32[0] + 10], v51, 0, a5, a6, a7, a8, 1, a11))break;
        }
        if ((_DWORD)++v50 == 256)
          return 0;
      }
      break;
    case 3:
      v18 = *(_QWORD *)(a1 + 8);
      v19 = (a2 - 3);
      v20 = (int *)(v18 + v19);
      if (a4)
      {
        v21 = sub_20B968BE8(a1, v20[*a3 + 1], a3 + 1, a4 - 1, a5, a6, a7, a8, 0, a11);
        return v21 != 0;
      }
      if (a10)
      {
        v44 = *v20;
        if (v44)
        {
          if (*a5)
          {
            --*a5;
          }
          else if (a6)
          {
            v65 = *a7;
            v66 = a8 + 24 * *a7;
            *(_WORD *)(v66 + 12) = (_WORD)a3 - a11;
            *a7 = v65 + 1;
            *(_DWORD *)(v66 + 8) = v44;
            if (v65 + 1 >= a6)
              return 1;
          }
          else
          {
            ++*a7;
          }
        }
      }
      v45 = 0;
      v46 = a3 + 1;
      v47 = v19 + v18 + 4;
      v48 = 1;
      while (!sub_20B968BE8(a1, *(unsigned int *)(v47 + v45), v46, 0, a5, a6, a7, a8, 1, a11))
      {
        v45 += 4;
        if (v45 == 1024)
          return 0;
      }
      break;
    default:
      return 0;
  }
  return v48;
}

float sub_20B969098(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  v8 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  if (v8)
  {
    LODWORD(v9) = 0;
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    *((_QWORD *)v8 + 7) = a1;
    *((_QWORD *)v8 + 8) = a2;
    *((_QWORD *)v8 + 1) = a3;
    *((_QWORD *)v8 + 5) = a4;
    *((_QWORD *)v8 + 6) = 0;
    if (a3)
    {
      if (a4 >= 0x18)
      {
        *(_DWORD *)v8 = *(_DWORD *)(a3 + 4);
        *((_QWORD *)v8 + 2) = a3 + *(unsigned int *)(a3 + 12);
        v9 = *(_QWORD *)(a3 + 16);
        *(_QWORD *)&v10 = v9;
        *((_QWORD *)&v10 + 1) = HIDWORD(v9);
        *(_OWORD *)((char *)v8 + 24) = v10;
      }
    }
  }
  return *(float *)&v9;
}

void sub_20B969128(void **a1)
{
  if (a1)
  {
    if (*((_DWORD *)a1 + 12))
      free(a1[1]);
    free(a1);
  }
}

uint64_t sub_20B969160(uint64_t a1, unsigned __int8 *__s2, unsigned int a3, uint8x8_t a4)
{
  unsigned int *v6;
  unsigned int v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  size_t v26;
  int v27;
  int v28;

  v6 = (unsigned int *)a1;
  while (1)
  {
    v7 = *v6;
    v8 = v7 & 3;
    if (v8 != 2)
      break;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v7 - 2;
    v9 = (char *)(v10 + v11);
    if (!a3)
      return *(unsigned int *)v9;
    v12 = *__s2;
    v13 = v12 >> 5;
    v14 = *(_DWORD *)&v9[4 * (v12 >> 5) + 4];
    if (((v14 >> v12) & 1) == 0)
      return 0;
    if (v12 >= 0x20)
    {
      v15 = 0;
      if (v13 <= 1)
        v13 = 1;
      else
        v13 = v13;
      v16 = (unsigned int *)(v10 + v11 + 4);
      do
      {
        v17 = *v16++;
        a4 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        a4.i16[0] = vaddlv_u8(a4);
        v15 += a4.i32[0];
        --v13;
      }
      while (v13);
    }
    else
    {
      v15 = 0;
    }
    a4.i32[0] = v14 & ~(-1 << (v12 & 0x1F));
    a4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
    a4.i16[0] = vaddlv_u8(a4);
    v6 = (unsigned int *)&v9[4 * (v15 + a4.i32[0]) + 40];
LABEL_16:
    --a3;
    ++__s2;
  }
  if (v8 == 3)
  {
    v9 = (char *)(*(_QWORD *)(a1 + 8) + v7 - 3);
    if (!a3)
      return *(unsigned int *)v9;
    v6 = (unsigned int *)&v9[4 * *__s2 + 4];
    goto LABEL_16;
  }
  if (v8 != 1)
    return 0;
  v18 = (_DWORD *)(*(_QWORD *)(a1 + 16) + v7 - 1);
  v9 = (char *)(v18 + 1);
  if (a3)
  {
    v20 = *v18;
    v19 = (unsigned __int8 *)(v18 + 2);
    v21 = (unsigned __int8 *)&v9[v20];
    while (v19 < v21)
    {
      v24 = *v19;
      v22 = (char *)(v19 + 1);
      v23 = v24;
      v25 = v24 - a3;
      if (v24 >= a3)
        v26 = a3;
      else
        v26 = v23;
      v27 = memcmp(v22, __s2, v26);
      if (v27)
        v28 = v27;
      else
        v28 = v25;
      if ((v28 & 0x80000000) == 0)
      {
        if (v28)
          return 0;
        v9 = &v22[v23];
        return *(unsigned int *)v9;
      }
      v19 = (unsigned __int8 *)&v22[v23 + 4];
    }
    return 0;
  }
  return *(unsigned int *)v9;
}

uint64_t sub_20B9692E0(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, unint64_t a5, unint64_t *a6, uint64_t a7, __int16 a8)
{
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  unint64_t v24;
  __int16 v25;
  char *v26;
  size_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  uint8x8_t v44;

  v13 = a2 & 3;
  if (v13 == 1)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
    v18 = v17 + 1;
    v19 = v17[1];
    if (v19)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4)
          return 0;
        goto LABEL_13;
      }
      v20 = *a6;
      v21 = a7 + 24 * *a6;
      *(_WORD *)(v21 + 12) = (_WORD)a3 - a8;
      *a6 = v20 + 1;
      *(_DWORD *)(v21 + 8) = v19;
      if (v20 + 1 >= a5)
        return 1;
    }
    if (!a4)
      return 0;
LABEL_13:
    v23 = *v17;
    v22 = (char *)(v17 + 2);
    v24 = (unint64_t)v18 + v23;
    if ((unint64_t)v22 < v24)
    {
      v25 = (_WORD)a3 - a8;
      do
      {
        v28 = *v22;
        v26 = v22 + 1;
        v27 = v28;
        if (v28 <= a4)
        {
          v29 = memcmp(v26, a3, v27);
          if (v29 > 0)
            return 0;
          if (!v29)
          {
            if (a5)
            {
              v30 = *a6;
              v31 = a7 + 24 * *a6;
              *(_WORD *)(v31 + 12) = v25 + v27;
              v32 = *(_DWORD *)&v26[v27];
              *a6 = ++v30;
              *(_DWORD *)(v31 + 8) = v32;
              if (v30 >= a5)
                return 1;
            }
            else
            {
              ++*a6;
            }
          }
        }
        v22 = &v26[v27 + 4];
      }
      while ((unint64_t)v22 < v24);
    }
    return 0;
  }
  if (v13 == 2)
  {
    v33 = *(_QWORD *)(a1 + 8);
    v34 = (a2 - 2);
    v35 = *(_DWORD *)(v33 + v34);
    if (v35)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4)
          return 0;
LABEL_28:
        v38 = *a3;
        v39 = v38 >> 5;
        if (((*(_DWORD *)(v33 + v34 + 4 * (v38 >> 5) + 4) >> v38) & 1) == 0)
          return 0;
        if (v38 >= 0x20)
        {
          v41 = 0;
          if (v39 <= 1)
            v39 = 1;
          else
            v39 = v39;
          v42 = (unsigned int *)(v34 + v33 + 4);
          do
          {
            v43 = *v42++;
            v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
            v44.i16[0] = vaddlv_u8(v44);
            v41 += v44.i32[0];
            --v39;
          }
          while (v39);
        }
LABEL_42:
        result = sub_20B9692E0();
        if (!(_DWORD)result)
          return result;
        return 1;
      }
      v36 = *a6;
      v37 = a7 + 24 * *a6;
      *(_WORD *)(v37 + 12) = (_WORD)a3 - a8;
      *a6 = v36 + 1;
      *(_DWORD *)(v37 + 8) = v35;
      if (v36 + 1 >= a5)
        return 1;
    }
    if (!a4)
      return 0;
    goto LABEL_28;
  }
  if (v13 != 3)
    return 0;
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + (a2 - 3));
  if (!v14)
  {
LABEL_7:
    if (a4)
      goto LABEL_42;
    return 0;
  }
  if (!a5)
  {
    ++*a6;
    if (!a4)
      return 0;
    goto LABEL_42;
  }
  v15 = *a6;
  v16 = a7 + 24 * *a6;
  *(_WORD *)(v16 + 12) = (_WORD)a3 - a8;
  *a6 = v15 + 1;
  *(_DWORD *)(v16 + 8) = v14;
  if (v15 + 1 < a5)
    goto LABEL_7;
  return 1;
}

BOOL sub_20B9695A8(_QWORD *a1)
{
  _QWORD *v2;
  const char *v3;
  int v4;
  int v5;
  _DWORD *v6;
  off_t st_size;
  stat v9;

  v2 = (_QWORD *)sub_20B9AE60C();
  v3 = (const char *)sub_20B9AE738(v2, 2, off_254729648[0], off_2547295E8[0], 0);
  if (v3[23] < 0)
  {
    if (*((_QWORD *)v3 + 1) > 0x400uLL)
      return 0;
    v3 = *(const char **)v3;
  }
  v4 = open(v3, 0);
  if (v4 == -1)
    return 0;
  v5 = v4;
  if (fstat(v4, &v9) != -1)
  {
    v6 = mmap(0, v9.st_size, 1, 1, v5, 0);
    if (v6 != (_DWORD *)-1 && *v6 == -894645588)
    {
      st_size = v9.st_size;
      *a1 = v6;
      a1[1] = st_size;
    }
  }
  close(v5);
  return *a1 != 0;
}

uint64_t sub_20B96968C(uint64_t *a1, _BYTE *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL i;

  LOBYTE(v3) = 0;
  if (a2 && a3 - 6 >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v4 = *a1;
    if (!*a1)
    {
      LOBYTE(v3) = 0;
      return v3 & 1;
    }
    v3 = a1[1];
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      while (1)
      {
        if (v5)
        {
          v8 = a2[v5];
          if (v8 == 122)
          {
            v10 = 1;
LABEL_27:
            LOBYTE(v3) = v6 | v10;
            return v3 & 1;
          }
          LOBYTE(v9) = v8 - 97;
          if ((v8 - 97) > 0x19)
            goto LABEL_25;
        }
        else
        {
          v9 = *a2 - 97;
          if (v9 > 0x19)
            goto LABEL_25;
          v7 = (unsigned __int16 *)(v4 + *(unsigned int *)(v4 + 4 + 4 * (*a2 - 97)));
        }
        v10 = v9;
        v11 = *v7;
        v12 = (v11 >> 10) & 0x1F;
        v13 = v11 & 0x3FF;
        for (i = v12 >= v9; !i && v13 != 0; i = v12 >= v9)
        {
          v7 += v13;
          v11 = *v7;
          v12 = (v11 >> 10) & 0x1F;
          v13 = v11 & 0x3FF;
        }
        if (v12 != v9)
        {
LABEL_25:
          v10 = 0;
          goto LABEL_27;
        }
        if (a3 - 1 > v5)
        {
          if ((v11 & 0x8000) == 0)
            goto LABEL_25;
          ++v7;
        }
        v6 = ++v5 >= a3;
        if (v5 == a3)
          goto LABEL_27;
      }
    }
  }
  return v3 & 1;
}

void sub_20B969780(CFStringRef theString@<X0>, const __CFURL *a2@<X1>, const __CFString *a3@<X2>, _QWORD *a4@<X8>)
{
  const __CFString *Copy;
  const __CFURL *v7;
  const __CFURL *v8;

  if (!theString)
  {
    v7 = (const __CFURL *)sub_20B8CF134(a2);
    if (!v7)
      goto LABEL_7;
    v8 = v7;
    Copy = sub_20B8CFF8C(v7, a3);
    CFRelease(v8);
    if (!Copy)
      goto LABEL_7;
LABEL_6:
    sub_20B8D1C98(Copy, a4);
    CFRelease(Copy);
    return;
  }
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
  if (Copy)
    goto LABEL_6;
LABEL_7:
  sub_20B80BBD0(a4, (char *)&unk_20BA71DE6);
}

void sub_20B969828(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B969844(unsigned int a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;

  v4 = a1 >> 18;
  v5 = a1 >> 5;
  v6 = a1 >> 8;
  v7 = sub_20B9698DC(a1);
  if ((a1 & 0x80) != 0)
    v8 = 802;
  else
    v8 = 34;
  v9 = (2 * a1) & 0x400 | ((v6 & 1) << 12) | v8;
  if (((a2 | v7) & (a1 >> 4)) != 0)
    v9 |= 0x80u;
  v10 = (a1 >> 6) & 0x40000 | ((v5 & 1) << 6) | v6 & 0x20000 | ((v4 & 1) << 20) | v9;
  if (v7)
    return v10 | 0x80000;
  else
    return v10;
}

uint64_t sub_20B9698DC(unsigned int a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25472D278);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472D278))
  {
    qword_25472D270 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472D278);
  }
  if (*(_BYTE *)qword_25472D270)
    return (a1 >> 26) & 1;
  else
    return 1;
}

void sub_20B969948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D278);
  _Unwind_Resume(a1);
}

uint64_t sub_20B969960(unsigned int a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;

  v4 = a1 >> 18;
  v5 = a1 >> 8;
  v6 = sub_20B9698DC(a1);
  if ((a1 & 0x80) != 0)
    v7 = 800;
  else
    v7 = 32;
  v8 = (2 * a1) & 0x400 | ((v5 & 1) << 12) | v7;
  if (((a2 | v6) & (a1 >> 4)) != 0)
    v8 |= 0x80u;
  v9 = (2 * a1) & 0x44 | (a1 >> 6) & 0x40000 | v5 & 0x20000 | ((v4 & 1) << 20) | v8;
  if (v6)
    return v9 | 0x80000;
  else
    return v9;
}

uint64_t sub_20B9699F4(const UniChar *a1, CFIndex a2, uint64_t a3)
{
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v11;
  CFMutableStringRef Mutable;
  const __CFString *v13;
  CFIndex Length;
  CFIndex v15;
  CFIndex v16;
  const __CFString *v17;
  CFStringRef v18;
  __int16 v19;
  __int16 v20;
  const __CFString *v21;
  CFIndex v22;
  __int16 __key;
  CFRange v24;

  v6 = atomic_load((unsigned __int8 *)&qword_25472BCE0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472BCE0))
  {
    sub_20B8B2334(0);
    __cxa_guard_release(&qword_25472BCE0);
  }
  if (!a3)
    return 0;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3))
    return 0;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3))
    return 0;
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 304))(a3);
  if (*v7 == v7[1])
    return 0;
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 304))(a3) + 8);
  if (*(_BYTE *)(v8 - 2) == 1)
    return 0;
  __key = *(_WORD *)(v8 - 8);
  if (bsearch(&__key, (const void *)qword_25472C9C0, *(size_t *)algn_25472C9C8, 2uLL, (int (__cdecl *)(const void *, const void *))sub_20B8B2A00))
  {
    return 0;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v13 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
  Length = CFStringGetLength(v13);
  v15 = Length;
  if (Length >= *(unsigned __int16 *)(v8 - 14))
    v16 = *(unsigned __int16 *)(v8 - 14);
  else
    v16 = Length;
  v17 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
  v24.location = v15 - v16;
  v24.length = v16;
  v18 = CFStringCreateWithSubstring(0, v17, v24);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@\tF"), v18);
  CFStringAppendCharacters(Mutable, word_20BA4EA28, 1);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n"));
  v19 = *(_WORD *)(v8 - 10);
  v20 = *(_WORD *)(v8 - 8);
  CFRelease(v18);
  v21 = CFStringCreateWithCharacters(v11, a1, a2);
  CFStringAppend(Mutable, v21);
  v22 = CFStringGetLength(Mutable);
  CFRelease(v21);
  CFStringAppendFormat(Mutable, 0, CFSTR("\nEOS"));
  v9 = operator new();
  sub_20B8FB098(v9, Mutable, 1, v22, v19, v20);
  CFRelease(Mutable);
  return v9;
}

void sub_20B969C4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472BCE0);
  _Unwind_Resume(a1);
}

BOOL sub_20B969C84(_QWORD *a1, BOOL *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  _BOOL8 result;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v14;

  v2 = a1[1];
  v3 = a1[2] - v2;
  if (!v3)
    return 0;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) - 1;
  v5 = *(_QWORD *)(a1[10] + 8 * v4);
  v6 = a1[4];
  if (v5 >= (a1[5] - v6) >> 1)
  {
    v7 = 0;
    v8 = 0;
    if (!a2)
      goto LABEL_9;
LABEL_8:
    *a2 = v7[v8 - 1] == 32;
    goto LABEL_9;
  }
  v7 = (unsigned __int16 *)(v6 + 2 * v5);
  v8 = *(unsigned __int16 *)(v2 + 40 * v4 + 24);
  if (!v6)
    v8 = 0;
  if (a2)
    goto LABEL_8;
LABEL_9:
  result = 0;
  if (v8 && v7)
  {
    v10 = *v7;
    if (v10 != 32 && (v10 & 0xFFFFFFDF) - 65 > 0x19)
      return 0;
    v11 = 1;
    while (v8 != v11)
    {
      v12 = v7[v11++];
      if (v12 != 32 && (v12 & 0xFFFFFFDF) - 65 >= 0x1A)
      {
        v14 = v11 - 1;
        return v14 >= v8;
      }
    }
    v14 = v8;
    return v14 >= v8;
  }
  return result;
}

uint64_t sub_20B969D6C(uint64_t *a1)
{
  _BOOL8 v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v12;
  unsigned __int16 *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  void *v25[2];
  unsigned __int8 v26;

  if (!a1[1] || *(_WORD *)*a1 == 32)
    return 0;
  v3 = 0;
  v4 = MEMORY[0x24BDAC740];
  do
  {
    v5 = *(unsigned __int16 *)(*a1 + 2 * v3);
    if (v5 <= 0x7F)
    {
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x40000) == 0)
        return 1;
    }
    else if (!__maskrune(v5, 0x40000uLL))
    {
      return 1;
    }
    ++v3;
    v6 = a1[1];
  }
  while (v3 < v6);
  if (v6)
  {
    v7 = (unsigned __int16 *)*a1;
    if (*a1)
    {
      v8 = *v7;
      v9 = v8 - 48;
      v10 = (unsigned __int16)(v8 + 240);
      if (v9 < 0xA || v10 < 0xA)
        return 1;
      v12 = 0;
      v13 = v7 + 1;
      while (v6 - 1 != v12)
      {
        v14 = v13[v12];
        v15 = v14 - 48;
        ++v12;
        v16 = (unsigned __int16)(v14 + 240);
        if (v15 < 0xA || v16 <= 9)
        {
          if (v12 >= v6)
            break;
          return 1;
        }
      }
    }
  }
  sub_20B87B938(a1, 0, 0, 0, v25);
  v18 = v26;
  if ((v26 & 0x80u) == 0)
    v19 = v25;
  else
    v19 = (void **)v25[0];
  if ((v26 & 0x80u) != 0)
    v18 = (unint64_t)v25[1];
  if (!v18)
  {
    v2 = 0;
    if (((char)v26 & 0x80000000) == 0)
      return v2;
LABEL_40:
    operator delete(v25[0]);
    return v2;
  }
  v20 = 2 * v18 - 2;
  do
  {
    v21 = *(unsigned __int16 *)v19;
    v19 = (void **)((char *)v19 + 2);
    v22 = (v21 & 0xFFFFFFDF) - 65;
    v2 = v22 < 0x1A;
    v23 = v22 < 0x1A || v20 == 0;
    v20 -= 2;
  }
  while (!v23);
  if ((char)v26 < 0)
    goto LABEL_40;
  return v2;
}

uint64_t sub_20B969EE8(unsigned int a1, uint64_t a2, _BYTE *a3)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  const void *v12;
  const void *v13;

  v4 = ~a1 & 2;
  if ((a1 & 1) != 0)
    v4 |= 0x2000000u;
  v5 = a1 & 0x1000000;
  if ((a1 & 0x100) != 0)
    v5 = 32;
  v6 = (a1 >> 12) & 4 | v5 | (a1 >> 2) & 0x11 | v4;
  if ((a1 & 8) == 0)
  {
    v7 = (a1 >> 12) & 4 | v5 | (a1 >> 2) & 0x11 | v4;
    goto LABEL_12;
  }
  v7 = v6 | 0x140;
  if ((a1 & 0x20000000) != 0 || !*a3)
  {
LABEL_12:
    if ((a1 & 0x20000000) != 0)
    {
      v8 = v7 | 0x4000000;
      v7 = v7 & 0xFBFFFFED | 0x4000002;
      if ((a1 & 1) == 0)
        v7 = v8;
      v9 = (*(_QWORD *)&a1 & 0x400002) != 2;
      v10 = *a3 == 0;
      if (!*a3)
        v9 = 1;
      if (!v9)
        v7 |= 0x2000002u;
      if ((v7 & 0x2000000) == 0)
        v10 = 1;
      if (!v10)
        v7 |= 0x10000000u;
    }
    goto LABEL_23;
  }
  if ((a1 & 0x100) == 0)
    v7 = v6 | 0x3C0;
LABEL_23:
  v11 = (a1 >> 19) & 8 | a1 & 0x40000000 | (a1 >> 26 << 31) | (a1 >> 7) & 0x100000 | v7;
  if (a2)
  {
    v12 = sub_20B88826C(a2, kMecabraContextOptionSuppressSensitiveWords);
    v13 = (const void *)*MEMORY[0x24BDBD270];
    if (v12 == (const void *)*MEMORY[0x24BDBD270])
      LODWORD(v11) = v11 | 0x20000000;
    if (sub_20B88826C(a2, kMecabraContextOptionHistorySimulation) == v13)
      LODWORD(v11) = v11 | 0x10000000;
    if (sub_20B88826C(a2, kMecabraContextOptionNoPruning) == v13)
      LODWORD(v11) = v11 | 0x800000;
    if (sub_20B88826C(a2, kMecabraContextOptionPrivateMode) == v13)
      return v11 | 0x40000;
    else
      return v11;
  }
  return v11;
}

uint64_t sub_20B96A0A4(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a6;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) == a6)
  {
LABEL_2:
    v12 = a5;
    return a3 == v12;
  }
  v14 = a3 - a4;
  v25 = a2;
  while (2)
  {
    v15 = a2 + 2 * a5;
LABEL_6:
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v6);
    if (result)
    {
      v16 = 0;
      v26 = v6;
      while (1)
      {
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 48))(a1, v6, v16);
        v19 = v18;
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 40))(a1, v6, v16);
        if (!v19)
        {
          v6 += v20;
          if ((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) != v6)
            goto LABEL_6;
          goto LABEL_2;
        }
        if (a3 <= a5)
        {
          v23 = 0;
          v12 = a5;
        }
        else
        {
          v27 = v20;
          v21 = 0;
          v12 = a5;
          while (1)
          {
            if (v14 <= a5)
            {
              v22 = *(unsigned __int16 *)(v17 + 2 * v21);
              if (v22 <= 0x7F)
              {
                if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v22 + 60) & 0x100) == 0)
                  goto LABEL_22;
              }
              else if (!__maskrune(v22, 0x100uLL))
              {
                goto LABEL_22;
              }
            }
            if (*(unsigned __int16 *)(v15 + 2 * v21) != *(unsigned __int16 *)(v17 + 2 * v21))
              break;
            v23 = v21 + 1;
            if (a5 + v21 + 1 < a3)
            {
              v12 = v23 + a5;
              ++v21;
              if (v23 < v19)
                continue;
            }
            v12 = a5 + v23;
            goto LABEL_23;
          }
          v12 = a5 + v21;
LABEL_22:
          v23 = v21;
LABEL_23:
          v6 = v26;
          v20 = v27;
        }
        v24 = *a1;
        if (v23 == v19)
          break;
        if (++v16 >= (unint64_t)(*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 16))(a1, v6))
          return 0;
      }
      v6 += v20;
      a5 = v12;
      a2 = v25;
      if ((*(uint64_t (**)(uint64_t *))(v24 + 24))(a1) != v6)
        continue;
      return a3 == v12;
    }
    return result;
  }
}

void sub_20B96A2A0(void *a1@<X0>, unint64_t a2@<X1>, const UniChar *a3@<X2>, CFIndex a4@<X3>, void *a5@<X4>, unint64_t a6@<X5>, void *a7@<X6>, unint64_t a8@<X7>, uint64_t *a9@<X8>, int a10)
{
  unsigned __int8 v19;
  uint64_t v20;
  CFStringRef v21;
  void *__p[3];
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;

  if (a2 && a4 && a6 && a8)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_25472BCF0);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25472BCF0))
    {
      sub_20B8B2334(0);
      word_25472BCE8 = 1310;
      __cxa_guard_release(&qword_25472BCF0);
    }
    v25 = 0u;
    v26 = 0;
    v24 = 0u;
    WORD2(v25) = a8;
    WORD4(v25) = a6;
    v23 = 7;
    WORD6(v25) = word_25472BCE8;
    WORD5(v25) = word_25472BCE8;
    sub_20B90447C(__p, 1uLL, (__int128 *)&v23);
    v20 = operator new();
    sub_20B916250(v20, a7, a8, a1, a2, a5, a6, 0, 0, 0, (uint64_t)__p, 69, 0, a10);
    *a9 = v20;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v21 = CFStringCreateWithCharacters(0, a3, a4);
    __p[0] = (void *)v21;
    sub_20B88B52C((const void **)(v20 + 128), v21);
    (*(void (**)(uint64_t, double))(*(_QWORD *)v20 + 400))(v20, 0.0);
    *(_QWORD *)(v20 + 184) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 504))(v20, 1);
    if (v21)
      CFRelease(v21);
  }
  else
  {
    *a9 = 0;
  }
}

void sub_20B96A468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  __cxa_guard_abort(&qword_25472BCF0);
  _Unwind_Resume(a1);
}

const void *sub_20B96A4EC(uint64_t a1, CFStringRef theString)
{
  CFIndex Length;
  CFStringRef v5;
  CFStringRef v6;
  const void *v7;
  CFRange v9;

  Length = CFStringGetLength(theString);
  if (!Length)
    return 0;
  v9.length = Length - 1;
  v9.location = 0;
  v5 = CFStringCreateWithSubstring(0, theString, v9);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_20B96A580(a1, v5);
  CFRelease(v6);
  return v7;
}

void sub_20B96A568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void *sub_20B96A580(uint64_t a1, const void *a2)
{
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a2))
    return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  else
    return 0;
}

CFIndex sub_20B96A5C4(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  CFIndex v5;
  unint64_t Length;
  const __CFString *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  Length = 0;
  do
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v4);
    if (CFStringGetLength(ValueAtIndex) > Length)
    {
      Length = CFStringGetLength(ValueAtIndex);
      v5 = v4;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_20B96A650(uint64_t a1, CFAllocatorRef allocator)
{
  const void **v4;
  CFMutableDictionaryRef Mutable;

  *(_QWORD *)a1 = &off_24C461B58;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (const void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 24) = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 32) = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = Mutable;
  *(_QWORD *)(a1 + 56) = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 144) = 0;
  if (allocator)
    sub_20B96A7D4(v4, allocator);
  return a1;
}

void sub_20B96A760(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;
  const void **v3;
  const void **v4;
  const void **v5;

  sub_20B88B74C(v5, 0);
  sub_20B8CE418(v4, 0);
  sub_20B8B035C((const void **)(v2 + 32), 0);
  sub_20B8B035C((const void **)(v2 + 24), 0);
  sub_20B8B035C(v3, 0);
  sub_20B96BC84(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B96A7D4(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B96BC84(a1, cf);
  }
}

uint64_t sub_20B96A820(uint64_t a1, uint64_t a2)
{
  const void **v4;
  const __CFArray *v5;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v7;
  CFMutableArrayRef v8;
  const __CFArray *v9;
  CFMutableArrayRef v10;
  const __CFDictionary *v11;
  CFMutableDictionaryRef v12;
  const __CFArray *v13;
  CFArrayRef Copy;
  const __CFDictionary *v15;
  CFMutableDictionaryRef v16;
  int v17;
  const void *v18;
  const void *v19;

  *(_QWORD *)a1 = &off_24C461B58;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (const void **)(a1 + 8);
  v5 = *(const __CFArray **)(a2 + 16);
  if (v5)
    MutableCopy = CFArrayCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v5);
  else
    MutableCopy = 0;
  *(_QWORD *)(a1 + 16) = MutableCopy;
  v7 = *(const __CFArray **)(a2 + 24);
  if (v7)
    v8 = CFArrayCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v7);
  else
    v8 = 0;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(const __CFArray **)(a2 + 32);
  if (v9)
    v10 = CFArrayCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v9);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(const __CFDictionary **)(a2 + 40);
  if (v11)
    v12 = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v11);
  else
    v12 = 0;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = *(const __CFArray **)(a2 + 48);
  if (v13)
    Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(a2 + 8), v13);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 48) = Copy;
  v15 = *(const __CFDictionary **)(a2 + 56);
  if (v15)
    v16 = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a2 + 8), 0, v15);
  else
    v16 = 0;
  v17 = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 144) = 0;
  v18 = *(const void **)(a2 + 8);
  if (v18)
    sub_20B96A7D4(v4, v18);
  v19 = *(const void **)(a2 + 72);
  if (v19)
    sub_20B88B52C((const void **)(a1 + 72), v19);
  return a1;
}

void sub_20B96A974(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;
  const void **v3;
  const void **v4;

  sub_20B88B74C(v4, 0);
  sub_20B8CE418(v2 + 5, 0);
  sub_20B8B035C(v2 + 4, 0);
  sub_20B8B035C(v2 + 3, 0);
  sub_20B8B035C(v3, 0);
  sub_20B96BC84(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B96A9E8()
{
  JUMPOUT(0x20B96A9D4);
}

const __CFString *sub_20B96A9F0(void *a1)
{
  const __CFString *result;
  const char *v3;
  uint64_t v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;

  result = (const __CFString *)sub_20B93AAB0((uint64_t)a1);
  if ((_DWORD)result)
  {
    result = (const __CFString *)objc_msgSend_rawCandidate(a1, v3, v4);
    if (result)
    {
      v5 = (__CFString *)result;
      v6 = (*((uint64_t (**)(const __CFString *))result->isa + 5))(result);
      v7 = 40;
      if (!v6)
        v7 = 24;
      result = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v5->isa + v7))(v5);
      if (result)
        return (const __CFString *)(CFStringGetLength(result) > 0);
    }
  }
  return result;
}

BOOL sub_20B96AA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v6;
  CFIndex Count;
  _BOOL8 result;
  uint64_t v9;
  const __CFArray *v10;

  v6 = *(const __CFArray **)(a1 + 16);
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  result = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v9 = a2 + a3;
    if (a2 + a3 <= Count)
    {
      if (a3 >= 1)
      {
        do
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), --v9);
        while (v9 > a2);
      }
      v10 = *(const __CFArray **)(a1 + 16);
      if (v10)
        v10 = (const __CFArray *)CFArrayGetCount(v10);
      return (uint64_t)v10 < Count;
    }
  }
  return result;
}

const void *sub_20B96AAF4(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;

  if (idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 0;
  else
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
}

BOOL sub_20B96AB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count;
  _BOOL8 result;
  uint64_t v8;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  result = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v8 = a2 + a3;
    if (a2 + a3 <= Count)
    {
      if (a3 >= 1)
      {
        do
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), --v8);
        while (v8 > a2);
      }
      return CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) < Count;
    }
  }
  return result;
}

const void *sub_20B96ABC8(uint64_t a1, CFIndex a2)
{
  if (a2 < 0 || CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) <= a2)
    return 0;
  else
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
}

void sub_20B96AC14(uint64_t a1, const void *a2)
{
  const void **v3;

  v3 = (const void **)(a1 + 88);
  sub_20B87E150((const void **)(a1 + 88), 0);
  if (a2)
    sub_20B88B52C(v3, a2);
}

__CFString *sub_20B96AC58(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  uint64_t v4;
  __CFString *Mutable;
  CFIndex i;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const __CFString *v13;

  v2 = *(const __CFArray **)(a1 + 16);
  if (!v2)
    return 0;
  Count = CFArrayGetCount(v2);
  if (!Count)
    return 0;
  v4 = Count;
  Mutable = CFStringCreateMutable(0, 0);
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = (void *)sub_20B96AAF4(a1, i);
      v10 = objc_msgSend_rawCandidate(v7, v8, v9);
      if (v10)
      {
        v11 = (_QWORD *)v10;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10))
          v12 = 40;
        else
          v12 = 24;
        v13 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v11 + v12))(v11);
      }
      else
      {
        v13 = 0;
      }
      CFStringAppend(Mutable, v13);
    }
  }
  return Mutable;
}

BOOL sub_20B96AD2C(uint64_t a1)
{
  CFIndex Count;
  CFRange v4;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v4.location = 0;
  v4.length = Count;
  CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 16), *(CFArrayRef *)(a1 + 32), v4);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 32));
  return Count > 0;
}

void sub_20B96AD78(uint64_t a1, int a2, CFArrayRef theArray)
{
  CFArrayRef Copy;

  if (theArray)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theArray);
  else
    Copy = 0;
  sub_20B88B74C((const void **)(a1 + 48), Copy);
}

void sub_20B96ADBC(uint64_t a1)
{
  CFIndex Count;
  const __CFArray *v3;
  CFIndex v4;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  sub_20B96AB44(a1, 0, Count);
  v3 = *(const __CFArray **)(a1 + 16);
  if (v3)
    v4 = CFArrayGetCount(v3);
  else
    v4 = 0;
  sub_20B96AA60(a1, 0, v4);
  sub_20B87E150((const void **)(a1 + 88), 0);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
  sub_20B88B74C((const void **)(a1 + 48), 0);
  sub_20B87E150((const void **)(a1 + 72), 0);
}

void sub_20B96AE3C(uint64_t a1, const void *a2)
{
  const void **v3;

  v3 = (const void **)(a1 + 72);
  sub_20B87E150((const void **)(a1 + 72), 0);
  if (a2)
    sub_20B88B52C(v3, a2);
}

void sub_20B96AE80(uint64_t a1)
{
  NSObject *v2;
  __CFString *Mutable;
  __CFString *v4;
  __CFString *v5;
  CFIndex i;
  const __CFArray *Count;
  const void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const __CFString *v12;
  CFIndex j;
  const void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const __CFString *v18;
  CFIndex k;
  const void *ValueAtIndex;
  void *v21;
  const char *v22;
  uint64_t v23;
  const __CFString *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  __CFString *v29;
  int v30;
  int v31;
  uint8_t buf[4];
  __CFString *v33;
  __int16 v34;
  __CFString *v35;
  __int16 v36;
  __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(4u);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    return;
  Mutable = CFStringCreateMutable(0, 0);
  v4 = CFStringCreateMutable(0, 0);
  v5 = CFStringCreateMutable(0, 0);
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a1 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    if (i)
      CFStringAppend(Mutable, CFSTR(" "));
    v8 = sub_20B96AAF4(a1, i);
    if (sub_20B93AAB0((uint64_t)v8))
    {
      v9 = (void *)sub_20B96AAF4(a1, i);
      v12 = sub_20B96B29C(v9, v10, v11);
      CFStringAppend(Mutable, v12);
      CFRelease(v12);
    }
  }
  for (j = 0; j < CFArrayGetCount(*(CFArrayRef *)(a1 + 32)); ++j)
  {
    if (j)
      CFStringAppend(v5, CFSTR(" "));
    v14 = sub_20B96ABC8(a1, j);
    if (sub_20B93AAB0((uint64_t)v14))
    {
      v15 = (void *)sub_20B96ABC8(a1, j);
      v18 = sub_20B96B29C(v15, v16, v17);
      CFStringAppend(v5, v18);
      CFRelease(v18);
    }
  }
  for (k = 0; k < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)); ++k)
  {
    if (k)
      CFStringAppend(v4, CFSTR(" "));
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), k);
    if (sub_20B93AAB0((uint64_t)ValueAtIndex))
    {
      v21 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), k);
      v24 = sub_20B96B29C(v21, v22, v23);
      CFStringAppend(v4, v24);
      CFRelease(v24);
    }
  }
  v25 = sub_20B9A7C5C(4u);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    v33 = Mutable;
    v34 = 2112;
    v35 = v5;
    v36 = 2112;
    v37 = v4;
    _os_log_debug_impl(&dword_20B7F7000, v25, OS_LOG_TYPE_DEBUG, "Candidates: [Left: %@] [Inline: %@] [Right: %@]", buf, 0x20u);
  }
  v26 = sub_20B9A7C5C(4u);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    v29 = *(__CFString **)(a1 + 72);
    *(_DWORD *)buf = 138412290;
    v33 = v29;
    _os_log_debug_impl(&dword_20B7F7000, v26, OS_LOG_TYPE_DEBUG, "App Context: %@", buf, 0xCu);
  }
  v27 = sub_20B9A7C5C(4u);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    v30 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = v30;
    _os_log_debug_impl(&dword_20B7F7000, v27, OS_LOG_TYPE_DEBUG, "Text Content Type: %d", buf, 8u);
  }
  v28 = sub_20B9A7C5C(4u);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = v31;
    _os_log_debug_impl(&dword_20B7F7000, v28, OS_LOG_TYPE_DEBUG, "Shuangpin Type: %d", buf, 8u);
    if (!v5)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v5)
LABEL_33:
    CFRelease(v5);
LABEL_34:
  if (v4)
    CFRelease(v4);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_20B96B214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B96B29C(void *a1, const char *a2, uint64_t a3)
{
  const __CFAllocator *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  v8 = (_QWORD *)v5;
  if (v5)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v10 = 40;
    if (!v9)
      v10 = 24;
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + v10))(v8);
  }
  if (a1)
  {
    v11 = objc_msgSend_rawCandidate(a1, v6, v7);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  }
  else
  {
    v12 = 0;
  }
  return CFStringCreateWithFormat(v4, 0, CFSTR("%@:(%d)"), v8, v12);
}

void sub_20B96B34C(uint64_t a1, const void *a2)
{
  const void **v3;

  v3 = (const void **)(a1 + 80);
  sub_20B87E150((const void **)(a1 + 80), 0);
  if (a2)
    sub_20B88B52C(v3, a2);
}

void sub_20B96B390(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex v8;
  float *v9;
  CFIndex i;
  float *v11;
  int v12;
  double v13;
  uint64_t **v14;
  uint64_t **v15;
  NSObject *v16;
  CFTypeRef v17;
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 96) = 0;
  v4 = a1 + 104;
  sub_20B8D6548(a1 + 104);
  if (a2)
  {
    v18 = a1;
    Count = CFArrayGetCount(a2);
    v6 = Count;
    if (Count < 1)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v19 = Count;
      do
      {
        v9 = (float *)*((_QWORD *)CFArrayGetValueAtIndex(a2, v8) + 3);
        if (*(unsigned __int16 *)v9 - 123 >= 0xFFFFFFE6)
        {
          ++v7;
          if (v8)
          {
            v20 = v7;
            for (i = 0; i != v8; ++i)
            {
              v11 = (float *)*((_QWORD *)CFArrayGetValueAtIndex(a2, i) + 3);
              v12 = *(unsigned __int16 *)v11;
              if ((v12 - 123) >= 0xFFFFFFE6)
              {
                v13 = hypotf((float)(v11[1] + (float)(v11[3] * 0.5)) - (float)(v9[1] + (float)(v9[3] * 0.5)), (float)(v11[2] + (float)(v11[4] * 0.5)) - (float)(v9[2] + (float)(v9[4] * 0.5)));
                v22 = v12;
                *(_QWORD *)buf = &v22;
                v14 = sub_20B8D65D8(v4, &v22, (uint64_t)&unk_20BA37B7A, (_WORD **)buf);
                v21 = *(_WORD *)v9;
                *(_QWORD *)buf = &v21;
                *((double *)sub_20B8D688C((uint64_t)(v14 + 3), &v21, (uint64_t)&unk_20BA37B7A, (_WORD **)buf) + 3) = v13;
                v22 = *(_WORD *)v9;
                *(_QWORD *)buf = &v22;
                v15 = sub_20B8D65D8(v4, &v22, (uint64_t)&unk_20BA37B7A, (_WORD **)buf);
                v21 = *(_WORD *)v11;
                *(_QWORD *)buf = &v21;
                *((double *)sub_20B8D688C((uint64_t)(v15 + 3), &v21, (uint64_t)&unk_20BA37B7A, (_WORD **)buf) + 3) = v13;
              }
            }
            v6 = v19;
            v7 = v20;
          }
        }
        ++v8;
      }
      while (v8 != v6);
    }
    v16 = sub_20B9A7C5C(4u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v6;
      v24 = 2048;
      v25 = v7;
      _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "Input layout key count: %ld, valid layout key count: %ld", buf, 0x16u);
    }
    if (v7)
    {
      v17 = CFRetain(a2);
      sub_20B88B74C((const void **)(v18 + 144), v17);
      *(_BYTE *)(v18 + 96) = 1;
    }
  }
}

CFIndex sub_20B96B624(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  CFIndex v5;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v8;

  result = *(_QWORD *)(a1 + 144);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v5 = result;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), i);
        v8 = *(_QWORD *)(a2 + 24);
        if (!v8)
          sub_20B80BB74();
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, ValueAtIndex[3]);
      }
    }
  }
  return result;
}

double sub_20B96B6A0(uint64_t a1, int a2, int a3)
{
  double v3;
  uint64_t **v4;
  uint64_t **v5;
  unsigned __int16 v7;
  unsigned __int16 v8;

  v8 = a2;
  v7 = a3;
  v3 = 0.0;
  if (a2 != a3)
  {
    v4 = sub_20B886524((_QWORD *)(a1 + 104), &v8);
    v3 = 150.0;
    if (v4)
    {
      v5 = sub_20B886524(v4 + 3, &v7);
      if (v5)
        return *((double *)v5 + 3);
    }
  }
  return v3;
}

unint64_t sub_20B96B704(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  const __CFArray *v5;
  CFIndex Count;
  __n128 v10;
  double v11;
  double v12;
  CFIndex v13;
  CFIndex i;
  float *v15;
  int v16;
  double v17;
  double v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  double *v26;
  __n128 *v27;
  __n128 *v28;
  __int16 *v29;
  __int128 *v30;
  unint64_t v31;
  uint64_t v32;
  __n128 *v33;
  unint64_t v34;
  unsigned __int8 v35;
  __n128 *v37;
  double *v38;
  double *v39;
  void *v40;

  v5 = *(const __CFArray **)(a1 + 144);
  if (!v5 || !*(_BYTE *)(a1 + 96))
    return 0;
  Count = CFArrayGetCount(v5);
  v11 = *(double *)(a2 + 32);
  v12 = *(double *)(a2 + 40);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (Count < 1)
  {
    v30 = 0;
    v29 = 0;
  }
  else
  {
    v13 = Count;
    for (i = 0; i != v13; ++i)
    {
      v15 = (float *)*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), i) + 3);
      v16 = *(unsigned __int16 *)v15;
      if ((v16 - 97) <= 0x19)
      {
        v10.n128_f64[0] = (float)(v15[1] + (float)(v15[3] * 0.5)) - v11;
        v17 = (float)(v15[2] + (float)(v15[4] * 0.5)) - v12;
        v18 = v17 * v17 + v10.n128_f64[0] * v10.n128_f64[0];
        if (v38 >= v39)
        {
          v20 = ((char *)v38 - (char *)v37) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_20B80CDD8();
          v22 = (char *)v39 - (char *)v37;
          if (((char *)v39 - (char *)v37) >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v24 = (char *)sub_20B829AD0((uint64_t)&v39, v23);
          v26 = (double *)&v24[16 * v20];
          *(_WORD *)v26 = v16;
          v26[1] = v18;
          v27 = (__n128 *)v38;
          v28 = (__n128 *)v26;
          if (v38 != (double *)v37)
          {
            do
            {
              v10 = v27[-1];
              v28[-1] = v10;
              --v28;
              --v27;
            }
            while (v27 != v37);
            v27 = v37;
          }
          v19 = v26 + 2;
          v37 = v28;
          v39 = (double *)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_WORD *)v38 = v16;
          v38[1] = v18;
          v19 = v38 + 2;
        }
        v38 = v19;
      }
    }
    v29 = (__int16 *)v37;
    v30 = (__int128 *)v38;
  }
  v31 = 126 - 2 * __clz(((char *)v30 - (char *)v29) >> 4);
  v40 = &unk_24C46CEB0;
  if (v30 == (__int128 *)v29)
    v32 = 0;
  else
    v32 = v31;
  sub_20B8D53F4(v29, v30, (uint64_t)&v40, v32, 1, v10);
  if (((char *)v38 - (char *)v37) >> 4 < a4)
    a4 = ((char *)v38 - (char *)v37) >> 4;
  if (a4)
  {
    v33 = v37;
    v34 = a4;
    do
    {
      v35 = v33->n128_u8[0];
      ++v33;
      *a3++ = v35;
      --v34;
    }
    while (v34);
    goto LABEL_34;
  }
  if (v37)
LABEL_34:
    operator delete(v37);
  return a4;
}

void sub_20B96B950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B96B978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 8) < *(double *)(a3 + 8);
}

__CFArray *sub_20B96B98C(const __CFString *a1, uint64_t a2)
{
  const __CFArray *v3;
  CFAllocatorRef *v4;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex Length;
  UniChar *v8;
  CFIndex i;
  uint64_t v10;
  UniChar v11;
  _QWORD **v12;
  const void *ValueAtIndex;
  CFTypeID v14;
  const UInt8 *BytePtr;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  UniChar *v20;

  if (a2)
  {
    v3 = *(const __CFArray **)(a2 + 48);
    v4 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    if (a1 && v3)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 48));
      if (Count != CFStringGetLength(a1))
        v3 = 0;
      Mutable = CFArrayCreateMutable(*v4, 0, MEMORY[0x24BDBD690]);
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (!a1)
        return Mutable;
    }
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v3 = 0;
    if (!a1)
      return Mutable;
  }
  Length = CFStringGetLength(a1);
  sub_20B8D06F4(a1, 0, Length, &v20);
  v8 = v20;
  if (Length)
  {
    for (i = 0; i != Length; ++i)
    {
      v10 = operator new();
      v11 = v8[i];
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)v10 = &unk_24C4610F0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_WORD *)(v10 + 32) = v11;
      v12 = (_QWORD **)sub_20B8B0430(v10);
      if (v3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
        v14 = CFGetTypeID(ValueAtIndex);
        if (v14 == CFDataGetTypeID())
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
          v16 = CFDataGetLength((CFDataRef)ValueAtIndex);
          if (v16 >= 8)
          {
            v17 = v16 >> 3;
            v18 = (float *)(BytePtr + 4);
            do
            {
              if (!*((_WORD *)v18 - 2))
                break;
              sub_20B947E04(v12[3], *((_WORD *)v18 - 2), *v18);
              v18 += 2;
              --v17;
            }
            while (v17);
          }
        }
      }
      CFArrayAppendValue(Mutable, v12);
      if (v12)
        CFRelease(v12);
    }
  }
  if (v8)
    MEMORY[0x20BD39C80](v8, 0x1000C80BDFB0063);
  return Mutable;
}

void sub_20B96BB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  uint64_t v9;

  sub_20B95FE94(&a9, 0);
  if (v9)
    MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

BOOL sub_20B96BBD4(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  BOOL v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  if (Count < 1)
  {
    return 0;
  }
  else
  {
    v3 = Count;
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = (void *)sub_20B96ABC8(a1, v4);
      if (v6)
      {
        v9 = objc_msgSend_rawCandidate(v6, v7, v8);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9) == 89)
          break;
      }
      v5 = ++v4 < v3;
    }
    while (v3 != v4);
  }
  return v5;
}

void sub_20B96BC60(uint64_t a1)
{
  sub_20B96BCB8(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B96BC84(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B96BCB8(uint64_t a1)
{
  const void **v2;

  *(_QWORD *)a1 = &off_24C461B58;
  v2 = (const void **)(a1 + 8);
  sub_20B88B74C((const void **)(a1 + 144), 0);
  sub_20B8E82D0(a1 + 104);
  sub_20B87E150((const void **)(a1 + 88), 0);
  sub_20B87E150((const void **)(a1 + 80), 0);
  sub_20B87E150((const void **)(a1 + 72), 0);
  sub_20B8CE418((const void **)(a1 + 56), 0);
  sub_20B88B74C((const void **)(a1 + 48), 0);
  sub_20B8CE418((const void **)(a1 + 40), 0);
  sub_20B8B035C((const void **)(a1 + 32), 0);
  sub_20B8B035C((const void **)(a1 + 24), 0);
  sub_20B8B035C((const void **)(a1 + 16), 0);
  sub_20B96BC84(v2, 0);
  return a1;
}

void sub_20B96BD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  unint64_t v17;
  __n128 *v18;
  __n128 *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  int v28;
  void *v29;
  double v30;
  int v31;
  int v32;
  double *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  int v42;
  double *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  __n128 *v50;
  __n128 *v51;
  __n128 *v52;
  NSObject *v53;
  void *v54;
  unint64_t v55;
  std::string *p_p;
  const std::nothrow_t *v57;
  unint64_t v58;
  __n128 *v59;
  BOOL v60;
  __n128 v61;
  __n128 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  const std::nothrow_t *v68;
  unint64_t v69;
  __n128 *v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  __n128 *v77;
  __n128 *v78;
  std::string __p;
  void *v80;
  _BYTE *v81;
  uint64_t v82;
  void *v83;
  _BYTE *v84;
  uint8_t buf[4];
  std::string *v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 24) + 16))(&v83);
  v7 = v83;
  if (v83 == v84)
    goto LABEL_94;
  if ((**(_DWORD **)(a1 + 16) & 0x40000) != 0)
  {
    v80 = 0;
    v81 = 0;
    v82 = 0;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(&v80, *(_QWORD *)(a1 + 32), a2, a3);
  }
  v8 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48);
  if (!v8)
  {
    v15 = 0;
    v18 = 0;
    v19 = 0;
    v10 = 0;
    goto LABEL_62;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF9)
    sub_20B80CDD8();
  v10 = (__n128 *)sub_20B8F6ECC(v8 >> 3);
  v11 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48);
  if (!v11)
  {
    v15 = 0;
    v18 = 0;
LABEL_61:
    v19 = v10;
    goto LABEL_62;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF9)
    sub_20B80CDD8();
  v12 = v9;
  v13 = (__n128 *)sub_20B8F6ECC(v11 >> 3);
  v15 = v13;
  v16 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 56) == v16)
  {
    v18 = v13;
    goto LABEL_61;
  }
  v17 = 0;
  v77 = &v13[v14];
  v78 = &v10[v12];
  v18 = v13;
  v19 = v10;
  do
  {
    v20 = *(double **)(v16 + 8 * v17);
    if ((*(unsigned int (**)(double *))(*(_QWORD *)v20 + 408))(v20) == 1)
      break;
    if (v17 >= (v84 - (_BYTE *)v83) >> 3)
      v21 = -1.79769313e308;
    else
      v21 = *((double *)v83 + v17);
    if (v17 >= (v81 - (_BYTE *)v80) >> 3)
      v22 = -1.79769313e308;
    else
      v22 = *((double *)v80 + v17);
    v23 = v21;
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v24 = (double *)sub_20B896F94();
      v25 = __exp10(v21);
      v26 = v24[6];
      v27 = __exp10(v22);
      v23 = log10(v25 + v26 * v27);
    }
    v28 = (*(uint64_t (**)(double *))(*(_QWORD *)v20 + 112))(v20);
    v29 = sub_20B896F94();
    v30 = *((double *)v29 + 1);
    v31 = *((_DWORD *)v29 + 1);
    v32 = (*(uint64_t (**)(double *))(*(_QWORD *)v20 + 112))(v20);
    v33 = (double *)sub_20B896F94();
    (*(void (**)(double *, double))(*(_QWORD *)v20 + 400))(v20, -((double)(int)(v30 * (double)v28 - (double)v31 * v23) - v33[1] * (double)v32) / (double)*((int *)v33 + 1));
    v20[23] = v21;
    if (v19 >= v78)
    {
      v34 = v19 - v10;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        sub_20B80CDD8();
      if (((char *)v78 - (char *)v10) >> 3 > v35)
        v35 = ((char *)v78 - (char *)v10) >> 3;
      if ((unint64_t)((char *)v78 - (char *)v10) >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      v37 = (char *)sub_20B8F6ECC(v36);
      v39 = (__n128 *)&v37[16 * v34];
      v39->n128_f64[0] = v21;
      v39->n128_u64[1] = v17;
      if (v19 == v10)
      {
        v41 = v19;
        v10 = (__n128 *)&v37[16 * v34];
      }
      else
      {
        v40 = (__n128 *)&v37[16 * v34];
        do
        {
          v40[-1] = v19[-1];
          --v40;
          --v19;
        }
        while (v19 != v10);
        v41 = v10;
        v10 = v40;
      }
      v78 = (__n128 *)&v37[16 * v38];
      v19 = v39 + 1;
      if (v41)
        operator delete(v41);
    }
    else
    {
      v19->n128_f64[0] = v21;
      v19->n128_u64[1] = v17;
      ++v19;
    }
    v42 = (*(uint64_t (**)(double *))(*(_QWORD *)v20 + 112))(v20);
    v43 = (double *)sub_20B896F94();
    v44 = (int)(v43[1] * (double)v42 - (double)*((int *)v43 + 1) * v21);
    if (v18 >= v77)
    {
      v45 = v18 - v15;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 60)
        sub_20B80CDD8();
      if (((char *)v77 - (char *)v15) >> 3 > v46)
        v46 = ((char *)v77 - (char *)v15) >> 3;
      if ((unint64_t)((char *)v77 - (char *)v15) >= 0x7FFFFFFFFFFFFFF0)
        v47 = 0xFFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v48 = (char *)sub_20B8F6ECC(v47);
      v50 = (__n128 *)&v48[16 * v45];
      v50->n128_u32[0] = v44;
      v50->n128_u64[1] = v17;
      if (v18 == v15)
      {
        v52 = (__n128 *)&v48[16 * v45];
      }
      else
      {
        v51 = (__n128 *)&v48[16 * v45];
        do
        {
          v52 = v51 - 1;
          v51[-1] = v18[-1];
          --v18;
          --v51;
        }
        while (v18 != v15);
      }
      v77 = (__n128 *)&v48[16 * v49];
      v18 = v50 + 1;
      if (v15)
        operator delete(v15);
      v15 = v52;
    }
    else
    {
      v18->n128_u32[0] = v44;
      v18->n128_u64[1] = v17;
      ++v18;
    }
    v53 = sub_20B9A7C5C(0xCu);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
    {
      v54 = (void *)(*(uint64_t (**)(double *))(*(_QWORD *)v20 + 544))(v20);
      sub_20B8D15F4(v54, v55, &__p);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v86 = p_p;
      v87 = 2048;
      v88 = v21;
      v89 = 2048;
      v90 = v22;
      v91 = 2048;
      v92 = v23;
      _os_log_debug_impl(&dword_20B7F7000, v53, OS_LOG_TYPE_DEBUG, "[%s] static LM: %f dynamic LM: %f interpolated: %f", buf, 0x2Au);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v17;
    v16 = *(_QWORD *)(a2 + 48);
  }
  while (v17 < (*(_QWORD *)(a2 + 56) - v16) >> 3);
LABEL_62:
  if ((char *)v19 - (char *)v10 < 16)
  {
LABEL_66:
    v61.n128_f64[0] = sub_20B96C4CC(v10, v19, v19 - v10, 0, 0, v6);
  }
  else
  {
    v57 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v58 = v19 - v10;
    while (1)
    {
      v59 = (__n128 *)operator new(16 * v58, v57);
      if (v59)
        break;
      v60 = v58 > 1;
      v58 >>= 1;
      if (!v60)
        goto LABEL_66;
    }
    v62 = v59;
    sub_20B96C4CC(v10, v19, v19 - v10, v59, v58, v6);
    operator delete(v62);
  }
  if (v19 != v10)
  {
    v63 = 0;
    v64 = *(_QWORD *)(a2 + 48);
    if ((unint64_t)(v19 - v10) <= 1)
      v65 = 1;
    else
      v65 = v19 - v10;
    v66 = &v10->n128_u64[1];
    do
    {
      v67 = *v66;
      v66 += 2;
      *(_DWORD *)(*(_QWORD *)(v64 + 8 * v67) + 192) = v63++;
    }
    while (v65 != v63);
  }
  if ((char *)v18 - (char *)v15 < 16)
  {
LABEL_78:
    sub_20B96D034(v15, v18, v18 - v15, 0, 0, v61);
  }
  else
  {
    v68 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v69 = v18 - v15;
    while (1)
    {
      v70 = (__n128 *)operator new(16 * v69, v68);
      if (v70)
        break;
      v60 = v69 > 1;
      v69 >>= 1;
      if (!v60)
        goto LABEL_78;
    }
    v71 = v70;
    sub_20B96D034(v15, v18, v18 - v15, v70, v69, v61);
    operator delete(v71);
  }
  if (v18 != v15)
  {
    v72 = 0;
    v73 = *(_QWORD *)(a2 + 48);
    if ((unint64_t)(v18 - v15) <= 1)
      v74 = 1;
    else
      v74 = v18 - v15;
    v75 = &v15->n128_u64[1];
    do
    {
      v76 = *v75;
      v75 += 2;
      *(_DWORD *)(*(_QWORD *)(v73 + 8 * v76) + 196) = v72++;
    }
    while (v74 != v72);
    goto LABEL_88;
  }
  if (v15)
LABEL_88:
    operator delete(v15);
  if (v10)
    operator delete(v10);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  v7 = v83;
LABEL_94:
  if (v7)
  {
    v84 = v7;
    operator delete(v7);
  }
}

void sub_20B96C430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B96C4B8()
{
  JUMPOUT(0x20BD39CB0);
}

double sub_20B96C4CC(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  unint64_t *v7;
  double v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t *v16;
  unint64_t v17;
  __n128 *v18;
  unint64_t v19;
  __n128 v20;
  unint64_t *n128_u64;
  uint64_t v22;
  __n128 *v23;
  __n128 *v24;
  double v25;
  BOOL v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  int v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  __n128 *v40;
  __n128 v41;
  __n128 *v42;
  __n128 *v43;
  unint64_t *v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  __n128 *v51;
  unint64_t *v52;
  uint64_t v53;
  __n128 *v54;
  unint64_t *v55;

  if (a3 < 2)
    return a6.n128_f64[0];
  v7 = (unint64_t *)a1;
  if (a3 == 2)
  {
    a6.n128_u64[0] = a2[-1].n128_u64[0];
    v8 = a1->n128_f64[0];
    if (a6.n128_f64[0] == a1->n128_f64[0])
      v9 = 0;
    else
      v9 = -127;
    if (a6.n128_f64[0] > a1->n128_f64[0])
      v9 = 1;
    if (a6.n128_f64[0] < a1->n128_f64[0])
      v9 = -1;
    if (v9
      || ((v10 = a2[-1].n128_u64[1], v11 = a1->n128_u64[1], v12 = v10 == v11, v10 < v11)
        ? (LOBYTE(v9) = -1)
        : (LOBYTE(v9) = 1),
          !v12))
    {
      if ((char)v9 >= 1)
      {
        a1->n128_u64[0] = a6.n128_u64[0];
        a2[-1].n128_f64[0] = v8;
        v13 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v13;
      }
    }
    return a6.n128_f64[0];
  }
  if ((uint64_t)a3 <= 0)
  {
    if (a1 == a2)
      return a6.n128_f64[0];
    n128_u64 = a1[1].n128_u64;
    if (&a1[1] == a2)
      return a6.n128_f64[0];
    v22 = 0;
    v23 = a1;
    while (1)
    {
      v24 = v23;
      v23 = (__n128 *)n128_u64;
      a6.n128_u64[0] = *n128_u64;
      v25 = v24->n128_f64[0];
      v26 = *(double *)n128_u64 < v24->n128_f64[0];
      v27 = *(double *)n128_u64 <= v24->n128_f64[0];
      if (*(double *)n128_u64 == v24->n128_f64[0])
        v28 = 0;
      else
        v28 = -127;
      if (!v27)
        v28 = 1;
      if (v26)
        v28 = -1;
      if (v28
        || ((v29 = v24[1].n128_u64[1], v30 = v24->n128_u64[1], v31 = v29 == v30, v29 < v30)
          ? (LOBYTE(v28) = -1)
          : (LOBYTE(v28) = 1),
            !v31))
      {
        if ((char)v28 >= 1)
        {
          v32 = v24[1].n128_u64[1];
          v33 = v22;
          while (1)
          {
            v34 = v33;
            v35 = (double *)((char *)a1->n128_f64 + v33);
            v35[2] = v25;
            v35[3] = v35[1];
            if (!v34)
              break;
            v25 = *(v35 - 2);
            if (a6.n128_f64[0] == v25)
              v36 = 0;
            else
              v36 = -127;
            if (a6.n128_f64[0] > v25)
              v36 = 1;
            if (a6.n128_f64[0] < v25)
              v36 = -1;
            if (v36
              || ((v37 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v34), v38 = v32 == v37, v32 < v37)
                ? (LOBYTE(v36) = -1)
                : (LOBYTE(v36) = 1),
                  !v38))
            {
              v39 = (char)v36;
              v33 = v34 - 16;
              if (v39 > 0)
                continue;
            }
            v40 = (__n128 *)((char *)a1 + v34);
            goto LABEL_54;
          }
          v40 = a1;
LABEL_54:
          v40->n128_u64[0] = a6.n128_u64[0];
          v40->n128_u64[1] = v32;
        }
      }
      n128_u64 = v23[1].n128_u64;
      v22 += 16;
      if (&v23[1] == a2)
        return a6.n128_f64[0];
    }
  }
  v16 = (unint64_t *)a4;
  v17 = a3 >> 1;
  v18 = &a1[a3 >> 1];
  v19 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    sub_20B96C4CC(a1, v18, v19, a4, a5);
    sub_20B96C4CC(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v16, a5);
    a6.n128_f64[0] = sub_20B96CAD8(v7, &v7[2 * (a3 >> 1)], a2->n128_u64, a3 >> 1, a3 - (a3 >> 1), v16, a5, v20);
    return a6.n128_f64[0];
  }
  v41 = sub_20B96C7F0(a1, v18, v19, a4, a6);
  v42 = (__n128 *)&v16[2 * v17];
  a6.n128_u64[0] = sub_20B96C7F0((__n128 *)&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v42, v41).n128_u64[0];
  v43 = v42;
  v44 = &v16[2 * a3];
  while (v43 != (__n128 *)v44)
  {
    a6.n128_u64[0] = *v16;
    if (v43->n128_f64[0] == *(double *)v16)
      v45 = 0;
    else
      v45 = -127;
    if (v43->n128_f64[0] > *(double *)v16)
      v45 = 1;
    if (v43->n128_f64[0] < *(double *)v16)
      v46 = -1;
    else
      v46 = v45;
    if (!v46)
    {
      v47 = v43->n128_u64[1];
      v48 = v16[1];
      v49 = v47 == v48;
      LOBYTE(v46) = v47 < v48 ? -1 : 1;
      if (v49)
        goto LABEL_75;
    }
    if ((char)v46 <= 0)
    {
      v47 = v16[1];
LABEL_75:
      *v7 = a6.n128_u64[0];
      v7[1] = v47;
      v16 += 2;
      goto LABEL_76;
    }
    *v7 = v43->n128_u64[0];
    v7[1] = v43->n128_u64[1];
    ++v43;
LABEL_76:
    v7 += 2;
    if (v16 == (unint64_t *)v42)
    {
      if (v43 != (__n128 *)v44)
      {
        v50 = 0;
        do
        {
          v51 = &v43[v50 / 0x10];
          v52 = &v7[v50 / 8];
          a6.n128_u64[0] = v43[v50 / 0x10].n128_u64[0];
          *v52 = a6.n128_u64[0];
          v52[1] = v43[v50 / 0x10].n128_u64[1];
          v50 += 16;
        }
        while (&v51[1] != (__n128 *)v44);
      }
      return a6.n128_f64[0];
    }
  }
  if (v16 != (unint64_t *)v42)
  {
    v53 = 0;
    do
    {
      v54 = (__n128 *)&v16[v53];
      v55 = &v7[v53];
      a6.n128_u64[0] = v16[v53];
      *v55 = a6.n128_u64[0];
      v55[1] = v16[v53 + 1];
      v53 += 2;
    }
    while (&v54[1] != v42);
  }
  return a6.n128_f64[0];
}

__n128 sub_20B96C7F0(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  double v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  double *n128_f64;
  uint64_t v16;
  double *v17;
  double *v18;
  double v19;
  __n128 *v20;
  BOOL v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  __n128 *v27;
  uint64_t v28;
  double v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  char *v34;
  __n128 *v35;
  __n128 *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      v10 = a2[-1].n128_f64[0];
      if (v10 == a1->n128_f64[0])
        v11 = 0;
      else
        v11 = -127;
      if (v10 > a1->n128_f64[0])
        v11 = 1;
      if (v10 < a1->n128_f64[0])
        v11 = -1;
      if (!v11
        && ((v12 = a2[-1].n128_u64[1], v13 = a1->n128_u64[1], v14 = v12 == v13, v12 < v13)
          ? (LOBYTE(v11) = -1)
          : (LOBYTE(v11) = 1),
            v14)
        || (char)v11 < 1)
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v35 = &a1[a3 >> 1];
      sub_20B96C4CC(a1, v35, a3 >> 1, a4, a3 >> 1);
      sub_20B96C4CC(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v36 = &v8[a3 >> 1];
      while (v36 != a2)
      {
        if (v36->n128_f64[0] == v8->n128_f64[0])
          v37 = 0;
        else
          v37 = -127;
        if (v36->n128_f64[0] > v8->n128_f64[0])
          v37 = 1;
        if (v36->n128_f64[0] < v8->n128_f64[0])
          v37 = -1;
        if (!v37
          && ((v38 = v36->n128_u64[1], v39 = v8->n128_u64[1], v40 = v38 == v39, v38 < v39)
            ? (LOBYTE(v37) = -1)
            : (LOBYTE(v37) = 1),
              v40)
          || (char)v37 < 1)
        {
          v42 = *v8++;
          result = v42;
        }
        else
        {
          v41 = *v36++;
          result = v41;
        }
        *v5++ = result;
        if (v8 == v35)
        {
          if (v36 != a2)
          {
            v43 = 0;
            do
            {
              result = v36[v43];
              v5[v43++] = result;
            }
            while (&v36[v43] != a2);
          }
          return result;
        }
      }
      if (v8 != v35)
      {
        v44 = 0;
        do
        {
          result = v8[v44];
          v5[v44++] = result;
        }
        while (&v8[v44] != v35);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      n128_f64 = a1[1].n128_f64;
      if (&a1[1] != a2)
      {
        v16 = 0;
        v17 = (double *)a4;
        v18 = (double *)a4;
        do
        {
          v19 = *v18;
          v18 += 2;
          v20 = (__n128 *)n128_f64;
          v21 = *n128_f64 < v19;
          v22 = *n128_f64 <= v19;
          if (*n128_f64 == v19)
            v23 = 0;
          else
            v23 = -127;
          if (!v22)
            v23 = 1;
          if (v21)
            v23 = -1;
          if (!v23
            && ((v24 = v8[1].n128_u64[1], v25 = *((_QWORD *)v17 + 1), v26 = v24 == v25, v24 < v25)
              ? (LOBYTE(v23) = -1)
              : (LOBYTE(v23) = 1),
                v26)
            || (char)v23 < 1)
          {
            result = *v20;
            *(__n128 *)v18 = *v20;
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v17;
            v27 = a4;
            if (v17 != (double *)a4)
            {
              v28 = v16;
              while (1)
              {
                v29 = *(double *)((char *)a4[-1].n128_f64 + v28);
                if (v20->n128_f64[0] == v29)
                  v30 = 0;
                else
                  v30 = -127;
                if (v20->n128_f64[0] > v29)
                  v30 = 1;
                if (v20->n128_f64[0] < v29)
                  v30 = -1;
                if (!v30)
                {
                  v31 = v8[1].n128_u64[1];
                  v32 = *(unint64_t *)((char *)&a4->n128_u64[-1] + v28);
                  v33 = v31 == v32;
                  LOBYTE(v30) = v31 < v32 ? -1 : 1;
                  if (v33)
                    break;
                }
                if ((char)v30 < 1)
                {
                  v27 = (__n128 *)((char *)a4 + v28);
                  goto LABEL_57;
                }
                v17 -= 2;
                v34 = (char *)a4 + v28;
                *(double *)v34 = v29;
                *((_QWORD *)v34 + 1) = *(unint64_t *)((char *)&a4->n128_u64[-1] + v28);
                v28 -= 16;
                if (!v28)
                {
                  v27 = a4;
                  goto LABEL_57;
                }
              }
              v27 = (__n128 *)v17;
            }
LABEL_57:
            result.n128_u64[0] = v20->n128_u64[0];
            v27->n128_u64[0] = v20->n128_u64[0];
            v27->n128_u64[1] = v8[1].n128_u64[1];
          }
          n128_f64 = v20[1].n128_f64;
          v16 += 16;
          v17 = v18;
          v8 = v20;
        }
        while (&v20[1] != a2);
      }
    }
  }
  return result;
}

double sub_20B96CAD8(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, __n128 a8)
{
  unint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  int v39;
  unint64_t v40;
  BOOL v41;
  unint64_t *v42;
  unint64_t *v43;
  double v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t *i;
  double v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (a4)
      {
        v10 = 0;
        a8.n128_u64[0] = *a2;
        v11 = -a4;
        while (1)
        {
          v12 = *(double *)&a1[v10 / 8];
          if (a8.n128_f64[0] == v12)
            v13 = 0;
          else
            v13 = -127;
          if (a8.n128_f64[0] > v12)
            v13 = 1;
          if (a8.n128_f64[0] < v12)
            v13 = -1;
          if (v13
            || ((v14 = a2[1], v15 = a1[v10 / 8 + 1], v16 = v14 == v15, v14 < v15)
              ? (LOBYTE(v13) = -1)
              : (LOBYTE(v13) = 1),
                !v16))
          {
            if ((char)v13 > 0)
              break;
          }
          v10 += 16;
          if (__CFADD__(v11++, 1))
            return a8.n128_f64[0];
        }
        v18 = -v11;
        if (-v11 >= a5)
        {
          if (v11 == -1)
          {
            v78 = &a1[v10 / 8];
            *v78 = a8.n128_u64[0];
            *(double *)a2 = v12;
            v79 = v78[1];
            v78[1] = a2[1];
            a2[1] = v79;
            return a8.n128_f64[0];
          }
          if (v11 > 0)
            v18 = 1 - v11;
          v31 = v18 >> 1;
          v22 = &a1[2 * (v18 >> 1) + v10 / 8];
          if (a2 == a3)
          {
            v20 = 0;
          }
          else
          {
            v20 = 0;
            v33 = *(double *)v22;
            v34 = v22[1];
            v35 = ((char *)a3 - (char *)a2) >> 4;
            do
            {
              v36 = v35 >> 1;
              v37 = v20 + (v35 >> 1);
              v38 = *(double *)&a2[2 * v37];
              if (v38 == v33)
                v39 = 0;
              else
                v39 = -127;
              if (v38 > v33)
                v39 = 1;
              if (v38 < v33)
                v39 = -1;
              if (v39
                || ((v40 = a2[2 * v20 + 1 + 2 * v36], v41 = v40 == v34, v40 < v34)
                  ? (LOBYTE(v39) = -1)
                  : (LOBYTE(v39) = 1),
                    !v41))
              {
                if ((char)v39 >= 1)
                {
                  v20 = v37 + 1;
                  v36 = v35 + ~v36;
                }
              }
              v35 = v36;
            }
            while (v36);
          }
          v32 = (16 * v20) >> 4;
          v21 = &a2[2 * v20];
        }
        else
        {
          if (a5 >= 0)
            v19 = a5;
          else
            v19 = a5 + 1;
          v20 = v19 >> 1;
          v21 = &a2[2 * v20];
          v22 = &a1[v10 / 8];
          if ((char *)a2 - (char *)a1 != v10)
          {
            v23 = *(double *)v21;
            v24 = v21[1];
            v25 = (uint64_t)((char *)a2 - (char *)a1 - v10) >> 4;
            v22 = &a1[v10 / 8];
            do
            {
              v26 = v25 >> 1;
              v27 = &v22[2 * (v25 >> 1)];
              if (*(double *)v27 == v23)
                v28 = 0;
              else
                v28 = -127;
              if (*(double *)v27 < v23)
                v28 = 1;
              if (*(double *)v27 > v23)
                v28 = -1;
              if (!v28 && ((v29 = v27[1], v30 = v29 == v24, v29 > v24) ? (LOBYTE(v28) = -1) : (LOBYTE(v28) = 1), v30)
                || (char)v28 <= 0)
              {
                v22 = v27 + 2;
                v26 = v25 + ~v26;
              }
              v25 = v26;
            }
            while (v26);
          }
          v31 = (uint64_t)((char *)v22 - (char *)a1 - v10) >> 4;
          v32 = v20;
        }
        v42 = v21;
        if (v22 != a2)
        {
          v42 = v22;
          if (v20)
          {
            v43 = &a2[2 * v20];
            v44 = *(double *)v22;
            *v22 = a8.n128_u64[0];
            *(double *)a2 = v44;
            v45 = v22[1];
            v22[1] = a2[1];
            a2[1] = v45;
            v42 = v22 + 2;
            if (v20 != 1)
            {
              v46 = a2 + 2;
              do
              {
                if (v42 == a2)
                  a2 = v46;
                v47 = *v42;
                *v42 = *v46;
                *v46 = v47;
                v48 = v42[1];
                v42[1] = v46[1];
                v46[1] = v48;
                v42 += 2;
                v46 += 2;
              }
              while (v46 != v43);
            }
            if (v42 != a2)
            {
              v49 = v42;
              v50 = a2;
              do
              {
                while (1)
                {
                  v51 = *v49;
                  *v49 = *v50;
                  *v50 = v51;
                  v52 = v49[1];
                  v49[1] = v50[1];
                  v50[1] = v52;
                  v49 += 2;
                  v50 += 2;
                  if (v50 == v43)
                    break;
                  if (v49 == a2)
                    a2 = v50;
                }
                v50 = a2;
              }
              while (v49 != a2);
            }
          }
        }
        a4 = -(v31 + v11);
        v53 = a5 - v32;
        if (v31 + v32 >= a5 - (v31 + v32) - v11)
        {
          v59 = a6;
          v60 = &a1[v10 / 8];
          sub_20B96CAD8(v42, v21, a3, -(v31 + v11), a5 - v32, a6, a7);
          a1 = v60;
          a6 = v59;
          a2 = v22;
          v53 = v32;
          a4 = v31;
          a3 = v42;
        }
        else
        {
          v54 = v22;
          v55 = a3;
          v56 = v31;
          v57 = a6;
          v58 = v21;
          sub_20B96CAD8(&a1[v10 / 8], v54, v42, v56, v32, a6, a7);
          a2 = v58;
          a3 = v55;
          a6 = v57;
          a1 = v42;
        }
        a5 = v53;
        if (v53)
          continue;
      }
      return a8.n128_f64[0];
    }
    if (a4 > a5)
    {
      if (a3 == a2)
        return a8.n128_f64[0];
      v61 = 0;
      do
      {
        a8 = *(__n128 *)&a2[v61];
        *(__n128 *)&a6[v61] = a8;
        v61 += 2;
      }
      while (&a2[v61] != a3);
      if (!(v61 * 8))
        return a8.n128_f64[0];
      v62 = &a6[v61];
      for (i = a3 - 2; ; i -= 2)
      {
        if (a2 == a1)
        {
          v80 = 0;
          do
          {
            v81 = &i[v80];
            a8.n128_u64[0] = v62[v80 - 2];
            *v81 = a8.n128_u64[0];
            v81[1] = v62[v80 - 1];
            v80 -= 2;
          }
          while (&v62[v80] != a6);
          return a8.n128_f64[0];
        }
        v64 = *((double *)a2 - 2);
        a8.n128_u64[0] = *(v62 - 2);
        if (a8.n128_f64[0] == v64)
          v65 = 0;
        else
          v65 = -127;
        if (a8.n128_f64[0] > v64)
          v65 = 1;
        if (a8.n128_f64[0] < v64)
          v66 = -1;
        else
          v66 = v65;
        if (!v66)
        {
          v67 = *(v62 - 1);
          v68 = *(a2 - 1);
          v69 = v67 == v68;
          LOBYTE(v66) = v67 < v68 ? -1 : 1;
          if (v69)
            goto LABEL_109;
        }
        if ((char)v66 <= 0)
          break;
        *(double *)i = v64;
        v67 = *(a2 - 1);
        a2 -= 2;
LABEL_110:
        i[1] = v67;
        if (v62 == a6)
          return a8.n128_f64[0];
      }
      v67 = *(v62 - 1);
LABEL_109:
      *i = a8.n128_u64[0];
      v62 -= 2;
      goto LABEL_110;
    }
    if (a1 != a2)
    {
      v70 = 0;
      do
      {
        a8 = *(__n128 *)&a1[v70];
        *(__n128 *)&a6[v70] = a8;
        v70 += 2;
      }
      while (&a1[v70] != a2);
      if (v70 * 8)
      {
        v71 = &a6[v70];
        v72 = (uint64_t)&a6[v70 - 2];
        while (1)
        {
          if (a2 == a3)
          {
            v82 = 0;
            do
            {
              v83 = &a1[v82];
              v84 = &a6[v82];
              a8.n128_u64[0] = a6[v82];
              *v83 = a8.n128_u64[0];
              v83[1] = a6[v82 + 1];
              v82 += 2;
            }
            while ((unint64_t *)v72 != v84);
            return a8.n128_f64[0];
          }
          a8.n128_u64[0] = *a6;
          if (*(double *)a2 == *(double *)a6)
            v73 = 0;
          else
            v73 = -127;
          if (*(double *)a2 > *(double *)a6)
            v73 = 1;
          if (*(double *)a2 < *(double *)a6)
            v74 = -1;
          else
            v74 = v73;
          if (!v74)
          {
            v75 = a2[1];
            v76 = a6[1];
            v77 = v75 == v76;
            LOBYTE(v74) = v75 < v76 ? -1 : 1;
            if (v77)
              goto LABEL_134;
          }
          if ((char)v74 <= 0)
            break;
          *a1 = *a2;
          a1[1] = a2[1];
          a2 += 2;
LABEL_135:
          a1 += 2;
          if (v71 == a6)
            return a8.n128_f64[0];
        }
        v75 = a6[1];
LABEL_134:
        *a1 = a8.n128_u64[0];
        a1[1] = v75;
        a6 += 2;
        goto LABEL_135;
      }
    }
  }
  return a8.n128_f64[0];
}

void sub_20B96D034(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  signed __int32 v8;
  unsigned __int32 v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  __n128 *v18;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __n128 *v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  signed __int32 v26;
  signed __int32 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  __n128 v39;
  __n128 *v40;
  __n128 *v41;
  __n128 *v42;
  unsigned __int32 v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  __n128 *v48;
  unint64_t v49;
  uint64_t v50;
  __n128 *v51;
  __n128 *v52;
  uint64_t v53;
  __n128 *v54;
  __n128 *v55;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-1].n128_i32[0];
      v9 = a1->n128_u32[0];
      v10 = -1;
      if (v8 >= (signed __int32)a1->n128_u32[0])
        v10 = 1;
      if (v8 == v9)
      {
        v11 = a2[-1].n128_u64[1];
        v12 = a1->n128_u64[1];
        v13 = v11 >= v12;
        v14 = v11 == v12;
        v10 = -1;
        if (v13)
          v10 = 1;
        if (v14)
          v10 = 0;
      }
      if (v10 < 0)
      {
        a1->n128_u32[0] = v8;
        a2[-1].n128_u32[0] = v9;
        v15 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v15;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v22 = a1 + 1;
        if (&a1[1] != a2)
        {
          v23 = 0;
          v24 = a1;
          do
          {
            v25 = v22;
            v26 = v22->n128_u32[0];
            v27 = v24->n128_u32[0];
            if (v26 >= (signed __int32)v24->n128_u32[0])
              v28 = 1;
            else
              v28 = -1;
            if (v26 == v27)
            {
              v29 = v24[1].n128_u64[1];
              v30 = v24->n128_u64[1];
              v31 = v29 == v30;
              v28 = v29 >= v30 ? 1 : -1;
              if (v31)
                v28 = 0;
            }
            if (v28 < 0)
            {
              v32 = v24[1].n128_u64[1];
              v33 = v23;
              while (1)
              {
                v34 = (char *)a1 + v33;
                *((_DWORD *)v34 + 4) = v27;
                *((_QWORD *)v34 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v33);
                if (!v33)
                  break;
                v27 = *((_DWORD *)v34 - 4);
                if (v26 >= v27)
                  v35 = 1;
                else
                  v35 = -1;
                if (v26 == v27)
                {
                  v36 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v33);
                  v37 = v32 == v36;
                  v35 = v32 >= v36 ? 1 : -1;
                  if (v37)
                    v35 = 0;
                }
                v33 -= 16;
                if ((v35 & 0x80) == 0)
                {
                  v38 = (uint64_t)&a1[1] + v33;
                  goto LABEL_44;
                }
              }
              v38 = (uint64_t)a1;
LABEL_44:
              *(_DWORD *)v38 = v26;
              *(_QWORD *)(v38 + 8) = v32;
            }
            v22 = v25 + 1;
            v23 += 16;
            v24 = v25;
          }
          while (&v25[1] != a2);
        }
      }
    }
    else
    {
      v18 = a4;
      v19 = a3 >> 1;
      v20 = &a1[a3 >> 1];
      v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v39 = sub_20B96D314(a1, v20, v21, a4, a6);
        v40 = &v18[v19];
        sub_20B96D314(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v40, v39);
        v41 = &v18[a3];
        v42 = v40;
        while (v42 != v41)
        {
          v43 = v42->n128_u32[0];
          if ((signed __int32)v42->n128_u32[0] >= (signed __int32)v18->n128_u32[0])
            v44 = 1;
          else
            v44 = -1;
          if (v43 == v18->n128_u32[0])
          {
            v45 = v42->n128_u64[1];
            v46 = v18->n128_u64[1];
            v47 = v45 == v46;
            v44 = v45 >= v46 ? 1 : -1;
            if (v47)
              v44 = 0;
          }
          if (v44 < 0)
          {
            v48 = v42;
          }
          else
          {
            v43 = v18->n128_u32[0];
            v48 = v18;
          }
          v49 = v48->n128_u64[1];
          if (v44 < 0)
            ++v42;
          else
            ++v18;
          v7->n128_u32[0] = v43;
          v7->n128_u64[1] = v49;
          ++v7;
          if (v18 == v40)
          {
            if (v42 != v41)
            {
              v50 = 0;
              do
              {
                v51 = &v42[v50];
                v52 = &v7[v50];
                v52->n128_u32[0] = v42[v50].n128_u32[0];
                v52->n128_u64[1] = v42[v50++].n128_u64[1];
              }
              while (&v51[1] != v41);
            }
            return;
          }
        }
        if (v18 != v40)
        {
          v53 = 0;
          do
          {
            v54 = &v18[v53];
            v55 = &v7[v53];
            v55->n128_u32[0] = v18[v53].n128_u32[0];
            v55->n128_u64[1] = v18[v53++].n128_u64[1];
          }
          while (&v54[1] != v40);
        }
      }
      else
      {
        sub_20B96D034(a1, v20, v21, a4, a5);
        sub_20B96D034(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v18, a5);
        sub_20B96D5AC((char *)v7, (int *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (int *)v18, a5);
      }
    }
  }
}

__n128 sub_20B96D314(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  signed __int32 v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  signed __int32 v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  __n128 *v28;
  uint64_t v29;
  signed __int32 v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  char *v35;
  __n128 *v36;
  __n128 *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  __n128 v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      v10 = a2[-1].n128_i32[0];
      v11 = v10 == a1->n128_u32[0];
      if (v10 >= (signed __int32)a1->n128_u32[0])
        v12 = 1;
      else
        v12 = -1;
      if (v11)
      {
        v13 = a2[-1].n128_u64[1];
        v14 = a1->n128_u64[1];
        v15 = v13 >= v14;
        v16 = v13 == v14;
        v12 = -1;
        if (v15)
          v12 = 1;
        if (v16)
          v12 = 0;
      }
      if (v12 < 0)
      {
        *a4 = *v9;
        result = *a1;
      }
      else
      {
        *a4 = *a1;
        result = *v9;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v36 = &a1[a3 >> 1];
      sub_20B96D034(a1, v36, a3 >> 1, a4, a3 >> 1);
      sub_20B96D034(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v37 = &v8[a3 >> 1];
      while (v37 != a2)
      {
        if ((signed __int32)v37->n128_u32[0] >= (signed __int32)v8->n128_u32[0])
          v38 = 1;
        else
          v38 = -1;
        if (v37->n128_u32[0] == v8->n128_u32[0])
        {
          v39 = v37->n128_u64[1];
          v40 = v8->n128_u64[1];
          v41 = v39 == v40;
          v38 = v39 >= v40 ? 1 : -1;
          if (v41)
            v38 = 0;
        }
        if (v38 < 0)
        {
          v43 = *v37++;
          result = v43;
        }
        else
        {
          v42 = *v8++;
          result = v42;
        }
        *v5++ = result;
        if (v8 == v36)
        {
          if (v37 != a2)
          {
            v44 = 0;
            do
            {
              result = v37[v44];
              v5[v44++] = result;
            }
            while (&v37[v44] != a2);
          }
          return result;
        }
      }
      if (v8 != v36)
      {
        v45 = 0;
        do
        {
          result = v8[v45];
          v5[v45++] = result;
        }
        while (&v8[v45] != v36);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v17 = a1 + 1;
      if (&a1[1] != a2)
      {
        v18 = 0;
        v19 = a4;
        v20 = a4;
        do
        {
          v21 = v17;
          v22 = v20->n128_u32[0];
          ++v20;
          v23 = v17->n128_u32[0] == v22;
          if ((signed __int32)v17->n128_u32[0] >= v22)
            v24 = 1;
          else
            v24 = -1;
          if (v23)
          {
            v25 = v8[1].n128_u64[1];
            v26 = v19->n128_u64[1];
            v27 = v25 == v26;
            v24 = v25 >= v26 ? 1 : -1;
            if (v27)
              v24 = 0;
          }
          if (v24 < 0)
          {
            result = *v19;
            *v20 = *v19;
            v28 = a4;
            if (v19 != a4)
            {
              v29 = v18;
              while (1)
              {
                v30 = *(__int32 *)((char *)a4[-1].n128_i32 + v29);
                if ((signed __int32)v21->n128_u32[0] >= v30)
                  v31 = 1;
                else
                  v31 = -1;
                if (v21->n128_u32[0] == v30)
                {
                  v32 = v8[1].n128_u64[1];
                  v33 = *(unint64_t *)((char *)&a4->n128_u64[-1] + v29);
                  v34 = v32 == v33;
                  if (v32 >= v33)
                    v31 = 1;
                  else
                    v31 = -1;
                  if (v34)
                    v31 = 0;
                }
                if ((v31 & 0x80) == 0)
                  break;
                v35 = (char *)a4 + v29;
                *(_DWORD *)v35 = v30;
                *((_QWORD *)v35 + 1) = *(unint64_t *)((char *)&a4->n128_u64[-1] + v29);
                v29 -= 16;
                if (!v29)
                {
                  v28 = a4;
                  goto LABEL_48;
                }
              }
              v28 = (__n128 *)((char *)a4 + v29);
            }
LABEL_48:
            v28->n128_u32[0] = v21->n128_u32[0];
            v28->n128_u64[1] = v8[1].n128_u64[1];
          }
          else
          {
            result = *v21;
            *v20 = *v21;
          }
          v17 = v21 + 1;
          v18 += 16;
          v19 = v20;
          v8 = v21;
        }
        while (&v21[1] != a2);
      }
    }
  }
  return result;
}

char *sub_20B96D5AC(char *result, int *a2, char *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  int *v42;
  int v43;
  uint64_t v44;
  int *v45;
  int *i;
  int v47;
  uint64_t v48;
  int *v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  char *v55;
  int *v56;
  int *v57;
  uint64_t v58;
  int *v59;
  int *v60;
  int v61;
  int v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  int *v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  unint64_t v81;
  int *v82;
  uint64_t v83;
  int *v84;
  int *v85;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = *a2;
      v12 = -a4;
      while (1)
      {
        v13 = *(_DWORD *)&result[v10];
        if (v11 >= v13)
          v14 = 1;
        else
          v14 = -1;
        if (v11 == v13)
        {
          v15 = *((_QWORD *)a2 + 1);
          v16 = *(_QWORD *)&result[v10 + 8];
          v17 = v15 == v16;
          v14 = v15 >= v16 ? 1 : -1;
          if (v17)
            v14 = 0;
        }
        if (v14 < 0)
          break;
        v10 += 16;
        if (__CFADD__(v12++, 1))
          return result;
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v79 = (int *)&result[v10];
          *v79 = v11;
          *a2 = v13;
          v80 = *((_QWORD *)v79 + 1);
          *((_QWORD *)v79 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v80;
          return result;
        }
        if (v12 <= 0)
          v33 = -v12;
        else
          v33 = 1 - v12;
        v32 = v33 >> 1;
        v22 = (int *)&result[16 * (v33 >> 1) + v10];
        v21 = a2;
        if (a2 != (int *)a3)
        {
          v34 = *v22;
          v35 = *((_QWORD *)v22 + 1);
          v36 = (a3 - (char *)a2) >> 4;
          v21 = a2;
          do
          {
            v37 = v36 >> 1;
            v38 = &v21[4 * (v36 >> 1)];
            if (*v38 >= v34)
              v39 = 1;
            else
              v39 = -1;
            if (*v38 == v34)
            {
              v40 = *((_QWORD *)v38 + 1);
              v41 = v40 == v35;
              v39 = v40 >= v35 ? 1 : -1;
              if (v41)
                v39 = 0;
            }
            v42 = v38 + 4;
            v36 += ~v37;
            if (v39 < 0)
              v21 = v42;
            else
              v36 = v37;
          }
          while (v36);
        }
        v20 = ((char *)v21 - (char *)a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v19 = a5;
        else
          v19 = a5 + 1;
        v20 = v19 >> 1;
        v21 = &a2[4 * (v19 >> 1)];
        v22 = a2;
        if ((char *)a2 - result != v10)
        {
          v23 = *v21;
          v24 = *((_QWORD *)v21 + 1);
          v25 = (uint64_t)((char *)a2 - result - v10) >> 4;
          v22 = (int *)&result[v10];
          do
          {
            v26 = v25 >> 1;
            v27 = &v22[4 * (v25 >> 1)];
            if (*v27 <= v23)
              v28 = 1;
            else
              v28 = -1;
            if (*v27 == v23)
            {
              v29 = *((_QWORD *)v27 + 1);
              v30 = v29 == v24;
              v28 = v29 <= v24 ? 1 : -1;
              if (v30)
                v28 = 0;
            }
            v31 = v27 + 4;
            v25 += ~v26;
            if (v28 < 0)
              v25 = v26;
            else
              v22 = v31;
          }
          while (v25);
        }
        v32 = (uint64_t)((char *)v22 - result - v10) >> 4;
      }
      if (v22 == a2)
      {
        v45 = v21;
      }
      else if (v21 == a2)
      {
        v45 = v22;
      }
      else
      {
        v43 = *v22;
        *v22 = v11;
        *a2 = v43;
        v44 = *((_QWORD *)v22 + 1);
        *((_QWORD *)v22 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v44;
        v45 = v22 + 4;
        for (i = a2 + 4; i != v21; i += 4)
        {
          if (v45 == a2)
            a2 = i;
          v47 = *v45;
          *v45 = *i;
          *i = v47;
          v48 = *((_QWORD *)v45 + 1);
          *((_QWORD *)v45 + 1) = *((_QWORD *)i + 1);
          *((_QWORD *)i + 1) = v48;
          v45 += 4;
        }
        if (v45 != a2)
        {
          v49 = v45;
          v50 = a2;
          do
          {
            while (1)
            {
              v51 = *v49;
              *v49 = *v50;
              *v50 = v51;
              v52 = *((_QWORD *)v49 + 1);
              *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
              *((_QWORD *)v50 + 1) = v52;
              v49 += 4;
              v50 += 4;
              if (v50 == v21)
                break;
              if (v49 == a2)
                a2 = v50;
            }
            v50 = a2;
          }
          while (v49 != a2);
        }
      }
      a4 = -v32 - v12;
      v53 = a5 - v20;
      if (v32 + v20 >= a5 - (v32 + v20) - v12)
      {
        v56 = v21;
        v57 = (int *)&result[v10];
        sub_20B96D5AC(v45, v56, a3, a4, a5 - v20, a6, a7);
        result = (char *)v57;
        a2 = v22;
        v53 = v20;
        a4 = v32;
        a3 = (char *)v45;
      }
      else
      {
        v54 = v22;
        v55 = a3;
        sub_20B96D5AC(&result[v10], v54, v45, v32, v20, a6, a7);
        a3 = v55;
        result = (char *)v45;
        a2 = v21;
      }
      a5 = v53;
      if (!v53)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != (char *)a2)
      {
        v69 = 0;
        do
        {
          *(_OWORD *)&a6[v69] = *(_OWORD *)&result[v69 * 4];
          v69 += 4;
        }
        while (&result[v69 * 4] != (char *)a2);
        if (v69 * 4)
        {
          v70 = &a6[v69];
          v71 = (uint64_t)&a6[v69 - 4];
          while (a2 != (int *)a3)
          {
            v72 = *a2;
            if (*a2 >= *a6)
              v73 = 1;
            else
              v73 = -1;
            if (v72 == *a6)
            {
              v74 = *((_QWORD *)a2 + 1);
              v75 = *((_QWORD *)a6 + 1);
              v76 = v74 == v75;
              v73 = v74 >= v75 ? 1 : -1;
              if (v76)
                v73 = 0;
            }
            if (v73 < 0)
            {
              v77 = a2;
            }
            else
            {
              v72 = *a6;
              v77 = a6;
            }
            if (v73 < 0)
              a2 += 4;
            v78 = *((_QWORD *)v77 + 1);
            if ((v73 & 0x80) == 0)
              a6 += 4;
            *(_DWORD *)result = v72;
            *((_QWORD *)result + 1) = v78;
            result += 16;
            if (v70 == a6)
              return result;
          }
          v83 = 0;
          do
          {
            v84 = (int *)&result[v83 * 4];
            v85 = &a6[v83];
            *v84 = a6[v83];
            *((_QWORD *)v84 + 1) = *(_QWORD *)&a6[v83 + 2];
            v83 += 4;
          }
          while ((int *)v71 != v85);
        }
      }
    }
    else if (a3 != (char *)a2)
    {
      v58 = 0;
      do
      {
        *(_OWORD *)&a6[v58] = *(_OWORD *)&a2[v58];
        v58 += 4;
      }
      while (&a2[v58] != (int *)a3);
      if (v58 * 4)
      {
        v59 = &a6[v58];
        v60 = (int *)(a3 - 8);
        while (a2 != (int *)result)
        {
          v61 = *(a2 - 4);
          v62 = *(v59 - 4);
          if (v62 >= v61)
            v63 = 1;
          else
            v63 = -1;
          if (v62 == v61)
          {
            v64 = *((_QWORD *)v59 - 1);
            v65 = *((_QWORD *)a2 - 1);
            v66 = v64 == v65;
            v63 = v64 >= v65 ? 1 : -1;
            if (v66)
              v63 = 0;
          }
          if (v63 < 0)
          {
            v67 = a2;
          }
          else
          {
            v61 = *(v59 - 4);
            v67 = v59;
          }
          if (v63 < 0)
            a2 -= 4;
          v68 = *((_QWORD *)v67 - 1);
          if ((v63 & 0x80) == 0)
            v59 -= 4;
          *(v60 - 2) = v61;
          *(_QWORD *)v60 = v68;
          v60 -= 4;
          if (v59 == a6)
            return result;
        }
        v81 = 0;
        do
        {
          v82 = &v60[v81];
          *(v82 - 2) = v59[v81 - 4];
          *(_QWORD *)v82 = *(_QWORD *)&v59[v81 - 2];
          v81 -= 4;
        }
        while (&v59[v81] != a6);
      }
    }
  }
  return result;
}

uint64_t sub_20B96DA90(uint64_t a1, const __CFString *a2)
{
  const __CFAllocator *v4;
  CFRange v6;
  CFRange v7;

  *(_QWORD *)a1 = 10000;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  sub_20B828960(a1 + 32, 0x2710uLL);
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(a1 + 72) = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  *(_QWORD *)(a1 + 80) = CFLocaleCreate(v4, CFSTR("en"));
  v6.location = 0;
  v6.length = 0;
  *(_QWORD *)(a1 + 88) = CFStringTokenizerCreate(v4, 0, v6, 4uLL, *(CFLocaleRef *)(a1 + 72));
  v7.location = 0;
  v7.length = 0;
  *(_QWORD *)(a1 + 96) = CFStringTokenizerCreate(v4, 0, v7, 1uLL, *(CFLocaleRef *)(a1 + 72));
  return a1;
}

void sub_20B96DB74(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  const void **v3;

  sub_20B8B0328(v3, 0);
  sub_20B8CECB0(v2);
  sub_20B8CDA5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B96DBBC(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 96);
  if (v3)
    CFRelease(v3);
  sub_20B8B0328((const void **)(a1 + 80), 0);
  sub_20B8B0328((const void **)(a1 + 72), 0);
  sub_20B8CECB0(a1 + 32);
  sub_20B8CDA5C((uint64_t *)(a1 + 8));
  return a1;
}

void sub_20B96DC20(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  __CFStringTokenizer *v4;
  CFRange CurrentTokenRange;
  CFStringRef v8;
  CFStringRef v9;
  char v10;
  CFRange v11;

  if (theString)
  {
    v4 = *(__CFStringTokenizer **)(a1 + 96);
    if (v4)
    {
      v10 = 0;
      v11.length = CFStringGetLength(theString);
      v11.location = 0;
      CFStringTokenizerSetString(v4, theString, v11);
      do
      {
        if (!CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 96)))
          break;
        CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)(a1 + 96));
        if (CurrentTokenRange.location != -1)
        {
          v8 = CFStringCreateWithSubstring(0, theString, CurrentTokenRange);
          if (v8)
          {
            v9 = v8;
            (*(void (**)(uint64_t, CFStringRef, char *))(a3 + 16))(a3, v8, &v10);
            CFRelease(v9);
          }
        }
      }
      while (!v10);
    }
  }
}

void sub_20B96DCDC(uint64_t a1@<X0>, const UniChar *a2@<X1>, CFIndex a3@<X2>, const UniChar ***a4@<X8>)
{
  BOOL v5;
  const __CFString *v8;
  __CFStringTokenizer *v9;
  const UniChar **v10;
  CFRange CurrentTokenRange;
  const UniChar *v12;
  CFIndex length;
  unint64_t v14;
  const UniChar **v15;
  const UniChar **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  const UniChar **v22;
  const UniChar **v23;
  CFRange v24;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*(_QWORD *)(a1 + 88))
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    v9 = *(__CFStringTokenizer **)(a1 + 88);
    v24.length = CFStringGetLength(v8);
    v24.location = 0;
    CFStringTokenizerSetString(v9, v8, v24);
    v10 = 0;
    while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)(a1 + 88));
      if (CurrentTokenRange.location != -1)
      {
        v12 = &a2[CurrentTokenRange.location];
        if (a2)
          length = CurrentTokenRange.length;
        else
          length = 0;
        v14 = (unint64_t)a4[2];
        if ((unint64_t)v10 >= v14)
        {
          v16 = *a4;
          v17 = ((char *)v10 - (char *)*a4) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            sub_20B80CDD8();
          v19 = v14 - (_QWORD)v16;
          if (v19 >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 60)
              sub_20B800BC0();
            v21 = (char *)operator new(16 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = (const UniChar **)&v21[16 * v17];
          *v22 = v12;
          v22[1] = (const UniChar *)length;
          v23 = v22;
          if (v10 != v16)
          {
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v10 - 1);
              v23 -= 2;
              v10 -= 2;
            }
            while (v10 != v16);
            v10 = *a4;
          }
          v15 = v22 + 2;
          *a4 = v23;
          a4[1] = v22 + 2;
          a4[2] = (const UniChar **)&v21[16 * v20];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v10 = v12;
          v10[1] = (const UniChar *)length;
          v15 = v10 + 2;
        }
        a4[1] = v15;
        v10 = v15;
      }
    }
    if (v8)
      CFRelease(v8);
  }
}

void sub_20B96DE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

__CFArray *sub_20B96DED4(uint64_t a1, CFStringRef theString)
{
  __CFArray *Mutable;
  CFIndex Length;
  __CFStringTokenizer *v6;
  CFRange CurrentTokenRange;
  CFStringRef v8;
  CFStringRef v9;
  CFRange v11;

  Mutable = 0;
  if (theString)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      Length = CFStringGetLength(theString);
      Mutable = CFArrayCreateMutable(0, Length, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v6 = *(__CFStringTokenizer **)(a1 + 88);
        v11.length = CFStringGetLength(theString);
        v11.location = 0;
        CFStringTokenizerSetString(v6, theString, v11);
        while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
        {
          CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)(a1 + 88));
          if (CurrentTokenRange.location != -1)
          {
            v8 = CFStringCreateWithSubstring(0, theString, CurrentTokenRange);
            if (v8)
            {
              v9 = v8;
              CFArrayAppendValue(Mutable, v8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
  return Mutable;
}

__CFString *sub_20B96DFA4(uint64_t a1, const __CFString *a2)
{
  __CFString *Mutable;
  void *v5;
  char *v6;
  int v7;
  const UniChar *v8;
  CFIndex v9;
  CFIndex v11;
  CFIndex i;
  int CharacterAtIndex;
  const __CFString *v14;
  void *v15;
  void *v16[2];
  char v17;
  void *v18;
  unint64_t v19;
  void *__p[2];
  char v21;
  void *__src;
  CFIndex Length;
  CFRange v24;

  Mutable = 0;
  if (a2 && *(_QWORD *)(a1 + 88))
  {
    Length = 0;
    sub_20B8D0624(a2, &Length, &__src);
    v5 = __src;
    sub_20B877ED0(__p, __src, Length);
    if (sub_20B96E6E8((_QWORD *)(a1 + 32), (unsigned __int16 *)__p))
    {
      v6 = sub_20B96E270(a1, (__int128 *)__p);
      v7 = v6[23];
      if (v7 >= 0)
        v8 = (const UniChar *)v6;
      else
        v8 = *(const UniChar **)v6;
      if (v7 >= 0)
        v9 = v6[23];
      else
        v9 = *((_QWORD *)v6 + 1);
      Mutable = (__CFString *)CFStringCreateWithCharacters(0, v8, v9);
    }
    else
    {
      Length = CFStringGetLength(a2);
      if (Length <= 15)
      {
        v11 = CFStringGetLength(a2);
        if (v11 >= 1)
        {
          for (i = 0; i != v11; ++i)
          {
            CharacterAtIndex = CFStringGetCharacterAtIndex(a2, i);
            if ((CharacterAtIndex - 32) >= 0x5F && (unsigned __int16)(CharacterAtIndex + 255) >= 0x5Eu)
              break;
          }
        }
      }
      _CFStringTokenizerSetLocale();
      v24.length = Length;
      v24.location = 0;
      CFStringTokenizerSetString(*(CFStringTokenizerRef *)(a1 + 88), a2, v24);
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
      if (Mutable)
      {
        while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
        {
          v14 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 88), 0x400000uLL);
          if (v14)
          {
            CFStringAppend(Mutable, v14);
            CFRelease(v14);
          }
        }
        v19 = 0;
        sub_20B8D0624(Mutable, (CFIndex *)&v19, &v18);
        v15 = v18;
        sub_20B877ED0(v16, v18, v19);
        sub_20B8CE248((_QWORD *)a1, (__int128 *)__p, (__int128 *)v16);
        if (v17 < 0)
          operator delete(v16[0]);
        if (v15)
          MEMORY[0x20BD39C80](v15, 0x1000C80BDFB0063);
      }
    }
    if (v21 < 0)
      operator delete(__p[0]);
    if (v5)
      MEMORY[0x20BD39C80](v5, 0x1000C80BDFB0063);
  }
  return Mutable;
}

void sub_20B96E1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  if (a14 < 0)
    operator delete(__p);
  if (v23)
    MEMORY[0x20BD39C80](v23, 0x1000C80BDFB0063);
  if (a22 < 0)
    operator delete(a17);
  if (v22)
    MEMORY[0x20BD39C80](v22, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

char *sub_20B96E270(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  __int128 *v6;
  uint64_t *v7;
  __int128 *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v13;

  v4 = a1 + 32;
  v13 = a2;
  v5 = sub_20B8CDC5C(a1 + 32, (unsigned __int16 *)a2, (uint64_t)&unk_20BA37B7A, &v13);
  v6 = (__int128 *)*((_QWORD *)v5 + 5);
  v8 = *(__int128 **)(a1 + 8);
  v7 = (uint64_t *)(a1 + 8);
  if (v8 == v6)
  {
    v9 = (char *)*((_QWORD *)v5 + 5);
  }
  else
  {
    v9 = (char *)operator new(0x40uLL);
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    sub_20B8D39A0(v9 + 16, v6 + 1);
    v10 = *v7;
    *(_QWORD *)(v10 + 8) = v9;
    *v7 = (uint64_t)v9;
    *(_QWORD *)v9 = v10;
    *((_QWORD *)v9 + 1) = v7;
    v11 = *(_QWORD *)v6;
    *(_QWORD *)(v11 + 8) = *((_QWORD *)v6 + 1);
    **((_QWORD **)v6 + 1) = v11;
    sub_20B892DCC((uint64_t)(v6 + 1));
    operator delete(v6);
    v13 = a2;
    *((_QWORD *)sub_20B8CDC5C(v4, (unsigned __int16 *)a2, (uint64_t)&unk_20BA37B7A, &v13) + 5) = v9;
  }
  return v9 + 40;
}

void sub_20B96E358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B96E36C(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  char *v9;
  __int128 v10;
  __CFStringTokenizer *v11;
  unint64_t i;
  const __CFString *v13;
  const __CFString *v14;
  CFIndex Length;
  CFIndex v16;
  unint64_t v17;
  UniChar *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *j;
  __int16 v30;
  CFTypeRef cf;
  void *__p;
  char *v33;
  char *v34;
  CFTypeRef v35;
  void *__dst[2];
  char v37;
  CFRange v38;
  CFRange v39;

  if (*(_QWORD *)(a1 + 88))
    v5 = a3 == 0;
  else
    v5 = 1;
  if (v5)
  {
    sub_20B87C9E0((_BYTE *)a4, byte_20BA93B9E);
  }
  else
  {
    sub_20B877ED0(__dst, a2, a3);
    if (sub_20B96E6E8((_QWORD *)(a1 + 32), (unsigned __int16 *)__dst))
    {
      v9 = sub_20B96E270(a1, (__int128 *)__dst);
      if (v9[23] < 0)
      {
        sub_20B88DD4C((_BYTE *)a4, *(void **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *(_OWORD *)v9;
        *(_QWORD *)(a4 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)a4 = v10;
      }
    }
    else
    {
      v35 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)a2, a3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
      v11 = *(__CFStringTokenizer **)(a1 + 88);
      v39.length = CFStringGetLength((CFStringRef)v35);
      v39.location = 0;
      CFStringTokenizerSetString(v11, (CFStringRef)v35, v39);
      LOWORD(cf) = 0;
      sub_20B8D3AA4(&__p, 3 * a3, &cf);
      for (i = 0; ; i = v17)
      {
        if (!CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 88)))
        {
          sub_20B877ED0((_QWORD *)a4, __p, i);
          sub_20B8CE248((_QWORD *)a1, (__int128 *)__dst, (__int128 *)a4);
          goto LABEL_35;
        }
        v13 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 88), 0x400000uLL);
        v14 = v13;
        cf = v13;
        if (!v13)
          break;
        Length = CFStringGetLength(v13);
        v16 = Length;
        v17 = Length + i;
        v18 = (UniChar *)__p;
        v19 = v33;
        v20 = v33 - (_BYTE *)__p;
        if (Length + i > (v33 - (_BYTE *)__p) >> 1)
        {
          v21 = v17 - (v20 >> 1);
          if (v21 <= (v34 - v33) >> 1)
          {
            bzero(v33, ((2 * v17 - v20 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
            v33 = &v19[2 * v21];
          }
          else
          {
            if ((v17 & 0x8000000000000000) != 0)
              sub_20B80CDD8();
            if (v34 - (_BYTE *)__p <= v17)
              v22 = Length + i;
            else
              v22 = v34 - (_BYTE *)__p;
            if ((unint64_t)(v34 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v23 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            v24 = (char *)sub_20B80FD48((uint64_t)&v34, v23);
            v26 = v25;
            v27 = &v24[2 * (v20 >> 1)];
            bzero(v27, ((2 * v17 - v20 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
            v28 = (char *)__p;
            for (j = v33; j != v28; j -= 2)
            {
              v30 = *((_WORD *)j - 1);
              *((_WORD *)v27 - 1) = v30;
              v27 -= 2;
            }
            __p = v27;
            v33 = &v24[2 * v17];
            v34 = &v24[2 * v26];
            if (v28)
              operator delete(v28);
          }
          v18 = (UniChar *)__p;
        }
        v38.location = 0;
        v38.length = v16;
        CFStringGetCharacters(v14, v38, &v18[i]);
        if (cf)
          CFRelease(cf);
      }
      sub_20B87C9E0((_BYTE *)a4, byte_20BA93B9E);
LABEL_35:
      if (__p)
      {
        v33 = (char *)__p;
        operator delete(__p);
      }
      if (v35)
        CFRelease(v35);
    }
    if (v37 < 0)
      operator delete(__dst[0]);
  }
}

void sub_20B96E650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, uint64_t a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20B87E150(&a11, 0);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20B87E150(&a15, 0);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_20B96E6E8(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 **v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_20B89ACFC((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int16 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_20B89AD3C(v12, v11 + 8, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int16 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_20B96E7E8(int *a1, std::string *__str)
{
  int v4;
  FILE **v5;
  _QWORD *v6;
  std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _QWORD v15[8];
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::string v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;

  sub_20B8D1DC8(__str, &v23);
  v4 = sub_20B978514((uint64_t)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v5 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "dictionary ID = %d\n", v4);
  v6 = (_QWORD *)operator new();
  sub_20BA1B1B0((uint64_t)v6, *a1);
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = __str;
  else
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((sub_20BA1B3D4((uint64_t)v6, (char *)v7, (uint64_t)"r") & 1) == 0)
  {
    v10 = 0;
    goto LABEL_19;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v6 + 56))(&v21, v6);
  v8 = *a1;
  if (*a1 == 1)
  {
    v9 = 0;
  }
  else if (v8 == 2)
  {
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (v8 != 5)
      goto LABEL_15;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 48))(v6, v9);
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 0x40000000;
  v15[2] = sub_20B96EABC;
  v15[3] = &unk_24C46C500;
  v16 = v4;
  v15[4] = &v17;
  v15[5] = a1;
  v15[6] = v6;
  v15[7] = __str;
  v23.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  v23.__r_.__value_.__l.__size_ = 0x40000000;
  v23.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_20BA1BDF4;
  v24 = &unk_24C46C8B8;
  v25 = v15;
  v26 = v6;
  (*(void (**)(_QWORD *, uint64_t *, _QWORD, std::string *))(*v6 + 80))(v6, &v21, 0, &v23);
  sub_20BA1B32C(v6);
  fprintf(*v5, "Added %zu words\n", v18[3]);
  _Block_object_dispose(&v17, 8);
  v10 = 1;
LABEL_15:
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    v12 = sub_20B8F8AB8(v11);
    MEMORY[0x20BD39CB0](v12, 0x20C4093837F09);
  }
  v13 = v21;
  v21 = 0;
  if (v13)
    MEMORY[0x20BD39CB0](v13, 0x1010C40E4C6A875);
LABEL_19:
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return v10;
}

void sub_20B96EA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  sub_20B8FD7F0((void ***)va1);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

void sub_20B96EA8C(void *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20B96EA0CLL);
}

void sub_20B96EABC(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;

  v2 = (uint64_t)*a2;
  v3 = **a2;
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 56);
    v8 = (uint64_t *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 8);
    if (v3 >= (*(_QWORD *)(v5 + 16) - v7) >> 2)
    {
      sub_20B873120((uint64_t)v8, v3 + 1);
      v7 = *v8;
    }
    if (!*(_DWORD *)(v7 + 4 * v3))
    {
      v9 = sub_20B9786F4(*(_DWORD *)(a1 + 64), -1431655765 * ((v2 - v6) >> 2));
      v10 = *(_QWORD *)(v5 + 8);
      if (v3 >= (*(_QWORD *)(v5 + 16) - v10) >> 2)
      {
        sub_20B873120((uint64_t)v8, v3 + 1);
        v10 = *v8;
      }
      *(_DWORD *)(v10 + 4 * v3) = v9;
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
  }
}

void sub_20B96EB9C(void *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  FILE **v5;
  const char *v6;

  __cxa_begin_catch(a1);
  v5 = (FILE **)MEMORY[0x24BDAC8D8];
  v6 = *(const char **)(v2 + 56);
  if (v6[23] < 0)
    v6 = *(const char **)v6;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Error has occured when process word in %s ... \n", v6);
  fprintf(*v5, "Word ID = %d, token offset = %zu\n", v4, v3);
  *v1 = 1;
  __cxa_end_catch();
}

uint64_t ReverseDictionaryBuild(int a1, const char **a2)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  int *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int *v12;
  const char **v13;
  int v14;
  uint64_t v15;
  signed int v16;
  FILE *v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  const char **v21;
  char *v22;
  int v24;
  int v25;
  uint64_t v26;
  char **v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  BOOL v41;
  const char *v42;
  id v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  void *v47;
  const char *v48;
  void *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  void *v56;
  uint64_t v57;
  const char *v58;
  const __CFString *v59;
  const char *v60;
  void *v61;
  const char *v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  char v66;
  const __CFString *v67;
  const __CFString *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint8x8_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  void *v80;
  char *__s;
  char *v82;
  __int128 v83;
  __int128 v84;
  int v85;
  void *v86[2];
  char v87;
  void *__p[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  void **v92;
  void *v93;
  void *v94;
  void *v95;
  char *v96;
  _QWORD *v97;
  char v98[8];
  char *v99;
  _QWORD v100[13];

  v100[11] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if (strcmp(v4, "build"))
  {
    if (strcmp(v4, "verify"))
    {
      fwrite("Incorrect commandline arguments!\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      sub_20B96F750(*a2);
      exit(1);
    }
    v82 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (int *)MEMORY[0x24BDAF278];
    *MEMORY[0x24BDAF278] = 1;
    v8 = (uint64_t *)MEMORY[0x24BDAF270];
    do
    {
      while (1)
      {
        while (1)
        {
          LODWORD(v93) = 0;
          v9 = getopt_long(a1, (char *const *)a2, "s:i:d:", (const option *)&off_254729410, (int *)&v93);
          if (v9 <= 104)
            break;
          if (v9 == 105)
          {
            v6 = *v8;
          }
          else if (v9 == 115)
          {
            v5 = (const char *)*v8;
          }
        }
        if (v9 != 100)
          break;
        v82 = (char *)*v8;
      }
    }
    while (v9 != -1);
    if (v5)
    {
      if (v6)
      {
        if (v82)
        {
          v10 = *v7;
          if (~(_DWORD)v10 + a1 == 1)
          {
            if (!strcmp(v5, "zh-Hans"))
            {
              v25 = 1;
            }
            else if (!strcmp(v5, "zh-Hant"))
            {
              v25 = 2;
            }
            else
            {
              if (strcmp(v5, "yue-Hant"))
              {
                fwrite("Locale can must be zh-Hans or zh-Hant or yue-Hant.\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
                return 0;
              }
              v25 = 5;
            }
            __s = (char *)a2[v10 + 1];
            v43 = objc_alloc(MEMORY[0x24BDD17C8]);
            v45 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v44, v6, 4);
            v47 = (void *)objc_msgSend_initWithContentsOfFile_encoding_error_(v43, v46, v45, 4, 0);
            v49 = (void *)objc_msgSend_componentsSeparatedByString_(v47, v48, (uint64_t)CFSTR("\n"));
            v80 = v47;
            v79 = v25;
            v83 = 0u;
            v84 = 0u;
            v85 = 1065353216;
            *(_OWORD *)__p = 0u;
            v89 = 0u;
            v90 = 0u;
            v91 = 0u;
            v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)__p, &v93, 16);
            if (v53)
            {
              v54 = *(_QWORD *)v89;
              do
              {
                for (i = 0; i != v53; ++i)
                {
                  if (*(_QWORD *)v89 != v54)
                    objc_enumerationMutation(v49);
                  v56 = (void *)*((_QWORD *)__p[1] + i);
                  if (objc_msgSend_length(v56, v51, v52))
                  {
                    v57 = objc_msgSend_rangeOfString_(v56, v51, (uint64_t)CFSTR(" "));
                    v59 = (const __CFString *)objc_msgSend_substringToIndex_(v56, v58, v57);
                    v61 = (void *)objc_msgSend_substringFromIndex_(v56, v60, v57 + 1);
                    objc_msgSend_getCString_maxLength_encoding_(v61, v62, (uint64_t)v98, 100, 4);
                    v63 = atoi(v98);
                    sub_20B8D1C98(v59, v86);
                    v92 = v86;
                    *((_DWORD *)sub_20B9080F0((uint64_t)&v83, (unsigned __int8 *)v86, (uint64_t)&unk_20BA37B7A, (__int128 **)&v92)+ 10) = v63;
                    if (v87 < 0)
                      operator delete(v86[0]);
                  }
                }
                v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v51, (uint64_t)__p, &v93, 16);
              }
              while (v53);
            }

            sub_20B80BBD0(v98, __s);
            sub_20B80BBD0(__p, v82);
            v86[0] = 0;
            v64 = operator new();
            sub_20B977BE0((unsigned int *)v64, v79, (uint64_t *)v98, (const void **)__p);
            v65 = 0;
            v66 = 0;
            v86[0] = (void *)v64;
            while (1)
            {
              v67 = sub_20B97895C((_QWORD *)v64, v65);
              v68 = v67;
              if (!v67)
                goto LABEL_108;
              sub_20B8D1C98(v67, &v93);
              CFRelease(v68);
              v69 = sub_20B828414((uint64_t)&v84 + 8, (uint64_t)&v93);
              v70 = *((_QWORD *)&v83 + 1);
              if (!*((_QWORD *)&v83 + 1))
                goto LABEL_104;
              v71 = v69;
              v72 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v83 + 8));
              v72.i16[0] = vaddlv_u8(v72);
              v73 = v72.u32[0];
              if (v72.u32[0] > 1uLL)
              {
                v74 = v69;
                if (v69 >= *((_QWORD *)&v83 + 1))
                  v74 = v69 % *((_QWORD *)&v83 + 1);
              }
              else
              {
                v74 = (*((_QWORD *)&v83 + 1) - 1) & v69;
              }
              v75 = *(unsigned __int8 ***)(v83 + 8 * v74);
              if (!v75 || (v76 = *v75) == 0)
              {
LABEL_104:
                fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Didn't find word ID for %s(%d) in word to ID mapping file.\n");
                goto LABEL_105;
              }
              while (1)
              {
                v77 = *((_QWORD *)v76 + 1);
                if (v71 == v77)
                  break;
                if (v73 > 1)
                {
                  if (v77 >= v70)
                    v77 %= v70;
                }
                else
                {
                  v77 &= v70 - 1;
                }
                if (v77 != v74)
                  goto LABEL_104;
LABEL_103:
                v76 = *(unsigned __int8 **)v76;
                if (!v76)
                  goto LABEL_104;
              }
              if ((sub_20B8288BC((uint64_t)&v85, v76 + 16, (unsigned __int8 *)&v93) & 1) == 0)
                goto LABEL_103;
              if (*((_DWORD *)v76 + 10) != v65)
              {
                fprintf((FILE *)*MEMORY[0x24BDAC8D8], "word to ID mapping file contains different word ID (%d) for %s(%d)\n");
LABEL_105:
                v66 = 1;
              }
              if (SHIBYTE(v95) < 0)
                operator delete(v93);
LABEL_108:
              if (++v65 > **(_DWORD **)(v64 + 48) - 1)
              {
                v78 = sub_20B9784CC(v64);
                MEMORY[0x20BD39CB0](v78, 0x1070C40FE1C109FLL);
                if (SBYTE7(v89) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v100[0]) < 0)
                  operator delete(*(void **)v98);
                if (((v66 ^ 1) & 1) == 0)
                  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Cannot verify reverse dictionary %s!\n", __s);
                sub_20B8CECB0((uint64_t)&v83);
                return 0;
              }
            }
          }
          v17 = (FILE *)*MEMORY[0x24BDAC8D8];
          v18 = "Incorrect number of arguments.\n";
          v19 = 31;
        }
        else
        {
          v17 = (FILE *)*MEMORY[0x24BDAC8D8];
          v18 = "Directory of source dictionaries is required.\n";
          v19 = 46;
        }
      }
      else
      {
        v17 = (FILE *)*MEMORY[0x24BDAC8D8];
        v18 = "Word-ID map is required.\n";
        v19 = 25;
      }
    }
    else
    {
      v17 = (FILE *)*MEMORY[0x24BDAC8D8];
      v18 = "Locale is required.\n";
      v19 = 20;
    }
LABEL_37:
    fwrite(v18, v19, 1uLL, v17);
    sub_20B96F750(*a2);
    return 0;
  }
  v11 = 0;
  v12 = (int *)MEMORY[0x24BDAF278];
  *MEMORY[0x24BDAF278] = 1;
  v13 = (const char **)MEMORY[0x24BDAF270];
  do
  {
    while (1)
    {
      LODWORD(v93) = 0;
      v14 = getopt_long(a1, (char *const *)a2, "l:", (const option *)&off_2547293D0, (int *)&v93);
      if (v14 != 108)
        break;
      v11 = *v13;
    }
  }
  while (v14 != -1);
  v15 = *v12;
  v16 = ~(_DWORD)v15 + a1;
  if (v16 <= 1)
  {
    v17 = (FILE *)*MEMORY[0x24BDAC8D8];
    v18 = "Too few arguments.\n";
    v19 = 19;
    goto LABEL_37;
  }
  if (!v11)
  {
    v17 = (FILE *)*MEMORY[0x24BDAC8D8];
    v18 = "Language is not specified.\n";
    v19 = 27;
    goto LABEL_37;
  }
  v20 = v16;
  v21 = &a2[v15];
  v22 = (char *)v21[v16];
  if (!strcmp("zh-Hans", v11))
  {
    v24 = 1;
  }
  else if (!strcmp("zh-Hant", v11))
  {
    v24 = 2;
  }
  else
  {
    if (strcmp("yue-Hant", v11))
    {
      v17 = (FILE *)*MEMORY[0x24BDAC8D8];
      v18 = "Language must be \"zh-Hans\" or \"zh-Hant\". or \"yue-Hant\".";
      v19 = 55;
      goto LABEL_37;
    }
    v24 = 5;
  }
  *(_QWORD *)v98 = 0;
  v99 = 0;
  v100[0] = 0;
  v26 = v20 - 1;
  if (v20 != 1)
  {
    v27 = (char **)(v21 + 1);
    do
    {
      sub_20B80BBD0(__p, *v27);
      v28 = v99;
      if ((unint64_t)v99 >= v100[0])
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v99[-*(_QWORD *)v98] >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * ((uint64_t)(v100[0] - *(_QWORD *)v98) >> 3) > v31)
          v31 = 0x5555555555555556 * ((uint64_t)(v100[0] - *(_QWORD *)v98) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100[0] - *(_QWORD *)v98) >> 3) >= 0x555555555555555)
          v32 = 0xAAAAAAAAAAAAAAALL;
        else
          v32 = v31;
        v97 = v100;
        if (v32)
          v33 = (char *)sub_20B828D70((uint64_t)v100, v32);
        else
          v33 = 0;
        v34 = &v33[24 * v30];
        v93 = v33;
        v94 = v34;
        v96 = &v33[24 * v32];
        v35 = *(_OWORD *)__p;
        *((_QWORD *)v34 + 2) = v89;
        *(_OWORD *)v34 = v35;
        __p[1] = 0;
        *(_QWORD *)&v89 = 0;
        __p[0] = 0;
        v95 = v34 + 24;
        sub_20B83BAB4((uint64_t *)v98, &v93);
        v36 = v99;
        sub_20B83BC3C((uint64_t)&v93);
        v99 = v36;
        if (SBYTE7(v89) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v29 = *(_OWORD *)__p;
        *((_QWORD *)v99 + 2) = v89;
        *v28 = v29;
        v99 = (char *)v28 + 24;
      }
      ++v27;
      --v26;
    }
    while (v26);
  }
  sub_20B80BBD0(__p, v22);
  LODWORD(v93) = v24;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v37 = *(char **)v98;
  if (v99 == *(char **)v98)
  {
LABEL_64:
    v41 = sub_20B9787FC((const char *)__p, (const void **)&v94);
  }
  else
  {
    v38 = 0;
    v39 = 0;
    while (1)
    {
      v40 = sub_20B96E7E8((int *)&v93, (std::string *)&v37[v38]);
      v37 = *(char **)v98;
      if ((v40 & 1) == 0)
        break;
      ++v39;
      v38 += 24;
      if (v39 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v99[-*(_QWORD *)v98] >> 3))
        goto LABEL_64;
    }
    v42 = (const char *)(*(_QWORD *)v98 + v38);
    if (*(char *)(*(_QWORD *)v98 + v38 + 23) < 0)
      v42 = *(const char **)v42;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Failed to process %s.\n", v42);
    v41 = 0;
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (SBYTE7(v89) < 0)
    operator delete(__p[0]);
  if (!v41)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Failed to build reverse dictionary %s.\n", v22);
  v93 = v98;
  sub_20B83AFD0((void ***)&v93);
  return 0;
}

#error "20B96F630: call analysis failed (funcsize=24)"

size_t sub_20B96F750(const char *a1)
{
  FILE **v2;

  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  fwrite("Usage:\n", 7uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  fprintf(*v2, "%s <command> [args] [DictionaryFileName+] ReverseDictionaryFileName\n", a1);
  fwrite("\tbuild:\n", 8uLL, 1uLL, *v2);
  fwrite("\tDictionaryFileName argument is required for build command.", 0x3BuLL, 1uLL, *v2);
  fwrite("\t\t-l|--language: \"zh-Hans\" or \"zh-Hant\" or \"yue-Hant\".\n", 0x37uLL, 1uLL, *v2);
  fwrite("\tverify:\n", 9uLL, 1uLL, *v2);
  fwrite("\t\t-s|--locale: Locale.\n", 0x17uLL, 1uLL, *v2);
  fwrite("\t\t-i|--id: Word to word ID mapping file.\n", 0x29uLL, 1uLL, *v2);
  return fwrite("\t\t-d|--directory: Directory containing source dictionaries.\n", 0x3CuLL, 1uLL, *v2);
}

uint64_t sub_20B96F84C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B9784CC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

const void *sub_20B96F890(uint64_t a1)
{
  unint64_t v1;
  const __CFArray *v3;
  CFIndex v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == -1 || v1 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 8)))
    return 0;
  v3 = *(const __CFArray **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4 + 1;
  return CFArrayGetValueAtIndex(v3, v4);
}

unint64_t sub_20B96F8E4(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  void *ValueAtIndex;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  for (result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8)); a2 < result; result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8)))
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2);
    v8 = objc_msgSend_rawCandidate(ValueAtIndex, v6, v7);
    v9 = &v8;
    sub_20B971480((float *)(a1 + 24), &v8, (uint64_t)&unk_20BA37B7A, &v9)[3] = a2++;
  }
  return result;
}

void sub_20B96F984(uint64_t a1, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), int a3)
{
  const __CFArray *v6;
  CFRange v7;

  v6 = *(const __CFArray **)(a1 + 8);
  v7.length = CFArrayGetCount(v6);
  v7.location = 0;
  CFArraySortValues(v6, v7, a2, 0);
  if (a3)
    sub_20B96F8E4(a1, 0);
}

CFIndex sub_20B96F9F0(uint64_t a1, uint64_t a2)
{
  CFIndex v4;
  CFIndex result;
  const void *ValueAtIndex;
  char v7;

  v4 = 0;
  do
  {
    result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
    if (v4 >= result)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v4);
    v7 = 0;
    result = (*(uint64_t (**)(uint64_t, const void *, char *))(a2 + 16))(a2, ValueAtIndex, &v7);
    ++v4;
  }
  while (!v7);
  return result;
}

_QWORD *sub_20B96FA64(_QWORD *a1)
{
  __CFArray *v2;
  _QWORD *result;

  v2 = (__CFArray *)a1[1];
  if (v2)
    CFArrayRemoveAllValues(v2);
  result = sub_20B8CD6FC(a1 + 3);
  a1[2] = -1;
  return result;
}

CFIndex sub_20B96FA9C(uint64_t a1)
{
  CFIndex result;

  sub_20B8CD6FC((_QWORD *)(a1 + 24));
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (result)
    *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_20B96FAD0(uint64_t a1, void *a2)
{
  return sub_20B96FADC(a1, a2, 1, 0);
}

uint64_t sub_20B96FADC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  int v5;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  CFIndex Count;
  const char *v15;
  uint64_t v16;
  const void *v17;
  uint64_t *v18;
  uint64_t result;
  const char *v20;
  uint64_t v21;
  uint64_t **v22;
  CFIndex v23;
  void *ValueAtIndex;
  const char *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  CFIndex v29;
  uint64_t v30;
  uint64_t *v31;

  v5 = a3;
  if (a2)
  {
    v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 6)
    {
LABEL_17:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), a2);
      return 1;
    }
    v11 = objc_msgSend_rawCandidate(a2, v9, v10);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 5)
    {
      v12 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12) == 89)
      {
        v31 = (uint64_t *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
        v13 = sub_20B8CD218((_QWORD *)(a1 + 24), &v31);
        if (!v13 || v13[3] == (uint64_t *)-1)
        {
          Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
          v30 = objc_msgSend_rawCandidate(a2, v15, v16);
          v31 = &v30;
          sub_20B971480((float *)(a1 + 24), &v30, (uint64_t)&unk_20BA37B7A, &v31)[3] = Count;
          goto LABEL_17;
        }
        return 0;
      }
    }
  }
  v17 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  v18 = (uint64_t *)__dynamic_cast(v17, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  result = (*(uint64_t (**)(uint64_t *))(*v18 + 240))(v18);
  if (!(_DWORD)result)
    return result;
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, v18) & 1) != 0)
    return 0;
  v31 = (uint64_t *)objc_msgSend_rawCandidate(a2, v20, v21);
  v22 = sub_20B8CD218((_QWORD *)(a1 + 24), &v31);
  if (!v22 || (v23 = (CFIndex)v22[3], v23 == -1))
  {
    v29 = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
    v30 = (uint64_t)v18;
    v31 = &v30;
    sub_20B971480((float *)(a1 + 24), &v30, (uint64_t)&unk_20BA37B7A, &v31)[3] = v29;
    goto LABEL_17;
  }
  if (v5 == 2)
    return 0;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v23);
  v27 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v25, v26);
  if (v27)
    v28 = __dynamic_cast(v27, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v28 = 0;
  if (!v5
    || (result = (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(_QWORD *)a1 + 72))(a1, v28, v18),
        (_DWORD)result))
  {
    v31 = v18;
    sub_20B90008C((_QWORD *)(a1 + 24), &v31);
    v30 = (uint64_t)v18;
    v31 = &v30;
    sub_20B971480((float *)(a1 + 24), &v30, (uint64_t)&unk_20BA37B7A, &v31)[3] = v23;
    CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), v23, a2);
    if (a4)
    {
      result = 0;
      *a4 = 1;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_20B96FD70(uint64_t a1, uint64_t a2)
{
  CFIndex v4;
  CFIndex Count;
  uint64_t v6;
  CFIndex v7;
  void *ValueAtIndex;
  const char *v9;
  uint64_t v10;

  v4 = a2 + 1;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (Count >= v4)
    v6 = a2 + 1;
  else
    v6 = Count;
  if (v6 < 1)
    return -1;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v7);
    if (MecabraCandidateIsMLTapTypingCandidate(ValueAtIndex, v9, v10))
      break;
    if (v6 == ++v7)
      return -1;
  }
  return v7;
}

CFIndex sub_20B96FDE0(uint64_t a1)
{
  CFIndex result;
  void *ValueAtIndex;
  const char *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (result)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), 0);
    v6 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v4, v5);
    v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    return (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v7 + 504))(v7, 0);
  }
  return result;
}

CFIndex sub_20B96FE48(uint64_t a1, CFIndex a2, uint64_t a3)
{
  CFIndex result;
  CFIndex v7;
  void *ValueAtIndex;
  const char *v9;
  uint64_t v10;
  const void *v11;
  void *v12;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (a2 < result)
  {
    if (a2 + a3 >= result)
      v7 = result;
    else
      v7 = a2 + a3;
    if (a2 < v7)
    {
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2);
        v11 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v9, v10);
        v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        result = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v12 + 504))(v12, 1);
        ++a2;
      }
      while (v7 != a2);
    }
  }
  return result;
}

uint64_t sub_20B96FEEC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  void *ValueAtIndex;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    return 0;
  result = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (!result)
    return result;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 8)) <= (unint64_t)a3)
    return 0;
  v14 = objc_msgSend_rawCandidate(a2, v7, v8);
  v9 = sub_20B8CD218((_QWORD *)(a1 + 24), &v14);
  if (!v9 || (v10 = v9[3], v10 == (uint64_t *)-1))
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), a3, a2);
    goto LABEL_11;
  }
  if ((uint64_t)v10 <= a3)
    return 0;
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), a3, a2);
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), (CFIndex)v10 + 1);
  v14 = objc_msgSend_rawCandidate(ValueAtIndex, v12, v13);
  sub_20B90008C((_QWORD *)(a1 + 24), &v14);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), (CFIndex)v10 + 1);
LABEL_11:
  sub_20B96F8E4(a1, 0);
  return 1;
}

uint64_t sub_20B96FFF0(uint64_t a1, CFArrayRef theArray, _QWORD *a3)
{
  CFIndex i;
  void *ValueAtIndex;
  const char *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  CFIndex v16;
  CFIndex v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;

  if (CFArrayGetCount(theArray) != a3[2])
    return 0;
  for (i = 0; i < CFArrayGetCount(theArray); ++i)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
    v25 = (uint64_t *)objc_msgSend_rawCandidate(ValueAtIndex, v8, v9);
    v10 = sub_20B8CD218((_QWORD *)(a1 + 24), &v25);
    if (v10)
      v11 = (uint64_t)v10[3];
    else
      v11 = -1;
    if (v11 != -1)
      return 0;
  }
  v15 = (_QWORD *)*a3;
  v13 = a3 + 1;
  v14 = v15;
  if (v15 != v13)
  {
    v16 = 0;
    do
    {
      v17 = v14[4];
      v18 = (void *)CFArrayGetValueAtIndex(theArray, v16);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), v17, v18);
      v24 = objc_msgSend_rawCandidate(v18, v19, v20);
      v25 = &v24;
      sub_20B971480((float *)(a1 + 24), &v24, (uint64_t)&unk_20BA37B7A, &v25)[3] = v17;
      v21 = (_QWORD *)v14[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v14[2];
          v23 = *v22 == (_QWORD)v14;
          v14 = v22;
        }
        while (!v23);
      }
      ++v16;
      v14 = v22;
    }
    while (v22 != v13);
  }
  sub_20B96F8E4(a1, 0);
  return 1;
}

uint64_t sub_20B970164(CFArrayRef *a1, void *a2, unint64_t a3)
{
  if (CFArrayGetCount(a1[1]) <= a3)
    return (*((uint64_t (**)(CFArrayRef *, void *))*a1 + 2))(a1, a2);
  else
    return sub_20B96FEEC((uint64_t)a1, a2, a3);
}

_QWORD *sub_20B9701CC(uint64_t a1)
{
  _QWORD *result;

  result = sub_20B96FA64((_QWORD *)a1);
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

CFIndex sub_20B9701F4(uint64_t a1)
{
  CFIndex result;

  result = sub_20B96FA9C(a1);
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

void *sub_20B97021C(uint64_t a1)
{
  unint64_t v2;
  const __CFArray *v3;
  CFIndex v4;
  void *ValueAtIndex;
  const char *v6;
  uint64_t v7;
  unint64_t v8;

  while (1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2 == -1 || v2 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 8)))
      break;
    v3 = *(const __CFArray **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4 + 1;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v4);
    if (MecabraCandidateIsAutocorrectionCandidate(ValueAtIndex, v6, v7))
    {
      v8 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v8;
      if (v8 > 5 && *(_BYTE *)(a1 + 80) != 0)
        ValueAtIndex = 0;
      if (ValueAtIndex)
        return ValueAtIndex;
    }
    else if (*(_BYTE *)(a1 + 80))
    {
      if (ValueAtIndex)
        return ValueAtIndex;
    }
    else
    {
      *(_BYTE *)(a1 + 80) = 1;
      if (ValueAtIndex)
        return ValueAtIndex;
    }
  }
  return 0;
}

BOOL sub_20B9702C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  CFIndex Length;
  const __CFString *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t *))(*a3 + 104))(a3);
  v7 = 1;
  if ((v6 & 0x10) != 0)
    v8 = 1;
  else
    v8 = 2;
  if ((v6 & 4) != 0)
    v9 = 0;
  else
    v9 = v8;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if ((v10 & 0x10) != 0)
    v11 = 1;
  else
    v11 = 2;
  if ((v10 & 4) != 0)
    v11 = 0;
  if (v9 >= v11)
  {
    if (v9 > v11)
      return 0;
    v12 = (*(uint64_t (**)(uint64_t *))(*a3 + 112))(a3);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    if (v12 > v13)
      return 0;
    v15 = *a3;
    if (v12 == v13)
    {
      v16 = (*(uint64_t (**)(uint64_t *))(v15 + 56))(a3);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
      if (!v16)
      {
        v22 = sub_20B9A7C5C(3u);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          v23 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
          v26 = 138412290;
          v27 = v23;
          _os_log_fault_impl(&dword_20B7F7000, v22, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v26, 0xCu);
        }
        return 0;
      }
      if (v17)
      {
        v18 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*a3 + 56))(a3);
        Length = CFStringGetLength(v18);
        v20 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
        return Length > CFStringGetLength(v20);
      }
      v24 = sub_20B9A7C5C(3u);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v26 = 138412290;
        v27 = v25;
        _os_log_fault_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_FAULT, "Failed to create analysis string for [%@].", (uint8_t *)&v26, 0xCu);
      }
    }
    else if (((*(uint64_t (**)(uint64_t *))(v15 + 416))(a3) & 0x800) == 0)
    {
      if ((*(unsigned int (**)(uint64_t *))(*a3 + 256))(a3))
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 64);
        if ((!v21 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
          && ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) < 2
           || (*(uint64_t (**)(uint64_t *))(*a3 + 48))(a3) != 1))
        {
          return 0;
        }
      }
    }
    return 1;
  }
  return v7;
}

void sub_20B970554(uint64_t a1)
{
  _QWORD v2[9];
  _QWORD v3[4];
  _QWORD v4[4];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *(*v8)(_QWORD *, _QWORD *);
  void (*v9)(uint64_t);
  _QWORD **v10;
  _QWORD *v11[2];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  CFMutableArrayRef Mutable;

  v12 = 0;
  v13 = &v12;
  v14 = 0x3002000000;
  v15 = sub_20B970740;
  v16 = sub_20B970750;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v5 = 0;
  v6 = &v5;
  v7 = 0x4002000000;
  v8 = sub_20B97075C;
  v9 = sub_20B970798;
  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v4[3] = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  v3[3] = 1;
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = sub_20B9707A8;
  v2[3] = &unk_24C46C528;
  v2[7] = &v5;
  v2[8] = a1;
  v2[4] = v3;
  v2[5] = v4;
  v2[6] = &v12;
  sub_20B96F9F0(a1, (uint64_t)v2);
  if (CFArrayGetCount((CFArrayRef)v13[5]) >= 1)
    sub_20B96FFF0(a1, (CFArrayRef)v13[5], v6 + 5);
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(&v5, 8);
  sub_20B8292CC((uint64_t)&v10, v11[0]);
  _Block_object_dispose(&v12, 8);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_20B9706EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  const void **v33;
  uint64_t v34;
  uint64_t v35;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  sub_20B8292CC(v34, a33);
  _Block_object_dispose((const void *)(v35 - 96), 8);
  sub_20B8B035C(v33, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B970740(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_20B970750(uint64_t a1)
{
  sub_20B8B035C((const void **)(a1 + 40), 0);
}

_QWORD *sub_20B97075C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_20B970798(uint64_t a1)
{
  sub_20B8292CC(a1 + 40, *(_QWORD **)(a1 + 48));
}

void sub_20B9707A8(_QWORD *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __CFArray *v10;
  const __CFString *v11;
  __CFArray *v12;
  __CFArray *v13;
  CFIndex v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  uint64_t v18;
  CFIndex v19;
  const void *ValueAtIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _BOOL8 v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t **v37;
  CFIndex Count;
  __CFArray *theArray;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v3 = a1;
  v4 = a1[8];
  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5)
    v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v3[4] + 8);
  theArray = *(__CFArray **)(*(_QWORD *)(v3[6] + 8) + 40);
  v40 = *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 24);
  v8 = *(_QWORD *)(v3[7] + 8);
  v9 = **(_DWORD **)(v4 + 64);
  v10 = (__CFArray *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 24))(v6);
  v11 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 232))(v6);
  v12 = sub_20B93E054(v9, 0, v10, v11);
  if (v12)
  {
    v13 = v12;
    Count = CFArrayGetCount(v12);
    if (Count <= 0)
    {
      CFRelease(v13);
    }
    else
    {
      v36 = v3;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v37 = (uint64_t **)(v8 + 40);
      v41 = (_QWORD *)(v4 + 24);
      v17 = (uint64_t **)(v8 + 48);
      v18 = v40;
      v19 = Count;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v13, v14);
        v21 = (*(uint64_t (**)(void *, const void *))(*(_QWORD *)v6 + 536))(v6, ValueAtIndex);
        if (!v21)
          break;
        v22 = v21;
        v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 112))(v6);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 480))(v22, v23);
        v24 = v18 <= 1 && v15 <= 0;
        v25 = !v24;
        (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v22 + 504))(v22, v25);
        v26 = (void *)sub_20B8E1754(v22);
        v42 = objc_msgSend_rawCandidate(v26, v27, v28);
        if (sub_20B8CD218(v41, &v42))
        {

        }
        else
        {
          v29 = v7;
          v30 = *(_QWORD *)(v7 + 24);
          v31 = *v17;
          v32 = v17;
          v33 = v17;
          if (*v17)
          {
            while (1)
            {
              while (1)
              {
                v33 = (uint64_t **)v31;
                v34 = v31[4];
                if (v34 <= v30)
                  break;
                v31 = *v33;
                v32 = v33;
                if (!*v33)
                  goto LABEL_23;
              }
              if (v34 >= v30)
                break;
              v31 = v33[1];
              if (!v31)
              {
                v32 = v33 + 1;
                goto LABEL_23;
              }
            }
          }
          else
          {
LABEL_23:
            v35 = (uint64_t *)operator new(0x28uLL);
            v35[4] = v30;
            sub_20B8296A0(v37, (uint64_t)v33, v32, v35);
          }
          CFArrayAppendValue(theArray, v26);

          v7 = v29;
          ++*(_QWORD *)(v29 + 24);
          ++v15;
          v16 = 1;
          v18 = v40;
          v19 = Count;
        }
        ++v14;
      }
      while (v14 != v19);
      CFRelease(v13);
      v3 = v36;
      if ((v16 & 1) != 0)
        ++*(_QWORD *)(*(_QWORD *)(v36[5] + 8) + 24);
    }
  }
  ++*(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 24);
}

const __CFDictionary *sub_20B970A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) & 0x10) != 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return sub_20B90FE00(v4, v5, 2);
}

BOOL sub_20B970AAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  int v7;

  v6 = (*(uint64_t (**)(uint64_t *))(*a3 + 112))(a3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (v6 == v7)
    return sub_20B9702C4(a1, a2, a3);
  else
    return v6 < v7;
}

_QWORD *sub_20B970B24(_QWORD *a1)
{
  const void **v2;

  *a1 = off_24C461CC8;
  v2 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v2, 0);
  return a1;
}

void sub_20B970B68(_QWORD *a1)
{
  const void **v1;

  *a1 = off_24C461CC8;
  v1 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v1, 0);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B970BBC(uint64_t a1, CFComparisonResult (__cdecl *a2)(const void *, const void *, void *), int a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  char v25;
  const char *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  const void *v30;
  void *v31;
  char v32;
  const char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  const __CFArray *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD v44[3];
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  CFRange v65;

  sub_20B96F984(a1, a2, a3);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 64) + 24) & 0x4010) == 0x10 && CFArrayGetCount(*(CFArrayRef *)(a1 + 8)))
  {
    v38 = 0;
    v39 = (uint64_t)&v38;
    v40 = 0x2000000000;
    v41 = 0;
    v61 = 0;
    v62 = &v61;
    v63 = 0x2000000000;
    v64 = 0;
    v46 = MEMORY[0x24BDAC760];
    v47 = 0x40000000;
    v48 = sub_20B970FA0;
    v49 = &unk_24C49F848;
    v51 = &v61;
    v52 = (uint64_t *)a1;
    v50 = &v38;
    sub_20B96F9F0(a1, (uint64_t)&v46);
    _Block_object_dispose(&v61, 8);
    _Block_object_dispose(&v38, 8);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 64) + 25) & 0x40) != 0)
  {
    v61 = 0;
    v62 = &v61;
    v63 = 0x2000000000;
    LOBYTE(v64) = 1;
    v57 = 0;
    v58 = &v57;
    v59 = 0x2000000000;
    v60 = 0;
    v53 = 0;
    v54 = &v53;
    v55 = 0x2000000000;
    v56 = 0;
    v5 = MEMORY[0x24BDAC760];
    v46 = MEMORY[0x24BDAC760];
    v47 = 0x40000000;
    v48 = sub_20B97114C;
    v49 = &unk_24C46CA70;
    v50 = &v61;
    v51 = &v57;
    v52 = &v53;
    sub_20B96F9F0(a1, (uint64_t)&v46);
    v8 = (void *)v58[3];
    if (v8 && v54[3])
    {
      v9 = objc_msgSend_rawCandidate(v8, v6, v7);
      if (v9)
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
      else
        v12 = 0;
      v13 = objc_msgSend_rawCandidate((void *)v54[3], v10, v11);
      if (v13)
        LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 112))(v13);
      v16 = (double)(unint64_t)(int)v13 * 0.1;
      if ((unint64_t)v16 <= 0xA)
        v17 = 10;
      else
        v17 = (unint64_t)v16;
      v18 = objc_msgSend_rawCandidate((void *)v58[3], v14, v15);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 480))(v18, (v12 + v17));
      v19 = (void *)v58[3];
      v20 = (void *)v54[3];
      v23 = (const void *)objc_msgSend_rawCandidate(v19, v21, v22);
      v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 104))(v24);
      if ((v25 & 0x10) != 0)
        v28 = 1;
      else
        v28 = 2;
      if ((v25 & 4) != 0)
        v29 = 0;
      else
        v29 = v28;
      v30 = (const void *)objc_msgSend_rawCandidate(v20, v26, v27);
      v31 = __dynamic_cast(v30, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 104))(v31);
      if ((v32 & 0x10) != 0)
        v35 = 1;
      else
        v35 = 2;
      if ((v32 & 4) != 0)
        v35 = 0;
      if (v29 >= v35 && (v29 > v35 || sub_20B935824(v19, (char *)v20, 0) == 1))
      {
        v44[0] = 0;
        v44[1] = v44;
        v44[2] = 0x2000000000;
        v45 = 1;
        v38 = v5;
        v39 = 0x40000000;
        v40 = (uint64_t)sub_20B9711CC;
        v41 = &unk_24C49F870;
        v42 = v44;
        v43 = v17;
        sub_20B96F9F0(a1, (uint64_t)&v38);
        v37 = *(const __CFArray **)(a1 + 8);
        v65.length = CFArrayGetCount(v37);
        v65.location = 0;
        CFArraySortValues(v37, v65, a2, 0);
        _Block_object_dispose(v44, 8);
      }
      else
      {
        v36 = objc_msgSend_rawCandidate((void *)v58[3], v33, v34);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 480))(v36, v12);
      }
    }
    _Block_object_dispose(&v53, 8);
    _Block_object_dispose(&v57, 8);
    _Block_object_dispose(&v61, 8);
  }
}

void sub_20B970F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_20B970FA0(_QWORD *a1, void *a2, _BYTE *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  void *ValueAtIndex;
  const char *v16;
  uint64_t v17;
  const void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v18 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, (uint64_t)a3);
    if (v18)
    {
      v21 = __dynamic_cast(v18, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D398, 0);
      if (MecabraCandidateIsAutocorrectionCandidate(a2, v22, v23))
      {
        if (v21)
          *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = (*(double (**)(void *))(*(_QWORD *)v21 + 392))(v21);
        goto LABEL_15;
      }
    }
    else if (MecabraCandidateIsAutocorrectionCandidate(a2, v19, v20))
    {
      goto LABEL_15;
    }
LABEL_14:
    *a3 = 1;
    goto LABEL_15;
  }
  v6 = a1[6];
  if (!MecabraCandidateIsAutocorrectionCandidate(a2, (const char *)a2, (uint64_t)a3))
  {
    v9 = (const void *)objc_msgSend_rawCandidate(a2, v7, v8);
    if (!v9
      || (v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D398, 0)) == 0|| (*(double (**)(void *))(*(_QWORD *)v10 + 392))(v10) > *(double *)(*(_QWORD *)(a1[5] + 8) + 24)+ -1.3)
    {
      sub_20B96F8E4(v6, 0);
      v24 = objc_msgSend_rawCandidate(a2, v11, v12);
      v13 = sub_20B8CD218((_QWORD *)(v6 + 24), &v24);
      if (v13)
      {
        v14 = v13[3];
        if (v14 != (uint64_t *)-1)
        {
          CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v6 + 8), 0, a2);
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 8), (CFIndex)v14 + 1);
          v24 = objc_msgSend_rawCandidate(ValueAtIndex, v16, v17);
          sub_20B90008C((_QWORD *)(v6 + 24), &v24);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 8), (CFIndex)v14 + 1);
        }
      }
    }
    goto LABEL_14;
  }
LABEL_15:
  ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
}

uint64_t sub_20B97114C(_QWORD *a1, void *a2, _BYTE *a3)
{
  int v6;
  uint64_t result;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
  result = MecabraCandidateGetMatchedLengthType(a2, (const char *)a2, (uint64_t)a3);
  if (v6)
  {
    if ((_DWORD)result == 2)
    {
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = a2;
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      return result;
    }
  }
  else
  {
    if ((_DWORD)result == 2)
      return result;
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = a2;
  }
  *a3 = 1;
  return result;
}

uint64_t sub_20B9711CC(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (*(_BYTE *)(v3 + 24))
  {
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    v5 = result;
    result = MecabraCandidateGetMatchedLengthType(a2, (const char *)a2, a3);
    if ((_DWORD)result == 2)
    {
      v8 = objc_msgSend_rawCandidate(a2, v6, v7);
      v11 = objc_msgSend_rawCandidate(a2, v9, v10);
      if (v11)
        LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11);
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 480))(v8, (v11 + *(_DWORD *)(v5 + 40)));
    }
  }
  return result;
}

BOOL sub_20B971264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  return v4 < (*(int (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
}

uint64_t sub_20B9712AC()
{
  return 0;
}

_QWORD *sub_20B9712B8(_QWORD *a1)
{
  const void **v2;

  *a1 = off_24C461CC8;
  v2 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v2, 0);
  return a1;
}

void sub_20B9712FC(_QWORD *a1)
{
  const void **v1;

  *a1 = off_24C461CC8;
  v1 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v1, 0);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B971350(_QWORD *a1)
{
  const void **v2;

  *a1 = off_24C461CC8;
  v2 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v2, 0);
  return a1;
}

void sub_20B971394(_QWORD *a1)
{
  const void **v1;

  *a1 = off_24C461CC8;
  v1 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v1, 0);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9713E8(_QWORD *a1)
{
  const void **v2;

  *a1 = off_24C461CC8;
  v2 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v2, 0);
  return a1;
}

void sub_20B97142C(_QWORD *a1)
{
  const void **v1;

  *a1 = off_24C461CC8;
  v1 = (const void **)(a1 + 1);
  sub_20B84055C((uint64_t)(a1 + 3));
  sub_20B8B035C(v1, 0);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B971480(float *a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v37;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 144))(*a2);
  v9 = v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v10 <= v8)
        v4 = v8 % v10;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v14[2] + 152))(v14[2], *a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10)
        v35 %= v10;
    }
    else
    {
      v35 &= v10 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

void sub_20B971898(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9718AC(_QWORD *a1, CFTypeRef cf, int a3)
{
  CFTypeRef v5;
  _QWORD *v6;
  int64x2_t *v7;
  __CFNotificationCenter *LocalCenter;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t (***v20)();
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t (***v25)();
  _QWORD *v26;
  uint64_t (***v27)();
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t (***v38)();
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t v42;
  uint64_t (***v43)();
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t (***v55)();
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int64x2_t v59;
  uint64_t (***v60)();
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t (***v72)();
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  int64x2_t v76;
  uint64_t (***v77)();
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t (***v88)();
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  int64x2_t v92;
  uint64_t (***v93)();
  _QWORD *v95;
  uint64_t (**v96)();
  int64x2_t v97;
  uint64_t (***v98)();
  _QWORD *v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  *a1 = off_24C4612A8;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  a1[5] = v5;
  *((_DWORD *)a1 + 12) = a3;
  a1[7] = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = (_QWORD *)operator new();
  *v6 = &unk_24C461E58;
  a1[9] = 0;
  v7 = (int64x2_t *)(a1 + 9);
  a1[8] = v6;
  a1[10] = 0;
  a1[11] = 0;
  *((_BYTE *)a1 + 96) = 1;
  a1[13] = 0;
  a1[14] = 0;
  *((_BYTE *)a1 + 120) = 0;
  *(_WORD *)((char *)a1 + 121) = 1;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)sub_20B972094, (CFStringRef)qword_254729490, 0, CFNotificationSuspensionBehaviorHold);
  v9 = (_QWORD *)operator new();
  v10 = v9;
  *v9 = &unk_24C461DB8;
  v11 = a1[11];
  v12 = (_QWORD *)a1[10];
  if ((unint64_t)v12 >= v11)
  {
    v14 = ((uint64_t)v12 - v7->i64[0]) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_20B80CDD8();
    v15 = v11 - v7->i64[0];
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v99 = a1 + 11;
    if (v17)
      v18 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v20 = (uint64_t (***)())&v18[8 * v17];
    v98 = v20;
    *(_QWORD *)v19 = v10;
    v13 = v19 + 8;
    v97.i64[1] = (uint64_t)(v19 + 8);
    v22 = (_QWORD *)a1[9];
    v21 = (_QWORD *)a1[10];
    if (v21 == v22)
    {
      v24 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      do
      {
        v23 = *--v21;
        *v21 = 0;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v24 = *v7;
      v13 = (_QWORD *)v97.i64[1];
      v20 = v98;
    }
    a1[9] = v19;
    a1[10] = v13;
    v97 = v24;
    v25 = (uint64_t (***)())a1[11];
    a1[11] = v20;
    v98 = v25;
    v96 = (uint64_t (**)())v24.i64[0];
    sub_20B8821E8((uint64_t)&v96);
  }
  else
  {
    *v12 = v9;
    v13 = v12 + 1;
  }
  a1[10] = v13;
  v26 = (_QWORD *)operator new();
  v96 = &off_24C469848;
  v97.i64[0] = (uint64_t)a1;
  v98 = &v96;
  *v26 = &unk_24C464870;
  sub_20B90CCC0((uint64_t)(v26 + 1), (uint64_t)&v96);
  v95 = v26;
  v27 = v98;
  if (v98 == &v96)
  {
    v28 = 4;
    v27 = &v96;
  }
  else
  {
    if (!v98)
      goto LABEL_25;
    v28 = 5;
  }
  (*v27)[v28]();
LABEL_25:
  v30 = (_QWORD *)a1[10];
  v29 = a1[11];
  if ((unint64_t)v30 >= v29)
  {
    v32 = ((uint64_t)v30 - v7->i64[0]) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_20B80CDD8();
    v33 = v29 - v7->i64[0];
    v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    v99 = a1 + 11;
    if (v35)
      v36 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v35);
    else
      v36 = 0;
    v37 = &v36[8 * v32];
    v38 = (uint64_t (***)())&v36[8 * v35];
    v98 = v38;
    v95 = 0;
    *(_QWORD *)v37 = v26;
    v31 = v37 + 8;
    v97.i64[1] = (uint64_t)(v37 + 8);
    v40 = (_QWORD *)a1[9];
    v39 = (_QWORD *)a1[10];
    if (v39 == v40)
    {
      v42 = vdupq_n_s64((unint64_t)v39);
    }
    else
    {
      do
      {
        v41 = *--v39;
        *v39 = 0;
        *((_QWORD *)v37 - 1) = v41;
        v37 -= 8;
      }
      while (v39 != v40);
      v42 = *v7;
      v31 = (_QWORD *)v97.i64[1];
      v38 = v98;
    }
    a1[9] = v37;
    a1[10] = v31;
    v97 = v42;
    v43 = (uint64_t (***)())a1[11];
    a1[11] = v38;
    v98 = v43;
    v96 = (uint64_t (**)())v42.i64[0];
    sub_20B8821E8((uint64_t)&v96);
  }
  else
  {
    v95 = 0;
    *v30 = v26;
    v31 = v30 + 1;
  }
  a1[10] = v31;
  sub_20B973750((uint64_t *)&v95);
  v44 = (_QWORD *)operator new();
  v45 = v44;
  *v44 = &unk_24C4628B8;
  v47 = (_QWORD *)a1[10];
  v46 = a1[11];
  if ((unint64_t)v47 >= v46)
  {
    v49 = ((uint64_t)v47 - v7->i64[0]) >> 3;
    if ((unint64_t)(v49 + 1) >> 61)
      sub_20B80CDD8();
    v50 = v46 - v7->i64[0];
    v51 = v50 >> 2;
    if (v50 >> 2 <= (unint64_t)(v49 + 1))
      v51 = v49 + 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    v99 = a1 + 11;
    if (v52)
      v53 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v52);
    else
      v53 = 0;
    v54 = &v53[8 * v49];
    v55 = (uint64_t (***)())&v53[8 * v52];
    v98 = v55;
    *(_QWORD *)v54 = v45;
    v48 = v54 + 8;
    v97.i64[1] = (uint64_t)(v54 + 8);
    v57 = (_QWORD *)a1[9];
    v56 = (_QWORD *)a1[10];
    if (v56 == v57)
    {
      v59 = vdupq_n_s64((unint64_t)v56);
    }
    else
    {
      do
      {
        v58 = *--v56;
        *v56 = 0;
        *((_QWORD *)v54 - 1) = v58;
        v54 -= 8;
      }
      while (v56 != v57);
      v59 = *v7;
      v48 = (_QWORD *)v97.i64[1];
      v55 = v98;
    }
    a1[9] = v54;
    a1[10] = v48;
    v97 = v59;
    v60 = (uint64_t (***)())a1[11];
    a1[11] = v55;
    v98 = v60;
    v96 = (uint64_t (**)())v59.i64[0];
    sub_20B8821E8((uint64_t)&v96);
  }
  else
  {
    *v47 = v44;
    v48 = v47 + 1;
  }
  a1[10] = v48;
  v61 = (_QWORD *)operator new();
  v62 = v61;
  *v61 = &unk_24C4622B8;
  v61[1] = &off_24C4698A0;
  v61[4] = v61 + 1;
  v61[2] = a1;
  v95 = v61;
  v64 = (_QWORD *)a1[10];
  v63 = a1[11];
  if ((unint64_t)v64 >= v63)
  {
    v66 = ((uint64_t)v64 - v7->i64[0]) >> 3;
    if ((unint64_t)(v66 + 1) >> 61)
      sub_20B80CDD8();
    v67 = v63 - v7->i64[0];
    v68 = v67 >> 2;
    if (v67 >> 2 <= (unint64_t)(v66 + 1))
      v68 = v66 + 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v69 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    v99 = a1 + 11;
    if (v69)
      v70 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v69);
    else
      v70 = 0;
    v71 = &v70[8 * v66];
    v72 = (uint64_t (***)())&v70[8 * v69];
    v98 = v72;
    v95 = 0;
    *(_QWORD *)v71 = v62;
    v65 = v71 + 8;
    v97.i64[1] = (uint64_t)(v71 + 8);
    v74 = (_QWORD *)a1[9];
    v73 = (_QWORD *)a1[10];
    if (v73 == v74)
    {
      v76 = vdupq_n_s64((unint64_t)v73);
    }
    else
    {
      do
      {
        v75 = *--v73;
        *v73 = 0;
        *((_QWORD *)v71 - 1) = v75;
        v71 -= 8;
      }
      while (v73 != v74);
      v76 = *v7;
      v65 = (_QWORD *)v97.i64[1];
      v72 = v98;
    }
    a1[9] = v71;
    a1[10] = v65;
    v97 = v76;
    v77 = (uint64_t (***)())a1[11];
    a1[11] = v72;
    v98 = v77;
    v96 = (uint64_t (**)())v76.i64[0];
    sub_20B8821E8((uint64_t)&v96);
  }
  else
  {
    v95 = 0;
    *v64 = v61;
    v65 = v64 + 1;
  }
  a1[10] = v65;
  sub_20B973750((uint64_t *)&v95);
  v78 = (_QWORD *)operator new();
  *v78 = &unk_24C462B58;
  v78[1] = &off_24C4698F8;
  v78[4] = v78 + 1;
  v78[2] = a1;
  v95 = v78;
  v80 = (_QWORD *)a1[10];
  v79 = a1[11];
  if ((unint64_t)v80 >= v79)
  {
    v82 = ((uint64_t)v80 - v7->i64[0]) >> 3;
    if ((unint64_t)(v82 + 1) >> 61)
      sub_20B80CDD8();
    v83 = v79 - v7->i64[0];
    v84 = v83 >> 2;
    if (v83 >> 2 <= (unint64_t)(v82 + 1))
      v84 = v82 + 1;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
      v85 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v85 = v84;
    v99 = a1 + 11;
    if (v85)
    {
      v86 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v85);
      v78 = v95;
    }
    else
    {
      v86 = 0;
    }
    v87 = &v86[8 * v82];
    v88 = (uint64_t (***)())&v86[8 * v85];
    v98 = v88;
    v95 = 0;
    *(_QWORD *)v87 = v78;
    v81 = v87 + 8;
    v97.i64[1] = (uint64_t)(v87 + 8);
    v90 = (_QWORD *)a1[9];
    v89 = (_QWORD *)a1[10];
    if (v89 == v90)
    {
      v92 = vdupq_n_s64((unint64_t)v89);
    }
    else
    {
      do
      {
        v91 = *--v89;
        *v89 = 0;
        *((_QWORD *)v87 - 1) = v91;
        v87 -= 8;
      }
      while (v89 != v90);
      v92 = *v7;
      v81 = (_QWORD *)v97.i64[1];
      v88 = v98;
    }
    a1[9] = v87;
    a1[10] = v81;
    v97 = v92;
    v93 = (uint64_t (***)())a1[11];
    a1[11] = v88;
    v98 = v93;
    v96 = (uint64_t (**)())v92.i64[0];
    sub_20B8821E8((uint64_t)&v96);
  }
  else
  {
    v95 = 0;
    *v80 = v78;
    v81 = v80 + 1;
  }
  a1[10] = v81;
  sub_20B940CA0((uint64_t *)&v95, 0);
  return a1;
}

void sub_20B971FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  sub_20B940CA0((uint64_t *)&a10, 0);
  sub_20B882394(&a10);
  v13 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 64) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_20B8B035C((const void **)(v10 + 56), 0);
  a10 = (void **)(v10 + 16);
  sub_20B86F120(&a10);
  sub_20B97234C(v11, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B972094(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
}

_QWORD *sub_20B9720A4(_QWORD *a1)
{
  __CFNotificationCenter *LocalCenter;
  void *v3;
  void *v4;
  const void *v5;
  uint64_t v6;
  void **v8;

  *a1 = off_24C4612A8;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, (CFNotificationName)qword_254729490, 0);
  v3 = (void *)a1[14];
  if (v3)
  {

    a1[14] = 0;
  }
  v4 = (void *)a1[13];
  if (v4)
  {

    a1[13] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v8 = (void **)(a1 + 9);
  sub_20B882394(&v8);
  v6 = a1[8];
  a1[8] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20B8B035C((const void **)a1 + 7, 0);
  v8 = (void **)(a1 + 2);
  sub_20B86F120(&v8);
  sub_20B97234C(a1 + 1, 0);
  return a1;
}

BOOL sub_20B972178(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v3;
  const __CFURL *v4;
  const __CFString *v5;
  CFURLRef v6;
  CFURLRef v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;

  v1 = a1[5];
  if (v1)
  {
    v3 = a1 + 1;
    if (!a1[1])
    {
      sub_20B86F160(a1 + 2);
      v4 = (const __CFURL *)a1[5];
      v5 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
      v6 = sub_20B8D0CC0(v4, v5);
      if (v6)
      {
        v7 = v6;
        (*(void (**)(uint64_t *, uint64_t *))(*a1 + 176))(a1, a1 + 2);
        sub_20B9722D4((uint64_t)a1);
        v8 = operator new();
        v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1);
        v10 = *((_DWORD *)a1 + 12);
        v11 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
        v12 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
        sub_20B917700(v8, v7, (uint64_t)(a1 + 2), v9, v10, v11, v12);
        sub_20B97234C(v3, v8);
        CFRelease(v7);
      }
    }
  }
  return v1 != 0;
}

void sub_20B9722B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F2C40B10B6BF7);
  _Unwind_Resume(a1);
}

void sub_20B9722D4(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;
  const char *v7;
  uint64_t v8;

  v1 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v1)
  {
    v2 = v1;
    Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        sub_20B93AAE8((uint64_t)ValueAtIndex, v7, v8);
      }
    }
    CFRelease(v2);
  }
}

uint64_t sub_20B97234C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B917DB4(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B97238C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  result = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      if (a2)
      {
        v8 = objc_msgSend_rawCandidate(a2, v6, v7);
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) != 7;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20B972414(uint64_t a1)
{
  sub_20B97234C((uint64_t *)(a1 + 8), 0);
  sub_20B86F160((uint64_t *)(a1 + 16));
}

_QWORD *sub_20B972440(_QWORD *result)
{
  if (!result[1])
  {
    if (result[5])
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t sub_20B972460(_BYTE *a1, uint64_t a2)
{
  CFIndex Count;
  BOOL v5;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  const void *v10;

  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
  if (a1[96])
    v5 = Count <= 0;
  else
    v5 = 1;
  v6 = !v5;
  if ((_DWORD)v6 == 1)
  {
    v7 = Count;
    v8 = 0;
    v9 = Count - 1;
    do
    {
      v10 = sub_20B96ABC8(a2, v8);
      (*(void (**)(_BYTE *, const void *, BOOL, uint64_t))(*(_QWORD *)a1 + 56))(a1, v10, v8++ < v9, 1);
    }
    while (v7 != v8);
  }
  return v6;
}

uint64_t sub_20B9724F8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  int v5;
  NSObject *v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  CFIndex v15;
  CFRange RangeOfComposedCharactersAtIndex;
  const __CFAllocator *Default;
  CFStringRef v18;
  NSObject **v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[12];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BOOL4 v34;
  uint64_t v35;

  v5 = a3;
  v35 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v8 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v22 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      v25 = (_QWORD *)v22;
      if (v22)
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
        v27 = 40;
        if (!v26)
          v27 = 24;
        v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
      }
      *(_DWORD *)v28 = 138413058;
      *(_QWORD *)&v28[4] = v25;
      v29 = 1024;
      v30 = v5;
      v31 = 1024;
      v32 = 1;
      v33 = 1024;
      v34 = MecabraCandidateIsOTAWordlistCandidate((uint64_t)a2, v23, v24) != 0;
      _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[MecabraLearner::acceptCandidate] %@ isPartial:%d performLearning:%d isOTAWordlist:%d", v28, 0x1Eu);
    }
  }
  v9 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3, *(_QWORD *)v28);
  v10 = (const __CFString *)v9;
  if (v9)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    v12 = 40;
    if (!v11)
      v12 = 24;
    v10 = (const __CFString *)(*(uint64_t (**)(const __CFString *))((char *)v10->isa + v12))(v10);
  }
  if ((v5 & 1) == 0 && !CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) && (sub_20B896388(v10) & a4) == 1)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v14 = sub_20B8D0E3C(v13);
    if (CFStringGetLength(v10) >= 1)
    {
      v15 = 0;
      do
      {
        RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v10, v15);
        Default = CFAllocatorGetDefault();
        v18 = CFStringCreateWithSubstring(Default, v10, RangeOfComposedCharactersAtIndex);
        *(_QWORD *)v28 = v18;
        if (v18)
        {
          v19 = (NSObject **)sub_20B947754();
          sub_20B947974(v19, v14, (uint64_t)v18);
          CFRelease(v18);
        }
        v15 += RangeOfComposedCharactersAtIndex.length;
      }
      while (v15 < CFStringGetLength(v10));
    }
  }
  sub_20B9727D8(a1, a4);
  if (a2)
  {
    result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 248))(a1, a2);
    if (!(_DWORD)result)
      return result;
    v21 = *(void **)(a1 + 104);
    if (v21)

    *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 232))(a1, a2);
    *(_BYTE *)(a1 + 120) = v5;
    *(_BYTE *)(a1 + 122) = a4;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  }
  else
  {
    sub_20B97293C(a1);
  }
  return 1;
}

void sub_20B9727A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9727D8(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 104);
  if (!v3)
    return 0;
  if (a2)
  {
    v5 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v12 = objc_msgSend_rawCandidate(*(void **)(a1 + 104), v6, v7);
      if (v12)
      {
        v13 = (_QWORD *)v12;
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        v15 = 40;
        if (!v14)
          v15 = 24;
        v12 = (*(uint64_t (**)(_QWORD *))(*v13 + v15))(v13);
      }
      v16 = *(unsigned __int8 *)(a1 + 122);
      v17 = 138412802;
      v18 = v12;
      v19 = 1024;
      v20 = 1;
      v21 = 1024;
      v22 = v16;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MecabraLearner::flushAcceptedCandidate] S:%@ performLearning:%d shouldLearn:%d", (uint8_t *)&v17, 0x18u);
    }
    v8 = *(_BYTE *)(a1 + 122) != 0;
    v3 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v8 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _BOOL8))(*(_QWORD *)a1 + 64))(a1, v3, *(unsigned __int8 *)(a1 + 120), v8);
  v10 = *(void **)(a1 + 104);
  if (v10)
  {

    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) = 0;
  return v9;
}

void sub_20B97293C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v5[16];

  v2 = sub_20B9A7C5C(6u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraLearner::resetInternalState]", v5, 2u);
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {

    *(_QWORD *)(a1 + 112) = 0;
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {

    *(_QWORD *)(a1 + 104) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) = 0;
}

BOOL sub_20B9729E4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  const void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  CFIndex Count;
  const __CFString *v37;
  __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t MatchType;
  int v44;
  BOOL v45;
  CFMutableDictionaryRef Mutable;
  int v47;
  unsigned int v48;
  char *v49;
  const char *v50;
  int v51;
  __int16 v52;
  const char *v53;
  CFStringRef v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  _BYTE buf[12];
  __int16 v60;
  _WORD v61[9];

  *(_QWORD *)&v61[5] = *MEMORY[0x24BDAC8D0];
  if (!a4 || (v8 = sub_20B9A7C5C(6u), !os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)))
  {
    if (a2)
      goto LABEL_4;
LABEL_40:
    sub_20B97293C(a1);
    return a2 != 0;
  }
  if (a2)
  {
    v37 = (const __CFString *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
    if (v37)
    {
      v38 = (__CFString *)v37;
      v39 = (*((uint64_t (**)(const __CFString *))v37->isa + 5))(v37);
      v40 = 40;
      if (!v39)
        v40 = 24;
      v37 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v38->isa + v40))(v38);
    }
  }
  else
  {
    v37 = CFSTR("NULL");
  }
  *(_DWORD *)buf = 138412802;
  *(_QWORD *)&buf[4] = v37;
  v60 = 1024;
  *(_DWORD *)v61 = a3;
  v61[2] = 1024;
  *(_DWORD *)&v61[3] = 1;
  _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[MecabraLearner::actuallyAcceptCandidate] S:[%@] isPartial:%d performLearning:%d", buf, 0x18u);
  if (!a2)
    goto LABEL_40;
LABEL_4:
  v9 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v9)
    v12 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v12 = 0;
  v13 = *(unsigned __int8 *)(a1 + 96);
  if (!*(_BYTE *)(a1 + 96) || !a4)
    goto LABEL_15;
  if (MecabraCandidateIsEmojiCandidate(a2, v10, v11))
  {
    v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 472))(v12);
    v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 24))(v12);
    v16 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      v60 = 2112;
      *(_QWORD *)v61 = v15;
      _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "[MecabraLearner::actuallyAcceptCandidate] key: %@, emoji %@", buf, 0x16u);
      if (v14)
      {
LABEL_12:
        if (v15)
        {
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
          sub_20B93E804(v17);
        }
      }
    }
    else if (v14)
    {
      goto LABEL_12;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + 96);
LABEL_15:
  if (!v13)
    goto LABEL_48;
  v18 = objc_msgSend_rawCandidate(a2, v10, v11);
  v19 = v18;
  if (!v18
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19) != 7)
  {
    goto LABEL_48;
  }
  if (!MecabraCandidateGetAnalysisString(a2, v20, v21))
    goto LABEL_48;
  v24 = objc_msgSend_rawCandidate(a2, v22, v23);
  v25 = (_QWORD *)v24;
  if (!v24)
    goto LABEL_48;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v27 = 40;
  if (!v26)
    v27 = 24;
  if (!(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25))
    goto LABEL_48;
  v28 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > 0;
  if (!(*(unsigned int (**)(void *, uint64_t, _BOOL8))(*(_QWORD *)v12 + 248))(v12, a3, v28))
    goto LABEL_48;
  if (a4)
  {
    sub_20B972F9C(a1, (uint64_t)v12, a3);
    if ((a3 & 1) != 0)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), a2);
      v29 = sub_20B9A7C5C(6u);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v32 = objc_msgSend_rawCandidate(a2, v30, v31);
        v33 = (_QWORD *)v32;
        if (v32)
        {
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
          v35 = 40;
          if (!v34)
            v35 = 24;
          v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33 + v35))(v33);
        }
        Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v33;
        v60 = 2048;
        *(_QWORD *)v61 = Count;
        _os_log_debug_impl(&dword_20B7F7000, v29, OS_LOG_TYPE_DEBUG, "[MecabraLearner::actuallyAcceptCandidate] adding %@ to partial candidates (total count: %lu)", buf, 0x16u);
      }
      goto LABEL_48;
    }
LABEL_44:
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) >= 1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), a2);
      if (a4)
      {
        MatchType = MecabraCandidateGetMatchType(a2, v41, v42);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, MatchType);
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
    }
    goto LABEL_48;
  }
  if ((a3 & 1) == 0)
    goto LABEL_44;
LABEL_48:
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (sub_20B8D0E3C(v44))
    v45 = 0;
  else
    v45 = a4 == 0;
  if (!v45)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *(_QWORD *)buf = Mutable;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v48 = sub_20B8D0E3C(v47);
    v49 = sub_20B8D101C(v48);
    v50 = (const char *)CFStringCreateWithCString(0, v49, 0x8000100u);
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v52 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 416))(v12);
    v53 = sub_20B8D1044(v51, v52);
    v54 = CFStringCreateWithCString(0, v53, 0x8000100u);
    v55 = *(_QWORD **)(a1 + 72);
    v56 = *(_QWORD **)(a1 + 80);
    while (v55 != v56)
    {
      (*(void (**)(_QWORD, CFMutableDictionaryRef, void *, uint64_t))(*(_QWORD *)*v55 + 16))(*v55, Mutable, v12, a3);
      ++v55;
    }
    sub_20B90C8E8(*(_QWORD *)(a1 + 64), v50, (uint64_t)v54, (uint64_t)Mutable);
    if (v54)
      CFRelease(v54);
    if (v50)
      CFRelease(v50);
    if (Mutable)
      CFRelease(Mutable);
  }
  v57 = *(void **)(a1 + 112);
  if (v57)

  *(_QWORD *)(a1 + 112) = a2;
  return a2 != 0;
}

void sub_20B972F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B972F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(6u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v11 = 138413058;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 1024;
    v18 = a3;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraLearner::registerCandidate] AS:%@ DR:%@ S:%@ isPartial:%d", (uint8_t *)&v11, 0x26u);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, a3);
  return result;
}

uint64_t sub_20B9730D8(uint64_t a1)
{
  void *v2;
  void *v3;
  CFIndex Count;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {

    *(_QWORD *)(a1 + 104) = 0;
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {

    *(_QWORD *)(a1 + 112) = 0;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
  if (Count >= 1)
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), Count - 1);
  *(_BYTE *)(a1 + 120) = CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > 0;
  *(_BYTE *)(a1 + 122) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  return 1;
}

BOOL sub_20B973158(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return !v1 || sub_20B917B30(v1);
}

uint64_t sub_20B97316C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t sub_20B973178(uint64_t a1)
{
  uint64_t result;

  sub_20B97293C(a1);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return sub_20B91833C(result);
  return result;
}

void sub_20B9731AC(uint64_t a1)
{
  __CFNotificationCenter *LocalCenter;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD v8[5];

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, (CFNotificationName)qword_254729490, 0, 0, 0);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B9FB1B4;
  v8[3] = &unk_24C46C7F8;
  v8[4] = a1;
  sub_20B9FA928((void **)"FacemarkLearning", (uint64_t)v8, 0, &v6);
  sub_20B9FBF3C(v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B973274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B973288(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  __CFString *v5;
  const void *v6;
  __CFString *v7;
  const void *v8;
  __CFString *v9;
  const void *v10;
  __CFString *v11;
  const void *v12;
  __CFString *v13;
  uint64_t *v14;
  __CFArray *v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  CFNumberRef v20;
  __CFNotificationCenter *LocalCenter;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 valuePtr;
  _BYTE buf[12];
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v23 = sub_20B9A7C5C(6u);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)buf = 0;
    v24 = "[MecabraLearner::sendCandidateNotification] Invalid candidate: candidate shouldn't be null";
    goto LABEL_18;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    v23 = sub_20B9A7C5C(6u);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)buf = 0;
    v24 = "[MecabraLearner::sendCandidateNotification] Failed to create CFMutableDictionaryRef";
LABEL_18:
    _os_log_debug_impl(&dword_20B7F7000, v23, OS_LOG_TYPE_DEBUG, v24, buf, 2u);
    return;
  }
  v4 = Mutable;
  v5 = kMecabraLearningValidatorCandidateAnalysisStringKey[0];
  v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  CFDictionaryAddValue(v4, v5, v6);
  v7 = kMecabraLearningValidatorCandidateConvertedAnalysisStringKey[0];
  v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  CFDictionaryAddValue(v4, v7, v8);
  v9 = kMecabraLearningValidatorCandidateSurfaceKey[0];
  v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  CFDictionaryAddValue(v4, v9, v10);
  v11 = kMecabraLearningValidatorCandidateDictionaryReadingKey[0];
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  CFDictionaryAddValue(v4, v11, v12);
  v13 = kMecabraLearningValidatorCandidateWordBoundaryKey[0];
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  v15 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v16 = *v14;
  if (v14[1] - *v14 != 40)
  {
    v17 = 0;
    v18 = 0;
    v19 = 24;
    do
    {
      v18 += *(_WORD *)(v16 + v19);
      valuePtr = v18;
      v20 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
      *(_QWORD *)buf = v20;
      CFArrayAppendValue(v15, v20);
      if (v20)
        CFRelease(v20);
      ++v17;
      v16 = *v14;
      v19 += 40;
    }
    while (v17 < 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) - 1);
  }
  CFDictionaryAddValue(v4, v13, v15);
  if (v15)
    CFRelease(v15);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, kMecabraLearningValidatorNotificationName, 0, v4, 1u);
  v22 = sub_20B9A7C5C(6u);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v25;
    v29 = 2112;
    v30 = v26;
    _os_log_debug_impl(&dword_20B7F7000, v22, OS_LOG_TYPE_DEBUG, "[MecabraLearner::sendCandidateNotification] sent notification: reading %@ surface: %@", buf, 0x16u);
  }
  CFRelease(v4);
}

void sub_20B9735E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8CE418((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97365C()
{
  return 1;
}

uint64_t sub_20B97366C()
{
  return 0;
}

uint64_t sub_20B973674()
{
  return 0;
}

void sub_20B973684()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B973698(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469848;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9736CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469848;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9736E8(uint64_t a1)
{
  int v1;

  v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
  return sub_20B8D0E3C(v1);
}

uint64_t sub_20B973708(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B973744()
{
  return &unk_24C45EC50;
}

uint64_t *sub_20B973750(uint64_t *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 32);
    if (v2 == (_QWORD *)(v1 + 8))
    {
      v3 = 4;
      v2 = (_QWORD *)(v1 + 8);
    }
    else
    {
      if (!v2)
        goto LABEL_8;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B9737C8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9737DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4698A0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B973810(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4698A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B97382C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_20B973840(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B97387C()
{
  return &unk_24C45EC60;
}

void sub_20B97388C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9738A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4698F8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9738D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4698F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9738F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B973900(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B97393C()
{
  return &unk_24C45EC70;
}

uint64_t **sub_20B973948(uint64_t a1)
{
  uint64_t **v2;
  const char *v3;

  v2 = (uint64_t **)operator new();
  v3 = (const char *)sub_20B8D0E3C(*(_DWORD *)a1);
  sub_20B9739C0(v2, v3, *(void **)(a1 + 24));
  return v2;
}

void sub_20B97399C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1060C401CBA31CDLL);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B9739C0(uint64_t **a1, const char *a2, void *a3)
{
  unsigned int v4;
  uint64_t **v6;

  v4 = a2;
  v6 = sub_20B922640(a1, a2, a3);
  sub_20B9F6CA8((uint64_t)(v6 + 1), v4, 0, 0, a3, 0, 0, 0, 0, 1);
  return a1;
}

void sub_20B973A28(_Unwind_Exception *a1)
{
  id **v1;

  sub_20B922844(v1, 0);
  _Unwind_Resume(a1);
}

void **sub_20B973A40(void ***a1, uint64_t a2, const char *a3)
{
  void **result;

  if (!a2)
    return sub_20B9226C0(*a1, a3);
  result = (void **)sub_20B88826C(a2, kMecabraContextOptionPrivateMode);
  if (result != (void **)*MEMORY[0x24BDBD270])
    return sub_20B9226C0(*a1, a3);
  return result;
}

BOOL sub_20B973AA4(void ***a1, const char *a2, const __CFString *a3)
{
  CFIndex Length;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  int64_t v9;
  BOOL v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  UniChar v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  CFIndex v23;
  UniChar v25[64];
  CFStringRef theString;
  const UniChar *v27;
  const char *v28;
  uint64_t v29;
  CFIndex v30;
  int64_t v31;
  int64_t v32;
  CFRange v33;

  if ((!a2 || sub_20B88826C((uint64_t)a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270])
    && (objc_msgSend_containsObject_(**a1, a2, (uint64_t)a3) & 1) != 0)
  {
    return 1;
  }
  Length = CFStringGetLength(a3);
  theString = a3;
  v29 = 0;
  v30 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a3);
  CStringPtr = 0;
  v27 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a3, 0x600u);
  v31 = 0;
  v32 = 0;
  v28 = CStringPtr;
  if (Length >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 64;
    do
    {
      if ((unint64_t)v11 >= 4)
        v13 = 4;
      else
        v13 = v11;
      v14 = v30;
      if (v30 <= v11)
      {
        v15 = 0;
      }
      else if (v27)
      {
        v15 = v27[v11 + v29];
      }
      else if (v28)
      {
        v15 = v28[v29 + v11];
      }
      else
      {
        if (v32 <= v11 || v9 > v11)
        {
          v20 = v13 + v8;
          v21 = v12 - v13;
          v22 = v11 - v13;
          v23 = v22 + 64;
          if (v22 + 64 >= v30)
            v23 = v30;
          v31 = v22;
          v32 = v23;
          if (v30 >= v21)
            v14 = v21;
          v33.length = v14 + v20;
          v33.location = v22 + v29;
          CFStringGetCharacters(theString, v33, v25);
          v9 = v31;
        }
        v15 = v25[v11 - v9];
      }
      v16 = ~(_BYTE)v15;
      v17 = v15 >> 5;
      v18 = 1 << v16;
      if ((v18 & dword_20BA4F8D8[v17]) == 0
        && (dword_20BA518D8[v17] & v18) == 0
        && (dword_20BA538D8[v17] & v18) == 0)
      {
        break;
      }
      v10 = ++v11 >= Length;
      --v8;
      ++v12;
    }
    while (Length != v11);
  }
  else
  {
    return 1;
  }
  return v10;
}

uint64_t sub_20B973CB4(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B872064(v4, a2, a1 + 8, 1);
  return sub_20B8E1754(v4);
}

void sub_20B973D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B973D30(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int64x2_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int64x2_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int64x2_t v91;
  char *v92;
  _QWORD *v94;
  uint64_t v95;
  int64x2_t v96;
  char *v97;
  _QWORD *v98;

  v8 = sub_20B9718AC(a1, a2, 1);
  *v8 = off_24C462100;
  v8[16] = 0;
  v8[17] = a3;
  v8[18] = 0;
  v95 = MEMORY[0x24BDAC760];
  v96.i64[0] = 0x40000000;
  v96.i64[1] = (uint64_t)sub_20B9FB1B4;
  v97 = (char *)&unk_24C46C7F8;
  v98 = a2;
  sub_20B9FA928((void **)"FacemarkLearning", (uint64_t)&v95, 0, v8 + 19);
  a1[21] = a4;
  v9 = (_QWORD *)operator new();
  v10 = v9;
  v11 = (int64x2_t *)(a1 + 9);
  *v9 = &unk_24C462B80;
  v12 = a1[11];
  v13 = (_QWORD *)a1[10];
  if ((unint64_t)v13 >= v12)
  {
    v15 = ((uint64_t)v13 - v11->i64[0]) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      sub_20B80CDD8();
    v16 = v12 - v11->i64[0];
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    v98 = a1 + 11;
    if (v18)
      v19 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    v97 = v21;
    *(_QWORD *)v20 = v10;
    v14 = v20 + 8;
    v96.i64[1] = (uint64_t)(v20 + 8);
    v23 = (_QWORD *)a1[9];
    v22 = (_QWORD *)a1[10];
    if (v22 == v23)
    {
      v25 = vdupq_n_s64((unint64_t)v22);
    }
    else
    {
      do
      {
        v24 = *--v22;
        *v22 = 0;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v25 = *v11;
      v14 = (_QWORD *)v96.i64[1];
      v21 = v97;
    }
    a1[9] = v20;
    a1[10] = v14;
    v96 = v25;
    v26 = (char *)a1[11];
    a1[11] = v21;
    v97 = v26;
    v95 = v25.i64[0];
    sub_20B8821E8((uint64_t)&v95);
  }
  else
  {
    *v13 = v9;
    v14 = v13 + 1;
  }
  a1[10] = v14;
  v27 = (_QWORD *)operator new();
  v28 = v27;
  *v27 = &unk_24C465320;
  v30 = (_QWORD *)a1[10];
  v29 = a1[11];
  if ((unint64_t)v30 >= v29)
  {
    v32 = ((uint64_t)v30 - v11->i64[0]) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_20B80CDD8();
    v33 = v29 - v11->i64[0];
    v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    v98 = a1 + 11;
    if (v35)
      v36 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v35);
    else
      v36 = 0;
    v37 = &v36[8 * v32];
    v38 = &v36[8 * v35];
    v97 = v38;
    *(_QWORD *)v37 = v28;
    v31 = v37 + 8;
    v96.i64[1] = (uint64_t)(v37 + 8);
    v40 = (_QWORD *)a1[9];
    v39 = (_QWORD *)a1[10];
    if (v39 == v40)
    {
      v42 = vdupq_n_s64((unint64_t)v39);
    }
    else
    {
      do
      {
        v41 = *--v39;
        *v39 = 0;
        *((_QWORD *)v37 - 1) = v41;
        v37 -= 8;
      }
      while (v39 != v40);
      v42 = *v11;
      v31 = (_QWORD *)v96.i64[1];
      v38 = v97;
    }
    a1[9] = v37;
    a1[10] = v31;
    v96 = v42;
    v43 = (char *)a1[11];
    a1[11] = v38;
    v97 = v43;
    v95 = v42.i64[0];
    sub_20B8821E8((uint64_t)&v95);
  }
  else
  {
    *v30 = v27;
    v31 = v30 + 1;
  }
  a1[10] = v31;
  v44 = (_QWORD *)operator new();
  *v44 = &unk_24C4651C8;
  v44[1] = &off_24C469BB8;
  v44[4] = v44 + 1;
  v44[2] = a1;
  v94 = v44;
  v46 = (_QWORD *)a1[10];
  v45 = a1[11];
  if ((unint64_t)v46 >= v45)
  {
    v48 = ((uint64_t)v46 - v11->i64[0]) >> 3;
    if ((unint64_t)(v48 + 1) >> 61)
      sub_20B80CDD8();
    v49 = v45 - v11->i64[0];
    v50 = v49 >> 2;
    if (v49 >> 2 <= (unint64_t)(v48 + 1))
      v50 = v48 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    v98 = a1 + 11;
    if (v51)
    {
      v52 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v51);
      v44 = v94;
    }
    else
    {
      v52 = 0;
    }
    v53 = &v52[8 * v48];
    v54 = &v52[8 * v51];
    v97 = v54;
    v94 = 0;
    *(_QWORD *)v53 = v44;
    v47 = v53 + 8;
    v96.i64[1] = (uint64_t)(v53 + 8);
    v56 = (_QWORD *)a1[9];
    v55 = (_QWORD *)a1[10];
    if (v55 == v56)
    {
      v58 = vdupq_n_s64((unint64_t)v55);
    }
    else
    {
      do
      {
        v57 = *--v55;
        *v55 = 0;
        *((_QWORD *)v53 - 1) = v57;
        v53 -= 8;
      }
      while (v55 != v56);
      v58 = *v11;
      v47 = (_QWORD *)v96.i64[1];
      v54 = v97;
    }
    a1[9] = v53;
    a1[10] = v47;
    v96 = v58;
    v59 = (char *)a1[11];
    a1[11] = v54;
    v97 = v59;
    v95 = v58.i64[0];
    sub_20B8821E8((uint64_t)&v95);
  }
  else
  {
    v94 = 0;
    *v46 = v44;
    v47 = v46 + 1;
  }
  a1[10] = v47;
  sub_20B940CA0((uint64_t *)&v94, 0);
  v60 = (_QWORD *)operator new();
  v61 = v60;
  *v60 = &unk_24C4635D0;
  v63 = (_QWORD *)a1[10];
  v62 = a1[11];
  if ((unint64_t)v63 >= v62)
  {
    v65 = ((uint64_t)v63 - v11->i64[0]) >> 3;
    if ((unint64_t)(v65 + 1) >> 61)
      sub_20B80CDD8();
    v66 = v62 - v11->i64[0];
    v67 = v66 >> 2;
    if (v66 >> 2 <= (unint64_t)(v65 + 1))
      v67 = v65 + 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
      v68 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v68 = v67;
    v98 = a1 + 11;
    if (v68)
      v69 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v68);
    else
      v69 = 0;
    v70 = &v69[8 * v65];
    v71 = &v69[8 * v68];
    v97 = v71;
    *(_QWORD *)v70 = v61;
    v64 = v70 + 8;
    v96.i64[1] = (uint64_t)(v70 + 8);
    v73 = (_QWORD *)a1[9];
    v72 = (_QWORD *)a1[10];
    if (v72 == v73)
    {
      v75 = vdupq_n_s64((unint64_t)v72);
    }
    else
    {
      do
      {
        v74 = *--v72;
        *v72 = 0;
        *((_QWORD *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v72 != v73);
      v75 = *v11;
      v64 = (_QWORD *)v96.i64[1];
      v71 = v97;
    }
    a1[9] = v70;
    a1[10] = v64;
    v96 = v75;
    v76 = (char *)a1[11];
    a1[11] = v71;
    v97 = v76;
    v95 = v75.i64[0];
    sub_20B8821E8((uint64_t)&v95);
  }
  else
  {
    *v63 = v60;
    v64 = v63 + 1;
  }
  a1[10] = v64;
  v77 = (_QWORD *)operator new();
  *v77 = &unk_24C462A28;
  v77[1] = &off_24C469C10;
  v77[4] = v77 + 1;
  v77[2] = a1;
  v94 = v77;
  v79 = (_QWORD *)a1[10];
  v78 = a1[11];
  if ((unint64_t)v79 >= v78)
  {
    v81 = ((uint64_t)v79 - v11->i64[0]) >> 3;
    if ((unint64_t)(v81 + 1) >> 61)
      sub_20B80CDD8();
    v82 = v78 - v11->i64[0];
    v83 = v82 >> 2;
    if (v82 >> 2 <= (unint64_t)(v81 + 1))
      v83 = v81 + 1;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    v98 = a1 + 11;
    if (v84)
    {
      v85 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v84);
      v77 = v94;
    }
    else
    {
      v85 = 0;
    }
    v86 = &v85[8 * v81];
    v87 = &v85[8 * v84];
    v97 = v87;
    v94 = 0;
    *(_QWORD *)v86 = v77;
    v80 = v86 + 8;
    v96.i64[1] = (uint64_t)(v86 + 8);
    v89 = (_QWORD *)a1[9];
    v88 = (_QWORD *)a1[10];
    if (v88 == v89)
    {
      v91 = vdupq_n_s64((unint64_t)v88);
    }
    else
    {
      do
      {
        v90 = *--v88;
        *v88 = 0;
        *((_QWORD *)v86 - 1) = v90;
        v86 -= 8;
      }
      while (v88 != v89);
      v91 = *v11;
      v80 = (_QWORD *)v96.i64[1];
      v87 = v97;
    }
    a1[9] = v86;
    a1[10] = v80;
    v96 = v91;
    v92 = (char *)a1[11];
    a1[11] = v87;
    v97 = v92;
    v95 = v91.i64[0];
    sub_20B8821E8((uint64_t)&v95);
  }
  else
  {
    v94 = 0;
    *v79 = v77;
    v80 = v79 + 1;
  }
  a1[10] = v80;
  sub_20B940CA0((uint64_t *)&v94, 0);
  return a1;
}

void sub_20B974388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  const void **v10;
  uint64_t v11;

  sub_20B940CA0(&a9, 0);
  sub_20B811FE4(v11);
  sub_20B87E150(v10, 0);
  sub_20B9720A4(v9);
  _Unwind_Resume(a1);
}

void sub_20B974424()
{
  JUMPOUT(0x20B974408);
}

_QWORD *sub_20B97442C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24C462100;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2)
  {
    v3 = sub_20B917DB4(v2);
    MEMORY[0x20BD39CB0](v3, 0x10F2C40B10B6BF7);
  }
  sub_20B811FE4(a1 + 152);
  sub_20B87E150((const void **)(a1 + 128), 0);
  return sub_20B9720A4((_QWORD *)a1);
}

uint64_t sub_20B974494()
{
  return 2500;
}

uint64_t sub_20B97449C()
{
  return 3000;
}

uint64_t sub_20B9744A4(uint64_t a1)
{
  const __CFURL *v2;
  _BOOL8 v3;
  CFStringRef v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  const void *ValueAtIndex;
  const char *v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  _DWORD v25[2];
  __int16 v26;
  const __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(const __CFURL **)(a1 + 40);
  if (!v2 || *(_QWORD *)(a1 + 8))
    return 1;
  v5 = CFURLGetString(v2);
  v6 = sub_20B9A7C5C(0xDu);
  v7 = os_signpost_id_make_with_pointer(v6, (const void *)a1);
  v8 = sub_20B9A7C5C(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      v11 = CFSTR("N/A");
      if (v5)
        v11 = v5;
      v25[0] = 67109378;
      v25[1] = v10;
      v26 = 2112;
      v27 = v11;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SeaweedChineseLearner", "Begin init for learner type [%d] at [%@]", (uint8_t *)v25, 0x12u);
    }
  }
  v3 = sub_20B972178((uint64_t *)a1);
  if (v3)
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      sub_20B9A95CC(*(int ***)(a1 + 136), v12);
      v13 = *(_QWORD *)(a1 + 8);
      if (v13)
        sub_20B9A97F8(*(_QWORD *)(a1 + 136), v13);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    if (v14)
    {
      v15 = v14;
      Count = CFArrayGetCount(v14);
      if (Count >= 1)
      {
        v17 = Count;
        for (i = 0; i != v17; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v15, i);
          sub_20B93AAE8((uint64_t)ValueAtIndex, v20, v21);
        }
      }
      CFRelease(v15);
    }
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  sub_20B93E7CC(v22);
  v23 = sub_20B9A7C5C(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v24 = v23;
    if (os_signpost_enabled(v23))
    {
      LOWORD(v25[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v24, OS_SIGNPOST_INTERVAL_END, v7, "SeaweedChineseLearner", (const char *)&unk_20BA9505F, (uint8_t *)v25, 2u);
    }
  }
  return v3;
}

unsigned __int8 *sub_20B9746C0(uint64_t a1)
{
  int v2;

  sub_20B97234C((uint64_t *)(a1 + 8), 0);
  sub_20B86F160((uint64_t *)(a1 + 16));
  sub_20B9A9948(*(_QWORD **)(a1 + 136));
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  return sub_20B93E7CC(v2);
}

int **sub_20B97470C(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 40))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return sub_20B9A851C(*(int ***)(a1 + 136));
}

_QWORD *sub_20B97474C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  result = *(_QWORD **)(a1 + 136);
  if (result[41])
  {
    v2 = result[40];
    if (v2)
    {
      *(_QWORD *)(v2 + 24) = *(_QWORD *)(v2 + 16);
      return sub_20B9A99D0((uint64_t)result);
    }
  }
  return result;
}

uint64_t sub_20B974770(uint64_t a1, __CFString *theString, __CFString *a3, CFMutableStringRef a4, char a5)
{
  CFIndex v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  int v15;
  __CFString *v16;
  const void *v17;
  int v18;
  int v19;
  const __CFString *v20;
  const __CFString *v21;
  CFMutableArrayRef v22;
  const __CFArray *v23;
  CFIndex Count;
  CFIndex v25;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  const __CFString *v29;
  const void **v30;
  const __CFString *cf;

  if (!*(_BYTE *)(a1 + 96))
    return 0;
  if (!theString || (a5 & 1) != 0)
  {
    if (!theString)
      return 0;
LABEL_10:
    v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 3, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue(Mutable, off_2547292C0, theString);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    if ((unint64_t)a3 | (unint64_t)a4)
    {
      v16 = 0;
      v17 = 0;
      if (a3)
      {
LABEL_12:
        if (v15 == 5)
        {
          CFDictionarySetValue(Mutable, off_254729268, a3);
          if (!a4)
            goto LABEL_31;
LABEL_28:
          v30 = (const void **)&off_254729270;
LABEL_30:
          CFDictionarySetValue(Mutable, *v30, a4);
          goto LABEL_31;
        }
        CFDictionarySetValue(Mutable, off_254729278, a3);
        if (!a4)
          goto LABEL_31;
LABEL_29:
        v30 = (const void **)&off_254729280;
        goto LABEL_30;
      }
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      v19 = sub_20B8D0E3C(v18);
      v20 = (const __CFString *)sub_20BA31190(theString, v19);
      if (!v20)
      {
        v12 = sub_20B9A9B24(*(_QWORD *)(a1 + 136), Mutable);
LABEL_35:
        CFRelease(Mutable);
        return v12;
      }
      v21 = v20;
      v22 = sub_20B8D2F34(v20, v15 == 5);
      if (v22)
      {
        v23 = v22;
        cf = v21;
        v16 = CFStringCreateMutable(v13, 0);
        a4 = CFStringCreateMutable(v13, 0);
        Count = CFArrayGetCount(v23);
        if (Count >= 1)
        {
          v25 = Count;
          for (i = 0; i != v25; ++i)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v23, i);
            CFStringAppend(v16, ValueAtIndex);
            Length = CFStringGetLength(ValueAtIndex);
            v29 = CFStringCreateWithFormat(v13, 0, CFSTR("%ld"), Length);
            CFStringAppend(a4, v29);
            CFRelease(v29);
          }
        }
        CFRelease(v23);
        v21 = cf;
      }
      else
      {
        a4 = 0;
        v16 = 0;
      }
      CFRelease(v21);
      v17 = a4;
      a3 = v16;
      if (v16)
        goto LABEL_12;
    }
    if (!a4)
    {
LABEL_31:
      v12 = sub_20B9A9B24(*(_QWORD *)(a1 + 136), Mutable);
      if (v16)
        CFRelease(v16);
      if (v17)
        CFRelease(v17);
      goto LABEL_35;
    }
    if (v15 == 5)
      goto LABEL_28;
    goto LABEL_29;
  }
  v9 = CFStringGetLength(theString);
  v12 = 0;
  if (v9 && v9 <= 15)
  {
    if ((sub_20B93ADA8(theString, v10, v11) & 1) == 0 && (sub_20B896464(theString) & 1) == 0)
      return 0;
    goto LABEL_10;
  }
  return v12;
}

void sub_20B974A44(_QWORD *a1, uint64_t a2, const __CFString **a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (uint64_t *)v9;
  sub_20B974B10(&v8, a3[1], a3[2], a3[4], a3[5], 1);
  v7 = 0;
  v5 = sub_20B917E98(a2, (uint64_t)&v8, (uint64_t)&v7);
  if (a1[18] != a2)
  {
    if (v5 == 1)
    {
      sub_20B9A9C08(a1[17], (uint64_t)&v8, v7);
    }
    else if (v5 == 2)
    {
      v6 = a1[1];
      if (v6)
        sub_20B9A97F8(a1[17], v6);
    }
  }
  sub_20B8896CC((uint64_t)&v8, v9[0]);
}

void sub_20B974AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20B8896CC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B974B10(uint64_t **a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, int a6)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a2 || a6)
  {
    sub_20B8A741C(&__p, off_2547292C8[0]);
    sub_20B908BB0(a1, a2, (__int128 *)&__p);
  }
  if (a3 || a6)
  {
    sub_20B8A741C(&__p, off_2547292D0);
    sub_20B908BB0(a1, a3, (__int128 *)&__p);
  }
  if (a4 || a6)
  {
    sub_20B8A741C(&__p, off_254729260);
    sub_20B908BB0(a1, a4, (__int128 *)&__p);
  }
  if (a5 || a6)
  {
    sub_20B8A741C(&__p, off_254729288[0]);
    sub_20B908BB0(a1, a5, (__int128 *)&__p);
  }
  if (a6)
  {
    sub_20B8A741C(&__p, off_254729290[0]);
    sub_20B908BB0(a1, CFSTR("N"), (__int128 *)&__p);
    sub_20B8A741C(&__p, off_254729298[0]);
    sub_20B908C5C(a1, 0, (__int128 *)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B974C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B974C8C(CFArrayRef *a1, unsigned int a2)
{
  id v4;
  CFIndex Count;
  CFArrayRef v6;
  CFIndex v7;
  void *ValueAtIndex;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t DictionaryReading;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v24;
  const char *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  const void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  const char *v35;
  CFIndex v36;
  CFMutableStringRef Mutable;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  const void *v44;
  void *v45;
  const __CFString *v46;
  const __CFString *v47;
  const char *v48;
  uint64_t v49;
  CFIndex v50;
  CFStringRef Copy;
  unsigned int v52;
  __CFString *theString;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[18];
  CFRange v61;

  v60[16] = *MEMORY[0x24BDAC8D0];
  if (CFArrayGetCount(a1[7]) >= 2)
  {
    v52 = a2;
    v4 = objc_alloc_init(MEMORY[0x24BDD16A8]);
    v55 = objc_alloc_init(MEMORY[0x24BDD16A8]);
    v54 = objc_alloc_init(MEMORY[0x24BDD16A8]);
    theString = (__CFString *)objc_alloc_init(MEMORY[0x24BDD16A8]);
    Count = CFArrayGetCount(a1[7]);
    v6 = a1[7];
    if (Count < 1)
    {
LABEL_19:
      Mutable = CFStringCreateMutable(0, 0);
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v38, (uint64_t)&v56, v60, 16);
      if (v41)
      {
        v42 = *(_QWORD *)v57;
        while (2)
        {
          for (i = 0; i != v41; ++i)
          {
            if (*(_QWORD *)v57 != v42)
              objc_enumerationMutation(v6);
            v44 = (const void *)objc_msgSend_rawCandidate(*(void **)(*((_QWORD *)&v56 + 1) + 8 * i), v39, v40);
            v45 = __dynamic_cast(v44, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
            v46 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 440))(v45);
            v47 = v46;
            if (v46)
            {
              if (!CFStringGetLength(v46))
              {
                v61.length = CFStringGetLength(Mutable);
                v61.location = 0;
                CFStringDelete(Mutable, v61);
                goto LABEL_32;
              }
              CFStringAppend(Mutable, v47);
              CFRelease(v47);
            }
          }
          v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v39, (uint64_t)&v56, v60, 16);
          if (v41)
            continue;
          break;
        }
      }
LABEL_32:
      if (objc_msgSend_length(v4, v39, v40) && objc_msgSend_length(v55, v48, v49))
      {
        v50 = CFArrayGetCount(a1[7]);
        sub_20B977620(v60, v55, v4, Mutable, v54, v52, v50, 32);
        (*((void (**)(CFArrayRef *, _QWORD *))*a1 + 27))(a1, v60);
        (*((void (**)(CFArrayRef *, id, _QWORD))*a1 + 34))(a1, v4, (v52 >> 14) & 1);
        Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
        sub_20B87E150((const void **)a1 + 16, Copy);
        sub_20B977794(v60);
      }
      if (Mutable)
        CFRelease(Mutable);

    }
    else
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, v7);
        v11 = objc_msgSend_rawCandidate(ValueAtIndex, v9, v10);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        DictionaryReading = MecabraCandidateGetDictionaryReading(ValueAtIndex, v13, v14);
        if (!DictionaryReading)
        {
          if ((*((unsigned int (**)(CFArrayRef *))*a1 + 19))(a1) == 5)
            DictionaryReading = MecabraCandidateGetAnalysisString(ValueAtIndex, v15, v16);
          else
            DictionaryReading = 0;
        }
        v18 = objc_msgSend_rawCandidate(ValueAtIndex, v15, v16);
        if (!v18)
          break;
        v19 = (_QWORD *)v18;
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
        v21 = 40;
        if (!v20)
          v21 = 24;
        if (!(*(uint64_t (**)(_QWORD *))(*v19 + v21))(v19) || DictionaryReading == 0)
          break;
        objc_msgSend_appendString_(v4, v22, v12);
        objc_msgSend_appendString_(v55, v24, DictionaryReading);
        v27 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v25, v26);
        v28 = __dynamic_cast(v27, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        v29 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 448))(v28);
        objc_msgSend_appendString_(v54, v30, (uint64_t)v29);
        v33 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v31, v32);
        v34 = __dynamic_cast(v33, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v34 + 216))(v34))
          objc_msgSend_appendString_(theString, v35, (uint64_t)CFSTR("1"));
        else
          objc_msgSend_appendString_(theString, v35, (uint64_t)v29);
        CFRelease(v29);
        ++v7;
        v36 = CFArrayGetCount(a1[7]);
        v6 = a1[7];
        if (v36 <= v7)
          goto LABEL_19;
      }

    }
  }
}

void sub_20B9750D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20B977794((uint64_t *)va);
  _Unwind_Resume(a1);
}

CFIndex sub_20B9750F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  CFIndex result;
  const __CFString *v8;
  const __CFString *v9;
  const void *v10;
  const void *v11;
  const __CFString *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[7];

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
  if ((v6 & 0x4800) == 0x800
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2),
        v8 = (const __CFString *)result,
        (v6 & 0x4000) == 0)
    && !result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v8 = (const __CFString *)result;
  }
  if (v8)
  {
    result = CFStringGetLength(v8);
    if (result >= 1)
    {
      (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a2 + 496))(a2, v8);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, a3);
      if ((_DWORD)result)
      {
        v9 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2);
        v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 448))(a2);
        v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        if (v9)
          v12 = v9;
        else
          v12 = &stru_24C4B3660;
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
        sub_20B977620(v15, v8, v11, v12, v10, v6, v13, v14);
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 216))(a1, v15);
        if (v9)
          CFRelease(v9);
        if (v10)
          CFRelease(v10);
        return (CFIndex)sub_20B977794(v15);
      }
    }
  }
  return result;
}

void sub_20B975298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B977794((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B9752AC(uint64_t a1, char a2)
{
  return (a2 & 1) == 0 && CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) < 1;
}

uint64_t sub_20B9752D8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _QWORD v7[7];

  if (*((_BYTE *)a1 + 121) || *(_QWORD *)(a2 + 24) != 1)
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 280))(a1, a2);
    if (!(_DWORD)result)
      return result;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x800) != 0)
    {
      if (a1[18])
      {
        sub_20B977620(v7, *(const void **)(a2 + 8), *(const void **)(a2 + 16), &stru_24C4B3660, &stru_24C4B3660, v5, *(_QWORD *)(a2 + 24), 256);
        (*(void (**)(_QWORD *, _QWORD, _QWORD *))(*a1 + 208))(a1, a1[18], v7);
        sub_20B977794(v7);
        return 1;
      }
    }
    else
    {
      v6 = a1[1];
      if (v6)
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 208))(a1, v6, a2);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20B9753A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B977794((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9753BC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a2
    && (v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 7))
  {
    sub_20B9727D8(a1, a4);
    if (*(_BYTE *)(a1 + 96))
    {
      v11 = *(_QWORD *)(a1 + 152);
      v12 = (const __CFString *)objc_msgSend_surface(a2, v9, v10);
      return sub_20B9FB924(v11, v12, 0);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (MecabraCandidateIsEmojiCandidate(a2, (const char *)a2, a3))
    {
      v16 = objc_msgSend_rawCandidate(a2, v14, v15);
      if (v16)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 104))(v16) & 0x200) != 0)
        {
          v19 = (const void *)objc_msgSend_rawCandidate(a2, v17, v18);
          if (v19)
          {
            v20 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45BA50, 0);
            if (v20)
            {
              v21 = v20;
              v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 192))(v20);
              v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 184))(v21);
              v24 = sub_20B9A7C5C(6u);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                v26 = 138412546;
                v27 = v22;
                v28 = 2112;
                v29 = v23;
                _os_log_debug_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_DEBUG, "[MecabraLearner::engineSpecificCandidateRegistration] key: %@, emoji %@", (uint8_t *)&v26, 0x16u);
              }
              v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
              sub_20B93E804(v25);
            }
          }
        }
      }
    }
    sub_20B87E150((const void **)(a1 + 128), 0);
    return sub_20B9724F8(a1, a2, a3, a4);
  }
}

uint64_t sub_20B9755C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  v5 = sub_20B9183C4(a2, a3, (uint64_t)v9, (uint64_t)v8);
  if (*(_QWORD *)(a1 + 144) != a2)
    v5 = sub_20B9A9700(*(_QWORD *)(a1 + 136), v8, v9);
  v6 = v5;
  v10 = (void **)v8;
  sub_20B909E78(&v10);
  return v6;
}

void sub_20B975658(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20B909E78((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20B975670(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int Kind;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  const __CFString *DictionaryReading;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t *v27;
  _QWORD *v28[2];

  if (!a2 || MecabraCandidateIsEmojiCandidate(a2, (const char *)a2, a3))
    return 0;
  Kind = MecabraCandidateGetKind(a2, v5, v6);
  v11 = 8;
  if (Kind == 84)
    v11 = 144;
  v12 = *(_QWORD *)(a1 + v11);
  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  v13 = (const void *)objc_msgSend_rawCandidate(a2, v9, v10);
  if (v13
    && (v16 = __dynamic_cast(v13, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    v17 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v16 + 440))(v16);
  }
  else
  {
    v17 = 0;
  }
  DictionaryReading = (const __CFString *)MecabraCandidateGetDictionaryReading(a2, v14, v15);
  v21 = objc_msgSend_rawCandidate(a2, v19, v20);
  v22 = (_QWORD *)v21;
  if (v21)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v24 = 40;
    if (!v23)
      v24 = 24;
    v25 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v22 + v24))(v22);
  }
  else
  {
    v25 = 0;
  }
  sub_20B974B10(&v27, DictionaryReading, v25, v17, 0, 0);
  if (v17)
    CFRelease(v17);
  v7 = sub_20B9755C8(a1, v12, (uint64_t)&v27);
  sub_20B8896CC((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_20B9757CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20B8896CC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9757E8(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = (uint64_t *)v7;
  sub_20B974B10(&v6, a2, a3, 0, 0, 0);
  v4 = sub_20B9755C8(a1, *(_QWORD *)(a1 + 8), (uint64_t)&v6);
  sub_20B8896CC((uint64_t)&v6, v7[0]);
  return v4;
}

void sub_20B975854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20B8896CC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B97586C(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = atomic_load((unsigned __int8 *)&qword_25472BCF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472BCF8))
  {
    sub_20B80BBD0(&xmmword_25472BD10, off_2547292C8[0]);
    dword_25472BD28 = 0;
    word_25472BD2C = 1;
    byte_25472BD2E = 0;
    sub_20B80BBD0(qword_25472BD30, off_2547292D0);
    *(int *)((char *)&dword_25472BD48 + 3) = 0;
    dword_25472BD48 = 0;
    sub_20B80BBD0(qword_25472BD50, off_254729260);
    *(int *)((char *)&dword_25472BD68 + 3) = 0;
    dword_25472BD68 = 0;
    sub_20B80BBD0(qword_25472BD70, off_254729288[0]);
    *(int *)((char *)&dword_25472BD88 + 3) = 0;
    dword_25472BD88 = 0;
    sub_20B80BBD0(qword_25472BD90, off_254729290[0]);
    dword_25472BDA8 = 0;
    word_25472BDAC = 256;
    byte_25472BDAE = 0;
    sub_20B80BBD0(qword_25472BDB0, off_254729298[0]);
    dword_25472BDC8 = 1;
    word_25472BDCC = 256;
    byte_25472BDCE = 0;
    __cxa_atexit((void (*)(void *))sub_20B977B9C, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472BCF8);
  }
  v4 = 0uLL;
  v5 = 0;
  sub_20B9777DC((char *)&v4, &xmmword_25472BD10, (__int128 *)&unk_25472BDD0, 6uLL);
  sub_20B8825BC(a2);
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20B86F120(&v6);
}

void sub_20B975A3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472BCF8);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B975A78()
{
  return CFSTR("LearningDictionary");
}

uint64_t sub_20B975A84(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_20B973178(a1);
  v3 = *(_QWORD **)(a1 + 136);
  v4 = v3[38];
  if (v4)
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 16);
  v5 = v3[39];
  if (v5)
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 16);
  v6 = v3[40];
  if (v6)
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 16);
  return result;
}

uint64_t sub_20B975AD8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (result)
  {
    v5 = result;
    if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
      && (!a2
       || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
           (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) != 7)))
    {
      v9 = objc_msgSend_rawCandidate(a2, v6, v7);
      return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9) & 0x100) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B975B74(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = sub_20B917B30(v2);
  else
    v3 = 1;
  return v3 & sub_20B9FBCFC(*(_QWORD *)(a1 + 152));
}

BOOL sub_20B975BB4(uint64_t *a1)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  return sub_20B9FBC48(a1[19]);
}

BOOL sub_20B975BE0(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  BOOL v4;

  v2 = *(const __CFString **)(a2 + 8);
  v3 = *(const __CFString **)(a2 + 16);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4
      && (unint64_t)(CFStringGetLength(v2) - 65) >= 0xFFFFFFFFFFFFFFC0
      && (unint64_t)(CFStringGetLength(v3) - 1) < 0x10;
}

uint64_t sub_20B975C34(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 168);
  if (*(_BYTE *)(v1 + 5))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 168) + 16))(*(_QWORD *)(v1 + 168), *(_QWORD *)(*(_QWORD *)(v1 + 8) + 32));
  else
    return 0;
}

__CFString *sub_20B975C60(int a1, void *lpsrc)
{
  void *v2;
  int **v3;
  int *v4;
  int *v5;
  __CFString **v6;
  char v7;
  char v8;
  int v9;
  __CFString **v10;

  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45D698, 0)) != 0)
  {
    v3 = (int **)(*(uint64_t (**)(void *))(*(_QWORD *)v2 + 560))(v2);
    v4 = *v3;
    v5 = v3[1];
    v6 = &off_24C49C8C8;
    if (*v3 != v5)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *v4++;
        v8 |= v9 == 2;
        v7 |= v9 != 2;
      }
      while (v4 != v5);
      v10 = &off_24C49C8D0;
      if ((v7 & 1) != 0)
        v10 = &off_24C49C8D8;
      if ((v8 & 1) != 0)
        v6 = v10;
    }
  }
  else
  {
    v6 = &off_24C49C8C8;
  }
  return *v6;
}

_QWORD *sub_20B975D10(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;

  *sub_20B973D30(a1, a2, a3, a4) = off_24C463490;
  v5 = (_QWORD *)operator new();
  *v5 = &unk_24C464848;
  v5[1] = &off_24C469E78;
  v5[4] = v5 + 1;
  v5[2] = a1;
  v23 = v5;
  v6 = (_QWORD *)a1[10];
  v7 = a1[11];
  if ((unint64_t)v6 >= v7)
  {
    v9 = a1[9];
    v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_20B80CDD8();
    v11 = v7 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v27 = a1 + 11;
    if (v13)
      v14 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v26 = v16;
    v23 = 0;
    *(_QWORD *)v15 = v5;
    v8 = v15 + 8;
    v25.i64[1] = (uint64_t)(v15 + 8);
    v18 = (_QWORD *)a1[9];
    v17 = (_QWORD *)a1[10];
    if (v17 == v18)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *--v17;
        *v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)(a1 + 9);
      v8 = (_QWORD *)v25.i64[1];
      v16 = v26;
    }
    a1[9] = v15;
    a1[10] = v8;
    v25 = v20;
    v21 = (char *)a1[11];
    a1[11] = v16;
    v26 = v21;
    v24 = v20.i64[0];
    sub_20B8821E8((uint64_t)&v24);
  }
  else
  {
    v23 = 0;
    *v6 = v5;
    v8 = v6 + 1;
  }
  a1[10] = v8;
  sub_20B973750((uint64_t *)&v23);
  return a1;
}

void sub_20B975E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20B973750(&a9);
  sub_20B97442C(v9);
  _Unwind_Resume(a1);
}

BOOL sub_20B975EB0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  const __CFString *v5;
  const __CFString *v6;
  int CharacterAtIndex;
  _DWORD v9[2];

  result = sub_20B975BE0(a1, a2);
  if (result)
  {
    result = 1;
    if (*(_DWORD *)(a2 + 52) == 1)
    {
      v5 = *(const __CFString **)(a2 + 8);
      v6 = *(const __CFString **)(a2 + 16);
      if (CFStringCompare(v5, v6, 0) == kCFCompareEqualTo)
      {
        if (CFStringGetLength(v6) == 1)
        {
          CharacterAtIndex = CFStringGetCharacterAtIndex(v6, 0);
          if ((CharacterAtIndex - 105) <= 0xD && ((1 << (CharacterAtIndex - 105)) & 0x3001) != 0)
            return 0;
        }
        v9[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
        v9[1] = 4;
        if (sub_20BA01784((uint64_t)v9, v5))
          return 0;
      }
    }
  }
  return result;
}

__CFArray *sub_20B975F7C()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("DynamicPhraseLexicon_zh_Hans.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_zh_Hans.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_zh_Hans.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("StructuralPinyinLearning_zh_Hans.db"));
  CFArrayAppendValue(Mutable, CFSTR("StructuralPinyinLearning_zh_Hans.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("facemark.dat"));
  return Mutable;
}

const __CFString *sub_20B976010()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hans.db");
}

uint64_t sub_20B97601C()
{
  return 0;
}

uint64_t sub_20B976024()
{
  return 0;
}

__CFArray *sub_20B97602C(uint64_t a1, const __CFURL *a2)
{
  __CFArray *Mutable;
  const __CFURL *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  const __CFURL *v7;
  const __CFURL *v8;
  const __CFURL *v9;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v4 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_zh_Hans.db"));
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v5);
  }
  v6 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_zh_Hans.dictionary"));
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v7);
  }
  v8 = sub_20B8D0DEC(a2, CFSTR("StructuralPinyinLearning_zh_Hans.dictionary"));
  if (v8)
  {
    v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
  }
  return Mutable;
}

uint64_t sub_20B9760FC(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = sub_20B972460(a1, a2);
  v3 = sub_20B8B6D08();
  v4 = *(const void **)(v3 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v3 + 48) = 0;
  }
  return v2;
}

void sub_20B976138(uint64_t a1, CFStringRef theString, int a3)
{
  CFIndex Length;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  void *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  const __CFString *v21;
  CFIndex v22;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  CFIndex *v28;
  uint64_t v29;
  CFIndex *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  CFIndex *v36;
  CFIndex *v37;
  CFIndex *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  CFIndex *v47;
  CFIndex *v48;
  CFIndex v49;
  CFIndex *v50;
  CFIndex *v51;
  CFIndex v52;
  CFIndex *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  CFIndex *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  CFIndex v65;
  CFIndex v66;
  CFIndex v67;
  uint64_t v68;
  CFIndex v69;
  const __CFString *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CFIndex v75;
  _BOOL4 v76;
  _BOOL4 v77;
  BOOL v78;
  uint64_t v79;
  CFIndex v80;
  uint64_t v81;
  _BOOL4 v82;
  _BOOL4 v83;
  CFIndex v84;
  CFIndex v85;
  const __CFAllocator *v86;
  const __CFString *v87;
  const __CFString *v88;
  CFIndex v89;
  uint64_t v90;
  double v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void *v98;
  char *v99;
  int64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  _BOOL4 v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BOOL4 *v131;
  int v132;
  int v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  int v144;
  char *v145;
  void *v146;
  char *v147;
  int64_t v148;
  unint64_t v149;
  int64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  _BOOL4 v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  _BOOL4 *v165;
  char *v166;
  int v167;
  unint64_t v168;
  CFIndex v169;
  CFIndex v170;
  CFIndex v171;
  CFIndex v172;
  CFIndex v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  _QWORD *v177;
  _DWORD *v178;
  CFRange v179;
  CFStringRef Copy;
  __CFString *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  CFIndex v185;
  const __CFString *v186;
  uint64_t v187;
  CFRange v188;
  uint64_t v189;
  const __CFString *v190;
  uint64_t v191;
  uint64_t v192;
  const __CFString *v193;
  CFStringRef v194;
  uint64_t v195;
  int v196;
  void *v197;
  uint64_t v198;
  CFIndex v199;
  const __CFString *v200;
  uint64_t v201;
  CFIndex *__p;
  CFIndex *v203;
  char *v204;
  void *v205[2];
  _OWORD v206[3];
  int v207;
  void *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  void *v212;
  char *v213;
  _QWORD v214[16];
  CFRange v215;

  v214[14] = *MEMORY[0x24BDAC8D0];
  if (theString)
    Length = CFStringGetLength(theString);
  else
    Length = 0;
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8);
  if (v8)
    v9 = Length < 2;
  else
    v9 = 1;
  if (v9 || Length > 12)
    return;
  v196 = a3;
  if ((unint64_t)Length <= 3)
  {
    if (!sub_20B968B24(v8, theString))
    {
      v81 = sub_20B8B6D08();
      sub_20B8B705C(v81, (const char *)1, theString, a3);
      return;
    }
    v7 = *(_QWORD *)(a1 + 168);
  }
  v194 = theString;
  v195 = a1;
  v192 = v8;
  __p = 0;
  v203 = 0;
  v204 = 0;
  v11 = *(void **)(a1 + 56);
  v198 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8);
  *(_OWORD *)v205 = 0u;
  memset(v206, 0, sizeof(v206));
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, (const char *)theString, (uint64_t)v205, &v212, 16);
  if (!v14)
    goto LABEL_89;
  v193 = 0;
  v199 = 0;
  v201 = **(_QWORD **)&v206[0];
  v197 = v11;
  do
  {
    v15 = 0;
    do
    {
      if (**(_QWORD **)&v206[0] != v201)
        objc_enumerationMutation(v11);
      v16 = (const void *)objc_msgSend_rawCandidate(*((void **)v205[1] + v15), (const char *)v12, v13);
      v17 = v16;
      if (!v16)
        goto LABEL_286;
      v18 = __dynamic_cast(v16, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D698, 0);
      if (!v18)
        goto LABEL_286;
      v19 = v18;
      v20 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v17 + 32))(v17);
      v21 = v20;
      if (!v20)
        goto LABEL_286;
      v22 = CFStringGetLength(v20);
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v19 + 96))(v19) == 76)
      {
        if (v22 > 4)
          goto LABEL_286;
        if (v22 >= 2 && v22 > v199 && (sub_20B968B24(v198, v21) & 1) == 0)
        {
          v199 = v22;
          v193 = v21;
          if (v22 == 4)
            goto LABEL_88;
        }
      }
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 568))(v19);
      if (!v24 || (v26 = *(char **)v24, v25 = *(char **)(v24 + 8), *(char **)v24 == v25))
      {
        v36 = v203;
        if (v203 >= (CFIndex *)v204)
        {
          v38 = __p;
          v39 = v203 - __p;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
LABEL_289:
            sub_20B80CDD8();
          v41 = v204 - (char *)__p;
          if ((v204 - (char *)__p) >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v40;
          if (v12)
          {
            v42 = (char *)sub_20B800BE8((uint64_t)&v204, v12);
            v38 = __p;
            v36 = v203;
          }
          else
          {
            v42 = 0;
          }
          v48 = (CFIndex *)&v42[8 * v39];
          *v48 = v22;
          v37 = v48 + 1;
          while (v36 != v38)
          {
            v49 = *--v36;
            *--v48 = v49;
          }
          __p = v48;
          v204 = &v42[8 * v12];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v203 = v22;
          v37 = v203 + 1;
        }
        v203 = v37;
      }
      else
      {
        if (v25 - v26 < 1)
          goto LABEL_66;
        v27 = (v25 - v26) >> 3;
        v28 = v203;
        v29 = (char *)v203 - (char *)__p;
        v30 = (CFIndex *)((char *)__p + (((char *)v203 - (char *)__p) & 0xFFFFFFFFFFFFFFF8));
        if (v27 <= (v204 - (char *)v203) >> 3)
        {
          v43 = (char *)v203 - (char *)v30;
          v44 = v203 - v30;
          if (v44 >= v27)
          {
            v45 = &v26[8 * v27];
            v47 = v203;
            v11 = v197;
LABEL_69:
            v50 = &v47[-v27];
            v51 = v47;
            while (v50 < v28)
            {
              v52 = *v50++;
              *v51++ = v52;
            }
            v53 = &v30[v27];
            v203 = v51;
            if (v47 != v53)
              memmove(&v47[-(v47 - v53)], v30, (char *)v47 - (char *)v53);
            v13 = v45 - v26;
            if (v45 != v26)
              memmove(v30, v26, v13);
            goto LABEL_66;
          }
          v45 = &v26[8 * v44];
          v46 = v25 - v45;
          if (v25 != v45)
            memmove(v203, &v26[8 * v44], v25 - v45);
          v47 = (CFIndex *)((char *)v203 + v46);
          v203 = (CFIndex *)((char *)v203 + v46);
          v9 = v43 < 1;
          v11 = v197;
          if (!v9)
            goto LABEL_69;
        }
        else
        {
          v31 = v29 >> 3;
          v32 = (v29 >> 3) + v27;
          if (v32 >> 61)
            goto LABEL_289;
          v33 = v204 - (char *)__p;
          if ((v204 - (char *)__p) >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v32;
          if (v12)
          {
            v34 = (char *)sub_20B800BE8((uint64_t)&v204, v12);
            v35 = v12;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          v54 = &v34[8 * v31];
          v55 = &v54[8 * v27];
          v56 = 8 * v27;
          v57 = v54;
          do
          {
            v58 = *(_QWORD *)v26;
            v26 += 8;
            *(_QWORD *)v57 = v58;
            v57 += 8;
            v56 -= 8;
          }
          while (v56);
          if (__p != v30)
          {
            v59 = (char *)__p + (((char *)v203 - (char *)__p) & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v60 = *((_QWORD *)v59 - 1);
              v59 -= 8;
              *((_QWORD *)v54 - 1) = v60;
              v54 -= 8;
            }
            while (v59 != (char *)__p);
          }
          if (v203 != v30)
            memmove(v55, v30, (char *)v203 - (char *)v30);
          v61 = __p;
          __p = (CFIndex *)v54;
          v203 = (CFIndex *)&v55[(char *)v203 - (char *)v30];
          v204 = &v34[8 * v35];
          v11 = v197;
          if (v61)
            operator delete(v61);
        }
      }
LABEL_66:
      ++v15;
    }
    while (v15 != v14);
    v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, (const char *)v12, (uint64_t)v205, &v212, 16);
    v14 = v62;
  }
  while (v62);
  v21 = v193;
  if (v193)
  {
LABEL_88:
    v63 = sub_20B8B6D08();
    sub_20B8B705C(v63, (const char *)1, v21, v196);
    goto LABEL_286;
  }
LABEL_89:
  v64 = __p;
  if (__p == v203)
  {
    v69 = 0;
    v68 = 0;
    v66 = 0;
    v65 = 0;
    v70 = v194;
    v71 = v195;
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = v194;
    v71 = v195;
    do
    {
      v73 = *v64++;
      v72 = v73;
      v74 = v73 + v68;
      v75 = v73 + v67;
      v76 = v68 > 1;
      v77 = v68 > v66;
      v78 = !v76 || !v77;
      if (v76 && v77)
        v79 = v68;
      else
        v79 = v66;
      if (v78)
        v80 = v65;
      else
        v80 = v69;
      v67 = v75;
      if (v72 < 3)
      {
        v68 = v74;
      }
      else
      {
        v69 = v75;
        v68 = 0;
      }
      if (v72 >= 3)
      {
        v66 = v79;
        v65 = v80;
      }
    }
    while (v64 != v203);
  }
  v82 = v68 > 1;
  v83 = v68 > v66;
  if (v82 && v83)
    v84 = v68;
  else
    v84 = v66;
  if (v82 && v83)
    v85 = v69;
  else
    v85 = v65;
  if (!v84)
    goto LABEL_286;
  if (v85 + v84 > CFStringGetLength(v70))
    goto LABEL_286;
  v86 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v215.location = v85;
  v215.length = v84;
  v87 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v70, v215);
  v88 = v87;
  if (!v87)
    goto LABEL_286;
  v89 = CFStringGetLength(v87);
  v90 = *(_QWORD *)(*(_QWORD *)(v71 + 168) + 104);
  (*(void (**)(uint64_t, const __CFString *, _QWORD, CFIndex))(*(_QWORD *)v90 + 16))(v90, v88, 0, v89);
  sub_20B8D0624(v88, 0, &v211);
  v200 = v88;
  v91 = dbl_20BA4EE60[Length < 5];
  v212 = 0;
  v213 = 0;
  v214[0] = 0;
  v205[0] = 0;
  v205[1] = 0;
  *(_QWORD *)&v206[0] = 0;
  v209 = 0;
  v210 = 0;
  v208 = 0;
  v92 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v71 + 168) + 72) + 8);
  v93 = v211;
  while (2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90))
    {
      v207 = 0;
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 32))(v90);
      v96 = v95;
      sub_20B9689F0(v92, v93 + 2 * v94, v95, &v207);
      v97 = (char *)v205[1];
      if (v205[1] >= (void *)*(_QWORD *)&v206[0])
      {
        v99 = (char *)v205[0];
        v100 = ((char *)v205[1] - (char *)v205[0]) >> 3;
        v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 61)
          sub_20B80CDD8();
        v102 = *(_QWORD *)&v206[0] - (unint64_t)v205[0];
        if ((uint64_t)(*(_QWORD *)&v206[0] - (unint64_t)v205[0]) >> 2 > v101)
          v101 = v102 >> 2;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
          v103 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          v104 = (char *)sub_20B800BE8((uint64_t)v206, v103);
          v99 = (char *)v205[0];
          v97 = (char *)v205[1];
        }
        else
        {
          v104 = 0;
        }
        v105 = (uint64_t *)&v104[8 * v100];
        *v105 = v96;
        v98 = v105 + 1;
        while (v97 != v99)
        {
          v106 = *((_QWORD *)v97 - 1);
          v97 -= 8;
          *--v105 = v106;
        }
        v205[0] = v105;
        v205[1] = v98;
        *(_QWORD *)&v206[0] = &v104[8 * v103];
        if (v99)
          operator delete(v99);
      }
      else
      {
        *(_QWORD *)v205[1] = v96;
        v98 = v97 + 8;
      }
      v205[1] = v98;
      v107 = v213;
      if ((unint64_t)v213 >= v214[0])
      {
        v109 = (char *)v212;
        v110 = (v213 - (_BYTE *)v212) >> 2;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 62)
          sub_20B80CDD8();
        v112 = v214[0] - (_QWORD)v212;
        if ((uint64_t)(v214[0] - (_QWORD)v212) >> 1 > v111)
          v111 = v112 >> 1;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
          v113 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v113 = v111;
        if (v113)
        {
          v114 = (char *)sub_20B8127BC((uint64_t)v214, v113);
          v109 = (char *)v212;
          v107 = v213;
        }
        else
        {
          v114 = 0;
        }
        v115 = &v114[4 * v110];
        *(_DWORD *)v115 = v207;
        v108 = v115 + 4;
        while (v107 != v109)
        {
          v116 = *((_DWORD *)v107 - 1);
          v107 -= 4;
          *((_DWORD *)v115 - 1) = v116;
          v115 -= 4;
        }
        v212 = v115;
        v213 = v108;
        v214[0] = &v114[4 * v113];
        if (v109)
          operator delete(v109);
      }
      else
      {
        *(_DWORD *)v213 = v207;
        v108 = v107 + 4;
      }
      v213 = v108;
      if ((unint64_t)(v108 - (_BYTE *)v212) < 5)
      {
        v120 = v209;
        if (v209 >= v210)
        {
          v122 = (char *)v208;
          v123 = (v209 - (_BYTE *)v208) >> 2;
          v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 62)
            sub_20B80CDD8();
          v125 = v210 - (_BYTE *)v208;
          if ((v210 - (_BYTE *)v208) >> 1 > v124)
            v124 = v125 >> 1;
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
            v126 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v126 = v124;
          if (v126)
          {
            v127 = (char *)sub_20B8127BC((uint64_t)&v210, v126);
            v122 = (char *)v208;
            v120 = v209;
          }
          else
          {
            v127 = 0;
          }
          v131 = (_BOOL4 *)&v127[4 * v123];
          *v131 = 0;
          v121 = (char *)(v131 + 1);
          while (v120 != v122)
          {
            v132 = *((_DWORD *)v120 - 1);
            v120 -= 4;
            *--v131 = v132;
          }
          goto LABEL_179;
        }
        *(_DWORD *)v209 = 0;
        v119 = v120 + 4;
LABEL_154:
        v121 = v119;
      }
      else
      {
        v117 = sub_20B9C43D0() < v91;
        v118 = v209;
        if (v209 < v210)
        {
          *(_DWORD *)v209 = v117;
          v119 = v118 + 4;
          goto LABEL_154;
        }
        v122 = (char *)v208;
        v128 = (v209 - (_BYTE *)v208) >> 2;
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 62)
          sub_20B80CDD8();
        v130 = v210 - (_BYTE *)v208;
        if ((v210 - (_BYTE *)v208) >> 1 > v129)
          v129 = v130 >> 1;
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
          v126 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v126 = v129;
        if (v126)
        {
          v127 = (char *)sub_20B8127BC((uint64_t)&v210, v126);
          v122 = (char *)v208;
          v118 = v209;
        }
        else
        {
          v127 = 0;
        }
        v131 = (_BOOL4 *)&v127[4 * v128];
        *v131 = v117;
        v121 = (char *)(v131 + 1);
        while (v118 != v122)
        {
          v133 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--v131 = v133;
        }
LABEL_179:
        v208 = v131;
        v209 = v121;
        v210 = &v127[4 * v126];
        if (v122)
          operator delete(v122);
      }
      v209 = v121;
      continue;
    }
    break;
  }
  v134 = v213;
  if ((unint64_t)v213 >= v214[0])
  {
    v136 = (char *)v212;
    v137 = (v213 - (_BYTE *)v212) >> 2;
    v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 62)
      sub_20B80CDD8();
    v139 = v214[0] - (_QWORD)v212;
    if ((uint64_t)(v214[0] - (_QWORD)v212) >> 1 > v138)
      v138 = v139 >> 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
      v140 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v140 = v138;
    if (v140)
    {
      v141 = (char *)sub_20B8127BC((uint64_t)v214, v140);
      v136 = (char *)v212;
      v134 = v213;
    }
    else
    {
      v141 = 0;
    }
    v142 = &v141[4 * v137];
    v143 = &v141[4 * v140];
    *(_DWORD *)v142 = 2;
    v135 = v142 + 4;
    while (v134 != v136)
    {
      v144 = *((_DWORD *)v134 - 1);
      v134 -= 4;
      *((_DWORD *)v142 - 1) = v144;
      v142 -= 4;
    }
    v212 = v142;
    v213 = v135;
    v214[0] = v143;
    if (v136)
      operator delete(v136);
  }
  else
  {
    *(_DWORD *)v213 = 2;
    v135 = v134 + 4;
  }
  v213 = v135;
  v145 = (char *)v205[1];
  if (v205[1] >= (void *)*(_QWORD *)&v206[0])
  {
    v147 = (char *)v205[0];
    v148 = ((char *)v205[1] - (char *)v205[0]) >> 3;
    v149 = v148 + 1;
    if ((unint64_t)(v148 + 1) >> 61)
      sub_20B80CDD8();
    v150 = *(_QWORD *)&v206[0] - (unint64_t)v205[0];
    if ((uint64_t)(*(_QWORD *)&v206[0] - (unint64_t)v205[0]) >> 2 > v149)
      v149 = v150 >> 2;
    if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
      v151 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v151 = v149;
    if (v151)
    {
      v152 = (char *)sub_20B800BE8((uint64_t)v206, v151);
      v147 = (char *)v205[0];
      v145 = (char *)v205[1];
    }
    else
    {
      v152 = 0;
    }
    v153 = &v152[8 * v148];
    v154 = &v152[8 * v151];
    *(_QWORD *)v153 = 0;
    v146 = v153 + 8;
    while (v145 != v147)
    {
      v155 = *((_QWORD *)v145 - 1);
      v145 -= 8;
      *((_QWORD *)v153 - 1) = v155;
      v153 -= 8;
    }
    v205[0] = v153;
    v205[1] = v146;
    *(_QWORD *)&v206[0] = v154;
    if (v147)
      operator delete(v147);
  }
  else
  {
    *(_QWORD *)v205[1] = 0;
    v146 = v145 + 8;
  }
  v205[1] = v146;
  v157 = sub_20B9C43D0() < 4.8;
  v158 = v209;
  if (v209 >= v210)
  {
    v160 = (char *)v208;
    v161 = (v209 - (_BYTE *)v208) >> 2;
    v162 = v161 + 1;
    if ((unint64_t)(v161 + 1) >> 62)
      sub_20B80CDD8();
    v163 = v210 - (_BYTE *)v208;
    if ((v210 - (_BYTE *)v208) >> 1 > v162)
      v162 = v163 >> 1;
    if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
      v156 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v156 = v162;
    if (v156)
    {
      v164 = (char *)sub_20B8127BC((uint64_t)&v210, v156);
      v160 = (char *)v208;
      v158 = v209;
    }
    else
    {
      v164 = 0;
    }
    v165 = (_BOOL4 *)&v164[4 * v161];
    v166 = &v164[4 * v156];
    *v165 = v157;
    v159 = (char *)(v165 + 1);
    while (v158 != v160)
    {
      v167 = *((_DWORD *)v158 - 1);
      v158 -= 4;
      *--v165 = v167;
    }
    v208 = v165;
    v209 = v159;
    v210 = v166;
    if (v160)
      operator delete(v160);
  }
  else
  {
    *(_DWORD *)v209 = v157;
    v159 = v158 + 4;
  }
  v209 = v159;
  v168 = v213 - (_BYTE *)v212;
  if (v213 - (_BYTE *)v212 < 1)
  {
    v173 = 0;
    v172 = 0;
    v171 = 0;
    v170 = 0;
  }
  else
  {
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v174 = v168 >> 2;
    v175 = __OFSUB__(v168 >> 2, 1);
    v176 = (v168 >> 2) - 1;
    v177 = v205[0];
    if ((v176 < 0) ^ v175 | (v176 == 0))
      v174 = 1;
    v178 = (char *)v208 + 4;
    do
    {
      if (*(v178 - 1) || v176 && *v178)
      {
        if (v170 > v172)
        {
          v173 = v171;
          v172 = v170;
        }
        v169 += *v177;
        v171 = v169;
        v170 = 0;
      }
      else
      {
        v170 += *v177;
        v169 += *v177;
      }
      ++v177;
      ++v178;
      --v176;
      --v174;
    }
    while (v174);
  }
  if (v170 <= v172)
    v179.length = v172;
  else
    v179.length = v170;
  if ((unint64_t)(v179.length - 2) >= 3)
  {
    if ((unint64_t)(v89 - 2) <= 2)
    {
      Copy = CFStringCreateCopy(v86, v200);
      goto LABEL_255;
    }
    v181 = 0;
  }
  else
  {
    if (v170 <= v172)
      v179.location = v173;
    else
      v179.location = v171;
    Copy = CFStringCreateWithSubstring(v86, v200, v179);
LABEL_255:
    v181 = (__CFString *)Copy;
  }
  if (v208)
  {
    v209 = (char *)v208;
    operator delete(v208);
  }
  if (v205[0])
  {
    v205[1] = v205[0];
    operator delete(v205[0]);
  }
  if (v212)
  {
    v213 = (char *)v212;
    operator delete(v212);
  }
  if (v93)
    MEMORY[0x20BD39C80](v93, 0x1000C80BDFB0063);
  if (v181)
  {
    if (qword_25472BD08 != -1)
      dispatch_once(&qword_25472BD08, &unk_24C46CED0);
    v182 = objc_msgSend_rangeOfCharacterFromSet_(v181, (const char *)v156, qword_25472BD00);
    v184 = v183;
    v185 = CFStringGetLength(v181);
    if (v182 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v182 <= 1)
        v187 = 0;
      else
        v187 = v182;
      v188.location = v182 + v184;
      v189 = v185 - (v182 + v184);
      if (v187 < 2 || v187 <= v189)
      {
        if (v189 < 2 || v189 <= v187)
          goto LABEL_284;
        v182 = v185 - (v182 + v184);
      }
      else
      {
        v188.location = 0;
      }
      v188.length = v182;
      v186 = CFStringCreateWithSubstring(v86, v181, v188);
      goto LABEL_280;
    }
    v186 = CFStringCreateCopy(v86, v181);
LABEL_280:
    v190 = v186;
    if (v186)
    {
      if ((sub_20B968B24(v192, v186) & 1) == 0)
      {
        v191 = sub_20B8B6D08();
        sub_20B8B705C(v191, (const char *)1, v190, v196);
      }
      CFRelease(v190);
    }
LABEL_284:
    CFRelease(v181);
  }
  CFRelease(v200);
LABEL_286:
  if (__p)
    operator delete(__p);
}

void sub_20B976F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B977030()
{
  return *(_QWORD *)(sub_20B8B6D08() + 48);
}

__CFArray *sub_20B977048()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("DynamicPhraseLexicon_zh_Hant_pinyin.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_zh_Hant_pinyin.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_zh_Hant_pinyin.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("StructuralPinyinLearning_zh_Hant_pinyin.db"));
  CFArrayAppendValue(Mutable, CFSTR("StructuralPinyinLearning_zh_Hant_pinyin.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("facemark.dat"));
  return Mutable;
}

const __CFString *sub_20B9770DC()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hant_pinyin.db");
}

uint64_t sub_20B9770E8()
{
  return 0;
}

uint64_t sub_20B9770F0()
{
  return 0;
}

__CFArray *sub_20B9770F8(uint64_t a1, const __CFURL *a2)
{
  __CFArray *Mutable;
  const __CFURL *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  const __CFURL *v7;
  const __CFURL *v8;
  const __CFURL *v9;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v4 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_zh_Hant_pinyin.db"));
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v5);
  }
  v6 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_zh_Hant_pinyin.dictionary"));
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v7);
  }
  v8 = sub_20B8D0DEC(a2, CFSTR("StructuralPinyinLearning_zh_Hant_pinyin.dictionary"));
  if (v8)
  {
    v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
  }
  return Mutable;
}

_QWORD *sub_20B9771C8(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  _QWORD *v26;

  *sub_20B973D30(a1, a2, a3, a4) = &off_24C4655F0;
  v5 = (_QWORD *)operator new();
  *v5 = &unk_24C462610;
  v6 = a1[11];
  v7 = (_QWORD *)a1[10];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[9];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_20B80CDD8();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v26 = a1 + 11;
    if (v13)
      v14 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v25 = v16;
    *(_QWORD *)v15 = v5;
    v8 = v15 + 8;
    v24.i64[1] = (uint64_t)(v15 + 8);
    v18 = (_QWORD *)a1[9];
    v17 = (_QWORD *)a1[10];
    if (v17 == v18)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *--v17;
        *v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)(a1 + 9);
      v8 = (_QWORD *)v24.i64[1];
      v16 = v25;
    }
    a1[9] = v15;
    a1[10] = v8;
    v24 = v20;
    v21 = (char *)a1[11];
    a1[11] = v16;
    v25 = v21;
    v23 = v20.i64[0];
    sub_20B8821E8((uint64_t)&v23);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[10] = v8;
  return a1;
}

void sub_20B977318(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x81C40B8603338);
  sub_20B97442C(v1);
  _Unwind_Resume(a1);
}

__CFArray *sub_20B97734C()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("DynamicPhraseLexicon_zh_Hant_zhuyin.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_zh_Hant_zhuyin.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_zh_Hant_zhuyin.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("StructuralZhuyinLearning_zh_Hant_zhuyin.db"));
  CFArrayAppendValue(Mutable, CFSTR("StructuralZhuyinLearning_zh_Hant_zhuyin.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("facemark.dat"));
  return Mutable;
}

const __CFString *sub_20B9773E0()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hant_zhuyin.db");
}

uint64_t sub_20B9773EC()
{
  return 0;
}

uint64_t sub_20B9773F4()
{
  return 0;
}

__CFArray *sub_20B9773FC(uint64_t a1, const __CFURL *a2)
{
  __CFArray *Mutable;
  const __CFURL *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  const __CFURL *v7;
  const __CFURL *v8;
  const __CFURL *v9;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v4 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_zh_Hant_zhuyin.db"));
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v5);
  }
  v6 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_zh_Hant_zhuyin.dictionary"));
  if (v6)
  {
    v7 = v6;
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v7);
  }
  v8 = sub_20B8D0DEC(a2, CFSTR("StructuralZhuyinLearning_zh_Hant_zhuyin.dictionary"));
  if (v8)
  {
    v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
  }
  return Mutable;
}

BOOL sub_20B9774CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v5;
  CFIndex v6;

  v6 = 0;
  sub_20B8D0624(*(const __CFString **)(a2 + 16), &v6, &v5);
  v2 = v5;
  v3 = sub_20B928FFC(v5, v6);
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  return !v3;
}

const __CFString *sub_20B977530()
{
  return CFSTR("DynamicPhraseLexicon_yue_Hant.db");
}

uint64_t sub_20B97753C()
{
  return 0;
}

uint64_t sub_20B977544()
{
  return 0;
}

void sub_20B97755C(uint64_t a1)
{
  sub_20B97442C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B977580()
{
  return 4;
}

void sub_20B97758C(uint64_t a1)
{
  sub_20B97442C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9775B0()
{
  return 13;
}

uint64_t sub_20B9775B8()
{
  return 0;
}

void sub_20B9775C4(uint64_t a1)
{
  sub_20B97442C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9775E8()
{
  return 2;
}

void sub_20B9775F4(uint64_t a1)
{
  sub_20B97442C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B977618()
{
  return 5;
}

_QWORD *sub_20B977620(_QWORD *a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, uint64_t a7, int a8)
{
  _QWORD *v13;

  v13 = sub_20B9776AC(a1, a2, a3, a7);
  *v13 = &off_24C45F888;
  v13[4] = a4;
  v13[5] = a5;
  *((_DWORD *)v13 + 12) = a6;
  *((_DWORD *)v13 + 13) = a8;
  if (a4)
  {
    CFRetain(a4);
    a5 = (const void *)a1[5];
  }
  if (a5)
    CFRetain(a5);
  return a1;
}

void sub_20B977698(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B9776FC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9776AC(_QWORD *a1, CFTypeRef cf, CFTypeRef a3, uint64_t a4)
{
  *a1 = &unk_24C45F390;
  a1[1] = cf;
  a1[2] = a3;
  a1[3] = a4;
  if (cf)
  {
    CFRetain(cf);
    a3 = (CFTypeRef)a1[2];
  }
  if (a3)
    CFRetain(a3);
  return a1;
}

_QWORD *sub_20B9776FC(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &unk_24C45F390;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_20B977748(_QWORD *a1)
{
  sub_20B977794(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B977770(_QWORD *a1)
{
  sub_20B9776FC(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B977794(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_24C45F888;
  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  return sub_20B9776FC(a1);
}

char *sub_20B9777DC(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20B919270(result, a4);
    result = sub_20B977860((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20B977840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B86F120(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B977860(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  char *v8;
  int v9;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  v4 = __dst;
  v13 = __dst;
  v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20B80ACE0(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v9 = *((_DWORD *)v6 + 6);
      *(_DWORD *)(v4 + 27) = *(_DWORD *)((char *)v6 + 27);
      *((_DWORD *)v4 + 6) = v9;
      v6 += 2;
      v4 = v8 + 32;
      v14 = v8 + 32;
    }
    while (v6 != a3);
  }
  v12 = 1;
  sub_20B919380((uint64_t)v11);
  return v4;
}

void sub_20B97791C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B919380((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_20B977930(uint64_t a1, const char *a2)
{
  id result;

  result = (id)objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x24BDD14A8], a2, (uint64_t)CFSTR("了着还的我是你不在个有和啊他与她没"));
  qword_25472BD00 = (uint64_t)result;
  return result;
}

void sub_20B977964()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B977978(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469BB8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9779AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469BB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9779C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B9779D8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ECF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B977A14()
{
  return &unk_24C45ECF0;
}

void sub_20B977A24()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B977A38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469C10;
  result[1] = v3;
  return result;
}

uint64_t sub_20B977A6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469C10;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B977A88(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
}

uint64_t sub_20B977A94(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B977AD0()
{
  return &unk_24C45ED00;
}

void sub_20B977AE0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B977AF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469E78;
  result[1] = v3;
  return result;
}

uint64_t sub_20B977B28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469E78;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B977B44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B977B54(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B977B90()
{
  return &unk_24C45ED70;
}

void sub_20B977B9C()
{
  uint64_t i;

  for (i = 0; i != -192; i -= 32)
  {
    if (*((char *)&unk_25472BCF8 + i + 207) < 0)
      operator delete(*(void **)((char *)&unk_25472BCF8 + i + 184));
  }
}

unsigned int *sub_20B977BE0(unsigned int *a1, unsigned int a2, uint64_t *a3, const void **a4)
{
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  std::string::size_type v14;
  unsigned __int8 v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v37;
  __int128 *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *exception;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::string v49;
  void *v50;
  __int128 *v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  int64_t v55;
  std::string::value_type *v56;
  std::string::size_type v57;
  unsigned __int8 v58;

  *a1 = a2;
  *(_OWORD *)(a1 + 2) = 0u;
  v45 = (uint64_t)(a1 + 2);
  *(_OWORD *)(a1 + 6) = 0u;
  *(_OWORD *)(a1 + 10) = 0u;
  v44 = (int *)(a1 + 16);
  sub_20B9781EC(a2, 0, (uint64_t *)a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1])
      return a1;
    a3 = (uint64_t *)*a3;
  }
  else if (!*((_BYTE *)a3 + 23))
  {
    return a1;
  }
  sub_20B90CFC0((char *)a3, (uint64_t)"r", 1, &v49);
  sub_20B82E770(v45, (__int128 *)&v49);
  size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
  if (v49.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)v44 + 8))
  {
    sub_20B827F10((uint64_t)&v49);
    sub_20B828F84(&v49, (uint64_t)"Failed to load character map for language ", 42);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B871648((uint64_t)&v49.__r_.__value_.__l.__size_, &v47);
    sub_20B978AAC(exception, &v47);
    __cxa_throw(exception, (struct type_info *)&unk_24C45D680, (void (*)(void *))sub_20B9782F8);
  }
  if (*a1 - 1 >= 2 && *a1 != 5)
  {
    sub_20B827F10((uint64_t)&v49);
    v42 = (_QWORD *)std::ostream::operator<<();
    sub_20B828F84(v42, (uint64_t)" is unsupported language value.", 31);
    v43 = __cxa_allocate_exception(0x20uLL);
    sub_20B871648((uint64_t)&v49.__r_.__value_.__l.__size_, &v46);
    sub_20B978AAC(v43, &v46);
    __cxa_throw(v43, (struct type_info *)&unk_24C45D680, (void (*)(void *))sub_20B9782F8);
  }
  v11 = 0;
  v12 = **((_QWORD **)a1 + 1);
  *((_QWORD *)a1 + 6) = v12;
  *((_QWORD *)a1 + 7) = v12 + *(unsigned int *)(v12 + 4);
  do
  {
    v13 = "";
    if (v11 <= 2)
      v13 = off_24C49F890[(int)v11];
    sub_20B80BBD0(&v56, v13);
    v14 = v58;
    v15 = v58;
    if ((v58 & 0x80u) != 0)
      v14 = v57;
    if (v14)
    {
      if (*((char *)a4 + 23) >= 0)
        v16 = *((unsigned __int8 *)a4 + 23);
      else
        v16 = (size_t)a4[1];
      sub_20B8298D4((uint64_t)&v49, v16 + 1);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v49;
      else
        v17 = (std::string *)v49.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if (*((char *)a4 + 23) >= 0)
          v18 = a4;
        else
          v18 = *a4;
        memmove(v17, v18, v16);
      }
      *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
      if ((v58 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&v56;
      else
        v19 = v56;
      if ((v58 & 0x80u) == 0)
        v20 = v58;
      else
        v20 = v57;
      v21 = std::string::append(&v49, v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v55 = v21->__r_.__value_.__r.__words[2];
      v54 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      v23 = *a1;
      v49.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
      v49.__r_.__value_.__l.__size_ = 0x40000000;
      v49.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_20B894E44;
      v50 = &unk_24C46C098;
      v52 = v23;
      v51 = &v54;
      sub_20B8945C4((void **)&v54, (uint64_t)&v49, 0, (uint64_t *)&v53);
      if ((_QWORD)v53)
      {
        v24 = *a1;
        if (*a1 == 1 || v24 == 5 || v24 == 2)
          (*(void (**)(void))(*(_QWORD *)v53 + 48))();
        sub_20B9054E0((char **)a1 + 3, &v53);
      }
      else
      {
        if (!(_DWORD)v11)
        {
          sub_20B827F10((uint64_t)&v49);
          v37 = sub_20B828F84(&v49, (uint64_t)"Failed to open dictionary ", 26);
          if (v55 >= 0)
            v38 = &v54;
          else
            v38 = (__int128 *)v54;
          if (v55 >= 0)
            v39 = HIBYTE(v55);
          else
            v39 = *((_QWORD *)&v54 + 1);
          sub_20B828F84(v37, (uint64_t)v38, v39);
          v40 = __cxa_allocate_exception(0x20uLL);
          sub_20B871648((uint64_t)&v49.__r_.__value_.__l.__size_, &v48);
          sub_20B978AAC(v40, &v48);
          __cxa_throw(v40, (struct type_info *)&unk_24C45D680, (void (*)(void *))sub_20B9782F8);
        }
        v25 = sub_20B9547EC();
        if (v55 >= 0)
          v32 = &v54;
        else
          LOBYTE(v32) = v54;
        sub_20B954DEC((uint64_t)v25, "Failed to open dictionary : %s", v26, v27, v28, v29, v30, v31, (char)v32);
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(v55) < 0)
        operator delete((void *)v54);
      v15 = v58;
    }
    if ((v15 & 0x80) != 0)
      operator delete(v56);
    ++v11;
  }
  while (v11 != 3);
  return a1;
}

void sub_20B9780B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      sub_20B83AB08((uint64_t)&a31);
      sub_20B811FE4(a11);
      *(_QWORD *)(v39 - 160) = v37 + 24;
      sub_20B8E736C((void ***)(v39 - 160));
      sub_20B811FE4(a12);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v38);
  goto LABEL_6;
}

void sub_20B9781EC(unsigned int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char *v6;
  unsigned __int8 *v7;
  _QWORD v8[5];
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  void *v14;
  char v15;

  v6 = sub_20B8D101C(a1);
  v7 = (unsigned __int8 *)sub_20B80BBD0(&v14, v6);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B978F30;
  v8[3] = &unk_24C46C550;
  v8[4] = &v10;
  v9 = a1;
  sub_20B978B80(v7, (uint64_t)v8, 0, a3);
  if (a2 && !*((_BYTE *)v11 + 24))
    sub_20B978FA8(*a3);
  _Block_object_dispose(&v10, 8);
  if (v15 < 0)
    operator delete(v14);
}

void sub_20B9782C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  sub_20B811FE4(v8);
  _Block_object_dispose(va, 8);
  if (*(char *)(v9 - 33) < 0)
    operator delete(*(void **)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_20B9782F8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C468DA0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

void sub_20B978334(signed int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const UInt8 *v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  const __CFURL *v9;
  const __CFURL *v10;
  const __CFURL *PathComponent;
  const __CFString *v12;

  v4 = (_QWORD *)sub_20B9AE60C();
  v5 = (const UInt8 *)sub_20B9AE6A0(v4, a1, off_254729648[0], CFSTR("sys.dic"));
  v6 = *((char *)v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(const UInt8 **)v5;
  if (v6 >= 0)
    v8 = v5[23];
  else
    v8 = *((_QWORD *)v5 + 1);
  v9 = CFURLCreateFromFileSystemRepresentation(0, v7, v8, 0);
  if (v9)
  {
    v10 = v9;
    PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v9);
    v12 = CFURLCopyFileSystemPath(PathComponent, kCFURLPOSIXPathStyle);
    sub_20B8D1C98(v12, a2);
    if (v12)
      CFRelease(v12);
    if (PathComponent)
      CFRelease(PathComponent);
    CFRelease(v10);
  }
  else
  {
    sub_20B80BBD0(a2, "");
  }
}

void sub_20B978408(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned int *sub_20B978424(unsigned int *a1, unsigned int a2)
{
  _QWORD *v4;
  uint64_t *v5;
  void *__p[2];
  char v8;

  v4 = (_QWORD *)sub_20B9AE60C();
  v5 = sub_20B9AE6A0(v4, a2, off_254729648[0], off_2547295D8[0]);
  sub_20B978334(a2, __p);
  sub_20B977BE0(a1, a2, v5, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B9784B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9784CC(uint64_t a1)
{
  void **v3;

  sub_20B811FE4(a1 + 64);
  v3 = (void **)(a1 + 24);
  sub_20B8E736C(&v3);
  sub_20B811FE4(a1 + 8);
  return a1;
}

uint64_t sub_20B978514(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *exception;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(unsigned __int8 *)(a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (v2 == 14)
  {
    if (v3 >= 0)
      v13 = (uint64_t *)a1;
    else
      v13 = *(uint64_t **)a1;
    v14 = *v13;
    v15 = *(uint64_t *)((char *)v13 + 6);
    if (v14 == 0x656D656C70707573 && v15 == 0x6369642E746E656DLL)
      return 1;
LABEL_34:
    sub_20B827F10((uint64_t)&v23);
    v17 = *(char *)(a1 + 23);
    if (v17 >= 0)
      v18 = a1;
    else
      v18 = *(_QWORD *)a1;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a1 + 23);
    else
      v19 = *(_QWORD *)(a1 + 8);
    v20 = sub_20B828F84(&v23, v18, v19);
    sub_20B828F84(v20, (uint64_t)" is not a recognized source dictionary name.", 44);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B871648((uint64_t)&v24, &v22);
    sub_20B978AAC(exception, &v22);
    __cxa_throw(exception, (struct type_info *)&unk_24C45D680, (void (*)(void *))sub_20B9782F8);
  }
  if (v2 == 9)
  {
    if (v3 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    v10 = *(_QWORD *)v9;
    v11 = *(unsigned __int8 *)(v9 + 8);
    if (v10 == 0x69642E646578696DLL && v11 == 99)
      return 2;
    goto LABEL_34;
  }
  if (v2 != 7)
    goto LABEL_34;
  v4 = v3 >= 0 ? (int *)a1 : *(int **)a1;
  v5 = *v4;
  v6 = *(int *)((char *)v4 + 3);
  if (v5 != 779319667 || v6 != 1667851310)
    goto LABEL_34;
  return 0;
}

void sub_20B9786AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_20B83AB08((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_20B9786F4(char a1, unsigned int a2)
{
  _QWORD *v3;
  _QWORD *exception;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 >= 0x200000)
  {
    sub_20B827F10((uint64_t)&v6);
    sub_20B828F84(&v6, (uint64_t)"Token offset ", 13);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_20B828F84(v3, (uint64_t)" is out of range. The max offset value is 0x1FFFFF.", 51);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B871648((uint64_t)&v7, &v5);
    sub_20B978AAC(exception, &v5);
    __cxa_throw(exception, (struct type_info *)&unk_24C45D680, (void (*)(void *))sub_20B9782F8);
  }
  return ((a1 & 3) << 22) | a2;
}

void sub_20B9787B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_20B83AB08((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

BOOL sub_20B9787FC(const char *a1, const void **a2)
{
  FILE *v3;
  FILE *v4;
  const void *v5;
  _BYTE *v6;
  _BOOL8 v7;
  _DWORD __ptr[2];

  __ptr[0] = (unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2;
  __ptr[1] = 8;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = fopen(a1, "w+");
  if (!v3)
    return 0;
  v4 = v3;
  if (fwrite(__ptr, 8uLL, 1uLL, v3))
  {
    v5 = *a2;
    v6 = a2[1];
    if (v6 == *a2)
    {
      sub_20B873120((uint64_t)a2, 1uLL);
      v5 = *a2;
      v6 = a2[1];
    }
    v7 = fwrite(v5, 4uLL, (v6 - (_BYTE *)v5) >> 2, v4) >= ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2;
  }
  else
  {
    v7 = 0;
  }
  fclose(v4);
  return v7;
}

uint64_t sub_20B9788CC(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (!a3)
    return 0;
  v3 = a3;
  v6 = 0;
  do
  {
    v7 = (unsigned int *)a1[6];
    if (!v7)
      break;
    v9 = *a2++;
    v8 = v9;
    if (*v7 <= v9)
      break;
    v10 = *(unsigned int *)(a1[7] + 4 * v8);
    v11 = (v10 >> 22) & 3;
    if (!(_DWORD)v10 || (_DWORD)v11 == 3)
      break;
    sub_20BA1C168(*(_QWORD **)(a1[3] + 16 * v11), v10 & 0x1FFFFF);
    v6 += v13;
    --v3;
  }
  while (v3);
  return v6;
}

CFStringRef sub_20B97895C(_QWORD *a1, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;

  v2 = (unsigned int *)a1[6];
  if (v2
    && *v2 > a2
    && ((v3 = *(unsigned int *)(a1[7] + 4 * a2), v4 = (v3 >> 22) & 3, (_DWORD)v3) ? (v5 = (_DWORD)v4 == 3) : (v5 = 1),
        !v5 && (sub_20BA1C168(*(_QWORD **)(a1[3] + 16 * v4), v3 & 0x1FFFFF), v7)))
  {
    return sub_20B88F830();
  }
  else
  {
    return 0;
  }
}

CFStringRef sub_20B9789E4(_QWORD *a1, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  const UniChar *v7;
  CFIndex v8;

  v2 = (unsigned int *)a1[6];
  if (v2
    && *v2 > a2
    && ((v3 = *(unsigned int *)(a1[7] + 4 * a2), v4 = (v3 >> 22) & 3, (_DWORD)v3) ? (v5 = (_DWORD)v4 == 3) : (v5 = 1),
        !v5 && (v7 = (const UniChar *)sub_20BA1C168(*(_QWORD **)(a1[3] + 16 * v4), v3 & 0x1FFFFF), v8)))
  {
    return CFStringCreateWithCharacters(0, v7, v8);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20B978A58(_QWORD *a1, unsigned int a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[6];
  if (v2
    && *v2 > a2
    && (v3 = *(unsigned int *)(a1[7] + 4 * a2), (_DWORD)v3)
    && (v4 = (v3 >> 22) & 3, (_DWORD)v4 != 3))
  {
    return *(_QWORD *)(*(_QWORD *)(a1[3] + 16 * v4) + 56) + 12 * (v3 & 0x1FFFFF);
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_20B978AAC(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_24C468DA0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_20B978B00(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B978B14(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24C468DA0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B978B64(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_20B978B80(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  NSObject *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _BYTE buf[24];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_2547294A0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2547294A0))
  {
    v36 = operator new();
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_DWORD *)(v36 + 32) = 1065353216;
    qword_254729498 = v36;
    __cxa_guard_release(&qword_2547294A0);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_2547294E8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2547294E8))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547294A8, &dword_20B7F7000);
    __cxa_guard_release(&qword_2547294E8);
  }
  v37 = 0;
  v38 = 0;
  std::mutex::lock(&stru_2547294A8);
  v10 = sub_20B87A31C((_QWORD *)qword_254729498, a1);
  v11 = v10;
  if (v10
    && (v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6)) != 0
    && (v12->__shared_owners_ != -1 ? (v13 = a3 == 0) : (v13 = 0), v13))
  {
    v28 = std::__shared_weak_count::lock(v12);
    if (v28)
      v29 = *((_QWORD *)v11 + 5);
    else
      v29 = 0;
    v37 = v29;
    v38 = v28;
  }
  else
  {
    v14 = sub_20B9A7C5C(0xDu);
    v15 = os_signpost_id_make_with_pointer(v14, a1);
    v16 = sub_20B9A7C5C(0xDu);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v17 = v16;
      if (os_signpost_enabled(v16))
      {
        if ((a1[23] & 0x80u) == 0)
          v18 = a1;
        else
          v18 = *(unsigned __int8 **)a1;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v18;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    sub_20B979028(&v37, v19);
    v21 = v37;
    v20 = v38;
    if (v38)
    {
      p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
      do
        v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)buf = a1;
    v24 = sub_20B87A5E8(qword_254729498, a1, (uint64_t)&unk_20BA37B7A, (__int128 **)buf);
    v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
    *((_QWORD *)v24 + 5) = v21;
    *((_QWORD *)v24 + 6) = v20;
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
    v26 = sub_20B9A7C5C(0xDu);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = v26;
      if (os_signpost_enabled(v26))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v27, OS_SIGNPOST_INTERVAL_END, v15, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
  std::mutex::unlock(&stru_2547294A8);
  v30 = v38;
  *a4 = v37;
  a4[1] = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = v38;
    if (v38)
    {
      v34 = (unint64_t *)&v38->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_20B978ED4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2547294A0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B978F30(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v2 = operator new();
  sub_20B979224(v2, *(_DWORD *)(a1 + 40));
  return v2;
}

void sub_20B978F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

void sub_20B978FA8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)operator new();
  sub_20B88E984(v2, *(_DWORD *)a1);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 8);
  v3 = v5;
  *v4 = v2;
  if (v5)
    sub_20B9791D4((uint64_t)v4, v3);
}

void sub_20B979004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void sub_20B979028(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20B979098(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20B979098(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24C46BDE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20B9790F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_20B979188((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20B97911C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B979140(uint64_t a1)
{
  sub_20B979188(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20B979148(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E628))
    return a1 + 24;
  else
    return 0;
}

void sub_20B979188(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = (_QWORD *)(a2 + 8);
    v3 = *(_QWORD *)(a2 + 8);
    *v2 = 0;
    if (v3)
      sub_20B9791D4((uint64_t)v2, v3);
    JUMPOUT(0x20BD39CB0);
  }
}

void sub_20B9791D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B88F980(a2 + 24, *(_QWORD **)(a2 + 32));
    sub_20B8292CC(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x20BD39CB0);
  }
}

uint64_t sub_20B979224(uint64_t a1, signed int a2)
{
  _QWORD *v4;

  *(_DWORD *)a1 = a2;
  v4 = (_QWORD *)operator new();
  sub_20B88E984(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

void sub_20B97927C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9792A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef cf)
{
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t j;
  _QWORD *v18;
  _QWORD *v19;
  int64x2_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int64x2_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int64x2_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  int64x2_t v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  int64x2_t v101;
  char *v102;
  __int16 *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  char *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  int64x2_t v120;
  char *v121;
  __int128 v123;
  uint64_t v124;
  void **v125;
  char v126;
  uint64_t v127;
  int64x2_t v128;
  char *v129;
  _QWORD v130[3];
  int v131;
  __int16 v132;
  char v133;
  _QWORD v134[3];
  int v135;
  __int16 v136;
  char v137;
  __int128 v138;
  int v139;
  __int16 v140;
  char v141;
  uint64_t v142[3];
  int v143;
  __int16 v144;
  char v145;
  _QWORD v146[3];
  int v147;
  __int16 v148;
  char v149;
  __int128 v150;

  *(_QWORD *)&v150 = *MEMORY[0x24BDAC8D0];
  v13 = sub_20B9718AC((_QWORD *)a1, cf, 2);
  *v13 = &off_24C4623B0;
  *((_OWORD *)v13 + 8) = 0u;
  v14 = v13 + 16;
  v15 = v13 + 19;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 10) = 0u;
  *((_OWORD *)v13 + 11) = 0u;
  *((_OWORD *)v13 + 12) = 0u;
  v13[26] = a2;
  v13[27] = a3;
  sub_20B8B2334(0);
  *(_QWORD *)(a1 + 224) = &qword_25472C9B0;
  *(_QWORD *)(a1 + 232) = a4;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20B9C2E58(a1 + 248, (uint64_t)&qword_25472C9B0);
  sub_20B9810B8(a1 + 376, *(_QWORD *)(a1 + 224), a5, a6);
  *(_QWORD *)(a1 + 512) = a6;
  sub_20B80BBD0(&v127, "FirstSurface");
  LODWORD(v129) = 0;
  WORD2(v129) = 1;
  BYTE6(v129) = 1;
  sub_20B80BBD0(v130, off_254729500[0]);
  v131 = 0;
  v132 = 0;
  v133 = 1;
  sub_20B80BBD0(v134, off_254729508[0]);
  v135 = 0;
  v136 = 0;
  v137 = 1;
  sub_20B80BBD0(&v138, off_254729510[0]);
  v139 = 1;
  v140 = 0;
  v141 = 1;
  sub_20B80BBD0(v142, off_254729518[0]);
  v143 = 1;
  v144 = 0;
  v145 = 1;
  sub_20B80BBD0(v146, off_254729520);
  v147 = 0;
  v148 = 0;
  v149 = 1;
  v124 = 0;
  v123 = 0uLL;
  v125 = (void **)&v123;
  v126 = 0;
  *(_QWORD *)&v123 = operator new(0xC0uLL);
  *((_QWORD *)&v123 + 1) = v123;
  v124 = v123 + 192;
  *((_QWORD *)&v123 + 1) = sub_20B977860((uint64_t)&v124, (__int128 *)&v127, &v150, (char *)v123);
  sub_20B8825BC(v14);
  *(_OWORD *)(a1 + 128) = v123;
  *(_QWORD *)(a1 + 144) = v124;
  v124 = 0;
  v123 = 0uLL;
  v125 = (void **)&v123;
  sub_20B86F120(&v125);
  for (i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v146[i + 2]) < 0)
      operator delete((void *)v146[i]);
  }
  sub_20B80BBD0(&v127, off_2547294F8[0]);
  LODWORD(v129) = 0;
  WORD2(v129) = 1;
  BYTE6(v129) = 1;
  sub_20B80BBD0(v130, off_2547294F0[0]);
  v131 = 0;
  v132 = 0;
  v133 = 1;
  sub_20B80BBD0(v134, "Honorific");
  v135 = 1;
  v136 = 0;
  v137 = 1;
  v124 = 0;
  v123 = 0uLL;
  v125 = (void **)&v123;
  v126 = 0;
  *(_QWORD *)&v123 = operator new(0x60uLL);
  *((_QWORD *)&v123 + 1) = v123;
  v124 = v123 + 96;
  *((_QWORD *)&v123 + 1) = sub_20B977860((uint64_t)&v124, (__int128 *)&v127, &v138, (char *)v123);
  sub_20B8825BC(v15);
  *(_OWORD *)(a1 + 152) = v123;
  *(_QWORD *)(a1 + 168) = v124;
  v124 = 0;
  v123 = 0uLL;
  v125 = (void **)&v123;
  sub_20B86F120(&v125);
  for (j = 0; j != -12; j -= 4)
  {
    if (SHIBYTE(v134[j + 2]) < 0)
      operator delete((void *)v134[j]);
  }
  v18 = (_QWORD *)operator new();
  v19 = v18;
  v20 = (int64x2_t *)(a1 + 72);
  *v18 = &unk_24C465028;
  v21 = *(_QWORD *)(a1 + 88);
  v22 = *(_QWORD **)(a1 + 80);
  if ((unint64_t)v22 >= v21)
  {
    v24 = ((uint64_t)v22 - v20->i64[0]) >> 3;
    if ((unint64_t)(v24 + 1) >> 61)
      sub_20B80CDD8();
    v25 = v21 - v20->i64[0];
    v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1))
      v26 = v24 + 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    v130[0] = a1 + 88;
    if (v27)
      v28 = (char *)sub_20B800BE8(a1 + 88, v27);
    else
      v28 = 0;
    v29 = &v28[8 * v24];
    v30 = &v28[8 * v27];
    v129 = v30;
    *(_QWORD *)v29 = v19;
    v23 = v29 + 8;
    v128.i64[1] = (uint64_t)(v29 + 8);
    v32 = *(_QWORD **)(a1 + 72);
    v31 = *(_QWORD **)(a1 + 80);
    if (v31 == v32)
    {
      v34 = vdupq_n_s64((unint64_t)v31);
    }
    else
    {
      do
      {
        v33 = *--v31;
        *v31 = 0;
        *((_QWORD *)v29 - 1) = v33;
        v29 -= 8;
      }
      while (v31 != v32);
      v34 = *v20;
      v23 = (_QWORD *)v128.i64[1];
      v30 = v129;
    }
    *(_QWORD *)(a1 + 72) = v29;
    *(_QWORD *)(a1 + 80) = v23;
    v128 = v34;
    v35 = *(char **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v30;
    v129 = v35;
    v127 = v34.i64[0];
    sub_20B8821E8((uint64_t)&v127);
  }
  else
  {
    *v22 = v18;
    v23 = v22 + 1;
  }
  *(_QWORD *)(a1 + 80) = v23;
  v36 = (_QWORD *)operator new();
  v37 = v36;
  *v36 = &unk_24C465488;
  v39 = *(_QWORD **)(a1 + 80);
  v38 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v39 >= v38)
  {
    v41 = ((uint64_t)v39 - v20->i64[0]) >> 3;
    if ((unint64_t)(v41 + 1) >> 61)
      sub_20B80CDD8();
    v42 = v38 - v20->i64[0];
    v43 = v42 >> 2;
    if (v42 >> 2 <= (unint64_t)(v41 + 1))
      v43 = v41 + 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    v130[0] = a1 + 88;
    if (v44)
      v45 = (char *)sub_20B800BE8(a1 + 88, v44);
    else
      v45 = 0;
    v46 = &v45[8 * v41];
    v47 = &v45[8 * v44];
    v129 = v47;
    *(_QWORD *)v46 = v37;
    v40 = v46 + 8;
    v128.i64[1] = (uint64_t)(v46 + 8);
    v49 = *(_QWORD **)(a1 + 72);
    v48 = *(_QWORD **)(a1 + 80);
    if (v48 == v49)
    {
      v51 = vdupq_n_s64((unint64_t)v48);
    }
    else
    {
      do
      {
        v50 = *--v48;
        *v48 = 0;
        *((_QWORD *)v46 - 1) = v50;
        v46 -= 8;
      }
      while (v48 != v49);
      v51 = *v20;
      v40 = (_QWORD *)v128.i64[1];
      v47 = v129;
    }
    *(_QWORD *)(a1 + 72) = v46;
    *(_QWORD *)(a1 + 80) = v40;
    v128 = v51;
    v52 = *(char **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v47;
    v129 = v52;
    v127 = v51.i64[0];
    sub_20B8821E8((uint64_t)&v127);
  }
  else
  {
    *v39 = v36;
    v40 = v39 + 1;
  }
  *(_QWORD *)(a1 + 80) = v40;
  v53 = (_QWORD *)operator new();
  v54 = v53;
  *v53 = &unk_24C464D18;
  v56 = *(_QWORD **)(a1 + 80);
  v55 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v56 >= v55)
  {
    v58 = ((uint64_t)v56 - v20->i64[0]) >> 3;
    if ((unint64_t)(v58 + 1) >> 61)
      sub_20B80CDD8();
    v59 = v55 - v20->i64[0];
    v60 = v59 >> 2;
    if (v59 >> 2 <= (unint64_t)(v58 + 1))
      v60 = v58 + 1;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v60;
    v130[0] = a1 + 88;
    if (v61)
      v62 = (char *)sub_20B800BE8(a1 + 88, v61);
    else
      v62 = 0;
    v63 = &v62[8 * v58];
    v64 = &v62[8 * v61];
    v129 = v64;
    *(_QWORD *)v63 = v54;
    v57 = v63 + 8;
    v128.i64[1] = (uint64_t)(v63 + 8);
    v66 = *(_QWORD **)(a1 + 72);
    v65 = *(_QWORD **)(a1 + 80);
    if (v65 == v66)
    {
      v68 = vdupq_n_s64((unint64_t)v65);
    }
    else
    {
      do
      {
        v67 = *--v65;
        *v65 = 0;
        *((_QWORD *)v63 - 1) = v67;
        v63 -= 8;
      }
      while (v65 != v66);
      v68 = *v20;
      v57 = (_QWORD *)v128.i64[1];
      v64 = v129;
    }
    *(_QWORD *)(a1 + 72) = v63;
    *(_QWORD *)(a1 + 80) = v57;
    v128 = v68;
    v69 = *(char **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v64;
    v129 = v69;
    v127 = v68.i64[0];
    sub_20B8821E8((uint64_t)&v127);
  }
  else
  {
    *v56 = v53;
    v57 = v56 + 1;
  }
  *(_QWORD *)(a1 + 80) = v57;
  v70 = (_QWORD *)operator new();
  v70[1] = &off_24C469C68;
  *v70 = &unk_24C462A28;
  v70[4] = v70 + 1;
  *(_QWORD *)&v123 = v70;
  v72 = *(_QWORD **)(a1 + 80);
  v71 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v72 >= v71)
  {
    v74 = ((uint64_t)v72 - v20->i64[0]) >> 3;
    if ((unint64_t)(v74 + 1) >> 61)
      sub_20B80CDD8();
    v75 = v71 - v20->i64[0];
    v76 = v75 >> 2;
    if (v75 >> 2 <= (unint64_t)(v74 + 1))
      v76 = v74 + 1;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
      v77 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v77 = v76;
    v130[0] = a1 + 88;
    if (v77)
    {
      v78 = (char *)sub_20B800BE8(a1 + 88, v77);
      v70 = (_QWORD *)v123;
    }
    else
    {
      v78 = 0;
    }
    v79 = &v78[8 * v74];
    v80 = &v78[8 * v77];
    v129 = v80;
    *(_QWORD *)&v123 = 0;
    *(_QWORD *)v79 = v70;
    v73 = v79 + 8;
    v128.i64[1] = (uint64_t)(v79 + 8);
    v82 = *(_QWORD **)(a1 + 72);
    v81 = *(_QWORD **)(a1 + 80);
    if (v81 == v82)
    {
      v84 = vdupq_n_s64((unint64_t)v81);
    }
    else
    {
      do
      {
        v83 = *--v81;
        *v81 = 0;
        *((_QWORD *)v79 - 1) = v83;
        v79 -= 8;
      }
      while (v81 != v82);
      v84 = *v20;
      v73 = (_QWORD *)v128.i64[1];
      v80 = v129;
    }
    *(_QWORD *)(a1 + 72) = v79;
    *(_QWORD *)(a1 + 80) = v73;
    v128 = v84;
    v85 = *(char **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v80;
    v129 = v85;
    v127 = v84.i64[0];
    sub_20B8821E8((uint64_t)&v127);
  }
  else
  {
    *(_QWORD *)&v123 = 0;
    *v72 = v70;
    v73 = v72 + 1;
  }
  *(_QWORD *)(a1 + 80) = v73;
  sub_20B940CA0((uint64_t *)&v123, 0);
  v86 = (_QWORD *)operator new();
  v87 = v86;
  *v86 = &unk_24C464CF0;
  v89 = *(_QWORD **)(a1 + 80);
  v88 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v89 >= v88)
  {
    v91 = ((uint64_t)v89 - v20->i64[0]) >> 3;
    if ((unint64_t)(v91 + 1) >> 61)
      sub_20B80CDD8();
    v92 = v88 - v20->i64[0];
    v93 = v92 >> 2;
    if (v92 >> 2 <= (unint64_t)(v91 + 1))
      v93 = v91 + 1;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v94 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v94 = v93;
    v130[0] = a1 + 88;
    if (v94)
      v95 = (char *)sub_20B800BE8(a1 + 88, v94);
    else
      v95 = 0;
    v96 = &v95[8 * v91];
    v97 = &v95[8 * v94];
    v129 = v97;
    *(_QWORD *)v96 = v87;
    v90 = v96 + 8;
    v128.i64[1] = (uint64_t)(v96 + 8);
    v99 = *(_QWORD **)(a1 + 72);
    v98 = *(_QWORD **)(a1 + 80);
    if (v98 == v99)
    {
      v101 = vdupq_n_s64((unint64_t)v98);
    }
    else
    {
      do
      {
        v100 = *--v98;
        *v98 = 0;
        *((_QWORD *)v96 - 1) = v100;
        v96 -= 8;
      }
      while (v98 != v99);
      v101 = *v20;
      v90 = (_QWORD *)v128.i64[1];
      v97 = v129;
    }
    *(_QWORD *)(a1 + 72) = v96;
    *(_QWORD *)(a1 + 80) = v90;
    v128 = v101;
    v102 = *(char **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v97;
    v129 = v102;
    v127 = v101.i64[0];
    sub_20B8821E8((uint64_t)&v127);
  }
  else
  {
    *v89 = v86;
    v90 = v89 + 1;
  }
  *(_QWORD *)(a1 + 80) = v90;
  v103 = (__int16 *)sub_20B896F94();
  v104 = operator new();
  v105 = v104;
  v106 = v103[221];
  *(_QWORD *)v104 = &unk_24C4651F0;
  *(_DWORD *)(v104 + 8) = v106;
  v108 = *(uint64_t **)(a1 + 80);
  v107 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v108 >= v107)
  {
    v110 = ((uint64_t)v108 - v20->i64[0]) >> 3;
    if ((unint64_t)(v110 + 1) >> 61)
      sub_20B80CDD8();
    v111 = v107 - v20->i64[0];
    v112 = v111 >> 2;
    if (v111 >> 2 <= (unint64_t)(v110 + 1))
      v112 = v110 + 1;
    if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
      v113 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v113 = v112;
    v130[0] = a1 + 88;
    if (v113)
      v114 = (char *)sub_20B800BE8(a1 + 88, v113);
    else
      v114 = 0;
    v115 = (uint64_t *)&v114[8 * v110];
    v116 = &v114[8 * v113];
    v129 = v116;
    *v115 = v105;
    v109 = v115 + 1;
    v128.i64[1] = (uint64_t)(v115 + 1);
    v118 = *(_QWORD **)(a1 + 72);
    v117 = *(_QWORD **)(a1 + 80);
    if (v117 == v118)
    {
      v120 = vdupq_n_s64((unint64_t)v117);
    }
    else
    {
      do
      {
        v119 = *--v117;
        *v117 = 0;
        *--v115 = v119;
      }
      while (v117 != v118);
      v120 = *v20;
      v109 = (_QWORD *)v128.i64[1];
      v116 = v129;
    }
    *(_QWORD *)(a1 + 72) = v115;
    *(_QWORD *)(a1 + 80) = v109;
    v128 = v120;
    v121 = *(char **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v116;
    v129 = v121;
    v127 = v120.i64[0];
    sub_20B8821E8((uint64_t)&v127);
  }
  else
  {
    *v108 = v104;
    v109 = v108 + 1;
  }
  *(_QWORD *)(a1 + 80) = v109;
  return a1;
}

void sub_20B979C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x20BD39CB0](v12, 0x1081C409227ACB4);
  sub_20B981D6C(v11);
  sub_20B8CD3CC(v10);
  v14 = v9[25];
  v9[25] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v9[24];
  v9[24] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  sub_20B97234C(v9 + 23, 0);
  sub_20B97234C(v9 + 22, 0);
  sub_20B86F120(&a9);
  sub_20B86F120(&a9);
  sub_20B9720A4(v9);
  _Unwind_Resume(a1);
}

BOOL sub_20B979E8C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  CFURLRef v6;
  CFURLRef v7;
  const __CFURL *v8;
  const __CFURL *v9;
  const char *v10;
  uint64_t v11;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  sub_20B972178((uint64_t *)a1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    sub_20B979F94(a1);
    v3 = 0;
    v4 = 0;
    v13[0] = CFSTR("Lexierra_ja_JP-dynamic-text.dat");
    v13[1] = CFSTR("LexicalLearning_ja_JP.dat");
    do
    {
      v5 = v3;
      v6 = sub_20B8D0CC0(*(const __CFURL **)(a1 + 40), (const __CFString *)v13[v4]);
      if (v6)
      {
        v7 = v6;
        sub_20B8D2E08((_BOOL8)v6);
        CFRelease(v7);
      }
      v3 = 1;
      v4 = 1;
    }
    while ((v5 & 1) == 0);
    v8 = sub_20B8D0CC0(*(const __CFURL **)(a1 + 40), CFSTR("Lexierra_ja_JP-dynamic-text.dat"));
    if (v8)
    {
      v9 = v8;
      if (sub_20B8D00CC(v8))
        sub_20B93AAE8((uint64_t)v9, v10, v11);
      CFRelease(v9);
    }
    sub_20B93E7CC(1);
  }
  return v2 != 0;
}

uint64_t sub_20B979F94(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  const __CFURL *v3;
  CFURLRef v4;
  CFURLRef v5;
  uint64_t v6;
  CFURLRef v7;
  CFURLRef v8;
  uint64_t v9;
  uint64_t v10;
  const __CFURL *v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  unsigned __int16 *v21;
  char **v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  UBlockCode Code;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFURL *v36;
  void ***v37;
  _QWORD *v38;
  unint64_t v39;
  CFURLRef *v40;
  _QWORD *v41;
  unint64_t v42;
  CFURLRef v43;
  const __CFURL *v44;
  void ***v45;

  if (*(_BYTE *)(result + 96))
  {
    v1 = result;
    v2 = (uint64_t *)(result + 176);
    if (!*(_QWORD *)(result + 176))
    {
      if (!*(_QWORD *)(result + 8) && *(_QWORD *)(result + 40))
        (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v3 = *(const __CFURL **)(v1 + 40);
      if (v3)
      {
        v4 = sub_20B8D0CC0(v3, CFSTR("DynamicBigramPhraseLexicon_ja_JP.db"));
        v43 = v4;
        if (v4)
        {
          v5 = v4;
          v6 = operator new();
          sub_20B917700(v6, v5, v1 + 128, 1u, 2, 500, 600);
          sub_20B97234C(v2, v6);
          CFRelease(v5);
        }
        v3 = *(const __CFURL **)(v1 + 40);
      }
      v7 = sub_20B8D0CC0(v3, CFSTR("DynamicPersonNameLexicon_ja_JP.db"));
      v43 = v7;
      if (v7)
      {
        v8 = v7;
        v9 = operator new();
        sub_20B917700(v9, v8, v1 + 152, 1u, 2, 500, 600);
        sub_20B97234C((uint64_t *)(v1 + 184), v9);
        CFRelease(v8);
      }
      sub_20B981DD4(v1 + 376, *(const __CFURL **)(v1 + 40));
      sub_20B9096D0(*(_QWORD *)(v1 + 8), 0, 0, 0x200u, &v43);
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      sub_20B97A500((uint64_t *)&v40, (v44 - v43) >> 5);
      sub_20B97A500((uint64_t *)&v37, (v44 - v43) >> 5);
      v35 = v1;
      v10 = (uint64_t)v43;
      v11 = v44;
      if (v43 != v44)
      {
        v12 = off_2547292C8;
        v36 = v44;
        do
        {
          v13 = sub_20B909B78(v10, *v12);
          v14 = sub_20B909B78(v10, off_2547292D0);
          v15 = (_QWORD *)sub_20B909B78(v10, off_2547292B0[0]);
          v16 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
          v17 = v15[1] - *v15;
          if ((unint64_t)((v16 >> 1) - 6) >= 0xFFFFFFFFFFFFFFFCLL
            && v17 != 2
            && ((unint64_t)v16 < 9 || v17 >= 6))
          {
            v21 = *(unsigned __int16 **)v14;
            v20 = *(_QWORD *)(v14 + 8);
            if (v20 == *(_QWORD *)v14)
              goto LABEL_32;
            v22 = v12;
            v23 = 0;
            v24 = 0;
            v25 = (v20 - (uint64_t)v21) >> 1;
            do
            {
              Code = ublock_getCode(v21[v24]);
              if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0)
                break;
              v23 = ++v24 >= v25;
            }
            while (v25 != v24);
            v12 = v22;
            v11 = v36;
            if (v23)
            {
LABEL_32:
              v28 = v41;
              if ((unint64_t)v41 >= v42)
              {
                v29 = sub_20B97FBCC((uint64_t *)&v40, v13);
              }
              else
              {
                *v41 = 0;
                v28[1] = 0;
                v28[2] = 0;
                sub_20B87ACC8(v28, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 1);
                v29 = (uint64_t)(v28 + 3);
              }
              v41 = (_QWORD *)v29;
              v30 = v38;
              if ((unint64_t)v38 >= v39)
              {
                v31 = sub_20B97FBCC((uint64_t *)&v37, v14);
              }
              else
              {
                *v38 = 0;
                v30[1] = 0;
                v30[2] = 0;
                sub_20B87ACC8(v30, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 1);
                v31 = (uint64_t)(v30 + 3);
              }
              v38 = (_QWORD *)v31;
            }
          }
          v10 += 32;
        }
        while ((const __CFURL *)v10 != v11);
      }
      v32 = *(_QWORD *)(v35 + 192);
      if (v32)
        sub_20B8AC0C0(v32);
      sub_20B935F18((uint64_t *)(v35 + 192), (uint64_t *)&v40, &v37, 200, 200, 0, 10000);
      v45 = (void ***)&v37;
      sub_20B83B400((void ***)&v45);
      v37 = (void ***)&v40;
      sub_20B83B400((void ***)&v37);
      v40 = &v43;
      sub_20B8882B4((void ***)&v40);
      v33 = *(_QWORD *)(v35 + 200);
      if (!v33)
      {
        v33 = operator new();
        sub_20B8A9F48(v33, 200, 0);
        v34 = *(_QWORD *)(v35 + 200);
        *(_QWORD *)(v35 + 200) = v33;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v33 = *(_QWORD *)(v35 + 200);
        }
      }
      sub_20B8AC0C0(v33);
      return sub_20B8AAA34(*(_QWORD *)(v35 + 200), 200, 0, 7);
    }
  }
  return result;
}

void sub_20B97A3B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C4023F7E159);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97A480()
{
  return 1;
}

unsigned __int8 *sub_20B97A488(uint64_t *a1)
{
  sub_20B97234C(a1 + 1, 0);
  sub_20B86F160(a1 + 2);
  sub_20B97234C(a1 + 22, 0);
  sub_20B97234C(a1 + 23, 0);
  sub_20B97234C(a1 + 50, 0);
  sub_20B97234C(a1 + 51, 0);
  sub_20B8AC0C0(a1[24]);
  sub_20B8AC0C0(a1[25]);
  return sub_20B93E7CC(1);
}

uint64_t sub_20B97A500(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20B80CDD8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B828D70(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_20B97FA84(a1, v7);
    return sub_20B83CBC8((uint64_t)v7);
  }
  return result;
}

void sub_20B97A59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B97A5B0()
{
  return CFSTR("DynamicPhraseLexicon_ja_JP.db");
}

__CFArray *sub_20B97A5BC(uint64_t a1, const __CFURL *a2)
{
  __CFArray *Mutable;
  const __CFURL *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  const __CFURL *v7;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v4 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_ja_JP.dictionary"));
  if (v4)
    CFArrayAppendValue(Mutable, v4);
  v5 = sub_20B8D0DEC(a2, CFSTR("PhraseLearning_ja_JP.db"));
  if (v4)
    CFRelease(v4);
  if (v5)
    CFArrayAppendValue(Mutable, v5);
  v6 = sub_20B8D0DEC(a2, CFSTR("BigramLearning_ja_JP.dictionary"));
  if (v5)
    CFRelease(v5);
  if (v6)
    CFArrayAppendValue(Mutable, v6);
  v7 = sub_20B8D0DEC(a2, CFSTR("BigramLearning_ja_JP.db"));
  if (v6)
    CFRelease(v6);
  if (v7)
  {
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
  }
  return Mutable;
}

void sub_20B97A6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFArray *sub_20B97A708()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, CFSTR("LexicalLearning_ja_JP.db"));
  CFArrayAppendValue(Mutable, CFSTR("Lexierra_ja_JP-dynamic-text.dat"));
  CFArrayAppendValue(Mutable, CFSTR("LexicalLearning_ja_JP.dat"));
  CFArrayAppendValue(Mutable, CFSTR("DynamicBigramPhraseLexicon_ja_JP.db"));
  CFArrayAppendValue(Mutable, CFSTR("BigramLearning_ja_JP.db"));
  CFArrayAppendValue(Mutable, CFSTR("BigramLearning_ja_JP.dictionary"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_ja_JP.db"));
  CFArrayAppendValue(Mutable, CFSTR("PhraseLearning_ja_JP.dictionary"));
  return Mutable;
}

uint64_t sub_20B97A7B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_20B973178((uint64_t)a1);
  v2 = a1[22];
  if (v2)
    sub_20B91833C(v2);
  v3 = a1[23];
  if (v3)
    sub_20B91833C(v3);
  sub_20B986F20((uint64_t)(a1 + 47));
  result = a1[30];
  if (result)
    return sub_20BA2F3DC(result);
  return result;
}

const __CFString *sub_20B97A80C(uint64_t a1, uint64_t a2)
{
  const __CFString *result;
  unint64_t Length;
  unint64_t v6;
  BOOL v7;
  const __CFString *v8;
  CFIndex v9;
  unint64_t v10;
  int CharacterAtIndex;
  CFIndex v12;
  unint64_t v13;
  int v14;
  const __CFString *v15;
  CFIndex v16;
  unint64_t v17;
  int v18;
  CFIndex v20;
  unint64_t v21;
  int v22;
  NSObject *v23;
  _BOOL8 v24;
  unsigned __int16 *v25;
  unint64_t v26;
  BOOL v27;
  unint64_t i;
  UBlockCode Code;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int16 *v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  result = *(const __CFString **)(a2 + 16);
  if (!result)
    return result;
  if (!*(_QWORD *)(a2 + 8))
    return 0;
  Length = CFStringGetLength(result);
  v6 = CFStringGetLength(*(CFStringRef *)(a2 + 8));
  result = 0;
  v7 = Length - 33 < 0xFFFFFFFFFFFFFFE0 || v6 == 0;
  if (v7 || v6 > 0x20)
    return result;
  v8 = *(const __CFString **)(a2 + 16);
  if (v8)
  {
    v9 = CFStringGetLength(*(CFStringRef *)(a2 + 16));
    if (v9)
    {
      v10 = v9;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v8, 0);
      if ((CharacterAtIndex - 48) < 0xA || (unsigned __int16)(CharacterAtIndex + 240) <= 9u)
      {
        v12 = 1;
        do
        {
          v13 = v12;
          if (v10 == v12)
            break;
          v14 = CFStringGetCharacterAtIndex(v8, v12);
          v12 = v13 + 1;
        }
        while ((v14 - 48) < 0xA || (unsigned __int16)(v14 + 240) < 0xAu);
        if (v13 >= v10)
        {
          v15 = *(const __CFString **)(a2 + 8);
          if (v15)
          {
            v16 = CFStringGetLength(*(CFStringRef *)(a2 + 8));
            if (v16)
            {
              v17 = v16;
              v18 = CFStringGetCharacterAtIndex(v15, 0);
              if ((v18 - 48) < 0xA || (unsigned __int16)(v18 + 240) <= 9u)
              {
                v20 = 1;
                do
                {
                  v21 = v20;
                  if (v17 == v20)
                    break;
                  v22 = CFStringGetCharacterAtIndex(v15, v20);
                  v20 = v21 + 1;
                }
                while ((v22 - 48) < 0xA || (unsigned __int16)(v22 + 240) < 0xAu);
                if (v21 >= v17)
                  return 0;
              }
            }
          }
        }
      }
    }
  }
  result = (const __CFString *)sub_20B8DB9E4(*(const __CFString **)(a2 + 16), *(const __CFString **)(a2 + 8));
  if ((_DWORD)result)
  {
    v23 = sub_20B9A7C5C(6u);
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
    if (v24)
    {
      v33 = *(_QWORD *)(a2 + 8);
      v32 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)buf = 138412546;
      v39 = v32;
      v40 = 2112;
      v41 = v33;
      _os_log_debug_impl(&dword_20B7F7000, v23, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning phrase %@ (%@)", buf, 0x16u);
    }
    sub_20B97AC50(v24, *(_QWORD *)(a1 + 8), a2);
    sub_20B8D0624(*(const __CFString **)(a2 + 16), 0, &v37);
    sub_20B8D0624(*(const __CFString **)(a2 + 8), 0, &v36);
    v25 = v37;
    if (v6 - 6 >= 0xFFFFFFFFFFFFFFFCLL)
    {
      v26 = *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40);
      if (v26 != 2 && (v6 < 5 || v26 >= 6))
      {
        if (!Length)
          goto LABEL_44;
        v27 = 0;
        for (i = 0; i != Length; v27 = i >= Length)
        {
          Code = ublock_getCode(v25[i]);
          if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0)
            break;
          ++i;
        }
        if (v27)
        {
LABEL_44:
          v31 = sub_20B9A7C5C(6u);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            v35 = *(_QWORD *)(a2 + 8);
            v34 = *(_QWORD *)(a2 + 16);
            *(_DWORD *)buf = 138412546;
            v39 = v34;
            v40 = 2112;
            v41 = v35;
            _os_log_debug_impl(&dword_20B7F7000, v31, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning dynamic word %@ (%@)", buf, 0x16u);
          }
          sub_20B8AB938(*(_QWORD *)(a1 + 200), v36, 2 * v6, v25, 2 * Length, **(unsigned __int16 **)(a2 + 40), *(unsigned __int16 *)(*(_QWORD *)(a2 + 48) - 2), 7000);
        }
      }
    }
    if (v36)
      MEMORY[0x20BD39C80](v36, 0x1000C80BDFB0063);
    if (v25)
      MEMORY[0x20BD39C80](v25, 0x1000C80BDFB0063);
    return (const __CFString *)1;
  }
  return result;
}

void sub_20B97ABB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C80BDFB0063);
  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B97AC14(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C460210;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_20B9776FC(a1);
}

void sub_20B97AC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  int v8;
  uint64_t v9;
  const void *v10;
  void *__p[2];
  char v12;
  uint64_t *v13;
  _QWORD *v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  v5 = *(const __CFString **)(a3 + 8);
  sub_20B80BBD0(__p, off_2547292C8[0]);
  sub_20B908BB0(&v13, v5, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v6 = *(const __CFString **)(a3 + 16);
  sub_20B80BBD0(__p, off_2547292D0);
  sub_20B908BB0(&v13, v6, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = *(_DWORD *)(a3 + 32);
  sub_20B80BBD0(__p, off_2547292A8[0]);
  sub_20B908C5C(&v13, v7, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v8 = *(_DWORD *)(a3 + 36);
  sub_20B80BBD0(__p, off_2547292A0[0]);
  sub_20B908C5C(&v13, v8, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  v10 = *(const void **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  sub_20B80BBD0(__p, off_2547292B0[0]);
  sub_20B9089C4(&v13, v10, (v9 - (uint64_t)v10) >> 1, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  sub_20B917E98(a2, (uint64_t)&v13, 0);
  sub_20B8896CC((uint64_t)&v13, v14[0]);
}

void sub_20B97ADCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  sub_20B8896CC((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_20B97AE20(uint64_t a1)
{
  CFIndex v2;
  uint64_t Count;
  void *ValueAtIndex;
  const char *v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  double v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char *v34;
  char *v35;
  void *v36;
  char *v37;
  char *v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) >= 2)
  {
    v2 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    while (1)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      if (v2 >= Count)
        break;
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v2);
      v7 = (const void *)objc_msgSend_rawCandidate(ValueAtIndex, v5, v6);
      if (v7)
        v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      else
        v8 = 0;
      v9 = v37;
      if (v37 >= v38)
      {
        v11 = (v37 - (_BYTE *)v36) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_20B80CDD8();
        v12 = (v38 - (_BYTE *)v36) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v38 - (_BYTE *)v36) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_20B800BE8((uint64_t)&v38, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v8;
        v10 = v15 + 8;
        v17 = (char *)v36;
        v16 = v37;
        if (v37 != v36)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = (char *)v36;
        }
        v36 = v15;
        v37 = v10;
        v38 = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v37 = v8;
        v10 = v9 + 8;
      }
      v37 = v10;
      ++v2;
    }
    __p = 0;
    v34 = 0;
    v35 = 0;
    v19 = v36;
    v20 = v37 - (_BYTE *)v36;
    if (v37 != v36)
    {
      if (v20 < 0)
        sub_20B80CDD8();
      __p = sub_20B800BE8((uint64_t)&v35, v20 >> 3);
      v35 = (char *)__p + 8 * v21;
      Count = (uint64_t)memmove(__p, v19, v20);
      v34 = (char *)__p + 8 * (v20 >> 3);
    }
    v22 = (char *)sub_20B97B2AC(Count, (uint64_t)&__p);
    if (__p)
    {
      v34 = (char *)__p;
      operator delete(__p);
    }
    v23 = (char *)v36;
    v24 = v37;
    v25 = 0.0;
    while (v23 != v24)
    {
      v25 = v25 + (*(double (**)(_QWORD))(**(_QWORD **)v23 + 392))(*(_QWORD *)v23);
      v23 += 8;
    }
    (*(void (**)(char *, double))(*(_QWORD *)v22 + 400))(v22, v25);
    (*(void (**)(char *))(*(_QWORD *)v22 + 544))(v22);
    if (v26 < 5)
    {
      v28 = sub_20B9A7C5C(6u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        v29 = (*(uint64_t (**)(char *))(*(_QWORD *)v22 + 24))(v22);
        v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v22 + 232))(v22);
        *(_DWORD *)buf = 138412546;
        v40 = v29;
        v41 = 2112;
        v42 = v30;
        _os_log_debug_impl(&dword_20B7F7000, v28, OS_LOG_TYPE_DEBUG, "[MJL::combinePartialCandidatesAndRegister] Registering as a single phrase: %@ (%@)", buf, 0x16u);
      }
      sub_20B97BD24(a1, v22, 0, 0, 1, 0);
    }
    else
    {
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
      sub_20B9C2F0C((_QWORD *)(a1 + 248));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
      v27 = sub_20B9A7C5C(6u);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v31 = (*(uint64_t (**)(char *))(*(_QWORD *)v22 + 24))(v22);
        v32 = (*(uint64_t (**)(char *))(*(_QWORD *)v22 + 232))(v22);
        *(_DWORD *)buf = 138412546;
        v40 = v31;
        v41 = 2112;
        v42 = v32;
        _os_log_debug_impl(&dword_20B7F7000, v27, OS_LOG_TYPE_DEBUG, "[MJL::combinePartialCandidatesAndRegister] Registering as a phrase sequence: %@ (%@)", buf, 0x16u);
      }
      sub_20B97BA04(a1, v22, 0);
    }
    sub_20B97CF64((_QWORD *)a1, (uint64_t)v22, 1);
    (*(void (**)(char *))(*(_QWORD *)v22 + 16))(v22);
    if (v36)
    {
      v37 = (char *)v36;
      operator delete(v36);
    }
  }
}

void sub_20B97B230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97B2AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _WORD *v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  __int16 v15;
  __int16 v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  char *v72;
  char *v73;
  void *v74;
  char *v75;
  char *v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;

  v2 = *(_QWORD **)a2;
  v69 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v69)
    return 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  v71 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v72 = 0;
  v73 = 0;
  do
  {
    v3 = *v2;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 88))(*v2) & 1) != 0)
    {
      v63 = 0;
      goto LABEL_96;
    }
    v70 = v2;
    v4 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 544))(v3);
    v6 = v5;
    v7 = *(char *)(v3 + 87);
    if (v7 >= 0)
      v8 = (_WORD *)(v3 + 64);
    else
      v8 = *(_WORD **)(v3 + 64);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 87);
    else
      v9 = *(_QWORD *)(v3 + 72);
    v10 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 552))(v3);
    v12 = v11;
    sub_20B8B17F4(v4, &v4[v6], (uint64_t)&v80);
    sub_20B8B17F4(v8, &v8[v9], (uint64_t)&v86);
    sub_20B8B17F4(v10, &v10[v12], (uint64_t)&v83);
    v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 304))(v3);
    if (v13[1] == *v13)
    {
      v43 = v72;
    }
    else
    {
      v14 = 0;
      do
      {
        v15 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 352))(v3, v14);
        v16 = v15;
        v17 = v78;
        if (v78 >= v79)
        {
          v19 = (char *)__p;
          v20 = v78 - (_BYTE *)__p;
          if (v78 - (_BYTE *)__p <= -3)
            sub_20B80CDD8();
          v21 = v20 >> 1;
          if (v79 - (_BYTE *)__p <= (unint64_t)((v20 >> 1) + 1))
            v22 = v21 + 1;
          else
            v22 = v79 - (_BYTE *)__p;
          if ((unint64_t)(v79 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
          {
            v24 = (char *)sub_20B80FD48((uint64_t)&v79, v23);
            v19 = (char *)__p;
            v17 = v78;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[2 * v21];
          *(_WORD *)v25 = v16;
          v18 = v25 + 2;
          while (v17 != v19)
          {
            v26 = *((_WORD *)v17 - 1);
            v17 -= 2;
            *((_WORD *)v25 - 1) = v26;
            v25 -= 2;
          }
          __p = v25;
          v78 = v18;
          v79 = &v24[2 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_WORD *)v78 = v15;
          v18 = v17 + 2;
        }
        v78 = v18;
        v27 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 320))(v3, v14);
        v28 = v27;
        v29 = v75;
        if (v75 >= v76)
        {
          v31 = (char *)v74;
          v32 = v75 - (_BYTE *)v74;
          if (v75 - (_BYTE *)v74 <= -3)
            sub_20B80CDD8();
          v33 = v32 >> 1;
          if (v76 - (_BYTE *)v74 <= (unint64_t)((v32 >> 1) + 1))
            v34 = v33 + 1;
          else
            v34 = v76 - (_BYTE *)v74;
          if ((unint64_t)(v76 - (_BYTE *)v74) >= 0x7FFFFFFFFFFFFFFELL)
            v35 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
          {
            v36 = (char *)sub_20B80FD48((uint64_t)&v76, v35);
            v31 = (char *)v74;
            v29 = v75;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[2 * v33];
          *(_WORD *)v37 = v28;
          v30 = v37 + 2;
          while (v29 != v31)
          {
            v38 = *((_WORD *)v29 - 1);
            v29 -= 2;
            *((_WORD *)v37 - 1) = v38;
            v37 -= 2;
          }
          v74 = v37;
          v75 = v30;
          v76 = &v36[2 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_WORD *)v75 = v27;
          v30 = v29 + 2;
        }
        v75 = v30;
        v39 = *v13 + 40 * v14;
        v40 = v72;
        if (v72 >= v73)
        {
          v44 = v71;
          v45 = 0xCCCCCCCCCCCCCCCDLL * ((v72 - (_BYTE *)v71) >> 3);
          v46 = v45 + 1;
          if (v45 + 1 > 0x666666666666666)
            sub_20B8821D4();
          if (0x999999999999999ALL * ((v73 - (_BYTE *)v71) >> 3) > v46)
            v46 = 0x999999999999999ALL * ((v73 - (_BYTE *)v71) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v73 - (_BYTE *)v71) >> 3) >= 0x333333333333333)
            v47 = 0x666666666666666;
          else
            v47 = v46;
          if (v47)
          {
            v48 = (char *)sub_20B882310((uint64_t)&v73, v47);
            v44 = v71;
            v40 = v72;
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[8 * ((v72 - (_BYTE *)v71) >> 3)];
          v50 = *(_OWORD *)v39;
          v51 = *(_OWORD *)(v39 + 16);
          *((_QWORD *)v49 + 4) = *(_QWORD *)(v39 + 32);
          *(_OWORD *)v49 = v50;
          *((_OWORD *)v49 + 1) = v51;
          if (v40 == v44)
          {
            v55 = &v48[40 * v45];
          }
          else
          {
            v52 = &v48[40 * v45];
            do
            {
              v53 = *(_OWORD *)((char *)v40 - 40);
              v54 = *(_OWORD *)((char *)v40 - 24);
              v55 = v52 - 40;
              *((_QWORD *)v52 - 1) = *((_QWORD *)v40 - 1);
              *(_OWORD *)(v52 - 24) = v54;
              *(_OWORD *)(v52 - 40) = v53;
              v40 = (_OWORD *)((char *)v40 - 40);
              v52 -= 40;
            }
            while (v40 != v44);
          }
          v43 = v49 + 40;
          v71 = v55;
          v72 = v49 + 40;
          v73 = &v48[40 * v47];
          if (v44)
            operator delete(v44);
        }
        else
        {
          v41 = *(_OWORD *)v39;
          v42 = *(_OWORD *)(v39 + 16);
          *((_QWORD *)v72 + 4) = *(_QWORD *)(v39 + 32);
          *v40 = v41;
          v40[1] = v42;
          v43 = (char *)v40 + 40;
        }
        v72 = v43;
        ++v14;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13[1] - *v13) >> 3) > v14);
    }
    if ((*((_DWORD *)v43 - 10) - 5) < 0xFFFFFFFE)
    {
      if (v80)
      {
        if (v81 != v80 && *((_WORD *)v81 - 1) == 32)
        {
          v81 -= 2;
          if (*((_WORD *)v43 - 8))
            --*((_WORD *)v43 - 8);
        }
      }
      if (v86)
      {
        if (v87 != v86 && *((_WORD *)v87 - 1) == 32)
        {
          v87 -= 2;
          if (*((_WORD *)v43 - 7))
            --*((_WORD *)v43 - 7);
        }
      }
      if (v83)
      {
        if (v84 != v83 && *((_WORD *)v84 - 1) == 32)
        {
          v84 -= 2;
          if (*((_WORD *)v43 - 6))
            --*((_WORD *)v43 - 6);
        }
      }
    }
    v2 = v70 + 1;
  }
  while (v70 + 1 != v69);
  v56 = **(_DWORD ***)a2;
  v57 = *(_QWORD *)(*(_QWORD *)(a2 + 8) - 8);
  v58 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v56 + 112))(v56);
  v59 = v56[55];
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 408))(v57);
  v61 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v56 + 416))(v56);
  v62 = operator new();
  v63 = v62;
  if (v80)
    v64 = (v81 - (_BYTE *)v80) >> 1;
  else
    v64 = 0;
  if (v86)
    v65 = (v87 - v86) >> 1;
  else
    v65 = 0;
  if (v83)
    v66 = (v84 - v83) >> 1;
  else
    v66 = 0;
  sub_20B916250(v62, v80, v64, v86, v65, v83, v66, v58, v59, 0, (uint64_t)&v71, 79, v60, v61);
LABEL_96:
  if (v71)
  {
    v72 = (char *)v71;
    operator delete(v71);
  }
  if (v74)
  {
    v75 = (char *)v74;
    operator delete(v74);
  }
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  return v63;
}

void sub_20B97B8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  void *v31;
  void *v32;

  MEMORY[0x20BD39CB0](v28, 0x10F3C4074548AAFLL);
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(_QWORD *)(v29 - 128) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 112);
  if (v32)
  {
    *(_QWORD *)(v29 - 104) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_20B97B9B4(uint64_t a1)
{
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
  sub_20B9C2F0C((_QWORD *)(a1 + 248));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
}

void sub_20B97BA04(uint64_t a1, char *a2, char a3)
{
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const __CFString *v11;
  uint64_t v12;
  const __CFAllocator *v13;
  const __CFString *v14;
  CFStringRef Copy;
  const UniChar *v16;
  CFIndex v17;
  CFStringRef v18;
  __int16 v19;
  _WORD *v20;
  unsigned int v21;
  _QWORD v22[3];
  _QWORD v23[5];
  void *__p;
  void *v25;

  if ((a3 & 1) != 0 || CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) > 0)
    return;
  if (!*(_BYTE *)sub_20B896F94())
  {
    v6 = sub_20B8DBD3C(*(_QWORD *)(a1 + 224), (uint64_t)a2);
    if (v6 < 3)
    {
      v9 = 0;
      v5 = 0;
      if (v6 != 2)
        goto LABEL_10;
    }
    else
    {
      v7 = sub_20B97BD24(a1, a2, 3uLL, 0, 0, 0);
      v8 = v7 | sub_20B97BD24(a1, a2, 3uLL, 1uLL, 0, 0);
      v9 = v8 | sub_20B97BD24(a1, a2, 3uLL, 2uLL, 0, 0);
    }
    v10 = sub_20B97BD24(a1, a2, 2uLL, 0, 0, 0);
    v5 = v9 | v10 | sub_20B97BD24(a1, a2, 2uLL, 1uLL, 0, 0);
    goto LABEL_10;
  }
  v5 = 0;
LABEL_10:
  if ((*(uint64_t (**)(char *))(*(_QWORD *)a2 + 472))(a2))
  {
    v11 = (const __CFString *)(*(uint64_t (**)(char *))(*(_QWORD *)a2 + 472))(a2);
    if (CFStringGetLength(v11)
      && ((*(void (**)(char *))(*(_QWORD *)a2 + 544))(a2), v12)
      && (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 48))(a2))
    {
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v14 = (const __CFString *)(*(uint64_t (**)(char *))(*(_QWORD *)a2 + 472))(a2);
      Copy = CFStringCreateCopy(v13, v14);
      v16 = (const UniChar *)(*(uint64_t (**)(char *))(*(_QWORD *)a2 + 544))(a2);
      v18 = CFStringCreateWithCharacters(0, v16, v17);
      v19 = *(_WORD *)(*(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)a2 + 304))(a2) + 30);
      v20 = operator new(2uLL);
      *v20 = v19;
      v22[1] = v20 + 1;
      v22[2] = v20 + 1;
      v22[0] = v20;
      sub_20B97FCE0(v23, Copy, v18, 0, 0, (uint64_t)v22, 1);
      operator delete(v20);
      v21 = sub_20B97A80C(a1, (uint64_t)v23);
      v23[0] = &off_24C460210;
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
      sub_20B9776FC(v23);
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = sub_20B97BD24(a1, a2, 1uLL, 0, 1, 1);
  }
  if ((v5 | v21) == 1 && os_variant_has_internal_diagnostics() && (sub_20B97E624(a1, a2) & 1) == 0)
    sub_20B973288(a1, (uint64_t)a2);
  sub_20B97CF64((_QWORD *)a1, (uint64_t)a2, 0);
}

void sub_20B97BD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B97AC14((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97BD24(uint64_t a1, char *a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  char *v7;
  int v9;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t i;
  int v15;
  const __CFString *v18;
  uint64_t v19;
  const __CFString *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t j;
  UBlockCode Code;
  int v30;
  int v31;
  _BOOL4 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  char v45;
  const char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  __CFString *MutableCopy;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  UniChar *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  __int16 v67;
  __int16 v68;
  void *v69;
  unint64_t v70;
  int v71;
  int v72;
  BOOL v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  unint64_t v78;
  unint64_t v79;
  __int16 v80;
  char *v81;
  _WORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  const __CFString *v93;
  unsigned int v94;
  const __CFString *v95;
  int v96;
  CFIndex Length;
  const __CFString *v98;
  unsigned int CharacterAtIndex;
  unsigned __int16 *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  unsigned int v105;
  uint64_t v106;
  int64x2_t v107;
  CFIndex v108;
  CFIndex v109;
  unint64_t v110;
  const __CFString *v111;
  const __CFString *v112;
  int v113;
  int v114;
  const void *v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  const void *v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  const __CFString *v132;
  __CFString *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  const UniChar *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned __int16 *v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  const __CFString *cf;
  int v150;
  __int16 v151;
  __int16 v152;
  unint64_t v153;
  unint64_t v156;
  CFStringRef v158;
  CFStringRef v159;
  void *v160[2];
  uint64_t v161;
  void *v162[2];
  uint64_t v163;
  int v164;
  CFStringRef theString;
  uint64_t *v166;
  _QWORD *v167[2];
  _BYTE __dst[24];
  void *v169;
  _BYTE v170[26];
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  char v175;
  void *v176;
  char v177;
  void *__p;
  char v179;
  _BYTE v180[24];
  __int128 v181;
  __int128 v182;
  char *v183;
  uint8_t buf[24];
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  if (!a2
    || (v7 = a2, ((*(uint64_t (**)(char *))(*(_QWORD *)a2 + 88))(a2) & 1) != 0)
    || ((*(uint64_t (**)(char *))(*(_QWORD *)v7 + 200))(v7) & 1) != 0)
  {
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  if (a5)
  {
    v11 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 544))(v7);
    (*(void (**)(char *))(*(_QWORD *)v7 + 544))(v7);
    if (v12)
    {
      v13 = 0;
      for (i = 0; i != v12; v13 = i >= v12)
      {
        v15 = *(unsigned __int16 *)(v11 + 2 * i);
        if ((v15 - 12449) >= 0x5A && v15 != 12540 && v15 != 12316)
          break;
        ++i;
      }
      if (!v13)
      {
        if (((*(uint64_t (**)(char *))(*(_QWORD *)v7 + 184))(v7) & 1) != 0)
          goto LABEL_20;
        if ((*(unsigned int (**)(char *))(*(_QWORD *)v7 + 96))(v7) == 79)
        {
          if (v7[119] < 0)
            v22 = *((_QWORD *)v7 + 13);
          else
            LOWORD(v22) = v7[119];
          if ((unsigned __int16)v22 <= 8u)
          {
            v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 544))(v7);
            (*(void (**)(char *))(*(_QWORD *)v7 + 544))(v7);
            if (!v24)
              goto LABEL_20;
            v25 = v24;
            v26 = 0;
            for (j = 0; j != v25; v26 = j >= v25)
            {
              Code = ublock_getCode(*(unsigned __int16 *)(v23 + 2 * j));
              if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0)
                break;
              ++j;
            }
            if (v26)
            {
LABEL_20:
              v18 = (const __CFString *)(*(uint64_t (**)(char *))(*(_QWORD *)v7 + 24))(v7);
              v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 232))(v7);
              if (*(_QWORD *)(a1 + 184))
              {
                v20 = (const __CFString *)v19;
                *(_QWORD *)&__dst[8] = 0;
                *(_QWORD *)&__dst[16] = 0;
                *(_QWORD *)__dst = &__dst[8];
                sub_20B80BBD0(v180, off_2547294F0[0]);
                sub_20B908BB0((uint64_t **)__dst, v18, (__int128 *)v180);
                if ((v180[23] & 0x80000000) != 0)
                  operator delete(*(void **)v180);
                sub_20B80BBD0(v180, off_2547294F8[0]);
                sub_20B908BB0((uint64_t **)__dst, v20, (__int128 *)v180);
                if ((v180[23] & 0x80000000) != 0)
                  operator delete(*(void **)v180);
                sub_20B80BBD0(v180, "Honorific");
                sub_20B908C5C((uint64_t **)__dst, 0, (__int128 *)v180);
                if ((v180[23] & 0x80000000) != 0)
                  operator delete(*(void **)v180);
                sub_20B917E98(*(_QWORD *)(a1 + 184), (uint64_t)__dst, 0);
                v21 = sub_20B9A7C5C(6u);
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v180 = 138412546;
                  *(_QWORD *)&v180[4] = v20;
                  *(_WORD *)&v180[12] = 2112;
                  *(_QWORD *)&v180[14] = v18;
                  _os_log_debug_impl(&dword_20B7F7000, v21, OS_LOG_TYPE_DEBUG, "[MJL::addPersonNameEntryIntoLearningDictionary] Registering person name %@ -> %@\n", v180, 0x16u);
                }
                sub_20B8896CC((uint64_t)__dst, *(_QWORD **)&__dst[8]);
              }
            }
          }
        }
      }
    }
    v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 96))(v7);
    v31 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 408))(v7);
    v33 = (v30 - 65) < 0x15 && ((0x107A01u >> (v30 - 65)) & 1) != 0 || v30 == 80 && v31 == 0;
    v147 = v33;
  }
  else
  {
    v147 = 0;
  }
  v34 = (uint64_t *)(*(uint64_t (**)(char *))(*(_QWORD *)v7 + 304))(v7);
  v36 = *v34;
  v35 = v34[1];
  v37 = sub_20B9A7C5C(6u);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    v123 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 24))(v7);
    v124 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 56))(v7);
    v125 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)v7 + 232))(v7);
    *(_DWORD *)__dst = 138414082;
    *(_QWORD *)&__dst[4] = v123;
    *(_WORD *)&__dst[12] = 2112;
    *(_QWORD *)&__dst[14] = v124;
    *(_WORD *)&__dst[22] = 2112;
    v169 = v125;
    *(_WORD *)v170 = 2048;
    *(_QWORD *)&v170[2] = a3;
    *(_WORD *)&v170[10] = 2048;
    *(_QWORD *)&v170[12] = a4;
    *(_WORD *)&v170[20] = 1024;
    *(_DWORD *)&v170[22] = a5;
    v171 = 1024;
    v172 = v147;
    v173 = 1024;
    v174 = a6;
    _os_log_debug_impl(&dword_20B7F7000, v37, OS_LOG_TYPE_DEBUG, "[MJL::registerPhraseSequence] S:%@ AS:%@ DR:%@ phraseSize:%lu skipPhraseCount:%lu NonPhraseLearning:%d lexicalLearning:%d shouldLearnBigram:%d", __dst, 0x46u);
  }
  v38 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 544))(v7);
  v41 = v7 + 96;
  if (v7[119] < 0)
    v41 = (_QWORD *)*v41;
  *(_QWORD *)v180 = v38;
  *(_QWORD *)&v180[8] = 0;
  v181 = 0u;
  v182 = 0u;
  *(_QWORD *)&v180[16] = v41;
  v183 = 0;
  v42 = *(void **)(a1 + 112);
  if (!v42)
    goto LABEL_64;
  v43 = *(void **)(a1 + 104);
  v44 = objc_msgSend_rawCandidate(*(void **)(a1 + 112), v39, v40);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 88))(v44);
  v48 = v43 ? v45 : 1;
  if ((v48 & 1) != 0)
    goto LABEL_64;
  v49 = objc_msgSend_rawCandidate(v42, v46, v47);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 88))(v49) & 1) != 0)
    goto LABEL_64;
  v119 = (const void *)objc_msgSend_rawCandidate(v42, v50, v51);
  if (v119)
    v122 = __dynamic_cast(v119, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v122 = 0;
  MutableCopy = (__CFString *)objc_msgSend_rawCandidate(v43, v120, v121);
  if (MutableCopy)
  {
    v126 = __dynamic_cast(MutableCopy, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    MutableCopy = 0;
    if (v122)
    {
      if (v126)
      {
        v128 = *(_QWORD *)(a1 + 256);
        v127 = *(_QWORD *)(a1 + 264);
        if (0xCCCCCCCCCCCCCCCDLL * ((v127 - v128) >> 3) <= (*(uint64_t (**)(void *))(*(_QWORD *)v126 + 48))(v126))
        {
LABEL_64:
          MutableCopy = 0;
          goto LABEL_65;
        }
        (*(void (**)(void *))(*(_QWORD *)v122 + 544))(v122);
        if (v129 == 1
          && (v130 = *(_QWORD *)(a1 + 224),
              v131 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v122 + 352))(v122, 0),
              *(unsigned __int16 *)(v130 + 88) <= v131)
          && *(unsigned __int16 *)(v130 + 90) >= v131)
        {
          v135 = *(_QWORD *)(a1 + 256);
          v134 = *(_QWORD *)(a1 + 264);
          v136 = (*(uint64_t (**)(void *))(*(_QWORD *)v126 + 48))(v126);
          v137 = *(_QWORD *)(*(_QWORD *)(a1 + 328)
                           + 8
                           * sub_20B8CD760((_QWORD *)(a1 + 248), ~v136 - 0x3333333333333333 * ((v134 - v135) >> 3)));
          v138 = *(_QWORD *)(a1 + 280);
          v139 = (*(_QWORD *)(a1 + 288) - v138) >> 1;
          if (v139 <= v137)
            v140 = 0;
          else
            v140 = (const UniChar *)(v138 + 2 * v137);
          if (v138)
            v141 = v139 - v137;
          else
            v141 = 0;
          if (v139 <= v137)
            v142 = 0;
          else
            v142 = v141;
          (*(void (**)(void *))(*(_QWORD *)v126 + 544))(v126);
          MutableCopy = 0;
          if (v140 && v142 >= v143)
            MutableCopy = (__CFString *)CFStringCreateWithCharacters(0, v140, v142 - v143);
        }
        else
        {
          v132 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v122 + 24))(v122);
          MutableCopy = CFStringCreateMutableCopy(0, 0, v132);
          if (MutableCopy)
          {
            v133 = MutableCopy;
            CFStringTrimWhitespace(MutableCopy);
            MutableCopy = v133;
          }
        }
      }
    }
  }
LABEL_65:
  cf = MutableCopy;
  theString = MutableCopy;
  v164 = 0;
  v162[0] = 0;
  v162[1] = 0;
  v163 = 0;
  v160[0] = 0;
  v160[1] = 0;
  v161 = 0;
  v53 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 48))(v7);
  sub_20B9C36B8((_QWORD *)(a1 + 248), v53, (uint64_t *)v162, v160, (_WORD *)&v164 + 1, &v164);
  if (v35 != v36)
  {
    v54 = 0;
    v9 = 0;
    v55 = (v35 - v36) / 40;
    v156 = v55 - 1;
    v145 = (unsigned __int16 *)(v7 + 64);
    v146 = 0;
    v144 = a1 + 376;
    if (v55 <= 1)
      v55 = 1;
    v153 = v55;
    v148 = a1;
    while (1)
    {
      v56 = v54;
      v57 = (const void *)sub_20B91708C((uint64_t)v7, v54);
      v59 = v58;
      v60 = sub_20B916C5C((uint64_t)v7, v54);
      if (!v59)
        goto LABEL_207;
      v62 = v61;
      if (!v61)
        goto LABEL_207;
      v63 = (UniChar *)v60;
      v64 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v7 + 352))(v7, v54);
      v65 = (uint64_t)v7;
      v66 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 344))(v7);
      if (sub_20B986758(v63, v62, v64))
      {
        if (v64 <= 0x64F)
          v152 = word_20BA41828[v64];
        else
          v152 = 0;
        v150 = v9;
        if ((unsigned __int16)v164 <= 0x64FuLL)
          v151 = word_20BA41828[(unsigned __int16)v164];
        else
          v151 = 0;
        if (HIWORD(v164) <= 0x64FuLL)
          v67 = word_20BA41828[HIWORD(v164)];
        else
          v67 = 0;
        if (v66 <= 0x64F)
          v68 = word_20BA41828[v66];
        else
          v68 = 0;
        memset(buf, 0, sizeof(buf));
        if (v56 < v156)
        {
          v69 = (void *)sub_20B916C5C(v65, v56 + 1);
          sub_20B877ED0(__dst, v69, v70);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          *(_OWORD *)buf = *(_OWORD *)__dst;
          *(_QWORD *)&buf[16] = *(_QWORD *)&__dst[16];
        }
        sub_20B97FDA8(__dst, (__int128 *)v160, (__int128 *)v162, xmmword_20BA4F570, (__int128 *)buf, xmmword_20BA4F570, v151, v67, v152, v68, 0);
        v72 = *(char *)(v65 + 87);
        v73 = v72 < 0;
        v74 = *(unsigned __int16 **)(v65 + 64);
        if (v72 >= 0)
          v74 = v145;
        v75 = *(unsigned __int8 *)(v65 + 87);
        if (v73)
          v75 = *(_QWORD *)(v65 + 72);
        v76 = sub_20B983CC4(v144, v57, v59, v63, v62, (uint64_t)__dst, v147, v71, v74, v75);
        if (v179 < 0)
          operator delete(__p);
        if (v177 < 0)
          operator delete(v176);
        if (v175 < 0)
          operator delete(*(void **)&v170[16]);
        if ((v170[15] & 0x80000000) != 0)
          operator delete(v169);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        v9 = v150 | v76;
      }
      if (SHIBYTE(v161) < 0)
        operator delete(v160[0]);
      *(_OWORD *)v160 = *(_OWORD *)v162;
      v161 = v163;
      HIBYTE(v163) = 0;
      LOWORD(v162[0]) = 0;
      sub_20B877ED0(__dst, v63, v62);
      if (SHIBYTE(v163) < 0)
        operator delete(v162[0]);
      *(_OWORD *)v162 = *(_OWORD *)__dst;
      v163 = *(_QWORD *)&__dst[16];
      LOWORD(v164) = HIWORD(v164);
      HIWORD(v164) = v64;
      v77 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v65 + 352))(v65, v56);
      v78 = *(_QWORD *)&v180[8] + (unsigned __int16)v62;
      if (!*(_QWORD *)v180)
        v78 = 0;
      v79 = *(_QWORD *)&v180[16] ? v181 + (unsigned __int16)v59 : 0;
      *(_QWORD *)&v180[8] = v78;
      *(_QWORD *)&v181 = v79;
      if (v78 > 0x20 || v79 > 0x20)
        goto LABEL_207;
      v80 = v77;
      DWORD2(v181) |= 1 << (v78 - 1);
      HIDWORD(v181) |= 1 << (v79 - 1);
      v81 = (char *)*((_QWORD *)&v182 + 1);
      if (*((_QWORD *)&v182 + 1) >= (unint64_t)v183)
      {
        v83 = (char *)v182;
        v84 = *((_QWORD *)&v182 + 1) - v182;
        if ((uint64_t)(*((_QWORD *)&v182 + 1) - v182) <= -3)
          sub_20B80CDD8();
        v85 = v84 >> 1;
        if ((unint64_t)&v183[-v182] <= (v84 >> 1) + 1)
          v86 = v85 + 1;
        else
          v86 = (uint64_t)&v183[-v182];
        if ((unint64_t)&v183[-v182] >= 0x7FFFFFFFFFFFFFFELL)
          v87 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
        {
          v88 = (char *)sub_20B80FD48((uint64_t)&v183, v87);
          v81 = (char *)*((_QWORD *)&v182 + 1);
          v83 = (char *)v182;
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[2 * v85];
        *(_WORD *)v89 = v80;
        v82 = v89 + 2;
        while (v81 != v83)
        {
          v90 = *((_WORD *)v81 - 1);
          v81 -= 2;
          *((_WORD *)v89 - 1) = v90;
          v89 -= 2;
        }
        *(_QWORD *)&v182 = v89;
        *((_QWORD *)&v182 + 1) = v82;
        v183 = &v88[2 * v87];
        if (v83)
          operator delete(v83);
      }
      else
      {
        **((_WORD **)&v182 + 1) = v77;
        v82 = v81 + 2;
      }
      *((_QWORD *)&v182 + 1) = v82;
      if (!a3 && v56 == v156)
        break;
      if (a3 && ((sub_20B8B2500(*(_QWORD *)(v148 + 224), v64, v66) & 1) != 0 || v56 == v156))
      {
        ++v146;
        v54 = v56 + 1;
        v7 = (char *)v65;
        if (!((a3 - a4 + v146) % a3))
          goto LABEL_136;
      }
      else
      {
        v7 = (char *)v65;
        v54 = v56 + 1;
      }
LABEL_202:
      if (v54 == v153)
        goto LABEL_207;
    }
    v7 = (char *)v65;
    v54 = v56 + 1;
LABEL_136:
    v91 = *(_QWORD *)&v180[8];
    if (*(_QWORD *)&v180[8] >= 3uLL)
    {
      v92 = *(_QWORD *)v180;
      if (sub_20B8D9E98(**(_WORD **)v180) || sub_20B8D9E98(*(_WORD *)(v92 + 2 * v91 - 2)))
        goto LABEL_202;
    }
    if (a3 && v146 <= a4)
    {
      if (cf)
        CFRelease(cf);
      v93 = 0;
      theString = 0;
LABEL_201:
      *(_QWORD *)v180 += 2 * *(_QWORD *)&v180[8];
      *(_QWORD *)&v180[8] = 0;
      v118 = *(_QWORD *)&v180[16] + 2 * v181;
      v181 = 0uLL;
      *(_QWORD *)&v180[16] = v118;
      *((_QWORD *)&v182 + 1) = v182;
      cf = v93;
      goto LABEL_202;
    }
    v159 = CFStringCreateWithCharacters(0, *(const UniChar **)&v180[16], v181);
    v158 = CFStringCreateWithCharacters(0, *(const UniChar **)v180, *(CFIndex *)&v180[8]);
    sub_20B97FCE0(__dst, v159, v158, SHIDWORD(v181), SDWORD2(v181), (uint64_t)&v182, (uint64_t)(*((_QWORD *)&v182 + 1) - v182) >> 1);
    if ((unint64_t)v169 > 0xFF)
      v94 = 0;
    else
      v94 = sub_20B97A80C(v148, (uint64_t)__dst);
    if (!*(_QWORD *)(v148 + 176) || !a6)
    {
      v95 = cf;
      if (v94)
      {
LABEL_192:
        v93 = v158;
        v158 = 0;
        if (!v95)
        {
LABEL_194:
          theString = v93;
          *(_QWORD *)__dst = &off_24C460210;
          if (*(_QWORD *)&v170[8])
          {
            *(_QWORD *)&v170[16] = *(_QWORD *)&v170[8];
            operator delete(*(void **)&v170[8]);
          }
          sub_20B9776FC(__dst);
          if (v158)
            CFRelease(v158);
          if (v159)
            CFRelease(v159);
          v9 |= v94;
          goto LABEL_201;
        }
LABEL_193:
        CFRelease(v95);
        goto LABEL_194;
      }
LABEL_167:
      v93 = 0;
      if (!v95)
        goto LABEL_194;
      goto LABEL_193;
    }
    v95 = cf;
    if (cf && v94)
    {
      v96 = v9;
      Length = CFStringGetLength(cf);
      v98 = theString;
      if (Length == 1)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(theString, 0);
        v100 = (unsigned __int16 *)&unk_20BA94DC6;
        v101 = 14;
        do
        {
          v102 = v101 >> 1;
          v103 = &v100[v101 >> 1];
          v105 = *v103;
          v104 = v103 + 1;
          v101 += ~(v101 >> 1);
          if (v105 < CharacterAtIndex)
            v100 = v104;
          else
            v101 = v102;
        }
        while (v101);
        if (v100 != (unsigned __int16 *)&unk_20BA94DE2 && *v100 <= CharacterAtIndex)
          goto LABEL_189;
      }
      v106 = *(_QWORD *)(v148 + 176);
      v107.i64[0] = v106;
      v107.i64[1] = (uint64_t)v98;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v107), (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(*(int8x16_t *)&__dst[8], *(int8x16_t *)&__dst[8], 8uLL))))) & 1) != 0)
      {
        v95 = v98;
        goto LABEL_192;
      }
      v108 = CFStringGetLength(v98);
      v109 = CFStringGetLength(*(CFStringRef *)&__dst[16]);
      v110 = CFStringGetLength(*(CFStringRef *)&__dst[8]);
      if ((unint64_t)(v109 - 33) < 0xFFFFFFFFFFFFFFE0)
        goto LABEL_189;
      v9 = v96;
      v95 = v98;
      if (v110 && v110 <= 0x20 && v108)
      {
        if (sub_20B8DB9E4(*(const __CFString **)&__dst[16], *(const __CFString **)&__dst[8]))
        {
          v167[0] = 0;
          v167[1] = 0;
          v166 = (uint64_t *)v167;
          sub_20B80BBD0(buf, "FirstSurface");
          sub_20B908BB0(&v166, v98, (__int128 *)buf);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v111 = *(const __CFString **)&__dst[8];
          sub_20B80BBD0(buf, off_254729500[0]);
          sub_20B908BB0(&v166, v111, (__int128 *)buf);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v112 = *(const __CFString **)&__dst[16];
          sub_20B80BBD0(buf, off_254729508[0]);
          sub_20B908BB0(&v166, v112, (__int128 *)buf);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v113 = *(_DWORD *)v170;
          sub_20B80BBD0(buf, off_254729510[0]);
          sub_20B908C5C(&v166, v113, (__int128 *)buf);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v114 = *(_DWORD *)&v170[4];
          sub_20B80BBD0(buf, off_254729518[0]);
          sub_20B908C5C(&v166, v114, (__int128 *)buf);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v115 = *(const void **)&v170[8];
          v116 = *(_QWORD *)&v170[16];
          sub_20B80BBD0(buf, off_254729520);
          sub_20B9089C4(&v166, v115, (v116 - (uint64_t)v115) >> 1, (__int128 *)buf);
          v9 = v96;
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          sub_20B917E98(v106, (uint64_t)&v166, 0);
          v117 = sub_20B9A7C5C(6u);
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = v98;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = *(_QWORD *)&__dst[8];
            *(_WORD *)&buf[22] = 2112;
            v185 = *(_QWORD *)&__dst[16];
            _os_log_debug_impl(&dword_20B7F7000, v117, OS_LOG_TYPE_DEBUG, "[MJL::addBigramEntryIntoLearningDictionary] Registering phrase bigram %@ -> %@ %@\n", buf, 0x20u);
          }
          sub_20B8896CC((uint64_t)&v166, v167[0]);
          goto LABEL_190;
        }
LABEL_189:
        v9 = v96;
LABEL_190:
        v95 = v98;
      }
    }
    if (v94)
      goto LABEL_192;
    goto LABEL_167;
  }
  LOBYTE(v9) = 0;
LABEL_207:
  if (SHIBYTE(v161) < 0)
    operator delete(v160[0]);
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  if (cf)
    CFRelease(cf);
  if ((_QWORD)v182)
  {
    *((_QWORD *)&v182 + 1) = v182;
    operator delete((void *)v182);
  }
  return v9 & 1;
}

void sub_20B97CDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33,const void *a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,const void *a49,__int16 a50,char a51,char a52,_QWORD *a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  void *v58;

  sub_20B8896CC((uint64_t)&a50, a53);
  sub_20B97AC14(&a55);
  sub_20B87E150(&a33, 0);
  sub_20B87E150(&a34, 0);
  if (a40 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  sub_20B87E150(&a49, 0);
  v58 = *(void **)(v56 - 168);
  if (v58)
  {
    *(_QWORD *)(v56 - 160) = v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_20B97CF64(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  const __CFAllocator *v16;
  const CFArrayCallBacks *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const UniChar *v21;
  _QWORD *v22;
  std::string::size_type v23;
  unint64_t v24;
  void **v25;
  _BOOL4 v26;
  const UniChar *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  CFIndex v33;
  CFIndex v34;
  CFStringRef v35;
  CFStringRef v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CFIndex v42;
  CFIndex v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  CFIndex v47;
  unsigned int v48;
  CFStringRef v49;
  CFStringRef v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  CFIndex v54;
  const __CFString *ValueAtIndex;
  const std::string::value_type *p_p;
  std::string::size_type v57;
  const __CFString *v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  NSObject *v61;
  std::string::size_type v62;
  std::string::size_type v63;
  uint64_t v64;
  std::string *v65;
  uint64_t v66;
  unint64_t v67;
  const __CFAllocator *contentsDeallocator;
  const __CFString *contentsDeallocatora;
  CFStringRef str;
  const __CFString *stra;
  uint64_t v72;
  _QWORD *v73;
  __CFArray *v74;
  __CFArray *theArray;
  void *__dst[2];
  unsigned __int8 v77;
  __CFArray *v78;
  CFMutableArrayRef Mutable;
  __int128 __p;
  unsigned __int8 v81;
  std::string v82;
  uint64_t v83;
  __int16 v84;
  const __CFString *v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  CFRange v89;
  CFRange v90;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) & 1) != 0)
    return;
  v6 = a1[30];
  if (!v6)
    return;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[33] - a1[32]) >> 3);
  if ((a3 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v6 = a1[30];
  }
  v9 = (const __CFString *)(v7 - v8);
  v10 = *(_QWORD *)(v6 + 32);
  v11 = __OFSUB__(v7 - v8, v10);
  v12 = v7 - v8 - v10;
  if (v12 < 0 != v11)
    v13 = -1;
  else
    v13 = v12;
  v14 = v13 + 1;
  str = v9;
  v66 = (uint64_t)v9 - v13 - 1;
  v15 = v66 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v17 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v15, MEMORY[0x24BDBD690]);
  v72 = a2;
  v74 = CFArrayCreateMutable(v16, v15, v17);
  theArray = Mutable;
  v78 = v74;
  sub_20B87C9E0(__dst, (char *)L" ");
  v73 = a1;
  if ((uint64_t)str > v13 + 1)
  {
    v18 = 40 * v13;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    do
    {
      v19 = *(_QWORD *)(a1[41] + 8 * v14);
      v20 = a1[35];
      if (v19 >= (a1[36] - v20) >> 1)
      {
        v21 = 0;
        v22 = a1;
        v23 = 0;
      }
      else
      {
        v21 = (const UniChar *)(v20 + 2 * v19);
        v22 = a1;
        if (v20)
          v23 = *(unsigned __int16 *)(a1[32] + v18 + 64);
        else
          v23 = 0;
      }
      if ((v77 & 0x80u) == 0)
        v24 = v77;
      else
        v24 = (unint64_t)__dst[1];
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v82.__r_.__value_.__l.__size_ = v23;
      if ((v77 & 0x80u) == 0)
        v25 = __dst;
      else
        v25 = (void **)__dst[0];
      v26 = sub_20B947DC0((uint64_t *)&v82, v25, v24);
      v27 = 0;
      v28 = 0;
      v29 = v23 - v24;
      if (!v21)
        v29 = 0;
      if (v26)
        v23 = v29;
      v30 = *(_QWORD *)(v22[44] + 8 * v14);
      v31 = v22[38];
      if (v30 < (v22[39] - v31) >> 1)
      {
        v27 = (const UniChar *)(v31 + 2 * v30);
        if (v31)
          v28 = *(unsigned __int16 *)(v73[32] + v18 + 68);
        else
          v28 = 0;
      }
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v82.__r_.__value_.__l.__size_ = v28;
      v32 = sub_20B947DC0((uint64_t *)&v82, v25, v24);
      v33 = v28 - v24;
      if (!v27)
        v33 = 0;
      if (v32)
        v34 = v33;
      else
        v34 = v28;
      v35 = CFStringCreateWithCharactersNoCopy(v16, v21, v23, contentsDeallocator);
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      CFArrayAppendValue(theArray, v35);
      a1 = v73;
      v36 = CFStringCreateWithCharactersNoCopy(v16, v27, v34, contentsDeallocator);
      *(_QWORD *)&__p = v36;
      CFArrayAppendValue(v74, v36);
      if (v36)
        CFRelease(v36);
      if (v35)
        CFRelease(v35);
      ++v14;
      v18 += 40;
    }
    while (v14 < (uint64_t)str);
  }
  v37 = v72;
  v38 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 304))(v72);
  v40 = *v38;
  v39 = v38[1];
  stra = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  contentsDeallocatora = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 232))(v37);
  if (v39 != v40)
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = (v39 - v40) / 40;
    if (v44 <= 1)
      v44 = 1;
    v67 = v44;
    v45 = 24;
    do
    {
      v46 = v38;
      v47 = *(unsigned __int16 *)(*v38 + v45);
      v48 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 320))(v72, v41);
      v89.location = v43;
      v89.length = v47;
      v49 = CFStringCreateWithSubstring(v16, stra, v89);
      v90.location = v42;
      v90.length = v48;
      v50 = CFStringCreateWithSubstring(v16, contentsDeallocatora, v90);
      CFArrayAppendValue(theArray, v49);
      CFArrayAppendValue(v74, v50);
      CFRelease(v49);
      CFRelease(v50);
      v43 += v47;
      v42 += v48;
      ++v41;
      v45 += 40;
      v38 = v46;
    }
    while (v67 != v41);
  }
  v51 = sub_20B9A7C5C(6u);
  v52 = (uint64_t)v73;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
  {
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 56))(v72);
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 232))(v72);
    LODWORD(v82.__r_.__value_.__l.__data_) = 138413314;
    *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = v62;
    WORD2(v82.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(v82.__r_.__value_.__r.__words[2]) = 2112;
    v83 = v64;
    v84 = 2112;
    v85 = CFSTR("online");
    v86 = 2048;
    v87 = v66;
    _os_log_debug_impl(&dword_20B7F7000, v51, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] %@ (%@/%@) type:%@ contextWordCount:%ld", (uint8_t *)&v82, 0x34u);
  }
  v53 = sub_20B9A7C5C(6u);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
  {
    v54 = 0;
    memset(&v82, 0, sizeof(v82));
    while (v54 < CFArrayGetCount(theArray))
    {
      if (v66 == v54)
        std::string::append(&v82, "|| ", 3uLL);
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v54);
      sub_20B8D1C98(ValueAtIndex, &__p);
      if ((v81 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v81 & 0x80u) == 0)
        v57 = v81;
      else
        v57 = *((_QWORD *)&__p + 1);
      std::string::append(&v82, p_p, v57);
      if ((char)v81 < 0)
        operator delete((void *)__p);
      std::string::push_back(&v82, 47);
      v58 = (const __CFString *)CFArrayGetValueAtIndex(v74, v54);
      sub_20B8D1C98(v58, &__p);
      if ((v81 & 0x80u) == 0)
        v59 = (const std::string::value_type *)&__p;
      else
        v59 = (const std::string::value_type *)__p;
      if ((v81 & 0x80u) == 0)
        v60 = v81;
      else
        v60 = *((_QWORD *)&__p + 1);
      std::string::append(&v82, v59, v60);
      if ((char)v81 < 0)
        operator delete((void *)__p);
      std::string::push_back(&v82, 32);
      ++v54;
    }
    v61 = sub_20B9A7C5C(6u);
    v52 = (uint64_t)v73;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
    {
      v65 = &v82;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v65 = (std::string *)v82.__r_.__value_.__r.__words[0];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v65;
      _os_log_debug_impl(&dword_20B7F7000, v61, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] %s", (uint8_t *)&__p, 0xCu);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
  }
  sub_20B97EC4C(v52, 0, theArray, v74, v66, 0);
  if ((char)v77 < 0)
  {
    operator delete(__dst[0]);
    if (!v74)
      goto LABEL_78;
    goto LABEL_77;
  }
  if (v74)
LABEL_77:
    CFRelease(v74);
LABEL_78:
  if (theArray)
    CFRelease(theArray);
}

void sub_20B97D604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,const void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_20B8B035C(&a24, 0);
  sub_20B8B035C(&a25, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97D6F0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  result = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = objc_msgSend_rawCandidate(a2, v6, v7);
      if (v8)
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8) ^ 1;
      else
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFString *sub_20B97D774(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  __CFString **v5;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2) & 0x4000000) != 0)
  {
    v5 = &off_24C49C8E8;
  }
  else
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
    v4 = sub_20B9698DC(v3);
    v5 = &off_24C49C8C8;
    if (v4)
      v5 = &off_24C49C8E0;
  }
  return *v5;
}

uint64_t sub_20B97D7E0(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int16 v13;
  int *v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const __CFString *v28;
  int v29;
  char v30;
  char v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  __int16 v63;
  unsigned int v64;
  int v65;
  unsigned int v67;
  unsigned int v68;
  int v69;
  void *__p;
  char *v71;
  char *v72;
  _QWORD v73[6];
  __int16 v74;
  _QWORD v75[2];
  _QWORD v76[2];
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  char v80;

  if (!a2
    || ((*(uint64_t (**)(int *))(*(_QWORD *)a2 + 88))(a2) & 1) != 0
    || (*(unsigned int (**)(int *))(*(_QWORD *)a2 + 72))(a2) == 7)
  {
    return 0;
  }
  v62 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 48))(a2);
  __p = 0;
  v71 = 0;
  v72 = 0;
  v5 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 544))(a2);
  v7 = v6;
  v8 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 552))(a2);
  v58 = v9;
  v59 = (void *)v8;
  v60 = v7;
  v61 = (void *)v5;
  if (v62)
  {
    v10 = 0;
    v11 = 0;
    v65 = 0;
    v12 = v8;
    do
    {
      v68 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a2 + 128))(a2, v10);
      v13 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a2 + 312))(a2, v10);
      v67 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a2 + 320))(a2, v10);
      v64 = v11;
      v63 = v13;
      v14 = (int *)(*(_QWORD *)(*(uint64_t (**)(int *))(*(_QWORD *)a2 + 304))(a2) + 40 * v10);
      v15 = *v14;
      v16 = v14[1];
      v17 = v14[3];
      v18 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a2 + 344))(a2, v10);
      v19 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a2 + 352))(a2, v10);
      v69 = 0;
      if (v17)
      {
        if (!(v17 >> 28) || v17 >> 28 == 5)
          goto LABEL_18;
      }
      v21 = *(_QWORD *)(a1 + 208);
      v22 = **(_DWORD **)(a1 + 512);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 224))(v21);
      v24 = sub_20B969844(v22, v23);
      v77 = 0;
      v78 = &v77;
      v79 = 0x2000000000;
      v80 = 0;
      v25 = v67;
      if (!v12)
        v25 = 0;
      v76[0] = v12;
      v76[1] = v25;
      v26 = v68;
      if (!v5)
        v26 = 0;
      v75[0] = v5;
      v75[1] = v26;
      v73[0] = MEMORY[0x24BDAC760];
      v73[1] = 0x40000000;
      v73[2] = sub_20B97DF08;
      v73[3] = &unk_24C46C578;
      v74 = v19;
      v73[4] = &v77;
      v73[5] = &v69;
      sub_20BA20C80(v21, v76, (uint64_t)v75, v24, (uint64_t)v73);
      v27 = *((unsigned __int8 *)v78 + 24);
      _Block_object_dispose(&v77, 8);
      if (!v27)
LABEL_18:
        v69 = v16;
      if (!(v18 | v19))
      {
        v28 = (const __CFString *)(*(uint64_t (**)(int *))(*(_QWORD *)a2 + 24))(a2);
        if (sub_20B8D1888(v28))
        {
          v18 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 224) + 50);
          v19 = v18;
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
      }
      v29 = v69;
      v30 = (*(uint64_t (**)(int *, _QWORD, _QWORD))(*(_QWORD *)a2 + 248))(a2, 0, 0);
      v31 = v30;
      v32 = v71;
      if (v71 >= v72)
      {
        v35 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - (_BYTE *)__p) >> 3);
        v36 = v35 + 1;
        if (v35 + 1 > 0x666666666666666)
          sub_20B8821D4();
        if (0x999999999999999ALL * ((v72 - (_BYTE *)__p) >> 3) > v36)
          v36 = 0x999999999999999ALL * ((v72 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v72 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v37 = 0x666666666666666;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)sub_20B882310((uint64_t)&v72, v37);
        else
          v38 = 0;
        v39 = &v38[40 * v35];
        *(_DWORD *)v39 = v15;
        *((_DWORD *)v39 + 1) = v29;
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *((_WORD *)v39 + 12) = v68;
        *((_WORD *)v39 + 13) = v63;
        *((_WORD *)v39 + 14) = v67;
        *((_WORD *)v39 + 15) = v18;
        *((_WORD *)v39 + 16) = v19;
        *((_WORD *)v39 + 17) = 0;
        v39[36] = 0;
        v39[37] = v31;
        *((_WORD *)v39 + 19) = 2;
        v41 = (char *)__p;
        v40 = v71;
        v42 = v39;
        if (v71 == __p)
        {
          v33 = v64;
        }
        else
        {
          v33 = v64;
          do
          {
            v43 = *(_OWORD *)(v40 - 40);
            v44 = *(_OWORD *)(v40 - 24);
            *((_QWORD *)v42 - 1) = *((_QWORD *)v40 - 1);
            *(_OWORD *)(v42 - 24) = v44;
            *(_OWORD *)(v42 - 40) = v43;
            v42 -= 40;
            v40 -= 40;
          }
          while (v40 != v41);
          v40 = v41;
        }
        v34 = v39 + 40;
        __p = v42;
        v71 = v39 + 40;
        v72 = &v38[40 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_DWORD *)v71 = v15;
        *((_DWORD *)v32 + 1) = v29;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_WORD *)v32 + 12) = v68;
        v33 = v64;
        *((_WORD *)v32 + 13) = v63;
        *((_WORD *)v32 + 14) = v67;
        *((_WORD *)v32 + 15) = v18;
        *((_WORD *)v32 + 16) = v19;
        *((_WORD *)v32 + 17) = 0;
        v32[36] = 0;
        v32[37] = v30;
        v34 = v32 + 40;
        *((_WORD *)v32 + 19) = 2;
      }
      v71 = v34;
      v45 = v69;
      v12 += 2 * v67;
      v5 += 2 * v68;
      v65 += v45
           + (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 208) + 64))(*(_QWORD *)(a1 + 208), v33, v18);
      ++v10;
      v11 = v19;
    }
    while (v10 != v62);
  }
  else
  {
    v65 = 0;
    v19 = 0;
  }
  v46 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 208) + 64))(*(_QWORD *)(a1 + 208), v19, 0);
  v47 = *((char *)a2 + 87);
  if (v47 >= 0)
    v48 = a2 + 16;
  else
    v48 = (void *)*((_QWORD *)a2 + 8);
  if (v47 >= 0)
    v49 = *((unsigned __int8 *)a2 + 87);
  else
    v49 = *((_QWORD *)a2 + 9);
  v50 = a2[55];
  v51 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 376))(a2);
  v68 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 96))(a2);
  v52 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 408))(a2);
  v53 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 416))(a2);
  v54 = *(_QWORD *)(a1 + 216);
  v3 = operator new();
  sub_20B89E3F8((_QWORD *)v3, v61, v60, v48, v49, v59, v58, v46 + v65, v50, v51, (uint64_t)&__p, __SPAIR64__(v52, v68), v53, v54);
  if ((*(uint64_t (**)(int *))(*(_QWORD *)a2 + 472))(a2))
  {
    v55 = (const void *)(*(uint64_t (**)(int *))(*(_QWORD *)a2 + 472))(a2);
    sub_20B88B52C((const void **)(v3 + 128), v55);
  }
  (*(void (**)(int *))(*(_QWORD *)a2 + 392))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 400))(v3);
  *(_QWORD *)(v3 + 160) = *((_QWORD *)a2 + 20);
  *(_DWORD *)(v3 + 192) = a2[48];
  v56 = *(_QWORD *)a2;
  *(_QWORD *)(v3 + 8) = *((_QWORD *)a2 + 1);
  v57 = (*(uint64_t (**)(int *))(v56 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 512))(v3, v57);
  *(_WORD *)(v3 + 16) = *((_WORD *)a2 + 8);
  *(_BYTE *)(v3 + 225) = *((_BYTE *)a2 + 225);
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v3 + 528))(v3, 4, "Creating accepted candidate from a conversion candidate", 1);
  if (__p)
  {
    v71 = (char *)__p;
    operator delete(__p);
  }
  return v3;
}

void sub_20B97DE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  MEMORY[0x20BD39CB0](v27, 0x10F3C40C8E81E66);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97DF08(uint64_t result, uint64_t a2, _BYTE *a3)
{
  int v3;

  v3 = *(unsigned __int16 *)(a2 + 94);
  if (v3 == *(unsigned __int16 *)(result + 48) && *(unsigned __int16 *)(a2 + 92) == v3)
  {
    **(_DWORD **)(result + 40) = *(__int16 *)(a2 + 84);
    *a3 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

id sub_20B97DF48(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const __CFString *AnalysisString;
  const char *v18;
  uint64_t v19;
  const __CFString *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  const __CFString *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  const void *v40;
  int *v41;
  const __CFString *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  UniChar *v57;
  uint64_t v58;
  int v59;
  int v60;
  char *v61;
  int *v62;
  uint64_t v63;
  _QWORD *v64;
  void *__p[3];
  unint64_t v68;
  void *v69;
  _BYTE *v70;
  char *v71;
  UniChar *v72;
  UniChar *v73;

  v4 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4))
  {
    v23 = objc_msgSend_rawCandidate(a2, v5, v6);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23) != 7)
    {
      v7 = a2;
      if (!a2)
        return v7;
      v37 = objc_msgSend_rawCandidate(a2, (const char *)a2, v24);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 88))(v37);
      v7 = a2;
      if ((v38 & 1) != 0)
        return v7;
      v40 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, v39);
      if (v40)
        v41 = (int *)__dynamic_cast(v40, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      else
        v41 = 0;
      v58 = sub_20B97D7E0((uint64_t)a1, v41);
      v56 = sub_20B8E1754(v58);
      goto LABEL_50;
    }
    v7 = a2;
    if (!a2)
      return v7;
    v25 = objc_msgSend_rawCandidate(a2, (const char *)a2, v24);
    v7 = a2;
    if (!v25)
      return v7;
    v27 = objc_msgSend_rawCandidate(a2, (const char *)a2, v26);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
    v7 = a2;
    if (v28 != 7)
      return v7;
    v29 = operator new(2uLL);
    *v29 = 9787;
    v32 = objc_msgSend_rawCandidate(a2, v30, v31);
    v33 = (_QWORD *)v32;
    if (v32)
    {
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      v35 = 40;
      if (!v34)
        v35 = 24;
      v36 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v33 + v35))(v33);
    }
    else
    {
      v36 = 0;
    }
    sub_20B8D0790(v36, &v72);
    v60 = (int)v72;
    v59 = (int)v73;
    v61 = (char *)operator new(0x28uLL);
    v70 = v61 + 40;
    v71 = v61 + 40;
    *((_QWORD *)v61 + 1) = 0;
    *((_QWORD *)v61 + 2) = 0;
    *(_QWORD *)v61 = 0;
    *((_WORD *)v61 + 12) = (v59 - v60) >> 1;
    *(_QWORD *)(v61 + 26) = 0x647064700010001;
    *((_WORD *)v61 + 17) = 0;
    v61[36] = 0;
    *(_WORD *)(v61 + 37) = 513;
    v61[39] = 0;
    v69 = v61;
    v62 = (int *)a1[64];
    v63 = a1[27];
    v64 = (_QWORD *)operator new();
    sub_20B89E3F8(v64, v72, v73 - v72, v29, 1uLL, v29, 1uLL, 0, 0, 0, (uint64_t)&v69, 75, *v62, v63);
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v64 + 528))(v64, 4, "Creating accepted candidate from a facemark candidate", 1);
    v56 = sub_20B8E1754((uint64_t)v64);
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    v57 = v29;
    goto LABEL_49;
  }
  v7 = a2;
  if (!a2)
    return v7;
  v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, v6);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
  v7 = a2;
  if (!v9)
    return v7;
  v11 = (const __CFString *)objc_msgSend_rawCandidate(a2, (const char *)a2, v10);
  if (v11)
  {
    v12 = (__CFString *)v11;
    v13 = (*((uint64_t (**)(const __CFString *))v11->isa + 5))(v11);
    v14 = 40;
    if (!v13)
      v14 = 24;
    v11 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v12->isa + v14))(v12);
  }
  sub_20B8D0790(v11, &v72);
  AnalysisString = (const __CFString *)MecabraCandidateGetAnalysisString(a2, v15, v16);
  sub_20B8D0790(AnalysisString, (UniChar **)&v69);
  v68 = 0;
  if ((*(_BYTE *)a1[64] & 0x20) != 0)
  {
    v42 = (const __CFString *)MecabraCandidateGetAnalysisString(a2, v18, v19);
    sub_20B87C26C(v42, (CFIndex *)&v68, __p);
  }
  else
  {
    v20 = (const __CFString *)MecabraCandidateGetAnalysisString(a2, v18, v19);
    sub_20B8D0624(v20, (CFIndex *)&v68, __p);
  }
  v43 = __p[0];
  if (__p[0])
    v44 = v68;
  else
    v44 = 0;
  v45 = objc_msgSend_rawCandidate(a2, v21, v22);
  v46 = (_QWORD *)v45;
  if (v45)
  {
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
    v48 = 40;
    if (!v47)
      v48 = 24;
    v49 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v46 + v48))(v46);
  }
  else
  {
    v49 = 0;
  }
  v50 = sub_20B8D1888(v49);
  v51 = 48;
  if (v50)
    v51 = 50;
  v52 = *(_WORD *)(a1[28] + v51);
  sub_20B8D74E4(__p, 1uLL);
  v53 = (char *)__p[0];
  *(_OWORD *)((char *)__p[0] + 4) = 0u;
  *(_OWORD *)(v53 + 20) = 0u;
  *((_DWORD *)v53 + 9) = 0;
  *((_WORD *)v53 + 12) = ((_DWORD)v73 - (_DWORD)v72) >> 1;
  *((_WORD *)v53 + 13) = ((_DWORD)v70 - (_DWORD)v69) >> 1;
  *((_WORD *)v53 + 14) = v44;
  *((_WORD *)v53 + 15) = v52;
  *((_WORD *)v53 + 16) = v52;
  *(_WORD *)(v53 + 37) = 513;
  *(_DWORD *)v53 = -1;
  v54 = a1[27];
  v55 = (_QWORD *)operator new();
  sub_20B89E3F8(v55, v72, v73 - v72, v69, (v70 - (_BYTE *)v69) >> 1, v43, v44, 0, 0, 0, (uint64_t)__p, 0, 0, v54);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v55 + 528))(v55, 4, "Creating accepted candidate from a synthetic candidate", 1);
  v56 = sub_20B8E1754((uint64_t)v55);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v43)
    MEMORY[0x20BD39C80](v43, 0x1000C80BDFB0063);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  v57 = v72;
  if (v72)
  {
    v73 = v72;
LABEL_49:
    operator delete(v57);
  }
LABEL_50:
  v7 = a2;
  if (v56)
    return (id)v56;
  return v7;
}

void sub_20B97E448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 72);
  if (v23)
  {
    *(_QWORD *)(v21 - 64) = v23;
    operator delete(v23);
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_20B97E580(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) & 1) != 0)
  {
    a1[33] = a1[32];
    a1[36] = a1[35];
    a1[39] = a1[38];
    a1[42] = a1[41];
    a1[45] = a1[44];
    sub_20B9C2F0C(a1 + 31);
  }
  else
  {
    v8 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v8)
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v9 = 0;
    sub_20B9C33DC((uint64_t)(a1 + 31), (uint64_t)v9);
  }
}

uint64_t sub_20B97E624(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *i;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  CFIndex v14;
  uint64_t v15;
  unint64_t v16;
  const UniChar *v17;
  CFIndex v18;
  _BOOL4 v19;
  unint64_t j;
  int v21;
  UChar32 v24;
  NSObject *v25;
  CFStringRef v26;
  int v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  const void *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  CFIndex numChars;
  _BOOL4 v46;
  int v47;
  UniChar *chars;
  UniChar *charsa;
  void *__p;
  _DWORD *v51;
  uint64_t v52;
  uint8_t buf[4];
  unint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    (*(void (**)(_QWORD *))(*a2 + 552))(a2);
    if (!v4)
      goto LABEL_50;
    (*(void (**)(_QWORD *))(*a2 + 544))(a2);
    if (!v5
      || ((*(uint64_t (**)(_QWORD *))(*a2 + 176))(a2) & 1) != 0
      || (*(unsigned int (**)(_QWORD *))(*a2 + 96))(a2) == 89
      || (*(unsigned int (**)(_QWORD *))(*a2 + 96))(a2) == 85
      || (*(unsigned int (**)(_QWORD *))(*a2 + 96))(a2) == 76)
    {
      goto LABEL_50;
    }
    for (i = (_DWORD *)a2[17]; i != (_DWORD *)a2[18]; i += 10)
    {
      if (*i == 4)
        goto LABEL_50;
    }
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 96))(a2) == 83
      || (*(unsigned int (**)(_QWORD *))(*a2 + 96))(a2) == 79)
    {
      goto LABEL_50;
    }
    v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 304))(a2);
    v51 = 0;
    v52 = 0;
    __p = 0;
    sub_20B882248(&__p, *(const void **)v8, *(_QWORD *)(v8 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3));
    v9 = v51;
    if (v51 == __p)
    {
LABEL_43:
      v27 = 0;
    }
    else
    {
      v10 = 0;
      v9 = __p;
      while (1)
      {
        v11 = v9[10 * v10];
        v44 = v11;
        if (v11)
          v12 = v11 == 10;
        else
          v12 = 1;
        v13 = !v12;
        v47 = v13;
        chars = (UniChar *)sub_20B916C5C((uint64_t)a2, v10);
        numChars = v14;
        v15 = sub_20B91708C((uint64_t)a2, v10);
        v17 = (const UniChar *)v15;
        v18 = v16;
        if (v16)
        {
          v19 = 0;
          for (j = 0; j != v16; v19 = j >= v16)
          {
            v21 = *(unsigned __int16 *)(v15 + 2 * j);
            if ((v21 - 12353) >= 0x56 && v21 != 12540 && v21 != 12316)
              break;
            ++j;
          }
        }
        else
        {
          v19 = 1;
        }
        v24 = *chars;
        v46 = v24 != 9787 && (u_charType(v24) - 19) < 0xB;
        v25 = sub_20B9A7C5C(6u);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          charsa = (UniChar *)CFStringCreateWithCharacters(0, chars, numChars);
          v26 = CFStringCreateWithCharacters(0, v17, v18);
          *(_DWORD *)buf = 134218754;
          v54 = v10 + 1;
          v55 = 2112;
          v56 = (uint64_t)charsa;
          v57 = 2112;
          v58 = (uint64_t)v26;
          v59 = 1024;
          LODWORD(v60) = v44;
          _os_log_debug_impl(&dword_20B7F7000, v25, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] %zu-th Word validation: (%@/%@), kind: %d", buf, 0x26u);
        }
        if (((v47 | v46 | !v19) & 1) != 0)
          break;
        ++v10;
        v9 = __p;
        if (v10 >= 0xCCCCCCCCCCCCCCCDLL * (((char *)v51 - (_BYTE *)__p) >> 3))
          goto LABEL_43;
      }
      v28 = sub_20B9A7C5C(6u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v54 = v10 + 1;
        _os_log_debug_impl(&dword_20B7F7000, v28, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] %zu-th Word validation: skipped.", buf, 0xCu);
      }
      v27 = 1;
      v9 = __p;
    }
    if (v9)
    {
      v51 = v9;
      operator delete(v9);
    }
    if (v27)
    {
LABEL_50:
      v29 = sub_20B9A7C5C(6u);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v31 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
        v32 = (*(uint64_t (**)(_QWORD *))(*a2 + 56))(a2);
        v33 = (*(uint64_t (**)(_QWORD *))(*a2 + 232))(a2);
        v34 = (*(uint64_t (**)(_QWORD *))(*a2 + 96))(a2);
        *(_DWORD *)buf = 138413058;
        v54 = v31;
        v55 = 2112;
        v56 = v32;
        v57 = 2112;
        v58 = v33;
        v59 = 1024;
        LODWORD(v60) = v34;
        _os_log_debug_impl(&dword_20B7F7000, v29, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] Skipped validation: %@ (%@/%@), kind: %c", buf, 0x26u);
      }
      return 1;
    }
    else
    {
      v35 = atomic_load((unsigned __int8 *)&qword_25472BDD8);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_25472BDD8))
      {
        qword_25472BDE0 = (uint64_t)&unk_20BA94DB4;
        qword_25472BDE8 = 8;
        __cxa_guard_release(&qword_25472BDD8);
      }
      v36 = (const void *)(*(uint64_t (**)(_QWORD *))(*a2 + 552))(a2);
      if (v37 == qword_25472BDE8 && !memcmp(v36, (const void *)qword_25472BDE0, 2 * v37))
        v7 = 0;
      else
        v7 = sub_20B97F8DC(a1, (uint64_t)a2);
      v38 = sub_20B9A7C5C(6u);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        if ((_DWORD)v7)
          v39 = "true";
        else
          v39 = "false";
        v40 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
        v41 = (*(uint64_t (**)(_QWORD *))(*a2 + 56))(a2);
        v42 = (*(uint64_t (**)(_QWORD *))(*a2 + 232))(a2);
        v43 = (*(uint64_t (**)(_QWORD *))(*a2 + 96))(a2);
        *(_DWORD *)buf = 136316162;
        v54 = (unint64_t)v39;
        v55 = 2112;
        v56 = v40;
        v57 = 2112;
        v58 = v41;
        v59 = 2112;
        v60 = v42;
        v61 = 1024;
        v62 = v43;
        _os_log_debug_impl(&dword_20B7F7000, v38, OS_LOG_TYPE_DEBUG, "[MecabraJapanese::isValidLearningCandidate] %s: %@ (%@/%@), kind: %c", buf, 0x30u);
      }
    }
  }
  else
  {
    sub_20B9A7C5C(6u);
    return 0;
  }
  return v7;
}

void sub_20B97EC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B97EC4C(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  _BOOL8 v12;
  void *v14[3];

  if (!*(_QWORD *)(a1 + 240))
    return 0;
  sub_20B97EDF8(a1, a2, a3, a4, v14);
  v11 = v14[0];
  if (v14[0] != v14[1])
  {
    v12 = (int)sub_20B97F250(a1, a2, a3, (uint64_t *)v14, a5, a6) > 0;
    if (!v11)
      return v12;
    goto LABEL_7;
  }
  v12 = 0;
  if (v14[0])
LABEL_7:
    operator delete(v11);
  return v12;
}

void sub_20B97ECF4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B97ED0C(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, uint64_t a5)
{
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  const __CFString *ValueAtIndex;
  __CFString *v14;
  _BOOL8 v15;

  Count = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, MEMORY[0x24BDBD690]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      v14 = sub_20B96DFA4(*(_QWORD *)(a1 + 232), ValueAtIndex);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
    }
  }
  v15 = sub_20B97EC4C(a1, a2, theArray, Mutable, a4, a5);
  CFRelease(Mutable);
  return v15;
}

void sub_20B97EDF8(uint64_t a1@<X0>, uint64_t a2@<X1>, const __CFArray *a3@<X2>, const __CFArray *a4@<X3>, void **a5@<X8>)
{
  char *v8;
  CFIndex Count;
  CFIndex v10;
  const __CFString *ValueAtIndex;
  const __CFString *v12;
  void *v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  _BOOL4 v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  int *v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v43;
  uint64_t v44;
  void *__src;
  CFIndex v46;
  CFIndex v47;
  void *__p;
  char *v49;
  char *v50;
  uint8_t buf[4];
  const __CFString *v52;
  __int16 v53;
  const __CFString *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(4uLL);
  __p = v8;
  *(_DWORD *)v8 = 1;
  v49 = v8 + 4;
  v50 = v8 + 4;
  Count = CFArrayGetCount(a3);
  if (Count < 1)
  {
LABEL_37:
    v31 = v49;
    v30 = v50;
    if (v49 >= v50)
    {
      v33 = (char *)__p;
      v34 = (v49 - (_BYTE *)__p) >> 2;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62)
        sub_20B80CDD8();
      v36 = v50 - (_BYTE *)__p;
      if ((v50 - (_BYTE *)__p) >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = (char *)sub_20B8127BC((uint64_t)&v50, v37);
        v33 = (char *)__p;
        v31 = v49;
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v30 = &v38[4 * v37];
      *(_DWORD *)v39 = 2;
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v40 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }
      __p = v39;
      v49 = v32;
      v50 = v30;
      if (v33)
      {
        operator delete(v33);
        v30 = v50;
      }
    }
    else
    {
      *(_DWORD *)v49 = 2;
      v32 = v31 + 4;
    }
    *a5 = __p;
    a5[1] = v32;
    a5[2] = v30;
  }
  else
  {
    v10 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v10);
      v12 = (const __CFString *)CFArrayGetValueAtIndex(a4, v10);
      v46 = 0;
      v47 = 0;
      sub_20B8D0624(ValueAtIndex, &v47, &__src);
      sub_20B8D0624(v12, &v46, &v44);
      v43 = 0;
      v13 = __src;
      if (__src)
        v14 = v47;
      else
        v14 = 0;
      v15 = sub_20BA2F950(*(_QWORD *)(a1 + 240), __src, v14, 0);
      v16 = v15;
      v43 = v15;
      if (!a2 && !v15 && v47 <= 31 && v46 <= 31)
      {
        sub_20BA2FE90(*(_QWORD *)(a1 + 240), ValueAtIndex, &v43);
        sub_20BA2F858(*(_QWORD *)(a1 + 240), ValueAtIndex, v12);
        v17 = sub_20B9A7C5C(7u);
        v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
        v16 = v43;
        if (v18)
        {
          *(_DWORD *)buf = 138412802;
          v52 = ValueAtIndex;
          v53 = 2112;
          v54 = v12;
          v55 = 1024;
          v56 = v43;
          _os_log_debug_impl(&dword_20B7F7000, v17, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] Registering a dynamic token %@ %@ with ID %u", buf, 0x1Cu);
          v16 = v43;
        }
      }
      if (v16 <= 0x1F3)
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      else
      {
        v19 = v49;
        if (v49 >= v50)
        {
          v21 = (char *)__p;
          v22 = (v49 - (_BYTE *)__p) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            sub_20B80CDD8();
          v24 = v50 - (_BYTE *)__p;
          if ((v50 - (_BYTE *)__p) >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)sub_20B8127BC((uint64_t)&v50, v25);
            v21 = (char *)__p;
            v19 = v49;
            v27 = v43;
          }
          else
          {
            v26 = 0;
            v27 = v16;
          }
          v28 = (int *)&v26[4 * v22];
          *v28 = v27;
          v20 = (char *)(v28 + 1);
          while (v19 != v21)
          {
            v29 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *--v28 = v29;
          }
          __p = v28;
          v49 = v20;
          v50 = &v26[4 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v49 = v16;
          v20 = v19 + 4;
        }
        v49 = v20;
      }
      if (v44)
        MEMORY[0x20BD39C80](v44, 0x1000C80BDFB0063);
      if (v13)
        MEMORY[0x20BD39C80](v13, 0x1000C80BDFB0063);
      if (v16 <= 0x1F3)
        break;
      if (++v10 == Count)
        goto LABEL_37;
    }
    if (__p)
    {
      v49 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20B97F1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B97F250(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  const __CFString *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  const __CFString *v19;
  std::string *p_p;
  std::string::size_type size;
  std::string *v22;
  std::string::size_type v23;
  NSObject *v25;
  std::string *v26;
  BOOL v30;
  unsigned int v31;
  std::string v33;
  std::string __p;
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v9 = sub_20B9A7C5C(7u);
  v30 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  v10 = *a4;
  v11 = (a4[1] - *a4) >> 2;
  if (v11 > a5)
  {
    v31 = 0;
    while (1)
    {
      if (a2 != 1 || a5 < 1 || a5 >= v11 - 1)
        goto LABEL_8;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, a5 - 1);
      if ((sub_20B8DA2F8(ValueAtIndex) & 1) == 0)
        break;
LABEL_37:
      ++a5;
      v10 = *a4;
      v11 = (a4[1] - *a4) >> 2;
      if (a5 >= v11)
        return v31;
    }
    v10 = *a4;
LABEL_8:
    v13 = *(_QWORD *)(a1 + 240);
    v14 = a5 - *(_QWORD *)(v13 + 32);
    if (v14 >= -1)
      v15 = v14 + 1;
    else
      v15 = 0;
    v16 = a5 - v15;
    if (v30)
    {
      v17 = sub_20BA30348(v13, (_DWORD *)(v10 + 4 * v15), v16 + 1);
      sub_20B9C4490(*(_QWORD *)(a1 + 240), a2, *(unsigned int *)(*a4 + 4 * a5), *a4 + 4 * v15, a5 - v15, a6);
      v18 = sub_20BA30348(*(_QWORD *)(a1 + 240), (_DWORD *)(*a4 + 4 * v15), v16 + 1);
      memset(&v33, 0, sizeof(v33));
      if (a5 >= v15)
      {
        do
        {
          v19 = (const __CFString *)sub_20BA2F424();
          sub_20B8D1C98(v19, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::string::append(&v33, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::string::append(&v33, " (", 2uLL);
          std::to_string(&__p, *(_DWORD *)(*a4 + 4 * v15));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &__p;
          else
            v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v23 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v33, (const std::string::value_type *)v22, v23);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::string::append(&v33, ") ", 2uLL);
          if (v19)
            CFRelease(v19);
        }
        while (v15++ < a5);
      }
      v25 = sub_20B9A7C5C(7u);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v26 = &v33;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v17;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v35 = v18;
        _os_log_debug_impl(&dword_20B7F7000, v25, OS_LOG_TYPE_DEBUG, "[MJL::incrementUsageCount] Incrementing usage counts for %s (probability: %lf -> %lf)", (uint8_t *)&__p, 0x20u);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_20B9C4490(v13, a2, *(unsigned int *)(v10 + 4 * a5), v10 + 4 * v15, a5 - v15, a6);
    }
    ++v31;
    goto LABEL_37;
  }
  return 0;
}

void sub_20B97F574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B97F5E4(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B97F654(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = atomic_load((unsigned __int8 *)&qword_25472BDD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472BDD0))
  {
    sub_20B80BBD0(&xmmword_25472BDF0, off_2547292C8[0]);
    dword_25472BE08 = 0;
    word_25472BE0C = 1;
    byte_25472BE0E = 1;
    sub_20B80BBD0(qword_25472BE10, off_2547292D0);
    dword_25472BE28 = 0;
    word_25472BE2C = 0;
    byte_25472BE2E = 1;
    sub_20B80BBD0(qword_25472BE30, off_2547292A8[0]);
    dword_25472BE48 = 1;
    word_25472BE4C = 0;
    byte_25472BE4E = 1;
    sub_20B80BBD0(qword_25472BE50, off_2547292A0[0]);
    dword_25472BE68 = 1;
    word_25472BE6C = 0;
    byte_25472BE6E = 1;
    sub_20B80BBD0(qword_25472BE70, off_2547292B0[0]);
    dword_25472BE88 = 0;
    word_25472BE8C = 0;
    byte_25472BE8E = 1;
    __cxa_atexit((void (*)(void *))sub_20B980098, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472BDD0);
  }
  v4 = 0uLL;
  v5 = 0;
  sub_20B9777DC((char *)&v4, &xmmword_25472BDF0, (__int128 *)&qword_25472BE90, 5uLL);
  sub_20B8825BC(a2);
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20B86F120(&v6);
}

void sub_20B97F800(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472BDD0);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B97F83C()
{
  return CFSTR("LearningDictionaryJapanese");
}

uint64_t sub_20B97F848()
{
  return 500;
}

uint64_t sub_20B97F850()
{
  return 600;
}

uint64_t sub_20B97F858(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;

  v2 = a1[1];
  if (v2)
    v3 = !sub_20B917B30(v2);
  else
    LOBYTE(v3) = 0;
  v4 = a1[22];
  if (v4)
    v5 = !sub_20B917B30(v4);
  else
    LOBYTE(v5) = 0;
  v6 = sub_20B984C78((uint64_t)(a1 + 47));
  v7 = a1[23];
  if (v7)
    v8 = sub_20B917B30(v7);
  else
    v8 = 1;
  if (v3 || v5)
    return 0;
  else
    return v6 & v8;
}

uint64_t sub_20B97F8DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  _QWORD v17[2];
  _QWORD v18[2];

  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
    return 1;
  v4 = 0;
  v5 = MEMORY[0x24BDAC760];
  do
  {
    v18[0] = sub_20B91708C(a2, v4);
    v18[1] = v6;
    v17[0] = sub_20B916C5C(a2, v4);
    v17[1] = v7;
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = 0;
    v8 = *(_QWORD *)(a1 + 208);
    v12[0] = v5;
    v12[1] = 0x40000000;
    v12[2] = sub_20B97FA24;
    v12[3] = &unk_24C49F8B0;
    v12[4] = &v13;
    sub_20BA20C80(v8, v18, (uint64_t)v17, 2, (uint64_t)v12);
    v9 = *((unsigned __int8 *)v14 + 24);
    v10 = *((_BYTE *)v14 + 24) != 0;
    _Block_object_dispose(&v13, 8);
    if (!v9)
      break;
    ++v4;
  }
  while (v4 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2));
  return v10;
}

void sub_20B97FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B97FA24(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *a3 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_20B97FA40(uint64_t a1)
{
  sub_20B97FF50(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B97FA64()
{
  return 0;
}

uint64_t sub_20B97FA6C()
{
  return 0;
}

uint64_t sub_20B97FA74()
{
  return 1;
}

uint64_t sub_20B97FA7C()
{
  return 0;
}

uint64_t sub_20B97FA84(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B97FAF8((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B97FAF8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B97FB98((uint64_t)v11);
  return v9;
}

uint64_t sub_20B97FB98(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83CB84(a1);
  return a1;
}

uint64_t sub_20B97FBCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20B87ACC8(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  v15 += 24;
  sub_20B97FA84(a1, v14);
  v12 = a1[1];
  sub_20B83CBC8((uint64_t)v14);
  return v12;
}

void sub_20B97FCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B97FCE0(_QWORD *a1, const void *a2, const void *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;

  v11 = sub_20B9776AC(a1, a2, a3, a7);
  *v11 = &off_24C460210;
  *((_DWORD *)v11 + 8) = a4;
  *((_DWORD *)v11 + 9) = a5;
  v11[6] = 0;
  v11[7] = 0;
  v11[5] = 0;
  sub_20B87ACC8(v11 + 5, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 1);
  return a1;
}

void sub_20B97FD44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B9776FC(v1);
  _Unwind_Resume(a1);
}

void sub_20B97FD58(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C460210;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_20B9776FC(a1);
  JUMPOUT(0x20BD39CB0);
}

char *sub_20B97FDA8(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11)
{
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE *v22;
  __int128 v23;

  if (*((char *)a3 + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v18 = *a3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v18;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B88DD4C(__dst + 24, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(__dst + 24) = v19;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_20B88DD4C(__dst + 48, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v20 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)__dst + 3) = v20;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_20B88DD4C(__dst + 72, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v21 = *a5;
    *((_QWORD *)__dst + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v21;
  }
  v22 = __dst + 96;
  if (*((char *)a6 + 23) < 0)
  {
    sub_20B88DD4C(v22, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v23 = *a6;
    *((_QWORD *)__dst + 14) = *((_QWORD *)a6 + 2);
    *(_OWORD *)v22 = v23;
  }
  *((_WORD *)__dst + 60) = a9;
  *((_WORD *)__dst + 61) = a8;
  *((_WORD *)__dst + 62) = a7;
  *((_WORD *)__dst + 63) = a10;
  *((_WORD *)__dst + 64) = a11;
  return __dst;
}

void sub_20B97FEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B97FF50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  sub_20B981D6C(a1 + 376);
  sub_20B8CD3CC((_QWORD *)(a1 + 248));
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_20B97234C((uint64_t *)(a1 + 184), 0);
  sub_20B97234C((uint64_t *)(a1 + 176), 0);
  v5 = (void **)(a1 + 152);
  sub_20B86F120(&v5);
  v5 = (void **)(a1 + 128);
  sub_20B86F120(&v5);
  return sub_20B9720A4((_QWORD *)a1);
}

void sub_20B97FFF8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B98000C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469C68;
  return result;
}

void sub_20B980030(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469C68;
}

uint64_t sub_20B980048()
{
  return 0;
}

uint64_t sub_20B980050(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B98008C()
{
  return &unk_24C45ED10;
}

void sub_20B980098()
{
  uint64_t i;

  for (i = 0; i != -160; i -= 32)
  {
    if (*((char *)&unk_25472BDD0 + i + 183) < 0)
      operator delete(*(void **)((char *)&unk_25472BDD0 + i + 160));
  }
}

void sub_20B9800DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  void *v21;
  unint64_t v22;
  int v23;
  std::string::size_type v24;
  float v25;
  uint64_t v26;
  std::string *p_p;
  std::string __p;
  void *v29;
  _BYTE *v30;
  _BYTE buf[12];
  __int16 v32;
  std::string *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v29, a1, a2, a3, a6);
    v12 = v29;
    if (v29 != v30)
    {
      v13 = a2[6];
      if (a2[7] != v13)
      {
        v14 = 0;
        do
        {
          v15 = -20.0;
          if (v14 < (v30 - (_BYTE *)v29) >> 3)
            v15 = *((double *)v29 + v14);
          v16 = *(float **)(v13 + 8 * v14);
          v17 = *(_QWORD *)(a4 + 24);
          *(double *)buf = v16[24];
          *(double *)&__p.__r_.__value_.__l.__data_ = v15;
          if (!v17)
            sub_20B80BB74();
          v18 = (*(uint64_t (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v17 + 48))(v17, buf, &__p);
          (*(void (**)(float *, double))(*(_QWORD *)v16 + 400))(v16, v15);
          (*(void (**)(float *, uint64_t))(*(_QWORD *)v16 + 480))(v16, v18);
          v19 = sub_20B9A7C5C(0xCu);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            v20 = *((char *)v16 + 55);
            if (v20 >= 0)
              v21 = v16 + 8;
            else
              v21 = (void *)*((_QWORD *)v16 + 4);
            if (v20 >= 0)
              v22 = *((unsigned __int8 *)v16 + 55);
            else
              v22 = *((_QWORD *)v16 + 5);
            sub_20B8D15F4(v21, v22, &__p);
            v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v24 = __p.__r_.__value_.__r.__words[0];
            v25 = v16[24];
            (*(void (**)(float *))(*(_QWORD *)v16 + 392))(v16);
            ++v14;
            *(_DWORD *)buf = 134219010;
            p_p = &__p;
            if (v23 < 0)
              p_p = (std::string *)v24;
            *(_QWORD *)&buf[4] = v14;
            v32 = 2080;
            v33 = p_p;
            v34 = 1024;
            v35 = v18;
            v36 = 2048;
            v37 = v25;
            v38 = 2048;
            v39 = v26;
            _os_log_debug_impl(&dword_20B7F7000, v19, OS_LOG_TYPE_DEBUG, "%zu: [%s] cost: %d (geometry: %.3f, LM: %.3f)", buf, 0x30u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            ++v14;
          }
          v13 = a2[6];
        }
        while (v14 < (a2[7] - v13) >> 3);
      }
      sub_20B8FDD20(a2, a5);
      v12 = v29;
    }
    if (v12)
    {
      v30 = v12;
      operator delete(v12);
    }
  }
}

void sub_20B980350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B98039C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  double v20;
  double v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void *v29;
  unint64_t v30;
  std::string *v31;
  uint64_t v32;
  std::string v33;
  void *v34[3];
  uint64_t v35[3];
  _BYTE __p[22];
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3 >= a4)
    v7 = a4;
  else
    v7 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a3);
    memset(v35, 0, sizeof(v35));
    sub_20B8E5488(v35, v7);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * i));
        sub_20B8E5538(v35, (uint64_t)__p);
        if (*(_QWORD *)__p)
        {
          *(_QWORD *)&__p[8] = *(_QWORD *)__p;
          operator delete(*(void **)__p);
        }
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 8) + 64))(v34, *(_QWORD *)(a1 + 8), v35, 0);
    v12 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3;
    *(_QWORD *)__p = 0;
    sub_20B844970(a5, v12, __p);
    v13 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(a2 + 56) != v13)
    {
      v14 = 0;
      do
      {
        if (v14 >= v7)
        {
          v20 = 0.0;
          v21 = -20.0;
        }
        else
        {
          v15 = (_QWORD *)(v35[0] + 24 * v14);
          v16 = (_DWORD *)*v15;
          v17 = (_DWORD *)v15[1];
          if (v16 == v17)
          {
            v18 = 0;
          }
          else
          {
            v18 = 0;
            do
            {
              if (!*v16++)
                ++v18;
            }
            while (v16 != v17);
          }
          v20 = -(double)v18;
          v21 = *((float *)v34[0] + v14);
        }
        v22 = *(_QWORD *)(v13 + 8 * v14);
        *(double *)(*a5 + 8 * v14) = v21 + v20;
        v23 = sub_20B9A7C5C(0xCu);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG) && v20 != 0.0)
        {
          v24 = sub_20B9A7C5C(0xCu);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            v27 = *(void **)(v22 + 32);
            v26 = v22 + 32;
            v25 = v27;
            v28 = *(char *)(v26 + 23);
            if (v28 >= 0)
              v29 = (void *)v26;
            else
              v29 = v25;
            if (v28 >= 0)
              v30 = *(unsigned __int8 *)(v26 + 23);
            else
              v30 = *(_QWORD *)(v26 + 8);
            sub_20B8D15F4(v29, v30, &v33);
            v31 = (std::string *)v33.__r_.__value_.__r.__words[0];
            v32 = *(_QWORD *)(*a5 + 8 * v14);
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &v33;
            *(_DWORD *)__p = 134219010;
            *(_QWORD *)&__p[4] = v14 + 1;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)&__p[14] = v31;
            v37 = 2048;
            v38 = v21;
            v39 = 2048;
            v40 = v32;
            v41 = 2048;
            v42 = -v20;
            _os_log_debug_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_DEBUG, "%zu: [%s] Adjust Static LM Score: %.3f -> %.3f UNK Penalty: %.3f", __p, 0x34u);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v33.__r_.__value_.__l.__data_);
          }
        }
        ++v14;
        v13 = *(_QWORD *)(a2 + 48);
      }
      while (v14 < (*(_QWORD *)(a2 + 56) - v13) >> 3);
    }
    if (v34[0])
    {
      v34[1] = v34[0];
      operator delete(v34[0]);
    }
    *(_QWORD *)__p = v35;
    sub_20B83B400((void ***)__p);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_20B9806B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  a21 = &a18;
  sub_20B83B400((void ***)&a21);
  _Unwind_Resume(a1);
}

void sub_20B98072C()
{
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B980740(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

float sub_20B980750(_QWORD *a1)
{
  float result;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 24))(a1))
    return 0.0;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1[1] + 8) + 8) + 520))(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 8), *(unsigned int *)(*(_QWORD *)(a1[1] + 8) + 52));
  return result;
}

void *sub_20B9807A4()
{
  return &unk_20BA4F798;
}

CFIndex sub_20B9807B0(uint64_t a1)
{
  const __CFString *v2;
  CFIndex result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1))
    return 0;
  v2 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  result = CFStringGetLength(v2);
  if (result)
    result -= CFStringGetCharacterAtIndex(v2, 0) == 32;
  return result;
}

BOOL sub_20B98081C(uint64_t a1, uint64_t a2)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  const void *v7;
  const void *v8;
  const __CFString *v9;
  const __CFString *v10;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) != 89
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != 89
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) == 89)
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 89
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) == 89)
  {
    v4 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    v5 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2);
    if (CFNumberCompare(v4, v5, 0))
      return 0;
    v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
    return CFEqual(v7, v8) != 0;
  }
  else
  {
    v9 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v10 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return CFStringCompare(v9, v10, 0) == kCFCompareEqualTo;
  }
}

void sub_20B980988(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  double v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_20B9A7C5C(a2);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v18 = a1[1];
      v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
      v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
      v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
      if ((*(int (**)(_QWORD *))(*a1 + 96))(a1) < 32)
        v10 = 63;
      else
        v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 96))(a1);
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 408))(a1))
      {
        if ((*(unsigned int (**)(_QWORD *))(*a1 + 408))(a1) == 2)
          v11 = "prefix";
        else
          v11 = "partial";
      }
      else
      {
        v11 = "exact";
      }
      v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 384))(a1);
      v14 = (*(double (**)(_QWORD *))(*a1 + 392))(a1);
      if (v14 >= -100.0)
        v15 = *(_QWORD *)&v14;
      else
        v15 = 0xC059000000000000;
      v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 200))(a1);
      *(_DWORD *)buf = 136317698;
      v20 = a3;
      v21 = 2048;
      v22 = v18;
      v23 = 2112;
      v24 = v17;
      v25 = 2112;
      v26 = v8;
      v27 = 2112;
      v28 = v9;
      v29 = 1024;
      v30 = v10;
      v31 = 2080;
      v32 = v11;
      v33 = 1024;
      v34 = v12;
      v35 = 1024;
      v36 = v13;
      v37 = 2048;
      v38 = v15;
      v39 = 1024;
      v40 = v16;
      _os_log_debug_impl(&dword_20B7F7000, v7, OS_LOG_TYPE_DEBUG, "%s (%ld): [%@] (%@/%@), type: %c, length: %s, cost: %d, base-cost: %d, prob: %3.3lf, autocorrected: %d", buf, 0x60u);
    }
  }
}

uint64_t IndexedSearchDictionaryBuild(int a1, _QWORD *a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  __CFString *v10;
  uint64_t v11;
  const char *v12;
  const __CFURL *isDirectory;
  const __CFURL *v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  unsigned int v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  const __CFDictionary *v57;
  _BOOL8 v58;
  const char *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  __CFData *v64;
  const char *v65;
  int v66;
  uint64_t v68;
  int hasSuffix;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = objc_alloc_init(MEMORY[0x24BDD1460]);
  NSLog(CFSTR("Building dictionary: %s"), a2[3]);
  if (a1 == 4)
  {
    v6 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v5, a2[1]);
    v8 = objc_msgSend_dictionaryWithContentsOfFile_(MEMORY[0x24BDBCE70], v7, v6);
    if (v8)
    {
      v10 = (__CFString *)v8;
      v11 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v9, a2[3]);
      isDirectory = (const __CFURL *)objc_msgSend_fileURLWithPath_isDirectory_(MEMORY[0x24BDBCF48], v12, v11, 0);
      if (isDirectory)
      {
        v14 = isDirectory;
        if (sub_20B8A2944(isDirectory, v10))
        {
          v16 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v15, a2[2]);
          v17 = sub_20B8A205C(0, v14, 0);
          v19 = (void *)objc_msgSend_objectForKeyedSubscript_(v10, v18, (uint64_t)CFSTR("CFBundleIdentifier"));
          hasSuffix = objc_msgSend_hasSuffix_(v19, v20, (uint64_t)CFSTR("Wubixing"));
          v73 = 0;
          v74 = 0;
          v22 = objc_msgSend_stringWithContentsOfFile_usedEncoding_error_(MEMORY[0x24BDD17C8], v21, v16, &v74, &v73);
          if (v22)
          {
            v24 = (void *)v22;
            v25 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x24BDBCEB8], v23, 0);
            v27 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x24BDBCEB8], v26, 0);
            v30 = objc_msgSend_length(v24, v28, v29);
            if (v30 >= 2)
            {
              v32 = v30;
              v33 = 0;
              v34 = 1;
              do
              {
                v71 = 0;
                v72 = 0;
                v70 = 0;
                objc_msgSend_getLineStart_end_contentsEnd_forRange_(v24, v31, (uint64_t)&v72, &v71, &v70, v34, 1);
                v36 = (void *)objc_msgSend_substringWithRange_(v24, v35, v72, v70 - v72);
                v38 = (void *)objc_msgSend_componentsSeparatedByString_(v36, v37, (uint64_t)CFSTR("\t"));
                if ((unint64_t)objc_msgSend_count(v38, v39, v40) < 3)
                {
                  NSLog(CFSTR("bad dictionary data %@"), v36);
                }
                else
                {
                  v42 = objc_msgSend_objectAtIndex_(v38, v41, 0);
                  objc_msgSend_addObject_(v25, v43, v42);
                  v45 = (void *)objc_msgSend_objectAtIndexedSubscript_(v38, v44, 2);
                  v47 = objc_msgSend_dataUsingEncoding_(v45, v46, 4);
                  v49 = (void *)objc_msgSend_objectAtIndexedSubscript_(v38, v48, 1);
                  if (hasSuffix)
                  {
                    v52 = objc_msgSend_intValue(v49, v50, v51);
                    if (v52 >= 0x10)
                    {
                      fwrite("Wrong originalFlag. \n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
                      exit(1);
                    }
                    v75 = v47;
                    v76 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x24BDD16E0], v53, 16 * v33 + v52);
                    v55 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v54, (uint64_t)&v75, 2);
                    v57 = (const __CFDictionary *)objc_msgSend_dictionaryWithObjects_forKeys_(MEMORY[0x24BDBCE70], v56, v55, &unk_24C4B8EC8);
                  }
                  else
                  {
                    v58 = objc_msgSend_rangeOfString_(v49, v50, (uint64_t)CFSTR("1")) != 0x7FFFFFFFFFFFFFFFLL;
                    v75 = v47;
                    v76 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x24BDD16E0], v59, v33);
                    v77 = objc_msgSend_numberWithShort_(MEMORY[0x24BDD16E0], v60, v58);
                    v62 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v61, (uint64_t)&v75, 3);
                    v57 = (const __CFDictionary *)objc_msgSend_dictionaryWithObjects_forKeys_(MEMORY[0x24BDBCE70], v63, v62, &unk_24C4B8EE0);
                  }
                  v64 = sub_20B8A269C((uint64_t)v17, v57);
                  objc_msgSend_addObject_(v27, v65, (uint64_t)v64);

                  ++v33;
                }
                v34 = v71;
              }
              while (v71 < v32);
            }
            v66 = sub_20B8A28B4((uint64_t)v17, (uint64_t)v25, (uint64_t)v27, 0);
            CFRelease(v17);

            if (v66)
            {
              NSLog(CFSTR("Dictionary was built successfully."));
              return 0;
            }
            goto LABEL_23;
          }
          NSLog(CFSTR("reading dictionary data file %@ failed with error %@"), v16, v73);
          CFRelease(v17);
        }

LABEL_23:
        NSLog(CFSTR("error building dictionary"), v68);
        return 0xFFFFFFFFLL;
      }
      NSLog(CFSTR("can't create URL for new dictionary %@"), v11);
    }
    else
    {
      NSLog(CFSTR("can't read template from file %@"), v6);
    }
  }
  else
  {
    NSLog(CFSTR("%s usage: <template file> <dictionary data file> <new dictionary path> "), *a2);
  }
  return 0xFFFFFFFFLL;
}

unint64_t sub_20B980FEC(unsigned int a1, unint64_t *a2, int a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v3 = *a2;
  if (*a2 == -1)
    return 0;
  if (a3)
    v4 = 0x80000000;
  else
    v4 = 1;
  if (v3 <= 0x20)
    v5 = 32;
  else
    v5 = *a2;
  v6 = *a2;
  while (v5 != v6)
  {
    v7 = a1 << v6;
    if (!a3)
      v7 = a1 >> v6;
    ++v6;
    if ((v7 & v4) != 0)
      goto LABEL_16;
  }
  v6 = -1;
LABEL_16:
  *a2 = v6;
  if (v3 || !a3)
  {
    v10 = v6;
    v6 = v3;
  }
  else
  {
    v9 = 32;
    if (v6 > 0x20)
      v9 = v6;
    v10 = v6;
    while (v9 != v10)
    {
      v11 = a1 << v10++;
      if (v11 < 0)
        goto LABEL_26;
    }
    v10 = -1;
LABEL_26:
    *a2 = v10;
  }
  if (v10 == -1 && a3)
    return 33 - v6;
  v12 = v10 - v6;
  if (v10 == -1)
    return 0;
  else
    return v12;
}

uint64_t sub_20B9810B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  char *v8;
  NSObject *v9;
  std::locale::id *v10;
  const std::locale::facet *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 *v19;
  __int128 *p_p;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 j;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *__dst[2];
  _QWORD v63[3];
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71[2];
  char v72;
  __int128 v73;
  uint64_t v74;
  char *v75[3];
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  __int128 __p;
  uint64_t v81;
  std::locale v82;
  _BYTE v83[24];
  _OWORD *v84;
  _BYTE buf[12];
  __int16 v86;
  char *v87;
  int v88;
  __int16 v89;
  char v90;
  _QWORD v91[3];
  int v92;
  __int16 v93;
  char v94;
  _QWORD v95[3];
  int v96;
  __int16 v97;
  char v98;
  _QWORD v99[3];
  int v100;
  __int16 v101;
  char v102;
  __int128 v103;
  int v104;
  __int16 v105;
  char v106;
  uint64_t v107[3];
  int v108;
  __int16 v109;
  char v110;
  uint64_t v111[3];
  int v112;
  __int16 v113;
  char v114;
  uint64_t v115[3];
  int v116;
  __int16 v117;
  char v118;
  uint64_t v119[3];
  int v120;
  __int16 v121;
  char v122;
  __int128 v123[8];
  _QWORD v124[23];

  v124[20] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v49 = (uint64_t *)(a1 + 40);
  v48 = (uint64_t *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 128) = 0xFF1FFF0130013002;
  sub_20B80BBD0(buf, "Reading");
  v88 = 0;
  v89 = 1;
  v90 = 1;
  sub_20B80BBD0(v91, "Surface");
  v92 = 0;
  v93 = 0;
  v94 = 1;
  sub_20B80BBD0(v95, "LeftSurface1");
  v96 = 0;
  v97 = 0;
  v98 = 1;
  sub_20B80BBD0(v99, "LeftSurface2");
  v100 = 0;
  v101 = 0;
  v102 = 1;
  sub_20B80BBD0(&v103, "RightSurface1");
  v104 = 0;
  v105 = 0;
  v106 = 1;
  sub_20B80BBD0(v107, "POS");
  v108 = 1;
  v109 = 0;
  v110 = 1;
  sub_20B80BBD0(v111, "LeftPOS1");
  v112 = 1;
  v113 = 0;
  v114 = 1;
  sub_20B80BBD0(v115, "LeftPOS2");
  v116 = 1;
  v117 = 0;
  v118 = 1;
  sub_20B80BBD0(v119, "RightPOS1");
  v120 = 1;
  v121 = 0;
  v122 = 1;
  __dst[1] = 0;
  v63[0] = 0;
  __dst[0] = 0;
  v82.__locale_ = (std::locale::__imp *)__dst;
  v83[0] = 0;
  __dst[0] = operator new(0x120uLL);
  __dst[1] = __dst[0];
  v63[0] = (char *)__dst[0] + 288;
  __dst[1] = sub_20B977860((uint64_t)v63, (__int128 *)buf, v123, (char *)__dst[0]);
  sub_20B8825BC(v49);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 56) = v63[0];
  __dst[1] = 0;
  v63[0] = 0;
  __dst[0] = 0;
  v82.__locale_ = (std::locale::__imp *)__dst;
  sub_20B86F120((void ***)&v82);
  v5 = 288;
  do
  {
    if ((char)v83[v5 + 23] < 0)
      operator delete(*(void **)&v83[v5]);
    v5 -= 32;
  }
  while (v5);
  sub_20B80BBD0(buf, "Key");
  v88 = 0;
  v89 = 1;
  v90 = 1;
  sub_20B80BBD0(v91, "Feature");
  v92 = 0;
  v93 = 0;
  v94 = 1;
  sub_20B80BBD0(v95, "IntValue");
  v96 = 1;
  v97 = 0;
  v98 = 1;
  sub_20B80BBD0(v99, "StrValue");
  v100 = 0;
  v101 = 0;
  v102 = 1;
  __dst[1] = 0;
  v63[0] = 0;
  __dst[0] = 0;
  v82.__locale_ = (std::locale::__imp *)__dst;
  v83[0] = 0;
  __dst[0] = operator new(0x80uLL);
  __dst[1] = __dst[0];
  v63[0] = (char *)__dst[0] + 128;
  __dst[1] = sub_20B977860((uint64_t)v63, (__int128 *)buf, &v103, (char *)__dst[0]);
  sub_20B8825BC(v48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 80) = v63[0];
  __dst[1] = 0;
  v63[0] = 0;
  __dst[0] = 0;
  v82.__locale_ = (std::locale::__imp *)__dst;
  sub_20B86F120((void ***)&v82);
  for (i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v99[i + 2]) < 0)
      operator delete((void *)v99[i]);
  }
  v7 = (_QWORD *)sub_20B9AE60C();
  v8 = (char *)sub_20B9AE738(v7, 0, off_254729648[0], off_254729638[0], 0);
  v9 = sub_20B9A7C5C(9u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (v8[23] >= 0)
      v47 = v8;
    else
      v47 = *(char **)v8;
    *(_DWORD *)buf = 138412546;
    *(__CFString **)&buf[4] = off_254729638[0];
    v86 = 2080;
    v87 = v47;
    _os_log_debug_impl(&dword_20B7F7000, v9, OS_LOG_TYPE_DEBUG, "[JLPL::loadLexicalRules] Loading %@ (%s)", buf, 0x16u);
  }
  sub_20B82EB18(buf);
  __p = 0uLL;
  v81 = 0;
  memset(v79, 0, 24);
  v50 = a1 + 88;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v10 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)]);
    v11 = std::locale::use_facet(&v82, v10);
    v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v82);
    v13 = sub_20B851B78(buf, (uint64_t)&v76, v12);
    if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0)
      break;
    if (v78 >= 0)
      v14 = (char *)&v76;
    else
      v14 = (char *)v76;
    if (v78 >= 0)
      v15 = HIBYTE(v78);
    else
      v15 = v77;
    sub_20B8D179C(v14, 9, v15, (uint64_t *)v75);
    sub_20B8D0928(v75[0], &v73);
    v16 = *((_QWORD *)&v73 + 1);
    if (v74 >= 0)
      v16 = HIBYTE(v74);
    v17 = HIBYTE(v81);
    v18 = HIBYTE(v81);
    if (v81 < 0)
      v17 = *((_QWORD *)&__p + 1);
    if (v16 == v17)
    {
      if (!v16)
        goto LABEL_39;
      v19 = &v73;
      if (v74 < 0)
        v19 = (__int128 *)v73;
      p_p = (__int128 *)__p;
      if (v81 >= 0)
        p_p = &__p;
      while (*(unsigned __int16 *)p_p == *(unsigned __int16 *)v19)
      {
        v19 = (__int128 *)((char *)v19 + 2);
        p_p = (__int128 *)((char *)p_p + 2);
        if (!--v16)
          goto LABEL_39;
      }
    }
    if (*(_QWORD *)&v79[0] != *((_QWORD *)&v79[0] + 1))
    {
      sub_20B987C50(v50, (unsigned __int16 *)&__p, (uint64_t)&__p, (uint64_t *)v79);
      v22 = *((_QWORD *)&v79[0] + 1);
      v21 = *(_QWORD *)&v79[0];
      while (v22 != v21)
      {
        v22 -= 160;
        sub_20B986F5C(v22);
      }
      *((_QWORD *)&v79[0] + 1) = v21;
      v18 = HIBYTE(v81);
    }
    if (v18 < 0)
      operator delete((void *)__p);
    __p = v73;
    v81 = v74;
    HIBYTE(v74) = 0;
    LOWORD(v73) = 0;
LABEL_39:
    sub_20B8D0928(v75[0] + 264, v71);
    sub_20B8D0928(v75[0] + 24, v60);
    sub_20B8D0928(v75[0] + 48, v58);
    sub_20B8D0928(v75[0] + 72, v56);
    sub_20B8D0928(v75[0] + 96, v54);
    sub_20B8D0928(v75[0] + 120, v52);
    v23 = v75[0];
    v24 = v75[0] + 144;
    if (v75[0][167] < 0)
      v24 = *(char **)v24;
    v25 = atoi(v24);
    v26 = v23 + 168;
    if (v23[191] < 0)
      v26 = *(const char **)v26;
    v27 = atoi(v26);
    v28 = v23 + 192;
    if (v23[215] < 0)
      v28 = *(const char **)v28;
    v29 = atoi(v28);
    v30 = v23 + 216;
    if (v23[239] < 0)
      v30 = *(const char **)v30;
    v31 = atoi(v30);
    v32 = v23 + 240;
    if (v23[263] < 0)
      v32 = *(const char **)v32;
    v33 = atoi(v32);
    sub_20B97FDA8((char *)__dst, (__int128 *)v60, (__int128 *)v58, (__int128 *)v56, (__int128 *)v54, (__int128 *)v52, v25, v27, v29, v31, v33);
    v34 = *((_QWORD *)&v79[0] + 1);
    if (*((_QWORD *)&v79[0] + 1) >= *(_QWORD *)&v79[1])
    {
      v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v79[0] + 1) - *(_QWORD *)&v79[0]) >> 5);
      v37 = v36 + 1;
      if (v36 + 1 > 0x199999999999999)
        sub_20B80CDD8();
      if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v79[1] - *(_QWORD *)&v79[0]) >> 5) > v37)
        v37 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&v79[1] - *(_QWORD *)&v79[0]) >> 5);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v79[1] - *(_QWORD *)&v79[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL)
        v38 = 0x199999999999999;
      else
        v38 = v37;
      v84 = &v79[1];
      if (v38)
        v38 = (unint64_t)sub_20B9871A0(v38);
      else
        v39 = 0;
      v82.__locale_ = (std::locale::__imp *)v38;
      *(_QWORD *)v83 = v38 + 160 * v36;
      *(_QWORD *)&v83[8] = *(_QWORD *)v83;
      *(_QWORD *)&v83[16] = v38 + 160 * v39;
      sub_20B986FE0(*(uint64_t *)v83, (__int128 *)v71, (__int128 *)__dst);
      v40 = 0;
      v41 = *(_QWORD *)v83;
      *(_QWORD *)&v83[8] += 160;
      for (j = v79[0];
            *((_QWORD *)&j + 1) + v40 != (_QWORD)j;
            sub_20B9871E4((char *)(v40 + v41), (__int128 *)(v40 + *((_QWORD *)&j + 1))))
      {
        v40 -= 160;
      }
      v43 = *(_QWORD *)&v79[1];
      v51 = *(_QWORD *)&v83[8];
      v44 = *(_OWORD *)&v83[8];
      v45 = v79[0];
      *(_QWORD *)&v79[0] = v41 + v40;
      *(_OWORD *)v83 = v45;
      *(_OWORD *)((char *)v79 + 8) = v44;
      *(_QWORD *)&v83[16] = v43;
      v82.__locale_ = (std::locale::__imp *)v45;
      sub_20B9873B8((uint64_t)&v82);
      v35 = v51;
    }
    else
    {
      sub_20B986FE0(*((uint64_t *)&v79[0] + 1), (__int128 *)v71, (__int128 *)__dst);
      v35 = v34 + 160;
    }
    *((_QWORD *)&v79[0] + 1) = v35;
    if (v70 < 0)
      operator delete(v69);
    if (v68 < 0)
      operator delete(v67);
    if (v66 < 0)
      operator delete(v65);
    if (v64 < 0)
      operator delete((void *)v63[1]);
    if (SHIBYTE(v63[0]) < 0)
      operator delete(__dst[0]);
    if (v53 < 0)
      operator delete(v52[0]);
    if (v55 < 0)
      operator delete(v54[0]);
    if (v57 < 0)
      operator delete(v56[0]);
    if (v59 < 0)
      operator delete(v58[0]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (v72 < 0)
      operator delete(v71[0]);
    if (SHIBYTE(v74) < 0)
      operator delete((void *)v73);
    __dst[0] = v75;
    sub_20B83AFD0((void ***)__dst);
  }
  if (SHIBYTE(v78) < 0)
    operator delete(v76);
  if (*(_QWORD *)&v79[0] != *((_QWORD *)&v79[0] + 1))
    sub_20B987C50(v50, (unsigned __int16 *)&__p, (uint64_t)&__p, (uint64_t *)v79);
  __dst[0] = v79;
  sub_20B987404((void ***)__dst);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)__p);
  *(_QWORD *)buf = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4]((char *)&v87 + 2);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](v124);
  return a1;
}

void sub_20B981A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a65;
  void *__p;
  char a72;
  uint64_t v72;

  a35 = (uint64_t)&a65;
  sub_20B987404((void ***)&a35);
  if (a72 < 0)
    operator delete(__p);
  sub_20B82EC24(&STACK[0x220]);
  sub_20B988224(v72 + 88);
  a35 = a13;
  sub_20B86F120((void ***)&a35);
  a35 = a14;
  sub_20B86F120((void ***)&a35);
  sub_20B97234C((uint64_t *)(v72 + 32), 0);
  sub_20B97234C(a11, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B981D6C(uint64_t a1)
{
  void **v3;

  sub_20B988224(a1 + 88);
  v3 = (void **)(a1 + 64);
  sub_20B86F120(&v3);
  v3 = (void **)(a1 + 40);
  sub_20B86F120(&v3);
  sub_20B97234C((uint64_t *)(a1 + 32), 0);
  sub_20B97234C((uint64_t *)(a1 + 24), 0);
  return a1;
}

uint64_t sub_20B981DD4(uint64_t a1, const __CFURL *a2)
{
  CFURLRef v4;
  CFURLRef v5;
  CFURLRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = sub_20B8D0CC0(a2, CFSTR("LexicalLearning_ja_JP.db"));
  v5 = sub_20B8D0CC0(a2, CFSTR("NonLexicalLearning_ja_JP.db"));
  v6 = v5;
  if (v4)
  {
    if (!v5)
    {
      v9 = 0;
      goto LABEL_10;
    }
    v7 = operator new();
    sub_20B917700(v7, v4, a1 + 40, 1u, 2, 500, 600);
    sub_20B97234C((uint64_t *)(a1 + 24), v7);
    v8 = operator new();
    sub_20B917700(v8, v6, a1 + 64, 1u, 2, 500, 600);
    sub_20B97234C((uint64_t *)(a1 + 32), v8);
    *(_WORD *)(a1 + 128) = sub_20B981F9C(a1, 0x3002u);
    *(_WORD *)(a1 + 130) = sub_20B981F9C(a1, 0x3001u);
    *(_WORD *)(a1 + 132) = sub_20B981F9C(a1, 0xFF01u);
    *(_WORD *)(a1 + 134) = sub_20B981F9C(a1, 0xFF1Fu);
  }
  else if (!v5)
  {
    return 0;
  }
  CFRelease(v6);
  if (v4)
  {
    v9 = 1;
LABEL_10:
    CFRelease(v4);
    return v9;
  }
  return 0;
}

void sub_20B981F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  uint64_t v10;

  MEMORY[0x20BD39CB0](v10, 0x10F2C40B10B6BF7);
  sub_20B876164(&a9, 0);
  sub_20B876164(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B981F9C(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v5[3];
  unsigned __int16 v6;
  void **v7;

  v6 = a2;
  v2 = &v6;
  sub_20B9096D0(*(_QWORD *)(a1 + 32), &v6, 1uLL, 0, v5);
  if (v5[1] != v5[0])
    v2 = *(unsigned __int16 **)sub_20B909B78(v5[0], "StrValue");
  v3 = *v2;
  v7 = (void **)v5;
  sub_20B8882B4(&v7);
  return v3;
}

void sub_20B982010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 24) = &a10;
  sub_20B8882B4((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

BOOL sub_20B98202C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  BOOL v6;
  _BOOL8 v7;
  int v12;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  CFStringRef v16;
  CFStringRef v17;
  NSObject *v18;
  uint64_t *v20;
  _QWORD *v21[2];
  _BYTE __p[12];
  __int16 v23;
  CFStringRef v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
    v6 = a3 == 1;
  else
    v6 = 0;
  if (!v6)
    return 0;
  v7 = 0;
  if (a6 == 1 && !*(_WORD *)(a4 + 126))
  {
    v7 = 0;
    v12 = *a2;
    v13 = *a5;
    if (v13 > 0xFF00)
    {
      if (v13 != 65281)
      {
        if (v13 != 65311)
          return v7;
        if (v12 != 65311 && v12 != 63)
          return 0;
        *(_WORD *)(a1 + 134) = v12;
LABEL_27:
        v21[0] = 0;
        v21[1] = 0;
        v20 = (uint64_t *)v21;
        sub_20B80BBD0(__p, "Key");
        sub_20B9089C4(&v20, a5, 1, (__int128 *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(*(void **)__p);
        sub_20B80BBD0(__p, "Feature");
        sub_20B9089C4(&v20, 0, 0, (__int128 *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(*(void **)__p);
        sub_20B80BBD0(__p, "StrValue");
        sub_20B9089C4(&v20, a2, a3, (__int128 *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(*(void **)__p);
        sub_20B80BBD0(__p, "IntValue");
        sub_20B908C5C(&v20, 0, (__int128 *)__p);
        if (SHIBYTE(v25) < 0)
          operator delete(*(void **)__p);
        v14 = sub_20B917E98(*(_QWORD *)(a1 + 32), (uint64_t)&v20, 0);
        v15 = sub_20B9A7C5C(6u);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          goto LABEL_41;
        v16 = CFStringCreateWithCharacters(0, a5, 1);
        v17 = CFStringCreateWithCharacters(0, a2, 1);
        v18 = sub_20B9A7C5C(6u);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__p = 138412802;
          *(_QWORD *)&__p[4] = v16;
          v23 = 2112;
          v24 = v17;
          v25 = 1024;
          v26 = v14;
          _os_log_debug_impl(&dword_20B7F7000, v18, OS_LOG_TYPE_DEBUG, "[registerPunctuationEntry] Registering punctuation preference \"%@\" to \"%@\", result:%d", __p, 0x1Cu);
          if (!v17)
          {
LABEL_39:
            if (v16)
              CFRelease(v16);
LABEL_41:
            v7 = v14 < 2;
            sub_20B8896CC((uint64_t)&v20, v21[0]);
            return v7;
          }
        }
        else if (!v17)
        {
          goto LABEL_39;
        }
        CFRelease(v17);
        goto LABEL_39;
      }
      if (v12 == 65281 || v12 == 33)
      {
        *(_WORD *)(a1 + 132) = v12;
        goto LABEL_27;
      }
    }
    else
    {
      if (v13 != 12289)
      {
        if (v13 != 12290)
          return v7;
        if (v12 != 46 && v12 != 65294 && v12 != 12290)
          return 0;
        *(_WORD *)(a1 + 128) = v12;
        goto LABEL_27;
      }
      if (v12 == 44 || v12 == 65292 || v12 == 12289)
      {
        *(_WORD *)(a1 + 130) = v12;
        goto LABEL_27;
      }
    }
    return 0;
  }
  return v7;
}

void sub_20B98235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9823E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 **v17;
  unsigned __int16 *jj;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 *v23;
  void **v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;
  void **v29;
  unsigned int v30;
  NSObject *v31;
  const UniChar *v32;
  void *v33;
  CFStringRef v34;
  NSObject *v35;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t v43;
  uint64_t v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51[3];
  void *v52[2];
  char v53;
  __int128 *v54[3];
  void *v55[2];
  char v56;
  __int128 *v57[3];
  void *v58[2];
  char v59;
  __int128 *v60[3];
  void *v61[2];
  char v62;
  __int128 *v63[3];
  void *__dst[2];
  char v65;
  __int128 **v66;
  void *v67[2];
  unsigned __int8 v68;
  char v69[24];
  _BYTE v70[24];
  void *v71[2];
  uint64_t v72;
  char v73[24];
  _BYTE v74[24];
  __int128 v75;
  uint64_t v76;
  char v77[24];
  _BYTE v78[24];
  __int128 v79;
  _BYTE v80[24];
  _BYTE __p[12];
  __int16 v82;
  int v83;
  __int16 v84;
  unsigned int v85;
  _BYTE v86[32];
  void *v87[2];
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *v93;
  char v94;
  void *v95;
  char v96;
  char v97[48];
  char v98[48];
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32))
  {
    v8 = a4;
    v50 = 0;
    v46 = sub_20B8DA374(a4, a5, &v50, 1);
    v9 = 0;
    if (v46 && v50)
    {
      v43 = v8;
      if (v50 != a5)
      {
        sub_20B987ADC(&v47, a6 + 72);
        goto LABEL_25;
      }
      v10 = atomic_load((unsigned __int8 *)&qword_25472BE90);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25472BE90))
      {
        sub_20B87C9E0(__dst, (char *)L"日");
        sub_20B87C9E0(__p, (char *)L"日");
        sub_20B87C9E0(v86, "\bg");
        sub_20B8C97AC((uint64_t)v63, (__int128 *)__p, 2uLL);
        sub_20B9874C0(v87, (__int128 *)__dst, v63);
        sub_20B87C9E0(v61, "\bg");
        sub_20B87C9E0(&v79, (char *)L"日");
        sub_20B87C9E0(v80, "\bg");
        sub_20B8C97AC((uint64_t)v60, &v79, 2uLL);
        sub_20B9874C0(&v91, (__int128 *)v61, v60);
        sub_20B87C9E0(v58, (char *)L"時");
        sub_20B87C9E0(&v75, (char *)L"時");
        sub_20B87C9E0(v77, (char *)word_20BA940BC);
        sub_20B87C9E0(v78, byte_20BA94DE4);
        sub_20B8C97AC((uint64_t)v57, &v75, 3uLL);
        sub_20B9874C0(&v95, (__int128 *)v58, v57);
        sub_20B87C9E0(v55, (char *)word_20BA940BC);
        sub_20B87C9E0(v71, (char *)L"時");
        sub_20B87C9E0(v73, (char *)word_20BA940BC);
        sub_20B87C9E0(v74, byte_20BA94DE4);
        sub_20B8C97AC((uint64_t)v54, (__int128 *)v71, 3uLL);
        sub_20B9874C0(v97, (__int128 *)v55, v54);
        sub_20B87C9E0(v52, byte_20BA94DE4);
        sub_20B87C9E0(v67, (char *)L"時");
        sub_20B87C9E0(v69, (char *)word_20BA940BC);
        sub_20B87C9E0(v70, byte_20BA94DE4);
        sub_20B8C97AC((uint64_t)v51, (__int128 *)v67, 3uLL);
        sub_20B9874C0(v98, (__int128 *)v52, v51);
        sub_20B987554((uint64_t)v87, 5);
        for (i = 24; i != -6; i -= 6)
          sub_20B987474((uint64_t)&v87[i]);
        v66 = v51;
        sub_20B83AFD0((void ***)&v66);
        for (j = 0; j != -72; j -= 24)
        {
          if ((char)v70[j + 23] < 0)
            operator delete(*(void **)&v70[j]);
        }
        if (v53 < 0)
          operator delete(v52[0]);
        v67[0] = v54;
        sub_20B83AFD0((void ***)v67);
        for (k = 0; k != -72; k -= 24)
        {
          if ((char)v74[k + 23] < 0)
            operator delete(*(void **)&v74[k]);
        }
        if (v56 < 0)
          operator delete(v55[0]);
        v71[0] = v57;
        sub_20B83AFD0((void ***)v71);
        for (m = 0; m != -72; m -= 24)
        {
          if ((char)v78[m + 23] < 0)
            operator delete(*(void **)&v78[m]);
        }
        if (v59 < 0)
          operator delete(v58[0]);
        *(_QWORD *)&v75 = v60;
        sub_20B83AFD0((void ***)&v75);
        for (n = 0; n != -48; n -= 24)
        {
          if ((char)v80[n + 23] < 0)
            operator delete(*(void **)&v80[n]);
        }
        if (v62 < 0)
          operator delete(v61[0]);
        *(_QWORD *)&v75 = v63;
        sub_20B83AFD0((void ***)&v75);
        for (ii = 0; ii != -48; ii -= 24)
        {
          if ((char)v86[ii + 23] < 0)
            operator delete(*(void **)&v86[ii]);
        }
        if (v65 < 0)
          operator delete(__dst[0]);
        __cxa_atexit((void (*)(void *))sub_20B9874BC, &xmmword_25472BEA8, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472BE90);
      }
      v11 = sub_20B89ACFC((uint64_t)&qword_25472BEC0, a6 + 72);
      v12 = *((_QWORD *)&xmmword_25472BEA8 + 1);
      if (*((_QWORD *)&xmmword_25472BEA8 + 1))
      {
        v13 = v11;
        v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472BEA8 + 8));
        v14.i16[0] = vaddlv_u8(v14);
        v15 = v14.u32[0];
        if (v14.u32[0] > 1uLL)
        {
          v16 = v11;
          if (v11 >= *((_QWORD *)&xmmword_25472BEA8 + 1))
            v16 = v11 % *((_QWORD *)&xmmword_25472BEA8 + 1);
        }
        else
        {
          v16 = (*((_QWORD *)&xmmword_25472BEA8 + 1) - 1) & v11;
        }
        v17 = *(unsigned __int16 ***)(xmmword_25472BEA8 + 8 * v16);
        if (v17)
        {
          for (jj = *v17; jj; jj = *(unsigned __int16 **)jj)
          {
            v19 = *((_QWORD *)jj + 1);
            if (v13 == v19)
            {
              if (sub_20B89AD3C((uint64_t)&dword_25472BEC8, jj + 8, (unsigned __int16 *)(a6 + 72)))
              {
                v47 = 0;
                v48 = 0;
                v49 = 0;
                sub_20B9520E8((char *)&v47, *((__int128 **)jj + 5), *((__int128 **)jj + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)jj + 6) - *((_QWORD *)jj + 5)) >> 3));
                v8 = v43;
                goto LABEL_25;
              }
            }
            else
            {
              if (v15 > 1)
              {
                if (v19 >= v12)
                  v19 %= v12;
              }
              else
              {
                v19 &= v12 - 1;
              }
              if (v19 != v16)
                break;
            }
          }
        }
      }
      sub_20B987ADC(&v47, a6 + 72);
      v8 = v43;
LABEL_25:
      v20 = v47;
      if (v48 != v47)
      {
        v44 = a5;
        v21 = 0;
        v22 = 0;
        v9 = 0;
        while (1)
        {
          sub_20B97FDA8((char *)v87, (__int128 *)(a6 + 24), (__int128 *)a6, &xmmword_20BA4F7F0, (__int128 *)(v20 + v21), &xmmword_20BA4F808, *(_WORD *)(a6 + 124), *(_WORD *)(a6 + 122), *(_WORD *)(a6 + 120), *(_WORD *)(a6 + 126), *(_WORD *)(a6 + 128));
          v71[0] = 0;
          v71[1] = 0;
          v72 = 0;
          if (v44 == v50)
          {
            HIBYTE(v72) = 0;
            LOWORD(v71[0]) = 0;
            v23 = L"NW:RS1=";
            v24 = &v93;
          }
          else
          {
            sub_20B877ED0(&v75, (void *)(v8 + 2 * v50), v44 - v50);
            *(_OWORD *)v71 = v75;
            v72 = v76;
            v24 = v71;
            v23 = L"NW:SFX=";
          }
          sub_20B987B84((uint64_t)v67, v23, (const void **)v24);
          *((_QWORD *)&v75 + 1) = 0;
          v76 = 0;
          *(_QWORD *)&v75 = (char *)&v75 + 8;
          v25 = v68;
          v26 = (void **)v67[0];
          v27 = v67[1];
          sub_20B80BBD0(__p, "Key");
          if ((v25 & 0x80u) == 0)
            v28 = v25;
          else
            v28 = (uint64_t)v27;
          if ((v25 & 0x80u) == 0)
            v29 = v67;
          else
            v29 = v26;
          sub_20B9089C4((uint64_t **)&v75, v29, v28, (__int128 *)__p);
          if (SHIBYTE(v85) < 0)
            operator delete(*(void **)__p);
          sub_20B80BBD0(__p, "Feature");
          sub_20B9089C4((uint64_t **)&v75, 0, 0, (__int128 *)__p);
          if (SHIBYTE(v85) < 0)
            operator delete(*(void **)__p);
          sub_20B80BBD0(__p, "StrValue");
          sub_20B9089C4((uint64_t **)&v75, 0, 0, (__int128 *)__p);
          if (SHIBYTE(v85) < 0)
            operator delete(*(void **)__p);
          sub_20B80BBD0(__p, "IntValue");
          sub_20B908C5C((uint64_t **)&v75, v46, (__int128 *)__p);
          if (SHIBYTE(v85) < 0)
            operator delete(*(void **)__p);
          v30 = sub_20B917E98(*(_QWORD *)(a1 + 32), (uint64_t)&v75, 0);
          v31 = sub_20B9A7C5C(6u);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            goto LABEL_55;
          v32 = (v68 & 0x80u) == 0 ? (const UniChar *)v67 : (const UniChar *)v67[0];
          v33 = (v68 & 0x80u) == 0 ? (void *)v68 : v67[1];
          v34 = CFStringCreateWithCharacters(0, v32, (CFIndex)v33);
          *(_QWORD *)&v79 = v34;
          v35 = sub_20B9A7C5C(6u);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            break;
          if (v34)
            goto LABEL_53;
LABEL_54:
          v8 = v43;
LABEL_55:
          sub_20B8896CC((uint64_t)&v75, *((_QWORD **)&v75 + 1));
          if ((char)v68 < 0)
            operator delete(v67[0]);
          if (SHIBYTE(v72) < 0)
            operator delete(v71[0]);
          if (v96 < 0)
            operator delete(v95);
          if (v94 < 0)
            operator delete(v93);
          if (v92 < 0)
            operator delete(v91);
          if (v90 < 0)
            operator delete(v89);
          if (v88 < 0)
            operator delete(v87[0]);
          v9 |= v30 < 2;
          ++v22;
          v20 = v47;
          v21 += 24;
          if (v22 >= 0xAAAAAAAAAAAAAAABLL * ((v48 - v47) >> 3))
            goto LABEL_74;
        }
        *(_DWORD *)__p = 138412802;
        *(_QWORD *)&__p[4] = v34;
        v82 = 1024;
        v83 = v46;
        v84 = 1024;
        v85 = v30;
        _os_log_debug_impl(&dword_20B7F7000, v35, OS_LOG_TYPE_DEBUG, "[registerNonLexicalEntry] Registering non-lexical preference %@ = %d, result = %d", __p, 0x18u);
        if (!v34)
          goto LABEL_54;
LABEL_53:
        CFRelease(v34);
        goto LABEL_54;
      }
      v9 = 0;
LABEL_74:
      v87[0] = &v47;
      sub_20B83AFD0((void ***)v87);
    }
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

void sub_20B982D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t a68;
  void *a69;
  void *a72;
  uint64_t a73;
  uint64_t v73;
  uint64_t i;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  for (i = 192; i != -48; i -= 48)
    sub_20B987474(v73 + i);
  a68 = (uint64_t)&a23;
  sub_20B83AFD0((void ***)&a68);
  v76 = 0;
  while (1)
  {
    if (*((char *)&a69 + v76 + 71) < 0)
      operator delete(*(void **)((char *)&a69 + v76 + 48));
    v76 -= 24;
    if (v76 == -72)
    {
      if (a31 < 0)
        operator delete(__p);
      a69 = &a32;
      sub_20B83AFD0((void ***)&a69);
      v77 = 0;
      while (1)
      {
        if (*((char *)&a72 + v77 + 71) < 0)
          operator delete(*(void **)((char *)&a72 + v77 + 48));
        v77 -= 24;
        if (v77 == -72)
        {
          if (a40 < 0)
            operator delete(a35);
          a72 = &a41;
          sub_20B83AFD0((void ***)&a72);
          v78 = 0;
          while (1)
          {
            if (*((char *)&a73 + v78 + 71) < 0)
              operator delete(*(void **)((char *)&a73 + v78 + 48));
            v78 -= 24;
            if (v78 == -72)
            {
              if (a49 < 0)
                operator delete(a44);
              a73 = (uint64_t)&a50;
              sub_20B83AFD0((void ***)&a73);
              v79 = 0;
              while (1)
              {
                if (*((char *)&STACK[0x240] + v79 + 47) < 0)
                  operator delete(*(void **)((char *)&STACK[0x240] + v79 + 24));
                v79 -= 24;
                if (v79 == -48)
                {
                  if (a58 < 0)
                    operator delete(a53);
                  a73 = (uint64_t)&a59;
                  sub_20B83AFD0((void ***)&a73);
                  v80 = 0;
                  while (1)
                  {
                    if (*((char *)&STACK[0x270] + v80 + 47) < 0)
                      operator delete(*(void **)((char *)&STACK[0x270] + v80 + 24));
                    v80 -= 24;
                    if (v80 == -48)
                    {
                      if (a67 < 0)
                        operator delete(a62);
                      __cxa_guard_abort(&qword_25472BE90);
                      _Unwind_Resume(a1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_20B983140(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6)
{
  int v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  NSObject *v40;
  CFStringRef v41;
  CFStringRef v42;
  int v43;
  const UniChar *v44;
  CFIndex v45;
  CFStringRef v46;
  int v47;
  const UniChar *v48;
  CFIndex v49;
  CFStringRef v50;
  int v51;
  const UniChar *v52;
  CFIndex v53;
  CFStringRef v54;
  int v55;
  const UniChar *v56;
  CFIndex v57;
  CFStringRef v58;
  NSObject *v59;
  int v61;
  const __CFString *v62;
  int v63;
  const __CFString *v64;
  int v65;
  int v66;
  const __CFString *v67;
  const __CFString *v68;
  int v69;
  int v70;
  CFStringRef v71;
  CFStringRef v72;
  int v73;
  int v74;
  int v75;
  CFStringRef v76;
  CFTypeRef v77[2];
  char v78;
  uint64_t *v79;
  _QWORD *v80[2];
  int v81;
  __int16 v82;
  int v83;
  _BYTE __p[24];
  int v85;
  __int16 v86;
  const __CFString *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  const __CFString *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  const __CFString *v95;
  __int16 v96;
  int v97;
  __int16 v98;
  const __CFString *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  unsigned int v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    v81 = 0;
    v82 = 256;
    v83 = 0;
    sub_20B983918(*(unsigned __int16 **)a1, (unsigned __int16 *)a6, &v81);
    v80[0] = 0;
    v80[1] = 0;
    v79 = (uint64_t *)v80;
    sub_20B80BBD0(__p, "Reading");
    sub_20B9089C4(&v79, a2, a3, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_20B80BBD0(__p, "Surface");
    sub_20B9089C4(&v79, a4, a5, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v12 = *(unsigned __int16 *)(a6 + 120);
    sub_20B80BBD0(__p, "POS");
    sub_20B908C5C(&v79, v12, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v13 = BYTE1(v81);
    if (BYTE1(v81))
    {
      if (*(char *)(a6 + 23) < 0)
      {
        sub_20B88DD4C(__p, *(void **)a6, *(_QWORD *)(a6 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a6;
        *(_QWORD *)&__p[16] = *(_QWORD *)(a6 + 16);
      }
    }
    else
    {
      sub_20B87C9E0(__p, byte_20BA93B9E);
    }
    v15 = __p[23];
    v16 = *(_BYTE **)__p;
    v17 = *(_QWORD *)&__p[8];
    sub_20B80BBD0(v77, "LeftSurface1");
    if ((v15 & 0x80u) == 0)
      v18 = v15;
    else
      v18 = v17;
    if ((v15 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = v16;
    sub_20B9089C4(&v79, v19, v18, (__int128 *)v77);
    if (v78 < 0)
      operator delete((void *)v77[0]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v75 = BYTE2(v81);
    if (BYTE2(v81))
    {
      if (*(char *)(a6 + 47) < 0)
      {
        sub_20B88DD4C(__p, *(void **)(a6 + 24), *(_QWORD *)(a6 + 32));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a6 + 24);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a6 + 40);
      }
    }
    else
    {
      sub_20B87C9E0(__p, byte_20BA93B9E);
    }
    v20 = __p[23];
    v21 = *(_BYTE **)__p;
    v22 = *(_QWORD *)&__p[8];
    sub_20B80BBD0(v77, "LeftSurface2");
    if ((v20 & 0x80u) == 0)
      v23 = v20;
    else
      v23 = v22;
    if ((v20 & 0x80u) == 0)
      v24 = __p;
    else
      v24 = v21;
    sub_20B9089C4(&v79, v24, v23, (__int128 *)v77);
    if (v78 < 0)
      operator delete((void *)v77[0]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v74 = HIBYTE(v81);
    if (HIBYTE(v81))
    {
      if (*(char *)(a6 + 95) < 0)
      {
        sub_20B88DD4C(__p, *(void **)(a6 + 72), *(_QWORD *)(a6 + 80));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a6 + 72);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a6 + 88);
      }
    }
    else
    {
      sub_20B87C9E0(__p, byte_20BA93B9E);
    }
    v25 = __p[23];
    v26 = *(_BYTE **)__p;
    v27 = *(_QWORD *)&__p[8];
    sub_20B80BBD0(v77, "RightSurface1");
    if ((v25 & 0x80u) == 0)
      v28 = v25;
    else
      v28 = v27;
    if ((v25 & 0x80u) == 0)
      v29 = __p;
    else
      v29 = v26;
    sub_20B9089C4(&v79, v29, v28, (__int128 *)v77);
    if (v78 < 0)
      operator delete((void *)v77[0]);
    v73 = v13;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v30 = v83;
    v31 = *(unsigned __int16 *)(a6 + 122);
    sub_20B80BBD0(__p, "LeftPOS1");
    if (v30)
      v32 = v31;
    else
      v32 = 0;
    sub_20B908C5C(&v79, v32, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v33 = BYTE1(v83);
    v34 = *(unsigned __int16 *)(a6 + 124);
    sub_20B80BBD0(__p, "LeftPOS2");
    if (v33)
      v35 = v34;
    else
      v35 = 0;
    sub_20B908C5C(&v79, v35, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v36 = BYTE2(v83);
    v37 = *(unsigned __int16 *)(a6 + 126);
    sub_20B80BBD0(__p, "RightPOS1");
    if (v36)
      v38 = v37;
    else
      v38 = 0;
    sub_20B908C5C(&v79, v38, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v39 = sub_20B917E98(*(_QWORD *)(a1 + 24), (uint64_t)&v79, 0);
    v40 = sub_20B9A7C5C(6u);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      goto LABEL_107;
    v41 = CFStringCreateWithCharacters(0, (const UniChar *)a2, a3);
    v77[0] = v41;
    v42 = CFStringCreateWithCharacters(0, (const UniChar *)a4, a5);
    v76 = v42;
    v43 = *(char *)(a6 + 23);
    if (v43 >= 0)
      v44 = (const UniChar *)a6;
    else
      v44 = *(const UniChar **)a6;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a6 + 23);
    else
      v45 = *(_QWORD *)(a6 + 8);
    v46 = CFStringCreateWithCharacters(0, v44, v45);
    v47 = *(char *)(a6 + 47);
    if (v47 >= 0)
      v48 = (const UniChar *)(a6 + 24);
    else
      v48 = *(const UniChar **)(a6 + 24);
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(a6 + 47);
    else
      v49 = *(_QWORD *)(a6 + 32);
    v50 = CFStringCreateWithCharacters(0, v48, v49);
    v72 = v42;
    v51 = *(char *)(a6 + 95);
    if (v51 >= 0)
      v52 = (const UniChar *)(a6 + 72);
    else
      v52 = *(const UniChar **)(a6 + 72);
    if (v51 >= 0)
      v53 = *(unsigned __int8 *)(a6 + 95);
    else
      v53 = *(_QWORD *)(a6 + 80);
    v54 = CFStringCreateWithCharacters(0, v52, v53);
    v71 = v41;
    v55 = *(char *)(a6 + 119);
    if (v55 >= 0)
      v56 = (const UniChar *)(a6 + 96);
    else
      v56 = *(const UniChar **)(a6 + 96);
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(a6 + 119);
    else
      v57 = *(_QWORD *)(a6 + 104);
    v58 = CFStringCreateWithCharacters(0, v56, v57);
    v59 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      v61 = *(unsigned __int16 *)(a6 + 120);
      v62 = CFSTR("*");
      v63 = *(unsigned __int16 *)(a6 + 124);
      if (v75)
        v64 = v50;
      else
        v64 = CFSTR("*");
      v65 = *(unsigned __int16 *)(a6 + 122);
      if (!v33)
        v63 = 0;
      v66 = *(unsigned __int16 *)(a6 + 126);
      if (v73)
        v67 = v46;
      else
        v67 = CFSTR("*");
      if (!v30)
        v65 = 0;
      if (v74)
        v68 = v54;
      else
        v68 = CFSTR("*");
      v69 = *(unsigned __int16 *)(a6 + 128);
      if (!v36)
        v66 = 0;
      *(_DWORD *)__p = 138415106;
      if ((_BYTE)v82)
        v62 = v58;
      *(_QWORD *)&__p[4] = v71;
      if (HIBYTE(v83))
        v70 = v69;
      else
        v70 = 0;
      *(_WORD *)&__p[12] = 2112;
      *(_QWORD *)&__p[14] = v72;
      *(_WORD *)&__p[22] = 1024;
      v85 = v61;
      v86 = 2112;
      v87 = v64;
      v88 = 1024;
      v89 = v63;
      v90 = 2112;
      v91 = v67;
      v92 = 1024;
      v93 = v65;
      v94 = 2112;
      v95 = v68;
      v96 = 1024;
      v97 = v66;
      v98 = 2112;
      v99 = v62;
      v100 = 1024;
      v101 = v70;
      v102 = 1024;
      v103 = v39;
      _os_log_debug_impl(&dword_20B7F7000, v59, OS_LOG_TYPE_DEBUG, "[LPL::registerLexicalEntry] Registering lexical rule: %@ => %@ (P0:%hu L2:[%@](%d) L1:[%@](%d) R1:[%@](%d) R2:[%@](%d)), result = %d", __p, 0x62u);
      if (!v58)
        goto LABEL_97;
    }
    else if (!v58)
    {
LABEL_97:
      if (v54)
        CFRelease(v54);
      if (v50)
        CFRelease(v50);
      if (v46)
        CFRelease(v46);
      if (v76)
        CFRelease(v76);
      if (v77[0])
        CFRelease(v77[0]);
LABEL_107:
      v14 = v39 < 2;
      sub_20B8896CC((uint64_t)&v79, v80[0]);
      return v14;
    }
    CFRelease(v58);
    goto LABEL_97;
  }
  return 0;
}

void sub_20B9837E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_20B983918(unsigned __int16 *result, unsigned __int16 *a2, _BYTE *a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned __int16 **v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  char v15;
  const __int16 *v16;
  unsigned __int16 *v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  _BYTE *v33;

  v3 = a2[60];
  if (v3 <= 0x24E)
    v4 = word_20BA4138A[v3];
  else
    v4 = 0;
  v5 = a2[61];
  if (v5 <= 0x24E)
    v6 = word_20BA4138A[v5];
  else
    v6 = 0;
  v7 = a2[62];
  if (v7 <= 0x24E)
    v8 = word_20BA4138A[v7];
  else
    v8 = 0;
  v9 = a2[63];
  if (v9 <= 0x24E)
    v10 = word_20BA4138A[v9];
  else
    v10 = 0;
  v11 = (unsigned __int16 **)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v4]);
  v12 = *v11;
  v13 = v11[1];
  if (v13 == (unsigned __int16 *)2)
  {
    v15 = 0;
    v16 = L"記号";
    v17 = v12;
    while (1)
    {
      v18 = v15;
      if (*(unsigned __int16 *)v16 != *v17)
        break;
      ++v17;
      ++v16;
      v15 = 1;
      if ((v18 & 1) != 0)
        goto LABEL_68;
    }
  }
  else if (v13 == (unsigned __int16 *)4)
  {
    v14 = 0;
    while ((unsigned __int16)asc_20BA92F20[v14] == v12[v14])
    {
      if (++v14 == 4)
        goto LABEL_68;
    }
  }
  v19 = result[38];
  if (v19 > v4 || result[39] < v4)
  {
    v20 = result[36];
    if (v20 <= v4 && result[37] >= v4)
    {
      if (result[44] <= v10 && result[45] >= v10 || v19 <= v10 && result[39] >= v10)
        a3[8] = 1;
      v26 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v4 + 1]);
      if (v26[1] == 4)
      {
        v27 = 0;
        v28 = *v26;
        while (asc_20BA928FA[v27] == *(_WORD *)(v28 + v27 * 2))
        {
          if (++v27 == 4)
          {
            v29 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v6 + 1]);
            if (v29[1] == 3)
            {
              v30 = 0;
              v31 = *v29;
              while (asc_20BA92436[v30] == *(_WORD *)(v31 + v30 * 2))
              {
                if (++v30 == 3)
                {
                  v32 = &off_24C499C48 + 2 * word_20BA3BB2A[7 * v6 + 6];
                  if (v32[1] == (_UNKNOWN *)1 && *(_WORD *)*v32 == 12398)
                  {
                    a3[6] = 1;
                    v33 = a3 + 2;
                    goto LABEL_69;
                  }
                  return result;
                }
              }
            }
            return result;
          }
        }
      }
    }
    else if (v13 == (unsigned __int16 *)3)
    {
      v21 = 0;
      while ((unsigned __int16)asc_20BA92DAE[v21] == v12[v21])
      {
        if (++v21 == 3)
        {
          if (v20 <= v6 && result[37] >= v6)
            goto LABEL_67;
          if (result[44] <= v6 && result[45] >= v6 && v20 <= v8 && result[37] >= v8)
          {
            a3[6] = 1;
            a3[2] = 1;
            goto LABEL_72;
          }
          return result;
        }
      }
    }
    return result;
  }
  v22 = result[36];
  if (v22 <= v6 && result[37] >= v6)
  {
LABEL_67:
    a3[1] = 1;
LABEL_68:
    v33 = a3 + 6;
    goto LABEL_69;
  }
  if (result[44] <= v6 && result[45] >= v6 && v22 <= v8 && result[37] >= v8)
  {
    *(_WORD *)(a3 + 1) = 257;
    a3[6] = 1;
LABEL_72:
    v33 = a3 + 7;
LABEL_69:
    *v33 = 1;
    return result;
  }
  if (result[42] <= v4 && result[43] >= v4)
  {
    v23 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v6 + 1]);
    if (v23[1] == 4)
    {
      v24 = 0;
      v25 = *v23;
      while (asc_20BA923BC[v24] == *(_WORD *)(v25 + v24 * 2))
      {
        if (++v24 == 4)
          goto LABEL_68;
      }
    }
  }
  return result;
}

uint64_t sub_20B983CC4(uint64_t a1, const void *a2, uint64_t a3, UniChar *chars, CFIndex numChars, uint64_t a6, int a7, int a8, unsigned __int16 *a9, uint64_t a10)
{
  CFStringRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], chars, numChars, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  if (CEMStringIsSingleEmoji())
  {
    v18 = 0;
  }
  else if (sub_20B98202C(a1, chars, numChars, a6, a9, a10))
  {
    v18 = 1;
  }
  else
  {
    v18 = sub_20B9823E8(a1, v19, v20, (uint64_t)chars, numChars, a6);
    if (((v18 | a7 ^ 1) & 1) == 0)
      v18 = sub_20B983140(a1, a2, a3, chars, numChars, a6);
  }
  if (v17)
    CFRelease(v17);
  return v18;
}

void sub_20B983DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B983DF0(unsigned __int16 **a1, unsigned __int16 *a2, void **a3, void **a4, void **a5, void **a6, void **a7, int a8, unsigned __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int16 a12, char a13)
{
  int v13;
  void **v14;
  void **v15;
  void **v17;
  void **v18;
  unsigned __int16 *v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned __int16 *v25;
  unsigned __int16 **v26;
  unsigned __int16 *v27;
  unsigned __int16 **v28;
  unsigned __int16 **v29;
  unsigned __int16 *v30;
  unsigned __int16 **v31;
  NSObject *v32;
  _QWORD *v33;
  int v34;
  void *v35;
  unint64_t v36;
  std::string *v37;
  std::string::size_type size;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  _QWORD *v49;
  std::string *v50;
  std::string::size_type v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  _QWORD *v58;
  std::string *v59;
  std::string::size_type v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  unsigned __int16 *v72;
  unint64_t v73;
  std::string *v74;
  std::string::size_type v75;
  _QWORD *v76;
  _QWORD *v77;
  std::string *v78;
  std::string::size_type v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  void *v83;
  unint64_t v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  std::string *v89;
  std::string::size_type v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  void *v94;
  unint64_t v95;
  std::string *v96;
  std::string::size_type v97;
  _QWORD *v98;
  _QWORD *v99;
  std::string *v100;
  std::string::size_type v101;
  _QWORD *v102;
  _QWORD *v103;
  int v104;
  void *v105;
  unint64_t v106;
  std::string *v107;
  std::string::size_type v108;
  _QWORD *v109;
  _QWORD *v110;
  std::string *v111;
  std::string::size_type v112;
  _QWORD *v113;
  NSObject *v114;
  void **v115;
  unsigned __int16 *v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  unsigned __int16 *v127;
  BOOL v128;
  _BOOL8 result;
  int v130;
  std::string::size_type v131;
  std::string *v132;
  void **v133;
  void **v134;
  void **v135;
  int v136;
  int v137;
  unsigned __int16 *__src;
  unint64_t v139;
  unint64_t v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  unint64_t v143;
  unint64_t v144;
  unsigned __int16 *v145;
  void *v146[2];
  char v147;
  _QWORD v148[2];
  uint64_t v149;
  _QWORD v150[10];
  char v151;
  uint64_t v152;
  _QWORD v153[2];
  uint64_t v154;
  _QWORD v155[10];
  char v156;
  uint64_t v157;
  int v158;
  __int16 v159;
  int v160;
  std::string v161;
  uint8_t buf[4];
  std::string *v163;
  __int16 v164;
  void **v165;
  uint64_t v166;

  v13 = a8;
  v14 = a7;
  v15 = a6;
  v17 = a4;
  v18 = a3;
  v19 = a2;
  v20 = a11;
  v21 = a10;
  v166 = *MEMORY[0x24BDAC8D0];
  v158 = 0;
  v159 = 256;
  v160 = 0;
  if (a13)
  {
    LOBYTE(v158) = *a5 != a5[1];
    BYTE1(v158) = *a4 != a4[1];
    BYTE2(v158) = *a3 != a3[1];
    HIBYTE(v158) = *a6 != a6[1];
    LOBYTE(v159) = *a7 != a7[1];
    HIBYTE(v159) = a10 != 0;
    LOBYTE(v160) = a9 != 0;
    BYTE1(v160) = a8 != 0;
    BYTE2(v160) = a11 != 0;
    HIBYTE(v160) = a12 != 0;
  }
  else
  {
    sub_20B983918(*a1, a2, &v158);
    v21 = a10;
  }
  v22 = v19[60];
  if (v22 <= 0x24E)
    v23 = word_20BA4138A[v22];
  else
    v23 = 0;
  if (v21 <= 0x24E)
    v24 = word_20BA4138A[v21];
  else
    v24 = 0;
  v25 = &word_20BA3BB2A[7 * v23];
  v26 = (unsigned __int16 **)(&off_24C499C48 + 2 * *v25);
  v144 = (unint64_t)v26[1];
  v145 = *v26;
  v27 = &word_20BA3BB2A[7 * v24];
  v28 = (unsigned __int16 **)(&off_24C499C48 + 2 * *v27);
  v29 = (unsigned __int16 **)(&off_24C499C48 + 2 * v25[1]);
  v30 = *v29;
  v142 = *v28;
  v143 = (unint64_t)v29[1];
  v31 = (unsigned __int16 **)(&off_24C499C48 + 2 * v27[1]);
  v141 = *v31;
  v139 = (unint64_t)v31[1];
  v140 = (unint64_t)v28[1];
  v32 = sub_20B9A7C5C(6u);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    sub_20B83BFEC((uint64_t)v153);
    __src = v30;
    v137 = v13;
    sub_20B83BFEC((uint64_t)v148);
    v33 = sub_20B828F84(&v154, (uint64_t)"[", 1);
    v34 = *((char *)v19 + 71);
    if (v34 >= 0)
      v35 = v19 + 24;
    else
      v35 = (void *)*((_QWORD *)v19 + 6);
    if (v34 >= 0)
      v36 = *((unsigned __int8 *)v19 + 71);
    else
      v36 = *((_QWORD *)v19 + 7);
    sub_20B8D15F4(v35, v36, &v161);
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v161;
    else
      v37 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v161.__r_.__value_.__r.__words[2]);
    else
      size = v161.__r_.__value_.__l.__size_;
    v39 = sub_20B828F84(v33, (uint64_t)v37, size);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    sub_20B828F84(v39, (uint64_t)"] ", 2);
    v40 = sub_20B828F84(&v149, (uint64_t)"[", 1);
    sub_20B8D15F4(*a5, ((_BYTE *)a5[1] - (_BYTE *)*a5) >> 1, &v161);
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v161;
    else
      v41 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
    else
      v42 = v161.__r_.__value_.__l.__size_;
    v43 = sub_20B828F84(v40, (uint64_t)v41, v42);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    sub_20B828F84(v43, (uint64_t)"] ", 2);
    v136 = HIBYTE(v159);
    if (HIBYTE(v159))
    {
      sub_20B828F84(&v154, (uint64_t)"POS:(", 5);
      v44 = (_QWORD *)std::ostream::operator<<();
      v45 = sub_20B828F84(v44, (uint64_t)")", 1);
      sub_20B8D15F4(v145, v144, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v161;
      else
        v46 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v47 = v161.__r_.__value_.__l.__size_;
      v48 = sub_20B828F84(v45, (uint64_t)v46, v47);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      v49 = sub_20B828F84(v48, (uint64_t)",", 1);
      sub_20B8D15F4(__src, v143, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v161;
      else
        v50 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v51 = v161.__r_.__value_.__l.__size_;
      v52 = sub_20B828F84(v49, (uint64_t)v50, v51);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v52, (uint64_t)" ", 1);
      sub_20B828F84(&v149, (uint64_t)"POS:(", 5);
      v53 = (_QWORD *)std::ostream::operator<<();
      v54 = sub_20B828F84(v53, (uint64_t)")", 1);
      sub_20B8D15F4(v142, v140, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v161;
      else
        v55 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v56 = v161.__r_.__value_.__l.__size_;
      v57 = sub_20B828F84(v54, (uint64_t)v55, v56);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      v58 = sub_20B828F84(v57, (uint64_t)",", 1);
      sub_20B8D15F4(v141, v139, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v161;
      else
        v59 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v60 = v161.__r_.__value_.__l.__size_;
      v61 = sub_20B828F84(v58, (uint64_t)v59, v60);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v61, (uint64_t)" ", 1);
    }
    if ((_BYTE)v160)
    {
      sub_20B828F84(&v154, (uint64_t)"LeftPOS1:", 9);
      v62 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v62, (uint64_t)" ", 1);
      sub_20B828F84(&v149, (uint64_t)"LeftPOS1:", 9);
      v63 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v63, (uint64_t)" ", 1);
    }
    if (BYTE1(v160))
    {
      sub_20B828F84(&v154, (uint64_t)"LeftPOS2:", 9);
      v64 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v64, (uint64_t)" ", 1);
      sub_20B828F84(&v149, (uint64_t)"LeftPOS2:", 9);
      v65 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v65, (uint64_t)" ", 1);
    }
    if (BYTE2(v160))
    {
      sub_20B828F84(&v154, (uint64_t)"RightPOS1:", 10);
      v66 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v66, (uint64_t)" ", 1);
      sub_20B828F84(&v149, (uint64_t)"RightPOS1:", 10);
      v67 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v67, (uint64_t)" ", 1);
    }
    if (HIBYTE(v160))
    {
      sub_20B828F84(&v154, (uint64_t)"RightPOS2:", 10);
      v68 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v68, (uint64_t)" ", 1);
      sub_20B828F84(&v149, (uint64_t)"RightPOS2:", 10);
      v69 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v69, (uint64_t)" ", 1);
    }
    if (BYTE1(v158))
    {
      v70 = sub_20B828F84(&v154, (uint64_t)"LeftSurface1:", 13);
      v71 = *((char *)v19 + 23);
      if (v71 >= 0)
        v72 = v19;
      else
        v72 = *(unsigned __int16 **)v19;
      if (v71 >= 0)
        v73 = *((unsigned __int8 *)v19 + 23);
      else
        v73 = *((_QWORD *)v19 + 1);
      sub_20B8D15F4(v72, v73, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v161;
      else
        v74 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v75 = v161.__r_.__value_.__l.__size_;
      v76 = sub_20B828F84(v70, (uint64_t)v74, v75);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v76, (uint64_t)" ", 1);
      v77 = sub_20B828F84(&v149, (uint64_t)"LeftSurface1:", 13);
      sub_20B8D15F4(*v17, ((_BYTE *)v17[1] - (_BYTE *)*v17) >> 1, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v161;
      else
        v78 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v79 = v161.__r_.__value_.__l.__size_;
      v80 = sub_20B828F84(v77, (uint64_t)v78, v79);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v80, (uint64_t)" ", 1);
    }
    if (BYTE2(v158))
    {
      v81 = sub_20B828F84(&v154, (uint64_t)"LeftSurface2:", 13);
      v82 = *((char *)v19 + 47);
      if (v82 >= 0)
        v83 = v19 + 12;
      else
        v83 = (void *)*((_QWORD *)v19 + 3);
      if (v82 >= 0)
        v84 = *((unsigned __int8 *)v19 + 47);
      else
        v84 = *((_QWORD *)v19 + 4);
      sub_20B8D15F4(v83, v84, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v161;
      else
        v85 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v86 = v161.__r_.__value_.__l.__size_;
      v87 = sub_20B828F84(v81, (uint64_t)v85, v86);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v87, (uint64_t)" ", 1);
      v88 = sub_20B828F84(&v149, (uint64_t)"LeftSurface2:", 13);
      sub_20B8D15F4(*v18, ((_BYTE *)v18[1] - (_BYTE *)*v18) >> 1, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = &v161;
      else
        v89 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v90 = v161.__r_.__value_.__l.__size_;
      v91 = sub_20B828F84(v88, (uint64_t)v89, v90);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v91, (uint64_t)" ", 1);
    }
    if (HIBYTE(v158))
    {
      v92 = sub_20B828F84(&v154, (uint64_t)"RightSurface1:", 14);
      v93 = *((char *)v19 + 95);
      if (v93 >= 0)
        v94 = v19 + 36;
      else
        v94 = (void *)*((_QWORD *)v19 + 9);
      if (v93 >= 0)
        v95 = *((unsigned __int8 *)v19 + 95);
      else
        v95 = *((_QWORD *)v19 + 10);
      sub_20B8D15F4(v94, v95, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &v161;
      else
        v96 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v97 = v161.__r_.__value_.__l.__size_;
      v98 = sub_20B828F84(v92, (uint64_t)v96, v97);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v98, (uint64_t)" ", 1);
      v99 = sub_20B828F84(&v149, (uint64_t)"RightSurface1:", 14);
      sub_20B8D15F4(*v15, ((_BYTE *)v15[1] - (_BYTE *)*v15) >> 1, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v161;
      else
        v100 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v101 = v161.__r_.__value_.__l.__size_;
      v102 = sub_20B828F84(v99, (uint64_t)v100, v101);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v102, (uint64_t)" ", 1);
    }
    if ((_BYTE)v159)
    {
      v103 = sub_20B828F84(&v154, (uint64_t)"RightSurface2:", 14);
      v104 = *((char *)v19 + 119);
      if (v104 >= 0)
        v105 = v19 + 48;
      else
        v105 = (void *)*((_QWORD *)v19 + 12);
      if (v104 >= 0)
        v106 = *((unsigned __int8 *)v19 + 119);
      else
        v106 = *((_QWORD *)v19 + 13);
      sub_20B8D15F4(v105, v106, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = &v161;
      else
        v107 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v108 = v161.__r_.__value_.__l.__size_;
      v109 = sub_20B828F84(v103, (uint64_t)v107, v108);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v109, (uint64_t)" ", 1);
      v110 = sub_20B828F84(&v149, (uint64_t)"RightSurface2:", 14);
      sub_20B8D15F4(*v14, ((_BYTE *)v14[1] - (_BYTE *)*v14) >> 1, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = &v161;
      else
        v111 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v112 = v161.__r_.__value_.__l.__size_;
      v113 = sub_20B828F84(v110, (uint64_t)v111, v112);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      sub_20B828F84(v113, (uint64_t)" ", 1);
    }
    v114 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
    {
      sub_20B871648((uint64_t)v155, &v161);
      v130 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
      v131 = v161.__r_.__value_.__r.__words[0];
      sub_20B871648((uint64_t)v150, v146);
      v132 = &v161;
      if (v130 < 0)
        v132 = (std::string *)v131;
      if (v147 >= 0)
        v133 = v146;
      else
        v133 = (void **)v146[0];
      *(_DWORD *)buf = 136315394;
      v163 = v132;
      v164 = 2080;
      v165 = v133;
      _os_log_debug_impl(&dword_20B7F7000, v114, OS_LOG_TYPE_DEBUG, "[LPL::matchFeature] Comparing(%s) with(%s)", buf, 0x16u);
      if (v147 < 0)
        operator delete(v146[0]);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
    }
    v134 = v17;
    v135 = v18;
    v115 = v15;
    v116 = v19;
    v117 = v14;
    v118 = *MEMORY[0x24BEDB7F0];
    v148[0] = v118;
    v120 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v119 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v148 + *(_QWORD *)(v118 - 24)) = v120;
    v121 = MEMORY[0x24BEDB848] + 16;
    v149 = v119;
    v150[0] = MEMORY[0x24BEDB848] + 16;
    if (v151 < 0)
      operator delete((void *)v150[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD39C2C](&v152);
    v153[0] = v118;
    *(_QWORD *)((char *)v153 + *(_QWORD *)(v118 - 24)) = v120;
    v154 = v119;
    v155[0] = v121;
    if (v156 < 0)
      operator delete((void *)v155[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD39C2C](&v157);
    v14 = v117;
    v19 = v116;
    v15 = v115;
    v17 = v134;
    v18 = v135;
    v20 = a11;
    v13 = v137;
    v30 = __src;
    v122 = v136;
  }
  else
  {
    v122 = HIBYTE(v159);
  }
  v123 = v143;
  v124 = v144;
  v125 = v141;
  v126 = v142;
  v127 = v145;
  if (v122)
  {
    if (a10 != 407 && v19[60] == 407 || v144 != v140)
      return 0;
    if (v144)
    {
      while (*v126 == *v127)
      {
        ++v127;
        ++v126;
        if (!--v124)
          goto LABEL_185;
      }
      return 0;
    }
LABEL_185:
    if (v143 != v139)
      return 0;
    if (v143)
    {
      while (*v125 == *v30)
      {
        ++v30;
        ++v125;
        if (!--v123)
          goto LABEL_189;
      }
      return 0;
    }
  }
LABEL_189:
  if ((_BYTE)v160)
    v128 = v19[61] == a9;
  else
    v128 = 1;
  if (!v128 || BYTE1(v160) && v19[62] != v13 || BYTE2(v160) && v19[63] != v20 || HIBYTE(v160) && v19[64] != a12)
    return 0;
  if ((!(_BYTE)v158 || (result = sub_20B984C14((_BYTE *)v19 + 48, *a5, a5[1])))
    && (!BYTE1(v158) || (result = sub_20B984C14(v19, *v17, v17[1])))
    && (!BYTE2(v158) || (result = sub_20B984C14((_BYTE *)v19 + 24, *v18, v18[1])))
    && (!HIBYTE(v158) || (result = sub_20B984C14((_BYTE *)v19 + 72, *v15, v15[1]))))
  {
    if (!(_BYTE)v159)
      return 1;
    result = sub_20B984C14((_BYTE *)v19 + 96, *v14, v14[1]);
    if (result)
      return 1;
  }
  return result;
}

void sub_20B984B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  sub_20B83C118((uint64_t)&a27);
  sub_20B83C118((uint64_t)&a62);
  _Unwind_Resume(a1);
}

BOOL sub_20B984C14(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v3;
  uint64_t v4;

  if ((char)a1[23] < 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
    {
      v3 = a3 - a2;
      if (v4 != v3 >> 1)
        return 0;
      a1 = *(_BYTE **)a1;
      return memcmp(a1, a2, v3) == 0;
    }
  }
  else if (a1[23])
  {
    v3 = a3 - a2;
    if (a1[23] != v3 >> 1)
      return 0;
    return memcmp(a1, a2, v3) == 0;
  }
  return a3 == a2;
}

uint64_t sub_20B984C78(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    v3 = sub_20B917B30(v2);
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = sub_20B917B30(v4);
  else
    v5 = 1;
  return v3 & v5;
}

uint64_t sub_20B984CC4(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, int a5, char a6, char a7)
{
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  __int16 v28;
  unint64_t v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unint64_t v47;
  int8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int16 **v53;
  unsigned __int16 *v54;
  unint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  int v61;
  __int16 *v62;
  std::string *v63;
  NSObject *v64;
  unsigned __int16 *v65;
  std::string::size_type v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int16 *v72;
  uint64_t v73;
  int v74;
  __int16 *v75;
  uint64_t v76;
  int v77;
  __int16 *v78;
  uint64_t v79;
  int v80;
  __int16 *v81;
  uint64_t v82;
  int v83;
  __int16 *v84;
  uint64_t v85;
  BOOL v86;
  char v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  std::string::size_type v91;
  std::string::size_type v92;
  int v93;
  BOOL v94;
  _BOOL8 v96;
  std::string::size_type v97;
  uint64_t v98;
  std::string::size_type v99;
  _BOOL4 v100;
  std::string *v101;
  _WORD *v102;
  unint64_t v103;
  std::string *v104;
  int v105;
  std::string::size_type v106;
  std::string *v107;
  std::string *v108;
  std::string::size_type v109;
  NSObject *v110;
  char v111;
  std::string::size_type v112;
  std::string::size_type v113;
  std::string::size_type v114;
  std::string *v115;
  std::string *v116;
  std::string::size_type v117;
  NSObject *v118;
  int v119;
  BOOL v120;
  unint64_t i;
  __int16 v122;
  unsigned int v123;
  unsigned __int16 v124;
  BOOL v125;
  BOOL v127;
  uint64_t j;
  unsigned __int16 v129;
  unsigned int v130;
  unsigned __int16 v131;
  int v134;
  uint64_t v135;
  unsigned __int16 *v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  std::string *v141;
  unint64_t v142;
  int v143;
  std::string::size_type v144;
  int v145;
  void *v146;
  unint64_t v147;
  std::string *v148;
  std::string *v149;
  unint64_t v150;
  std::string *v151;
  unint64_t v152;
  int v153;
  std::string::size_type v154;
  std::string *v155;
  std::string::size_type v156;
  std::string *v157;
  std::string *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  __int16 v171;
  unsigned int v172;
  int v173;
  int v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::string::size_type size;
  __int16 v181;
  __int16 v182;
  unsigned int v183;
  char *v184;
  uint64_t v185;
  unsigned __int16 *__src;
  unint64_t v188;
  char *__s1;
  void *__dst[2];
  uint64_t v191;
  void *v192;
  char v193;
  void *v194;
  char v195;
  void *v196[2];
  unsigned __int8 v197;
  void *v198;
  char v199;
  unsigned __int16 v200;
  unsigned __int16 v201;
  __int128 __p;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  std::string v208;
  std::string v209;
  int v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _QWORD v217[2];
  std::string v218;
  std::string v219;
  std::string v220;
  std::string v221;
  std::string v222;
  std::string v223;
  uint64_t v224;
  std::string v225;
  std::string buf;
  std::string *v227;
  __int16 v228;
  int v229;
  __int16 v230;
  unsigned int v231;
  __int16 v232;
  int v233;
  __int16 v234;
  int v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  if (!a2
    || ((*(uint64_t (**)(char *))(*(_QWORD *)a2 + 88))(a2) & 1) != 0
    || (*(unsigned int (**)(char *))(*(_QWORD *)a2 + 96))(a2) == 80
    || (*(unsigned int (**)(char *))(*(_QWORD *)a2 + 96))(a2) == 89)
  {
    return 0;
  }
  v164 = a3;
  v13 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)a2 + 304))(a2);
  v15 = *v13;
  v14 = v13[1];
  v175 = v13;
  v16 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a2 + 544))(a2);
  v18 = v17;
  __s1 = v16;
  v217[0] = v16;
  v217[1] = v17;
  v19 = (unsigned __int16 *)(a2 + 96);
  v184 = a2;
  if (a2[119] < 0)
    v19 = *(unsigned __int16 **)v19;
  __src = v19;
  if (a5)
  {
    if (v17 && *(_WORD *)v16 == 32 && sub_20B98664C(v217))
      return 0;
  }
  v211 = *(_QWORD *)(a1 + 8);
  v212 = 0u;
  v213 = 0u;
  v214 = 0u;
  v215 = 0u;
  v216 = 0u;
  v210 = 0;
  memset(&v209, 0, sizeof(v209));
  memset(&v208, 0, sizeof(v208));
  sub_20B9C36B8(a4, 0, (uint64_t *)&v209, (void **)&v208.__r_.__value_.__l.__data_, (_WORD *)&v210 + 1, &v210);
  if (HIWORD(v210) <= 0x64FuLL)
    v182 = word_20BA41828[HIWORD(v210)];
  else
    v182 = 0;
  if ((unsigned __int16)v210 <= 0x64FuLL)
    v20 = word_20BA41828[(unsigned __int16)v210];
  else
    v20 = 0;
  sub_20B877ED0(&v206, __s1, v18);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v175[1] - *v175) >> 3) <= 1)
  {
    v204 = 0uLL;
    v205 = 0;
  }
  else
  {
    sub_20B877ED0(&v204, &__s1[2 * *(unsigned __int16 *)(*v175 + 24)], *(unsigned __int16 *)(*v175 + 64));
  }
  __p = 0uLL;
  v203 = 0;
  if (v14 == v15)
  {
LABEL_378:
    v11 = 0;
    goto LABEL_379;
  }
  v177 = 0;
  v21 = 0;
  v22 = 0;
  v167 = v14 - v15;
  if ((unint64_t)((v14 - v15) / 40) <= 1)
    v23 = 1;
  else
    v23 = (v14 - v15) / 40;
  v168 = v23;
  do
  {
    v174 = v22;
    v24 = v184;
    v25 = v21;
    v171 = (*(uint64_t (**)(char *))(*(_QWORD *)v184 + 312))(v184);
    v183 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v24 + 320))(v24, v25);
    v188 = *(unsigned __int16 *)(*v175 + 40 * v25 + 24);
    v173 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v24 + 352))(v24, v25);
    v185 = v25;
    v26 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v24 + 344))(v24, v25);
    v172 = v26;
    if (v26 <= 0x64F)
      v181 = word_20BA41828[v26];
    else
      v181 = 0;
    v176 = v25 + 1;
    v27 = (*(uint64_t (**)(char *))(*(_QWORD *)v184 + 344))(v184);
    if (v27 <= 0x64F)
      v28 = word_20BA41828[v27];
    else
      v28 = 0;
    v29 = v185 + 2;
    v30 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v184 + 344))(v184, v185 + 2);
    if (v30 <= 0x64F)
      v31 = word_20BA41828[v30];
    else
      v31 = 0;
    if (v29 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v175[1] - *v175) >> 3))
    {
      __dst[0] = 0;
      __dst[1] = 0;
      v191 = 0;
    }
    else
    {
      sub_20B877ED0(__dst, &__s1[2 * *(unsigned __int16 *)(*v175 + 40 * v185 + 24) + 2 * *(unsigned __int16 *)(*v175 + 40 * v176 + 24)], *(unsigned __int16 *)(*v175 + 40 * v29 + 24));
    }
    if (SHIBYTE(v203) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)__dst;
    v203 = v191;
    sub_20B97FDA8((char *)__dst, (__int128 *)&v208, (__int128 *)&v209, &v206, &v204, &__p, v20, v182, v181, v28, v31);
    v32 = *(_DWORD *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v184 + 560))(v184, v185) - 3;
    if (v32 < 2 || (a6 & 1) != 0)
      goto LABEL_58;
    v33 = *(_QWORD *)(a1 + 24);
    if (v33)
    {
      if (!v183 || (**(_DWORD **)(a1 + 16) & 0x4000000) == 0 || *__src == 9787)
        goto LABEL_49;
      if ((u_charType(*__src) - 19) >= 0xB)
      {
        v33 = *(_QWORD *)(a1 + 24);
LABEL_49:
        if (__src)
          v34 = v183;
        else
          v34 = 0;
        v165 = v34;
        sub_20B9096D0(v33, __src, v34, 0, &v225);
        v166 = v32;
        size = v225.__r_.__value_.__l.__size_;
        v35 = v225.__r_.__value_.__r.__words[0];
        if (v225.__r_.__value_.__r.__words[0] != v225.__r_.__value_.__l.__size_)
        {
          v36 = 0;
          do
          {
            v37 = v35;
            v38 = v35 + v36;
            v179 = sub_20B909B78(v35 + v36, "Surface");
            v178 = sub_20B909B78(v38, "Reading");
            v39 = (void **)sub_20B909B78(v38, "Surface");
            v40 = (void **)sub_20B909B78(v38, "LeftSurface1");
            v41 = (void **)sub_20B909B78(v38, "LeftSurface2");
            v42 = (void **)sub_20B909B78(v38, "RightSurface1");
            v43 = sub_20B909BF4(v38, "POS");
            v44 = sub_20B909BF4(v38, "LeftPOS1");
            v45 = sub_20B909BF4(v38, "LeftPOS2");
            v46 = sub_20B909BF4(v38, "RightPOS1");
            if (sub_20B983DF0((unsigned __int16 **)a1, (unsigned __int16 *)__dst, v41, v40, v39, v42, (void **)&unk_20BA4F820, v45, v44, v43, v46, 0, 0))
            {
              sub_20B8CD43C(&v211, *(_WORD **)v179, (uint64_t)(*(_QWORD *)(v179 + 8) - *(_QWORD *)v179) >> 1, v171, *(_WORD **)v178, (uint64_t)(*(_QWORD *)(v178 + 8) - *(_QWORD *)v178) >> 1, v173, v172);
              v64 = sub_20B9A7C5C(6u);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
              {
                if (__s1)
                  v103 = v188;
                else
                  v103 = 0;
                sub_20B8D15F4(__s1, v103, &v223);
                if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v104 = &v223;
                else
                  v104 = (std::string *)v223.__r_.__value_.__r.__words[0];
                sub_20B8D15F4(__src, v165, &v222);
                v105 = SHIBYTE(v222.__r_.__value_.__r.__words[2]);
                v106 = v222.__r_.__value_.__r.__words[0];
                sub_20B8D15F4(*(void **)v179, (uint64_t)(*(_QWORD *)(v179 + 8) - *(_QWORD *)v179) >> 1, &v221);
                v107 = &v222;
                if (v105 < 0)
                  v107 = (std::string *)v106;
                v108 = &v221;
                if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v108 = (std::string *)v221.__r_.__value_.__r.__words[0];
                LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v107;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                v227 = v108;
                v228 = 1024;
                v229 = v173;
                v230 = 1024;
                v231 = v172;
                v232 = 1024;
                v233 = v200;
                v234 = 1024;
                v235 = v201;
                _os_log_debug_impl(&dword_20B7F7000, v64, OS_LOG_TYPE_DEBUG, "[LPL::applyLexicalPreferences] %s (%s) => %s (lc:%d rc:%d f-lc:%d f-rc:%d)", (uint8_t *)&buf, 0x38u);
                if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v221.__r_.__value_.__l.__data_);
                if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v222.__r_.__value_.__l.__data_);
                if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v223.__r_.__value_.__l.__data_);
              }
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
              sub_20B8882B4((void ***)&buf);
              goto LABEL_297;
            }
            if (v36 == 480)
              break;
            v35 = v37;
            v36 += 32;
          }
          while (v36 + v37 != size);
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
        sub_20B8882B4((void ***)&buf);
        v32 = v166;
LABEL_58:
        if (v32 < 2)
          goto LABEL_80;
      }
    }
    sub_20B877ED0(&v220, __src, v183);
    v47 = sub_20B89ACFC(a1 + 112, (uint64_t)&v220);
    v48 = *(int8x8_t *)(a1 + 96);
    if (!*(_QWORD *)&v48)
      goto LABEL_76;
    v49 = v47;
    v50 = (uint8x8_t)vcnt_s8(v48);
    v50.i16[0] = vaddlv_u8(v50);
    v51 = v50.u32[0];
    if (v50.u32[0] > 1uLL)
    {
      v52 = v47;
      if (v47 >= *(_QWORD *)&v48)
        v52 = v47 % *(_QWORD *)&v48;
    }
    else
    {
      v52 = (*(_QWORD *)&v48 - 1) & v47;
    }
    v53 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 88) + 8 * v52);
    if (!v53 || (v54 = *v53) == 0)
    {
LABEL_75:
      v48.i8[0] = 0;
      goto LABEL_76;
    }
    while (1)
    {
      v55 = *((_QWORD *)v54 + 1);
      if (v49 == v55)
        break;
      if (v51 > 1)
      {
        if (v55 >= *(_QWORD *)&v48)
          v55 %= *(_QWORD *)&v48;
      }
      else
      {
        v55 &= *(_QWORD *)&v48 - 1;
      }
      if (v55 != v52)
        goto LABEL_75;
LABEL_74:
      v54 = *(unsigned __int16 **)v54;
      if (!v54)
        goto LABEL_75;
    }
    if (!sub_20B89AD3C(a1 + 120, v54 + 8, (unsigned __int16 *)&v220))
      goto LABEL_74;
    v70 = *((_QWORD *)v54 + 5);
    v69 = *((_QWORD *)v54 + 6);
    while (1)
    {
      if (v70 == v69)
      {
        v87 = 0;
        goto LABEL_218;
      }
      v71 = *(char *)(v70 + 95);
      if (v71 >= 0)
        v72 = (__int16 *)(v70 + 72);
      else
        v72 = *(__int16 **)(v70 + 72);
      if (v71 >= 0)
        v73 = *(unsigned __int8 *)(v70 + 95);
      else
        v73 = *(_QWORD *)(v70 + 80);
      memset(&buf, 0, sizeof(buf));
      sub_20B8F7E80((char *)&buf, v72, &v72[v73], v73);
      v74 = *(char *)(v70 + 47);
      if (v74 >= 0)
        v75 = (__int16 *)(v70 + 24);
      else
        v75 = *(__int16 **)(v70 + 24);
      if (v74 >= 0)
        v76 = *(unsigned __int8 *)(v70 + 47);
      else
        v76 = *(_QWORD *)(v70 + 32);
      memset(&v225, 0, sizeof(v225));
      sub_20B8F7E80((char *)&v225, v75, &v75[v76], v76);
      v77 = *(char *)(v70 + 71);
      if (v77 >= 0)
        v78 = (__int16 *)(v70 + 48);
      else
        v78 = *(__int16 **)(v70 + 48);
      if (v77 >= 0)
        v79 = *(unsigned __int8 *)(v70 + 71);
      else
        v79 = *(_QWORD *)(v70 + 56);
      memset(&v223, 0, sizeof(v223));
      sub_20B8F7E80((char *)&v223, v78, &v78[v79], v79);
      v80 = *(char *)(v70 + 119);
      if (v80 >= 0)
        v81 = (__int16 *)(v70 + 96);
      else
        v81 = *(__int16 **)(v70 + 96);
      if (v80 >= 0)
        v82 = *(unsigned __int8 *)(v70 + 119);
      else
        v82 = *(_QWORD *)(v70 + 104);
      memset(&v222, 0, sizeof(v222));
      sub_20B8F7E80((char *)&v222, v81, &v81[v82], v82);
      v83 = *(char *)(v70 + 143);
      if (v83 >= 0)
        v84 = (__int16 *)(v70 + 120);
      else
        v84 = *(__int16 **)(v70 + 120);
      if (v83 >= 0)
        v85 = *(unsigned __int8 *)(v70 + 143);
      else
        v85 = *(_QWORD *)(v70 + 128);
      memset(&v221, 0, sizeof(v221));
      sub_20B8F7E80((char *)&v221, v84, &v84[v85], v85);
      v86 = sub_20B983DF0((unsigned __int16 **)a1, (unsigned __int16 *)__dst, (void **)&v223.__r_.__value_.__l.__data_, (void **)&v225.__r_.__value_.__l.__data_, (void **)&buf.__r_.__value_.__l.__data_, (void **)&v222.__r_.__value_.__l.__data_, (void **)&v221.__r_.__value_.__l.__data_, *(unsigned __int16 *)(v70 + 148), *(_WORD *)(v70 + 146), *(_WORD *)(v70 + 144), *(_WORD *)(v70 + 150), *(_WORD *)(v70 + 152), 1);
      if (v221.__r_.__value_.__r.__words[0])
      {
        v221.__r_.__value_.__l.__size_ = v221.__r_.__value_.__r.__words[0];
        operator delete(v221.__r_.__value_.__l.__data_);
      }
      if (v222.__r_.__value_.__r.__words[0])
      {
        v222.__r_.__value_.__l.__size_ = v222.__r_.__value_.__r.__words[0];
        operator delete(v222.__r_.__value_.__l.__data_);
      }
      if (v223.__r_.__value_.__r.__words[0])
      {
        v223.__r_.__value_.__l.__size_ = v223.__r_.__value_.__r.__words[0];
        operator delete(v223.__r_.__value_.__l.__data_);
      }
      if (v225.__r_.__value_.__r.__words[0])
      {
        v225.__r_.__value_.__l.__size_ = v225.__r_.__value_.__r.__words[0];
        operator delete(v225.__r_.__value_.__l.__data_);
      }
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v86)
        break;
      v70 += 160;
    }
    if (*(char *)(v70 + 23) < 0)
    {
      v102 = *(_WORD **)v70;
      v98 = *(_QWORD *)(v70 + 8);
      if (v98 != v188 || memcmp(__s1, *(const void **)v70, 2 * v188))
      {
        v99 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
        v100 = (v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = &v220;
        else
          v101 = (std::string *)v220.__r_.__value_.__r.__words[0];
        goto LABEL_213;
      }
LABEL_224:
      v56 = 0;
      v87 = 1;
      goto LABEL_218;
    }
    v98 = *(unsigned __int8 *)(v70 + 23);
    if ((_DWORD)v188 == (_DWORD)v98 && !memcmp(__s1, (const void *)v70, 2 * v98))
      goto LABEL_224;
    v99 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    v100 = (v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = &v220;
    else
      v101 = (std::string *)v220.__r_.__value_.__r.__words[0];
    v102 = (_WORD *)v70;
LABEL_213:
    if (v100)
      v109 = v220.__r_.__value_.__l.__size_;
    else
      v109 = v99;
    sub_20B8CD43C(&v211, v102, v98, v171, v101, v109, v173, v172);
    v110 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
    {
      if (__s1)
        v140 = v188;
      else
        v140 = 0;
      sub_20B8D15F4(__s1, v140, &v225);
      if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v141 = &v225;
      else
        v141 = (std::string *)v225.__r_.__value_.__r.__words[0];
      if (__src)
        v142 = v183;
      else
        v142 = 0;
      sub_20B8D15F4(__src, v142, &v223);
      v143 = SHIBYTE(v223.__r_.__value_.__r.__words[2]);
      v144 = v223.__r_.__value_.__r.__words[0];
      v145 = *(char *)(v70 + 23);
      if (v145 >= 0)
        v146 = (void *)v70;
      else
        v146 = *(void **)v70;
      if (v145 >= 0)
        v147 = *(unsigned __int8 *)(v70 + 23);
      else
        v147 = *(_QWORD *)(v70 + 8);
      sub_20B8D15F4(v146, v147, &v222);
      v148 = &v223;
      if (v143 < 0)
        v148 = (std::string *)v144;
      v149 = &v222;
      if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v149 = (std::string *)v222.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v141;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v148;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v227 = v149;
      _os_log_debug_impl(&dword_20B7F7000, v110, OS_LOG_TYPE_DEBUG, "[LPL::applyLexicalRules] Rewriting %s (%s) => %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v223.__r_.__value_.__l.__data_);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v225.__r_.__value_.__l.__data_);
    }
    v87 = 1;
    v56 = 1;
LABEL_218:
    v48.i8[0] = v87 & v56;
LABEL_76:
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v220.__r_.__value_.__l.__data_);
      if ((v48.i8[0] & 1) != 0)
        goto LABEL_297;
    }
    else if ((v48.i8[0] & 1) != 0)
    {
      goto LABEL_297;
    }
LABEL_80:
    if ((a7 & 1) != 0)
      goto LABEL_269;
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_269;
    v224 = 0;
    v57 = sub_20B8DA374((uint64_t)__s1, v188, &v224, 1);
    if (!v57)
      goto LABEL_269;
    v58 = v224;
    if (!v224)
      goto LABEL_269;
    if ((v197 & 0x80u) == 0)
      v59 = v197;
    else
      v59 = (unint64_t)v196[1];
    v60 = atomic_load((unsigned __int8 *)&qword_25472BEA0);
    if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_25472BEA0))
    {
      qword_25472BE98 = (uint64_t)sub_20B896F94();
      __cxa_guard_release(&qword_25472BEA0);
    }
    if (v58 == v188 && !v59 && !*(_BYTE *)qword_25472BE98)
    {
      v61 = sub_20B8DA374((uint64_t)__src, v183, 0, 0);
      if ((v57 - 3) >= 0xFFFFFFFE && v61 == v57)
        goto LABEL_269;
    }
    memset(&v223, 0, sizeof(v223));
    if (v188 == v224)
    {
      *((_BYTE *)&v223.__r_.__value_.__s + 23) = 0;
      LOWORD(v223.__r_.__value_.__l.__data_) = 0;
      v62 = L"NW:RS1=";
      v63 = (std::string *)v196;
    }
    else
    {
      sub_20B877ED0(&buf, &__s1[2 * v224], v188 - v224);
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v223.__r_.__value_.__l.__data_);
      v223 = buf;
      v63 = &v223;
      v62 = L"NW:SFX=";
    }
    sub_20B987B84((uint64_t)&v222, v62, (const void **)&v63->__r_.__value_.__l.__data_);
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = (unsigned __int16 *)&v222;
    else
      v65 = (unsigned __int16 *)v222.__r_.__value_.__r.__words[0];
    if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
    else
      v66 = v222.__r_.__value_.__l.__size_;
    sub_20B9096D0(*(_QWORD *)(a1 + 32), v65, v66, 0, &v221);
    if (v221.__r_.__value_.__l.__size_ == v221.__r_.__value_.__r.__words[0]
      || (v67 = sub_20B909BF4((uint64_t)v221.__r_.__value_.__l.__data_, "IntValue"), v67 == v57))
    {
      v68 = 2;
      goto LABEL_264;
    }
    sub_20B877ED0(&v220, __s1, v188);
    if (v57 == 2)
    {
      sub_20B8D976C((uint64_t)&v220);
      v219.__r_.__value_.__r.__words[0] = 0;
      goto LABEL_164;
    }
    v219.__r_.__value_.__r.__words[0] = 0;
    if (v57 != 3)
    {
LABEL_164:
      if (sub_20B8D9BE0((uint64_t)&v220, (uint64_t *)&v219))
        goto LABEL_165;
LABEL_250:
      v68 = 2;
      goto LABEL_262;
    }
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v220;
    else
      v88 = (std::string *)v220.__r_.__value_.__r.__words[0];
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v89 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    else
      v89 = v220.__r_.__value_.__l.__size_;
    if ((sub_20B8D9C9C((uint64_t)v88, v89, (uint64_t *)&v219) & 1) == 0)
      goto LABEL_250;
LABEL_165:
    v90 = (std::string *)v220.__r_.__value_.__r.__words[0];
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v90 = &v220;
    v91 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = v220.__r_.__value_.__l.__size_;
    v92 = 0;
    if (v91)
    {
      while (1)
      {
        v93 = *((unsigned __int16 *)&v90->__r_.__value_.__l.__data_ + v92);
        v94 = v93 == 48 || v93 == 65296;
        if (!v94 && v93 != 12295)
          break;
        if (v91 == ++v92)
        {
          v92 = v91;
          break;
        }
      }
    }
    v96 = v219.__r_.__value_.__r.__words[0] == 0;
    sub_20B87C9E0(&buf, byte_20BA93B9E);
    v97 = v92 - v96;
    switch(v67)
    {
      case 3:
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
        {
          *(_WORD *)v220.__r_.__value_.__l.__data_ = 0;
          v220.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          LOWORD(v220.__r_.__value_.__l.__data_) = 0;
          *((_BYTE *)&v220.__r_.__value_.__s + 23) = 0;
        }
        if (v97)
          v111 = 0;
        else
          v111 = sub_20B8D96BC((uint64_t)v219.__r_.__value_.__l.__data_, (uint64_t)&v220);
        break;
      case 2:
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
        {
          *(_WORD *)v220.__r_.__value_.__l.__data_ = 0;
          v220.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          LOWORD(v220.__r_.__value_.__l.__data_) = 0;
          *((_BYTE *)&v220.__r_.__value_.__s + 23) = 0;
        }
        if (sub_20B8D9A84((uint64_t)v219.__r_.__value_.__l.__data_, (uint64_t)&v220))
          v111 = sub_20B8D9880((uint64_t)&v220);
        else
          v111 = 0;
        if (v97)
        {
          v113 = v97;
          do
          {
            sub_20B87C0F8((uint64_t)&buf, 65296);
            --v113;
          }
          while (v113);
          goto LABEL_239;
        }
        break;
      case 1:
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
        {
          *(_WORD *)v220.__r_.__value_.__l.__data_ = 0;
          v220.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          LOWORD(v220.__r_.__value_.__l.__data_) = 0;
          *((_BYTE *)&v220.__r_.__value_.__s + 23) = 0;
        }
        v111 = sub_20B8D9A84((uint64_t)v219.__r_.__value_.__l.__data_, (uint64_t)&v220);
        v112 = v97;
        if (v97)
        {
          do
          {
            sub_20B87C0F8((uint64_t)&buf, 48);
            --v112;
          }
          while (v112);
          goto LABEL_239;
        }
        break;
      default:
        v111 = 0;
LABEL_239:
        if (v97)
        {
          sub_20B9137C8((const void **)&buf.__r_.__value_.__l.__data_, (const void **)&v220.__r_.__value_.__l.__data_, (uint64_t)&v225);
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v220.__r_.__value_.__l.__data_);
          v220 = v225;
        }
        break;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if ((v111 & 1) == 0)
      goto LABEL_250;
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    {
      v114 = v223.__r_.__value_.__l.__size_;
      if (v223.__r_.__value_.__l.__size_)
      {
        v115 = (std::string *)v223.__r_.__value_.__r.__words[0];
LABEL_253:
        sub_20B88DACC((uint64_t)&v220, v115, v114);
      }
    }
    else
    {
      v114 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
      if (*((_BYTE *)&v223.__r_.__value_.__s + 23))
      {
        v115 = &v223;
        goto LABEL_253;
      }
    }
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v116 = &v220;
    else
      v116 = (std::string *)v220.__r_.__value_.__r.__words[0];
    if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v117 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
    else
      v117 = v220.__r_.__value_.__l.__size_;
    sub_20B8CD43C(&v211, v116, v117, v171, __src, v183, v173, v172);
    v118 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
    {
      if (__s1)
        v150 = v188;
      else
        v150 = 0;
      sub_20B8D15F4(__s1, v150, &v225);
      if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v151 = &v225;
      else
        v151 = (std::string *)v225.__r_.__value_.__r.__words[0];
      if (__src)
        v152 = v183;
      else
        v152 = 0;
      sub_20B8D15F4(__src, v152, &v219);
      v153 = SHIBYTE(v219.__r_.__value_.__r.__words[2]);
      v154 = v219.__r_.__value_.__r.__words[0];
      if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v155 = &v220;
      else
        v155 = (std::string *)v220.__r_.__value_.__r.__words[0];
      if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v156 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
      else
        v156 = v220.__r_.__value_.__l.__size_;
      sub_20B8D15F4(v155, v156, &v218);
      v157 = &v219;
      if (v153 < 0)
        v157 = (std::string *)v154;
      v158 = &v218;
      if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v158 = (std::string *)v218.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v151;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v157;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v227 = v158;
      v228 = 1024;
      v229 = v173;
      v230 = 1024;
      v231 = v172;
      v232 = 1024;
      v233 = v200;
      v234 = 1024;
      v235 = v201;
      _os_log_debug_impl(&dword_20B7F7000, v118, OS_LOG_TYPE_DEBUG, "[LPL::applyNonLexicalPreferences] %s (%s) => %s (lc:%d rc:%d f-lc:%d f-rc:%d)", (uint8_t *)&buf, 0x38u);
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v218.__r_.__value_.__l.__data_);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v225.__r_.__value_.__l.__data_);
    }
    v68 = 1;
LABEL_262:
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
LABEL_264:
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
    sub_20B8882B4((void ***)&buf);
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v222.__r_.__value_.__l.__data_);
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v223.__r_.__value_.__l.__data_);
    if (v68 == 2)
    {
LABEL_269:
      v119 = sub_20B9698DC(**(_DWORD **)(a1 + 16)) ^ 1;
      if (v167 != 40)
        LOBYTE(v119) = 1;
      if ((v119 & 1) != 0)
        goto LABEL_294;
      if ((_DWORD)v188)
      {
        v120 = 0;
        for (i = 0; i != v188; v120 = i >= v188)
        {
          v122 = *(_WORD *)&__s1[2 * i];
          v125 = (unsigned __int16)((v122 & 0xFFDF) - 65) >= 0x1Au;
          v123 = (unsigned __int16)(v122 + 191);
          v124 = v122 + 223;
          v125 = v125 && v123 >= 0x1A;
          if (v125 && v124 > 0x19u)
            break;
          ++i;
        }
        if (!v120)
          goto LABEL_294;
      }
      if (!v183)
        goto LABEL_294;
      v127 = 0;
      for (j = 0; j != v183; v127 = ++j >= (unint64_t)v183)
      {
        v129 = __src[j];
        v125 = (unsigned __int16)((v129 & 0xFFDF) - 65) >= 0x1Au;
        v130 = (unsigned __int16)(v129 + 191);
        v131 = v129 + 223;
        if (v125 && v130 >= 0x1A && v131 > 0x19u)
          break;
      }
      if (v127)
      {
LABEL_294:
        sub_20B8CD43C(&v211, __s1, v188, v171, __src, v183, v173, v172);
        v134 = 0;
        goto LABEL_298;
      }
      sub_20B8D315C(__src, v183, &buf);
      sub_20B8CD43C(&v211, buf.__r_.__value_.__l.__data_, (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 1, v171, __src, v183, v173, v172);
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
LABEL_297:
    v134 = 1;
LABEL_298:
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v208.__r_.__value_.__l.__data_);
    v208 = v209;
    *((_BYTE *)&v209.__r_.__value_.__s + 23) = 0;
    LOWORD(v209.__r_.__value_.__l.__data_) = 0;
    v135 = v185;
    if (v185)
    {
      LODWORD(v135) = 0;
      v136 = (unsigned __int16 *)(v215 + 24);
      v137 = v177;
      do
      {
        v138 = *v136;
        v136 += 20;
        LODWORD(v135) = v135 + v138;
        v137 -= 40;
      }
      while (v137);
      v135 = (int)v135;
    }
    if ((_QWORD)v212)
      v139 = *(unsigned __int16 *)(v215 + 40 * v185 + 24);
    else
      v139 = 0;
    sub_20B877ED0(&buf, (void *)(v212 + 2 * v135), v139);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    v209 = buf;
    if (SHIBYTE(v207) < 0)
      operator delete((void *)v206);
    v206 = v204;
    v207 = v205;
    v204 = __p;
    v205 = v203;
    HIBYTE(v203) = 0;
    LOWORD(__p) = 0;
    if (v199 < 0)
      operator delete(v198);
    if ((char)v197 < 0)
      operator delete(v196[0]);
    if (v195 < 0)
      operator delete(v194);
    if (v193 < 0)
      operator delete(v192);
    if (SHIBYTE(v191) < 0)
      operator delete(__dst[0]);
    v22 = v174 | v134;
    v20 = v182;
    __src += v183;
    v177 += 40;
    v21 = v176;
    __s1 += 2 * v188;
    v182 = v181;
  }
  while (v176 != v168);
  if ((v22 & 1) == 0)
    goto LABEL_378;
  v159 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v184 + 112))(v184, v176);
  v160 = *((_DWORD *)v184 + 55);
  v161 = (*(uint64_t (**)(char *))(*(_QWORD *)v184 + 96))(v184);
  v162 = (*(uint64_t (**)(char *))(*(_QWORD *)v184 + 408))(v184);
  v11 = sub_20B8CD5F8((uint64_t)&v211, v164, v159, v160, 0, v161, v162);
  if (v11)
  {
    v163 = (*(uint64_t (**)(char *))(*(_QWORD *)v184 + 200))(v184);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 512))(v11, v163);
  }
LABEL_379:
  if (SHIBYTE(v203) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v205) < 0)
    operator delete((void *)v204);
  if (SHIBYTE(v207) < 0)
    operator delete((void *)v206);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v216 + 1))
    CFRelease(*((CFTypeRef *)&v216 + 1));
  *((_QWORD *)&v216 + 1) = 0;
  if ((_QWORD)v215)
  {
    *((_QWORD *)&v215 + 1) = v215;
    operator delete((void *)v215);
  }
  if (*((_QWORD *)&v213 + 1))
  {
    *(_QWORD *)&v214 = *((_QWORD *)&v213 + 1);
    operator delete(*((void **)&v213 + 1));
  }
  if ((_QWORD)v212)
  {
    *((_QWORD *)&v212 + 1) = v212;
    operator delete((void *)v212);
  }
  return v11;
}

void sub_20B986380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a71;
  char a72;
  void *a73;
  char a74;

  __cxa_guard_abort(&qword_25472BEA0);
  sub_20B97F5E4((uint64_t)&a40);
  if (a62 < 0)
    operator delete(__p);
  if (a69 < 0)
    operator delete(a64);
  if (a72 < 0)
    operator delete(a71);
  if (a74 < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  sub_20B8CD6A0((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

BOOL sub_20B98664C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  _BOOL8 result;

  if (!a1[1])
    return 0;
  v2 = 0;
  v3 = MEMORY[0x24BDAC740];
  do
  {
    v4 = *(unsigned __int16 *)(*a1 + 2 * v2);
    if (v4 <= 0x7F)
      v5 = *(_DWORD *)(v3 + 4 * v4 + 60) & 0x40000;
    else
      v5 = __maskrune(v4, 0x40000uLL);
    result = v5 != 0;
    if (!v5)
      break;
    ++v2;
  }
  while (v2 < a1[1]);
  return result;
}

uint64_t sub_20B9866D4(unsigned __int16 **a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;

  v1 = a1[1];
  if (v1)
  {
    v2 = 2 * (_QWORD)v1;
    v3 = *a1;
    result = 1;
    do
    {
      v5 = *v3;
      if (v5 > 0xFF00)
      {
        v6 = v5 - 65281;
        v7 = v6 > 0x1E;
        v8 = (1 << v6) & 0x40002801;
        if (!v7 && v8 != 0)
          return result;
      }
      else if (v5 - 12289 < 2 || v5 == 44 || v5 == 46)
      {
        return result;
      }
      ++v3;
      v2 -= 2;
    }
    while (v2);
  }
  return 0;
}

BOOL sub_20B986758(unsigned __int16 *a1, unint64_t a2, unsigned int a3)
{
  unsigned __int8 v6;
  int v7;
  _BOOL8 result;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  UChar32 v13;
  UBlockCode Code;

  v6 = atomic_load((unsigned __int8 *)&qword_25472D288);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472D288))
  {
    sub_20B8B2334(0);
    qword_25472D280 = (uint64_t)&qword_25472C9B0;
    __cxa_guard_release(&qword_25472D288);
  }
  if (*(unsigned __int16 *)(qword_25472D280 + 88) <= a3 && *(unsigned __int16 *)(qword_25472D280 + 90) >= a3)
    return 0;
  if (a3 > 0x64F)
    return 1;
  v7 = (unsigned __int16)word_20BA41828[a3];
  if (v7 != 409 && v7 != 407)
    return 1;
  if (a2 > 5)
    return 0;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 2 * a2;
    do
    {
      v13 = *a1;
      if ((v13 - 12353) < 0x56 || v13 == 12540 || v13 == 12316)
      {
        ++v11;
      }
      else if ((v13 - 12449) < 0x5A || v13 == 12540 || v13 == 12316)
      {
        ++v10;
      }
      else
      {
        Code = ublock_getCode(v13);
        if ((Code - 58) <= 0x25 && ((1 << (Code - 58)) & 0x3000203003) != 0)
          ++v9;
      }
      ++a1;
      v12 -= 2;
    }
    while (v12);
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
  }
  result = 1;
  if (a2 != v11 && a2 != v10 && (a2 > 3 || a2 != v9))
    return a2 == v9 + v11 && v9 != 0;
  return result;
}

void sub_20B986924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D288);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B98693C(unsigned __int16 *a1, int *a2)
{
  _WORD *v4;
  unint64_t v5;
  char v6;
  unsigned int v7;
  _WORD *v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  __int16 v42;
  _QWORD *v43;
  void *v44;
  char *v45;
  int v46;
  BOOL v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;
  void *__p;
  char *v66;
  char *v67;

  v4 = (_WORD *)(*(uint64_t (**)(int *))(*(_QWORD *)a2 + 544))(a2);
  v5 = 0;
  v6 = 0;
  __p = 0;
  v66 = 0;
  v67 = 0;
  while (v5 < (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 48))(a2))
  {
    v7 = (*(uint64_t (**)(int *, unint64_t))(*(_QWORD *)a2 + 568))(a2, v5);
    if (v7 >= 2)
    {
      v8 = &v4[v7];
      sub_20B8B17F4(v4, v8, (uint64_t)&__p);
      v4 = v8;
      goto LABEL_96;
    }
    v10 = (unsigned __int16)*v4++;
    v9 = v10;
    v11 = a1[64];
    if (v11 != 12290 && (v9 == 46 || v9 == 65294 || v9 == 12290))
    {
      v12 = v66;
      if (v66 >= v67)
      {
        v13 = (char *)__p;
        v19 = v66 - (_BYTE *)__p;
        if (v66 - (_BYTE *)__p <= -3)
          goto LABEL_108;
        v20 = v19 >> 1;
        if (v67 - (_BYTE *)__p <= (unint64_t)((v19 >> 1) + 1))
          v21 = v20 + 1;
        else
          v21 = v67 - (_BYTE *)__p;
        if ((unint64_t)(v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v21;
        if (v17)
        {
          v18 = (char *)sub_20B80FD48((uint64_t)&v67, v17);
          v13 = (char *)__p;
          v12 = v66;
          LOWORD(v11) = a1[64];
        }
        else
        {
          v18 = 0;
        }
        v27 = &v18[2 * v20];
        *(_WORD *)v27 = v11;
        v26 = v27 + 2;
        while (v12 != v13)
        {
          v28 = *((_WORD *)v12 - 1);
          v12 -= 2;
          *((_WORD *)v27 - 1) = v28;
          v27 -= 2;
        }
        goto LABEL_92;
      }
    }
    else
    {
      v11 = a1[65];
      if (v11 != 12289 && (v9 == 44 || v9 == 65292 || v9 == 12289))
      {
        v12 = v66;
        if (v66 >= v67)
        {
          v13 = (char *)__p;
          v22 = v66 - (_BYTE *)__p;
          if (v66 - (_BYTE *)__p < -2)
            goto LABEL_108;
          v23 = v22 >> 1;
          if (v67 - (_BYTE *)__p <= (unint64_t)((v22 >> 1) + 1))
            v24 = v23 + 1;
          else
            v24 = v67 - (_BYTE *)__p;
          if ((unint64_t)(v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v24;
          if (v17)
          {
            v18 = (char *)sub_20B80FD48((uint64_t)&v67, v17);
            v13 = (char *)__p;
            v12 = v66;
            LOWORD(v11) = a1[65];
          }
          else
          {
            v18 = 0;
          }
          v27 = &v18[2 * v23];
          *(_WORD *)v27 = v11;
          v26 = v27 + 2;
          while (v12 != v13)
          {
            v38 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v27 - 1) = v38;
            v27 -= 2;
          }
          goto LABEL_92;
        }
      }
      else
      {
        v11 = a1[66];
        if (v11 == 65281 || v9 != 65281)
        {
          v11 = a1[67];
          v12 = v66;
          if (v11 == 65311 || v9 != 65311)
          {
            if (v66 >= v67)
            {
              v29 = (char *)__p;
              v30 = v66 - (_BYTE *)__p;
              if (v66 - (_BYTE *)__p < -2)
                goto LABEL_108;
              v31 = v30 >> 1;
              if (v67 - (_BYTE *)__p <= (unint64_t)((v30 >> 1) + 1))
                v32 = v31 + 1;
              else
                v32 = v67 - (_BYTE *)__p;
              if ((unint64_t)(v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v33 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v33 = v32;
              if (v33)
              {
                v34 = (char *)sub_20B80FD48((uint64_t)&v67, v33);
                v29 = (char *)__p;
                v12 = v66;
              }
              else
              {
                v34 = 0;
              }
              v40 = &v34[2 * v31];
              *(_WORD *)v40 = v9;
              v26 = v40 + 2;
              while (v12 != v29)
              {
                v41 = *((_WORD *)v12 - 1);
                v12 -= 2;
                *((_WORD *)v40 - 1) = v41;
                v40 -= 2;
              }
              __p = v40;
              v66 = v26;
              v67 = &v34[2 * v33];
              if (v29)
                operator delete(v29);
              goto LABEL_95;
            }
            *(_WORD *)v66 = v9;
            v25 = v12 + 2;
            goto LABEL_49;
          }
          if (v66 >= v67)
          {
            v13 = (char *)__p;
            v35 = v66 - (_BYTE *)__p;
            if (v66 - (_BYTE *)__p < -2)
LABEL_108:
              sub_20B80CDD8();
            v36 = v35 >> 1;
            if (v67 - (_BYTE *)__p <= (unint64_t)((v35 >> 1) + 1))
              v37 = v36 + 1;
            else
              v37 = v67 - (_BYTE *)__p;
            if ((unint64_t)(v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v17 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v17 = v37;
            if (v17)
            {
              v18 = (char *)sub_20B80FD48((uint64_t)&v67, v17);
              v13 = (char *)__p;
              v12 = v66;
              LOWORD(v11) = a1[67];
            }
            else
            {
              v18 = 0;
            }
            v27 = &v18[2 * v36];
            *(_WORD *)v27 = v11;
            v26 = v27 + 2;
            while (v12 != v13)
            {
              v42 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *((_WORD *)v27 - 1) = v42;
              v27 -= 2;
            }
            goto LABEL_92;
          }
        }
        else
        {
          v12 = v66;
          if (v66 >= v67)
          {
            v13 = (char *)__p;
            v14 = v66 - (_BYTE *)__p;
            if (v66 - (_BYTE *)__p < -2)
              goto LABEL_108;
            v15 = v14 >> 1;
            if (v67 - (_BYTE *)__p <= (unint64_t)((v14 >> 1) + 1))
              v16 = v15 + 1;
            else
              v16 = v67 - (_BYTE *)__p;
            if ((unint64_t)(v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v17 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
            {
              v18 = (char *)sub_20B80FD48((uint64_t)&v67, v17);
              v13 = (char *)__p;
              v12 = v66;
              LOWORD(v11) = a1[66];
            }
            else
            {
              v18 = 0;
            }
            v27 = &v18[2 * v15];
            *(_WORD *)v27 = v11;
            v26 = v27 + 2;
            while (v12 != v13)
            {
              v39 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *((_WORD *)v27 - 1) = v39;
              v27 -= 2;
            }
LABEL_92:
            __p = v27;
            v66 = v26;
            v67 = &v18[2 * v17];
            if (v13)
              operator delete(v13);
            v6 = 1;
            goto LABEL_95;
          }
        }
      }
    }
    *(_WORD *)v12 = v11;
    v25 = v12 + 2;
    v6 = 1;
LABEL_49:
    v26 = v25;
LABEL_95:
    v66 = v26;
LABEL_96:
    ++v5;
  }
  if ((v6 & 1) != 0)
  {
    v43 = (_QWORD *)operator new();
    v44 = __p;
    v45 = v66;
    v46 = *((char *)a2 + 87);
    v47 = v46 < 0;
    if (v46 >= 0)
      v48 = a2 + 16;
    else
      v48 = (void *)*((_QWORD *)a2 + 8);
    v49 = *((unsigned __int8 *)a2 + 87);
    if (v47)
      v49 = *((_QWORD *)a2 + 9);
    v63 = v49;
    v64 = v48;
    v50 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 552))(a2);
    v61 = v51;
    v62 = (void *)v50;
    v52 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 112))(a2);
    v53 = a2[55];
    v54 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 376))(a2);
    v55 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 304))(a2);
    v56 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 96))(a2);
    v57 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 408))(a2);
    v58 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 416))(a2);
    sub_20B916250((uint64_t)v43, v44, (v45 - (_BYTE *)v44) >> 1, v64, v63, v62, v61, v52, v53, v54, v55, v56, v57, v58);
    v59 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 200))(a2);
    (*(void (**)(_QWORD *, uint64_t))(*v43 + 512))(v43, v59);
    (*(void (**)(int *))(*(_QWORD *)a2 + 392))(a2);
    (*(void (**)(_QWORD *))(*v43 + 400))(v43);
    v43[23] = *((_QWORD *)a2 + 23);
  }
  else
  {
    v43 = 0;
  }
  if (__p)
  {
    v66 = (char *)__p;
    operator delete(__p);
  }
  return v43;
}

void sub_20B986ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B986F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    sub_20B91833C(v2);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return sub_20B91833C(result);
  return result;
}

void sub_20B986F5C(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B986FE0(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20B88DD4C((_BYTE *)(a1 + 24), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_20B88DD4C((_BYTE *)(a1 + 48), *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 5);
    *(_OWORD *)(a1 + 48) = v7;
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_20B88DD4C((_BYTE *)(a1 + 72), *((void **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v8 = a3[3];
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a3 + 8);
    *(_OWORD *)(a1 + 72) = v8;
  }
  if (*((char *)a3 + 95) < 0)
  {
    sub_20B88DD4C((_BYTE *)(a1 + 96), *((void **)a3 + 9), *((_QWORD *)a3 + 10));
  }
  else
  {
    v9 = *(__int128 *)((char *)a3 + 72);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a3 + 11);
    *(_OWORD *)(a1 + 96) = v9;
  }
  v10 = (_BYTE *)(a1 + 120);
  if (*((char *)a3 + 119) < 0)
  {
    sub_20B88DD4C(v10, *((void **)a3 + 12), *((_QWORD *)a3 + 13));
  }
  else
  {
    v11 = a3[6];
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a3 + 14);
    *(_OWORD *)v10 = v11;
  }
  v12 = *((_QWORD *)a3 + 15);
  *(_WORD *)(a1 + 152) = *((_WORD *)a3 + 64);
  *(_QWORD *)(a1 + 144) = v12;
  return a1;
}

void sub_20B987124(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *sub_20B9871A0(unint64_t a1)
{
  if (a1 >= 0x19999999999999ALL)
    sub_20B800BC0();
  return operator new(160 * a1);
}

char *sub_20B9871E4(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_20B88DD4C(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20B88DD4C(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_20B88DD4C(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_20B88DD4C(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  v9 = __dst + 120;
  if (*((char *)a2 + 143) < 0)
  {
    sub_20B88DD4C(v9, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v9 = v10;
  }
  v11 = *((_QWORD *)a2 + 18);
  *((_WORD *)__dst + 76) = *((_WORD *)a2 + 76);
  *((_QWORD *)__dst + 18) = v11;
  return __dst;
}

void sub_20B98733C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9873B8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    sub_20B986F5C(i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B987404(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        sub_20B986F5C(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B987474(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_20B83AFD0(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_BYTE *sub_20B9874C0(_BYTE *__dst, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  sub_20B9520E8(__dst + 24, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_20B987538(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B987554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 *i;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;

  xmmword_25472BEA8 = 0u;
  *(_OWORD *)&qword_25472BEB8 = 0u;
  dword_25472BEC8 = 1065353216;
  if (a2)
  {
    v2 = a1;
    v35 = a1 + 48 * a2;
    while (1)
    {
      v3 = (unint64_t)&xmmword_25472BEA8 + 8;
      v4 = sub_20B89ACFC((uint64_t)&qword_25472BEC0, v2);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_25472BEA8 + 1);
      if (*((_QWORD *)&xmmword_25472BEA8 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472BEA8 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v3 = v4;
          if (v4 >= *((_QWORD *)&xmmword_25472BEA8 + 1))
            v3 = v4 % *((_QWORD *)&xmmword_25472BEA8 + 1);
        }
        else
        {
          v3 = (*((_QWORD *)&xmmword_25472BEA8 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int16 ***)(xmmword_25472BEA8 + 8 * v3);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int16 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if (sub_20B89AD3C((uint64_t)&dword_25472BEC8, i + 8, (unsigned __int16 *)v2))
                goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x40uLL);
      v13 = v12;
      v36[0] = v12;
      v36[1] = &qword_25472BEB8;
      v37 = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      if (*(char *)(v2 + 23) < 0)
      {
        sub_20B88DD4C(v12 + 16, *(void **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v2;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v2 + 16);
        *((_OWORD *)v12 + 1) = v14;
      }
      *((_QWORD *)v13 + 5) = 0;
      *((_QWORD *)v13 + 6) = 0;
      *((_QWORD *)v13 + 7) = 0;
      sub_20B9520E8(v13 + 40, *(__int128 **)(v2 + 24), *(__int128 **)(v2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3));
      v37 = 1;
      v15 = (float)(unint64_t)(qword_25472BEC0 + 1);
      if (!v6 || (float)(*(float *)&dword_25472BEC8 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = *(uint64_t **)(xmmword_25472BEA8 + 8 * v3);
      v32 = v36[0];
      if (v31)
      {
        *(_QWORD *)v36[0] = *v31;
      }
      else
      {
        *(_QWORD *)v36[0] = qword_25472BEB8;
        qword_25472BEB8 = v32;
        *(_QWORD *)(xmmword_25472BEA8 + 8 * v3) = &qword_25472BEB8;
        if (!*(_QWORD *)v32)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v32 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v31 = (uint64_t *)(xmmword_25472BEA8 + 8 * v33);
      }
      *v31 = v32;
LABEL_77:
      v36[0] = 0;
      ++qword_25472BEC0;
      sub_20B87D52C((uint64_t)v36);
LABEL_78:
      v2 += 48;
      if (v2 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25472BEC8);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_25472BEA8 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472BEA8 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472BEA8 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_25472BEC0 / *(float *)&dword_25472BEC8);
      if (*((_QWORD *)&xmmword_25472BEA8 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472BEA8 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_25472BEA8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_25472BEA8;
          *(_QWORD *)&xmmword_25472BEA8 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_25472BEA8 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472BEA8 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_25472BEB8;
          if (qword_25472BEB8)
          {
            v24 = *(_QWORD *)(qword_25472BEB8 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472BEA8 + 8 * v24) = &qword_25472BEB8;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_25472BEA8 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_25472BEA8 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472BEA8 + 8 * v30);
                **(_QWORD **)(xmmword_25472BEA8 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_25472BEA8;
        *(_QWORD *)&xmmword_25472BEA8 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_25472BEA8 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_20B987A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87D52C((uint64_t)va);
  sub_20B987A80((uint64_t)&xmmword_25472BEA8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B987A80(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20B87CDF0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_20B987ADC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)operator new(0x18uLL);
  *a1 = v4;
  a1[1] = v4;
  v5 = v4 + 24;
  a1[2] = v4 + 24;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20B88DD4C(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  }
  a1[1] = v5;
  return a1;
}

void sub_20B987B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B83AFD0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B987B84(uint64_t a1, _WORD *a2, const void **a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t result;
  char *v10;
  const void *v11;

  if (*a2)
  {
    v5 = 0;
    do
      v6 = v5 + 1;
    while (a2[++v5]);
  }
  else
  {
    v6 = 0;
  }
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (unint64_t)a3[1];
  result = sub_20B878930(a1, v8 + v6);
  if (*(char *)(result + 23) >= 0)
    v10 = (char *)result;
  else
    v10 = *(char **)result;
  if (v6)
    result = (uint64_t)memmove(v10, a2, 2 * v6);
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(&v10[2 * v6], v11, 2 * v8);
  }
  *(_WORD *)&v10[2 * v6 + 2 * v8] = 0;
  return result;
}

void sub_20B987C50(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int16 **v15;
  unsigned __int16 *i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  _QWORD v50[2];
  char v51;
  _QWORD *v52;
  char v53;

  v9 = (_QWORD *)(a1 + 24);
  v10 = sub_20B89ACFC(a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  v49 = v9;
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int16 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (sub_20B89AD3C(a1 + 32, i + 8, a2))
            return;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  v19 = operator new(0x40uLL);
  v20 = v19;
  v50[0] = v19;
  v50[1] = a1 + 16;
  v51 = 0;
  *v19 = 0;
  v19[1] = v11;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B88DD4C((_BYTE *)v19 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
    v19[4] = *(_QWORD *)(a3 + 16);
  }
  v20[5] = 0;
  v20[6] = 0;
  v20[7] = 0;
  v21 = *a4;
  v22 = a4[1];
  v52 = v20 + 5;
  v53 = 0;
  if (v22 != v21)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 5);
    if (v23 >= 0x19999999999999ALL)
      sub_20B80CDD8();
    v24 = (char *)sub_20B9871A0(v23);
    v25 = 0;
    v20[5] = v24;
    v20[6] = v24;
    v20[7] = &v24[160 * v26];
    do
    {
      sub_20B9871E4(&v24[v25], (__int128 *)(v21 + v25));
      v25 += 160;
    }
    while (v21 + v25 != v22);
    v20[6] = &v24[v25];
  }
  v51 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
      v4 = v11;
    }
    else
    {
      v4 = v11;
      if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v12)
      goto LABEL_38;
    if (*(_QWORD *)&prime < v12)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_38:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = *(void **)a1;
          *(_QWORD *)a1 = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = (_QWORD *)*v18;
          if (*v18)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v18;
            v42 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v36;
                    goto LABEL_63;
                  }
                  *v36 = *v42;
                  *v42 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v43);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_63:
                v36 = v42;
                v42 = (_QWORD *)*v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v12 = (unint64_t)prime;
          goto LABEL_67;
        }
        v48 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v48)
          operator delete(v48);
        v12 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_67:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v4 >= v12)
        v4 %= v12;
    }
    else
    {
      v4 &= v12 - 1;
    }
  }
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v45 = v50[0];
  if (v44)
  {
    *(_QWORD *)v50[0] = *v44;
    v46 = v49;
LABEL_79:
    *v44 = v45;
    goto LABEL_80;
  }
  *(_QWORD *)v50[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v45;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v18;
  v46 = v49;
  if (*(_QWORD *)v45)
  {
    v47 = *(_QWORD *)(*(_QWORD *)v45 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v47 >= v12)
        v47 %= v12;
    }
    else
    {
      v47 &= v12 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_79;
  }
LABEL_80:
  v50[0] = 0;
  ++*v46;
  sub_20B98819C((uint64_t)v50);
}

void sub_20B988140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B98819C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B98819C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B9881E0((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_20B9881E0(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20B987404(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B988224(uint64_t a1)
{
  void *v2;

  sub_20B98825C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20B98825C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20B9881E0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20B988298@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v4;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (result >= 1)
  {
    v4 = result;
    if ((unint64_t)result > 0x555555555555555)
      sub_20B873738();
    v42 = a4 + 2;
    v37 = a4 + 2;
    v8 = (char *)sub_20B87374C((uint64_t)(a4 + 2), result);
    v11 = *a4;
    v10 = a4[1];
    if (v10 == *a4)
    {
      v11 = a4[1];
      v13 = v8;
    }
    else
    {
      v12 = a4[1];
      v13 = v8;
      do
      {
        *((_QWORD *)v13 - 6) = &off_24C467C40;
        v13 -= 48;
        v14 = *(_OWORD *)(v12 - 40);
        v15 = *(_OWORD *)(v12 - 24);
        *((_QWORD *)v13 + 5) = *((_QWORD *)v12 - 1);
        *(_OWORD *)(v13 + 24) = v15;
        *(_OWORD *)(v13 + 8) = v14;
        v12 -= 48;
      }
      while (v12 != v11);
    }
    *a4 = v13;
    a4[1] = v8;
    v16 = a4[2];
    a4[2] = &v8[48 * v9];
    v40 = v10;
    v41 = v16;
    v38 = v11;
    v39 = v11;
    sub_20B873790((uint64_t)&v38);
    v17 = 0;
    v18 = a4[1];
    result = (uint64_t)v37;
    do
    {
      v19 = *(_DWORD *)(a2 + 4 * v17);
      v20 = (uint64_t *)(a3 + 16 * v17);
      v22 = *v20;
      v21 = v20[1];
      if ((unint64_t)v18 >= *(_QWORD *)result)
      {
        v23 = a2;
        v24 = a3;
        v25 = *a4;
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a4) >> 4);
        v27 = v26 + 1;
        if (v26 + 1 > 0x555555555555555)
          sub_20B873738();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)result - (_QWORD)v25) >> 4) > v27)
          v27 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)result - (_QWORD)v25) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)result - (_QWORD)v25) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v28 = 0x555555555555555;
        else
          v28 = v27;
        v42 = (_QWORD *)result;
        if (v28)
        {
          v29 = (char *)sub_20B87374C(result, v28);
          v25 = *a4;
          v18 = a4[1];
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[48 * v26];
        *(_QWORD *)v30 = &off_24C467C40;
        *((_DWORD *)v30 + 2) = v19;
        *((_QWORD *)v30 + 2) = v22;
        *((_QWORD *)v30 + 3) = v21;
        *((_QWORD *)v30 + 4) = 64;
        *((_QWORD *)v30 + 5) = 0xFFFFFFFFLL;
        if (v18 == v25)
        {
          v32 = &v29[48 * v26];
        }
        else
        {
          v31 = v18;
          v32 = &v29[48 * v26];
          do
          {
            *((_QWORD *)v32 - 6) = &off_24C467C40;
            v32 -= 48;
            v33 = *(_OWORD *)(v31 - 40);
            v34 = *(_OWORD *)(v31 - 24);
            *((_QWORD *)v32 + 5) = *((_QWORD *)v31 - 1);
            *(_OWORD *)(v32 + 24) = v34;
            *(_OWORD *)(v32 + 8) = v33;
            v31 -= 48;
          }
          while (v31 != v25);
        }
        v35 = v30 + 48;
        *a4 = v32;
        a4[1] = v30 + 48;
        v36 = a4[2];
        a4[2] = &v29[48 * v28];
        v40 = v18;
        v41 = v36;
        v38 = v25;
        v39 = v25;
        sub_20B873790((uint64_t)&v38);
        v18 = v35;
        a3 = v24;
        a2 = v23;
        result = (uint64_t)v37;
      }
      else
      {
        *(_QWORD *)v18 = &off_24C467C40;
        *((_DWORD *)v18 + 2) = v19;
        *((_QWORD *)v18 + 2) = v22;
        *((_QWORD *)v18 + 3) = v21;
        *((_QWORD *)v18 + 4) = 64;
        *((_QWORD *)v18 + 5) = 0xFFFFFFFFLL;
        v18 += 48;
      }
      a4[1] = v18;
      ++v17;
    }
    while (v17 != v4);
  }
  return result;
}

void sub_20B98854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8737E0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98856C@<X0>(const __CFString *a1@<X0>, int64_t a2@<X1>, const void *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  CFStringRef Copy;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t result;
  __CFString *Mutable;
  uint64_t v25;
  _BOOL4 v26;
  CFIndex v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  const __CFString *v32;
  char *__p;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;

  v37 = 0;
  sub_20B8D0624(a1, (CFIndex *)&v37, &v36);
  __p = 0;
  v35 = 0;
  if (!a2)
    goto LABEL_18;
  if ((unint64_t)a2 >> 60)
    sub_20B80CDD8();
  v8 = (char *)sub_20B829AD0((uint64_t)&v35, a2);
  __p = v8;
  v35 = &v8[16 * v9];
  memmove(v8, a3, 16 * a2);
  v10 = &v8[16 * a2];
  v34 = v10;
  if (v10 == v8)
    goto LABEL_18;
  v11 = 0;
  v12 = v36;
  v13 = &v8[16 * a2];
  do
  {
    v14 = v10 - 16;
    v15 = sub_20B988C5C(v12, (unint64_t *)v10 - 2);
    if (v11 && v15)
    {
      v16 = *((_QWORD *)v10 - 1);
      if (v16 + *((_QWORD *)v10 - 2) == *(_QWORD *)v10)
      {
        *((_QWORD *)v10 - 1) = *((_QWORD *)v10 + 1) + v16;
        if (v34 != v13 + 16)
          memmove(v13, v13 + 16, v34 - (v13 + 16));
        v34 -= 16;
        --a2;
      }
    }
    v13 -= 16;
    v11 = v15;
    v10 -= 16;
  }
  while (v14 != __p);
  if (!v37)
  {
LABEL_18:
    Copy = CFStringCreateCopy(0, a1);
    v21 = operator new(0x20uLL);
    v21[2] = 0;
    *v21 = &off_24C46B8D8;
    v21[1] = 0;
    v21[3] = Copy;
    v22 = v21 + 3;
    goto LABEL_19;
  }
  v17 = 0;
  v18 = MEMORY[0x24BDAC740];
  while (1)
  {
    v19 = *(unsigned __int16 *)(v12 + 2 * v17);
    if (v19 <= 0x7F)
      break;
    if (__maskrune(v19, 0x500uLL))
      goto LABEL_24;
LABEL_17:
    if (++v17 >= v37)
      goto LABEL_18;
  }
  if ((*(_DWORD *)(v18 + 4 * v19 + 60) & 0x500) == 0)
    goto LABEL_17;
LABEL_24:
  Mutable = CFStringCreateMutable(0, 0);
  if (a2 >= 1)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v28 = *(_QWORD *)&__p[v25];
      v27 = *(_QWORD *)&__p[v25 + 8];
      v29 = sub_20B988C5C(v12, (unint64_t *)&__p[v25]);
      v30 = v29;
      if (v25)
        v31 = v29;
      else
        v31 = 0;
      if (v26 && v31)
        CFStringAppend(Mutable, CFSTR(" "));
      v32 = CFStringCreateWithCharacters(0, (const UniChar *)(v12 + 2 * v28), v27);
      CFStringAppend(Mutable, v32);
      CFRelease(v32);
      v25 += 16;
      v26 = v30;
      --a2;
    }
    while (a2);
  }
  v21 = operator new(0x20uLL);
  v21[2] = 0;
  *v21 = &off_24C46B8D8;
  v21[1] = 0;
  v21[3] = Mutable;
  v22 = v21 + 3;
LABEL_19:
  *a4 = v22;
  a4[1] = v21;
  if (__p)
    operator delete(__p);
  result = v36;
  if (v36)
    return MEMORY[0x20BD39C80](v36, 0x1000C80BDFB0063);
  return result;
}

void sub_20B98884C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a13)
    MEMORY[0x20BD39C80](a13, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9888A4(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5, int a6)
{
  const void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef *v15;
  std::__shared_weak_count *v16;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C45F900;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C45F9D0;
  *(_DWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = (const void **)(a1 + 40);
  sub_20B988298(a3, a4, (uint64_t)a5, (char **)(a1 + 48));
  sub_20B98856C(a2, a3, a5, &v15);
  sub_20B88B52C(v10, *v15);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_20B988980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  const void **v9;

  sub_20B8737E0(&a9);
  sub_20B87E150(v9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9889AC(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 0;
  return v2;
}

uint64_t sub_20B9889E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 48);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v2) >> 4);
  v4 = v2 + 48 * a2;
  if (v3 >= a2)
    return v4;
  else
    return 0;
}

uint64_t sub_20B988A1C(uint64_t a1)
{
  return sub_20B8D345C(*(const __CFString **)(a1 + 40));
}

uint64_t sub_20B988A24(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  CFStringRef Copy;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C45F900;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = &unk_24C45F9D0;
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a1 + 8);
  v3 = *(const __CFString **)(a1 + 16);
  if (v3)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
  else
    Copy = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = Copy;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  sub_20B87386C((char *)(v2 + 48), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4));
  return v2;
}

void sub_20B988ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C408D75F3D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B988B14(_QWORD *a1)
{
  return sub_20B988A24((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20B988B24(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C45F900;
  *(_QWORD *)(a1 + 24) = &unk_24C45F9D0;
  v3 = (void **)(a1 + 48);
  sub_20B8737E0(&v3);
  sub_20B87E150((const void **)(a1 + 40), 0);
  return a1;
}

uint64_t sub_20B988B7C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C45F900;
  *(_QWORD *)(a1 + 24) = &unk_24C45F9D0;
  v3 = (void **)(a1 + 48);
  sub_20B8737E0(&v3);
  sub_20B87E150((const void **)(a1 + 40), 0);
  return MEMORY[0x20BD39CB0](a1, 0x10E1C408D75F3D8);
}

uint64_t sub_20B988BE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_20B988BF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B988BFC()
{
  return 0;
}

unint64_t sub_20B988C04(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
}

uint64_t sub_20B988C20()
{
  return 0;
}

uint64_t sub_20B988C2C()
{
  return 4;
}

uint64_t sub_20B988C34()
{
  return 0;
}

uint64_t sub_20B988C3C()
{
  return 0;
}

uint64_t sub_20B988C44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_20B988C4C()
{
  return 0;
}

uint64_t sub_20B988C54()
{
  return 0;
}

BOOL sub_20B988C5C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  _BOOL8 result;
  int v6;

  v3 = *a2;
  for (result = 1; v3 < a2[1] + *a2; ++v3)
  {
    v6 = (1 << u_charType(*(unsigned __int16 *)(a1 + 2 * v3))) & 0x80020E;
    result = v6 != 0;
    if (!v6)
      break;
  }
  return result;
}

void sub_20B988CD8(uint64_t a1, char *__src, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;

  if (a4)
  {
    v10 = 0;
    v11 = a5 + 16;
    do
    {
      if (__src)
        v12 = *a3;
      else
        v12 = 0;
      v13 = sub_20BA2F950(*(_QWORD *)(a1 + 32), __src, v12, 0);
      v14 = v13;
      v16 = *(_DWORD **)(a5 + 8);
      v15 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v16 >= v15)
      {
        v18 = *(_DWORD **)a5;
        v19 = ((uint64_t)v16 - *(_QWORD *)a5) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          sub_20B80CDD8();
        v21 = v15 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)sub_20B8127BC(v11, v22);
          v18 = *(_DWORD **)a5;
          v16 = *(_DWORD **)(a5 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = v14;
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v25 = *--v16;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *(_QWORD *)a5 = v24;
        *(_QWORD *)(a5 + 8) = v17;
        *(_QWORD *)(a5 + 16) = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v16 = v13;
        v17 = v16 + 1;
      }
      *(_QWORD *)(a5 + 8) = v17;
      v26 = *a3++;
      __src += 2 * v26;
      ++v10;
    }
    while (v10 != a4);
  }
}

void sub_20B988E10(uint64_t a1, uint64_t *a2, __int16 a3, __int16 a4, int a5, const UniChar *a6, int a7, int a8, double a9, uint64_t a10)
{
  int v19;
  unsigned int v20;
  double v21;
  const void *v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  CFStringRef v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  _QWORD v31[13];
  int v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  char v37;
  char v38;
  _QWORD v39[5];
  void *__p;
  void *v41;
  uint64_t v42;
  _QWORD v43[4];
  _QWORD v44[5];

  v19 = *(unsigned __int8 *)sub_20B896F94();
  v20 = a8 & 0x2000000;
  if (a5 || v20)
  {
    v30 = a3;
    v44[0] = 0;
    v44[1] = v44;
    if (v20 | v19)
      v21 = -3.0;
    else
      v21 = -2.0;
    v44[2] = 0x2000000000;
    v44[3] = 0;
    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x2000000000;
    v43[3] = 0;
    v39[0] = 0;
    v39[1] = v39;
    v39[2] = 0x4002000000;
    v39[3] = sub_20B989074;
    v39[4] = sub_20B989098;
    v41 = 0;
    v42 = 0;
    v22 = (const void *)*a2;
    v23 = a2[1];
    v24 = (v23 - *a2) >> 2;
    __p = 0;
    sub_20B873D0C(&__p, v22, v23, v24);
    v25 = a4;
    if (a7 < 1)
      v26 = 0;
    else
      v26 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a6, (unsigned __int16)a7, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *a2;
    v29 = (a2[1] - *a2) >> 2;
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 0x40000000;
    v31[2] = sub_20B9890B0;
    v31[3] = &unk_24C46C5A0;
    *(double *)&v31[8] = v21;
    v33 = a7;
    v37 = v20 >> 25;
    v38 = v19;
    v31[9] = v26;
    v31[10] = a10;
    *(double *)&v31[11] = a9;
    v31[12] = a6;
    v34 = v30;
    v35 = v25;
    v36 = a5;
    v32 = a8;
    v31[4] = v39;
    v31[5] = v44;
    v31[6] = v43;
    v31[7] = a1;
    sub_20B9C44B8(v27, v28, v29, 8, 1, (uint64_t)v31);
    if (v26)
      CFRelease(v26);
    _Block_object_dispose(v39, 8);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v43, 8);
    _Block_object_dispose(v44, 8);
  }
}

void sub_20B989028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v32 - 168), 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 sub_20B989074(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B989098(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B9890B0(uint64_t a1, _DWORD *a2, uint64_t a3, double a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v10;
  const __CFString *v11;
  __CFString *v12;
  const __CFString *v13;
  CFIndex Length;
  CFIndex v15;
  CFIndex v16;
  BOOL v17;
  const __CFString *v18;
  CFRange v19;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  char *v32;
  char *v33;
  int v34;
  double v35;
  uint64_t v36;
  long double v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  uint8_t buf[4];
  const __CFString *v44;
  __int16 v45;
  const __CFString *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (a3 < 1 || *a2 < 0x1F4u || *(double *)(a1 + 64) >= a4)
    goto LABEL_61;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (const __CFString *)sub_20BA2F424();
  v12 = sub_20B96DFA4(*(_QWORD *)(v10 + 16), v11);
  v13 = v12;
  if (v12)
    Length = CFStringGetLength(v12);
  else
    Length = 0;
  v15 = *(__int16 *)(a1 + 108);
  if (Length >= (v15 & ~((int)v15 >> 31)))
    v16 = v15 & ~((int)v15 >> 31);
  else
    v16 = Length;
  if (v13)
    v17 = v11 == 0;
  else
    v17 = 1;
  if (v17)
    goto LABEL_54;
  v18 = *(const __CFString **)(a1 + 72);
  if (v18 && v16)
  {
    v19.location = 0;
    v19.length = v16;
    if (Length <= v15
       ? CFStringCompareWithOptions(*(CFStringRef *)(a1 + 72), v13, v19, 0)
       : CFStringCompareWithOptions(v13, v18, v19, 0))
    {
      goto LABEL_54;
    }
  }
  if (*(_BYTE *)(a1 + 116) || sub_20B8934E4(v10, v13, v11))
  {
    v21 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v22 = (char *)v21[6];
    v23 = v21[7];
    if ((unint64_t)v22 >= v23)
    {
      v25 = (char *)v21[5];
      v26 = (v22 - v25) >> 2;
      if ((unint64_t)(v26 + 1) >> 62)
        sub_20B80CDD8();
      v27 = v23 - (_QWORD)v25;
      v28 = (uint64_t)(v23 - (_QWORD)v25) >> 1;
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      if (v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
      {
        v30 = (char *)sub_20B8127BC((uint64_t)(v21 + 7), v29);
        v25 = (char *)v21[5];
        v22 = (char *)v21[6];
      }
      else
      {
        v30 = 0;
      }
      v32 = &v30[4 * v26];
      v33 = &v30[4 * v29];
      *(_DWORD *)v32 = *a2;
      v24 = v32 + 4;
      while (v22 != v25)
      {
        v34 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v32 - 1) = v34;
        v32 -= 4;
      }
      v21[5] = v32;
      v21[6] = v24;
      v21[7] = v33;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_DWORD *)v22 = *a2;
      v24 = v22 + 4;
    }
    v21[6] = v24;
    v35 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)
       - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) >= 5uLL)
      v35 = -sub_20BA3000C(*(_QWORD *)(v10 + 32), 2, (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) - 8), 2);
    v36 = Length - *(__int16 *)(a1 + 108);
    if ((*(_BYTE *)(a1 + 117) || (sub_20B8DA278(v11) & 1) == 0)
      && v35 < 2.5
      && (v36 & 0x8000000000000000) == 0
      && (*(_BYTE *)(a1 + 116) || sub_20B98956C(v11)))
    {
      v37 = log((double)v36 + 1.0);
      sub_20B989638(*(int64x2_t **)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, v37 * 0.0 + *(double *)(a1 + 88) + a4);
    }
    if (sub_20B8D9FB4(v11))
      goto LABEL_53;
    if ((__int16)(*(_WORD *)(a1 + 108) - v16) < 1)
    {
      if (*(_BYTE *)(a1 + 116))
        goto LABEL_53;
      v38 = 0;
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 96) + 2 * v16;
    }
    sub_20B988E10(v10, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, (unsigned __int16)(*(_WORD *)(a1 + 110) + Length), *(unsigned __int16 *)(a1 + 112), (unsigned __int16)(*(_WORD *)(a1 + 114) - 1), v38, *(double *)(a1 + 88) + a4);
LABEL_53:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) -= 4;
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
LABEL_54:
    v31 = 1;
    goto LABEL_55;
  }
  v31 = 0;
LABEL_55:
  v39 = sub_20B9A7C5C(0xAu);
  if (((v31 | !os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) & 1) != 0
    || (v40 = sub_20B9A7C5C(0xAu), !os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)))
  {
    if (!v13)
      goto LABEL_59;
    goto LABEL_58;
  }
  *(_DWORD *)buf = 138412546;
  v44 = v13;
  v45 = 2112;
  v46 = v11;
  _os_log_debug_impl(&dword_20B7F7000, v40, OS_LOG_TYPE_DEBUG, "expandTokenSequence: %@ %@ is blocklisted.", buf, 0x16u);
  if (v13)
LABEL_58:
    CFRelease(v13);
LABEL_59:
  if (v11)
    CFRelease(v11);
LABEL_61:
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v42 = *(_QWORD *)(v41 + 24) + 1;
  *(_QWORD *)(v41 + 24) = v42;
  if (v42 > 0x20
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) > (unint64_t)*(unsigned __int16 *)(a1 + 112))
  {
    *a6 = 1;
  }
}

void sub_20B989518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  sub_20B87E150((const void **)va, 0);
  sub_20B87E150((const void **)va1, 0);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B98956C(const __CFString *result)
{
  const __CFString *v1;
  unsigned __int8 v2;

  if (result)
  {
    v1 = result;
    result = (const __CFString *)CFStringGetLength(result);
    if (result)
    {
      if (CFStringGetCharacterAtIndex(v1, (CFIndex)&result[-1].length + 7) == 12387)
      {
        return 0;
      }
      else
      {
        v2 = atomic_load((unsigned __int8 *)&qword_25472BED8);
        if ((v2 & 1) == 0)
        {
          if (__cxa_guard_acquire(&qword_25472BED8))
          {
            qword_25472BED0 = (uint64_t)CFSetCreate(0, (const void **)off_254729528, 3, MEMORY[0x24BDBD6B8]);
            __cxa_guard_release(&qword_25472BED8);
          }
        }
        return (const __CFString *)(CFSetContainsValue((CFSetRef)qword_25472BED0, v1) == 0);
      }
    }
  }
  return result;
}

void sub_20B989620(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472BED8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B989638(int64x2_t *a1, uint64_t a2, double a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  char *v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;

  v6 = a1[1].u64[0];
  v7 = a1->u64[1];
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - a1->i64[0]) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20B80CDD8();
    v11 = v6 - a1->i64[0];
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v27 = a1 + 1;
    if (v13)
    {
      if (v13 >> 59)
        sub_20B800BC0();
      v14 = (char *)operator new(32 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[32 * v10];
    v24 = v14;
    v25.i64[0] = (uint64_t)v15;
    v25.i64[1] = (uint64_t)v15;
    v26 = &v14[32 * v13];
    *(double *)v15 = a3;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 1) = 0;
    sub_20B873D0C((_QWORD *)v15 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v16 = v25.i64[0];
    v9 = v25.i64[1] + 32;
    v25.i64[1] += 32;
    v18 = a1->i64[0];
    v17 = a1->u64[1];
    if (v17 == a1->i64[0])
    {
      v22 = vdupq_n_s64(v17);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v16 + v19;
        v21 = v17 + v19;
        *(_QWORD *)(v20 - 32) = *(_QWORD *)(v17 + v19 - 32);
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)(v20 - 8) = 0;
        *(_QWORD *)(v20 - 24) = 0;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)(v17 + v19 - 24);
        *(_QWORD *)(v20 - 8) = *(_QWORD *)(v17 + v19 - 8);
        *(_QWORD *)(v21 - 24) = 0;
        *(_QWORD *)(v21 - 16) = 0;
        *(_QWORD *)(v21 - 8) = 0;
        v19 -= 32;
      }
      while (v17 + v19 != v18);
      v22 = *a1;
      v9 = v25.i64[1];
      v16 += v19;
    }
    a1->i64[0] = v16;
    a1->i64[1] = v9;
    v25 = v22;
    v23 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v26;
    v26 = v23;
    v24 = (char *)v22.i64[0];
    result = sub_20B98B910((uint64_t)&v24);
  }
  else
  {
    *(double *)v7 = a3;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    result = (uint64_t)sub_20B873D0C((_QWORD *)(v7 + 8), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v9 = v7 + 32;
    a1->i64[1] = v7 + 32;
  }
  a1->i64[1] = v9;
  return result;
}

void sub_20B9897DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B98B910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B9897FC(uint64_t a1, uint64_t *a2, const __CFString *a3, const __CFString *a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8, double a9, unint64_t a10, uint64_t a11, int a12, const __CFString *a13, unsigned int a14, _QWORD *a15)
{
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __CFString *Mutable;
  uint64_t v48;
  unint64_t v49;
  const __CFString *v50;
  __CFString *v51;
  __int16 Length;
  __int16 v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  int64_t v66;
  CFMutableStringRef v67;
  CFIndex v68;
  CFIndex v69;
  CFIndex v70;
  _BOOL4 v71;
  NSObject *v72;
  NSObject *v73;
  const __CFString *v74;
  const __CFString *v75;
  CFMutableStringRef MutableCopy;
  CFMutableStringRef v77;
  unsigned __int16 *v78;
  __CFString *v79;
  CFIndex v80;
  CFIndex v81;
  int v82;
  BOOL v83;
  int v84;
  int **v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  const __CFString *str;
  uint64_t v95;
  const __CFString *cf;
  __CFString *theString;
  _QWORD *v98;
  _QWORD *v100;
  __CFString *v101;
  unsigned __int16 *v102;
  CFIndex v103[3];
  void *__p;
  char *v105;
  char *v106;
  _QWORD v107[2];
  __CFString *v108;
  CFIndex v109;
  CFIndex v110;
  CFMutableStringRef v111;
  CFMutableStringRef v112;
  const __CFString *v113;
  _QWORD v114[3];
  _QWORD *v115;
  uint8_t buf[40];
  uint64_t v117;
  CFRange v118;
  CFRange v119;

  v117 = *MEMORY[0x24BDAC8D0];
  v23 = *(unsigned __int8 *)sub_20B896F94();
  if (a14 & 0x2000000 | v23)
    v24 = 10000;
  else
    v24 = 0;
  v98 = a8;
  if (*(_DWORD *)(a8[1] - 4) == 2)
    return;
  str = a3;
  v95 = a7;
  v93 = a6;
  v90 = v23;
  v91 = v24;
  v92 = a5;
  v25 = a10;
  __p = 0;
  v105 = 0;
  v106 = 0;
  v26 = *a2;
  v27 = -a11 - 0x3333333333333333 * ((a2[1] - *a2) >> 3);
  if (v27 <= a10)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = v26 + 40 * v25;
      *(_OWORD *)buf = *(_OWORD *)(v31 + 4);
      *(_OWORD *)&buf[16] = *(_OWORD *)(v31 + 20);
      buf[32] = *(_BYTE *)(v31 + 36);
      v32 = *(_BYTE *)(v31 + 39);
      v33 = *(_BYTE *)(v31 + 37) | 1;
      if (v30 >= (_QWORD *)v106)
      {
        v36 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v30 - (_BYTE *)__p) >> 3);
        v37 = v36 + 1;
        if (v36 + 1 > 0x666666666666666)
          sub_20B8821D4();
        if (0x999999999999999ALL * ((v106 - (_BYTE *)__p) >> 3) > v37)
          v37 = 0x999999999999999ALL * ((v106 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v106 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v38 = 0x666666666666666;
        else
          v38 = v37;
        if (v38)
          v39 = (char *)sub_20B882310((uint64_t)&v106, v38);
        else
          v39 = 0;
        v40 = &v39[40 * v36];
        *(_DWORD *)v40 = 0;
        *(_OWORD *)(v40 + 4) = *(_OWORD *)buf;
        *(_OWORD *)(v40 + 20) = *(_OWORD *)&buf[16];
        v40[36] = buf[32];
        v40[37] = v33;
        v40[38] = 2;
        v40[39] = v32;
        v42 = (char *)__p;
        v41 = v105;
        v43 = v40;
        if (v105 != __p)
        {
          do
          {
            v44 = *(_OWORD *)(v41 - 40);
            v45 = *(_OWORD *)(v41 - 24);
            *((_QWORD *)v43 - 1) = *((_QWORD *)v41 - 1);
            *(_OWORD *)(v43 - 24) = v45;
            *(_OWORD *)(v43 - 40) = v44;
            v43 -= 40;
            v41 -= 40;
          }
          while (v41 != v42);
          v41 = v42;
        }
        v30 = v40 + 40;
        __p = v43;
        v105 = v40 + 40;
        v106 = &v39[40 * v38];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_DWORD *)v30 = 0;
        v34 = *(_OWORD *)buf;
        v35 = *(_OWORD *)&buf[16];
        *((_BYTE *)v30 + 36) = buf[32];
        *(_OWORD *)((char *)v30 + 20) = v35;
        *(_OWORD *)((char *)v30 + 4) = v34;
        *((_BYTE *)v30 + 37) = v33;
        *((_BYTE *)v30 + 38) = 2;
        *((_BYTE *)v30 + 39) = v32;
        v30 += 5;
      }
      v105 = (char *)v30;
      v26 = *a2;
      v46 = *a2 + 40 * v25;
      v28 += *(_WORD *)(v46 + 28);
      v29 += *(_WORD *)(v46 + 24);
      ++v25;
    }
    while (v25 != v27);
  }
  Mutable = CFStringCreateMutable(0, 0);
  v103[2] = (CFIndex)Mutable;
  v48 = a1;
  theString = CFStringCreateMutable(0, 0);
  v103[1] = (CFIndex)theString;
  v49 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) - a11;
  cf = Mutable;
  if (v49 < (uint64_t)(v98[1] - *v98) >> 2)
  {
    while (1)
    {
      *(_QWORD *)buf = 0;
      v108 = 0;
      v50 = (const __CFString *)sub_20BA2F424();
      *(_QWORD *)buf = v50;
      v51 = sub_20B96DFA4(*(_QWORD *)(v48 + 16), v50);
      v108 = v51;
      if (sub_20B8D9FB4(v50))
        break;
      Length = CFStringGetLength(v50);
      if (v51)
        v53 = CFStringGetLength(v51);
      else
        v53 = 0;
      CFStringAppend(Mutable, v50);
      if (v51)
        CFStringAppend(theString, v51);
      v54 = v105;
      if (v105 >= v106)
      {
        v56 = 0xCCCCCCCCCCCCCCCDLL * ((v105 - (_BYTE *)__p) >> 3);
        v57 = v56 + 1;
        if (v56 + 1 > 0x666666666666666)
          sub_20B8821D4();
        if (0x999999999999999ALL * ((v106 - (_BYTE *)__p) >> 3) > v57)
          v57 = 0x999999999999999ALL * ((v106 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v106 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v58 = 0x666666666666666;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)sub_20B882310((uint64_t)&v106, v58);
        else
          v59 = 0;
        v60 = &v59[8 * ((v105 - (_BYTE *)__p) >> 3)];
        *((_QWORD *)v60 + 1) = 0;
        *((_QWORD *)v60 + 2) = 0;
        *(_QWORD *)v60 = 0;
        *((_WORD *)v60 + 12) = Length;
        *((_WORD *)v60 + 13) = 0;
        *((_WORD *)v60 + 14) = v53;
        *(_DWORD *)(v60 + 30) = 0;
        *(_DWORD *)(v60 + 33) = 0;
        *(_WORD *)(v60 + 37) = 513;
        v60[39] = 0;
        v62 = (char *)__p;
        v61 = v105;
        v63 = &v59[40 * v56];
        if (v105 != __p)
        {
          do
          {
            v64 = *(_OWORD *)(v61 - 40);
            v65 = *(_OWORD *)(v61 - 24);
            *((_QWORD *)v63 - 1) = *((_QWORD *)v61 - 1);
            *(_OWORD *)(v63 - 24) = v65;
            *(_OWORD *)(v63 - 40) = v64;
            v63 -= 40;
            v61 -= 40;
          }
          while (v61 != v62);
          v61 = v62;
        }
        v55 = v60 + 40;
        __p = v63;
        v105 = v60 + 40;
        v106 = &v59[40 * v58];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *(_QWORD *)v105 = 0;
        v54[1] = 0;
        v54[2] = 0;
        *((_WORD *)v54 + 12) = Length;
        *((_WORD *)v54 + 13) = 0;
        *((_WORD *)v54 + 14) = v53;
        *(_DWORD *)((char *)v54 + 30) = 0;
        *(_DWORD *)((char *)v54 + 33) = 0;
        *(_WORD *)((char *)v54 + 37) = 513;
        v55 = (char *)(v54 + 5);
        *((_BYTE *)v54 + 39) = 0;
      }
      v105 = v55;
      if (v51)
        CFRelease(v51);
      v48 = a1;
      if (v50)
        CFRelease(v50);
      if (++v49 >= (uint64_t)(v98[1] - *v98) >> 2)
        goto LABEL_54;
    }
    if (v51)
      CFRelease(v51);
    if (v50)
      CFRelease(v50);
    goto LABEL_106;
  }
LABEL_54:
  v66 = sub_20B87C4D0(v95, a14);
  if (v66 < 1)
    goto LABEL_66;
  v112 = 0;
  v113 = 0;
  sub_20B8D0624(a13, (CFIndex *)&v113, &v111);
  sub_20B8D0624(theString, (CFIndex *)&v112, &v110);
  v67 = v111;
  v68 = (CFIndex)v113;
  if (!v111)
    v68 = 0;
  v108 = v111;
  v109 = v68;
  v69 = v110;
  v70 = (CFIndex)v112;
  if (!v110)
    v70 = 0;
  v107[0] = v110;
  v107[1] = v70;
  v71 = sub_20B87C6E4((uint64_t)&v108, v66, (uint64_t)v107, a14, 0);
  v72 = sub_20B9A7C5C(0xAu);
  if (!os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG)
    || (v73 = sub_20B9A7C5C(0xAu), !os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG)))
  {
    if (!v69)
      goto LABEL_63;
    goto LABEL_62;
  }
  *(_DWORD *)buf = 138413058;
  *(_QWORD *)&buf[4] = a13;
  *(_WORD *)&buf[12] = 2112;
  *(_QWORD *)&buf[14] = theString;
  *(_WORD *)&buf[22] = 1024;
  *(_DWORD *)&buf[24] = v71;
  *(_WORD *)&buf[28] = 2048;
  *(_QWORD *)&buf[30] = v66;
  _os_log_debug_impl(&dword_20B7F7000, v73, OS_LOG_TYPE_DEBUG, "makeCandidateFromExpandedSequence: matching inputStr:%@ predictedReading:%@ matchResult:%d incompleteLength:%ld", buf, 0x26u);
  if (v69)
LABEL_62:
    MEMORY[0x20BD39C80](v69, 0x1000C80BDFB0063);
LABEL_63:
  if (v67)
    MEMORY[0x20BD39C80](v67, 0x1000C80BDFB0063);
  if (!v71)
    goto LABEL_106;
LABEL_66:
  v118.length = v29;
  v118.location = 0;
  v74 = CFStringCreateWithSubstring(0, str, v118);
  v107[0] = v74;
  v119.length = v28;
  v119.location = 0;
  v75 = CFStringCreateWithSubstring(0, a4, v119);
  v113 = v75;
  MutableCopy = CFStringCreateMutableCopy(0, 0, v74);
  v112 = MutableCopy;
  v77 = CFStringCreateMutableCopy(0, 0, v75);
  v111 = v77;
  CFStringAppend(MutableCopy, cf);
  CFStringAppend(v77, theString);
  v110 = 0;
  v103[0] = 0;
  sub_20B8D0624(MutableCopy, &v110, &v102);
  sub_20B8D0624(v77, v103, &v101);
  v79 = v101;
  v78 = v102;
  v80 = v103[0];
  v81 = v110;
  if (v110 == 1)
  {
    v82 = *v102;
    v83 = (v82 - 12353) < 0x56 || v82 == 12316 || v82 == 12540;
    if (v90 != 0 && v83)
      v84 = 10000;
    else
      v84 = 0;
  }
  else
  {
    v84 = 0;
  }
  v86 = *(int ***)(v48 + 40);
  if (!v102)
    v81 = 0;
  *(_QWORD *)buf = v102;
  *(_QWORD *)&buf[8] = v81;
  if (!v101)
    v80 = 0;
  v108 = v101;
  v109 = v80;
  v100 = (_QWORD *)sub_20B9299D4(v86, v93, (uint64_t)buf, (uint64_t)&v108, v91 + v92 + v84, 0, (uint64_t)&__p, 0, a9, a12, 2, 0);
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v100 + 528))(v100, 10, "[makeCandidateFromExpandedSequence]", 1);
  v114[0] = &unk_24C459188;
  v115 = v114;
  sub_20B8FDA94(a15, &v100, 1, 0, (uint64_t)v114);
  v87 = v115;
  if (v115 == v114)
  {
    v88 = 4;
    v87 = v114;
    goto LABEL_91;
  }
  if (v115)
  {
    v88 = 5;
LABEL_91:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  v89 = v100;
  v100 = 0;
  if (v89)
    (*(void (**)(_QWORD *))(*v89 + 16))(v89);
  if (v79)
    MEMORY[0x20BD39C80](v79, 0x1000C80BDFB0063);
  if (v78)
    MEMORY[0x20BD39C80](v78, 0x1000C80BDFB0063);
  if (v77)
    CFRelease(v77);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v75)
    CFRelease(v75);
  if (v74)
    CFRelease(v74);
LABEL_106:
  if (theString)
    CFRelease(theString);
  if (cf)
    CFRelease(cf);
  if (__p)
  {
    v105 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B98A134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B98A338(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int16 v33;
  __int16 v34;
  char *v35;
  _WORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int16 v44;
  const UniChar *v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  double v51;
  int v52;
  __int16 v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int16 v64;
  NSObject *v65;
  const UniChar *v66;
  CFIndex v67;
  CFIndex v68;
  const UniChar *v69;
  CFIndex v70;
  CFIndex v71;
  CFStringRef v72;
  __CFString *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int16 v86;
  const __CFString *v87;
  const __CFString *v88;
  double *p_info;
  uint64_t v90;
  uint64_t v91;
  const __CFString *v92;
  const void *v93;
  uint64_t v94;
  char v95;
  double v96;
  unsigned int v97;
  uint64_t *v98;
  const __CFString *v99;
  const __CFString *v100;
  int v101;
  const __CFString *v102;
  __int128 *v103;
  uint64_t v104;
  NSObject *v105;
  _BOOL4 v106;
  uint64_t v107;
  unint64_t v108;
  NSObject *v109;
  uint64_t v110;
  _QWORD *v111;
  const __CFAllocator *v112;
  const __CFAllocator *v113;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *__src;
  _BYTE *v119;
  uint64_t *v120;
  void *__p;
  char *v123;
  char *v124;
  CFStringRef v125;
  const __CFString *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD v130[2];
  const __CFString *v131;
  __int128 v132;
  char *v133;
  __int128 *v134;
  uint8_t buf[24];
  uint64_t v136;

  v7 = (_QWORD *)a7;
  v136 = *MEMORY[0x24BDAC8D0];
  v130[0] = a3;
  v130[1] = a4;
  v128 = a5;
  v129 = a6;
  *(_QWORD *)a7 = &unk_24C460D28;
  *(_OWORD *)(a7 + 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_DWORD *)(a7 + 40) = 1065353216;
  *(_QWORD *)(a7 + 48) = 0;
  *(_QWORD *)(a7 + 56) = 0;
  *(_QWORD *)(a7 + 64) = 0;
  if (!a2)
    return;
  if (!*(_QWORD *)(a1 + 32))
    return;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2) == 1)
    return;
  v119 = sub_20B896F94();
  if (!*v119 && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3) & 2) == 0)
    return;
  (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 528))(a2, 10, "[MJNP::expandPhrasesWithLanguageModel] Handling n-gram expansion from", 1);
  v115 = v128;
  v9 = v129;
  if ((**(_BYTE **)(a1 + 8) & 0x20) != 0 && v129)
  {
    do
    {
      v10 = *(unsigned __int16 *)(v128 - 2 + 2 * v9);
      v11 = v10 - 97;
      v12 = (unsigned __int16)(v10 + 191);
      if (v11 >= 0x1A && v12 > 0x19)
        break;
      --v9;
    }
    while (v9);
  }
  if (!v128)
    v9 = 0;
  v116 = v9;
  v120 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  v111 = v7 + 6;
  v14 = 0;
  v113 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v112 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  while (0xCCCCCCCCCCCCCCCDLL * ((v120[1] - *v120) >> 3) > v14)
  {
    if (!v14 && (**(_DWORD **)(a1 + 8) & 0x2000000) != 0)
      goto LABEL_129;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
    v117 = v16;
    __src = (char *)v15;
    v133 = 0;
    v132 = 0uLL;
    v18 = *v120;
    v17 = v120[1];
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v18) >> 3);
    if (v20 == v14)
    {
      LOWORD(v21) = 0;
      goto LABEL_43;
    }
    v22 = (_QWORD *)v19;
    v21 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v20 - v14;
    do
    {
      v27 = sub_20B91708C(a2, v25);
      v29 = v28;
      v30 = sub_20B916C5C(a2, v25);
      v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v27, v29, v30, v31);
      v24 |= (*(_BYTE *)(*v22 + 40 * v25 + 37) & 2) >> 1;
      if ((v24 & 1) == 0 && (v32 & 4) == 0)
      {
        v7 = (_QWORD *)a7;
        v65 = sub_20B9A7C5C(0xAu);
        if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          goto LABEL_79;
        v66 = (const UniChar *)sub_20B91708C(a2, v25);
        v68 = v67;
        v69 = (const UniChar *)sub_20B916C5C(a2, v25);
        v71 = v70;
        v72 = CFStringCreateWithCharactersNoCopy(v113, v66, v68, v112);
        v125 = v72;
        v73 = (__CFString *)CFStringCreateWithCharactersNoCopy(v113, v69, v71, v112);
        __p = v73;
        v74 = sub_20B9A7C5C(0xAu);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v72;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v73;
          _os_log_debug_impl(&dword_20B7F7000, v74, OS_LOG_TYPE_DEBUG, "[MJNP::getAndCheckContextSurfaceAndReadingFromCandidate] %@ %@ is an invalid context word.", buf, 0x16u);
          if (!v73)
          {
LABEL_77:
            if (v72)
              CFRelease(v72);
LABEL_79:
            if (!v23)
              goto LABEL_80;
LABEL_43:
            if (v116 >= (unsigned __int16)v21)
              v45 = (const UniChar *)(v115 + 2 * (unsigned __int16)v21);
            else
              v45 = 0;
            v46 = *v119;
            memset(buf, 0, sizeof(buf));
            sub_20B988CD8(a1, __src, (unsigned __int16 *)v132, -(uint64_t)v14 - 0x3333333333333333 * ((v120[1] - *v120) >> 3), (uint64_t)buf);
            v47 = v46 == 0;
            v48 = 2;
            if (v47)
              v49 = v14 != 0;
            else
              v49 = 2;
            v125 = 0;
            v126 = 0;
            v127 = 0;
            if (*(_DWORD *)(*(_QWORD *)&buf[8] - 4) >= 0x1F4u)
            {
              v50 = **(_DWORD **)(a1 + 8);
              if (!sub_20B8D9E98(*(_WORD *)&__src[2 * v117 - 2]))
              {
                v51 = sub_20BA30348(*(_QWORD *)(a1 + 32), *(_DWORD **)buf, (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
                v52 = (__int16)(v116 - v21);
                sub_20B988E10(a1, (uint64_t *)buf, 0, 3, v49, v45, v52, v50, v51, (uint64_t)&v125);
                v53 = v129 - v116;
                __p = 0;
                v123 = 0;
                v124 = 0;
                sub_20B87D570(&__p, (v52 & ~(v52 >> 31)) + (__int16)(v129 - v116));
                v54 = v123;
                if (v52 >= 1 && v45)
                {
                  v55 = 0;
                  do
                  {
                    if (v54 >= v124)
                    {
                      v57 = (char *)__p;
                      v58 = v54 - (_BYTE *)__p;
                      if (v54 - (_BYTE *)__p <= -3)
                        sub_20B80CDD8();
                      v59 = v58 >> 1;
                      if (v124 - (_BYTE *)__p <= (unint64_t)((v58 >> 1) + 1))
                        v60 = v59 + 1;
                      else
                        v60 = v124 - (_BYTE *)__p;
                      if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                        v61 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v61 = v60;
                      if (v61)
                      {
                        v62 = (char *)sub_20B80FD48((uint64_t)&v124, v61);
                        v57 = (char *)__p;
                        v54 = v123;
                      }
                      else
                      {
                        v62 = 0;
                      }
                      v63 = &v62[2 * v59];
                      *(_WORD *)v63 = v45[v55];
                      v56 = v63 + 2;
                      while (v54 != v57)
                      {
                        v64 = *((_WORD *)v54 - 1);
                        v54 -= 2;
                        *((_WORD *)v63 - 1) = v64;
                        v63 -= 2;
                      }
                      __p = v63;
                      v123 = v56;
                      v124 = &v62[2 * v61];
                      if (v57)
                        operator delete(v57);
                    }
                    else
                    {
                      *(_WORD *)v54 = v45[v55];
                      v56 = v54 + 2;
                    }
                    v123 = v56;
                    ++v55;
                    v54 = v56;
                  }
                  while (v55 != (unsigned __int16)v52);
                }
                else
                {
                  v56 = v123;
                }
                v75 = v53;
                if ((int)v75 < 1)
                {
                  v78 = v56;
                }
                else
                {
                  v76 = 0;
                  v77 = v128 + 2 * v129 - 2 * v53;
                  do
                  {
                    if (v56 >= v124)
                    {
                      v79 = (char *)__p;
                      v80 = v56 - (_BYTE *)__p;
                      if (v56 - (_BYTE *)__p <= -3)
                        sub_20B80CDD8();
                      v81 = v80 >> 1;
                      if (v124 - (_BYTE *)__p <= (unint64_t)((v80 >> 1) + 1))
                        v82 = v81 + 1;
                      else
                        v82 = v124 - (_BYTE *)__p;
                      if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                        v83 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v83 = v82;
                      if (v83)
                      {
                        v84 = (char *)sub_20B80FD48((uint64_t)&v124, v83);
                        v79 = (char *)__p;
                        v56 = v123;
                      }
                      else
                      {
                        v84 = 0;
                      }
                      v85 = &v84[2 * v81];
                      *(_WORD *)v85 = *(_WORD *)(v77 + 2 * v76);
                      v78 = v85 + 2;
                      while (v56 != v79)
                      {
                        v86 = *((_WORD *)v56 - 1);
                        v56 -= 2;
                        *((_WORD *)v85 - 1) = v86;
                        v85 -= 2;
                      }
                      __p = v85;
                      v123 = v78;
                      v124 = &v84[2 * v83];
                      if (v79)
                        operator delete(v79);
                    }
                    else
                    {
                      *(_WORD *)v56 = *(_WORD *)(v77 + 2 * v76);
                      v78 = v56 + 2;
                    }
                    v123 = v78;
                    ++v76;
                    v56 = v78;
                  }
                  while (v76 != v75);
                }
                v87 = CFStringCreateWithCharacters(0, (const UniChar *)__p, (v78 - (_BYTE *)__p) >> 1);
                v88 = v126;
                v7 = (_QWORD *)a7;
                if (v125 != v126)
                {
                  p_info = (double *)&v125->info;
                  while (1)
                  {
                    if (!*v119)
                    {
LABEL_117:
                      v96 = *(p_info - 1);
                      v97 = **(_DWORD **)(a1 + 8);
                      v98 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
                      v99 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
                      v100 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
                      v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
                      sub_20B9897FC(a1, v98, v99, v100, v101, (uint64_t)v130, (uint64_t)&v128, p_info, v96, 0, v14, 88, v87, v97, (_QWORD *)a7);
                      goto LABEL_118;
                    }
                    if (*(_QWORD *)p_info != *((_QWORD *)p_info + 1))
                      break;
LABEL_118:
                    v102 = (const __CFString *)(p_info + 3);
                    p_info += 4;
                    if (v102 == v88)
                      goto LABEL_119;
                  }
                  v91 = *v120;
                  v90 = v120[1];
                  v131 = 0;
                  v92 = (const __CFString *)sub_20BA2F424();
                  v93 = *(const void **)p_info;
                  v94 = *((_QWORD *)p_info + 1);
                  v131 = v92;
                  if (0xCCCCCCCCCCCCCCCDLL * ((v90 - v91) >> 3) + 1 == (v94 - (uint64_t)v93) >> 2
                    && *(_QWORD *)buf != *(_QWORD *)&buf[8]
                    && !memcmp(v93, *(const void **)buf, (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2)
                    && (sub_20B8DA278(v92) & 1) != 0)
                  {
                    v95 = 0;
                    if (!v92)
                    {
LABEL_116:
                      if ((v95 & 1) != 0)
                        goto LABEL_117;
                      goto LABEL_118;
                    }
                  }
                  else
                  {
                    v95 = 1;
                    if (!v92)
                      goto LABEL_116;
                  }
                  CFRelease(v92);
                  goto LABEL_116;
                }
LABEL_119:
                if (v87)
                  CFRelease(v87);
                if (__p)
                {
                  v123 = (char *)__p;
                  operator delete(__p);
                }
                v48 = 0;
              }
            }
            __p = &v125;
            sub_20B98B970((void ***)&__p);
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              operator delete(*(void **)buf);
            }
            goto LABEL_126;
          }
        }
        else if (!v73)
        {
          goto LABEL_77;
        }
        CFRelease(v73);
        goto LABEL_77;
      }
      v33 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 568))(a2, v25);
      v34 = v33;
      v35 = (char *)*((_QWORD *)&v132 + 1);
      if (*((_QWORD *)&v132 + 1) >= (unint64_t)v133)
      {
        v37 = (char *)v132;
        v38 = *((_QWORD *)&v132 + 1) - v132;
        if ((uint64_t)(*((_QWORD *)&v132 + 1) - v132) <= -3)
          sub_20B80CDD8();
        v39 = v38 >> 1;
        if ((unint64_t)&v133[-v132] <= (v38 >> 1) + 1)
          v40 = v39 + 1;
        else
          v40 = (uint64_t)&v133[-v132];
        if ((unint64_t)&v133[-v132] >= 0x7FFFFFFFFFFFFFFELL)
          v41 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
        {
          v42 = (char *)sub_20B80FD48((uint64_t)&v133, v41);
          v35 = (char *)*((_QWORD *)&v132 + 1);
          v37 = (char *)v132;
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[2 * v39];
        *(_WORD *)v43 = v34;
        v36 = v43 + 2;
        while (v35 != v37)
        {
          v44 = *((_WORD *)v35 - 1);
          v35 -= 2;
          *((_WORD *)v43 - 1) = v44;
          v43 -= 2;
        }
        *(_QWORD *)&v132 = v43;
        *((_QWORD *)&v132 + 1) = v36;
        v133 = &v42[2 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        **((_WORD **)&v132 + 1) = v33;
        v36 = v35 + 2;
      }
      *((_QWORD *)&v132 + 1) = v36;
      v21 += (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 320))(a2, v25++);
      v23 = v25 >= v26;
    }
    while (v25 != v26);
    v7 = (_QWORD *)a7;
    if ((v24 & 1) == 0)
      goto LABEL_43;
LABEL_80:
    v48 = 4;
LABEL_126:
    if ((_QWORD)v132)
    {
      *((_QWORD *)&v132 + 1) = v132;
      operator delete((void *)v132);
    }
    if ((v48 | 4) == 4)
    {
LABEL_129:
      if (++v14 == 3)
        break;
      continue;
    }
    break;
  }
  *(_QWORD *)&v132 = &unk_24C469588;
  *((_QWORD *)&v132 + 1) = sub_20B8FF3A4;
  v134 = &v132;
  sub_20B8FDD20(v7, (uint64_t)&v132);
  v103 = v134;
  if (v134 == &v132)
  {
    v104 = 4;
    v103 = &v132;
LABEL_137:
    (*(void (**)(void))(*(_QWORD *)v103 + 8 * v104))();
  }
  else if (v134)
  {
    v104 = 5;
    goto LABEL_137;
  }
  v105 = sub_20B9A7C5C(0xBu);
  v106 = os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG);
  v107 = v7[7] - v7[6];
  if (v106)
  {
    if ((unint64_t)v107 >= 0x19)
    {
      v108 = 3;
      do
      {
        v109 = sub_20B9A7C5C(0xBu);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
        {
          v110 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v111 + 8 * v108) + 24))(*(_QWORD *)(*v111 + 8 * v108));
          LODWORD(v132) = 138412290;
          *(_QWORD *)((char *)&v132 + 4) = v110;
          _os_log_debug_impl(&dword_20B7F7000, v109, OS_LOG_TYPE_DEBUG, "Pruning %@ (n-gram expansion)", (uint8_t *)&v132, 0xCu);
        }
        ++v108;
        v107 = v7[7] - v7[6];
      }
      while (v108 < v107 >> 3);
      goto LABEL_144;
    }
  }
  else
  {
LABEL_144:
    if ((unint64_t)v107 >= 0x21)
      sub_20B8FEB6C(v7, 3uLL);
  }
}

void sub_20B98AE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B98AF50(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const UniChar *a5@<X4>, CFIndex a6@<X5>, uint64_t a7@<X8>)
{
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const UniChar *v23;
  CFIndex v24;
  unint64_t v25;
  uint64_t v26;
  const UniChar *v27;
  CFIndex v28;
  int v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned __int16 *v38;
  unsigned __int16 v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int16 v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  CFIndex v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const UniChar *v61;
  const UniChar *v62;
  CFIndex v63;
  double v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  const __CFString *v71;
  const __CFString *v72;
  CFIndex Length;
  BOOL v74;
  unsigned __int8 v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  NSObject *v84;
  __CFString *v85;
  __CFString *v86;
  NSObject *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *__p;
  char *v102;
  char *v103;
  unsigned __int16 *v104;
  unsigned __int16 *v105;
  unsigned __int16 *v106;
  const UniChar *v107;
  CFIndex v108;
  _QWORD v109[2];
  _BYTE buf[22];
  __int16 v111;
  _BYTE *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v109[0] = a3;
  v109[1] = a4;
  v107 = a5;
  v108 = a6;
  *(_QWORD *)a7 = &unk_24C460D28;
  *(_OWORD *)(a7 + 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_DWORD *)(a7 + 40) = 1065353216;
  *(_QWORD *)(a7 + 56) = 0;
  *(_QWORD *)(a7 + 64) = 0;
  *(_QWORD *)(a7 + 48) = 0;
  if (!*(_QWORD *)(a1 + 32) || a2[2] == a2[1] || sub_20B9C337C(a2))
    return;
  v91 = (_QWORD *)a7;
  v11 = (unsigned __int16 *)sub_20B896F94();
  v12 = 4;
  if (!a4)
    v12 = 8;
  v89 = v12;
  v13 = v11[164];
  v104 = 0;
  v105 = 0;
  v106 = 0;
  __p = 0;
  v102 = 0;
  v103 = 0;
  v15 = a2[1];
  v14 = (__int128 *)a2[2];
  v16 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v14 - v15) >> 3);
  v90 = v13;
  v17 = (v16 - (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + v13)) & ~((uint64_t)(v16
                                                                             - (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32)
                                                                              + v13)) >> 63);
  if (v16 > v17)
  {
    v18 = 0;
    v19 = 0;
    v88 = (v16 - (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + v13)) & ~((uint64_t)(v16
                                                                               - (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32)
                                                                                + v13)) >> 63);
    v20 = v88;
    while (1)
    {
      v21 = *(_QWORD *)(a2[10] + 8 * v20);
      v22 = a2[4];
      if (v21 >= (a2[5] - v22) >> 1)
      {
        v23 = 0;
        v24 = 0;
      }
      else
      {
        v23 = (const UniChar *)(v22 + 2 * v21);
        v24 = v22 ? *(unsigned __int16 *)(v15 + 40 * v20 + 24) : 0;
      }
      v25 = *(_QWORD *)(a2[13] + 8 * v20);
      v26 = a2[7];
      if (v25 >= (a2[8] - v26) >> 1)
      {
        v27 = 0;
        v28 = 0;
      }
      else
      {
        v27 = (const UniChar *)(v26 + 2 * v25);
        v28 = v26 ? *(unsigned __int16 *)(v15 + 40 * v20 + 28) : 0;
      }
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + v20 > 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v14 - v15) >> 3))
      {
        v29 = (*(uint64_t (**)(_QWORD, const UniChar *, CFIndex, const UniChar *, CFIndex))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v27, v28, v23, v24);
        if ((v29 & 4) == 0)
          break;
      }
      v30 = v105;
      if (v105 >= v106)
      {
        v32 = v104;
        v33 = (char *)v105 - (char *)v104;
        if ((char *)v105 - (char *)v104 <= -3)
          goto LABEL_121;
        v34 = v33 >> 1;
        if ((char *)v106 - (char *)v104 <= (unint64_t)((v33 >> 1) + 1))
          v35 = v34 + 1;
        else
          v35 = (char *)v106 - (char *)v104;
        if ((unint64_t)((char *)v106 - (char *)v104) >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
        {
          v37 = (char *)sub_20B80FD48((uint64_t)&v106, v36);
          v32 = v104;
          v30 = v105;
        }
        else
        {
          v37 = 0;
        }
        v38 = (unsigned __int16 *)&v37[2 * v34];
        *v38 = v24;
        v31 = v38 + 1;
        while (v30 != v32)
        {
          v39 = *--v30;
          *--v38 = v39;
        }
        v104 = v38;
        v105 = v31;
        v106 = (unsigned __int16 *)&v37[2 * v36];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v105 = v24;
        v31 = v30 + 1;
      }
      v105 = v31;
      v40 = v102;
      if (v102 >= v103)
      {
        v42 = (char *)__p;
        v43 = v102 - (_BYTE *)__p;
        if (v102 - (_BYTE *)__p < -2)
LABEL_121:
          sub_20B80CDD8();
        v44 = v43 >> 1;
        if (v103 - (_BYTE *)__p <= (unint64_t)((v43 >> 1) + 1))
          v45 = v44 + 1;
        else
          v45 = v103 - (_BYTE *)__p;
        if ((unint64_t)(v103 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v46 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_20B80FD48((uint64_t)&v103, v46);
          v42 = (char *)__p;
          v40 = v102;
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[2 * v44];
        *(_WORD *)v48 = v28;
        v41 = v48 + 2;
        while (v40 != v42)
        {
          v49 = *((_WORD *)v40 - 1);
          v40 -= 2;
          *((_WORD *)v48 - 1) = v49;
          v48 -= 2;
        }
        __p = v48;
        v102 = v41;
        v103 = &v47[2 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_WORD *)v102 = v28;
        v41 = v40 + 2;
      }
      v102 = v41;
      v19 += v24;
      v18 += v28;
      ++v20;
      v15 = a2[1];
      v14 = (__int128 *)a2[2];
      if (v20 >= 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v14 - v15) >> 3))
      {
        v51 = v104;
        v50 = v105;
        v17 = v88;
        goto LABEL_57;
      }
    }
    v84 = sub_20B9A7C5C(0xAu);
    if (!os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
      goto LABEL_108;
    v85 = (__CFString *)CFStringCreateWithCharacters(0, v27, v28);
    v98 = v85;
    v86 = (__CFString *)CFStringCreateWithCharacters(0, v23, v24);
    v95 = v86;
    v87 = sub_20B9A7C5C(0xAu);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v85;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v86;
      v111 = 1024;
      LODWORD(v112) = v29;
      _os_log_debug_impl(&dword_20B7F7000, v87, OS_LOG_TYPE_DEBUG, "getAndCheckContextSurfaceAndReadingFromHistory: %@ %@ (attr: %d) is an invalid context word.", buf, 0x1Cu);
      if (!v86)
      {
LABEL_117:
        if (v85)
          CFRelease(v85);
        goto LABEL_108;
      }
    }
    else if (!v86)
    {
      goto LABEL_117;
    }
    CFRelease(v86);
    goto LABEL_117;
  }
  v51 = 0;
  v50 = 0;
  v18 = 0;
  v19 = 0;
LABEL_57:
  v52 = *(_QWORD *)(a2[10] + 8 * v17);
  v53 = a2[4];
  v54 = a2[5] - v53;
  v55 = (char *)(v53 + 2 * v52);
  if (v52 >= v54 >> 1)
    v56 = 0;
  else
    v56 = v55;
  if (v56)
    v57 = v19;
  else
    v57 = 0;
  v58 = *(_QWORD *)(a2[13] + 8 * v17);
  v59 = a2[7];
  v60 = a2[8] - v59;
  v61 = (const UniChar *)(v59 + 2 * v58);
  if (v58 >= v60 >> 1)
    v62 = 0;
  else
    v62 = v61;
  if (v62)
    v63 = v18;
  else
    v63 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  sub_20B8F4258((__int128 *)(v15 + 40 * v17), v14, &v98);
  v95 = 0;
  v96 = 0;
  v97 = 0;
  sub_20B988CD8(a1, v56, v104, v50 - v51, (uint64_t)&v95);
  v64 = sub_20BA30348(*(_QWORD *)(a1 + 32), v95, (v96 - (_BYTE *)v95) >> 2);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  sub_20B988E10(a1, (uint64_t *)&v95, 0, 3, v90, v107, (__int16)v108, **(_DWORD **)(a1 + 8), v64, (uint64_t)&v92);
  v65 = CFStringCreateWithCharacters(0, v62, v63);
  v66 = CFStringCreateWithCharacters(0, (const UniChar *)v56, v57);
  v67 = CFStringCreateWithCharacters(0, v107, v108);
  v68 = v92;
  if (v93 != v92)
  {
    v69 = 0;
    v70 = 0;
    do
    {
      if (*(_QWORD *)(v68 + v69 + 8) != *(_QWORD *)(v68 + v69 + 16))
      {
        v71 = (const __CFString *)sub_20BA2F424();
        v72 = v71;
        if (v71)
        {
          Length = CFStringGetLength(v71);
          if (Length && CFStringGetCharacterAtIndex(v72, Length - 1) != 12387)
          {
            v75 = atomic_load((unsigned __int8 *)&qword_25472BED8);
            if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_25472BED8))
            {
              qword_25472BED0 = (uint64_t)CFSetCreate(0, (const void **)off_254729528, 3, MEMORY[0x24BDBD6B8]);
              __cxa_guard_release(&qword_25472BED8);
            }
            v74 = CFSetContainsValue((CFSetRef)qword_25472BED0, v72) == 0;
          }
          else
          {
            v74 = 0;
          }
          CFRelease(v72);
          if (v74)
            sub_20B9897FC(a1, (uint64_t *)&v98, v66, v65, 0, (uint64_t)v109, (uint64_t)&v107, (_QWORD *)(v92 + v69 + 8), *(double *)(v92 + v69), (v96 - (_BYTE *)v95) >> 2, 0, 66, v67, **(_DWORD **)(a1 + 8), v91);
        }
      }
      ++v70;
      v68 = v92;
      v69 += 32;
    }
    while (v70 < (v93 - v92) >> 5);
  }
  *(_QWORD *)buf = &unk_24C469588;
  *(_QWORD *)&buf[8] = sub_20B8FF3A4;
  v112 = buf;
  sub_20B8FDD20(v91, (uint64_t)buf);
  v76 = v112;
  if (v112 == buf)
  {
    v77 = 4;
    v76 = buf;
    goto LABEL_88;
  }
  if (v112)
  {
    v77 = 5;
LABEL_88:
    (*(void (**)(void))(*v76 + 8 * v77))();
  }
  v78 = v91[6];
  v79 = v91[7] - v78;
  v80 = 0;
  if (v89 >= v79 >> 3)
    v81 = v79 >> 3;
  else
    v81 = v89;
  if (v81)
  {
    do
    {
      if ((*(double (**)(_QWORD))(**(_QWORD **)(v78 + 8 * v80) + 392))(*(_QWORD *)(v78 + 8 * v80)) < -100.0)
        break;
      ++v80;
      v78 = v91[6];
      v82 = v91[7] - v78;
      v83 = v89 >= v82 >> 3 ? v82 >> 3 : v89;
    }
    while (v80 < v83);
  }
  sub_20B8FEB6C(v91, v80);
  if (v67)
    CFRelease(v67);
  if (v66)
    CFRelease(v66);
  if (v65)
    CFRelease(v65);
  *(_QWORD *)buf = &v92;
  sub_20B98B970((void ***)buf);
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
LABEL_108:
  if (__p)
  {
    v102 = (char *)__p;
    operator delete(__p);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
}

void sub_20B98B78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21,const void *a22,const void *a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;

  __cxa_guard_abort(&qword_25472BED8);
  sub_20B87E150(&a21, 0);
  sub_20B87E150(&a22, 0);
  sub_20B87E150(&a23, 0);
  *(_QWORD *)(v36 - 144) = &a24;
  sub_20B98B970((void ***)(v36 - 144));
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  v38 = *(void **)(v36 - 200);
  if (v38)
  {
    *(_QWORD *)(v36 - 192) = v38;
    operator delete(v38);
  }
  sub_20B881268(a20);
  _Unwind_Resume(a1);
}

void sub_20B98B8FC()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B98B910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B98B970(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B98B9E8(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (_QWORD *)operator new();
  v6[5] = 0;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v6 + 5;
  v6[6] = 0;
  v6[7] = 0x7FFFFFFFLL;
  v6[8] = a3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_DWORD *)(a1 + 92) = a2;
  return a1;
}

void sub_20B98BA7C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B98BAB8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 2;
  sub_20BA29958(a1[2]);
  std::mutex::~mutex((std::mutex *)(a1 + 3));
  sub_20B939B5C(v2, 0);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_20B98BB2C(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  __CFArray *Mutable;
  CFIndex v7;
  const __CFString *v8;
  const __CFString *ValueAtIndex;
  const __CFString *v10;
  CFIndex length;
  uint64_t v12;
  uint64_t v13;

  if (theArray && CFArrayGetCount(theArray))
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v5 = Count;
      if ((Count & 1) == 0)
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, MEMORY[0x24BDBD690]);
        if (v5 >= 1)
        {
          v7 = 0;
          v8 = (const __CFString *)*MEMORY[0x24BDBD430];
          do
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v7);
            if (ValueAtIndex != v8)
            {
              v10 = ValueAtIndex;
              if (CFStringGetLength(ValueAtIndex))
              {
                length = CFStringGetRangeOfComposedCharactersAtIndex(v10, 0).length;
                if (length < CFStringGetLength(v10))
                {
                  CFArrayAppendValue(Mutable, v10);
                  CFArrayAppendValue(Mutable, v10);
                }
              }
            }
            v7 += 2;
          }
          while (v7 < v5);
        }
        if (Mutable)
        {
          if (CFArrayGetCount(Mutable))
          {
            std::mutex::lock((std::mutex *)(a1 + 24));
            v12 = operator new();
            *(_QWORD *)v12 = &off_24C461808;
            *(_OWORD *)(v12 + 8) = 0u;
            *(_OWORD *)(v12 + 24) = 0u;
            *(_OWORD *)(v12 + 40) = 0u;
            *(_OWORD *)(v12 + 56) = 0u;
            *(_OWORD *)(v12 + 72) = 0u;
            *(_DWORD *)(v12 + 88) = 1065353216;
            *(_WORD *)(v12 + 96) = 0;
            *(_QWORD *)(v12 + 104) = 0;
            *(_DWORD *)(v12 + 112) = 0;
            *(_QWORD *)(v12 + 120) = 0;
            v13 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v12;
            if (v13)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
              v12 = *(_QWORD *)(a1 + 8);
            }
            sub_20B8F4AC4(v12, Mutable, *(unsigned __int8 *)(a1 + 88));
            CFRelease(Mutable);
            std::mutex::unlock((std::mutex *)(a1 + 24));
          }
          else
          {
            CFRelease(Mutable);
          }
        }
      }
    }
  }
  else
  {
    sub_20B98BD34((uint64_t *)a1);
  }
}

void sub_20B98BD20(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B98BD34(uint64_t *a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::mutex::unlock(v2);
}

void sub_20B98BD90(uint64_t *a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  std::mutex *v6;
  char v7;

  v6 = (std::mutex *)(a1 + 3);
  v7 = 0;
  if ((sub_20B98BE30((uint64_t)&v6) & 1) != 0)
  {
    v2 = a1[1];
    if (v2)
    {
      v3 = atomic_load((unsigned __int8 *)(v2 + 97));
      if ((v3 & 1) == 0)
      {
        v4 = atomic_load((unsigned __int8 *)(v2 + 96));
        if ((v4 & 1) != 0)
        {
          v5 = *a1;
          *a1 = a1[1];
          a1[1] = 0;
          if (v5)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        }
      }
    }
  }
  if (v7)
    std::mutex::unlock(v6);
}

void sub_20B98BE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B98BE30(uint64_t a1)
{
  std::mutex *v2;
  uint64_t result;

  v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      result = std::mutex::try_lock(v2);
      *(_BYTE *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return sub_20B98BE84();
}

void sub_20B98BE84(uint64_t *a1, const __CFString *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD v15[6];
  void *__p;
  _BYTE *v17;

  sub_20B98BD90(a1);
  if (*a1)
  {
    v9 = *a3;
    v8 = a3[1];
    if (v8 != *a3)
    {
      v10 = 0;
      v11 = MEMORY[0x24BDAC760];
      do
      {
        v12 = *(_QWORD *)(v9 + 8 * v10);
        if ((unint64_t)(v12 - 10) < 0xFFFFFFFFFFFFFFF7)
          break;
        if (a4 == -1 || v12 == a4)
        {
          sub_20B8D0790(a2, (UniChar **)&__p);
          v13 = (unsigned __int8 *)*a1;
          if (__p)
            v14 = v12;
          else
            v14 = 0;
          v15[0] = v11;
          v15[1] = 0x40000000;
          v15[2] = sub_20B98BFC0;
          v15[3] = &unk_24C46C5C0;
          v15[4] = a1;
          v15[5] = v12;
          sub_20B8F61A0(v13, (uint64_t)__p + 2 * (((unint64_t)(v17 - (_BYTE *)__p) >> 1) - v12), v14, (uint64_t)v15);
          if (__p)
          {
            v17 = __p;
            operator delete(__p);
          }
          v9 = *a3;
          v8 = a3[1];
        }
        ++v10;
      }
      while (v10 < (v8 - v9) >> 3);
    }
  }
}

void sub_20B98BFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B98BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const UniChar *v5;
  CFIndex v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  CFIndex v15;
  CFStringRef v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  CFTypeRef cf;
  const __CFString *v37;

  if (*(_QWORD *)(a2 + 24) > *(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(const UniChar **)(a2 + 16);
    if (v5)
      v6 = *(_QWORD *)(a1 + 40);
    else
      v6 = 0;
    v7 = CFStringCreateWithCharacters(0, v5, v6);
    v37 = v7;
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = sub_20B8D24B0(v7);
    v11 = v8 - v9;
    if ((v10 & 1) != 0)
    {
      if (v11 <= 3)
      {
        v12 = *(_QWORD *)(a1 + 40);
        goto LABEL_10;
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (v12 > 2 || v11 <= 2)
      {
LABEL_10:
        v13 = *(_QWORD *)(a2 + 16);
        v14 = (char *)(v13 + 2 * v12);
        if (v13)
          v15 = v8 - v9;
        else
          v15 = 0;
        v16 = CFStringCreateWithCharacters(0, (const UniChar *)(v13 + 2 * v12), v15);
        cf = v16;
        v17 = (2 * v15);
        if ((_DWORD)v17)
        {
          v18 = 0;
          do
          {
            v19 = *v14++;
            v18 = (1025 * (v18 + v19)) ^ ((1025 * (v18 + v19)) >> 6);
            --v17;
          }
          while (v17);
          v20 = 9 * v18;
        }
        else
        {
          v20 = 0;
        }
        v21 = *(_QWORD **)(v4 + 16);
        v22 = operator new();
        sub_20B98C26C(&v34, v7, 0, 0);
        sub_20B98C26C(&v32, v16, 0, 0);
        v23 = sub_20B947CC4();
        sub_20B9F63E8(v22, &v34, &v32, 0, (unsigned __int16 **)v23, 32769 * (v20 ^ (v20 >> 11)), *(_DWORD *)(v4 + 92) | 0x200, 0.0);
        v24 = (void *)sub_20B8E1754(v22);
        sub_20BA29AC4(v21, v24, v25);
        v21[3] = *v21;
        v26 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v35;
        if (v35)
        {
          v30 = (unint64_t *)&v35->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (cf)
          CFRelease(cf);
        v7 = v37;
      }
    }
    if (v7)
      CFRelease(v7);
  }
}

void sub_20B98C1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  const void *v8;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  sub_20B811FE4((uint64_t)va);
  MEMORY[0x20BD39CB0](v3, 0x10A1C4025EE9B24);
  sub_20B87E150((const void **)va1, 0);
  sub_20B87E150((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98C26C(uint64_t *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C46B7F8;
  result = sub_20B90BD70((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20B98C2D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B98C2EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B98C2FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B98C32C(uint64_t a1)
{
  return sub_20B90C8AC(a1 + 24);
}

uint64_t sub_20B98C338(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = sub_20B98C370(a1, a2);
  v3 = sub_20BA1DA14(*(_QWORD *)(v2 + 56));
  return sub_20BA1DA14(*(_QWORD *)(v2 + 64)) | v3;
}

uint64_t sub_20B98C370(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(a2)
  {
    case 2:
      v4 = (uint64_t *)(a1 + 32);
      result = *(_QWORD *)(a1 + 32);
      if (result)
        return result;
      v7 = *(_QWORD *)(a1 + 8);
      v6 = operator new();
      sub_20B8AF0C0(v6, *(_BYTE *)a1, *(_DWORD *)(a1 + 4), 2, v7);
      goto LABEL_10;
    case 1:
      v4 = (uint64_t *)(a1 + 24);
      result = *(_QWORD *)(a1 + 24);
      if (result)
        return result;
      v8 = *(_QWORD *)(a1 + 8);
      v6 = operator new();
      sub_20B8AF0C0(v6, *(_BYTE *)a1, *(_DWORD *)(a1 + 4), 1, v8);
      goto LABEL_10;
    case 0:
      v4 = (uint64_t *)(a1 + 16);
      result = *(_QWORD *)(a1 + 16);
      if (result)
        return result;
      v5 = *(_QWORD *)(a1 + 8);
      v6 = operator new();
      sub_20B8AF0C0(v6, *(_BYTE *)a1, *(_DWORD *)(a1 + 4), 0, v5);
LABEL_10:
      sub_20B98C5C8(v4, v6);
      return *v4;
  }
  return 0;
}

void sub_20B98C488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1060C40E5902F1BLL);
  _Unwind_Resume(a1);
}

void sub_20B98C4B4(unsigned __int8 *a1, const void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_20B98C370((uint64_t)a1, a3);
  sub_20B8AF61C(v6, a2);
  if (a3 == 2)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_24C461808;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_DWORD *)(v7 + 88) = 1065353216;
    *(_WORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 104) = 0;
    *(_DWORD *)(v7 + 112) = 3;
    *(_QWORD *)(v7 + 120) = 0;
    v8 = *((_QWORD *)a1 + 5);
    *((_QWORD *)a1 + 5) = v7;
    if (!v8 || ((*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8), (v7 = *((_QWORD *)a1 + 5)) != 0))
      sub_20B8F4AC4(v7, a2, *a1);
  }
}

void sub_20B98C590(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  switch(a2)
  {
    case 2:
      v3 = a1[4];
      goto LABEL_5;
    case 1:
      v3 = a1[3];
      goto LABEL_5;
    case 0:
      v3 = a1[2];
LABEL_5:
      sub_20B8B01FC(v3, (char **)a3);
      return;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t sub_20B98C5C8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8AF4DC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B98C604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, __CFArray *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  signed int v38;
  int v39;
  uint64_t v40;
  size_t v41;
  unsigned __int16 *v42;
  UChar *v43;
  int v44;
  size_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  unsigned __int8 v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  unsigned __int8 v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  BOOL v68;
  UChar *v69;
  _WORD *v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  size_t v76;
  unsigned __int16 *v77;
  UChar *v78;
  int v79;
  char v80;
  UChar *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  UInt8 *v85;
  UChar *v86;
  unint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  UChar v94;
  unint64_t v95;
  int32_t v96;
  UChar v97;
  int32_t v98;
  UChar v99;
  uint64_t v100;
  UInt8 *v101;
  unint64_t v102;
  unint64_t *v103;
  int v104;
  uint64_t v105;
  __int16 v106;
  char v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  UChar *v111;
  uint64_t v112;
  int v113;
  UChar v115;
  unint64_t v116;
  int32_t v117;
  UChar v118;
  int32_t v119;
  UChar v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  signed int v128;
  int v129;
  uint64_t v130;
  size_t v131;
  unsigned __int16 *v132;
  UChar *v133;
  int v134;
  size_t v135;
  __int16 v136;
  unint64_t v137;
  int v138;
  char v139;
  char v140;
  char v141;
  unint64_t v142;
  int v143;
  char v144;
  int v145;
  UChar v146;
  unsigned int v147;
  UInt8 *v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  char v152;
  uint64_t v153;
  int bytes;
  __int16 bytesa;
  UInt8 *bytesb;
  int v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE v161[5];
  int v162;
  unsigned int v163;
  unsigned __int8 v164;
  _BYTE v165[5];
  __int16 v166;
  __int16 v167;
  uint64_t v168;
  unsigned __int8 v169;
  unsigned __int8 v170[15];
  UChar s[2];
  char v172;
  _WORD v173[15];
  char __dst;
  _BYTE v175[7];
  unsigned __int8 v176;
  _BYTE v177[249];
  _BYTE v178[258];
  CFIndex v179[8];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  int v184;
  UChar v185[33];
  UChar v186[33];
  unsigned __int16 v187[130];
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  __int16 v193;
  _BYTE v194[256];
  unsigned __int16 v195;
  char v196;
  UChar v197[129];
  uint64_t v198;

  v11 = MEMORY[0x24BDAC7A8]();
  v160 = v17;
  v198 = *MEMORY[0x24BDAC8D0];
  if (v18 != 2037345641)
    return 4294960183;
  if ((unint64_t)v12 > 0xC8)
    return 4294960179;
  v20 = v11;
  v21 = 0;
  while (*(_DWORD *)&aKoyhdnihsnihuk[v21 + 20] != v14)
  {
    v21 += 4;
    if (v21 == 12)
      return 4294960183;
  }
  v172 = 0;
  *(_DWORD *)s = 0;
  v153 = v11;
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      v23 = 0;
      while (*(_DWORD *)(v16 + 4 * i) != *(_DWORD *)&aKoyhdnihsnihuk[4 * v23])
      {
        if (++v23 == 5)
          return 4294960183;
      }
      if (*((_BYTE *)s + v23))
        return 4294960185;
      *((_BYTE *)s + v23) = 1;
    }
    if (v14 == 1025515552)
    {
      v24 = 0;
      v25 = 1;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v164 = 0;
      v139 = -1;
      v140 = -1;
      v141 = -1;
      v158 = -1;
      v138 = 255;
      while (1)
      {
        v26 = *(_DWORD *)(v16 + 4 * v24);
        result = 4294960184;
        if (v26 <= 1751740018)
        {
          if (v26 == 1718971253)
          {
            if (v141 != -1)
              return 4294960185;
            *((_QWORD *)&v180 + v24) = &v184;
            v179[v24] = 0;
            v141 = v25 - 1;
            goto LABEL_35;
          }
          if (v26 != 1751740004)
            return result;
          v20 = v153;
          if (v140 != -1)
            return 4294960185;
          *((_QWORD *)&v180 + v24) = &v166;
          v179[v24] = 2;
          v140 = v25 - 1;
        }
        else
        {
          if (v26 == 1751740019)
          {
            if (v138 != 255)
              return 4294960185;
            *((_QWORD *)&v180 + v24) = &v167;
            v179[v24] = 2;
            v138 = (v25 - 1);
LABEL_35:
            v20 = v153;
            goto LABEL_36;
          }
          if (v26 == 1835360622)
          {
            if (v139 != -1)
              return 4294960185;
            *((_QWORD *)&v180 + v24) = &v165[1];
            v179[v24] = 4;
            v139 = v25 - 1;
            goto LABEL_35;
          }
          if (v26 != 1752788843)
            return result;
          v20 = v153;
          if (v158 != -1)
            return 4294960185;
          *((_QWORD *)&v180 + v24) = v186;
          v158 = v25 - 1;
        }
LABEL_36:
        v24 = v25++;
        if (v24 >= v15)
          goto LABEL_40;
      }
    }
    return 4294960178;
  }
  if (v14 != 1025515552)
    return 4294960178;
  v182 = 0u;
  v183 = 0u;
  v138 = 255;
  v180 = 0u;
  v181 = 0u;
  v164 = 0;
  v158 = -1;
  v141 = -1;
  v140 = -1;
  v139 = -1;
LABEL_40:
  v27 = 0;
  v166 = 0;
  memset(v165, 0, sizeof(v165));
  v162 = 0;
  v163 = 0;
  v28 = v12 >> 1;
  v29 = v12 >> 1;
  v30 = v12 >> 1;
  v159 = v12;
  while (v30)
  {
    v31 = *(unsigned __int16 *)(v13 + v27 * 2);
    v187[v27++] = v31;
    --v30;
    if (!v31)
    {
      if (v30)
      {
        bzero(&v187[v27], 2 * v28 - v27 * 2);
        v12 = v159;
      }
      break;
    }
  }
  *(unsigned __int16 *)((char *)v187 + v12) = 0;
  v167 = 30;
  if (*(unsigned __int16 *)(v20 + 82) <= 5u)
  {
    LODWORD(v142) = 0;
    LODWORD(v137) = 0;
    v165[0] = 0;
  }
  else
  {
    sub_20BA31438(*(_QWORD *)(v20 + 84) + 160, (unsigned __int8 *)v187, (unsigned __int16)v12, v178, v165);
    if (v165[0] && (v32 = sub_20B98DA84((uint64_t)v178, v165[0], 9u, v170, 8u)) != 0)
    {
      v33 = v32;
      LODWORD(v137) = 0;
      LODWORD(v142) = 0;
      v34 = 0;
      v148 = (UInt8 *)v180;
      do
      {
        if (sub_20B98DB18(v34, (uint64_t)v178, v165[0], &__dst, &v164, v170) == -11)
          goto LABEL_74;
        if (v158 != -1)
        {
          v35 = v176;
          v36 = 7 * v176;
          v37 = v164;
          v38 = v164 - (_DWORD)v36 - 9 + (((v164 - (_DWORD)v36 - 9) & 0x8000u) >> 15);
          v39 = v38 >> 1;
          v40 = (uint64_t)v38 >> 1;
          v41 = 2 * v39;
          v42 = (unsigned __int16 *)&v177[v36];
          v43 = v186;
          while (v40)
          {
            v44 = *v42++;
            *v43++ = v44;
            v41 -= 2;
            --v40;
            if (!v44)
            {
              if (v40)
                bzero(v43, v41);
              break;
            }
          }
          v179[v158] = v37 - 7 * v35 - 9;
        }
        if (v141 != -1)
        {
          if (v176 && v176 <= 0x49u)
          {
            v45 = 7 * v176;
            v179[v141] = v45;
            memmove(*((void **)&v180 + v141), v177, v45);
          }
          else
          {
            v179[v141] = 0;
          }
        }
        if (v140 != -1)
          **((_WORD **)&v180 + v140) = bswap32(*(unsigned __int16 *)&v175[1]) >> 16;
        if (v139 != -1)
          **((_DWORD **)&v180 + v139) = bswap32(*(unsigned int *)&v175[3]);
        if (v138 != 255)
        {
          if (v176)
            v46 = 7;
          else
            v46 = 30;
          v167 = v46;
        }
        v142 = (v142 + 1);
        if (v142 <= v160)
        {
LABEL_74:
          v12 = v159;
        }
        else
        {
          sub_20B98DBA0(v148, v179[0], a11);
          v137 = (v137 + 1);
          v12 = v159;
          if (a9 - 1 < v137)
            return 0;
        }
        ++v34;
      }
      while (v34 != v33);
    }
    else
    {
      LODWORD(v142) = 0;
      LODWORD(v137) = 0;
      v12 = v159;
    }
  }
  v47 = 0;
  v167 = 14;
  *(_DWORD *)&v165[1] = 0;
  v169 = 0;
  v168 = 1;
  v48 = v153;
  while (v29)
  {
    v49 = v187[v47];
    v197[v47++] = v49;
    --v29;
    if (!v49)
    {
      if (v29)
      {
        bzero(&v197[v47], 2 * v28 - v47 * 2);
        v12 = v159;
      }
      break;
    }
  }
  *(UChar *)((char *)v197 + v12) = 0;
  v188 = 0x100010001;
  v189 = 1;
  v190 = 0;
  v191 = 0x1000100010001;
  v192 = 0;
  v50 = u_strlen(v197);
  v143 = 0;
  v151 = 0;
  if (*(unsigned __int16 *)(v153 + 82) >= 7u)
  {
    v51 = 0;
    v151 = 0;
    v143 = 0;
    while (1)
    {
      sub_20BA31680(*(_QWORD *)(v48 + 84) + 192, (uint64_t)v197, 2 * (v50 & 0x7FFF), &v195, &v169, (uint64_t)&v168);
      v52 = v169;
      if (!v169)
        goto LABEL_145;
      v147 = bswap32(v195) >> 16;
      v144 = v196;
      v53 = 0;
      if (v169 < 5u)
        break;
      v54 = 4;
      do
      {
        if (*((unsigned __int8 *)&v195 + v54) == 255 && *((unsigned __int8 *)&v195 + v54 + 1) == 255)
        {
          v54 += 4;
          ++v53;
        }
        v54 += 2;
      }
      while (v54 < v169);
      if ((v53 & 0x80000000) == 0)
        break;
      v56 = 0;
      v55 = 0;
LABEL_142:
      if (!(v55 | v56))
      {
        v173[v143] = v147;
        v161[v143] = v144;
        *(_DWORD *)&v173[2 * v143++ + 5] = SWORD2(v168);
      }
      v48 = v153;
      v50 = u_strlen(v197);
      if (*(unsigned __int16 *)(v153 + 82) <= 6u)
        goto LABEL_145;
    }
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v146 = WORD2(v168);
    v145 = -WORD2(v168);
    while (1)
    {
      v58 = v57 != 0;
      v59 = 4;
      if (v52 >= 5 && v57)
      {
        v60 = 0;
        v59 = 4;
        do
        {
          if (*((unsigned __int8 *)&v195 + v59) == 255 && *((unsigned __int8 *)&v195 + v59 + 1) == 255)
          {
            v59 += 2;
            ++v60;
          }
          v59 += 2;
          v58 = v60 != v57;
        }
        while (v60 != v57 && v59 < (int)v52);
      }
      if (v58)
        goto LABEL_137;
      v61 = *(_WORD *)&v194[v59 + 254];
      v193 = v61;
      if (v59 >= (int)v52)
      {
        v67 = v61;
        v63 = 2;
      }
      else
      {
        v62 = v59;
        v63 = 2;
        do
        {
          v64 = *((unsigned __int8 *)&v195 + v62);
          v65 = *((unsigned __int8 *)&v195 + v62 + 1);
          if (v64 == 255 && v65 == 255)
            break;
          v194[v63 - 2] = v64;
          v66 = v63 | 1;
          v63 += 2;
          v194[v66 - 2] = v65;
          v62 += 2;
        }
        while (v62 < v52);
        v67 = v193;
      }
      if ((v67 & 0xFC) == 0xC8)
      {
        v56 = 1;
      }
      else
      {
        v55 = 1;
        v68 = v67 > 0x17 || ((1 << v67) & 0x80400C) == 0;
        if (v68 && v67 - 220 >= 2)
          v55 = 0;
        if (v51 <= 0x31u)
        {
          bytes = v56;
          v69 = &s[36 * v51];
          v69[33] = v146;
          v70 = v69 + 33;
          if (v67 - 112 < 4 || v67 == 121)
            *v70 = v145;
          v71 = HIBYTE(v193);
          if (v67 <= 0x9F
            && HIBYTE(v193) == 3
            && !*(unsigned __int16 *)((char *)&v187[129] + (((429496730 * (unint64_t)v67) >> 31) & 0x3E)))
          {
            goto LABEL_137;
          }
          v149 = v55;
          v72 = v63 - 2;
          v73 = v72 + ((unsigned __int16)(v72 & 0x8000) >> 15);
          v74 = v73 >> 1;
          v75 = (uint64_t)v73 >> 1;
          v76 = 2 * v74;
          v77 = (unsigned __int16 *)v194;
          v78 = &s[36 * v51];
          while (v75)
          {
            v79 = *v77++;
            *v78++ = v79;
            v76 -= 2;
            --v75;
            if (!v79)
            {
              if (v75)
                bzero(v78, v76);
              break;
            }
          }
          *(UChar *)((char *)&s[36 * v51] + v72) = 0;
          v80 = sub_20B98D9C8(v67);
          v81 = &s[36 * v51];
          *((_BYTE *)v81 + 68) = v80;
          v82 = 0xA01000206uLL >> (8 * v71);
          if (v71 >= 5)
            LOBYTE(v82) = 11;
          *((_BYTE *)v81 + 69) = v82;
          v81[35] = v147;
          ++v151;
          v56 = bytes;
          v55 = v149;
        }
        ++v51;
      }
LABEL_137:
      v68 = v57++ == v53;
      if (v68)
        goto LABEL_142;
    }
  }
LABEL_145:
  if (v151)
  {
    LODWORD(v83) = v137;
    v84 = a9 - 1;
    v85 = (UInt8 *)v180;
    v86 = s;
    LODWORD(v87) = v142;
    v88 = (unint64_t *)&v179[v158];
    v89 = v151;
    v90 = v159;
    v91 = a10;
    while (1)
    {
      if (v91)
      {
        v92 = *((unsigned __int8 *)v86 + 69);
        if (v92 == 1 || v92 == 10)
          goto LABEL_173;
      }
      if ((__int16)v86[33] != v90)
        goto LABEL_173;
      sub_20B9AD640(v186, v86, 0x42uLL);
      if (!v186[0])
        goto LABEL_172;
      v94 = v86[35];
      v166 = v94 + sub_20B98DBF4(*((unsigned __int8 *)v86 + 68), *((unsigned __int8 *)v86 + 69)) + 1000;
      if (v158 != -1)
        *v88 = 2 * u_strlen(v86);
      v95 = (v87 + 1);
      if (v95 <= v160)
      {
        v90 = v159;
        v91 = a10;
      }
      else
      {
        sub_20B98DBA0(v85, v179[0], a11);
        v83 = (v83 + 1);
        v90 = v159;
        v91 = a10;
        if (v84 < v83)
          return 0;
      }
      if (v158 != -1)
        break;
      LODWORD(v87) = v87 + 1;
LABEL_173:
      v86 += 36;
      if (!--v89)
        goto LABEL_176;
    }
    if (!v91 || *((_BYTE *)v86 + 69) != 6)
    {
      v96 = u_strlen(v86);
      if ((int)sub_20B98DCB8(*(unsigned __int16 **)(v153 + 44), v86, 2 * v96, *((unsigned __int8 *)v86 + 69), v185, v88) >= 1)
      {
        v95 = (v87 + 2);
        if (v95 > v160)
        {
          v97 = v86[35];
          v166 = v97 + sub_20B98DBF4(*((unsigned __int8 *)v86 + 68), (*((_BYTE *)v86 + 69) + 1)) + 1000;
          *(UChar *)((char *)v185 + *v88) = 0;
          sub_20B9AD640(v186, v185, 0x42uLL);
          sub_20B98DBA0(v85, v179[0], a11);
          v83 = (v83 + 1);
          if (v84 < v83)
            return 0;
        }
      }
    }
    v98 = u_strlen(v86);
    if ((int)sub_20B98DEA8(*(unsigned __int16 **)(v153 + 44), *(_WORD **)(v153 + 60), v86, 2 * v98, *((unsigned __int8 *)v86 + 69), (uint64_t)v185, v88) < 1)
    {
      LODWORD(v87) = v95;
    }
    else
    {
      v87 = (v95 + 1);
      if (v87 > v160)
      {
        v99 = v86[35];
        v166 = v99 + sub_20B98DBF4(*((unsigned __int8 *)v86 + 68), (*((_BYTE *)v86 + 69) + 2)) + 1000;
        *(UChar *)((char *)v185 + *v88) = 0;
        sub_20B9AD640(v186, v185, 0x42uLL);
        sub_20B98DBA0(v85, v179[0], a11);
        v83 = (v83 + 1);
        v90 = v159;
        v91 = a10;
        if (v84 < v83)
          return 0;
        goto LABEL_173;
      }
    }
LABEL_172:
    v90 = v159;
    v91 = a10;
    goto LABEL_173;
  }
  LODWORD(v87) = v142;
  LODWORD(v83) = v137;
  LOWORD(v90) = v159;
LABEL_176:
  if (v143)
  {
    v100 = 0;
    v101 = (UInt8 *)v180;
    v102 = a9 - 1;
    v157 = (__int16)v90;
    v103 = (unint64_t *)&v179[v158];
    do
    {
      v104 = 0;
      v162 = 0;
      v105 = *(unsigned int *)&v173[2 * v100 + 5];
      v106 = v173[v100];
      v150 = v100;
      v107 = v161[v100];
      bytesa = v106;
      v152 = v107;
      do
      {
        v163 = 0;
        if (sub_20BA2AE54(v153, v187, v157, v105, (uint64_t)s, &v162, (int *)&v163, 0, v106, v107))
          break;
        v108 = a10;
        if (v104 == v162)
          break;
        if (v163)
        {
          v109 = v105;
          v110 = 0;
          v111 = s;
          v112 = v159;
          while (1)
          {
            if (v108)
            {
              v113 = *((unsigned __int8 *)v111 + 69);
              if (v113 == 1 || v113 == 10)
                goto LABEL_209;
            }
            if ((__int16)v111[33] != v112)
              goto LABEL_209;
            sub_20B9AD640(v186, v111, 0x42uLL);
            if (!v186[0])
              goto LABEL_208;
            if (v158 != -1)
              *v103 = 2 * u_strlen(v111);
            v115 = v111[35];
            v166 = v115 + sub_20B98DBF4(*((unsigned __int8 *)v111 + 68), *((unsigned __int8 *)v111 + 69)) + 1000;
            v116 = (v87 + 1);
            if (v116 <= v160)
            {
              v112 = v159;
              v108 = a10;
            }
            else
            {
              sub_20B98DBA0(v101, v179[0], a11);
              v83 = (v83 + 1);
              v112 = v159;
              v108 = a10;
              if (v102 < v83)
                return 0;
            }
            if (v158 != -1)
              break;
            LODWORD(v87) = v87 + 1;
LABEL_209:
            ++v110;
            v111 += 36;
            if (v110 >= v163)
            {
              v104 = v162;
              v105 = v109;
              v106 = bytesa;
              v107 = v152;
              goto LABEL_212;
            }
          }
          if (!v108 || *((_BYTE *)v111 + 69) != 6)
          {
            v117 = u_strlen(v111);
            if ((int)sub_20B98DCB8(*(unsigned __int16 **)(v153 + 44), v111, 2 * v117, *((unsigned __int8 *)v111 + 69), v185, v103) >= 1)
            {
              v116 = (v87 + 2);
              if (v116 > v160)
              {
                v118 = v111[35];
                v166 = v118
                     + sub_20B98DBF4(*((unsigned __int8 *)v111 + 68), (*((_BYTE *)v111 + 69) + 1))
                     + 1000;
                *(UChar *)((char *)v185 + *v103) = 0;
                sub_20B9AD640(v186, v185, 0x42uLL);
                sub_20B98DBA0(v101, v179[0], a11);
                v83 = (v83 + 1);
                if (v102 < v83)
                  return 0;
              }
            }
          }
          v119 = u_strlen(v111);
          if ((int)sub_20B98DEA8(*(unsigned __int16 **)(v153 + 44), *(_WORD **)(v153 + 60), v111, 2 * v119, *((unsigned __int8 *)v111 + 69), (uint64_t)v185, v103) < 1)
          {
            LODWORD(v87) = v116;
          }
          else
          {
            v87 = (v116 + 1);
            if (v87 > v160)
            {
              v120 = v111[35];
              v166 = v120
                   + sub_20B98DBF4(*((unsigned __int8 *)v111 + 68), (*((_BYTE *)v111 + 69) + 2))
                   + 1000;
              *(UChar *)((char *)v185 + *v103) = 0;
              sub_20B9AD640(v186, v185, 0x42uLL);
              sub_20B98DBA0(v101, v179[0], a11);
              v83 = (v83 + 1);
              v112 = v159;
              v108 = a10;
              if (v102 < v83)
                return 0;
              goto LABEL_209;
            }
          }
LABEL_208:
          v112 = v159;
          v108 = a10;
          goto LABEL_209;
        }
        v104 = v162;
LABEL_212:
        ;
      }
      while (v104 > 0);
      v100 = v150 + 1;
    }
    while (v150 + 1 != v143);
  }
  v167 = 29;
  if (*(unsigned __int16 *)(v153 + 82) >= 5u)
  {
    sub_20BA31438(*(_QWORD *)(v153 + 84) + 128, (unsigned __int8 *)v187, (unsigned __int16)v159, v178, v165);
    if (v165[0])
    {
      v121 = sub_20B98DA84((uint64_t)v178, v165[0], 8u, v170, 7u);
      if (v121)
      {
        v122 = v121;
        v123 = 0;
        bytesb = (UInt8 *)v180;
        LODWORD(v124) = v87;
        do
        {
          if (sub_20B98DB18(v123, (uint64_t)v178, v165[0], &__dst, &v164, v170) != -11)
          {
            if (v158 != -1)
            {
              v125 = v175[6];
              v126 = 7 * v175[6];
              v127 = v164;
              v128 = v164 - (_DWORD)v126 - 8 + (((v164 - (_DWORD)v126 - 8) & 0x8000u) >> 15);
              v129 = v128 >> 1;
              v130 = (uint64_t)v128 >> 1;
              v131 = 2 * v129;
              v132 = (unsigned __int16 *)&v177[v126 - 1];
              v133 = v186;
              while (v130)
              {
                v134 = *v132++;
                *v133++ = v134;
                v131 -= 2;
                --v130;
                if (!v134)
                {
                  if (v130)
                    bzero(v133, v131);
                  break;
                }
              }
              v179[v158] = v127 - 7 * v125 - 8;
            }
            if (v141 != -1)
            {
              if (v175[6] && v175[6] <= 0x49u)
              {
                v135 = 7 * v175[6];
                v179[v141] = v135;
                memmove(*((void **)&v180 + v141), &v176, v135);
              }
              else
              {
                v179[v141] = 0;
              }
            }
            if (v140 != -1)
              **((_WORD **)&v180 + v140) = bswap32(*(unsigned __int16 *)v175) >> 16;
            if (v139 != -1)
              **((_DWORD **)&v180 + v139) = bswap32(*(unsigned int *)&v175[2]);
            if (v138 != 255)
            {
              if (v175[6])
                v136 = 7;
              else
                v136 = 29;
              v167 = v136;
            }
            v124 = (v124 + 1);
            if (v124 > v160)
            {
              sub_20B98DBA0(bytesb, v179[0], a11);
              v83 = (v83 + 1);
              if (a9 - 1 < v83)
                break;
            }
          }
          ++v123;
        }
        while (v123 != v122);
      }
    }
  }
  return 0;
}

uint64_t sub_20B98D9C8(unsigned int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 0x3D)
  {
    if (((1 << a1) & 0x1004010040100401) != 0)
      return result;
    if (((1 << a1) & 0x2008020080200802) != 0)
      return 4;
  }
  if (a1 - 70 > 0x15)
    goto LABEL_7;
  v3 = 1 << (a1 - 70);
  if ((v3 & 0x100401) != 0)
    return result;
  if ((v3 & 0x200802) != 0)
    return 4;
LABEL_7:
  switch(a1)
  {
    case 0xC8u:
    case 0xCAu:
      return result;
    case 0xC9u:
    case 0xCBu:
      return 4;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_20B98DA84(uint64_t a1, int a2, unsigned __int16 a3, _BYTE *a4, unsigned __int16 a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 - (unint64_t)*(unsigned __int8 *)(a1 + a5) + 8 * *(unsigned __int8 *)(a1 + a5);
  *a4 = a3 - *(_BYTE *)(a1 + a5) + 8 * *(_BYTE *)(a1 + a5);
  if (v5 >= a2)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      if (*(unsigned __int8 *)(a1 + v5) == 255 && *(unsigned __int8 *)(v5 + a1 + 1) == 255)
      {
        v6 = (int)v6 + 1;
        v7 = *(unsigned __int8 *)(a1 + a5 + 2 + v5);
        v8 = a3 - v7 + 8 * v7;
        a4[v6] = v8;
        v5 += v8 + 2;
      }
      a4[(int)v6] += 2;
      v5 += 2;
    }
    while ((int)v5 < a2);
  }
  return (v6 + 1);
}

uint64_t sub_20B98DB18(int a1, uint64_t a2, int a3, char *__dst, _BYTE *a5, unsigned __int8 *a6)
{
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  size_t v13;
  uint64_t result;

  if (a1 < 1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = a1;
    v10 = a6;
    v11 = a1;
    do
    {
      v12 = *v10++;
      v8 += v12 + 2;
      --v11;
    }
    while (v11);
  }
  if (v8 >= a3)
    return 4294967285;
  v13 = a6[v9];
  *a5 = v13;
  memmove(__dst, (const void *)(a2 + v8), v13);
  result = 0;
  *(_WORD *)&__dst[*a5] = 0;
  return result;
}

void sub_20B98DBA0(UInt8 *bytes, CFIndex numBytes, __CFArray *a3)
{
  CFStringRef v4;

  v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, numBytes, 0x10000100u, 0);
  CFArrayAppendValue(a3, v4);
  CFRelease(v4);
}

uint64_t sub_20B98DBF4(int a1, unsigned int a2)
{
  char *v2;
  __int16 v3;

  switch(a1)
  {
    case 0:
      if (a2 >= 0xB)
        goto LABEL_17;
      v2 = "";
      goto LABEL_16;
    case 1:
      if (a2 >= 0xB)
        goto LABEL_17;
      v2 = (char *)&unk_20BA55972;
      goto LABEL_16;
    case 2:
      if (a2 >= 0xB)
        goto LABEL_17;
      v2 = (char *)&unk_20BA55988;
      goto LABEL_16;
    case 3:
      if (a2 > 0xA)
        goto LABEL_17;
      v2 = (char *)&unk_20BA559E0;
      goto LABEL_16;
    case 4:
      if (a2 >= 0xB)
        goto LABEL_17;
      v2 = (char *)&unk_20BA5599E;
      goto LABEL_16;
    case 5:
      if (a2 >= 0xB)
        goto LABEL_17;
      v2 = (char *)&unk_20BA559B4;
      goto LABEL_16;
    case 6:
      if (a2 >= 0xB)
        goto LABEL_17;
      v2 = (char *)&unk_20BA559CA;
LABEL_16:
      v3 = *(_WORD *)&v2[2 * (char)a2];
      break;
    default:
LABEL_17:
      v3 = 50;
      break;
  }
  return v3;
}

uint64_t sub_20B98DCB8(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, int a4, _WORD *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;

  if (a4 == 2)
  {
    v11 = 26;
    v12 = 12;
  }
  else
  {
    if (a4 != 6)
      goto LABEL_9;
    v11 = 14;
    v12 = 1;
  }
  v13 = *a2 != a1[v11] && a3 >= 7;
  if (v13)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *(unsigned __int16 *)((char *)a2 + v16);
      if (v18 == a1[11] || v18 == *a1)
        break;
      v17 += 2;
      v16 = v17;
      if (v17 >= a3)
      {
        v19 = 0;
        *a5 = 0;
        if (a3 % 6)
          v20 = a3 % 6;
        else
          v20 = 6;
        while (v20 >> 1 != v19)
        {
          v21 = a2[v19];
          a5[v19++] = v21;
          if (!v21)
          {
            if (v19 != v20 >> 1)
              bzero(&a5[v19], (v20 & 6) - v19 * 2);
            break;
          }
        }
        *(_WORD *)((char *)a5 + v20) = a1[v12];
        v22 = v20 + 2;
        *a6 = v20 + 2;
        v23 = (char *)a2 + v20;
        v14 = 1;
        while (1)
        {
          v20 += 6;
          if (v20 > a3)
            break;
          if (v22 - 58 <= 0xFFFFFFFFFFFFFFBFLL)
            goto LABEL_35;
          v24 = 0;
          while (v24 != 6)
          {
            v25 = *(unsigned __int16 *)&v23[v24];
            *(_WORD *)((char *)a5 + v22 + v24) = v25;
            v24 += 2;
            if (!v25)
            {
              if (v24 != 6)
                bzero((char *)a5 + v22 + v24, 6 - v24);
              break;
            }
          }
          *a6 = v22 + 6;
          if (v20 == a3)
          {
            v22 += 6;
            break;
          }
          if (v22 - 56 <= 0xFFFFFFFFFFFFFFBFLL)
          {
LABEL_35:
            LOWORD(v14) = 0;
            *a5 = 0;
            *a6 = 0;
            return (__int16)v14;
          }
          *(_WORD *)((char *)a5 + v22 + 6) = a1[v12];
          v22 += 8;
          *a6 = v22;
          v23 += 6;
          v13 = v14++ >= 0x27;
          if (v13)
          {
            LOWORD(v14) = 40;
            break;
          }
        }
        *(_WORD *)((char *)a5 + v22) = 0;
        return (__int16)v14;
      }
    }
  }
LABEL_9:
  LOWORD(v14) = 0;
  return (__int16)v14;
}

uint64_t sub_20B98DEA8(unsigned __int16 *a1, _WORD *a2, unsigned __int16 *a3, unint64_t a4, int a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v12;
  int v13;
  __int16 v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  int32_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  UChar *v31;
  uint64_t v32;
  int v33;
  int32_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  UChar *v40;
  uint64_t v41;
  int v42;
  int32_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  char v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  size_t v53;
  UChar *v54;
  int v55;
  int32_t v56;
  uint64_t v57;
  const UChar *v58;
  int32_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  int v63[2];
  UChar v64[33];
  UChar s[33];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (a4 < 9)
    return 0;
  if (a5 == 2)
  {
    v12 = 26;
LABEL_6:
    v13 = a1[v12];
    if (*a3 == v13)
      return 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(unsigned __int16 *)((char *)a3 + v16);
      if (v18 == a1[11] || v18 == *a1)
        return -2;
      v17 += 2;
      v16 = (char)v17;
    }
    while ((char)v17 < a4);
    v62 = v12 * 2;
    *(_QWORD *)v63 = a6;
    s[0] = 0;
    v64[0] = 0;
    v19 = (uint64_t)a3 + a4 - 2;
    v20 = 2;
    v21 = v19;
    do
    {
      if (v13 != *(unsigned __int16 *)((char *)a3 + a4 - v20))
      {
        v22 = 0;
        while (v20 != v22)
        {
          v23 = *(unsigned __int16 *)(v21 + v22);
          v64[v22 / 2] = v23;
          v22 += 2;
          if (!v23)
          {
            if (v20 != v22)
              bzero(&v64[v22 / 2], v20 - v22);
            break;
          }
        }
        v64[v20 / 2] = 0;
      }
      v21 -= 2;
      v24 = v20 >= 7;
      v20 += 2;
    }
    while (!v24);
    if (v64[0])
    {
      v25 = u_strlen(s);
      v26 = u_strlen(v64) + v25;
      if ((unint64_t)(v26 * 2 - 63) < 0xFFFFFFFFFFFFFFBFLL)
        return -1;
      sub_20B9AD6F8((uint64_t)v64, s, 0x42uLL);
      v64[v26] = 0;
      sub_20B9AD640(s, v64, 0x42uLL);
      s[v26] = 0;
      v64[0] = 0;
    }
    v61 = a7;
    if (a4 < 0xA)
    {
      v14 = 0;
      goto LABEL_71;
    }
    v27 = 0;
    v28 = *(unsigned __int16 *)((char *)a1 + v62);
    v29 = 10;
    do
    {
      if (v28 != *(unsigned __int16 *)((char *)a3 + a4 - v29))
      {
        v30 = (uint64_t)(v29 - 8) >> 1;
        v31 = v64;
        v32 = v27;
        while (v30)
        {
          v33 = *(unsigned __int16 *)((char *)a3 + a4 + v32 - 10);
          *v31++ = v33;
          v32 += 2;
          --v30;
          if (!v33)
          {
            if (v30)
              bzero(v31, 2 - v32);
            break;
          }
        }
        *(_WORD *)((char *)&v63[1] + v29) = a2[33];
        v64[v29 / 2 - 3] = 0;
      }
      if (v29 > 0xE)
        break;
      v29 += 2;
      v27 -= 2;
    }
    while (v29 <= a4);
    if (v64[0])
    {
      v34 = u_strlen(s);
      v35 = u_strlen(v64) + v34;
      if ((unint64_t)(v35 * 2 - 63) < 0xFFFFFFFFFFFFFFBFLL)
        return -1;
      sub_20B9AD6F8((uint64_t)v64, s, 0x42uLL);
      v64[v35] = 0;
      sub_20B9AD640(s, v64, 0x42uLL);
      s[v35] = 0;
      v64[0] = 0;
      v14 = 1;
    }
    else
    {
      v14 = 0;
    }
    if (a4 < 0x12)
      goto LABEL_71;
    v36 = 0;
    v37 = *(unsigned __int16 *)((char *)a1 + v62);
    v38 = 18;
    v60 = v37;
    do
    {
      if (v37 != *(unsigned __int16 *)((char *)a3 + a4 - v38))
      {
        v39 = (uint64_t)(v38 - 16) >> 1;
        v40 = v64;
        v41 = v36;
        while (v39)
        {
          v42 = *(unsigned __int16 *)((char *)a3 + a4 + v41 - 18);
          *v40++ = v42;
          v41 += 2;
          --v39;
          if (!v42)
          {
            if (v39)
            {
              bzero(v40, 2 - v41);
              v37 = v60;
            }
            break;
          }
        }
        *(_WORD *)((char *)&v63[-1] + v38) = a2[34];
        v64[v38 / 2 - 7] = 0;
      }
      if (v38 > 0x16)
        break;
      v38 += 2;
      v36 -= 2;
    }
    while (v38 <= a4);
    if (!v64[0])
      goto LABEL_57;
    v43 = u_strlen(s);
    v44 = u_strlen(v64) + v43;
    if ((unint64_t)(v44 * 2 - 63) >= 0xFFFFFFFFFFFFFFBFLL)
    {
      sub_20B9AD6F8((uint64_t)v64, s, 0x42uLL);
      v64[v44] = 0;
      sub_20B9AD640(s, v64, 0x42uLL);
      s[v44] = 0;
      v64[0] = 0;
      ++v14;
LABEL_57:
      if (a4 >= 0x1A)
      {
        v45 = *(unsigned __int16 *)((char *)a1 + v62);
        v46 = (char *)a3 + a4;
        v47 = 26;
        v48 = 26;
        do
        {
          if (v45 != *(unsigned __int16 *)(v19 - v47 + 2))
          {
            v49 = &v46[-v48];
            v50 = v48 - 24;
            v51 = v50 >> 1;
            v52 = (uint64_t)v50 >> 1;
            v53 = 2 * v51;
            v54 = v64;
            while (v52)
            {
              v55 = *(unsigned __int16 *)v49;
              v49 += 2;
              *v54++ = v55;
              v53 -= 2;
              --v52;
              if (!v55)
              {
                if (v52)
                  bzero(v54, v53);
                break;
              }
            }
            *(_WORD *)((char *)&v61 + v47 + 4) = a2[35];
            v64[v48 / 2u - 11] = 0;
          }
          v48 += 2;
          v47 = v48;
        }
        while (v48 <= a4);
        if (v64[0])
        {
          v56 = u_strlen(s);
          v57 = u_strlen(v64) + v56;
          if ((unint64_t)(v57 * 2 - 63) < 0xFFFFFFFFFFFFFFBFLL)
            return -1;
          sub_20B9AD6F8((uint64_t)v64, s, 0x42uLL);
          v64[v57] = 0;
          sub_20B9AD640(s, v64, 0x42uLL);
          s[v57] = 0;
          v64[0] = 0;
          ++v14;
        }
      }
LABEL_71:
      v58 = *(const UChar **)v63;
      sub_20B9AD640(*(UChar **)v63, s, 0x42uLL);
      v59 = u_strlen(v58);
      *v61 = 2 * v59;
      return v14;
    }
    return -1;
  }
  if (a5 == 6)
  {
    v12 = 14;
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_20B98E3E8(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, _QWORD *a5, int a6, int a7, double a8)
{
  int v16;
  char v17;
  const __CFAllocator *v18;
  CFStringRef Copy;

  *(_QWORD *)a1 = &unk_24C460B90;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v16;
  *(_BYTE *)(a1 + 24) = (v17 & 8) != 0;
  *(double *)(a1 + 32) = a8;
  *(_QWORD *)a1 = off_24C468388;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &unk_24C4685F0;
  *(_DWORD *)(a1 + 48) = a6;
  v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(a1 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  if (a3)
    Copy = CFStringCreateCopy(v18, a3);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 64) = Copy;
  sub_20B87AA50(a1 + 72, a4, a5, a7);
  *(_WORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  *(_DWORD *)(a1 + 140) = sub_20B8D345C(a2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_20B98E518(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B87E150((const void **)(v1 + 64), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98E550(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, int a9)
{
  int v16;
  BOOL v17;
  const __CFAllocator *v18;
  CFStringRef Copy;
  int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v24;
  CFNumberRef v25;
  unsigned __int16 *v26;
  int v27;
  unint64_t v28;
  void *v29;
  __CFArray *Mutable;
  uint64_t *v31;
  uint64_t *v32;
  CFNumberRef v33;
  void *__p;
  void *v36;
  uint64_t v37;
  __int16 valuePtr;
  CFNumberRef v39;
  uint64_t v40;

  v16 = *(unsigned __int16 *)(*(_QWORD *)a6 + 6);
  v17 = (*(_BYTE *)(*(_QWORD *)a6 + 4) & 8) != 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v16;
  *(_BYTE *)(a1 + 24) = v17;
  *(_QWORD *)a1 = off_24C468388;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 40) = &unk_24C4685F0;
  *(_DWORD *)(a1 + 48) = a8;
  v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(a1 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  if (a3)
    Copy = CFStringCreateCopy(v18, a3);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 64) = Copy;
  sub_20B87AB0C(a1 + 72, **(_DWORD **)a6, a4, a5, a7, a9);
  *(_WORD *)(a1 + 136) = *(_WORD *)(*(_QWORD *)a6 + 4);
  v20 = sub_20B8D345C(a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 140) = v20;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  if (a9 == 17)
  {
    sub_20B9F1A84(*(_DWORD *)(*(_QWORD *)(*a7 + 240) + 4));
    v21 = *(_QWORD *)(a6 + 8);
    if (v21)
    {
      v22 = *(unsigned __int16 **)(a6 + 8);
      while (*v22++)
        ;
      v24 = *v22;
      valuePtr = v24;
      if (v24)
      {
        v25 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
        sub_20B88AE28((const void **)(a1 + 144), v25);
        v21 = *(_QWORD *)(a6 + 8);
      }
      if (v21)
      {
        v26 = (unsigned __int16 *)(v21 + 4);
        do
        {
          v27 = *(v26 - 2);
          ++v26;
        }
        while (v27);
        v28 = *(v26 - 1);
        v36 = 0;
        v37 = 0;
        __p = 0;
        sub_20B9F200C(&__p, v26, (uint64_t)&v26[4 * v28], v28);
        v29 = v36;
        if (__p != v36)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
          v31 = (uint64_t *)__p;
          v32 = (uint64_t *)v36;
          while (v31 != v32)
          {
            v40 = *v31;
            v33 = CFNumberCreate(0, kCFNumberSInt64Type, &v40);
            v39 = v33;
            CFArrayAppendValue(Mutable, v33);
            if (v33)
              CFRelease(v33);
            ++v31;
          }
          sub_20B88B74C((const void **)(a1 + 152), Mutable);
          v29 = __p;
        }
        if (v29)
        {
          v36 = v29;
          operator delete(v29);
        }
      }
    }
  }
  return a1;
}

void sub_20B98E780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  const void **v14;
  const void **v15;
  const void **v16;

  if (__p)
    operator delete(__p);
  sub_20B87E150(v16, 0);
  sub_20B88B74C(v15, 0);
  sub_20B88AE28(v14, 0);
  *(_QWORD *)(v13 + 72) = &off_24C4687D0;
  sub_20B811FE4(v13 + 120);
  sub_20B87E150((const void **)(v13 + 64), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98E820(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C468388;
  *(_QWORD *)(a1 + 40) = &unk_24C4685F0;
  CFRelease(*(CFTypeRef *)(a1 + 56));
  sub_20B87E150((const void **)(a1 + 160), 0);
  sub_20B88B74C((const void **)(a1 + 152), 0);
  sub_20B88AE28((const void **)(a1 + 144), 0);
  *(_QWORD *)(a1 + 72) = &off_24C4687D0;
  sub_20B811FE4(a1 + 120);
  sub_20B87E150((const void **)(a1 + 64), 0);
  return a1;
}

void sub_20B98E8AC(uint64_t a1)
{
  sub_20B98E820(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B98E8D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B98E8D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (!result)
    return *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t sub_20B98E8F0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 104) >> 2) & 1;
}

uint64_t sub_20B98E8FC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 104) >> 1) & 1;
}

uint64_t sub_20B98E908(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) & 1;
}

uint64_t sub_20B98E914(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 104) >> 3) & 1;
}

uint64_t sub_20B98E920(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 7;
}

BOOL sub_20B98E92C(_WORD *a1)
{
  return (*(uint64_t (**)(_WORD *))(*(_QWORD *)a1 + 48))(a1) != 1 || (a1[68] & 2) == 0;
}

uint64_t sub_20B98E970(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 120) + 208);
}

const void *sub_20B98E97C(uint64_t a1)
{
  return sub_20B9C9400(*(_QWORD *)(a1 + 120));
}

const void *sub_20B98E984(uint64_t a1)
{
  return sub_20B9C9348(*(_QWORD *)(a1 + 120));
}

uint64_t sub_20B98E98C(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 120) + 228);
}

uint64_t sub_20B98E998(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 120) + 224);
}

CFStringRef sub_20B98E9A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int16 *v7;
  uint64_t v8;
  _WORD *v9;
  __int16 v10;
  CFStringRef v11;
  void *v13[4];

  v13[3] = *(void **)MEMORY[0x24BDAC8D0];
  v1 = sub_20B87ABE8(a1 + 72, v13);
  MEMORY[0x24BDAC7A8](v1);
  v5 = v3 - v4;
  v6 = v5 >> 1;
  if (v5)
  {
    v7 = (__int16 *)v13[0];
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = v6;
    v9 = (_WORD *)((char *)v13 - v2);
    do
    {
      v10 = *v7++;
      *v9++ = v10 + 48;
      --v8;
    }
    while (v8);
  }
  v11 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)((char *)v13 - v2), v6);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  return v11;
}

void sub_20B98EA88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(_QWORD *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B98EAAC(uint64_t a1)
{
  return sub_20B9AA40C(a1 + 72);
}

uint64_t sub_20B98EAB4(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return a1 + 72;
}

uint64_t sub_20B98EAC4(uint64_t a1, uint64_t a2, const __CFString *a3, _DWORD **a4, int a5)
{
  uint64_t v9;
  int v10;
  const __CFAllocator *v11;
  const __CFString *v12;
  CFStringRef Copy;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  const __CFArray *v18;
  CFArrayRef v19;

  v9 = operator new();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  *(_WORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 20) = a5;
  *(_BYTE *)(v9 + 24) = 0;
  *(_QWORD *)v9 = off_24C468388;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 32) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(v9 + 40) = &unk_24C4685F0;
  *(_DWORD *)(v9 + 48) = v10;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(v9 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a3);
  v12 = *(const __CFString **)(a1 + 64);
  if (v12)
    Copy = CFStringCreateCopy(v11, v12);
  else
    Copy = 0;
  v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(a1 + 120);
  *(_DWORD *)(v9 + 80) = **a4;
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v9 + 64) = Copy;
  *(_QWORD *)(v9 + 72) = &off_24C4687D0;
  *(_QWORD *)(v9 + 128) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_WORD *)(v9 + 136) = *(_WORD *)(a1 + 136);
  *(_DWORD *)(v9 + 140) = sub_20B8D345C(a3);
  v17 = *(CFTypeRef *)(a1 + 144);
  if (v17)
    v17 = CFRetain(v17);
  *(_QWORD *)(v9 + 144) = v17;
  v18 = *(const __CFArray **)(a1 + 152);
  if (v18)
    v19 = CFArrayCreateCopy(0, v18);
  else
    v19 = 0;
  *(_QWORD *)(v9 + 152) = v19;
  *(_QWORD *)(v9 + 160) = 0;
  return v9;
}

void sub_20B98EC28(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  uint64_t v3;
  uint64_t v4;

  sub_20B88AE28(v2, 0);
  *(_QWORD *)(v1 + 72) = v4 + 16;
  sub_20B811FE4(v3);
  sub_20B87E150((const void **)(v1 + 64), 0);
  MEMORY[0x20BD39CB0](v1, 0x10E1C403F77FCFDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98EC88(uint64_t a1, const __CFString *a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  CFIndex Length;
  uint64_t v8;
  const __CFAllocator *v9;
  const __CFString *v10;
  CFStringRef Copy;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  const __CFArray *v16;
  CFArrayRef v17;

  v4 = operator new(4uLL);
  *v4 = 0;
  v5 = operator new();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  Length = CFStringGetLength(a2);
  v8 = *(_QWORD *)(a1 + 32);
  *(_WORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 20) = v6;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)v5 = off_24C468388;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 40) = &unk_24C4685F0;
  *(_DWORD *)(v5 + 48) = 64;
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(v5 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  v10 = *(const __CFString **)(a1 + 64);
  if (v10)
    Copy = CFStringCreateCopy(v9, v10);
  else
    Copy = 0;
  v12 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(v5 + 120) = *(_QWORD *)(a1 + 120);
  *(_DWORD *)(v5 + 80) = *v4;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = Length;
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(v5 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v5 + 116) = 0;
  *(_QWORD *)(v5 + 64) = Copy;
  *(_QWORD *)(v5 + 72) = &off_24C4687D0;
  *(_QWORD *)(v5 + 128) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_WORD *)(v5 + 136) = *(_WORD *)(a1 + 136);
  *(_DWORD *)(v5 + 140) = sub_20B8D345C(a2);
  v15 = *(CFTypeRef *)(a1 + 144);
  if (v15)
    v15 = CFRetain(v15);
  *(_QWORD *)(v5 + 144) = v15;
  v16 = *(const __CFArray **)(a1 + 152);
  if (v16)
    v17 = CFArrayCreateCopy(0, v16);
  else
    v17 = 0;
  *(_QWORD *)(v5 + 152) = v17;
  *(_QWORD *)(v5 + 160) = CFStringCreateCopy(v9, *(CFStringRef *)(a1 + 56));
  operator delete(v4);
  return v5;
}

void sub_20B98EE24(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_20B88AE28((const void **)(v2 + 144), 0);
  *(_QWORD *)(v2 + 72) = v4 + 16;
  sub_20B811FE4(v3);
  sub_20B87E150((const void **)(v2 + 64), 0);
  MEMORY[0x20BD39CB0](v2, 0x10E1C403F77FCFDLL);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98EEA8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 120) + 232);
}

uint64_t sub_20B98EEB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) + 152;
}

uint64_t sub_20B98EEC0(uint64_t a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  const __CFString *v4;
  CFStringRef Copy;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef v10;
  const __CFArray *v11;
  CFArrayRef v12;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = *(_DWORD *)(a1 - 20);
  *(_BYTE *)(v2 + 24) = *(_BYTE *)(a1 - 16);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)v2 = off_24C468388;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 40) = &unk_24C4685F0;
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 8);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(v2 + 56) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 16));
  v4 = *(const __CFString **)(a1 + 24);
  if (v4)
    Copy = CFStringCreateCopy(v3, v4);
  else
    Copy = 0;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 96) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 112) = v6;
  *(_QWORD *)(v2 + 64) = Copy;
  *(_QWORD *)(v2 + 72) = &off_24C4687D0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(v2 + 128) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_WORD *)(v2 + 136) = *(_WORD *)(a1 + 96);
  *(_DWORD *)(v2 + 140) = *(_DWORD *)(a1 + 100);
  v10 = *(CFTypeRef *)(a1 + 104);
  if (v10)
    v10 = CFRetain(v10);
  *(_QWORD *)(v2 + 144) = v10;
  v11 = *(const __CFArray **)(a1 + 112);
  if (v11)
    v12 = CFArrayCreateCopy(0, v11);
  else
    v12 = 0;
  *(_QWORD *)(v2 + 152) = v12;
  *(_QWORD *)(v2 + 160) = 0;
  return v2;
}

void sub_20B98F008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void **v3;
  uint64_t v4;

  sub_20B88AE28(v3, 0);
  *(_QWORD *)(v1 + 72) = v4 + 16;
  sub_20B811FE4(v2);
  sub_20B87E150((const void **)(v1 + 64), 0);
  MEMORY[0x20BD39CB0](v1, 0x10E1C403F77FCFDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98F068(_QWORD *a1)
{
  return sub_20B98EEC0((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20B98F078()
{
  return 1;
}

uint64_t sub_20B98F080(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20B98F088(uint64_t a1)
{
  return *(unsigned int *)(a1 + 140);
}

uint64_t sub_20B98F090(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_20B98F098(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

BOOL sub_20B98F0A0(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 120) + 228) == 0;
}

uint64_t sub_20B98F0B4()
{
  return 1;
}

uint64_t sub_20B98F0BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t sub_20B98F0C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) + 176;
}

void sub_20B98F0D0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, std::string *a5@<X8>)
{
  unsigned __int16 *v5;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  void **v19;
  std::string::size_type v20;
  void *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  void **v27;
  std::string::size_type v28;
  unint64_t v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  void *v33[2];
  unsigned __int8 v34;

  v5 = a2;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
  if (v8 <= 1)
  {
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    sub_20B99B2B8(a1, a2, a3, a5);
    return;
  }
  if (a3)
  {
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    std::string::reserve(a5, v8 + 3 * a3);
    v10 = *a4;
    if (a4[1] != *a4)
    {
      v11 = 0;
      while (1)
      {
        v12 = v10 + 40 * v11;
        v13 = *(unsigned __int16 *)(v12 + 24);
        if (v5)
          v14 = *(unsigned __int16 *)(v12 + 24);
        else
          v14 = 0;
        if (!v5 || !v14)
          goto LABEL_30;
        v15 = *v5;
        v16 = v15 - 48;
        v17 = (unsigned __int16)(v15 + 240);
        if (v16 >= 0xA && v17 >= 0xA)
          break;
LABEL_15:
        (*(void (**)(void **__return_ptr, uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 48))(__p, a1, v5);
        if ((SBYTE7(v31) & 0x80u) == 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if ((SBYTE7(v31) & 0x80u) == 0)
          v20 = BYTE7(v31);
        else
          v20 = (std::string::size_type)__p[1];
        std::string::append(a5, (const std::string::value_type *)v19, v20);
        if ((SBYTE7(v31) & 0x80000000) == 0)
          goto LABEL_39;
        v21 = __p[0];
LABEL_38:
        operator delete(v21);
LABEL_39:
        v10 = *a4;
        v29 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
        if (v11 != v29 - 1)
        {
          std::string::append(a5, " ", 1uLL);
          v10 = *a4;
          v29 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
        }
        v5 += v13;
        if (++v11 >= v29)
          return;
      }
      v22 = 0;
      while (v14 - 1 != v22)
      {
        v23 = v5[v22 + 1];
        v24 = v23 - 48;
        ++v22;
        v25 = (unsigned __int16)(v23 + 240);
        if (v24 < 0xA || v25 <= 9)
        {
          if (v22 < v14)
            goto LABEL_15;
          break;
        }
      }
LABEL_30:
      v32 = 0;
      *(_OWORD *)__p = 0u;
      v31 = 0u;
      (*(void (**)(void **__return_ptr, uint64_t, unsigned __int16 *, unint64_t, void **, _QWORD))(*(_QWORD *)a1 + 40))(v33, a1, v5, v14, __p, 0);
      if ((v34 & 0x80u) == 0)
        v27 = v33;
      else
        v27 = (void **)v33[0];
      if ((v34 & 0x80u) == 0)
        v28 = v34;
      else
        v28 = (std::string::size_type)v33[1];
      std::string::append(a5, (const std::string::value_type *)v27, v28);
      if (((char)v34 & 0x80000000) == 0)
        goto LABEL_39;
      v21 = v33[0];
      goto LABEL_38;
    }
  }
  else
  {
    sub_20B80BBD0(a5, "");
  }
}

void sub_20B98F344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B98F3AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(char *)(a2 + 55);
  if (v4 >= 0)
    v3 = a2 + 32;
  v5 = *(_QWORD *)(a2 + 40);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 55);
  v13[0] = v3;
  v13[1] = v5;
  v6 = a1[5];
  if (!v6)
    sub_20B80BB74();
  v8 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v13);
  v10 = v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*a1 + 32))(a1, v8, v10, v11, 0);
}

void sub_20B98F468(_QWORD *a1)
{
  sub_20B8BACE8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B98F48C(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6, char a7, char a8, uint64_t a9)
{
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  CFMutableArrayRef Mutable;
  uint64_t v20;
  uint64_t v21;
  CFMutableArrayRef v22;
  uint64_t v23;
  CFMutableArrayRef v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_signpost_id_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  char **v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char **v49;
  char *v50;
  char *v51;
  __CFArray *v52;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD aBlock[5];
  uint8_t buf[8];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v16 = sub_20B8D0E3C(a2);
  sub_20B9F6CA8(a1, v16, a3, a4, a6, a9, a7, a8, 0, 0);
  sub_20B9B3700(a1 + 176, a2, a9);
  v56 = (uint64_t *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 289) = (_DWORD)a2 != 5;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_QWORD *)(a1 + 336) = 0;
  v17 = sub_20B8D0E3C(a2);
  sub_20BA11958(a1 + 344, v17);
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = a7;
  sub_20B947B28(a2, (uint64_t *)buf);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)buf;
  v55 = (uint64_t *)(a1 + 384);
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  sub_20B8B0EB0(a1 + 424);
  v18 = operator new();
  *(_QWORD *)v18 = off_24C461CC8;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v18 + 16) = -1;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_DWORD *)(v18 + 56) = 1065353216;
  *(_QWORD *)(v18 + 64) = a1 + 176;
  *(_QWORD *)(v18 + 72) = 0;
  *(_BYTE *)(v18 + 80) = 0;
  *(_QWORD *)v18 = &unk_24C4652C0;
  *(_QWORD *)(v18 + 8) = Mutable;
  *(_QWORD *)(a1 + 456) = v18;
  v20 = operator new();
  *(_QWORD *)v20 = off_24C461CC8;
  *(_QWORD *)(v20 + 8) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v20 + 16) = -1;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_DWORD *)(v20 + 56) = 1065353216;
  *(_QWORD *)(v20 + 64) = a1 + 176;
  *(_QWORD *)(v20 + 72) = 0;
  *(_BYTE *)(v20 + 80) = 0;
  *(_QWORD *)v20 = &unk_24C4652C0;
  *(_QWORD *)(a1 + 464) = v20;
  v21 = operator new();
  *(_QWORD *)v21 = off_24C461CC8;
  v22 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v21 + 16) = -1;
  *(_OWORD *)(v21 + 24) = 0u;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_DWORD *)(v21 + 56) = 1065353216;
  *(_QWORD *)v21 = &unk_24C463040;
  *(_QWORD *)(v21 + 8) = v22;
  *(_QWORD *)(v21 + 64) = a1 + 176;
  *(_QWORD *)(v21 + 72) = 0;
  *(_BYTE *)(v21 + 80) = 0;
  *(_QWORD *)(a1 + 472) = v21;
  v23 = operator new();
  *(_QWORD *)v23 = off_24C461CC8;
  v24 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v23 + 16) = -1;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_DWORD *)(v23 + 56) = 1065353216;
  *(_QWORD *)(v23 + 64) = a1 + 176;
  *(_QWORD *)(v23 + 72) = 0;
  *(_BYTE *)(v23 + 80) = 0;
  *(_QWORD *)v23 = &unk_24C4658B0;
  *(_QWORD *)(v23 + 8) = v24;
  *(_QWORD *)(a1 + 480) = v23;
  *(_QWORD *)(a1 + 488) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  sub_20B89D2F0((uint64_t *)(a1 + 584));
  *(_QWORD *)(a1 + 592) = sub_20B9547EC();
  v25 = (_QWORD *)operator new();
  v26 = *(_QWORD *)(a1 + 472);
  *v25 = *(_QWORD *)(a1 + 456);
  v25[1] = v26;
  v25[2] = a1 + 360;
  v25[3] = a1 + 176;
  v25[4] = a1 + 552;
  *(_QWORD *)(a1 + 600) = v25;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  *(_QWORD *)(a1 + 248) = a1;
  v27 = operator new();
  sub_20B9A807C(v27, a1 + 176, a9);
  sub_20B9956AC((uint64_t *)(a1 + 280), v27);
  v28 = operator new();
  sub_20B878B5C(v28, (int *)(a1 + 176));
  *(_QWORD *)(a1 + 496) = v28;
  v29 = sub_20B9A7C5C(0xDu);
  v30 = os_signpost_id_make_with_pointer(v29, (const void *)a1);
  v31 = sub_20B9A7C5C(0xDu);
  if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v32 = v31;
    if (os_signpost_enabled(v31))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v32, OS_SIGNPOST_INTERVAL_BEGIN, v30, "LookupControllerInit", "LookupController init with input method [%d].", buf, 8u);
    }
  }
  v33 = *(_QWORD *)(a1 + 280);
  v34 = *(_QWORD *)(a1 + 376);
  v35 = operator new();
  sub_20B9B952C(v35, (int *)(a1 + 176), v33, v34, a1 + 288, 0);
  v36 = *v55;
  *v55 = v35;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v37 = sub_20B9A7C5C(0xDu);
  if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v38 = v37;
    if (os_signpost_enabled(v37))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v38, OS_SIGNPOST_INTERVAL_END, v30, "LookupControllerInit", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v39 = (char **)operator new();
  v40 = (_QWORD *)operator new();
  v41 = *(_QWORD *)(a1 + 456);
  *v40 = &unk_24C463000;
  v40[1] = v41;
  *(_QWORD *)buf = v40;
  v42 = (_QWORD *)operator new();
  v43 = *(_QWORD *)(a1 + 472);
  v44 = (_QWORD *)operator new();
  v45 = *(_QWORD *)(a1 + 480);
  v46 = *(_QWORD *)(a1 + 456);
  *v44 = &unk_24C465258;
  v44[1] = v45;
  v47 = MEMORY[0x24BDAC760];
  v44[2] = v46;
  aBlock[0] = v47;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_20B98FF78;
  aBlock[3] = &unk_24C46C5E0;
  aBlock[4] = a1;
  sub_20B908580(v42, v43, (uint64_t)v44, aBlock);
  v59 = v42;
  sub_20B88AA84(v39, (uint64_t *)buf, 2);
  *(_QWORD *)(a1 + 448) = v39;
  *(_QWORD *)(a1 + 232) = 0;
  if (!*(_BYTE *)(a1 + 368))
  {
    v48 = *v56;
    if ((int)a2 > 4)
    {
      if ((_DWORD)a2 == 5)
      {
        v49 = (char **)operator new();
        sub_20B9771C8(v49, a5, v48, a1);
        v51 = *v49;
        goto LABEL_20;
      }
      if ((_DWORD)a2 == 13)
      {
        v49 = (char **)operator new();
        sub_20B973D30(v49, a5, v48, a1);
        v50 = (char *)&unk_24C465920;
        goto LABEL_18;
      }
    }
    else
    {
      if ((_DWORD)a2 == 2)
      {
        v49 = (char **)operator new();
        sub_20B975D10(v49, a5, v48, a1);
        v50 = (char *)&unk_24C465338;
        goto LABEL_18;
      }
      if ((_DWORD)a2 == 4)
      {
        v49 = (char **)operator new();
        sub_20B975D10(v49, a5, v48, a1);
        v50 = (char *)&unk_24C4654A0;
LABEL_18:
        v51 = v50 + 16;
        *v49 = v51;
LABEL_20:
        *(_QWORD *)(a1 + 416) = v49;
        (*((void (**)(char **))v51 + 2))(v49);
        sub_20B9C4608(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), *(_QWORD *)(a1 + 416), (uint64_t)sub_20B9900F0);
        if (*(_BYTE *)(a1 + 368))
          goto LABEL_24;
        v48 = *v56;
        goto LABEL_23;
      }
    }
    *(_QWORD *)(a1 + 416) = 0;
LABEL_23:
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(v48 + 328);
  }
LABEL_24:
  if ((_DWORD)a2 == 13)
  {
    v52 = sub_20B8CF198();
    sub_20B990174(a1, v52);
  }
  return a1;
}

void sub_20B98FC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x20BD39CB0](v17, 0x10E1C408BBE15C0);
  v20 = *(_QWORD *)(v15 + 600);
  *(_QWORD *)(v15 + 600) = 0;
  if (v20)
    MEMORY[0x20BD39CB0](v20, 0x30C406EBB3485);
  v21 = *v18;
  *v18 = 0;
  if (v21)
    sub_20B89D6E8((uint64_t)v18, v21);
  v22 = (uint64_t *)(v15 + 504);
  v23 = *(void **)(v15 + 528);
  if (v23)
  {
    *(_QWORD *)(v15 + 536) = v23;
    operator delete(v23);
  }
  v24 = *v22;
  *v22 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_20B88B718((const void **)(v15 + 488), 0);
  v25 = *(_QWORD *)(v15 + 480);
  *(_QWORD *)(v15 + 480) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(v15 + 472);
  *(_QWORD *)(v15 + 472) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(_QWORD *)(v15 + 464);
  *(_QWORD *)(v15 + 464) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(v15 + 456);
  *(_QWORD *)(v15 + 456) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_20B8B0F78(a10);
  sub_20B88B74C((const void **)(v15 + 408), 0);
  v29 = *(_QWORD *)(v15 + 392);
  *(_QWORD *)(v15 + 392) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  v30 = *a14;
  *a14 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
  v31 = *(_QWORD *)(v15 + 376);
  *(_QWORD *)(v15 + 376) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  sub_20BA119B0(a11);
  sub_20B88B74C((const void **)(v15 + 336), 0);
  sub_20B8E82D0(a12);
  sub_20B9956AC(a15, 0);
  sub_20B9B37BC(v16);
  sub_20B9F7C44(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20B98FF78(uint64_t a1, void *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const void *v20;
  void *v21;
  int v22;

  v5 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v5 + 201) & 0x40) != 0)
    return sub_20B935824(a2, a3, 0);
  v6 = *(_QWORD *)(v5 + 384);
  v8 = *(_QWORD *)(v6 + 16);
  v7 = *(_QWORD *)(v6 + 24);
  if (v8 != v7)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 - 8) + 24))(*(_QWORD *)(v7 - 8)))
      return sub_20B935824(a2, a3, 0);
  }
  v10 = (const __CFString *)objc_msgSend_rawCandidate(a2, (const char *)a2, (uint64_t)a3);
  if (v10)
  {
    v11 = (__CFString *)v10;
    v12 = (*((uint64_t (**)(const __CFString *))v10->isa + 5))(v10);
    v13 = 40;
    if (!v12)
      v13 = 24;
    v10 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v11->isa + v13))(v11);
  }
  if (CFStringGetLength(v10) != 2)
    return -1;
  v16 = (const void *)objc_msgSend_rawCandidate(a2, v14, v15);
  v17 = __dynamic_cast(v16, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v17 + 104))(v17) & 0x20) == 0)
    return -1;
  v20 = (const void *)objc_msgSend_rawCandidate(a3, v18, v19);
  v21 = v20
      ? __dynamic_cast(v20, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0): 0;
  if ((*(int (**)(void *))(*(_QWORD *)v17 + 112))(v17) < 1)
    return -1;
  v22 = 100 * (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 112))(v21);
  if (v22 / (*(int (**)(void *))(*(_QWORD *)v17 + 112))(v17) < 81)
    return 1;
  else
    return -1;
}

void sub_20B9900F0(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  CFTypeID v7;

  if (a2 && theDict)
  {
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x24BE5EE90]);
    v7 = CFGetTypeID(Value);
    if (v7 == CFBooleanGetTypeID() && Value == (const void *)*MEMORY[0x24BDBD270])
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
  }
}

uint64_t sub_20B990174(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeRef v6;

  v3 = *(CFTypeRef *)(a1 + 512);
  if (v3 == cf)
    return 0;
  if (cf && v3)
  {
    if (CFEqual(v3, cf))
      return 0;
    v3 = *(CFTypeRef *)(a1 + 512);
  }
  if (v3)
    CFRelease(v3);
  if (cf)
    v6 = CFRetain(cf);
  else
    v6 = 0;
  *(_QWORD *)(a1 + 512) = v6;
  sub_20B99188C(a1, 1, 1, 0);
  return sub_20B9E2C08(*(_QWORD *)(a1 + 384) + 80, (CFArrayRef)cf);
}

uint64_t sub_20B990208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v24;

  v4 = *(_QWORD *)(a1 + 448);
  if (v4)
  {
    v24 = *(void ***)(a1 + 448);
    sub_20B882394(&v24);
    MEMORY[0x20BD39CB0](v4, 0x1020C40DBF2485DLL);
  }
  v5 = *(_QWORD *)(a1 + 496);
  if (v5)
  {
    v6 = sub_20B878F04(v5);
    MEMORY[0x20BD39CB0](v6, 0x1060C401A2F9FBALL);
  }
  v7 = *(const char **)(a1 + 416);
  if (v7)
  {
    sub_20B9C4664(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (uint64_t)v7);
    v8 = *(_QWORD *)(a1 + 416);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *(const void **)(a1 + 512);
  if (v9)
    CFRelease(v9);
  sub_20B89D410(*(_QWORD *)(a1 + 584), v7, a3);
  v10 = (uint64_t *)(a1 + 584);
  v11 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v11)
    MEMORY[0x20BD39CB0](v11, 0x30C406EBB3485);
  v12 = *v10;
  *v10 = 0;
  if (v12)
    sub_20B89D6E8(a1 + 584, v12);
  v13 = *(void **)(a1 + 528);
  if (v13)
  {
    *(_QWORD *)(a1 + 536) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_20B88B718((const void **)(a1 + 488), 0);
  v15 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_20B8B0F78(a1 + 424);
  sub_20B88B74C((const void **)(a1 + 408), 0);
  v19 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  v20 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  v21 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_20BA119B0((const void **)(a1 + 344));
  sub_20B88B74C((const void **)(a1 + 336), 0);
  sub_20B8E82D0(a1 + 296);
  sub_20B9956AC((uint64_t *)(a1 + 280), 0);
  sub_20B9A5850((uint64_t **)(a1 + 264), 0);
  v22 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return sub_20B9F7C44(a1);
}

uint64_t sub_20B990434(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B98F48C(v4, *a1, *((const void **)a1 + 5), *((const void **)a1 + 6), *((const void **)a1 + 3), *((const void **)a1 + 7), *((_BYTE *)a1 + 8), *((_BYTE *)a1 + 9), a2);
  return v4;
}

void sub_20B9904A4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10E0C4045A473D3);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20B99048CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9904F0(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFArray *a5, const __CFArray *a6, const __CFString *a7)
{
  uint64_t *result;
  uint64_t *v15;
  void *v16;
  void *v17;
  CFIndex Count;
  CFIndex v19;
  CFIndex i;
  void *ValueAtIndex;
  uint64_t v22;
  _BOOL8 v23;

  result = MecabraContextCreateMutable(0);
  if (result)
  {
    v15 = result;
    if (a7)
    {
      if (CFStringGetLength(a7) >= 1)
      {
        v16 = (void *)sub_20B990618(a1, a7);
        if (v16)
        {
          v17 = v16;
          MecabraContextAddCandidate(v15, v16);

        }
      }
    }
    if (a6)
    {
      Count = CFArrayGetCount(a6);
      if (Count >= 1)
      {
        v19 = Count;
        for (i = 0; i != v19; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(a6, i);
          MecabraContextAddCandidate(v15, ValueAtIndex);
        }
      }
    }
    v22 = *v15;
    if (a4 | (unint64_t)a5)
    {
      if (v22)
      {
        sub_20B96AD78(*v15, a4, a5);
        v22 = *v15;
      }
    }
    v23 = sub_20B990694(a1, a2, a3, v22);
    MecabraContextRelease(v15);
    return (uint64_t *)v23;
  }
  return result;
}

uint64_t sub_20B990618(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B872064(v4, a2, a1, 1);
  return sub_20B8E1754(v4);
}

void sub_20B990670(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

BOOL sub_20B990694(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v7;
  _BOOL8 v8;

  v7 = sub_20B96B98C(a2, a4);
  v8 = sub_20B990720(a1, v7, a3, a4);
  if (v7)
    CFRelease(v7);
  return v8;
}

void sub_20B990708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88B74C((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B990720(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_signpost_id_t v10;
  NSObject *v11;
  uint64_t v12;
  CFIndex Count;
  unint64_t v14;
  char v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  float v20;
  BOOL v21;
  __CFArray *Mutable;
  unint64_t v23;
  const void *ValueAtIndex;
  CFIndex v25;
  CFIndex v26;
  unsigned int (***v27)(_QWORD);
  CFMutableStringRef v28;
  CFIndex v29;
  CFIndex v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  CFIndex v36;
  _QWORD **v37;
  int v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  const void *v44;
  unint64_t v45;
  CFIndex Length;
  CFIndex location;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex v54;
  CFIndex v55;
  uint64_t v56;
  unsigned int (***v57)(_QWORD);
  const __CFArray *v58;
  uint64_t v59;
  CFArrayRef Copy;
  CFIndex v61;
  unsigned int (***v62)(_QWORD);
  unsigned int (***v63)(_QWORD);
  uint64_t v64;
  int64x2_t *v65;
  unsigned int v66;
  _BOOL8 v67;
  int v68;
  _QWORD **v69;
  _QWORD *i;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const void *v74;
  unint64_t v75;
  uint64_t v76;
  const void *v77;
  uint64_t (*v78)(void *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const __CFString *AnalysisString;
  uint64_t v90;
  uint64_t (*v91)(void *, char *, uint64_t);
  unint64_t v92;
  const __CFArray *v93;
  CFIndex v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const __CFArray *v100;
  CFIndex v101;
  const __CFString *v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  NSObject *v110;
  os_signpost_id_t v111;
  NSObject *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unsigned int v116;
  void *j;
  const char *v118;
  uint64_t v119;
  _QWORD *v120;
  _WORD *v121;
  _WORD *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unsigned int (****v127)(_QWORD);
  CFIndex v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int (***v131)(_QWORD);
  uint64_t v132;
  unint64_t v133;
  int v134;
  CFIndex idx;
  uint64_t v136;
  const __CFString *cf;
  __CFArray *v138;
  os_signpost_id_t ptr;
  char v140;
  uint8_t *v141;
  uint8_t buf[8];
  uint64_t v143;
  void (*v144)(uint64_t, const void *);
  void *v145;
  uint64_t v146;
  CFRange v147;
  CFRange v148;

  ptr = 0;
  v8 = sub_20B9A7C5C(0xDu);
  ptr = os_signpost_id_make_with_pointer(v8, &ptr);
  v9 = sub_20B9A7C5C(0xDu);
  v10 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v10, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  if (*(_DWORD *)(a1 + 176) == 13)
    v12 = a3 | 0x10;
  else
    v12 = a3;
  v136 = v12;
  if (a4)
    sub_20B88826C(a4, kMecabraContextOptionPrivateMode);
  LMLanguageModelSetParameterValue();
  *(_QWORD *)(a1 + 560) = -1;
  if (a4 && *(_DWORD *)(*(_QWORD *)(a1 + 592) + 4) <= 7u)
    sub_20B96AE80(a4);
  if (!a2)
  {
    Count = 0;
    goto LABEL_30;
  }
  Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
LABEL_30:
    v14 = 0;
    v15 = 0;
    v17 = 0;
    goto LABEL_31;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0.0;
  v17 = 1;
  do
  {
    v18 = *((_QWORD *)CFArrayGetValueAtIndex(a2, v14) + 3);
    if (v14
      || (*(_WORD *)(a1 + 274) = 0, (**(unsigned int (***)(uint64_t))v18)(v18) == 2)
      || (**(unsigned int (***)(uint64_t))v18)(v18) == 3
      || !*(_BYTE *)(*(_QWORD *)(a1 + 280) + 250)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18) != 64
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18) != 35)
    {
      v19 = (**(uint64_t (***)(uint64_t))v18)(v18);
      v20 = 0.1;
      if (v19 != 2)
      {
        if ((**(unsigned int (***)(uint64_t, float))v18)(v18, 0.1) == 3)
          v20 = 0.1;
        else
          v20 = 1.0;
      }
      v16 = v16 + v20;
      if (v16 > 255.0)
        goto LABEL_31;
    }
    else
    {
      *(_WORD *)(a1 + 274) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v15 = 1;
    }
    v17 = (uint64_t)++v14 < Count;
  }
  while (Count != v14);
  v14 = Count;
LABEL_31:
  if ((v15 & 1) != 0 || v14 != Count)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v23 = v15 & 1;
    if (v14 > v23)
    {
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v23);
        CFArrayAppendValue(Mutable, ValueAtIndex);
        ++v23;
      }
      while (v14 != v23);
    }
    v138 = Mutable;
    if (Mutable)
    {
      v25 = 0;
      do
      {
        v26 = CFArrayGetCount(a2);
        v21 = v25 < v26;
        if (v25 >= v26)
          break;
        v27 = (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(a2, v25) + 3);
        if ((**v27)(v27) == 2)
          break;
        ++v25;
      }
      while ((**v27)(v27) != 3);
      a2 = Mutable;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v17 = 0;
    v21 = 0;
    v138 = 0;
  }
  v28 = CFStringCreateMutable(0, 0);
  cf = v28;
  if (!a2)
  {
    v33 = 0;
    v29 = 0;
LABEL_53:
    v31 = 0;
LABEL_54:
    *(_BYTE *)(a1 + 552) = 0;
    if (!v21)
    {
      if (v17)
        goto LABEL_75;
      v45 = atomic_load(&qword_25472BEF0);
      if (v45 != -1)
      {
        *(_QWORD *)buf = &v140;
        v141 = buf;
        std::__call_once(&qword_25472BEF0, &v141, (void (__cdecl *)(void *))sub_20B995474);
      }
      Length = CFStringGetLength(v28);
      v147.location = 0;
      v147.length = Length;
      if (!CFStringFindCharacterFromSet(v28, (CFCharacterSetRef)qword_25472BEE0, v147, 0, 0)
        || (v148.location = 0,
            v148.length = Length,
            CFStringFindCharacterFromSet(v28, (CFCharacterSetRef)qword_25472BEE8, v148, 0, 0))
        || (location = CFStringFind(v28, CFSTR("."), 0).location, location != -1) && location != Length - 1)
      {
LABEL_75:
        sub_20B99188C(a1, 1, 1, 0);
        goto LABEL_76;
      }
    }
    goto LABEL_55;
  }
  v29 = CFArrayGetCount(a2);
  if (v29 < 1)
  {
    v33 = 0;
    goto LABEL_53;
  }
  v30 = 0;
  v31 = 1;
  while (1)
  {
    v32 = *((_QWORD *)CFArrayGetValueAtIndex(a2, v30) + 3);
    if ((**(unsigned int (***)(uint64_t))v32)(v32) == 2
      || (**(unsigned int (***)(uint64_t))v32)(v32) == 3)
    {
      break;
    }
    *(_WORD *)buf = 0;
    *(_WORD *)buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    CFStringAppendCharacters(v28, (const UniChar *)buf, 1);
    v31 = ++v30 < v29;
    if (v29 == v30)
    {
      v33 = 1;
      goto LABEL_54;
    }
  }
  v33 = 1;
  *(_BYTE *)(a1 + 552) = 1;
LABEL_55:
  v34 = *(_QWORD *)(a1 + 416);
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
    v35 = *(_QWORD *)(a1 + 416);
    *(_BYTE *)(v35 + 96) = (v136 & 0x80) == 0;
    sub_20B9727D8(v35, 1);
    if (!*(_BYTE *)(a1 + 368))
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 328);
  }
  v134 = v33;
  v36 = v29 - 1;
  if (v29 == 1 && !v31)
  {
    v37 = (_QWORD **)CFArrayGetValueAtIndex(a2, 0);
    v38 = (*(uint64_t (**)(_QWORD *))(*v37[3] + 8))(v37[3]);
    if (v38 == CFStringGetCharacterAtIndex(kMecabraAnalysisStringForFacemark[0], 0))
    {
      sub_20B99188C(a1, 1, 1, 0);
      if (!a4 || sub_20B88826C(a4, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270])
      {
        v39 = *(_QWORD *)(a1 + 416);
        v40 = v39 != 0;
        if (v39)
        {
          *(_QWORD *)buf = MEMORY[0x24BDAC760];
          v143 = 0x40000000;
          v144 = sub_20B9953CC;
          v145 = &unk_24C49F978;
          v146 = a1;
          sub_20B9FBBC0(*(_QWORD *)(v39 + 152), (uint64_t)buf);
          v41 = *(_QWORD *)(a1 + 448);
          v43 = *(_QWORD **)v41;
          v42 = *(_QWORD **)(v41 + 8);
          *(_QWORD *)(v41 + 24) = *(_QWORD *)v41;
          *(_QWORD *)(v41 + 32) = 0;
          while (v43 != v42)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)*v43 + 24))(*v43);
            ++v43;
            v42 = *(_QWORD **)(v41 + 8);
          }
        }
        goto LABEL_204;
      }
LABEL_76:
      v40 = 0;
      goto LABEL_204;
    }
  }
  if (a4)
    v44 = *(const void **)(a4 + 48);
  else
    v44 = 0;
  sub_20B9BA770(*(_QWORD *)(a1 + 384), v136, *(unsigned __int8 *)(a1 + 368), (id *)a4);
  v48 = *(_QWORD *)(a1 + 384);
  if ((*(_BYTE *)(*(_QWORD *)(v48 + 8) + 25) & 0x40) == 0)
    sub_20B951A24((const void **)(v48 + 56), v44, cf);
  v49 = sub_20B9032B8(a4, a1);
  *(_QWORD *)(a1 + 240) = v49;
  if ((sub_20B9A9580(*(_QWORD *)(a1 + 280)) & 1) != 0 || *(_QWORD *)(a1 + 360) != v136)
    goto LABEL_93;
  idx = 0;
  if (!v49)
    goto LABEL_94;
  v50 = *(_QWORD *)(a1 + 504);
  if (!v50)
    goto LABEL_94;
  v51 = sub_20B9D86C4(v50, v49);
  idx = 0;
  if (!a2 || !v51)
    goto LABEL_94;
  if (!*(_QWORD *)(a1 + 408))
    goto LABEL_93;
  v52 = CFArrayGetCount(a2);
  v53 = CFArrayGetCount(*(CFArrayRef *)(a1 + 408));
  idx = 0;
  if (!v52)
    goto LABEL_94;
  v54 = v53;
  if (!v53)
    goto LABEL_94;
  v55 = sub_20B991FBC(a2, *(const __CFArray **)(a1 + 408));
  v133 = v55;
  v56 = v55;
  if (!v55)
    goto LABEL_220;
  idx = v55;
  if (v55 != v54)
  {
    v57 = (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 408), v54 - 1)
                                                 + 3);
    if (!(**v57)(v57) || (**v57)(v57) == 1)
    {
LABEL_93:
      idx = 0;
      goto LABEL_94;
    }
    v127 = (unsigned int (****)(_QWORD))CFArrayGetValueAtIndex(a2, v52 - 1);
    idx = 0;
    if ((**v127[3])(v127[3]) != 2)
      goto LABEL_94;
    v128 = v52 - 2;
    if (v52 < 2)
      goto LABEL_94;
    v129 = (v52 << 32) - 0x100000000;
    v130 = (v52 << 32) - 0x200000000;
    while (1)
    {
      v132 = v128;
      v131 = (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(a2, v128) + 3);
      if (!(**v131)(v131) || (**v131)(v131) == 1)
        break;
      idx = 0;
      v129 -= 0x100000000;
      v130 -= 0x100000000;
      v128 = v132 - 1;
      if (v132 <= 0)
        goto LABEL_94;
    }
    v56 = v129 >> 32;
    if (v133 <= v130 >> 32)
      v56 = 0;
    if ((_DWORD)v132 == -1)
      v56 = 0;
LABEL_220:
    idx = v56;
  }
LABEL_94:
  v58 = *(const __CFArray **)(a1 + 408);
  if (v58)
    v58 = (const __CFArray *)CFArrayGetCount(v58);
  if (idx < (unint64_t)v58)
    sub_20B99188C(a1, 1, 0, idx);
  *(_QWORD *)(a1 + 360) = v136;
  v59 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v49;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  if (a2)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  else
    Copy = 0;
  sub_20B88B74C((const void **)(a1 + 408), Copy);
  if (idx >= v29)
    goto LABEL_184;
  sub_20B8B1020((_BYTE *)(a1 + 424), cf, a2, *(_QWORD *)(a1 + 360), a4, *(_QWORD *)(a1 + 504));
  sub_20B9689BC(*(uint64_t **)(a1 + 224));
  v61 = idx;
  do
  {
    v62 = (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(a2, v61) + 3);
    if (v61 >= v36)
      v63 = 0;
    else
      v63 = (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(a2, v61 + 1) + 3);
    v64 = *(_QWORD *)(a1 + 384);
    *(_BYTE *)(v64 + 41) = sub_20B991A0C(a2, v61);
    v65 = *(int64x2_t **)(a1 + 384);
    if (v63)
    {
      v66 = (**v62)(v62);
      v67 = v66 != (**v63)(v63);
    }
    else
    {
      v67 = 1;
    }
    sub_20B9B9A58(v65, v62, v67);
    ++v61;
  }
  while (v29 != v61);
  if (*(_DWORD *)(a1 + 208) != 1)
  {
    v68 = *(_DWORD *)(a1 + 200) & 0x801;
    if (v68)
    {
      v69 = *(_QWORD ***)(a1 + 448);
      for (i = *v69; i != v69[1]; ++i)
        (*(void (**)(_QWORD))(*(_QWORD *)*i + 32))(*i);
      sub_20B9932D4(a1);
    }
    else
    {
      sub_20B9932D4(a1);
      v71 = *(_QWORD *)(a1 + 384);
      if (*(_BYTE *)(v71 + 1176) || *(_BYTE *)(v71 + 1200))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 472) + 56))(*(_QWORD *)(a1 + 472));
        if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8)))
        {
          if (CFArrayGetCount(*(CFArrayRef *)(v71 + 1184)))
          {
            v72 = 0;
            do
            {
              v73 = *(_QWORD *)(a1 + 472);
              v74 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v71 + 1184), v72);
              (*(void (**)(uint64_t, const void *))(*(_QWORD *)v73 + 16))(v73, v74);
              ++v72;
            }
            while (v72 < CFArrayGetCount(*(CFArrayRef *)(v71 + 1184)));
          }
          if (CFArrayGetCount(*(CFArrayRef *)(v71 + 1208)))
          {
            v75 = 0;
            do
            {
              v76 = *(_QWORD *)(a1 + 472);
              v77 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v71 + 1208), v75);
              (*(void (**)(uint64_t, const void *))(*(_QWORD *)v76 + 16))(v76, v77);
              ++v75;
            }
            while (v75 < CFArrayGetCount(*(CFArrayRef *)(v71 + 1208)));
          }
          *(_BYTE *)(v71 + 1176) = 0;
          *(_BYTE *)(v71 + 1200) = 0;
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 24) + 24) & 0x4000) != 0)
            v78 = sub_20B935744;
          else
            v78 = sub_20B935824;
          (*(void (**)(_QWORD, uint64_t (*)(void *, char *, uint64_t), _QWORD))(**(_QWORD **)(a1 + 472)
                                                                                                  + 32))(*(_QWORD *)(a1 + 472), v78, 0);
        }
      }
    }
    v79 = *(_QWORD *)(a1 + 384);
    if (*(_BYTE *)(v79 + 1128))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 480) + 56))(*(_QWORD *)(a1 + 480));
      v80 = *(_QWORD *)(a1 + 384);
      v81 = *(_QWORD **)(v80 + 16);
      v82 = *(_QWORD **)(v80 + 24);
      if (v81 == v82)
      {
        v83 = 0;
      }
      else
      {
        v83 = 0;
        do
        {
          v83 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v81 + 32))(*v81);
          ++v81;
        }
        while (v81 != v82);
      }
      if (CFArrayGetCount(*(CFArrayRef *)(v79 + 1136)))
      {
        v84 = 0;
        do
        {
          v85 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v79 + 1136), v84);
          v88 = v85;
          if (!v68
            || (AnalysisString = (const __CFString *)MecabraCandidateGetAnalysisString(v85, v86, v87),
                CFStringGetLength(AnalysisString) == v83))
          {
            (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 480) + 16))(*(_QWORD *)(a1 + 480), v88);
          }
          ++v84;
        }
        while (v84 < CFArrayGetCount(*(CFArrayRef *)(v79 + 1136)));
      }
      *(_BYTE *)(v79 + 1128) = 0;
      v90 = *(_QWORD *)(a1 + 480);
      v91 = sub_20B935AD8(*(_QWORD **)(a1 + 600));
      (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), _QWORD))(*(_QWORD *)v90 + 32))(v90, v91, 0);
      v92 = CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 480) + 8));
      if (v92 > 0xC8)
        sub_20B96FE48(*(_QWORD *)(a1 + 480), 200, v92 - 200);
    }
  }
  if (*(_BYTE *)(a1 + 272))
  {
    if (!*(_WORD *)(a1 + 274) && (*(_BYTE *)(a1 + 362) & 8) != 0 && (*(_DWORD *)(a1 + 200) & 0x10810) == 0x10)
    {
      v93 = *(const __CFArray **)(a1 + 408);
      if (CFArrayGetCount(v93) >= 1)
      {
        v94 = 0;
        v95 = 0;
        v96 = 0;
        while (1)
        {
          v97 = *((_QWORD *)CFArrayGetValueAtIndex(v93, v94) + 3);
          if ((**(unsigned int (***)(uint64_t))v97)(v97) == 1
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97) - 97 > 0x19)
          {
            break;
          }
          if ((**(unsigned int (***)(uint64_t))v97)(v97) == 1)
          {
            if (v96 > 29)
              break;
            v95 |= ++v96 == 4;
          }
          else
          {
            v96 = 0;
          }
          if (++v94 >= CFArrayGetCount(v93))
          {
            if ((v95 & 1) != 0)
              sub_20B991A94(a1, a2, v136, (id *)a4, idx);
            break;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 368))
    goto LABEL_184;
  if ((*(_BYTE *)(a1 + 201) & 8) == 0)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 40))(*(_QWORD *)(a1 + 456));
  v98 = *(_QWORD *)(a1 + 384);
  if (CFArrayGetCount(*(CFArrayRef *)(v98 + 1232)))
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 384) + 1312))
    {
      v99 = *(_QWORD *)(a1 + 504);
      if (v99)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99) & 1) == 0)
        {
          v100 = *(const __CFArray **)(*(_QWORD *)(a1 + 504) + 96);
          v101 = CFArrayGetCount(v100);
          if (v101 >= 1)
          {
            v102 = (const __CFString *)CFArrayGetValueAtIndex(v100, v101 - 1);
            v103 = sub_20B896464(v102);
LABEL_171:
            v104 = v103;
            goto LABEL_173;
          }
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 552))
  {
    v103 = sub_20B9BFAEC(*(_QWORD *)(a1 + 384));
    goto LABEL_171;
  }
  v104 = 0;
LABEL_173:
  v105 = sub_20B96FD70(*(_QWORD *)(a1 + 456), 1);
  if (v105 == -1)
    v106 = v104;
  else
    v106 = 1;
  if (CFArrayGetCount(*(CFArrayRef *)(v98 + 1232)))
  {
    v107 = 0;
    if (v105 == -1)
      v105 = 2;
    do
    {
      v108 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v98 + 1232), v107);
      if (v106 && v105 < CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8)))
        sub_20B96FEEC(*(_QWORD *)(a1 + 456), v108, v105++);
      else
        sub_20B96FADC(*(_QWORD *)(a1 + 456), v108, 2, 0);
      ++v107;
    }
    while (v107 < CFArrayGetCount(*(CFArrayRef *)(v98 + 1232)));
  }
LABEL_184:
  if (v134)
  {
    v109 = *((_QWORD *)CFArrayGetValueAtIndex(a2, v36) + 3);
    if ((**(unsigned int (***)(uint64_t))v109)(v109) == 2 && *(_DWORD *)(v109 + 64) == 3)
      *(_QWORD *)(a1 + 560) = 20;
  }
  v110 = sub_20B9A7C5C(0xDu);
  v111 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v112 = v110;
    if (os_signpost_enabled(v110))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v112, OS_SIGNPOST_INTERVAL_END, v111, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v113 = *(_QWORD *)(a1 + 448);
  v115 = *(_QWORD **)v113;
  v114 = *(_QWORD **)(v113 + 8);
  *(_QWORD *)(v113 + 24) = *(_QWORD *)v113;
  *(_QWORD *)(v113 + 32) = 0;
  while (v115 != v114)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v115 + 24))(*v115);
    ++v115;
    v114 = *(_QWORD **)(v113 + 8);
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_WORD *)buf = 0;
  v116 = sub_20B8D0E3C(*(_DWORD *)(a1 + 176));
  for (j = sub_20B88AC30(*(_QWORD **)(a1 + 448), 1); j; j = sub_20B88AC30(*(_QWORD **)(a1 + 448), 1))
  {
    v120 = (_QWORD *)objc_msgSend_rawCandidate(j, v118, v119, v132);
    if (v120)
    {
      if ((unint64_t)(v120[1] + 1) > *(_QWORD *)(a1 + 560))
        break;
      v121 = __dynamic_cast(v120, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      if (v121)
      {
        v122 = v121;
        sub_20B87AD40((uint64_t)v121, buf, v116);
        v122[8] = *(_WORD *)buf;
      }
    }
  }
  v123 = *(_QWORD *)(a1 + 448);
  v125 = *(_QWORD **)v123;
  v124 = *(_QWORD **)(v123 + 8);
  *(_QWORD *)(v123 + 24) = *(_QWORD *)v123;
  *(_QWORD *)(v123 + 32) = 0;
  while (v125 != v124)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v125 + 24))(*v125);
    ++v125;
    v124 = *(_QWORD **)(v123 + 8);
  }
  v40 = 1;
LABEL_204:
  if (cf)
    CFRelease(cf);
  if (v138)
    CFRelease(v138);
  return v40;
}

void sub_20B9917D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  const void *v8;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, const void *);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20B8A89DC((const void **)va, 0);
  sub_20B8B035C((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_20B99188C(uint64_t a1, int a2, int a3, CFIndex a4)
{
  __CFArray *Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *i;
  uint64_t v19;
  CFRange v20;

  if (a4)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    v20.location = 0;
    v20.length = a4;
    CFArrayAppendArray(Mutable, *(CFArrayRef *)(a1 + 408), v20);
    sub_20B88B74C((const void **)(a1 + 408), Mutable);
    sub_20B9689BC(*(uint64_t **)(a1 + 224));
    sub_20B9BF2BC(*(_QWORD *)(a1 + 384), 2);
    if (*(_QWORD *)(a1 + 400))
    {
      v9 = *(_QWORD *)(a1 + 392);
      if (v9)
        sub_20B9BF2BC(v9, 2);
    }
    if (!a3)
      goto LABEL_13;
LABEL_10:
    v11 = *(_QWORD *)(a1 + 504);
    if (v11)
    {
      *(_QWORD *)(a1 + 504) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    *(_QWORD *)(a1 + 240) = 0;
    goto LABEL_13;
  }
  sub_20B88B74C((const void **)(a1 + 408), 0);
  *(_QWORD *)(a1 + 400) = 0;
  sub_20B9689BC(*(uint64_t **)(a1 + 224));
  sub_20B9BA674(*(_QWORD *)(a1 + 384));
  v10 = *(_QWORD *)(a1 + 392);
  if (v10)
    sub_20B9BA674(v10);
  *(_QWORD *)(a1 + 576) = 0;
  if (a3)
    goto LABEL_10;
LABEL_13:
  *(_BYTE *)(a1 + 520) = 0;
  sub_20B9F7CE0((uint64_t *)a1, 0);
  v12 = *(_QWORD *)(a1 + 416);
  if (v12 && a2)
  {
    v13 = *(_QWORD **)(v12 + 136);
    v14 = v13[38];
    if (v14)
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v14 + 16);
    v15 = v13[39];
    if (v15)
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + 16);
    v16 = v13[40];
    if (v16)
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v16 + 16);
  }
  v17 = *(uint64_t ***)(a1 + 448);
  for (i = *v17; i != v17[1]; ++i)
  {
    v19 = *i;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  }
  sub_20B8B0FB4(a1 + 424);
  *(_QWORD *)(a1 + 560) = -1;
}

BOOL sub_20B991A0C(CFArrayRef theArray, CFIndex a2)
{
  CFIndex Count;
  _BOOL8 result;
  CFIndex v6;
  uint64_t (****ValueAtIndex)(_QWORD);
  int v8;
  BOOL v9;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  result = 0;
  if (Count > a2 && Count - a2 != 1)
  {
    v6 = Count - 1;
    do
    {
      ValueAtIndex = (uint64_t (****)(_QWORD))CFArrayGetValueAtIndex(theArray, a2);
      v8 = (**ValueAtIndex[3])(ValueAtIndex[3]);
      v9 = v8 == 2;
      result = v8 != 2;
      v9 = !v9 || v6 == a2++;
    }
    while (!v9);
  }
  return result;
}

CFIndex sub_20B991A94(uint64_t a1, CFArrayRef theArray, unsigned int a3, id *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex result;
  CFIndex v15;
  uint64_t (****v16)(_QWORD);
  uint64_t (****v17)(_QWORD);
  uint64_t v18;
  CFIndex v19;
  uint64_t (****v20)(_QWORD);
  uint64_t v21;
  CFIndex Count;
  unsigned int (***v23)(_QWORD);
  unsigned int (***v24)(_QWORD);
  uint64_t v25;
  int64x2_t *v26;
  unsigned int v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const void *ValueAtIndex;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, char *, uint64_t);
  void *v36;
  CFArrayRef *v37;
  void *v38;

  if (!*(_QWORD *)(a1 + 392))
  {
    v10 = *(_QWORD *)(a1 + 280);
    v11 = *(_QWORD *)(a1 + 376);
    v12 = operator new();
    sub_20B9B952C(v12, (int *)(a1 + 176), v10, v11, a1 + 288, 1);
    v13 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  if (!*(_BYTE *)(a1 + 272))
  {
    result = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = 0;
    if (result)
      return (*(uint64_t (**)(CFIndex))(*(_QWORD *)result + 16))(result);
    return result;
  }
  if (!a5 || !*(_QWORD *)(a1 + 400))
  {
    v15 = 0;
LABEL_20:
    *(_QWORD *)(a1 + 576) = 0;
    *(_BYTE *)(a1 + 568) = 1;
    sub_20B9BA770(*(_QWORD *)(a1 + 392), a3, *(unsigned __int8 *)(a1 + 368), a4);
    if (v15 < a5)
    {
      v21 = *(_QWORD *)(a1 + 392);
      if (v15)
        sub_20B9BF2BC(v21, 1);
      else
        sub_20B9BA674(v21);
    }
    Count = CFArrayGetCount(theArray);
    sub_20B9689BC(*(uint64_t **)(a1 + 224));
    if (v15 >= Count)
    {
LABEL_33:
      if (*(_DWORD *)(a1 + 208) != 1)
      {
        *(_BYTE *)(a1 + 520) = 1;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
        CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 488));
        v29 = *(_QWORD *)(a1 + 392);
        if (CFArrayGetCount(*(CFArrayRef *)(v29 + 1160)))
        {
          v30 = 0;
          do
          {
            v31 = *(_QWORD *)(a1 + 464);
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v29 + 1160), v30);
            (*(void (**)(uint64_t, const void *))(*(_QWORD *)v31 + 16))(v31, ValueAtIndex);
            ++v30;
          }
          while (v30 < CFArrayGetCount(*(CFArrayRef *)(v29 + 1160)));
        }
        sub_20B99460C(a1);
        v33 = *(_QWORD *)(a1 + 464);
        v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 600) + 24) + 64);
        v35 = sub_20B9354FC;
        if (v34 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
          v35 = sub_20B9350F8;
        (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), uint64_t))(*(_QWORD *)v33 + 32))(v33, v35, 1);
        if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 464) + 8)))
        {
          v36 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 464) + 8), 0);
          sub_20B970164(*(CFArrayRef **)(a1 + 456), v36, 1uLL);
          if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 464) + 8)) >= 2)
          {
            v37 = *(CFArrayRef **)(a1 + 456);
            v38 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 464) + 8), 1);
            sub_20B970164(v37, v38, 2uLL);
          }
        }
        sub_20B96FDE0(*(_QWORD *)(a1 + 456));
      }
      result = CFArrayGetCount(theArray);
      *(_QWORD *)(a1 + 400) = result;
    }
    else
    {
      while (1)
      {
        v23 = (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(theArray, v15) + 3);
        v24 = v15 >= Count - 1
            ? 0
            : (unsigned int (***)(_QWORD))*((_QWORD *)CFArrayGetValueAtIndex(theArray, v15 + 1) + 3);
        v25 = *(_QWORD *)(a1 + 392);
        *(_BYTE *)(v25 + 41) = sub_20B991A0C(theArray, v15);
        v26 = *(int64x2_t **)(a1 + 392);
        if (v24)
        {
          v27 = (**v23)(v23);
          v28 = v27 != (**v24)(v24);
        }
        else
        {
          v28 = 1;
        }
        result = sub_20B9B9A58(v26, v23, v28);
        ++v15;
        if (!(_DWORD)result)
          break;
        if (Count == v15)
          goto LABEL_33;
      }
      *(_QWORD *)(a1 + 576) = v15;
    }
    *(_BYTE *)(a1 + 568) = 0;
    return result;
  }
  result = CFArrayGetCount(theArray);
  v15 = a5;
  if (result != a5)
  {
    v16 = (uint64_t (****)(_QWORD))CFArrayGetValueAtIndex(theArray, a5);
    result = (**v16[3])(v16[3]);
    v15 = a5;
    if ((_DWORD)result == 1)
    {
      v17 = (uint64_t (****)(_QWORD))CFArrayGetValueAtIndex(theArray, a5 - 1);
      result = (**v17[3])(v17[3]);
      v15 = a5;
      if ((_DWORD)result == 1)
      {
        v18 = 1;
        v19 = a5 - 2;
        if ((uint64_t)(a5 - 2) >= 0)
        {
          while (1)
          {
            v20 = (uint64_t (****)(_QWORD))CFArrayGetValueAtIndex(theArray, v19);
            result = (**v20[3])(v20[3]);
            if ((_DWORD)result != 1)
              break;
            ++v18;
            if (--v19 == -1)
            {
              v18 = a5;
              break;
            }
          }
        }
        v15 = a5 - v18;
      }
    }
  }
  if (*(_QWORD *)(a1 + 576) - 1 >= (unint64_t)v15)
    goto LABEL_20;
  return result;
}

void sub_20B991EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40214F1003);
  _Unwind_Resume(a1);
}

__CFArray *sub_20B991EC4(uint64_t a1, const __CFArray *a2, __int16 a3, uint64_t a4)
{
  CFIndex Count;
  BOOL v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  CFIndex v15;
  CFIndex v16;

  if ((a3 & 0xA020) != 0)
    return 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a4 + 32));
  v8 = !*(_BYTE *)(a1 + 552) || Count == 0;
  if (!v8
    && (v9 = (void *)sub_20B96ABC8(a4, Count - 1), (v12 = (const void *)objc_msgSend_rawCandidate(v9, v10, v11)) != 0)
    && (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D698, 0), a2)&& (v14 = (uint64_t)v13) != 0&& *(_QWORD *)(a1 + 408)&& CFArrayGetCount(a2)&& (v15 = CFArrayGetCount(a2), v15 == CFArrayGetCount(*(CFArrayRef *)(a1 + 408)))&& (v16 = sub_20B991FBC(a2, *(const __CFArray **)(a1 + 408)), v16 == CFArrayGetCount(a2)))
  {
    return sub_20B9BA0A0(*(_QWORD *)(a1 + 384), a2, v14);
  }
  else
  {
    return 0;
  }
}

CFIndex sub_20B991FBC(const __CFArray *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  _QWORD *ValueAtIndex;

  if (!a2)
    return 0;
  Count = CFArrayGetCount(a1);
  v5 = CFArrayGetCount(a2);
  if (v5 >= Count)
    v6 = Count;
  else
    v6 = v5;
  if (v6 < 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v8 = *((_QWORD *)CFArrayGetValueAtIndex(a1, v7) + 3);
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, ValueAtIndex[3]) & 1) == 0)
        break;
      if (v6 == ++v7)
      {
        v7 = v6;
        break;
      }
    }
  }
  if (v6 >= v7)
    return v7;
  else
    return v6;
}

void *sub_20B992070(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 448);
  v2 = *(_QWORD **)(v1 + 24);
  if (v2 == *(_QWORD **)(v1 + 8))
    return 0;
  while (1)
  {
    v4 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2);
    if (v4)
      break;
    v2 = (_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
    *(_QWORD *)(v1 + 24) = v2;
    if (v2 == *(_QWORD **)(v1 + 8))
      return 0;
  }
  v7 = v4;
  if (objc_msgSend_rawCandidate(v4, v5, v6))
  {
    if ((unint64_t)(*(_QWORD *)(objc_msgSend_rawCandidate(v7, v8, v9) + 8) + 1) > *(_QWORD *)(a1 + 560))
      return 0;
  }
  return v7;
}

uint64_t sub_20B992108(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 240);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      LOBYTE(v6) = sub_20B88826C(v7, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270];
    else
      LOBYTE(v6) = 0;
  }
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 416);
  if (v9 && (v6 & 1) == 0)
  {
    if (a2)
    {
      v10 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10) == 89)
      {
        v8 = 0;
        goto LABEL_12;
      }
      v9 = *(_QWORD *)(a1 + 416);
    }
    v8 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v9 + 56))(v9, a2, a3, 1);
  }
LABEL_12:
  if (!a2 || (a3 & 1) == 0)
  {
    sub_20B99188C(a1, 0, 1, 0);
    sub_20B8B1440(a1 + 424);
  }
  return v8;
}

uint64_t sub_20B9921F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 416)
    || sub_20B88826C(a2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270]
    || sub_20B96BBD4(a2))
  {
    v4 = 0;
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 416) + 48))(*(_QWORD *)(a1 + 416), a2);
  }
  sub_20B99188C(a1, 0, 1, 0);
  sub_20B8B1440(a1 + 424);
  sub_20B9922A4(a1, a2, 0);
  return v4;
}

uint64_t sub_20B9922A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;

  result = (uint64_t)sub_20B88826C(a2, kMecabraContextOptionPrivateMode);
  if (result != *MEMORY[0x24BDBD270])
  {
    result = sub_20B96BBD4(a2);
    if ((result & 1) == 0)
    {
      v7 = *(_QWORD *)(a1 + 416);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 96))
        {
          v8 = (_QWORD *)sub_20B9033D0(a2, a1, v7, 0);
          result = sub_20B8B4318((uint64_t)v8);
          if ((_DWORD)result && (result = sub_20BA11B14((uint64_t)(v8 + 6)), (_DWORD)result))
          {
            sub_20B9925E0(a1, (uint64_t)(v8 + 6), ((uint64_t)(v8[7] - v8[6]) >> 2) - v8[17], a3, 0);
            sub_20B89D588(*(_QWORD *)(a1 + 584), (uint64_t)v8, a3, 0);
          }
          else if (!v8)
          {
            return result;
          }
          return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
        }
      }
    }
  }
  return result;
}

void sub_20B9923A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9923C8(_QWORD *a1, uint64_t a2, void *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  char v37;

  if (sub_20B88826C(a2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270])
    return 0;
  if (a3)
  {
    v8 = objc_msgSend_rawCandidate(a3, v6, v7);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8) == 89)
      return 0;
    if (*(_DWORD *)(a1[74] + 4) <= 7u)
    {
      v12 = objc_msgSend_rawCandidate(a3, v9, v10);
      if (v12)
      {
        v13 = (_QWORD *)v12;
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        v15 = 40;
        if (!v14)
          v15 = 24;
        if ((*(uint64_t (**)(_QWORD *))(*v13 + v15))(v13))
        {
          v18 = a1[74];
          v19 = (const __CFString *)objc_msgSend_rawCandidate(a3, v16, v17);
          if (v19)
          {
            v20 = (__CFString *)v19;
            v21 = (*((uint64_t (**)(const __CFString *))v19->isa + 5))(v19);
            v22 = 40;
            if (!v21)
              v22 = 24;
            v19 = (const __CFString *)(*(uint64_t (**)(__CFString *))((char *)v20->isa + v22))(v20);
          }
          sub_20B8D1C98(v19, __p);
          if (v37 >= 0)
            v29 = __p;
          else
            LOBYTE(v29) = __p[0];
          sub_20B954DEC(v18, "Revert learning for candidate %s\n", v23, v24, v25, v26, v27, v28, (char)v29);
          if (v37 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  v30 = a1[52];
  if (v30)
    v11 = sub_20B9730D8(v30);
  else
    v11 = 0;
  v31 = sub_20B903530(a2, (uint64_t)a1, (uint64_t)a3);
  v32 = (uint64_t)v31;
  v33 = (uint64_t)(v31 + 6);
  v34 = v31[7] - v31[6];
  if (v34)
  {
    sub_20B9925E0((uint64_t)a1, v33, (v34 >> 2) - v31[16], 0, 1);
    v11 = 1;
    sub_20B89D588(a1[73], v32, 0, 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 8))(v32, v33);
  return v11;
}

void sub_20B9925AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9925E0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (a3 == 1)
  {
    v6 = **(_DWORD **)a2 == 1;
    if (!a4)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    if (!a4)
    {
LABEL_3:
      if (v6)
        v7 = 0;
      else
        v7 = a3;
      if ((v7 & 0x8000000000000000) == 0)
      {
        v8 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
        if (*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 32) + 32) >= 2 && v7 < v8)
        {
          v10 = 4 * v7;
          do
          {
            if (a5)
              result = LMLanguageModelDecrementUsageCount();
            else
              result = LMLanguageModelIncrementUsageCount();
            ++v7;
            v10 += 4;
          }
          while (v8 != v7);
        }
      }
      return result;
    }
  }
  if (((a5 | v6) & 1) == 0)
    return LMLanguageModelIncrementUsageCount();
  return result;
}

void sub_20B9926EC(uint64_t a1, uint64_t a2, const __CFString *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];
  _QWORD v12[4];

  sub_20B99188C(a1, 1, 1, 0);
  v8 = *(_QWORD *)(a1 + 240);
  if (!v8
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || sub_20B88826C(v9, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270]
    && ((v10 = *(_QWORD *)(v8 + 8)) == 0 || !sub_20B96BBD4(v10)))
  {
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2000000000;
    *(double *)&v12[3] = a4;
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 0x40000000;
    v11[2] = sub_20B9927FC;
    v11[3] = &unk_24C49F8E8;
    v11[5] = a1;
    v11[6] = a2;
    v11[4] = v12;
    sub_20BA1C6DC((CFStringTokenizerRef *)(a1 + 344), a3, (uint64_t)v11);
    _Block_object_dispose(v12, 8);
  }
}

void sub_20B9927E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9927FC(_QWORD *a1, const __CFString *a2)
{
  uint64_t v4;
  CFMutableArrayRef *v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  CFMutableArrayRef *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a1[5];
  v5 = (CFMutableArrayRef *)operator new();
  sub_20B96A650((uint64_t)v5, 0);
  v6 = (void *)sub_20B990618(v4, a2);
  v7 = v6;
  if (v6)
  {
    if (sub_20B96A9F0(v6))
      CFArrayAppendValue(v5[4], v7);
    v26 = (void *)v7;
    v27 = v5;
    v28 = v4;
    v8 = sub_20B9033D0((uint64_t)v5, v4, *(_QWORD *)(v4 + 416), 1);
    v32 = a1[6];
    v9 = *(_QWORD *)(a1[4] + 8);
    v30 = v8;
    v10 = (_QWORD *)(v8 + 48);
    if (sub_20BA11B14(v8 + 48))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 32);
      v11 = *(_QWORD *)(v31 + 32);
      v12 = *(_QWORD *)(v30 + 56) - *(_QWORD *)(v30 + 48);
      v13 = *(_QWORD *)(v28 + 584);
      if (*(_BYTE *)(v13 + 24))
        *(_QWORD *)(v13 + 16) += v12 >> 2;
      v29 = v12 >> 2;
      sub_20B89D588(v13, v30, 0, 0);
      if (v12 >= 1)
      {
        v14 = 0;
        v15 = v9 + 24;
        v16 = v11 - 1;
        v17 = v29;
        if (v29 <= 1)
          v17 = 1;
        v18 = -v17;
        v19 = -1;
        v20 = 1;
        do
        {
          if (v20 - 1 >= v16)
            v21 = v16;
          else
            v21 = v20 - 1;
          if (v14)
            v22 = v21;
          else
            v22 = 0;
          v23 = *(unsigned int *)(*v10 + v14);
          if (!(_DWORD)v23)
          {
            sub_20B89D358(*(_QWORD *)(v28 + 584), *(CFArrayRef *)(v30 + 96), v20 - 1);
            v19 = v20 - 1;
          }
          if (v19 < ~v22 + v20)
          {
            v24 = *v10 - 4 * v22;
            sub_20B9C4490(v31, v32, v23, v24 + v14, v22, v15);
            if (v29 == v20)
              sub_20B9C4490(v31, v32, 2, v24 + v14 + 4, v22, v15);
          }
          ++v20;
          v14 += 4;
        }
        while (v18 + v20 != 1);
      }
    }

    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v5 = v27;
  }
  return (*((uint64_t (**)(CFMutableArrayRef *))*v5 + 1))(v5);
}

void sub_20B992A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(a1);
}

void sub_20B992A94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = a1[23];
  if (*(_BYTE *)(v1 + 104))
  {
    sub_20B99188C((uint64_t)a1, 1, 1, 0);
    if (*(_BYTE *)(v1 + 4))
    {
      v3 = a1[52];
      if (v3)
        sub_20B9C4664(*(_QWORD *)(a1[1] + 32), v3);
      sub_20B9F7EF4((uint64_t)a1);
      sub_20B9F7DAC(a1);
      v4 = a1[52];
      if (v4)
        sub_20B9C4608(*(_QWORD *)(a1[1] + 32), v4, (uint64_t)sub_20B9900F0);
    }
    else
    {
      sub_20B9F7EF4((uint64_t)a1);
      sub_20B9F7DAC(a1);
    }
  }
}

__CFDictionary *sub_20B992B34(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;

  if (a2 != 3)
    return 0;
  v2 = *(_QWORD *)(a1 + 416);
  if (!v2)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  if (!v3)
    return 0;
  v4 = (const void *)v3;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = Mutable;
  if (Mutable)
    CFDictionarySetValue(Mutable, CFSTR("surface"), v4);
  return v6;
}

uint64_t sub_20B992BB4(uint64_t a1)
{
  uint64_t v2;

  LMLanguageModelFlushDynamicData();
  v2 = *(_QWORD *)(a1 + 416);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  else
    return 1;
}

uint64_t sub_20B992C04(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 416);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
  return LMLanguageModelResetDynamicData();
}

CFArrayRef sub_20B992C44(uint64_t a1, void *a2, unint64_t a3)
{
  const void *v5;
  void *v6;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5)
    v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D698, 0);
  else
    v6 = 0;
  return sub_20B879520(*(_QWORD *)(a1 + 496), (uint64_t)v6, a3);
}

void sub_20B992C9C(uint64_t a1, const UniChar *a2, CFIndex numChars, uint64_t a4)
{
  const __CFString *v7;
  uint64_t i;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  __CFArray *v15;
  const __CFArray *v16;
  unint64_t Count;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  const __CFNumber *ValueAtIndex;
  _BYTE *v31;
  char *v32;
  _QWORD *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  CFIndex v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  const __CFString *cf;
  uint64_t v51;
  void *__p;
  char *v54;
  unint64_t v55;
  uint64_t valuePtr;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  char v60;

  if (a2)
  {
    if (numChars)
    {
      v7 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, numChars);
      if (v7)
      {
        cf = v7;
        v51 = a4;
        v60 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        sub_20B990694(a1, v7, 0, 0);
        for (i = 0; ; ++i)
        {
          v9 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 48))(*(_QWORD *)(a1 + 456));
          v12 = v9;
          if (!v9 || i == 10)
            break;
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v58 - v57) >> 3) > 2 || v60 != 0)
            break;
          v15 = MecabraCandidateCopySyllableLengthArrayInAnalysisString(v9, v10, v11);
          v16 = v15;
          if (v15)
          {
            Count = CFArrayGetCount(v15);
            v18 = Count;
            v55 = 0;
            valuePtr = 0;
            __p = 0;
            v54 = 0;
            if (!Count)
              goto LABEL_34;
            if (Count >> 61)
              sub_20B80CDD8();
            v19 = (char *)sub_20B800BE8((uint64_t)&v55, Count);
            v21 = v20;
            v23 = (char *)__p;
            v22 = v54;
            bzero(v19, 8 * v18);
            v24 = v19;
            while (v22 != v23)
            {
              v25 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v24 - 1) = v25;
              v24 -= 8;
            }
            __p = v24;
            v54 = &v19[8 * v18];
            v55 = (unint64_t)&v19[8 * v21];
            if (v23)
              operator delete(v23);
            if (v18 >= 1)
            {
              v26 = 0;
              v27 = 0;
              v28 = 0;
              do
              {
                ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v16, v26);
                CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
                if (valuePtr >= 1 && valuePtr + v28 <= numChars)
                {
                  *((_QWORD *)__p + v26) = valuePtr;
                  if (v18 - 1 == v26)
                    v27 = v28;
                  v28 += valuePtr;
                }
                ++v26;
              }
              while (v18 != v26);
            }
            else
            {
LABEL_34:
              v28 = 0;
              v27 = 0;
            }
            if (v28 == numChars)
            {
              v31 = __p;
              v32 = v54;
              if ((sub_20B9930E8(v57, (uint64_t)v58, __p, (uint64_t)v54) & 1) == 0)
              {
                (*(void (**)(uint64_t, _BYTE *, int64_t, char *))(v51 + 16))(v51, v31, (v32 - v31) >> 3, &v60);
                if (!v60)
                {
                  v33 = v58;
                  if ((unint64_t)v58 >= v59)
                  {
                    v36 = (_QWORD *)sub_20B9954C0(&v57, (uint64_t)&__p);
                  }
                  else
                  {
                    *v58 = 0;
                    v33[1] = 0;
                    v33[2] = 0;
                    sub_20B995634(v33, __p, (uint64_t)v54, (v54 - (_BYTE *)__p) >> 3);
                    v36 = v33 + 3;
                  }
                  v58 = v36;
                  if (MecabraCandidateGetMatchedLengthType(v12, v34, v35) != 2)
                  {
                    v37 = sub_20B9E920C(*(_QWORD *)(a1 + 384) + 80, (uint64_t)a2, v27, *((_QWORD *)v54 - 1));
                    if (v37 != -1)
                    {
                      v38 = __p;
                      *((_QWORD *)__p + v18 - 1) = v37 - v27;
                      v39 = numChars - v37;
                      v40 = v54;
                      if ((unint64_t)v54 >= v55)
                      {
                        v42 = (v54 - v38) >> 3;
                        v43 = v42 + 1;
                        if ((unint64_t)(v42 + 1) >> 61)
                          sub_20B80CDD8();
                        v44 = v55 - (_QWORD)v38;
                        if ((uint64_t)(v55 - (_QWORD)v38) >> 2 > v43)
                          v43 = v44 >> 2;
                        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                          v45 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v45 = v43;
                        if (v45)
                        {
                          v46 = (char *)sub_20B800BE8((uint64_t)&v55, v45);
                          v38 = __p;
                          v40 = v54;
                        }
                        else
                        {
                          v46 = 0;
                        }
                        v47 = &v46[8 * v42];
                        *(_QWORD *)v47 = v39;
                        v41 = v47 + 8;
                        while (v40 != v38)
                        {
                          v48 = *((_QWORD *)v40 - 1);
                          v40 -= 8;
                          *((_QWORD *)v47 - 1) = v48;
                          v47 -= 8;
                        }
                        __p = v47;
                        v54 = v41;
                        v55 = (unint64_t)&v46[8 * v45];
                        if (v38)
                          operator delete(v38);
                      }
                      else
                      {
                        *(_QWORD *)v54 = v39;
                        v41 = v40 + 8;
                      }
                      v54 = v41;
                      v49 = __p;
                      if ((sub_20B9930E8(v57, (uint64_t)v58, __p, (uint64_t)v41) & 1) == 0)
                      {
                        (*(void (**)(uint64_t, _BYTE *, int64_t, char *))(v51 + 16))(v51, v49, (v41 - v49) >> 3, &v60);
                        if (!v60)
                          sub_20B993160(&v57, (uint64_t)&__p);
                      }
                    }
                  }
                }
              }
            }
            CFRelease(v16);
            if (__p)
            {
              v54 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        CFRelease(cf);
        __p = &v57;
        sub_20B9470D4((void ***)&__p);
      }
    }
  }
}

void sub_20B993084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a17;
  sub_20B9470D4((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9930E8(uint64_t a1, uint64_t a2, void *__s2, uint64_t a4)
{
  uint64_t v6;
  size_t v7;

  if (a1 == a2)
    return 0;
  v6 = a1;
  v7 = a4 - (_QWORD)__s2;
  while (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6 != v7 || memcmp(*(const void **)v6, __s2, v7))
  {
    v6 += 24;
    if (v6 == a2)
      return 0;
  }
  return 1;
}

uint64_t sub_20B993160(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_20B9954C0(a1, a2);
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    sub_20B995634(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    result = (uint64_t)(v3 + 3);
    a1[1] = (uint64_t)(v3 + 3);
  }
  a1[1] = result;
  return result;
}

void sub_20B9931C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B9931C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFIndex Count;
  uint64_t v6;
  unint64_t i;
  const void *ValueAtIndex;
  unint64_t v9;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 56))(*(_QWORD *)(a1 + 456));
  v4 = sub_20B9BA9EC(*(_QWORD *)(a1 + 384), a2);
  Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 8));
  v6 = *(_QWORD *)(a1 + 456);
  if (Count)
  {
    for (i = 0; i < v9; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 8), i);
      (*(void (**)(uint64_t, const void *))(*(_QWORD *)v6 + 16))(v6, ValueAtIndex);
      v9 = CFArrayGetCount(*(CFArrayRef *)(v4 + 8));
      v6 = *(_QWORD *)(a1 + 456);
    }
  }
  (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), uint64_t))(*(_QWORD *)v6 + 32))(v6, sub_20B935CB0, 1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8);
}

void sub_20B993280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  sub_20B99188C(a1, 1, 1, 0);
  if (a3 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 416);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
}

void sub_20B9932D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  const void *ValueAtIndex;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL4 v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  BOOL v24;
  const char *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, char *, uint64_t);
  const char *v34;
  uint64_t v35;
  _BOOL4 v36;
  double v37;
  const void *v38;
  void *v39;
  double v40;
  void *v41;
  int **v42;
  int **v43;
  int v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  double v48;
  double v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  CFIndex Count;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _DWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _BYTE *v72;
  uint64_t *v73;
  uint64_t *v74;
  int64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  size_t v88;
  uint64_t *v89;
  unint64_t v90;
  char *v91;
  size_t v92;
  void *v93;
  char *v94;
  uint64_t *v95;
  int v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  char *v102;
  uint64_t *v103;
  int v104;
  char *v105;
  uint64_t *v106;
  unsigned int *v107;
  unint64_t v108;
  _DWORD *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  const void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  const void *v136;
  void *v137;
  uint64_t v138;
  const __CFString *v139;
  const __CFString *v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  uint64_t v144;
  char v145;
  char v146;
  unsigned int *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  CFArrayRef v152;
  unint64_t v153;
  const __CFArray *v154;
  uint64_t v155;
  CFIndex v156;
  const __CFString *v157;
  unint64_t v158;
  double v159;
  unint64_t v160;
  uint64_t v161;
  double v162;
  int v163;
  int v164;
  uint64_t Prediction;
  uint64_t v166;
  BOOL v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const __CFString *v172;
  CFIndex Length;
  const __CFString *v174;
  void *v175;
  char *v176;
  char v177;
  uint64_t v178;
  _QWORD v179[6];
  void *v180;
  void *v181;
  void *__dst;
  _BYTE *v183;
  void *v184;
  uint64_t **v185;
  uint64_t v186;
  double v187;
  BOOL v188;
  void *values;
  double v190;
  double v191;
  void *__p;
  _QWORD *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 56))(*(_QWORD *)(a1 + 456));
  CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 488));
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a1 + 552);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  v2 = *(_QWORD *)(a1 + 384);
  if (!*(_BYTE *)(v2 + 1152))
    return;
  if (CFArrayGetCount(*(CFArrayRef *)(v2 + 1160)))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 456);
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 1160), v3);
      (*(void (**)(uint64_t, const void *))(*(_QWORD *)v4 + 16))(v4, ValueAtIndex);
      ++v3;
    }
    while (v3 < CFArrayGetCount(*(CFArrayRef *)(v2 + 1160)));
  }
  *(_BYTE *)(v2 + 1152) = 0;
  v180 = 0;
  v6 = *(_DWORD *)(a1 + 200);
  if ((v6 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 552))
    {
      sub_20B99460C(a1);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 384);
      if (!*(_BYTE *)(v7 + 1312))
      {
        v190 = 0.0;
        v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, double *, uint64_t))(**(_QWORD **)(v7 + 952) + 64))(*(_QWORD *)(v7 + 952), &v190, 1);
        __p = 0;
        v193 = 0;
        v194 = 0;
        LOBYTE(values) = 0;
        v9 = sub_20B994848(a1, v8, (unint64_t *)&__p, &values);
        (*(void (**)(_QWORD, _QWORD *, const char *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 384) + 952)
                                                                       + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 952), v8, "Best: ", v190);
        if (v9)
        {
          if ((_BYTE)values)
          {
            *(double *)&v181 = 0.0;
            v10 = (_QWORD *)(*(uint64_t (**)(_QWORD, void **, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 384)
                                                                                             + 952)
                                                                               + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 952), &v181, &unk_24C4A00B8);
            if (*(double *)&v181 < v190 + 4.5)
            {
              v11 = v10;
              sub_20B994B40(a1, v10, *(double *)&v181);
              (*(void (**)(_QWORD, _QWORD *, const char *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 384)
                                                                                           + 952)
                                                                             + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 952), v11, "AutoCorrection: ", v190);
              *(_BYTE *)(a1 + 520) = 1;
            }
            v12 = (_BYTE)values == 0;
          }
          else
          {
            v12 = 1;
          }
          if (sub_20B994BF8(a1, (uint64_t *)&__p, &v180, v12, v190))
          {
            v15 = v180;
            v16 = objc_msgSend_rawCandidate(v180, v13, v14);
            v17 = (_QWORD *)v16;
            if (v16)
            {
              v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
              v19 = 40;
              if (!v18)
                v19 = 24;
              v20 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v17 + v19))(v17);
            }
            else
            {
              v20 = 0;
            }
            if (CFStringGetLength(v20) <= 7)
            {
              v191 = 0.0;
              v21 = (_QWORD *)(*(uint64_t (**)(_QWORD, double *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 384)
                                                                                                + 952)
                                                                                  + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 952), &v191, 0);
              if (sub_20B994B40(a1, v21, v191 + 2.0))
              {
                (*(void (**)(_QWORD, _QWORD *, const char *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 384)
                                                                                             + 952)
                                                                               + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 952), v21, "Phrase without EOS: ", v191);
              }
              else
              {
                v24 = MecabraCandidateGetMatchedLengthType(v15, v22, v23) == 2;
                v195 = 0;
                v196 = (uint64_t *)&v195;
                v197 = 0x2000000000;
                v198 = 0;
                v27 = (const void *)objc_msgSend_rawCandidate(v15, v25, v26);
                v28 = __dynamic_cast(v27, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
                v29 = (*(double (**)(void *))(*(_QWORD *)v28 + 392))(v28);
                v30 = *(_QWORD *)(a1 + 384);
                *(double *)&v181 = MEMORY[0x24BDAC760];
                __dst = (void *)0x40000000;
                v183 = sub_20B995244;
                v184 = &unk_24C49F910;
                v185 = &v195;
                v186 = a1;
                v187 = -v29;
                v188 = v24;
                (*(void (**)(_QWORD, _BYTE *, void **))(**(_QWORD **)(v30 + 952) + 72))(*(_QWORD *)(v30 + 952), (_BYTE *)v196 + 24, &v181);
                _Block_object_dispose(&v195, 8);
              }
            }
          }
        }
        if (__p)
        {
          v193 = __p;
          operator delete(__p);
        }
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 384) + 1312)
          && !CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8)))
        {
          *(double *)&v181 = 0.0;
          v31 = *(_QWORD *)(a1 + 384);
          v179[0] = MEMORY[0x24BDAC760];
          v179[1] = 0x40000000;
          v179[2] = sub_20B995320;
          v179[3] = &unk_24C49F930;
          v179[4] = a1;
          v179[5] = 0;
          (*(void (**)(_QWORD, void **, _QWORD *))(**(_QWORD **)(v31 + 952) + 72))(*(_QWORD *)(v31 + 952), &v181, v179);
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 552))
  {
    v42 = *(int ***)(a1 + 528);
    v43 = *(int ***)(a1 + 536);
    if (v43 != v42 && (unint64_t)((char *)v43 - (char *)v42) >= 0x10)
    {
      v44 = 0;
      v45 = *(_QWORD **)(a1 + 528);
      while (1)
      {
        v46 = *(_DWORD *)(*v45 + 192);
        if (!v46)
          break;
        if (v46 < v44)
          v44 = *(_DWORD *)(*v45 + 192);
        if (++v45 == v43)
        {
          v47 = 0;
          v48 = (double)v44;
          v49 = 0.0;
          do
          {
            v50 = *v42;
            v51 = (*(uint64_t (**)(int *))(*(_QWORD *)*v42 + 112))(*v42);
            (*(void (**)(int *, _QWORD))(*(_QWORD *)v50 + 480))(v50, (int)((double)v51 - v48 + (double)v50[48]));
            v52 = *(_QWORD *)v50;
            if (v47)
              (*(void (**)(int *, double))(v52 + 400))(v50, v49);
            else
              v49 = (*(double (**)(int *))(v52 + 392))(v50);
            ++v42;
            --v47;
          }
          while (v42 != v43);
          break;
        }
      }
    }
  }
  v32 = *(_QWORD *)(a1 + 456);
  v33 = sub_20B934DCC(*(_QWORD *)(a1 + 600));
  (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), uint64_t))(*(_QWORD *)v32 + 32))(v32, v33, 1);
  if (v180)
    v36 = (v6 & 1) == 0;
  else
    v36 = 0;
  v37 = 0.0;
  if (v36)
  {
    v38 = (const void *)objc_msgSend_rawCandidate(v180, v34, v35);
    v39 = __dynamic_cast(v38, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    v40 = (*(double (**)(void *))(*(_QWORD *)v39 + 392))(v39);

    v37 = -v40;
  }
  if (*(_BYTE *)(a1 + 368))
    return;
  sub_20B96FDE0(*(_QWORD *)(a1 + 456));
  if (CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8)))
    v41 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8), 0);
  else
    v41 = 0;
  v53 = *(_QWORD *)(a1 + 384);
  Count = CFArrayGetCount(*(CFArrayRef *)(v53 + 1112));
  if (Count >= 1)
  {
    v57 = (id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v53 + 1112), Count - 1);
    goto LABEL_55;
  }
  v191 = 0.0;
  v58 = (*(uint64_t (**)(_QWORD, double *, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 384) + 952) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 952), &v191, &unk_24C4A0078);
  *(double *)&v181 = 0.0;
  __dst = 0;
  v183 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v176 = (char *)v58;
  if (!v58)
  {
    v178 = 0;
    goto LABEL_134;
  }
  v178 = 0;
  v177 = 0;
  v175 = v41;
  v60 = (_QWORD *)v58;
  do
  {
    v61 = (_DWORD *)*v60;
    v62 = *(uint64_t **)(*v60 + 16);
    if (!v62)
      goto LABEL_128;
    if ((v61[2] - 9) <= 1)
    {
      v63 = *v62;
      if (*v62)
      {
        v64 = *(_QWORD *)(v63 + 8);
        if (v64 - 1 < 0)
          goto LABEL_69;
        v65 = 0;
        v66 = (unsigned __int8 *)(*(_QWORD *)(v63 + 32) + 4 * v64 - 4);
        while (1)
        {
          v67 = *v66;
          v66 -= 4;
          if (v67)
            break;
          if (v64 == ++v65)
          {
            v65 = v64;
            break;
          }
        }
        if (v65)
          v178 = v64 - v65;
        else
LABEL_69:
          v178 = 0;
      }
    }
    __p = 0;
    v68 = (*(uint64_t (**)(_DWORD *, void **))(*(_QWORD *)v61 + 32))(v61, &__p);
    v69 = (char *)v68;
    v70 = (unint64_t)__p;
    if (!v68 || __p == 0)
      break;
    v72 = v181;
    if (v181 == __dst)
    {
      if (v61[2] == 10)
      {
        if ((LMLanguageModelTokenSequenceIsBlocklisted() & 1) != 0)
          break;
        v70 = (unint64_t)__p;
        v177 = 1;
        v72 = v181;
      }
      v83 = (uint64_t)v183;
      if (v70 <= (v183 - v72) >> 2)
      {
        v56 = (char *)((_BYTE *)__dst - v72);
        v90 = ((_BYTE *)__dst - v72) >> 2;
        if (v90 >= v70)
        {
          if (v70)
            goto LABEL_115;
          v92 = 0;
        }
        else
        {
          if (__dst != v72)
          {
            memmove(v72, v69, (size_t)v56);
            v72 = __dst;
          }
          v91 = &v69[4 * v90];
          v92 = 4 * v70 - 4 * v90;
          if (v90 != v70)
          {
            v93 = v72;
            goto LABEL_116;
          }
        }
      }
      else
      {
        if (v72)
        {
          __dst = v72;
          operator delete(v72);
          v83 = 0;
          *(double *)&v181 = 0.0;
          __dst = 0;
          v183 = 0;
        }
        if (v70 >> 62)
          sub_20B80CDD8();
        v84 = v83 >> 1;
        if (v83 >> 1 <= v70)
          v84 = v70;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v84;
        sub_20B81277C(&v181, v85);
        v72 = __dst;
LABEL_115:
        v92 = 4 * v70;
        v93 = v72;
        v91 = v69;
LABEL_116:
        memmove(v93, v91, v92);
      }
      __dst = &v72[v92];
      goto LABEL_128;
    }
    if ((uint64_t)__p >= 1)
    {
      v73 = v196;
      v74 = v195;
      v75 = (char *)v196 - (char *)v195;
      v76 = ((char *)v196 - (char *)v195) >> 2;
      if ((uint64_t)__p > (uint64_t)(v197 - (_QWORD)v196) >> 2)
      {
        v77 = (unint64_t)__p + v76;
        if (v77 >> 62)
          sub_20B80CDD8();
        v78 = v197 - (_QWORD)v195;
        if ((uint64_t)(v197 - (_QWORD)v195) >> 1 > v77)
          v77 = v78 >> 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          v80 = (char *)sub_20B8127BC((uint64_t)&v197, v79);
          v82 = v81;
        }
        else
        {
          v80 = 0;
          v82 = 0;
        }
        v98 = 0;
        v99 = 4 * v70;
        v100 = &v80[4 * v70];
        do
        {
          *(_DWORD *)&v80[v98] = *(_DWORD *)&v69[v98];
          v98 += 4;
        }
        while (v99 != v98);
        v101 = v195;
        v102 = v80;
        if (v195 != v74)
        {
          v103 = v74;
          v102 = v80;
          do
          {
            v104 = *((_DWORD *)v103 - 1);
            v103 = (uint64_t *)((char *)v103 - 4);
            *((_DWORD *)v102 - 1) = v104;
            v102 -= 4;
          }
          while (v103 != v101);
        }
        v105 = (char *)((char *)v196 - (char *)v74);
        if (v196 != v74)
          memmove(v100, v74, (char *)v196 - (char *)v74);
        v106 = v195;
        v195 = (uint64_t *)v102;
        v196 = (uint64_t *)&v105[(_QWORD)v100];
        v197 = (unint64_t)&v80[4 * v82];
        if (v106)
          operator delete(v106);
        goto LABEL_128;
      }
      v86 = (_BYTE *)(v68 + 4 * (_QWORD)__p);
      if (v76 >= (uint64_t)__p)
      {
        v89 = v196;
LABEL_107:
        v94 = (char *)v89 - 4 * v70;
        v95 = v89;
        while (v94 < (char *)v73)
        {
          v96 = *(_DWORD *)v94;
          v94 += 4;
          *(_DWORD *)v95 = v96;
          v95 = (uint64_t *)((char *)v95 + 4);
        }
        v97 = (char *)v74 + 4 * v70;
        v196 = v95;
        if (v89 != (uint64_t *)v97)
          memmove((char *)v89 - 4 * (((char *)v89 - v97) >> 2), v74, (char *)v89 - v97);
        v56 = (char *)(v86 - v69);
        if (v86 != v69)
          memmove(v74, v69, (size_t)v56);
        goto LABEL_128;
      }
      v87 = (_BYTE *)(v68 + 4 * v76);
      v88 = v86 - v87;
      memmove(v196, v87, v88);
      v89 = (uint64_t *)((char *)v73 + v88);
      v196 = (uint64_t *)((char *)v73 + v88);
      if (v75 >= 1)
      {
        v86 = v87;
        goto LABEL_107;
      }
    }
LABEL_128:
    v60 = (_QWORD *)v60[1];
  }
  while (v60);
  v41 = v175;
  if ((v177 & 1) != 0)
    goto LABEL_156;
LABEL_134:
  v107 = (unsigned int *)v181;
  if (v181 == __dst || v195 == v196 || !v178)
  {
LABEL_156:
    v55 = v176;
    if (!v176 || v191 >= v37 + 1.5)
      goto LABEL_160;
    __p = 0;
    v193 = 0;
    v194 = 0;
    sub_20B994848(a1, v176, (unint64_t *)&__p, 0);
    v120 = operator new();
    sub_20B9D33D0(v120, 0, (uint64_t *)&__p, a1 + 176, *(_QWORD *)(a1 + 384) + 16, -v37);
    v57 = (void *)sub_20B8E1754(v120);
    if (__p)
    {
      v193 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v108 = 0;
    while ((*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 40))(v59, v107[v108]) >= (double)(unint64_t)(v178 - 1) * -0.7 + -2.8)
    {
      v109 = v181;
      v110 = v196;
      if ((unint64_t)v196 >= v197)
      {
        v112 = v195;
        v113 = ((char *)v196 - (char *)v195) >> 2;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 62)
          sub_20B80CDD8();
        v115 = v197 - (_QWORD)v195;
        if ((uint64_t)(v197 - (_QWORD)v195) >> 1 > v114)
          v114 = v115 >> 1;
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
          v116 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v116 = v114;
        if (v116)
        {
          v117 = (char *)sub_20B8127BC((uint64_t)&v197, v116);
          v112 = v195;
          v110 = v196;
        }
        else
        {
          v117 = 0;
        }
        v118 = &v117[4 * v113];
        *(_DWORD *)v118 = v109[v108];
        v111 = (uint64_t *)(v118 + 4);
        while (v110 != v112)
        {
          v119 = *((_DWORD *)v110 - 1);
          v110 = (uint64_t *)((char *)v110 - 4);
          *((_DWORD *)v118 - 1) = v119;
          v118 -= 4;
        }
        v195 = (uint64_t *)v118;
        v196 = v111;
        v197 = (unint64_t)&v117[4 * v116];
        if (v112)
          operator delete(v112);
      }
      else
      {
        *(_DWORD *)v196 = *((_DWORD *)v181 + v108);
        v111 = (uint64_t *)((char *)v110 + 4);
      }
      v196 = v111;
      ++v108;
      v107 = (unsigned int *)v181;
      if (v108 >= ((_BYTE *)__dst - (_BYTE *)v181) >> 2)
        goto LABEL_156;
    }
LABEL_160:
    v57 = 0;
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (*(double *)&v181 != 0.0)
  {
    __dst = v181;
    operator delete(v181);
  }
  values = v57;
  if (v57)
  {
LABEL_166:
    v121 = *(_QWORD *)(a1 + 184);
    v122 = objc_msgSend_rawCandidate(v57, v55, (uint64_t)v56, v175);
    v123 = (_QWORD *)v122;
    if (v122)
    {
      v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 40))(v122);
      v125 = 40;
      if (!v124)
        v125 = 24;
      v126 = (const void *)(*(uint64_t (**)(_QWORD *))(*v123 + v125))(v123);
    }
    else
    {
      v126 = 0;
    }
    if ((sub_20B90FE00(v121, v126, 2050) & 1) == 0)
    {
      if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8)) < 2)
      {
        (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 456) + 16))(*(_QWORD *)(a1 + 456), v57);
      }
      else
      {
        v195 = 0;
        v196 = (uint64_t *)&v195;
        v197 = 0x2000000000;
        v198 = 0;
        v129 = objc_msgSend_rawCandidate(v57, v127, v128);
        v130 = (_QWORD *)v129;
        if (v129)
        {
          v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 40))(v129);
          v132 = 40;
          if (!v131)
            v132 = 24;
          v133 = (*(uint64_t (**)(_QWORD *))(*v130 + v132))(v130);
        }
        else
        {
          v133 = 0;
        }
        v148 = *(_QWORD *)(a1 + 456);
        *(double *)&v181 = MEMORY[0x24BDAC760];
        __dst = (void *)0x40000000;
        v183 = sub_20B995330;
        v184 = &unk_24C49F958;
        v185 = &v195;
        v186 = v133;
        sub_20B96F9F0(v148, (uint64_t)&v181);
        v149 = v196[3];
        _Block_object_dispose(&v195, 8);
        v150 = operator new(0x28uLL);
        if (v149 <= 1)
          v151 = 1;
        else
          v151 = v149;
        v150[4] = v151;
        *v150 = 0;
        v150[1] = 0;
        v150[2] = &v193;
        v193 = v150;
        *((_BYTE *)v150 + 24) = 1;
        __p = v150;
        v194 = 1;
        *(double *)&v152 = COERCE_DOUBLE(CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x24BDBD690]));
        v181 = v152;
        sub_20B96FFF0(*(_QWORD *)(a1 + 456), v152, &__p);
        if (*(double *)&v152 != 0.0)
          CFRelease(v152);
        sub_20B8292CC((uint64_t)&__p, v193);
        v57 = values;
      }
    }

    goto LABEL_200;
  }
  if (MecabraCandidateGetMatchedLengthType(v41, v55, (uint64_t)v56) == 2)
    goto LABEL_200;
  if (!sub_20B9BE224(*(_QWORD *)(a1 + 384)))
    goto LABEL_200;
  v136 = (const void *)objc_msgSend_rawCandidate(v41, v134, v135);
  if (!v136)
    goto LABEL_200;
  v137 = __dynamic_cast(v136, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D698, 0);
  if (!v137)
    goto LABEL_200;
  v138 = (uint64_t)v137;
  if (!(*(uint64_t (**)(void *))(*(_QWORD *)v137 + 24))(v137))
    goto LABEL_200;
  v139 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
  if ((unint64_t)(CFStringGetLength(v139) - 9) < 0xFFFFFFFFFFFFFFF9)
    goto LABEL_200;
  v140 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
  if ((sub_20B896464(v140) & 1) != 0)
    goto LABEL_200;
  v141 = sub_20B903344((uint64_t)v41, a1);
  *(double *)&v181 = 0.0;
  __dst = 0;
  v183 = 0;
  sub_20B873D0C(&v181, *(const void **)(v141 + 48), *(_QWORD *)(v141 + 56), (uint64_t)(*(_QWORD *)(v141 + 56) - *(_QWORD *)(v141 + 48)) >> 2);
  v143 = v181;
  v142 = __dst;
  v144 = *(_QWORD *)(a1 + 504);
  if (v144)
  {
    v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 24))(v144);
    if (v142 == v143)
      v146 = 1;
    else
      v146 = v145;
    v147 = (unsigned int *)v181;
    if ((v146 & 1) == 0 && *(_DWORD *)v181 == 1)
      *(_DWORD *)v181 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 504) + 56) - 4);
  }
  else
  {
    v147 = (unsigned int *)v181;
  }
  v154 = *(const __CFArray **)(v141 + 96);
  v155 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if ((LMLanguageModelTokenSequenceIsBlocklisted() & 1) != 0)
    goto LABEL_244;
  if ((*(double (**)(uint64_t, uint64_t, unsigned int *, int64_t))(*(_QWORD *)v155 + 40))(v155, 2, v147, (v142 - v143) >> 2) > -0.6)goto LABEL_244;
  if (v142 != v143)
  {
    v55 = (char *)v147[((v142 - v143) >> 2) - 1];
    if (((_DWORD)v55 - 501) < 2
      || (*(double (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155) < -6.0)
    {
      goto LABEL_244;
    }
  }
  if (v154)
  {
    v156 = CFArrayGetCount(v154);
    if (v156 >= 1)
    {
      v157 = (const __CFString *)CFArrayGetValueAtIndex(v154, v156 - 1);
      if ((sub_20B896464(v157) & 1) != 0)
        goto LABEL_244;
    }
  }
  LMLanguageModelCreatePredictionEnumerator();
  v158 = 0;
  v159 = 0.0;
  v160 = 0;
  v161 = 0;
  v162 = 0.0;
  while (1)
  {
    v163 = LMPredictionEnumeratorAdvance();
    v164 = v158 < 5 ? v163 : 0;
    if (v164 != 1)
      break;
    v190 = 0.0;
    v191 = 0.0;
    Prediction = LMPredictionEnumeratorGetPrediction();
    v166 = Prediction;
    if (*(uint64_t *)&v190 < 1 || Prediction < 1)
      break;
    v168 = (_DWORD)__p == 2 && v158 == 0;
    if (v168 || v191 < -1.55)
      break;
    if (v158)
    {
      if (*(uint64_t *)&v190 < *(uint64_t *)&v159 || v191 + 0.3 < v162)
        break;
    }
    else
    {
      v159 = v190;
      v162 = v191;
    }
    v169 = sub_20B9788CC(*(_QWORD **)(*(_QWORD *)(a1 + 120) + 8), (unsigned int *)&__p, Prediction);
    if (v169 > v160)
    {
      memcpy(&v195, &__p, 4 * v166);
      v160 = v169;
      v161 = v166;
    }
    ++v158;
  }
  LMPredictionEnumeratorRelease();
  if (!v161)
    goto LABEL_244;
  v170 = v195;
  if (v161 != 1 || (v57 = 0, (_DWORD)v195 != 1000) && (_DWORD)v195 != 1003)
  {
    if (sub_20B9C45B0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (int)v195)
      || (*(double (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), v170, 0, 0) >= -6.0)
    {
      v171 = operator new();
      sub_20B941F70(v171, v138, (uint64_t)&v195, v161, *(_QWORD **)(*(_QWORD *)(a1 + 120) + 8), a1 + 176);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 24))(v171))
      {
        v172 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 24))(v171);
        Length = CFStringGetLength(v172);
        v174 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138);
        if (Length > CFStringGetLength(v174))
        {
          v57 = (void *)sub_20B8E1754(v171);
          goto LABEL_245;
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v171 + 16))(v171);
    }
LABEL_244:
    v57 = 0;
  }
LABEL_245:
  if (*(double *)&v181 != 0.0)
  {
    __dst = v181;
    operator delete(v181);
  }
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
LABEL_55:
  values = v57;
  if (v57)
    goto LABEL_166;
LABEL_200:
  v153 = CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 456) + 8));
  if (v153 >= 0xC9)
    sub_20B96FE48(*(_QWORD *)(a1 + 456), 200, v153 - 200);
}

void sub_20B994498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;

  if (__p)
    operator delete(__p);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  _Unwind_Resume(exception_object);
}

void sub_20B99460C(uint64_t a1)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double *v18;
  __int128 v19;
  void *__p;
  __int128 v21;

  v2 = 392;
  if (!*(_BYTE *)(a1 + 568))
    v2 = 384;
  sub_20B9BECF8(*(_QWORD **)(a1 + v2), 1, &__p);
  v4 = (double *)__p;
  v3 = (double *)v21;
  if (__p == (void *)v21)
  {
    v5 = 392;
    if (!*(_BYTE *)(a1 + 568))
      v5 = 384;
    sub_20B9BECF8(*(_QWORD **)(a1 + v5), 0, &v18);
    if (__p)
    {
      *(_QWORD *)&v21 = __p;
      operator delete(__p);
    }
    v4 = v18;
    __p = v18;
    v21 = v19;
    v3 = (double *)v19;
  }
  if (v4 != v3)
  {
    v6 = 0;
    v7 = 1;
    v8 = 3.0;
    do
    {
      v9 = -0.0;
      if ((v7 & 1) != 0)
        v9 = v4[1];
      v8 = v8 + v9;
      if (v4[1] >= v8 || CFSetGetCount(*(CFSetRef *)(a1 + 488)) + v6 > 3)
        break;
      v10 = *(_QWORD **)v4;
      if ((v7 & 1) != 0 || !v10)
      {
LABEL_21:
        v12 = sub_20B994B40(a1, v10, v4[1]);
        v14 = *(_BYTE *)(a1 + 568) ? 392 : 384;
        v15 = *(_QWORD *)(a1 + v14);
        v16 = v12 ? "Neural:" : "Neural Dropped:";
        v13.n128_f64[0] = v4[1];
        (*(void (**)(_QWORD, _QWORD, char *, __n128))(**(_QWORD **)(v15 + 952) + 120))(*(_QWORD *)(v15 + 952), *(_QWORD *)v4, v16, v13);
      }
      else
      {
        while (1)
        {
          v11 = *v10;
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 40))(*v10))
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) & 0x1002) != 0)
              break;
          }
          v10 = (_QWORD *)v10[1];
          if (!v10)
          {
            v10 = *(_QWORD **)v4;
            goto LABEL_21;
          }
        }
        v17 = *(_BYTE *)(a1 + 568) ? 392 : 384;
        (*(void (**)(_QWORD, _QWORD, const char *, double))(**(_QWORD **)(*(_QWORD *)(a1 + v17) + 952)
                                                                     + 120))(*(_QWORD *)(*(_QWORD *)(a1 + v17) + 952), *(_QWORD *)v4, "Neural OVS:", v4[1]);
        ++v6;
      }
      v7 = 0;
      v4 += 2;
    }
    while (v4 != v3);
    v3 = (double *)__p;
  }
  if (v3)
  {
    *(_QWORD *)&v21 = v3;
    operator delete(v3);
  }
}

void sub_20B99481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B994848(uint64_t a1, _QWORD *a2, unint64_t *a3, _BYTE *a4)
{
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  CFStringRef v34;
  void *__p;
  void *v38;
  uint64_t v39;

  v6 = a2;
  a3[1] = *a3;
  if (a4)
    *a4 = 0;
  __p = 0;
  v38 = 0;
  v39 = 0;
  v7 = 0;
  if (a2)
  {
    v8 = 0;
    do
    {
      v9 = (_QWORD **)*v6;
      v10 = *(uint64_t **)(*v6 + 16);
      if (v10)
      {
        if (a4)
        {
          if (!*a4)
          {
            v19 = *v10;
            if (v19)
            {
              if ((*(_BYTE *)(v19 + 40) & 0x10) != 0 && *(float *)(v19 + 56) < 1.0)
                *a4 = 1;
            }
          }
        }
        v12 = (_QWORD *)a3[1];
        v11 = a3[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = (uint64_t)((uint64_t)v12 - *a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            sub_20B80CDD8();
          v15 = v11 - *a3;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)sub_20B800BE8((uint64_t)(a3 + 2), v17);
          else
            v18 = 0;
          v20 = &v18[8 * v14];
          *(_QWORD *)v20 = v9;
          v13 = v20 + 8;
          v22 = (char *)*a3;
          v21 = (char *)a3[1];
          if (v21 != (char *)*a3)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v20 - 1) = v23;
              v20 -= 8;
            }
            while (v21 != v22);
            v21 = (char *)*a3;
          }
          *a3 = (unint64_t)v20;
          a3[1] = (unint64_t)v13;
          a3[2] = (unint64_t)&v18[8 * v17];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v12 = v9;
          v13 = v12 + 1;
        }
        a3[1] = (unint64_t)v13;
        v24 = ((uint64_t (*)(_QWORD **))(*v9)[7])(v9);
        sub_20B87D600((uint64_t)&__p, (uint64_t)__p, *(char **)v24, (char *)(*(_QWORD *)v24 + 2 * *(_QWORD *)(v24 + 8)), *(_QWORD *)(v24 + 8));
        if (v7 || (v25 = *v9[2]) == 0)
        {
          v7 = 1;
        }
        else
        {
          v8 += *(_QWORD *)(v25 + 8);
          v7 = v8 > 1;
        }
      }
      v6 = (_QWORD *)v6[1];
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 552))
  {
    v26 = *a3;
    v27 = a3[1];
    if (*a3 == v27)
    {
LABEL_41:
      v29 = 0;
      goto LABEL_50;
    }
  }
  else
  {
    v26 = *a3;
    v27 = a3[1];
    if (v27 == *a3 || v7)
    {
      if (v27 == v26)
        goto LABEL_41;
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 240);
      if (!v28 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28) & 1) != 0)
        goto LABEL_41;
      v26 = *a3;
      v27 = a3[1];
    }
  }
  if (v26 != v27)
  {
    v30 = (_QWORD *)(v27 - 8);
    if ((unint64_t)v30 > v26)
    {
      v31 = v26 + 8;
      do
      {
        v32 = *(_QWORD *)(v31 - 8);
        *(_QWORD *)(v31 - 8) = *v30;
        *v30-- = v32;
        v33 = v31 >= (unint64_t)v30;
        v31 += 8;
      }
      while (!v33);
    }
  }
  v34 = sub_20B88F830();
  v29 = CFSetContainsValue(*(CFSetRef *)(a1 + 488), v34) == 0;
  if (v34)
    CFRelease(v34);
LABEL_50:
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  return v29;
}

void sub_20B994AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B994B40(uint64_t a1, _QWORD *a2, double a3)
{
  _BOOL4 v5;
  uint64_t v6;
  char v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  if (sub_20B994848(a1, a2, (unint64_t *)&__p, &v8))
  {
    if (*(_BYTE *)(a1 + 552))
      v5 = 0;
    else
      v5 = *(_BYTE *)(a1 + 568) == 0;
    v6 = sub_20B994BF8(a1, (uint64_t *)&__p, 0, v5, a3);
  }
  else
  {
    v6 = 0;
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_20B994BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B994BF8(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4, double a5)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  const char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  int v32;
  CFIndex Count;
  unsigned int v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t **v38;
  char *v39;
  size_t v40;
  int v41;
  uint64_t *v42;
  unint64_t v43;
  void *v44;
  const __CFSet *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  const void *v51;
  const char *v52;
  uint64_t v53;
  __CFSet *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  const void *v58;
  const char *v59;
  uint64_t v60;
  const void *v61;
  _DWORD *v62;
  _DWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  __CFSet *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  const void *v95;
  int v96;
  size_t v97;
  int v98;
  unsigned __int8 v99;
  uint64_t *v100;
  uint64_t *v101;

  v99 = 0;
  v10 = operator new();
  v11 = (_DWORD *)v10;
  v12 = 392;
  if (!*(_BYTE *)(a1 + 568))
    v12 = 384;
  sub_20B9D33D0(v10, 0x80000000, a2, a1 + 176, *(_QWORD *)(a1 + v12) + 16, -a5);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 136) + 128))
    v11[12] |= 0x100000u;
  v13 = (void *)sub_20B8E1754((uint64_t)v11);
  v16 = v13;
  v17 = 464;
  if (!*(_BYTE *)(a1 + 568))
    v17 = 456;
  v18 = *(_QWORD *)(a1 + v17);
  v100 = (uint64_t *)objc_msgSend_rawCandidate(v13, v14, v15);
  v19 = sub_20B8CD218((_QWORD *)(v18 + 24), &v100);
  if (v19)
    v22 = v19[2];
  else
    v22 = 0;
  v23 = *(_QWORD *)(a1 + 240);
  v24 = v23
     && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23) & 1) == 0
     && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 56) - 4) != 502;
  v25 = objc_msgSend_rawCandidate(v16, v20, v21);
  if (v25)
  {
    v26 = (_QWORD *)v25;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    v28 = 40;
    if (!v27)
      v28 = 24;
    (*(void (**)(_QWORD *))(*v26 + v28))(v26);
  }
  if (CEMStringIsSingleEmoji() || (*(_BYTE *)(a1 + 520) ? (v29 = 1) : (v29 = v24), (v29 & 1) == 0 && v22))
  {
    v30 = 0;
    goto LABEL_25;
  }
  v32 = a4;
  Count = CFSetGetCount(*(CFSetRef *)(a1 + 488));
  if (v22)
    v96 = (*(uint64_t (**)(uint64_t *))(*v22 + 112))(v22);
  else
    v96 = 0;
  if (Count)
    v34 = 2;
  else
    v34 = 1;
  if (*(_BYTE *)(a1 + 520))
    v35 = 0;
  else
    v35 = v34;
  v30 = sub_20B96FADC(v18, v16, v35, &v99);
  if (v99 && v22 && !*(_BYTE *)(a1 + 568))
  {
    v38 = *(uint64_t ***)(a1 + 528);
    v39 = *(char **)(a1 + 536);
    if (v38 != (uint64_t **)v39)
    {
      while (*v38 != v22)
      {
        if (++v38 == (uint64_t **)v39)
        {
          v38 = *(uint64_t ***)(a1 + 536);
          break;
        }
      }
    }
    if (v38 != (uint64_t **)v39)
    {
      v36 = v38 + 1;
      v40 = v39 - (char *)(v38 + 1);
      if (v40)
      {
        v97 = v40;
        memmove(v38, v36, v40);
        v40 = v97;
      }
      *(_QWORD *)(a1 + 536) = (char *)v38 + v40;
    }
  }
  if (a3)
    *a3 = v16;
  v41 = v99;
  if (!Count && v99)
    *(_BYTE *)(a1 + 520) = 1;
  v98 = 0;
  if (v24 && v22 && v41)
  {
    if (!*(_BYTE *)(a1 + 568))
    {
      v11[48] = v96;
      v77 = *(_QWORD **)(a1 + 536);
      v78 = *(_QWORD *)(a1 + 544);
      if ((unint64_t)v77 >= v78)
      {
        v80 = *(_QWORD *)(a1 + 528);
        v81 = ((uint64_t)v77 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          sub_20B80CDD8();
        v82 = v78 - v80;
        v83 = v82 >> 2;
        if (v82 >> 2 <= (unint64_t)(v81 + 1))
          v83 = v81 + 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
          v84 = (unint64_t)sub_20B87FB70(v84);
        else
          v36 = 0;
        v85 = (_QWORD *)(v84 + 8 * v81);
        v86 = v84 + 8 * (_QWORD)v36;
        *v85 = v11;
        v79 = v85 + 1;
        v87 = *(char **)(a1 + 536);
        v88 = *(char **)(a1 + 528);
        if (v87 != v88)
        {
          do
          {
            v89 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *--v85 = v89;
          }
          while (v87 != v88);
          v87 = *(char **)(a1 + 528);
        }
        *(_QWORD *)(a1 + 528) = v85;
        *(_QWORD *)(a1 + 536) = v79;
        *(_QWORD *)(a1 + 544) = v86;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v77 = v11;
        v79 = v77 + 1;
      }
      *(_QWORD *)(a1 + 536) = v79;
      v98 = 1;
      if (!v32)
        goto LABEL_115;
      goto LABEL_59;
    }
    v98 = 0;
  }
  if (v32)
  {
LABEL_59:
    sub_20B879A0C(*(_QWORD *)(a1 + 496), (uint64_t)v11, &v100);
    v42 = v101;
    if (v101 != v100)
    {
      v43 = 0;
      v42 = v100;
      do
      {
        v44 = (void *)sub_20B8E1754(v42[v43]);
        v45 = *(const __CFSet **)(a1 + 488);
        v48 = objc_msgSend_rawCandidate(v44, v46, v47);
        v49 = (_QWORD *)v48;
        if (v48)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48))
            v50 = 40;
          else
            v50 = 24;
          v51 = (const void *)(*(uint64_t (**)(_QWORD *))(*v49 + v50))(v49);
        }
        else
        {
          v51 = 0;
        }
        if (!CFSetContainsValue(v45, v51) && sub_20B96FADC(*(_QWORD *)(a1 + 456), v44, 2, 0))
        {
          v54 = *(__CFSet **)(a1 + 488);
          v55 = objc_msgSend_rawCandidate(v44, v52, v53);
          v56 = (_QWORD *)v55;
          if (v55)
          {
            v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55) ? 40 : 24;
            v58 = (const void *)(*(uint64_t (**)(_QWORD *))(*v56 + v57))(v56);
          }
          else
          {
            v58 = 0;
          }
          CFSetAddValue(v54, v58);
          if (v98)
          {
            v61 = (const void *)objc_msgSend_rawCandidate(v44, v59, v60);
            if (v61)
            {
              v62 = __dynamic_cast(v61, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D398, 0);
              if (v62)
              {
                v63 = v62;
                (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 392))(v11);
                (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 400))(v63);
                v63[48] = v11[48];
                v64 = *(_QWORD **)(a1 + 536);
                v65 = *(_QWORD *)(a1 + 544);
                if ((unint64_t)v64 >= v65)
                {
                  v67 = *(_QWORD *)(a1 + 528);
                  v68 = ((uint64_t)v64 - v67) >> 3;
                  if ((unint64_t)(v68 + 1) >> 61)
                    sub_20B80CDD8();
                  v69 = v65 - v67;
                  v70 = v69 >> 2;
                  if (v69 >> 2 <= (unint64_t)(v68 + 1))
                    v70 = v68 + 1;
                  if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                    v71 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v71 = v70;
                  if (v71)
                    v71 = (unint64_t)sub_20B87FB70(v71);
                  else
                    v72 = 0;
                  v73 = (_QWORD *)(v71 + 8 * v68);
                  *v73 = v63;
                  v66 = v73 + 1;
                  v74 = *(char **)(a1 + 536);
                  v75 = *(char **)(a1 + 528);
                  if (v74 != v75)
                  {
                    do
                    {
                      v76 = *((_QWORD *)v74 - 1);
                      v74 -= 8;
                      *--v73 = v76;
                    }
                    while (v74 != v75);
                    v74 = *(char **)(a1 + 528);
                  }
                  *(_QWORD *)(a1 + 528) = v73;
                  *(_QWORD *)(a1 + 536) = v66;
                  *(_QWORD *)(a1 + 544) = v71 + 8 * v72;
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *v64 = v63;
                  v66 = v64 + 1;
                }
                *(_QWORD *)(a1 + 536) = v66;
              }
            }
          }
        }

        ++v43;
        v42 = v100;
      }
      while (v43 < v101 - v100);
    }
    if (v42)
    {
      v101 = v42;
      operator delete(v42);
    }
  }
LABEL_115:
  v90 = *(__CFSet **)(a1 + 488);
  v91 = objc_msgSend_rawCandidate(v16, (const char *)v36, v37);
  if (v91)
  {
    v92 = (_QWORD *)v91;
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 40))(v91);
    v94 = 40;
    if (!v93)
      v94 = 24;
    v95 = (const void *)(*(uint64_t (**)(_QWORD *))(*v92 + v94))(v92);
  }
  else
  {
    v95 = 0;
  }
  CFSetAddValue(v90, v95);
LABEL_25:

  if (v99)
    return 1;
  else
    return v30;
}

void sub_20B9951FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B995244(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 40);
  if (a2 && (*(_DWORD *)(*a2 + 8) - 9) < 2)
    return 0;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > *(double *)(a1 + 48) + 0.7)
    return 1;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v6 = **(_QWORD **)(*a2 + 16);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 40) & 1) != 0)
          return 1;
      }
    }
  }
  (*(void (**)(_QWORD, _QWORD *, const char *))(**(_QWORD **)(*(_QWORD *)(v4 + 384) + 952) + 120))(*(_QWORD *)(*(_QWORD *)(v4 + 384) + 952), a2, "Alternative: ");
  return sub_20B994B40(v4, a2, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

uint64_t sub_20B995320(uint64_t a1, _QWORD *a2)
{
  return sub_20B994B40(*(_QWORD *)(a1 + 32), a2, *(double *)(a1 + 40));
}

uint64_t sub_20B995330(uint64_t a1, void *a2, _BYTE *a3)
{
  const __CFString *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t result;

  v5 = *(const __CFString **)(a1 + 40);
  v6 = objc_msgSend_rawCandidate(a2, (const char *)a2, (uint64_t)a3);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v9 = 40;
    if (!v8)
      v9 = 24;
    v10 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v7 + v9))(v7);
  }
  else
  {
    v10 = 0;
  }
  result = CFStringHasPrefix(v5, v10);
  if ((_DWORD)result)
    *a3 = 1;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_20B9953CC(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = operator new();
  sub_20B8B7314(v4, a2, kFacemarkCategoryRecentlyUsed[0]);
  v5 = (id)sub_20B8E1754(v4);
  (*(void (**)(_QWORD, id))(**(_QWORD **)(v3 + 456) + 16))(*(_QWORD *)(v3 + 456), v5);

}

void sub_20B995450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

CFCharacterSetRef sub_20B995474()
{
  const __CFCharacterSet *Predefined;
  CFCharacterSetRef result;

  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  qword_25472BEE0 = (uint64_t)CFCharacterSetCreateInvertedSet(0, Predefined);
  result = CFCharacterSetCreateWithCharactersInString(0, CFSTR(":/-_+@#"));
  qword_25472BEE8 = (uint64_t)result;
  return result;
}

uint64_t sub_20B9954C0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20B800BC0();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  sub_20B995634(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  sub_20B947074((uint64_t)&v17);
  return v10;
}

void sub_20B995620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B947074((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B995634(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B812928(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B995690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B9956AC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 328);
    *(_QWORD *)(v2 + 328) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(v2 + 320);
    *(_QWORD *)(v2 + 320) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(v2 + 312);
    *(_QWORD *)(v2 + 312) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(v2 + 304);
    *(_QWORD *)(v2 + 304) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    sub_20B9957F4((uint64_t *)(v2 + 256));
    v15 = (void **)(v2 + 216);
    sub_20B8E736C(&v15);
    v7 = *(void **)(v2 + 192);
    if (v7)
    {
      *(_QWORD *)(v2 + 200) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 168);
    if (v8)
    {
      *(_QWORD *)(v2 + 176) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 144);
    if (v9)
    {
      *(_QWORD *)(v2 + 152) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 120);
    if (v10)
    {
      *(_QWORD *)(v2 + 128) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 96);
    if (v11)
    {
      *(_QWORD *)(v2 + 104) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 72);
    if (v12)
    {
      *(_QWORD *)(v2 + 80) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 48);
    if (v13)
    {
      *(_QWORD *)(v2 + 56) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 24);
    if (v14)
    {
      *(_QWORD *)(v2 + 32) = v14;
      operator delete(v14);
    }
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t *sub_20B9957F4(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B98C5C8(a1 + 4, 0);
  sub_20B98C5C8(a1 + 3, 0);
  sub_20B98C5C8(a1 + 2, 0);
  return a1;
}

uint64_t sub_20B995850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = operator new();
  sub_20B9975C4(v2);
  *(_QWORD *)a1 = v2;
  v3 = operator new();
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_QWORD *)v3 = &off_24C4616D0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = operator new();
  sub_20B9975C4(v4);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = operator new();
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_QWORD *)v5 = &off_24C4616D0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = operator new();
  sub_20BA00DA8(v6);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = operator new();
  sub_20B9975C4(v7);
  *(_QWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return a1;
}

void sub_20B9959B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = v11;
  MEMORY[0x20BD39CB0](v13, 0x10F3C404517DEE7);
  a10 = v12 + 3;
  sub_20B997800(&a10);
  a10 = v12;
  sub_20B997888(&a10);
  sub_20B997CAC(v10 + 4);
  v15 = v10[3];
  v10[3] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v10[2];
  v10[2] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v10[1];
  v10[1] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *v10;
  *v10 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B995AFC(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v14;

  if (*((char *)a1 + 263) < 0)
    operator delete((void *)a1[30]);
  if (*((char *)a1 + 239) < 0)
    operator delete((void *)a1[27]);
  v2 = (_QWORD *)a1[23];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[21];
  a1[21] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = (uint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = (uint64_t)v6;
    operator delete(v6);
  }
  v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = (uint64_t)v7;
    operator delete(v7);
  }
  v8 = a1[11];
  a1[11] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v14 = (void **)(a1 + 8);
  sub_20B997800(&v14);
  v14 = (void **)(a1 + 5);
  sub_20B997888(&v14);
  sub_20B997CAC(a1 + 4);
  v9 = a1[3];
  a1[3] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[2];
  a1[2] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[1];
  a1[1] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *a1;
  *a1 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

uint64_t sub_20B995C3C(_QWORD *a1, uint64_t **a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::locale v8;

  sub_20B9960A8((uint64_t)a1, a2);
  if ((sub_20B996CD8((uint64_t)a1) & 1) != 0)
  {
    if ((sub_20B996F5C(a1) & 1) != 0)
      return 1;
    v6 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"Fails to build surface trie", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v7 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  }
  else
  {
    v4 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"Fails to build unigram reading trie", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  }
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_20B995D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B995D64(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(char *)(a1 + 239);
  if (v2 < 0)
    v3 = *(_QWORD *)(a1 + 224);
  else
    v3 = *(unsigned __int8 *)(a1 + 239);
  v4 = a1 + 216;
  if (!v3)
  {
    sub_20B995DC0((const std::string::value_type *)a1, (std::string *)(a1 + 216));
    if ((*(_BYTE *)(a1 + 239) & 0x80) == 0)
      return v4;
    return *(_QWORD *)v4;
  }
  if ((v2 & 0x80) != 0)
    return *(_QWORD *)v4;
  return v4;
}

std::string *sub_20B995DC0(const std::string::value_type *a1, std::string *this)
{
  int v4;
  const std::string::value_type *v5;
  int v6;
  const std::string::value_type *v7;
  int v8;
  int v9;
  int v10;
  char v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string::value_type v15[8];
  int v16;
  std::string::value_type v17[4];
  std::string::value_type __s[4];

  std::string::append(this, "k", 4uLL);
  std::string::append(this, a1 + 208, 4uLL);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD *)a1 + 1));
  v5 = (const std::string::value_type *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1));
  sub_20B995FA8(v4, v5, this);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1);
  v7 = (const std::string::value_type *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1);
  sub_20B995FA8(v6, v7, this);
  sub_20B995FA8(0, 0, this);
  sub_20B995FA8(0, 0, this);
  v8 = 0;
  v9 = 12 * ((*((_QWORD *)a1 + 19) - *((_QWORD *)a1 + 18)) >> 3);
  *(_DWORD *)__s = v9;
  if ((v9 & 4) != 0)
  {
    v8 = 0;
    v10 = v9 + 12;
    do
    {
      v11 = v10;
      ++v8;
      v10 += 12;
    }
    while ((v11 & 4) != 0);
  }
  std::string::append(this, __s, 4uLL);
  *(_DWORD *)v17 = 12 * v8;
  std::string::append(this, v17, 4uLL);
  if (a1[263] < 0)
  {
    v12 = (const std::string::value_type *)*((_QWORD *)a1 + 30);
    v13 = *((_QWORD *)a1 + 31);
  }
  else
  {
    v12 = a1 + 240;
    v13 = *((unsigned __int8 *)a1 + 263);
  }
  std::string::append(this, v12, v13);
  for (; v8; --v8)
  {
    v16 = 0;
    *(_QWORD *)v15 = 0;
    std::string::append(this, v15, 0xCuLL);
  }
  *(_DWORD *)v17 = 0;
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  std::string::append(this, v17, 4uLL);
  return std::string::append(this, v17, 4uLL);
}

void sub_20B995FA8(int a1, const std::string::value_type *a2, std::string *this)
{
  char v5;
  std::string::value_type *v6[3];
  std::string::value_type v7[4];
  std::string::value_type __s[4];

  *(_DWORD *)v7 = ((a1 + 7) & 0xFFFFFFF8) - a1;
  *(_DWORD *)__s = a1;
  std::string::append(this, __s, 4uLL);
  std::string::append(this, v7, 4uLL);
  if (*(_DWORD *)__s)
    std::string::append(this, a2, *(unsigned int *)__s);
  if (*(_DWORD *)v7)
  {
    v5 = 0;
    sub_20B99793C(v6, *(unsigned int *)v7, &v5);
    std::string::append(this, v6[0], *(unsigned int *)v7);
    if (v6[0])
    {
      v6[1] = v6[0];
      operator delete(v6[0]);
    }
  }
}

void sub_20B99604C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B996068(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B9960A8(uint64_t a1, uint64_t **a2)
{
  int8x8_t prime;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const std::nothrow_t *v46;
  unint64_t v47;
  uint64_t *v48;
  BOOL v49;
  uint64_t *v50;
  const std::string **v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  uint64_t **v59;
  uint64_t *i;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t **v63;
  uint64_t *j;
  unint64_t v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  float v73;
  float v74;
  _BOOL8 v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint8x8_t v83;
  unint64_t v84;
  uint8x8_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  _BYTE *v116;
  _BYTE *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t *v124;
  void *__p[2];
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  _BYTE v130[32];
  __int128 v131;

  v6 = (void **)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 144);
  v7 = (char *)a2[1] - (char *)*a2;
  v8 = a1 + 160;
  if (v7 >> 3 > (unint64_t)((*(_QWORD *)(a1 + 160) - v5) >> 3))
  {
    if (v7 < 0)
LABEL_209:
      sub_20B80CDD8();
    v9 = *(_QWORD *)(a1 + 152) - v5;
    v10 = (char *)sub_20B800BE8(a1 + 160, v7 >> 3);
    v11 = &v10[v9 & 0xFFFFFFFFFFFFFFF8];
    v13 = &v10[8 * v12];
    v15 = *(char **)(a1 + 144);
    v14 = *(char **)(a1 + 152);
    v16 = v11;
    if (v14 != v15)
    {
      do
      {
        v17 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)*v6;
    }
    *(_QWORD *)(a1 + 144) = v16;
    *(_QWORD *)(a1 + 152) = v11;
    *(_QWORD *)(a1 + 160) = v13;
    if (v14)
      operator delete(v14);
  }
  v19 = *a2;
  v18 = a2[1];
  if (v19 == v18)
  {
    v33 = *(char **)(a1 + 152);
  }
  else
  {
    prime = (int8x8_t)") [";
    do
    {
      v20 = *v19;
      if (*(char *)(*v19 + 47) < 0)
      {
        if (!*(_QWORD *)(v20 + 32))
        {
LABEL_14:
          v21 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
          sub_20B828F84(v21, (uint64_t)"(", 1);
          v22 = (_QWORD *)std::ostream::operator<<();
          v23 = sub_20B828F84(v22, (uint64_t)") [", 3);
          v24 = sub_20B828F84(v23, (uint64_t)"token->reading.size()", 21);
          v25 = sub_20B828F84(v24, (uint64_t)"] ", 2);
          sub_20B828F84(v25, (uint64_t)"token reading is empty\n", 23);
          sub_20B89423C();
        }
      }
      else if (!*(_BYTE *)(*v19 + 47))
      {
        goto LABEL_14;
      }
      if (*(char *)(v20 + 71) < 0)
      {
        if (!*(_QWORD *)(v20 + 56))
        {
LABEL_19:
          v26 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
          sub_20B828F84(v26, (uint64_t)"(", 1);
          v27 = (_QWORD *)std::ostream::operator<<();
          v28 = sub_20B828F84(v27, (uint64_t)") [", 3);
          v29 = sub_20B828F84(v28, (uint64_t)"token->surface.size()", 21);
          v30 = sub_20B828F84(v29, (uint64_t)"] ", 2);
          sub_20B828F84(v30, (uint64_t)"token surface is empty\n", 23);
          sub_20B89423C();
        }
      }
      else if (!*(_BYTE *)(v20 + 71))
      {
        goto LABEL_19;
      }
      v32 = *(char **)(a1 + 152);
      v31 = *(_QWORD *)(a1 + 160);
      if ((unint64_t)v32 >= v31)
      {
        v34 = (v32 - (_BYTE *)*v6) >> 3;
        if ((unint64_t)(v34 + 1) >> 61)
          goto LABEL_209;
        v35 = v31 - (_QWORD)*v6;
        v36 = v35 >> 2;
        if (v35 >> 2 <= (unint64_t)(v34 + 1))
          v36 = v34 + 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)sub_20B800BE8(v8, v37);
        else
          v38 = 0;
        v39 = &v38[8 * v34];
        *(_QWORD *)v39 = v20;
        v33 = v39 + 8;
        v41 = *(char **)(a1 + 144);
        v40 = *(char **)(a1 + 152);
        if (v40 != v41)
        {
          do
          {
            v42 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v39 - 1) = v42;
            v39 -= 8;
          }
          while (v40 != v41);
          v40 = (char *)*v6;
        }
        *(_QWORD *)(a1 + 144) = v39;
        *(_QWORD *)(a1 + 152) = v33;
        *(_QWORD *)(a1 + 160) = &v38[8 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v32 = v20;
        v33 = v32 + 8;
      }
      *(_QWORD *)(a1 + 152) = v33;
      ++v19;
    }
    while (v19 != v18);
  }
  v43 = (uint64_t)*v6;
  v44 = v33 - (_BYTE *)*v6;
  v45 = v44 >> 3;
  if (v44 < 1025)
  {
LABEL_43:
    sub_20B997CE8(v43, v33, v45, 0, 0);
  }
  else
  {
    v46 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v47 = v44 >> 3;
    while (1)
    {
      v48 = (uint64_t *)operator new(8 * v47, v46);
      if (v48)
        break;
      v49 = v47 > 1;
      v47 >>= 1;
      if (!v49)
        goto LABEL_43;
    }
    v50 = v48;
    sub_20B997CE8(v43, v33, v45, v48, v47);
    operator delete(v50);
  }
  v51 = *(const std::string ***)(a1 + 144);
  if (*(const std::string ***)(a1 + 152) != v51)
  {
    v131 = 0u;
    memset(v130, 0, sizeof(v130));
    std::string::operator=((std::string *)v130, *v51 + 1);
    v52 = *(uint64_t **)(a1 + 144);
    v124 = *(uint64_t **)(a1 + 152);
    if (v52 != v124)
    {
      v53 = 0;
      v123 = (_QWORD *)(a1 + 184);
      while (1)
      {
        v54 = *v52;
        v55 = *(unsigned int *)(*v52 + 12);
        v56 = *(_QWORD *)(a1 + 176);
        if (v56)
        {
          v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
          v57.i16[0] = vaddlv_u8(v57);
          if (v57.u32[0] > 1uLL)
          {
            v58 = *(unsigned int *)(*v52 + 12);
            if (v56 <= v55)
              v58 = v55 % v56;
          }
          else
          {
            v58 = ((_DWORD)v56 - 1) & v55;
          }
          v59 = *(uint64_t ***)(*(_QWORD *)(a1 + 168) + 8 * v58);
          if (v59)
          {
            for (i = *v59; i; i = (uint64_t *)*i)
            {
              v61 = i[1];
              if (v61 == v55)
              {
                if (*((_DWORD *)i + 4) == (_DWORD)v55)
                {
                  v67 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
                  sub_20B828F84(v67, (uint64_t)"(", 1);
                  v68 = (_QWORD *)std::ostream::operator<<();
                  v69 = sub_20B828F84(v68, (uint64_t)") [", 3);
                  v70 = sub_20B828F84(v69, (uint64_t)"iterator == m_tokenIDToUnigramTokenIndexMap.end()", 49);
                  v71 = sub_20B828F84(v70, (uint64_t)"] ", 2);
                  sub_20B828F84(v71, (uint64_t)"tokenID should be unique.\n", 26);
                  sub_20B89423C();
                }
              }
              else
              {
                if (v57.u32[0] > 1uLL)
                {
                  if (v61 >= v56)
                    v61 %= v56;
                }
                else
                {
                  v61 &= v56 - 1;
                }
                if (v61 != v58)
                  break;
              }
            }
          }
          v62 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
          v62.i16[0] = vaddlv_u8(v62);
          if (v62.u32[0] > 1uLL)
          {
            prime = (int8x8_t)*(unsigned int *)(*v52 + 12);
            if (v56 <= v55)
              prime = (int8x8_t)(v55 % v56);
          }
          else
          {
            prime = (int8x8_t)(((_DWORD)v56 - 1) & v55);
          }
          v63 = *(uint64_t ***)(*(_QWORD *)(a1 + 168) + 8 * *(_QWORD *)&prime);
          if (v63)
          {
            for (j = *v63; j; j = (uint64_t *)*j)
            {
              v65 = j[1];
              if (v65 == v55)
              {
                if (*((_DWORD *)j + 4) == (_DWORD)v55)
                  goto LABEL_136;
              }
              else
              {
                if (v62.u32[0] > 1uLL)
                {
                  if (v65 >= v56)
                    v65 %= v56;
                }
                else
                {
                  v65 &= v56 - 1;
                }
                if (v65 != *(_QWORD *)&prime)
                  break;
              }
            }
          }
          v66 = 0;
        }
        else
        {
          v66 = 1;
        }
        v72 = operator new(0x18uLL);
        *v72 = 0;
        v72[1] = v55;
        v73 = (float)(unint64_t)(*(_QWORD *)(a1 + 192) + 1);
        *((_DWORD *)v72 + 4) = v55;
        *((_DWORD *)v72 + 5) = v53;
        v74 = *(float *)(a1 + 200);
        if ((((float)(v74 * (float)v56) >= v73) & ~v66) != 0)
        {
          v55 = (unint64_t)prime;
          goto LABEL_126;
        }
        v75 = (v56 & (v56 - 1)) != 0;
        if (v56 < 3)
          v75 = 1;
        v76 = v75 | (2 * v56);
        v77 = vcvtps_u32_f32(v73 / v74);
        prime = (int8x8_t)(v76 <= v77 ? v77 : v76);
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v56 = *(_QWORD *)(a1 + 176);
        }
        if (*(_QWORD *)&prime > v56)
          break;
        if (*(_QWORD *)&prime < v56)
        {
          v84 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
          if (v56 < 3 || (v85 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v85.i16[0] = vaddlv_u8(v85), v85.u32[0] > 1uLL))
          {
            v84 = std::__next_prime(v84);
          }
          else
          {
            v86 = 1 << -(char)__clz(v84 - 1);
            if (v84 >= 2)
              v84 = v86;
          }
          if (*(_QWORD *)&prime <= v84)
            prime = (int8x8_t)v84;
          if (*(_QWORD *)&prime >= v56)
          {
            v56 = *(_QWORD *)(a1 + 176);
          }
          else
          {
            if (prime)
              break;
            v110 = *(void **)(a1 + 168);
            *(_QWORD *)(a1 + 168) = 0;
            if (v110)
              operator delete(v110);
            v56 = 0;
            *(_QWORD *)(a1 + 176) = 0;
          }
        }
LABEL_122:
        if ((v56 & (v56 - 1)) != 0)
        {
          if (v56 <= v55)
            v55 %= v56;
        }
        else
        {
          v55 = ((_DWORD)v56 - 1) & v55;
        }
LABEL_126:
        v90 = *(_QWORD *)(a1 + 168);
        v91 = *(_QWORD **)(v90 + 8 * v55);
        if (v91)
        {
          *v72 = *v91;
LABEL_134:
          *v91 = v72;
          goto LABEL_135;
        }
        *v72 = *v123;
        *v123 = v72;
        *(_QWORD *)(v90 + 8 * v55) = v123;
        if (*v72)
        {
          v92 = *(_QWORD *)(*v72 + 8);
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v92 >= v56)
              v92 %= v56;
          }
          else
          {
            v92 &= v56 - 1;
          }
          v91 = (_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v92);
          goto LABEL_134;
        }
LABEL_135:
        ++*(_QWORD *)(a1 + 192);
LABEL_136:
        v93 = v130[23];
        if (v130[23] >= 0)
          v94 = v130[23];
        else
          v94 = *(_QWORD *)&v130[8];
        v95 = *(unsigned __int8 *)(v54 + 47);
        v96 = (char)v95;
        if ((v95 & 0x80u) != 0)
          v95 = *(_QWORD *)(v54 + 32);
        if (v94 != v95)
          goto LABEL_152;
        if (v96 >= 0)
          v97 = (unsigned __int8 *)(v54 + 24);
        else
          v97 = *(unsigned __int8 **)(v54 + 24);
        if ((v130[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)v130, v97, *(size_t *)&v130[8]))
            goto LABEL_152;
        }
        else if (v130[23])
        {
          v98 = v130;
          while (*v98 == *v97)
          {
            ++v98;
            ++v97;
            if (!--v93)
              goto LABEL_160;
          }
LABEL_152:
          prime = *(int8x8_t *)(a1 + 48);
          if (*(_QWORD *)&prime >= *(_QWORD *)(a1 + 56))
          {
            v99 = sub_20B997A54((int64x2_t *)(a1 + 40), (__int128 *)v130);
          }
          else
          {
            sub_20B997BDC(*(_QWORD **)(a1 + 48), (__int128 *)v130);
            v99 = *(_QWORD *)&prime + 48;
            *(_QWORD *)(a1 + 48) = *(_QWORD *)&prime + 48;
          }
          *(_QWORD *)(a1 + 48) = v99;
          if ((v130[23] & 0x80000000) != 0)
            operator delete(*(void **)v130);
          memset(v130, 0, 24);
          if (*(_QWORD *)&v130[24])
          {
            *(_QWORD *)&v131 = *(_QWORD *)&v130[24];
            operator delete(*(void **)&v130[24]);
          }
          *(_QWORD *)&v130[24] = 0;
          v131 = 0uLL;
          std::string::operator=((std::string *)v130, (const std::string *)(v54 + 24));
        }
LABEL_160:
        v100 = v131;
        if ((unint64_t)v131 >= *((_QWORD *)&v131 + 1))
        {
          v102 = (uint64_t)(v131 - *(_QWORD *)&v130[24]) >> 3;
          if ((unint64_t)(v102 + 1) >> 61)
            sub_20B80CDD8();
          v103 = (uint64_t)(*((_QWORD *)&v131 + 1) - *(_QWORD *)&v130[24]) >> 2;
          if (v103 <= v102 + 1)
            v103 = v102 + 1;
          if (*((_QWORD *)&v131 + 1) - *(_QWORD *)&v130[24] >= 0x7FFFFFFFFFFFFFF8uLL)
            v104 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v104 = v103;
          if (v104)
            v105 = (char *)sub_20B800BE8((uint64_t)&v131 + 8, v104);
          else
            v105 = 0;
          v106 = &v105[8 * v102];
          *(_QWORD *)v106 = v54;
          v101 = v106 + 8;
          v108 = *(char **)&v130[24];
          v107 = (char *)v131;
          if ((_QWORD)v131 != *(_QWORD *)&v130[24])
          {
            do
            {
              v109 = *((_QWORD *)v107 - 1);
              v107 -= 8;
              *((_QWORD *)v106 - 1) = v109;
              v106 -= 8;
            }
            while (v107 != v108);
            v107 = *(char **)&v130[24];
          }
          *(_QWORD *)&v130[24] = v106;
          *(_QWORD *)&v131 = v101;
          *((_QWORD *)&v131 + 1) = &v105[8 * v104];
          if (v107)
            operator delete(v107);
        }
        else
        {
          *(_QWORD *)v131 = v54;
          v101 = (_QWORD *)(v100 + 8);
        }
        *(_QWORD *)&v131 = v101;
        ++v53;
        if (++v52 == v124)
          goto LABEL_187;
      }
      if (*(_QWORD *)&prime >> 61)
        sub_20B800BC0();
      v78 = operator new(8 * *(_QWORD *)&prime);
      v79 = *(void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v78;
      if (v79)
        operator delete(v79);
      v80 = 0;
      *(int8x8_t *)(a1 + 176) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v80++) = 0;
      while (*(_QWORD *)&prime != v80);
      v81 = (_QWORD *)*v123;
      if (*v123)
      {
        v82 = v81[1];
        v83 = (uint8x8_t)vcnt_s8(prime);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          if (v82 >= *(_QWORD *)&prime)
            v82 %= *(_QWORD *)&prime;
        }
        else
        {
          v82 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v82) = v123;
        v87 = (_QWORD *)*v81;
        if (*v81)
        {
          do
          {
            v88 = v87[1];
            if (v83.u32[0] > 1uLL)
            {
              if (v88 >= *(_QWORD *)&prime)
                v88 %= *(_QWORD *)&prime;
            }
            else
            {
              v88 &= *(_QWORD *)&prime - 1;
            }
            if (v88 != v82)
            {
              v89 = *(_QWORD *)(a1 + 168);
              if (!*(_QWORD *)(v89 + 8 * v88))
              {
                *(_QWORD *)(v89 + 8 * v88) = v81;
                goto LABEL_118;
              }
              *v81 = *v87;
              *v87 = **(_QWORD **)(*(_QWORD *)(a1 + 168) + 8 * v88);
              **(_QWORD **)(*(_QWORD *)(a1 + 168) + 8 * v88) = v87;
              v87 = v81;
            }
            v88 = v82;
LABEL_118:
            v81 = v87;
            v87 = (_QWORD *)*v87;
            v82 = v88;
          }
          while (v87);
        }
      }
      v56 = (unint64_t)prime;
      goto LABEL_122;
    }
LABEL_187:
    v111 = *(_QWORD *)(a1 + 48);
    if (v111 >= *(_QWORD *)(a1 + 56))
    {
      v112 = sub_20B997A54((int64x2_t *)(a1 + 40), (__int128 *)v130);
    }
    else
    {
      sub_20B997BDC(*(_QWORD **)(a1 + 48), (__int128 *)v130);
      v112 = v111 + 48;
      *(_QWORD *)(a1 + 48) = v111 + 48;
    }
    *(_QWORD *)(a1 + 48) = v112;
    v113 = *(__int128 **)(a1 + 40);
    if (v113 == (__int128 *)v112)
    {
      v114 = 0;
    }
    else
    {
      v114 = 0;
      do
      {
        if (*((char *)v113 + 23) < 0)
        {
          sub_20B80ACE0(__p, *(void **)v113, *((_QWORD *)v113 + 1));
        }
        else
        {
          v115 = *v113;
          v126 = *((_QWORD *)v113 + 2);
          *(_OWORD *)__p = v115;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        sub_20B9979B8(&v127, *((const void **)v113 + 3), *((_QWORD *)v113 + 4), (uint64_t)(*((_QWORD *)v113 + 4) - *((_QWORD *)v113 + 3)) >> 3);
        v116 = v127;
        v117 = v128;
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (SHIBYTE(v126) < 0)
          operator delete(__p[0]);
        v114 += (v117 - v116) >> 3;
        v113 += 3;
      }
      while (v113 != (__int128 *)v112);
    }
    if (v114 != (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3)
    {
      v118 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
      sub_20B828F84(v118, (uint64_t)"(", 1);
      v119 = (_QWORD *)std::ostream::operator<<();
      v120 = sub_20B828F84(v119, (uint64_t)") [", 3);
      v121 = sub_20B828F84(v120, (uint64_t)"tokenCount == m_sortedUnigramTokenArray.size()", 46);
      v122 = sub_20B828F84(v121, (uint64_t)"] ", 2);
      sub_20B828F84(v122, (uint64_t)"m_sortedUnigramTokenArray.size is not equal to the token count in m_unigramReadingAndTokensPairList.\n", 101);
      sub_20B89423C();
    }
    if (*(_QWORD *)&v130[24])
    {
      *(_QWORD *)&v131 = *(_QWORD *)&v130[24];
      operator delete(*(void **)&v130[24]);
    }
    if ((v130[23] & 0x80000000) != 0)
      operator delete(*(void **)v130);
  }
}

