void sub_20B85ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B85ED38(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  BOOL v12;

  v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      v2 = 0;
      v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        v4 = v1 + 2;
        v5 = *v1;
        v1 += 8;
        v2 += sub_20B85EDF8(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  v8 = *(int **)v1;
  v6 = v1 + 2;
  v7 = v8;
  if (v8 == v6)
    return 0;
  v2 = 0;
  do
  {
    v9 = sub_20B85EDF8((_QWORD *)v7 + 5, v7[8]);
    v10 = (int *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (int *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_20B85EDF8(_QWORD *a1, int a2)
{
  int v4;
  unsigned __int8 v5;
  std::string *v6;
  std::string *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  char v15;
  std::string *v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  std::string *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  int v69;
  uint64_t v70;
  int *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int *v93;
  int *v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(void);
  int v100;
  uint64_t v101;
  char v102;
  std::string v103[2];

  if (*((_BYTE *)a1 + 9))
  {
    v4 = *((unsigned __int8 *)a1 + 8);
    v5 = v4 - 19;
    if (*((_BYTE *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_20B855F68((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v6 = sub_20B855F80(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_20B8560B0((uint64_t)&v102, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v103);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          v21 = 8 * *(unsigned int *)*a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          v21 = 4 * *(unsigned int *)*a1;
          goto LABEL_63;
        case 3:
          v27 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)sub_20B866084(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            v27 = (int *)*a1;
          }
          while (v28 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 4:
          v29 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)sub_20B8666AC(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            v29 = (int *)*a1;
          }
          while (v30 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 5:
          v31 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v32 = 0;
          do
          {
            v33 = (int *)sub_20B865434(v31, v32);
            v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0)
              v35 = v34;
            else
              v35 = 10;
            v21 += v35;
            ++v32;
            v31 = (int *)*a1;
          }
          while (v32 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 8:
          v21 = *(unsigned int *)*a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_20B855F68((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          v7 = sub_20B855F80(v103, "Non-primitive types can't be packed.");
          sub_20B8560B0((uint64_t)&v102, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_20B8560B8((uint64_t)v103);
          goto LABEL_7;
        case 13:
          v22 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_20B865A5C(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            v22 = (int *)*a1;
          }
          while (v23 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 14:
          v36 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v37 = 0;
          do
          {
            v38 = (int *)sub_20B865434(v36, v37);
            v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0)
              v40 = v39;
            else
              v40 = 10;
            v21 += v40;
            ++v37;
            v36 = (int *)*a1;
          }
          while (v37 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 17:
          v24 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v25 = 0;
          do
          {
            v26 = (int *)sub_20B865434(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            v24 = (int *)*a1;
          }
          while (v25 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 18:
          v41 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v42 = 0;
          do
          {
            v43 = (uint64_t *)sub_20B866084(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            v41 = (int *)*a1;
          }
          while (v42 < *(_DWORD *)*a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21)
            v8 = v44;
          else
            v8 = 0;
          break;
        default:
LABEL_7:
          v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_20B855F68((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v13 = sub_20B855F80(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_20B8560B0((uint64_t)&v102, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v103);
        v14 = *((unsigned __int8 *)a1 + 8);
        v5 = v14 - 19;
      }
      v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_20B855F68((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v16 = sub_20B855F80(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_20B8560B0((uint64_t)&v102, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)v103);
      }
      v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          v18 = v17 + 4;
LABEL_27:
          v8 = v18 * (unint64_t)*(unsigned int *)*a1;
          break;
        case 3:
          v50 = (int *)*a1;
          v51 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)sub_20B866084(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              v50 = (int *)*a1;
            }
            while (v52 < *(_DWORD *)*a1);
          }
          break;
        case 4:
          v53 = (int *)*a1;
          v54 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)sub_20B8666AC(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              v53 = (int *)*a1;
            }
            while (v55 < *(_DWORD *)*a1);
          }
          break;
        case 5:
          v56 = (int *)*a1;
          v57 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            v58 = 0;
            do
            {
              v59 = (int *)sub_20B865434(v56, v58);
              v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0)
                v61 = v60;
              else
                v61 = 10;
              v8 += v61;
              ++v58;
              v56 = (int *)*a1;
            }
            while (v58 < *(_DWORD *)*a1);
          }
          break;
        case 8:
          v8 = *(unsigned int *)*a1 + *(unsigned int *)*a1 * (unint64_t)v17;
          break;
        case 9:
          v62 = (int *)*a1;
          v63 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            v64 = 0;
            do
            {
              v65 = sub_20B850D50((uint64_t)v62, v64);
              v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0)
                v66 = *(_QWORD *)(v65 + 8);
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              v62 = (int *)*a1;
            }
            while (v64 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 10:
          v67 = (int *)*a1;
          v68 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            v69 = 0;
            do
            {
              v70 = sub_20B85FC88((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 72))(v70);
              ++v69;
              v67 = (int *)*a1;
            }
            while (v69 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 11:
          v71 = (int *)*a1;
          v72 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            v73 = 0;
            do
            {
              v74 = sub_20B85FC88((uint64_t)v71, v73);
              v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              v71 = (int *)*a1;
            }
            while (v73 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 12:
          v76 = (int *)*a1;
          v77 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            v78 = 0;
            do
            {
              v79 = sub_20B850D50((uint64_t)v76, v78);
              v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              v76 = (int *)*a1;
            }
            while (v78 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 13:
          v81 = (int *)*a1;
          v82 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_20B865A5C(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              v81 = (int *)*a1;
            }
            while (v83 < *(_DWORD *)*a1);
          }
          break;
        case 14:
          v84 = (int *)*a1;
          v85 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            v86 = 0;
            do
            {
              v87 = (int *)sub_20B865434(v84, v86);
              v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0)
                v89 = v88;
              else
                v89 = 10;
              v8 += v89;
              ++v86;
              v84 = (int *)*a1;
            }
            while (v86 < *(_DWORD *)*a1);
          }
          break;
        case 17:
          v90 = (int *)*a1;
          v91 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            v92 = 0;
            do
            {
              v93 = (int *)sub_20B865434(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              v90 = (int *)*a1;
            }
            while (v92 < *(_DWORD *)*a1);
          }
          break;
        case 18:
          v94 = (int *)*a1;
          v95 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            v96 = 0;
            do
            {
              v97 = (uint64_t *)sub_20B866084(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              v94 = (int *)*a1;
            }
            while (v96 < *(_DWORD *)*a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*((_BYTE *)a1 + 10) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v9 = *((unsigned __int8 *)a1 + 8);
    v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_20B855F68((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_20B855F80(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v102, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v103);
      v12 = *((unsigned __int8 *)a1 + 8);
      v10 = v12 - 19;
    }
    v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_20B855F68((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_20B855F80(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v102, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v103);
    }
    v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        v46 = *a1;
        goto LABEL_138;
      case 5:
      case 14:
        v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0)
          v48 = v47;
        else
          v48 = 10;
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        v49 = *(_QWORD *)(*a1 + 8);
        if (*(char *)(*a1 + 23) >= 0)
          v49 = *(unsigned __int8 *)(*a1 + 23);
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
        return v8;
      case 11:
        v98 = *(_QWORD *)*a1;
        if ((*((_BYTE *)a1 + 10) & 0x10) != 0)
          v99 = *(uint64_t (**)(void))(v98 + 88);
        else
          v99 = *(uint64_t (**)(void))(v98 + 72);
        v101 = v99();
        v8 += v101 + ((9 * (__clz(v101 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        v46 = (2 * *a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_20B85F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B85F99C(unsigned __int8 *result)
{
  unsigned __int8 **v1;
  uint64_t v2;
  std::string *v3;
  uint64_t *v4;
  std::string *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  std::string v11[2];

  v1 = (unsigned __int8 **)result;
  v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = sub_20B855F80(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_20B8560B8((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B86741C();
          goto LABEL_29;
        }
        break;
      case 2:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B866DF4();
          goto LABEL_29;
        }
        break;
      case 3:
      case 16:
      case 18:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B8661A4();
          goto LABEL_29;
        }
        break;
      case 4:
      case 6:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B8667CC();
          goto LABEL_29;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B865554();
          goto LABEL_29;
        }
        break;
      case 7:
      case 13:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B865B7C();
          goto LABEL_29;
        }
        break;
      case 8:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B864F30();
LABEL_29:
          v8 = 0x1080C4057E67DB5;
          return (unsigned __int8 *)MEMORY[0x20BD39CB0](v4, v8);
        }
        break;
      case 9:
      case 12:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_20B867688();
          goto LABEL_34;
        }
        break;
      case 10:
      case 11:
        v9 = (uint64_t *)*v1;
        if (v9)
        {
          sub_20B860438(v9);
          v4 = sub_20B8480AC(v9);
LABEL_34:
          v8 = 0x1020C4014030ADELL;
          return (unsigned __int8 *)MEMORY[0x20BD39CB0](v4, v8);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = sub_20B855F80(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_20B8560B0((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_20B8560B8((uint64_t)v11);
    }
    v6 = dword_20BA37020[v2];
    if (v6 == 10)
    {
      result = *v1;
      if (*v1)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else if (v6 == 9)
    {
      v7 = *v1;
      if (v7)
      {
        if ((char)v7[23] < 0)
          operator delete(*(void **)v7);
        v4 = (uint64_t *)v7;
        v8 = 0x1012C40EC159624;
        return (unsigned __int8 *)MEMORY[0x20BD39CB0](v4, v8);
      }
    }
  }
  return result;
}

void sub_20B85FBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B85FBC8()
{
  JUMPOUT(0x20BD39CB0);
}

unsigned __int8 *sub_20B85FBDC(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  BOOL v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = sub_20B85F99C(v3 + 40);
      v4 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_20B85FC64(uint64_t *a1)
{
  sub_20B860438(a1);
  return sub_20B8480AC(a1);
}

uint64_t sub_20B85FC88(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_20B85FD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B85FD64(uint64_t result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  v2 = *(int **)(result + 16);
  if (!v2)
    return sub_20B85FDB8(result, a2);
  v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12))
    return sub_20B85FDB8(result, a2);
  v4 = v2 + 2;
  v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3)
    *(_QWORD *)&v4[2 * v3] = *(_QWORD *)&v4[2 * v5];
  *(_QWORD *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_20B85FDB8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v3 = result;
  v4 = *(int **)(result + 16);
  if (!v4)
  {
    v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(result + 8);
  v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    result = sub_20B86768C(result, v5 + 1);
    goto LABEL_12;
  }
  v7 = *v4;
  if ((_DWORD)v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      v9 = v7 + 1;
      goto LABEL_13;
    }
    *(_QWORD *)&v4[2 * v7 + 2] = *(_QWORD *)&v4[2 * v5 + 2];
LABEL_12:
    v4 = *(int **)(v3 + 16);
    v9 = *v4 + 1;
LABEL_13:
    *v4 = v9;
    goto LABEL_14;
  }
  result = *(_QWORD *)&v4[2 * v5 + 2];
  if (result)
    v8 = *(_QWORD *)v3 == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(_QWORD *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t *sub_20B85FE7C(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_20B85A47C(a3, *((unsigned int *)v5 + 8), v5 + 5);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_20B85FEFC(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return sub_20B862080(a1, __s, a3, a4);
  v6 = a3;
  MEMORY[0x20BD39944](a4, __s, a3);
  return &__s[v6];
}

char *sub_20B85FF54(uint64_t a1, char *a2, uint64_t a3)
{
  int v5;
  char *result;
  int v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  signed int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  std::string v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v15 = (unint64_t)&result[v5];
    v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    v20 = *(_QWORD *)(a3 + 32);
    result = sub_20B8601AC(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      v25 = *(_QWORD *)(a3 + 32);
      result = sub_20B8601AC(result, v8, (unsigned int **)v24);
      if (!result)
        break;
      v11 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v12 = sub_20B855F80(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v26);
      }
      v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a3 + 32);
        v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        v18 = (std::string *)sub_20B8601AC((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13))
          return (char *)(*(_QWORD *)(a1 + 8) + v13);
        return result;
      }
      v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v14 = sub_20B855F80(&v26, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v11;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B860184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B8560B8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

char *sub_20B8601AC(char *a1, unint64_t a2, unsigned int **a3)
{
  char *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t *v13;
  std::string *v14;

  v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    v6 = *v3;
    if (*v3 < 0)
    {
      v7 = v6 + (v3[1] << 7);
      v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        v3 = (char *)sub_20B862538((uint64_t)v3, (v7 - 128));
        if (!v3)
          return v3;
        v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      v9 = (int *)*a3;
      v10 = **a3;
      if ((_DWORD)v10 == (*a3)[1])
      {
        v11 = v10 + 1;
        sub_20B8650E4((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_20B865558((uint64_t)v9) + 4 * v10) = v6;
      }
      else
      {
        *(_DWORD *)(sub_20B865558((uint64_t)*a3) + 4 * v10) = v6;
        v11 = v10 + 1;
      }
      *v9 = v11;
    }
    else
    {
      v12 = *((_DWORD *)a3 + 8);
      v13 = (unint64_t *)a3[3];
      if ((*v13 & 1) != 0)
        v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v14 = (std::string *)sub_20B847DF8(v13);
      sub_20B862438(v12, v6, v14);
    }
  }
  return v3;
}

char *sub_20B8602D4(uint64_t a1, char *__src, int64_t __n)
{
  char *v6;
  uint64_t v7;
  char *v8;

  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    v6 = &__src[__n - 16];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a1 + 40;
    if (*(_QWORD *)(a1 + 72) != 1)
      return __src;
    v7 = 2;
    v8 = __src;
    goto LABEL_6;
  }
  v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = &v8[__n];
  *(_QWORD *)(a1 + 8) = &v8[__n];
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    v7 = __src - v8;
LABEL_6:
    *(_QWORD *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_20B860384(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_20B855F80(v7, "CHECK failed: (n) >= (0): ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_20B8560B8((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_20B860420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B860438(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_20B8604A8(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  __int128 v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_20B8296A0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_20B860560(uint64_t a1)
{
  sub_20B8292CC(a1, *(_QWORD **)(a1 + 8));
}

uint64_t *sub_20B860568(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = sub_20B8605EC(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_20B8296A0(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_20B8605EC(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_20B860794(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_20B860B18()
{
  __assert_rtn("flat_end", "extension_set.h", 829, "!is_large()");
}

uint64_t sub_20B860B40(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_20B860B4C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20B860B60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472AE78);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472AE78))
    {
      qword_25472C7C0 = 0;
      *(_QWORD *)algn_25472C7C8 = 0;
      qword_25472C7D0 = 0;
      sub_20B861530((uint64_t)sub_20B860B4C, (uint64_t)&qword_25472C7C0);
      atomic_store(1u, byte_25472C7D8);
      __cxa_guard_release(&qword_25472AE78);
    }
  }
}

void sub_20B860BD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472AE78);
  _Unwind_Resume(a1);
}

uint64_t sub_20B860BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_20B860C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B860CA8(_DWORD *a1)
{
  unsigned __int8 v2;
  pthread_t v3;
  uint64_t v4;
  std::string *v5;
  unsigned __int8 v6;
  char v7;
  std::string v8[2];

  v2 = atomic_load((unsigned __int8 *)&qword_25472AE80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472AE80))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_254728160, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472AE80);
  }
  v3 = pthread_self();
  v4 = (uint64_t)v3;
  if (qword_25472AE88)
  {
    if (v3 && v3 == (pthread_t)qword_25472AE88)
      goto LABEL_5;
  }
  else if (!v3)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      v5 = sub_20B855F80(v8, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v8);
    }
    return;
  }
  v6 = atomic_load(byte_25472C7D8);
  if ((v6 & 1) == 0)
    sub_20B860B60();
  std::mutex::lock(&stru_254728160);
  qword_25472AE88 = v4;
  sub_20B860DF8(a1);
  qword_25472AE88 = 0;
  std::mutex::unlock(&stru_254728160);
}

void sub_20B860DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B860DF8(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          sub_20B860DF8();
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          sub_20B860DF8();
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_20B860EA4(char *__src, int64_t __n, uint64_t a3, char a4)
{
  char *v6;
  BOOL v7;
  _BYTE v9[32];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0x7FFFFFFF00000000;
  v14 = dword_254728158;
  v15 = 0x80000000;
  v16 = 0;
  v17 = 0;
  v6 = sub_20B8602D4((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, _BYTE *))(*(_QWORD *)a3 + 88))(a3, v6, v9))
    v7 = (_DWORD)v13 == 0;
  else
    v7 = 0;
  if (v7)
  {
    if ((a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3) & 1) != 0)
      return 1;
    sub_20B860F9C(a3);
  }
  return 0;
}

_QWORD *sub_20B860F8C@<X0>(_QWORD *a1@<X8>)
{
  return sub_20B80BBD0(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_20B860F9C(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string __p;
  std::string v6[2];

  sub_20B855F68((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_20B86104C("parse", a1, &__p);
  v2 = sub_20B855FA8(v6, (const std::string::value_type *)&__p);
  sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return sub_20B8560B8((uint64_t)v6);
}

void sub_20B86101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20B8560B8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B86104C(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  void *__p;
  std::string::size_type v11;
  unsigned __int8 v12;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = v11;
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = v11;
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0)
    operator delete(__p);
}

void sub_20B861154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B861194(uint64_t a1, char *a2, unsigned int a3)
{
  int64_t v5;

  if ((a3 & 0x80000000) != 0)
    sub_20B8617E4();
  v5 = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return sub_20B860EA4(a2, v5, a1, 1);
}

BOOL sub_20B8611E4(uint64_t a1, std::string *a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string __p;
  std::string v9[2];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    sub_20B855F68((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    v4 = sub_20B855F80(v9, "CHECK failed: IsInitialized(): ");
    sub_20B86104C("serialize", a1, &__p);
    v5 = sub_20B855FA8(v4, (const std::string::value_type *)&__p);
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v9);
  }
  return sub_20B8612D4(a1, a2);
}

void sub_20B8612A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20B8560B8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_20B8612D4(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char v14;
  std::string __p[2];
  std::string v16[2];
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = v5;
  v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_20B855F68((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v10 = sub_20B855FA8(v16, (const std::string::value_type *)__p);
    v11 = sub_20B855F80(v10, " exceeded maximum protobuf size of 2GB: ");
    v12 = sub_20B8561D0(v11, v6);
    sub_20B8560B0((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  v17 = 0;
  v18 = 0;
  v19 = byte_25472C7BC & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    sub_20B855F68((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    v8 = sub_20B855F80(__p, "CHECK failed: target + size == res: ");
    sub_20B8560B0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    v9 = __p;
LABEL_12:
    sub_20B8560B8((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_20B86147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20B8560B8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_20B8614C4@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_20B8611E4(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_20B861514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B861530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = sub_20B861650();
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((uint64_t)v5 - *(_QWORD *)v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_20B80CDD8();
    v10 = v6 - *(_QWORD *)v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_20B829AD0(v4 + 16, v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_QWORD *)v13 = a1;
    *((_QWORD *)v13 + 1) = a2;
    v7 = v13 + 16;
    v16 = *(char **)v4;
    v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = *(char **)v4;
    }
    *(_QWORD *)v4 = v13;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a1;
    v5[1] = a2;
    v7 = v5 + 2;
  }
  *(_QWORD *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_20B86163C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B861650()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_2547281A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2547281A8))
  {
    v2 = operator new();
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 850045863;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_QWORD *)(v2 + 80) = 0;
    qword_2547281A0 = v2;
    __cxa_guard_release(&qword_2547281A8);
  }
  return qword_2547281A0;
}

void sub_20B8616DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2547281A8);
  _Unwind_Resume(a1);
}

void sub_20B8616F4()
{
  uint64_t v0;
  uint64_t v1;

  if ((byte_25472AE90 & 1) == 0)
  {
    v0 = sub_20B861650();
    if (v0)
    {
      v1 = sub_20B861740(v0);
      MEMORY[0x20BD39CB0](v1, 0x1020C40A0054943);
    }
    byte_25472AE90 = 1;
  }
}

uint64_t sub_20B861740(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void (*v6)(_QWORD);
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3 - 2;
  if (*(_QWORD **)a1 != v3 && v4 > v2)
  {
    do
    {
      v6 = (void (*)(_QWORD))*v2;
      *v2 = *v4;
      *v4 = v6;
      v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(_QWORD))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  v8 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20B8617E4()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_20B86180C(uint64_t a1)
{
  std::string *v2;
  _OWORD *result;
  uint64_t v4;
  int v5;
  char v6;
  std::string v7[2];

  if (*(int *)(a1 + 28) <= 16)
  {
    sub_20B855F68((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    v2 = sub_20B855F80(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_20B8560B0((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v7);
  }
  result = sub_20B8618D0(a1, 0, -1);
  v4 = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v5 = *(_DWORD *)(a1 + 28) + (_DWORD)result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 80) = 1;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

void sub_20B8618B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_20B8618D0(uint64_t a1, unsigned int a2, int a3)
{
  _OWORD *v3;
  uint64_t v5;
  int v6;
  std::string *v7;
  int v8;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  char v31;
  void *__src;
  std::string v33[2];

  v3 = *(_OWORD **)(a1 + 16);
  if (!v3)
    return v3;
  v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_20B855F68((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      v7 = sub_20B855F80(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_20B8560B0((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v33);
      v3 = *(_OWORD **)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(_QWORD *)(a1 + 16) = v5;
    if (*(_QWORD *)(a1 + 72) == 1)
      *(_QWORD *)(a1 + 72) = 2;
    return v3;
  }
  *v3 = *(_OWORD *)*(_QWORD *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1)
    goto LABEL_46;
  v8 = a3;
  if (a3 < 0)
    goto LABEL_39;
  if ((a2 & 0x80000000) != 0)
  {
    sub_20B855F68((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    v11 = sub_20B855F80(v33, "CHECK failed: overrun >= 0: ");
    sub_20B8560B0((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v33);
LABEL_14:
    v12 = a1 + 56;
    v13 = (unsigned __int8 *)v3 + (int)a2;
    v14 = v13;
    while (2)
    {
      v15 = (char)*v14++;
      v16 = v15;
      if (v15 < 0)
      {
        v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          v14 = v13 + 3;
          v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0)
              break;
            ++v14;
            v20 += 7;
            if (!v20)
              goto LABEL_39;
          }
        }
        else
        {
          v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16)
          goto LABEL_46;
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            v14 = sub_20B862BC4((char *)v14, v33);
            if (!v14)
              goto LABEL_39;
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            v18 = *v14;
            if ((char)*v14 < 0)
            {
              v19 = sub_20B8625C4((uint64_t)v14, v18);
              if (!v19)
                goto LABEL_39;
            }
            else
            {
              v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18)
              goto LABEL_39;
            v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            v13 = v14;
            if ((unint64_t)v14 >= v12)
              goto LABEL_39;
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17)
              goto LABEL_46;
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_20B855F68((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    v10 = sub_20B855F80(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_20B8560B0((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16)
    goto LABEL_14;
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(_QWORD *)(a1 + 72) == 2)
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 8) - (_QWORD)v3;
    *(_QWORD *)(a1 + 8) = a1 + 56;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      v27 = *(_QWORD *)(a1 + 72);
      v26 = (_QWORD *)(a1 + 72);
      v25 = v27;
      v28 = (char *)(v26 - 2);
      v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1)
      break;
    if ((_DWORD)v21)
    {
      sub_20B855F68((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      v22 = sub_20B855F80(v33, "CHECK failed: size_ == 0: ");
      v23 = sub_20B856154(v22, *(_DWORD *)(a1 + 24));
      sub_20B8560B0((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v33);
    }
    if (((*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45;
  }
  memcpy((void *)(a1 + 56), __src, v21);
  v30 = *(_QWORD *)(a1 + 72);
  v26 = (_QWORD *)(a1 + 72);
  v25 = v30;
  v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1)
    *v26 = 1;
  return v3;
}

void sub_20B861C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B861CA8(uint64_t a1, signed int a2, int a3)
{
  int v3;
  signed int v5;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  char *result;
  std::string *v17;
  char v18;
  std::string v19[2];

  v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2)
    return 0;
  v5 = a2;
  if (v3 == a2)
  {
    sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    v7 = sub_20B855F80(v19, "CHECK failed: overrun != limit_: ");
    sub_20B8560B0((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    v8 = sub_20B855F80(v19, "CHECK failed: overrun < limit_: ");
    sub_20B8560B0((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    v9 = sub_20B855F80(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_20B8560B0((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    v10 = sub_20B855F80(v19, "CHECK failed: limit_ > 0: ");
    sub_20B8560B0((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v19);
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    v11 = sub_20B855F80(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_20B8560B0((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      v12 = sub_20B855F80(v19, "CHECK failed: overrun >= 0: ");
      sub_20B8560B0((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v19);
    }
    v13 = sub_20B8618D0(a1, v5, a3);
    if (!v13)
      break;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 28) + (_DWORD)v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    result = (char *)v13 + v5;
    v5 = (_DWORD)result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(_QWORD *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5)
    return 0;
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_20B855F68((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    v17 = sub_20B855F80(v19, "CHECK failed: limit_ > 0: ");
    sub_20B8560B0((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v19);
  }
  result = *(char **)(a1 + 8);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

void sub_20B861F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_20B861F9C(uint64_t a1, int a2, int a3)
{
  int v5;
  BOOL v6;
  std::string *v7;
  _OWORD *result;
  char v9;
  std::string v10[2];

  v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v7 = sub_20B855F80(v10, "CHECK failed: size > chunk_size: ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    if (!*(_QWORD *)(a1 + 16) || *(int *)(a1 + 28) < 17)
      break;
    result = sub_20B86180C(a1);
    if (!result)
      return result;
    v5 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (a3 <= v5)
      return (_OWORD *)((char *)result + a3 + 16);
  }
  return 0;
}

void sub_20B862068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_20B862080(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  const std::string::value_type *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = sub_20B855F80(v16, "CHECK failed: size > chunk_size: ");
      sub_20B8560B0((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v16);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = (const std::string::value_type *)sub_20B86180C(a1);
    if (!result)
      return result;
    v6 = result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_20B8621EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_20B862204(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  const std::string::value_type *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = sub_20B855F80(v16, "CHECK failed: size > chunk_size: ");
      sub_20B8560B0((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v16);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = (const std::string::value_type *)sub_20B86180C(a1);
    if (!result)
      return result;
    v6 = result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_20B862350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B86236C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_20B8625C4((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = (char *)result;
    v7 = v10;
  }
  else
  {
    v8 = (char *)(a3 + 1);
  }
  v11 = sub_20B8480DC(a1, (int)v8, v7);
  v12 = *(_DWORD *)(a1 + 88);
  v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v8, a1);
  if (!result)
    return result;
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80))
    return 0;
  v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_20B862438(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      v6 = v5 >> 7;
      v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      v8 = a2 >> 7;
      v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t sub_20B8624D0(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = a1 + 3;
  v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        result = 0;
        if (++v4 == 5)
          return result;
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_20B862538(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  a2 = a2;
  result = a1 + 3;
  v4 = (char *)(a1 + 2);
  v5 = 14;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (v5 == 70)
      return 0;
  }
  return result;
}

uint64_t sub_20B862580(uint64_t a1, int a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  result = a1 + 3;
  v4 = (char *)(a1 + 2);
  v5 = -21;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t sub_20B8625C4(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  result = a1 + 2;
  v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      v5 = *(unsigned __int8 *)(a1 + 4);
      v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF)
        v6 = 0;
      if (v5 <= 7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

const std::string::value_type *sub_20B862634(std::string *a1, char *a2, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  const std::string::value_type *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (const std::string::value_type *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = (std::string::value_type *)result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B85FEFC(a3, v6, v5, a1);
}

unsigned __int8 *sub_20B862698(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B862C38(a3, a2, a1);
}

unsigned __int8 *sub_20B8626A8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B862F04(a3, a2, a1);
}

unsigned __int8 *sub_20B8626B8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B8631D0(a3, a2, a1);
}

unsigned __int8 *sub_20B8626C8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B86349C(a3, a2, a1);
}

unsigned __int8 *sub_20B8626D8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B863768(a3, a2, a1);
}

unsigned __int8 *sub_20B8626E8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B863A40(a3, a2, a1);
}

unsigned __int8 *sub_20B8626F8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_20B863D18(a3, a2, a1);
}

char *sub_20B86270C(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B863FEC(a3, v6, v5, a1);
}

char *sub_20B862774(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B8640F0(a3, v6, v5, a1);
}

char *sub_20B8627DC(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B8641F4(a3, v6, v5, a1);
}

char *sub_20B862844(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B8642F8(a3, v6, v5, a1);
}

char *sub_20B8628AC(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B8643FC(a3, v6, v5, a1);
}

char *sub_20B862914(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_20B864500(a3, v6, v5, a1);
}

char *sub_20B862978(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;
  unsigned int v6;
  uint64_t v8;
  char *v10;

  v10 = a2;
  while (1)
  {
    if ((sub_20B847CBC(a3, &v10, *(_DWORD *)(a3 + 92)) & 1) != 0)
      return v10;
    v5 = v10 + 1;
    v6 = *v10;
    if (*v10 < 0)
    {
      v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        v5 = v10 + 3;
        v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0)
            break;
          ++v5;
          v8 += 7;
          if (!v8)
            return 0;
        }
      }
      else
      {
        v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4)
      break;
    v10 = (char *)sub_20B862A88(v6, a1);
    if (!v10)
      return 0;
  }
  *(_DWORD *)(a3 + 80) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_20B862A60(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  std::string *v5;

  v5 = a2;
  return sub_20B862A88(a1, &v5, a3, a4);
}

unsigned __int8 *sub_20B862A88(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  std::string *v7;
  unsigned __int8 *v8;
  char v10;
  std::string v11[2];

  v4 = a1 >> 3;
  if (!(a1 >> 3))
    return 0;
  v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      v5 = sub_20B862BC4(a3, v11);
      if (v5)
        sub_20B864604(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      return v5;
    case 1uLL:
      v5 = (unsigned __int8 *)(a3 + 8);
      sub_20B8646B8((std::string *)a2, v4, *(_QWORD *)a3);
      return v5;
    case 2uLL:
      v8 = (unsigned __int8 *)sub_20B864770(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      v8 = (unsigned __int8 *)sub_20B8648B8(a2, v4, a3, a4);
LABEL_10:
      v5 = v8;
      break;
    case 4uLL:
      sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      v7 = sub_20B855F80(v11, "Can't happen");
      sub_20B8560B0((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v11);
      break;
    case 5uLL:
      v5 = (unsigned __int8 *)(a3 + 4);
      sub_20B8649E0((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_20B862BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B862BC4(char *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0)
          break;
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_20B862C38(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B862E58(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B862E58(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B862E58((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B862E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B862E58(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B8650E4(a3, v7 + 1);
      *(_DWORD *)(sub_20B865558((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_20B865558((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_20B862F04(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B863124(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B863124(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B863124((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B8630FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B863124(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B86570C(a3, v7 + 1);
      *(_DWORD *)(sub_20B865B80((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_20B865B80((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_20B8631D0(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B8633F0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B8633F0(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B8633F0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B8633C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B8633F0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B865D34(a3, v7 + 1);
      *(_QWORD *)(sub_20B8661A8((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_20B8661A8((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_20B86349C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B8636BC(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B8636BC(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B8636BC((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B863694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B8636BC(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B86635C(a3, v7 + 1);
      *(_QWORD *)(sub_20B8667D0((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_20B8667D0((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_20B863768(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B863988(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B863988(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B863988((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B863960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B863988(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = -(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B8650E4(a3, v7 + 1);
      *(_DWORD *)(sub_20B865558((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_20B865558((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_20B863A40(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B863C60(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B863C60(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B863C60((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B863C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B863C60(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B865D34(a3, v7 + 1);
      *(_QWORD *)(sub_20B8661A8((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_20B8661A8((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_20B863D18(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_20B8625C4((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_20B863F38(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_20B863F38(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_20B855F80(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_20B863F38((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_20B855F68((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_20B855F80(&v18, "CHECK failed: (size) > (0): ");
        sub_20B8560B0((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_20B8560B8((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_20B86180C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_20B863F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B863F38(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_20B862BC4((char *)i, &v10);
    if (!i)
      break;
    v6 = v10 != 0;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_20B864AC4(a3, v7 + 1);
      *(_BYTE *)(sub_20B864F34((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(_BYTE *)(sub_20B864F34((uint64_t)a3) + v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_20B863FEC(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_20B86570C(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_20B8658C4((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_20B86570C(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_20B8658C4((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_20B8640F0(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_20B8650E4(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_20B86529C((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_20B8650E4(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_20B86529C((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_20B8641F4(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_20B86635C(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_20B866514((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_20B86635C(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_20B866514((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_20B8642F8(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_20B865D34(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_20B865EEC((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_20B865D34(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_20B865EEC((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_20B8643FC(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_20B866984(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_20B866B3C((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_20B866984(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_20B866B3C((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_20B864500(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_20B866FAC(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_20B867164((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_20B866FAC(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_20B867164((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_20B86180C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

void sub_20B864604(std::string **a1, int a2, unint64_t a3)
{
  std::string *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a1;
  if (*a1)
  {
    v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v10) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        v10 = a3 >> 7;
        v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_20B8646B8(std::string *result, int a2, uint64_t a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)result;
    v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_20B864770(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7;
  std::string::value_type *v8;
  const std::string::value_type *result;
  int v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;

  v7 = *a3;
  if (*a3 < 0)
  {
    result = (const std::string::value_type *)sub_20B8625C4((uint64_t)a3, *a3);
    if (!result)
      return result;
    v8 = (std::string::value_type *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = *a1;
  if (*a1)
  {
    v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        v13 = v12 >> 7;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    v15 = v7;
    v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        v17 = v15 >> 7;
        v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    return sub_20B864A6C(a4, v8, v7, *a1);
  }
  else if (*(_QWORD *)(a4 + 8) - (_QWORD)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_20B861F9C(a4, (int)v8, v7);
  }
}

char *sub_20B8648B8(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  std::string *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  char *v14;
  __int32 v15;
  char *v17;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v7 = *a1;
  v8 = 8 * a2;
  if (*a1)
  {
    v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v10) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        v10 = v9 >> 7;
        v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  v12 = a4[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  ++a4[11].i32[1];
  v14 = sub_20B862978((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0)
    return 0;
  v17 = v14;
  v18 = *a1;
  if (v18)
  {
    v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v20) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        v20 = v19 >> 7;
        v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_20B8649E0(std::string *result, int a2, int a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string::value_type __s[4];

  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)result;
    v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_20B864A6C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return sub_20B862204(a1, __s, a3, this);
  v6 = a3;
  std::string::append(this, __s, a3);
  return &__s[v6];
}

void sub_20B864AC4(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  char v14;
  std::string v15[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B864F34((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v15);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B864F34((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  if (v6)
  {
    v11 = (v9 + 15) & 0x1FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v11);
    v12 = (_QWORD *)sub_20B854A60(v6, v11);
  }
  else
  {
    v12 = operator new(v9 + 8);
  }
  *v12 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v12 + 1;
  sub_20B864F34((uint64_t)a1);
  if (*a1 >= 1)
  {
    v13 = (void *)sub_20B864F34((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B864C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B864C78(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B864D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B864D34(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B864F34((uint64_t)a1) + a2;
}

void sub_20B864DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B864E10(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B864F34((uint64_t)a1) + a2;
}

void sub_20B864ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B864EEC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B864F34(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B864F34(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B864FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B864FBC(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B864AC4(v3, *v3 + *a2);
    sub_20B864C78((uint64_t)v3, *a2);
    v6 = (void *)sub_20B864D34(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B864F34((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_20B8650C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B8650E4(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B865558((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B865558((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v12);
    v13 = (_QWORD *)sub_20B854A60(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_20B865558((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_20B865558((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B865284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B86529C(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B865340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865358(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B865558((uint64_t)a1) + 4 * a2;
}

void sub_20B865414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865434(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B865558((uint64_t)a1) + 4 * a2;
}

void sub_20B8654F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865510(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B865558(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B865558(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B8655C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B8655E0(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B8650E4(v3, *v3 + *a2);
    sub_20B86529C((uint64_t)v3, *a2);
    v6 = (void *)sub_20B865358(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B865558((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_20B8656EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B86570C(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B865B80((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B865B80((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v12);
    v13 = (_QWORD *)sub_20B854A60(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_20B865B80((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_20B865B80((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B8658AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8658C4(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B865968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865980(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B865B80((uint64_t)a1) + 4 * a2;
}

void sub_20B865A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865A5C(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B865B80((uint64_t)a1) + 4 * a2;
}

void sub_20B865B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865B38(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B865B80(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B865B80(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B865BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B865C08(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B86570C(v3, *v3 + *a2);
    sub_20B8658C4((uint64_t)v3, *a2);
    v6 = (void *)sub_20B865980(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B865B80((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_20B865D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B865D34(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B8661A8((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B8661A8((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v12);
    v13 = (_QWORD *)sub_20B854A60(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_20B8661A8((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_20B8661A8((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B865ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865EEC(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B865F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B865FA8(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B8661A8((uint64_t)a1) + 8 * a2;
}

void sub_20B866064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866084(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B8661A8((uint64_t)a1) + 8 * a2;
}

void sub_20B866140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866160(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B8661A8(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B8661A8(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B866218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B866230(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B865D34(v3, *v3 + *a2);
    sub_20B865EEC((uint64_t)v3, *a2);
    v6 = (void *)sub_20B865FA8(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B8661A8((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_20B86633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B86635C(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B8667D0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B8667D0((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v12);
    v13 = (_QWORD *)sub_20B854A60(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_20B8667D0((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_20B8667D0((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B8664FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866514(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B8665B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8665D0(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B8667D0((uint64_t)a1) + 8 * a2;
}

void sub_20B86668C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8666AC(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B8667D0((uint64_t)a1) + 8 * a2;
}

void sub_20B866768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866788(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B8667D0(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B8667D0(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B866840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B866858(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B86635C(v3, *v3 + *a2);
    sub_20B866514((uint64_t)v3, *a2);
    v6 = (void *)sub_20B8665D0(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B8667D0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_20B866964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B866984(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B866DF8((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B866DF8((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v12);
    v13 = (_QWORD *)sub_20B854A60(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_20B866DF8((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_20B866DF8((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B866B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866B3C(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B866BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866BF8(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B866DF8((uint64_t)a1) + 4 * a2;
}

void sub_20B866CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866CD4(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B866DF8((uint64_t)a1) + 4 * a2;
}

void sub_20B866D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B866DB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B866DF8(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B866DF8(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B866E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B866E80(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B866984(v3, *v3 + *a2);
    sub_20B866B3C((uint64_t)v3, *a2);
    v6 = (void *)sub_20B866BF8(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B866DF8((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_20B866F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B866FAC(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_20B867420((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_20B855F68((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_20B855F80(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_20B8560B0((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_20B8560B8((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_20B867420((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x24BEDB778], v12);
    v13 = (_QWORD *)sub_20B854A60(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_20B867420((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_20B867420((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_20B86714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B867164(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_20B855F68((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_20B855F80(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_20B856154(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_20B855F80(v6, ", ");
    v8 = sub_20B856154(v7, *(_DWORD *)a1);
    sub_20B8560B0((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_20B867208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B867220(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B867420((uint64_t)a1) + 8 * a2;
}

void sub_20B8672DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8672FC(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_20B855F80(v8, "CHECK failed: (index) >= (0): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_20B855F68((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_20B855F80(v8, "CHECK failed: (index) < (current_size_): ");
    sub_20B8560B0((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v8);
  }
  return sub_20B867420((uint64_t)a1) + 8 * a2;
}

void sub_20B8673B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8673D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_20B867420(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B867420(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_20B855F68((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_20B855F80(v5, "CHECK failed: (total_size_) > (0): ");
    sub_20B8560B0((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_20B8560B8((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_20B867490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_20B8674A8(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_20B855F80(v10, "CHECK failed: (&other) != (this): ");
    sub_20B8560B0((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_20B8560B8((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_20B866FAC(v3, *v3 + *a2);
    sub_20B867164((uint64_t)v3, *a2);
    v6 = (void *)sub_20B867220(v3, v5);
    if (*a2 <= 0)
    {
      sub_20B855F68((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_20B855F80(v10, "CHECK failed: (index) < (current_size_): ");
      sub_20B8560B0((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_20B8560B8((uint64_t)v10);
    }
    v8 = (const void *)sub_20B867420((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_20B8675B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8560B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B8675D4(uint64_t *a1)
{
  sub_20B8675FC(a1);
  return sub_20B8480AC(a1);
}

void sub_20B8675FC(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x20BD39CB0](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_20B86768C(uint64_t result, int a2)
{
  int v2;
  BOOL v3;
  int v4;

  v2 = *(_DWORD *)(result + 8);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return sub_20B8676A0((uint64_t *)result, v4);
  return result;
}

uint64_t sub_20B8676A0(uint64_t *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a1 + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    v7 = *a1;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 32), MEMORY[0x24BEDB778], v11);
      v12 = (unsigned int *)sub_20B854A60(v7, v11);
    }
    else
    {
      v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      v12 = (unsigned int *)a1[2];
      *v12 = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        v12 = (unsigned int *)a1[2];
      }
    }
    v2 = *((_DWORD *)a1 + 2);
    v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t **sub_20B8677B0(uint64_t **a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD v20[5];

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    v20[4] = v7;
    if (v15)
      v16 = (char *)sub_20B828D70(v7, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[24 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v20[2] = v17 + 24;
    sub_20B83BAB4(v4, v20);
    v11 = v4[1];
    sub_20B83BC3C((uint64_t)v20);
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = v5 + 24;
    v4[1] = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_20B8678E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8678F4(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t *v6;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_24C4661E0;
  *(_QWORD *)(a1 + 16) = &off_24C466628;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_24C466628;
  *(_DWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 88);
  sub_20B80627C((_QWORD *)(a1 + 88));
  sub_20B8679A8(a1, a2, a3, (uint64_t *)&v8);
  sub_20B853F98(v6, &v8);
  sub_20B853D84((uint64_t *)&v8);
  return a1;
}

void sub_20B867984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_20B853D84((uint64_t *)va);
  sub_20B853D84(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8679A8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;

  v13 = a2;
  v14 = a3;
  v12 = 0;
  result = sub_20B825904(a2, a3, &v12, a4);
  if (!*a4)
  {
    sub_20B853D84(a4);
    result = sub_20B8524B4(&v13, 4uLL, a4);
    if (!*a4)
    {
      sub_20B853D84(a4);
      *(_DWORD *)(a1 + 8) = v12;
      v11 = 0;
      result = sub_20B825904(v13, v14, &v11, a4);
      if (!*a4)
      {
        sub_20B853D84(a4);
        result = sub_20B8524B4(&v13, 4uLL, a4);
        if (!*a4)
        {
          sub_20B853D84(a4);
          *(_DWORD *)(a1 + 24) = v11;
          v10 = 0;
          result = sub_20B825904(v13, v14, &v10, a4);
          if (!*a4)
          {
            sub_20B853D84(a4);
            result = sub_20B8524B4(&v13, 4uLL, a4);
            if (!*a4)
            {
              sub_20B853D84(a4);
              v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 40) = v7;
              result = sub_20B825798(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*a4)
              {
                sub_20B853D84(a4);
                result = sub_20B8524B4(&v13, 4uLL, a4);
                if (!*a4)
                {
                  sub_20B853D84(a4);
                  *(_QWORD *)(a1 + 56) = v13;
                  v8 = sub_20B852430(*(int *)(a1 + 48), 4uLL);
                  result = sub_20B8524B4(&v13, v8, a4);
                  if (!*a4)
                  {
                    sub_20B853D84(a4);
                    *(_QWORD *)(a1 + 64) = v13;
                    result = sub_20B8524B4(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*a4)
                    {
                      sub_20B853D84(a4);
                      *(_QWORD *)(a1 + 72) = v13;
                      result = sub_20B8524B4(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*a4)
                      {
                        v9 = sub_20B853D84(a4);
                        *(_QWORD *)(a1 + 80) = v13;
                        return sub_20B80627C(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20B867BA4()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B867BB8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_20B867BC4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_20B867BD0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_20B867BDC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

_QWORD *sub_20B867BE8(_QWORD *a1)
{
  *a1 = &off_24C4661E0;
  sub_20B853D84(a1 + 11);
  return a1;
}

void sub_20B867C18(_QWORD *a1)
{
  *a1 = &off_24C4661E0;
  sub_20B853D84(a1 + 11);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B867C58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

const char *sub_20B867C60(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + **(unsigned int **)(a1 + 72));
  strlen(v1);
  return v1;
}

const char *sub_20B867C94(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4));
  strlen(v1);
  return v1;
}

const char *sub_20B867CC8(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8));
  strlen(v1);
  return v1;
}

const char *sub_20B867CFC(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 12));
  strlen(v1);
  return v1;
}

const char *sub_20B867D30(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 16));
  strlen(v1);
  return v1;
}

uint64_t sub_20B867D64(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_20B867D70(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_20B867D7C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 30;
}

const char *sub_20B867D88(uint64_t a1, int a2)
{
  const char *v2;

  v2 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

float sub_20B867DC0(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 64) + 4 * a2);
}

BOOL sub_20B867DCC(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 1;
}

BOOL sub_20B867DE0(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 2;
}

BOOL sub_20B867DF4(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 3;
}

BOOL sub_20B867E08(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 4;
}

BOOL sub_20B867E1C(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 5;
}

BOOL sub_20B867E30(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 6;
}

uint64_t sub_20B867E44(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_20B867E4C(uint64_t a1)
{
  return a1 + 32;
}

BOOL sub_20B867E54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const void *v18;
  unsigned int v19;
  size_t v20;
  unint64_t v21;
  int v22;
  unsigned __int16 *v23;

  if (*(_QWORD *)(a1 + 2080) || (*(_BYTE *)(a1 + 2064) & 1) != 0)
    return 0;
  v5 = 0;
  v22 = 0;
  v6 = a3 - 1;
  if ((a3 - 1) <= 0x3FE)
  {
    v7 = a4;
    if ((_DWORD)a4)
    {
      v9 = 0;
      v10 = (int *)a1;
      while (1)
      {
        v11 = *(_QWORD *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1];
        if ((v11 & 3) != 1)
          break;
        v10 = (int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (a3 == ++v9)
        {
          v12 = *v10;
          *v10 = a4;
          if (!v12)
            goto LABEL_17;
LABEL_18:
          v5 = 1;
          return v5 != 0;
        }
      }
      if ((v11 & 3) != 2)
      {
        v17 = (unsigned __int8 *)(a2 + v9);
        v18 = (const void *)(a2 + v9 + 1);
        v19 = v6 - v9;
        v20 = (v6 - v9);
        v21 = (unint64_t)malloc_type_calloc(1uLL, v20 + 15, 0xA9B8A391uLL);
        memcpy((void *)(v21 + 14), v18, v20);
        *(_BYTE *)(v21 + 14 + v19) = 0;
        *(_WORD *)(v21 + 12) = v19;
        *(_DWORD *)(v21 + 8) = v7;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)&v10[2 * *v17 + 1] = v21 | 2;
        goto LABEL_17;
      }
      v23 = (unsigned __int16 *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      v14 = sub_20B86B5EC(a1, &v23, a2, a3, (int)v9 + 1, a4, &v22);
      v15 = (unint64_t)v23;
      if (v14 >= *(_DWORD *)(a1 + 2088))
      {
        v15 = (unint64_t)sub_20B86B7E8(a1, v23, &v22);
        v16 = 1;
      }
      else
      {
        v16 = 2;
      }
      v5 = v22;
      *(_QWORD *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1] = v16 | v15;
      if (v5 == 2)
      {
LABEL_17:
        ++*(_DWORD *)(a1 + 2060);
        goto LABEL_18;
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_20B868000(uint64_t a1)
{
  if (a1)
    return a1 + 20;
  else
    return 0;
}

uint64_t sub_20B868010(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t sub_20B86801C(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

BOOL sub_20B868028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  _BOOL8 result;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 2080) || (*(_BYTE *)(a1 + 2064) & 1) == 0)
    return 0;
  result = 0;
  v18 = 0;
  if ((a3 - 1) <= 0x3FE && (_DWORD)a4)
  {
    v17 = 0;
    sub_20B86D7F0((uint64_t)v19, a6);
    sub_20B868474((unsigned __int16 *)a1, a1, a2, a3, 0, a4, (float *)&v17, &v18, a7, a5, (uint64_t)v19);
    v14 = v20;
    if (v20 == v19)
    {
      v15 = 4;
      v14 = v19;
    }
    else
    {
      if (!v20)
      {
LABEL_12:
        v16 = v18;
        if (v18 == 2)
          ++*(_DWORD *)(a1 + 2060);
        return v16 != 0;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_12;
  }
  return result;
}

void sub_20B868164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_20B8681A8(int a1, int a2)
{
  char *v4;
  double result;

  v4 = (char *)malloc_type_calloc(1uLL, 0x838uLL, 0x105004014637929uLL);
  if (v4)
  {
    result = 0.0;
    *(_OWORD *)(v4 + 2060) = 0u;
    *((_DWORD *)v4 + 519) = 1;
    *((_QWORD *)v4 + 260) = 0;
    *(_QWORD *)(v4 + 2092) = 0x200000000;
    *((_DWORD *)v4 + 516) = a2;
    *((_DWORD *)v4 + 522) = a1;
  }
  return result;
}

void sub_20B86821C(char *a1)
{
  int v2;
  void *v3;

  if (a1)
  {
    v2 = *((_DWORD *)a1 + 519) - 1;
    *((_DWORD *)a1 + 519) = v2;
    if (!v2)
    {
      v3 = (void *)*((_QWORD *)a1 + 260);
      if (v3)
      {
        if (*((_DWORD *)a1 + 523))
          munmap(v3, *(_QWORD *)(a1 + 2068));
      }
      else if ((a1[2064] & 1) != 0)
      {
        sub_20B86B4F4((uint64_t)a1);
      }
      else
      {
        sub_20B86B570((uint64_t)a1);
      }
      free(a1);
    }
  }
}

void sub_20B868298(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _BYTE *v11;
  _BYTE *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((a6 & 0x80000000) == 0)
  {
    v11 = sub_20B869658((uint64_t)a1, a2, a3);
    if (!v11)
      return;
    v12 = v11;
    v13 = operator new(0x20uLL);
    *v13 = &off_24C46A088;
    v13[1] = a2;
    *((_DWORD *)v13 + 4) = a3;
    v13[3] = a5;
    v19 = v13;
    sub_20B8696C8(v12, 0, (uint64_t)v18, a6);
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
    }
    else
    {
      if (!v19)
      {
LABEL_11:
        free(v12);
        return;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_11;
  }
  v20 = 0xFFFFFFFF00000003;
  v21 = 0;
  v22 = a4;
  v16 = v23;
  sub_20B86D7F0((uint64_t)v23, a5);
  sub_20B8693B8(a1, a2, a3, 0, (uint64_t)&v20);
  if (v24 == v23)
  {
    v17 = 4;
  }
  else
  {
    if (!v24)
      return;
    v17 = 5;
    v16 = v24;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
}

void sub_20B868404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;

  v20 = v19;
  if (a19 == v20)
  {
    v22 = v20;
    v23 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
    v22 = a19;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_20B868474(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  float v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int16 *v32;
  _BYTE v33[24];
  unsigned __int16 *v34;
  _BYTE v35[24];
  unsigned __int16 *v36;
  uint64_t v37;

  v13 = a9;
  v37 = *MEMORY[0x24BDAC8D0];
  if (a5 >= a4)
  {
    *a8 = 2;
    if (*(_DWORD *)(a2 + 8))
    {
      *a8 = 1;
      if (*(_QWORD *)(a11 + 24))
      {
        result = (unsigned __int16 *)sub_20B86BE74(a11, a10, *(float *)(a2 + 4), a9);
        v13 = v22;
      }
    }
    *(float *)(a2 + 4) = v13;
    *(_DWORD *)(a2 + 8) = a6;
    *a7 = v13;
    goto LABEL_24;
  }
  v19 = (uint64_t)result;
  v31 = (unsigned __int8 *)(a3 + a5);
  v20 = *(_QWORD *)(a2 + 8 * *v31 + 12);
  if ((v20 & 3) == 2)
  {
    v32 = (unsigned __int16 *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    sub_20B86D7F0((uint64_t)v33, a11);
    v23 = sub_20B86B98C(v19, (uint64_t **)&v32, a3, a4, a5 + 1, a6, a7, a8, v13, a10, (uint64_t)v33);
    result = v34;
    if (v34 == (unsigned __int16 *)v33)
    {
      v24 = 4;
      result = (unsigned __int16 *)v33;
    }
    else
    {
      if (!v34)
      {
LABEL_19:
        v29 = v32;
        if (v23 >= *(_DWORD *)(v19 + 2088))
        {
          result = (unsigned __int16 *)sub_20B86BBAC(v19, v32, a7, a8);
          v29 = result;
          v30 = 1;
        }
        else
        {
          v30 = 2;
        }
        v28 = v30 | (unint64_t)v29;
        v25 = v31;
        goto LABEL_23;
      }
      v24 = 5;
    }
    result = (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v24))();
    goto LABEL_19;
  }
  if ((v20 & 3) != 1)
  {
    *a7 = a9;
    v25 = (unsigned __int8 *)(a3 + a5);
    v26 = ~a5 + a4;
    v27 = (unint64_t)malloc_type_calloc(1uLL, v26 + 23, 0x55E7E753uLL);
    result = (unsigned __int16 *)memcpy((void *)(v27 + 22), v31 + 1, v26);
    *(_BYTE *)(v27 + 22 + v26) = 0;
    *(_WORD *)(v27 + 20) = v26;
    *(_DWORD *)(v27 + 16) = a6;
    *(float *)(v27 + 8) = v13;
    *(float *)(v27 + 12) = v13;
    *(_QWORD *)v27 = 0;
    v28 = v27 | 2;
    *a8 = 2;
LABEL_23:
    *(_QWORD *)(a2 + 8 * *v25 + 12) = v28;
    goto LABEL_24;
  }
  sub_20B86D7F0((uint64_t)v35, a11);
  sub_20B868474(v19, v20 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5 + 1, a6, a7, a8, v13, a10, v35);
  result = v36;
  if (v36 == (unsigned __int16 *)v35)
  {
    v21 = 4;
    result = (unsigned __int16 *)v35;
  }
  else
  {
    if (!v36)
      goto LABEL_24;
    v21 = 5;
  }
  result = (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v21))();
LABEL_24:
  if (*a7 > *(float *)a2)
    *(float *)a2 = *a7;
  return result;
}

void sub_20B868724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B868788(_DWORD *a1, char *a2, int a3)
{
  uint64_t result;
  char *v5;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t *v41;
  size_t v42;
  uint64_t v43;
  uint64_t *v44;
  size_t v45;
  char *v46;
  int v47;
  uint64_t *v48;
  size_t v49;
  uint64_t v50;
  uint64_t *v51;
  size_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t (***v63)();
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t (***v70)();
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t (***v78)();
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  size_t v88;
  const void *v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  size_t v104;
  const void *v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t *__p;
  char *v113;
  unint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  void **v120;
  _BYTE v121[24];
  _BYTE *v122;
  uint64_t (**v123)();
  uint64_t *v124;
  uint64_t (***v125)();
  uint64_t (**v126)();
  unsigned int *v127;
  uint64_t (***v128)();
  uint64_t v129;

  result = 0;
  v129 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return result;
  v5 = a2;
  if (!a2 || !a3)
    return result;
  if ((a1[516] & 1) != 0)
  {
    v23 = (unint64_t *)operator new(8uLL);
    v24 = 0;
    *v23 = (unint64_t)a1;
    v25 = v23 + 1;
    v115 = (char *)(v23 + 1);
    __p = v23;
    v114 = v23 + 1;
    v26 = (unint64_t)a1;
    while (1)
    {
      v27 = v26 + 8 * v5[v24];
      v30 = *(_QWORD *)(v27 + 12);
      v29 = (uint64_t *)(v27 + 12);
      v28 = v30;
      v31 = v30 & 3;
      if ((v30 & 3) == 0)
        goto LABEL_62;
      if (v31 == 2)
        break;
      v26 = v28 & 0xFFFFFFFFFFFFFFFCLL;
      if (v25 >= (unint64_t *)v115)
      {
        v32 = v25 - __p;
        if ((unint64_t)(v32 + 1) >> 61)
          sub_20B80CDD8();
        v33 = (v115 - (char *)__p) >> 2;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if ((unint64_t)(v115 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)sub_20B800BE8((uint64_t)&v115, v34);
        else
          v35 = 0;
        v36 = (unint64_t *)&v35[8 * v32];
        *v36 = v26;
        v25 = v36 + 1;
        v37 = v114;
        if (v114 != __p)
        {
          do
          {
            v38 = *--v37;
            *--v36 = v38;
          }
          while (v37 != __p);
          v37 = __p;
        }
        __p = v36;
        v115 = &v35[8 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v25++ = v26;
      }
      v114 = v25;
      if (++v24 == a3)
      {
        if (!*(_DWORD *)(v26 + 8))
          goto LABEL_62;
        *(_DWORD *)(v26 + 8) = 0;
        goto LABEL_84;
      }
    }
    v46 = &v5[v24 + 1];
    v47 = ~(_DWORD)v24 + a3;
    v48 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v49 = *(unsigned __int16 *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + 20);
    if (v47 == (_DWORD)v49 && !memcmp(v46, (char *)v48 + 22, v49))
    {
      v56 = *v48;
      free(v48);
      v57 = v56 | 2;
      if (!v56)
        v57 = 0;
      *v29 = v57;
    }
    else
    {
      v50 = *v48;
      if (!*v48)
        goto LABEL_62;
      while (1)
      {
        v51 = (uint64_t *)v50;
        v52 = *(unsigned __int16 *)(v50 + 20);
        if (v47 == (_DWORD)v52 && !memcmp(v46, (const void *)(v50 + 22), v52))
          break;
        v50 = *v51;
        v48 = v51;
        if (!*v51)
          goto LABEL_62;
      }
      *v48 = *v51;
      free(v51);
    }
LABEL_84:
    if ((unint64_t)((char *)v114 - (char *)__p) < 0x10)
      goto LABEL_159;
    v65 = v114 - __p;
    v119 = 0;
    v66 = v65 - 1;
    if (v65 == 1)
      goto LABEL_159;
    LOBYTE(v67) = 0;
    v68 = a1[522];
    while (1)
    {
      v69 = sub_20B86EAF8((uint64_t)a1, __p[v66]);
      v119 = 0;
      v126 = &off_24C46A1E8;
      v127 = &v119;
      v128 = &v126;
      sub_20B8696C8(v69, 0, (uint64_t)&v126, -1);
      v70 = v128;
      if (v128 == &v126)
      {
        v70 = &v126;
        v71 = 4;
      }
      else
      {
        if (!v128)
          goto LABEL_92;
        v71 = 5;
      }
      (*v70)[v71]();
LABEL_92:
      if (v69)
        free(v69);
      if (v119 >= v68)
      {
        if ((v67 & 1) == 0)
          goto LABEL_159;
        v67 = v66 + 1;
LABEL_104:
        v116 = 0;
        v117 = 0;
        v118 = 0;
        sub_20B86EB90(&v116, v68);
        v76 = __p[v67];
        v77 = sub_20B86EAF8((uint64_t)a1, v76);
        v123 = &off_24C46A190;
        v124 = &v116;
        v125 = &v123;
        sub_20B8696C8(v77, 0, (uint64_t)&v123, -1);
        v78 = v125;
        if (v125 == &v123)
        {
          v79 = 4;
          v78 = &v123;
LABEL_134:
          (*v78)[v79]();
        }
        else if (v125)
        {
          v79 = 5;
          goto LABEL_134;
        }
        if (v68 <= (v117 - v116) >> 5)
          __assert_rtn("reverseBurst", "BurstTrie.cpp", 964, "items.size() < sizeThreshold");
        if (v77)
          free(v77);
        sub_20B86B4F4(v76);
        a1[515] -= (unint64_t)(v117 - v116) >> 5;
        *(_QWORD *)(__p[v66] + 8 * v5[v66] + 12) = 0;
        if ((a3 + 1) < (unint64_t)(v114 - __p))
          __assert_rtn("reverseBurst", "BurstTrie.cpp", 973, "levels.size() <= keyLen + 1");
        v96 = sub_20B86AC58();
        v97 = (uint64_t)v96;
        if (v67)
        {
          v98 = v96;
          v99 = v67;
          do
          {
            v100 = *v5++;
            *v98++ = v100;
            --v99;
          }
          while (v99);
        }
        v101 = v116;
        v102 = v117;
        if (v116 == v117)
          goto LABEL_158;
        v103 = a1[516];
        while (2)
        {
          if (*(char *)(v101 + 23) < 0)
          {
            v105 = *(const void **)v101;
            v104 = *(_QWORD *)(v101 + 8);
          }
          else
          {
            v104 = *(unsigned __int8 *)(v101 + 23);
            v105 = (const void *)v101;
          }
          v106 = *(unsigned int *)(v101 + 24);
          v107 = *(float *)(v101 + 28);
          memcpy((void *)(v97 + v67), v105, v104);
          if (*(char *)(v101 + 23) < 0)
            v108 = *(_QWORD *)(v101 + 8);
          else
            LODWORD(v108) = *(unsigned __int8 *)(v101 + 23);
          v109 = (v108 + v67);
          if ((v103 & 1) == 0)
          {
            sub_20B867E54((uint64_t)a1, v97, v109, v106);
            goto LABEL_157;
          }
          v122 = 0;
          sub_20B868028((uint64_t)a1, v97, v109, v106, 0, (uint64_t)v121, v107);
          v110 = v122;
          if (v122 == v121)
          {
            v110 = v121;
            v111 = 4;
LABEL_156:
            (*(void (**)(void))(*v110 + 8 * v111))();
          }
          else if (v122)
          {
            v111 = 5;
            goto LABEL_156;
          }
LABEL_157:
          v101 += 32;
          if (v101 == v102)
            goto LABEL_158;
          continue;
        }
      }
      v67 = 1;
      if (!--v66)
        goto LABEL_104;
    }
  }
  v7 = operator new(8uLL);
  v8 = 0;
  *v7 = a1;
  v9 = (char *)(v7 + 1);
  v115 = (char *)(v7 + 1);
  __p = v7;
  v113 = (char *)(v7 + 1);
  v10 = a1;
  do
  {
    v11 = &v10[2 * v5[v8]];
    v14 = *(_QWORD *)(v11 + 1);
    v13 = (uint64_t *)(v11 + 1);
    v12 = v14;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      goto LABEL_62;
    if (v15 == 2)
    {
      v39 = &v5[v8 + 1];
      v40 = ~(_DWORD)v8 + a3;
      v41 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      v42 = *(unsigned __int16 *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v40 == (_DWORD)v42 && !memcmp(v39, (char *)v41 + 14, v42))
      {
        v54 = *v41;
        free(v41);
        v55 = v54 | 2;
        if (!v54)
          v55 = 0;
        *v13 = v55;
      }
      else
      {
        v43 = *v41;
        if (!*v41)
          goto LABEL_62;
        while (1)
        {
          v44 = (uint64_t *)v43;
          v45 = *(unsigned __int16 *)(v43 + 12);
          if (v40 == (_DWORD)v45 && !memcmp(v39, (const void *)(v43 + 14), v45))
            break;
          v43 = *v44;
          v41 = v44;
          if (!*v44)
            goto LABEL_62;
        }
        *v41 = *v44;
        free(v44);
      }
LABEL_70:
      if ((unint64_t)(v113 - (char *)__p) < 0x10)
        goto LABEL_159;
      v58 = (v113 - (char *)__p) >> 3;
      v119 = 0;
      v59 = v58 - 1;
      if (v58 == 1)
        goto LABEL_159;
      LOBYTE(v60) = 0;
      v61 = a1[522];
      while (1)
      {
        v62 = sub_20B86F1AC((uint64_t)a1, __p[v59]);
        v119 = 0;
        v126 = &off_24C46A138;
        v127 = &v119;
        v128 = &v126;
        sub_20B8696C8(v62, 0, (uint64_t)&v126, -1);
        v63 = v128;
        if (v128 == &v126)
        {
          v63 = &v126;
          v64 = 4;
        }
        else
        {
          if (!v128)
            goto LABEL_78;
          v64 = 5;
        }
        (*v63)[v64]();
LABEL_78:
        if (v62)
          free(v62);
        if (v119 >= v61)
        {
          if ((v60 & 1) != 0)
          {
            v60 = v59 + 1;
LABEL_99:
            v116 = 0;
            v117 = 0;
            v118 = 0;
            sub_20B86EB90(&v116, v61);
            v72 = __p[v60];
            v73 = sub_20B86F1AC((uint64_t)a1, v72);
            v123 = &off_24C46A0E0;
            v124 = &v116;
            v125 = &v123;
            sub_20B8696C8(v73, 0, (uint64_t)&v123, -1);
            v74 = v125;
            if (v125 == &v123)
            {
              v75 = 4;
              v74 = &v123;
LABEL_108:
              (*v74)[v75]();
            }
            else if (v125)
            {
              v75 = 5;
              goto LABEL_108;
            }
            if (v61 <= (v117 - v116) >> 5)
              __assert_rtn("reverseBurst", "BurstTrie.cpp", 964, "items.size() < sizeThreshold");
            if (v73)
              free(v73);
            sub_20B86B570(v72);
            a1[515] -= (unint64_t)(v117 - v116) >> 5;
            *(_QWORD *)(__p[v59] + 8 * v5[v59] + 4) = 0;
            if ((a3 + 1) < (unint64_t)((v113 - (char *)__p) >> 3))
              __assert_rtn("reverseBurst", "BurstTrie.cpp", 973, "levels.size() <= keyLen + 1");
            v80 = sub_20B86AC58();
            v81 = (uint64_t)v80;
            if (v60)
            {
              v82 = v80;
              v83 = v60;
              do
              {
                v84 = *v5++;
                *v82++ = v84;
                --v83;
              }
              while (v83);
            }
            v85 = v116;
            v86 = v117;
            if (v116 != v117)
            {
              v87 = a1[516];
              do
              {
                if (*(char *)(v85 + 23) < 0)
                {
                  v89 = *(const void **)v85;
                  v88 = *(_QWORD *)(v85 + 8);
                }
                else
                {
                  v88 = *(unsigned __int8 *)(v85 + 23);
                  v89 = (const void *)v85;
                }
                v90 = *(unsigned int *)(v85 + 24);
                v91 = *(float *)(v85 + 28);
                memcpy((void *)(v81 + v60), v89, v88);
                if (*(char *)(v85 + 23) < 0)
                  v92 = *(_QWORD *)(v85 + 8);
                else
                  LODWORD(v92) = *(unsigned __int8 *)(v85 + 23);
                v93 = (v92 + v60);
                if ((v87 & 1) != 0)
                {
                  v122 = 0;
                  sub_20B868028((uint64_t)a1, v81, v93, v90, 0, (uint64_t)v121, v91);
                  v94 = v122;
                  if (v122 == v121)
                  {
                    v94 = v121;
                    v95 = 4;
                    goto LABEL_130;
                  }
                  if (v122)
                  {
                    v95 = 5;
LABEL_130:
                    (*(void (**)(void))(*v94 + 8 * v95))();
                  }
                }
                else
                {
                  sub_20B867E54((uint64_t)a1, v81, v93, v90);
                }
                v85 += 32;
              }
              while (v85 != v86);
            }
LABEL_158:
            v120 = (void **)&v116;
            sub_20B86F120(&v120);
          }
LABEL_159:
          v53 = 1;
          goto LABEL_160;
        }
        v60 = 1;
        if (!--v59)
          goto LABEL_99;
      }
    }
    v10 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9 >= v115)
    {
      v16 = (v9 - (char *)__p) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_20B80CDD8();
      v17 = (v115 - (char *)__p) >> 2;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if ((unint64_t)(v115 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)sub_20B800BE8((uint64_t)&v115, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v16];
      *(_QWORD *)v20 = v10;
      v9 = v20 + 8;
      v21 = v113;
      if (v113 != (char *)__p)
      {
        do
        {
          v22 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v20 - 1) = v22;
          v20 -= 8;
        }
        while (v21 != (char *)__p);
        v21 = (char *)__p;
      }
      __p = (unint64_t *)v20;
      v115 = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v9 = v10;
      v9 += 8;
    }
    v113 = v9;
    ++v8;
  }
  while (v8 != a3);
  if (*v10)
  {
    *v10 = 0;
    goto LABEL_70;
  }
LABEL_62:
  v53 = 0;
LABEL_160:
  if (__p)
    operator delete(__p);
  if (!v53)
    return 0;
  --a1[515];
  return 1;
}

void sub_20B86918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a16 = &a12;
  sub_20B86F120((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B869290(_QWORD *a1, const void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a3)
    return 0;
  v11 = 0xFFFFFFFF00000000;
  v12 = 0;
  v7 = v14;
  v13 = 0;
  v15 = 0;
  sub_20B8693B8(a1, a2, a3, 1, (uint64_t)&v11);
  if ((v11 & 0x8000000000000000) != 0)
  {
    v8 = 0;
  }
  else
  {
    if (a4)
      *a4 = HIDWORD(v11);
    if (a5)
      *a5 = v12;
    v8 = 1;
  }
  if (v15 == v14)
  {
    v9 = 4;
    goto LABEL_14;
  }
  if (v15)
  {
    v9 = 5;
    v7 = v15;
LABEL_14:
    (*(void (**)(_QWORD *))(*v7 + 8 * v9))(v7);
  }
  return v8;
}

void sub_20B86937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  _QWORD *v15;
  uint64_t v17;

  if (a15 == v15)
  {
    v17 = 4;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
    v15 = a15;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8693B8(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 0x3FF)
  {
    v9 = (uint64_t)result;
    v10 = sub_20B86AC58();
    memcpy(v10, a2, a3);
    *((_BYTE *)v10 + a3) = 0;
    v11 = *(_QWORD *)(v9 + 2080);
    v12 = *(_DWORD *)(v9 + 2064);
    if (v11)
    {
      v13 = (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11;
      if ((v12 & 1) != 0)
      {
        v21[0] = &off_24C469638;
        v21[1] = sub_20B86C3B8;
        v22 = v21;
        sub_20B86BF00(v9, v13, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v21);
        result = v22;
        if (v22 == v21)
        {
          v14 = 4;
          result = v21;
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
        }
      }
      else
      {
        v19[0] = &off_24C469638;
        v19[1] = sub_20B86C3B8;
        v20 = v19;
        sub_20B86C440(v9, v13, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v19);
        result = v20;
        if (v20 == v19)
        {
          v14 = 4;
          result = v19;
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
        }
      }
    }
    else if ((v12 & 1) != 0)
    {
      v17[0] = &off_24C469638;
      v17[1] = sub_20B86C3B8;
      v18 = v17;
      sub_20B86C8FC(v9, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v17);
      result = v18;
      if (v18 == v17)
      {
        v14 = 4;
        result = v17;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      }
    }
    else
    {
      v15[0] = &off_24C469638;
      v15[1] = sub_20B86C3B8;
      v16 = v15;
      sub_20B86CCA8((int *)v9, (unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v15);
      result = v16;
      if (v16 == v15)
      {
        v14 = 4;
        result = v15;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      }
    }
    if (!result)
      return result;
    v14 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  return result;
}

void sub_20B8695CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_20B869658(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  void *v6;
  int v7;

  v6 = malloc_type_calloc(0x28uLL, 1uLL, 0x82717553uLL);
  sub_20B86A4F4(a1, (uint64_t)v6, a2, a3);
  if (!v7 && v6)
  {
    free(v6);
    return 0;
  }
  return v6;
}

_BYTE *sub_20B8696C8(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v7 = result;
    result = sub_20B86AC58();
    v8 = (uint64_t)result;
    v19 = 0;
    v9 = *((_DWORD *)v7 + 7);
    if (v9)
    {
      if (v9 != 1)
        return result;
      v16 = *(_OWORD *)v7;
      v17 = *((_QWORD *)v7 + 2);
      v10 = *((_QWORD *)v7 + 4);
      sub_20B86D7F0((uint64_t)v22, a3);
      sub_20B869904(v10, (uint64_t)&v16);
      result = v23;
      if (v23 == v22)
      {
        v14 = 4;
        result = v22;
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
      }
    }
    else
    {
      v16 = *(_OWORD *)v7;
      v17 = *((_QWORD *)v7 + 2);
      v18 = *((_DWORD *)v7 + 6);
      v15 = (_QWORD *)*((_QWORD *)v7 + 4);
      sub_20B86D7F0((uint64_t)v20, a3);
      sub_20B86AD14(v15, (uint64_t)&v16, v8, 0, &v19, a4, a2, (uint64_t)v20);
      result = v21;
      if (v21 == v20)
      {
        v14 = 4;
        result = v20;
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
      }
    }
    if (!result)
      return result;
    v14 = 5;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
  }
  return result;
}

void sub_20B869840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B86989C(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t sub_20B8698A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v14 = a2;
  v12 = a4;
  v11 = a5;
  v10 = a7;
  v9 = a6;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, int *, float *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

void sub_20B869904(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_20B869970(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  if (a2 == *(_DWORD *)(*(_QWORD *)(v6 + 2080) + 4))
  {
    sub_20B86D7F0((uint64_t)v11, a1);
    sub_20B86A1FC((_BYTE *)v6, v4, v3, v7, v5, v2, v10, (uint64_t)v11);
    v8 = v12;
    if (v12 == v11)
    {
      v9 = 4;
      v8 = v11;
    }
    else
    {
      if (!v12)
        return;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
}

void sub_20B86A0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a14;
  if (a14 == v26)
  {
    v29 = 4;
    v28 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B86A1FC(_BYTE *result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v11 = result;
  v28 = *MEMORY[0x24BDAC8D0];
  v12 = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *((_QWORD *)result + 260);
  if ((result[2064] & 1) == 0)
  {
    if (*(_DWORD *)(v12 + 1024))
    {
      *(_BYTE *)(a3 + a5) = 0;
      result = (_BYTE *)sub_20B8698A8(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, 0.0);
      if (a5 >= a4 || *a6)
        return result;
    }
    else if (a5 >= a4)
    {
      return result;
    }
    v13 = 0;
    while (1)
    {
      *(_BYTE *)(a3 + a5) = v13;
      *(_QWORD *)a2 = *(unsigned int *)(v12 + 4 * v13);
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      if (v13)
        v14 = a5 + 1;
      else
        v14 = a5;
      sub_20B86D7F0((uint64_t)v24, a8);
      sub_20B869904(v11, a2, a3, a4 - (v13 != 0), v14, a6, a7, v24);
      result = v25;
      if (v25 == v24)
      {
        result = v24;
        v15 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_20;
        v15 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
LABEL_20:
      if (!*a6)
      {
        v16 = v13++ == 255;
        if (!v16)
          continue;
      }
      return result;
    }
  }
  if (!*(_DWORD *)(v12 + 1024))
  {
    if (a5 >= a4)
      return result;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + a5) = 0;
  result = (_BYTE *)sub_20B8698A8(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, *(float *)(v12 + 1032));
  if (a5 < a4 && !*a6)
  {
LABEL_25:
    v17 = 0;
    while (1)
    {
      *(_BYTE *)(a3 + a5) = v17;
      *(_QWORD *)a2 = *(unsigned int *)(v12 + 4 * v17);
      if (v17)
        v18 = a5 + 1;
      else
        v18 = a5;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_20B86D7F0((uint64_t)v26, a8);
      sub_20B869904(v11, a2, a3, a4 - (v17 != 0), v18, a6, a7, v26);
      result = v27;
      if (v27 == v26)
      {
        result = v26;
        v19 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_34;
        v19 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
LABEL_34:
      if (!*a6)
      {
        v16 = v17++ == 255;
        if (!v16)
          continue;
      }
      return result;
    }
  }
  return result;
}

void sub_20B86A490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B86A4F4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  __n128 v7;

  if (a1 && a2)
  {
    if (sub_20B86A554(a1, a2))
      sub_20B86A5C8(a2, a3, a4, v7);
  }
}

uint64_t sub_20B86A554(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t result;
  uint64_t v4;

  if (!a2)
    return 0;
  *(_QWORD *)(a2 + 32) = a1;
  v2 = *(_DWORD **)(a1 + 2080);
  if (v2)
  {
    if (*v2 == -900339842 || *v2 == 12648430 && v2[7] == 2)
    {
      result = 1;
      *(_DWORD *)(a2 + 28) = 1;
      v4 = v2[1];
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v4;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 8) = a1 | 1;
  *(_QWORD *)(a2 + 16) = 0;
  return 1;
}

void sub_20B86A5C8(uint64_t a1, unsigned __int8 *a2, unsigned int a3, __n128 a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a1)
  {
    v5 = *(_DWORD *)(a1 + 28);
    if (v5)
    {
      if (v5 == 1)
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a1 + 16);
        v9 = *(_DWORD *)(a1 + 20);
        sub_20B86A67C(*(_QWORD *)(a1 + 32), a1);
        if (!v10)
        {
          *(_QWORD *)a1 = v6;
          *(_QWORD *)(a1 + 8) = v7;
          *(_DWORD *)(a1 + 16) = v8;
          *(_DWORD *)(a1 + 20) = v9;
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(a1 + 24);
      if (!sub_20B86AB70(*(_QWORD *)(a1 + 32), a1, a2, a3, a4))
      {
        *(_QWORD *)a1 = v12;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 24) = v14;
      }
    }
  }
}

void sub_20B86A67C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

BOOL sub_20B86A6D4@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;

  return a1 == *(_DWORD *)(*(_QWORD *)(v4 + 2080) + 4) && sub_20B86E610(v4, v1, v3, v2) != 0;
}

uint64_t sub_20B86AB70(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  int v12;

  v9 = *(_QWORD *)(a2 + 8);
  if ((v9 & 3) == 2)
  {
    v12 = sub_20B86E788(a1, a2, a3, a4, a5);
    return v12 != 0;
  }
  if ((v9 & 3) != 1)
    return 0;
  v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    if (a4)
    {
      v11 = (uint64_t *)&v10[2 * *a3 + 3];
      goto LABEL_10;
    }
    *(_DWORD *)(a2 + 20) = v10[2];
    *(_DWORD *)(a2 + 24) = v10[1];
  }
  else
  {
    if (a4)
    {
      v11 = (uint64_t *)&v10[2 * *a3 + 1];
LABEL_10:
      sub_20B86EA5C(a1, a2, *v11);
      v12 = sub_20B86AB70(a1, a2, a3 + 1, a4 - 1);
      return v12 != 0;
    }
    *(_DWORD *)(a2 + 20) = *v10;
  }
  return 1;
}

void *sub_20B86AC58()
{
  unsigned __int8 v0;
  void *v1;
  pthread_key_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25472AEA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472AEA0))
  {
    v3 = 0;
    pthread_key_create(&v3, (void (__cdecl *)(void *))MEMORY[0x24BDAE450]);
    qword_25472AE98 = v3;
    __cxa_guard_release(&qword_25472AEA0);
  }
  v1 = pthread_getspecific(qword_25472AE98);
  if (!v1)
  {
    v1 = malloc_type_malloc(0x1000uLL, 0xCD357DB2uLL);
    pthread_setspecific(qword_25472AE98, v1);
  }
  return v1;
}

void sub_20B86ACFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472AEA0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B86AD14(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, int a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v60[3];
  _QWORD *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _BYTE v68[24];
  _BYTE *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v13 = *((_DWORD *)result + 516);
  v14 = *(_QWORD *)(a2 + 8) & 3;
  if (v14 != 2)
  {
    if (v14 != 1)
      return result;
    v15 = (uint64_t)result;
    if ((v13 & 1) == 0)
    {
      sub_20B86D7F0((uint64_t)v64, a8);
      v16 = (int *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL);
      if (*v16)
      {
        sub_20B8698A8((uint64_t)v64, a7, a3, a4, *v16, (uint64_t)a5, *(float *)(a2 + 24));
        if (!a6 || *a5)
          goto LABEL_85;
      }
      else if (!a6)
      {
        goto LABEL_85;
      }
      v48 = 0;
      v49 = (a6 - 1);
      while (1)
      {
        *(_BYTE *)(a3 + a4) = v48;
        sub_20B86EA5C(v15, a2, *(_QWORD *)&v16[2 * v48 + 1]);
        v50 = (uint64_t)v65;
        if (!v65)
          goto LABEL_59;
        if (v65 != v64)
          break;
        v69 = v68;
        (*(void (**)(_QWORD *, _BYTE *))(v64[0] + 24))(v64, v68);
LABEL_61:
        sub_20B86AD14(v15, a2, a3, a4 + 1, a5, v49, a7, v68);
        v51 = v69;
        if (v69 == v68)
        {
          v51 = v68;
          v52 = 4;
        }
        else
        {
          if (!v69)
            goto LABEL_66;
          v52 = 5;
        }
        (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_66:
        if (!*a5)
        {
          v53 = v48++ == 255;
          if (!v53)
            continue;
        }
        goto LABEL_85;
      }
      v50 = (*(uint64_t (**)(void))(*v65 + 16))();
LABEL_59:
      v69 = (_BYTE *)v50;
      goto LABEL_61;
    }
    sub_20B86D7F0((uint64_t)v66, a8);
    v33 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = *(_DWORD *)(v33 + 8);
    if (v34)
    {
      sub_20B8698A8((uint64_t)v66, a7, a3, a4, v34, (uint64_t)a5, *(float *)(a2 + 24));
      if (!a6 || *a5)
      {
LABEL_85:
        if ((v13 & 1) != 0)
        {
          result = v67;
          if (v67 != v66)
            goto LABEL_89;
          v47 = 4;
          result = v66;
        }
        else
        {
          result = v65;
          if (v65 != v64)
            goto LABEL_89;
          v47 = 4;
          result = v64;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
      }
    }
    else if (!a6)
    {
      goto LABEL_85;
    }
    v54 = 0;
    v55 = (a6 - 1);
    while (1)
    {
      *(_BYTE *)(a3 + a4) = v54;
      sub_20B86EA5C(v15, a2, *(_QWORD *)(v33 + 12 + 8 * v54));
      v56 = (uint64_t)v67;
      if (!v67)
        goto LABEL_75;
      if (v67 != v66)
        break;
      v69 = v68;
      (*(void (**)(_QWORD *, _BYTE *))(v66[0] + 24))(v66, v68);
LABEL_77:
      sub_20B86AD14(v15, a2, a3, a4 + 1, a5, v55, a7, v68);
      v57 = v69;
      if (v69 == v68)
      {
        v57 = v68;
        v58 = 4;
      }
      else
      {
        if (!v69)
          goto LABEL_82;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_82:
      if (!*a5)
      {
        v53 = v54++ == 255;
        if (!v53)
          continue;
      }
      goto LABEL_85;
    }
    v56 = (*(uint64_t (**)(void))(*v67 + 16))();
LABEL_75:
    v69 = (_BYTE *)v56;
    goto LABEL_77;
  }
  if ((v13 & 1) != 0)
  {
    sub_20B86D7F0((uint64_t)v62, a8);
    v35 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
    if (v35)
    {
      v36 = (unsigned __int8 *)(v35 + 22);
      v37 = *(unsigned int *)(a2 + 16);
      while (1)
      {
        v38 = *(unsigned __int16 *)(v35 + 20);
        if (v38 >= v37)
        {
          v39 = v38 - (int)v37;
          if (a6 < 0 || (int)v39 <= a6)
          {
            if ((_DWORD)v37)
            {
              v40 = (unsigned __int8 *)(v35 + 22);
              v41 = v36;
              v42 = v37;
              while (1)
              {
                v44 = *v40++;
                v43 = v44;
                v45 = *v41++;
                if (v43 != v45)
                  break;
                if (!--v42)
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              v46 = v39 + a4;
              memcpy((void *)(a3 + a4), (const void *)(v35 + v37 + 22), v39);
              *(_BYTE *)(a3 + v46) = 0;
              sub_20B8698A8((uint64_t)v62, a7, a3, v46, *(_DWORD *)(v35 + 16), (uint64_t)a5, *(float *)(v35 + 12));
            }
          }
        }
        v35 = *(_QWORD *)v35;
        if (!v35)
          goto LABEL_49;
      }
    }
    goto LABEL_52;
  }
  sub_20B86D7F0((uint64_t)v60, a8);
  v17 = v13;
  v18 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = *(unsigned int *)(a2 + 16);
  if (v19 > *(unsigned __int16 *)(v18 + 12))
    __assert_rtn("traverseFromMapCursorTrieList", "BurstTrie.cpp", 1956, "cursor.prfxlen <= head->restlen");
  if (!v18)
    goto LABEL_33;
  v20 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  while (1)
  {
    if (v20 == v18)
    {
      v21 = *(unsigned __int16 *)(v18 + 12);
      goto LABEL_20;
    }
    v21 = *(unsigned __int16 *)(v20 + 12);
    if (v21 <= (unsigned __int16)v19)
      goto LABEL_33;
    if ((_DWORD)v19)
      break;
LABEL_20:
    v28 = v21 - v19;
    if ((a6 & 0x80000000) == 0 && v28 > a6)
      goto LABEL_32;
    v29 = v28 + a4;
    memcpy((void *)(a3 + a4), (const void *)(v20 + v19 + 14), v28);
    *(_BYTE *)(a3 + v29) = 0;
    v30 = (uint64_t)v61;
    if (!v61)
      goto LABEL_25;
    if (v61 != v60)
    {
      v30 = (*(uint64_t (**)(void))(*v61 + 16))();
LABEL_25:
      v69 = (_BYTE *)v30;
      goto LABEL_27;
    }
    v69 = v68;
    (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v68);
LABEL_27:
    sub_20B8698A8((uint64_t)v68, a7, a3, v29, *(_DWORD *)(v20 + 8), (uint64_t)a5, 0.0);
    v31 = v69;
    if (v69 == v68)
    {
      v31 = v68;
      v32 = 4;
      goto LABEL_31;
    }
    if (v69)
    {
      v32 = 5;
LABEL_31:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
LABEL_32:
    v20 = *(_QWORD *)v20;
    if (!v20)
      goto LABEL_33;
  }
  v22 = (unsigned __int8 *)(v20 + 14);
  v23 = (unsigned __int8 *)(v18 + 14);
  v24 = v19;
  while (1)
  {
    v26 = *v22++;
    v25 = v26;
    v27 = *v23++;
    if (v25 != v27)
      break;
    if (!--v24)
      goto LABEL_20;
  }
LABEL_33:
  LOBYTE(v13) = v17;
LABEL_49:
  if ((v13 & 1) != 0)
  {
LABEL_52:
    result = v63;
    if (v63 != v62)
      goto LABEL_89;
    v47 = 4;
    result = v62;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
  result = v61;
  if (v61 == v60)
  {
    v47 = 4;
    result = v60;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
LABEL_89:
  if (result)
  {
    v47 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
  return result;
}

void sub_20B86B2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v29;
  uint64_t v30;

  v29 = a28;
  if (a28 == &a25)
  {
    v30 = 4;
    v29 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B86B430(_QWORD *result)
{
  _QWORD *v1;
  int v2;

  if (result)
  {
    v1 = result;
    result = malloc_type_calloc(0x28uLL, 1uLL, 0x55758E37uLL);
    v2 = *((_DWORD *)v1 + 7);
    if (v2)
    {
      if (v2 == 1)
      {
        *result = *v1;
        result[1] = v1[1];
        *((_DWORD *)result + 4) = *((_DWORD *)v1 + 4);
        *((_DWORD *)result + 5) = *((_DWORD *)v1 + 5);
      }
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)v1;
      result[2] = v1[2];
      *((_DWORD *)result + 6) = *((_DWORD *)v1 + 6);
    }
    *((_DWORD *)result + 7) = v2;
    result[4] = v1[4];
  }
  return result;
}

uint64_t sub_20B86B4BC(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;

  v2 = a1[7];
  if (v2)
  {
    if (v2 != 1)
      return 0;
    v3 = a1[4];
    if (!v3)
      return 0;
  }
  else
  {
    v3 = a1[5];
    if (!v3)
      return 0;
  }
  if (a2)
    *a2 = v3;
  return 1;
}

void sub_20B86B4F4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 12);
    v5 = (_QWORD *)(v3 + 12);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_20B86B4F4(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void sub_20B86B570(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 4);
    v5 = (_QWORD *)(v3 + 4);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_20B86B570(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

uint64_t sub_20B86B5EC(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, int *a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v36;
  uint64_t v37;
  int *v38;

  v12 = a2;
  v13 = a1;
  v14 = (uint64_t *)*a2;
  v15 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0x8E39A38EuLL);
  v16 = (const void *)(a3 + a5);
  if (v14)
  {
    v36 = v12;
    v37 = v13;
    v38 = a7;
    v17 = 0;
    v18 = 1;
LABEL_3:
    v19 = a6;
    v20 = 0;
    v21 = v17;
    v22 = &v15[v17];
    do
    {
      v23 = *((unsigned __int16 *)v14 + 6);
      if ((_DWORD)v23 + a5 == a4 && !memcmp(v16, (char *)v14 + 14, v23))
      {
        v18 = 0;
        a6 = v19;
        *((_DWORD *)v14 + 2) = v19;
        v17 = v21 + v20 + 1;
        v15[v21 + v20] = v14;
        v14 = (uint64_t *)*v14;
        if (v14)
          goto LABEL_3;
        v24 = (v21 + v20 + 1);
        v25 = 1;
        goto LABEL_15;
      }
      v22[v20] = v14;
      v14 = (uint64_t *)*v14;
      ++v20;
    }
    while (v14);
    v26 = v21 + v20;
    if ((v18 & 1) != 0)
    {
      v13 = v37;
      a7 = v38;
      LODWORD(a6) = v19;
      v12 = v36;
      goto LABEL_13;
    }
    v25 = 1;
    v24 = v26;
LABEL_15:
    v13 = v37;
    a7 = v38;
    v12 = v36;
  }
  else
  {
    LODWORD(v26) = 0;
LABEL_13:
    v27 = a4 - a5;
    v28 = (char *)malloc_type_calloc(1uLL, v27 + 15, 0xA9B8A391uLL);
    memcpy(v28 + 14, v16, v27);
    v28[v27 + 14] = 0;
    *((_WORD *)v28 + 6) = v27;
    *((_DWORD *)v28 + 2) = a6;
    v24 = (v26 + 1);
    v25 = 2;
    *(_QWORD *)v28 = 0;
    v15[v26] = v28;
  }
  qsort(v15, (int)v24, 8uLL, (int (__cdecl *)(const void *, const void *))sub_20B86B948);
  v29 = (_QWORD *)*v15;
  v30 = (_QWORD *)*v15;
  if ((int)v24 >= 2)
  {
    v31 = v15 + 1;
    v32 = v24 - 1;
    v33 = (_QWORD *)*v15;
    do
    {
      v34 = (_QWORD *)*v31++;
      v30 = v34;
      *v33 = v34;
      v33 = v34;
      --v32;
    }
    while (v32);
  }
  *v30 = 0;
  *v12 = v29;
  free(v15);
  *a7 = v25;
  if (v24 > *(_DWORD *)(v13 + 2088))
    sub_20BA32128();
  return v24;
}

_DWORD *sub_20B86B7E8(uint64_t a1, unsigned __int16 *a2, int *a3)
{
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unint64_t v19;

  v6 = malloc_type_calloc(1uLL, 0x804uLL, 0x10000406A7154B6uLL);
  if (a2)
  {
    do
    {
      v7 = a2[6];
      v8 = *((unsigned int *)a2 + 2);
      if (a2[6])
      {
        v9 = *(_QWORD *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1];
        if (v9)
        {
          v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          v10 = sub_20B86B5EC(a1, &v19, (uint64_t)(a2 + 7), v7, 1u, v8, a3);
          v11 = v19;
          if (v10 >= *(_DWORD *)(a1 + 2088))
          {
            v11 = sub_20B86B7E8(a1, v19, a3);
            v12 = 1;
          }
          else
          {
            v12 = 2;
          }
          v15 = v12 | v11;
          v16 = *((unsigned __int8 *)a2 + 14);
        }
        else
        {
          v13 = (v7 - 1);
          v14 = (unint64_t)malloc_type_calloc(1uLL, v13 + 15, 0xA9B8A391uLL);
          memcpy((void *)(v14 + 14), (char *)a2 + 15, v13);
          *(_BYTE *)(v14 + 14 + v13) = 0;
          *(_WORD *)(v14 + 12) = v13;
          *(_DWORD *)(v14 + 8) = v8;
          *(_QWORD *)v14 = 0;
          v15 = v14 | 2;
          v16 = *((unsigned __int8 *)a2 + 14);
        }
        *(_QWORD *)&v6[2 * v16 + 1] = v15;
      }
      else
      {
        *v6 = v8;
      }
      v17 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v17;
    }
    while (v17);
  }
  return v6;
}

uint64_t sub_20B86B948(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  v4 = (const void *)(*a1 + 14);
  v5 = (const void *)(*a2 + 14);
  v6 = *(unsigned __int16 *)(v2 + 12);
  v7 = *(unsigned __int16 *)(v3 + 12);
  v8 = v6 - v7;
  if ((int)v6 >= (int)v7)
    v9 = v7;
  else
    v9 = v6;
  LODWORD(result) = memcmp(v4, v5, v9);
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t sub_20B86B98C(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, unsigned int a5, int a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  size_t v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;

  v17 = *a2;
  v18 = (uint64_t *)malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0x861081D6uLL);
  v19 = (const void *)(a3 + a5);
  if (v17)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0.0;
    do
    {
      v23 = v20;
      v24 = *((unsigned __int16 *)v17 + 10);
      if ((_DWORD)v24 + a5 == a4 && !memcmp(v19, (char *)v17 + 22, v24))
      {
        *((_DWORD *)v17 + 4) = a6;
        v25 = *((float *)v17 + 3);
        if (*(_QWORD *)(a11 + 24))
          sub_20B86BE74(a11, a10, v25, a9);
        else
          v26 = v25 + a9;
        *((float *)v17 + 3) = v26;
        v21 = 1;
      }
      if (*((float *)v17 + 2) > v22)
        v22 = *((float *)v17 + 2);
      ++v20;
      v18[v23] = (uint64_t)v17;
      v17 = (uint64_t *)*v17;
    }
    while (v17);
    if (v21)
    {
      v27 = 1;
      v28 = v23 + 1;
      v29 = a1;
      goto LABEL_18;
    }
  }
  else
  {
    LODWORD(v20) = 0;
    v22 = 0.0;
  }
  v29 = a1;
  if (v22 < a9)
    v22 = a9;
  v30 = a4 - a5;
  v31 = (char *)malloc_type_calloc(1uLL, v30 + 23, 0x55E7E753uLL);
  memcpy(v31 + 22, v19, v30);
  v31[v30 + 22] = 0;
  *((_WORD *)v31 + 10) = v30;
  *((_DWORD *)v31 + 4) = a6;
  *((float *)v31 + 2) = v22;
  *((float *)v31 + 3) = a9;
  v28 = (v20 + 1);
  v27 = 2;
  *(_QWORD *)v31 = 0;
  v18[v20] = (uint64_t)v31;
LABEL_18:
  qsort(v18, (int)v28, 8uLL, (int (__cdecl *)(const void *, const void *))sub_20B86BEB8);
  v32 = (_QWORD *)*v18;
  *a7 = v22;
  v33 = v32;
  if ((int)v28 >= 2)
  {
    v34 = (v28 - 1);
    v35 = v18 + 1;
    v36 = v32;
    do
    {
      v37 = *v35++;
      v33 = (_QWORD *)v37;
      *v36 = v37;
      *(float *)(v37 + 8) = *a7;
      v36 = (_QWORD *)v37;
      --v34;
    }
    while (v34);
  }
  *v33 = 0;
  *a2 = v32;
  free(v18);
  *a8 = v27;
  if (v28 > *(_DWORD *)(v29 + 2088))
    sub_20BA32150();
  return v28;
}

float *sub_20B86BBAC(uint64_t a1, unsigned __int16 *a2, float *a3, int *a4)
{
  float *v8;
  int v9;
  int v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  unsigned __int16 *v25;
  float v26;
  float v28;
  uint64_t *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = (float *)malloc_type_calloc(1uLL, 0x80CuLL, 0x10000408B9410F9uLL);
  *a3 = 0.0;
  if (!a2)
  {
    v26 = 0.0;
    goto LABEL_26;
  }
  do
  {
    v28 = 0.0;
    v9 = a2[10];
    v10 = *((_DWORD *)a2 + 4);
    v11 = *((float *)a2 + 3);
    v31 = 0;
    if (!v9)
    {
      v8[1] = v11;
      *((_DWORD *)v8 + 2) = v10;
      v28 = v11;
      goto LABEL_16;
    }
    v12 = *(_QWORD *)&v8[2 * *((unsigned __int8 *)a2 + 22) + 3];
    if (v12)
    {
      v29 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      v33 = 0;
      v13 = sub_20B86B98C(a1, &v29, (uint64_t)(a2 + 11), v9, 1u, v10, &v28, a4, v11, 0, (uint64_t)v32);
      v14 = v33;
      if (v33 == v32)
      {
        v14 = v32;
        v15 = 4;
      }
      else
      {
        if (!v33)
        {
LABEL_11:
          v20 = (uint64_t)v29;
          if (v13 >= *(_DWORD *)(a1 + 2088))
          {
            v20 = sub_20B86BBAC(a1, v29, &v28, a4);
            v21 = 1;
          }
          else
          {
            v21 = 2;
          }
          v18 = v21 | v20;
          v19 = *((unsigned __int8 *)a2 + 22);
          goto LABEL_15;
        }
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_11;
    }
    v16 = (v9 - 1);
    v17 = (unint64_t)malloc_type_calloc(1uLL, v16 + 23, 0x55E7E753uLL);
    memcpy((void *)(v17 + 22), (char *)a2 + 23, v16);
    *(_BYTE *)(v17 + 22 + v16) = 0;
    *(_WORD *)(v17 + 20) = v16;
    *(_DWORD *)(v17 + 16) = v10;
    *(float *)(v17 + 8) = v11;
    *(float *)(v17 + 12) = v11;
    *(_QWORD *)v17 = 0;
    v28 = v11;
    v18 = v17 | 2;
    v19 = *((unsigned __int8 *)a2 + 22);
LABEL_15:
    *(_QWORD *)&v8[2 * v19 + 3] = v18;
LABEL_16:
    v22 = v31;
    if (v31 == v30)
    {
      v22 = v30;
      v23 = 4;
    }
    else
    {
      if (!v31)
        goto LABEL_21;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_21:
    v24 = v28;
    if (v28 <= *a3)
      v24 = *a3;
    *a3 = v24;
    v25 = *(unsigned __int16 **)a2;
    free(a2);
    a2 = v25;
  }
  while (v25);
  v26 = *a3;
LABEL_26:
  *v8 = v26;
  return v8;
}

void sub_20B86BE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86BE74(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  float v6;
  float v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, float *, float *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_20B86BEB8(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v2 = *(float *)(*(_QWORD *)a1 + 12);
  v3 = *(float *)(*(_QWORD *)a2 + 12);
  if (v2 == v3)
  {
    v4 = *(_DWORD *)(*(_QWORD *)a1 + 16);
    v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v6 = v4 == v5;
    if (v4 > v5)
      v7 = -1;
    else
      v7 = 1;
    if (v6)
      return 0;
    else
      return v7;
  }
  else if ((float)(v2 - v3) <= 0.0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_20B86BF00(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  if (a5 >= a4)
  {
    v20 = *(_DWORD *)(a2 + 1024);
    if (v20)
    {
      v21 = *(_DWORD *)(a2 + 1032);
      v22 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v22[4] = a4;
      *((_BYTE *)v22 + a4 + 20) = 0;
      memcpy(v22 + 5, a3, a4);
      v22[2] = v20;
      *v22 = v21;
      v22[3] = 1;
      sub_20B86D7A0(a8, a7, (uint64_t)v22, 1, (uint64_t)&v38);
      if (v22[3]-- == 1)
        free(v22);
      if (v38)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v38 != 0;
    v25 = 0;
    v26 = (a4 + 1);
    while (1)
    {
      v27 = *(_DWORD *)(a2 + 4 * v25);
      a3[a5] = v25;
      v28 = v27 & 3;
      switch(v28)
      {
        case 3:
          v32 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v41, a8);
          v30 = sub_20B86D048(a1, (int8x8_t *)((v27 & 0xFFFFFFFC) + v32), a3, v26, a5 + 1, 0, a7, (uint64_t)v41);
          v38 = v30;
          v31 = v42;
          if (v42 == v41)
          {
            v31 = v41;
LABEL_26:
            v34 = 4;
            goto LABEL_27;
          }
          break;
        case 2:
          v33 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v39, a8);
          v30 = sub_20B86D5F0((unsigned int *)((v27 & 0xFFFFFFFC) + v33), a3, v26, a5 + 1, 0, a7, (uint64_t)v39);
          v38 = v30;
          v31 = v40;
          if (v40 == v39)
          {
            v31 = v39;
            goto LABEL_26;
          }
          break;
        case 1:
          v29 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v43, a8);
          v30 = sub_20B86BF00(a1, (v27 & 0xFFFFFFFC) + v29, a3, v26, a5 + 1, 0, a7, v43);
          v38 = v30;
          v31 = v44;
          if (v44 == v43)
          {
            v31 = v43;
            goto LABEL_26;
          }
          break;
        default:
          goto LABEL_28;
      }
      if (v31)
      {
        v34 = 5;
LABEL_27:
        (*(void (**)(_BYTE *))(*(_QWORD *)v31 + 8 * v34))(v31);
LABEL_28:
        v30 = v38;
      }
      if (v30)
        return 1;
      if (++v25 == 256)
        return v38 != 0;
    }
  }
  v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
  v16 = v15 & 3;
  switch(v16)
  {
    case 3:
      v35 = *(_QWORD *)(a1 + 2080);
      sub_20B86D7F0((uint64_t)v47, a8);
      v38 = sub_20B86D048(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v35), a3, a4, a5 + 1, a6, a7, (uint64_t)v47);
      v18 = v48;
      if (v48 == v47)
      {
        v19 = 4;
        v18 = v47;
        goto LABEL_38;
      }
      break;
    case 2:
      v36 = *(_QWORD *)(a1 + 2080);
      sub_20B86D7F0((uint64_t)v45, a8);
      v38 = sub_20B86D5F0((unsigned int *)((v15 & 0xFFFFFFFC) + v36), a3, a4, a5 + 1, a6, a7, (uint64_t)v45);
      v18 = v46;
      if (v46 == v45)
      {
        v19 = 4;
        v18 = v45;
        goto LABEL_38;
      }
      break;
    case 1:
      v17 = *(_QWORD *)(a1 + 2080);
      sub_20B86D7F0((uint64_t)v49, a8);
      v38 = sub_20B86BF00(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v49);
      v18 = v50;
      if (v50 == v49)
      {
        v19 = 4;
        v18 = v49;
LABEL_38:
        (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
        return v38 != 0;
      }
      break;
    default:
      return v38 != 0;
  }
  if (v18)
  {
    v19 = 5;
    goto LABEL_38;
  }
  return v38 != 0;
}

void sub_20B86C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v28 + 56);
  if (v31 == v27)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 144);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86C3B8(uint64_t result, _DWORD *a2, int a3, _BYTE *a4)
{
  char v5;

  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_5:
      *(_DWORD *)(result + 4) = a2[2];
      *(_DWORD *)(result + 8) = *a2;
LABEL_8:
      *a4 = 1;
      return result;
    }
    if (!*(_DWORD *)result)
    {
      if (!a3)
        return result;
      goto LABEL_5;
    }
    v5 = 0;
    if (*(_QWORD *)(result + 48))
    {
      result = sub_20B86D854(result + 24, *(_QWORD *)(result + 16), (uint64_t)a2, (uint64_t)&v5);
      if (v5)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_20B86C440(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  if (a5 >= a4)
  {
    v20 = *(_DWORD *)(a2 + 1024);
    if (v20)
    {
      v21 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v21[4] = a4;
      *((_BYTE *)v21 + a4 + 20) = 0;
      memcpy(v21 + 5, a3, a4);
      v21[2] = v20;
      *v21 = 0;
      v21[3] = 1;
      sub_20B86D7A0(a8, a7, (uint64_t)v21, 1, (uint64_t)&v37);
      if (v21[3]-- == 1)
        free(v21);
      if (v37)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v37 != 0;
    v24 = 0;
    v25 = (a4 + 1);
    while (1)
    {
      v26 = *(_DWORD *)(a2 + 4 * v24);
      a3[a5] = v24;
      v27 = v26 & 3;
      switch(v27)
      {
        case 3:
          v31 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v40, a8);
          v29 = sub_20B86D960(a1, (int8x8_t *)((v26 & 0xFFFFFFFC) + v31), a3, v25, a5 + 1, 0, a7, (uint64_t)v40);
          v37 = v29;
          v30 = v41;
          if (v41 == v40)
          {
            v30 = v40;
LABEL_26:
            v33 = 4;
            goto LABEL_27;
          }
          break;
        case 2:
          v32 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v38, a8);
          v29 = sub_20B86DF0C(a1, (unsigned int *)((v26 & 0xFFFFFFFC) + v32), (char *)a3, v25, a5 + 1, 0, a7, (uint64_t)v38);
          v37 = v29;
          v30 = v39;
          if (v39 == v38)
          {
            v30 = v38;
            goto LABEL_26;
          }
          break;
        case 1:
          v28 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v42, a8);
          v29 = sub_20B86C440(a1, (v26 & 0xFFFFFFFC) + v28, a3, v25, a5 + 1, 0, a7, v42);
          v37 = v29;
          v30 = v43;
          if (v43 == v42)
          {
            v30 = v42;
            goto LABEL_26;
          }
          break;
        default:
          goto LABEL_28;
      }
      if (v30)
      {
        v33 = 5;
LABEL_27:
        (*(void (**)(void))(*(_QWORD *)v30 + 8 * v33))();
LABEL_28:
        v29 = v37;
      }
      if (v29)
        return 1;
      if (++v24 == 256)
        return v37 != 0;
    }
  }
  v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
  v16 = v15 & 3;
  switch(v16)
  {
    case 3:
      v34 = *(_QWORD *)(a1 + 2080);
      sub_20B86D7F0((uint64_t)v46, a8);
      v37 = sub_20B86D960(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v34), a3, a4, a5 + 1, a6, a7, (uint64_t)v46);
      v18 = v47;
      if (v47 == v46)
      {
        v19 = 4;
        v18 = v46;
        goto LABEL_38;
      }
      break;
    case 2:
      v35 = *(_QWORD *)(a1 + 2080);
      sub_20B86D7F0((uint64_t)v44, a8);
      v37 = sub_20B86DF0C(a1, (unsigned int *)((v15 & 0xFFFFFFFC) + v35), (char *)a3, a4, a5 + 1, a6, a7, (uint64_t)v44);
      v18 = v45;
      if (v45 == v44)
      {
        v19 = 4;
        v18 = v44;
        goto LABEL_38;
      }
      break;
    case 1:
      v17 = *(_QWORD *)(a1 + 2080);
      sub_20B86D7F0((uint64_t)v48, a8);
      v37 = sub_20B86C440(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v48);
      v18 = v49;
      if (v49 == v48)
      {
        v19 = 4;
        v18 = v48;
LABEL_38:
        (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
        return v37 != 0;
      }
      break;
    default:
      return v37 != 0;
  }
  if (v18)
  {
    v19 = 5;
    goto LABEL_38;
  }
  return v37 != 0;
}

void sub_20B86C824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v28 + 56);
  if (v31 == v27)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 128);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86C8FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned __int8 v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  if (a4 >= a3)
  {
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v19 = *(_DWORD *)(a1 + 4);
      v20 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v20[4] = a4;
      *((_BYTE *)v20 + a4 + 20) = 0;
      memcpy(v20 + 5, a2, a4);
      v20[2] = v18;
      *v20 = v19;
      v20[3] = 1;
      sub_20B86D7A0(a7, a6, (uint64_t)v20, 1, (uint64_t)&v30);
      v21 = v20[3]-- == 1;
      if (v21)
        free(v20);
      v15 = v30 != 0;
      if (v30 || (a5 & 1) != 0)
        return v15;
    }
    else if ((a5 & 1) != 0)
    {
      return 0;
    }
    v22 = 0;
    v23 = (a3 + 1);
    v24 = a1 + 12;
    while (1)
    {
      v25 = *(_QWORD *)(v24 + 8 * v22);
      a2[a4] = v22;
      if ((v25 & 3) == 2)
        break;
      if ((v25 & 3) == 1)
      {
        sub_20B86D7F0((uint64_t)v33, a7);
        v26 = sub_20B86C8FC(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, v23, a4 + 1, 0, a6, v33);
        v30 = v26;
        v27 = v34;
        if (v34 == v33)
        {
          v27 = v33;
          goto LABEL_24;
        }
LABEL_21:
        if (!v27)
          goto LABEL_27;
        v28 = 5;
        goto LABEL_25;
      }
LABEL_26:
      v26 = v30;
LABEL_27:
      v15 = v26 != 0;
      if (!v26)
      {
        v21 = v22++ == 255;
        if (!v21)
          continue;
      }
      return v15;
    }
    sub_20B86D7F0((uint64_t)v31, a7);
    v26 = sub_20B86E304(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, v23, a4 + 1, 0, a6, (uint64_t)v31);
    v30 = v26;
    v27 = v32;
    if (v32 != v31)
      goto LABEL_21;
    v27 = v31;
LABEL_24:
    v28 = 4;
LABEL_25:
    (*(void (**)(_BYTE *))(*(_QWORD *)v27 + 8 * v28))(v27);
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(a1 + 8 * a2[a4] + 12);
  if ((v14 & 3) != 2)
  {
    if ((v14 & 3) == 1)
    {
      sub_20B86D7F0((uint64_t)v37, a7);
      v15 = sub_20B86C8FC(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v37);
      v16 = v38;
      if (v38 == v37)
      {
        v17 = 4;
        v16 = v37;
LABEL_35:
        (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        return v15;
      }
      goto LABEL_32;
    }
    return 0;
  }
  sub_20B86D7F0((uint64_t)v35, a7);
  v15 = sub_20B86E304(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v35);
  v16 = v36;
  if (v36 == v35)
  {
    v17 = 4;
    v16 = v35;
    goto LABEL_35;
  }
LABEL_32:
  if (v16)
  {
    v17 = 5;
    goto LABEL_35;
  }
  return v15;
}

void sub_20B86CC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a22;
  if (a22 == v26)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86CCA8(int *a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned __int8 v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  if (a4 >= a3)
  {
    v18 = *a1;
    if (*a1)
    {
      v19 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v19[4] = a4;
      *((_BYTE *)v19 + a4 + 20) = 0;
      memcpy(v19 + 5, a2, a4);
      v19[2] = v18;
      *v19 = 0;
      v19[3] = 1;
      sub_20B86D7A0(a7, a6, (uint64_t)v19, 1, (uint64_t)&v29);
      v20 = v19[3]-- == 1;
      if (v20)
        free(v19);
      v15 = v29 != 0;
      if (v29 || (a5 & 1) != 0)
        return v15;
    }
    else if ((a5 & 1) != 0)
    {
      return 0;
    }
    v21 = 0;
    v22 = (a3 + 1);
    v23 = a1 + 1;
    while (1)
    {
      v24 = *(_QWORD *)&v23[2 * v21];
      a2[a4] = v21;
      if ((v24 & 3) == 2)
        break;
      if ((v24 & 3) == 1)
      {
        sub_20B86D7F0((uint64_t)v32, a7);
        v25 = sub_20B86CCA8(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, v22, a4 + 1, 0, a6, v32);
        v29 = v25;
        v26 = v33;
        if (v33 == v32)
        {
          v26 = v32;
          goto LABEL_24;
        }
LABEL_21:
        if (!v26)
          goto LABEL_27;
        v27 = 5;
        goto LABEL_25;
      }
LABEL_26:
      v25 = v29;
LABEL_27:
      v15 = v25 != 0;
      if (!v25)
      {
        v20 = v21++ == 255;
        if (!v20)
          continue;
      }
      return v15;
    }
    sub_20B86D7F0((uint64_t)v30, a7);
    v25 = sub_20B86E490(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, v22, a4 + 1, 0, a6, (uint64_t)v30);
    v29 = v25;
    v26 = v31;
    if (v31 != v30)
      goto LABEL_21;
    v26 = v30;
LABEL_24:
    v27 = 4;
LABEL_25:
    (*(void (**)(_BYTE *))(*(_QWORD *)v26 + 8 * v27))(v26);
    goto LABEL_26;
  }
  v14 = *(_QWORD *)&a1[2 * a2[a4] + 1];
  if ((v14 & 3) != 2)
  {
    if ((v14 & 3) == 1)
    {
      sub_20B86D7F0((uint64_t)v36, a7);
      v15 = sub_20B86CCA8(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v36);
      v16 = v37;
      if (v37 == v36)
      {
        v17 = 4;
        v16 = v36;
LABEL_35:
        (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        return v15;
      }
      goto LABEL_32;
    }
    return 0;
  }
  sub_20B86D7F0((uint64_t)v34, a7);
  v15 = sub_20B86E490(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v34);
  v16 = v35;
  if (v35 == v34)
  {
    v17 = 4;
    v16 = v34;
    goto LABEL_35;
  }
LABEL_32:
  if (v16)
  {
    v17 = 5;
    goto LABEL_35;
  }
  return v15;
}

void sub_20B86CFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86D048(uint64_t a1, int8x8_t *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int v19;
  __int32 v20;
  __int32 v21;
  _DWORD *v22;
  unint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  int v28;
  int8x8_t *v29;
  int8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  __int32 v33;
  int v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t *v41;
  int8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  __int32 v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  if (a5 >= a4)
  {
    v20 = a2[5].i32[0];
    if (v20)
    {
      v21 = a2[4].i32[1];
      v22 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v22[4] = a4;
      *((_BYTE *)v22 + a4 + 20) = 0;
      memcpy(v22 + 5, a3, a4);
      v22[2] = v20;
      *v22 = v21;
      v22[3] = 1;
      sub_20B86D7A0(a8, a7, (uint64_t)v22, 1, (uint64_t)&v54);
      if (v22[3]-- == 1)
        free(v22);
      if (v54)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v54 != 0;
    v25 = 0;
    v52 = a4 + 1;
    while (1)
    {
      if (v25 >> 6 <= 1)
        v26 = 1;
      else
        v26 = v25 >> 6;
      v27 = a2[v25 >> 6];
      if ((*(_QWORD *)&v27 & (1 << v25)) == 0)
        goto LABEL_34;
      if (v25 >= 0x40)
      {
        v28 = 0;
        v29 = a2;
        do
        {
          v30 = *v29++;
          v31 = (uint8x8_t)vcnt_s8(v30);
          v31.i16[0] = vaddlv_u8(v31);
          v28 += v31.i32[0];
          --v26;
        }
        while (v26);
      }
      else
      {
        v28 = 0;
      }
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v27 & ((1 << v25) - 1)));
      v32.i16[0] = vaddlv_u8(v32);
      v33 = a2[5].i32[v28 + v32.i32[0] + 1];
      a3[a5] = v25;
      v34 = v33 & 3;
      switch(v34)
      {
        case 1:
          v38 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v59, a8);
          v36 = sub_20B86BF00(a1, v38 + (v33 & 0xFFFFFFFC), a3, v52, a5 + 1, 0, a7, v59);
          v54 = v36;
          v37 = v60;
          if (v60 == v59)
          {
            v37 = v59;
LABEL_32:
            v40 = 4;
            goto LABEL_33;
          }
          break;
        case 2:
          v39 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v55, a8);
          v36 = sub_20B86D5F0((unsigned int *)(v39 + (v33 & 0xFFFFFFFC)), a3, v52, a5 + 1, 0, a7, (uint64_t)v55);
          v54 = v36;
          v37 = v56;
          if (v56 == v55)
          {
            v37 = v55;
            goto LABEL_32;
          }
          break;
        case 3:
          v35 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v57, a8);
          v36 = sub_20B86D048(a1, v35 + (v33 & 0xFFFFFFFC), a3, v52, a5 + 1, 0, a7, v57);
          v54 = v36;
          v37 = v58;
          if (v58 == v57)
          {
            v37 = v57;
            goto LABEL_32;
          }
          break;
        default:
          goto LABEL_34;
      }
      if (v37)
      {
        v40 = 5;
LABEL_33:
        (*(void (**)(_BYTE *))(*(_QWORD *)v37 + 8 * v40))(v37);
LABEL_34:
        v36 = v54;
      }
      if (v36)
        return 1;
      if ((_DWORD)++v25 == 256)
        return v54 != 0;
    }
  }
  v15 = a3[a5];
  v16 = v15 >> 6;
  v17 = a2[v15 >> 6];
  v18 = 1 << v15;
  if (((1 << v15) & *(_QWORD *)&v17) != 0)
  {
    if (v15 >= 0x40)
    {
      v19 = 0;
      if (v16 <= 1)
        v16 = 1;
      else
        v16 = v16;
      v41 = a2;
      do
      {
        v42 = *v41++;
        v43 = (uint8x8_t)vcnt_s8(v42);
        v43.i16[0] = vaddlv_u8(v43);
        v19 += v43.i32[0];
        --v16;
      }
      while (v16);
    }
    else
    {
      v19 = 0;
    }
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)((v18 - 1) & *(_QWORD *)&v17));
    v44.i16[0] = vaddlv_u8(v44);
    v45 = a2[5].i32[v19 + v44.i32[0] + 1];
    v46 = v45 & 3;
    switch(v46)
    {
      case 1:
        v50 = *(_QWORD *)(a1 + 2080);
        sub_20B86D7F0((uint64_t)v65, a8);
        v54 = sub_20B86BF00(a1, (v45 & 0xFFFFFFFC) + v50, a3, a4, a5 + 1, a6, a7, v65);
        v48 = v66;
        if (v66 == v65)
        {
          v49 = 4;
          v48 = v65;
          goto LABEL_54;
        }
        break;
      case 2:
        v51 = *(_QWORD *)(a1 + 2080);
        sub_20B86D7F0((uint64_t)v61, a8);
        v54 = sub_20B86D5F0((unsigned int *)((v45 & 0xFFFFFFFC) + v51), a3, a4, a5 + 1, a6, a7, (uint64_t)v61);
        v48 = v62;
        if (v62 == v61)
        {
          v49 = 4;
          v48 = v61;
          goto LABEL_54;
        }
        break;
      case 3:
        v47 = *(_QWORD *)(a1 + 2080);
        sub_20B86D7F0((uint64_t)v63, a8);
        v54 = sub_20B86D048(a1, (v45 & 0xFFFFFFFC) + v47, a3, a4, a5 + 1, a6, a7, v63);
        v48 = v64;
        if (v64 == v63)
        {
          v49 = 4;
          v48 = v63;
LABEL_54:
          (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
          return v54 != 0;
        }
        break;
      default:
        return v54 != 0;
    }
    if (v48)
    {
      v49 = 5;
      goto LABEL_54;
    }
  }
  return v54 != 0;
}

void sub_20B86D518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  char *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;

  v32 = *(char **)(v30 + 24);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = &a29;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86D5F0(unsigned int *a1, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  size_t v19;
  size_t v20;
  size_t v21;
  int v22;
  int v23;
  _DWORD *v24;
  int v25;
  char *__dst;
  size_t v28;
  char *v29;
  size_t __n;
  char v37;

  v37 = 0;
  v7 = *a1;
  if (!*a1)
    return 0;
  v8 = a4;
  v9 = a3;
  v11 = 0;
  v12 = &a2[a4];
  v13 = a3 - a4;
  __n = (int)(a3 - a4);
  v29 = v12;
  __dst = &a2[a3];
  v28 = a3;
  while (1)
  {
    v14 = (char *)a1 + v11;
    v15 = *((unsigned __int16 *)v14 + 8);
    if (v13 > (int)v15)
      goto LABEL_14;
    v16 = v14 + 8;
    v17 = v14 + 18;
    if (memcmp(v14 + 18, v12, __n))
      goto LABEL_14;
    v18 = a5;
    if (v13 == (_DWORD)v15)
      v18 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_14;
    v19 = (v15 + v8);
    v20 = (v19 - v9);
    v21 = v28;
    if ((int)v20 >= 1)
    {
      memcpy(__dst, &v17[v15 - (int)v20], v20);
      v21 = v19;
      v9 = v19;
    }
    a2[v21] = 0;
    v22 = *((_DWORD *)v16 + 1);
    v23 = *(_DWORD *)v16;
    v24 = malloc_type_malloc(v21 + 21, 0xF7573F27uLL);
    v24[4] = v9;
    *((_BYTE *)v24 + v21 + 20) = 0;
    memcpy(v24 + 5, a2, v21);
    *v24 = v23;
    v24[2] = v22;
    v24[3] = 1;
    sub_20B86D7A0(a7, a6, (uint64_t)v24, v13 == (_DWORD)v15, (uint64_t)&v37);
    v25 = v24[3] - 1;
    v24[3] = v25;
    if (!v25)
      free(v24);
    v9 = a3;
    v8 = a4;
    v12 = v29;
    if (v37)
      return 1;
    LODWORD(v15) = *((unsigned __int16 *)v16 + 4);
LABEL_14:
    v11 += v15 + 10;
    if (v11 >= v7)
      return 0;
  }
}

uint64_t sub_20B86D7A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t sub_20B86D7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_20B86D854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_20B86D89C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B86D8B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469638;
  result[1] = v3;
  return result;
}

uint64_t sub_20B86D8E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469638;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B86D900(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4, *a5);
}

uint64_t sub_20B86D918(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EBD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B86D954()
{
  return &unk_24C45EBD0;
}

uint64_t sub_20B86D960(uint64_t a1, int8x8_t *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int v19;
  __int32 v20;
  _DWORD *v21;
  unint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  __int32 v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t *v40;
  int8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  __int32 v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 v53;
  _BYTE v54[24];
  _BYTE *v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v53 = 0;
  if (a5 >= a4)
  {
    v20 = a2[4].i32[0];
    if (v20)
    {
      v21 = malloc_type_malloc(a4 + 21, 0xF7573F27uLL);
      v21[4] = a4;
      *((_BYTE *)v21 + a4 + 20) = 0;
      memcpy(v21 + 5, a3, a4);
      v21[2] = v20;
      *v21 = 0;
      v21[3] = 1;
      sub_20B86D7A0(a8, a7, (uint64_t)v21, 1, (uint64_t)&v53);
      if (v21[3]-- == 1)
        free(v21);
      if (v53)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v53 != 0;
    v24 = 0;
    v51 = a4 + 1;
    while (1)
    {
      if (v24 >> 6 <= 1)
        v25 = 1;
      else
        v25 = v24 >> 6;
      v26 = a2[v24 >> 6];
      if ((*(_QWORD *)&v26 & (1 << v24)) == 0)
        goto LABEL_34;
      if (v24 >= 0x40)
      {
        v27 = 0;
        v28 = a2;
        do
        {
          v29 = *v28++;
          v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          v27 += v30.i32[0];
          --v25;
        }
        while (v25);
      }
      else
      {
        v27 = 0;
      }
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v26 & ((1 << v24) - 1)));
      v31.i16[0] = vaddlv_u8(v31);
      v32 = a2[4].i32[v27 + v31.i32[0] + 1];
      a3[a5] = v24;
      v33 = v32 & 3;
      switch(v33)
      {
        case 1:
          v37 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v58, a8);
          v35 = sub_20B86C440(a1, v37 + (v32 & 0xFFFFFFFC), a3, v51, a5 + 1, 0, a7, v58);
          v53 = v35;
          v36 = v59;
          if (v59 == v58)
          {
            v36 = v58;
LABEL_32:
            v39 = 4;
            goto LABEL_33;
          }
          break;
        case 2:
          v38 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v54, a8);
          v35 = sub_20B86DF0C(a1, (unsigned int *)(v38 + (v32 & 0xFFFFFFFC)), (char *)a3, v51, a5 + 1, 0, a7, (uint64_t)v54);
          v53 = v35;
          v36 = v55;
          if (v55 == v54)
          {
            v36 = v54;
            goto LABEL_32;
          }
          break;
        case 3:
          v34 = *(_QWORD *)(a1 + 2080);
          sub_20B86D7F0((uint64_t)v56, a8);
          v35 = sub_20B86D960(a1, v34 + (v32 & 0xFFFFFFFC), a3, v51, a5 + 1, 0, a7, v56);
          v53 = v35;
          v36 = v57;
          if (v57 == v56)
          {
            v36 = v56;
            goto LABEL_32;
          }
          break;
        default:
          goto LABEL_34;
      }
      if (v36)
      {
        v39 = 5;
LABEL_33:
        (*(void (**)(void))(*(_QWORD *)v36 + 8 * v39))();
LABEL_34:
        v35 = v53;
      }
      if (v35)
        return 1;
      if ((_DWORD)++v24 == 256)
        return v53 != 0;
    }
  }
  v15 = a3[a5];
  v16 = v15 >> 6;
  v17 = a2[v15 >> 6];
  v18 = 1 << v15;
  if (((1 << v15) & *(_QWORD *)&v17) != 0)
  {
    if (v15 >= 0x40)
    {
      v19 = 0;
      if (v16 <= 1)
        v16 = 1;
      else
        v16 = v16;
      v40 = a2;
      do
      {
        v41 = *v40++;
        v42 = (uint8x8_t)vcnt_s8(v41);
        v42.i16[0] = vaddlv_u8(v42);
        v19 += v42.i32[0];
        --v16;
      }
      while (v16);
    }
    else
    {
      v19 = 0;
    }
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)((v18 - 1) & *(_QWORD *)&v17));
    v43.i16[0] = vaddlv_u8(v43);
    v44 = a2[4].i32[v19 + v43.i32[0] + 1];
    v45 = v44 & 3;
    switch(v45)
    {
      case 1:
        v49 = *(_QWORD *)(a1 + 2080);
        sub_20B86D7F0((uint64_t)v64, a8);
        v53 = sub_20B86C440(a1, (v44 & 0xFFFFFFFC) + v49, a3, a4, a5 + 1, a6, a7, v64);
        v47 = v65;
        if (v65 == v64)
        {
          v48 = 4;
          v47 = v64;
          goto LABEL_54;
        }
        break;
      case 2:
        v50 = *(_QWORD *)(a1 + 2080);
        sub_20B86D7F0((uint64_t)v60, a8);
        v53 = sub_20B86DF0C(a1, (unsigned int *)((v44 & 0xFFFFFFFC) + v50), (char *)a3, a4, a5 + 1, a6, a7, (uint64_t)v60);
        v47 = v61;
        if (v61 == v60)
        {
          v48 = 4;
          v47 = v60;
          goto LABEL_54;
        }
        break;
      case 3:
        v46 = *(_QWORD *)(a1 + 2080);
        sub_20B86D7F0((uint64_t)v62, a8);
        v53 = sub_20B86D960(a1, (v44 & 0xFFFFFFFC) + v46, a3, a4, a5 + 1, a6, a7, v62);
        v47 = v63;
        if (v63 == v62)
        {
          v48 = 4;
          v47 = v62;
LABEL_54:
          (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
          return v53 != 0;
        }
        break;
      default:
        return v53 != 0;
    }
    if (v47)
    {
      v48 = 5;
      goto LABEL_54;
    }
  }
  return v53 != 0;
}

void sub_20B86DE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  char *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;

  v32 = *(char **)(v30 + 24);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = &a29;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86DF0C(uint64_t a1, unsigned int *a2, char *a3, unsigned int a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  size_t v21;
  int v22;
  size_t v23;
  size_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  size_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  size_t v41;
  int v42;
  int v43;
  _BYTE *v44;
  int v45;
  _DWORD *v46;
  int v47;
  char *__dst;
  size_t v50;
  char *v51;
  int v52;
  char *v53;
  char v54;
  char *__s2a;
  char v64;
  _OWORD __s1[16];
  uint64_t v66;

  v8 = a5;
  v9 = a4;
  v66 = *MEMORY[0x24BDAC8D0];
  v64 = 0;
  v11 = a4 - a5;
  v12 = *a2;
  if ((*(_BYTE *)(a1 + 2064) & 4) != 0)
  {
    memset(__s1, 0, sizeof(__s1));
    if (v12)
    {
      v28 = 0;
      v29 = 0;
      v52 = a5 - a4;
      __s2a = &a3[a5];
      v51 = &a3[a4];
      do
      {
        v30 = (char *)a2 + v29;
        v31 = v30[10];
        if (v28)
        {
          v32 = v28[6];
          if (v31 > v32)
            memcpy((char *)__s1 + v32, v28 + 7, v31 - v32);
        }
        v28 = v30 + 4;
        v33 = *((unsigned __int16 *)v30 + 4);
        v34 = v33 + v31;
        if ((int)(v33 + v31) >= v11)
        {
          if (v9 == v8 || ((int)v31 >= v11 ? (v35 = v11) : (v35 = v31), !memcmp(__s1, __s2a, v35)))
          {
            v36 = v11 - v31;
            if (v11 - (int)v31 < 0
              || ((int)v33 >= (int)v36 ? (v37 = v36) : (v37 = v33), !memcmp(v28 + 7, &__s2a[v31], v37)))
            {
              v38 = a6;
              if (v11 == v34)
                v38 = 0;
              if ((v38 & 1) == 0)
              {
                v39 = v9;
                v40 = v31 + v8;
                v41 = (_DWORD)v31 + v8 - v39;
                if ((int)v41 < 1)
                {
                  v40 = v39;
                }
                else
                {
                  memcpy(v51, (char *)__s1 + v31 - (int)v41, v41);
                  v33 = *((unsigned __int16 *)v28 + 2);
                  LODWORD(v31) = v28[6];
                }
                v42 = v52 + v33 + v31;
                if (v42 < 1)
                {
                  v44 = a3;
                }
                else
                {
                  v43 = v42 - (v41 & ~((int)v41 >> 31));
                  v44 = a3;
                  memcpy(&a3[v40], &v28[v33 - v43 + 7], v43);
                  v40 += v43;
                }
                v54 = v11 == v34;
                v44[v40] = 0;
                v45 = *(_DWORD *)v28;
                v46 = malloc_type_malloc(v40 + 21, 0xF7573F27uLL);
                v46[4] = v40;
                *((_BYTE *)v46 + v40 + 20) = 0;
                memcpy(v46 + 5, v44, v40);
                *v46 = 0;
                v46[2] = v45;
                v46[3] = 1;
                sub_20B86D7A0(a8, a7, (uint64_t)v46, v54, (uint64_t)&v64);
                v47 = v46[3] - 1;
                v46[3] = v47;
                if (!v47)
                  free(v46);
                v9 = a4;
                if (v64)
                  return 1;
                v33 = *((unsigned __int16 *)v28 + 2);
                v8 = a5;
              }
            }
          }
        }
        v29 += v33 + 7;
      }
      while (v29 < v12);
    }
  }
  else if (v12)
  {
    v13 = 0;
    v14 = &a3[a5];
    v15 = v11;
    __dst = &a3[a4];
    v50 = a4;
    v53 = v14;
    do
    {
      v16 = (char *)a2 + v13;
      v17 = *((unsigned __int16 *)v16 + 4);
      if (v11 <= (int)v17)
      {
        v18 = v16 + 4;
        v19 = v16 + 10;
        if (!memcmp(v16 + 10, v14, v15))
        {
          v20 = a6;
          if (v11 == (_DWORD)v17)
            v20 = 0;
          if ((v20 & 1) == 0)
          {
            v21 = (v17 + v8);
            v22 = a4;
            v23 = v21 - a4;
            v24 = v50;
            if ((int)v23 >= 1)
            {
              memcpy(__dst, &v19[v17 - (int)v23], v23);
              v24 = v21;
              v22 = v21;
            }
            a3[v24] = 0;
            v25 = *(_DWORD *)v18;
            v26 = malloc_type_malloc(v24 + 21, 0xF7573F27uLL);
            v26[4] = v22;
            *((_BYTE *)v26 + v24 + 20) = 0;
            memcpy(v26 + 5, a3, v24);
            *v26 = 0;
            v26[2] = v25;
            v26[3] = 1;
            sub_20B86D7A0(a8, a7, (uint64_t)v26, v11 == (_DWORD)v17, (uint64_t)&v64);
            v27 = v26[3] - 1;
            v26[3] = v27;
            if (!v27)
              free(v26);
            v8 = a5;
            v15 = v11;
            v14 = v53;
            if (v64)
              return 1;
            LODWORD(v17) = *((unsigned __int16 *)v18 + 2);
          }
        }
      }
      v13 += v17 + 6;
    }
    while (v13 < v12);
  }
  return 0;
}

uint64_t sub_20B86E304(uint64_t result, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v10;
  char *v11;
  size_t v12;
  char v13;
  uint64_t v14;
  char v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  int v21;
  _DWORD *v22;
  int v23;
  char *__dst;
  size_t v26;
  char v30;

  v30 = 0;
  if (result)
  {
    v7 = a4;
    v10 = result;
    v11 = &a2[a4];
    v12 = (int)(a3 - a4);
    v26 = a3;
    v13 = a5;
    __dst = &a2[a3];
    while (1)
    {
      v14 = *(unsigned __int16 *)(v10 + 20);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 22), v11, v12))
      {
        v15 = (_DWORD)v12 == (_DWORD)v14 ? 0 : v13;
        if ((v15 & 1) == 0)
        {
          v16 = (v14 + v7);
          v17 = v16 - a3;
          v18 = v26;
          v19 = a3;
          if ((int)v17 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 22 + v14 - (int)v17), v17);
            v18 = v16;
            v19 = v16;
          }
          a2[v18] = 0;
          v20 = *(_DWORD *)(v10 + 16);
          v21 = *(_DWORD *)(v10 + 12);
          v22 = malloc_type_malloc(v18 + 21, 0xF7573F27uLL);
          v22[4] = v19;
          *((_BYTE *)v22 + v18 + 20) = 0;
          memcpy(v22 + 5, a2, v18);
          *v22 = v21;
          v22[2] = v20;
          v22[3] = 1;
          sub_20B86D7A0(a7, a6, (uint64_t)v22, (_DWORD)v12 == (_DWORD)v14, (uint64_t)&v30);
          v23 = v22[3] - 1;
          v22[3] = v23;
          if (!v23)
            free(v22);
          v7 = a4;
          v13 = a5;
          if (v30)
            break;
        }
      }
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_20B86E490(uint64_t result, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v10;
  char *v11;
  size_t v12;
  char v13;
  uint64_t v14;
  char v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  char *__dst;
  size_t v25;
  char v29;

  v29 = 0;
  if (result)
  {
    v7 = a4;
    v10 = result;
    v11 = &a2[a4];
    v12 = (int)(a3 - a4);
    v25 = a3;
    v13 = a5;
    __dst = &a2[a3];
    while (1)
    {
      v14 = *(unsigned __int16 *)(v10 + 12);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 14), v11, v12))
      {
        v15 = (_DWORD)v12 == (_DWORD)v14 ? 0 : v13;
        if ((v15 & 1) == 0)
        {
          v16 = (v14 + v7);
          v17 = v16 - a3;
          v18 = v25;
          v19 = a3;
          if ((int)v17 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 14 + v14 - (int)v17), v17);
            v18 = v16;
            v19 = v16;
          }
          a2[v18] = 0;
          v20 = *(_DWORD *)(v10 + 8);
          v21 = malloc_type_malloc(v18 + 21, 0xF7573F27uLL);
          v21[4] = v19;
          *((_BYTE *)v21 + v18 + 20) = 0;
          memcpy(v21 + 5, a2, v18);
          *v21 = 0;
          v21[2] = v20;
          v21[3] = 1;
          sub_20B86D7A0(a7, a6, (uint64_t)v21, (_DWORD)v12 == (_DWORD)v14, (uint64_t)&v29);
          v22 = v21[3] - 1;
          v21[3] = v22;
          if (!v22)
            free(v21);
          v7 = a4;
          v13 = a5;
          if (v29)
            break;
        }
      }
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_20B86E610(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v8;

  v8 = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a1 + 2080);
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    if (!a4)
    {
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(v8 + 1032);
      return 1;
    }
LABEL_5:
    sub_20B86E6B4(a1, (_QWORD *)a2, *(unsigned int *)(v8 + 4 * *a3));
    return sub_20B86A67C(a1, a2, a3 + 1, (a4 - 1));
  }
  if (a4)
    goto LABEL_5;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
  return 1;
}

uint64_t sub_20B86E6B4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (*a2 != a3)
    return ((uint64_t (*)(void))((char *)&loc_20B86E6DC + 4 * byte_20BA37120[a3 & 3]))();
  return result;
}

uint64_t sub_20B86E788(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  float v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  __n128 v30;
  double v31;
  int v32;
  int v34;
  _QWORD v35[2];
  size_t v36;
  int v37;
  __n128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 2064) & 1) == 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = *(unsigned int *)(a2 + 16);
    if (v10 > *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12))
      sub_20BA32178();
    if (!v9)
      return 0;
    v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      v12 = *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v11 != v9)
      {
        v12 = *(unsigned __int16 *)(v11 + 12);
        if (v10 >= v12)
          goto LABEL_19;
        if ((_DWORD)v10)
        {
          v13 = (unsigned __int8 *)(v11 + 14);
          v14 = *(unsigned int *)(a2 + 16);
          v15 = (unsigned __int8 *)(v9 + 14);
          do
          {
            v17 = *v13++;
            v16 = v17;
            v18 = *v15++;
            if (v16 != v18)
              goto LABEL_19;
          }
          while (--v14);
        }
      }
      LODWORD(v19) = 0;
      v20 = *(_DWORD *)(a2 + 16);
      if (v10 < v12 && a4)
      {
        v19 = 0;
        do
        {
          if (*(unsigned __int8 *)(v11 + v10 + 14 + v19) != a3[v19])
            break;
          if (++v19 + v10 >= v12)
            break;
        }
        while (v19 < a4);
        v20 = v10 + v19;
      }
      if ((_DWORD)v19 == a4)
      {
        *(_QWORD *)(a2 + 8) = v11 | 2;
        if (v20 == v12)
        {
          *(_DWORD *)(a2 + 16) = v12;
          *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
        }
        else
        {
          *(_QWORD *)(a2 + 16) = v10 + a4;
        }
        return 1;
      }
LABEL_19:
      v11 = *(_QWORD *)v11;
      if (!v11)
        return 0;
    }
  }
  v35[1] = v35;
  v35[0] = *(_QWORD *)a2;
  a5.n128_u64[0] = *(_QWORD *)(a2 + 16);
  v22 = *(float *)(a2 + 24);
  v38 = a5;
  MEMORY[0x24BDAC7A8]();
  v24 = (char *)v35 - v23;
  v26 = *(unsigned int *)(a2 + 16);
  memcpy((char *)v35 - v23, (const void *)(v25 + 22), v26);
  v27 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (v27)
  {
    v37 = 0;
    v28 = v26 + a4;
    v36 = a4;
    do
    {
      v29 = *(unsigned __int16 *)(v27 + 20);
      if (v28 <= v29 && !memcmp((const void *)(v27 + 22), v24, v26) && !memcmp((const void *)(v27 + 22 + v26), a3, v36))
      {
        if (v28 == v29)
        {
          *(_QWORD *)(a2 + 8) = v27 | 2;
          v34 = *(_DWORD *)(v27 + 16);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(a2 + 16) = v28;
          *(_DWORD *)(a2 + 20) = v34;
          return 1;
        }
        v30 = v38;
        HIDWORD(v31) = 0;
        v32 = v37;
        if (!v37)
        {
          v8 = v27 | 2;
          v22 = 0.0;
        }
        v37 = 1;
        if (!v32)
        {
          LODWORD(v31) = v38.n128_u32[0] + a4;
          v30.n128_f64[0] = v31;
        }
        v38 = v30;
      }
      v27 = *(_QWORD *)v27;
    }
    while (v27);
  }
  else
  {
    v37 = 0;
  }
  *(_QWORD *)a2 = v35[0];
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v38.n128_u64[0];
  *(float *)(a2 + 24) = v22;
  return v37;
}

uint64_t sub_20B86EA5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  unint64_t v6;

  if (*(_QWORD *)(a2 + 8) != a3)
  {
    v3 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      if (v3 == 2)
      {
        v6 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_BYTE *)(result + 2064) & 1) == 0)
        {
          if (*(_WORD *)(v6 + 12))
            v5 = 0;
          else
            v5 = *(_DWORD *)(v6 + 8);
          goto LABEL_14;
        }
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 16);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(v6 + 12);
        *(_QWORD *)a2 = a3;
      }
      else if (v3 == 1)
      {
        v4 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(result + 2064) & 1) == 0)
        {
          v5 = *v4;
LABEL_14:
          *(_DWORD *)(a2 + 20) = v5;
          goto LABEL_15;
        }
        *(_DWORD *)(a2 + 20) = v4[2];
        *(_DWORD *)(a2 + 24) = v4[1];
      }
    }
    else
    {
      *(_QWORD *)(a2 + 20) = 0;
    }
LABEL_15:
    *(_QWORD *)(a2 + 8) = a3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

_QWORD *sub_20B86EAF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 2080))
      sub_20BA321A0();
    v2 = malloc_type_calloc(0x28uLL, 1uLL, 0xB23B27DBuLL);
    if (sub_20B86A554(a1, (uint64_t)v2))
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v2 + 6) = *(_DWORD *)(a2 + 4);
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_20B86EB90(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20B80CDD8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B8156D4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_20B86ECE4(a1, v7);
    return sub_20B86EE7C((uint64_t)v7);
  }
  return result;
}

void sub_20B86EC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B86EE7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B86EC24()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B86EC38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A1E8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B86EC6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A1E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B86EC88(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t sub_20B86EC9C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B86ECD8()
{
  return &unk_24C45EE10;
}

uint64_t sub_20B86ECE4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B86ED58((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B86ED58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  sub_20B86EE04((uint64_t)v12);
  return v10;
}

uint64_t sub_20B86EE04(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B86EE38(a1);
  return a1;
}

void sub_20B86EE38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t sub_20B86EE7C(uint64_t a1)
{
  sub_20B86EEB0(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B86EEB0(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_20B86EF08()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B86EF1C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A190;
  result[1] = v3;
  return result;
}

uint64_t sub_20B86EF50(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A190;
  a2[1] = v2;
  return result;
}

void sub_20B86EF6C(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[5];

  v6 = *a5;
  v7 = *a6;
  v8 = *(uint64_t **)(a1 + 8);
  sub_20B82E068(__p, *a3, *a4);
  v9 = v8[1];
  v10 = v8[2];
  if (v9 >= v10)
  {
    v12 = (uint64_t)(v9 - *v8) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_20B80CDD8();
    v14 = v10 - *v8;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v8 + 2;
    if (v15)
      v16 = (char *)sub_20B8156D4((uint64_t)(v8 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v22;
    *(_OWORD *)v17 = v18;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    sub_20B86ECE4(v8, v23);
    v19 = v8[1];
    sub_20B86EE7C((uint64_t)v23);
    v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v22;
    *(_OWORD *)v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 28) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_20B86F0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20B86EE7C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B86F0D8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE00))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B86F114()
{
  return &unk_24C45EE00;
}

void sub_20B86F120(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B86F160((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B86F160(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

_QWORD *sub_20B86F1AC(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 2080))
      sub_20BA321A0();
    v2 = malloc_type_calloc(0x28uLL, 1uLL, 0xB23B27DBuLL);
    if (sub_20B86A554(a1, (uint64_t)v2))
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)a2;
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void sub_20B86F240()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B86F254(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A138;
  result[1] = v3;
  return result;
}

uint64_t sub_20B86F288(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A138;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B86F2A4(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t sub_20B86F2B8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EDF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B86F2F4()
{
  return &unk_24C45EDF0;
}

void sub_20B86F304()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B86F318(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A0E0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B86F34C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A0E0;
  a2[1] = v2;
  return result;
}

void sub_20B86F368(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[5];

  v6 = *a5;
  v7 = *a6;
  v8 = *(uint64_t **)(a1 + 8);
  sub_20B82E068(__p, *a3, *a4);
  v9 = v8[1];
  v10 = v8[2];
  if (v9 >= v10)
  {
    v12 = (uint64_t)(v9 - *v8) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_20B80CDD8();
    v14 = v10 - *v8;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v8 + 2;
    if (v15)
      v16 = (char *)sub_20B8156D4((uint64_t)(v8 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v22;
    *(_OWORD *)v17 = v18;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    sub_20B86ECE4(v8, v23);
    v19 = v8[1];
    sub_20B86EE7C((uint64_t)v23);
    v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v22;
    *(_OWORD *)v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 28) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_20B86F4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20B86EE7C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B86F4D4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EDE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B86F510()
{
  return &unk_24C45EDE0;
}

void sub_20B86F520()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B86F534(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46A088;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B86F574(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A088;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B86F59C(uint64_t a1, uint64_t a2, const void **a3, unsigned int *a4, int *a5, int *a6, uint64_t *a7)
{
  const void *v8;
  size_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  size_t v15;
  size_t v16;
  _DWORD *v17;
  int v18;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *(_DWORD *)(a1 + 16) + v9;
  v14 = (char *)operator new[]();
  v15 = *(unsigned int *)(a1 + 16);
  memcpy(v14, *(const void **)(a1 + 8), v15);
  memcpy(&v14[v15], v8, v9);
  v14[v13] = 0;
  v16 = (v15 + v9);
  v17 = malloc_type_malloc(v16 + 21, 0xF7573F27uLL);
  v17[4] = v16;
  *((_BYTE *)v17 + v16 + 20) = 0;
  memcpy(v17 + 5, v14, v16);
  *v17 = v11;
  v17[2] = v10;
  v17[3] = 1;
  sub_20B86D854(*(_QWORD *)(a1 + 24), 0, (uint64_t)v17, v12);
  v18 = v17[3] - 1;
  v17[3] = v18;
  if (!v18)
    free(v17);
  JUMPOUT(0x20BD39C80);
}

uint64_t sub_20B86F6B0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EDD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B86F6EC()
{
  return &unk_24C45EDD0;
}

uint64_t sub_20B86F6F8()
{
  return AnalyticsSendEventLazy();
}

uint64_t sub_20B86F74C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_20B86F754()
{
  return AnalyticsIsEventUsed();
}

void sub_20B86F760()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B86F774(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C467500;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_QWORD *)(a1 + 120) = sub_20B86F828;
  *(_QWORD *)(a1 + 128) = 0;
  sub_20B827F10(a1 + 136);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  return a1;
}

void sub_20B86F7F0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v4;

  sub_20B871974((uint64_t *)(v2 + 88), 0);
  v4 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B86F828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (!a3)
    return 1;
  v5 = a3;
  while (1)
  {
    v8 = *(_QWORD *)(a4 + 8 * a2);
    if (!v8)
      break;
    v9 = 0;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v11 = *(_QWORD *)(v8 + 96);
      v12 = sub_20B871774(*(_QWORD *)(a1 + 88), *(unsigned __int16 *)(v8 + 92), *(unsigned __int16 *)(v5 + 94));
      if (v11 + *(__int16 *)(v5 + 84) + (uint64_t)v12 < v10)
      {
        v10 = v11 + *(__int16 *)(v5 + 84) + (uint64_t)v12;
        v9 = v8;
      }
      v8 = *(_QWORD *)(v8 + 16);
    }
    while (v8);
    if (!v9)
      break;
    *(_QWORD *)v5 = v9;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 96) = v10;
    v13 = *(unsigned __int16 *)(v5 + 90) + a2;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a4 + 8 * v13);
    *(_QWORD *)(a4 + 8 * v13) = v5;
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t sub_20B86F8EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C467500;
  v2 = a1 + 136;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 136) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 144) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 248);
  sub_20B871974((uint64_t *)(a1 + 88), 0);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_20B86F9C0(uint64_t a1)
{
  sub_20B86F8EC(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B86F9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void **v26;
  size_t v27;
  _QWORD *v28;
  const char *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *__p[2];
  unsigned __int8 v37;

  v4 = operator new();
  sub_20BA0830C(v4);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (sub_20BA0BDB4())
  {
    v6 = operator new();
    sub_20B893608(v6);
    sub_20B871974((uint64_t *)(a1 + 88), v6);
    if ((sub_20B8937D8(*(_QWORD **)(a1 + 88), a2) & 1) != 0)
    {
      v7 = sub_20B86FCF4(a2, "cost-factor");
      *(_DWORD *)(a1 + 96) = v7;
      if (v7 > 0)
        return 1;
      v31 = *(_QWORD *)(a1 + 136);
      v30 = (_QWORD *)(a1 + 136);
      std::ios_base::clear((std::ios_base *)((char *)v30 + *(_QWORD *)(v31 - 24)), 0);
      v32 = sub_20B828F84(v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/viterbi.cpp", 64);
      sub_20B828F84(v32, (uint64_t)"(", 1);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = sub_20B828F84(v33, (uint64_t)") [", 3);
      v35 = sub_20B828F84(v34, (uint64_t)"cost_factor_ > 0", 16);
      v28 = sub_20B828F84(v35, (uint64_t)"] ", 2);
      v29 = "cost-factor is empty";
      v27 = 20;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 136);
      v19 = (_QWORD *)(a1 + 136);
      std::ios_base::clear((std::ios_base *)((char *)v19 + *(_QWORD *)(v20 - 24)), 0);
      v21 = sub_20B828F84(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/viterbi.cpp", 64);
      sub_20B828F84(v21, (uint64_t)"(", 1);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = sub_20B828F84(v22, (uint64_t)") [", 3);
      v24 = sub_20B828F84(v23, (uint64_t)"connector_->open(param)", 23);
      v25 = sub_20B828F84(v24, (uint64_t)"] ", 2);
      v26 = sub_20B8715E0(*(v19 - 6) + 392);
      v27 = strlen((const char *)v26);
      v28 = v25;
      v29 = (const char *)v26;
    }
    sub_20B828F84(v28, (uint64_t)v29, v27);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 136);
    v9 = (_QWORD *)(a1 + 136);
    std::ios_base::clear((std::ios_base *)((char *)v9 + *(_QWORD *)(v10 - 24)), 0);
    v11 = sub_20B828F84(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/viterbi.cpp", 64);
    sub_20B828F84(v11, (uint64_t)"(", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = sub_20B828F84(v12, (uint64_t)") [", 3);
    v14 = sub_20B828F84(v13, (uint64_t)"tokenizer_->open(param)", 23);
    v15 = sub_20B828F84(v14, (uint64_t)"] ", 2);
    v16 = (char *)sub_20B8715E0(*(v9 - 7) + 1000);
    sub_20B80BBD0(__p, v16);
    if ((v37 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v37 & 0x80u) == 0)
      v18 = v37;
    else
      v18 = (uint64_t)__p[1];
    sub_20B828F84(v15, (uint64_t)v17, v18);
    if ((char)v37 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_20B86FCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86FCF4(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7[2];
  void *v8;
  void *__p[2];
  char v10;

  v3 = a1 + 8;
  sub_20B80BBD0(__p, a2);
  v4 = sub_20B871B2C(v3, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_DWORD *)operator new() = 0;
    MEMORY[0x20BD39CB0]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
    {
      sub_20B80ACE0(v7, v4[7], (unint64_t)v4[8]);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)(v4 + 7);
      v8 = v4[9];
    }
    v5 = sub_20B8719B0((uint64_t)v7);
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
  }
  return v5;
}

void sub_20B86FDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B86FE04(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 128)
    || (result = sub_20B86FE78(a1, a2), (_DWORD)result))
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v6 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        v6[1] = v5;
        v5 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    return 1;
  }
  return result;
}

uint64_t sub_20B86FE78(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, unint64_t, uint64_t, _QWORD *, uint64_t, int *, _QWORD);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t (*v26)(_QWORD *);
  uint64_t v27;
  _QWORD *v28;
  int v29;

  if (!a2)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (result)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    v10 = (unsigned __int8 *)(v9 + v8);
    v11 = a1[10];
    sub_20B871810(*(_QWORD **)(v7 + 16));
    v13 = v12;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_BYTE *)(v12 + 109) = 2;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    v14 = *(_QWORD *)(v11 + 192);
    *(_QWORD *)(v12 + 48) = v9;
    *(_QWORD *)(v12 + 56) = v14;
    *v5 = v12;
    v29 = 0;
    if (v8)
    {
      v15 = 0;
      while (1)
      {
        if (v5[v15])
        {
          v16 = sub_20BA0A708(a1[10], (unsigned __int8 *)(v9 + v15), v10, v7);
          *(_QWORD *)(v6 + 8 * v15) = v16;
          v17 = (uint64_t (*)(_QWORD *, unint64_t, uint64_t, _QWORD *, uint64_t, int *, _QWORD))a1[15];
          v18 = a1[16];
          v19 = (uint64_t *)((char *)a1 + (v18 >> 1));
          if ((v18 & 1) != 0)
            v17 = *(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD *, uint64_t, int *, _QWORD))(*v19 + v17);
          result = v17(v19, v15, v16, v5, v7, &v29, 0);
          if (!(_DWORD)result)
            break;
        }
        v15 += 2;
        if (v15 >= v8)
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      v20 = a1[10];
      sub_20B871810(*(_QWORD **)(v7 + 16));
      v22 = v21;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_BYTE *)(v21 + 109) = 3;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      v23 = *(_QWORD *)(v20 + 192);
      *(_QWORD *)(v21 + 48) = v10;
      *(_QWORD *)(v21 + 56) = v23;
      *(_QWORD *)(v6 + 8 * v8) = v21;
      v29 = 0;
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_20;
      v24 = v8;
      while (!v5[v24])
      {
        if (v24-- <= 0)
          goto LABEL_20;
      }
      v26 = (uint64_t (*)(_QWORD *))a1[15];
      v27 = a1[16];
      v28 = (uint64_t *)((char *)a1 + (v27 >> 1));
      if ((v27 & 1) != 0)
        v26 = *(uint64_t (**)(_QWORD *))(*v28 + v26);
      result = v26(v28);
      if ((_DWORD)result)
      {
LABEL_20:
        *v5 = v13;
        *(_QWORD *)(v6 + 8 * v8) = v22;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20B870088(uint64_t a1, _QWORD *a2, unsigned int a3, __int16 a4, __int16 a5)
{
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[2];
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v20;

  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 0x40000000;
  v18 = sub_20B87025C;
  v19 = &unk_24C46BF78;
  v20 = a1;
  v10 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  *(_DWORD *)(a1 + 8) = 1;
  std::mutex::unlock(v10);
  if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 168))(a2, 2) & 1) != 0
    || (*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 168))(a2, 8))
  {
    *(_QWORD *)(a1 + 120) = sub_20B87028C;
    *(_QWORD *)(a1 + 128) = 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 1520);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v11 + 8));
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v11 + 16);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 168))(a2, 4)
    && !sub_20B870548((uint64_t)a2, a4, a5))
  {
    goto LABEL_8;
  }
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 168))(a2, 128))
  {
    if ((sub_20B86FE78((uint64_t *)a1, (uint64_t)a2) & 1) == 0)
    {
LABEL_8:
      v12 = 0;
      goto LABEL_15;
    }
  }
  else if (!sub_20B870D30(a1, a2, a3))
  {
    goto LABEL_8;
  }
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 168))(a2, 32);
  if ((_DWORD)v13)
  {
    sub_20B8711A8(v13, (uint64_t)a2);
  }
  else
  {
    v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
    v15 = (_QWORD *)*v14;
    if (*v14)
    {
      do
      {
        v15[1] = v14;
        v14 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
  v12 = 1;
LABEL_15:
  v18((uint64_t)v17);
  return v12;
}

void sub_20B870240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
  a12(&a10);
  _Unwind_Resume(a1);
}

void sub_20B87025C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 16));
  *(_DWORD *)(v1 + 8) = 0;
  std::mutex::unlock((std::mutex *)(v1 + 16));
}

uint64_t sub_20B87028C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 *v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  if (!a3)
    return 1;
  v9 = a3;
  while (1)
  {
    v11 = *(_QWORD *)(a4 + 8 * a2);
    if (v11)
    {
      v12 = 0;
      v13 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        if ((!*(_BYTE *)(v11 + 106) || *(__int16 *)(v11 + 84) <= 20000)
          && (!*(_BYTE *)(v9 + 106) || *(__int16 *)(v9 + 84) <= 20000))
        {
          v14 = *(_QWORD *)(v11 + 64);
          v15 = *(_QWORD *)(v9 + 64);
          v16 = !v14 || v15 == 0;
          if (v16
            || ((v17 = *(unsigned __int16 *)(v14 + 14),
                 v18 = *(_WORD *)(v14 + 14),
                 v19 = *(unsigned __int16 *)(v15 + 12),
                 v20 = *(_WORD *)(v15 + 12),
                 v18)
              ? (v21 = v20 == 0)
              : (v21 = 1),
                v21 || ((v19 ^ v17) <= 0xFF ? (v22 = v18 == v20) : (v22 = 1), v22)))
          {
            v23 = *(_QWORD *)(a1 + 88);
            v24 = *(unsigned __int16 *)(v11 + 92);
            v25 = *(unsigned __int16 *)(v9 + 94);
            v26 = *(_DWORD *)(*(_QWORD *)(v23 + 344) + 4 * *(unsigned __int16 *)(v11 + 92));
            if (*(_DWORD *)(*(_QWORD *)(v23 + 344) + 4 * *(unsigned __int16 *)(v11 + 92) + 4) - v26 == *(unsigned __int16 *)(v23 + 370))
            {
              v27 = *(__int16 *)(*(_QWORD *)(v23 + 360) + 2 * (v26 + v25));
              if (v27 != 0x7FFF)
              {
                v28 = *(__int16 *)(v9 + 84) + v27;
LABEL_29:
                if (*(_QWORD *)(v11 + 96) + v28 < v13)
                {
                  v12 = v11;
                  v13 = *(_QWORD *)(v11 + 96) + v28;
                }
                v33 = sub_20B871418(a5);
                *((_DWORD *)v33 + 4) = v28;
                v34 = *a6;
                if (*a6 != -1 && v34 < *(_DWORD *)(a1 + 112))
                  *a6 = v34 + 1;
                v35 = *(_QWORD *)(v9 + 40);
                *v33 = v11;
                v33[1] = v35;
                *(_QWORD *)(v9 + 40) = v33;
                *(_QWORD *)(v11 + 32) = v33;
              }
            }
            else
            {
              v29 = v25 | (v24 << 16);
              v30 = *(_DWORD *)(v23 + 372) & (3 * v24 + v25);
              v31 = *(_QWORD *)(v23 + 376);
              if (*(_DWORD *)(v31 + 4 * v30) == v29)
              {
                v28 = *(_DWORD *)(*(_QWORD *)(v23 + 384) + 4 * v30) + *(__int16 *)(v9 + 84);
                goto LABEL_29;
              }
              *(_DWORD *)(v31 + 4 * v30) = v29;
              v32 = sub_20B8717A8((_QWORD *)v23, v24, v25);
              *(_DWORD *)(*(_QWORD *)(v23 + 384) + 4 * v30) = v32;
              if (v32 <= 32766)
              {
                v28 = v32 + *(__int16 *)(v9 + 84);
                goto LABEL_29;
              }
            }
          }
        }
        v11 = *(_QWORD *)(v11 + 16);
        if (!v11)
          goto LABEL_38;
      }
    }
    v12 = 0;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_38:
    if (*(_QWORD *)(v9 + 40))
      goto LABEL_53;
    v37 = *(_QWORD *)(a4 + 8 * a2);
    if (!v37)
      goto LABEL_53;
    v42 = *(__int16 *)(v9 + 84)
        + (uint64_t)(int)sub_20B871774(*(_QWORD *)(a1 + 88), *(unsigned __int16 *)(v37 + 92), *(unsigned __int16 *)(v9 + 94));
    v36 = *(_QWORD *)(v37 + 96) + v42;
    v43 = sub_20B871418(a5);
    *((_DWORD *)v43 + 4) = v42;
    v44 = *(_QWORD *)(v9 + 40);
    *v43 = v37;
    v43[1] = v44;
    *(_QWORD *)(v9 + 40) = v43;
    *(_QWORD *)(v37 + 32) = v43;
    if (v36 >= v13)
    {
LABEL_53:
      v36 = v13;
      v37 = v12;
      if (!v12)
        return 0;
    }
    *(_QWORD *)v9 = v37;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 96) = v36;
    v38 = *(unsigned __int16 *)(v9 + 90) + a2;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a4 + 8 * v38);
    *(_QWORD *)(a4 + 8 * v38) = v9;
    if (a7)
    {
      v39 = *(_QWORD *)(v9 + 64);
      if (v39)
      {
        v41 = *(unsigned __int16 *)(v39 + 14);
        v40 = (unsigned __int16 *)(v39 + 14);
        if (v41)
          sub_20B871FAC((uint64_t **)(*a7 + 24 * v38), v40, v40);
      }
    }
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9)
      return 1;
  }
}

uint64_t sub_20B870548(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int64_t *v36;
  int64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _WORD *v50;
  _WORD *v51;
  size_t *v52;
  _QWORD *v53;
  uint64_t v54;
  _WORD *v55;
  size_t v56;
  const void *v57;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v81;
  uint64_t v82;
  uint64_t (**v83)();
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  void *__p;
  char *v89;
  char *v90;
  void *v91;
  char *v92;
  char *v93;
  size_t v94;
  _WORD *v95;
  _WORD *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6 = *(char **)(v4 + 104);
  v81 = v4;
  v7 = *(_QWORD *)(v4 + 112) - (_QWORD)v6;
  if (v5 + 1 <= v7)
  {
    if (v5 + 1 < v7)
      *(_QWORD *)(v4 + 112) = &v6[v5 + 1];
  }
  else
  {
    sub_20B871DC8((unint64_t *)(v4 + 104), v5 + 1 - v7);
    v6 = *(char **)(v4 + 104);
  }
  v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  memcpy(v6, v8, v9);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  __p = 0;
  v89 = 0;
  v90 = 0;
  v77 = a1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v11 = 0;
  v12 = &v6[v10 & 0xFFFFFFFFFFFFFFFELL];
  v13 = 1;
  do
  {
    if (v11 == 0xFFFF)
      goto LABEL_45;
    v14 = v11;
    v15 = v13;
    v16 = v6;
    if (v6 < v12)
    {
      v16 = v6;
      do
      {
        if (*(_WORD *)v16 == 10)
          break;
        v16 += 2;
      }
      while (v16 < v12);
    }
    v17 = v92;
    if (v92 >= v93)
    {
      v19 = (v92 - (_BYTE *)v91) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        sub_20B80CDD8();
      v20 = (v93 - (_BYTE *)v91) >> 2;
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      if ((unint64_t)(v93 - (_BYTE *)v91) >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)sub_20B800BE8((uint64_t)&v93, v21);
      else
        v22 = 0;
      v23 = &v22[8 * v19];
      *(_QWORD *)v23 = v6;
      v18 = v23 + 8;
      v25 = (char *)v91;
      v24 = v92;
      if (v92 != v91)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v23 - 1) = v26;
          v23 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)v91;
      }
      v91 = v23;
      v92 = v18;
      v93 = &v22[8 * v21];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v92 = v6;
      v18 = v17 + 8;
    }
    v92 = v18;
    v27 = v16 - v6;
    v28 = v89;
    if (v89 >= v90)
    {
      v30 = (char *)__p;
      v31 = (v89 - (_BYTE *)__p) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        sub_20B80CDD8();
      v33 = v90 - (_BYTE *)__p;
      if ((v90 - (_BYTE *)__p) >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)sub_20B800BE8((uint64_t)&v90, v34);
        v30 = (char *)__p;
        v28 = v89;
      }
      else
      {
        v35 = 0;
      }
      v36 = (int64_t *)&v35[8 * v31];
      *v36 = v27;
      v29 = (char *)(v36 + 1);
      while (v28 != v30)
      {
        v37 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v36 = v37;
      }
      __p = v36;
      v89 = v29;
      v90 = &v35[8 * v34];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_QWORD *)v89 = v27;
      v29 = v28 + 8;
    }
    v89 = v29;
    v11 = v14 + 1;
    v6 = v16 + 2;
    v13 = v15 + 1;
  }
  while (v16 != v12);
  if (v14 > 0xFFFD)
  {
LABEL_45:
    v38 = 0;
    goto LABEL_46;
  }
  v40 = (char *)sub_20B871730(v11);
  v42 = v41;
  v95 = 0;
  v96 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 88))(v77);
  v82 = operator new[]();
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 88))(v77);
  v83 = &off_24C467230;
  v84 = 0;
  v85 = v43 + 2;
  v86 = v82;
  v87 = 0;
  v44 = &v40[24 * v42];
  if (sub_20B8BAEA8((uint64_t)&v83, 2))
  {
    v45 = v84;
    *(_WORD *)(v86 + v84) = 32;
    v84 = v45 + 2;
  }
  v46 = 0;
  v47 = 2;
  v48 = v40;
  while (2)
  {
    v49 = 0;
    v50 = (_WORD *)*((_QWORD *)v91 + v46);
    v51 = (_WORD *)((char *)v50 + (*((_QWORD *)__p + v46) & 0xFFFFFFFFFFFFFFFELL));
    v52 = &v94;
    v53 = &v95;
    do
    {
      if (v49 == 2)
      {
        v56 = v94;
        v57 = v95;
        goto LABEL_69;
      }
      v54 = v49;
      v55 = v50;
      if (v50 < v51)
      {
        v55 = v50;
        do
        {
          if (*v55 == 9)
            break;
          ++v55;
        }
        while (v55 < v51);
      }
      *v53++ = v50;
      *v52++ = (char *)v55 - (char *)v50;
      ++v49;
      v50 = v55 + 1;
    }
    while (v55 != v51);
    v56 = v94;
    v57 = v95;
    if (!v54 && v94 == 6)
    {
      if (*(_DWORD *)v95 == 5177413 && v95[2] == 83)
      {
        v62 = v40;
        break;
      }
      v56 = 6;
      v49 = 1;
    }
LABEL_69:
    if (sub_20B8BAEA8((uint64_t)&v83, v56))
    {
      v59 = v84;
      memcpy((void *)(v86 + v84), v57, v56);
      v84 = v59 + v56;
    }
    if (sub_20B8BAEA8((uint64_t)&v83, 2))
    {
      v60 = v84;
      *(_WORD *)(v86 + v84) = 32;
      v84 = v60 + 2;
    }
    if (v49 == 2)
    {
      v61 = v96;
      if (!*v96)
      {
        v38 = 0;
        goto LABEL_106;
      }
      if (v40 >= v44)
      {
        v63 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v48) >> 3) + 1;
        if (v63 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * ((v44 - v48) >> 3) > v63)
          v63 = 0x5555555555555556 * ((v44 - v48) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v44 - v48) >> 3) >= 0x555555555555555)
          v64 = 0xAAAAAAAAAAAAAAALL;
        else
          v64 = v63;
        if (v64)
          v64 = (unint64_t)sub_20B871730(v64);
        else
          v65 = 0;
        v66 = (_QWORD *)(v64 + 8 * ((v40 - v48) >> 3));
        *v66 = v57;
        v66[1] = v56;
        v66[2] = v61;
        if (v40 == v48)
        {
          v48 = (char *)(v64 + 8 * ((v40 - v48) >> 3));
        }
        else
        {
          v67 = (char *)(v64 + 8 * ((v40 - v48) >> 3));
          do
          {
            v68 = *(_OWORD *)(v40 - 24);
            *((_QWORD *)v67 - 1) = *((_QWORD *)v40 - 1);
            *(_OWORD *)(v67 - 24) = v68;
            v67 -= 24;
            v40 -= 24;
          }
          while (v40 != v48);
          v40 = v48;
          v48 = v67;
        }
        v44 = (char *)(v64 + 24 * v65);
        v62 = (char *)(v66 + 3);
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v40 = v57;
        *((_QWORD *)v40 + 1) = v56;
        v62 = v40 + 24;
        *((_QWORD *)v40 + 2) = v61;
      }
    }
    else
    {
      v62 = v40;
    }
    v47 += v56 + 2;
    ++v46;
    v40 = v62;
    if (v46 != v15)
      continue;
    break;
  }
  if (HIBYTE(v87))
    v69 = 0;
  else
    v69 = v86;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 80))(v77, v69, v47 - 2);
  if (v48 == v62)
  {
    v38 = 1;
    v48 = v62;
  }
  else
  {
    v70 = 2;
    v71 = v48;
    do
    {
      v73 = *(_QWORD *)v71;
      v72 = *((_QWORD *)v71 + 1);
      v74 = *((_QWORD *)v71 + 2);
      sub_20B871810(*(_QWORD **)(v81 + 16));
      *(_OWORD *)(v75 + 80) = 0u;
      *(_OWORD *)(v75 + 96) = 0u;
      *(_OWORD *)(v75 + 48) = 0u;
      *(_OWORD *)(v75 + 64) = 0u;
      *(_OWORD *)(v75 + 16) = 0u;
      *(_OWORD *)(v75 + 32) = 0u;
      *(_OWORD *)v75 = 0u;
      *(_QWORD *)(v75 + 48) = v73;
      *(_QWORD *)(v75 + 56) = v74;
      *(_WORD *)(v75 + 88) = v72;
      *(_WORD *)(v75 + 90) = v72 + 2;
      *(_WORD *)(v75 + 94) = a2;
      v76 = v78 + 8 * v70;
      *(_WORD *)(v75 + 92) = a3;
      v70 += v72;
      v71 += 24;
      *(_QWORD *)(v76 - 16) = v75;
    }
    while (v71 != v62);
    v38 = 1;
  }
LABEL_106:
  if ((_BYTE)v87 && v86)
    MEMORY[0x20BD39C80](v86, 0x1000C8077774924);
  MEMORY[0x20BD39C80](v82, 0x1000C8077774924);
  if (v48)
    operator delete(v48);
LABEL_46:
  if (__p)
  {
    v89 = (char *)__p;
    operator delete(__p);
  }
  if (v91)
  {
    v92 = (char *)v91;
    operator delete(v91);
  }
  return v38;
}

void sub_20B870C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  if (a18 && a17)
    MEMORY[0x20BD39C80](a17, 0x1000C8077774924);
  MEMORY[0x20BD39C80](a13, 0x1000C8077774924);
  if (v23)
    operator delete(v23);
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20B870D30(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  host_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  uint64_t (*v36)(_QWORD *, unint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t, _QWORD *);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v44;
  uint64_t (*v45)(_QWORD *, unint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD *);
  uint64_t v46;
  _QWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t *v51;
  _QWORD *v52;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[2];
  unint64_t v55;

  if (!a2)
    return 0;
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  if (!result)
    return result;
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
  v8 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 200))(a2);
  v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 88))(a2);
  v52 = a2 + 21;
  v11 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
  v50 = &v11[v10];
  v12 = *(_QWORD *)(a1 + 80);
  sub_20B871810(*(_QWORD **)(v9 + 16));
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  v14 = *(_QWORD *)(v12 + 192);
  *(_BYTE *)(v13 + 109) = 2;
  *(_QWORD *)(v13 + 48) = v11;
  *(_QWORD *)(v13 + 56) = v14;
  *v7 = v13;
  if ((a3 & 2) == 0)
  {
    host_info_outCnt = 15;
    v15 = MEMORY[0x20BD3A13C]();
    if (host_statistics(v15, 2, host_info_out, &host_info_outCnt))
    {
      v51 = v8;
      v16 = -1;
      *(_DWORD *)(a1 + 112) = -1;
      v17 = (_DWORD *)(a1 + 112);
    }
    else
    {
      v31 = *MEMORY[0x24BDB03C8] * host_info_out[0];
      if (v31 <= 0x100000)
      {
        result = 0;
        *(_DWORD *)(a1 + 112) = 0;
        return result;
      }
      result = 0;
      if (v31 >= 2148532223)
        LODWORD(v31) = -2146435073;
      v44 = v31 - 0x100000;
      *(_DWORD *)(a1 + 112) = v44 / 0x18;
      v17 = (_DWORD *)(a1 + 112);
      if (v44 < 0x18)
        return result;
      v51 = v8;
      v16 = 0;
    }
    *(_DWORD *)(a1 + 116) = v16;
    v18 = (_DWORD *)(a1 + 116);
    v19 = v11;
    if (v10 >= 2)
      v19 = &v11[2 * (*(_WORD *)v11 == 32)];
    v48 = v17;
    if ((~a3 & 0x44) != 0)
    {
      v49 = 0;
      if (!v10)
        goto LABEL_43;
    }
    else
    {
      v20 = v10 >> 1;
      if (!v11)
        v20 = 0;
      *(_QWORD *)host_info_out = v11;
      v55 = v20;
      v49 = 2 * sub_20B87C4D0((uint64_t)host_info_out, 0x20u);
      if (!v10)
        goto LABEL_43;
    }
    v33 = 0;
    v34 = 0;
    while (*(_DWORD *)(a1 + 8) != 2)
    {
      if (v7[v34])
      {
        if (v34 || (v35 = (_OWORD *)*v51) == 0)
        {
          v35 = sub_20BA087B8(*(_QWORD *)(a1 + 80), &v11[v34], (unint64_t)v50, v9, a3, v19, v49, *v52 + v33);
          v51[v34] = (uint64_t)v35;
        }
        else
        {
          v19 += *((unsigned __int16 *)v35 + 45);
        }
        v36 = *(uint64_t (**)(_QWORD *, unint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t, _QWORD *))(a1 + 120);
        v37 = *(_QWORD *)(a1 + 128);
        v38 = (_QWORD *)(a1 + (v37 >> 1));
        if ((v37 & 1) != 0)
          v36 = *(uint64_t (**)(_QWORD *, unint64_t, _OWORD *, _QWORD *, uint64_t, uint64_t, _QWORD *))(*v38 + v36);
        result = v36(v38, v34, v35, v7, v9, a1 + 116, v52);
        if (!(_DWORD)result)
          return result;
        if (*v18 != -1 && *v18 >= *v48)
          goto LABEL_43;
      }
      v34 += 2;
      v33 += 48;
      if (v34 >= v10)
        goto LABEL_43;
    }
    return 0;
  }
  *(_DWORD *)(a1 + 116) = -1;
  v21 = *v8;
  v51 = v8;
  if (*v8)
  {
    v22 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v24 = (_QWORD *)(a1 + (v23 >> 1));
    if ((v23 & 1) != 0)
      v22 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*v24 + v22);
    result = v22(v24, 0, v21, v7, v9, a1 + 116, 0);
    if (!(_DWORD)result)
      return result;
    v25 = *(unsigned __int16 *)(v21 + 90);
    if (!v7[v25])
      goto LABEL_43;
    v26 = sub_20BA09F18(*(_QWORD *)(a1 + 80), &v11[v25], v50, v9, a3);
    v8[v25] = v26;
    v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(a1 + 120);
    v28 = *(_QWORD *)(a1 + 128);
    v29 = (_QWORD *)(a1 + (v28 >> 1));
    if ((v28 & 1) != 0)
      v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*v29 + v27);
    v30 = v25;
  }
  else
  {
    v26 = sub_20BA09F18(*(_QWORD *)(a1 + 80), v11, v50, v9, a3);
    *v8 = v26;
    v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(a1 + 120);
    v32 = *(_QWORD *)(a1 + 128);
    v29 = (_QWORD *)(a1 + (v32 >> 1));
    if ((v32 & 1) != 0)
      v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*v29 + v27);
    v30 = 0;
  }
  if ((v27(v29, v30, v26, v7, v9, a1 + 116, 0) & 1) == 0)
    return 0;
LABEL_43:
  v39 = *(_QWORD *)(a1 + 80);
  sub_20B871810(*(_QWORD **)(v9 + 16));
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_OWORD *)(v40 + 96) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  v41 = *(_QWORD *)(v39 + 192);
  *(_BYTE *)(v40 + 109) = 3;
  *(_QWORD *)(v40 + 48) = v50;
  *(_QWORD *)(v40 + 56) = v41;
  v51[v10] = v40;
  if ((v10 & 0x8000000000000000) != 0)
    return 1;
  if (*(_DWORD *)(a1 + 8) == 2)
    return 0;
  v42 = v40;
  result = 1;
  while (!v7[v10])
  {
    if ((uint64_t)v10-- <= 0)
      return result;
  }
  v45 = *(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD *))(a1 + 120);
  v46 = *(_QWORD *)(a1 + 128);
  v47 = (_QWORD *)(a1 + (v46 >> 1));
  if ((v46 & 1) != 0)
    v45 = *(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD *))(*v47 + v45);
  return v45(v47, v10, v42, v7, v9, a1 + 116, v52);
}

uint64_t sub_20B8711A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v4 = (_QWORD *)*v3;
  if (*v3)
  {
    do
    {
      v4[1] = v3;
      v3 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    do
    {
      for (i = *(uint64_t **)(v7 + 8 * v8); i; i = (uint64_t *)i[3])
      {
        *(_QWORD *)(v5 + 8) = i;
        *i = v5;
        v5 = (uint64_t)i;
      }
    }
    while (v8++ != v6);
  }
  return 1;
}

void sub_20B871268(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_DWORD *)(a1 + 8))
    *(_DWORD *)(a1 + 8) = 2;
  std::mutex::unlock(v2);
}

uint64_t sub_20B8712A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;

  if (!a2)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (result)
  {
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    v11 = *(_QWORD *)(a1 + 80);
    sub_20B871810(*(_QWORD **)(v8 + 16));
    v13 = v12;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_BYTE *)(v12 + 109) = 2;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    v14 = *(_QWORD *)(v11 + 192);
    *(_QWORD *)(v12 + 48) = v10;
    *(_QWORD *)(v12 + 56) = v14;
    *v7 = v12;
    result = sub_20BA09F18(*(_QWORD *)(a1 + 80), v10, &v10[v9], v8, a3 | 0x200000u);
    if (result)
    {
      v7[2] = result;
      v15 = *(_QWORD *)(a1 + 80);
      sub_20B871810(*(_QWORD **)(v8 + 16));
      *(_OWORD *)(v16 + 80) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_BYTE *)(v16 + 109) = 3;
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      v17 = *(_QWORD *)(v15 + 192);
      *(_QWORD *)(v16 + 48) = &v10[v9];
      *(_QWORD *)(v16 + 56) = v17;
      v7[v9 + 2] = v16;
      *(_QWORD *)(v13 + 8) = v7[2];
      for (i = v7[2]; i; i = *(_QWORD *)(i + 24))
        *(_QWORD *)(i + 8) = v7[*(unsigned __int16 *)(i + 88) + 2];
      return 1;
    }
  }
  return result;
}

_QWORD *sub_20B871418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 48);
  }
  else
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_24C467540;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 2048;
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 32) = v1;
    v2 = 2048;
  }
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  if (v5 == v2)
  {
    v5 = 0;
    ++v6;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = v6;
  }
  v7 = *(_QWORD *)(v1 + 8);
  if (v6 == (*(_QWORD *)(v1 + 16) - v7) >> 3)
  {
    v8 = operator new[]();
    v9 = v8;
    v11 = *(uint64_t **)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 24);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(_QWORD **)(v1 + 8);
      v14 = v11 - v13;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_20B80CDD8();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_20B800BC0();
        v18 = (char *)operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = (uint64_t *)&v18[8 * v14];
      *v19 = v9;
      v12 = v19 + 1;
      if (v11 != v13)
      {
        do
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        while (v11 != v13);
        v11 = *(uint64_t **)(v1 + 8);
      }
      *(_QWORD *)(v1 + 8) = v19;
      *(_QWORD *)(v1 + 16) = v12;
      *(_QWORD *)(v1 + 24) = &v18[8 * v17];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v11 = v8;
      v12 = v11 + 1;
    }
    *(_QWORD *)(v1 + 16) = v12;
    v7 = *(_QWORD *)(v1 + 8);
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v1 + 40);
  }
  v21 = *(_QWORD *)(v7 + 8 * v6);
  *(_QWORD *)(v1 + 32) = v5 + 1;
  result = (_QWORD *)(v21 + 24 * v5);
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void **sub_20B8715E0(uint64_t a1)
{
  void **v2;
  __int128 v4;
  uint64_t v5;

  sub_20B871648(a1 + 8, &v4);
  v2 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v4;
  *(_QWORD *)(a1 + 280) = v5;
  if (*(char *)(a1 + 287) < 0)
    return (void **)*v2;
  return v2;
}

uint64_t sub_20B871648@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = sub_20B8716E4(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t sub_20B8716E4(uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void *sub_20B871730(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_20B800BC0();
  return operator new(24 * a1);
}

uint64_t sub_20B871774(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 344);
  v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
  v5 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 - v5 == *(unsigned __int16 *)(a1 + 370))
    return *(__int16 *)(*(_QWORD *)(a1 + 360) + 2 * (v5 + a3));
  else
    return sub_20B8717A8((_QWORD *)a1, a2, a3);
}

uint64_t sub_20B8717A8(_QWORD *a1, int a2, int a3)
{
  int *v3;
  int v4;
  int v5;
  int v6;

  v3 = (int *)(a1[43] + 4 * a2);
  v4 = *v3;
  v5 = v3[1] - 1;
  if (v4 > v5)
    return 0x7FFFLL;
  while (1)
  {
    v6 = *(__int16 *)(a1[44] + 2 * ((v4 + v5) / 2));
    if (v6 >= a3)
      break;
    v4 = (v4 + v5) / 2 + 1;
LABEL_6:
    if (v4 > v5)
      return 0x7FFFLL;
  }
  if (v6 > a3)
  {
    v5 = (v4 + v5) / 2 - 1;
    goto LABEL_6;
  }
  return *(__int16 *)(a1[45] + 2 * ((uint64_t)(v4 + v5 + (v4 + v5 < 0)) >> 1));
}

double sub_20B871810(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  double result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 == v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x70uLL);
    v7 = operator new[]();
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20B80CDD8();
      v12 = v8 - (_QWORD)*v6;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_20B800BE8((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v6;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  v21 = *(_QWORD *)(v5 + 8 * v2);
  a1[4] = v4 + 1;
  v22 = (_OWORD *)(v21 + 112 * v4);
  result = 0.0;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  *v22 = 0u;
  return result;
}

uint64_t sub_20B871974(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8936F8(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B8719B0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  sub_20B83BFEC((uint64_t)v12);
  v11 = 0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_20B828F84(v13, v3, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0
    || (v6 = (_QWORD *)MEMORY[0x20BD39A40](v12, &v11), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    || (v7 = sub_20B871C3C(v12), (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0))
  {
    *(_DWORD *)operator new() = 0;
    MEMORY[0x20BD39CB0]();
    v8 = 0;
  }
  else
  {
    v8 = v11;
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v9;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v15);
  return v8;
}

void sub_20B871B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83C118((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20B871B2C(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = sub_20B871BA8(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_20B871BA8(a2, v5 + 4) & 0x80) != 0)
    return v2;
  return v5;
}

uint64_t sub_20B871BA8(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return sub_20B871BE0(a1, v2, v5, v6);
}

uint64_t sub_20B871BE0(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

_QWORD *sub_20B871C3C(_QWORD *a1)
{
  const std::locale::facet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::locale v11;
  char v12;

  MEMORY[0x20BD39A04](&v12, a1, 1);
  if (!v12)
    return a1;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v11, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v11);
  v3 = a1 + 5;
  while (1)
  {
    v4 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
      break;
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v7 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v8 = v7[3];
    if (v8 == v7[4])
      (*(void (**)(_QWORD *))(*v7 + 80))(v7);
    else
      v7[3] = v8 + 1;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
  if (v6 != -1)
    goto LABEL_6;
  v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20B871D58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20B871D20);
  }
  __cxa_rethrow();
}

void sub_20B871DB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20B871DC8(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_20B80CDD8();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void sub_20B871EF4(_QWORD *a1)
{
  sub_20B871F18(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B871F18(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C467540;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD39C80](v2[v5], 0x1020C80EDCEB4C7);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_20B871FAC(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    sub_20B8296A0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_20B872064(uint64_t a1, const __CFString *a2, uint64_t a3, int a4)
{
  const __CFString **v7;
  const __CFString *v8;
  const __CFString *v9;
  CFIndex Length;
  uint64_t v11;
  CFIndex v12;
  UniChar *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  int64x2_t v30;
  uint64_t v31;
  UniChar *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  BOOL v45;
  uint64_t *v46;
  _WORD *v47;
  _WORD *v48;
  int v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  unsigned int v67;
  BOOL v68;
  uint64_t *v69;
  void *v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  _DWORD *v79;
  _DWORD *v80;
  char *v81;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  void **v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  int64_t v108;
  char *v109;
  int64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  int64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  int v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  int v131;
  char *v132;
  char *v133;
  int v134;
  char *v135;
  char *v136;
  void *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  double v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  double v146;
  char *v147;
  int64_t v148;
  char *v149;
  char *v150;
  void *v151;
  int *v152;
  _DWORD *v153;
  int *v154;
  int v155;
  uint64_t v157;
  UniChar *v158;
  char v159;
  char *v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  int64x2_t *v164;
  void *v165[3];
  __int128 v166;
  uint64_t v167;
  UniChar *v168;
  uint64_t v169;
  void *__dst;
  uint64_t v171;
  void *__p;
  _DWORD *v173;
  unint64_t v174;
  void *__src;
  _BYTE *v176;
  uint64_t v177;
  int v178;
  _QWORD *v179;
  _QWORD *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _OWORD v185[2];
  unint64_t *v186;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C45FB08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C45FBD8;
  *(_QWORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  v7 = (const __CFString **)(a1 + 40);
  v164 = (int64x2_t *)(a1 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = sub_20B896D34(a2, 50);
  v9 = v8;
  if (!v8)
    return a1;
  *v7 = v8;
  Length = CFStringGetLength(v8);
  sub_20B8D06F4(v9, 0, Length, &v168);
  v161 = a4;
  v11 = *(_QWORD *)(a3 + 104);
  v12 = CFStringGetLength(v9);
  (*(void (**)(uint64_t, const __CFString *, _QWORD, CFIndex))(*(_QWORD *)v11 + 16))(v11, v9, 0, v12);
  v13 = v168;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    sub_20B9AA0BC((uint64_t)v13, v14, v15, a3, (uint64_t)v165);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    if (v16 >= v17)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v164->i64[0]) >> 4);
      v20 = v19 + 1;
      if (v19 + 1 > 0x555555555555555)
        sub_20B873738();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v164->i64[0]) >> 4);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x2AAAAAAAAAAAAAALL)
        v22 = 0x555555555555555;
      else
        v22 = v20;
      v186 = (unint64_t *)(a1 + 64);
      if (v22)
        v23 = (char *)sub_20B87374C(a1 + 64, v22);
      else
        v23 = 0;
      v24 = &v23[48 * v19];
      *(_QWORD *)v24 = &off_24C467C40;
      *(_OWORD *)(v24 + 8) = *(_OWORD *)&v165[1];
      *(_OWORD *)(v24 + 24) = v166;
      *((_QWORD *)v24 + 5) = v167;
      v25 = *(_QWORD *)(a1 + 48);
      v26 = *(_QWORD *)(a1 + 56);
      if (v26 == v25)
      {
        v30 = vdupq_n_s64(v26);
        v27 = &v23[48 * v19];
      }
      else
      {
        v27 = &v23[48 * v19];
        do
        {
          *((_QWORD *)v27 - 6) = &off_24C467C40;
          v27 -= 48;
          v28 = *(_OWORD *)(v26 - 40);
          v29 = *(_OWORD *)(v26 - 24);
          *((_QWORD *)v27 + 5) = *(_QWORD *)(v26 - 8);
          *(_OWORD *)(v27 + 24) = v29;
          *(_OWORD *)(v27 + 8) = v28;
          v26 -= 48;
        }
        while (v26 != v25);
        v30 = *v164;
      }
      v18 = v24 + 48;
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v24 + 48;
      *(int64x2_t *)((char *)v185 + 8) = v30;
      v31 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = &v23[48 * v22];
      *((_QWORD *)&v185[1] + 1) = v31;
      *(_QWORD *)&v185[0] = v30.i64[0];
      sub_20B873790((uint64_t)v185);
    }
    else
    {
      *(_QWORD *)v16 = &off_24C467C40;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)&v165[1];
      *(_OWORD *)(v16 + 24) = v166;
      *(_QWORD *)(v16 + 40) = v167;
      v18 = (char *)(v16 + 48);
    }
    *(_QWORD *)(a1 + 56) = v18;
  }
  v32 = v168;
  if (!v161)
    goto LABEL_198;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v180 = 0;
  v181 = 0;
  v179 = 0;
  v33 = *(_QWORD **)(a1 + 32);
  v34 = *(_QWORD *)(v33[11] + 8);
  v35 = *(uint64_t **)(v33[9] + 8);
  v36 = *(_QWORD *)(v33[1] + 32);
  v178 = 0;
  __src = 0;
  v176 = 0;
  v177 = 0;
  v37 = *(_QWORD *)(a1 + 56);
  if (v37 == *(_QWORD *)(a1 + 48))
    goto LABEL_195;
  v159 = 0;
  v157 = v34;
  v162 = *(_QWORD *)(v36 + 32) - 1;
  v158 = v168;
  v38 = (_QWORD *)(v34 + 32);
  do
  {
    if ((unint64_t)(v183 - v182) <= 0xB)
    {
      LODWORD(v165[0]) = *(_DWORD *)(v37 - 40);
      sub_20B873188((uint64_t)&v182, v182, v165);
      __p = 0;
      v173 = 0;
      v174 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)(v37 - 48) + 24))(v37 - 48);
      if (v39 == 1)
      {
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 - 48) + 24))(v37 - 48);
        v41 = *v38;
        if (*v38)
        {
          v42 = v158[v40];
          v43 = v38;
          do
          {
            v44 = *(unsigned __int16 *)(v41 + 32);
            v45 = v44 >= v42;
            if (v44 >= v42)
              v46 = (uint64_t *)v41;
            else
              v46 = (uint64_t *)(v41 + 8);
            if (v45)
              v43 = (_QWORD *)v41;
            v41 = *v46;
          }
          while (*v46);
          if (v43 != v38 && *((unsigned __int16 *)v43 + 16) <= v42)
          {
            sub_20B88F22C(v157, v42, (char **)v165);
            v48 = v165[0];
            v47 = v165[1];
            if (v165[0] != v165[1])
            {
              do
              {
                LOWORD(v185[0]) = 0;
                LOWORD(v185[0]) = *v48;
                sub_20B9689F0(v35, (uint64_t)v185, 1, &v178);
                v49 = v178;
                if (v178)
                {
                  v50 = v173;
                  if ((unint64_t)v173 >= v174)
                  {
                    v52 = __p;
                    v53 = ((char *)v173 - (_BYTE *)__p) >> 2;
                    v54 = v53 + 1;
                    if ((unint64_t)(v53 + 1) >> 62)
                      sub_20B80CDD8();
                    v55 = v174 - (_QWORD)__p;
                    if ((uint64_t)(v174 - (_QWORD)__p) >> 1 > v54)
                      v54 = v55 >> 1;
                    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                      v56 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v56 = v54;
                    if (v56)
                    {
                      v57 = (char *)sub_20B8127BC((uint64_t)&v174, v56);
                      v52 = __p;
                      v50 = v173;
                      v49 = v178;
                    }
                    else
                    {
                      v57 = 0;
                    }
                    v58 = &v57[4 * v53];
                    *(_DWORD *)v58 = v49;
                    v51 = v58 + 4;
                    while (v50 != v52)
                    {
                      v59 = *--v50;
                      *((_DWORD *)v58 - 1) = v59;
                      v58 -= 4;
                    }
                    __p = v58;
                    v173 = v51;
                    v174 = (unint64_t)&v57[4 * v56];
                    if (v52)
                      operator delete(v52);
                  }
                  else
                  {
                    *v173 = v178;
                    v51 = v50 + 1;
                  }
                  v173 = v51;
                }
                ++v48;
              }
              while (v48 != v47);
              v48 = v165[0];
            }
            if (v48)
            {
              v165[1] = v48;
              operator delete(v48);
            }
          }
        }
      }
      v60 = v173;
      v61 = (char *)v173 - (_BYTE *)__p;
      if (v173 == __p)
      {
        v72 = *(_DWORD *)(v37 - 40);
        if ((unint64_t)v173 >= v174)
        {
          v73 = v61 >> 2;
          v74 = v174 - (_QWORD)__p;
          if ((uint64_t)(v174 - (_QWORD)__p) >> 1 <= (unint64_t)((v61 >> 2) + 1))
            v75 = v73 + 1;
          else
            v75 = v74 >> 1;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
            v76 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          v78 = (char *)sub_20B8127BC((uint64_t)&v174, v76);
          v79 = __p;
          v80 = v173;
          v81 = &v78[4 * v73];
          *(_DWORD *)v81 = v72;
          v60 = v81 + 4;
          while (v80 != v79)
          {
            v82 = *--v80;
            *((_DWORD *)v81 - 1) = v82;
            v81 -= 4;
          }
          __p = v81;
          v173 = v60;
          v174 = (unint64_t)&v78[4 * v77];
          if (v79)
            operator delete(v79);
        }
        else
        {
          *v173 = v72;
          ++v60;
        }
        v173 = v60;
      }
      else
      {
        v159 = 1;
      }
      v83 = v179;
      if ((unint64_t)v180 < v181)
      {
        if (v179 == v180)
        {
          *v179 = 0;
          v83[1] = 0;
          v83[2] = 0;
          sub_20B873D0C(v83, __p, (uint64_t)v173, ((char *)v173 - (_BYTE *)__p) >> 2);
          v180 = v83 + 3;
        }
        else
        {
          *(_QWORD *)&v166 = &v181;
          memset(v165, 0, sizeof(v165));
          sub_20B873D0C(v165, __p, (uint64_t)v60, ((char *)v60 - (_BYTE *)__p) >> 2);
          v84 = v180;
          v85 = (void **)(v180 - 3);
          v86 = v180;
          v87 = v180 - 3;
          if ((unint64_t)v180 >= 0x18)
          {
            do
            {
              *v86 = 0;
              v86[1] = 0;
              v86[2] = 0;
              *(_OWORD *)v86 = *(_OWORD *)v87;
              v86[2] = v87[2];
              *v87 = 0;
              v87[1] = 0;
              v87[2] = 0;
              v86 += 3;
              v87 += 3;
            }
            while (v87 < v84);
          }
          v180 = v86;
          if (v84 != v83 + 3)
          {
            v88 = v84 - (v83 + 3);
            do
            {
              v89 = *v85;
              if (*v85)
              {
                v85[1] = v89;
                operator delete(v89);
                *v85 = 0;
                v85[1] = 0;
                v85[2] = 0;
              }
              v90 = (uint64_t)&v83[v88 - 3];
              *(_OWORD *)v85 = *(_OWORD *)v90;
              v85[2] = (void *)v83[v88 - 1];
              *(_QWORD *)v90 = 0;
              *(_QWORD *)(v90 + 8) = 0;
              *(_QWORD *)(v90 + 16) = 0;
              v85 -= 3;
              v88 -= 3;
            }
            while (v88 * 8);
          }
          v91 = (void *)*v83;
          if (*v83)
          {
            v83[1] = v91;
            operator delete(v91);
            *v83 = 0;
            v83[1] = 0;
            v83[2] = 0;
          }
          *(_OWORD *)v83 = *(_OWORD *)v165;
          v83[2] = v165[2];
        }
LABEL_125:
        v71 = __p;
        if (!__p)
          goto LABEL_128;
        v173 = __p;
        goto LABEL_127;
      }
      v92 = 1 - 0x5555555555555555 * (v180 - v179);
      if (v92 > 0xAAAAAAAAAAAAAAALL)
        sub_20B873738();
      if (0x5555555555555556 * ((uint64_t)(v181 - (_QWORD)v179) >> 3) > v92)
        v92 = 0x5555555555555556 * ((uint64_t)(v181 - (_QWORD)v179) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v181 - (_QWORD)v179) >> 3) >= 0x555555555555555)
        v93 = 0xAAAAAAAAAAAAAAALL;
      else
        v93 = v92;
      v186 = &v181;
      if (v93)
      {
        v94 = sub_20B828D70((uint64_t)&v181, v93);
        *(_QWORD *)&v185[0] = v94;
        *((_QWORD *)&v185[0] + 1) = v94;
        v96 = &v94[3 * v95];
        *(_QWORD *)&v185[1] = v94;
        *((_QWORD *)&v185[1] + 1) = v96;
        if (v95)
        {
LABEL_121:
          *v94 = 0;
          v94[1] = 0;
          v94[2] = 0;
          sub_20B873D0C(v94, __p, (uint64_t)v173, ((char *)v173 - (_BYTE *)__p) >> 2);
          *(_QWORD *)&v185[1] += 24;
          sub_20B873C38((uint64_t)&v181, (uint64_t)v83, v83, (uint64_t)v179, v179, *((uint64_t *)&v185[0] + 1), *((uint64_t *)&v185[0] + 1));
          *((_QWORD *)&v185[0] + 1) = v97;
          v98 = v180;
          v99 = *(_QWORD **)&v185[1];
          if (v180 != v83)
          {
            do
            {
              *v99 = 0;
              v99[1] = 0;
              v99[2] = 0;
              *(_OWORD *)v99 = *(_OWORD *)v83;
              v99[2] = v83[2];
              *v83 = 0;
              v83[1] = 0;
              v83[2] = 0;
              v99 += 3;
              v83 += 3;
            }
            while (v83 != v98);
            v97 = (_QWORD *)*((_QWORD *)&v185[0] + 1);
            v83 = v180;
          }
          v100 = v179;
          v101 = v181;
          v179 = v97;
          v180 = v99;
          v181 = *((_QWORD *)&v185[1] + 1);
          *(_QWORD *)&v185[1] = v83;
          *((_QWORD *)&v185[1] + 1) = v101;
          *(_QWORD *)&v185[0] = v100;
          *((_QWORD *)&v185[0] + 1) = v100;
          sub_20B83CBC8((uint64_t)v185);
          goto LABEL_125;
        }
      }
      else
      {
        v96 = 0;
        v94 = 0;
        memset(v185, 0, sizeof(v185));
      }
      *((_QWORD *)&v166 + 1) = &v181;
      *(_QWORD *)&v185[0] = operator new(0x18uLL);
      *((_QWORD *)&v185[0] + 1) = *(_QWORD *)&v185[0];
      v165[0] = v94;
      v165[1] = v94;
      *(_QWORD *)&v185[1] = *(_QWORD *)&v185[0];
      *((_QWORD *)&v185[1] + 1) = *(_QWORD *)&v185[0] + 24;
      v165[2] = v94;
      *(_QWORD *)&v166 = v96;
      sub_20B83CBC8((uint64_t)v165);
      v94 = *(_QWORD **)&v185[1];
      goto LABEL_121;
    }
    if (v162 > (v176 - (_BYTE *)__src) >> 2)
    {
      LODWORD(v165[0]) = *(_DWORD *)(v37 - 40);
      sub_20B873188((uint64_t)&__src, (char *)__src, v165);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(v37 - 48) + 24))(v37 - 48);
    if (v62 == 1)
    {
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 - 48) + 24))(v37 - 48);
      v64 = *v38;
      if (*v38)
      {
        v65 = v158[v63];
        v66 = v38;
        do
        {
          v67 = *(unsigned __int16 *)(v64 + 32);
          v68 = v67 >= v65;
          if (v67 >= v65)
            v69 = (uint64_t *)v64;
          else
            v69 = (uint64_t *)(v64 + 8);
          if (v68)
            v66 = (_QWORD *)v64;
          v64 = *v69;
        }
        while (*v69);
        if (v66 != v38 && *((unsigned __int16 *)v66 + 16) <= v65)
        {
          sub_20B88F22C(v157, v65, (char **)v165);
          v70 = v165[0];
          if (v165[0] != v165[1])
          {
            sub_20B9689F0(v35, (uint64_t)v165[0], 1, &v178);
            if (v178)
              *(_DWORD *)(v37 - 40) = v178;
            v70 = v165[0];
          }
          if (v70)
          {
            v165[1] = v70;
            v71 = v70;
LABEL_127:
            operator delete(v71);
          }
        }
      }
    }
LABEL_128:
    v37 -= 48;
  }
  while (v37 != v164->i64[0]);
  v102 = __src;
  if ((v159 & 1) == 0)
    goto LABEL_193;
  v103 = (uint64_t)v176;
  v104 = (v176 - (_BYTE *)__src) >> 2;
  if (v104 < v162)
  {
    sub_20B873328((uint64_t)&__src, (char *)__src, byte_20BA3794C);
    v102 = __src;
    v103 = (uint64_t)v176;
    v104 = (v176 - (_BYTE *)__src) >> 2;
  }
  v106 = v182;
  v105 = v183;
  memset(v165, 0, sizeof(v165));
  v163 = v104;
  sub_20B873D0C(v165, v102, v103, v104);
  v107 = v182;
  if (v183 - v182 >= 1)
  {
    v108 = (v183 - v182) >> 2;
    v109 = (char *)v165[1];
    v110 = (char *)v165[1] - (char *)v165[0];
    v111 = (char *)v165[0] + (((char *)v165[1] - (char *)v165[0]) & 0xFFFFFFFFFFFFFFFCLL);
    if (v108 > ((char *)v165[2] - (char *)v165[1]) >> 2)
    {
      v112 = v110 >> 2;
      v113 = (v110 >> 2) + v108;
      if (v113 >> 62)
        sub_20B80CDD8();
      v114 = (char *)v165[2] - (char *)v165[0];
      if (((char *)v165[2] - (char *)v165[0]) >> 1 > v113)
        v113 = v114 >> 1;
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
        v115 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v115 = v113;
      if (v115)
        v116 = (char *)sub_20B8127BC((uint64_t)&v165[2], v115);
      else
        v116 = 0;
      v127 = &v116[4 * v112];
      v128 = &v127[4 * v108];
      v129 = 4 * v108;
      v130 = v127;
      do
      {
        v131 = *(_DWORD *)v107;
        v107 += 4;
        *(_DWORD *)v130 = v131;
        v130 += 4;
        v129 -= 4;
      }
      while (v129);
      v132 = (char *)v165[0];
      if (v165[0] != v111)
      {
        v133 = v111;
        do
        {
          v134 = *((_DWORD *)v133 - 1);
          v133 -= 4;
          *((_DWORD *)v127 - 1) = v134;
          v127 -= 4;
        }
        while (v133 != v132);
      }
      v135 = &v116[4 * v115];
      v136 = (char *)((char *)v165[1] - (char *)v111);
      if (v165[1] != v111)
        memmove(v128, v111, (char *)v165[1] - (char *)v111);
      v137 = v165[0];
      v165[0] = v127;
      v165[1] = &v136[(_QWORD)v128];
      v165[2] = v135;
      if (v137)
        operator delete(v137);
      goto LABEL_165;
    }
    v117 = (char *)v165[1] - (char *)v111;
    v118 = ((char *)v165[1] - (char *)v111) >> 2;
    if (v118 >= v108)
    {
      v120 = &v182[4 * v108];
      v122 = (char *)v165[1];
    }
    else
    {
      v160 = v106;
      v119 = v105;
      v120 = &v182[4 * v118];
      v121 = v183 - v120;
      if (v183 != v120)
        memmove(v165[1], &v182[4 * v118], v183 - v120);
      v122 = &v109[v121];
      v165[1] = &v109[v121];
      v105 = v119;
      v106 = v160;
      if (v117 < 1)
        goto LABEL_165;
    }
    v123 = &v111[4 * v108];
    v124 = &v122[-4 * v108];
    v125 = v122;
    if (v124 < v109)
    {
      v125 = v122;
      do
      {
        v126 = *(_DWORD *)v124;
        v124 += 4;
        *(_DWORD *)v125 = v126;
        v125 += 4;
      }
      while (v124 < v109);
    }
    v165[1] = v125;
    if (v122 != v123)
      memmove(&v122[-4 * ((v122 - v123) >> 2)], v111, v122 - v123);
    if (v120 != v107)
      memmove(v111, v107, v120 - v107);
  }
LABEL_165:
  memset(v185, 0, 24);
  sub_20B873D0C(v185, v182, (uint64_t)v183, (v183 - v182) >> 2);
  v138 = (v105 - v106) >> 2;
  v169 = 0;
  sub_20B873D84(&__p, v138, &v169);
  v139 = v163;
  v140 = 0;
  v141 = 0;
  v142 = 1.79769313e308;
  while (2)
  {
    if (v140 >= v138)
    {
      --v140;
    }
    else
    {
      v143 = __p;
      v144 = *((_QWORD *)__p + v140);
      v145 = v179[3 * v140];
      if (v144 >= (v179[3 * v140 + 1] - v145) >> 2)
      {
        if (!v140)
          break;
        *((_QWORD *)__p + v140--) = 0;
LABEL_181:
        ++v143[v140];
      }
      else
      {
        *((_DWORD *)v165[0] + v140 + v139) = *(_DWORD *)(v145 + 4 * v144);
        if (v140 + 1 == v138)
        {
          v146 = sub_20B9C43D0();
          if (v146 < v142)
          {
            v147 = (char *)v165[0] + 4 * v139;
            __dst = 0;
            v171 = 0;
            v169 = 0;
            v148 = (char *)v165[1] - (char *)v147;
            if (v165[1] == v147)
            {
              v150 = 0;
            }
            else
            {
              sub_20B81277C(&v169, v148 >> 2);
              v149 = (char *)__dst;
              memmove(__dst, v147, v148);
              v150 = &v149[4 * (v148 >> 2)];
              __dst = v150;
            }
            v139 = v163;
            if (*(_QWORD *)&v185[0])
            {
              *((_QWORD *)&v185[0] + 1) = *(_QWORD *)&v185[0];
              operator delete(*(void **)&v185[0]);
              v150 = (char *)__dst;
            }
            *(_QWORD *)&v185[0] = v169;
            *((_QWORD *)&v185[0] + 1) = v150;
            *(_QWORD *)&v185[1] = v171;
            v142 = v146;
          }
          ++v141;
          v143 = __p;
          goto LABEL_181;
        }
        ++v140;
      }
    }
    if (v141 < 0x1B)
      continue;
    break;
  }
  v152 = (int *)*((_QWORD *)&v185[0] + 1);
  v151 = *(void **)&v185[0];
  if (*(_QWORD *)&v185[0] != *((_QWORD *)&v185[0] + 1))
  {
    v153 = (_DWORD *)(v164->i64[0]
                    + -48 * ((uint64_t)(*((_QWORD *)&v185[0] + 1) - *(_QWORD *)&v185[0]) >> 2)
                    + 48 * ((*(_QWORD *)(a1 + 56) - v164->i64[0]) / 48)
                    + 8);
    v154 = *(int **)&v185[0];
    do
    {
      v155 = *v154++;
      *v153 = v155;
      v153 += 12;
    }
    while (v154 != v152);
  }
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
    v151 = *(void **)&v185[0];
  }
  if (v151)
  {
    *((_QWORD *)&v185[0] + 1) = v151;
    operator delete(v151);
  }
  if (v165[0])
  {
    v165[1] = v165[0];
    operator delete(v165[0]);
  }
  v102 = __src;
LABEL_193:
  if (v102)
  {
    v176 = v102;
    operator delete(v102);
  }
LABEL_195:
  v165[0] = &v179;
  sub_20B83B400((void ***)v165);
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  v32 = v168;
LABEL_198:
  if (v32)
    MEMORY[0x20BD39C80](v32, 0x1000C80BDFB0063);
  return a1;
}

void sub_20B872E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  void *v34;

  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = (void *)(v32 - 192);
  sub_20B83B400((void ***)&__p);
  v34 = *(void **)(v32 - 168);
  if (v34)
  {
    *(_QWORD *)(v32 - 160) = v34;
    operator delete(v34);
  }
  if (a24)
    MEMORY[0x20BD39C80](a24, 0x1000C80BDFB0063);
  *(_QWORD *)(v32 - 168) = a16;
  sub_20B8737E0((void ***)(v32 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_20B872F94(uint64_t a1)
{
  const void *v2;
  void **v4;

  *(_QWORD *)a1 = off_24C45FB08;
  *(_QWORD *)(a1 + 24) = &unk_24C45FBD8;
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v4 = (void **)(a1 + 48);
  sub_20B8737E0(&v4);
  return a1;
}

void sub_20B872FF4(uint64_t a1)
{
  sub_20B872F94(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B873018(_QWORD *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) <= a2)
    return 0;
  return a1[6] + 48 * a2;
}

void sub_20B87306C(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  if (a2)
  {
    sub_20B873120((uint64_t)a3, v6 + 1);
    v7 = 1;
    *(_DWORD *)*a3 = 1;
  }
  else
  {
    sub_20B873120((uint64_t)a3, v6);
    v7 = 0;
  }
  v8 = a1[6];
  v9 = a1[7];
  if (v8 != v9)
  {
    v10 = (_DWORD *)(*a3 + 4 * v7);
    do
    {
      *v10++ = *(_DWORD *)(v8 + 8);
      v8 += 48;
    }
    while (v8 != v9);
  }
}

void sub_20B873104(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B873120(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20B873960((char **)a1, a2 - v2);
  }
}

uint64_t sub_20B873150(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 0;
  return v2;
}

char *sub_20B873188(uint64_t a1, char *__src, _DWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v15 >> 62)
      sub_20B80CDD8();
    v16 = (__src - v14) >> 2;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)sub_20B8127BC(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[4 * v16];
    v23 = v22;
    v24 = &v19[4 * v18];
    sub_20B873A68(&__p, a3);
    v4 = sub_20B873B74((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v10 = __src + 4;
    v11 = v6 - 4;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)v12 = v13;
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    *(_DWORD *)v4 = *a3;
  }
  return v4;
}

void sub_20B8732F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B873328(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v14 >> 62)
      sub_20B80CDD8();
    v15 = __src - v13;
    v16 = (__src - v13) >> 2;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_20B8127BC(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[4 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (char *)sub_20B8127BC(v8, v22);
        v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        __p = v23;
        v27 = v20;
        v29 = &v23[4 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 4 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_DWORD *)v20 = *(_DWORD *)v3;
    v28 = v20 + 4;
    v4 = sub_20B873B74((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *(_DWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v9 = __src + 4;
    v10 = v6 - 4;
    v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 4 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_DWORD *)v4 = *(_DWORD *)v3;
  }
  return v4;
}

void sub_20B873530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B873570()
{
  return 0;
}

uint64_t sub_20B87357C()
{
  return 0;
}

BOOL sub_20B873584(uint64_t a1, uint64_t a2)
{
  const __CFString *v3;
  const __CFString *v4;

  v3 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return CFStringCompare(v3, v4, 0) == kCFCompareEqualTo;
}

uint64_t sub_20B8735D8()
{
  return 0;
}

uint64_t sub_20B8735E0()
{
  return 0;
}

uint64_t sub_20B8735E8(_QWORD *a1)
{
  uint64_t v2;
  const __CFString *v3;
  uint64_t v4;
  CFStringRef Copy;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C45FB08;
  *(_QWORD *)(v2 + 8) = 0;
  v4 = a1[1];
  v3 = (const __CFString *)a1[2];
  *(_QWORD *)(v2 + 24) = &unk_24C45FBD8;
  *(_QWORD *)(v2 + 32) = v4;
  if (v3)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
  else
    Copy = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = Copy;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  sub_20B87386C((char *)(v2 + 48), a1[3], a1[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 4));
  return v2;
}

void sub_20B87368C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8736B0(_QWORD *a1)
{
  return sub_20B8735E8((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
}

uint64_t sub_20B8736C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_20B8736C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_20B8736D0()
{
  return 0;
}

unint64_t sub_20B8736D8(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
}

uint64_t sub_20B8736F4()
{
  return 0;
}

uint64_t sub_20B873700()
{
  return 5;
}

uint64_t sub_20B873708()
{
  return 0;
}

uint64_t sub_20B873710()
{
  return 0;
}

uint64_t sub_20B873718()
{
  return 0;
}

uint64_t sub_20B873720()
{
  return 0;
}

uint64_t sub_20B873728()
{
  return 0;
}

uint64_t sub_20B873730()
{
  return 0;
}

void sub_20B873738()
{
  sub_20B80AD80("vector");
}

void *sub_20B87374C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_20B800BC0();
  return operator new(48 * a2);
}

uint64_t sub_20B873790(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8737E0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 48;
      v7 = v4 - 48;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 48;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_20B87386C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;

  if (a4)
  {
    v6 = result;
    result = sub_20B873910(result, a4);
    for (i = *((_QWORD *)v6 + 1); a2 != a3; i += 48)
    {
      *(_QWORD *)i = &off_24C467C40;
      v8 = *(_OWORD *)(a2 + 8);
      v9 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(i + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(i + 24) = v9;
      *(_OWORD *)(i + 8) = v8;
      a2 += 48;
    }
    *((_QWORD *)v6 + 1) = i;
  }
  return result;
}

void sub_20B8738FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8737E0(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B873910(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_20B873738();
  result = (char *)sub_20B87374C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_20B873960(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_20B80CDD8();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20B8127BC(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20B873A68(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 1;
      v17 = (char *)sub_20B8127BC(a1[4], v16);
      v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = (int *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        v22 = 4 * (v21 >> 2);
        v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          v24 = *v20++;
          *(_DWORD *)v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-4 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[4 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)v4 = *a2;
  a1[2] = v4 + 4;
}

char *sub_20B873B74(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_20B873C38(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B873CD8((uint64_t)v11);
  return v9;
}

uint64_t sub_20B873CD8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83CB84(a1);
  return a1;
}

_QWORD *sub_20B873D0C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B81277C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B873D68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B873D84(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B812928(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B873DE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B873E04(uint64_t *a1@<X8>)
{
  void *__p[2];
  char v3;
  _QWORD v4[7];
  char v5;

  sub_20B80BBD0(__p, "en-languagemodel");
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_20B875F64;
  v4[3] = &unk_24C497AF0;
  v4[5] = __p;
  v4[6] = qword_25472C838;
  v5 = 0;
  v4[4] = &unk_24C46CD30;
  sub_20B8756D8(__p, (uint64_t)v4, 0, a1);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20B873ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B873EEC()
{
  uint64_t v0;

  v0 = operator new();
  sub_20B9C3B4C(v0, 0xFFFFFFFF, CFSTR("en_US"), 0, 0, 0, 0, 1, 0, 0, 0);
  return v0;
}

void sub_20B873F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

void sub_20B873F7C(unsigned int a1@<W0>, char a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char *v8;
  std::string *v9;
  __int128 v10;
  NSObject *v11;
  void **v12;
  std::string::size_type v13;
  _QWORD v14[4];
  __int128 __p;
  uint64_t v16;
  unsigned int v17;
  char v18;
  void *v19[2];
  int64_t v20;
  std::string v21;
  void *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B8D101C(a1);
  sub_20B80BBD0(&v21, v8);
  v9 = std::string::append(&v21, "Montreal-languagemodel", 0x16uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v19 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v11 = sub_20B9A7C5C(0xDu);
  if (os_signpost_enabled(v11))
  {
    v12 = v19;
    if (v20 < 0)
      v12 = (void **)v19[0];
    LODWORD(v21.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_signpost_emit_with_name_impl(&dword_20B7F7000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "getSharedMontrealLanguageModel", "Creating Montreal model with identifier [%s]", (uint8_t *)&v21, 0xCu);
  }
  v13 = MEMORY[0x24BDAC760];
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1174405120;
  v14[2] = sub_20B8741F4;
  v14[3] = &unk_24C46C9F0;
  if (SHIBYTE(v20) < 0)
  {
    sub_20B80ACE0(&__p, v19[0], (unint64_t)v19[1]);
  }
  else
  {
    __p = *(_OWORD *)v19;
    v16 = v20;
  }
  v17 = a1;
  v18 = a2;
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v21.__r_.__value_.__r.__words[0] = v13;
  v21.__r_.__value_.__l.__size_ = 0x40000000;
  v21.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_20B875F64;
  v22 = &unk_24C497AF0;
  v24 = v19;
  v25 = qword_25472C838;
  v26 = 0;
  v23 = v14;
  sub_20B8756D8(v19, (uint64_t)&v21, a3, a4);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
}

void sub_20B8741A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8741F4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v6;
  uint8_t buf[4];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315138;
    v8 = v6;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[getSharedMontrealLanguageModel] Actually creating Montreal model with identifier [%s]", buf, 0xCu);
  }
  v3 = *(_DWORD *)(a1 + 56);
  v4 = (_QWORD *)operator new();
  sub_20B9C3B4C((uint64_t)v4, *(_DWORD *)(a1 + 56), 0, 0, 0, off_2547295B8[0], 0, 1, 0, v3 != 2, *(_BYTE *)(a1 + 60));
  if (v4[4] == 3)
  {
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    return 0;
  }
  return v4;
}

void sub_20B874334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B874360(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
    return sub_20B80ACE0(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_20B874390(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20B8743A4(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  char *v14;
  _QWORD v15[8];
  unsigned int v16;
  char v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  v14 = sub_20B8D101C(a1);
  sub_20B80BBD0(__p, v14);
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 0x40000000;
  v15[2] = sub_20B874D7C;
  v15[3] = &unk_24C497AC8;
  v16 = a1;
  v15[4] = &v20;
  v15[5] = a2;
  v15[6] = a3;
  v15[7] = a4;
  v17 = a5;
  sub_20B8744F0(__p, (uint64_t)v15, 0, a7);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a6)
      goto LABEL_7;
  }
  else if (!a6)
  {
    goto LABEL_7;
  }
  if (!*((_BYTE *)v21 + 24))
    sub_20B874EB8(*a7);
LABEL_7:
  _Block_object_dispose(&v20, 8);
}

void sub_20B8744B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  sub_20B811FE4(v24);
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_20B8744F0(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472AED0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472AED0))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472AEC8 = v74;
    __cxa_guard_release(&qword_25472AED0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472AED8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472AED8))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547281F0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472AED8);
  }
  std::mutex::lock(&stru_2547281F0);
  v8 = (_QWORD *)qword_25472AEC8;
  v9 = sub_20B828414(qword_25472AEC8 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BD38;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472AEC8;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_2547281F0);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20B874CEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472AED0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B874D7C(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  const void *v4;
  const void *v5;
  char v6;
  CFTypeRef v7;
  CFTypeRef v8;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v2 = operator new();
  v3 = *(CFTypeRef *)(a1 + 40);
  v4 = *(const void **)(a1 + 48);
  v5 = *(const void **)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 68);
  *(_DWORD *)v2 = *(_DWORD *)(a1 + 64);
  *(_BYTE *)(v2 + 4) = v6;
  if (v3)
    v3 = CFRetain(v3);
  *(_QWORD *)(v2 + 8) = v3;
  if (v4)
    v7 = CFRetain(v4);
  else
    v7 = 0;
  *(_QWORD *)(v2 + 16) = v7;
  if (v5)
    v8 = CFRetain(v5);
  else
    v8 = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = v8;
  sub_20B874EB8(v2);
  return v2;
}

void sub_20B874E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B876164((const void **)(v1 + 16), 0);
  sub_20B876164((const void **)(v1 + 8), 0);
  MEMORY[0x20BD39CB0](v1, 0x1060C40AE8A0077);
  _Unwind_Resume(a1);
}

void sub_20B874EB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __CFNotificationCenter *LocalCenter;
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  unint64_t v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  const __CFURL *v13;
  CFURLRef v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  _QWORD v18[6];
  std::string __p;
  CFURLRef v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v2 = operator new();
  sub_20B9C3B4C(v2, *(_DWORD *)a1, 0, *(const void **)(a1 + 8), *(const void **)(a1 + 16), off_2547295B8[0], *(const void **)(a1 + 24), 0, 0, 1u, *(_BYTE *)(a1 + 4));
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("LanguageModelDidChange"), 0, 0, 0);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v6 = sub_20B8D101C(*(_DWORD *)a1);
  sub_20B80BBD0(&v22, v6);
  v7 = std::string::append(&v22, "_Ngram-lm_", 0xAuLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = qword_25472AEA8++;
  std::to_string(&v21, v9);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v21;
  else
    v10 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, size);
  v24 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v13 = *(const __CFURL **)(a1 + 16);
  if (v13)
    v14 = CFURLCopyAbsoluteURL(v13);
  else
    v14 = 0;
  v15 = operator new();
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v16 = qword_25472C838;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1174405120;
  v18[2] = sub_20B875268;
  v18[3] = &unk_24C46CBE8;
  v18[4] = a1;
  v18[5] = v5;
  v17 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    sub_20B80ACE0(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    __p = v24;
  v20 = v14;
  sub_20B876344(v15, (__int128 *)&v24, v16, 1, v18);
  sub_20B87522C((uint64_t *)(a1 + 40), v15);
  sub_20B875474(a1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete(v24.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v17 < 0)
    goto LABEL_27;
}

void sub_20B87515C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  char v36;
  uint64_t v37;

  MEMORY[0x20BD39CB0](v35, 0x10F2C40E01BBEB9);
  if (v36 < 0)
    operator delete(*(void **)(v37 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_20B87522C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B876198(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B875268(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint8_t buf[4];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = sub_20B9A7C5C(0xDu);
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LanguageModelLoader::reload", "Deleting previous model", buf, 2u);
    }
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
    {
      v5 = sub_20B876198(v4);
      MEMORY[0x20BD39CB0](v5, 0x10F2C40E01BBEB9);
    }
  }
  v6 = sub_20B9A7C5C(0xDu);
  if (os_signpost_enabled(v6))
  {
    v7 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136315138;
    v12 = v7;
    _os_signpost_emit_with_name_impl(&dword_20B7F7000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LanguageModelLoader::reload", "Creating model with identifier [%s]", buf, 0xCu);
  }
  v8 = operator new();
  sub_20B9C3B4C(v8, *(_DWORD *)v2, 0, *(const void **)(v2 + 8), *(const void **)(a1 + 72), off_2547295B8[0], *(const void **)(v2 + 24), 0, 0, 0, *(_BYTE *)(v2 + 4));
  v9 = *(const void **)(a1 + 72);
  if (v9)
    CFRelease(v9);
  return v8;
}

void sub_20B875404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4004C96B00);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B875430(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
    return sub_20B80ACE0(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)result = v3;
  return result;
}

void sub_20B875460(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_20B875474(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFNotificationCenter *LocalCenter;

  v1 = (uint64_t *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    sub_20B87646C(*(_QWORD *)(a1 + 40));
    v4 = atomic_load((unsigned int *)(v2 + 40));
    if (v4 == 2)
    {
      if (*(_QWORD *)v2)
      {
        v5 = *(_QWORD *)(a1 + 40);
        sub_20B875584(v5, 0xFFFFFFFFFFFFFFFFLL, 0);
        std::mutex::lock((std::mutex *)(v5 + 48));
        atomic_store(3u, (unsigned int *)(v5 + 40));
        v6 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        std::mutex::unlock((std::mutex *)(v5 + 48));
        sub_20B9C46B8(v6, *(_QWORD *)(a1 + 32));
        sub_20B9C4198(v6, *(const __CFString **)(*(_QWORD *)(a1 + 32) + 16));
        sub_20B9C4244(v6, *(const __CFString **)(*(_QWORD *)(a1 + 32) + 24));
        v7 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v6;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterPostNotification(LocalCenter, CFSTR("LanguageModelDidChange"), 0, 0, 0);
        sub_20B87522C(v1, 0);
      }
    }
  }
}

uint64_t sub_20B875584(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  unsigned int v6;
  intptr_t v7;
  unsigned int v8;

  sub_20B87646C(a1);
  if (a2)
  {
    v6 = atomic_load((unsigned int *)(a1 + 40));
    if (v6 == 1)
    {
      v7 = dispatch_group_wait(*(dispatch_group_t *)(a1 + 8), a2);
      if (a3)
      {
        if (v7)
          (*(void (**)(uint64_t))(a3 + 16))(a3);
      }
    }
  }
  v8 = atomic_load((unsigned int *)(a1 + 40));
  if (v8 == 2)
    return *(_QWORD *)a1;
  else
    return 0;
}

uint64_t sub_20B875604(uint64_t a1)
{
  uint64_t v2;

  sub_20B87522C((uint64_t *)(a1 + 40), 0);
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B876164((const void **)(a1 + 24), 0);
  sub_20B876164((const void **)(a1 + 16), 0);
  sub_20B876164((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20B87566C(uint64_t a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a2, a3, CFSTR("LanguageModelDidChange"), 0, CFNotificationSuspensionBehaviorCoalesce);
}

void sub_20B8756A8(uint64_t a1, const void *a2)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a2, CFSTR("LanguageModelDidChange"), 0);
}

void sub_20B8756D8(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472AEB8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472AEB8))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472AEB0 = v74;
    __cxa_guard_release(&qword_25472AEB8);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472AEC0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472AEC0))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547281B0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472AEC0);
  }
  std::mutex::lock(&stru_2547281B0);
  v8 = (_QWORD *)qword_25472AEB0;
  v9 = sub_20B828414(qword_25472AEB0 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BC90;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472AEB0;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_2547281B0);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20B875ED4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472AEB8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B875F64(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B876344(v2, *(__int128 **)(a1 + 40), *(NSObject **)(a1 + 48), *(_BYTE *)(a1 + 56), *(const void **)(a1 + 32));
  return v2;
}

void sub_20B875FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F2C40E01BBEB9);
  _Unwind_Resume(a1);
}

void sub_20B875FD8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B875FFC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20B876198(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B876030(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E598))
    return a1 + 24;
  else
    return 0;
}

void sub_20B876070(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(std::__shared_weak_count **)(v1 + 48);
      if (v2)
        std::__shared_weak_count::__release_weak(v2);
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
}

void sub_20B8760CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8760F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20B875604(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B876124(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E5E0))
    return a1 + 24;
  else
    return 0;
}

void sub_20B876164(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B876198(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  dispatch_time_t v4;
  unsigned int v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned int *)(a1 + 40));
  if (v2 == 1)
  {
    v3 = (uint64_t *)(a1 + 112);
    do
    {
      v4 = dispatch_time(0, 1000000);
      if (sub_20B875584(a1, v4, 0))
        break;
      v5 = atomic_load((unsigned int *)(a1 + 40));
      if (v5 == 2)
        break;
      v6 = sub_20B9A7C5C(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8 = a1 + 112;
        if (*(char *)(a1 + 135) < 0)
          v8 = *v3;
        *(_DWORD *)buf = 136315138;
        v12 = v8;
        _os_log_error_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_ERROR, "Still waiting for resource [%s] to complete in background.", buf, 0xCu);
      }
      v7 = atomic_load((unsigned int *)(a1 + 40));
    }
    while (v7 == 1);
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  _Block_release(*(const void **)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (*(_BYTE *)(a1 + 144))
    std::mutex::unlock(*(std::mutex **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_20B876334(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B876344(uint64_t a1, __int128 *a2, NSObject *a3, char a4, const void *a5)
{
  void *v10;
  __int128 v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = dispatch_group_create();
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v10 = _Block_copy(a5);
  *(_QWORD *)(a1 + 48) = 850045863;
  *(_QWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0((_BYTE *)(a1 + 112), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 112) = v11;
  }
  *(_QWORD *)(a1 + 136) = a1 + 48;
  *(_BYTE *)(a1 + 144) = 0;
  dispatch_retain(a3);
  if ((a4 & 1) == 0)
    sub_20B87646C(a1);
  return a1;
}

void sub_20B876410(_Unwind_Exception *a1)
{
  uint64_t *v1;
  std::mutex *v2;
  uint64_t v4;

  std::mutex::~mutex(v2);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sub_20B87646C(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (unint64_t *)(a1 + 24);
  v5[0] = sub_20B8764CC;
  v5[1] = 0;
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7[0] = v5;
    v7[1] = &v4;
    v6 = v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_20B876564);
  }
}

void sub_20B8764CC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[4];

  sub_20B876588(a1 + 136);
  atomic_store(1u, (unsigned int *)(a1 + 40));
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v5[3] = a1;
  v2 = *(NSObject **)(a1 + 8);
  v3 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_20B8765E0;
  v4[3] = &unk_24C497B18;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_group_async(v2, v3, v4);
  _Block_object_dispose(v5, 8);
}

uint64_t sub_20B876564(uint64_t **a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = **a1;
  v2 = *(uint64_t (**)(_QWORD *))v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = (_QWORD *)(*(_QWORD *)(*a1)[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void sub_20B876588(uint64_t a1)
{
  std::mutex *v2;

  v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  sub_20B8765E0();
}

void sub_20B8765E0(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(std::mutex **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 144) = 0;
  v4 = sub_20B9A7C5C(0xDu);
  v5 = os_signpost_id_make_with_pointer(v4, (const void *)v2);
  v6 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      v8 = (_QWORD *)(v2 + 112);
      if (*(char *)(v2 + 135) < 0)
        v8 = (_QWORD *)*v8;
      v14 = 136315138;
      v15 = v8;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AsyncResourceInit", "Async resource load with key: [%s]", (uint8_t *)&v14, 0xCu);
    }
  }
  v9 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  v11 = *v9;
  *v9 = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  atomic_store(2u, (unsigned int *)(v2 + 40));
  v12 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v13, OS_SIGNPOST_INTERVAL_END, v5, "AsyncResourceInit", (const char *)&unk_20BA9505F, (uint8_t *)&v14, 2u);
    }
  }
  std::mutex::unlock(v3);
}

void sub_20B87676C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B876788(uint64_t a1, const __CFURL *a2)
{
  *(_QWORD *)a1 = &off_24C466D00;
  *(_QWORD *)(a1 + 8) = &off_24C458ED8;
  *(_DWORD *)(a1 + 16) = 0;
  sub_20B80627C((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_20B8789BC(a1 + 72);
  *(_BYTE *)(a1 + 416) = 0;
  sub_20B876828(a1, a2);
  return a1;
}

void sub_20B876804(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20B878A58(v2);
  sub_20B877278(v1);
  _Unwind_Resume(a1);
}

void sub_20B876828(uint64_t a1, const __CFURL *a2)
{
  char *v3;
  void **v4;
  int v5;
  char *v6;
  void *__p[2];
  char v8;
  CFURLRef url;
  stat buffer[7];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  sub_20B9F3EF0(CFSTR("th"), a2, CFSTR("BlockPhrase-th.dat"), 0, &url);
  if (CFURLGetFileSystemRepresentation(url, 1u, (UInt8 *)buffer, 1024))
    v3 = (char *)buffer;
  else
    v3 = (char *)&unk_20BA71DF9;
  sub_20B80BBD0(__p, v3);
  if (v8 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (stat((const char *)v4, buffer))
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    if (v8 >= 0)
      v6 = (char *)__p;
    else
      v6 = (char *)__p[0];
    v5 = sub_20B8769A0(a1 + 72, v6, "r");
    if (v5)
      LOBYTE(v5) = sub_20B876D60((uint64_t *)(a1 + 8), *(_QWORD **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  *(_BYTE *)(a1 + 416) = v5;
  if (v8 < 0)
    operator delete(__p[0]);
  if (url)
    CFRelease(url);
}

void sub_20B876950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8769A0(uint64_t a1, char *a2, const char *a3)
{
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  off_t st_size;
  void *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  size_t v46;
  stat v47;

  sub_20B878B18(a1);
  sub_20B80BBD0(&v47, a2);
  v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v47.st_dev;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v47.st_uid;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 340) = 0;
    v16 = open(a2, 0);
    *(_DWORD *)(a1 + 336) = v16;
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
    v18 = *(_QWORD *)(a1 + 48);
    v17 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(_QWORD *)(v18 - 24)), 0);
    v19 = sub_20B828F84(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_20B828F84(v19, (uint64_t)"(", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20B828F84(v20, (uint64_t)") [", 3);
    v22 = "(fd = ::open(filename, flag | O_BINARY)) >= 0";
    v23 = 45;
LABEL_15:
    v37 = sub_20B828F84(v21, (uint64_t)v22, v23);
    v13 = sub_20B828F84(v37, (uint64_t)"] ", 2);
    v14 = "open failed: ";
    v15 = 13;
    goto LABEL_19;
  }
  if (strcmp(a3, "r+"))
  {
    v8 = *(_QWORD *)(a1 + 48);
    v7 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(v8 - 24)), 0);
    v9 = sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_20B828F84(v9, (uint64_t)"(", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_20B828F84(v10, (uint64_t)") [", 3);
    v12 = sub_20B828F84(v11, (uint64_t)"false", 5);
    v13 = sub_20B828F84(v12, (uint64_t)"] ", 2);
    v14 = "unknown open mode: ";
    v15 = 19;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 340) = 514;
  v16 = open(a2, 514, 384);
  *(_DWORD *)(a1 + 336) = v16;
  if (v16 < 0)
  {
    v34 = *(_QWORD *)(a1 + 48);
    v33 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v33 + *(_QWORD *)(v34 - 24)), 0);
    v35 = sub_20B828F84(v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_20B828F84(v35, (uint64_t)"(", 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20B828F84(v36, (uint64_t)") [", 3);
    v22 = "(fd = ::open(filename, flag | O_BINARY, S_IRUSR | S_IWUSR)) >= 0";
    v23 = 64;
    goto LABEL_15;
  }
LABEL_9:
  if ((fstat(v16, &v47) & 0x80000000) == 0)
  {
    st_size = v47.st_size;
    *(_QWORD *)(a1 + 16) = v47.st_size;
    if (st_size)
    {
      v25 = mmap(0, st_size, *(_DWORD *)(a1 + 340) & 2 | 1u, 1, *(_DWORD *)(a1 + 336), 0);
      if (v25 == (void *)-1)
      {
        v40 = *(_QWORD *)(a1 + 48);
        v39 = (_QWORD *)(a1 + 48);
        std::ios_base::clear((std::ios_base *)((char *)v39 + *(_QWORD *)(v40 - 24)), 0);
        v41 = sub_20B828F84(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
        sub_20B828F84(v41, (uint64_t)"(", 1);
        v42 = (_QWORD *)std::ostream::operator<<();
        v43 = sub_20B828F84(v42, (uint64_t)") [", 3);
        v44 = sub_20B828F84(v43, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
        v13 = sub_20B828F84(v44, (uint64_t)"] ", 2);
        v14 = "mmap() failed: ";
        v15 = 15;
        goto LABEL_19;
      }
      v26 = v25;
      madvise(v25, *(_QWORD *)(a1 + 16), 1);
    }
    else
    {
      v26 = 0;
    }
    *(_QWORD *)(a1 + 8) = v26;
    close(*(_DWORD *)(a1 + 336));
    *(_DWORD *)(a1 + 336) = -1;
    return 1;
  }
  v28 = *(_QWORD *)(a1 + 48);
  v27 = (_QWORD *)(a1 + 48);
  std::ios_base::clear((std::ios_base *)((char *)v27 + *(_QWORD *)(v28 - 24)), 0);
  v29 = sub_20B828F84(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
  sub_20B828F84(v29, (uint64_t)"(", 1);
  v30 = (_QWORD *)std::ostream::operator<<();
  v31 = sub_20B828F84(v30, (uint64_t)") [", 3);
  v32 = sub_20B828F84(v31, (uint64_t)"::fstat(fd, &st) >= 0", 21);
  v13 = sub_20B828F84(v32, (uint64_t)"] ", 2);
  v14 = "failed to get file size: ";
  v15 = 25;
LABEL_19:
  v45 = sub_20B828F84(v13, (uint64_t)v14, v15);
  v46 = strlen(a2);
  sub_20B828F84(v45, (uint64_t)a2, v46);
  return 0;
}

uint64_t sub_20B876D60(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;

  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(_QWORD *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_20B806CD8(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  v7 = (char *)a2 + 4;
  v8 = *(unsigned int *)a2;
  sub_20B806CD8(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

uint64_t sub_20B876E18(uint64_t a1, const void **a2)
{
  unint64_t v3;
  uint64_t result;
  char *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  result = sub_20B878930(a1, v3 + 1);
  if (*(char *)(result + 23) >= 0)
    v5 = (char *)result;
  else
    v5 = *(char **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, 2 * v3);
  }
  *(_DWORD *)&v5[2 * v3] = 45;
  return result;
}

void sub_20B876EA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_20B807084((uint64_t *)(a1 + 16), a3, 2 * a4, a2, a5);
}

double sub_20B876EBC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_20B876EC8(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

uint64_t sub_20B876EDC(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  void *__p[2];
  __int128 v22;
  void *v23;
  std::string v24;
  void *v25;
  uint64_t v26;
  unsigned __int8 v27;

  if (!*(_BYTE *)(a1 + 416) || a3 >= (uint64_t)(a2[1] - *a2) >> 3)
    return 0;
  sub_20B876E18((uint64_t)&v25, (const void **)(*(_QWORD *)(*a2 + 8 * a3) + 56));
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v6 = v27;
  if ((v27 & 0x80u) == 0)
    v7 = &v25;
  else
    v7 = v25;
  if ((v27 & 0x80u) != 0)
    v6 = v26;
  v8 = (uint64_t *)(a1 + 24);
  sub_20B807084((uint64_t *)(a1 + 24), (uint64_t)v7, 2 * v6, (uint64_t)__p, &v23);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[1]);
  v9 = v23;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((char)v27 < 0)
    operator delete(v25);
  if (v9 == (void *)0xFFFFFFFFLL)
    return 0;
  sub_20B876E18((uint64_t)&v25, (const void **)(*(_QWORD *)(*a2 + 8 * a3) + 56));
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v12 = v27;
  if ((v27 & 0x80u) == 0)
    v13 = &v25;
  else
    v13 = v25;
  if ((v27 & 0x80u) != 0)
    v12 = v26;
  sub_20B807084((uint64_t *)(a1 + 24), (uint64_t)v13, 2 * v12, (uint64_t)__p, &v23);
  v14 = (uint64_t *)(a1 + 8);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[1]);
  v15 = a3;
  while (1)
  {
    v16 = v15;
    if ((int)v15 <= 0)
    {
LABEL_33:
      v20 = 1;
      goto LABEL_35;
    }
    v17 = *(_QWORD *)(*a2 + 8 * v15 - 8);
    if (*(char *)(v17 + 79) < 0)
    {
      v18 = *(_QWORD *)(v17 + 56);
      v19 = *(_QWORD *)(v17 + 64);
    }
    else
    {
      v18 = v17 + 56;
      v19 = *(unsigned __int8 *)(v17 + 79);
    }
    sub_20B807084(v8, v18, 2 * v19, (uint64_t)&v23, __p);
    v23 = __p[0];
    std::string::operator=(&v24, (const std::string *)&__p[1]);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[1]);
    if (v23 == (void *)0xFFFFFFFFLL)
      break;
    LODWORD(__p[0]) = 0;
    --v15;
    if (sub_20B87716C(v14, (uint64_t)&v23, __p))
      goto LABEL_33;
  }
  v20 = 0;
LABEL_35:
  if (v16 > 0)
    v10 = v20;
  else
    v10 = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((char)v27 < 0)
    operator delete(v25);
  return v10;
}

void sub_20B87710C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B87716C(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1))
    return 0;
  v8 = 0;
  v6 = sub_20B806F04(a1 + 2, a2, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a3 = sub_20B878464((uint64_t)a1, v8);
  return v6;
}

_QWORD *sub_20B8771E8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C466D00;
  v2 = a1 + 1;
  sub_20B878A58((uint64_t)(a1 + 9));
  sub_20B877278(v2);
  return a1;
}

void sub_20B877228(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_24C466D00;
  v1 = a1 + 1;
  sub_20B878A58((uint64_t)(a1 + 9));
  sub_20B877278(v1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B877278(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C458ED8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_20B806BC8(a1 + 2);
  return a1;
}

void sub_20B8772BC(_QWORD *a1)
{
  sub_20B877278(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8772E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *__p;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  unint64_t *v44;

  v37 = 0;
  v38 = 0;
  v39 = 0;
  __p = 0;
  v35 = 0;
  v36 = 0;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v10 = *(void **)(a3 + 8 * i);
      v11 = *(_QWORD *)(a4 + 8 * i) >> 1;
      v12 = v38;
      if ((unint64_t)v38 >= v39)
      {
        v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - v37) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * ((uint64_t)(v39 - v37) >> 3) > v15)
          v15 = 0x5555555555555556 * ((uint64_t)(v39 - v37) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v37) >> 3) >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        v44 = &v39;
        if (v16)
          v17 = (void **)sub_20B828D70((uint64_t)&v39, v16);
        else
          v17 = 0;
        v40 = v17;
        v41 = &v17[3 * v14];
        v42 = v41;
        v43 = &v17[3 * v16];
        sub_20B877ED0(v41, v10, v11);
        v42 += 3;
        sub_20B877F84(&v37, &v40);
        v13 = v38;
        sub_20B83BC3C((uint64_t)&v40);
      }
      else
      {
        sub_20B877ED0(v38, *(void **)(a3 + 8 * i), *(_QWORD *)(a4 + 8 * i) >> 1);
        v13 = v12 + 3;
      }
      v38 = v13;
      if (a5)
      {
        v18 = *(_QWORD *)(a5 + 8 * i);
        v19 = v35;
        if (v35 >= v36)
        {
          v21 = __p;
          v22 = (v35 - __p) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            sub_20B80CDD8();
          v24 = v36 - __p;
          if ((v36 - __p) >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)sub_20B8127BC((uint64_t)&v36, v25);
            v21 = __p;
            v19 = v35;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[4 * v22];
          *(_DWORD *)v27 = v18;
          v20 = v27 + 4;
          while (v19 != v21)
          {
            v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          __p = v27;
          v36 = &v26[4 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v35 = v18;
          v20 = v35 + 4;
        }
        v35 = v20;
      }
    }
  }
  v29 = *a1;
  if (a5)
    v30 = (*(uint64_t (**)(void))(v29 + 64))();
  else
    v30 = (*(uint64_t (**)(void))(v29 + 56))();
  v31 = v30;
  if (__p)
    operator delete(__p);
  v40 = (void **)&v37;
  sub_20B83AFD0(&v40);
  return v31;
}

void sub_20B87756C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_20B83AFD0((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8775C4(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3 >> 1, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_20B877608(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C4596B0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3 >> 1, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B8776A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8776E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C459658;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3 >> 1, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B877784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8777C0@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::value_type __s[4];
  void *__p[2];
  int64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_20B83BFEC((uint64_t)v14);
  sub_20B806E50(a1 + 2, (uint64_t)&v15);
  sub_20B871648((uint64_t)v16, __p);
  v4 = a1[4];
  if (v4)
  {
    v5 = HIBYTE(v13);
    if (v13 < 0)
      v5 = (int)__p[1];
    *(_DWORD *)__s = v5;
    v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v18);
}

void sub_20B877914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20B83C118((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B877954(uint64_t a1, uint64_t **a2)
{
  return sub_20B8782A8(a1, *a2, a2[1], 0);
}

uint64_t sub_20B877964(_QWORD *a1, uint64_t **a2, int **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v21;
  uint64_t v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3)
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  v9 = sub_20B8782A8((uint64_t)a1, v5, v6, &__p);
  if ((_DWORD)v9)
  {
    sub_20B873120((uint64_t)(a1 + 5), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    v10 = a1[5];
    v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      v12 = v11 / 24;
      v13 = *a3;
      v14 = (uint64_t *)__p;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        *(_DWORD *)(v10 + 4 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    v18 = (a1[6] - v10) >> 2;
    a1[3] = v10;
    a1[4] = v18;
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_20B877A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B877AB4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v6 = sub_20B806F64((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a4 = sub_20B878464(a1, v8);
  return v6;
}

_QWORD *sub_20B877B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C459600;
  v6[1] = a1;
  v6[2] = a4;
  v7 = v6;
  sub_20B806FC4((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B877BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B877BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C4595A8;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  sub_20B807024((unint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v7, (a5 << (a5 > 0)));
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20B877C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B877CD8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v10[0] = &off_24C4594F8;
    v10[1] = a1;
    v10[2] = a3;
    v11 = v10;
    sub_20B8070E4(a1 + 2, a2, (uint64_t)v10, a4);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_20B877DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B877DD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v8[0] = &off_24C459550;
    v8[1] = a3;
    v9 = v8;
    sub_20B807144(a1 + 2, a2, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  return result;
}

void sub_20B877E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B877ED0(_QWORD *__dst, void *__src, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  if (a3 >= 0xB)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v7 = a3 | 3;
    v6 = sub_20B80FD48((uint64_t)__dst, v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
    v6 = __dst;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

void sub_20B877F70()
{
  sub_20B80AD80("basic_string");
}

uint64_t sub_20B877F84(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B877FF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B877FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_20B878094((uint64_t)v12);
  return a6;
}

uint64_t sub_20B878094(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83BBF8(a1);
  return a1;
}

void sub_20B8780CC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8780E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C4596B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B878114(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C4596B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B878130(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_20B878198(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_20B878150(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458EB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B87818C()
{
  return &unk_24C458EB8;
}

uint64_t sub_20B878198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a3;
  v7[1] = a4;
  v6 = a2;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v6, v7, a5);
}

void sub_20B8781DC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8781F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459658;
  result[1] = v3;
  return result;
}

uint64_t sub_20B878224(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459658;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B878240(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_20B878198(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_20B878260(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458EA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B87829C()
{
  return &unk_24C458EA8;
}

uint64_t sub_20B8782A8(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void *__p;
  char *v23;
  char *v24;

  __p = 0;
  v23 = 0;
  v24 = 0;
  if (a2 != a3)
  {
    v7 = a2;
    v8 = 0;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        v10 = (uint64_t *)*v7;
        v9 = v7[1];
      }
      else
      {
        v9 = *((unsigned __int8 *)v7 + 23);
        v10 = v7;
      }
      v11 = 2 * v9;
      if (v8 >= v24)
      {
        v12 = (v8 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_20B80CDD8();
        v13 = (v24 - (_BYTE *)__p) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)(v24 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v15 = (char *)sub_20B829AD0((uint64_t)&v24, v14);
        v17 = &v15[16 * v12];
        *(_QWORD *)v17 = v10;
        *((_QWORD *)v17 + 1) = v11;
        v19 = (char *)__p;
        v18 = v23;
        v20 = v17;
        if (v23 != __p)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
            v20 -= 16;
            v18 -= 16;
          }
          while (v18 != v19);
          v18 = (char *)__p;
        }
        v8 = v17 + 16;
        __p = v20;
        v23 = v17 + 16;
        v24 = &v15[16 * v16];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = v11;
        v8 += 16;
      }
      v23 = v8;
      v7 += 3;
    }
    while (v7 != a3);
  }
  sub_20B806BCC((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    v23 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

unint64_t sub_20B878464(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20B83B36C(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_24C457EA0, MEMORY[0x24BEDAB00]);
    }
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_20B8784C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B8784E0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8784F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C459600;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B87852C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C459600;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B87854C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  v8 = sub_20B878464(*(_QWORD *)(a1 + 8), *a2);
  return sub_20B8785E8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_20B8785A0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8785DC()
{
  return &unk_24C458E98;
}

uint64_t sub_20B8785E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  _QWORD v7[2];

  v7[0] = a3;
  v7[1] = a4;
  v6 = a2;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, int *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v6, v7, a5);
}

void sub_20B87862C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B878640(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4595A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B878678(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4595A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B878698(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  v8 = sub_20B878464(*(_QWORD *)(a1 + 8), *a2);
  return sub_20B8785E8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_20B8786EC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E88))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B878728()
{
  return &unk_24C458E88;
}

void sub_20B878738()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B87874C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4594F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B878784(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4594F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B8787A4(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  v8 = sub_20B878464(*(_QWORD *)(a1 + 8), *a2);
  return sub_20B8785E8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_20B8787F8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E68))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B878834()
{
  return &unk_24C458E68;
}

void sub_20B878844()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B878858(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459550;
  result[1] = v3;
  return result;
}

uint64_t sub_20B87888C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459550;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B8788A8(uint64_t a1, char *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = *a2;
  if (!v2)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t sub_20B8788E8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E78))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B878924()
{
  return &unk_24C458E78;
}

uint64_t sub_20B878930(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  if (a2 > 0xA)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB)
      v4 = a2 | 3;
    v5 = v4 + 1;
    if (v4 + 1 < 0)
      sub_20B800BC0();
    v6 = operator new(2 * v5);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_20B8789BC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C467460;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20B827F10(a1 + 48);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_20B878A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20B878A34(uint64_t a1)
{
  sub_20B878A58(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B878A58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_24C467460;
  sub_20B878B18(a1);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 160);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void *sub_20B878B18(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 336);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 336) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_20B878B5C(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  const UInt8 *v6;
  int v7;
  const UInt8 *v8;
  CFIndex v9;
  const __CFURL *v10;
  CFPropertyListRef v11;
  CFTypeID v12;
  const __CFArray *Value;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  CFIndex j;
  const void *v17;
  const __CFArray *v18;
  CFIndex k;
  const __CFArray *v20;
  CFIndex m;
  const void *v22;

  *(_DWORD *)a1 = sub_20B8D0E3C(*a2);
  *(_QWORD *)(a1 + 8) = a2;
  v4 = sub_20B8D0E3C(*a2);
  sub_20B878DF8(v4, 0, (uint64_t *)(a1 + 16));
  v5 = (_QWORD *)sub_20B9AE60C();
  v6 = (const UInt8 *)sub_20B9AE6A0(v5, *(_DWORD *)a1, off_254729648[0], off_254729600[0]);
  v7 = *((char *)v6 + 23);
  if (v7 >= 0)
    v8 = v6;
  else
    v8 = *(const UInt8 **)v6;
  if (v7 >= 0)
    v9 = v6[23];
  else
    v9 = *((_QWORD *)v6 + 1);
  v10 = CFURLCreateFromFileSystemRepresentation(0, v8, v9, 0);
  v11 = sub_20B8D26E4(v10);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a1 + 40) = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 32) = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (v11)
  {
    v12 = CFGetTypeID(v11);
    if (v12 == CFDictionaryGetTypeID())
    {
      Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v11, CFSTR("no tone change"));
      if (Value)
      {
        for (i = 0; i < CFArrayGetCount(Value); ++i)
        {
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, i);
          for (j = 0; j < CFArrayGetCount(ValueAtIndex); ++j)
          {
            v17 = CFArrayGetValueAtIndex(ValueAtIndex, j);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v17, ValueAtIndex);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v17, ValueAtIndex);
          }
        }
      }
      v18 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v11, CFSTR("tone change"));
      if (v18)
      {
        for (k = 0; k < CFArrayGetCount(v18); ++k)
        {
          v20 = (const __CFArray *)CFArrayGetValueAtIndex(v18, k);
          for (m = 0; m < CFArrayGetCount(v20); ++m)
          {
            v22 = CFArrayGetValueAtIndex(v20, m);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v22, v20);
          }
        }
      }
    }
    CFRelease(v11);
  }
  return a1;
}

void sub_20B878D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20B87AA1C((const void **)va, 0);
  sub_20B811FE4(v2);
  _Unwind_Resume(a1);
}

void sub_20B878DF8(unsigned int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char *v6;
  unsigned __int8 *v7;
  _QWORD v8[5];
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  void *v14;
  char v15;

  v6 = sub_20B8D101C(a1);
  v7 = (unsigned __int8 *)sub_20B80BBD0(&v14, v6);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B87A1C8;
  v8[3] = &unk_24C46BFC0;
  v8[4] = &v10;
  v9 = a1;
  sub_20B879E18(v7, (uint64_t)v8, 0, a3);
  if (a2 && !*((_BYTE *)v11 + 24))
    sub_20B87A240(*a3);
  _Block_object_dispose(&v10, 8);
  if (v15 < 0)
    operator delete(v14);
}

void sub_20B878ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  sub_20B811FE4(v8);
  _Block_object_dispose(va, 8);
  if (*(char *)(v9 - 33) < 0)
    operator delete(*(void **)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20B878F04(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  sub_20B811FE4(a1 + 16);
  return a1;
}

uint64_t sub_20B878F40(uint64_t a1, uint64_t a2, unint64_t a3, double *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v10;
  unint64_t v11;
  int v12;
  char *v13;
  int *v14;
  char *v15;
  int *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  int *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  int v77;
  char *v78;
  uint64_t v79;
  int v80;
  double v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  char *__p;
  char *v92;

  *a4 = 0.0;
  __p = 0;
  v92 = 0;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v4)
    return v4;
  v5 = a3;
  v89 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v6 = v4 >> 2;
  v7 = (v4 >> 2) + 1;
  v4 = 1;
  if (v7 <= a3)
    return v4;
  v90 = a3 + 2;
  v88 = v6;
  v86 = v6 - 1;
  v87 = v6 - 2;
  do
  {
    v10 = __p;
    if (!v5)
    {
      v12 = **(_DWORD **)a2;
      if (__p < v92)
      {
        *(_DWORD *)__p = 1;
        v15 = __p + 4;
        goto LABEL_104;
      }
      v19 = (v92 - __p) >> 1;
      if (v19 <= 1)
        v19 = 1;
      if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v22 = (char *)sub_20B8127BC((uint64_t)&v92, v20);
      v23 = __p;
      v24 = __p;
      *(_DWORD *)v22 = 1;
      v15 = v22 + 4;
      v25 = v22;
      while (v24 != __p)
      {
        v26 = *((_DWORD *)v24 - 1);
        v24 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      v27 = &v22[4 * v21];
      __p = v25;
      goto LABEL_102;
    }
    if (v89 == 4)
      goto LABEL_118;
    v11 = v5 - 1;
    if (v5 == 1)
    {
      v12 = *(_DWORD *)(*(_QWORD *)a2 + 4);
      v13 = v92;
      if (__p >= v92)
      {
        v28 = (v92 - __p) >> 1;
        if (v28 <= 1)
          v28 = 1;
        if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        v31 = sub_20B8127BC((uint64_t)&v92, v29);
        v32 = __p;
        v33 = __p;
        *v31 = 1;
        v14 = v31 + 1;
        v34 = (char *)v31;
        while (v33 != __p)
        {
          v35 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        v13 = (char *)&v31[v30];
        __p = v34;
        v92 = v13;
        if (v32)
        {
          operator delete(v32);
          v13 = v92;
        }
      }
      else
      {
        *(_DWORD *)__p = 1;
        v14 = (int *)(__p + 4);
      }
      v39 = *(int **)a2;
      if (v14 < (int *)v13)
      {
        *v14 = *v39;
        v40 = (char *)(v14 + 1);
LABEL_65:
        v15 = v40;
        goto LABEL_104;
      }
      v23 = __p;
      v41 = ((char *)v14 - __p) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        goto LABEL_123;
      v43 = v13 - __p;
      if (v43 >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)sub_20B8127BC((uint64_t)&v92, v44);
        v23 = __p;
      }
      else
      {
        v45 = 0;
      }
      v73 = &v45[4 * v41];
      *(_DWORD *)v73 = *v39;
      v15 = v73 + 4;
      while (v14 != (int *)v23)
      {
        v74 = *--v14;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
LABEL_101:
      v27 = &v45[4 * v44];
      __p = v73;
LABEL_102:
      v92 = v27;
      if (v23)
        operator delete(v23);
      goto LABEL_104;
    }
    v16 = *(int **)a2;
    if (v5 != v88)
    {
      v12 = v16[v5];
      v36 = v5 - 2;
      v37 = v92;
      if (__p >= v92)
      {
        v54 = (v92 - __p) >> 1;
        if (v54 <= 1)
          v54 = 1;
        if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        v57 = (char *)sub_20B8127BC((uint64_t)&v92, v55);
        v58 = __p;
        v59 = __p;
        *(_DWORD *)v57 = v16[v36];
        v38 = v57 + 4;
        v60 = v57;
        while (v59 != __p)
        {
          v61 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        v37 = &v57[4 * v56];
        __p = v60;
        v92 = v37;
        if (v58)
        {
          operator delete(v58);
          v37 = v92;
        }
      }
      else
      {
        *(_DWORD *)__p = v16[v36];
        v38 = __p + 4;
      }
      v69 = *(int **)a2;
      if (v38 < v37)
      {
        *(_DWORD *)v38 = v69[v11];
        v15 = v38 + 4;
        goto LABEL_104;
      }
      v23 = __p;
      v70 = (v38 - __p) >> 2;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 62)
LABEL_123:
        sub_20B80CDD8();
      v72 = v37 - __p;
      if (v72 >> 1 > v71)
        v71 = v72 >> 1;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v71;
      if (v44)
      {
        v45 = (char *)sub_20B8127BC((uint64_t)&v92, v44);
        v23 = __p;
      }
      else
      {
        v45 = 0;
      }
      v73 = &v45[4 * v70];
      *(_DWORD *)v73 = v69[v11];
      v15 = v73 + 4;
      while (v38 != v23)
      {
        v77 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *((_DWORD *)v73 - 1) = v77;
        v73 -= 4;
      }
      goto LABEL_101;
    }
    v17 = v92;
    if (__p >= v92)
    {
      v46 = (v92 - __p) >> 1;
      if (v46 <= 1)
        v46 = 1;
      if ((unint64_t)(v92 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v49 = (char *)sub_20B8127BC((uint64_t)&v92, v47);
      v50 = __p;
      v51 = __p;
      *(_DWORD *)v49 = v16[v87];
      v18 = v49 + 4;
      v52 = v49;
      while (v51 != __p)
      {
        v53 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v52 - 1) = v53;
        v52 -= 4;
      }
      v17 = &v49[4 * v48];
      __p = v52;
      v92 = v17;
      if (v50)
      {
        operator delete(v50);
        v17 = v92;
      }
    }
    else
    {
      *(_DWORD *)__p = v16[v87];
      v18 = __p + 4;
    }
    v62 = *(int **)a2;
    if (v18 < v17)
    {
      *(_DWORD *)v18 = v62[v86];
      v40 = v18 + 4;
      v12 = 2;
      goto LABEL_65;
    }
    v63 = __p;
    v64 = (v18 - __p) >> 2;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62)
      goto LABEL_123;
    v66 = v17 - __p;
    if (v66 >> 1 > v65)
      v65 = v66 >> 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
      v67 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      v68 = (char *)sub_20B8127BC((uint64_t)&v92, v67);
      v63 = __p;
    }
    else
    {
      v68 = 0;
    }
    v75 = &v68[4 * v64];
    *(_DWORD *)v75 = v62[v86];
    v15 = v75 + 4;
    while (v18 != v63)
    {
      v76 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v75 - 1) = v76;
      v75 -= 4;
    }
    __p = v75;
    v92 = &v68[4 * v67];
    if (v63)
      operator delete(v63);
    v12 = 2;
LABEL_104:
    v78 = __p;
    v79 = (v15 - __p) >> 2;
    if (v79 == 2)
    {
      v80 = *((_DWORD *)__p + 1);
      if (*(_DWORD *)__p == v80 || v12 == *(_DWORD *)__p || v12 == v80)
      {
LABEL_120:
        v4 = 0;
LABEL_121:
        v84 = v4;
        operator delete(v78);
        return v84;
      }
    }
    else if (v79 == 1 && v12 == *(_DWORD *)__p)
    {
      goto LABEL_120;
    }
    LMLanguageModelConditionalProbability();
    *a4 = *a4 - v83;
    if ((uint64_t)v5 >= v90)
      break;
    ++v5;
  }
  while (v5 < v7);
  v10 = __p;
LABEL_118:
  v4 = 1;
  v78 = v10;
  if (v10)
    goto LABEL_121;
  return v4;
}

void sub_20B879500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_20B879520(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  const __CFDictionary *v8;
  const __CFAllocator **v9;
  uint64_t v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const __CFAllocator *v14;
  const __CFString *v15;
  CFStringRef v16;
  const __CFArray *Value;
  CFIndex v18;
  double v19;
  const __CFString *ValueAtIndex;
  _BYTE *v21;
  double v22;
  char *v23;
  char *v24;
  char *v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFIndex Length;
  CFIndex v33;
  int CharacterAtIndex;
  int v35;
  int v36;
  const __CFAllocator *v37;
  const CFArrayCallBacks *v38;
  void *v40;
  __CFArray *Mutable;
  CFIndex v42;
  double v43;
  int v44;
  void *__p;
  void *v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  double v50[2];
  CFRange v51;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2);
  v7 = 40;
  if (v6 == 1)
    v7 = 32;
  v8 = *(const __CFDictionary **)(a1 + v7);
  v9 = (const __CFAllocator **)MEMORY[0x24BDBD240];
  if (!v8 || !CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + v7)))
  {
    v37 = *v9;
    v38 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    return CFArrayCreate(v37, 0, 0, v38);
  }
  v50[0] = 0.0;
  v10 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 120))(a2, a3);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v13 = v12;
  v14 = *v9;
  v15 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v51.location = v11;
  v51.length = v13;
  v16 = CFStringCreateWithSubstring(v14, v15, v51);
  if (!CFDictionaryContainsKey(v8, v16))
  {
    CFRelease(v16);
    v38 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    v37 = v14;
    return CFArrayCreate(v37, 0, 0, v38);
  }
  sub_20B9C7AE0(a2, (char **)&v48);
  if ((sub_20B878F40(a1, (uint64_t)&v48, a3, v50) & 1) == 0)
  {
    CFRelease(v16);
    Mutable = CFArrayCreate(v14, 0, 0, MEMORY[0x24BDBD690]);
    goto LABEL_37;
  }
  Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x24BDBD690]);
  Value = (const __CFArray *)CFDictionaryGetValue(v8, v16);
  if (!Value)
    goto LABEL_36;
  v42 = 0;
  v18 = 0;
  v19 = v50[0];
  while (v18 < CFArrayGetCount(Value))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, v18);
    if (CFStringCompare(v16, ValueAtIndex, 0) == kCFCompareEqualTo)
      goto LABEL_20;
    __p = 0;
    v46 = 0;
    v47 = 0;
    sub_20B873D0C(&__p, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 2);
    v44 = 0;
    sub_20B968A64(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), ValueAtIndex, &v44);
    *((_DWORD *)__p + a3) = v44;
    v43 = 0.0;
    if ((sub_20B878F40(a1, (uint64_t)&__p, a3, &v43) & 1) != 0)
    {
      v21 = sub_20B9547EC();
      if (*v21 && (v21[8] & 0x40) != 0)
      {
        v40 = sub_20B9547EC();
        v23 = (char *)operator new[]();
        v24 = (char *)operator new[]();
        v25 = (char *)operator new[]();
        v26 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        CFStringGetCString(v26, v23, 1024, 0x8000100u);
        CFStringGetCString(v16, v24, 1024, 0x8000100u);
        CFStringGetCString(ValueAtIndex, v25, 1024, 0x8000100u);
        v22 = v43;
        sub_20B954D48((uint64_t)v40, 0x40u, (uint64_t)"Base phrase: %s baseScore=%f candidateWord: %s homophoneForWord: %s homophoneScore=%f\n", v27, v28, v29, v30, v31, (uint64_t)v23);
        MEMORY[0x20BD39C80](v23, 0x1000C8077774924);
        MEMORY[0x20BD39C80](v24, 0x1000C8077774924);
        MEMORY[0x20BD39C80](v25, 0x1000C8077774924);
      }
      else
      {
        v22 = v43;
      }
      if (vabdd_f64(v22, v19) >= 1.79999995)
      {
        Length = CFStringGetLength(v16);
        v33 = Length;
        if (!Length || Length > 2)
          goto LABEL_18;
        CharacterAtIndex = CFStringGetCharacterAtIndex(v16, 0);
        v35 = CharacterAtIndex;
        if (v33 == 1)
        {
          if (CharacterAtIndex != 20320 && CharacterAtIndex != 22963)
            goto LABEL_18;
        }
        else
        {
          v36 = CFStringGetCharacterAtIndex(v16, 1);
          if (v35 != 22963 && v35 != 20320 || v36 != 20497)
            goto LABEL_18;
        }
      }
      CFArraySetValueAtIndex(Mutable, v42++, ValueAtIndex);
    }
LABEL_18:
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
LABEL_20:
    ++v18;
  }
  sub_20B9689BC(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8));
LABEL_36:
  CFRelease(v16);
LABEL_37:
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  return Mutable;
}

void sub_20B8799B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B879A0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  unint64_t v5;
  const __CFArray *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *ValueAtIndex;
  uint64_t v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  __CFString *MutableCopy;
  CFIndex v17;
  CFIndex v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t **v37;
  const __CFString *v38;
  const __CFArray *v39;
  CFIndex v40;
  CFIndex Length;
  const __CFAllocator *alloc;
  const __CFString *theString;
  int v45;
  CFIndex idx;
  int v47;
  void *__p[3];
  CFRange v49;
  CFRange v50;

  v5 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (1)
  {
    if (v5 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
      return;
    v6 = sub_20B879520(a1, a2, v5);
    if (CFArrayGetCount(v6) >= 1)
      break;
    CFRelease(v6);
    ++v5;
  }
  v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  Length = CFStringGetLength(v7);
  v8 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v40 = CFStringGetLength(v8);
  theString = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v9 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v45 = 0;
  idx = 0;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v38 = v9;
  v39 = v6;
  while (idx < CFArrayGetCount(v6))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, idx);
    v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 120))(a2, v5);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v14 = v13;
    if (Length >= v40)
    {
      MutableCopy = 0;
    }
    else
    {
      v15 = CFStringGetLength(theString);
      MutableCopy = CFStringCreateMutableCopy(alloc, v15, theString);
      v17 = sub_20B9D5574(theString, v9, v12 + v14);
      if (v17 < 1)
        goto LABEL_37;
      v49.location = v17 - v14;
      v49.length = v14;
      CFStringReplace(MutableCopy, v49, ValueAtIndex);
    }
    v18 = CFStringGetLength(v9);
    v19 = CFStringCreateMutableCopy(alloc, v18, v9);
    v50.location = v12;
    v50.length = v14;
    CFStringReplace(v19, v50, ValueAtIndex);
    sub_20B9C7AE0(a2, (char **)__p);
    v47 = 0;
    sub_20B968A64(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), ValueAtIndex, &v47);
    v20 = a1;
    *((_DWORD *)__p[0] + v5) = v47;
    v21 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + ++v45;
    if (MutableCopy)
      v22 = MutableCopy;
    else
      v22 = v19;
    v23 = (*(uint64_t (**)(uint64_t, __CFString *, __CFString *, void **, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a2 + 544))(a2, v19, v22, __p, v21, 10, v5);
    v24 = v23;
    if (v23)
    {
      v26 = a3[1];
      v25 = (unint64_t)a3[2];
      if ((unint64_t)v26 >= v25)
      {
        v28 = *a3;
        v29 = v26 - *a3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          sub_20B80CDD8();
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          if (v32 >> 61)
            sub_20B800BC0();
          v33 = v32;
          v34 = (char *)operator new(8 * v32);
          v32 = v33;
        }
        else
        {
          v34 = 0;
        }
        v35 = (uint64_t *)&v34[8 * v29];
        *v35 = v24;
        v27 = v35 + 1;
        if (v26 == v28)
        {
          v37 = a3;
        }
        else
        {
          do
          {
            v36 = *--v26;
            *--v35 = v36;
          }
          while (v26 != v28);
          v37 = a3;
          v26 = *a3;
        }
        *v37 = v35;
        v37[1] = v27;
        v37[2] = (uint64_t *)&v34[8 * v32];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v26 = v23;
        v27 = v26 + 1;
      }
      a3[1] = v27;
    }
    CFRelease(v19);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    a1 = v20;
    v9 = v38;
    v6 = v39;
LABEL_37:
    if (MutableCopy)
      CFRelease(MutableCopy);
    ++idx;
  }
  sub_20B9689BC(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8));
  if (v6)
    CFRelease(v6);
}

void sub_20B879DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v22;

  v22 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B879E18(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  NSObject *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _BYTE buf[24];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254728238);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254728238))
  {
    v36 = operator new();
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_DWORD *)(v36 + 32) = 1065353216;
    qword_254728230 = v36;
    __cxa_guard_release(&qword_254728238);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254728280);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254728280))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254728240, &dword_20B7F7000);
    __cxa_guard_release(&qword_254728280);
  }
  v37 = 0;
  v38 = 0;
  std::mutex::lock(&stru_254728240);
  v10 = sub_20B87A31C((_QWORD *)qword_254728230, a1);
  v11 = v10;
  if (v10
    && (v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6)) != 0
    && (v12->__shared_owners_ != -1 ? (v13 = a3 == 0) : (v13 = 0), v13))
  {
    v28 = std::__shared_weak_count::lock(v12);
    if (v28)
      v29 = *((_QWORD *)v11 + 5);
    else
      v29 = 0;
    v37 = v29;
    v38 = v28;
  }
  else
  {
    v14 = sub_20B9A7C5C(0xDu);
    v15 = os_signpost_id_make_with_pointer(v14, a1);
    v16 = sub_20B9A7C5C(0xDu);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v17 = v16;
      if (os_signpost_enabled(v16))
      {
        if ((a1[23] & 0x80u) == 0)
          v18 = a1;
        else
          v18 = *(unsigned __int8 **)a1;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v18;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    sub_20B87A2AC(&v37, v19);
    v21 = v37;
    v20 = v38;
    if (v38)
    {
      p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
      do
        v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)buf = a1;
    v24 = sub_20B87A5E8(qword_254728230, a1, (uint64_t)&unk_20BA37B7A, (__int128 **)buf);
    v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
    *((_QWORD *)v24 + 5) = v21;
    *((_QWORD *)v24 + 6) = v20;
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
    v26 = sub_20B9A7C5C(0xDu);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = v26;
      if (os_signpost_enabled(v26))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v27, OS_SIGNPOST_INTERVAL_END, v15, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
  std::mutex::unlock(&stru_254728240);
  v30 = v38;
  *a4 = v37;
  a4[1] = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = v38;
    if (v38)
    {
      v34 = (unint64_t *)&v38->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_20B87A16C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254728238);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87A1C8(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v2 = operator new();
  sub_20B87A9A0(v2, *(_DWORD *)(a1 + 40));
  return v2;
}

void sub_20B87A21C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B87A240(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new();
  sub_20B9688B8(v2, *(_DWORD *)a1);
  return sub_20B87A55C((_QWORD **)(a1 + 8), v2);
}

void sub_20B87A288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void sub_20B87A2AC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20B87A41C(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

unsigned __int8 *sub_20B87A31C(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_20B828414((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_20B8288BC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *sub_20B87A41C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24C46BD70;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_20B87A598(&v6, 0);
  return a1;
}

void sub_20B87A490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87A598((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B87A4AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B87A4D0(uint64_t a1)
{
  sub_20B87A518(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20B87A4D8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E5F8))
    return a1 + 24;
  else
    return 0;
}

void sub_20B87A518(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B87A55C((_QWORD **)(a2 + 8), 0);
    JUMPOUT(0x20BD39CB0);
  }
}

_QWORD *sub_20B87A55C(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B96898C(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t *sub_20B87A598(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B87A55C((_QWORD **)(v2 + 8), 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

unsigned __int8 *sub_20B87A5E8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20B828414(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20B8288BC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20B87A880(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20B828960(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_20B87A91C((uint64_t)v26, 0);
  return i;
}

void sub_20B87A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B87A91C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B87A880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20B80ACE0(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20B87A904(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B87A91C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B87A91C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B87A960((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20B87A960(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B87A9A0(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;

  *(_DWORD *)a1 = a2;
  v4 = (uint64_t *)operator new();
  sub_20B9688B8(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

void sub_20B87A9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void sub_20B87AA1C(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B87AA50(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v6 = (_QWORD *)sub_20B9AA1C8(a1, a2, 0, a4);
  *v6 = &off_24C4687D0;
  v7 = a3[1];
  v6[6] = *a3;
  v6[7] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20B87AAB4(a1, (uint64_t)a3);
  return a1;
}

uint64_t sub_20B87AAB4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = *(_QWORD *)(result + 32);
  v3 = v2 | 0x10;
  *(_QWORD *)(result + 32) = v2 | 0x10;
  v4 = *(_BYTE **)a2;
  if (*(_BYTE *)(*(_QWORD *)a2 + 237))
  {
    v3 = v2 | 0x11;
    *(_QWORD *)(result + 32) = v2 | 0x11;
  }
  if (v4[238])
  {
    v3 |= 2uLL;
    *(_QWORD *)(result + 32) = v3;
  }
  if (v4[236])
  {
    v3 |= 4uLL;
    *(_QWORD *)(result + 32) = v3;
  }
  if (v4[239])
    *(_QWORD *)(result + 32) = v3 | 8;
  return result;
}

uint64_t sub_20B87AB0C(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, _QWORD *a5, int a6)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v8 = (_QWORD *)sub_20B9AA2B0(a1, a2, *a3, a3[1], *(unsigned __int16 **)a4, *(_QWORD *)(a4 + 8), a6);
  *v8 = &off_24C4687D0;
  v9 = a5[1];
  v8[6] = *a5;
  v8[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_20B87AAB4(a1, (uint64_t)a5);
  return a1;
}

_QWORD *sub_20B87AB80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20B87ACC8(a2, *(const void **)(v2 + 56), *(_QWORD *)(v2 + 64), (uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 1);
}

_QWORD *sub_20B87ABA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = v2 + 80;
  v4 = 80;
  if (*(_QWORD *)(v2 + 88) == *(_QWORD *)(v2 + 80))
  {
    v4 = 56;
    v3 = v2 + 56;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20B87ACC8(a2, *(const void **)(v2 + v4), *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)(v2 + v4)) >> 1);
}

_QWORD *sub_20B87ABE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;

  v3 = sub_20B9C9594(*(_QWORD *)(a1 + 48));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20B87ACC8(a2, *v3, (uint64_t)v3[1], ((_BYTE *)v3[1] - (_BYTE *)*v3) >> 1);
}

_QWORD *sub_20B87AC24(_QWORD *a1)
{
  *a1 = &off_24C4687D0;
  sub_20B811FE4((uint64_t)(a1 + 6));
  return a1;
}

void sub_20B87AC54(_QWORD *a1)
{
  *a1 = &off_24C4687D0;
  sub_20B811FE4((uint64_t)(a1 + 6));
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B87AC94(uint64_t a1)
{
  const __CFString *v1;

  v1 = (const __CFString *)sub_20B9C9348(*(_QWORD *)(a1 + 48));
  return (unsigned __int16)CFStringGetLength(v1);
}

uint64_t sub_20B87ACB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

const void *sub_20B87ACC0(uint64_t a1)
{
  return sub_20B9C9348(*(_QWORD *)(a1 + 48));
}

_QWORD *sub_20B87ACC8(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B80FD0C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B87AD24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_20B87AD40(uint64_t a1, _WORD *a2, unsigned int a3)
{
  __int16 v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 85)
  {
    v6 = 2;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 76)
  {
    v6 = 4;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 65)
  {
    v6 = 8;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != 71)
      goto LABEL_10;
    v6 = 256;
  }
  *a2 |= v6;
LABEL_10:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1))
    *a2 |= 0x10u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    *a2 |= 0x20u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    *a2 |= 0x40u;
  if (a3 <= 5 && ((1 << a3) & 0x26) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1))
      *a2 |= 1u;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1))
      *a2 |= 0x80u;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1))
      *a2 |= 0x200u;
  }
  return a2;
}

_WORD *sub_20B87AED0(_WORD *result)
{
  uint64_t v1;
  _WORD *v2;
  unint64_t v3;
  uint64_t v4;
  __int16 v5;

  v5 = 0;
  v1 = *((_QWORD *)result + 6);
  if (*((_QWORD *)result + 7) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v1 + 8 * v3);
      result = sub_20B87AD40(v4, &v5, 0);
      *(_WORD *)(v4 + 16) = v5;
      ++v3;
      v1 = *((_QWORD *)v2 + 6);
    }
    while (v3 < (*((_QWORD *)v2 + 7) - v1) >> 3);
  }
  return result;
}

__int128 *sub_20B87AF40()
{
  unsigned __int8 v0;
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C808);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472C808))
  {
    xmmword_25472C7E0 = 0u;
    *(_OWORD *)&qword_25472C7F0 = 0u;
    dword_25472C800 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_20B87AFF8, &xmmword_25472C7E0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C808);
  }
  v1 = atomic_load(&qword_25472C810);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_25472C810, &v4, (void (__cdecl *)(void *))sub_20B87CE34);
  }
  return &xmmword_25472C7E0;
}

uint64_t sub_20B87AFF8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20B87CDF0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20B87B054(int a1, _WORD *a2, int a3, int a4, _WORD *a5, uint64_t a6, _QWORD *a7, uint64_t *a8, unsigned __int16 a9)
{
  unsigned __int16 v10;
  unint64_t v11;
  int v12;
  uint64_t i;
  int v14;
  BOOL v15;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  int32_t v28;
  int32_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char v36;
  uint64_t v37;
  unsigned int v38;

  v10 = a4;
  *a8 = 0;
  v11 = (unint64_t)a3 >> 1;
  if (!a1)
    goto LABEL_20;
  if ((int)v11 < 1)
    goto LABEL_20;
  v12 = (unsigned __int16)a2[(v11 - 1)];
  if (!a2[(v11 - 1)])
    goto LABEL_20;
  for (i = 0; i != 6; ++i)
  {
    if ((unsigned __int16)word_20BA93ABA[i] == v12)
      goto LABEL_20;
  }
  if ((int)v11 <= 1)
  {
    v14 = 0;
    v15 = v12 == a4;
  }
  else
  {
    v14 = (unsigned __int16)a2[(v11 - 2)];
    v15 = v12 == a4;
    if (v12 == a4 && a2[(v11 - 2)] && v14 != v12)
      return 4294967294;
  }
  switch(a2[(v11 - 1)])
  {
    case 'c':
      v17 = 4294967294;
      switch(a4)
      {
        case 'a':
        case 'e':
        case 'i':
          return v17;
        case 'b':
        case 'c':
        case 'd':
        case 'f':
        case 'g':
          goto LABEL_19;
        case 'h':
          goto LABEL_69;
        default:
          if (a4 != 111 && a4 != 117)
            goto LABEL_19;
          break;
      }
      return v17;
    case 'd':
      goto LABEL_40;
    case 'f':
    case 'g':
    case 'q':
      goto LABEL_17;
    case 'h':
      if (v14 <= 114)
      {
        if (!v14)
          goto LABEL_17;
        if (v14 != 100)
        {
          if (v14 == 104)
            goto LABEL_17;
          goto LABEL_19;
        }
        goto LABEL_57;
      }
      if ((v14 - 115) < 2)
      {
LABEL_57:
        v22 = a4 == 121;
LABEL_103:
        v36 = v22;
        if (v22)
          v15 = 1;
        if (!v15)
          goto LABEL_112;
        if ((v36 & 1) == 0)
          goto LABEL_20;
        return 4294967294;
      }
      if (v14 != 119)
        goto LABEL_19;
LABEL_124:
      v17 = 4294967294;
      if (a4 == 117 || a4 == 121)
        return v17;
      goto LABEL_19;
    case 'k':
      if (v14 <= 107)
      {
        if (!v14 || v14 == 107)
        {
LABEL_17:
          if (a4 == 119)
            v15 = 1;
        }
        goto LABEL_19;
      }
      if (v14 != 108 && v14 != 120)
        goto LABEL_19;
      v20 = ((unsigned __int16)(a4 - 105) >> 1) | (((_WORD)a4 - 105) << 15);
      if (v20 >= 9u)
        goto LABEL_19;
      v21 = 329;
LABEL_62:
      if (((v21 >> v20) & 1) == 0)
        goto LABEL_19;
      return 4294967294;
    case 'l':
      if ((a4 - 107) > 0xC)
        goto LABEL_19;
      v18 = 1 << (a4 - 107);
      v19 = 4609;
      goto LABEL_68;
    case 's':
      if (!v14)
        goto LABEL_40;
      if (v14 == 116)
        goto LABEL_57;
      if (v14 != 115)
        goto LABEL_19;
LABEL_40:
      if (a4 != 104 && a4 != 119)
        goto LABEL_19;
      goto LABEL_69;
    case 't':
      if (v14 > 115)
      {
        if (v14 == 120)
          goto LABEL_116;
        if (v14 != 116)
          goto LABEL_19;
LABEL_66:
        if ((a4 - 104) > 0xF)
          goto LABEL_19;
        v18 = 1 << (a4 - 104);
        v19 = 34817;
LABEL_68:
        if ((v18 & v19) == 0)
          goto LABEL_19;
        goto LABEL_69;
      }
      if (!v14)
        goto LABEL_66;
      if (v14 != 108)
        goto LABEL_19;
LABEL_116:
      v38 = (unsigned __int16)(((unsigned __int16)(a4 - 97) >> 1) | (((_WORD)a4 - 97) << 15));
      if (v38 > 0xC)
        goto LABEL_19;
      if (((1 << ((unsigned __int16)(a4 - 97) >> 1)) & 0x1095) != 0)
        return 4294967294;
      if (v38 == 9)
        goto LABEL_20;
LABEL_19:
      if (!v15)
      {
LABEL_112:
        v37 = 0;
        while ((unsigned __int16)aAiueoy[v37] != a4)
        {
          ++v37;
          v17 = 4294967294;
          if (v37 == 6)
            return v17;
        }
      }
LABEL_20:
      if (a4 == 39 || (unsigned __int16)(a4 - 97) < 0x1Au)
      {
LABEL_69:
        v25 = (v11 << 32) + 0x100000000;
        v26 = (unsigned __int16 *)operator new[]();
        v27 = v26;
        if ((_DWORD)v11)
          memcpy(v26, a2, 2 * (int)v11);
        v27[(int)v11] = v10;
        if (sub_20B99BDE8(v27, v25 >> 32, (UChar *)&word_25472AEE8, 1) && word_25472AEE8)
        {
          v28 = u_strlen((const UChar *)&word_25472AEE8);
          v29 = v28;
          if (v28)
            memmove(a5, &word_25472AEE8, 2 * v28);
          *a8 = 0;
          v17 = (2 * v29);
          goto LABEL_98;
        }
        if ((unint64_t)v25 >= 0x100000001)
        {
          if (*(_DWORD *)v27 == 7209070)
          {
LABEL_97:
            *a5 = 12435;
            *a8 = 0;
            v17 = 2;
LABEL_98:
            MEMORY[0x20BD39C80](v27, 0x1000C80BDFB0063);
            return v17;
          }
          if (*v27 == 110)
          {
            v31 = 0;
            v32 = v27[1];
            while (*(unsigned __int16 *)&aA_12[v31] != v32)
            {
              v31 += 2;
              if (v31 == 16)
              {
                *a5 = 12435;
                a5[1] = v32;
                *a7 = a5 + 1;
                v17 = 2;
                *a8 = 2;
                goto LABEL_98;
              }
            }
            goto LABEL_78;
          }
        }
        else if (*v27 == 110)
        {
LABEL_78:
          if (!(v11 << 32) && a9)
          {
            v30 = 0;
            while (*(unsigned __int16 *)&aA_12[v30] != a9)
            {
              v30 += 2;
              if (v30 == 16)
                goto LABEL_97;
            }
          }
        }
        sub_20B87B694();
        v33 = sub_20B87B724(byte_25472AEF8, *v27, 0);
        if ((unint64_t)v25 < 0x100000001 || v33 == -1 || (v34 = *v27, v34 != v27[1]))
        {
          if ((_DWORD)v11)
            memcpy(a5, a2, 2 * (int)v11);
          v17 = 0;
          a5[(int)v11] = v10;
          *a7 = a5;
          *a8 = v25 >> 31;
        }
        else
        {
          *a5 = 12387;
          a5[1] = v34;
          *a7 = a5 + 1;
          v17 = 2;
          *a8 = 2;
        }
        goto LABEL_98;
      }
      if (!(_DWORD)v11)
      {
        *a5 = a4;
        *a8 = 0;
        return 2;
      }
      return 4294967294;
    case 'w':
      switch(v14)
      {
        case 'd':
        case 'f':
        case 'g':
        case 'k':
        case 's':
        case 't':
          goto LABEL_57;
        case 'e':
        case 'i':
        case 'j':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 'u':
        case 'v':
          goto LABEL_19;
        case 'h':
          goto LABEL_124;
        case 'l':
        case 'x':
          v20 = ((unsigned __int16)(a4 - 101) >> 1) | (((_WORD)a4 - 101) << 15);
          if (v20 >= 0xBu)
            goto LABEL_19;
          v21 = 1317;
          goto LABEL_62;
        case 'w':
          goto LABEL_131;
        default:
          if (v14)
            goto LABEL_19;
LABEL_131:
          if (a4 == 104)
            goto LABEL_69;
          if (a4 != 117)
            goto LABEL_19;
          return 4294967294;
      }
    case 'x':
      if ((a4 - 107) > 0xC)
        goto LABEL_19;
      v18 = 1 << (a4 - 107);
      v19 = 4617;
      goto LABEL_68;
    case 'y':
      switch(v14)
      {
        case 'v':
          v17 = 4294967294;
          if (a4 != 101 && a4 != 105)
            goto LABEL_19;
          return v17;
        case 'w':
          if ((a4 - 97) > 0x14 || ((1 << (a4 - 97)) & 0x104001) == 0)
            goto LABEL_19;
          return 4294967294;
        case 'x':
        case 'y':
          goto LABEL_102;
        default:
          if (v14 != 108 && v14)
            goto LABEL_19;
LABEL_102:
          v22 = a4 == 105;
          break;
      }
      goto LABEL_103;
    default:
      goto LABEL_19;
  }
}

void sub_20B87B66C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_20B87B694()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472AEF0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472AEF0))
    {
      sub_20B87C9E0(byte_25472AEF8, (char *)L"bcdfghjklmpqrstvwxyz");
      __cxa_atexit((void (*)(void *))sub_20B87BE80, byte_25472AEF8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472AEF0);
    }
  }
}

void sub_20B87B70C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472AEF0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87B724(char *a1, int a2, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;

  if (a1[23] < 0)
  {
    v4 = a1;
    a1 = *(char **)a1;
    v3 = *((_QWORD *)v4 + 1);
  }
  else
  {
    v3 = a1[23];
  }
  if (v3 <= a3)
    return -1;
  v5 = &a1[2 * a3];
  v6 = a3 - v3;
  while (*(unsigned __int16 *)v5 != a2)
  {
    v5 += 2;
    if (__CFADD__(v6++, 1))
    {
      v5 = 0;
      break;
    }
  }
  if (v5)
    return (v5 - a1) >> 1;
  else
    return -1;
}

unsigned __int8 *sub_20B87B784(char *a1, unint64_t a2)
{
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  sub_20B87AF40();
  sub_20B83DFAC(__p, a1, &a1[a2], a2);
  v4 = sub_20B829B04(&xmmword_25472C7E0, (unsigned __int8 *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v4)
    return v4 + 40;
  else
    return 0;
}

void sub_20B87B7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B87B810(const __CFString *a1, unint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  const UniChar *p_chars;
  CFStringRef v11;
  uint64_t v13[2];
  UniChar *chars;
  CFIndex numChars;
  unsigned __int8 v16;
  uint64_t v17;
  CFIndex v18;

  v18 = 0;
  sub_20B8D0624(a1, &v18, &v17);
  v7 = v17;
  v8 = v18;
  if (!v17)
    v8 = 0;
  v13[0] = v17;
  v13[1] = v8;
  sub_20B87B938(v13, a2, a3, a4, &chars);
  if (((char)v16 & 0x80000000) == 0)
  {
    v9 = v16;
    if (!v16)
    {
      v11 = 0;
      goto LABEL_13;
    }
    p_chars = (const UniChar *)&chars;
    goto LABEL_8;
  }
  v9 = numChars;
  if (numChars)
  {
    p_chars = chars;
LABEL_8:
    v11 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], p_chars, v9);
    if (((char)v16 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  v11 = 0;
LABEL_12:
  operator delete(chars);
LABEL_13:
  if (v7)
    MEMORY[0x20BD39C80](v7, 0x1000C80BDFB0063);
  return v11;
}

void sub_20B87B8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (v17)
    MEMORY[0x20BD39C80](v17, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void sub_20B87B938(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int16 *p_p;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD *v33;
  _QWORD *i;
  unint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void *__p;
  uint64_t v53;
  uint64_t v54;

  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v50 = *a1;
  sub_20B87BEB0(a5, a1[1]);
  v47 = a2;
  v10 = a1[1];
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v49 = (_QWORD *)(a3 + 16);
    while (1)
    {
      __p = 0;
      v53 = 0;
      v54 = 0;
      v15 = (unsigned __int16 *)(v50 + 2 * v14);
      v51 = 0;
      if (sub_20B87C060(v15, v10 - v14, (uint64_t)&__p, &v51))
      {
        v16 = HIBYTE(v54);
        v17 = HIBYTE(v54);
        v18 = v53;
        if (v54 >= 0)
          p_p = (__int16 *)&__p;
        else
          p_p = (__int16 *)__p;
        if (v54 >= 0)
          v20 = HIBYTE(v54);
        else
          v20 = v53;
        if (v20)
        {
          v21 = 2 * v20;
          do
          {
            sub_20B87C0F8((uint64_t)a5, *p_p++);
            v21 -= 2;
          }
          while (v21);
          v16 = HIBYTE(v54);
          v18 = v53;
          v17 = HIBYTE(v54);
        }
        v22 = v51;
        v23 = v51 + v14;
LABEL_15:
        v11 += v22;
        if (v17 < 0)
          v16 = v18;
        v12 += v16;
        goto LABEL_51;
      }
      v24 = a1[1];
      if (v14 >= v24)
      {
        v23 = v14;
        goto LABEL_51;
      }
      v23 = v14 + 1;
      if (v14 + 1 >= v24)
        break;
      if (*(_DWORD *)v15 == 7209070)
      {
        sub_20B87C0F8((uint64_t)a5, 12435);
        v23 = v14 + 2;
        v11 += 2;
LABEL_50:
        ++v12;
        goto LABEL_51;
      }
      if (*v15 == 110)
      {
        v25 = 0;
        while (*(unsigned __int16 *)&aA_12[v25] != *(unsigned __int16 *)(v50 + 2 * v23))
        {
          v25 += 2;
          if (v25 == 16)
          {
            sub_20B87C0F8((uint64_t)a5, 12435);
            ++v11;
            goto LABEL_50;
          }
        }
      }
      sub_20B87B694();
      v27 = sub_20B87B724(byte_25472AEF8, *v15, 0);
      v26 = *v15;
      if (v27 == -1 || v26 != *(unsigned __int16 *)(v50 + 2 * v23))
        goto LABEL_28;
      if (a4 && (sub_20B87C060(v15 + 1, a1[1] + ~v14, (uint64_t)&__p, &v51) & 1) == 0)
      {
        LOWORD(v26) = *v15;
        goto LABEL_29;
      }
      sub_20B87C0F8((uint64_t)a5, 12387);
      ++v11;
      ++v12;
      if (a4)
      {
        v16 = HIBYTE(v54);
        v17 = HIBYTE(v54);
        v18 = v53;
        if (v54 >= 0)
          v28 = (__int16 *)&__p;
        else
          v28 = (__int16 *)__p;
        if (v54 >= 0)
          v29 = HIBYTE(v54);
        else
          v29 = v53;
        if (v29)
        {
          v30 = 2 * v29;
          do
          {
            sub_20B87C0F8((uint64_t)a5, *v28++);
            v30 -= 2;
          }
          while (v30);
          v16 = HIBYTE(v54);
          v18 = v53;
          v17 = HIBYTE(v54);
        }
        v22 = v51;
        v23 += v51;
        goto LABEL_15;
      }
LABEL_51:
      v13 = 0;
LABEL_52:
      v14 = v23;
      if (a3)
      {
        v31 = *(_QWORD *)(a3 + 8);
        if (v31)
        {
          v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
          v32.i16[0] = vaddlv_u8(v32);
          if (v32.u32[0] > 1uLL)
          {
            v5 = v12;
            if (v31 <= v12)
              v5 = v12 % v31;
          }
          else
          {
            v5 = (v31 - 1) & v12;
          }
          v33 = *(_QWORD **)(*(_QWORD *)a3 + 8 * v5);
          if (v33)
          {
            for (i = (_QWORD *)*v33; i; i = (_QWORD *)*i)
            {
              v35 = i[1];
              if (v35 == v12)
              {
                if (i[2] == v12)
                  goto LABEL_91;
              }
              else
              {
                if (v32.u32[0] > 1uLL)
                {
                  if (v35 >= v31)
                    v35 %= v31;
                }
                else
                {
                  v35 &= v31 - 1;
                }
                if (v35 != v5)
                  break;
              }
            }
          }
        }
        v36 = operator new(0x20uLL);
        *v36 = 0;
        v36[1] = v12;
        v36[2] = v12;
        v36[3] = v11;
        v37 = (float)(unint64_t)(*(_QWORD *)(a3 + 24) + 1);
        v38 = *(float *)(a3 + 32);
        if (!v31 || (float)(v38 * (float)v31) < v37)
        {
          v39 = (v31 & (v31 - 1)) != 0;
          if (v31 < 3)
            v39 = 1;
          v40 = v39 | (2 * v31);
          v41 = vcvtps_u32_f32(v37 / v38);
          if (v40 <= v41)
            v42 = v41;
          else
            v42 = v40;
          sub_20B828960(a3, v42);
          v31 = *(_QWORD *)(a3 + 8);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v31 <= v12)
              v5 = v12 % v31;
            else
              v5 = v12;
          }
          else
          {
            v5 = (v31 - 1) & v12;
          }
        }
        v43 = *(_QWORD *)a3;
        v44 = *(_QWORD **)(*(_QWORD *)a3 + 8 * v5);
        if (v44)
        {
          *v36 = *v44;
          goto LABEL_89;
        }
        *v36 = *v49;
        *v49 = v36;
        *(_QWORD *)(v43 + 8 * v5) = v49;
        if (*v36)
        {
          v45 = *(_QWORD *)(*v36 + 8);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v45 >= v31)
              v45 %= v31;
          }
          else
          {
            v45 &= v31 - 1;
          }
          v44 = (_QWORD *)(*(_QWORD *)a3 + 8 * v45);
LABEL_89:
          *v44 = v36;
        }
        ++*(_QWORD *)(a3 + 24);
      }
LABEL_91:
      if (SHIBYTE(v54) < 0)
        operator delete(__p);
      v10 = a1[1];
      if (v14 >= v10)
        goto LABEL_97;
    }
    LOWORD(v26) = *v15;
LABEL_28:
    if (a4)
    {
LABEL_29:
      if ((unsigned __int16)((v26 & 0xFFDF) - 65) < 0x1Au)
        LOWORD(v26) = v26 - 288;
    }
    sub_20B87C0F8((uint64_t)a5, v26);
    ++v11;
    ++v12;
    if ((unsigned __int16)((*v15 & 0xFFDF) - 65) < 0x1Au)
    {
      ++v13;
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  v13 = 0;
LABEL_97:
  if (v47)
  {
    if (*a1)
      v46 = v13;
    else
      v46 = 0;
    *v47 = sub_20B87C1A0(*a1 + 2 * (v10 - v13), v46);
  }
}

void sub_20B87BE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B87BE80(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B87BEB0(_QWORD *__dst, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  LODWORD(v3) = *((char *)__dst + 23);
  if ((v3 & 0x80000000) == 0)
  {
    if (a2 <= 0xA)
      return;
    v4 = *((unsigned __int8 *)__dst + 23);
    if (v4 <= a2)
      v5 = a2;
    else
      v5 = *((unsigned __int8 *)__dst + 23);
    if ((v5 | 3) != 0xB)
    {
      v11 = (v5 | 3) + 1;
      goto LABEL_24;
    }
    v6 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
LABEL_20:
    v11 = v6 + 1;
    if (v6 < 0xB)
    {
      v12 = (_QWORD *)*__dst;
      v13 = 1;
      v14 = __dst;
      if ((v3 & 0x80) != 0)
        goto LABEL_28;
      goto LABEL_26;
    }
LABEL_24:
    v14 = sub_20B80FD48((uint64_t)__dst, v11);
    v11 = v15;
    LODWORD(v3) = *((char *)__dst + 23);
    if ((v3 & 0x80000000) != 0)
    {
      LOBYTE(v13) = 0;
      v12 = (_QWORD *)*__dst;
LABEL_28:
      v16 = __dst[1];
      v17 = 1;
LABEL_29:
      v18 = __CFADD__(v16, 1);
      v19 = v16 + 1;
      if (v18)
      {
        if (v17)
          goto LABEL_35;
      }
      else
      {
        memmove(v14, v12, 2 * v19);
        if (v17)
        {
LABEL_35:
          operator delete(v12);
          if ((v13 & 1) == 0)
            goto LABEL_36;
          goto LABEL_33;
        }
      }
      if ((v13 & 1) == 0)
      {
LABEL_36:
        __dst[1] = v4;
        __dst[2] = v11 | 0x8000000000000000;
        *__dst = v14;
        return;
      }
LABEL_33:
      *((_BYTE *)__dst + 23) = v4 & 0x7F;
      return;
    }
    v13 = 0;
    v12 = __dst;
LABEL_26:
    v16 = v3;
    v17 = v13;
    goto LABEL_29;
  }
  v7 = __dst[2];
  v8 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 < a2)
  {
    v4 = __dst[1];
    if (v4 <= a2)
      v9 = a2;
    else
      v9 = __dst[1];
    v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v9 | 3) != 0xB)
      v10 = v9 | 3;
    v6 = v9 >= 0xB ? v10 : 10;
    if (v6 != v8)
    {
      v3 = HIBYTE(v7);
      goto LABEL_20;
    }
  }
}

void sub_20B87C044(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t sub_20B87C060(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int128 __dst;
  uint64_t v12;

  v6 = sub_20B99BDE8(a1, a2, (UChar *)&word_25472AEE0, 1);
  if (v6)
    v7 = word_25472AEE0 == 0;
  else
    v7 = 1;
  v8 = !v7;
  if (!v7)
  {
    v9 = v6;
    sub_20B87C9E0(&__dst, (char *)&word_25472AEE0);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v12;
    if (a4)
      *a4 = v9;
  }
  return v8;
}

void sub_20B87C0F8(uint64_t a1, __int16 a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;

  v3 = (_QWORD *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23) != 10)
    {
      v5 = *(unsigned __int8 *)(a1 + 23);
      *(_BYTE *)(a1 + 23) = (*(_BYTE *)(a1 + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 10;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v4 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v5 == v4)
  {
LABEL_5:
    sub_20B87CAC0(a1, v4, 1uLL, v4, v4, 0, 0);
    v5 = v4;
  }
  v3[1] = v5 + 1;
  v3 = (_QWORD *)*v3;
LABEL_8:
  v6 = (_WORD *)v3 + v5;
  *v6 = a2;
  v6[1] = 0;
}

unint64_t sub_20B87C1A0(uint64_t a1, unint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  void *__p[2];
  char v11;

  sub_20B87AF40();
  v4 = (char *)(a1 + 2 * a2 - 6);
  v5 = 3;
  v6 = 6;
  do
  {
    if (a2 >= v5)
    {
      v7 = a1 ? v6 : 0;
      sub_20B82E068(__p, v4, v7);
      v8 = sub_20B829B04(&xmmword_25472C7E0, (unsigned __int8 *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      if (v8)
        break;
    }
    v6 -= 2;
    v4 += 2;
    --v5;
  }
  while (v5);
  return v5;
}

void sub_20B87C250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B87C26C(const __CFString *a1@<X0>, CFIndex *a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *v5;
  const __CFString *v6;
  CFIndex Length;
  UniChar *v8;
  CFRange v9;

  v5 = sub_20B87B810(a1, 0, 0, 0);
  if (v5)
  {
    v6 = v5;
    Length = CFStringGetLength(v5);
    v8 = (UniChar *)operator new[]();
    *a3 = v8;
    v9.location = 0;
    v9.length = Length;
    CFStringGetCharacters(v6, v9, v8);
    CFRelease(v6);
  }
  else
  {
    Length = 0;
    *a3 = operator new[]();
  }
  if (a2)
    *a2 = Length;
}

void sub_20B87C32C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_20B87C354(UniChar *chars@<X0>, CFIndex numChars@<X1>, CFIndex *a3@<X2>, _QWORD *a4@<X8>)
{
  const __CFString *v6;

  v6 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], chars, numChars);
  sub_20B87C26C(v6, a3, a4);
  CFRelease(v6);
}

void sub_20B87C3AC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B87C3D8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char *v15;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_20B87CBE0(a3, *(_QWORD *)(a1 + 8), 0);
  result = sub_20B87C4D0(a1, a2);
  v7 = result;
  v8 = result;
  v9 = *(_QWORD *)(a1 + 8) - result;
  if (v9)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (char *)a3;
    else
      v10 = *(char **)a3;
    result = (unint64_t)memmove(v10, *(const void **)a1, 2 * v9);
    v8 = *(_QWORD *)(a1 + 8);
  }
  if (v8 >= v7)
  {
    v11 = -(uint64_t)v7;
    v12 = 2 * v8;
    v13 = *(_QWORD *)a1 + 2 * v8;
    do
    {
      v14 = *(_WORD *)(v13 + 2 * v11);
      if ((unsigned __int16)(v14 + 191) < 0x1Au)
        v14 += 288;
      if (*(char *)(a3 + 23) >= 0)
        v15 = (char *)a3;
      else
        v15 = *(char **)a3;
      *(_WORD *)&v15[2 * v11 + v12] = v14;
    }
    while (!__CFADD__(v11++, 1));
  }
  return result;
}

void sub_20B87C4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B87C4D0(uint64_t a1, unsigned int a2)
{
  void *__p;
  char v4;
  unint64_t v5;

  if ((a2 & 0x20) == 0)
    return sub_20B87C1A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v5 = 0;
  sub_20B87B938((uint64_t *)a1, &v5, 0, (a2 >> 30) & 1, &__p);
  if (v4 < 0)
    operator delete(__p);
  return v5;
}

void sub_20B87C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char v14;
  void *__p;
  void *v16;
  uint64_t v17;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      v6 = v4 - a2;
      if (v4 - a2 >= 0)
      {
        v8 = sub_20B87B784((char *)(*(_QWORD *)a1 + 2 * v6), (2 * a2));
        if (v8)
        {
          v9 = v8;
          __p = 0;
          v16 = 0;
          v17 = 0;
          if (v4 != a2)
            sub_20B87C64C((char *)&__p, *(char **)a1, v6);
          v10 = *(_QWORD *)v9;
          v11 = *((_QWORD *)v9 + 1);
          while (v10 != v11)
          {
            sub_20B87C6B4((uint64_t)&__p, v6);
            if (*(char *)(v10 + 23) < 0)
            {
              v13 = *(char **)v10;
              v12 = *(_QWORD *)(v10 + 8);
            }
            else
            {
              v12 = *(unsigned __int8 *)(v10 + 23);
              v13 = (char *)v10;
            }
            sub_20B87C64C((char *)&__p, v13, v12 >> 1);
            v14 = 0;
            (*(void (**)(uint64_t, void **, char *))(a3 + 16))(a3, &__p, &v14);
            if (v14)
              break;
            v10 += 24;
          }
          if (__p)
          {
            v16 = __p;
            operator delete(__p);
          }
        }
      }
    }
  }
}

void sub_20B87C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B87C64C(char *result, char *a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    if (a3)
    {
      v5 = (uint64_t)result;
      sub_20B87D570((void **)result, a3 + ((uint64_t)(*((_QWORD *)result + 1) - *(_QWORD *)result) >> 1));
      return sub_20B87D600(v5, *(_QWORD *)(v5 + 8), a2, &a2[2 * a3], a3);
    }
  }
  return result;
}

void sub_20B87C6B4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_20B87CCF0((char **)a1, a2 - v2);
  }
}

BOOL sub_20B87C6E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  _BOOL8 v9;
  int v10;
  uint64_t *v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  if (a5)
    *a5 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  if (a2
    && (a4 & 0x22) == 0x22
    && (v13[0] = MEMORY[0x24BDAC760],
        v13[1] = 0x40000000,
        v13[2] = sub_20B87C844,
        v13[3] = &unk_24C46BFE8,
        v13[4] = &v14,
        v13[5] = a3,
        sub_20B87C52C(a1, a2, (uint64_t)v13),
        *((_BYTE *)v15 + 24)))
  {
    v9 = 1;
  }
  else
  {
    v10 = sub_20B8D2CE0(*(char **)a1, *(_QWORD *)(a1 + 8), *(char **)a3, *(_QWORD *)(a3 + 8), (a4 >> 6) & 8 | a4 & 0x20 | (a4 >> 4) & 0x10 | ((char)a4 >> 7) & 6, (a4 >> 1) & 1);
    v11 = v15;
    *((_BYTE *)v15 + 24) = v10;
    if (v10)
    {
      v9 = 1;
      if (a5 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a3 + 8))
      {
        *a5 = 1;
        v9 = *((unsigned __int8 *)v11 + 24) != 0;
      }
    }
    else
    {
      v9 = 0;
    }
  }
  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_20B87C82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *sub_20B87C844(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  const void *result;
  int64_t v7;

  v5 = *(_QWORD *)(a1 + 40);
  result = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (*(_QWORD *)(v5 + 8) >= (unint64_t)(v7 >> 1))
  {
    result = (const void *)memcmp(result, *(const void **)v5, v7);
    if (!(_DWORD)result)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  return result;
}

BOOL sub_20B87C89C(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  _BOOL8 v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v4 = sub_20B87C1A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  if (v4 < 1)
  {
    v5 = sub_20B947D74(a2, a1);
  }
  else
  {
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = sub_20B87C97C;
    v7[3] = &unk_24C499348;
    v7[4] = &v8;
    v7[5] = a2;
    sub_20B87C52C(a1, v4, (uint64_t)v7);
    v5 = *((_BYTE *)v9 + 24) != 0;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_20B87C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_20B87C97C(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  _QWORD v8[2];

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (uint64_t)(a2[1] - *a2) >> 1;
  if (!*a2)
    v6 = 0;
  v8[0] = *a2;
  v8[1] = v6;
  result = sub_20B947D74(v5, (uint64_t)v8);
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

_BYTE *sub_20B87C9E0(_BYTE *__dst, char *__src)
{
  size_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_WORD *)__src)
  {
    v7 = 0;
    __dst[23] = 0;
    goto LABEL_9;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(unsigned __int16 *)&__src[v4 + 2];
    --v5;
    v4 += 2;
  }
  while (v6);
  v7 = -v5;
  if ((unint64_t)-v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  if (v7 >= 0xB)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v7 | 3) != 0xB)
      v9 = v7 | 3;
    v8 = sub_20B80FD48((uint64_t)__dst, v9 + 1);
    *((_QWORD *)__dst + 1) = v7;
    *((_QWORD *)__dst + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
    goto LABEL_13;
  }
  __dst[23] = v7;
  v8 = __dst;
  if (v5)
  {
LABEL_13:
    memmove(v8, __src, v4);
    goto LABEL_14;
  }
  v7 = 0;
LABEL_9:
  v8 = __dst;
LABEL_14:
  *((_WORD *)v8 + v7) = 0;
  return __dst;
}

void sub_20B87CAC0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (0x7FFFFFFFFFFFFFF7 - a2 < a3)
    sub_20B877F70();
  v13 = (char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v13 = *(char **)a1;
  v14 = a3 + a2;
  if (a3 + a2 <= 2 * a2)
    v14 = 2 * a2;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v14 | 3) != 0xB)
    v15 = v14 | 3;
  if (v14 >= 0xB)
    v16 = v15 + 1;
  else
    v16 = 11;
  if (a2 <= 0x3FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x7FFFFFFFFFFFFFF7;
  v18 = (char *)sub_20B80FD48(a1, v17);
  v19 = v18;
  v21 = v20;
  if (a5)
    memmove(v18, v13, 2 * a5);
  if (a4 != a6 + a5)
    memmove(&v19[2 * a5 + 2 * a7], &v13[2 * a5 + 2 * a6], 2 * (a4 - (a6 + a5)));
  if (a2 != 10)
    operator delete(v13);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 16) = v21 | 0x8000000000000000;
}

uint64_t sub_20B87CBE0(uint64_t result, unint64_t a2, __int16 a3)
{
  unint64_t v3;

  if (*(char *)(result + 23) < 0)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3 >= a2)
    {
      *(_QWORD *)(result + 8) = a2;
      result = *(_QWORD *)result;
      goto LABEL_7;
    }
    return sub_20B87CC24(result, a2 - v3, a3);
  }
  v3 = *(unsigned __int8 *)(result + 23);
  if (v3 < a2)
    return sub_20B87CC24(result, a2 - v3, a3);
  *(_BYTE *)(result + 23) = a2 & 0x7F;
LABEL_7:
  *(_WORD *)(result + 2 * a2) = 0;
  return result;
}

uint64_t sub_20B87CC24(uint64_t a1, unint64_t a2, __int16 a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unint64_t v12;
  unint64_t v13;

  if (a2)
  {
    LODWORD(v6) = *(char *)(a1 + 23);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      v7 = *(unsigned __int8 *)(a1 + 23);
      v8 = 10;
    }
    if (v8 - v7 < a2)
    {
      sub_20B87CAC0(a1, v8, a2 - v8 + v7, v7, v7, 0, 0);
      *(_QWORD *)(a1 + 8) = v7;
      LOBYTE(v6) = *(_BYTE *)(a1 + 23);
    }
    v10 = a1;
    if ((v6 & 0x80) != 0)
      v10 = *(_QWORD *)a1;
    v11 = (_WORD *)(v10 + 2 * v7);
    v12 = a2;
    do
    {
      *v11++ = a3;
      --v12;
    }
    while (v12);
    v13 = v7 + a2;
    if (*(char *)(a1 + 23) < 0)
      *(_QWORD *)(a1 + 8) = v13;
    else
      *(_BYTE *)(a1 + 23) = v13 & 0x7F;
    *(_WORD *)(v10 + 2 * v13) = 0;
  }
  return a1;
}

void sub_20B87CCF0(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_20B80CDD8();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20B80FD48(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20B87CDF0(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20B83AFD0(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20B87CE34()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  size_t v3;
  char *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  int32_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  char *v19;
  char *v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD **v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *j;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  char *v41;
  void *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  void *__p[2];
  uint64_t v47;
  __int128 __dst;
  uint64_t v49;
  char *v50;
  unint64_t *v51;

  v0 = 0;
  v1 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  v47 = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v2 = (&off_24C497B38)[v1];
    if (v2)
    {
      if (v0)
      {
        v3 = 2 * u_strlen((const UChar *)(&off_24C497B38)[v1]);
        v4 = v44;
        if ((unint64_t)v44 >= v45)
        {
          v12 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
          v13 = v12 + 1;
          if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B80CDD8();
          if (0x5555555555555556 * ((uint64_t)(v45 - (_QWORD)v43) >> 3) > v13)
            v13 = 0x5555555555555556 * ((uint64_t)(v45 - (_QWORD)v43) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)v43) >> 3) >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v13;
          v51 = &v45;
          if (v14)
            v15 = (char *)sub_20B828D70((uint64_t)&v45, v14);
          else
            v15 = 0;
          *(_QWORD *)&__dst = v15;
          *((_QWORD *)&__dst + 1) = &v15[24 * v12];
          v49 = *((_QWORD *)&__dst + 1);
          v50 = &v15[24 * v14];
          sub_20B82E068(*((_QWORD **)&__dst + 1), v2, v3);
          v49 += 24;
          sub_20B83BAB4((uint64_t *)&v43, &__dst);
          v5 = (__int128 *)v44;
          sub_20B83BC3C((uint64_t)&__dst);
        }
        else
        {
          sub_20B82E068(v44, v2, v3);
          v5 = (__int128 *)(v4 + 24);
        }
        v44 = (char *)v5;
      }
      else
      {
        v11 = u_strlen((const UChar *)(&off_24C497B38)[v1]);
        sub_20B82E068(&__dst, v2, 2 * v11);
        if (SHIBYTE(v47) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = __dst;
        v47 = v49;
      }
      ++v0;
      goto LABEL_101;
    }
    v6 = sub_20B828414((uint64_t)&qword_25472C7F8, (uint64_t)__p);
    v7 = v6;
    v8 = *((_QWORD *)&xmmword_25472C7E0 + 1);
    if (*((_QWORD *)&xmmword_25472C7E0 + 1))
    {
      v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472C7E0 + 8));
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        v2 = (char *)v6;
        if (v6 >= *((_QWORD *)&xmmword_25472C7E0 + 1))
          v2 = (char *)(v6 % *((_QWORD *)&xmmword_25472C7E0 + 1));
      }
      else
      {
        v2 = (char *)((*((_QWORD *)&xmmword_25472C7E0 + 1) - 1) & v6);
      }
      v16 = *(unsigned __int8 ***)(xmmword_25472C7E0 + 8 * (_QWORD)v2);
      if (v16)
      {
        for (i = *v16; i; i = *(unsigned __int8 **)i)
        {
          v18 = *((_QWORD *)i + 1);
          if (v18 == v7)
          {
            if ((sub_20B8288BC((uint64_t)&dword_25472C800, i + 16, (unsigned __int8 *)__p) & 1) != 0)
              goto LABEL_96;
          }
          else
          {
            if (v10 > 1)
            {
              if (v18 >= v8)
                v18 %= v8;
            }
            else
            {
              v18 &= v8 - 1;
            }
            if ((char *)v18 != v2)
              break;
          }
        }
      }
    }
    v19 = (char *)operator new(0x40uLL);
    v20 = v19;
    *(_QWORD *)&__dst = v19;
    *((_QWORD *)&__dst + 1) = &qword_25472C7F0;
    LOBYTE(v49) = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = v7;
    if (SHIBYTE(v47) < 0)
    {
      sub_20B80ACE0(v19 + 16, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *((_OWORD *)v19 + 1) = *(_OWORD *)__p;
      *((_QWORD *)v19 + 4) = v47;
    }
    *((_QWORD *)v20 + 5) = 0;
    *((_QWORD *)v20 + 6) = 0;
    *((_QWORD *)v20 + 7) = 0;
    sub_20B83C498(v20 + 40, (__int128 *)v43, (__int128 *)v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3));
    LOBYTE(v49) = 1;
    v21 = (float)(unint64_t)(qword_25472C7F8 + 1);
    if (!v8 || (float)(*(float *)&dword_25472C800 * (float)v8) < v21)
    {
      v22 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v22 = 1;
      v23 = v22 | (2 * v8);
      v24 = vcvtps_u32_f32(v21 / *(float *)&dword_25472C800);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v8 = *((_QWORD *)&xmmword_25472C7E0 + 1);
      if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472C7E0 + 1))
        goto LABEL_48;
      if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472C7E0 + 1))
      {
        v32 = vcvtps_u32_f32((float)(unint64_t)qword_25472C7F8 / *(float *)&dword_25472C800);
        if (*((_QWORD *)&xmmword_25472C7E0 + 1) < 3uLL
          || (v33 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472C7E0 + 8)),
              v33.i16[0] = vaddlv_u8(v33),
              v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if (*(_QWORD *)&prime >= v8)
        {
          v8 = *((_QWORD *)&xmmword_25472C7E0 + 1);
        }
        else
        {
          if (prime)
          {
LABEL_48:
            if (*(_QWORD *)&prime >> 61)
              sub_20B800BC0();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = (void *)xmmword_25472C7E0;
            *(_QWORD *)&xmmword_25472C7E0 = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            *((int8x8_t *)&xmmword_25472C7E0 + 1) = prime;
            do
              *(_QWORD *)(xmmword_25472C7E0 + 8 * v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD **)qword_25472C7F0;
            if (qword_25472C7F0)
            {
              v30 = *(_QWORD *)(qword_25472C7F0 + 8);
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(xmmword_25472C7E0 + 8 * v30) = &qword_25472C7F0;
              for (j = *v29; j; v30 = v36)
              {
                v36 = j[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(xmmword_25472C7E0 + 8 * v36))
                  {
                    *(_QWORD *)(xmmword_25472C7E0 + 8 * v36) = v29;
                    goto LABEL_77;
                  }
                  *v29 = (_QWORD *)*j;
                  *j = **(_QWORD **)(xmmword_25472C7E0 + 8 * v36);
                  **(_QWORD **)(xmmword_25472C7E0 + 8 * v36) = j;
                  j = v29;
                }
                v36 = v30;
LABEL_77:
                v29 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v8 = (unint64_t)prime;
            goto LABEL_81;
          }
          v42 = (void *)xmmword_25472C7E0;
          *(_QWORD *)&xmmword_25472C7E0 = 0;
          if (v42)
            operator delete(v42);
          v8 = 0;
          *((_QWORD *)&xmmword_25472C7E0 + 1) = 0;
        }
      }
LABEL_81:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8)
          v2 = (char *)(v7 % v8);
        else
          v2 = (char *)v7;
      }
      else
      {
        v2 = (char *)((v8 - 1) & v7);
      }
    }
    v37 = *(uint64_t **)(xmmword_25472C7E0 + 8 * (_QWORD)v2);
    v38 = __dst;
    if (v37)
    {
      *(_QWORD *)__dst = *v37;
    }
    else
    {
      *(_QWORD *)__dst = qword_25472C7F0;
      qword_25472C7F0 = v38;
      *(_QWORD *)(xmmword_25472C7E0 + 8 * (_QWORD)v2) = &qword_25472C7F0;
      if (!*(_QWORD *)v38)
        goto LABEL_95;
      v39 = *(_QWORD *)(*(_QWORD *)v38 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v39 >= v8)
          v39 %= v8;
      }
      else
      {
        v39 &= v8 - 1;
      }
      v37 = (uint64_t *)(xmmword_25472C7E0 + 8 * v39);
    }
    *v37 = v38;
LABEL_95:
    *(_QWORD *)&__dst = 0;
    ++qword_25472C7F8;
    sub_20B87D52C((uint64_t)&__dst);
LABEL_96:
    v40 = (__int128 *)v43;
    v41 = v44;
    if (v44 != v43)
    {
      do
      {
        if (*(v41 - 1) < 0)
          operator delete(*((void **)v41 - 3));
        v41 -= 24;
      }
      while (v41 != (char *)v40);
    }
    v0 = 0;
    v44 = (char *)v40;
LABEL_101:
    ++v1;
  }
  while (v1 != 769);
  *(_QWORD *)&__dst = &v43;
  sub_20B83AFD0((void ***)&__dst);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
}

void sub_20B87D4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,char a21)
{
  sub_20B87D52C((uint64_t)&a21);
  a20 = &a10;
  sub_20B83AFD0((void ***)&a20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B87D52C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B87CDF0((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_20B87D570(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_20B80CDD8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20B80FD48(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *sub_20B87D600(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      sub_20B80CDD8();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_20B80FD48(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = sub_20B87D804((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_20B87D7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20B87D804(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *sub_20B87D8C8(_QWORD *a1, const __CFURL *a2, void *a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = (_QWORD *)sub_20B88683C((uint64_t)a1, a2, a3, a4, 0);
  *v5 = off_24C460F00;
  v5[35] = 0;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24C465910;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  a1[36] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C45FF48;
  sub_20B999860(v7 + 1, (uint64_t)(a1 + 9));
  v7[7] = &off_24C4601F0;
  v7[8] = 0;
  v7[9] = 0;
  v7[10] = 0;
  a1[37] = v7;
  a1[38] = 0;
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = -1;
  a1[42] = 0;
  return a1;
}

void sub_20B87D990(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  MEMORY[0x20BD39CB0](v3, 0xF1C40893AD9D5);
  v5 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v1 + 288) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20B886A70(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87D9E8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_24C460F00;
  v2 = (_QWORD *)a1[38];
  v3 = (_QWORD *)a1[39];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = a1[35];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (void *)a1[38];
  if (v5)
  {
    a1[39] = v5;
    operator delete(v5);
  }
  v6 = a1[37];
  a1[37] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[36];
  a1[36] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_20B886A70((uint64_t)a1);
}

uint64_t sub_20B87DAA0(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;

  sub_20B87E150((const void **)(a1 + 16), 0);
  sub_20B87E150((const void **)(a1 + 24), 0);
  objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v2, v3);
  v4 = *(_QWORD **)(a1 + 288);
  v5 = (_QWORD *)v4[1];
  v6 = (_QWORD *)v4[2];
  if (v5 != v6)
  {
    do
    {
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      ++v5;
    }
    while (v5 != v6);
    v5 = (_QWORD *)v4[1];
  }
  v4[2] = v5;
  v4[4] = 0;
  v7 = *(_QWORD *)(a1 + 296);
  sub_20B92969C(v7 + 56);
  result = sub_20B999938(v7 + 8, 0);
  v9 = *(uint64_t **)(a1 + 304);
  v10 = *(uint64_t **)(a1 + 312);
  if (v9 != v10)
  {
    do
    {
      result = *v9;
      if (*v9)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      ++v9;
    }
    while (v9 != v10);
    v9 = *(uint64_t **)(a1 + 304);
  }
  *(_QWORD *)(a1 + 312) = v9;
  *(_QWORD *)(a1 + 328) = -1;
  *(_QWORD *)(a1 + 336) = 0;
  return result;
}

uint64_t sub_20B87DB74(void **a1, const __CFString *a2, void *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  CFTypeRef v9;
  const void *v10;
  void *v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  char *i;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned __int8 v30;
  const char *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  void *v39;
  __CFString *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  const __CFString *v64;
  _BYTE *v65;
  const __CFString *v67;
  unint64_t v68;
  _OWORD v69[2];
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v6 = (*((uint64_t (**)(void **))*a1 + 36))(a1);
  if (v6)
  {
    *(_BYTE *)(v6 + 96) = (a3 & 0x80) == 0;
    if (sub_20B9727D8(v6, 1))
      (*((void (**)(void **))*a1 + 33))(a1);
  }
  objc_msgSend_removeAllObjects(a1[5], v7, v8);
  if (a2 && CFStringCompare(a2, kMecabraAnalysisStringForFacemark[0], 0) == kCFCompareEqualTo)
    return sub_20B886EF4(a1);
  if (a1[4] != a3)
    (*((void (**)(void **))*a1 + 33))(a1);
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  sub_20B87E150((const void **)a1 + 2, v9);
  v10 = (const void *)(*((uint64_t (**)(void **, const __CFString *))*a1 + 38))(a1, a2);
  sub_20B87E150((const void **)a1 + 3, v10);
  a1[4] = a3;
  sub_20BA147E8(a1[36], a2, 1);
  v11 = a1[37];
  v12 = *((_QWORD *)a1[36] + 4);
  if (!v12)
    sub_20B92969C((uint64_t)v11 + 56);
  sub_20B999938((uint64_t)v11 + 8, v12);
  v16 = a1[38];
  for (i = (char *)a1[39]; ; a1[39] = i)
  {
    v17 = (i - v16) >> 3;
    if (v17 <= v12)
      break;
    v18 = *(_QWORD *)&v16[8 * v17 - 8];
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v16 = a1[38];
      i = (char *)a1[39];
    }
    i -= 8;
  }
  a1[41] = (void *)-1;
  v19 = a1[36];
  v20 = v19[4];
  v21 = v19[2] - v19[1];
  v68 = v20;
  if (v20 < v21 >> 3)
  {
    v22 = v21 >> 3;
    v67 = CFSTR("IDXPrefixMatch");
    v23 = v20;
    while (1)
    {
      v24 = *(_QWORD *)(*((_QWORD *)a1[36] + 1) + 8 * v23);
      v25 = *(void **)(v24 + 8);
      if (a1[1] && v25 != 0)
      {
        if (!*(_BYTE *)(v24 + 32))
          goto LABEL_27;
        v27 = objc_msgSend_length(v25, v13, v14);
        v29 = objc_msgSend_substringToIndex_(v25, v28, v27 - 1);
        if (a1[1])
          break;
      }
LABEL_62:
      if (++v23 == v22)
        goto LABEL_66;
    }
    v25 = (void *)v29;
LABEL_27:
    if (objc_msgSend_length(v25, v13, v14, v67))
    {
      v30 = atomic_load((unsigned __int8 *)&qword_25472AF10);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_25472AF10))
      {
        v70 = -16101797;
        v69[0] = *(_OWORD *)a12345_0;
        v69[1] = unk_20BA38988;
        sub_20B87F8C8((uint64_t)&unk_25472AF18, (unsigned __int16 *)v69, 18);
        __cxa_atexit((void (*)(void *))sub_20B87F8A0, &unk_25472AF18, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472AF10);
      }
      if (objc_msgSend_length(v25, v13, v14))
      {
        v32 = 0;
        while (1)
        {
          v33 = objc_msgSend_characterAtIndex_(v25, v31, v32);
          v34 = qword_25472AF20;
          if (!qword_25472AF20)
            break;
          v35 = &qword_25472AF20;
          do
          {
            v36 = *(unsigned __int16 *)(v34 + 26);
            v37 = v36 >= v33;
            if (v36 >= v33)
              v38 = (uint64_t *)v34;
            else
              v38 = (uint64_t *)(v34 + 8);
            if (v37)
              v35 = (uint64_t *)v34;
            v34 = *v38;
          }
          while (*v38);
          if (v35 == &qword_25472AF20 || v33 < *((unsigned __int16 *)v35 + 13))
            break;
          if (++v32 >= (unint64_t)objc_msgSend_length(v25, v13, v14))
            goto LABEL_43;
        }
      }
      else
      {
LABEL_43:
        v39 = a1[4];
        v40 = (__CFString *)(id)sub_20B87E184(v25);
        if (objc_msgSend_length(v25, v41, v42))
        {
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = objc_msgSend_characterAtIndex_(v25, v43, v45);
            if (v47 == 65290 || v47 == 42)
              ++v46;
            ++v45;
          }
          while (v45 < objc_msgSend_length(v25, v48, v49));
        }
        else
        {
          v46 = 0;
        }
        v52 = objc_msgSend_set(MEMORY[0x24BDBCEF0], v43, v44);
        if (((unsigned __int16)v39 & 0x400) != 0)
        {
          v56 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v40, v50, (uint64_t)CFSTR("?"), CFSTR("0"));
          if ((unint64_t)objc_msgSend_length(v56, v57, v58) <= 5)
            sub_20B87E1D0(a1, (const char *)v23, v52, v56);
        }
        else if (v46 == objc_msgSend_length(v40, v50, v51) || (unint64_t)objc_msgSend_length(v40, v53, v54) < 5)
        {
          v55 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v40, v53, (uint64_t)CFSTR("?"), CFSTR("0"));
          sub_20B87E1D0(a1, (const char *)v23, v52, v55);
        }
        else if (v46)
        {
          sub_20B87E2B4(a1, v23, v52, v40, (uint64_t)CFSTR("IDXWildcardMatch"), ((unsigned __int16)v39 & 0x200) != 0);
          if (objc_msgSend_hasSuffix_(v40, v59, (uint64_t)CFSTR("?")))
          {
            v62 = objc_msgSend_length(v40, v60, v61);
            v40 = (__CFString *)objc_msgSend_substringToIndex_(v40, v63, v62 - 1);
          }
          v64 = (const __CFString *)objc_msgSend_stringByAppendingString_(v40, v60, (uint64_t)CFSTR("?*"));
          sub_20B87E2B4(a1, v23, v52, v64, (uint64_t)CFSTR("IDXWildcardMatch"), 0);
        }
        else
        {
          sub_20B87E2B4(a1, v23, v52, v40, (uint64_t)CFSTR("IDXExactMatch"), ((unsigned __int16)v39 & 0x200) != 0);
          sub_20B87E2B4(a1, v23, v52, v40, (uint64_t)v67, 0);
        }
      }
    }
    goto LABEL_62;
  }
LABEL_66:
  sub_20B999348(a1[37], v68);
  v65 = sub_20B9547EC();
  if (*v65 && (v65[10] & 8) != 0)
    sub_20B99A00C((uint64_t)a1[37] + 8);
  (*((void (**)(void **))*a1 + 31))(a1);
  return a1[1] && a1[2] != 0;
}

void sub_20B87E130(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472AF10);
  _Unwind_Resume(a1);
}

void sub_20B87E150(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B87E184(void *a1)
{
  void *ASCIIFromInputKeyString;
  const char *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  ASCIIFromInputKeyString = MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(8u, a1);
  v3 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(ASCIIFromInputKeyString, v2, (uint64_t)CFSTR("*"), CFSTR("?"));
  v6 = objc_msgSend_copy(v3, v4, v5);

  return v6;
}

uint64_t sub_20B87E1D0(_QWORD *a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  const char *v11;
  uint64_t v12;
  const __CFString *v13;
  const char *v14;
  const __CFString *v15;

  v8 = a1[4];
  v9 = CFSTR("p");
  v10 = CFSTR("pe");
  if ((v8 & 0x400) != 0)
  {
    if (objc_msgSend_length(a4, a2, a3) == 5)
      v10 = CFSTR("fe");
    if (objc_msgSend_length(a4, v11, v12) == 5)
      v9 = CFSTR("f");
  }
  v13 = (const __CFString *)objc_msgSend_stringByAppendingString_(v10, a2, (uint64_t)a4);
  sub_20B87E2B4(a1, (uint64_t)a2, a3, v13, (uint64_t)CFSTR("IDXExactMatch"), (v8 & 0x200) != 0);
  v15 = (const __CFString *)objc_msgSend_stringByAppendingString_(v9, v14, (uint64_t)a4);
  return sub_20B87E2B4(a1, (uint64_t)a2, a3, v15, (uint64_t)CFSTR("IDXExactMatch"), 0);
}

uint64_t sub_20B87E2B4(_QWORD *a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6)
{
  uint64_t v6;
  _QWORD v8[8];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = sub_20B87E368;
  v8[3] = &unk_24C499370;
  v8[6] = a1;
  v8[7] = a2;
  v9 = a6;
  v8[4] = a3;
  v8[5] = &v10;
  sub_20B88704C(a1, a4, a5, (uint64_t)v8);
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_20B87E350(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87E368(uint64_t result, const char *a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;

  if (a2)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 48);
    result = objc_msgSend_containsObject_(*(void **)(result + 32), a2, (uint64_t)a2);
    if ((result & 1) == 0)
    {
      v9 = *(_QWORD *)(v8 + 296);
      v10 = *(_QWORD *)(v7 + 56);
      v11 = sub_20B929738((_QWORD *)(v9 + 56), (const __CFString *)a2, a3, a4, *(_BYTE *)(v7 + 64));
      sub_20B9999F0((_QWORD *)(v9 + 8), v11, v10);
      result = objc_msgSend_addObject_(*(void **)(v7 + 32), v12, (uint64_t)a2);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 24) = 1;
    }
  }
  return result;
}

void sub_20B87E404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  CFStringRef v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFMutableArrayRef Mutable;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const char *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  CFStringRef v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[8];
  char v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __n128 (*v79)(__n128 *, __n128 *);
  void (*v80)(uint64_t);
  const char *v81;
  void *__p;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  __n128 (*v88)(__n128 *, __n128 *);
  void (*v89)(uint64_t);
  const char *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  BOOL (*v94)(uint64_t, uint64_t);
  uint64_t (*v95[18])(_QWORD);

  v95[16] = *(uint64_t (**)(_QWORD))MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 32);
  v3 = v2 - v1;
  if (v2 != v1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 32);
    if (!v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v85 = 0;
      v86 = &v85;
      v87 = 0x4812000000;
      v88 = sub_20B87EC04;
      v89 = sub_20B87EC28;
      v90 = "";
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v76 = 0;
      v77 = &v76;
      v78 = 0x4812000000;
      v79 = sub_20B87EC04;
      v80 = sub_20B87EC28;
      v81 = "";
      __p = 0;
      v83 = 0;
      v84 = 0;
      v7 = sub_20B87EC40(a1, 1);
      v8 = v6 & 0x200;
      v9 = *(_QWORD *)(a1 + 296);
      v74[0] = MEMORY[0x24BDAC760];
      v74[1] = 3221225472;
      v74[2] = sub_20B87EC74;
      v74[3] = &unk_24C499398;
      v74[6] = a1;
      v74[7] = v7;
      v75 = v8 >> 9;
      v74[4] = &v85;
      v74[5] = &v76;
      sub_20B999F90(v9 + 8, 0, (uint64_t)v74);
      v10 = operator new();
      *(_QWORD *)v10 = off_24C461CC8;
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      *(_QWORD *)(v10 + 16) = -1;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_DWORD *)(v10 + 56) = 1065353216;
      *(_QWORD *)v10 = &unk_24C465730;
      *(_QWORD *)(v10 + 8) = Mutable;
      if (v8)
      {
        v28 = v86[6];
        v29 = (uint64_t *)v86[7];
        v30 = 126 - 2 * __clz(((uint64_t)v29 - v28) >> 3);
        v95[0] = (uint64_t (*)(_QWORD))sub_20B87EE10;
        if (v29 == (uint64_t *)v28)
          v31 = 0;
        else
          v31 = v30;
        sub_20B87FBA4(v28, v29, v95, v31, 1);
        v32 = (uint64_t *)v86[6];
        v33 = (uint64_t *)v86[7];
        while (v32 != v33)
        {
          v34 = (void *)sub_20B8E1754(*v32);
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 16))(v10, v34);

          ++v32;
        }
      }
      v12 = sub_20B8878CC((_QWORD *)a1, *(const __CFString **)(a1 + 24), 0);
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v70, v95, 16);
      if (v14)
      {
        v15 = *(_QWORD *)v71;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v71 != v15)
              objc_enumerationMutation(v12);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * i));
          }
          v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v17, (uint64_t)&v70, v95, 16);
        }
        while (v14);
      }

      v18 = v77[6];
      v19 = (uint64_t *)v77[7];
      v20 = 126 - 2 * __clz(((uint64_t)v19 - v18) >> 3);
      v94 = sub_20B87EE10;
      if (v19 == (uint64_t *)v18)
        v21 = 0;
      else
        v21 = v20;
      sub_20B87FBA4(v18, v19, (uint64_t (**)(_QWORD))&v94, v21, 1);
      v22 = (uint64_t *)v77[6];
      v23 = (uint64_t *)v77[7];
      while (v22 != v23)
      {
        v24 = (void *)sub_20B8E1754(*v22);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 16))(v10, v24);

        ++v22;
      }
      v26 = *(uint64_t **)(a1 + 312);
      v25 = *(_QWORD *)(a1 + 320);
      if ((unint64_t)v26 >= v25)
      {
        v35 = *(_QWORD *)(a1 + 304);
        v36 = ((uint64_t)v26 - v35) >> 3;
        if ((unint64_t)(v36 + 1) >> 61)
          sub_20B80CDD8();
        v37 = v25 - v35;
        v38 = v37 >> 2;
        if (v37 >> 2 <= (unint64_t)(v36 + 1))
          v38 = v36 + 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
          v39 = (unint64_t)sub_20B87FB70(v39);
        else
          v40 = 0;
        v41 = (uint64_t *)(v39 + 8 * v36);
        v42 = v39 + 8 * v40;
        *v41 = v10;
        v27 = v41 + 1;
        v44 = *(char **)(a1 + 304);
        v43 = *(char **)(a1 + 312);
        if (v43 != v44)
        {
          do
          {
            v45 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *--v41 = v45;
          }
          while (v43 != v44);
          v43 = *(char **)(a1 + 304);
        }
        *(_QWORD *)(a1 + 304) = v41;
        *(_QWORD *)(a1 + 312) = v27;
        *(_QWORD *)(a1 + 320) = v42;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v26 = v10;
        v27 = v26 + 1;
      }
      *(_QWORD *)(a1 + 312) = v27;
      CFRelease(v7);
      _Block_object_dispose(&v76, 8);
      if (__p)
      {
        v83 = __p;
        operator delete(__p);
      }
      _Block_object_dispose(&v85, 8);
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      v5 = 1;
    }
    v46 = v3 >> 3;
    if (v5 < v3 >> 3)
    {
      do
      {
        v47 = v5 + 1;
        v48 = sub_20B87EC40(a1, v5 + 1);
        v85 = 0;
        v86 = &v85;
        v87 = 0x2020000000;
        v88 = 0;
        v49 = operator new();
        *(_QWORD *)v49 = off_24C461CC8;
        *(_QWORD *)(v49 + 8) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
        *(_QWORD *)(v49 + 16) = -1;
        *(_OWORD *)(v49 + 24) = 0u;
        *(_OWORD *)(v49 + 40) = 0u;
        *(_DWORD *)(v49 + 56) = 1065353216;
        *(_QWORD *)v49 = &unk_24C465730;
        v88 = (__n128 (*)(__n128 *, __n128 *))v49;
        v50 = *(_QWORD *)(a1 + 296);
        v95[0] = (uint64_t (*)(_QWORD))MEMORY[0x24BDAC760];
        v95[1] = (uint64_t (*)(_QWORD))3221225472;
        v95[2] = (uint64_t (*)(_QWORD))sub_20B87EE54;
        v95[3] = (uint64_t (*)(_QWORD))&unk_24C4993C0;
        v95[5] = (uint64_t (*)(_QWORD))a1;
        v95[6] = (uint64_t (*)(_QWORD))v48;
        v95[4] = (uint64_t (*)(_QWORD))&v85;
        sub_20B999E4C(v50 + 8, v5, (uint64_t)v95);
        v51 = v86;
        v53 = *(_QWORD **)(a1 + 312);
        v52 = *(_QWORD *)(a1 + 320);
        if ((unint64_t)v53 >= v52)
        {
          v55 = *(_QWORD *)(a1 + 304);
          v56 = ((uint64_t)v53 - v55) >> 3;
          if ((unint64_t)(v56 + 1) >> 61)
            sub_20B80CDD8();
          v57 = v52 - v55;
          v58 = v57 >> 2;
          if (v57 >> 2 <= (unint64_t)(v56 + 1))
            v58 = v56 + 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
            v59 = (unint64_t)sub_20B87FB70(v59);
          else
            v60 = 0;
          v61 = (_QWORD *)(v59 + 8 * v56);
          *v61 = v51[3];
          v54 = v61 + 1;
          v63 = *(char **)(a1 + 304);
          v62 = *(char **)(a1 + 312);
          if (v62 != v63)
          {
            do
            {
              v64 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v61 = v64;
            }
            while (v62 != v63);
            v62 = *(char **)(a1 + 304);
          }
          *(_QWORD *)(a1 + 304) = v61;
          *(_QWORD *)(a1 + 312) = v54;
          *(_QWORD *)(a1 + 320) = v59 + 8 * v60;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *v53 = v86[3];
          v54 = v53 + 1;
        }
        *(_QWORD *)(a1 + 312) = v54;
        CFRelease(v48);
        _Block_object_dispose(&v85, 8);
        v65 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v5);
        (*(void (**)(uint64_t, uint64_t (*)(void *, char *, uint64_t), _QWORD))(*(_QWORD *)v65 + 32))(v65, sub_20B87EB24, 0);
        ++v5;
      }
      while (v47 != v46);
    }
    v66 = *(uint64_t **)(a1 + 304);
    v67 = *(uint64_t **)(a1 + 312);
    if (v66 == v67)
    {
      v69 = *(_QWORD *)(a1 + 304);
    }
    else
    {
      do
      {
        v68 = *v66++;
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 64))(v68);
      }
      while (v66 != v67);
      v66 = *(uint64_t **)(a1 + 304);
      v69 = *(_QWORD *)(a1 + 312);
    }
    *(_QWORD *)(a1 + 328) = ((v69 - (uint64_t)v66) >> 3) - 1;
  }
}

void sub_20B87EA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B87EB24(void *a1, char *a2, uint64_t a3)
{
  const void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  void *v9;
  int v10;
  int v12;

  v4 = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4)
    v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v7 = 0;
  v8 = (const void *)objc_msgSend_rawCandidate(a2, v5, v6);
  if (v8)
    v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v9 = 0;
  v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 112))(v7);
  if (v10 < (*(int (**)(void *))(*(_QWORD *)v9 + 112))(v9))
    return -1;
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 112))(v7);
  return v12 > (*(int (**)(void *))(*(_QWORD *)v9 + 112))(v9);
}

__n128 sub_20B87EC04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_20B87EC28(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

CFStringRef sub_20B87EC40(uint64_t a1, uint64_t a2)
{
  CFRange v2;
  uint64_t *v3;
  uint64_t v4;

  v2.length = 0;
  if (a2)
  {
    v3 = *(uint64_t **)(*(_QWORD *)(a1 + 288) + 8);
    do
    {
      v4 = *v3++;
      v2.length += *(_QWORD *)(v4 + 24);
      --a2;
    }
    while (a2);
  }
  v2.location = 0;
  return CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 16), v2);
}

void sub_20B87EC74(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v4 = *(_QWORD **)(a1 + 48);
  if ((v4[4] & 0x2000000) != 0)
    v5 = 4096;
  else
    v5 = 1;
  v6 = sub_20B886B2C(v4, v5, *(const __CFString **)(a2 + 8), *(const __CFString **)(a1 + 56), *(_DWORD *)(a2 + 16), *(_BYTE *)(a2 + 20));
  v7 = v6;
  if (!*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a2 + 21))
  {
    v8 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
    v10 = (uint64_t *)v8[7];
    v17 = v8[8];
    if ((unint64_t)v10 >= v17)
    {
      v19 = v8[6];
      v20 = ((uint64_t)v10 - v19) >> 3;
      if (!((unint64_t)(v20 + 1) >> 61))
      {
        v21 = v17 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v23 = (unint64_t)sub_20B87FB70(v23);
        else
          v24 = 0;
        v25 = (uint64_t *)(v23 + 8 * v20);
        v26 = v23 + 8 * v24;
        *v25 = v7;
        v18 = v25 + 1;
        v28 = (char *)v8[6];
        v27 = (char *)v8[7];
        if (v27 == v28)
          goto LABEL_33;
        do
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v25 = v29;
        }
        while (v27 != v28);
        goto LABEL_32;
      }
LABEL_36:
      sub_20B80CDD8();
    }
LABEL_16:
    *v10 = v6;
    v18 = v10 + 1;
    goto LABEL_35;
  }
  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v10 = (uint64_t *)v8[7];
  v9 = v8[8];
  if ((unint64_t)v10 < v9)
    goto LABEL_16;
  v11 = v8[6];
  v12 = ((uint64_t)v10 - v11) >> 3;
  if ((unint64_t)(v12 + 1) >> 61)
    goto LABEL_36;
  v13 = v9 - v11;
  v14 = v13 >> 2;
  if (v13 >> 2 <= (unint64_t)(v12 + 1))
    v14 = v12 + 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  if (v15)
    v15 = (unint64_t)sub_20B87FB70(v15);
  else
    v16 = 0;
  v25 = (uint64_t *)(v15 + 8 * v12);
  v26 = v15 + 8 * v16;
  *v25 = v7;
  v18 = v25 + 1;
  v30 = (char *)v8[6];
  v27 = (char *)v8[7];
  if (v27 == v30)
    goto LABEL_33;
  do
  {
    v31 = *((_QWORD *)v27 - 1);
    v27 -= 8;
    *--v25 = v31;
  }
  while (v27 != v30);
LABEL_32:
  v27 = (char *)v8[6];
LABEL_33:
  v8[6] = v25;
  v8[7] = v18;
  v8[8] = v26;
  if (v27)
    operator delete(v27);
LABEL_35:
  v8[7] = v18;
}

BOOL sub_20B87EE10(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return v3 < (*(int (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
}

void sub_20B87EE54(uint64_t a1, const UniChar *a2, CFIndex a3, int a4)
{
  _QWORD *v6;
  const __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(_QWORD **)(a1 + 40);
  v7 = CFStringCreateWithCharacters(0, a2, a3);
  if ((v6[4] & 0x2000000) != 0)
    v8 = 4096;
  else
    v8 = 1;
  v9 = sub_20B886B2C(v6, v8, v7, *(const __CFString **)(a1 + 48), a4, 0);
  CFRelease(v7);
  v11 = (id)sub_20B8E1754(v9);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  (*(void (**)(uint64_t, id))(*(_QWORD *)v10 + 16))(v10, v11);

}

uint64_t sub_20B87EEF4(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  if (objc_msgSend_count(*(void **)(a1 + 40), a2, a3))
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6 != objc_msgSend_count(*(void **)(a1 + 40), v4, v5))
    {
      v8 = *(void **)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v9 + 1;
      return objc_msgSend_objectAtIndex_(v8, v7, v9);
    }
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 328);
  if (v11 < 0)
    return 0;
  while (v11 && *(_QWORD *)(a1 + 336) == 40)
  {
    v11 = 0;
LABEL_10:
    *(_QWORD *)(a1 + 328) = v11;
    if (v11 < 0)
      return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v11);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  if (!result)
  {
    v11 = *(_QWORD *)(a1 + 328) - 1;
    goto LABEL_10;
  }
  ++*(_QWORD *)(a1 + 336);
  return result;
}

uint64_t sub_20B87EFA0(uint64_t a1, void *a2)
{
  return sub_20B87E184(a2);
}

BOOL sub_20B87EFA8(uint64_t a1, const char *a2)
{
  return objc_msgSend_rangeOfString_(*(void **)(a1 + 16), a2, (uint64_t)CFSTR("?")) == 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_20B87EFD4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 280);
}

_QWORD *sub_20B87EFDC(_QWORD *a1, const __CFURL *a2, void *a3)
{
  uint64_t *v5;
  _QWORD v7[5];

  *sub_20B87D8C8(a1, a2, a3, 1u) = &off_24C464A58;
  v5 = (uint64_t *)operator new();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_20B87F0CC;
  v7[3] = &unk_24C4993E0;
  v7[4] = a1;
  sub_20B9B3C58(v5, a3, v7);
  *v5 = (uint64_t)&unk_24C464BD0;
  a1[35] = v5;
  sub_20B9B432C(v5);
  return a1;
}

void sub_20B87F098(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10E1C4022FF22E7);
  sub_20B87D9E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87F0CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_20B87F0DC(_QWORD *a1, const __CFURL *a2, void *a3)
{
  uint64_t *v5;
  _QWORD v7[5];

  *sub_20B87D8C8(a1, a2, a3, 2u) = &off_24C464D40;
  v5 = (uint64_t *)operator new();
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_20B87F1CC;
  v7[3] = &unk_24C4993E0;
  v7[4] = a1;
  sub_20B9B3C58(v5, a3, v7);
  *v5 = (uint64_t)&unk_24C464EB8;
  a1[35] = v5;
  sub_20B9B432C(v5);
  return a1;
}

void sub_20B87F198(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10E1C4022FF22E7);
  sub_20B87D9E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87F1CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_20B87F1DC(_QWORD *a1, const __CFURL *a2, void *a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v8;
  uint64_t *v9;
  _QWORD v11[5];

  v8 = sub_20B87D8C8(a1, a2, a3, a5);
  *v8 = &off_24C465050;
  v8[43] = a4;
  v9 = (uint64_t *)operator new();
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_20B87F2D4;
  v11[3] = &unk_24C4993E0;
  v11[4] = a1;
  sub_20B9B3C58(v9, a3, v11);
  *v9 = (uint64_t)&unk_24C465790;
  a1[35] = v9;
  sub_20B9B432C(v9);
  return a1;
}

void sub_20B87F2A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10E1C4022FF22E7);
  sub_20B87D9E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87F2D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_20B87F2E4(uint64_t a1)
{
  const __CFURL *v2;
  _QWORD *v3;

  v2 = sub_20B87F394(1);
  v3 = (_QWORD *)operator new();
  sub_20B87EFDC(v3, v2, *(void **)(a1 + 24));
  if (v2)
    CFRelease(v2);
  return v3;
}

void sub_20B87F35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x10E1C403F39E65DLL);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFURLRef sub_20B87F394(signed int a1)
{
  _QWORD *v2;
  const UInt8 *v3;
  int v4;
  const UInt8 *v5;
  CFIndex v6;

  v2 = (_QWORD *)sub_20B9AE60C();
  v3 = (const UInt8 *)sub_20B9AE6A0(v2, a1, off_254729648[0], off_2547295F0[0]);
  v4 = *((char *)v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(const UInt8 **)v3;
  if (v4 >= 0)
    v6 = v3[23];
  else
    v6 = *((_QWORD *)v3 + 1);
  return CFURLCreateFromFileSystemRepresentation(0, v5, v6, 0);
}

_QWORD *sub_20B87F3F4(uint64_t a1)
{
  const __CFURL *v2;
  _QWORD *v3;

  v2 = sub_20B87F394(2);
  v3 = (_QWORD *)operator new();
  sub_20B87F0DC(v3, v2, *(void **)(a1 + 24));
  if (v2)
    CFRelease(v2);
  return v3;
}

void sub_20B87F46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x10E1C403F39E65DLL);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B87F4A4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  const __CFURL *v6;
  _QWORD *v7;

  v4 = sub_20B8D0E3C(*(_DWORD *)a1);
  if (v4 == 5)
  {
    v5 = sub_20BA1C4F4();
    v4 = sub_20BA1C580(v5, 5);
  }
  v6 = sub_20B87F394(v4);
  v7 = (_QWORD *)operator new();
  sub_20B87F1DC(v7, v6, *(void **)(a1 + 24), a2, v4);
  if (v6)
    CFRelease(v6);
  return v7;
}

void sub_20B87F554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x10E1C40E7AA9E22);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B87F58C(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  signed int v4;
  const UInt8 *v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  const __CFURL *v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1[43] + 105))
  {
    v2 = (_QWORD *)sub_20B9AE60C();
    v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
    v4 = sub_20B8D0E3C(v3);
    v5 = (const UInt8 *)sub_20B9AE6A0(v2, v4, off_254729648[0], off_2547295F0[0]);
    v6 = *((char *)v5 + 23);
    if (v6 >= 0)
      v7 = v5;
    else
      v7 = *(const UInt8 **)v5;
    if (v6 >= 0)
      v8 = v5[23];
    else
      v8 = *((_QWORD *)v5 + 1);
    v9 = CFURLCreateFromFileSystemRepresentation(0, v7, v8, 0);
    if (v9)
      sub_20B886A0C((uint64_t)a1, v9, 0);
    (*(void (**)(_QWORD *))(*a1 + 264))(a1);
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
    v11 = sub_20B8D0E3C(v10);
    sub_20B9F80E0((uint64_t)(a1 + 9), v11);
    v12 = (_QWORD *)operator new();
    *v12 = &off_24C45FF48;
    sub_20B999860(v12 + 1, (uint64_t)(a1 + 9));
    v12[7] = &off_24C4601F0;
    v12[8] = 0;
    v12[9] = 0;
    v12[10] = 0;
    v13 = a1[37];
    a1[37] = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = operator new();
    *(_QWORD *)v14 = &off_24C465910;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    v15 = a1[36];
    a1[36] = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v9)
      CFRelease(v9);
  }
}

void sub_20B87F72C(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0xF1C40893AD9D5);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B87F768()
{
  return 0;
}

uint64_t sub_20B87F770()
{
  return 0;
}

uint64_t sub_20B87F77C()
{
  return 0;
}

uint64_t sub_20B87F784()
{
  return 0;
}

double sub_20B87F7B8()
{
  return 0.0;
}

uint64_t sub_20B87F7C0()
{
  return 0;
}

CFMutableArrayRef sub_20B87F7C8()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
}

uint64_t sub_20B87F7E8()
{
  return 0;
}

uint64_t sub_20B87F7F0()
{
  return 0;
}

uint64_t sub_20B87F7F8()
{
  return 0;
}

uint64_t sub_20B87F800()
{
  return 4;
}

uint64_t sub_20B87F808()
{
  return 0;
}

void sub_20B87F814(_QWORD *a1)
{
  sub_20B87D9E8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B87F838()
{
  return 15;
}

void sub_20B87F844(_QWORD *a1)
{
  sub_20B87D9E8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B87F868()
{
  return 7;
}

void sub_20B87F874(_QWORD *a1)
{
  sub_20B87D9E8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B87F898()
{
  return 8;
}

uint64_t sub_20B87F8A0(uint64_t a1)
{
  sub_20B8292CC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20B87F8C8(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 2 * a3;
    do
    {
      sub_20B87F944((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 2;
    }
    while (v6);
  }
  return a1;
}

void sub_20B87F92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B87F944(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_20B87F9C8(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    sub_20B8296A0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20B87F9C8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 13))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 26);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_20B87FB70(unint64_t a1)
{
  if (a1 >> 61)
    sub_20B800BC0();
  return operator new(8 * a1);
}

uint64_t sub_20B87FBA4(uint64_t result, uint64_t *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v82 = a2 - 2;
  v85 = a2;
  v80 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = v85;
    v12 = (char *)v85 - (char *)v10;
    v13 = v85 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v85 - 1), *v8);
        if ((_DWORD)result)
        {
          v40 = *v8;
          *v8 = *(v85 - 1);
          *(v85 - 1) = v40;
        }
        return result;
      case 3:
        return sub_20B8802F8(v8, v8 + 1, v9, a3);
      case 4:
        return sub_20B88057C(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return sub_20B88062C(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v12 <= 191)
        {
          v41 = v8 + 1;
          v43 = v8 == v85 || v41 == v85;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v49 + 8) = *(uint64_t *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(uint64_t *)((char *)v8 + v49 - 8));
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = (uint64_t *)((char *)v8 + v49 + 8);
                      goto LABEL_74;
                    }
                  }
                  v50 = v8;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != v85);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v41 = v8 + 1;
            }
            while (v8 + 1 != v85);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v85)
          {
            v51 = (unint64_t)(v13 - 2) >> 1;
            v83 = v51;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = v52;
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v8[v58];
                    if (2 * v53 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                    {
                      ++v54;
                      v58 = 2 * v53 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  v11 = v85;
                  v52 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v59 = (unint64_t)v12 >> 3;
            do
            {
              v60 = v11;
              v61 = 0;
              v62 = v59 - 2;
              v84 = *v8;
              if (v59 < 2)
                v62 = v59 - 1;
              v63 = v62 >> 1;
              v64 = v8;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v59)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v64[v61 + 1], v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v11 = v60 - 1;
              if (v65 == v60 - 1)
              {
                *v65 = v84;
              }
              else
              {
                *v65 = *v11;
                *v11 = v84;
                v68 = (char *)v65 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, *v65);
                  if ((_DWORD)result)
                  {
                    v71 = *v65;
                    do
                    {
                      v72 = v70;
                      *v65 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, v71);
                      v65 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v59-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v8[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_20B8802F8(v15, v8, v9, a3);
        }
        else
        {
          sub_20B8802F8(v8, v15, v9, a3);
          sub_20B8802F8(v8 + 1, v15 - 1, v82, a3);
          sub_20B8802F8(v8 + 2, &v8[v14 + 1], v80, a3);
          v11 = v85;
          sub_20B8802F8(v15 - 1, v15, &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v8 - 1), *v8) & 1) == 0)
        {
          v31 = *v8;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v8, *v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v32 = v10[1];
              ++v10;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v8 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v85)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = v85;
          if (v10 < v85)
          {
            v34 = v85;
            do
            {
              v35 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        do
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v8[v17];
        v21 = v11;
        if (v17 == 1)
        {
          v21 = v11;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = v20 - 1;
        }
        else
        {
          v24 = &v8[v17];
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = v24 - 1;
        }
        if (v29 != v8)
          *v8 = *v29;
        *v29 = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = sub_20B87FBA4(v8, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v30 = sub_20B8803D8(v8, v29, a3);
        v10 = v29 + 1;
        result = sub_20B8803D8(v29 + 1, v85, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_20B8802F8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_20B8803D8(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20B8802F8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20B88057C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20B88062C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_20B8802F8(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_20B88057C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_20B8802F8(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20B88062C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_20B88057C(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

double sub_20B880704(int a1, unsigned int a2, uint64_t a3)
{
  if (a3 && *(_BYTE *)(a3 + 96))
    return sub_20B96B6A0(a3, a1, a2);
  else
    return flt_20BA3899C[26 * a1 - 2619 + a2];
}

double sub_20B880748(uint64_t *a1, uint64_t a2)
{
  int v2;
  double v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;

  v2 = *((unsigned __int8 *)a1 + 16);
  v3 = 0.0;
  if ((unint64_t)a1[1] >> v2 != 1)
  {
    v6 = 0;
    do
    {
      v7 = v6 << v2;
      v8 = *a1;
      if (v2)
      {
        v9 = *(_WORD *)(v8 + v7);
        v10 = *(_WORD *)(v8 + (++v6 << v2));
      }
      else
      {
        v9 = *(char *)(v8 + v7);
        ++v6;
        v10 = *(char *)(v8 + v6);
      }
      v3 = v3 + sub_20B880704(v9, v10, a2);
      v2 = *((unsigned __int8 *)a1 + 16);
    }
    while (v6 < ((unint64_t)a1[1] >> v2) - 1);
  }
  return v3;
}

double sub_20B8807F4(int a1, int a2, _BYTE *a3)
{
  if (a3 && *a3)
    return sub_20B8D5108((uint64_t)a3, a1, a2);
  else
    return flt_20BA3899C[26 * a1 - 2619 + a2];
}

double sub_20B880838(uint64_t *a1, _BYTE *a2)
{
  int v2;
  double v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;

  v2 = *((unsigned __int8 *)a1 + 16);
  v3 = 0.0;
  if ((unint64_t)a1[1] >> v2 != 1)
  {
    v6 = 0;
    do
    {
      v7 = v6 << v2;
      v8 = *a1;
      if (v2)
      {
        v9 = *(_WORD *)(v8 + v7);
        v10 = *(_WORD *)(v8 + (++v6 << v2));
      }
      else
      {
        v9 = *(char *)(v8 + v7);
        ++v6;
        v10 = *(char *)(v8 + v6);
      }
      v3 = v3 + sub_20B8807F4(v9, v10, a2);
      v2 = *((unsigned __int8 *)a1 + 16);
    }
    while (v6 < ((unint64_t)a1[1] >> v2) - 1);
  }
  return v3;
}

__CFString *sub_20B8808E4(unsigned __int16 **a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unint64_t v6;
  const __CFString *v7;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    do
    {
      v7 = CFStringCreateWithCString(v2, (&off_24C4A0588)[2 * *v4], 0x8000100u);
      if (v7)
        CFStringAppend(Mutable, v7);
      if (v6 < a1[1] - *a1 - 1)
        CFStringAppend(Mutable, CFSTR(" "));
      if (v7)
        CFRelease(v7);
      ++v4;
      ++v6;
    }
    while (v4 != v5);
  }
  return Mutable;
}

void sub_20B8809E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8809F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  _QWORD *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int64x2_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 v46;
  char *p_p;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  __int16 *v55;
  uint64_t v56;
  float *v57;
  float v58;
  double v59;
  float *v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  NSObject *v65;
  uint64_t v66;
  uint8_t v67[16];
  float *v68;
  void *__p;
  uint64_t v70;
  unsigned __int8 v71;
  _BYTE v72[32];
  __int128 v73;
  void *v74[2];
  uint64_t v75;
  int64x2_t v76;
  _QWORD *v77;
  uint64_t v78;
  int64x2_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = &unk_24C460D28;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) == 0)
    return;
  v76 = 0uLL;
  v77 = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 16))(&v78);
  *(_QWORD *)&v73 = &v77;
  v8 = sub_20B87FB70(1uLL);
  v10 = &v8[v9];
  *(_QWORD *)&v72[24] = v10;
  v11 = v78;
  v78 = 0;
  *v8 = v11;
  v12 = v8 + 1;
  *(_QWORD *)&v72[16] = v8 + 1;
  v13 = (_QWORD *)v76.i64[1];
  v14 = (_QWORD *)v76.i64[0];
  if (v76.i64[1] == v76.i64[0])
  {
    v16 = vdupq_n_s64(v76.u64[1]);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *v13 = 0;
      *--v8 = v15;
    }
    while (v13 != v14);
    v16 = v76;
    v10 = *(_QWORD **)&v72[24];
    v12 = *(_QWORD **)&v72[16];
  }
  v76.i64[0] = (uint64_t)v8;
  v76.i64[1] = (uint64_t)v12;
  *(int64x2_t *)&v72[8] = v16;
  v17 = v77;
  v77 = v10;
  *(_QWORD *)&v72[24] = v17;
  *(_QWORD *)v72 = v16.i64[0];
  sub_20B8821E8((uint64_t)v72);
  v76.i64[1] = (uint64_t)v12;
  v18 = v78;
  v78 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(const void **)a2;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = v20 - *(_QWORD *)a2;
  if (v20 != *(_QWORD *)a2 && *(_WORD *)(v20 - 2) != 32)
  {
    memset(v72, 0, 24);
    sub_20B87ACC8(v72, v19, v20, v21 >> 1);
    *(_QWORD *)&v72[24] = 0;
    v73 = 0uLL;
    sub_20B882248(&v72[24], *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    sub_20B8B31AC((uint64_t)v72);
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v72);
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v22 + 16))(&__p);
    v23 = v76.i64[1];
    if (v76.i64[1] >= (unint64_t)v77)
    {
      v26 = (v76.i64[1] - v76.i64[0]) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        sub_20B8821D4();
      v27 = ((uint64_t)v77 - v76.i64[0]) >> 2;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if ((unint64_t)v77 - v76.i64[0] >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      v81 = &v77;
      if (v28)
        v28 = (unint64_t)sub_20B87FB70(v28);
      else
        v29 = 0;
      v30 = (_QWORD *)(v28 + 8 * v26);
      v31 = v28 + 8 * v29;
      v80 = v31;
      v32 = __p;
      __p = 0;
      *v30 = v32;
      v25 = v30 + 1;
      v79.i64[1] = (uint64_t)(v30 + 1);
      v33 = (_QWORD *)v76.i64[1];
      v34 = (_QWORD *)v76.i64[0];
      if (v76.i64[1] == v76.i64[0])
      {
        v36 = vdupq_n_s64(v76.u64[1]);
      }
      else
      {
        do
        {
          v35 = *--v33;
          *v33 = 0;
          *--v30 = v35;
        }
        while (v33 != v34);
        v36 = v76;
        v25 = (_QWORD *)v79.i64[1];
        v31 = v80;
      }
      v76.i64[0] = (uint64_t)v30;
      v76.i64[1] = (uint64_t)v25;
      v79 = v36;
      v37 = v77;
      v77 = (_QWORD *)v31;
      v80 = (unint64_t)v37;
      v78 = v36.i64[0];
      sub_20B8821E8((uint64_t)&v78);
    }
    else
    {
      v24 = __p;
      __p = 0;
      *(_QWORD *)v76.i64[1] = v24;
      v25 = (_QWORD *)(v23 + 8);
    }
    v76.i64[1] = (uint64_t)v25;
    v38 = __p;
    __p = 0;
    if (v38)
      (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
    sub_20B882354((uint64_t)v72);
  }
  v39 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v72 = xmmword_20BA39430;
  *(_QWORD *)&v72[16] = 10;
  *(_DWORD *)&v72[24] = 1077936128;
  v84[0] = &off_24C46B630;
  v85 = v84;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int64x2_t *, uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v39 + 24))(&v78, v39, &v76, 8, v72, v84);
  v40 = v85;
  if (v85 == v84)
  {
    v41 = 4;
    v40 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_35;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_35:
  *(_QWORD *)v72 = 0;
  *(_DWORD *)&v72[8] = 0;
  *(_OWORD *)&v72[16] = 0u;
  v73 = 0u;
  *(_OWORD *)v74 = 0u;
  v75 = 0;
  v42 = v78;
  v43 = v79.i64[0];
  if (v78 == v79.i64[0])
    goto LABEL_83;
  do
  {
    if (*(char *)(v42 + 23) < 0)
    {
      v45 = *(char **)v42;
      v44 = *(_QWORD *)(v42 + 8);
    }
    else
    {
      v44 = *(unsigned __int8 *)(v42 + 23);
      v45 = (char *)v42;
    }
    sub_20B8AE824(v45, v44, (uint64_t)&__p);
    v46 = v71;
    if ((v71 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v71 & 0x80u) == 0)
      v48 = v71;
    else
      v48 = v70;
    if (!v48)
      goto LABEL_78;
    v49 = p_p;
    v50 = v48;
    if (*(_WORD *)p_p == 32)
    {
      if ((v71 & 0x80u) == 0)
        v51 = (char *)&__p;
      else
        v51 = (char *)__p;
      v50 = v48 - 1;
      if (v48 == 1)
        goto LABEL_78;
      v49 = v51 + 2;
    }
    v52 = v50 - (*(_WORD *)&v49[2 * v50 - 2] == 32);
    if (v52)
    {
      v53 = 2 * v52;
      while (v49[1] << 8 == 4352)
      {
        v49 += 2;
        v53 -= 2;
        if (!v53)
          goto LABEL_78;
      }
      v54 = sub_20B90DD8C(a1, (uint64_t)p_p, v48);
      v46 = v71;
      if (!v54)
      {
        if ((v71 & 0x80u) == 0)
          v55 = (__int16 *)&__p;
        else
          v55 = (__int16 *)__p;
        if ((v71 & 0x80u) == 0)
          v56 = v71;
        else
          v56 = v70;
        sub_20B90DE2C(a1, (int *)v72, v55, v56, **(_DWORD **)(a1 + 8), (uint64_t *)&v68);
        if (!v68)
        {
LABEL_77:
          v46 = v71;
          goto LABEL_78;
        }
        (*(void (**)(float *, double))(*(_QWORD *)v68 + 400))(v68, *(float *)(v42 + 24));
        v57 = v68;
        v58 = v68[24];
        v59 = (*(double (**)(float *))(*(_QWORD *)v68 + 392))(v68);
        (*(void (**)(float *, _QWORD))(*(_QWORD *)v57 + 480))(v57, (int)(v59 * -5500.0 + v58 * -4400.0));
        (*(void (**)(float *, uint64_t, const char *, _QWORD))(*(_QWORD *)v68 + 528))(v68, 10, "[predictPhrasesWithLanguageModel]", 0);
        v60 = v68;
        v68 = 0;
        *(_QWORD *)v67 = v60;
        v82[0] = &unk_24C459188;
        v83 = v82;
        v61 = sub_20B8FDA94((_QWORD *)a3, (_QWORD **)v67, 2, 0, (uint64_t)v82);
        v62 = v83;
        if (v83 == v82)
        {
          v62 = v82;
          v63 = 4;
        }
        else
        {
          if (!v83)
          {
LABEL_70:
            v64 = *(_QWORD **)v67;
            *(_QWORD *)v67 = 0;
            if (v64)
              (*(void (**)(_QWORD *))(*v64 + 16))(v64);
            if ((v61 & 1) == 0)
            {
              v65 = sub_20B9A7C5C(0xAu);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)v67 = 0;
                _os_log_debug_impl(&dword_20B7F7000, v65, OS_LOG_TYPE_DEBUG, " ∟ Rejected", v67, 2u);
              }
            }
            v66 = (uint64_t)v68;
            v68 = 0;
            if (v66)
              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
            goto LABEL_77;
          }
          v63 = 5;
        }
        (*(void (**)(void))(*v62 + 8 * v63))();
        goto LABEL_70;
      }
    }
LABEL_78:
    if ((v46 & 0x80) != 0)
      operator delete(__p);
    v42 += 32;
  }
  while (v42 != v43);
  if (v74[0])
  {
    v74[1] = v74[0];
    operator delete(v74[0]);
  }
LABEL_83:
  *(_QWORD *)v72 = &v78;
  sub_20B86F120((void ***)v72);
  *(_QWORD *)v72 = &v76;
  sub_20B882394((void ***)v72);
}

void sub_20B8810E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  char *v41;

  v41 = a12;
  a12 = 0;
  if (v41)
    (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
  sub_20B882354((uint64_t)&__p);
  a12 = &a28;
  sub_20B882394((void ***)&a12);
  sub_20B881268(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_20B881268(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C460D28;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 48);
  sub_20B882410(&v4);
  sub_20B84055C(v2);
  return a1;
}

void sub_20B8812BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v9;
  char v10;
  unsigned __int16 *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int16 v25;
  int v26;
  void **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void **v32;
  int v33;
  char *v34;
  BOOL v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  __int16 *v67;
  void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  float v75;
  double v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  void *v84;
  void **v85;
  void *v86[3];
  void *v87[2];
  uint64_t v88;
  int v89;
  void *v90;
  void *v91[3];
  void *__p[2];
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  uint8_t buf[8];
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _BYTE v107[24];
  _BYTE *v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113[3];

  v113[0] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = &unk_24C460D28;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_DWORD *)(a4 + 40) = 1065353216;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  v10 = a3 ? v9 : 0;
  if ((v10 & 1) == 0)
    return;
  v11 = *(unsigned __int16 **)(a3 + 32);
  v12 = *(char *)(a3 + 55);
  v13 = v12 < 0;
  if (v12 >= 0)
    v11 = (unsigned __int16 *)(a3 + 32);
  v14 = *(unsigned __int8 *)(a3 + 55);
  if (v13)
    v14 = *(_QWORD *)(a3 + 40);
  if (!v14)
    return;
  v15 = v14 - 1;
  if (!v15)
  {
LABEL_15:
    v19 = v11[v15];
    if ((unsigned __int16)((unsigned __int16)(v19 + 21504) >> 2) >= 0xAE9u && (unsigned __int16)(v19 - 12593) > 0x32u)
      return;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    LODWORD(v94) = 1;
    HIDWORD(v94) = *(_DWORD *)(a3 + 96);
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    v20 = *(_QWORD *)(a3 + 64);
    v21 = *(_QWORD *)(a3 + 32);
    if (*(char *)(a3 + 55) < 0)
    {
      v22 = *(_QWORD *)(a3 + 40);
    }
    else
    {
      v21 = a3 + 32;
      v22 = *(unsigned __int8 *)(a3 + 55);
    }
    v96 = v21;
    v97 = v22;
    v23 = *(unsigned __int8 *)(a3 + 87);
    if ((v23 & 0x80u) != 0)
      v23 = *(_QWORD *)(a3 + 72);
    else
      v20 = a3 + 64;
    v98 = v20;
    v99 = v23;
    v100[1] = 0;
    v101 = 0;
    v100[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v93 = 0;
    v24 = *(unsigned __int16 *)(v21 + 2 * v22 - 2);
    v25 = v24 - 12644;
    if (v22)
    {
      if (v24 == 32)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        goto LABEL_72;
      }
      if (v25 > 0xFFCCu)
      {
        v26 = 0;
        goto LABEL_62;
      }
      sub_20B9DECCC(v24, (uint64_t)v87);
      v30 = 0;
      v31 = v87[1];
      if (v88 >= 0)
        v32 = v87;
      else
        v32 = (void **)v87[0];
      if (v88 >= 0)
        v31 = (void *)HIBYTE(v88);
      v33 = *((unsigned __int16 *)v32 + (_QWORD)v31 - 1);
      while (*(unsigned __int16 *)&a11213141516171[v30] != v33)
      {
        v30 += 2;
        if (v30 == 54)
        {
          v34 = 0;
          goto LABEL_39;
        }
      }
      v34 = &a11213141516171[v30];
LABEL_39:
      if (v34)
        v35 = v34 - "1121314151617191:1;1<1=1>1?1@1A1B1D1E1F1G1H1J1K1L1M1N1" == -2;
      else
        v35 = 1;
      v29 = v35;
      if (SHIBYTE(v88) < 0)
        operator delete(v87[0]);
    }
    else
    {
      v29 = 0;
    }
    if (v25 < 0xFFCDu)
      v26 = v29;
    else
      v26 = 0;
    if (v25 < 0xFFCDu)
    {
      if (!v26)
      {
        v27 = 0;
        v28 = 0;
        goto LABEL_72;
      }
      sub_20B9DECCC(*(unsigned __int16 *)(v96 + 2 * v97 - 2), (uint64_t)v87);
      if (SHIBYTE(v93) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)v87;
      v93 = v88;
      if (v88 >= 0)
        v27 = __p;
      else
        v27 = (void **)v87[0];
      if (v88 >= 0)
        v28 = (void *)HIBYTE(v88);
      else
        v28 = v87[1];
      v36 = v97 - 1;
      v26 = 1;
LABEL_71:
      v97 = v36;
      v29 = 1;
LABEL_72:
      sub_20B881F78(*(_QWORD ***)(a1 + 16));
      if (v100[0])
      {
        v100[1] = v100[0];
        operator delete(v100[0]);
      }
      *(_OWORD *)v100 = *(_OWORD *)v87;
      v101 = v88;
      if (!sub_20B90DC60(&v94, *(_QWORD *)(a1 + 16), v29))
        goto LABEL_158;
      v85 = v27;
      v39 = *(_QWORD *)(a1 + 16);
      v111 = 0uLL;
      v112 = 0;
      sub_20B83C9C4(&v111, v100[0], (uint64_t)v100[1], ((char *)v100[1] - (char *)v100[0]) >> 2);
      v87[0] = 0;
      v87[1] = 0;
      v88 = 0;
      *(_QWORD *)&v109 = v87;
      BYTE8(v109) = 0;
      v87[0] = operator new(0x18uLL);
      v87[1] = v87[0];
      v88 = (uint64_t)v87[0] + 24;
      v87[1] = sub_20B88248C((uint64_t)&v88, (uint64_t)&v111, (uint64_t)v113, (_QWORD *)v87[0]);
      (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v39 + 64))(v91, v39, v87, 1);
      if (v91[0])
      {
        v91[1] = v91[0];
        operator delete(v91[0]);
      }
      *(_QWORD *)&v109 = v87;
      sub_20B83B400((void ***)&v109);
      if ((_QWORD)v111)
      {
        *((_QWORD *)&v111 + 1) = v111;
        operator delete((void *)v111);
      }
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 96))(&v90, *(_QWORD *)(a1 + 16), 0);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v90 + 24))(v90, *((unsigned int *)v100[1] - 1));
      v111 = 0uLL;
      v112 = 0;
      if (!(_DWORD)v29)
      {
        if (!v26)
          goto LABEL_114;
        goto LABEL_91;
      }
      v40 = *(_QWORD *)(a1 + 24);
      v41 = v90;
      *(_OWORD *)v87 = xmmword_20BA39440;
      v88 = 16;
      v89 = 1082130432;
      v108 = 0;
      v42 = operator new(0x20uLL);
      *v42 = &off_24C46B580;
      v42[1] = a1;
      v42[2] = v85;
      v42[3] = v28;
      v108 = v42;
      (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, void **, _BYTE *))(*(_QWORD *)v40 + 16))(&v109, v40, v41, 8, v87, v107);
      sub_20B8825BC((uint64_t *)&v111);
      v111 = v109;
      v112 = v110;
      v110 = 0;
      v109 = 0uLL;
      *(_QWORD *)buf = &v109;
      sub_20B86F120((void ***)buf);
      v43 = v108;
      if (v108 == v107)
      {
        v45 = 4;
        v43 = v107;
        v44 = v26;
      }
      else
      {
        v44 = v26;
        if (!v108)
          goto LABEL_87;
        v45 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v45))();
LABEL_87:
      v46 = *((_QWORD *)&v111 + 1);
      v47 = v111;
      if ((_QWORD)v111 == *((_QWORD *)&v111 + 1))
        v48 = v44;
      else
        v48 = 0;
      if ((v48 & 1) == 0)
      {
LABEL_120:
        if (v47 != v46)
        {
          while (1)
          {
            if (*(float *)(v47 + 24) < -1.7)
              goto LABEL_156;
            if (*(char *)(v47 + 23) < 0)
            {
              v66 = *(char **)v47;
              v65 = *(_QWORD *)(v47 + 8);
            }
            else
            {
              v65 = *(unsigned __int8 *)(v47 + 23);
              v66 = (char *)v47;
            }
            sub_20B8AE824(v66, v65, (uint64_t)v87);
            v67 = v88 >= 0 ? (__int16 *)v87 : (__int16 *)v87[0];
            v68 = v88 >= 0 ? (void *)HIBYTE(v88) : v87[1];
            sub_20B90DE2C(a1, (int *)&v94, v67, (uint64_t)v68, **(_DWORD **)(a1 + 8), (uint64_t *)&v109);
            if ((_QWORD)v109)
              break;
LABEL_153:
            if (SHIBYTE(v88) < 0)
              operator delete(v87[0]);
            v47 += 32;
            if (v47 == v46)
              goto LABEL_156;
          }
          v69 = *(char *)(v109 + 55);
          if (v69 >= 0)
            v70 = v109 + 32;
          else
            v70 = *(_QWORD *)(v109 + 32);
          if (v69 >= 0)
            v71 = *(unsigned __int8 *)(v109 + 55);
          else
            v71 = *(_QWORD *)(v109 + 40);
          if (sub_20B90DD8C(a1, v70, v71))
          {
LABEL_151:
            v83 = v109;
            *(_QWORD *)&v109 = 0;
            if (v83)
              (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
            goto LABEL_153;
          }
          v72 = v109;
          v73 = (*(double (**)(uint64_t))(*(_QWORD *)a3 + 392))(a3);
          (*(void (**)(uint64_t, double))(*(_QWORD *)v72 + 400))(v72, v73 + *(float *)(v47 + 24));
          v74 = v109;
          v75 = *(float *)(a3 + 96);
          v76 = (*(double (**)(_QWORD))(*(_QWORD *)v109 + 392))(v109);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 480))(v74, (int)(v76 * -5500.0 + v75 * -4400.0));
          (*(void (**)(_QWORD, uint64_t, const char *, _QWORD))(*(_QWORD *)v109 + 528))(v109, 10, "[expandPhrasesWithLanguageModel]", 0);
          v77 = v109;
          *(_QWORD *)&v109 = 0;
          *(_QWORD *)buf = v77;
          v103[0] = &unk_24C459188;
          v104 = v103;
          v78 = sub_20B8FDA94((_QWORD *)a4, (_QWORD **)buf, 2, 0, (uint64_t)v103);
          v79 = v104;
          if (v104 == v103)
          {
            v79 = v103;
            v80 = 4;
          }
          else
          {
            if (!v104)
            {
LABEL_146:
              v81 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v81)
                (*(void (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
              if ((v78 & 1) == 0)
              {
                v82 = sub_20B9A7C5C(0xAu);
                if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_debug_impl(&dword_20B7F7000, v82, OS_LOG_TYPE_DEBUG, " ∟ Rejected", buf, 2u);
                }
              }
              goto LABEL_151;
            }
            v80 = 5;
          }
          (*(void (**)(void))(*v79 + 8 * v80))();
          goto LABEL_146;
        }
        goto LABEL_156;
      }
LABEL_91:
      v49 = *(_DWORD *)(a3 + 96);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
      v51 = *(char *)(a3 + 55);
      if (v51 >= 0)
        v52 = a3 + 32;
      else
        v52 = *(_QWORD *)(a3 + 32);
      if (v51 >= 0)
        v53 = *(unsigned __int8 *)(a3 + 55);
      else
        v53 = *(_QWORD *)(a3 + 40);
      v54 = *(char *)(a3 + 87);
      v55 = v54 < 0;
      v56 = *(_QWORD *)(a3 + 64);
      if (v54 >= 0)
        v56 = a3 + 64;
      v57 = *(unsigned __int8 *)(a3 + 87);
      if (v55)
        v57 = *(_QWORD *)(a3 + 72);
      LODWORD(v94) = 1;
      HIDWORD(v94) = v49;
      v95 = v50;
      v96 = v52;
      v97 = v53;
      v98 = v56;
      v99 = v57;
      if (v100[0])
      {
        v100[1] = v100[0];
        operator delete(v100[0]);
      }
      v100[0] = 0;
      v100[1] = 0;
      v101 = 0;
      sub_20B881F78(*(_QWORD ***)(a1 + 16));
      if (v100[0])
      {
        v100[1] = v100[0];
        operator delete(v100[0]);
      }
      *(_OWORD *)v100 = *(_OWORD *)v87;
      v101 = v88;
      if (!sub_20B90DC60(&v94, *(_QWORD *)(a1 + 16), 0))
      {
LABEL_156:
        v87[0] = &v111;
        sub_20B86F120((void ***)v87);
        v84 = v90;
        v90 = 0;
        if (v84)
          (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
LABEL_158:
        if (SHIBYTE(v93) < 0)
          operator delete(__p[0]);
        if (v100[0])
        {
          v100[1] = v100[0];
          operator delete(v100[0]);
        }
        return;
      }
      v58 = *(_QWORD *)(a1 + 16);
      v109 = 0uLL;
      v110 = 0;
      sub_20B83C9C4(&v109, v100[0], (uint64_t)v100[1], ((char *)v100[1] - (char *)v100[0]) >> 2);
      sub_20B882030(v87, (uint64_t)&v109, 1uLL);
      (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v58 + 64))(v86, v58, v87, 1);
      if (v86[0])
      {
        v86[1] = v86[0];
        operator delete(v86[0]);
      }
      *(_QWORD *)buf = v87;
      sub_20B83B400((void ***)buf);
      if ((_QWORD)v109)
      {
        *((_QWORD *)&v109 + 1) = v109;
        operator delete((void *)v109);
      }
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 96))(v87, *(_QWORD *)(a1 + 16), 0);
      v59 = v87[0];
      v87[0] = 0;
      v60 = v90;
      v90 = v59;
      if (v60)
      {
        (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
        v61 = v87[0];
        v87[0] = 0;
        if (v61)
          (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
      }
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v90 + 24))(v90, *((unsigned int *)v100[1] - 1));
LABEL_114:
      v62 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)v87 = xmmword_20BA39440;
      v88 = 16;
      v89 = 1082130432;
      v105[0] = &off_24C46B5D8;
      v106 = v105;
      (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, void **, _QWORD *))(*(_QWORD *)v62 + 16))(&v109, v62, v90, 8, v87, v105);
      sub_20B8825BC((uint64_t *)&v111);
      v111 = v109;
      v112 = v110;
      v109 = 0uLL;
      v110 = 0;
      *(_QWORD *)buf = &v109;
      sub_20B86F120((void ***)buf);
      v63 = v106;
      if (v106 == v105)
      {
        v64 = 4;
        v63 = v105;
      }
      else
      {
        if (!v106)
        {
LABEL_119:
          v46 = *((_QWORD *)&v111 + 1);
          v47 = v111;
          goto LABEL_120;
        }
        v64 = 5;
      }
      (*(void (**)(void))(*v63 + 8 * v64))();
      goto LABEL_119;
    }
    v21 = v96;
    v22 = v97;
    if (!v97)
    {
      v37 = 0;
LABEL_68:
      v36 = v22 - (_QWORD)v37;
      v27 = (void **)(v21 + 2 * v36);
      if (v21)
        v28 = v37;
      else
        v28 = 0;
      goto LABEL_71;
    }
LABEL_62:
    v37 = 0;
    v38 = 2 * v22 - 2;
    while (*(unsigned __int16 *)(v21 + v38) - 12593 <= 0x32)
    {
      ++v37;
      v38 -= 2;
      if ((char *)v22 == v37)
      {
        v37 = (char *)v22;
        goto LABEL_68;
      }
    }
    goto LABEL_68;
  }
  v16 = v15;
  v17 = v11;
  while (1)
  {
    v18 = *v17++;
    if ((v18 - 12593) < 0x33)
      break;
    if (!--v16)
      goto LABEL_15;
  }
}

void sub_20B881D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  a15 = v51 - 160;
  sub_20B86F120((void ***)&a15);
  v53 = a22;
  a22 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  if (a31 < 0)
    operator delete(__p);
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
  }
  sub_20B881268(v50);
  _Unwind_Resume(a1);
}

void sub_20B881F78(_QWORD **a1)
{
  void *__p[2];
  char v3;

  (*(void (**)(void **__return_ptr))(*a1[1] + 32))(__p);
  ((void (*)(_QWORD **, void **))(*a1)[13])(a1, __p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_20B881FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B882030(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_20B828D20(a1, a3);
    a1[1] = sub_20B88248C(v4, a2, a2 + 24 * a3, (_QWORD *)a1[1]);
  }
  return a1;
}

void sub_20B8820AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B83B400(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8820CC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C460230;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B882114(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C460230;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B88216C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C460D28;
  v2 = a1 + 8;
  v4 = (void **)(a1 + 48);
  sub_20B882410(&v4);
  sub_20B84055C(v2);
  return MEMORY[0x20BD39CB0](a1, 0x10A1C40731192B1);
}

void sub_20B8821D4()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B8821E8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20B882248(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B8822C0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B8822A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B8822C0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_20B8821D4();
  result = (char *)sub_20B882310((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_20B882310(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_20B800BC0();
  return operator new(40 * a2);
}

uint64_t sub_20B882354(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B882394(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B882410(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20B88248C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_20B83C9C4(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B88253C((uint64_t)v8);
  return v4;
}

void sub_20B882528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B88253C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B88253C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B882570(a1);
  return a1;
}

void sub_20B882570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_20B8825BC(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B86F160(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20B882600()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B882614()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46B630;
  return result;
}

void sub_20B882638(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46B630;
}

uint64_t sub_20B882650()
{
  return 1;
}

uint64_t sub_20B882658(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F1C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B882694()
{
  return &unk_24C45F1C0;
}

void sub_20B8826A4()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8826B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C459188;
  return result;
}

void sub_20B8826E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C459188;
}

BOOL sub_20B8826FC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;

  v3 = *a3;
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  return v4 > (*(int (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
}

uint64_t sub_20B882744(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458DC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B882780()
{
  return &unk_24C458DC8;
}

void sub_20B882790()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8827A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B580;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8827E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B580;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20B88280C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v5;
  int v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  _BOOL4 v10;
  _BOOL8 v11;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  unsigned __int8 v16;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return 0;
  sub_20B8AE824(*(char **)a2, v3, (uint64_t)__p);
  if (v14 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  sub_20B9DECCC(*(unsigned __int16 *)v5, (uint64_t)v15);
  if (v14 < 0)
    operator delete(__p[0]);
  v6 = (char)v16;
  v7 = v15;
  v8 = (void *)v15[0];
  if ((v16 & 0x80u) == 0)
  {
    v9 = v16;
  }
  else
  {
    v7 = (_QWORD *)v15[0];
    v9 = v15[1];
  }
  __p[0] = v7;
  __p[1] = (void *)v9;
  v10 = sub_20B947D74((uint64_t)__p, a1 + 16);
  v11 = v9 > *(_QWORD *)(a1 + 24) && v10;
  if (v6 < 0)
    operator delete(v8);
  return v11;
}

void sub_20B8828D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8828EC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F1A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B882928()
{
  return &unk_24C45F1A0;
}

void sub_20B882938()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B88294C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46B5D8;
  return result;
}

void sub_20B882970(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46B5D8;
}

uint64_t sub_20B882988()
{
  return 1;
}

uint64_t sub_20B882990(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F1B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8829CC()
{
  return &unk_24C45F1B0;
}

void sub_20B8829DC()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8829F0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, double **a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  double v28;
  uint64_t *v29;
  double v30;
  uint64_t v31;
  unint64_t j;
  unsigned __int16 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  double v52;
  double **v53;
  unint64_t v54;
  double *v55;
  double *v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  void *v68;
  char *v69;
  char *v70;
  void *__p;
  _DWORD *v72;
  unint64_t v73;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    __p = 0;
    v72 = 0;
    v73 = 0;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[2] - a3[1]) >> 3)) >= *(_QWORD *)(v4 + 32) - 1)
      v8 = *(_QWORD *)(v4 + 32) - 1;
    else
      v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[2] - a3[1]) >> 3);
    v9 = operator new(4uLL);
    *v9 = 1;
    v10 = v9 + 1;
    v72 = v9 + 1;
    v73 = (unint64_t)(v9 + 1);
    __p = v9;
    if (v8)
    {
      v65 = a2;
      for (i = 0; i != v8; ++i)
      {
        v12 = *(_QWORD *)(a3[10] + 8 * i);
        v13 = a3[4];
        v14 = a3[1];
        if (v12 >= (a3[5] - v13) >> 1)
        {
          v15 = 0;
          v16 = 0;
        }
        else
        {
          v15 = (_WORD *)(v13 + 2 * v12);
          if (v13)
            v16 = *(unsigned __int16 *)(v14 + 40 * i + 24);
          else
            v16 = 0;
        }
        v17 = sub_20BA2F950(*(_QWORD *)(a1 + 8), v15, v16, *(_DWORD *)(v14 + 40 * i));
        v18 = v17;
        v19 = v72;
        if ((unint64_t)v72 >= v73)
        {
          v20 = __p;
          v21 = ((char *)v72 - (_BYTE *)__p) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            sub_20B80CDD8();
          v23 = v73 - (_QWORD)__p;
          if ((uint64_t)(v73 - (_QWORD)__p) >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)sub_20B8127BC((uint64_t)&v73, v24);
            v20 = __p;
            v19 = v72;
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[4 * v21];
          *(_DWORD *)v26 = v18;
          v10 = v26 + 4;
          while (v19 != v20)
          {
            v27 = *--v19;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          __p = v26;
          v72 = v10;
          v73 = (unint64_t)&v25[4 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v72 = v17;
          v10 = v19 + 1;
        }
        v72 = v10;
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = __p;
      a2 = v65;
    }
    v28 = sub_20BA30348(v4, v9, v10 - v9);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v29 = *(uint64_t **)(a2 + 48);
    v66 = *(uint64_t **)(a2 + 56);
    if (v29 != v66)
    {
      v30 = v28;
      do
      {
        v31 = *v29;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v29 + 408))(*v29) == 1)
          break;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        sub_20B873D0C(&v68, __p, (uint64_t)v72, ((char *)v72 - (_BYTE *)__p) >> 2);
        for (j = 0; j < (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v29 + 48))(*v29); ++j)
        {
          v33 = (unsigned __int16 *)sub_20B916C5C(v31, j);
          v35 = v34;
          v36 = (unsigned __int16 *)sub_20B91708C(v31, j);
          v38 = v37;
          v39 = (int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 560))(v31, j);
          v40 = sub_20BA2FD34(*(_QWORD *)(a1 + 8), v33, v35, v36, v38, *v39);
          v41 = v40;
          v42 = v69;
          if (v69 >= v70)
          {
            v44 = (char *)v68;
            v45 = (v69 - (_BYTE *)v68) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              sub_20B80CDD8();
            v47 = v70 - (_BYTE *)v68;
            if ((v70 - (_BYTE *)v68) >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_20B8127BC((uint64_t)&v70, v48);
              v44 = (char *)v68;
              v42 = v69;
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[4 * v45];
            *(_DWORD *)v50 = v41;
            v43 = v50 + 4;
            while (v42 != v44)
            {
              v51 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v50 - 1) = v51;
              v50 -= 4;
            }
            v68 = v50;
            v69 = v43;
            v70 = &v49[4 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(_DWORD *)v69 = v40;
            v43 = v42 + 4;
          }
          v69 = v43;
        }
        v52 = sub_20BA30348(*(_QWORD *)(a1 + 8), v68, (v69 - (_BYTE *)v68) >> 2) - v30;
        v53 = a4;
        v55 = a4[1];
        v54 = (unint64_t)a4[2];
        if ((unint64_t)v55 >= v54)
        {
          v57 = *a4;
          v58 = v55 - *a4;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61)
            sub_20B80CDD8();
          v60 = v54 - (_QWORD)v57;
          if (v60 >> 2 > v59)
            v59 = v60 >> 2;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)sub_20B800BE8((uint64_t)(a4 + 2), v61);
            v57 = *a4;
            v55 = a4[1];
          }
          else
          {
            v62 = 0;
          }
          v63 = (double *)&v62[8 * v58];
          *v63 = v52;
          v56 = v63 + 1;
          while (v55 != v57)
          {
            v64 = *((_QWORD *)v55-- - 1);
            *((_QWORD *)v63-- - 1) = v64;
          }
          *a4 = v63;
          a4[1] = v56;
          a4[2] = (double *)&v62[8 * v61];
          if (v57)
            operator delete(v57);
          v53 = a4;
        }
        else
        {
          *v55 = v52;
          v56 = v55 + 1;
        }
        v53[1] = v56;
        if (v68)
        {
          v69 = (char *)v68;
          operator delete(v68);
        }
        ++v29;
      }
      while (v29 != v66);
    }
    if (__p)
    {
      v72 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_20B882E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B882F18(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  a1[4] = a1[3];
  sub_20B828E74(a1 + 6);
  a1[11] = a1[10];
  a1[14] = a1[13];
  v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
  result = sub_20B923A8C(v2);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    sub_20B923B38(v4, 0, 0);
    v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    result = sub_20B923C14(v5);
  }
  a1[9] = 0;
  return result;
}

void sub_20B882FA0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *__p;
  int *v22;
  int *v23;

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  __p = 0;
  v22 = 0;
  v23 = 0;
  v4 = (uint64_t)(a2[1] - *a2) >> 1;
  v5 = v4 + 1;
  v6 = a1[1];
  if (v6)
  {
    v6 = *(_QWORD *)(v6 + 32);
    if (v5 <= v6)
    {
      v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    if (v4 == -1)
      goto LABEL_6;
  }
  v7 = v5 - v6;
LABEL_6:
  if (v7 < v4)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned __int16 *)(*a2 + 2 * v7) + 1000;
      if (v8 >= v23)
      {
        v10 = __p;
        v11 = v8 - __p;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          sub_20B80CDD8();
        v13 = (char *)v23 - (char *)__p;
        if (((char *)v23 - (char *)__p) >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_20B8127BC((uint64_t)&v23, v14);
          v10 = __p;
          v8 = v22;
        }
        else
        {
          v15 = 0;
        }
        v16 = (int *)&v15[4 * v11];
        *v16 = v9;
        v17 = v16 + 1;
        while (v8 != v10)
        {
          v18 = *--v8;
          *--v16 = v18;
        }
        __p = v16;
        v23 = (int *)&v15[4 * v14];
        if (v10)
          operator delete(v10);
        v8 = v17;
      }
      else
      {
        *v8++ = v9;
      }
      v22 = v8;
      ++v7;
    }
    while (v7 != v4);
    if (__p == v8)
      goto LABEL_30;
    v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    if (sub_20B923A8C(v19))
    {
      v20 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
      sub_20B923B38(v20, (uint64_t)__p, v22 - __p);
    }
    v8 = __p;
    if (__p)
LABEL_30:
      operator delete(v8);
  }
}

void sub_20B883168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B88318C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (***v37)();
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[7];
  void **v46[3];
  void ***v47;
  uint64_t (**v48)();
  uint64_t (***v49)();
  uint64_t v50;
  uint64_t (***v51)();
  void (*v52)(uint64_t);
  _QWORD v53[4];

  v53[3] = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = &v41;
  v43 = 0x2000000000;
  v6 = MEMORY[0x24BDAC760];
  v44 = 0;
  v40[0] = MEMORY[0x24BDAC760];
  v40[1] = 0x40000000;
  v40[2] = sub_20B883660;
  v40[3] = &unk_24C46C010;
  v40[4] = &v41;
  sub_20B94812C(a2, (uint64_t)v40);
  byte_25472AF30[v42[3]] = 0;
  if ((*(uint64_t (**)(uint64_t *, char *))(*a1 + 72))(a1, byte_25472AF30) == -1)
  {
    v7 = (_BYTE *)a1[17];
    if (v7 && *v7)
      v8 = sub_20B8D516C((uint64_t)v7, a2, (unsigned __int8 *)byte_25472AF30, 2uLL);
    else
      v8 = sub_20B96B704(a1[16], a2, (unsigned __int8 *)byte_25472AF30, 2uLL);
    v42[3] = v8;
    byte_25472AF30[v8] = 0;
  }
  v9 = *(__int16 **)(a2 + 8);
  if (v9 == *(__int16 **)(a2 + 16) || (v10 = *v9) == 0)
  {
    if (v42[3])
      LOBYTE(v10) = byte_25472AF30[0];
    else
      LOBYTE(v10) = 0;
  }
  v11 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 72))(a1, byte_25472AF30);
  if (v11 != -1)
  {
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*a1 + 48))(a1, byte_25472AF30, v42[3], v11);
    v12 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 72))(a1, byte_25472AF30);
    v13 = v12;
    if (v12 != -1)
    {
      v14 = a1[5];
      v15 = (char *)a1[4];
      if ((unint64_t)v15 >= v14)
      {
        v17 = (char *)a1[3];
        v18 = (v15 - v17) >> 2;
        if ((unint64_t)(v18 + 1) >> 62)
          sub_20B80CDD8();
        v19 = v14 - (_QWORD)v17;
        v20 = (uint64_t)(v14 - (_QWORD)v17) >> 1;
        if (v20 <= v18 + 1)
          v20 = v18 + 1;
        if (v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)sub_20B8127BC((uint64_t)(a1 + 5), v21);
          v17 = (char *)a1[3];
          v15 = (char *)a1[4];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        v24 = &v22[4 * v21];
        *(_DWORD *)v23 = v13;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v25 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v25;
          v23 -= 4;
        }
        a1[3] = (uint64_t)v23;
        a1[4] = (uint64_t)v16;
        a1[5] = (uint64_t)v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v15 = v12;
        v16 = v15 + 4;
      }
      a1[4] = (uint64_t)v16;
      sub_20BA013EC((uint64_t)(a1 + 10), a2, (char)v10);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 88))(a1, a2);
    }
  }
  if (a3)
  {
    sub_20B828E74(a1 + 6);
    v26 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    if (sub_20B923A8C(v26) && a1[3] != a1[4])
    {
      a1[9] = 0;
      v48 = 0;
      v49 = &v48;
      v50 = 0x4002000000;
      v51 = (uint64_t (***)())sub_20B884118;
      v52 = sub_20B88413C;
      memset(v53, 0, 24);
      memset(v46, 0, sizeof(v46));
      v27 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      v28 = a1[3];
      v29 = (a1[4] - v28) >> 2;
      v45[0] = v6;
      v45[1] = 0x40000000;
      v45[2] = sub_20B884164;
      v45[3] = &unk_24C499430;
      v45[4] = &v48;
      v45[5] = a1;
      v45[6] = 10;
      sub_20B923CD8(v27, v28, v29, (uint64_t)v45);
      (*(void (**)(uint64_t *, uint64_t (***)()))(*a1 + 80))(a1, v49 + 5);
      v47 = v46;
      sub_20B83B400((void ***)&v47);
      _Block_object_dispose(&v48, 8);
      v46[0] = (void **)v53;
      sub_20B8860B8(v46);
    }
    (*(void (**)(uint64_t *))(*a1 + 64))(a1);
    v30 = sub_20B9547EC();
    if (*v30)
    {
      if ((v30[9] & 0x40) != 0)
      {
        v31 = sub_20B9547EC();
        sub_20B954D48((uint64_t)v31, 0x4000u, (uint64_t)"Nbest: \n", v32, v33, v34, v35, v36, v39);
        v48 = &off_24C46B688;
        v49 = (uint64_t (***)())a1;
        v51 = &v48;
        sub_20B884C5C((uint64_t)a1, 0xAuLL, (uint64_t)&v48);
        v37 = v51;
        if (v51 == &v48)
        {
          v38 = 4;
          v37 = &v48;
          goto LABEL_41;
        }
        if (v51)
        {
          v38 = 5;
LABEL_41:
          (*v37)[v38]();
        }
      }
    }
  }
  _Block_object_dispose(&v41, 8);
}

void sub_20B8835DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a7);
  v10 = *(_QWORD **)(v8 - 128);
  if (v10 == v7)
  {
    v11 = 4;
    v10 = (_QWORD *)(v8 - 152);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B883660(uint64_t a1, UChar32 c, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = u_charType(c);
  if (c != 32 && (_DWORD)result != 15)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = v8 + 1;
    byte_25472AF30[v8] = c;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 2)
    *a3 = 1;
  return result;
}

BOOL sub_20B8836E0(uint64_t a1, unsigned __int16 **a2, double a3)
{
  float *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  size_t v17;
  int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  char *v21;
  uint64_t v22;
  double v23;
  char **v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  double v28;
  double v30;
  double v31;
  uint64_t v32[2];
  char v33;
  uint64_t v34[2];
  char v35;

  v6 = (float *)sub_20B8956BC(1u);
  v7 = atomic_load((unsigned __int8 *)&qword_25472AF40);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472AF40))
  {
    *(double *)&qword_25472AF38 = v6[7];
    __cxa_guard_release(&qword_25472AF40);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_25472AF50);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25472AF50))
  {
    *(double *)&qword_25472AF48 = v6[8];
    __cxa_guard_release(&qword_25472AF50);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25472AF60);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25472AF60))
  {
    *(double *)&qword_25472AF58 = v6[4];
    __cxa_guard_release(&qword_25472AF60);
  }
  if (*a2 == a2[1])
    return 1;
  if (*(double *)&qword_25472AF38 >= a3)
  {
    v10 = *(double *)&qword_25472AF58;
    v11 = *(double *)&qword_25472AF58;
  }
  else
  {
    v10 = v6[5];
    if (*(double *)&qword_25472AF48 <= a3)
    {
      v11 = v6[6];
    }
    else
    {
      v10 = *(double *)&qword_25472AF58
          + (a3 - *(double *)&qword_25472AF38)
          * ((v10 - *(double *)&qword_25472AF58)
           / (*(double *)&qword_25472AF48 - *(double *)&qword_25472AF38));
      v11 = *(double *)&qword_25472AF58
          + (a3 - *(double *)&qword_25472AF38)
          * ((v6[6] - *(double *)&qword_25472AF58)
           / (*(double *)&qword_25472AF48 - *(double *)&qword_25472AF38));
    }
  }
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  if (v12 == v13)
    goto LABEL_20;
  v14 = *(_WORD *)(v13 + 34);
  if ((_BYTE)v14)
  {
    v15 = *(&off_24C4A0588)[2 * **a2];
    if (v15 != v14)
    {
      if (sub_20B883A08((unsigned __int16)(char)v14, (unsigned __int16)(char)v15, *(_QWORD *)(a1 + 128), *(_BYTE **)(a1 + 136)) > v10)return 1;
      v13 = *(_QWORD *)(a1 + 80);
      v12 = *(_QWORD *)(a1 + 88);
    }
  }
  if (v12 != v13)
  {
    v16 = *(_WORD *)(v12 - 6);
    if ((_BYTE)v16)
    {
      v17 = strlen((&off_24C4A0588)[2 * *(a2[1] - 1)]);
      if (v17)
      {
        v18 = (&off_24C4A0588)[2 * *(a2[1] - 1)][v17 - 1];
        if (v18 != v16
          && sub_20B883A08((unsigned __int16)(char)v16, (unsigned __int16)(char)v18, *(_QWORD *)(a1 + 128), *(_BYTE **)(a1 + 136)) > v11)
        {
          return 1;
        }
      }
    }
  }
LABEL_20:
  v20 = *a2;
  v19 = a2[1];
  if (v20 == v19)
  {
    v23 = 0.0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0.0;
    do
    {
      v24 = &(&off_24C4A0588)[2 * *v20];
      v25 = *v24;
      v26 = (uint64_t)v24[1];
      if (v22)
        v23 = v23
            + sub_20B883A08((unsigned __int16)*v25, (unsigned __int16)v21[v22 - 1], *(_QWORD *)(a1 + 128), *(_BYTE **)(a1 + 136));
      v27 = *(_BYTE **)(a1 + 136);
      if (v27 && *v27)
      {
        v34[0] = (uint64_t)v25;
        v34[1] = v26;
        v35 = 0;
        v28 = sub_20B880838(v34, v27);
      }
      else
      {
        v32[0] = (uint64_t)v25;
        v32[1] = v26;
        v33 = 0;
        v28 = sub_20B880748(v32, *(_QWORD *)(a1 + 128));
      }
      v23 = v23 + v28;
      ++v20;
      v21 = v25;
      v22 = v26;
    }
    while (v20 != v19);
  }
  v30 = vabdd_f64(a3, v23);
  v31 = v23 * v6[3];
  if (v31 < v11)
    v31 = v11;
  return v30 > v31;
}

double sub_20B883A08(int a1, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  if (a4 && *a4)
    return sub_20B8D5108((uint64_t)a4, a1, a2);
  else
    return sub_20B880704(a1, a2, a3);
}

void sub_20B883A34(uint64_t *a1, uint64_t *a2, char a3, double a4)
{
  _BYTE *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  unint64_t v18;
  _WORD *v19;
  int *v20;
  int v21;
  __CFString *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  __CFString *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  __CFString *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  char *v65;
  void *__p[2];
  uint64_t v67;
  _QWORD v68[6];

  v8 = sub_20B9547EC();
  if (*v8)
    v9 = (v8[9] >> 6) & 1;
  else
    v9 = 0;
  v10 = *a2;
  if (a2[1] != *a2)
  {
    v11 = 0;
    v12 = 0;
    v64 = a1 + 6;
    v13 = 0.0;
    v63 = v9;
    while (1)
    {
      v14 = (int **)(v10 + 32 * v12);
      v15 = v14[1];
      if (*v14 == v15)
        goto LABEL_55;
      sub_20B80FC98(__p, v15 - *v14);
      v17 = *v14;
      v16 = v14[1];
      if (v16 != *v14)
      {
        v18 = v16 - *v14;
        v19 = __p[0];
        if (v18 <= 1)
          v18 = 1;
        v20 = *v14;
        do
        {
          v21 = *v20++;
          *v19++ = v21;
          --v18;
        }
        while (v18);
      }
      if ((a3 & 1) != 0)
      {
        if (((*(uint64_t (**)(uint64_t *, void **, unint64_t, double))(*a1 + 40))(a1, __p, v12, a4) & 1) != 0)
        {
          if (!v9)
            goto LABEL_28;
          v22 = sub_20B8808E4((unsigned __int16 **)__p);
          v68[0] = v22;
          v23 = sub_20B9547EC();
          sub_20B8D154C(v22, &v65);
          v24 = v65;
          sub_20B954D48((uint64_t)v23, 0x4000u, (uint64_t)"Filtered by distance: %s, %.4f\n", v25, v26, v27, v28, v29, (uint64_t)v65);
          if (v24)
            MEMORY[0x20BD39C80](v24, 0x1000C8077774924);
          if (v22)
            CFRelease(v22);
          v30 = 4;
          goto LABEL_37;
        }
        v17 = *v14;
        v16 = v14[1];
      }
      v31 = (_QWORD *)a1[6];
      v32 = v16 - v17;
      if (v31 == (_QWORD *)a1[7])
        break;
      if (v32 < v11)
      {
        if (v9)
        {
          v33 = sub_20B8808E4((unsigned __int16 **)__p);
          v68[0] = v33;
          v34 = sub_20B9547EC();
          sub_20B8D154C(v33, &v65);
          v35 = v65;
          sub_20B954D48((uint64_t)v34, 0x4000u, (uint64_t)"Filtered by syllable count: %s, %.4f, syllableCount = %ld, bestSyllableCount = %ld\n", v36, v37, v38, v39, v40, (uint64_t)v65);
          v9 = v63;
          if (v35)
            MEMORY[0x20BD39C80](v35, 0x1000C8077774924);
          if (v33)
            CFRelease(v33);
        }
LABEL_28:
        v30 = 4;
        goto LABEL_52;
      }
      v41 = *(double *)(v10 + 32 * v12 + 24);
      if (v41 >= v13 - *(float *)(sub_20B8956BC(1u) + 4))
      {
        v31 = (_QWORD *)a1[7];
        goto LABEL_39;
      }
      if (v9)
      {
        v42 = sub_20B8808E4((unsigned __int16 **)__p);
        v68[0] = v42;
        v43 = sub_20B9547EC();
        sub_20B8D154C(v42, &v65);
        v44 = v65;
        sub_20B954D48((uint64_t)v43, 0x4000u, (uint64_t)"Filtered by score margin: %s, score = %.4f, bestcore = %.4f\n", v45, v46, v47, v48, v49, (uint64_t)v65);
        if (v44)
          MEMORY[0x20BD39C80](v44, 0x1000C8077774924);
        if (v42)
          CFRelease(v42);
        v30 = 2;
LABEL_37:
        v9 = v63;
        goto LABEL_52;
      }
      v30 = 2;
LABEL_52:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((v30 | 4) != 4)
        return;
LABEL_55:
      ++v12;
      v10 = *a2;
      if (v12 >= (a2[1] - *a2) >> 5)
        return;
    }
    v13 = *(double *)(v10 + 32 * v12 + 24);
    v11 = v32;
LABEL_39:
    v50 = a1[8];
    if (a1[9] <= (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 1))
      v51 = ((char *)__p[1] - (char *)__p[0]) >> 1;
    else
      v51 = a1[9];
    a1[9] = v51;
    v52 = (uint64_t *)(v10 + 32 * v12 + 24);
    if ((unint64_t)v31 >= v50)
    {
      v55 = ((uint64_t)v31 - *v64) >> 5;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 59)
        sub_20B80CDD8();
      v57 = v50 - *v64;
      if (v57 >> 4 > v56)
        v56 = v57 >> 4;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0)
        v58 = 0x7FFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      v68[4] = a1 + 8;
      v59 = (char *)sub_20B8156D4((uint64_t)(a1 + 8), v58);
      v60 = &v59[32 * v55];
      v68[0] = v59;
      v68[1] = v60;
      v68[3] = &v59[32 * v61];
      v62 = *v52;
      *(_QWORD *)v60 = 0;
      *((_QWORD *)v60 + 1) = 0;
      *((_QWORD *)v60 + 2) = 0;
      *(_OWORD *)v60 = *(_OWORD *)__p;
      *((_QWORD *)v60 + 2) = v67;
      __p[0] = 0;
      __p[1] = 0;
      v67 = 0;
      *((_QWORD *)v60 + 3) = v62;
      v68[2] = v60 + 32;
      sub_20B8851A8(v64, v68);
      v54 = (_QWORD *)a1[7];
      sub_20B83D17C((uint64_t)v68);
    }
    else
    {
      v53 = *v52;
      *v31 = 0;
      v31[1] = 0;
      v31[2] = 0;
      *(_OWORD *)v31 = *(_OWORD *)__p;
      v31[2] = v67;
      __p[0] = 0;
      __p[1] = 0;
      v67 = 0;
      v31[3] = v53;
      v54 = v31 + 4;
      a1[7] = (uint64_t)(v31 + 4);
    }
    v30 = 0;
    a1[7] = (uint64_t)v54;
    goto LABEL_52;
  }
}

void sub_20B883E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  uint64_t v21;

  if (v21)
    MEMORY[0x20BD39C80](v21, 0x1000C8077774924);
  sub_20B87E150(&a21, 0);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B883F30(_QWORD *a1, const void *a2, uint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_20B80FD0C(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_20B883F94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B883FB0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v8 = a1[2];
  result = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(result - 8);
  if ((unint64_t)v9 >= v8)
  {
    v12 = ((uint64_t)v9 - *a1) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_20B80CDD8();
    v14 = v7 - *a1;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v20[4] = result;
    v16 = (char *)sub_20B8156D4(result, v15);
    v17 = &v16[32 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[32 * v18];
    v19 = *a3;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_OWORD *)v17 = *(_OWORD *)a2;
    *((_QWORD *)v17 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_QWORD *)v17 + 3) = v19;
    v20[2] = v17 + 32;
    sub_20B8851A8(a1, v20);
    v11 = (_QWORD *)a1[1];
    result = sub_20B83D17C((uint64_t)v20);
  }
  else
  {
    v10 = *a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *(_OWORD *)v9 = *(_OWORD *)a2;
    v9[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v9[3] = v10;
    v11 = v9 + 4;
    a1[1] = (uint64_t)(v9 + 4);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_20B8840CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83D17C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20B8840E4(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B83B400(&v3);
  return a1;
}

__n128 sub_20B884118(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B88413C(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B8860B8(&v1);
}

void sub_20B884164(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  _QWORD v26[5];
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v6 = a1[5];
  v7 = *(_QWORD **)(a1[4] + 8);
  v8 = (char *)v7[6];
  v9 = v7[7];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (char *)v7[5];
    v12 = (v8 - v11) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_20B80CDD8();
    if ((uint64_t)(v9 - (_QWORD)v11) >> 4 > v13)
      v13 = (uint64_t)(v9 - (_QWORD)v11) >> 4;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v30 = v7 + 7;
    if (v14)
    {
      if (v14 >> 59)
        sub_20B800BC0();
      v15 = (char *)operator new(32 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[32 * v12];
    v17 = &v15[32 * v14];
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    v10 = v16 + 32;
    v28.i64[1] = (uint64_t)(v16 + 32);
    v29 = v17;
    if (v8 == v11)
    {
      v21 = vdupq_n_s64((unint64_t)v8);
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v16[v18];
        v20 = &v8[v18];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_OWORD *)v19 - 2) = *(_OWORD *)&v8[v18 - 32];
        *((_QWORD *)v19 - 2) = *(_QWORD *)&v8[v18 - 16];
        *((_QWORD *)v20 - 4) = 0;
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_QWORD *)v19 - 1) = *(_QWORD *)&v8[v18 - 8];
        v18 -= 32;
      }
      while (&v8[v18] != v11);
      v21 = *(int64x2_t *)(v7 + 5);
      v9 = v7[7];
      v16 += v18;
      v10 = (_OWORD *)v28.i64[1];
      v17 = v29;
    }
    v7[5] = v16;
    v7[6] = v10;
    v28 = v21;
    v7[7] = v17;
    v29 = (char *)v9;
    v27 = v21.i64[0];
    sub_20B886134((uint64_t)&v27);
  }
  else
  {
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v10 = v8 + 32;
    v7[6] = v8 + 32;
  }
  v7[6] = v10;
  v22 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48);
  v27 = 0;
  v28.i64[0] = (uint64_t)&v27;
  v28.i64[1] = 0x2000000000;
  v29 = (char *)(v22 - 32);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 0x40000000;
  v26[2] = sub_20B8843B8;
  v26[3] = &unk_24C499408;
  v26[4] = &v27;
  sub_20B923DBC(v23, a2, (uint64_t)v26);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  sub_20B923E7C(v24, a2);
  *(double *)(v22 - 8) = logf(v25);
  if (a1[6] <= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 48)
                                           - *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40)) >> 5))
    *a3 = 1;
  _Block_object_dispose(&v27, 8);
}

void sub_20B8843A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20B8843B8(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = *(_DWORD **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(_DWORD **)v3;
    v8 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_20B80CDD8();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_20B8127BC(v3 + 16, v11);
      v7 = *(_DWORD **)v3;
      v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 16) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v3 + 8) = v6;
}

void sub_20B88449C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  unsigned __int16 **v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  char **v12;
  size_t v13;
  char *v14;
  uint64_t **p_dst;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string::size_type size;
  uint64_t v21;
  double v22;
  unint64_t v23;
  unsigned __int16 ***v24;
  unsigned __int16 *v25;
  std::string *v26;
  unsigned __int16 *v27;
  unint64_t v28;
  BOOL v29;
  unsigned __int16 v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unsigned __int16 *v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 *v41;
  __n128 *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int64_t v55;
  __n128 *v56;
  __n128 *v57;
  unint64_t v58;
  uint64_t v59;
  _WORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  char v65;
  unint64_t v66;
  double v67;
  uint64_t *__dst;
  _WORD *v69;
  int64_t v70;
  std::string v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v5 = a1[10];
  v4 = a1[11];
  if (v4 == v5)
    v6 = 0.0;
  else
    v6 = *(double *)(v4 - 16) - *(double *)(v5 + 24);
  sub_20B883A34(a1, a2, 1, v6);
  v7 = (unsigned __int16 **)a1[6];
  v8 = a1[7];
  v9 = a1 + 6;
  if (v7 == (unsigned __int16 **)v8)
  {
    sub_20B883A34(a1, a2, 0, v6);
    v7 = (unsigned __int16 **)a1[6];
    v8 = a1[7];
  }
  if (v7 == (unsigned __int16 **)v8)
    goto LABEL_76;
  v11 = *v7;
  v10 = v7[1];
  if ((unint64_t)((char *)v10 - (char *)*v7) > 4)
    goto LABEL_76;
  memset(&v71, 0, sizeof(v71));
  if (v11 == v10)
    goto LABEL_74;
  do
  {
    v12 = &(&off_24C4A0588)[2 * *v11];
    v13 = (size_t)v12[1];
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20B80AD6C();
    v14 = *v12;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_dst = (uint64_t **)operator new(v16 + 1);
      v69 = (_WORD *)v13;
      v70 = v17 | 0x8000000000000000;
      __dst = (uint64_t *)p_dst;
LABEL_16:
      memmove(p_dst, v14, v13);
      goto LABEL_17;
    }
    HIBYTE(v70) = v12[1];
    p_dst = &__dst;
    if (v13)
      goto LABEL_16;
LABEL_17:
    *((_BYTE *)p_dst + v13) = 0;
    if (v70 >= 0)
      v18 = (const std::string::value_type *)&__dst;
    else
      v18 = (const std::string::value_type *)__dst;
    if (v70 >= 0)
      v19 = HIBYTE(v70);
    else
      v19 = (std::string::size_type)v69;
    std::string::append(&v71, v18, v19);
    if (SHIBYTE(v70) < 0)
      operator delete(__dst);
    ++v11;
  }
  while (v11 != v10);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  v9 = a1 + 6;
  if (!size)
    goto LABEL_74;
  v21 = 0;
  v65 = 0;
  v22 = *(double *)(a1[6] + 24) + -1.0;
  v23 = 1;
  v66 = size;
  while (2)
  {
    v24 = (unsigned __int16 ***)a1[2];
    v25 = **v24;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v71;
    else
      v26 = (std::string *)v71.__r_.__value_.__r.__words[0];
    v27 = **v24;
    if (v23)
    {
      v27 = **v24;
      if (v25)
      {
        v28 = 0;
        v27 = **v24;
        do
        {
          v27 = sub_20B9F17AC((uint64_t)v24, v27, v26->__r_.__value_.__s.__data_[v28++]);
          if (v27)
            v29 = v28 >= v23;
          else
            v29 = 1;
        }
        while (!v29);
      }
    }
    if (v27 && (v27[4] & 2) != 0)
    {
      v30 = v27[1];
      v31 = (uint64_t *)operator new(2uLL);
      *(_WORD *)v31 = v30;
      v32 = (char *)v31 + 2;
      v69 = (_WORD *)v31 + 1;
      v70 = (int64_t)v31 + 2;
      __dst = v31;
      if (v66 <= v23)
      {
        v9 = a1 + 6;
        goto LABEL_56;
      }
      if (!v25)
        goto LABEL_65;
      v33 = (char *)v26 + v21;
      v34 = 1;
      do
      {
        v35 = sub_20B9F17AC((uint64_t)v24, v25, v33[v34]);
        v25 = v35;
        if (v35)
          v36 = v34 >= v66 - v23;
        else
          v36 = 1;
        ++v34;
      }
      while (!v36);
      if (v35)
      {
        v9 = a1 + 6;
        if ((v35[4] & 2) != 0)
        {
          v37 = (uint64_t *)operator new(4uLL);
          *((_WORD *)v37 + 1) = v25[1];
          *(_WORD *)v37 = v30;
          v32 = (char *)v37 + 4;
          __dst = v37;
          v70 = (int64_t)v37 + 4;
          operator delete(v31);
          v69 = (_WORD *)v37 + 2;
          v31 = v37;
LABEL_56:
          v38 = a1[6];
          v39 = a1[7];
          v40 = v32 - (char *)v31;
          while (v38 != v39)
          {
            if (*(_QWORD *)(v38 + 8) - *(_QWORD *)v38 == v40 && !memcmp(*(const void **)v38, v31, v32 - (char *)v31))
              goto LABEL_66;
            v38 += 32;
          }
          if (v40 >> 1 > (unint64_t)a1[9])
            a1[9] = v40 >> 1;
          v67 = v22;
          sub_20B883FB0(v9, (uint64_t)&__dst, (uint64_t *)&v67);
          v31 = __dst;
          v65 = 1;
          if (!__dst)
          {
LABEL_67:
            size = v66;
            goto LABEL_68;
          }
        }
      }
      else
      {
LABEL_65:
        v9 = a1 + 6;
      }
LABEL_66:
      v69 = v31;
      operator delete(v31);
      goto LABEL_67;
    }
LABEL_68:
    ++v23;
    ++v21;
    if (v23 <= size)
      continue;
    break;
  }
  if ((v65 & 1) != 0)
  {
    v41 = (__n128 *)a1[6];
    v42 = (__n128 *)a1[7];
    v43 = 126 - 2 * __clz(((char *)v42 - (char *)v41) >> 5);
    if (v42 == v41)
      v44 = 0;
    else
      v44 = v43;
    sub_20B8852F8(v41, v42, v44, 1);
  }
LABEL_74:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_76:
  v45 = atomic_load((unsigned __int8 *)&qword_25472AF68);
  if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_25472AF68))
  {
    LODWORD(v71.__r_.__value_.__l.__data_) = 27984296;
    WORD2(v71.__r_.__value_.__r.__words[0]) = 428;
    sub_20B886294((uint64_t)qword_25472AF90, (unsigned __int16 *)&v71, 3);
    __cxa_atexit((void (*)(void *))sub_20B8840E0, qword_25472AF90, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472AF68);
  }
  v46 = atomic_load((unsigned __int8 *)&qword_25472AF70);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_25472AF70))
  {
    v60 = operator new(2uLL);
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    *v60 = 163;
    v71.__r_.__value_.__l.__size_ = (std::string::size_type)(v60 + 1);
    v71.__r_.__value_.__r.__words[2] = (std::string::size_type)(v60 + 1);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v61 = operator new(4uLL);
    v72 = v61;
    *v61 = 29425826;
    v73 = v61 + 1;
    v74 = v61 + 1;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v62 = operator new(4uLL);
    v75 = v62;
    *v62 = 29425830;
    v76 = v62 + 1;
    v77 = v62 + 1;
    qword_25472AF80 = 0;
    qword_25472AF88 = 0;
    qword_25472AF78 = 0;
    __dst = &qword_25472AF78;
    LOBYTE(v69) = 0;
    qword_25472AF78 = (uint64_t)operator new(0x48uLL);
    qword_25472AF80 = qword_25472AF78;
    qword_25472AF88 = qword_25472AF78 + 72;
    v63 = 0;
    qword_25472AF80 = (uint64_t)sub_20B885FD4((uint64_t)&qword_25472AF88, (uint64_t)&v71, (uint64_t)&v78, (_QWORD *)qword_25472AF78);
    do
    {
      v64 = (&v75)[v63];
      if (v64)
      {
        (&v76)[v63] = v64;
        operator delete(v64);
      }
      v63 -= 3;
    }
    while (v63 != -9);
    __cxa_atexit((void (*)(void *))sub_20B8840E4, &qword_25472AF78, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472AF70);
  }
  v47 = a1[6];
  if (v47 != a1[7] && *(_QWORD *)(v47 + 8) - *(_QWORD *)v47 == 2)
  {
    if (sub_20B886524(qword_25472AF90, *(unsigned __int16 **)v47))
    {
      v48 = qword_25472AF78;
      v49 = qword_25472AF80;
      if (qword_25472AF78 != qword_25472AF80)
      {
        v50 = 0;
        v51 = *(double *)(a1[6] + 24) + -1.5;
        do
        {
          memset(&v71, 0, sizeof(v71));
          sub_20B87ACC8(&v71, *(const void **)v48, *(_QWORD *)(v48 + 8), (uint64_t)(*(_QWORD *)(v48 + 8) - *(_QWORD *)v48) >> 1);
          v52 = a1[6];
          v53 = a1[7];
          v54 = (void *)v71.__r_.__value_.__r.__words[0];
          v55 = v71.__r_.__value_.__l.__size_ - v71.__r_.__value_.__r.__words[0];
          while (v52 != v53)
          {
            if (*(_QWORD *)(v52 + 8) - *(_QWORD *)v52 == v55 && !memcmp(*(const void **)v52, v54, v55))
              goto LABEL_91;
            v52 += 32;
          }
          if (v55 >> 1 > (unint64_t)a1[9])
            a1[9] = v55 >> 1;
          __dst = *(uint64_t **)&v51;
          sub_20B883FB0(v9, (uint64_t)&v71, (uint64_t *)&__dst);
          v50 = 1;
          v54 = (void *)v71.__r_.__value_.__r.__words[0];
LABEL_91:
          if (v54)
          {
            v71.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
            operator delete(v54);
          }
          v48 += 24;
        }
        while (v48 != v49);
        if ((v50 & 1) != 0)
        {
          v56 = (__n128 *)a1[6];
          v57 = (__n128 *)a1[7];
          v58 = 126 - 2 * __clz(((char *)v57 - (char *)v56) >> 5);
          if (v57 == v56)
            v59 = 0;
          else
            v59 = v58;
          sub_20B8852F8(v56, v57, v59, 1);
        }
      }
    }
  }
}

void sub_20B884B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v31;
  void *v32;

  qword_25472AF80 = v29;
  sub_20B83B400((void ***)&a13);
  v31 = 0;
  while (1)
  {
    v32 = *(void **)((char *)&a28 + v31);
    if (v32)
    {
      *(uint64_t *)((char *)&a29 + v31) = (uint64_t)v32;
      operator delete(v32);
    }
    v31 -= 24;
    if (v31 == -72)
    {
      __cxa_guard_abort(&qword_25472AF70);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20B884C5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  __CFString *v8;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3 != v4)
  {
    v7 = 1;
    do
    {
      v8 = sub_20B8808E4((unsigned __int16 **)v3);
      sub_20B884D08(a3, 0, (uint64_t)v8, *(double *)(v3 + 24));
      if (v8)
        CFRelease(v8);
      if (v7 > a2)
        break;
      v3 += 32;
      ++v7;
    }
    while (v3 != v4);
  }
}

void sub_20B884CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B884D08(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, double *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_20B884D50(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  double v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v8 = *(char **)(a1 + 48);
  v7 = *(char **)(a1 + 56);
  v6 = (uint64_t *)(a1 + 48);
  if (v7 != v8)
  {
    v9 = (v7 - v8) >> 5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v8[32 * (v9 >> 1)];
      v12 = *((double *)v11 + 3);
      v13 = v11 + 32;
      v9 += ~(v9 >> 1);
      if (v12 > *(double *)(a2 + 24))
        v8 = v13;
      else
        v9 = v10;
    }
    while (v9);
    v7 = v8;
  }
  sub_20B884DE4(v6, v7, a2);
  v14 = *(_QWORD *)(a1 + 56);
  if (a3 <= (v14 - *(_QWORD *)(a1 + 48)) >> 5)
  {
    v16 = v14 - 32;
    v15 = *(void **)(v14 - 32);
    if (v15)
    {
      *(_QWORD *)(v14 - 24) = v15;
      operator delete(v15);
    }
    *(_QWORD *)(a1 + 56) = v16;
  }
}

char *sub_20B884DE4(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  __int128 v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  int64x2_t v43;
  char *v44;
  uint64_t v45;

  v3 = a3;
  v4 = (char *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = v8 >> 5;
  v11 = (uint64_t)(a1 + 2);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v16 = ((uint64_t)(v6 - v7) >> 5) + 1;
    if (v16 >> 59)
      sub_20B80CDD8();
    v17 = v10 - v7;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v41 = a1 + 2;
    if (v18)
      v19 = (char *)sub_20B8156D4((uint64_t)(a1 + 2), v18);
    else
      v19 = 0;
    v20 = &v19[32 * v9];
    v38 = v19;
    *(_QWORD *)&v39 = v20;
    *((_QWORD *)&v39 + 1) = v20;
    v40 = &v19[32 * v18];
    if (v9 == v18)
    {
      if (v8 < 1)
      {
        if ((char *)v7 == v4)
          v23 = 1;
        else
          v23 = v8 >> 4;
        v45 = v11;
        v24 = (char *)sub_20B8156D4(v11, v23);
        v26 = v39;
        if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
        {
          v29 = vdupq_n_s64(v39);
          v27 = (uint64_t)&v24[32 * (v23 >> 2)];
        }
        else
        {
          v27 = (uint64_t)&v24[32 * (v23 >> 2) + *((_QWORD *)&v39 + 1) - v39];
          v28 = &v24[32 * (v23 >> 2)];
          do
          {
            *(_QWORD *)v28 = 0;
            *((_QWORD *)v28 + 1) = 0;
            *((_QWORD *)v28 + 2) = 0;
            *(_OWORD *)v28 = *(_OWORD *)v26;
            *((_QWORD *)v28 + 2) = *(_QWORD *)(v26 + 16);
            *(_QWORD *)v26 = 0;
            *(_QWORD *)(v26 + 8) = 0;
            *(_QWORD *)(v26 + 16) = 0;
            *((_QWORD *)v28 + 3) = *(_QWORD *)(v26 + 24);
            v28 += 32;
            v26 += 32;
          }
          while (v28 != (char *)v27);
          v29 = (int64x2_t)v39;
        }
        v30 = v40;
        v42 = v38;
        v38 = v24;
        *(_QWORD *)&v39 = &v24[32 * (v23 >> 2)];
        v43 = v29;
        *((_QWORD *)&v39 + 1) = v27;
        v40 = &v24[32 * v25];
        v44 = v30;
        sub_20B83D17C((uint64_t)&v42);
        v20 = (char *)*((_QWORD *)&v39 + 1);
      }
      else
      {
        v21 = v9 + 2;
        if (v9 >= -1)
          v21 = v9 + 1;
        v20 -= 32 * (v21 >> 1);
        *(_QWORD *)&v39 = v20;
        *((_QWORD *)&v39 + 1) = v20;
      }
    }
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    sub_20B87ACC8(v20, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 1);
    *((_QWORD *)v20 + 3) = *(_QWORD *)(v3 + 24);
    v31 = v39;
    *((_QWORD *)&v39 + 1) += 32;
    sub_20B88521C(v11, (uint64_t)v4, v4, *a1, (_QWORD *)*a1, v39, v39);
    *(_QWORD *)&v39 = v32;
    v33 = (char *)a1[1];
    v34 = (_QWORD *)*((_QWORD *)&v39 + 1);
    if (v33 != v4)
    {
      do
      {
        *v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
        *(_OWORD *)v34 = *(_OWORD *)v4;
        v34[2] = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        v34[3] = *((_QWORD *)v4 + 3);
        v34 += 4;
        v4 += 32;
      }
      while (v4 != v33);
      v32 = v39;
      v4 = (char *)a1[1];
    }
    v35 = *a1;
    *a1 = v32;
    a1[1] = (uint64_t)v34;
    v36 = a1[2];
    a1[2] = (uint64_t)v40;
    *((_QWORD *)&v39 + 1) = v4;
    v40 = (char *)v36;
    v38 = (char *)v35;
    *(_QWORD *)&v39 = v35;
    sub_20B83D17C((uint64_t)&v38);
    return (char *)v31;
  }
  else if (a2 == (_QWORD *)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_20B87ACC8(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
    *(_QWORD *)(v7 + 32 * v9 + 24) = *(_QWORD *)(v3 + 24);
    a1[1] = (uint64_t)(v4 + 32);
  }
  else
  {
    v12 = a2 + 4;
    v13 = v6 - 32;
    if (v6 < 0x20)
    {
      v15 = (_QWORD *)a1[1];
    }
    else
    {
      v14 = v6 - 32;
      v15 = (_QWORD *)a1[1];
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        *(_OWORD *)v15 = *(_OWORD *)v14;
        v15[2] = *(_QWORD *)(v14 + 16);
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
        v15[3] = *(_QWORD *)(v14 + 24);
        v15 += 4;
        v14 += 32;
      }
      while (v14 < v6);
    }
    a1[1] = (uint64_t)v15;
    if ((_QWORD *)v6 != v12)
    {
      v22 = 32 * ((uint64_t)(v6 - (_QWORD)v12) >> 5);
      do
      {
        sub_20B824BE4(v13, (__n128 *)&v4[v22 - 32]);
        *(_QWORD *)(v13 + 24) = *(_QWORD *)&v4[v22 - 8];
        v13 -= 32;
        v22 -= 32;
      }
      while (v22);
    }
    if ((unint64_t)v4 <= v3)
      v3 += 32 * (a1[1] > v3);
    if (v4 != (char *)v3)
      sub_20B886194(v4, *(char **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 1);
    *(_QWORD *)(v7 + 32 * v9 + 24) = *(_QWORD *)(v3 + 24);
  }
  return v4;
}

void sub_20B885164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

BOOL sub_20B88518C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32);
}

uint64_t sub_20B8851A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B88521C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B88521C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *(_QWORD *)(v7 - 8) = a3[3];
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20B8852C4((uint64_t)v11);
  return v9;
}

uint64_t sub_20B8852C4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83D138(a1);
  return a1;
}

void sub_20B8852F8(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  void *v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  double v26;
  __n128 *v27;
  double v28;
  __n128 *v29;
  double v30;
  double v31;
  void **v32;
  void *v33;
  BOOL v34;
  __n128 v35;
  unint64_t v36;
  __n128 *v37;
  double v38;
  __n128 *v39;
  double v40;
  __n128 *v41;
  __n128 *v42;
  double v43;
  double v44;
  double v45;
  void **v46;
  void *v47;
  __n128 *v48;
  BOOL v50;
  uint64_t v51;
  __n128 *v52;
  __n128 *v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  double *v57;
  uint64_t v58;
  void *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  __n128 *v64;
  double v65;
  __n128 *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  double *v91;
  __n128 *v92;
  double v93;
  unint64_t v94;
  double *v95;
  double *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;

LABEL_1:
  v8 = a1;
  v99 = (uint64_t)&a1[2];
  v9 = (uint64_t)&a1[4];
  while (2)
  {
    v10 = (char *)a2 - (char *)v8;
    v11 = ((char *)a2 - (char *)v8) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (a2[-1].n128_f64[1] > v8[1].n128_f64[1])
          sub_20B885B94((uint64_t)v8, a2 - 2);
        return;
      case 3:
        sub_20B885C10((uint64_t)v8, v8 + 2, a2 - 2);
        return;
      case 4:
        sub_20B885E80((uint64_t)v8, v8 + 2, v8 + 4, a2 - 2);
        return;
      case 5:
        sub_20B885F14((uint64_t)v8, v8 + 2, v8 + 4, v8 + 6, a2 - 2);
        return;
      default:
        if (v10 > 767)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v60 = (unint64_t)(v11 - 2) >> 1;
              v61 = v60;
              do
              {
                v62 = v61;
                if (v60 >= v61)
                {
                  v63 = (2 * v61) | 1;
                  v64 = &v8[2 * v63];
                  if (2 * v62 + 2 < v11 && v64[1].n128_f64[1] > v64[3].n128_f64[1])
                  {
                    v64 += 2;
                    v63 = 2 * v62 + 2;
                  }
                  v65 = v8[2 * v62 + 1].n128_f64[1];
                  if (v64[1].n128_f64[1] <= v65)
                  {
                    v66 = &v8[2 * v62];
                    v104 = *v66;
                    v67 = v66[1].n128_u64[0];
                    v66->n128_u64[1] = 0;
                    v66[1].n128_u64[0] = 0;
                    v66->n128_u64[0] = 0;
                    do
                    {
                      v68 = (uint64_t)v66;
                      v66 = v64;
                      sub_20B824BE4(v68, v64);
                      *(_QWORD *)(v68 + 24) = v66[1].n128_u64[1];
                      if (v60 < v63)
                        break;
                      v69 = 2 * v63;
                      v63 = (2 * v63) | 1;
                      v64 = &v8[2 * v63];
                      v70 = v69 + 2;
                      if (v70 < v11 && v64[1].n128_f64[1] > v64[3].n128_f64[1])
                      {
                        v64 += 2;
                        v63 = v70;
                      }
                    }
                    while (v64[1].n128_f64[1] <= v65);
                    v71 = (void *)v66->n128_u64[0];
                    if (v66->n128_u64[0])
                    {
                      v66->n128_u64[1] = (unint64_t)v71;
                      operator delete(v71);
                    }
                    *v66 = v104;
                    v66[1].n128_u64[0] = v67;
                    v66[1].n128_f64[1] = v65;
                  }
                }
                v61 = v62 - 1;
              }
              while (v62);
              v72 = (unint64_t)v10 >> 5;
              do
              {
                if (v72 >= 2)
                {
                  v73 = 0;
                  v74 = v8->n128_u64[0];
                  v75 = v8->n128_u64[1];
                  v76 = v8[1].n128_u64[0];
                  v8->n128_u64[1] = 0;
                  v8[1].n128_u64[0] = 0;
                  v8->n128_u64[0] = 0;
                  v77 = v8;
                  v78 = v8[1].n128_u64[1];
                  do
                  {
                    v79 = (uint64_t)v77;
                    v77 += 2 * v73 + 2;
                    v80 = 2 * v73;
                    v73 = (2 * v73) | 1;
                    v81 = v80 + 2;
                    if (v81 < v72 && v77[1].n128_f64[1] > v77[3].n128_f64[1])
                    {
                      v77 += 2;
                      v73 = v81;
                    }
                    sub_20B824BE4(v79, v77);
                    *(_QWORD *)(v79 + 24) = v77[1].n128_u64[1];
                  }
                  while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                  if (v77 == &a2[-2])
                  {
                    v89 = (void *)v77->n128_u64[0];
                    if (v77->n128_u64[0])
                    {
                      v77->n128_u64[1] = (unint64_t)v89;
                      operator delete(v89);
                    }
                    v77->n128_u64[0] = v74;
                    v77->n128_u64[1] = v75;
                    v77[1].n128_u64[0] = v76;
                    v77[1].n128_u64[1] = v78;
                  }
                  else
                  {
                    sub_20B824BE4((uint64_t)v77, a2 - 2);
                    v77[1].n128_u64[1] = a2[-1].n128_u64[1];
                    v82 = (void *)a2[-2].n128_u64[0];
                    if (v82)
                    {
                      a2[-2].n128_u64[1] = (unint64_t)v82;
                      operator delete(v82);
                    }
                    a2[-2].n128_u64[0] = v74;
                    a2[-2].n128_u64[1] = v75;
                    a2[-1].n128_u64[0] = v76;
                    a2[-1].n128_u64[1] = v78;
                    v83 = (char *)&v77[2] - (char *)v8;
                    if (v83 >= 33)
                    {
                      v84 = (((unint64_t)v83 >> 5) - 2) >> 1;
                      v85 = v77[1].n128_f64[1];
                      if (v8[2 * v84 + 1].n128_f64[1] > v85)
                      {
                        v105 = *v77;
                        v86 = v77[1].n128_u64[0];
                        v77->n128_u64[1] = 0;
                        v77[1].n128_u64[0] = 0;
                        v77->n128_u64[0] = 0;
                        do
                        {
                          v87 = (uint64_t)v77;
                          v77 = &v8[2 * v84];
                          sub_20B824BE4(v87, v77);
                          *(_QWORD *)(v87 + 24) = v77[1].n128_u64[1];
                          if (!v84)
                            break;
                          v84 = (v84 - 1) >> 1;
                        }
                        while (v8[2 * v84 + 1].n128_f64[1] > v85);
                        v88 = (void *)v77->n128_u64[0];
                        if (v77->n128_u64[0])
                        {
                          v77->n128_u64[1] = (unint64_t)v88;
                          operator delete(v88);
                        }
                        *v77 = v105;
                        v77[1].n128_u64[0] = v86;
                        v77[1].n128_f64[1] = v85;
                      }
                    }
                  }
                }
                a2 -= 2;
              }
              while ((unint64_t)v72-- > 2);
            }
            return;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v8[2 * ((unint64_t)v11 >> 1)];
          v14 = a2 - 2;
          if ((unint64_t)v10 <= 0x1000)
          {
            sub_20B885C10((uint64_t)v13, v8, v14);
          }
          else
          {
            sub_20B885C10((uint64_t)v8, v13, v14);
            sub_20B885C10(v99, v13 - 2, a2 - 4);
            sub_20B885C10(v9, v13 + 2, a2 - 6);
            sub_20B885C10((uint64_t)&v13[-2], v13, v13 + 2);
            v100 = *v8;
            v15 = v8[1].n128_u64[0];
            v8->n128_u64[1] = 0;
            v8[1].n128_u64[0] = 0;
            v8->n128_u64[0] = 0;
            v16 = v8[1].n128_u64[1];
            sub_20B824BE4((uint64_t)v8, v13);
            v17 = &v8[2 * v12 + 1].n128_u64[1];
            v8[1].n128_u64[1] = *v17;
            v18 = (void *)v13->n128_u64[0];
            if (v13->n128_u64[0])
            {
              v13->n128_u64[1] = (unint64_t)v18;
              operator delete(v18);
            }
            *v13 = v100;
            v13[1].n128_u64[0] = v15;
            *v17 = v16;
          }
          --a3;
          if ((a4 & 1) != 0)
          {
            v19 = v8[1].n128_f64[1];
LABEL_13:
            v20 = 0;
            v101 = *v8;
            v21 = v8[1].n128_u64[0];
            v8->n128_u64[1] = 0;
            v8[1].n128_u64[0] = 0;
            v8->n128_u64[0] = 0;
            do
            {
              v22 = v8[v20 + 3].n128_f64[1];
              v20 += 2;
            }
            while (v22 > v19);
            v23 = &v8[v20];
            v24 = a2;
            if (v20 == 2)
            {
              v27 = a2;
              while (v23 < v27)
              {
                v25 = v27 - 2;
                v28 = v27[-1].n128_f64[1];
                v27 -= 2;
                if (v28 > v19)
                  goto LABEL_23;
              }
              v25 = v27;
            }
            else
            {
              do
              {
                v25 = v24 - 2;
                v26 = v24[-1].n128_f64[1];
                v24 -= 2;
              }
              while (v26 <= v19);
            }
LABEL_23:
            a1 = v23;
            if (v23 < v25)
            {
              v29 = v25;
              do
              {
                sub_20B885B94((uint64_t)a1, v29);
                do
                {
                  v30 = a1[3].n128_f64[1];
                  a1 += 2;
                }
                while (v30 > v19);
                do
                {
                  v31 = v29[-1].n128_f64[1];
                  v29 -= 2;
                }
                while (v31 <= v19);
              }
              while (a1 < v29);
            }
            v32 = (void **)&a1[-2];
            if (&a1[-2] != v8)
            {
              sub_20B824BE4((uint64_t)v8, a1 - 2);
              v8[1].n128_u64[1] = a1[-1].n128_u64[1];
            }
            v33 = *v32;
            if (*v32)
            {
              a1[-2].n128_u64[1] = (unint64_t)v33;
              operator delete(v33);
            }
            a1[-2] = v101;
            a1[-1].n128_u64[0] = v21;
            a1[-1].n128_f64[1] = v19;
            if (v23 >= v25)
            {
              v34 = sub_20B885CBC(v8, a1 - 2);
              if (sub_20B885CBC(a1, a2))
              {
                a2 = a1 - 2;
                if (!v34)
                  continue;
                return;
              }
              if (v34)
                goto LABEL_1;
            }
            sub_20B8852F8(v8, &a1[-2], a3, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v19 = v8[1].n128_f64[1];
          if (v8[-1].n128_f64[1] > v19)
            goto LABEL_13;
          v35 = *v8;
          v36 = v8[1].n128_u64[0];
          v8->n128_u64[1] = 0;
          v8[1].n128_u64[0] = 0;
          v8->n128_u64[0] = 0;
          if (v19 <= a2[-1].n128_f64[1])
          {
            v39 = v8 + 2;
            do
            {
              a1 = v39;
              if (v39 >= a2)
                break;
              v40 = v39[1].n128_f64[1];
              v39 += 2;
            }
            while (v19 <= v40);
          }
          else
          {
            v37 = v8;
            do
            {
              a1 = v37 + 2;
              v38 = v37[3].n128_f64[1];
              v37 += 2;
            }
            while (v19 <= v38);
          }
          v41 = a2;
          if (a1 < a2)
          {
            v42 = a2;
            do
            {
              v41 = v42 - 2;
              v43 = v42[-1].n128_f64[1];
              v42 -= 2;
            }
            while (v19 > v43);
          }
          v102 = v35;
          while (a1 < v41)
          {
            sub_20B885B94((uint64_t)a1, v41);
            do
            {
              v44 = a1[3].n128_f64[1];
              a1 += 2;
            }
            while (v19 <= v44);
            do
            {
              v45 = v41[-1].n128_f64[1];
              v41 -= 2;
            }
            while (v19 > v45);
          }
          v46 = (void **)&a1[-2];
          if (&a1[-2] != v8)
          {
            sub_20B824BE4((uint64_t)v8, a1 - 2);
            v8[1].n128_u64[1] = a1[-1].n128_u64[1];
          }
          v47 = *v46;
          if (*v46)
          {
            a1[-2].n128_u64[1] = (unint64_t)v47;
            operator delete(v47);
          }
          a4 = 0;
          a1[-2] = v102;
          a1[-1].n128_u64[0] = v36;
          a1[-1].n128_f64[1] = v19;
          goto LABEL_1;
        }
        v48 = v8 + 2;
        v50 = v8 == a2 || v48 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v50)
          {
            v51 = 0;
            v52 = v8;
            do
            {
              v53 = v48;
              v54 = v52[3].n128_f64[1];
              if (v54 > v52[1].n128_f64[1])
              {
                v103 = *v48;
                v55 = v52[3].n128_u64[0];
                v48->n128_u64[0] = 0;
                v48->n128_u64[1] = 0;
                v56 = v51;
                v48[1].n128_u64[0] = 0;
                while (1)
                {
                  v57 = (double *)((char *)v8->n128_f64 + v56);
                  sub_20B824BE4((uint64_t)&v8[2] + v56, (__n128 *)((char *)v8 + v56));
                  *(unint64_t *)((char *)&v8[3].n128_u64[1] + v56) = *(unint64_t *)((char *)&v8[1].n128_u64[1]
                                                                                                + v56);
                  if (!v56)
                    break;
                  v56 -= 32;
                  if (v54 <= *(v57 - 1))
                  {
                    v58 = (uint64_t)&v8[2] + v56;
                    goto LABEL_80;
                  }
                }
                v58 = (uint64_t)v8;
LABEL_80:
                v59 = *(void **)v58;
                if (*(_QWORD *)v58)
                {
                  *(_QWORD *)(v58 + 8) = v59;
                  operator delete(v59);
                }
                *(__n128 *)v58 = v103;
                *(_QWORD *)(v58 + 16) = v55;
                *(double *)(v58 + 24) = v54;
              }
              v48 = v53 + 2;
              v51 += 32;
              v52 = v53;
            }
            while (&v53[2] != a2);
          }
        }
        else if (!v50)
        {
          v91 = &v8[3].n128_f64[1];
          do
          {
            v92 = v48;
            v93 = v8[3].n128_f64[1];
            if (v93 > v8[1].n128_f64[1])
            {
              v106 = *v48;
              v94 = v8[3].n128_u64[0];
              v48->n128_u64[0] = 0;
              v48->n128_u64[1] = 0;
              v95 = v91;
              v48[1].n128_u64[0] = 0;
              do
              {
                v96 = v95;
                sub_20B824BE4((uint64_t)(v95 - 3), (__n128 *)(v95 - 7));
                v97 = *((_QWORD *)v95 - 4);
                v95 -= 4;
                *(_QWORD *)v96 = v97;
              }
              while (v93 > *(v96 - 8));
              v98 = (void *)*((_QWORD *)v95 - 3);
              if (v98)
              {
                *((_QWORD *)v95 - 2) = v98;
                operator delete(v98);
              }
              *(__n128 *)(v95 - 3) = v106;
              *((_QWORD *)v95 - 1) = v94;
              *v95 = v93;
            }
            v48 = v92 + 2;
            v91 += 4;
            v8 = v92;
          }
          while (&v92[2] != a2);
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((uint64_t)(a2 - 4), v9))
        {
          sub_20B889430((uint64_t *)v9, (uint64_t)(a2 - 4));
          v20 = *(_DWORD *)(v9 + 24);
          *(_DWORD *)(v9 + 24) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v20;
        }
        return;
      case 3uLL:
        sub_20B888C8C(v9, v9 + 32, (uint64_t)(a2 - 4), a3);
        return;
      case 4uLL:
        sub_20B889488(v9, v9 + 32, v9 + 64, (uint64_t)(a2 - 4), a3);
        return;
      case 5uLL:
        sub_20B88955C(v9, v9 + 32, v9 + 64, v9 + 96, (uint64_t)(a2 - 4), a3);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            sub_20B8889AC(v9, a2, (uint64_t (**)(_QWORD **, uint64_t))a3);
          else
            sub_20B888B2C(v9, a2, (uint64_t (**)(_QWORD **, uint64_t))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            sub_20B888C8C(v9 + 32 * (v13 >> 1), v9, (uint64_t)(a2 - 4), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_20B888C8C(v9, v9 + 32 * (v13 >> 1), (uint64_t)(a2 - 4), a3);
            sub_20B888C8C(v9 + 32, v15 - 32, (uint64_t)(a2 - 8), a3);
            sub_20B888C8C(v9 + 64, v9 + 32 + 32 * v14, (uint64_t)(a2 - 12), a3);
            sub_20B888C8C(v15 - 32, v15, v9 + 32 + 32 * v14, a3);
            sub_20B889430((uint64_t *)v9, v15);
            v16 = *(_DWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v15 + 24);
            *(_DWORD *)(v15 + 24) = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v9 - 32, v9) & 1) == 0)
          {
            v9 = sub_20B888DB8(v9, (unint64_t)a2, (uint64_t (**)(_QWORD **, unint64_t))a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = sub_20B888FB0(v9, (unint64_t)a2, (uint64_t (**)(uint64_t, _QWORD **))a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = sub_20B8891B0(v9, v17, a3);
          v9 = v17 + 32;
          if (!sub_20B8891B0(v17 + 32, (uint64_t)a2, a3))
          {
            v10 = v11 + 1;
            if ((v19 & 1) != 0)
              continue;
LABEL_14:
            sub_20B888650(a1, v17, a3, -v11, a5 & 1);
            v9 = v17 + 32;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (_QWORD *)v17;
          if ((v19 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if ((_QWORD *)v9 != a2)
          sub_20B889750(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v133 = a2 - 40;
  v130 = (__int128 *)(a2 - 120);
  v131 = (__int128 *)(a2 - 80);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v133, (__int128 *)a1))
        {
          v58 = *(_OWORD *)a1;
          v59 = *(_OWORD *)(a1 + 16);
          v140 = *(_QWORD *)(a1 + 32);
          v138 = v58;
          v139 = v59;
          v60 = *(_OWORD *)v133;
          v61 = *(_OWORD *)(v133 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v133 + 32);
          *(_OWORD *)a1 = v60;
          *(_OWORD *)(a1 + 16) = v61;
          v62 = v138;
          v63 = v139;
          *(_QWORD *)(v133 + 32) = v140;
          *(_OWORD *)v133 = v62;
          *(_OWORD *)(v133 + 16) = v63;
        }
        return;
      case 3:
        sub_20B8AE0A0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)v133, a3);
        return;
      case 4:
        sub_20B8AE3CC(a1, a1 + 40, a1 + 80, v133, a3);
        return;
      case 5:
        sub_20B8AE4B4(a1, a1 + 40, a1 + 80, a1 + 120, v133, a3);
        return;
      default:
        if (v11 <= 959)
        {
          v64 = (__int128 *)(a1 + 40);
          v65 = a1 == a2 || v64 == (__int128 *)a2;
          v66 = v65;
          if ((a5 & 1) != 0)
          {
            if ((v66 & 1) == 0)
            {
              v67 = 0;
              v68 = a1;
              do
              {
                v69 = (__int128 *)v68;
                v68 = (uint64_t)v64;
                if ((*a3)(v64, v69))
                {
                  v70 = *(_OWORD *)v68;
                  v71 = *(_OWORD *)(v68 + 16);
                  v140 = *(_QWORD *)(v68 + 32);
                  v138 = v70;
                  v139 = v71;
                  v72 = v67;
                  while (1)
                  {
                    v73 = a1 + v72;
                    v74 = *(_OWORD *)(a1 + v72 + 16);
                    *(_OWORD *)(v73 + 40) = *(_OWORD *)(a1 + v72);
                    *(_OWORD *)(v73 + 56) = v74;
                    *(_QWORD *)(v73 + 72) = *(_QWORD *)(a1 + v72 + 32);
                    if (!v72)
                      break;
                    v72 -= 40;
                    if (((*a3)(&v138, (__int128 *)(v72 + a1)) & 1) == 0)
                    {
                      v75 = a1 + v72 + 40;
                      goto LABEL_73;
                    }
                  }
                  v75 = a1;
LABEL_73:
                  v76 = v138;
                  v77 = v139;
                  *(_QWORD *)(v75 + 32) = v140;
                  *(_OWORD *)v75 = v76;
                  *(_OWORD *)(v75 + 16) = v77;
                }
                v64 = (__int128 *)(v68 + 40);
                v67 += 40;
              }
              while (v68 + 40 != a2);
            }
          }
          else if ((v66 & 1) == 0)
          {
            v121 = a1 - 40;
            do
            {
              v122 = (__int128 *)a1;
              a1 = (uint64_t)v64;
              if ((*a3)(v64, v122))
              {
                v123 = *(_OWORD *)a1;
                v124 = *(_OWORD *)(a1 + 16);
                v140 = *(_QWORD *)(a1 + 32);
                v138 = v123;
                v139 = v124;
                v125 = v121;
                do
                {
                  v126 = *(_OWORD *)(v125 + 56);
                  *(_OWORD *)(v125 + 80) = *(_OWORD *)(v125 + 40);
                  *(_OWORD *)(v125 + 96) = v126;
                  *(_QWORD *)(v125 + 112) = *(_QWORD *)(v125 + 72);
                  v127 = (*a3)(&v138, (__int128 *)v125);
                  v125 -= 40;
                }
                while ((v127 & 1) != 0);
                v128 = v138;
                v129 = v139;
                *(_QWORD *)(v125 + 112) = v140;
                *(_OWORD *)(v125 + 80) = v128;
                *(_OWORD *)(v125 + 96) = v129;
              }
              v64 = (__int128 *)(a1 + 40);
              v121 += 40;
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v78 = (unint64_t)(v12 - 2) >> 1;
            v132 = a2;
            v134 = v78;
            do
            {
              v79 = v78;
              if (v134 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = a1 + 40 * v80;
                if (2 * v78 + 2 < v12 && (*a3)((__int128 *)(a1 + 40 * v80), (__int128 *)(v81 + 40)))
                {
                  v81 += 40;
                  v80 = 2 * v79 + 2;
                }
                v82 = a1 + 40 * v79;
                if (((*a3)((__int128 *)v81, (__int128 *)v82) & 1) == 0)
                {
                  v83 = *(_OWORD *)v82;
                  v84 = *(_OWORD *)(v82 + 16);
                  v140 = *(_QWORD *)(v82 + 32);
                  v138 = v83;
                  v139 = v84;
                  do
                  {
                    v85 = v81;
                    v86 = *(_OWORD *)v81;
                    v87 = *(_OWORD *)(v81 + 16);
                    *(_QWORD *)(v82 + 32) = *(_QWORD *)(v81 + 32);
                    *(_OWORD *)v82 = v86;
                    *(_OWORD *)(v82 + 16) = v87;
                    if (v134 < v80)
                      break;
                    v88 = (2 * v80) | 1;
                    v81 = a1 + 40 * v88;
                    v89 = 2 * v80 + 2;
                    if (v89 < v12 && (*a3)((__int128 *)(a1 + 40 * v88), (__int128 *)(v81 + 40)))
                    {
                      v81 += 40;
                      v88 = v89;
                    }
                    v82 = v85;
                    v80 = v88;
                  }
                  while (!(*a3)((__int128 *)v81, &v138));
                  v90 = v138;
                  v91 = v139;
                  *(_QWORD *)(v85 + 32) = v140;
                  *(_OWORD *)v85 = v90;
                  *(_OWORD *)(v85 + 16) = v91;
                  a2 = v132;
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v92 = v11 / 0x28uLL;
            do
            {
              v93 = 0;
              v94 = *(_OWORD *)a1;
              v95 = *(_OWORD *)(a1 + 16);
              v137 = *(_QWORD *)(a1 + 32);
              v135 = v94;
              v136 = v95;
              v96 = a1;
              do
              {
                v97 = v96 + 40 * v93 + 40;
                v98 = (2 * v93) | 1;
                v99 = 2 * v93 + 2;
                if (v99 < v92
                  && (*a3)((__int128 *)(v96 + 40 * v93 + 40), (__int128 *)(v96 + 40 * v93 + 80)))
                {
                  v97 += 40;
                  v98 = v99;
                }
                v100 = *(_OWORD *)v97;
                v101 = *(_OWORD *)(v97 + 16);
                *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
                *(_OWORD *)v96 = v100;
                *(_OWORD *)(v96 + 16) = v101;
                v96 = v97;
                v93 = v98;
              }
              while (v98 <= (uint64_t)((unint64_t)(v92 - 2) >> 1));
              v102 = (__int128 *)(a2 - 40);
              if (v97 == a2 - 40)
              {
                v107 = a2 - 40;
                v118 = v135;
                v119 = v136;
                *(_QWORD *)(v97 + 32) = v137;
                *(_OWORD *)v97 = v118;
                *(_OWORD *)(v97 + 16) = v119;
              }
              else
              {
                v103 = *v102;
                v104 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v97 + 32) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)v97 = v103;
                *(_OWORD *)(v97 + 16) = v104;
                v105 = v135;
                v106 = v136;
                *(_QWORD *)(a2 - 8) = v137;
                *v102 = v105;
                *(_OWORD *)(a2 - 24) = v106;
                v107 = a2 - 40;
                v108 = v97 - a1 + 40;
                if (v108 >= 41)
                {
                  v109 = (v108 / 0x28uLL - 2) >> 1;
                  v110 = a1 + 40 * v109;
                  if ((*a3)((__int128 *)v110, (__int128 *)v97))
                  {
                    v111 = *(_OWORD *)v97;
                    v112 = *(_OWORD *)(v97 + 16);
                    v140 = *(_QWORD *)(v97 + 32);
                    v138 = v111;
                    v139 = v112;
                    do
                    {
                      v113 = v110;
                      v114 = *(_OWORD *)v110;
                      v115 = *(_OWORD *)(v110 + 16);
                      *(_QWORD *)(v97 + 32) = *(_QWORD *)(v110 + 32);
                      *(_OWORD *)v97 = v114;
                      *(_OWORD *)(v97 + 16) = v115;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = a1 + 40 * v109;
                      v97 = v113;
                    }
                    while (((*a3)((__int128 *)v110, &v138) & 1) != 0);
                    v116 = v138;
                    v117 = v139;
                    *(_QWORD *)(v113 + 32) = v140;
                    *(_OWORD *)v113 = v116;
                    *(_OWORD *)(v113 + 16) = v117;
                  }
                }
              }
              v120 = v92-- <= 2;
              a2 = v107;
            }
            while (!v120);
          }
          return;
        }
        v13 = a2;
        v14 = (unint64_t)v12 >> 1;
        v15 = a1 + 40 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x1401)
        {
          sub_20B8AE0A0((__int128 *)v15, (__int128 *)a1, (__int128 *)v133, a3);
        }
        else
        {
          sub_20B8AE0A0((__int128 *)a1, (__int128 *)v15, (__int128 *)v133, a3);
          v16 = 5 * v14;
          sub_20B8AE0A0((__int128 *)(a1 + 40), (__int128 *)(a1 + 8 * v16 - 40), v131, a3);
          sub_20B8AE0A0((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v16), v130, a3);
          sub_20B8AE0A0((__int128 *)(a1 + 8 * v16 - 40), (__int128 *)v15, (__int128 *)(a1 + 40 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v18 = *(_OWORD *)(a1 + 16);
          v140 = *(_QWORD *)(a1 + 32);
          v138 = v17;
          v139 = v18;
          v19 = *(_OWORD *)v15;
          v20 = *(_OWORD *)(v15 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v15 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          v21 = v138;
          v22 = v139;
          *(_QWORD *)(v15 + 32) = v140;
          *(_OWORD *)v15 = v21;
          *(_OWORD *)(v15 + 16) = v22;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
        {
          v42 = *(_OWORD *)a1;
          v43 = *(_OWORD *)(a1 + 16);
          v137 = *(_QWORD *)(a1 + 32);
          v135 = v42;
          v136 = v43;
          if (((*a3)(&v135, (__int128 *)v133) & 1) != 0)
          {
            v10 = a1;
            a2 = v13;
            do
              v10 += 40;
            while (((*a3)(&v135, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v44 = (__int128 *)(a1 + 40);
            a2 = v13;
            do
            {
              v10 = (unint64_t)v44;
              if ((unint64_t)v44 >= v13)
                break;
              v45 = (*a3)(&v135, v44);
              v44 = (__int128 *)(v10 + 40);
            }
            while (!v45);
          }
          v46 = a2;
          if (v10 < a2)
          {
            v46 = a2;
            do
              v46 -= 40;
            while (((*a3)(&v135, (__int128 *)v46) & 1) != 0);
          }
          while (v10 < v46)
          {
            v47 = *(_OWORD *)v10;
            v48 = *(_OWORD *)(v10 + 16);
            v140 = *(_QWORD *)(v10 + 32);
            v138 = v47;
            v139 = v48;
            v49 = *(_OWORD *)v46;
            v50 = *(_OWORD *)(v46 + 16);
            *(_QWORD *)(v10 + 32) = *(_QWORD *)(v46 + 32);
            *(_OWORD *)v10 = v49;
            *(_OWORD *)(v10 + 16) = v50;
            v51 = v138;
            v52 = v139;
            *(_QWORD *)(v46 + 32) = v140;
            *(_OWORD *)v46 = v51;
            *(_OWORD *)(v46 + 16) = v52;
            do
              v10 += 40;
            while (!(*a3)(&v135, (__int128 *)v10));
            do
              v46 -= 40;
            while (((*a3)(&v135, (__int128 *)v46) & 1) != 0);
          }
          v53 = (__int128 *)(v10 - 40);
          if (v10 - 40 != a1)
          {
            v54 = *v53;
            v55 = *(_OWORD *)(v10 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v54;
            *(_OWORD *)(a1 + 16) = v55;
          }
          a5 = 0;
          v56 = v135;
          v57 = v136;
          *(_QWORD *)(v10 - 8) = v137;
          *v53 = v56;
          *(_OWORD *)(v10 - 24) = v57;
          continue;
        }
        v23 = 0;
        v24 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a1 + 16);
        v137 = *(_QWORD *)(a1 + 32);
        v135 = v24;
        v136 = v25;
        do
          v23 += 40;
        while (((*a3)((__int128 *)(v23 + a1), &v135) & 1) != 0);
        v26 = a1 + v23;
        v27 = (__int128 *)v13;
        v65 = v23 == 40;
        a2 = v13;
        if (v65)
        {
          v27 = (__int128 *)v13;
          do
          {
            if (v26 >= (unint64_t)v27)
              break;
            v27 = (__int128 *)((char *)v27 - 40);
          }
          while (((*a3)(v27, &v135) & 1) == 0);
        }
        else
        {
          do
            v27 = (__int128 *)((char *)v27 - 40);
          while (!(*a3)(v27, &v135));
        }
        if (v26 >= (unint64_t)v27)
        {
          v36 = v26 - 40;
        }
        else
        {
          v28 = v26;
          v29 = v27;
          do
          {
            v30 = *(_OWORD *)v28;
            v31 = *(_OWORD *)(v28 + 16);
            v140 = *(_QWORD *)(v28 + 32);
            v138 = v30;
            v139 = v31;
            v32 = *v29;
            v33 = v29[1];
            *(_QWORD *)(v28 + 32) = *((_QWORD *)v29 + 4);
            *(_OWORD *)v28 = v32;
            *(_OWORD *)(v28 + 16) = v33;
            v34 = v138;
            v35 = v139;
            *((_QWORD *)v29 + 4) = v140;
            *v29 = v34;
            v29[1] = v35;
            do
              v28 += 40;
            while (((*a3)((__int128 *)v28, &v135) & 1) != 0);
            do
              v29 = (__int128 *)((char *)v29 - 40);
            while (!(*a3)(v29, &v135));
          }
          while (v28 < (unint64_t)v29);
          v36 = v28 - 40;
        }
        if (v36 != a1)
        {
          v37 = *(_OWORD *)v36;
          v38 = *(_OWORD *)(v36 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v36 + 32);
          *(_OWORD *)a1 = v37;
          *(_OWORD *)(a1 + 16) = v38;
        }
        v39 = v135;
        v40 = v136;
        *(_QWORD *)(v36 + 32) = v137;
        *(_OWORD *)v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        if (v26 < (unint64_t)v27)
        {
LABEL_31:
          sub_20B8AD760(a1, v36, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v36 + 40;
          continue;
        }
        v41 = sub_20B8AE1D8(a1, v36, a3);
        v10 = v36 + 40;
        if (!sub_20B8AE1D8(v36 + 40, v13, a3))
        {
          if (v41)
            continue;
          goto LABEL_31;
        }
        a2 = v36;
        if (!v41)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
        {
          v23 = *v10;
          *v10 = *((_WORD *)a2 - 8);
          *((_WORD *)a2 - 8) = v23;
          v24 = *((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v24;
        }
        return;
      case 3uLL:
        sub_20B8D590C(v10, v10 + 8, (__int16 *)a2 - 8, a3);
        return;
      case 4uLL:
        sub_20B8D5EEC((uint64_t)v10, (uint64_t)(v10 + 8), (uint64_t)(v10 + 16), (uint64_t)(a2 - 1), a3);
        return;
      case 5uLL:
        sub_20B8D5FD8((uint64_t)v10, (uint64_t)(v10 + 8), (uint64_t)(v10 + 16), (uint64_t)(v10 + 24), (uint64_t)(a2 - 1), a3);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_20B8D5760((uint64_t)v10, a2, a3);
          else
            sub_20B8D5844((uint64_t)v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[8 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            sub_20B8D590C(&v10[8 * (v14 >> 1)], v10, (__int16 *)a2 - 8, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_20B8D590C(v10, &v10[8 * (v14 >> 1)], (__int16 *)a2 - 8, a3);
            sub_20B8D590C(v10 + 8, v16 - 8, (__int16 *)a2 - 16, a3);
            sub_20B8D590C(v10 + 16, &v10[8 * v15 + 8], (__int16 *)a2 - 24, a3);
            sub_20B8D590C(v16 - 8, v16, &v10[8 * v15 + 8], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            v18 = *((_QWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = *((_QWORD *)v16 + 1);
            *((_QWORD *)v16 + 1) = v18;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
          {
            v10 = sub_20B8D5A58(v10, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          a6.n128_f64[0] = sub_20B8D5BB4(v10, (unint64_t)a2, a3);
          v20 = v19;
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = sub_20B8D5D0C((uint64_t)v10, v19, a3);
          v10 = (__int16 *)(v20 + 1);
          if (!sub_20B8D5D0C((uint64_t)(v20 + 1), a2, a3))
          {
            v11 = v12 + 1;
            if (v22)
              continue;
LABEL_14:
            sub_20B8D53F4(a1, v20, a3, -v12, a5 & 1, a6);
            v10 = (__int16 *)(v20 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if (v10 != (__int16 *)a2)
          sub_20B8D6100((uint64_t)v10, (__int16 *)a2, (__int16 *)a2, a3, a6);
        return;
    }
  }
}

  v7 = a1;
  v78 = a1 + 32;
  v79 = a1 + 16;
  v8 = a1 - 16;
  while (2)
  {
    v9 = (uint64_t)a2 - v7;
    v10 = ((uint64_t)a2 - v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_20B8F482C((uint64_t)(a2 - 2), v7))
          sub_20B8F7824(v7, (uint64_t)(a2 - 2));
        return;
      case 3:
        sub_20B8F7878(v7, v7 + 16, (uint64_t)(a2 - 2));
        return;
      case 4:
        sub_20B8F7AFC(v7, v7 + 16, v7 + 32, (uint64_t)(a2 - 2));
        return;
      case 5:
        sub_20B8F7B90(v7, v7 + 16, v7 + 32, v7 + 48, (uint64_t)(a2 - 2));
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if ((const void **)v7 != a2)
            {
              v81 = a2;
              v40 = (unint64_t)(v10 - 2) >> 1;
              v41 = v40;
              do
              {
                v42 = v41;
                if (v40 >= v41)
                {
                  v43 = (2 * v41) | 1;
                  v44 = (const void **)(v7 + 16 * v43);
                  if (2 * v41 + 2 < v10 && sub_20B8F482C(v7 + 16 * v43, (uint64_t)(v44 + 2)))
                  {
                    v44 += 2;
                    v43 = 2 * v42 + 2;
                  }
                  v45 = v7 + 16 * v42;
                  if ((sub_20B8F482C((uint64_t)v44, v45) & 1) == 0)
                  {
                    v46 = *(const void **)v45;
                    *(_QWORD *)v45 = 0;
                    v83 = v46;
                    v84 = *(const void **)(v7 + 16 * v42 + 8);
                    do
                    {
                      v47 = v44;
                      v48 = *v44;
                      *v44 = 0;
                      sub_20B87E150((const void **)v45, v48);
                      *(_QWORD *)(v45 + 8) = v44[1];
                      if (v40 < v43)
                        break;
                      v49 = (2 * v43) | 1;
                      v44 = (const void **)(v7 + 16 * v49);
                      v43 = 2 * v43 + 2;
                      if (v43 >= v10)
                      {
                        v43 = v49;
                      }
                      else if (sub_20B8F482C(v7 + 16 * v49, (uint64_t)(v44 + 2)))
                      {
                        v44 += 2;
                      }
                      else
                      {
                        v43 = v49;
                      }
                      v45 = (uint64_t)v47;
                    }
                    while (!sub_20B8F482C((uint64_t)v44, (uint64_t)&v83));
                    sub_20B87E150(v47, v83);
                    v47[1] = v84;
                  }
                }
                v41 = v42 - 1;
              }
              while (v42);
              v50 = (unint64_t)v9 >> 4;
              v51 = v81;
              do
              {
                v52 = 0;
                v53 = v51;
                v54 = *(const void **)v7;
                v55 = *(const void **)(v7 + 8);
                *(_QWORD *)v7 = 0;
                v56 = v50 - 2;
                v82 = v54;
                if (v50 < 2)
                  v56 = v50 - 1;
                v57 = v56 >> 1;
                v58 = v7;
                do
                {
                  v59 = v58 + 16 * v52 + 16;
                  v60 = (2 * v52) | 1;
                  v61 = 2 * v52 + 2;
                  if (v61 < v50 && sub_20B8F482C(v58 + 16 * v52 + 16, v58 + 16 * v52 + 32))
                  {
                    v59 += 16;
                    v60 = v61;
                  }
                  v62 = *(const void **)v59;
                  *(_QWORD *)v59 = 0;
                  sub_20B87E150((const void **)v58, v62);
                  *(_QWORD *)(v58 + 8) = *(_QWORD *)(v59 + 8);
                  v58 = v59;
                  v52 = v60;
                }
                while (v60 <= v57);
                v51 = v53 - 2;
                if ((const void **)v59 == v53 - 2)
                {
                  sub_20B87E150((const void **)v59, v82);
                  *(_QWORD *)(v59 + 8) = v55;
                }
                else
                {
                  v63 = *(v53 - 2);
                  *(v53 - 2) = 0;
                  sub_20B87E150((const void **)v59, v63);
                  *(_QWORD *)(v59 + 8) = *(v53 - 1);
                  sub_20B87E150(v53 - 2, v82);
                  *(v53 - 1) = v55;
                  v64 = v59 - v7 + 16;
                  if (v64 >= 17)
                  {
                    v65 = (((unint64_t)v64 >> 4) - 2) >> 1;
                    v66 = (const void **)(v7 + 16 * v65);
                    if (sub_20B8F482C((uint64_t)v66, v59))
                    {
                      v67 = *(const void **)v59;
                      *(_QWORD *)v59 = 0;
                      v83 = v67;
                      v84 = *(const void **)(v59 + 8);
                      do
                      {
                        v68 = v66;
                        v69 = *v66;
                        *v66 = 0;
                        sub_20B87E150((const void **)v59, v69);
                        *(_QWORD *)(v59 + 8) = v66[1];
                        if (!v65)
                          break;
                        v65 = (v65 - 1) >> 1;
                        v66 = (const void **)(v7 + 16 * v65);
                        v59 = (uint64_t)v68;
                      }
                      while ((sub_20B8F482C((uint64_t)v66, (uint64_t)&v83) & 1) != 0);
                      sub_20B87E150(v68, v67);
                      v68[1] = v84;
                    }
                  }
                }
              }
              while (v50-- > 2);
            }
            return;
          }
          v11 = v7 + 16 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 < 0x801)
          {
            sub_20B8F7878(v11, v7, (uint64_t)(a2 - 2));
          }
          else
          {
            sub_20B8F7878(v7, v11, (uint64_t)(a2 - 2));
            sub_20B8F7878(v79, v11 - 16, (uint64_t)(a2 - 4));
            sub_20B8F7878(v78, v11 + 16, (uint64_t)(a2 - 6));
            sub_20B8F7878(v11 - 16, v11, v11 + 16);
            v13 = *(const void **)v7;
            v12 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)v7 = 0;
            v14 = *(const void **)v11;
            *(_QWORD *)v11 = 0;
            sub_20B87E150((const void **)v7, v14);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v11 + 8);
            sub_20B87E150((const void **)v11, v13);
            *(_QWORD *)(v11 + 8) = v12;
          }
          --a3;
          if ((a4 & 1) != 0 || (sub_20B8F482C(v8, v7) & 1) != 0)
          {
            v15 = 0;
            v17 = *(const void **)v7;
            v16 = *(const void **)(v7 + 8);
            *(_QWORD *)v7 = 0;
            v83 = v17;
            v84 = v16;
            do
            {
              v18 = sub_20B8F482C(v7 + v15 + 16, (uint64_t)&v83);
              v15 += 16;
            }
            while ((v18 & 1) != 0);
            v19 = v7 + v15;
            v20 = (unint64_t)a2;
            if (v15 == 16)
            {
              v20 = (unint64_t)a2;
              do
              {
                if (v19 >= v20)
                  break;
                v20 -= 16;
              }
              while ((sub_20B8F482C(v20, (uint64_t)&v83) & 1) == 0);
            }
            else
            {
              do
                v20 -= 16;
              while (!sub_20B8F482C(v20, (uint64_t)&v83));
            }
            a1 = v7 + v15;
            if (v19 < v20)
            {
              v21 = v20;
              do
              {
                sub_20B8F7824(a1, v21);
                do
                  a1 += 16;
                while ((sub_20B8F482C(a1, (uint64_t)&v83) & 1) != 0);
                do
                  v21 -= 16;
                while (!sub_20B8F482C(v21, (uint64_t)&v83));
              }
              while (a1 < v21);
            }
            if (a1 - 16 != v7)
            {
              v22 = *(const void **)(a1 - 16);
              *(_QWORD *)(a1 - 16) = 0;
              sub_20B87E150((const void **)v7, v22);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 - 8);
              v17 = v83;
            }
            sub_20B87E150((const void **)(a1 - 16), v17);
            *(_QWORD *)(a1 - 8) = v16;
            if (v19 >= v20)
            {
              v23 = sub_20B8F7930(v7, (const void **)(a1 - 16));
              if (sub_20B8F7930(a1, a2))
              {
                a2 = (const void **)(a1 - 16);
                if (!v23)
                  continue;
                return;
              }
              if (v23)
                goto LABEL_1;
            }
            sub_20B8F6F50(v7, a1 - 16, a3, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v24 = *(const void **)v7;
          v25 = *(const void **)(v7 + 8);
          *(_QWORD *)v7 = 0;
          v83 = v24;
          v84 = v25;
          if ((sub_20B8F482C((uint64_t)&v83, (uint64_t)(a2 - 2)) & 1) != 0)
          {
            a1 = v7;
            do
              a1 += 16;
            while ((sub_20B8F482C((uint64_t)&v83, a1) & 1) == 0);
          }
          else
          {
            v26 = v7 + 16;
            do
            {
              a1 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v27 = sub_20B8F482C((uint64_t)&v83, v26);
              v26 = a1 + 16;
            }
            while (!v27);
          }
          v28 = (unint64_t)a2;
          if (a1 < (unint64_t)a2)
          {
            v28 = (unint64_t)a2;
            do
              v28 -= 16;
            while ((sub_20B8F482C((uint64_t)&v83, v28) & 1) != 0);
          }
          while (a1 < v28)
          {
            sub_20B8F7824(a1, v28);
            do
              a1 += 16;
            while (!sub_20B8F482C((uint64_t)&v83, a1));
            do
              v28 -= 16;
            while ((sub_20B8F482C((uint64_t)&v83, v28) & 1) != 0);
          }
          if (a1 - 16 != v7)
          {
            v29 = *(const void **)(a1 - 16);
            *(_QWORD *)(a1 - 16) = 0;
            sub_20B87E150((const void **)v7, v29);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(a1 - 8);
            v24 = v83;
          }
          sub_20B87E150((const void **)(a1 - 16), v24);
          a4 = 0;
          *(_QWORD *)(a1 - 8) = v25;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((const void **)v7 != a2)
          {
            v30 = v7 + 16;
            if ((const void **)(v7 + 16) != a2)
            {
              v31 = 0;
              v32 = v7;
              do
              {
                v33 = (const void **)v30;
                if (sub_20B8F482C(v30, v32))
                {
                  v34 = *v33;
                  *v33 = 0;
                  v35 = *(const void **)(v32 + 24);
                  v83 = v34;
                  v84 = v35;
                  v36 = v31;
                  while (1)
                  {
                    v37 = v7 + v36;
                    v38 = *(const void **)(v7 + v36);
                    *(_QWORD *)(v7 + v36) = 0;
                    sub_20B87E150((const void **)(v7 + v36 + 16), v38);
                    *(_QWORD *)(v7 + v36 + 24) = *(_QWORD *)(v7 + v36 + 8);
                    if (!v36)
                      break;
                    v36 -= 16;
                    if ((sub_20B8F482C((uint64_t)&v83, v37 - 16) & 1) == 0)
                    {
                      v39 = v7 + v36 + 16;
                      goto LABEL_66;
                    }
                  }
                  v39 = v7;
LABEL_66:
                  sub_20B87E150((const void **)v39, v83);
                  *(_QWORD *)(v39 + 8) = v84;
                }
                v30 = (uint64_t)(v33 + 2);
                v31 += 16;
                v32 = (uint64_t)v33;
              }
              while (v33 + 2 != a2);
            }
          }
        }
        else if ((const void **)v7 != a2)
        {
          v71 = v7 + 16;
          while ((const void **)v71 != a2)
          {
            v72 = (const void **)v71;
            if (sub_20B8F482C(v71, v7))
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *(const void **)(v7 + 24);
              v83 = v73;
              v84 = v74;
              v75 = v8;
              do
              {
                v76 = *(const void **)(v75 + 16);
                *(_QWORD *)(v75 + 16) = 0;
                sub_20B87E150((const void **)(v75 + 32), v76);
                *(_QWORD *)(v75 + 40) = *(_QWORD *)(v75 + 24);
                v77 = sub_20B8F482C((uint64_t)&v83, v75);
                v75 -= 16;
              }
              while ((v77 & 1) != 0);
              sub_20B87E150((const void **)(v75 + 32), v83);
              *(_QWORD *)(v75 + 40) = v84;
            }
            v71 = (uint64_t)(v72 + 2);
            v8 += 16;
            v7 = (uint64_t)v72;
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 48))
        {
          sub_20B889430((uint64_t *)a1, a2 - 56);
          v118 = *(_QWORD *)(a1 + 40);
          v54 = v118;
          v117 = *(_OWORD *)(a1 + 24);
          v55 = v117;
          v56 = *(_QWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 32);
          *(_QWORD *)(a1 + 40) = v56;
          *(_QWORD *)(a2 - 16) = v54;
          *(_OWORD *)(a2 - 32) = v55;
          LODWORD(v54) = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v54;
        }
        return;
      case 3:
        sub_20B90B114((uint64_t *)a1, a1 + 56, a2 - 56);
        return;
      case 4:
        sub_20B90B518(a1, a1 + 56, a1 + 112, a2 - 56);
        return;
      case 5:
        sub_20B90AF90(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
        return;
      default:
        if (v9 <= 1343)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v57 = (_QWORD *)(a1 + 56);
              if (a1 + 56 != a2)
              {
                v58 = 0;
                v59 = (_QWORD *)a1;
                do
                {
                  v60 = v57;
                  v61 = *((_DWORD *)v59 + 26);
                  if (v61 > *((_DWORD *)v59 + 12))
                  {
                    v62 = v59 + 8;
                    v63 = v59[8];
                    *(_QWORD *)&v117 = *v60;
                    *((_QWORD *)&v117 + 1) = v63;
                    v118 = v59[9];
                    if (v118)
                    {
                      *(_QWORD *)(v63 + 16) = (char *)&v117 + 8;
                      *v60 = v62;
                      *v62 = 0;
                      v59[9] = 0;
                    }
                    else
                    {
                      *(_QWORD *)&v117 = (char *)&v117 + 8;
                    }
                    __p = *((_OWORD *)v59 + 5);
                    v120 = v59[12];
                    v59[11] = 0;
                    v59[12] = 0;
                    v59[10] = 0;
                    v121 = v61;
                    v64 = v58;
                    while (1)
                    {
                      sub_20B90B640(a1 + v64 + 56, a1 + v64);
                      if (!v64)
                        break;
                      v65 = *(_DWORD *)(a1 + v64 - 8);
                      v64 -= 56;
                      if (v121 <= v65)
                      {
                        v66 = a1 + v64 + 56;
                        goto LABEL_83;
                      }
                    }
                    v66 = a1;
LABEL_83:
                    sub_20B90B640(v66, (uint64_t)&v117);
                    if (SHIBYTE(v120) < 0)
                      operator delete((void *)__p);
                    sub_20B8896CC((uint64_t)&v117, *((_QWORD **)&v117 + 1));
                  }
                  v57 = v60 + 7;
                  v58 += 56;
                  v59 = v60;
                }
                while (v60 + 7 != (_QWORD *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v104 = (_QWORD *)(a1 + 56);
            if (a1 + 56 != a2)
            {
              do
              {
                v105 = v104;
                v106 = *(_DWORD *)(a1 + 104);
                if (v106 > *(_DWORD *)(a1 + 48))
                {
                  v107 = (_QWORD *)(a1 + 64);
                  v108 = *(_QWORD *)(a1 + 64);
                  *(_QWORD *)&v117 = *v105;
                  *((_QWORD *)&v117 + 1) = v108;
                  v118 = *(_QWORD *)(a1 + 72);
                  if (v118)
                  {
                    *(_QWORD *)(v108 + 16) = (char *)&v117 + 8;
                    *v105 = v107;
                    *v107 = 0;
                    *(_QWORD *)(a1 + 72) = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v117 = (char *)&v117 + 8;
                  }
                  __p = *(_OWORD *)(a1 + 80);
                  v120 = *(_QWORD *)(a1 + 96);
                  *(_QWORD *)(a1 + 88) = 0;
                  *(_QWORD *)(a1 + 96) = 0;
                  *(_QWORD *)(a1 + 80) = 0;
                  v121 = v106;
                  do
                  {
                    sub_20B90B640(a1 + 56, a1);
                    v109 = a1 - 56;
                    v110 = *(_DWORD *)(a1 - 8);
                    a1 -= 56;
                  }
                  while (v121 > v110);
                  sub_20B90B640(v109 + 56, (uint64_t)&v117);
                  if (SHIBYTE(v120) < 0)
                    operator delete((void *)__p);
                  sub_20B8896CC((uint64_t)&v117, *((_QWORD **)&v117 + 1));
                }
                v104 = v105 + 7;
                a1 = (uint64_t)v105;
              }
              while (v105 + 7 != (_QWORD *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v67 = (unint64_t)(v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = a1 + 56 * v70;
                if (2 * v69 + 2 < v10)
                {
                  v72 = *(_DWORD *)(v71 + 48);
                  v73 = *(_DWORD *)(v71 + 104);
                  v71 += 56 * (v72 > v73);
                  if (v72 > v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = a1 + 56 * v69;
                v75 = *(_DWORD *)(v74 + 48);
                if (*(_DWORD *)(v71 + 48) <= v75)
                {
                  *(_QWORD *)&v117 = *(_QWORD *)v74;
                  v76 = (_QWORD *)(v74 + 8);
                  v77 = *(_QWORD *)(v74 + 8);
                  *((_QWORD *)&v117 + 1) = v77;
                  v118 = *(_QWORD *)(v74 + 16);
                  if (v118)
                  {
                    *(_QWORD *)(v77 + 16) = (char *)&v117 + 8;
                    *(_QWORD *)v74 = v76;
                    *v76 = 0;
                    *(_QWORD *)(v74 + 16) = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v117 = (char *)&v117 + 8;
                  }
                  v78 = *(_OWORD *)(v74 + 24);
                  v120 = *(_QWORD *)(v74 + 40);
                  __p = v78;
                  *(_QWORD *)(v74 + 32) = 0;
                  *(_QWORD *)(v74 + 40) = 0;
                  *(_QWORD *)(v74 + 24) = 0;
                  v121 = v75;
                  do
                  {
                    v79 = v71;
                    sub_20B90B640(v74, v71);
                    if (v67 < v70)
                      break;
                    v80 = (2 * v70) | 1;
                    v71 = a1 + 56 * v80;
                    if (2 * v70 + 2 < v10)
                    {
                      v81 = *(_DWORD *)(v71 + 48);
                      v82 = *(_DWORD *)(v71 + 104);
                      v71 += 56 * (v81 > v82);
                      if (v81 > v82)
                        v80 = 2 * v70 + 2;
                    }
                    v74 = v79;
                    v70 = v80;
                  }
                  while (*(_DWORD *)(v71 + 48) <= v121);
                  sub_20B90B640(v79, (uint64_t)&v117);
                  if (SHIBYTE(v120) < 0)
                    operator delete((void *)__p);
                  sub_20B8896CC((uint64_t)&v117, *((_QWORD **)&v117 + 1));
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v83 = v9 / 0x38uLL;
            v84 = (_QWORD *)(a1 + 8);
            v85 = (__int128 *)(a1 + 24);
            do
            {
              v86 = *(_QWORD **)(a1 + 8);
              v111 = *(_QWORD ***)a1;
              v112 = v86;
              if (*(_QWORD *)(a1 + 16))
              {
                v86[2] = &v112;
                *(_QWORD *)a1 = v84;
                *v84 = 0;
                *(_QWORD *)(a1 + 16) = 0;
              }
              else
              {
                v111 = &v112;
              }
              v87 = 0;
              v88 = *v85;
              v115 = *(_QWORD *)(a1 + 40);
              v114 = v88;
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)v85 = 0;
              v116 = *(_DWORD *)(a1 + 48);
              v89 = a1;
              do
              {
                v90 = v89 + 56 * v87 + 56;
                v91 = (2 * v87) | 1;
                v92 = 2 * v87 + 2;
                if (v92 < v83)
                {
                  v93 = *(_DWORD *)(v90 + 48);
                  v94 = *(_DWORD *)(v90 + 104);
                  v90 += 56 * (v93 > v94);
                  if (v93 > v94)
                    v91 = v92;
                }
                sub_20B90B640(v89, v90);
                v89 = v90;
                v87 = v91;
              }
              while (v91 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 56;
              if (v90 == a2)
              {
                sub_20B90B640(v90, (uint64_t)&v111);
              }
              else
              {
                sub_20B90B640(v90, a2);
                sub_20B90B640(a2, (uint64_t)&v111);
                v95 = v90 - a1 + 56;
                if (v95 >= 57)
                {
                  v96 = (v95 / 0x38uLL - 2) >> 1;
                  v97 = a1 + 56 * v96;
                  v98 = *(_DWORD *)(v90 + 48);
                  if (*(_DWORD *)(v97 + 48) > v98)
                  {
                    *(_QWORD *)&v117 = *(_QWORD *)v90;
                    v99 = (_QWORD *)(v90 + 8);
                    v100 = *(_QWORD *)(v90 + 8);
                    *((_QWORD *)&v117 + 1) = v100;
                    v118 = *(_QWORD *)(v90 + 16);
                    if (v118)
                    {
                      *(_QWORD *)(v100 + 16) = (char *)&v117 + 8;
                      *(_QWORD *)v90 = v99;
                      *v99 = 0;
                      *(_QWORD *)(v90 + 16) = 0;
                    }
                    else
                    {
                      *(_QWORD *)&v117 = (char *)&v117 + 8;
                    }
                    v101 = *(_OWORD *)(v90 + 24);
                    v120 = *(_QWORD *)(v90 + 40);
                    __p = v101;
                    *(_QWORD *)(v90 + 32) = 0;
                    *(_QWORD *)(v90 + 40) = 0;
                    *(_QWORD *)(v90 + 24) = 0;
                    v121 = v98;
                    do
                    {
                      v102 = v97;
                      sub_20B90B640(v90, v97);
                      if (!v96)
                        break;
                      v96 = (v96 - 1) >> 1;
                      v97 = a1 + 56 * v96;
                      v90 = v102;
                    }
                    while (*(_DWORD *)(v97 + 48) > v121);
                    sub_20B90B640(v102, (uint64_t)&v117);
                    if (SHIBYTE(v120) < 0)
                      operator delete((void *)__p);
                    sub_20B8896CC((uint64_t)&v117, *((_QWORD **)&v117 + 1));
                  }
                }
              }
              if (SHIBYTE(v115) < 0)
                operator delete((void *)v114);
              sub_20B8896CC((uint64_t)&v111, v112);
            }
            while (v83-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 56 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1C01)
        {
          sub_20B90B114((uint64_t *)v12, a1, a2 - 56);
        }
        else
        {
          sub_20B90B114((uint64_t *)a1, v12, a2 - 56);
          v13 = 56 * v11;
          sub_20B90B114((uint64_t *)(a1 + 56), v13 + a1 - 56, a2 - 112);
          sub_20B90B114((uint64_t *)(a1 + 112), a1 + 56 + v13, a2 - 168);
          sub_20B90B114((uint64_t *)(v13 + a1 - 56), v12, a1 + 56 + v13);
          sub_20B889430((uint64_t *)a1, v12);
          v118 = *(_QWORD *)(a1 + 40);
          v14 = v118;
          v117 = *(_OWORD *)(a1 + 24);
          v15 = v117;
          v16 = *(_OWORD *)(v12 + 24);
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(v12 + 40);
          *(_OWORD *)(a1 + 24) = v16;
          *(_QWORD *)(v12 + 40) = v14;
          *(_OWORD *)(v12 + 24) = v15;
          LODWORD(v14) = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v12 + 48);
          *(_DWORD *)(v12 + 48) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_DWORD *)(a1 + 48);
          if (*(_DWORD *)(a1 - 8) <= v17)
          {
            v39 = (_QWORD *)(a1 + 8);
            v40 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)&v117 = *(_QWORD *)a1;
            *((_QWORD *)&v117 + 1) = v40;
            v118 = *(_QWORD *)(a1 + 16);
            if (v118)
            {
              *(_QWORD *)(v40 + 16) = (char *)&v117 + 8;
              *(_QWORD *)a1 = v39;
              *v39 = 0;
              *(_QWORD *)(a1 + 16) = 0;
            }
            else
            {
              *(_QWORD *)&v117 = (char *)&v117 + 8;
            }
            v41 = *(_OWORD *)(a1 + 24);
            v120 = *(_QWORD *)(a1 + 40);
            __p = v41;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 24) = 0;
            v121 = v17;
            if (v17 <= *(_DWORD *)(a2 - 8))
            {
              v44 = a1 + 56;
              do
              {
                v8 = v44;
                if (v44 >= a2)
                  break;
                v45 = *(_DWORD *)(v44 + 48);
                v44 += 56;
              }
              while (v17 <= v45);
            }
            else
            {
              v42 = a1;
              do
              {
                v8 = v42 + 56;
                v43 = *(_DWORD *)(v42 + 104);
                v42 += 56;
              }
              while (v17 <= v43);
            }
            v46 = a2;
            if (v8 < a2)
            {
              v47 = a2;
              do
              {
                v46 = v47 - 56;
                v48 = *(_DWORD *)(v47 - 8);
                v47 -= 56;
              }
              while (v17 > v48);
            }
            while (v8 < v46)
            {
              sub_20B889430((uint64_t *)v8, v46);
              v49 = *(_QWORD *)(v8 + 40);
              v50 = *(_OWORD *)(v8 + 24);
              v51 = *(_QWORD *)(v46 + 40);
              *(_OWORD *)(v8 + 24) = *(_OWORD *)(v46 + 24);
              *(_QWORD *)(v8 + 40) = v51;
              *(_OWORD *)(v46 + 24) = v50;
              *(_QWORD *)(v46 + 40) = v49;
              LODWORD(v49) = *(_DWORD *)(v8 + 48);
              *(_DWORD *)(v8 + 48) = *(_DWORD *)(v46 + 48);
              *(_DWORD *)(v46 + 48) = v49;
              do
              {
                v52 = *(_DWORD *)(v8 + 104);
                v8 += 56;
              }
              while (v121 <= v52);
              do
              {
                v53 = *(_DWORD *)(v46 - 8);
                v46 -= 56;
              }
              while (v121 > v53);
            }
            if (v8 - 56 != a1)
              sub_20B90B640(a1, v8 - 56);
            sub_20B90B640(v8 - 56, (uint64_t)&v117);
            if (SHIBYTE(v120) < 0)
              operator delete((void *)__p);
            sub_20B8896CC((uint64_t)&v117, *((_QWORD **)&v117 + 1));
            a4 = 0;
            continue;
          }
        }
        v18 = (_QWORD *)(a1 + 8);
        v19 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v117 = *(_QWORD *)a1;
        *((_QWORD *)&v117 + 1) = v19;
        v118 = *(_QWORD *)(a1 + 16);
        if (v118)
        {
          *(_QWORD *)(v19 + 16) = (char *)&v117 + 8;
          *(_QWORD *)a1 = v18;
          *v18 = 0;
          *(_QWORD *)(a1 + 16) = 0;
        }
        else
        {
          *(_QWORD *)&v117 = (char *)&v117 + 8;
        }
        v20 = 0;
        v21 = *(_OWORD *)(a1 + 24);
        v120 = *(_QWORD *)(a1 + 40);
        __p = v21;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v22 = *(_DWORD *)(a1 + 48);
        v121 = v22;
        do
        {
          v23 = *(_DWORD *)(a1 + v20 + 104);
          v20 += 56;
        }
        while (v23 > v22);
        v24 = a1 + v20;
        v25 = a2;
        if (v20 == 56)
        {
          v28 = a2;
          while (v24 < v28)
          {
            v26 = v28 - 56;
            v29 = *(_DWORD *)(v28 - 8);
            v28 -= 56;
            if (v29 > v22)
              goto LABEL_23;
          }
          v26 = v28;
        }
        else
        {
          do
          {
            v26 = v25 - 56;
            v27 = *(_DWORD *)(v25 - 8);
            v25 -= 56;
          }
          while (v27 <= v22);
        }
LABEL_23:
        if (v24 >= v26)
        {
          v37 = v24 - 56;
        }
        else
        {
          v30 = v24;
          v31 = v26;
          do
          {
            sub_20B889430((uint64_t *)v30, v31);
            v32 = *(_QWORD *)(v30 + 40);
            v33 = *(_OWORD *)(v30 + 24);
            v34 = *(_QWORD *)(v31 + 40);
            *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
            *(_QWORD *)(v30 + 40) = v34;
            *(_OWORD *)(v31 + 24) = v33;
            *(_QWORD *)(v31 + 40) = v32;
            LODWORD(v32) = *(_DWORD *)(v30 + 48);
            *(_DWORD *)(v30 + 48) = *(_DWORD *)(v31 + 48);
            *(_DWORD *)(v31 + 48) = v32;
            do
            {
              v35 = *(_DWORD *)(v30 + 104);
              v30 += 56;
            }
            while (v35 > v121);
            do
            {
              v36 = *(_DWORD *)(v31 - 8);
              v31 -= 56;
            }
            while (v36 <= v121);
          }
          while (v30 < v31);
          v37 = v30 - 56;
        }
        if (v37 != a1)
          sub_20B90B640(a1, v37);
        sub_20B90B640(v37, (uint64_t)&v117);
        if (SHIBYTE(v120) < 0)
          operator delete((void *)__p);
        sub_20B8896CC((uint64_t)&v117, *((_QWORD **)&v117 + 1));
        if (v24 < v26)
        {
LABEL_38:
          sub_20B90A46C(a1, v37, a3, a4 & 1);
          a4 = 0;
          v8 = v37 + 56;
          continue;
        }
        v38 = sub_20B90B2CC(a1, v37);
        v8 = v37 + 56;
        if (!sub_20B90B2CC(v37 + 56, a2))
        {
          if (v38)
            continue;
          goto LABEL_38;
        }
        a2 = v37;
        if (!v38)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = (__int128 *)((char *)a2 - 88);
  v8 = (char *)a1;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = (char *)a2 - v8;
    v10 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 80))
        {
          sub_20B931AE8((uint64_t *)a1, v7);
          v45 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v45;
        }
        return;
      case 3:
        sub_20B9316FC(a1, a1 + 88, (uint64_t)v7);
        return;
      case 4:
        sub_20B931C54(a1, a1 + 88, a1 + 176, (uint64_t)v7);
        return;
      case 5:
        sub_20B931C54(a1, a1 + 88, a1 + 176, a1 + 264);
        if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 344))
        {
          sub_20B931AE8((uint64_t *)(a1 + 264), v7);
          v46 = *(_DWORD *)(a1 + 344);
          *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v46;
          if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
          {
            sub_20B931AE8((uint64_t *)(a1 + 176), (__int128 *)(a1 + 264));
            v47 = *(_DWORD *)(a1 + 256);
            v48 = *(_DWORD *)(a1 + 344);
            *(_DWORD *)(a1 + 256) = v48;
            *(_DWORD *)(a1 + 344) = v47;
            if (v48 > *(_DWORD *)(a1 + 168))
            {
              sub_20B931AE8((uint64_t *)(a1 + 88), (__int128 *)(a1 + 176));
              v49 = *(_DWORD *)(a1 + 168);
              v50 = *(_DWORD *)(a1 + 256);
              *(_DWORD *)(a1 + 168) = v50;
              *(_DWORD *)(a1 + 256) = v49;
              if (v50 > *(_DWORD *)(a1 + 80))
              {
                sub_20B931AE8((uint64_t *)a1, (__int128 *)(a1 + 88));
                v51 = *(_DWORD *)(a1 + 80);
                *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 168);
                *(_DWORD *)(a1 + 168) = v51;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2111)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)a1 != a2)
            {
              v52 = a1 + 88;
              if ((__int128 *)(a1 + 88) != a2)
              {
                v53 = 0;
                v54 = a1;
                do
                {
                  v55 = v52;
                  v56 = *(_DWORD *)(v54 + 168);
                  if (v56 > *(_DWORD *)(v54 + 80))
                  {
                    v57 = *(_OWORD *)v55;
                    v111 = *(_QWORD *)(v55 + 16);
                    *(_OWORD *)v110 = v57;
                    *(_QWORD *)(v55 + 8) = 0;
                    *(_QWORD *)(v55 + 16) = 0;
                    *(_QWORD *)v55 = 0;
                    *(_OWORD *)v112 = *(_OWORD *)(v54 + 112);
                    v113 = *(_QWORD *)(v54 + 128);
                    *(_QWORD *)(v54 + 112) = 0;
                    *(_QWORD *)(v54 + 120) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v54 + 136);
                    v115 = *(_QWORD *)(v54 + 152);
                    *(_QWORD *)(v54 + 128) = 0;
                    *(_QWORD *)(v54 + 136) = 0;
                    *(_QWORD *)(v54 + 144) = 0;
                    *(_QWORD *)(v54 + 152) = 0;
                    v116 = *(_DWORD *)(v54 + 160);
                    v117 = *(_WORD *)(v54 + 164);
                    v58 = v53;
                    v118 = v56;
                    while (1)
                    {
                      sub_20B931D0C(a1 + v58 + 88, (__int128 *)(a1 + v58));
                      if (!v58)
                        break;
                      v59 = *(_DWORD *)(a1 + v58 - 8);
                      v58 -= 88;
                      if (v118 <= v59)
                      {
                        v60 = a1 + v58 + 88;
                        goto LABEL_87;
                      }
                    }
                    v60 = a1;
LABEL_87:
                    sub_20B931D0C(v60, (__int128 *)v110);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v112[0])
                    {
                      v112[1] = v112[0];
                      operator delete(v112[0]);
                    }
                    if (SHIBYTE(v111) < 0)
                      operator delete(v110[0]);
                  }
                  v52 = v55 + 88;
                  v53 += 88;
                  v54 = v55;
                }
                while ((__int128 *)(v55 + 88) != a2);
              }
            }
          }
          else if ((__int128 *)a1 != a2)
          {
            v94 = a1 + 88;
            if ((__int128 *)(a1 + 88) != a2)
            {
              do
              {
                v95 = v94;
                v96 = *(_DWORD *)(a1 + 168);
                if (v96 > *(_DWORD *)(a1 + 80))
                {
                  v97 = *(_OWORD *)v95;
                  v111 = *(_QWORD *)(v95 + 16);
                  *(_OWORD *)v110 = v97;
                  *(_QWORD *)(v95 + 8) = 0;
                  *(_QWORD *)(v95 + 16) = 0;
                  *(_QWORD *)v95 = 0;
                  *(_OWORD *)v112 = *(_OWORD *)(a1 + 112);
                  v113 = *(_QWORD *)(a1 + 128);
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_OWORD *)__p = *(_OWORD *)(a1 + 136);
                  v115 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v116 = *(_DWORD *)(a1 + 160);
                  v117 = *(_WORD *)(a1 + 164);
                  v118 = v96;
                  do
                  {
                    sub_20B931D0C(a1 + 88, (__int128 *)a1);
                    v98 = a1 - 88;
                    v99 = *(_DWORD *)(a1 - 8);
                    a1 -= 88;
                  }
                  while (v118 > v99);
                  sub_20B931D0C(v98 + 88, (__int128 *)v110);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if (v112[0])
                  {
                    v112[1] = v112[0];
                    operator delete(v112[0]);
                  }
                  if (SHIBYTE(v111) < 0)
                    operator delete(v110[0]);
                }
                v94 = v95 + 88;
                a1 = v95;
              }
              while ((__int128 *)(v95 + 88) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v61 = (unint64_t)(v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = a1 + 88 * v64;
                if (2 * v63 + 2 < v10)
                {
                  v66 = *(_DWORD *)(a1 + 88 * v64 + 80);
                  v67 = *(_DWORD *)(v65 + 168);
                  v65 += 88 * (v66 > v67);
                  if (v66 > v67)
                    v64 = 2 * v63 + 2;
                }
                v68 = *(_DWORD *)(a1 + 88 * v63 + 80);
                if (*(_DWORD *)(v65 + 80) <= v68)
                {
                  v69 = a1 + 88 * v63;
                  v70 = *(_OWORD *)v69;
                  v111 = *(_QWORD *)(v69 + 16);
                  *(_OWORD *)v110 = v70;
                  *(_QWORD *)(v69 + 8) = 0;
                  *(_QWORD *)(v69 + 16) = 0;
                  *(_QWORD *)v69 = 0;
                  *(_OWORD *)v112 = *(_OWORD *)(v69 + 24);
                  v113 = *(_QWORD *)(v69 + 40);
                  *(_QWORD *)(v69 + 24) = 0;
                  *(_QWORD *)(v69 + 32) = 0;
                  *(_QWORD *)(v69 + 40) = 0;
                  *(_OWORD *)__p = *(_OWORD *)(v69 + 48);
                  v115 = *(_QWORD *)(v69 + 64);
                  *(_QWORD *)(v69 + 48) = 0;
                  *(_QWORD *)(v69 + 56) = 0;
                  *(_QWORD *)(v69 + 64) = 0;
                  v71 = *(_DWORD *)(v69 + 72);
                  v117 = *(_WORD *)(v69 + 76);
                  v116 = v71;
                  v118 = v68;
                  do
                  {
                    v72 = v65;
                    sub_20B931D0C(v69, (__int128 *)v65);
                    if (v61 < v64)
                      break;
                    v73 = (2 * v64) | 1;
                    v65 = a1 + 88 * v73;
                    if (2 * v64 + 2 < v10)
                    {
                      v74 = *(_DWORD *)(a1 + 88 * v73 + 80);
                      v75 = *(_DWORD *)(v65 + 168);
                      v65 += 88 * (v74 > v75);
                      if (v74 > v75)
                        v73 = 2 * v64 + 2;
                    }
                    v69 = v72;
                    v64 = v73;
                  }
                  while (*(_DWORD *)(v65 + 80) <= v68);
                  sub_20B931D0C(v72, (__int128 *)v110);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if (v112[0])
                  {
                    v112[1] = v112[0];
                    operator delete(v112[0]);
                  }
                  if (SHIBYTE(v111) < 0)
                    operator delete(v110[0]);
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v76 = v9 / 0x58uLL;
            do
            {
              v77 = 0;
              v78 = *(_OWORD *)a1;
              v102 = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v101 = v78;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              *(_OWORD *)v103 = *(_OWORD *)(a1 + 24);
              v104 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_OWORD *)v105 = *(_OWORD *)(a1 + 48);
              v106 = *(_QWORD *)(a1 + 64);
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)(a1 + 56) = 0;
              *(_QWORD *)(a1 + 64) = 0;
              v79 = *(_DWORD *)(a1 + 72);
              v108 = *(_WORD *)(a1 + 76);
              v107 = v79;
              v109 = *(_DWORD *)(a1 + 80);
              v80 = a1;
              do
              {
                v81 = v77 + 1;
                v82 = v80 + 88 * (v77 + 1);
                v83 = (2 * v77) | 1;
                v84 = 2 * v77 + 2;
                if (v84 < v76)
                {
                  v85 = *(_DWORD *)(v80 + 88 * v81 + 80);
                  v86 = *(_DWORD *)(v82 + 168);
                  v82 += 88 * (v85 > v86);
                  if (v85 > v86)
                    v83 = v84;
                }
                sub_20B931D0C(v80, (__int128 *)v82);
                v80 = v82;
                v77 = v83;
              }
              while (v83 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              a2 = (__int128 *)((char *)a2 - 88);
              if ((__int128 *)v82 == a2)
              {
                sub_20B931D0C(v82, (__int128 *)v101);
              }
              else
              {
                sub_20B931D0C(v82, a2);
                sub_20B931D0C((uint64_t)a2, (__int128 *)v101);
                v87 = v82 - a1 + 88;
                if (v87 >= 89)
                {
                  v88 = (v87 / 0x58uLL - 2) >> 1;
                  v89 = *(_DWORD *)(v82 + 80);
                  if (*(_DWORD *)(a1 + 88 * v88 + 80) > v89)
                  {
                    v90 = *(_OWORD *)v82;
                    v111 = *(_QWORD *)(v82 + 16);
                    *(_OWORD *)v110 = v90;
                    *(_QWORD *)(v82 + 8) = 0;
                    *(_QWORD *)(v82 + 16) = 0;
                    *(_QWORD *)v82 = 0;
                    *(_OWORD *)v112 = *(_OWORD *)(v82 + 24);
                    v113 = *(_QWORD *)(v82 + 40);
                    *(_QWORD *)(v82 + 24) = 0;
                    *(_QWORD *)(v82 + 32) = 0;
                    *(_QWORD *)(v82 + 40) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v82 + 48);
                    v115 = *(_QWORD *)(v82 + 64);
                    *(_QWORD *)(v82 + 48) = 0;
                    *(_QWORD *)(v82 + 56) = 0;
                    *(_QWORD *)(v82 + 64) = 0;
                    v91 = *(_DWORD *)(v82 + 72);
                    v117 = *(_WORD *)(v82 + 76);
                    v116 = v91;
                    v118 = v89;
                    do
                    {
                      v92 = v82;
                      v82 = a1 + 88 * v88;
                      sub_20B931D0C(v92, (__int128 *)v82);
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                    }
                    while (*(_DWORD *)(a1 + 88 * v88 + 80) > v89);
                    sub_20B931D0C(v82, (__int128 *)v110);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v112[0])
                    {
                      v112[1] = v112[0];
                      operator delete(v112[0]);
                    }
                    if (SHIBYTE(v111) < 0)
                      operator delete(v110[0]);
                  }
                }
              }
              if (v105[0])
              {
                v105[1] = v105[0];
                operator delete(v105[0]);
              }
              if (v103[0])
              {
                v103[1] = v103[0];
                operator delete(v103[0]);
              }
              if (SHIBYTE(v102) < 0)
                operator delete(v101[0]);
            }
            while (v76-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(a1 + 88 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x2C01)
        {
          sub_20B9316FC((uint64_t)v12, a1, (uint64_t)v7);
        }
        else
        {
          sub_20B9316FC(a1, (uint64_t)v12, (uint64_t)v7);
          v13 = 88 * v11;
          sub_20B9316FC(a1 + 88, a1 + v13 - 88, (uint64_t)(a2 - 11));
          sub_20B9316FC(a1 + 176, a1 + 88 + v13, (uint64_t)a2 - 264);
          sub_20B9316FC(a1 + v13 - 88, (uint64_t)v12, a1 + 88 + v13);
          sub_20B931AE8((uint64_t *)a1, v12);
          v14 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + v13 + 80);
          *(_DWORD *)(a1 + v13 + 80) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(a1 + 80);
          if (*(_DWORD *)(a1 - 8) > v15)
            goto LABEL_11;
          v33 = *(_OWORD *)a1;
          v111 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v110 = v33;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 24);
          v113 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
          v115 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v34 = *(_DWORD *)(a1 + 72);
          v117 = *(_WORD *)(a1 + 76);
          v116 = v34;
          v118 = v15;
          if (v15 <= *((_DWORD *)a2 - 2))
          {
            v37 = a1 + 88;
            do
            {
              v8 = (char *)v37;
              if (v37 >= (unint64_t)a2)
                break;
              v38 = *(_DWORD *)(v37 + 80);
              v37 += 88;
            }
            while (v15 <= v38);
          }
          else
          {
            v35 = a1;
            do
            {
              v8 = (char *)(v35 + 88);
              v36 = *(_DWORD *)(v35 + 168);
              v35 += 88;
            }
            while (v15 <= v36);
          }
          v39 = a2;
          if (v8 < (char *)a2)
          {
            v40 = a2;
            do
            {
              v39 = (__int128 *)((char *)v40 - 88);
              v41 = *((_DWORD *)v40 - 2);
              v40 = (__int128 *)((char *)v40 - 88);
            }
            while (v15 > v41);
          }
          while (v8 < (char *)v39)
          {
            sub_20B931AE8((uint64_t *)v8, v39);
            v42 = *((_DWORD *)v8 + 20);
            *((_DWORD *)v8 + 20) = *((_DWORD *)v39 + 20);
            *((_DWORD *)v39 + 20) = v42;
            do
            {
              v43 = *((_DWORD *)v8 + 42);
              v8 += 88;
            }
            while (v118 <= v43);
            do
            {
              v44 = *((_DWORD *)v39 - 2);
              v39 = (__int128 *)((char *)v39 - 88);
            }
            while (v118 > v44);
          }
          if (v8 - 88 != (char *)a1)
            sub_20B931D0C(a1, (__int128 *)(v8 - 88));
          sub_20B931D0C((uint64_t)(v8 - 88), (__int128 *)v110);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v112[0])
          {
            v112[1] = v112[0];
            operator delete(v112[0]);
          }
          if (SHIBYTE(v111) < 0)
            operator delete(v110[0]);
          a4 = 0;
          continue;
        }
        v15 = *(_DWORD *)(a1 + 80);
LABEL_11:
        v16 = 0;
        v17 = *(_OWORD *)a1;
        v111 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)v110 = v17;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_OWORD *)v112 = *(_OWORD *)(a1 + 24);
        v113 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
        v115 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        v18 = *(_DWORD *)(a1 + 72);
        v117 = *(_WORD *)(a1 + 76);
        v116 = v18;
        v118 = v15;
        do
        {
          v19 = *(_DWORD *)(a1 + v16 + 168);
          v16 += 88;
        }
        while (v19 > v15);
        v20 = a1 + v16;
        v21 = a2;
        if (v16 == 88)
        {
          v24 = a2;
          while (v20 < (unint64_t)v24)
          {
            v22 = (__int128 *)((char *)v24 - 88);
            v25 = *((_DWORD *)v24 - 2);
            v24 = (__int128 *)((char *)v24 - 88);
            if (v25 > v15)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = (__int128 *)((char *)v21 - 88);
            v23 = *((_DWORD *)v21 - 2);
            v21 = (__int128 *)((char *)v21 - 88);
          }
          while (v23 <= v15);
        }
LABEL_21:
        if (v20 >= (unint64_t)v22)
        {
          v31 = (__int128 *)(v20 - 88);
        }
        else
        {
          v26 = v20;
          v27 = v22;
          do
          {
            sub_20B931AE8((uint64_t *)v26, v27);
            v28 = *(_DWORD *)(v26 + 80);
            *(_DWORD *)(v26 + 80) = *((_DWORD *)v27 + 20);
            *((_DWORD *)v27 + 20) = v28;
            do
            {
              v29 = *(_DWORD *)(v26 + 168);
              v26 += 88;
            }
            while (v29 > v118);
            do
            {
              v30 = *((_DWORD *)v27 - 2);
              v27 = (__int128 *)((char *)v27 - 88);
            }
            while (v30 <= v118);
          }
          while (v26 < (unint64_t)v27);
          v31 = (__int128 *)(v26 - 88);
        }
        if (v31 != (__int128 *)a1)
          sub_20B931D0C(a1, v31);
        sub_20B931D0C((uint64_t)v31, (__int128 *)v110);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v112[0])
        {
          v112[1] = v112[0];
          operator delete(v112[0]);
        }
        if (SHIBYTE(v111) < 0)
          operator delete(v110[0]);
        if (v20 < (unint64_t)v22)
        {
LABEL_40:
          sub_20B930AC4(a1, v31, a3, a4 & 1);
          a4 = 0;
          v8 = (char *)v31 + 88;
          continue;
        }
        v32 = sub_20B9317F8(a1, (uint64_t)v31);
        v8 = (char *)v31 + 88;
        if (!sub_20B9317F8((uint64_t)v31 + 88, (uint64_t)a2))
        {
          if (v32)
            continue;
          goto LABEL_40;
        }
        a2 = v31;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2;
  v8 = a2 - 1;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = v7 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = *a1;
        v53 = (*(double (**)(_QWORD))(*(_QWORD *)*(a2 - 1) + 176))(*(a2 - 1));
        if (v53 < (*(double (**)(uint64_t))(*(_QWORD *)v52 + 176))(v52))
        {
          v54 = *a1;
          *a1 = *(a2 - 1);
          *(a2 - 1) = v54;
        }
        return;
      case 3:
        sub_20B93927C(a1, a1 + 1, v8);
        return;
      case 4:
        sub_20B9395C0(a1, a1 + 1, a1 + 2, v8);
        return;
      case 5:
        sub_20B9396C4(a1, a1 + 1, a1 + 2, a1 + 3, v8);
        return;
      default:
        if (v10 <= 191)
        {
          v55 = a1 + 1;
          v57 = a1 == v7 || v55 == v7;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v61 = *v59;
                v60 = v59[1];
                v59 = v55;
                v62 = (*(double (**)(uint64_t))(*(_QWORD *)v60 + 176))(v60);
                if (v62 < (*(double (**)(uint64_t))(*(_QWORD *)v61 + 176))(v61))
                {
                  v63 = *v59;
                  v64 = v58;
                  while (1)
                  {
                    *(uint64_t *)((char *)a1 + v64 + 8) = *(uint64_t *)((char *)a1 + v64);
                    if (!v64)
                      break;
                    v65 = *(uint64_t *)((char *)a1 + v64 - 8);
                    v66 = (*(double (**)(uint64_t))(*(_QWORD *)v63 + 176))(v63);
                    v64 -= 8;
                    if (v66 >= (*(double (**)(uint64_t))(*(_QWORD *)v65 + 176))(v65))
                    {
                      v67 = (uint64_t *)((char *)a1 + v64 + 8);
                      goto LABEL_74;
                    }
                  }
                  v67 = a1;
LABEL_74:
                  *v67 = v63;
                }
                v55 = v59 + 1;
                v58 += 8;
              }
              while (v59 + 1 != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v106 = *a1;
              v105 = a1[1];
              a1 = v55;
              v107 = (*(double (**)(uint64_t))(*(_QWORD *)v105 + 176))(v105);
              if (v107 < (*(double (**)(uint64_t))(*(_QWORD *)v106 + 176))(v106))
              {
                v108 = *a1;
                v109 = a1;
                do
                {
                  v110 = v109;
                  v111 = *--v109;
                  *v110 = v111;
                  v112 = *(v110 - 2);
                  v113 = (*(double (**)(uint64_t))(*(_QWORD *)v108 + 176))(v108);
                }
                while (v113 < (*(double (**)(uint64_t))(*(_QWORD *)v112 + 176))(v112));
                *v109 = v108;
              }
              v55 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v7)
          {
            v68 = (unint64_t)(v11 - 2) >> 1;
            v114 = v68;
            do
            {
              v69 = v68;
              if (v114 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = &a1[v70];
                if (2 * v68 + 2 < v11)
                {
                  v72 = v71[1];
                  v73 = (*(double (**)(uint64_t))(*(_QWORD *)*v71 + 176))(*v71);
                  if (v73 < (*(double (**)(uint64_t))(*(_QWORD *)v72 + 176))(v72))
                  {
                    ++v71;
                    v70 = 2 * v69 + 2;
                  }
                }
                v74 = &a1[v69];
                v75 = *v74;
                v76 = (*(double (**)(uint64_t))(*(_QWORD *)*v71 + 176))(*v71);
                if (v76 >= (*(double (**)(uint64_t))(*(_QWORD *)v75 + 176))(v75))
                {
                  v77 = *v74;
                  do
                  {
                    v78 = v71;
                    *v74 = *v71;
                    if (v114 < v70)
                      break;
                    v79 = 2 * v70;
                    v70 = (2 * v70) | 1;
                    v71 = &a1[v70];
                    v80 = v79 + 2;
                    if (v79 + 2 < v11)
                    {
                      v81 = v71[1];
                      v82 = (*(double (**)(uint64_t))(*(_QWORD *)*v71 + 176))(*v71);
                      if (v82 < (*(double (**)(uint64_t))(*(_QWORD *)v81 + 176))(v81))
                      {
                        ++v71;
                        v70 = v80;
                      }
                    }
                    v83 = (*(double (**)(uint64_t))(*(_QWORD *)*v71 + 176))(*v71);
                    v74 = v78;
                  }
                  while (v83 >= (*(double (**)(uint64_t))(*(_QWORD *)v77 + 176))(v77));
                  *v78 = v77;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v84 = (unint64_t)v10 >> 3;
            do
            {
              v85 = 0;
              v115 = *a1;
              v86 = v84 - 2;
              if (v84 < 2)
                v86 = v84 - 1;
              v87 = v86 >> 1;
              v88 = a1;
              do
              {
                v89 = v88;
                v88 += v85 + 1;
                v90 = 2 * v85;
                v85 = (2 * v85) | 1;
                v91 = v90 + 2;
                if (v90 + 2 < v84)
                {
                  v92 = v88[1];
                  v93 = (*(double (**)(uint64_t))(*(_QWORD *)*v88 + 176))(*v88);
                  if (v93 < (*(double (**)(uint64_t))(*(_QWORD *)v92 + 176))(v92))
                  {
                    ++v88;
                    v85 = v91;
                  }
                }
                *v89 = *v88;
              }
              while (v85 <= v87);
              v94 = a2 - 1;
              if (v88 == a2 - 1)
              {
                *v88 = v115;
                v96 = v84 - 1;
              }
              else
              {
                *v88 = *v94;
                *v94 = v115;
                v95 = (char *)v88 - (char *)a1 + 8;
                v96 = v84 - 1;
                if (v95 >= 9)
                {
                  v97 = (((unint64_t)v95 >> 3) - 2) >> 1;
                  v98 = &a1[v97];
                  v99 = *v88;
                  v100 = (*(double (**)(uint64_t))(*(_QWORD *)*v98 + 176))(*v98);
                  if (v100 < (*(double (**)(uint64_t))(*(_QWORD *)v99 + 176))(v99))
                  {
                    v101 = *v88;
                    do
                    {
                      v102 = v98;
                      *v88 = *v98;
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = &a1[v97];
                      v103 = (*(double (**)(uint64_t))(*(_QWORD *)*v98 + 176))(*v98);
                      v88 = v102;
                    }
                    while (v103 < (*(double (**)(uint64_t))(*(_QWORD *)v101 + 176))(v101));
                    *v102 = v101;
                  }
                }
              }
              --a2;
              v104 = v84 <= 2;
              v84 = v96;
            }
            while (!v104);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_20B93927C(v13, a1, v8);
        }
        else
        {
          sub_20B93927C(a1, v13, v8);
          sub_20B93927C(a1 + 1, v13 - 1, a2 - 2);
          sub_20B93927C(a1 + 2, &a1[v12 + 1], a2 - 3);
          sub_20B93927C(v13 - 1, v13, &a1[v12 + 1]);
          v14 = *a1;
          *a1 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *a1;
          v16 = (*(double (**)(_QWORD))(*(_QWORD *)*(a1 - 1) + 176))(*(a1 - 1));
          if (v16 >= (*(double (**)(uint64_t))(*(_QWORD *)v15 + 176))(v15))
          {
            v35 = *a1;
            v36 = *v8;
            v37 = (*(double (**)(uint64_t))(*(_QWORD *)*a1 + 176))(*a1);
            if (v37 >= (*(double (**)(uint64_t))(*(_QWORD *)v36 + 176))(v36))
            {
              v40 = a1 + 1;
              do
              {
                v9 = v40;
                if (v40 >= v7)
                  break;
                ++v40;
                v41 = *v9;
                v42 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 176))(v35);
              }
              while (v42 >= (*(double (**)(uint64_t))(*(_QWORD *)v41 + 176))(v41));
            }
            else
            {
              v9 = a1;
              do
              {
                v38 = v9[1];
                ++v9;
                v39 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 176))(v35);
              }
              while (v39 >= (*(double (**)(uint64_t))(*(_QWORD *)v38 + 176))(v38));
            }
            v43 = v7;
            if (v9 < v7)
            {
              v43 = v7;
              do
              {
                v44 = *--v43;
                v45 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 176))(v35);
              }
              while (v45 < (*(double (**)(uint64_t))(*(_QWORD *)v44 + 176))(v44));
            }
            while (v9 < v43)
            {
              v46 = *v9;
              *v9 = *v43;
              *v43 = v46;
              do
              {
                v47 = v9[1];
                ++v9;
                v48 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 176))(v35);
              }
              while (v48 >= (*(double (**)(uint64_t))(*(_QWORD *)v47 + 176))(v47));
              do
              {
                v49 = *--v43;
                v50 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 176))(v35);
              }
              while (v50 < (*(double (**)(uint64_t))(*(_QWORD *)v49 + 176))(v49));
            }
            v51 = v9 - 1;
            if (v9 - 1 != a1)
              *a1 = *v51;
            a4 = 0;
            *v51 = v35;
            continue;
          }
        }
        v17 = 0;
        v18 = *a1;
        do
        {
          v19 = (*(double (**)(uint64_t))(*(_QWORD *)a1[v17 + 1] + 176))(a1[v17 + 1]);
          ++v17;
        }
        while (v19 < (*(double (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18));
        v20 = &a1[v17];
        if (v17 == 1)
        {
          v7 = a2;
          do
          {
            if (v20 >= v7)
              break;
            v23 = *--v7;
            v24 = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 176))(v23);
          }
          while (v24 >= (*(double (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18));
        }
        else
        {
          do
          {
            v21 = *--v7;
            v22 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 176))(v21);
          }
          while (v22 >= (*(double (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18));
        }
        if (v20 >= v7)
        {
          v32 = v20 - 1;
        }
        else
        {
          v25 = &a1[v17];
          v26 = v7;
          do
          {
            v27 = *v25;
            *v25 = *v26;
            *v26 = v27;
            do
            {
              v28 = v25[1];
              ++v25;
              v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 176))(v28);
            }
            while (v29 < (*(double (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18));
            do
            {
              v30 = *--v26;
              v31 = (*(double (**)(uint64_t))(*(_QWORD *)v30 + 176))(v30);
            }
            while (v31 >= (*(double (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18));
          }
          while (v25 < v26);
          v32 = v25 - 1;
        }
        if (v32 != a1)
          *a1 = *v32;
        *v32 = v18;
        v33 = v20 >= v7;
        v7 = a2;
        if (!v33)
        {
LABEL_32:
          sub_20B9388B4(a1, v32, a3, a4 & 1);
          a4 = 0;
          v9 = v32 + 1;
          continue;
        }
        v34 = sub_20B9393D4(a1, v32);
        v9 = v32 + 1;
        if (!sub_20B9393D4(v32 + 1, a2))
        {
          if (v34)
            continue;
          goto LABEL_32;
        }
        a2 = v32;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v98 = a2 - 24;
  v95 = (__int128 *)(a2 - 72);
  v96 = (__int128 *)(a2 - 48);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v98, (__int128 *)a1))
        {
          v43 = *(_OWORD *)a1;
          v103 = *(_QWORD *)(a1 + 16);
          v102 = v43;
          v44 = *(_OWORD *)v98;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v98 + 16);
          *(_OWORD *)a1 = v44;
          v45 = v102;
          *(_QWORD *)(v98 + 16) = v103;
          *(_OWORD *)v98 = v45;
        }
        return;
      case 3:
        sub_20B9AD114((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)v98, a3);
        return;
      case 4:
        sub_20B9AD438(a1, a1 + 24, a1 + 48, v98, a3);
        return;
      case 5:
        sub_20B9AD520((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, v98, a3);
        return;
      default:
        if (v11 <= 575)
        {
          v46 = (__int128 *)(a1 + 24);
          v47 = a1 == a2 || v46 == (__int128 *)a2;
          v48 = v47;
          if ((a5 & 1) != 0)
          {
            if ((v48 & 1) == 0)
            {
              v49 = 0;
              v50 = a1;
              do
              {
                v51 = (__int128 *)v50;
                v50 = (uint64_t)v46;
                if ((*a3)(v46, v51))
                {
                  v52 = *(_OWORD *)v50;
                  v103 = *(_QWORD *)(v50 + 16);
                  v102 = v52;
                  v53 = v49;
                  while (1)
                  {
                    v54 = a1 + v53;
                    *(_OWORD *)(v54 + 24) = *(_OWORD *)(a1 + v53);
                    *(_QWORD *)(v54 + 40) = *(_QWORD *)(a1 + v53 + 16);
                    if (!v53)
                      break;
                    v53 -= 24;
                    if (((*a3)(&v102, (__int128 *)(v53 + a1)) & 1) == 0)
                    {
                      v55 = a1 + v53 + 24;
                      goto LABEL_73;
                    }
                  }
                  v55 = a1;
LABEL_73:
                  v56 = v102;
                  *(_QWORD *)(v55 + 16) = v103;
                  *(_OWORD *)v55 = v56;
                }
                v46 = (__int128 *)(v50 + 24);
                v49 += 24;
              }
              while (v50 + 24 != a2);
            }
          }
          else if ((v48 & 1) == 0)
          {
            v89 = a1 - 24;
            do
            {
              v90 = (__int128 *)a1;
              a1 = (uint64_t)v46;
              if ((*a3)(v46, v90))
              {
                v91 = *(_OWORD *)a1;
                v103 = *(_QWORD *)(a1 + 16);
                v102 = v91;
                v92 = v89;
                do
                {
                  *(_OWORD *)(v92 + 48) = *(_OWORD *)(v92 + 24);
                  *(_QWORD *)(v92 + 64) = *(_QWORD *)(v92 + 40);
                  v93 = (*a3)(&v102, (__int128 *)v92);
                  v92 -= 24;
                }
                while ((v93 & 1) != 0);
                v94 = v102;
                *(_QWORD *)(v92 + 64) = v103;
                *(_OWORD *)(v92 + 48) = v94;
              }
              v46 = (__int128 *)(a1 + 24);
              v89 += 24;
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v57 = (unint64_t)(v12 - 2) >> 1;
            v97 = a2;
            v99 = v57;
            do
            {
              v58 = v57;
              if (v99 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = a1 + 24 * v59;
                if (2 * v57 + 2 < v12 && (*a3)((__int128 *)(a1 + 24 * v59), (__int128 *)(v60 + 24)))
                {
                  v60 += 24;
                  v59 = 2 * v58 + 2;
                }
                v61 = a1 + 24 * v58;
                if (((*a3)((__int128 *)v60, (__int128 *)v61) & 1) == 0)
                {
                  v62 = *(_OWORD *)v61;
                  v103 = *(_QWORD *)(v61 + 16);
                  v102 = v62;
                  do
                  {
                    v63 = v60;
                    v64 = *(_OWORD *)v60;
                    *(_QWORD *)(v61 + 16) = *(_QWORD *)(v60 + 16);
                    *(_OWORD *)v61 = v64;
                    if (v99 < v59)
                      break;
                    v65 = (2 * v59) | 1;
                    v60 = a1 + 24 * v65;
                    v66 = 2 * v59 + 2;
                    if (v66 < v12 && (*a3)((__int128 *)(a1 + 24 * v65), (__int128 *)(v60 + 24)))
                    {
                      v60 += 24;
                      v65 = v66;
                    }
                    v61 = v63;
                    v59 = v65;
                  }
                  while (!(*a3)((__int128 *)v60, &v102));
                  v67 = v102;
                  *(_QWORD *)(v63 + 16) = v103;
                  *(_OWORD *)v63 = v67;
                  a2 = v97;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v68 = v11 / 0x18uLL;
            do
            {
              v69 = 0;
              v70 = *(_OWORD *)a1;
              v101 = *(_QWORD *)(a1 + 16);
              v100 = v70;
              v71 = a1;
              do
              {
                v72 = v71 + 24 * v69 + 24;
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 < v68
                  && (*a3)((__int128 *)(v71 + 24 * v69 + 24), (__int128 *)(v71 + 24 * v69 + 48)))
                {
                  v72 += 24;
                  v73 = v74;
                }
                v75 = *(_OWORD *)v72;
                *(_QWORD *)(v71 + 16) = *(_QWORD *)(v72 + 16);
                *(_OWORD *)v71 = v75;
                v71 = v72;
                v69 = v73;
              }
              while (v73 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
              v76 = (__int128 *)(a2 - 24);
              if (v72 == a2 - 24)
              {
                v79 = a2 - 24;
                v87 = v100;
                *(_QWORD *)(v72 + 16) = v101;
                *(_OWORD *)v72 = v87;
              }
              else
              {
                v77 = *v76;
                *(_QWORD *)(v72 + 16) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)v72 = v77;
                v78 = v100;
                *(_QWORD *)(a2 - 8) = v101;
                v79 = a2 - 24;
                *v76 = v78;
                v80 = v72 - a1 + 24;
                if (v80 >= 25)
                {
                  v81 = (v80 / 0x18uLL - 2) >> 1;
                  v82 = a1 + 24 * v81;
                  if ((*a3)((__int128 *)v82, (__int128 *)v72))
                  {
                    v83 = *(_OWORD *)v72;
                    v103 = *(_QWORD *)(v72 + 16);
                    v102 = v83;
                    do
                    {
                      v84 = v82;
                      v85 = *(_OWORD *)v82;
                      *(_QWORD *)(v72 + 16) = *(_QWORD *)(v82 + 16);
                      *(_OWORD *)v72 = v85;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = a1 + 24 * v81;
                      v72 = v84;
                    }
                    while (((*a3)((__int128 *)v82, &v102) & 1) != 0);
                    v86 = v102;
                    *(_QWORD *)(v84 + 16) = v103;
                    *(_OWORD *)v84 = v86;
                  }
                }
              }
              v88 = v68-- <= 2;
              a2 = v79;
            }
            while (!v88);
          }
          return;
        }
        v13 = a2;
        v14 = (unint64_t)v12 >> 1;
        v15 = a1 + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_20B9AD114((__int128 *)v15, (__int128 *)a1, (__int128 *)v98, a3);
        }
        else
        {
          sub_20B9AD114((__int128 *)a1, (__int128 *)v15, (__int128 *)v98, a3);
          v16 = 3 * v14;
          sub_20B9AD114((__int128 *)(a1 + 24), (__int128 *)(a1 + 8 * v16 - 24), v96, a3);
          sub_20B9AD114((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v16), v95, a3);
          sub_20B9AD114((__int128 *)(a1 + 8 * v16 - 24), (__int128 *)v15, (__int128 *)(a1 + 24 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v103 = *(_QWORD *)(a1 + 16);
          v102 = v17;
          v18 = *(_QWORD *)(v15 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v15;
          *(_QWORD *)(a1 + 16) = v18;
          v19 = v102;
          *(_QWORD *)(v15 + 16) = v103;
          *(_OWORD *)v15 = v19;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
        {
          v33 = *(_OWORD *)a1;
          v101 = *(_QWORD *)(a1 + 16);
          v100 = v33;
          if (((*a3)(&v100, (__int128 *)v98) & 1) != 0)
          {
            v10 = a1;
            a2 = v13;
            do
              v10 += 24;
            while (((*a3)(&v100, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v34 = (__int128 *)(a1 + 24);
            a2 = v13;
            do
            {
              v10 = (unint64_t)v34;
              if ((unint64_t)v34 >= v13)
                break;
              v35 = (*a3)(&v100, v34);
              v34 = (__int128 *)(v10 + 24);
            }
            while (!v35);
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v36 -= 24;
            while (((*a3)(&v100, (__int128 *)v36) & 1) != 0);
          }
          while (v10 < v36)
          {
            v37 = *(_OWORD *)v10;
            v103 = *(_QWORD *)(v10 + 16);
            v102 = v37;
            v38 = *(_OWORD *)v36;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v36 + 16);
            *(_OWORD *)v10 = v38;
            v39 = v102;
            *(_QWORD *)(v36 + 16) = v103;
            *(_OWORD *)v36 = v39;
            do
              v10 += 24;
            while (!(*a3)(&v100, (__int128 *)v10));
            do
              v36 -= 24;
            while (((*a3)(&v100, (__int128 *)v36) & 1) != 0);
          }
          v40 = (__int128 *)(v10 - 24);
          if (v10 - 24 != a1)
          {
            v41 = *v40;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v41;
          }
          a5 = 0;
          v42 = v100;
          *(_QWORD *)(v10 - 8) = v101;
          *v40 = v42;
          continue;
        }
        v20 = 0;
        v21 = *(_OWORD *)a1;
        v101 = *(_QWORD *)(a1 + 16);
        v100 = v21;
        do
          v20 += 24;
        while (((*a3)((__int128 *)(v20 + a1), &v100) & 1) != 0);
        v22 = a1 + v20;
        v23 = (__int128 *)v13;
        v47 = v20 == 24;
        a2 = v13;
        if (v47)
        {
          v23 = (__int128 *)v13;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 = (__int128 *)((char *)v23 - 24);
          }
          while (((*a3)(v23, &v100) & 1) == 0);
        }
        else
        {
          do
            v23 = (__int128 *)((char *)v23 - 24);
          while (!(*a3)(v23, &v100));
        }
        if (v22 >= (unint64_t)v23)
        {
          v29 = v22 - 24;
        }
        else
        {
          v24 = v22;
          v25 = v23;
          do
          {
            v26 = *(_OWORD *)v24;
            v103 = *(_QWORD *)(v24 + 16);
            v102 = v26;
            v27 = *v25;
            *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v24 = v27;
            v28 = v102;
            *((_QWORD *)v25 + 2) = v103;
            *v25 = v28;
            do
              v24 += 24;
            while (((*a3)((__int128 *)v24, &v100) & 1) != 0);
            do
              v25 = (__int128 *)((char *)v25 - 24);
            while (!(*a3)(v25, &v100));
          }
          while (v24 < (unint64_t)v25);
          v29 = v24 - 24;
        }
        if (v29 != a1)
        {
          v30 = *(_OWORD *)v29;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v29 + 16);
          *(_OWORD *)a1 = v30;
        }
        v31 = v100;
        *(_QWORD *)(v29 + 16) = v101;
        *(_OWORD *)v29 = v31;
        if (v22 < (unint64_t)v23)
        {
LABEL_31:
          sub_20B9AC7E0(a1, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 24;
          continue;
        }
        v32 = sub_20B9AD24C(a1, v29, a3);
        v10 = v29 + 24;
        if (!sub_20B9AD24C(v29 + 24, v13, a3))
        {
          if (v32)
            continue;
          goto LABEL_31;
        }
        a2 = v29;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v181 = a2 - 4;
  v185 = (unint64_t)a2;
  v170 = (uint64_t)(a2 - 12);
  v171 = (uint64_t)(a2 - 8);
  v172 = a2 - 5;
  j = a1;
  while (2)
  {
    a1 = j;
    v8 = (uint64_t)a2 - j;
    v9 = (uint64_t)((uint64_t)a2 - j) >> 5;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v66 = *((double *)a2 - 1);
        v67 = *(double *)(a1 + 24);
        if (v66 > v67
          || v66 == v67 && (Length = CFStringGetLength(*v181), Length < CFStringGetLength(*(CFStringRef *)a1)))
        {
          sub_20B9C1B4C(a1, (uint64_t)v181);
        }
        return;
      case 3uLL:
        sub_20B9C1D28(a1, a1 + 32, (uint64_t)v181);
        return;
      case 4uLL:
        sub_20B9C2138(a1, a1 + 32, a1 + 64, (uint64_t)v181);
        return;
      case 5uLL:
        sub_20B9C1BE8(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v181);
        return;
      default:
        if (v8 <= 767)
        {
          v69 = (CFStringRef *)(a1 + 32);
          v71 = (CFStringRef *)a1 == a2 || v69 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v71)
            {
              v72 = 0;
              v73 = a1;
              do
              {
                v74 = v73;
                v73 = (uint64_t)v69;
                v75 = *(double *)(v74 + 56);
                v76 = *(double *)(v74 + 24);
                if (v75 > v76
                  || v75 == v76 && (v77 = CFStringGetLength(*v69), v77 < CFStringGetLength(*(CFStringRef *)v74)))
                {
                  v79 = *(const __CFString **)(v74 + 32);
                  v78 = *(const void **)(v74 + 40);
                  *(_QWORD *)(v74 + 32) = 0;
                  *(_QWORD *)(v74 + 40) = 0;
                  v80 = *(_QWORD *)(v74 + 48);
                  v81 = *(double *)(v74 + 56);
                  v82 = *(CFStringRef *)v74;
                  *(_QWORD *)v74 = 0;
                  sub_20B87E150((const void **)v73, v82);
                  v83 = *(const void **)(v74 + 8);
                  *(_QWORD *)(v74 + 8) = 0;
                  sub_20B87E150((const void **)(v73 + 8), v83);
                  v84 = (_QWORD *)(v74 + 16);
                  *(_OWORD *)(v73 + 16) = *(_OWORD *)(v74 + 16);
                  if (v74 == a1)
                  {
                    v74 = a1;
                  }
                  else
                  {
                    v182 = v78;
                    v85 = v72;
                    do
                    {
                      v86 = a1 + v85;
                      v87 = *(double *)(a1 + v85 - 8);
                      if (v81 <= v87)
                      {
                        if (v81 != v87)
                        {
                          v74 = a1 + v85;
                          v84 = (_QWORD *)(a1 + v85 + 16);
                          goto LABEL_125;
                        }
                        v88 = CFStringGetLength(v79);
                        if (v88 >= CFStringGetLength(*(CFStringRef *)(v86 - 32)))
                          goto LABEL_125;
                      }
                      v89 = *(const void **)(v86 - 32);
                      *(_QWORD *)(v86 - 32) = 0;
                      sub_20B87E150((const void **)(a1 + v85), v89);
                      v90 = *(const void **)(v86 - 24);
                      *(_QWORD *)(v86 - 24) = 0;
                      sub_20B87E150((const void **)(v86 + 8), v90);
                      v84 = (_QWORD *)(v74 - 16);
                      *(_OWORD *)(v86 + 16) = *(_OWORD *)(v86 - 16);
                      v74 -= 32;
                      v85 -= 32;
                    }
                    while (v85);
                    v84 = (_QWORD *)(a1 + 16);
                    v74 = a1;
LABEL_125:
                    v78 = v182;
                  }
                  sub_20B87E150((const void **)v74, v79);
                  sub_20B87E150((const void **)(v74 + 8), v78);
                  *v84 = v80;
                  *(double *)(v74 + 24) = v81;
                  a2 = (CFStringRef *)v185;
                }
                v69 = (CFStringRef *)(v73 + 32);
                v72 += 32;
              }
              while ((CFStringRef *)(v73 + 32) != a2);
            }
          }
          else if (!v71)
          {
            v156 = (_OWORD *)(a1 + 48);
            do
            {
              v157 = a1;
              a1 = (uint64_t)v69;
              v158 = *(double *)(v157 + 56);
              v159 = *(double *)(v157 + 24);
              if (v158 > v159
                || v158 == v159 && (v160 = CFStringGetLength(*v69), v160 < CFStringGetLength(*(CFStringRef *)v157)))
              {
                v161 = *(const __CFString **)a1;
                *(_QWORD *)a1 = 0;
                v162 = *(const void **)(v157 + 40);
                v163 = *(_QWORD *)(v157 + 48);
                *(_QWORD *)(v157 + 40) = 0;
                v164 = v156;
                v165 = *(double *)(v157 + 56);
                while (1)
                {
                  v166 = (const void *)*((_QWORD *)v164 - 6);
                  *((_QWORD *)v164 - 6) = 0;
                  sub_20B87E150((const void **)v164 - 2, v166);
                  v167 = (const void *)*((_QWORD *)v164 - 5);
                  *((_QWORD *)v164 - 5) = 0;
                  sub_20B87E150((const void **)v164 - 1, v167);
                  *v164 = *(v164 - 2);
                  v168 = *((double *)v164 - 7);
                  if (v165 <= v168)
                  {
                    if (v165 != v168)
                      break;
                    v169 = CFStringGetLength(v161);
                    if (v169 >= CFStringGetLength(*((CFStringRef *)v164 - 10)))
                      break;
                  }
                  v164 -= 2;
                }
                sub_20B87E150((const void **)v164 - 6, v161);
                sub_20B87E150((const void **)v164 - 5, v162);
                *((_QWORD *)v164 - 4) = v163;
                *((double *)v164 - 3) = v165;
              }
              v69 = (CFStringRef *)(a1 + 32);
              v156 += 2;
            }
            while ((CFStringRef *)(a1 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((CFStringRef *)a1 == a2)
            return;
          v91 = (v9 - 2) >> 1;
          v92 = v91;
          while (2)
          {
            v93 = v92;
            if (v91 >= v92)
            {
              v94 = (2 * v92) | 1;
              v95 = a1 + 32 * v94;
              if (2 * v92 + 2 < (uint64_t)v9)
              {
                v96 = *(double *)(v95 + 24);
                v97 = *(double *)(v95 + 56);
                if (v96 > v97
                  || v96 == v97
                  && (v98 = CFStringGetLength(*(CFStringRef *)v95), v98 < CFStringGetLength(*(CFStringRef *)(v95 + 32))))
                {
                  v95 += 32;
                  v94 = 2 * v93 + 2;
                }
              }
              v99 = *(double *)(v95 + 24);
              v100 = a1 + 32 * v93;
              v102 = *(double *)(v100 + 24);
              v101 = (double *)(v100 + 24);
              v103 = v102;
              v104 = v99 == v102;
              if (v99 <= v102)
              {
                v105 = a1 + 32 * v93;
                if (!v104)
                  goto LABEL_142;
                v106 = CFStringGetLength(*(CFStringRef *)v95);
                if (v106 >= CFStringGetLength(*(CFStringRef *)v105))
                {
                  v103 = *v101;
LABEL_142:
                  v107 = a1 + 32 * v93;
                  v108 = *(const void **)(v107 + 8);
                  v107 += 8;
                  v176 = v108;
                  theStringb = *(const __CFString **)v105;
                  *(_QWORD *)v105 = 0;
                  *(_QWORD *)(v105 + 8) = 0;
                  v174 = *(_QWORD *)(v107 + 8);
                  v109 = *(CFStringRef *)v95;
                  *(_QWORD *)v95 = 0;
                  sub_20B87E150((const void **)(a1 + 32 * v93), v109);
                  v110 = *(const void **)(v95 + 8);
                  *(_QWORD *)(v95 + 8) = 0;
                  sub_20B87E150((const void **)v107, v110);
                  *(_OWORD *)(v107 + 8) = *(_OWORD *)(v95 + 16);
                  v91 = (v9 - 2) >> 1;
                  for (i = v95; ; v95 = i)
                  {
                    if (v91 < v94)
                      goto LABEL_155;
                    v112 = 2 * v94;
                    v94 = (2 * v94) | 1;
                    i = a1 + 32 * v94;
                    v113 = v112 + 2;
                    if (v112 + 2 < (uint64_t)v9)
                    {
                      v114 = *(double *)(i + 24);
                      v115 = *(double *)(i + 56);
                      if (v114 > v115
                        || v114 == v115
                        && (v116 = CFStringGetLength(*(CFStringRef *)i),
                            v117 = v116 < CFStringGetLength(*(CFStringRef *)(i + 32)),
                            v91 = (v9 - 2) >> 1,
                            v117))
                      {
                        i += 32;
                        v94 = v113;
                      }
                    }
                    v118 = *(double *)(i + 24);
                    if (v118 > v103)
                      break;
                    if (v118 == v103)
                    {
                      v119 = CFStringGetLength(*(CFStringRef *)i);
                      v117 = v119 < CFStringGetLength(theStringb);
                      v91 = (v9 - 2) >> 1;
                      if (v117)
                        break;
                    }
                    v120 = *(CFStringRef *)i;
                    *(_QWORD *)i = 0;
                    sub_20B87E150((const void **)v95, v120);
                    v121 = *(const void **)(i + 8);
                    *(_QWORD *)(i + 8) = 0;
                    sub_20B87E150((const void **)(v95 + 8), v121);
                    *(_OWORD *)(v95 + 16) = *(_OWORD *)(i + 16);
                  }
                  i = v95;
LABEL_155:
                  sub_20B87E150((const void **)i, theStringb);
                  sub_20B87E150((const void **)(i + 8), v176);
                  *(_QWORD *)(i + 16) = v174;
                  *(double *)(i + 24) = v103;
                }
              }
            }
            v92 = v93 - 1;
            if (v93)
              continue;
            break;
          }
          v122 = (unint64_t)v8 >> 5;
          v123 = (const void **)v185;
          while (2)
          {
            v124 = 0;
            v125 = v123;
            v183 = *(CFStringRef *)a1;
            v186 = *(const void **)(a1 + 8);
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            v189 = *(_OWORD *)(a1 + 16);
            v126 = a1;
            do
            {
              v127 = v126;
              v126 += 32 * (v124 + 1);
              v128 = 2 * v124;
              v124 = (2 * v124) | 1;
              v129 = v128 + 2;
              if (v128 + 2 < v122)
              {
                v130 = *(double *)(v126 + 24);
                v131 = *(double *)(v126 + 56);
                if (v130 > v131
                  || v130 == v131
                  && (v132 = CFStringGetLength(*(CFStringRef *)v126),
                      v132 < CFStringGetLength(*(CFStringRef *)(v126 + 32))))
                {
                  v126 += 32;
                  v124 = v129;
                }
              }
              v133 = *(CFStringRef *)v126;
              *(_QWORD *)v126 = 0;
              sub_20B87E150((const void **)v127, v133);
              v134 = *(const void **)(v126 + 8);
              *(_QWORD *)(v126 + 8) = 0;
              sub_20B87E150((const void **)(v127 + 8), v134);
              *(_OWORD *)(v127 + 16) = *(_OWORD *)(v126 + 16);
            }
            while (v124 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
            v135 = (_OWORD *)(v126 + 16);
            v123 -= 4;
            if ((const void **)v126 == v125 - 4)
            {
              sub_20B87E150((const void **)v126, v183);
              sub_20B87E150((const void **)(v126 + 8), v186);
              *v135 = v189;
            }
            else
            {
              v136 = *(v125 - 4);
              *(v125 - 4) = 0;
              sub_20B87E150((const void **)v126, v136);
              v138 = *(v125 - 3);
              v137 = v125 - 3;
              *v137 = 0;
              sub_20B87E150((const void **)(v126 + 8), v138);
              *v135 = *(_OWORD *)(v137 + 1);
              sub_20B87E150(v123, v183);
              sub_20B87E150(v137, v186);
              *(_OWORD *)(v137 + 1) = v189;
              v139 = v126 - a1 + 32;
              if (v139 >= 33)
              {
                v140 = ((unint64_t)v139 >> 5) - 2;
                v141 = v140 >> 1;
                v142 = a1 + 32 * (v140 >> 1);
                v143 = *(double *)(v142 + 24);
                v144 = *(double *)(v126 + 24);
                if (v143 > v144)
                  goto LABEL_171;
                if (v143 == v144)
                {
                  v145 = CFStringGetLength(*(CFStringRef *)v142);
                  if (v145 < CFStringGetLength(*(CFStringRef *)v126))
                  {
                    v144 = *(double *)(v126 + 24);
LABEL_171:
                    v146 = *(const __CFString **)v126;
                    v184 = *(const void **)(v126 + 8);
                    v187 = v123;
                    *(_QWORD *)v126 = 0;
                    *(_QWORD *)(v126 + 8) = 0;
                    v177 = *(_QWORD *)(v126 + 16);
                    v147 = *(CFStringRef *)v142;
                    *(_QWORD *)v142 = 0;
                    sub_20B87E150((const void **)v126, v147);
                    v148 = *(const void **)(v142 + 8);
                    *(_QWORD *)(v142 + 8) = 0;
                    sub_20B87E150((const void **)(v126 + 8), v148);
                    v149 = (_QWORD *)(v142 + 16);
                    *v135 = *(_OWORD *)(v142 + 16);
                    v150 = a1 + 32 * v141;
                    if (v140 >= 2)
                    {
                      while (1)
                      {
                        v151 = v141 - 1;
                        v141 = (v141 - 1) >> 1;
                        v150 = a1 + 32 * v141;
                        v152 = *(double *)(v150 + 24);
                        if (v152 <= v144)
                        {
                          if (v152 != v144)
                            break;
                          v153 = CFStringGetLength(*(CFStringRef *)v150);
                          if (v153 >= CFStringGetLength(v146))
                            break;
                        }
                        v154 = *(CFStringRef *)v150;
                        *(_QWORD *)v150 = 0;
                        sub_20B87E150((const void **)v142, v154);
                        v155 = *(const void **)(v150 + 8);
                        *(_QWORD *)(v150 + 8) = 0;
                        sub_20B87E150((const void **)(v142 + 8), v155);
                        v149 = (_QWORD *)(v150 + 16);
                        *(_OWORD *)(v142 + 16) = *(_OWORD *)(v150 + 16);
                        v142 = a1 + 32 * v141;
                        if (v151 <= 1)
                          goto LABEL_179;
                      }
                      v150 = v142;
                    }
LABEL_179:
                    sub_20B87E150((const void **)v150, v146);
                    sub_20B87E150((const void **)(v150 + 8), v184);
                    *v149 = v177;
                    *(double *)(v150 + 24) = v144;
                    v123 = v187;
                  }
                }
              }
            }
            v117 = v122-- <= 2;
            if (v117)
              return;
            continue;
          }
        }
        v10 = a1 + 32 * (v9 >> 1);
        if ((unint64_t)v8 <= 0x1000)
        {
          sub_20B9C1D28(a1 + 32 * (v9 >> 1), a1, (uint64_t)v181);
        }
        else
        {
          sub_20B9C1D28(a1, a1 + 32 * (v9 >> 1), (uint64_t)v181);
          sub_20B9C1D28(a1 + 32, v10 - 32, v171);
          sub_20B9C1D28(a1 + 64, a1 + 32 + 32 * (v9 >> 1), v170);
          sub_20B9C1D28(v10 - 32, a1 + 32 * (v9 >> 1), a1 + 32 + 32 * (v9 >> 1));
          v11 = *(CFStringRef *)a1;
          v12 = *(const void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)a1 = 0;
          v188 = *(_OWORD *)(a1 + 16);
          v13 = *(const void **)v10;
          *(_QWORD *)v10 = 0;
          sub_20B87E150((const void **)a1, v13);
          v14 = *(const void **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          sub_20B87E150((const void **)(a1 + 8), v14);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 16);
          sub_20B87E150((const void **)v10, v11);
          sub_20B87E150((const void **)(v10 + 8), v12);
          *(_OWORD *)(v10 + 16) = v188;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(double *)(a1 - 8);
          v16 = *(double *)(a1 + 24);
          if (v15 <= v16)
          {
            if (v15 == v16)
            {
              v17 = CFStringGetLength(*(CFStringRef *)(a1 - 32));
              if (v17 < CFStringGetLength(*(CFStringRef *)a1))
                goto LABEL_12;
              v16 = *(double *)(a1 + 24);
            }
            v45 = *(const __CFString **)a1;
            theStringa = *(CFStringRef *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)a1 = 0;
            v46 = *(_QWORD *)(a1 + 16);
            v47 = *(double *)(v185 - 8);
            if (v16 > v47 || v16 == v47 && (v48 = CFStringGetLength(v45), v48 < CFStringGetLength(*v181)))
            {
              v49 = *(double *)(a1 + 56);
              if (v16 <= v49)
              {
                v52 = (double *)(a1 + 88);
                do
                {
                  if (v16 == v49)
                  {
                    v53 = CFStringGetLength(v45);
                    if (v53 < CFStringGetLength(*((CFStringRef *)v52 - 7)))
                      break;
                  }
                  v54 = *v52;
                  v52 += 4;
                  v49 = v54;
                }
                while (v16 <= v54);
                j = (unint64_t)(v52 - 7);
              }
              else
              {
                j = a1 + 32;
              }
            }
            else
            {
              for (j = a1 + 32; j < v185; j += 32)
              {
                v50 = *(double *)(j + 24);
                if (v16 > v50)
                  break;
                if (v16 == v50)
                {
                  v51 = CFStringGetLength(v45);
                  if (v51 < CFStringGetLength(*(CFStringRef *)j))
                    break;
                }
              }
            }
            k = v185;
            if (j < v185)
            {
              for (k = (unint64_t)v181; ; k -= 32)
              {
                v56 = *(double *)(k + 24);
                if (v16 <= v56)
                {
                  if (v16 != v56)
                    break;
                  v57 = CFStringGetLength(v45);
                  if (v57 >= CFStringGetLength(*(CFStringRef *)k))
                    break;
                }
              }
            }
            while (j < k)
            {
              sub_20B9C1B4C(j, k);
              v58 = *(double *)(j + 56);
              if (v16 <= v58)
              {
                v59 = (double *)(j + 88);
                do
                {
                  if (v16 == v58)
                  {
                    v60 = CFStringGetLength(v45);
                    if (v60 < CFStringGetLength(*((CFStringRef *)v59 - 7)))
                      break;
                  }
                  v61 = *v59;
                  v59 += 4;
                  v58 = v61;
                }
                while (v16 <= v61);
                j = (unint64_t)(v59 - 7);
              }
              else
              {
                j += 32;
              }
              do
              {
                do
                {
                  k -= 32;
                  v62 = *(double *)(k + 24);
                }
                while (v16 > v62);
                if (v16 != v62)
                  break;
                v63 = CFStringGetLength(v45);
              }
              while (v63 < CFStringGetLength(*(CFStringRef *)k));
            }
            if (j - 32 != a1)
            {
              v64 = *(const void **)(j - 32);
              *(_QWORD *)(j - 32) = 0;
              sub_20B87E150((const void **)a1, v64);
              v65 = *(const void **)(j - 24);
              *(_QWORD *)(j - 24) = 0;
              sub_20B87E150((const void **)(a1 + 8), v65);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(j - 16);
            }
            sub_20B87E150((const void **)(j - 32), v45);
            sub_20B87E150((const void **)(j - 24), theStringa);
            a4 = 0;
            *(_QWORD *)(j - 16) = v46;
            *(double *)(j - 8) = v16;
            a2 = (CFStringRef *)v185;
            continue;
          }
        }
LABEL_12:
        v18 = 0;
        v19 = *(const __CFString **)a1;
        theString = *(CFStringRef *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = 0;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = *(double *)(a1 + 24);
        while (1)
        {
          v22 = *(double *)(a1 + v18 + 56);
          if (v22 <= v21)
          {
            if (v22 != v21)
              break;
            v23 = CFStringGetLength(*(CFStringRef *)(a1 + v18 + 32));
            if (v23 >= CFStringGetLength(v19))
              break;
          }
          v18 += 32;
        }
        v175 = a3;
        v24 = a1 + v18 + 32;
        if (v18)
        {
          v25 = (unint64_t)v181;
          v26 = *(double *)(v185 - 8);
          v27 = v172;
          if (v26 <= v21)
          {
            do
            {
              if (v26 == v21)
              {
                v28 = CFStringGetLength(v27[1]);
                if (v28 < CFStringGetLength(v19))
                  break;
              }
              v29 = *(double *)v27;
              v27 -= 4;
              v26 = v29;
            }
            while (v29 <= v21);
LABEL_22:
            v25 = (unint64_t)(v27 + 1);
          }
        }
        else
        {
          v25 = v185;
          if (v24 < v185)
          {
            v25 = (unint64_t)v181;
            v30 = *(double *)(v185 - 8);
            if (v30 <= v21)
            {
              v27 = v172;
              v25 = (unint64_t)v181;
              while (1)
              {
                v41 = v27 + 1;
                if (v30 == v21)
                {
                  v42 = CFStringGetLength(*v41);
                  v43 = v42 < CFStringGetLength(v19) || v24 >= (unint64_t)v41;
                  if (v43)
                    goto LABEL_22;
                }
                else if (v24 >= (unint64_t)v41)
                {
                  break;
                }
                v25 -= 32;
                v44 = *(double *)v27;
                v27 -= 4;
                v30 = v44;
                if (v44 > v21)
                  goto LABEL_22;
              }
            }
          }
        }
        j = v24;
        if (v24 < v25)
        {
          v31 = v25;
          do
          {
            sub_20B9C1B4C(j, v31);
            do
            {
              do
              {
                j += 32;
                v32 = *(double *)(j + 24);
              }
              while (v32 > v21);
              if (v32 != v21)
                break;
              v33 = CFStringGetLength(*(CFStringRef *)j);
            }
            while (v33 < CFStringGetLength(v19));
            v34 = *(double *)(v31 - 8);
            if (v34 <= v21)
            {
              v35 = v31 - 40;
              do
              {
                if (v34 == v21)
                {
                  v36 = CFStringGetLength(*(CFStringRef *)(v35 + 8));
                  if (v36 < CFStringGetLength(v19))
                    break;
                }
                v37 = *(double *)v35;
                v35 -= 32;
                v34 = v37;
              }
              while (v37 <= v21);
              v31 = v35 + 8;
            }
            else
            {
              v31 -= 32;
            }
          }
          while (j < v31);
        }
        if (j - 32 != a1)
        {
          v38 = *(const void **)(j - 32);
          *(_QWORD *)(j - 32) = 0;
          sub_20B87E150((const void **)a1, v38);
          v39 = *(const void **)(j - 24);
          *(_QWORD *)(j - 24) = 0;
          sub_20B87E150((const void **)(a1 + 8), v39);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(j - 16);
        }
        sub_20B87E150((const void **)(j - 32), v19);
        sub_20B87E150((const void **)(j - 24), theString);
        *(_QWORD *)(j - 16) = v20;
        *(double *)(j - 8) = v21;
        v43 = v24 >= v25;
        a2 = (CFStringRef *)v185;
        a3 = v175;
        if (!v43)
        {
LABEL_45:
          sub_20B9C0B84(a1, j - 32, v175, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = sub_20B9C1E84(a1, j - 32);
        if (!sub_20B9C1E84(j, v185))
        {
          if (v40)
            continue;
          goto LABEL_45;
        }
        a2 = (CFStringRef *)(j - 32);
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = (__int128 *)((char *)a2 - 88);
  v8 = (char *)a1;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = (char *)a2 - v8;
    v10 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 80))
        {
          sub_20B931AE8((uint64_t *)a1, v7);
          v45 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v45;
        }
        return;
      case 3:
        sub_20B9316FC(a1, a1 + 88, (uint64_t)v7);
        return;
      case 4:
        sub_20B931C54(a1, a1 + 88, a1 + 176, (uint64_t)v7);
        return;
      case 5:
        sub_20B931C54(a1, a1 + 88, a1 + 176, a1 + 264);
        if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 344))
        {
          sub_20B931AE8((uint64_t *)(a1 + 264), v7);
          v46 = *(_DWORD *)(a1 + 344);
          *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v46;
          if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
          {
            sub_20B931AE8((uint64_t *)(a1 + 176), (__int128 *)(a1 + 264));
            v47 = *(_DWORD *)(a1 + 256);
            v48 = *(_DWORD *)(a1 + 344);
            *(_DWORD *)(a1 + 256) = v48;
            *(_DWORD *)(a1 + 344) = v47;
            if (v48 > *(_DWORD *)(a1 + 168))
            {
              sub_20B931AE8((uint64_t *)(a1 + 88), (__int128 *)(a1 + 176));
              v49 = *(_DWORD *)(a1 + 168);
              v50 = *(_DWORD *)(a1 + 256);
              *(_DWORD *)(a1 + 168) = v50;
              *(_DWORD *)(a1 + 256) = v49;
              if (v50 > *(_DWORD *)(a1 + 80))
              {
                sub_20B931AE8((uint64_t *)a1, (__int128 *)(a1 + 88));
                v51 = *(_DWORD *)(a1 + 80);
                *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 168);
                *(_DWORD *)(a1 + 168) = v51;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2111)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)a1 != a2)
            {
              v52 = a1 + 88;
              if ((__int128 *)(a1 + 88) != a2)
              {
                v53 = 0;
                v54 = a1;
                do
                {
                  v55 = v52;
                  v56 = *(_DWORD *)(v54 + 168);
                  if (v56 > *(_DWORD *)(v54 + 80))
                  {
                    v57 = *(_OWORD *)v55;
                    v111 = *(_QWORD *)(v55 + 16);
                    *(_OWORD *)v110 = v57;
                    *(_QWORD *)(v55 + 8) = 0;
                    *(_QWORD *)(v55 + 16) = 0;
                    *(_QWORD *)v55 = 0;
                    *(_OWORD *)v112 = *(_OWORD *)(v54 + 112);
                    v113 = *(_QWORD *)(v54 + 128);
                    *(_QWORD *)(v54 + 112) = 0;
                    *(_QWORD *)(v54 + 120) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v54 + 136);
                    v115 = *(_QWORD *)(v54 + 152);
                    *(_QWORD *)(v54 + 128) = 0;
                    *(_QWORD *)(v54 + 136) = 0;
                    *(_QWORD *)(v54 + 144) = 0;
                    *(_QWORD *)(v54 + 152) = 0;
                    v116 = *(_DWORD *)(v54 + 160);
                    v117 = *(_WORD *)(v54 + 164);
                    v58 = v53;
                    v118 = v56;
                    while (1)
                    {
                      sub_20B931D0C(a1 + v58 + 88, (__int128 *)(a1 + v58));
                      if (!v58)
                        break;
                      v59 = *(_DWORD *)(a1 + v58 - 8);
                      v58 -= 88;
                      if (v118 <= v59)
                      {
                        v60 = a1 + v58 + 88;
                        goto LABEL_87;
                      }
                    }
                    v60 = a1;
LABEL_87:
                    sub_20B931D0C(v60, (__int128 *)v110);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v112[0])
                    {
                      v112[1] = v112[0];
                      operator delete(v112[0]);
                    }
                    if (SHIBYTE(v111) < 0)
                      operator delete(v110[0]);
                  }
                  v52 = v55 + 88;
                  v53 += 88;
                  v54 = v55;
                }
                while ((__int128 *)(v55 + 88) != a2);
              }
            }
          }
          else if ((__int128 *)a1 != a2)
          {
            v94 = a1 + 88;
            if ((__int128 *)(a1 + 88) != a2)
            {
              do
              {
                v95 = v94;
                v96 = *(_DWORD *)(a1 + 168);
                if (v96 > *(_DWORD *)(a1 + 80))
                {
                  v97 = *(_OWORD *)v95;
                  v111 = *(_QWORD *)(v95 + 16);
                  *(_OWORD *)v110 = v97;
                  *(_QWORD *)(v95 + 8) = 0;
                  *(_QWORD *)(v95 + 16) = 0;
                  *(_QWORD *)v95 = 0;
                  *(_OWORD *)v112 = *(_OWORD *)(a1 + 112);
                  v113 = *(_QWORD *)(a1 + 128);
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_OWORD *)__p = *(_OWORD *)(a1 + 136);
                  v115 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  v116 = *(_DWORD *)(a1 + 160);
                  v117 = *(_WORD *)(a1 + 164);
                  v118 = v96;
                  do
                  {
                    sub_20B931D0C(a1 + 88, (__int128 *)a1);
                    v98 = a1 - 88;
                    v99 = *(_DWORD *)(a1 - 8);
                    a1 -= 88;
                  }
                  while (v118 > v99);
                  sub_20B931D0C(v98 + 88, (__int128 *)v110);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if (v112[0])
                  {
                    v112[1] = v112[0];
                    operator delete(v112[0]);
                  }
                  if (SHIBYTE(v111) < 0)
                    operator delete(v110[0]);
                }
                v94 = v95 + 88;
                a1 = v95;
              }
              while ((__int128 *)(v95 + 88) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v61 = (unint64_t)(v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = a1 + 88 * v64;
                if (2 * v63 + 2 < v10)
                {
                  v66 = *(_DWORD *)(a1 + 88 * v64 + 80);
                  v67 = *(_DWORD *)(v65 + 168);
                  v65 += 88 * (v66 > v67);
                  if (v66 > v67)
                    v64 = 2 * v63 + 2;
                }
                v68 = *(_DWORD *)(a1 + 88 * v63 + 80);
                if (*(_DWORD *)(v65 + 80) <= v68)
                {
                  v69 = a1 + 88 * v63;
                  v70 = *(_OWORD *)v69;
                  v111 = *(_QWORD *)(v69 + 16);
                  *(_OWORD *)v110 = v70;
                  *(_QWORD *)(v69 + 8) = 0;
                  *(_QWORD *)(v69 + 16) = 0;
                  *(_QWORD *)v69 = 0;
                  *(_OWORD *)v112 = *(_OWORD *)(v69 + 24);
                  v113 = *(_QWORD *)(v69 + 40);
                  *(_QWORD *)(v69 + 24) = 0;
                  *(_QWORD *)(v69 + 32) = 0;
                  *(_QWORD *)(v69 + 40) = 0;
                  *(_OWORD *)__p = *(_OWORD *)(v69 + 48);
                  v115 = *(_QWORD *)(v69 + 64);
                  *(_QWORD *)(v69 + 48) = 0;
                  *(_QWORD *)(v69 + 56) = 0;
                  *(_QWORD *)(v69 + 64) = 0;
                  v71 = *(_DWORD *)(v69 + 72);
                  v117 = *(_WORD *)(v69 + 76);
                  v116 = v71;
                  v118 = v68;
                  do
                  {
                    v72 = v65;
                    sub_20B931D0C(v69, (__int128 *)v65);
                    if (v61 < v64)
                      break;
                    v73 = (2 * v64) | 1;
                    v65 = a1 + 88 * v73;
                    if (2 * v64 + 2 < v10)
                    {
                      v74 = *(_DWORD *)(a1 + 88 * v73 + 80);
                      v75 = *(_DWORD *)(v65 + 168);
                      v65 += 88 * (v74 > v75);
                      if (v74 > v75)
                        v73 = 2 * v64 + 2;
                    }
                    v69 = v72;
                    v64 = v73;
                  }
                  while (*(_DWORD *)(v65 + 80) <= v68);
                  sub_20B931D0C(v72, (__int128 *)v110);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if (v112[0])
                  {
                    v112[1] = v112[0];
                    operator delete(v112[0]);
                  }
                  if (SHIBYTE(v111) < 0)
                    operator delete(v110[0]);
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v76 = v9 / 0x58uLL;
            do
            {
              v77 = 0;
              v78 = *(_OWORD *)a1;
              v102 = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v101 = v78;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              *(_OWORD *)v103 = *(_OWORD *)(a1 + 24);
              v104 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_OWORD *)v105 = *(_OWORD *)(a1 + 48);
              v106 = *(_QWORD *)(a1 + 64);
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)(a1 + 56) = 0;
              *(_QWORD *)(a1 + 64) = 0;
              v79 = *(_DWORD *)(a1 + 72);
              v108 = *(_WORD *)(a1 + 76);
              v107 = v79;
              v109 = *(_DWORD *)(a1 + 80);
              v80 = a1;
              do
              {
                v81 = v77 + 1;
                v82 = v80 + 88 * (v77 + 1);
                v83 = (2 * v77) | 1;
                v84 = 2 * v77 + 2;
                if (v84 < v76)
                {
                  v85 = *(_DWORD *)(v80 + 88 * v81 + 80);
                  v86 = *(_DWORD *)(v82 + 168);
                  v82 += 88 * (v85 > v86);
                  if (v85 > v86)
                    v83 = v84;
                }
                sub_20B931D0C(v80, (__int128 *)v82);
                v80 = v82;
                v77 = v83;
              }
              while (v83 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              a2 = (__int128 *)((char *)a2 - 88);
              if ((__int128 *)v82 == a2)
              {
                sub_20B931D0C(v82, (__int128 *)v101);
              }
              else
              {
                sub_20B931D0C(v82, a2);
                sub_20B931D0C((uint64_t)a2, (__int128 *)v101);
                v87 = v82 - a1 + 88;
                if (v87 >= 89)
                {
                  v88 = (v87 / 0x58uLL - 2) >> 1;
                  v89 = *(_DWORD *)(v82 + 80);
                  if (*(_DWORD *)(a1 + 88 * v88 + 80) > v89)
                  {
                    v90 = *(_OWORD *)v82;
                    v111 = *(_QWORD *)(v82 + 16);
                    *(_OWORD *)v110 = v90;
                    *(_QWORD *)(v82 + 8) = 0;
                    *(_QWORD *)(v82 + 16) = 0;
                    *(_QWORD *)v82 = 0;
                    *(_OWORD *)v112 = *(_OWORD *)(v82 + 24);
                    v113 = *(_QWORD *)(v82 + 40);
                    *(_QWORD *)(v82 + 24) = 0;
                    *(_QWORD *)(v82 + 32) = 0;
                    *(_QWORD *)(v82 + 40) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v82 + 48);
                    v115 = *(_QWORD *)(v82 + 64);
                    *(_QWORD *)(v82 + 48) = 0;
                    *(_QWORD *)(v82 + 56) = 0;
                    *(_QWORD *)(v82 + 64) = 0;
                    v91 = *(_DWORD *)(v82 + 72);
                    v117 = *(_WORD *)(v82 + 76);
                    v116 = v91;
                    v118 = v89;
                    do
                    {
                      v92 = v82;
                      v82 = a1 + 88 * v88;
                      sub_20B931D0C(v92, (__int128 *)v82);
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                    }
                    while (*(_DWORD *)(a1 + 88 * v88 + 80) > v89);
                    sub_20B931D0C(v82, (__int128 *)v110);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if (v112[0])
                    {
                      v112[1] = v112[0];
                      operator delete(v112[0]);
                    }
                    if (SHIBYTE(v111) < 0)
                      operator delete(v110[0]);
                  }
                }
              }
              if (v105[0])
              {
                v105[1] = v105[0];
                operator delete(v105[0]);
              }
              if (v103[0])
              {
                v103[1] = v103[0];
                operator delete(v103[0]);
              }
              if (SHIBYTE(v102) < 0)
                operator delete(v101[0]);
            }
            while (v76-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(a1 + 88 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x2C01)
        {
          sub_20B9316FC((uint64_t)v12, a1, (uint64_t)v7);
        }
        else
        {
          sub_20B9316FC(a1, (uint64_t)v12, (uint64_t)v7);
          v13 = 88 * v11;
          sub_20B9316FC(a1 + 88, a1 + v13 - 88, (uint64_t)(a2 - 11));
          sub_20B9316FC(a1 + 176, a1 + 88 + v13, (uint64_t)a2 - 264);
          sub_20B9316FC(a1 + v13 - 88, (uint64_t)v12, a1 + 88 + v13);
          sub_20B931AE8((uint64_t *)a1, v12);
          v14 = *(_DWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + v13 + 80);
          *(_DWORD *)(a1 + v13 + 80) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(a1 + 80);
          if (*(_DWORD *)(a1 - 8) > v15)
            goto LABEL_11;
          v33 = *(_OWORD *)a1;
          v111 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v110 = v33;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          *(_OWORD *)v112 = *(_OWORD *)(a1 + 24);
          v113 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
          v115 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v34 = *(_DWORD *)(a1 + 72);
          v117 = *(_WORD *)(a1 + 76);
          v116 = v34;
          v118 = v15;
          if (v15 <= *((_DWORD *)a2 - 2))
          {
            v37 = a1 + 88;
            do
            {
              v8 = (char *)v37;
              if (v37 >= (unint64_t)a2)
                break;
              v38 = *(_DWORD *)(v37 + 80);
              v37 += 88;
            }
            while (v15 <= v38);
          }
          else
          {
            v35 = a1;
            do
            {
              v8 = (char *)(v35 + 88);
              v36 = *(_DWORD *)(v35 + 168);
              v35 += 88;
            }
            while (v15 <= v36);
          }
          v39 = a2;
          if (v8 < (char *)a2)
          {
            v40 = a2;
            do
            {
              v39 = (__int128 *)((char *)v40 - 88);
              v41 = *((_DWORD *)v40 - 2);
              v40 = (__int128 *)((char *)v40 - 88);
            }
            while (v15 > v41);
          }
          while (v8 < (char *)v39)
          {
            sub_20B931AE8((uint64_t *)v8, v39);
            v42 = *((_DWORD *)v8 + 20);
            *((_DWORD *)v8 + 20) = *((_DWORD *)v39 + 20);
            *((_DWORD *)v39 + 20) = v42;
            do
            {
              v43 = *((_DWORD *)v8 + 42);
              v8 += 88;
            }
            while (v118 <= v43);
            do
            {
              v44 = *((_DWORD *)v39 - 2);
              v39 = (__int128 *)((char *)v39 - 88);
            }
            while (v118 > v44);
          }
          if (v8 - 88 != (char *)a1)
            sub_20B931D0C(a1, (__int128 *)(v8 - 88));
          sub_20B931D0C((uint64_t)(v8 - 88), (__int128 *)v110);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v112[0])
          {
            v112[1] = v112[0];
            operator delete(v112[0]);
          }
          if (SHIBYTE(v111) < 0)
            operator delete(v110[0]);
          a4 = 0;
          continue;
        }
        v15 = *(_DWORD *)(a1 + 80);
LABEL_11:
        v16 = 0;
        v17 = *(_OWORD *)a1;
        v111 = *(_QWORD *)(a1 + 16);
        *(_OWORD *)v110 = v17;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_OWORD *)v112 = *(_OWORD *)(a1 + 24);
        v113 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
        v115 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        v18 = *(_DWORD *)(a1 + 72);
        v117 = *(_WORD *)(a1 + 76);
        v116 = v18;
        v118 = v15;
        do
        {
          v19 = *(_DWORD *)(a1 + v16 + 168);
          v16 += 88;
        }
        while (v19 > v15);
        v20 = a1 + v16;
        v21 = a2;
        if (v16 == 88)
        {
          v24 = a2;
          while (v20 < (unint64_t)v24)
          {
            v22 = (__int128 *)((char *)v24 - 88);
            v25 = *((_DWORD *)v24 - 2);
            v24 = (__int128 *)((char *)v24 - 88);
            if (v25 > v15)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = (__int128 *)((char *)v21 - 88);
            v23 = *((_DWORD *)v21 - 2);
            v21 = (__int128 *)((char *)v21 - 88);
          }
          while (v23 <= v15);
        }
LABEL_21:
        if (v20 >= (unint64_t)v22)
        {
          v31 = (__int128 *)(v20 - 88);
        }
        else
        {
          v26 = v20;
          v27 = v22;
          do
          {
            sub_20B931AE8((uint64_t *)v26, v27);
            v28 = *(_DWORD *)(v26 + 80);
            *(_DWORD *)(v26 + 80) = *((_DWORD *)v27 + 20);
            *((_DWORD *)v27 + 20) = v28;
            do
            {
              v29 = *(_DWORD *)(v26 + 168);
              v26 += 88;
            }
            while (v29 > v118);
            do
            {
              v30 = *((_DWORD *)v27 - 2);
              v27 = (__int128 *)((char *)v27 - 88);
            }
            while (v30 <= v118);
          }
          while (v26 < (unint64_t)v27);
          v31 = (__int128 *)(v26 - 88);
        }
        if (v31 != (__int128 *)a1)
          sub_20B931D0C(a1, v31);
        sub_20B931D0C((uint64_t)v31, (__int128 *)v110);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v112[0])
        {
          v112[1] = v112[0];
          operator delete(v112[0]);
        }
        if (SHIBYTE(v111) < 0)
          operator delete(v110[0]);
        if (v20 < (unint64_t)v22)
        {
LABEL_40:
          sub_20B9CF7B0(a1, v31, a3, a4 & 1);
          a4 = 0;
          v8 = (char *)v31 + 88;
          continue;
        }
        v32 = sub_20B9D03E8(a1, (uint64_t)v31);
        v8 = (char *)v31 + 88;
        if (!sub_20B9D03E8((uint64_t)v31 + 88, (uint64_t)a2))
        {
          if (v32)
            continue;
          goto LABEL_40;
        }
        a2 = v31;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v98 = (uint64_t)(a2 - 3);
  v7 = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (a2 - v7);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 1) > *(double *)(a1 + 16))
        {
          v44 = a1;
          v45 = (uint64_t)(a2 - 3);
          goto LABEL_59;
        }
        return;
      case 3:
        sub_20B9FC9B0(a1, a1 + 24, v98);
        return;
      case 4:
        sub_20B9FCC90(a1, a1 + 24, a1 + 48, v98);
        return;
      case 5:
        sub_20B9FCC90(a1, a1 + 24, a1 + 48, a1 + 72);
        if (*(a2 - 1) > *(double *)(a1 + 88))
        {
          sub_20B9FC948(a1 + 72, v98);
          if (*(double *)(a1 + 88) > *(double *)(a1 + 64))
          {
            sub_20B9FC948(a1 + 48, a1 + 72);
            if (*(double *)(a1 + 64) > *(double *)(a1 + 40))
            {
              sub_20B9FC948(a1 + 24, a1 + 48);
              if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
              {
                v44 = a1;
                v45 = a1 + 24;
LABEL_59:
                sub_20B9FC948(v44, v45);
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 575)
        {
          v46 = (const void **)(a1 + 24);
          v48 = (double *)a1 == a2 || v46 == (const void **)a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = a1;
              do
              {
                v51 = v46;
                if (*(double *)(v50 + 40) > *(double *)(v50 + 16))
                {
                  v52 = *v46;
                  *v46 = 0;
                  v53 = *(_QWORD *)(v50 + 32);
                  v54 = *(double *)(v50 + 40);
                  v55 = v49;
                  while (1)
                  {
                    v56 = a1 + v55;
                    v57 = *(const void **)(a1 + v55);
                    *(_QWORD *)(a1 + v55) = 0;
                    sub_20B87E150((const void **)(a1 + v55 + 24), v57);
                    *(_OWORD *)(a1 + v55 + 32) = *(_OWORD *)(a1 + v55 + 8);
                    if (!v55)
                      break;
                    v55 -= 24;
                    if (v54 <= *(double *)(v56 - 8))
                    {
                      v58 = a1 + v55 + 24;
                      goto LABEL_82;
                    }
                  }
                  v58 = a1;
LABEL_82:
                  sub_20B87E150((const void **)v58, v52);
                  *(_QWORD *)(v56 + 8) = v53;
                  *(double *)(v58 + 16) = v54;
                }
                v46 = v51 + 3;
                v49 += 24;
                v50 = (uint64_t)v51;
              }
              while (v51 + 3 != (const void **)a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v90 = v46;
              if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
              {
                v91 = *v46;
                *v46 = 0;
                v92 = *(const void **)(a1 + 32);
                v93 = *(double *)(a1 + 40);
                v94 = v46;
                v95 = v46;
                do
                {
                  v96 = *(v95 - 3);
                  v95 -= 3;
                  *v95 = 0;
                  sub_20B87E150(v94, v96);
                  *(_OWORD *)(v94 + 1) = *((_OWORD *)v94 - 1);
                  v97 = *((double *)v94 - 4);
                  v94 = v95;
                }
                while (v93 > v97);
                sub_20B87E150(v95, v91);
                v95[1] = v92;
                *((double *)v95 + 2) = v93;
              }
              v46 = v90 + 3;
              a1 = (uint64_t)v90;
            }
            while (v90 + 3 != (const void **)a2);
          }
          return;
        }
        if (!a3)
        {
          if ((double *)a1 != a2)
          {
            v59 = (unint64_t)(v9 - 2) >> 1;
            v60 = v59;
            do
            {
              v61 = v60;
              if (v59 >= v60)
              {
                v62 = (2 * v60) | 1;
                v63 = a1 + 24 * v62;
                if (2 * v61 + 2 < v9 && *(double *)(a1 + 24 * v62 + 16) > *(double *)(v63 + 40))
                {
                  v63 += 24;
                  v62 = 2 * v61 + 2;
                }
                v64 = *(double *)(a1 + 24 * v61 + 16);
                if (*(double *)(v63 + 16) <= v64)
                {
                  v65 = a1 + 24 * v61;
                  v66 = *(const void **)v65;
                  *(_QWORD *)v65 = 0;
                  v99 = *(_QWORD *)(v65 + 8);
                  v101 = v66;
                  do
                  {
                    v67 = v63;
                    v68 = *(const void **)v63;
                    *(_QWORD *)v63 = 0;
                    sub_20B87E150((const void **)v65, v68);
                    *(_OWORD *)(v65 + 8) = *(_OWORD *)(v67 + 8);
                    if (v59 < v62)
                      break;
                    v69 = (2 * v62) | 1;
                    v63 = a1 + 24 * v69;
                    if (2 * v62 + 2 < v9 && *(double *)(a1 + 24 * v69 + 16) > *(double *)(v63 + 40))
                    {
                      v63 += 24;
                      v69 = 2 * v62 + 2;
                    }
                    v65 = v67;
                    v62 = v69;
                  }
                  while (*(double *)(v63 + 16) <= v64);
                  sub_20B87E150((const void **)v67, v101);
                  *(_QWORD *)(v67 + 8) = v99;
                  *(double *)(v67 + 16) = v64;
                }
              }
              v60 = v61 - 1;
            }
            while (v61);
            v70 = v8 / 0x18uLL;
            do
            {
              v71 = 0;
              v72 = a2;
              v73 = *(const void **)a1;
              *(_QWORD *)a1 = 0;
              v103 = *(_OWORD *)(a1 + 8);
              v74 = a1;
              do
              {
                v75 = v74;
                v76 = v71 + 1;
                v74 += 24 * (v71 + 1);
                v77 = 2 * v71;
                v71 = (2 * v71) | 1;
                v78 = v77 + 2;
                if (v78 < v70 && *(double *)(v75 + 24 * v76 + 16) > *(double *)(v74 + 40))
                {
                  v74 += 24;
                  v71 = v78;
                }
                v79 = *(const void **)v74;
                *(_QWORD *)v74 = 0;
                sub_20B87E150((const void **)v75, v79);
                *(_OWORD *)(v75 + 8) = *(_OWORD *)(v74 + 8);
              }
              while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
              v80 = (_OWORD *)(v74 + 8);
              a2 = v72 - 3;
              if ((double *)v74 == v72 - 3)
              {
                sub_20B87E150((const void **)v74, v73);
                *v80 = v103;
              }
              else
              {
                v81 = (const void *)*((_QWORD *)v72 - 3);
                *(v72 - 3) = 0.0;
                sub_20B87E150((const void **)v74, v81);
                *v80 = *((_OWORD *)v72 - 1);
                sub_20B87E150((const void **)v72 - 3, v73);
                *((_OWORD *)v72 - 1) = v103;
                v82 = v74 - a1 + 24;
                if (v82 >= 25)
                {
                  v83 = (v82 / 0x18uLL - 2) >> 1;
                  v84 = *(double *)(v74 + 16);
                  if (*(double *)(a1 + 24 * v83 + 16) > v84)
                  {
                    v85 = *(const void **)v74;
                    v86 = *(_QWORD *)(v74 + 8);
                    *(_QWORD *)v74 = 0;
                    do
                    {
                      v87 = v74;
                      v74 = a1 + 24 * v83;
                      v88 = *(const void **)v74;
                      *(_QWORD *)v74 = 0;
                      sub_20B87E150((const void **)v87, v88);
                      *(_OWORD *)(v87 + 8) = *(_OWORD *)(v74 + 8);
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                    }
                    while (*(double *)(a1 + 24 * v83 + 16) > v84);
                    sub_20B87E150((const void **)v74, v85);
                    *(_QWORD *)(v74 + 8) = v86;
                    *(double *)(v74 + 16) = v84;
                  }
                }
              }
            }
            while (v70-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (const void **)(a1 + 24 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0xC01)
        {
          sub_20B9FC9B0((uint64_t)v11, a1, v98);
        }
        else
        {
          sub_20B9FC9B0(a1, (uint64_t)v11, v98);
          v12 = 3 * v10;
          v13 = a1 + 8 * v12;
          sub_20B9FC9B0(a1 + 24, v13 - 24, (uint64_t)(a2 - 6));
          sub_20B9FC9B0(a1 + 48, a1 + 24 + 8 * v12, (uint64_t)(a2 - 9));
          sub_20B9FC9B0(v13 - 24, (uint64_t)v11, a1 + 24 + 8 * v12);
          v14 = *(const void **)a1;
          *(_QWORD *)a1 = 0;
          v102 = *(_OWORD *)(a1 + 8);
          v15 = *v11;
          *v11 = 0;
          sub_20B87E150((const void **)a1, v15);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v13 + 8);
          sub_20B87E150(v11, v14);
          *(_OWORD *)(v13 + 8) = v102;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(double *)(a1 + 16);
          if (*(double *)(a1 - 8) > v16)
            goto LABEL_11;
          v32 = *(const void **)a1;
          *(_QWORD *)a1 = 0;
          if (v16 <= *(a2 - 1))
          {
            v35 = (double *)(a1 + 24);
            do
            {
              v7 = v35;
              if (v35 >= a2)
                break;
              v36 = v35[2];
              v35 += 3;
            }
            while (v16 <= v36);
          }
          else
          {
            v33 = a1;
            do
            {
              v7 = (double *)(v33 + 24);
              v34 = *(double *)(v33 + 40);
              v33 += 24;
            }
            while (v16 <= v34);
          }
          v37 = (unint64_t)a2;
          if (v7 < a2)
          {
            v38 = a2;
            do
            {
              v37 = (unint64_t)(v38 - 3);
              v39 = *(v38 - 1);
              v38 -= 3;
            }
            while (v16 > v39);
          }
          v40 = *(_QWORD *)(a1 + 8);
          while ((unint64_t)v7 < v37)
          {
            sub_20B9FC948((uint64_t)v7, v37);
            do
            {
              v41 = v7[5];
              v7 += 3;
            }
            while (v16 <= v41);
            do
            {
              v42 = *(double *)(v37 - 8);
              v37 -= 24;
            }
            while (v16 > v42);
          }
          if (v7 - 3 != (double *)a1)
          {
            v43 = (const void *)*((_QWORD *)v7 - 3);
            *(v7 - 3) = 0.0;
            sub_20B87E150((const void **)a1, v43);
            *(_OWORD *)(a1 + 8) = *((_OWORD *)v7 - 1);
          }
          sub_20B87E150((const void **)v7 - 3, v32);
          a4 = 0;
          *((_QWORD *)v7 - 2) = v40;
          *(v7 - 1) = v16;
          continue;
        }
        v16 = *(double *)(a1 + 16);
LABEL_11:
        v17 = 0;
        v18 = *(const void **)a1;
        *(_QWORD *)a1 = 0;
        v19 = *(_QWORD *)(a1 + 8);
        do
        {
          v20 = *(double *)(a1 + v17 + 40);
          v17 += 24;
        }
        while (v20 > v16);
        v21 = (double *)(a1 + v17);
        v22 = a2;
        if (v17 == 24)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = (unint64_t)(v25 - 3);
            v26 = *(v25 - 1);
            v25 -= 3;
            if (v26 > v16)
              goto LABEL_21;
          }
          v23 = (unint64_t)v25;
        }
        else
        {
          do
          {
            v23 = (unint64_t)(v22 - 3);
            v24 = *(v22 - 1);
            v22 -= 3;
          }
          while (v24 <= v16);
        }
LABEL_21:
        if ((unint64_t)v21 >= v23)
        {
          v7 = v21;
        }
        else
        {
          v27 = v23;
          v7 = v21;
          do
          {
            sub_20B9FC948((uint64_t)v7, v27);
            do
            {
              v28 = v7[5];
              v7 += 3;
            }
            while (v28 > v16);
            do
            {
              v29 = *(double *)(v27 - 8);
              v27 -= 24;
            }
            while (v29 <= v16);
          }
          while ((unint64_t)v7 < v27);
        }
        if (v7 - 3 != (double *)a1)
        {
          v30 = (const void *)*((_QWORD *)v7 - 3);
          *(v7 - 3) = 0.0;
          sub_20B87E150((const void **)a1, v30);
          *(_OWORD *)(a1 + 8) = *((_OWORD *)v7 - 1);
        }
        sub_20B87E150((const void **)v7 - 3, v18);
        *((_QWORD *)v7 - 2) = v19;
        *(v7 - 1) = v16;
        if ((unint64_t)v21 < v23)
        {
LABEL_34:
          sub_20B9FC054(a1, v7 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_20B9FCA5C((double *)a1, v7 - 3);
        if (!sub_20B9FCA5C(v7, a2))
        {
          if (v31)
            continue;
          goto LABEL_34;
        }
        a2 = v7 - 3;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

__n128 sub_20B885B94(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __n128 result;
  __n128 v8;

  v8 = *(__n128 *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  sub_20B824BE4(a1, a2);
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
  v6 = (void *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    a2->n128_u64[1] = (unint64_t)v6;
    operator delete(v6);
  }
  result = v8;
  *a2 = v8;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  return result;
}

double sub_20B885C10(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  double result;
  double v7;
  __n128 *v8;

  v5 = a1;
  result = a2[1].n128_f64[1];
  v7 = a3[1].n128_f64[1];
  if (result > *(double *)(a1 + 24))
  {
    if (v7 <= result)
    {
      sub_20B885B94(a1, a2);
      result = a3[1].n128_f64[1];
      if (result <= a2[1].n128_f64[1])
        return result;
      a1 = (uint64_t)a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 > result)
  {
    sub_20B885B94((uint64_t)a2, a3);
    result = a2[1].n128_f64[1];
    if (result > *(double *)(v5 + 24))
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      *(_QWORD *)&result = sub_20B885B94(a1, v8).n128_u64[0];
    }
  }
  return result;
}

BOOL sub_20B885CBC(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  __n128 *v7;
  uint64_t v8;
  int v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  void *v15;
  __n128 v16;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f64[1] > a1[1].n128_f64[1])
      {
        sub_20B885B94((uint64_t)a1, a2 - 2);
        return 1;
      }
      return result;
    case 3:
      sub_20B885C10((uint64_t)a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20B885E80((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20B885F14((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v6 = a1 + 4;
      sub_20B885C10((uint64_t)a1, a1 + 2, a1 + 4);
      v7 = a1 + 6;
      if (&a1[6] == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = v7[1].n128_f64[1];
    if (v10 > v6[1].n128_f64[1])
    {
      v16 = *v7;
      v11 = v7[1].n128_u64[0];
      v7->n128_u64[1] = 0;
      v7[1].n128_u64[0] = 0;
      v12 = v8;
      v7->n128_u64[0] = 0;
      while (1)
      {
        v13 = (double *)((char *)a1->n128_f64 + v12);
        sub_20B824BE4((uint64_t)&a1[6] + v12, (__n128 *)((char *)a1 + v12 + 64));
        *(unint64_t *)((char *)&a1[7].n128_u64[1] + v12) = *(unint64_t *)((char *)&a1[5].n128_u64[1] + v12);
        if (v12 == -64)
          break;
        v12 -= 32;
        if (v10 <= v13[7])
        {
          v14 = (uint64_t)&a1[6] + v12;
          goto LABEL_12;
        }
      }
      v14 = (uint64_t)a1;
LABEL_12:
      v15 = *(void **)v14;
      if (*(_QWORD *)v14)
      {
        *(_QWORD *)(v14 + 8) = v15;
        operator delete(v15);
      }
      *(__n128 *)v14 = v16;
      *(_QWORD *)(v14 + 16) = v11;
      *(double *)(v14 + 24) = v10;
      if (++v9 == 8)
        return &v7[2] == a2;
    }
    v6 = v7;
    v8 += 32;
    v7 += 2;
    if (v7 == a2)
      return 1;
  }
}

double sub_20B885E80(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  double result;

  sub_20B885C10(a1, a2, a3);
  result = a4[1].n128_f64[1];
  if (result > a3[1].n128_f64[1])
  {
    sub_20B885B94((uint64_t)a3, a4);
    result = a3[1].n128_f64[1];
    if (result > a2[1].n128_f64[1])
    {
      sub_20B885B94((uint64_t)a2, a3);
      result = a2[1].n128_f64[1];
      if (result > *(double *)(a1 + 24))
        *(_QWORD *)&result = sub_20B885B94(a1, a2).n128_u64[0];
    }
  }
  return result;
}

double sub_20B885F14(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  double result;

  sub_20B885E80(a1, a2, a3, a4);
  result = a5[1].n128_f64[1];
  if (result > a4[1].n128_f64[1])
  {
    sub_20B885B94((uint64_t)a4, a5);
    result = a4[1].n128_f64[1];
    if (result > a3[1].n128_f64[1])
    {
      sub_20B885B94((uint64_t)a3, a4);
      result = a3[1].n128_f64[1];
      if (result > a2[1].n128_f64[1])
      {
        sub_20B885B94((uint64_t)a2, a3);
        result = a2[1].n128_f64[1];
        if (result > *(double *)(a1 + 24))
          *(_QWORD *)&result = sub_20B885B94(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

_QWORD *sub_20B885FD4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_20B87ACC8(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 1);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B886084((uint64_t)v8);
  return v4;
}

void sub_20B886070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B886084((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B886084(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B882570(a1);
  return a1;
}

void sub_20B8860B8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 4);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 3) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B886134(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20B886194(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_20B80CDD8();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20B80FD0C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_20B886294(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 2 * a3;
    do
    {
      sub_20B886308(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_20B8862F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B84055C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B886308(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20B828960(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20B886510(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B886524(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void sub_20B8865DC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8865F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46B688;
  result[1] = v3;
  return result;
}

uint64_t sub_20B886624(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46B688;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B886640(uint64_t a1, uint64_t a2, const __CFString **a3)
{
  const __CFString *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;

  v3 = *a3;
  v4 = sub_20B9547EC();
  sub_20B8D154C(v3, &v12);
  v5 = v12;
  result = sub_20B954D48((uint64_t)v4, 0x4000u, (uint64_t)"%s, %.4f\n", v6, v7, v8, v9, v10, (uint64_t)v12);
  if (v5)
    JUMPOUT(0x20BD39C80);
  return result;
}

void sub_20B8866D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8866F8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F1D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B886734()
{
  return &unk_24C45F1D0;
}

BOOL sub_20B886740(void *a1, const char *a2)
{
  if (qword_25472AFB8 != -1)
    dispatch_once(&qword_25472AFB8, &unk_24C46CD50);
  return objc_msgSend_rangeOfCharacterFromSet_options_(a1, a2, qword_25472AFC0, 0) != 0x7FFFFFFFFFFFFFFFLL;
}

id sub_20B8867A4(uint64_t a1, const char *a2)
{
  void *v2;
  const char *v3;
  id result;

  v2 = (void *)objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x24BDD1690], a2, (uint64_t)CFSTR("⺮丨丬丶丷丿乀乁乚乛亅亠亻冂冖冫凵刂勹匕匚卩囗夂夊宀尢屮巛廴廾彐彑彡彳忄扌攴攵氵灬爫爿牜犭疒癶礻纟罒肀艸艹虍衤襾覀讠豸辶钅阝飠饣⺬"));
  objc_msgSend_addCharactersInRange_(v2, v3, 11904, 342);
  result = v2;
  qword_25472AFC0 = (uint64_t)result;
  return result;
}

uint64_t sub_20B8867EC(uint64_t a1, unsigned int a2)
{
  id v4;
  const char *v5;

  if (!a1 || !a2)
    return 0;
  v4 = objc_alloc(MEMORY[0x24BDD17C8]);
  return objc_msgSend_initWithBytes_length_encoding_(v4, v5, a1, a2, 4);
}

uint64_t sub_20B88683C(uint64_t a1, const __CFURL *a2, void *a3, unsigned int a4, const __CFArray *a5)
{
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD v14[5];

  *(_QWORD *)a1 = off_24C463318;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v10 = (_QWORD *)operator new();
  sub_20BA3053C(v10, 0);
  *(_QWORD *)(a1 + 56) = v10;
  sub_20B9F6CA8(a1 + 72, a4, 0, 0, a3, 0, 0, 0, 0, 0);
  *(_QWORD *)(a1 + 248) = sub_20B9547EC();
  *(_QWORD *)(a1 + 256) = 0;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = sub_20B9FB1B4;
  v14[3] = &unk_24C46C7F8;
  v14[4] = a3;
  sub_20B9FA928((void **)"FacemarkLearning", (uint64_t)v14, 0, (uint64_t *)(a1 + 264));
  if (a2)
  {
    sub_20B886A0C(a1, a2, a5);
    *(_QWORD *)(a1 + 40) = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  }
  *(_QWORD *)(a1 + 64) = objc_msgSend_copy(a3, v11, v12);
  return a1;
}

void sub_20B886984(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;

  sub_20B889DF0((id ***)(v2 + 56), 0);
  sub_20B87E150((const void **)(v2 + 24), 0);
  sub_20B87E150((const void **)(v2 + 16), 0);
  sub_20B886C60(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B886A0C(uint64_t a1, const __CFURL *a2, const __CFArray *a3)
{
  _QWORD *v5;
  const void *v6;
  const __CFArray *v7;

  v5 = sub_20B8A205C(*MEMORY[0x24BDBD240], a2, 0);
  v6 = v5;
  if (v5)
  {
    if (a3)
      v7 = a3;
    else
      v7 = (const __CFArray *)&unk_24C4B8E08;
    sub_20B8A22DC((uint64_t)v5, v7);
  }
  sub_20B886C60((const void **)(a1 + 8), v6);
}

uint64_t sub_20B886A70(uint64_t a1)
{
  const void **v2;
  const char *v3;
  uint64_t v4;
  const void *v5;

  *(_QWORD *)a1 = off_24C463318;
  v2 = (const void **)(a1 + 16);
  sub_20B87E150((const void **)(a1 + 16), 0);
  sub_20B87E150((const void **)(a1 + 24), 0);
  objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v3, v4);

  v5 = *(const void **)(a1 + 64);
  if (v5)
    CFRelease(v5);
  sub_20B811FE4(a1 + 264);
  sub_20B9F7C44(a1 + 72);
  sub_20B889DF0((id ***)(a1 + 56), 0);
  sub_20B87E150((const void **)(a1 + 24), 0);
  sub_20B87E150(v2, 0);
  sub_20B886C60((const void **)(a1 + 8), 0);
  return a1;
}

uint64_t sub_20B886B2C(_QWORD *a1, int a2, const __CFString *a3, const __CFString *a4, int a5, char a6)
{
  int v12;
  const __CFString *v13;
  uint64_t v14;
  _DWORD v16[3];
  uint64_t v17;

  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
  v13 = sub_20B93AC48(a3, v12, (a1[4] & 0x2000000) != 0);
  v14 = operator new();
  v16[0] = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
  v16[1] = 0;
  v17 = 0;
  v16[2] = a2;
  sub_20B912364(v14, (__int128 *)v16, v13, a4, a5, a6);
  if (v13)
    CFRelease(v13);
  return v14;
}

void sub_20B886C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

uint64_t sub_20B886C28(uint64_t a1)
{
  const char *v2;
  uint64_t v3;

  sub_20B87E150((const void **)(a1 + 16), 0);
  sub_20B87E150((const void **)(a1 + 24), 0);
  return objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v2, v3);
}

void sub_20B886C60(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B886C94(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 && *(_DWORD *)(a1[31] + 4) <= 7u)
    sub_20B96AE80(a4);
  a1[32] = a4;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*a1 + 16))(a1, a2, a3, 0, 0, 0, 0);
}

uint64_t sub_20B886D08(const void **a1, const __CFString *a2, const void *a3, uint64_t a4, const __CFArray *a5)
{
  uint64_t v10;
  const __CFString *v11;
  CFStringRef *v12;
  uint64_t v13;
  CFStringRef v14;
  CFIndex Length;
  CFStringRef Copy;
  const char *v18;
  uint64_t CharacterAtIndex;
  const void *ValueAtIndex;
  const char *v21;

  (*((void (**)(const void **))*a1 + 33))(a1);
  a1[4] = a3;
  v10 = (*((uint64_t (**)(const void **))*a1 + 36))(a1);
  if (v10)
  {
    *(_BYTE *)(v10 + 96) = (a3 & 0x80) == 0;
    sub_20B9727D8(v10, 1);
  }
  if (CFStringCompare(a2, kMecabraAnalysisStringForFacemark[0], 0) == kCFCompareEqualTo)
    return sub_20B886EF4(a1);
  v11 = (const __CFString *)(*((uint64_t (**)(const void **, const __CFString *))*a1 + 38))(a1, a2);
  if (a2)
  {
    v12 = (CFStringRef *)(a1 + 3);
    if ((*((unsigned int (**)(const void **))*a1 + 39))(a1))
    {
      v14 = *v12;
      if (*v12 && CFStringHasPrefix(v11, v14))
      {
        Length = CFStringGetLength(*v12);
      }
      else
      {
        objc_msgSend_reset(**(void ***)a1[7], (const char *)v14, v13);
        Length = 0;
      }
      while (Length < CFStringGetLength(v11))
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(v11, Length);
        if (a5 && Length < CFArrayGetCount(a5))
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a5, Length);
          objc_msgSend_addInputCharacter_geometryModel_geometryData_(**(void ***)a1[7], v21, CharacterAtIndex, a4, ValueAtIndex);
        }
        else
        {
          objc_msgSend_addInputCharacter_geometryModel_geometryData_(**(void ***)a1[7], v18, CharacterAtIndex, a4, 0);
        }
        ++Length;
      }
    }
    sub_20B87E150(a1 + 3, v11);
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  }
  else
  {
    sub_20B87E150(a1 + 3, v11);
    Copy = 0;
  }
  sub_20B87E150(a1 + 2, Copy);
  return a1[1] && a1[2] != 0;
}

uint64_t sub_20B886EF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = a1[32];
  if (v2 && sub_20B88826C(v2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270])
    return 0;
  v3 = a1[33];
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = sub_20B88782C;
  v5[3] = &unk_24C499498;
  v5[4] = a1;
  sub_20B9FBBC0(v3, (uint64_t)v5);
  a1[6] = 0;
  return 1;
}

uint64_t sub_20B886F90(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  void *v8;
  const char *v9;
  void *v11;
  uint64_t v12;

  if (objc_msgSend_count(*(void **)(a1 + 40), a2, a3))
  {
    v6 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v7 = *(const __CFString **)(a1 + 16);
    if (v7 && CFStringGetLength(v7) >= 1)
    {
      v8 = (void *)MEMORY[0x20BD3A22C]();
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      objc_autoreleasePoolPop(v8);
    }
    v6 = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (v6 == objc_msgSend_count(*(void **)(a1 + 40), v4, v5))
    return 0;
  v11 = *(void **)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12 + 1;
  return objc_msgSend_objectAtIndex_(v11, v9, v12);
}

uint64_t sub_20B88704C(_QWORD *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v12[128];
  _QWORD v13[130];

  v13[129] = *MEMORY[0x24BDAC8D0];
  result = a1[1];
  if (result)
  {
    result = sub_20B8A2260(result, a2, a3);
    if ((_DWORD)result)
    {
      memset(v13, 0, 512);
      v11 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *, _QWORD *))(**(_QWORD **)(a1[1] + 16)
                                                                                      + 72))(*(_QWORD *)(a1[1] + 16), *(_QWORD *)(a1[1] + 40), 128, v13, v12);
      if (result >= 1)
      {
        v9 = result;
LABEL_5:
        v10 = 0;
        while (1)
        {
          result = (*(uint64_t (**)(_QWORD *, const __CFString *, uint64_t, _QWORD, _QWORD, char *, uint64_t))(*a1 + 328))(a1, a2, a3, v13[v10], v12[v10], &v11, a4);
          if (v11)
            break;
          if (v9 == ++v10)
          {
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *, _QWORD *))(**(_QWORD **)(a1[1] + 16)
                                                                                            + 72))(*(_QWORD *)(a1[1] + 16), *(_QWORD *)(a1[1] + 40), 128, v13, v12);
            v9 = result;
            if (result >= 1)
              goto LABEL_5;
            return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_20B8871CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  id v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_20B8A25B4(a1[1], a4, a5, &v20, &v17);
  v12 = sub_20B8867EC(v22, v19);
  v13 = 0;
  switch((char)v17)
  {
    case 1:
      v13 = *v20;
      break;
    case 2:
      v13 = *(unsigned __int16 *)v20;
      break;
    case 4:
      v13 = *(unsigned int *)v20;
      break;
    case 8:
      v13 = *(_QWORD *)v20;
      break;
    default:
      break;
  }
  v14 = 0;
  switch(v18)
  {
    case 1:
      v14 = *v21;
      break;
    case 2:
      v14 = *(unsigned __int16 *)v21;
      break;
    case 4:
    case 8:
      v14 = *(_DWORD *)v21;
      break;
    default:
      break;
  }
  v16 = (id)v12;
  v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 272))(a1, a2, a3);
  (*(void (**)(uint64_t, id, uint64_t, _QWORD, uint64_t))(a7 + 16))(a7, v16, v13, (v14 != 0) & ~v15, a6);

}

BOOL sub_20B887350(uint64_t a1, void *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *DictionaryReading;
  const char *v18;

  v3 = sub_20B8D298C();
  if (MecabraCandidateIsEmojiCandidate(a2, v4, v5))
    return 0;
  v8 = (_QWORD *)objc_msgSend_rawCandidate(a2, v6, v7);
  if (v8)
  {
    v10 = v8;
    v11 = (*(uint64_t (**)(_QWORD *))(*v8 + 40))(v8);
    v12 = 40;
    if (!v11)
      v12 = 24;
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + v12))(v10);
  }
  if (objc_msgSend_rangeOfCharacterFromSet_(v8, v9, v3) != 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  if (!MecabraCandidateGetDictionaryReading(a2, v13, v14))
    return 1;
  DictionaryReading = (void *)MecabraCandidateGetDictionaryReading(a2, v15, v16);
  return objc_msgSend_rangeOfCharacterFromSet_(DictionaryReading, v18, v3) == 0x7FFFFFFFFFFFFFFFLL;
}

void sub_20B887410(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  CFStringRef *v7;
  CFStringRef *v8;
  CFIndex Length;
  uint64_t v10;
  void *v11;
  const char *v12;
  int v13;
  __int128 v14;
  CFStringRef *v15;
  CFStringRef *v16;

  if (*(_QWORD *)(a1 + 16) && *(_QWORD *)(a1 + 24))
  {
    v4 = (void *)objc_msgSend_prefixes(***(void ****)(a1 + 56), a2, a3);
    sub_20BA3064C(v4, v5, v6, &v15);
    v7 = v15;
    v8 = v16;
    if (v15 != v16)
    {
      do
      {
        Length = CFStringGetLength(v7[2]);
        if (Length >= CFStringGetLength(*(CFStringRef *)(a1 + 16)))
        {
          v10 = operator new();
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
          v14 = xmmword_20BA39CD0;
          sub_20B912364(v10, (__int128 *)&v13, v7[2], *(const __CFString **)(a1 + 24), 0, 0);
          v11 = (void *)sub_20B8E1754(v10);
          objc_msgSend_addObject_(*(void **)(a1 + 40), v12, (uint64_t)v11);

        }
        v7 += 9;
      }
      while (v7 != v8);
      v7 = v15;
    }
    if (v7)
    {
      v16 = v7;
      operator delete(v7);
    }
  }
}

void sub_20B887528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B88756C(_QWORD *result, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD v6[9];
  int v7;

  if (result[2])
  {
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = sub_20B8875DC;
    v6[3] = &unk_24C499478;
    v7 = a6;
    v6[6] = result;
    v6[7] = a5;
    v6[8] = a2;
    v6[4] = a3;
    v6[5] = a4;
    return (_QWORD *)sub_20B88704C(result, a3, a4, (uint64_t)v6);
  }
  return result;
}

uint64_t sub_20B8875DC(uint64_t result, const __CFString *a2, int a3, char a4, _BYTE *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  const __CFString *v19;
  const __CFString *v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  const __CFString *v29;
  const __CFString *v30;
  int v31;
  char v32;
  uint64_t *v33;

  if (!a2)
    return result;
  v6 = result;
  v7 = *(_QWORD *)(result + 48);
  v8 = (uint64_t *)sub_20B886B2C((_QWORD *)v7, (*(_DWORD *)(v7 + 32) >> 13) & 0x1000u | *(_DWORD *)(result + 72), a2, *(const __CFString **)(v7 + 16), a3, a4);
  v33 = v8;
  v9 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_22;
  v10 = v8;
  v13 = *(_QWORD **)(v9 + 8);
  v11 = (_QWORD *)(v9 + 8);
  v12 = v13;
  if (v13)
  {
    v14 = v11;
    do
    {
      v15 = (uint64_t *)v12[4];
      v16 = (*(uint64_t (**)(uint64_t *))(*v15 + 112))(v15);
      v17 = (*(uint64_t (**)(uint64_t *))(*v10 + 112))(v10);
      v18 = *v15;
      if (v16 == v17)
      {
        v19 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v18 + 24))(v15);
        v20 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v10 + 24))(v10);
        v21 = (unint64_t)CFStringCompare(v19, v20, 0) >> 63;
      }
      else
      {
        v22 = (*(uint64_t (**)(uint64_t *))(v18 + 112))(v15);
        LODWORD(v21) = v22 < (*(int (**)(uint64_t *))(*v10 + 112))(v10);
      }
      v23 = (_DWORD)v21 == 0;
      if ((_DWORD)v21)
        v24 = v12 + 1;
      else
        v24 = v12;
      if (v23)
        v14 = v12;
      v12 = (_QWORD *)*v24;
    }
    while (*v24);
    if (v11 != v14)
    {
      v25 = v14[4];
      v26 = (*(uint64_t (**)(uint64_t *))(*v10 + 112))(v10);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 112))(v25);
      v28 = *v10;
      if (v26 == v27)
      {
        v29 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v28 + 24))(v10);
        v30 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
        if ((CFStringCompare(v29, v30, 0) & 0x8000000000000000) == 0)
          goto LABEL_21;
      }
      else
      {
        v31 = (*(uint64_t (**)(uint64_t *))(v28 + 112))(v10);
        if (v31 >= (*(int (**)(uint64_t))(*(_QWORD *)v25 + 112))(v25))
          goto LABEL_21;
      }
    }
  }
  v14 = v11;
LABEL_21:
  if ((_QWORD *)(*(_QWORD *)(v6 + 56) + 8) != v14)
    goto LABEL_24;
LABEL_22:
  sub_20B889E48(*(uint64_t ***)(v6 + 64), &v33, (uint64_t *)&v33);
  if ((v32 & 1) == 0)
  {
    v10 = v33;
LABEL_24:
    if (v10)
      (*(void (**)(uint64_t *))(*v10 + 16))(v10);
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 320))(v7, *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16));
  if (a5)
  {
    if ((_DWORD)result)
      *a5 = 1;
  }
  return result;
}

void sub_20B88782C(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = operator new();
  sub_20B8B7314(v4, a2, kFacemarkCategoryRecentlyUsed[0]);
  v6 = (id)sub_20B8E1754(v4);
  objc_msgSend_addObject_(*(void **)(v3 + 40), v5, (uint64_t)v6);

}

void sub_20B8878A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

id sub_20B8878CC(_QWORD *a1, const __CFString *a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  CFIndex v13;
  _WORD *v14;
  CFIndex v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t *v21;
  const char *v22;
  const __CFString *v23;
  int v24;
  int v25;
  uint64_t v26;
  const __CFString *v27;
  char v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *__p[2];
  char v35;
  void **v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _WORD *v41;
  CFIndex v42;

  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v6 = a1[32];
  if (!v6 || sub_20B88826C(v6, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270])
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 288))(a1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (a1[2])
        {
          v9 = atomic_load((unsigned __int8 *)&qword_25472AFC8);
          if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25472AFC8))
          {
            __cxa_atexit((void (*)(void *))sub_20B887CA4, &qword_25472AFD0, &dword_20B7F7000);
            __cxa_guard_release(&qword_25472AFC8);
          }
          v10 = qword_25472AFD0;
          if (qword_25472AFD8 != qword_25472AFD0)
          {
            v11 = qword_25472AFD8 - 32;
            do
            {
              sub_20B8896CC(v11, *(_QWORD **)(v11 + 8));
              v12 = v11 == v10;
              v11 -= 32;
            }
            while (!v12);
          }
          qword_25472AFD8 = v10;
          v42 = 0;
          sub_20B8D0624(a2, &v42, &v41);
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v14 = v41;
          v13 = v42;
          v36 = &v38;
          if (v42)
          {
            v15 = 2 * v42;
            do
            {
              sub_20B888330((uint64_t *)&v36, v14++);
              v15 -= 2;
            }
            while (v15);
            v16 = (unsigned __int16 *)v38;
            v13 = (CFIndex)v39;
          }
          else
          {
            v16 = 0;
          }
          sub_20B918630(v8, v16, (v13 - (uint64_t)v16) >> 1, a3, (uint64_t)&unk_24C46CF70);
          if (qword_25472AFD8 != qword_25472AFD0)
          {
            v36 = (void **)sub_20B90999C;
            sub_20B888650(qword_25472AFD0, (_QWORD *)qword_25472AFD8, (uint64_t (**)(uint64_t, uint64_t))&v36, 126 - 2 * __clz((qword_25472AFD8 - qword_25472AFD0) >> 5), 1);
            v17 = qword_25472AFD0;
            if (qword_25472AFD8 != qword_25472AFD0)
            {
              v18 = 0;
              v19 = 24;
              do
              {
                sub_20B88A068((uint64_t *)&v36, v17 + v19 - 24);
                sub_20B80BBD0(__p, off_2547292D0);
                v20 = sub_20B871B2C((uint64_t)&v36, __p);
                if (v35 < 0)
                  operator delete(__p[0]);
                if (&v37 != (_QWORD **)v20)
                {
                  v21 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v20[7] + 16))(v20[7]);
                  v23 = (const __CFString *)objc_msgSend_stringWithCharacters_length_(MEMORY[0x24BDD17C8], v22, *v21, (v21[1] - *v21) >> 1);
                  v24 = *(_DWORD *)(qword_25472AFD0 + v19);
                  v25 = (*(uint64_t (**)(_QWORD *, void ***, _QWORD))(*a1 + 344))(a1, &v36, a3);
                  v26 = a1[4];
                  v27 = (const __CFString *)a1[2];
                  v28 = (*(uint64_t (**)(_QWORD *, void ***))(*a1 + 352))(a1, &v36);
                  v29 = sub_20B886B2C(a1, (v26 >> 13) & 0x1000 | v25, v23, v27, v24, v28);
                  v30 = (void *)sub_20B8E1754(v29);
                  objc_msgSend_addObject_(v5, v31, (uint64_t)v30);

                }
                sub_20B8896CC((uint64_t)&v36, v37);
                ++v18;
                v17 = qword_25472AFD0;
                v19 += 32;
              }
              while (v18 < (qword_25472AFD8 - qword_25472AFD0) >> 5);
            }
          }
          if (v38)
          {
            v39 = v38;
            operator delete(v38);
          }
          if (v41)
            MEMORY[0x20BD39C80](v41, 0x1000C80BDFB0063);
        }
      }
    }
  }
  return v5;
}

void sub_20B887C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a22)
    MEMORY[0x20BD39C80](a22, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void **sub_20B887CA4(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B8882B4(&v3);
  return a1;
}

void sub_20B887CD8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  void *v22[5];

  sub_20B88A068((uint64_t *)&v18, a2);
  v21 = a3;
  v4 = qword_25472AFD8;
  if ((unint64_t)qword_25472AFD8 >= qword_25472AFE0)
  {
    v8 = (qword_25472AFD8 - qword_25472AFD0) >> 5;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59)
      sub_20B88848C();
    v10 = qword_25472AFE0 - qword_25472AFD0;
    if ((qword_25472AFE0 - qword_25472AFD0) >> 4 > v9)
      v9 = v10 >> 4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    v22[4] = &qword_25472AFE0;
    if (v11)
      v12 = (char *)sub_20B8156D4((uint64_t)&qword_25472AFE0, v11);
    else
      v12 = 0;
    v14 = &v12[32 * v8];
    v22[0] = v12;
    v22[1] = v14;
    v22[3] = &v12[32 * v11];
    *(_QWORD *)v14 = v18;
    v15 = v19;
    *((_QWORD *)v14 + 1) = v19;
    v16 = v14 + 8;
    v17 = v20;
    *((_QWORD *)v14 + 2) = v20;
    if (v17)
    {
      v15[2] = v16;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      *(_QWORD *)v14 = v16;
    }
    *(_DWORD *)&v12[32 * v8 + 24] = v21;
    v22[2] = v14 + 32;
    sub_20B888418(&qword_25472AFD0, v22);
    v13 = qword_25472AFD8;
    sub_20B8885DC(v22);
  }
  else
  {
    *(_QWORD *)qword_25472AFD8 = v18;
    v5 = v19;
    *(_QWORD *)(v4 + 8) = v19;
    v6 = v4 + 8;
    v7 = v20;
    *(_QWORD *)(v4 + 16) = v20;
    if (v7)
    {
      v5[2] = v6;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      *(_QWORD *)v4 = v6;
    }
    *(_DWORD *)(v4 + 24) = v21;
    v13 = v4 + 32;
  }
  qword_25472AFD8 = v13;
  sub_20B8896CC((uint64_t)&v18, v19);
}

void sub_20B887E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20B8885DC((void **)va1);
  sub_20B8896CC((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20B887E90(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *v7;
  uint64_t result;
  BOOL v9;

  if (sub_20B88826C(a2, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270])
    return 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
  v5 = Count - 1;
  if (Count < 1)
    return 1;
  v6 = 0;
  do
  {
    v7 = sub_20B96ABC8(a2, v6);
    result = (*(uint64_t (**)(uint64_t, const void *, BOOL))(*(_QWORD *)a1 + 56))(a1, v7, v6 < v5);
    if ((_DWORD)result)
      v9 = v5 == v6;
    else
      v9 = 1;
    ++v6;
  }
  while (!v9);
  return result;
}

uint64_t sub_20B887F3C(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a1[32];
  if (!v6 || sub_20B88826C(v6, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270])
  {
    if (a2
      && (v7 = a1[4],
          v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 7))
    {
      if ((v7 & 0x80) == 0)
      {
        v11 = a1[33];
        v12 = (const __CFString *)objc_msgSend_surface(a2, v9, v10);
        return sub_20B9FB924(v11, v12, 0);
      }
    }
    else
    {
      v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 288))(a1);
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 280))(a1))
        v15 = v14 == 0;
      else
        v15 = 1;
      if (!v15 && (*(unsigned int (**)(_QWORD *, void *))(*a1 + 336))(a1, a2))
      {
        v18 = objc_msgSend_rawCandidate(a2, v16, v17);
        if (!v18)
          return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a2, a3, 1);
        v19 = v18;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18) != 1
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19) != 7)
        {
          return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a2, a3, 1);
        }
        v22 = objc_msgSend_rawCandidate(a2, v20, v21);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 104))(v22) & 0x1000) == 0)
          return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a2, a3, 1);
      }
    }
  }
  return 0;
}

uint64_t sub_20B8880AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, a2, a3);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
      return 1;
    }
  }
  return result;
}

uint64_t sub_20B888114(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 96))(result, a2);
  return result;
}

void sub_20B888158(uint64_t a1, const __CFString *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  id v6;

  v6 = sub_20B8878CC((_QWORD *)a1, a2, 0);
  if (objc_msgSend_count(v6, v3, v4))
    objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 40), v5, (uint64_t)v6);

}

uint64_t sub_20B8881A0(uint64_t *a1)
{
  uint64_t v2;
  int v3;

  v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 288))(a1);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  else
    v3 = 1;
  return v3 & sub_20B9FBCFC(a1[33]);
}

uint64_t sub_20B8881F0(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B872064(v4, a2, a1 + 72, 1);
  return sub_20B8E1754(v4);
}

void sub_20B888248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40A1F7DA0CLL);
  _Unwind_Resume(a1);
}

const void *sub_20B88826C(uint64_t a1, const void *a2)
{
  const __CFDictionary *v3;

  v3 = *(const __CFDictionary **)(a1 + 56);
  if (v3 && CFDictionaryContainsKey(v3, a2))
    return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  else
    return 0;
}

void sub_20B8882B4(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 32;
      do
      {
        sub_20B8896CC(v6, *(_QWORD **)(v6 + 8));
        v7 = v6 == (_QWORD)v2;
        v6 -= 32;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_20B888330(uint64_t *a1, _WORD *a2)
{
  uint64_t v4;
  _WORD *v5;
  _QWORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = *a1;
  v5 = *(_WORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_WORD **)v4;
    v9 = (uint64_t)v5 - *(_QWORD *)v4;
    if (v9 <= -3)
      sub_20B80CDD8();
    v10 = v9 >> 1;
    v11 = *v6 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = *v6 - (_QWORD)v8;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_20B80FD48((uint64_t)v6, v13);
      v8 = *(_WORD **)v4;
      v5 = *(_WORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = *a2;
    v7 = v15 + 2;
    while (v5 != v8)
    {
      v17 = *--v5;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t sub_20B888418(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B8884A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_20B88848C()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B8884A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 32);
      v8 -= 32;
      *(_QWORD *)(v7 - 32) = v9;
      v10 = (_QWORD *)(a3 - 24);
      v11 = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 24) = v11;
      v12 = v7 - 24;
      v13 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 32) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 16) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 32) = v12;
      }
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v19 + 1) - 32;
      *((_QWORD *)&v19 + 1) -= 32;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  sub_20B888568((uint64_t)v16);
  return v14;
}

uint64_t sub_20B888568(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B88859C(a1);
  return a1;
}

void sub_20B88859C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    sub_20B8896CC(v1, *(_QWORD **)(v1 + 8));
    v1 += 32;
  }
}

void **sub_20B8885DC(void **a1)
{
  sub_20B88860C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20B88860C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_20B8896CC(i - 32, *(_QWORD **)(i - 24));
  }
}

void sub_20B888650(unint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  char v19;
  int v20;

void sub_20B8889AC(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD **, uint64_t))
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  if ((_QWORD *)a1 != a2)
  {
    v5 = (_QWORD *)(a1 + 32);
    if ((_QWORD *)(a1 + 32) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)a1;
      do
      {
        v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          v10 = v8 + 5;
          v11 = (_QWORD *)v8[5];
          v19 = (_QWORD *)*v9;
          v20 = v11;
          v21 = v8[6];
          if (v21)
          {
            v11[2] = &v20;
            *v9 = v10;
            *v10 = 0;
            v8[6] = 0;
          }
          else
          {
            v19 = &v20;
          }
          v22 = *((_DWORD *)v8 + 14);
          v12 = v7;
          while (1)
          {
            v13 = a1 + v12;
            sub_20B889664(a1 + v12 + 32, (_QWORD *)(a1 + v12));
            *(_DWORD *)(a1 + v12 + 56) = *(_DWORD *)(a1 + v12 + 24);
            if (!v12)
              break;
            v12 -= 32;
            if (((*a3)(&v19, v13 - 32) & 1) == 0)
            {
              v14 = a1 + v12 + 32;
              goto LABEL_13;
            }
          }
          v14 = a1;
LABEL_13:
          v15 = v14 + 8;
          sub_20B8896CC(v14, *(_QWORD **)(v14 + 8));
          v16 = v20;
          *(_QWORD *)v14 = v19;
          *(_QWORD *)(v14 + 8) = v16;
          v17 = v21;
          *(_QWORD *)(v14 + 16) = v21;
          if (v17)
          {
            v18 = 0;
            v16[2] = v15;
            v19 = &v20;
            v20 = 0;
            v21 = 0;
          }
          else
          {
            *(_QWORD *)v14 = v15;
            v18 = v20;
          }
          *(_DWORD *)(v14 + 24) = v22;
          sub_20B8896CC((uint64_t)&v19, v18);
        }
        v5 = v9 + 4;
        v7 += 32;
        v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
}

void sub_20B888B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B888B2C(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD **, uint64_t))
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  char v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;

  if ((_QWORD *)a1 != a2)
  {
    v4 = (_QWORD *)a1;
    v5 = (_QWORD *)(a1 + 32);
    if ((_QWORD *)(a1 + 32) != a2)
    {
      v7 = (_DWORD *)(a1 + 56);
      do
      {
        v8 = v5;
        if ((*a3)(v5, (uint64_t)v4))
        {
          v9 = v4 + 5;
          v10 = (_QWORD *)v4[5];
          v17 = (_QWORD *)*v8;
          v18 = v10;
          v19 = v4[6];
          if (v19)
          {
            v10[2] = &v18;
            *v8 = v9;
            *v9 = 0;
            v4[6] = 0;
          }
          else
          {
            v17 = &v18;
          }
          v20 = *((_DWORD *)v4 + 14);
          v11 = v7;
          do
          {
            sub_20B889664((uint64_t)(v11 - 6), (_QWORD *)v11 - 7);
            *v11 = *(v11 - 8);
            v12 = (*a3)(&v17, (uint64_t)(v11 - 22));
            v11 -= 8;
          }
          while ((v12 & 1) != 0);
          v13 = v11 - 4;
          sub_20B8896CC((uint64_t)(v11 - 6), *((_QWORD **)v11 - 2));
          v14 = v18;
          *((_QWORD *)v11 - 3) = v17;
          *((_QWORD *)v11 - 2) = v14;
          v15 = v19;
          *((_QWORD *)v11 - 1) = v19;
          if (v15)
          {
            v16 = 0;
            v14[2] = v13;
            v17 = &v18;
            v18 = 0;
            v19 = 0;
          }
          else
          {
            *((_QWORD *)v11 - 3) = v13;
            v16 = v18;
          }
          *v11 = v20;
          sub_20B8896CC((uint64_t)&v17, v16);
        }
        v5 = v8 + 4;
        v7 += 8;
        v4 = v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_20B888C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B888C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8;
  uint64_t result;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = (int *)(a1 + 24);
      sub_20B889430((uint64_t *)a1, a3);
      v11 = (int *)(a3 + 24);
      result = 1;
LABEL_10:
      v14 = *v10;
      *v10 = *v11;
      *v11 = v14;
      return result;
    }
    sub_20B889430((uint64_t *)a1, a2);
    v10 = (int *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = v13;
    if ((*a4)(a3, a2))
    {
      sub_20B889430((uint64_t *)a2, a3);
      v11 = (int *)(a3 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    sub_20B889430((uint64_t *)a2, a3);
    v11 = (int *)(a2 + 24);
    v12 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = v12;
    if ((*a4)(a2, a1))
    {
      sub_20B889430((uint64_t *)a1, a2);
      v10 = (int *)(a1 + 24);
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

unint64_t sub_20B888DB8(uint64_t a1, unint64_t a2, uint64_t (**a3)(_QWORD **, unint64_t))
{
  unint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;

  v4 = a2;
  v6 = (_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 8);
  v17 = *(_QWORD **)a1;
  v18 = v7;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v7[2] = &v18;
    *(_QWORD *)a1 = v6;
    *v6 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v17 = &v18;
  }
  v20 = *(_DWORD *)(a1 + 24);
  if (((*a3)(&v17, a2 - 32) & 1) != 0)
  {
    v8 = a1;
    do
      v8 += 32;
    while (((*a3)(&v17, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 32;
    do
    {
      v8 = v9;
      if (v9 >= v4)
        break;
      v10 = (*a3)(&v17, v9);
      v9 = v8 + 32;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 32;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    sub_20B889430((uint64_t *)v8, v4);
    v11 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v11;
    do
      v8 += 32;
    while (!(*a3)(&v17, v8));
    do
      v4 -= 32;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  if (v8 - 32 != a1)
  {
    sub_20B889664(a1, (_QWORD *)(v8 - 32));
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
  }
  v12 = v8 - 24;
  sub_20B8896CC(v8 - 32, *(_QWORD **)(v8 - 24));
  *(_QWORD *)(v8 - 32) = v17;
  v13 = v18;
  *(_QWORD *)(v8 - 24) = v18;
  v14 = v19;
  *(_QWORD *)(v8 - 16) = v19;
  if (v14)
  {
    v15 = 0;
    v13[2] = v12;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(v8 - 32) = v12;
    v15 = v18;
  }
  *(_DWORD *)(v8 - 8) = v20;
  sub_20B8896CC((uint64_t)&v17, v15);
  return v8;
}

void sub_20B888F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

unint64_t sub_20B888FB0(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, _QWORD **))
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  v6 = (_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 8);
  v19 = *(_QWORD **)a1;
  v20 = v7;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v7[2] = &v20;
    *(_QWORD *)a1 = v6;
    *v6 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v19 = &v20;
  }
  v8 = 0;
  v22 = *(_DWORD *)(a1 + 24);
  do
  {
    v9 = (*a3)(a1 + v8 + 32, &v19);
    v8 += 32;
  }
  while ((v9 & 1) != 0);
  v10 = a1 + v8;
  if (v8 == 32)
  {
    do
    {
      if (v10 >= a2)
        break;
      a2 -= 32;
    }
    while (((*a3)(a2, &v19) & 1) == 0);
  }
  else
  {
    do
      a2 -= 32;
    while (!(*a3)(a2, &v19));
  }
  v11 = a1 + v8;
  if (v10 < a2)
  {
    v12 = a2;
    do
    {
      sub_20B889430((uint64_t *)v11, v12);
      v13 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v12 + 24) = v13;
      do
        v11 += 32;
      while (((*a3)(v11, &v19) & 1) != 0);
      do
        v12 -= 32;
      while (!(*a3)(v12, &v19));
    }
    while (v11 < v12);
  }
  if (v11 - 32 != a1)
  {
    sub_20B889664(a1, (_QWORD *)(v11 - 32));
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v11 - 8);
  }
  v14 = v11 - 24;
  sub_20B8896CC(v11 - 32, *(_QWORD **)(v11 - 24));
  *(_QWORD *)(v11 - 32) = v19;
  v15 = v20;
  *(_QWORD *)(v11 - 24) = v20;
  v16 = v21;
  *(_QWORD *)(v11 - 16) = v21;
  if (v16)
  {
    v17 = 0;
    v15[2] = v14;
    v19 = &v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(v11 - 32) = v14;
    v17 = v20;
  }
  *(_DWORD *)(v11 - 8) = v22;
  sub_20B8896CC((uint64_t)&v19, v17);
  return v11 - 32;
}

void sub_20B889188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8891B0(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _BOOL8 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD **v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;

  v6 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      if ((*a3)(a2 - 32, a1))
      {
        sub_20B889430((uint64_t *)a1, a2 - 32);
        v7 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return v6;
    case 3:
      sub_20B888C8C(a1, a1 + 32, a2 - 32, a3);
      return v6;
    case 4:
      sub_20B889488(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return v6;
    case 5:
      sub_20B88955C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      return v6;
    default:
      v8 = a1 + 64;
      sub_20B888C8C(a1, a1 + 32, a1 + 64, a3);
      v9 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!(*a3)(v9, v8))
  {
LABEL_20:
    v8 = v9;
    v10 += 32;
    v9 += 32;
    if (v9 == a2)
      return 1;
  }
  v12 = (_QWORD *)(v9 + 8);
  v13 = *(_QWORD **)(v9 + 8);
  v21 = *(_QWORD ***)v9;
  v22 = v13;
  v23 = *(_QWORD *)(v9 + 16);
  if (v23)
  {
    v13[2] = &v22;
    *(_QWORD *)v9 = v12;
    *v12 = 0;
    *(_QWORD *)(v9 + 16) = 0;
  }
  else
  {
    v21 = &v22;
  }
  v24 = *(_DWORD *)(v9 + 24);
  v14 = v10;
  while (1)
  {
    v15 = a1 + v14;
    sub_20B889664(a1 + v14 + 96, (_QWORD *)(a1 + v14 + 64));
    *(_DWORD *)(a1 + v14 + 120) = *(_DWORD *)(a1 + v14 + 88);
    if (v14 == -64)
      break;
    v14 -= 32;
    if (((*a3)((uint64_t)&v21, v15 + 32) & 1) == 0)
    {
      v16 = a1 + v14 + 96;
      goto LABEL_15;
    }
  }
  v16 = a1;
LABEL_15:
  v17 = v16 + 8;
  sub_20B8896CC(v16, *(_QWORD **)(v16 + 8));
  v18 = v22;
  *(_QWORD *)v16 = v21;
  *(_QWORD *)(v16 + 8) = v18;
  v19 = v23;
  *(_QWORD *)(v16 + 16) = v23;
  if (v19)
  {
    v18[2] = v17;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *(_QWORD *)v16 = v17;
  }
  *(_DWORD *)(v16 + 24) = v24;
  if (++v11 != 8)
  {
    sub_20B8896CC((uint64_t)&v21, v22);
    goto LABEL_20;
  }
  v6 = v9 + 32 == a2;
  sub_20B8896CC((uint64_t)&v21, v22);
  return v6;
}

void sub_20B889418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B889430(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

uint64_t *sub_20B889488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  uint64_t *result;
  int v11;
  int v12;
  int v13;

  sub_20B888C8C(a1, a2, a3, a5);
  result = (uint64_t *)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    sub_20B889430((uint64_t *)a3, a4);
    v11 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v11;
    result = (uint64_t *)(*a5)(a3, a2);
    if ((_DWORD)result)
    {
      sub_20B889430((uint64_t *)a2, a3);
      v12 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v12;
      result = (uint64_t *)(*a5)(a2, a1);
      if ((_DWORD)result)
      {
        result = sub_20B889430((uint64_t *)a1, a2);
        v13 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v13;
      }
    }
  }
  return result;
}

uint64_t *sub_20B88955C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t *result;
  int v13;
  int v14;
  int v15;
  int v16;

  sub_20B889488(a1, a2, a3, a4, a6);
  result = (uint64_t *)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    sub_20B889430((uint64_t *)a4, a5);
    v13 = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v13;
    result = (uint64_t *)(*a6)(a4, a3);
    if ((_DWORD)result)
    {
      sub_20B889430((uint64_t *)a3, a4);
      v14 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v14;
      result = (uint64_t *)(*a6)(a3, a2);
      if ((_DWORD)result)
      {
        sub_20B889430((uint64_t *)a2, a3);
        v15 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v15;
        result = (uint64_t *)(*a6)(a2, a1);
        if ((_DWORD)result)
        {
          result = sub_20B889430((uint64_t *)a1, a2);
          v16 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v16;
        }
      }
    }
  }
  return result;
}

void sub_20B889664(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_20B8896CC(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void sub_20B8896CC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20B8896CC(a1, *a2);
    sub_20B8896CC(a1, a2[1]);
    sub_20B889714((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20B889714(uint64_t a1)
{
  sub_20B811FE4(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B889750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 32 * v10;
      do
      {
        sub_20B889878(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          sub_20B889430((uint64_t *)v14, a1);
          v15 = *(_DWORD *)(v14 + 24);
          *(_DWORD *)(v14 + 24) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v15;
          sub_20B889878(a1, a4, v9, a1);
        }
        v14 += 32;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v16 = (unint64_t)v8 >> 5;
      do
      {
        sub_20B889A58(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v16);
        v6 -= 32;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_20B889878(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 5)
    {
      v10 = (a4 - a1) >> 4;
      v11 = v10 + 1;
      v12 = a1 + 32 * (v10 + 1);
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 32))
      {
        v12 += 32;
        v11 = v13;
      }
      if (((*a2)(v12, v5) & 1) == 0)
      {
        v14 = (_QWORD *)(v5 + 8);
        v15 = *(_QWORD **)(v5 + 8);
        v22 = *(_QWORD **)v5;
        v23 = v15;
        v24 = *(_QWORD *)(v5 + 16);
        if (v24)
        {
          v15[2] = &v23;
          *(_QWORD *)v5 = v14;
          *v14 = 0;
          *(_QWORD *)(v5 + 16) = 0;
        }
        else
        {
          v22 = &v23;
        }
        v25 = *(_DWORD *)(v5 + 24);
        do
        {
          v16 = v12;
          sub_20B889664(v5, (_QWORD *)v12);
          *(_DWORD *)(v5 + 24) = *(_DWORD *)(v12 + 24);
          if (v7 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = a1 + 32 * v17;
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v17;
          }
          else if ((*a2)(a1 + 32 * v17, v12 + 32))
          {
            v12 += 32;
          }
          else
          {
            v11 = v17;
          }
          v5 = v16;
        }
        while (!(*a2)(v12, (uint64_t)&v22));
        v18 = v16 + 8;
        sub_20B8896CC(v16, *(_QWORD **)(v16 + 8));
        *(_QWORD *)v16 = v22;
        v19 = v23;
        *(_QWORD *)(v16 + 8) = v23;
        v20 = v24;
        *(_QWORD *)(v16 + 16) = v24;
        if (v20)
        {
          v21 = 0;
          v19[2] = v18;
          v22 = &v23;
          v23 = 0;
          v24 = 0;
        }
        else
        {
          *(_QWORD *)v16 = v18;
          v21 = v23;
        }
        *(_DWORD *)(v16 + 24) = v25;
        sub_20B8896CC((uint64_t)&v22, v21);
      }
    }
  }
}

void sub_20B889A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_20B889A58(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  if (a4 >= 2)
  {
    v7 = (_QWORD *)(a1 + 8);
    v8 = *(_QWORD **)(a1 + 8);
    v19 = *(_QWORD ***)a1;
    v20 = v8;
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
    {
      v8[2] = &v20;
      *(_QWORD *)a1 = v7;
      *v7 = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    else
    {
      v19 = &v20;
    }
    v22 = *(_DWORD *)(a1 + 24);
    v9 = sub_20B889BE4(a1, a3, a4);
    v10 = v9;
    if (v9 == a2 - 32)
    {
      v16 = (_QWORD *)(v9 + 8);
      sub_20B8896CC(v9, *(_QWORD **)(v9 + 8));
      *(_QWORD *)v10 = v19;
      v17 = v20;
      *v16 = v20;
      v18 = v21;
      *(_QWORD *)(v10 + 16) = v21;
      if (v18)
      {
        v17[2] = v16;
        v19 = &v20;
        v20 = 0;
        v21 = 0;
      }
      else
      {
        *(_QWORD *)v10 = v16;
      }
      *(_DWORD *)(v10 + 24) = v22;
    }
    else
    {
      sub_20B889664(v9, (_QWORD *)(a2 - 32));
      v12 = a2 - 24;
      v11 = *(_QWORD **)(a2 - 24);
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 8);
      v13 = v10 + 32;
      sub_20B8896CC(a2 - 32, v11);
      v14 = v20;
      *(_QWORD *)(a2 - 32) = v19;
      *(_QWORD *)(a2 - 24) = v14;
      v15 = v21;
      *(_QWORD *)(a2 - 16) = v21;
      if (v15)
      {
        v14[2] = v12;
        v19 = &v20;
        v20 = 0;
        v21 = 0;
      }
      else
      {
        *(_QWORD *)(a2 - 32) = v12;
      }
      *(_DWORD *)(a2 - 8) = v22;
      sub_20B889C9C(a1, v13, (uint64_t (**)(uint64_t, uint64_t))a3, (v13 - a1) >> 5);
    }
    sub_20B8896CC((uint64_t)&v19, v20);
  }
}

void sub_20B889BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B889BE4(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 32 * v6 + 32;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 32 * v6 + 32, a1 + 32 * v6 + 64))
    {
      v9 += 32;
      v10 = v11;
    }
    sub_20B889664(a1, (_QWORD *)v9);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v9 + 24);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void sub_20B889C9C(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 32 * (v4 >> 1);
    v10 = a2 - 32;
    if ((*a3)(v9, a2 - 32))
    {
      v11 = (_QWORD *)(a2 - 24);
      v12 = *(_QWORD **)(a2 - 24);
      v17 = *(_QWORD **)(a2 - 32);
      v18 = v12;
      v19 = *(_QWORD *)(a2 - 16);
      if (v19)
      {
        v12[2] = &v18;
        *(_QWORD *)v10 = v11;
        *v11 = 0;
        *(_QWORD *)(a2 - 16) = 0;
      }
      else
      {
        v17 = &v18;
      }
      v20 = *(_DWORD *)(a2 - 8);
      do
      {
        v13 = v9;
        sub_20B889664(v10, (_QWORD *)v9);
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 32 * v8;
        v10 = v13;
      }
      while (((*a3)(v9, (uint64_t)&v17) & 1) != 0);
      v14 = v13 + 8;
      sub_20B8896CC(v13, *(_QWORD **)(v13 + 8));
      v15 = v18;
      *(_QWORD *)v13 = v17;
      *(_QWORD *)(v13 + 8) = v15;
      v16 = v19;
      *(_QWORD *)(v13 + 16) = v19;
      if (v16)
      {
        v15[2] = v14;
        v17 = &v18;
        v18 = 0;
        v19 = 0;
        v15 = 0;
      }
      else
      {
        *(_QWORD *)v13 = v14;
      }
      *(_DWORD *)(v13 + 24) = v20;
      sub_20B8896CC((uint64_t)&v17, v15);
    }
  }
}

void sub_20B889DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

id ***sub_20B889DF0(id ***result, id **a2)
{
  id **v2;
  id *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      sub_20BA309BC((uint64_t)v2, v3);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t *sub_20B889E48(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)sub_20B889EC8((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    sub_20B8296A0(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *sub_20B889EC8(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  const __CFString *v20;
  const __CFString *v21;
  int v22;
  int v23;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = v4[4];
        v10 = (*(uint64_t (**)(uint64_t *))(**a3 + 112))(*a3);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
        v12 = *v8;
        if (v10 == v11)
          break;
        v22 = (*(uint64_t (**)(uint64_t *))(v12 + 112))(v8);
        if (v22 >= (*(int (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9))
          goto LABEL_4;
LABEL_8:
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_14;
      }
      v13 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v12 + 24))(v8);
      v14 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      if (CFStringCompare(v13, v14, 0) < 0)
        goto LABEL_8;
LABEL_4:
      v15 = (uint64_t *)v7[4];
      v16 = *a3;
      v17 = (*(uint64_t (**)(uint64_t *))(*v15 + 112))(v15);
      v18 = (*(uint64_t (**)(uint64_t *))(*v16 + 112))(v16);
      v19 = *v15;
      if (v17 == v18)
      {
        v20 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v19 + 24))(v15);
        v21 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
        if ((CFStringCompare(v20, v21, 0) & 0x8000000000000000) == 0)
          goto LABEL_14;
      }
      else
      {
        v23 = (*(uint64_t (**)(uint64_t *))(v19 + 112))(v15);
        if (v23 >= (*(int (**)(uint64_t *))(*v16 + 112))(v16))
          goto LABEL_14;
      }
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
      if (!v4)
        goto LABEL_14;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_14:
  *a2 = v7;
  return v5;
}

uint64_t *sub_20B88A068(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20B88A0BC(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_20B88A0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8896CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B88A0BC(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = sub_20B88A140(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20B88A140(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = sub_20B88A1D4(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20B88A358((uint64_t)a1, a4, (uint64_t)v10);
    sub_20B8296A0(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20B88A4BC((uint64_t)v10, 0);
  }
  return v7;
}

void **sub_20B88A1D4(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2 || (sub_20B871BA8(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((sub_20B871BA8(v12 + 4, a5) & 0x80) == 0)
        return (void **)sub_20B88A3C0((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((sub_20B871BA8((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((sub_20B871BA8(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)sub_20B88A3C0((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

_QWORD *sub_20B88A358@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20B88A450(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20B88A3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B88A4BC(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B88A3C0(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((sub_20B871BA8(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((sub_20B871BA8(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *sub_20B88A450(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  __dst[3] = *((_QWORD *)a2 + 3);
  __dst[4] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return __dst;
}

void sub_20B88A4BC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B889714((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

BOOL sub_20B88A500(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v9 = (char **)(a1 + 2);
  v8 = (void *)a1[2];
  v9[8] = 0;
  v9[9] = 0;
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  if (a2)
  {
    v10 = a2;
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
    sub_20B88A650(v9 + 4);
    v13 = v12;
    *v12 = v11;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = a4;
    a1[1] = a3;
    v15 = (char *)a1[3];
    v14 = a1[4];
    if ((unint64_t)v15 >= v14)
    {
      v17 = (v15 - *v9) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        sub_20B80CDD8();
      v18 = v14 - (_QWORD)*v9;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v20 = (unint64_t)sub_20B87FB70(v20);
      else
        v21 = 0;
      v22 = (_QWORD *)(v20 + 8 * v17);
      v23 = v20 + 8 * v21;
      *v22 = v13;
      v16 = (uint64_t)(v22 + 1);
      v25 = (char *)a1[2];
      v24 = (char *)a1[3];
      if (v24 != v25)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = *v9;
      }
      a1[2] = v22;
      a1[3] = v16;
      a1[4] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v15 = v12;
      v16 = (uint64_t)(v15 + 8);
    }
    a1[3] = v16;
    sub_20B88AA28(a1[2], v16, (v16 - a1[2]) >> 3);
  }
  return a2 != 0;
}

double sub_20B88A650(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 == v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x28uLL);
    v6 = operator new[]();
    v7 = v6;
    v9 = (uint64_t *)a1[2];
    v8 = a1[3];
    if ((unint64_t)v9 >= v8)
    {
      v11 = a1[1];
      v12 = ((uint64_t)v9 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_20B80CDD8();
      v13 = v8 - v11;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)sub_20B87FB70(v15);
      else
        v16 = 0;
      v17 = (uint64_t *)(v15 + 8 * v12);
      v18 = v15 + 8 * v16;
      *v17 = v7;
      v10 = v17 + 1;
      v20 = (char *)a1[1];
      v19 = (char *)a1[2];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)a1[1];
      }
      a1[1] = v17;
      a1[2] = v10;
      a1[3] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    a1[2] = v10;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  v22 = *(_QWORD *)(v5 + 8 * v2);
  a1[4] = v4 + 1;
  v23 = v22 + 40 * v4;
  *(_QWORD *)(v23 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  return result;
}

uint64_t sub_20B88A79C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  v2 = (_QWORD *)a1[2];
  v3 = a1[3];
  if (v2 == (_QWORD *)v3)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = (_QWORD *)*v2;
    if (v3 - (uint64_t)v2 >= 9)
    {
      v6 = 0;
      v7 = (unint64_t)(v3 - (_QWORD)v2) >> 3;
      v8 = v7 - 2;
      if (v7 < 2)
        v8 = v7 - 1;
      v9 = v8 >> 1;
      v10 = v2;
      do
      {
        v11 = &v10[v6];
        v14 = v11[1];
        v12 = v11 + 1;
        v13 = v14;
        v15 = (2 * v6) | 1;
        v16 = 2 * v6 + 2;
        if (v16 < (uint64_t)v7 && *(_QWORD *)(v13 + 16) > *(_QWORD *)(v12[1] + 16))
        {
          v13 = v12[1];
          ++v12;
          v15 = v16;
        }
        *v10 = v13;
        v10 = v12;
        v6 = v15;
      }
      while (v15 <= v9);
      v17 = (_QWORD *)(v3 - 8);
      if (v17 == v12)
      {
        *v12 = v5;
      }
      else
      {
        *v12 = *v17;
        *v17 = v5;
        sub_20B88AA28((uint64_t)v2, (uint64_t)(v12 + 1), v12 + 1 - v2);
      }
    }
    v3 = a1[3] - 8;
    a1[3] = v3;
    result = *v5;
    v19 = v5[1];
    if (*(_BYTE *)(*v5 + 109) == 2)
      break;
    if (v19 && (v20 = *(_QWORD *)(v19 + 32), v21 = a1[1], v20 <= v21))
    {
      if (v20 == v21)
        goto LABEL_42;
      if (v4 > 15)
        return 0;
      ++v4;
    }
    else
    {
      v22 = *(uint64_t **)(result + 40);
      if (v22)
      {
        do
        {
          sub_20B88A650(a1 + 6);
          v24 = v23;
          v25 = *v22;
          v26 = v5[4] - *(unsigned __int16 *)(*v22 + 88);
          v27 = *((int *)v22 + 4);
          v23[3] = v5[3] + v27;
          v28 = *(_QWORD *)(v25 + 96) + v27 + v5[3];
          v23[1] = v5;
          v23[2] = v28;
          *v23 = v25;
          v23[4] = v26;
          v30 = (_QWORD *)a1[3];
          v29 = a1[4];
          if ((unint64_t)v30 >= v29)
          {
            v32 = a1[2];
            v33 = ((uint64_t)v30 - v32) >> 3;
            if ((unint64_t)(v33 + 1) >> 61)
              sub_20B80CDD8();
            v34 = v29 - v32;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v36 = (unint64_t)sub_20B87FB70(v36);
            else
              v37 = 0;
            v38 = (_QWORD *)(v36 + 8 * v33);
            *v38 = v24;
            v31 = (uint64_t)(v38 + 1);
            v40 = (char *)a1[2];
            v39 = (char *)a1[3];
            if (v39 != v40)
            {
              do
              {
                v41 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *--v38 = v41;
              }
              while (v39 != v40);
              v39 = (char *)a1[2];
            }
            a1[2] = v38;
            a1[3] = v31;
            a1[4] = v36 + 8 * v37;
            if (v39)
              operator delete(v39);
          }
          else
          {
            *v30 = v23;
            v31 = (uint64_t)(v30 + 1);
          }
          a1[3] = v31;
          sub_20B88AA28(a1[2], v31, (v31 - a1[2]) >> 3);
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
        v3 = a1[3];
      }
    }
    v2 = (_QWORD *)a1[2];
    if (v2 == (_QWORD *)v3)
      return 0;
  }
  if (!v19)
    return result;
LABEL_42:
  v42 = (_QWORD *)*v5;
  do
  {
    v43 = *(_QWORD **)v19;
    v42[1] = *(_QWORD *)v19;
    *v43 = v42;
    v19 = *(_QWORD *)(v19 + 8);
    v42 = v43;
  }
  while (v19);
  return result;
}

uint64_t sub_20B88AA28(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(_QWORD *)(v8 + 16);
    if (*(_QWORD *)(*v4 + 16) > v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(_QWORD *)(*v4 + 16) > v9);
      *v10 = v7;
    }
  }
  return result;
}

char **sub_20B88AA84(char **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  a1[4] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  if (a3)
  {
    v4 = a2;
    v5 = 0;
    v6 = &a2[a3];
    do
    {
      v7 = *v4;
      v8 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v8)
      {
        v10 = *a1;
        v11 = (v5 - *a1) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          sub_20B80CDD8();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            sub_20B800BC0();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v7;
        v9 = v16 + 8;
        if (v5 == v10)
        {
          *a1 = v16;
          a1[1] = v9;
          a1[2] = v17;
        }
        else
        {
          do
          {
            v18 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *(_QWORD *)v5 = 0;
            *((_QWORD *)v16 - 1) = v18;
            v16 -= 8;
          }
          while (v5 != v10);
          v5 = *a1;
          v19 = a1[1];
          *a1 = v16;
          a1[1] = v9;
          a1[2] = v17;
          while (v19 != v5)
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            v20 = v21;
            *(_QWORD *)v19 = 0;
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
        }
        if (v5)
          operator delete(v5);
      }
      else
      {
        *(_QWORD *)v5 = v7;
        v9 = v5 + 8;
      }
      a1[1] = v9;
      ++v4;
      v5 = v9;
    }
    while (v4 != v6);
    v22 = *a1;
  }
  else
  {
    v22 = 0;
  }
  a1[3] = v22;
  return a1;
}

void sub_20B88ABFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B882394((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_20B88AC30(_QWORD *a1, int a2)
{
  _QWORD *v2;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_QWORD *)a1[3];
  if (v2 == (_QWORD *)a1[1])
    return 0;
  while (1)
  {
    v5 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2);
    if (v5)
      break;
    v2 = (_QWORD *)(a1[3] + 8);
    a1[3] = v2;
    if (v2 == (_QWORD *)a1[1])
      return 0;
  }
  v8 = v5;
  if (a2)
  {
    v9 = objc_msgSend_rawCandidate(v5, v6, v7);
    v10 = a1[4];
    *(_QWORD *)(v9 + 8) = v10;
    a1[4] = v10 + 1;
  }
  return v8;
}

uint64_t sub_20B88ACC0(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  const __CFString *v6;
  CFIndex Length;
  const __CFString *v8;
  CFNumberRef v9;
  CFIndex valuePtr;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v5 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5), (_DWORD)result))
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 224))(v5);
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 232))(v5);
          if (result)
          {
            v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 232))(v5);
            Length = CFStringGetLength(v6);
            v8 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 224))(v5);
            valuePtr = Length - CFStringGetLength(v8);
            v9 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
            CFDictionaryAddValue(a2, CFSTR("phraseLearningCandidateKeystrokeSavings"), v9);
            if (v9)
              CFRelease(v9);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void sub_20B88ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B88AE28(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B88AE14()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B88AE28(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

BOOL sub_20B88AE5C(const char *a1)
{
  size_t v2;

  v2 = strnlen(a1, 0x400uLL);
  return v2 >= 0x11 && strncmp(&a1[v2 - 17], "/asset_ja_ota.dic", 0x400uLL) == 0;
}

BOOL sub_20B88AEB0(__int128 *a1, const __CFArray *a2)
{
  NSObject *v4;
  const void **i;
  const void **v6;
  CFMutableSetRef Mutable;
  CFIndex v8;
  CFURLRef v9;
  CFIndex j;
  const void *ValueAtIndex;
  CFTypeID v12;
  CFStringRef v13;
  CFTypeID v14;
  NSObject *v15;
  const __CFString *v16;
  NSObject *v17;
  unint64_t v18;
  const void **v19;
  CFTypeRef v20;
  _QWORD *v21;
  CFTypeRef v22;
  const void **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  CFTypeRef v29;
  char *v30;
  char *v31;
  CFTypeRef v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  CFURLRef v36;
  CFTypeRef v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  CFURLRef *v41;
  NSObject *v42;
  CFIndex Count;
  uint64_t v45;
  CFStringRef v46;
  CFTypeRef cf[2];
  CFURLRef v48;
  CFTypeRef v49;
  _BYTE buf[24];
  char *v51;
  __int128 *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(9u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2)
      Count = CFArrayGetCount(a2);
    else
      Count = 0;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = Count;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] #dictionary:%ld", buf, 0xCu);
  }
  v6 = *(const void ***)a1;
  for (i = (const void **)*((_QWORD *)a1 + 1); i != v6; sub_20B87E150(i, 0))
    --i;
  *((_QWORD *)a1 + 1) = v6;
  if (!a2)
    return a2 != 0;
  v48 = 0;
  v49 = 0;
  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  cf[1] = Mutable;
  v8 = CFArrayGetCount(a2);
  if (v8 < 1)
  {
    v9 = 0;
    goto LABEL_58;
  }
  v9 = 0;
  for (j = 0; j != v8; ++j)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, j);
    cf[0] = 0;
    v12 = CFGetTypeID(ValueAtIndex);
    if (v12 == CFURLGetTypeID())
    {
      v13 = CFURLCopyFileSystemPath((CFURLRef)ValueAtIndex, kCFURLPOSIXPathStyle);
      if (cf[0])
        CFRelease(cf[0]);
      cf[0] = v13;
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      v14 = CFGetTypeID(ValueAtIndex);
      if (v14 == CFStringGetTypeID())
        sub_20B88B52C(cf, ValueAtIndex);
      v13 = (CFStringRef)cf[0];
      if (!cf[0])
        goto LABEL_17;
    }
    if (CFSetContainsValue(Mutable, v13))
      goto LABEL_17;
    CFSetAddValue(Mutable, cf[0]);
    v15 = sub_20B9A7C5C(9u);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = j + 1;
      *(_WORD *)&buf[12] = 2112;
      *(CFTypeRef *)&buf[14] = cf[0];
      _os_log_debug_impl(&dword_20B7F7000, v15, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] - %ld: %@", buf, 0x16u);
    }
    v16 = (const __CFString *)cf[0];
    if (cf[0])
    {
      if (CFStringHasSuffix((CFStringRef)cf[0], CFSTR(".dic")))
      {
        v17 = sub_20B9A7C5C(9u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(CFTypeRef *)&buf[4] = cf[0];
          _os_log_debug_impl(&dword_20B7F7000, v17, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] adding dictionary %@", buf, 0xCu);
        }
        v19 = (const void **)*((_QWORD *)a1 + 1);
        v18 = *((_QWORD *)a1 + 2);
        if ((unint64_t)v19 >= v18)
        {
          v23 = *(const void ***)a1;
          v24 = ((uint64_t)v19 - *(_QWORD *)a1) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            sub_20B88B6B4();
          v26 = v18 - (_QWORD)v23;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          v52 = a1 + 1;
          if (v27)
          {
            v28 = (char *)sub_20B800BE8((uint64_t)(a1 + 1), v27);
            v23 = *(const void ***)a1;
            v19 = (const void **)*((_QWORD *)a1 + 1);
          }
          else
          {
            v28 = 0;
          }
          v30 = &v28[8 * v24];
          v31 = &v28[8 * v27];
          v51 = v31;
          v32 = cf[0];
          cf[0] = 0;
          *(_QWORD *)v30 = v32;
          *(_QWORD *)&buf[16] = v30 + 8;
          if (v19 == v23)
          {
            v21 = v30 + 8;
          }
          else
          {
            do
            {
              v33 = (uint64_t)*--v19;
              *v19 = 0;
              *((_QWORD *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v19 != v23);
            v21 = *(_QWORD **)&buf[16];
            v31 = v51;
          }
          v34 = *a1;
          *(_QWORD *)a1 = v30;
          *((_QWORD *)a1 + 1) = v21;
          *(_OWORD *)&buf[8] = v34;
          v35 = (char *)*((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v31;
          v51 = v35;
          *(_QWORD *)buf = v34;
          sub_20B88B6C8((uint64_t)buf);
        }
        else
        {
          v20 = cf[0];
          cf[0] = 0;
          *v19 = v20;
          v21 = v19 + 1;
        }
        *((_QWORD *)a1 + 1) = v21;
      }
      else if (CFStringHasSuffix(v16, CFSTR("/zip_code-ja.dat")))
      {
        v22 = cf[0];
        cf[0] = 0;
        if (v49)
          CFRelease(v49);
        v49 = v22;
      }
      else if (CFStringHasSuffix(v16, CFSTR("blocklist.dat")))
      {
        v29 = cf[0];
        cf[0] = 0;
        sub_20B87E150((const void **)a1 + 4, v29);
      }
      else if (CFStringFind(v16, CFSTR("ja.rnnlm"), 0).length > 0)
      {
        v36 = CFURLCreateWithFileSystemPath(0, (CFStringRef)cf[0], kCFURLPOSIXPathStyle, 1u);
        if (v9)
          CFRelease(v9);
        v48 = v36;
        v9 = v36;
      }
LABEL_17:
      if (cf[0])
        CFRelease(cf[0]);
      continue;
    }
  }
  v37 = v49;
  if (v49)
  {
    v49 = 0;
    sub_20B87E150((const void **)a1 + 3, v37);
    v38 = sub_20B9A7C5C(9u);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      v39 = *((_QWORD *)a1 + 3);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v39;
      _os_log_debug_impl(&dword_20B7F7000, v38, OS_LOG_TYPE_DEBUG, "[JADM::setAdditionalConversionDictionaries] setting zip code dictionary path to: %@", buf, 0xCu);
    }
  }
LABEL_58:
  if (*((_QWORD *)a1 + 4) && (v40 = sub_20B9A7C5C(9u), os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)))
  {
    v45 = *((_QWORD *)a1 + 4);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "setAdditionalConversionDictionaries";
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v45;
    _os_log_debug_impl(&dword_20B7F7000, v40, OS_LOG_TYPE_DEBUG, "[JADM::%s] setting blocklist path to: %@", buf, 0x16u);
    if (v9)
      goto LABEL_61;
  }
  else if (v9)
  {
LABEL_61:
    v41 = (CFURLRef *)a1 + 5;
    v48 = 0;
    sub_20B876164((const void **)a1 + 5, v9);
    v42 = sub_20B9A7C5C(9u);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      v46 = CFURLGetString(*v41);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "setAdditionalConversionDictionaries";
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v46;
      _os_log_debug_impl(&dword_20B7F7000, v42, OS_LOG_TYPE_DEBUG, "[JADM::%s] setting language model path to: %@", buf, 0x16u);
    }
  }
  if (Mutable)
    CFRelease(Mutable);
  return a2 != 0;
}

void sub_20B88B4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B88B52C(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B87E150(a1, cf);
  }
}

BOOL sub_20B88B578(uint64_t a1, int a2, CFArrayRef theArray)
{
  _BOOL8 result;
  const void *ValueAtIndex;
  CFTypeID v7;
  const __CFArray *v8;
  BOOL v9;

  result = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (a2 == 2)
  {
    if (theArray
      && CFArrayGetCount(theArray)
      && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0), v7 = CFGetTypeID(ValueAtIndex), v7 == CFURLGetTypeID()))
    {
      v8 = sub_20B9AEC10(theArray);
      v9 = sub_20B88B654((__int128 *)a1, v8);
      if (v8)
        CFRelease(v8);
      if (!v9)
        return 0;
    }
    else
    {
      result = sub_20B88B654((__int128 *)a1, theArray);
      if (!result)
        return result;
    }
    result = 1;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return result;
}

void sub_20B88B63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88B74C((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B88B654(__int128 *a1, CFArrayRef theArray)
{
  const __CFArray *v3;
  const __CFDictionary *ValueAtIndex;

  if (theArray)
  {
    v3 = theArray;
    if (CFArrayGetCount(theArray) < 1)
    {
      theArray = 0;
    }
    else
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
      theArray = (CFArrayRef)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
    }
  }
  return sub_20B88AEB0(a1, theArray);
}

void sub_20B88B6B4()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B88B6C8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20B87E150((const void **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B88B718(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B88B74C(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void *MecabraCreateASCIIStringFromCangjie(void *a1)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(9u, a1);
}

void *MecabraCreateCangjieStringFromASCII(void *a1)
{
  return MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(9u, a1);
}

uint64_t sub_20B88B798(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24C461130;
  v2 = a1[35];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[36];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20B886A70((uint64_t)a1);
}

void sub_20B88B7F0(_QWORD *a1)
{
  sub_20B88B798(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B88B814(_QWORD *a1, const char *a2)
{
  __CFString *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  __CFString *v14;
  __CFString *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  void *v27;
  __CFString *InputKeyFromASCIIString;
  const char *v29;
  __CFString *v30;
  const char *v31;
  int v32;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  int v37;
  const char *v38;
  _BOOL4 v39;
  const __CFString *v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  BOOL v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  _QWORD *v75;
  _QWORD **v76;
  uint64_t *__p;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81[2];
  _QWORD **v82;
  _QWORD *v83[2];
  _QWORD **v84;
  _QWORD *v85[2];
  uint64_t *v86;

  v3 = (__CFString *)a1[3];
  v85[0] = 0;
  v85[1] = 0;
  v83[1] = 0;
  v84 = v85;
  v82 = v83;
  v83[0] = 0;
  v81[0] = 0;
  v81[1] = 0;
  v79 = 0;
  v80 = (uint64_t *)v81;
  __p = 0;
  v78 = 0;
  v6 = objc_msgSend_rangeOfString_(v3, a2, (uint64_t)CFSTR("z"));
  v7 = a1[4];
  if ((v7 & 0x800) == 0 || (unint64_t)objc_msgSend_length(v3, v4, v5) < 2)
  {
    v15 = CFSTR("IDXExactMatch");
    v14 = v3;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_13;
    if (objc_msgSend_hasPrefix_(v3, v4, (uint64_t)CFSTR("zx")))
    {
      v15 = CFSTR("IDXExactMatch");
      v14 = v3;
      if ((unint64_t)objc_msgSend_length(v3, v16, v17) < 3)
        goto LABEL_13;
      v18 = objc_msgSend_length(v3, v4, v5) - 2;
      v15 = CFSTR("IDXExactMatch");
      v14 = v3;
      if (objc_msgSend_rangeOfString_options_range_(v3, v19, (uint64_t)CFSTR("z"), 0, 2, v18) == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_13;
      v15 = CFSTR("IDXWildcardMatch");
      v20 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(v3, v4, (uint64_t)CFSTR("z"), CFSTR("?"), 0, 2, v18);
    }
    else
    {
      v15 = CFSTR("IDXExactMatch");
      v14 = v3;
      if ((unint64_t)objc_msgSend_length(v3, v16, v17) < 2)
        goto LABEL_13;
      v21 = objc_msgSend_length(v3, v4, v5);
      v15 = CFSTR("IDXWildcardMatch");
      v20 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(v3, v22, (uint64_t)CFSTR("z"), CFSTR("?"), 0, 0, v21);
    }
    v14 = (__CFString *)v20;
    goto LABEL_13;
  }
  if ((unint64_t)objc_msgSend_length(v3, v4, v5) > 2)
    goto LABEL_114;
  v9 = (void *)MEMORY[0x24BDD17C8];
  v10 = objc_msgSend_substringToIndex_(v3, v8, 1);
  v12 = objc_msgSend_substringFromIndex_(v3, v11, 1);
  v14 = (__CFString *)objc_msgSend_stringWithFormat_(v9, v13, (uint64_t)CFSTR("%@*%@"), v10, v12);
  v15 = CFSTR("IDXWildcardMatch");
LABEL_13:
  if (objc_msgSend_length(v3, v4, v5) == 1)
  {
    v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
    v27 = (void *)objc_msgSend_substringWithRange_(v14, v26, 0, 1);
    InputKeyFromASCIIString = (__CFString *)MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(v25, v27);
    v30 = InputKeyFromASCIIString;
    if (InputKeyFromASCIIString
      && (objc_msgSend_isEqualToString_(InputKeyFromASCIIString, v29, (uint64_t)CFSTR("重")) & 1) == 0
      && (objc_msgSend_isEqualToString_(v30, v31, (uint64_t)CFSTR("難")) & 1) == 0)
    {
      v86 = 0;
      if ((a1[4] & 0x2000000) != 0)
        v32 = 4096;
      else
        v32 = 1;
      v86 = (uint64_t *)sub_20B886B2C(a1, v32, v30, v30, 0, 0);
      sub_20B889E48(&v80, &v86, (uint64_t *)&v86);
    }

  }
  if ((unint64_t)objc_msgSend_length(v14, v23, v24) >= 2)
  {
    v35 = 0;
    while (v35 < objc_msgSend_length(v14, v33, v34))
    {
      v37 = objc_msgSend_characterAtIndex_(v14, v36, v35++);
      if (v37 != 63)
        goto LABEL_28;
    }
    v14 = (__CFString *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v14, v36, (uint64_t)CFSTR("?"), CFSTR("@"));
  }
LABEL_28:
  if ((a1[4] & 2) == 0)
  {
    if ((v7 & 0x800) == 0 && v15 == CFSTR("IDXWildcardMatch"))
    {
      v39 = (objc_msgSend_isEqualToString_(v3, v33, (uint64_t)CFSTR("xzf")) & 1) != 0
         || (objc_msgSend_isEqualToString_(v3, v38, (uint64_t)CFSTR("xzh")) & 1) != 0
         || objc_msgSend_isEqualToString_(v3, v38, (uint64_t)CFSTR("xzr"));
      v40 = (const __CFString *)objc_msgSend_stringByAppendingString_(v14, v38, (uint64_t)CFSTR("*"));
      sub_20B88756C(a1, (uint64_t)&v84, v40, (uint64_t)v15, (uint64_t)&v80, 1);
      goto LABEL_38;
    }
    sub_20B88756C(a1, (uint64_t)&v84, v14, (uint64_t)CFSTR("IDXPrefixMatch"), (uint64_t)&v80, 1);
  }
  v39 = 0;
LABEL_38:
  if (v15 == CFSTR("IDXWildcardMatch"))
    v41 = (uint64_t **)&v84;
  else
    v41 = &v80;
  if (v15 == CFSTR("IDXWildcardMatch"))
    v42 = &v80;
  else
    v42 = (uint64_t **)&v82;
  sub_20B88756C(a1, (uint64_t)v41, v14, (uint64_t)v15, (uint64_t)v42, 1);
  if (v39)
    sub_20B88756C(a1, (uint64_t)&v80, v3, (uint64_t)CFSTR("IDXExactMatch"), (uint64_t)&v82, 1);
  v43 = v80;
  if (v80 != (uint64_t *)v81)
  {
    v44 = 0;
    v45 = 0;
    v46 = v80;
    do
    {
      v47 = v44;
      v48 = (uint64_t *)v46[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (uint64_t *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (uint64_t *)v46[2];
          v50 = *v49 == (_QWORD)v46;
          v46 = v49;
        }
        while (!v50);
      }
      ++v44;
      v46 = v49;
    }
    while (v49 != (uint64_t *)v81);
    if (v47 >= v79 >> 3)
    {
      v52 = v44;
      if (v44 >> 61)
        sub_20B80CDD8();
      if (v79 >> 2 > v44)
        v52 = v79 >> 2;
      v53 = v52;
      if (v52)
        v54 = (uint64_t *)sub_20B800BE8((uint64_t)&v79, v52);
      else
        v54 = 0;
      v59 = &v54[v44];
      v60 = v54;
      do
      {
        *v60++ = v43[4];
        v61 = (uint64_t *)v43[1];
        if (v61)
        {
          do
          {
            v62 = v61;
            v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = (uint64_t *)v43[2];
            v50 = *v62 == (_QWORD)v43;
            v43 = v62;
          }
          while (!v50);
        }
        v43 = v62;
      }
      while (v60 != v59);
      __p = v54;
      v78 = v59;
      v79 = (uint64_t)&v54[v53];
    }
    else
    {
      v86 = v80;
      sub_20B88C574(&v86, v47 + 1);
      if (v47 >= 0)
      {
        v86 = v43;
        sub_20B88C574(&v86, 0);
        if (v86 == (uint64_t *)v81)
        {
          v56 = 0;
        }
        else
        {
          v55 = v86;
          v56 = 0;
          do
          {
            *v56 = v55[4];
            v57 = (uint64_t *)v55[1];
            if (v57)
            {
              do
              {
                v58 = v57;
                v57 = (uint64_t *)*v57;
              }
              while (v57);
            }
            else
            {
              do
              {
                v58 = (uint64_t *)v55[2];
                v50 = *v58 == (_QWORD)v55;
                v55 = v58;
              }
              while (!v50);
            }
            ++v56;
            v55 = v58;
          }
          while (v58 != (uint64_t *)v81);
        }
        v78 = v56;
      }
      else
      {
        v51 = v86;
        v78 = 0;
        if (8 * v44)
          memmove((void *)(-8 * ((uint64_t)(-8 * v44) >> 3)), 0, -8 * v44);
        if (v51 != v43)
        {
          do
          {
            *v45 = v43[4];
            v63 = (uint64_t *)v43[1];
            if (v63)
            {
              do
              {
                v64 = v63;
                v63 = (uint64_t *)*v63;
              }
              while (v63);
            }
            else
            {
              do
              {
                v64 = (uint64_t *)v43[2];
                v50 = *v64 == (_QWORD)v43;
                v43 = v64;
              }
              while (!v50);
            }
            ++v45;
            v43 = v64;
          }
          while (v64 != v51);
        }
      }
    }
  }
  if (v78 != __p)
    sub_20B88C078((void *)a1[5], __p, v78, 0xFFFFFFFFFFFFFFFFLL);
  sub_20B888158((uint64_t)a1, (const __CFString *)a1[3]);
  if ((v7 & 0x800) != 0)
  {
    if (objc_msgSend_length(v14, v65, v66) == 1)
      v68 = 200;
    else
      v68 = -1;
  }
  else if ((objc_msgSend_hasPrefix_(v14, v65, (uint64_t)CFSTR("z")) & 1) != 0
         || objc_msgSend_hasPrefix_(v14, v67, (uint64_t)CFSTR("yyy")))
  {
    v68 = -1;
  }
  else
  {
    v68 = 50;
  }
  v69 = v84;
  if (v84 != v85)
  {
    v70 = 0;
    v71 = (void *)a1[5];
    do
    {
      v72 = v69[4];
      if (v70 >= v68)
      {
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
      }
      else
      {
        v73 = (void *)sub_20B8E1754(v72);
        objc_msgSend_addObject_(v71, v74, (uint64_t)v73);

      }
      v75 = (_QWORD *)v69[1];
      if (v75)
      {
        do
        {
          v76 = (_QWORD **)v75;
          v75 = (_QWORD *)*v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (_QWORD **)v69[2];
          v50 = *v76 == v69;
          v69 = v76;
        }
        while (!v50);
      }
      ++v70;
      v69 = v76;
    }
    while (v76 != v85);
  }
  if (__p)
    operator delete(__p);
LABEL_114:
  sub_20B8292CC((uint64_t)&v80, v81[0]);
  sub_20B8292CC((uint64_t)&v82, v83[0]);
  sub_20B8292CC((uint64_t)&v84, v85[0]);
}

void sub_20B88C000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,_QWORD *a22)
{
  if (__p)
    operator delete(__p);
  sub_20B8292CC((uint64_t)&a15, a16);
  sub_20B8292CC((uint64_t)&a18, a19);
  sub_20B8292CC((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_20B88C078(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    v8 = 0;
    do
    {
      v9 = *v6;
      if (v8 >= a4)
      {
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      }
      else
      {
        v10 = (void *)sub_20B8E1754(v9);
        objc_msgSend_addObject_(a1, v11, (uint64_t)v10);

      }
      ++v8;
      ++v6;
    }
    while (v6 != a3);
  }
}

void *sub_20B88C104(uint64_t a1, void *a2)
{
  return MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(9u, a2);
}

BOOL sub_20B88C10C(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 34) & 0x20) == 0;
}

uint64_t sub_20B88C11C(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  const UInt8 *v8;
  int v9;
  const UInt8 *v10;
  CFIndex v11;
  const __CFURL *v12;
  uint64_t v13;

  v4 = *(_DWORD *)a1;
  v5 = sub_20B8D0E3C(*(_DWORD *)a1);
  if (v5 == 5)
  {
    v6 = sub_20BA1C4F4();
    v5 = sub_20BA1C580(v6, 5);
  }
  v7 = (_QWORD *)sub_20B9AE60C();
  v8 = (const UInt8 *)sub_20B9AE6A0(v7, v5, off_254729648[0], off_2547295E0[0]);
  v9 = *((char *)v8 + 23);
  if (v9 >= 0)
    v10 = v8;
  else
    v10 = *(const UInt8 **)v8;
  if (v9 >= 0)
    v11 = v8[23];
  else
    v11 = *((_QWORD *)v8 + 1);
  v12 = CFURLCreateFromFileSystemRepresentation(0, v10, v11, 0);
  v13 = operator new();
  sub_20B88683C(v13, v12, *(void **)(a1 + 24), v5, 0);
  *(_QWORD *)v13 = &off_24C461130;
  *(_QWORD *)(v13 + 280) = 0;
  *(_QWORD *)(v13 + 288) = 0;
  *(_DWORD *)(v13 + 296) = v4;
  *(_QWORD *)(v13 + 304) = a2;
  if (v12)
    CFRelease(v12);
  return v13;
}

void sub_20B88C228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x10E1C4040DB9D86);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B88C260(uint64_t a1, void *a2, void *a3, void *a4)
{
  const char *v6;
  uint64_t result;
  const char *v8;

  if ((unint64_t)objc_msgSend_length(a2, (const char *)a2, (uint64_t)a3) < 2)
    return 0;
  result = objc_msgSend_isEqualToString_(a3, v6, (uint64_t)CFSTR("IDXExactMatch"));
  if ((_DWORD)result)
    return !sub_20B886740(a4, v8);
  return result;
}

BOOL sub_20B88C2BC(uint64_t a1, const char *a2)
{
  return objc_msgSend_rangeOfString_(*(void **)(a1 + 16), a2, (uint64_t)CFSTR("z")) == 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_20B88C2E8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  const void *v7;
  char *v8;
  void (**v9)(uint64_t *);
  _QWORD v11[5];
  _QWORD v12[5];

  if ((*(_BYTE *)(a1 + 33) & 8) != 0)
  {
    v2 = a1 + 288;
    if (!*(_QWORD *)(a1 + 288))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
      v4 = sub_20B8D0E3C(v3);
      v5 = (uint64_t *)operator new();
      v6 = v5;
      v7 = *(const void **)(a1 + 64);
      if (v4 == 5)
      {
        v12[0] = MEMORY[0x24BDAC760];
        v12[1] = 3221225472;
        v12[2] = sub_20B88C438;
        v12[3] = &unk_24C4993E0;
        v12[4] = a1;
        sub_20B9B3C58(v5, v7, v12);
        v8 = (char *)&unk_24C464928;
      }
      else
      {
        v11[0] = MEMORY[0x24BDAC760];
        v11[1] = 3221225472;
        v11[2] = sub_20B88C448;
        v11[3] = &unk_24C4993E0;
        v11[4] = a1;
        sub_20B9B3C58(v5, v7, v11);
        v8 = (char *)&unk_24C461F50;
      }
      v9 = (void (**)(uint64_t *))(v8 + 16);
      *v6 = (uint64_t)v9;
      *(_QWORD *)v2 = v6;
      v9[2](v6);
    }
  }
  else
  {
    v2 = a1 + 280;
  }
  return *(_QWORD *)v2;
}

void sub_20B88C410(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4022FF22E7);
  _Unwind_Resume(a1);
}

uint64_t sub_20B88C438(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_20B88C448(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 304))(*(_QWORD *)(a1 + 32));
}

void sub_20B88C458(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  signed int v4;
  const UInt8 *v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  const __CFURL *v9;
  int v10;
  int v11;

  if (*(_BYTE *)(a1[38] + 105))
  {
    v2 = (_QWORD *)sub_20B9AE60C();
    v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
    v4 = sub_20B8D0E3C(v3);
    v5 = (const UInt8 *)sub_20B9AE6A0(v2, v4, off_254729648[0], off_2547295E0[0]);
    v6 = *((char *)v5 + 23);
    if (v6 >= 0)
      v7 = v5;
    else
      v7 = *(const UInt8 **)v5;
    if (v6 >= 0)
      v8 = v5[23];
    else
      v8 = *((_QWORD *)v5 + 1);
    v9 = CFURLCreateFromFileSystemRepresentation(0, v7, v8, 0);
    if (v9)
      sub_20B886A0C((uint64_t)a1, v9, 0);
    (*(void (**)(_QWORD *))(*a1 + 264))(a1);
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
    v11 = sub_20B8D0E3C(v10);
    sub_20B9F80E0((uint64_t)(a1 + 9), v11);
    if (v9)
      CFRelease(v9);
  }
}

void sub_20B88C548(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B88C56C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 296);
}

_QWORD **sub_20B88C574(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

uint64_t sub_20B88C600(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  char v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  void **v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  void **v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20B88C9DC(*(char **)(a3 + 32), *(_QWORD *)(a3 + 40), *(void **)a3, *(_QWORD *)(a3 + 8), 0, 83, 4, 0, (uint64_t *)&v33, 0.0);
  v10 = v33;
  v33 = 0;
  v31 = v10;
  v37[0] = &unk_24C459188;
  v38 = v37;
  sub_20B8FDA94(a2, &v31, 1, 0, (uint64_t)v37);
  v11 = v38;
  if (v38 == v37)
  {
    v12 = 4;
    v11 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  v13 = v31;
  v31 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 16))(v13);
  if ((*(unsigned int (**)(_QWORD *))(*a1[2] + 24))(a1[2]))
  {
    v14 = *(_QWORD **)(a3 + 64);
    if (v14)
    {
      v28 = a4;
      v29 = a5;
      sub_20B88CABC((uint64_t *)&v31, v14, 0x100uLL);
      v15 = v31;
      v16 = v32;
      if (v31 != v32)
      {
        while (1)
        {
          v17 = *((unsigned __int16 *)v15 + 38);
          v18 = *((_BYTE *)v15 + 23);
          v19 = v18 >= 0 ? *((unsigned __int8 *)v15 + 23) : v15[1];
          v20 = v18 >= 0 ? v15 : (_QWORD *)*v15;
          v21 = v19 != *(_QWORD *)(a3 + 40) || memcmp(v20, *(const void **)(a3 + 32), 2 * v19) != 0;
          sub_20B88C9DC((char *)v20, v19, *(void **)a3, *(_QWORD *)(a3 + 8), v21, (v17 << 29 >> 31) & 0x51, 4, 0, (uint64_t *)&v34, *((float *)v15 + 18));
          v22 = v34;
          v34 = 0;
          v35[0] = &unk_24C459188;
          v30 = v22;
          v36 = v35;
          sub_20B8FDA94(a2, &v30, 1, 0, (uint64_t)v35);
          v23 = v36;
          if (v36 == v35)
            break;
          if (v36)
          {
            v24 = 5;
LABEL_24:
            (*(void (**)(void))(*v23 + 8 * v24))();
          }
          v25 = v30;
          v30 = 0;
          if (v25)
            (*((void (**)(void **))*v25 + 2))(v25);
          v26 = v34;
          v34 = 0;
          if (v26)
            (*((void (**)(void **))*v26 + 2))(v26);
          v15 += 10;
          if (v15 == v16)
            goto LABEL_30;
        }
        v23 = v35;
        v24 = 4;
        goto LABEL_24;
      }
LABEL_30:
      v34 = (void **)&v31;
      sub_20B88DA08(&v34);
      a5 = v29;
      a4 = v28;
    }
  }
  ((void (*)(_QWORD **, _QWORD *, uint64_t))(*a1)[3])(a1, a2, a4);
  if ((a5 & 0x800000) == 0)
    sub_20B88CB9C((uint64_t)a1, a2);
  sub_20B9D77C4((uint64_t)a1, a2);
  result = (uint64_t)v33;
  v33 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B88C8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 16))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B88C9DC@<X0>(char *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, float a10@<S0>)
{
  uint64_t v20;
  uint64_t result;

  v20 = operator new();
  result = sub_20B9596C4(v20, a1, a2, a3, a4, a5, a6, a7, a10, 0, 0, a8);
  *a9 = v20;
  return result;
}

void sub_20B88CA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C402D14F19CLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B88CABC(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C469950;
  v6 = v5;
  sub_20B9DA77C(a2, a3, (uint64_t)v5, a1);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20B88CB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B88CB9C(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25472C830);
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    v5 = a2;
    v6 = __cxa_guard_acquire(&qword_25472C830);
    a2 = v5;
    v7 = v6;
    a1 = v8;
    if (v7)
    {
      qword_25472C818 = 3;
      unk_25472C820 = xmmword_20BA39DA0;
      __cxa_guard_release(&qword_25472C830);
      a1 = v8;
      a2 = v5;
    }
  }
  v9[0] = &off_24C46B528;
  v10 = v9;
  sub_20B9D79B8(a1, a2, (uint64_t)&qword_25472C818, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v4 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20B88CCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B88CCE0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *__p[2];
  char v21;
  void *v22;
  unint64_t v23;
  unsigned __int8 v24;

  v4 = a2[1];
  if (v4 != a2[3] || !v4)
    goto LABEL_31;
  v6 = 0;
  v7 = *a2;
  v8 = (char *)a2[2];
  v9 = 2 * v4;
  v10 = MEMORY[0x24BDAC740];
  while (1)
  {
    v11 = *(unsigned __int16 *)&v8[v6];
    if (v11 <= 0x7F)
      break;
    if (!__maskrune(v11, 0x8000uLL))
      goto LABEL_10;
LABEL_8:
    v6 += 2;
    if (v9 == v6)
      goto LABEL_31;
  }
  if ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x8000) != 0)
    goto LABEL_8;
LABEL_10:
  if (!v6 || v9 == v6)
  {
LABEL_31:
    sub_20B87C9E0((_BYTE *)a3, byte_20BA93B9E);
    return;
  }
  sub_20B88CEDC(a1, (void *)(v7 + v6), v4 - (v6 >> 1), 0, (uint64_t)&v22);
  v12 = v22;
  if ((v24 & 0x80u) == 0)
    v12 = &v22;
  v13 = v24;
  if ((v24 & 0x80u) != 0)
    v13 = v23;
  if (v13)
  {
    v14 = 2 * v13;
    while ((unsigned __int16)((unsigned __int16)(*v12 + 21504) >> 2) < 0xAE9u)
    {
      ++v12;
      v14 -= 2;
      if (!v14)
        goto LABEL_20;
    }
    sub_20B87C9E0((_BYTE *)a3, byte_20BA93B9E);
  }
  else
  {
LABEL_20:
    if (v8)
      v15 = v6 >> 1;
    else
      v15 = 0;
    sub_20B877ED0(__p, v8, v15);
    if ((v24 & 0x80u) == 0)
      v16 = &v22;
    else
      v16 = v22;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = v23;
    v18 = sub_20B88DACC((uint64_t)__p, v16, v17);
    v19 = *(_OWORD *)v18;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v18 + 16);
    *(_OWORD *)a3 = v19;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)v18 = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if ((char)v24 < 0)
    operator delete(v22);
}

void sub_20B88CEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B88CEDC(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13[3];
  void *__dst[2];
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  void **v24[16];
  void *v25;
  uint64_t v26;
  void **v27;

  sub_20BA1EED0((uint64_t)a2, a3, 0, 0, (uint64_t *)&v25);
  sub_20B88D10C(a1, a2, a3, (uint64_t)&v25, a4, 0, (uint64_t)v24);
  sub_20B88CABC(v13, v24, 1uLL);
  v10 = v13[0];
  if (*(char *)(v13[0] + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)v13[0], *(_QWORD *)(v13[0] + 8));
  }
  else
  {
    v11 = *(_OWORD *)v13[0];
    v15 = *(_QWORD *)(v13[0] + 16);
    *(_OWORD *)__dst = v11;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_20B88DCD4(&v16, *(const void **)(v10 + 24), *(_QWORD *)(v10 + 32), (uint64_t)(*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24)) >> 3);
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B87ACC8(&__p, *(const void **)(v10 + 48), *(_QWORD *)(v10 + 56), (uint64_t)(*(_QWORD *)(v10 + 56) - *(_QWORD *)(v10 + 48)) >> 1);
  v12 = *(_DWORD *)(v10 + 72);
  v23 = *(_WORD *)(v10 + 76);
  v22 = v12;
  v27 = (void **)v13;
  sub_20B88DA08(&v27);
  if (SHIBYTE(v15) < 0)
  {
    sub_20B88DD4C((_BYTE *)a5, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)a5 = *(_OWORD *)__dst;
    *(_QWORD *)(a5 + 16) = v15;
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__dst[0]);
  sub_20B9D98E4((uint64_t)v24);
  v25 = &unk_24C499568;
  v24[0] = (void **)&v26;
  sub_20B88DF54(v24);
}

void sub_20B88D074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  sub_20B88D35C((uint64_t)&a13);
  sub_20B9D98E4((uint64_t)&a27);
  *(_QWORD *)(v27 - 88) = &unk_24C499568;
  a27 = v27 - 80;
  sub_20B88DF54((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_20B88D10C(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  char *v21;
  _DWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int16 v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a7 = &off_24C4613C8;
  *(_OWORD *)(a7 + 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_OWORD *)(a7 + 72) = 0u;
  *(_OWORD *)(a7 + 88) = 0u;
  *(_OWORD *)(a7 + 104) = 0u;
  *(_QWORD *)(a7 + 120) = 0;
  sub_20B9D9C50((void **)a7, a2, a3);
  v14 = 32;
  if (a5)
    v14 = 40;
  v15 = *(_QWORD *)(a1 + v14);
  if (v15)
    v16 = a3 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = 0;
    while (1)
    {
      v26 = *((_WORD *)a2 + v17);
      v18 = sub_20B9DA2F8(a7, v17, 1, 0, &v26, 1uLL);
      v19 = -10.0;
      if (a3 - 1 == v17)
      {
        v20 = 0;
        while (*(unsigned __int16 *)&a112141718191a1[v20] != v26)
        {
          v20 += 2;
          if (v20 == 38)
          {
            v21 = 0;
            goto LABEL_14;
          }
        }
        v21 = &a112141718191a1[v20];
LABEL_14:
        if (v21 - "112141718191A1B1C1E1F1G1H1I1J1K1L1M1N1" == -2 || v21 == 0)
          v19 = -10.0;
        else
          v19 = -0.1;
      }
      *(float *)(v18 + 24) = v19;
      *(_DWORD *)(v18 + 28) = 0;
      v23 = operator new(0x30uLL);
      *(_QWORD *)v23 = &off_24C4994E8;
      v23[2] = v17;
      *((_QWORD *)v23 + 2) = a7;
      *((_QWORD *)v23 + 3) = a2;
      *((_QWORD *)v23 + 4) = a3;
      *((_BYTE *)v23 + 40) = a5;
      *((_BYTE *)v23 + 41) = a6;
      v28 = v23;
      sub_20B8F9E5C(*(_QWORD *)(v15 + 344), a4, (uint64_t)v27, 0, v17);
      v24 = v28;
      if (v28 == v27)
        break;
      if (v28)
      {
        v25 = 5;
LABEL_24:
        (*(void (**)(void))(*v24 + 8 * v25))();
      }
      if (++v17 == a3)
        return;
    }
    v24 = v27;
    v25 = 4;
    goto LABEL_24;
  }
}

void sub_20B88D308(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B9D98E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B88D35C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B88D3AC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C499568;
  v3 = (void **)(a1 + 8);
  sub_20B88DF54(&v3);
  return a1;
}

void sub_20B88D3F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = 32;
  if (a5)
    v6 = 40;
  v7 = *(_QWORD *)(a1 + v6);
  if (!v7)
    return;
  if ((a6 & 1) == 0)
  {
    v18 = a2[1];
    if (!v18)
      return;
    v19 = 0;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v20 = *a2;
      v21 = operator new(0x20uLL);
      *(_QWORD *)v21 = &off_24C46B4D0;
      *((_DWORD *)v21 + 2) = v19;
      *((_QWORD *)v21 + 2) = a3;
      *((_QWORD *)v21 + 3) = &v25;
      v29 = v21;
      if (v18 < (int)v19)
        break;
      (*(void (**)(_QWORD, uint64_t, unint64_t, _BYTE *))(**(_QWORD **)(v7 + 344) + 8))(*(_QWORD *)(v7 + 344), v20 + 2 * (int)v19, 2 * (v18 - (int)v19), v28);
      v21 = v29;
      if (v29 == v28)
      {
        v21 = v28;
        v22 = 4;
        goto LABEL_26;
      }
      if (v29)
        break;
LABEL_27:
      v23 = v25;
      v24 = (uint64_t *)v26;
      if (v25 != (uint64_t *)v26)
      {
        do
        {
          sub_20B88D6D8(*(_QWORD *)(a4 + 24), v19, (uint64_t)v23, v23[1], 0.0);
          v23 += 2;
        }
        while (v23 != v24);
        v23 = v25;
      }
      if (v23)
      {
        v26 = (uint64_t)v23;
        operator delete(v23);
      }
      ++v19;
      v18 = a2[1];
      if (v18 <= v19)
        return;
    }
    v22 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
    goto LABEL_27;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[7] + 24))(a2[7]))
  {
    v11 = 0;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v12 = a2[7];
      v13 = operator new(0x20uLL);
      *(_QWORD *)v13 = &off_24C46B478;
      v13[2] = v11;
      *((_QWORD *)v13 + 2) = a3;
      *((_QWORD *)v13 + 3) = &v25;
      v29 = v13;
      sub_20B8F9E5C(*(_QWORD *)(v7 + 344), v12, (uint64_t)v28, 0, v11);
      v14 = v29;
      if (v29 == v28)
        break;
      if (v29)
      {
        v15 = 5;
LABEL_11:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
      v16 = (uint64_t)v25;
      v17 = v26;
      if (v25 != (uint64_t *)v26)
      {
        do
        {
          sub_20B88D6D8(*(_QWORD *)(a4 + 24), v11, v16, *(_QWORD *)(v16 + 8), *(float *)(v16 + 4));
          v16 += 16;
        }
        while (v16 != v17);
        v16 = (uint64_t)v25;
      }
      if (v16)
      {
        v26 = v16;
        operator delete((void *)v16);
      }
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[7] + 24))(a2[7]) <= (unint64_t)++v11)
        return;
    }
    v14 = v28;
    v15 = 4;
    goto LABEL_11;
  }
}

void sub_20B88D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B88D6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a3;
  v10 = a2;
  v8 = 1;
  v7 = a5;
  v6 = a4;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, double *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v10, &v9, &v8, &v7, &v6);
}

_QWORD *sub_20B88D72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v10[0] = &unk_24C4695E0;
  v10[1] = sub_20B88D89C;
  v11 = v10;
  v8[0] = &unk_24C469588;
  v8[1] = sub_20B8FF4E0;
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2, a3, v10, v8, 128);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = v11;
  if (v11 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20B88D830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B88D89C(double a1, double a2)
{
  return (int)(a2 * -5500.0 + a1 * -4400.0);
}

_QWORD *sub_20B88D8BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C4617D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B88D904(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C4617D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B88D968()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B88D97C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469950;
  return result;
}

void sub_20B88D9A0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469950;
}

uint64_t sub_20B88D9B8()
{
  return 0;
}

uint64_t sub_20B88D9C0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88D9FC()
{
  return &unk_24C45EC80;
}

void sub_20B88DA08(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_20B88DA78(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B88DA78(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B88DACC(uint64_t a1, void *__src, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v6 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 10;
    v7 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v6 - v7 >= a3)
  {
    if (a3)
    {
      v8 = a1;
      if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
        v8 = *(_QWORD *)a1;
      memmove((void *)(v8 + 2 * v7), __src, 2 * a3);
      v9 = v7 + a3;
      if (*(char *)(a1 + 23) < 0)
        *(_QWORD *)(a1 + 8) = v9;
      else
        *(_BYTE *)(a1 + 23) = v9 & 0x7F;
      *(_WORD *)(v8 + 2 * v9) = 0;
    }
  }
  else
  {
    sub_20B88DB90(a1, v6, a3 - v6 + v7, v7, v7, 0, a3, __src);
  }
  return a1;
}

void sub_20B88DB90(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (0x7FFFFFFFFFFFFFF6 - a2 < a3)
    sub_20B877F70();
  v15 = (char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v15 = *(char **)a1;
  v16 = a3 + a2;
  if (a3 + a2 <= 2 * a2)
    v16 = 2 * a2;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB)
    v17 = v16 | 3;
  if (v16 >= 0xB)
    v18 = v17 + 1;
  else
    v18 = 11;
  if (a2 > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = sub_20B80FD48(a1, v19);
  v21 = v20;
  v23 = v22;
  if (a5)
    memmove(v20, v15, 2 * a5);
  if (a7)
    memmove(&v21[a5], a8, 2 * a7);
  v24 = a4 - (a6 + a5);
  if (v24)
    memmove(&v21[a5 + a7], &v15[2 * a5 + 2 * a6], 2 * v24);
  if (a2 != 10)
    operator delete(v15);
  v25 = a7 + a5 + v24;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v25;
  *(_QWORD *)(a1 + 16) = v23 | 0x8000000000000000;
  v21[v25] = 0;
}

_QWORD *sub_20B88DCD4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B812928(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B88DD30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B88DD4C(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = __dst;
  if (a3 > 0xA)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20B877F70();
    v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v6 = a3 | 3;
    v7 = sub_20B80FD48((uint64_t)__dst, v6 + 1);
    v5[1] = a3;
    v5[2] = v8 | 0x8000000000000000;
    *v5 = v7;
    v5 = v7;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, 2 * a3 + 2);
}

uint64_t sub_20B88DDDC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C499568;
  v3 = (void **)(a1 + 8);
  sub_20B88DF54(&v3);
  return MEMORY[0x20BD39CB0](a1, 0xA1C4030951706);
}

unint64_t sub_20B88DE38(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2)) >> 3);
}

unint64_t sub_20B88DE60(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

double sub_20B88DE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 40 * a3 + 24);
}

uint64_t sub_20B88DE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 40 * a3 + 32);
}

char *sub_20B88DEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;

  result = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 40 * a3);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_20B88DEEC()
{
  return 0;
}

uint64_t sub_20B88DEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  _QWORD v9[2];

  v8 = 0;
  v9[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v9[1] = v5;
  v6 = *(_QWORD *)(a4 + 24);
  if (!v6)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, _QWORD *, char *))(*(_QWORD *)v6 + 48))(v6, v9, &v8);
}

uint64_t sub_20B88DF4C()
{
  return 1;
}

void sub_20B88DF54(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_20B88DFC4(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B88DFC4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B88E004((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B88E004(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

void sub_20B88E054()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B88E068(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C4994E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20B88E0B0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C4994E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B88E0E0(uint64_t a1, float *a2, const void **a3, unint64_t *a4, unint64_t *a5)
{
  const void *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  char *v21;
  float v23;
  uint64_t v24;
  void *v25[2];
  unsigned __int8 v26;
  __int16 v27;

  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  v10 = *a2;
  v27 = *(_DWORD *)a2;
  v11 = v8 >> 1;
  if (!v7)
    v11 = 0;
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
    v13 = v9;
  else
    v13 = 0;
  v14 = v11 != v13 || memcmp(v7, (const void *)(v12 + 2 * *(int *)(a1 + 8)), 2 * v11) != 0;
  sub_20B9DECCC(LOWORD(v10), (uint64_t)v25);
  if ((char)v26 < 0)
  {
    v15 = (unint64_t)v25[1];
    operator delete(v25[0]);
  }
  else
  {
    v15 = v26;
  }
  if (*(_BYTE *)(a1 + 40))
    v16 = 1;
  else
    v16 = v15 >= v9;
  v17 = v16;
  if (v16 || (!*(_BYTE *)(a1 + 41) ? (v18 = 1) : (v18 = v14), (v18 & 1) == 0))
  {
    v19 = 0;
    if (v17)
      v20 = v14;
    else
      v20 = v14 | 4;
    while (*(unsigned __int16 *)&aO1p1q1r1s1t1u1[v19] != LOWORD(v10))
    {
      v19 += 2;
      if (v19 == 42)
      {
        v21 = 0;
        goto LABEL_30;
      }
    }
    v21 = &aO1p1q1r1s1t1u1[v19];
LABEL_30:
      v23 = a2[1];
    else
      v23 = -10.0;
    v24 = sub_20B9DA2F8(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 8), v9, v20, &v27, 1uLL);
    *(float *)(v24 + 24) = v23;
    *(float *)(v24 + 28) = a2[1];
  }
}

uint64_t sub_20B88E234(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C499548))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88E270()
{
  return &unk_24C499548;
}

void sub_20B88E280()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B88E294(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B88E2D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B478;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B88E2FC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char **v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;

  v6 = *a5;
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 16);
  v22 = *a2;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    sub_20B80BB74();
  if ((*(unsigned int (**)(uint64_t, __int16 *))(*(_QWORD *)v9 + 48))(v9, &v22))
  {
    v11 = *(char ***)(a1 + 24);
    v13 = v11[1];
    v12 = (unint64_t)v11[2];
    if ((unint64_t)v13 >= v12)
    {
      v15 = *v11;
      v16 = (v13 - *v11) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        sub_20B80CDD8();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 60)
          sub_20B800BC0();
        v20 = (char *)operator new(16 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[16 * v16];
      *(_WORD *)v21 = v7;
      *((_DWORD *)v21 + 1) = a2[1];
      *((_QWORD *)v21 + 1) = v6;
      v14 = v21 + 16;
      if (v13 != v15)
      {
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v13 - 1);
          v21 -= 16;
          v13 -= 16;
        }
        while (v13 != v15);
        v13 = *v11;
      }
      *v11 = v21;
      v11[1] = v14;
      v11[2] = &v20[16 * v19];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_WORD *)v13 = v7;
      *((_DWORD *)v13 + 1) = a2[1];
      *((_QWORD *)v13 + 1) = v6;
      v14 = v13 + 16;
    }
    v11[1] = v14;
  }
}

uint64_t sub_20B88E44C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F170))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88E488()
{
  return &unk_24C45F170;
}

void sub_20B88E498()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B88E4AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B4D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B88E4EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B4D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B88E514(uint64_t a1, int *a2, uint64_t a3, unint64_t *a4)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;

  v5 = *a2;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 16);
  v21 = *a2;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    sub_20B80BB74();
  if ((*(unsigned int (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 48))(v8, &v21))
  {
    v9 = *(char ***)(a1 + 24);
    v10 = v6 >> 1;
    v12 = v9[1];
    v11 = (unint64_t)v9[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = *v9;
      v15 = (v12 - *v9) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        sub_20B80CDD8();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18 >> 60)
        sub_20B800BC0();
      v19 = (char *)operator new(16 * v18);
      v20 = &v19[16 * v15];
      *(_WORD *)v20 = v5;
      *((_QWORD *)v20 + 1) = v10;
      v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
          v20 -= 16;
          v12 -= 16;
        }
        while (v12 != v14);
        v12 = v14;
      }
      *v9 = v20;
      v9[1] = v13;
      v9[2] = &v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_WORD *)v12 = v5;
      *((_QWORD *)v12 + 1) = v10;
      v13 = v12 + 16;
    }
    v9[1] = v13;
  }
}

uint64_t sub_20B88E648(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F180))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88E684()
{
  return &unk_24C45F180;
}

void sub_20B88E694()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B88E6A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C4695E0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B88E6E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C4695E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B88E700(uint64_t a1, double *a2, double *a3)
{
  return (*(uint64_t (**)(double, double))(a1 + 8))(*a2, *a3);
}

uint64_t sub_20B88E710(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EBB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88E74C()
{
  return &unk_24C45EBB0;
}

void sub_20B88E75C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B88E770(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C469588;
  result[1] = v3;
  return result;
}

uint64_t sub_20B88E7A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C469588;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B88E7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_20B88E7D8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EB90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88E814()
{
  return &unk_24C45EB90;
}

void sub_20B88E824()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B88E838()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46B528;
  return result;
}

void sub_20B88E85C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46B528;
}

uint64_t sub_20B88E874(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)*a2 + 96))(*a2) == 79)
  {
    v5 = (unsigned __int16 *)*((_QWORD *)v2 + 4);
    v4 = v2 + 16;
    v3 = v5;
    v6 = *((char *)v4 + 23);
    if (v6 >= 0)
      v7 = v4;
    else
      v7 = v3;
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)v4 + 23);
    else
      v8 = *((_QWORD *)v4 + 1);
    sub_20B9DEB60((uint64_t)v7, v8);
    if (v7)
      v10 = v8 - v9;
    else
      v10 = 0;
    return sub_20B9DE9BC(v7, v10);
  }
  else
  {
    return (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v2 + 96))(v2) == 83
        || (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v2 + 96))(v2) == 81
        || (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v2 + 96))(v2) == 71;
  }
}

uint64_t sub_20B88E93C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B88E978()
{
  return &unk_24C45F190;
}

_QWORD *sub_20B88E984(_QWORD *a1, signed int a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v7;
  int v8;
  _QWORD v9[2];
  _QWORD v10[51];
  _QWORD v11[21];

  v11[19] = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a1 + 1;
  a1[4] = 0;
  a1[3] = a1 + 4;
  a1[5] = 0;
  v3 = (_QWORD *)sub_20B9AE60C();
  sub_20B9AE6A0(v3, a2, off_254729648[0], off_2547295C0[0]);
  sub_20B88EF60(v9);
  if (v10[15])
  {
    v8 = 0;
    std::istream::read();
    v7 = 0;
    std::istream::read();
    v4 = operator new[]();
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v9 + *(_QWORD *)(v9[0] - 24)), *(_DWORD *)((char *)&v10[2] + *(_QWORD *)(v9[0] - 24)) | 4);
  }
  v9[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](v10);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](v11);
  return a1;
}

void sub_20B88EE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  sub_20B82EC24(&a40);
  sub_20B88F980(a10, *(_QWORD **)(a15 + 32));
  sub_20B8292CC(a15, *(_QWORD **)(a15 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20B88EF60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x20BD399C8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20B88F040(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD39C2C](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t sub_20B88F078(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  void **v11;
  void *__p[2];
  char v14;

  v3 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v4 = a1 + 32;
  v5 = v6;
  if (v6)
  {
    v7 = v4;
    do
    {
      v8 = *(unsigned __int16 *)(v5 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v5;
      else
        v10 = (uint64_t *)(v5 + 8);
      if (v9)
        v7 = v5;
      v5 = *v10;
    }
    while (*v10);
    if (v7 != v4 && *(unsigned __int16 *)(v7 + 32) <= a2)
    {
      sub_20B80BBD0(__p, __s);
      v11 = sub_20B871B2C(v7 + 40, __p);
      if (v14 < 0)
        operator delete(__p[0]);
      if ((void **)(v7 + 48) != v11)
        return *((unsigned __int16 *)v11 + 28);
    }
  }
  return v3;
}

void sub_20B88F124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B88F140(uint64_t a1, uint64_t a2, CFStringRef theString)
{
  CFIndex Length;
  CFIndex v7;
  char *CStringPtr;
  char *v10;
  int CString;

  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (Length)
    {
      v7 = Length;
      CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
      if (CStringPtr)
        return sub_20B88F078(a1, a2, CStringPtr);
      v10 = (char *)operator new[]();
      CString = CFStringGetCString(theString, v10, v7 + 1, 0x8000100u);
      v10[v7] = 0;
      if (CString)
        a2 = sub_20B88F078(a1, a2, v10);
      MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
    }
  }
  return a2;
}

void sub_20B88F22C(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  __int16 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;

  v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 32;
  v6 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v5;
  do
  {
    v9 = *(unsigned __int16 *)(v6 + 32);
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 != v5 && *(unsigned __int16 *)(v8 + 32) <= a2)
  {
    v13 = *(_QWORD **)(v8 + 40);
    v14 = (_QWORD *)(v8 + 48);
    if (v13 != (_QWORD *)(v8 + 48))
    {
      v15 = 0;
      v16 = a3 + 2;
      do
      {
        if ((unint64_t)v15 >= *v16)
        {
          v17 = *a3;
          v18 = v15 - *a3;
          if (v18 <= -3)
            sub_20B80CDD8();
          v19 = v18 >> 1;
          v20 = *v16 - (_QWORD)v17;
          if (v20 <= (v18 >> 1) + 1)
            v21 = v19 + 1;
          else
            v21 = *v16 - (_QWORD)v17;
          if (v20 >= 0x7FFFFFFFFFFFFFFELL)
            v22 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            v23 = (char *)sub_20B80FD48((uint64_t)(a3 + 2), v22);
            v17 = *a3;
            v15 = a3[1];
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[2 * v19];
          *(_WORD *)v24 = *((_WORD *)v13 + 28);
          v25 = v24 + 2;
          while (v15 != v17)
          {
            v26 = *((_WORD *)v15 - 1);
            v15 -= 2;
            *((_WORD *)v24 - 1) = v26;
            v24 -= 2;
          }
          *a3 = v24;
          a3[1] = v25;
          a3[2] = &v23[2 * v22];
          if (v17)
            operator delete(v17);
          v15 = v25;
        }
        else
        {
          *(_WORD *)v15 = *((_WORD *)v13 + 28);
          v15 += 2;
        }
        a3[1] = v15;
        v27 = (_QWORD *)v13[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v13[2];
            v29 = *v28 == (_QWORD)v13;
            v13 = v28;
          }
          while (!v29);
        }
        v13 = v28;
      }
      while (v28 != v14);
    }
  }
  else
  {
LABEL_12:
    v12 = (char *)operator new(2uLL);
    *(_WORD *)v12 = v3;
    a3[1] = v12 + 2;
    a3[2] = v12 + 2;
    *a3 = v12;
  }
}

void sub_20B88F3C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B88F3EC(uint64_t a1, CFStringRef theString)
{
  CFIndex Length;
  const char *CStringPtr;
  const UniChar *v6;
  CFStringRef v7;
  _QWORD v9[7];
  _QWORD v10[22];
  const char *v12;
  uint64_t v13;
  CFIndex v14;
  uint64_t v15;
  uint64_t v16;

  Length = CFStringGetLength(theString);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0xE002000000;
  v10[3] = sub_20B88F560;
  v10[4] = nullsub_81;
  v10[21] = theString;
  v13 = 0;
  v14 = Length;
  if (CFStringGetCharactersPtr(theString))
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  v15 = 0;
  v16 = 0;
  v12 = CStringPtr;
  v6 = (const UniChar *)operator new[]();
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = sub_20B88F5C8;
  v9[3] = &unk_24C46C038;
  v9[4] = v10;
  v9[5] = a1;
  v9[6] = v6;
  sub_20B8D0C18(theString, 0, (uint64_t)v9);
  v7 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, Length);
  MEMORY[0x20BD39C80](v6, 0x1000C80BDFB0063);
  _Block_object_dispose(v10, 8);
  return v7;
}

void sub_20B88F540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_20B88F560(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  result = *(__n128 *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(__n128 *)(a1 + 168) = result;
  return result;
}

void sub_20B88F5C8(_QWORD *a1, int64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  CFRange v40;
  CFRange v41;

  if (a3 == 1)
  {
    v5 = a1[5];
    if (a2 < 0 || (v6 = *(_QWORD *)(a1[4] + 8), v7 = *(_QWORD *)(v6 + 200), v7 <= a2))
    {
      v9 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 176);
      if (v8)
      {
        v9 = *(_WORD *)(v8 + 2 * (*(_QWORD *)(v6 + 192) + a2));
      }
      else
      {
        v37 = *(_QWORD *)(v6 + 184);
        if (v37)
        {
          v9 = *(char *)(v37 + *(_QWORD *)(v6 + 192) + a2);
        }
        else
        {
          if (*(_QWORD *)(v6 + 216) <= a2 || (v38 = *(_QWORD *)(v6 + 208), v38 > a2))
          {
            v39 = a2 - 4;
            if ((unint64_t)a2 < 4)
              v39 = 0;
            if (v39 + 64 < v7)
              v7 = v39 + 64;
            *(_QWORD *)(v6 + 208) = v39;
            *(_QWORD *)(v6 + 216) = v7;
            v41.location = *(_QWORD *)(v6 + 192) + v39;
            v41.length = v7 - v39;
            CFStringGetCharacters(*(CFStringRef *)(v6 + 168), v41, (UniChar *)(v6 + 40));
            v38 = *(_QWORD *)(v6 + 208);
          }
          v9 = *(_WORD *)(v6 + 40 + 2 * (a2 - v38));
        }
      }
    }
    v32 = *(_QWORD *)(v5 + 8);
    v31 = v5 + 8;
    v30 = v32;
    if (v32)
    {
      v33 = v31;
      do
      {
        v34 = *(unsigned __int16 *)(v30 + 26);
        v35 = v34 >= v9;
        if (v34 >= v9)
          v36 = (uint64_t *)v30;
        else
          v36 = (uint64_t *)(v30 + 8);
        if (v35)
          v33 = v30;
        v30 = *v36;
      }
      while (*v36);
      if (v33 != v31 && *(unsigned __int16 *)(v33 + 26) <= v9)
        v9 = *(_WORD *)(v33 + 28);
    }
    *(_WORD *)(a1[6] + 2 * a2) = v9;
  }
  else if (a3 >= 1)
  {
    v11 = 0;
    v12 = -a2;
    v13 = a2 + 64;
    v14 = 2 * a2;
    v15 = a2;
    do
    {
      if (v15 >= 4)
        v16 = 4;
      else
        v16 = v15;
      v17 = a2 + v11;
      if (a2 + v11 < 0 || (v18 = *(_QWORD *)(a1[4] + 8), v19 = *(_QWORD *)(v18 + 200), v19 <= v17))
      {
        v21 = 0;
      }
      else
      {
        v20 = *(_QWORD *)(v18 + 176);
        if (v20)
        {
          v21 = *(_WORD *)(v20 + 2 * (a2 + v11 + *(_QWORD *)(v18 + 192)));
        }
        else
        {
          v22 = *(_QWORD *)(v18 + 184);
          if (v22)
          {
            v21 = *(char *)(v22 + *(_QWORD *)(v18 + 192) + a2 + v11);
          }
          else
          {
            if (*(_QWORD *)(v18 + 216) <= v17 || (v23 = *(_QWORD *)(v18 + 208), v23 > v17))
            {
              v24 = v16 + v12;
              v25 = v13 - v16;
              v26 = -v16;
              v27 = 64 - v16;
              v28 = v11 + a2 - v16;
              v29 = a2 + v11 + v27;
              if (v29 >= v19)
                v29 = *(_QWORD *)(v18 + 200);
              *(_QWORD *)(v18 + 208) = v28;
              *(_QWORD *)(v18 + 216) = v29;
              if (v19 >= v25)
                v19 = v25;
              v40.length = v19 + v24;
              v40.location = a2 + v11 + v26 + *(_QWORD *)(v18 + 192);
              CFStringGetCharacters(*(CFStringRef *)(v18 + 168), v40, (UniChar *)(v18 + 40));
              v23 = *(_QWORD *)(v18 + 208);
            }
            v21 = *(_WORD *)(v18 - 2 * v23 + v14 + 2 * v11 + 40);
          }
        }
      }
      *(_WORD *)(a1[6] + v14 + 2 * v11++) = v21;
      ++v15;
      --v12;
      ++v13;
    }
    while (a3 != v11);
  }
}

CFStringRef sub_20B88F830()
{
  uint64_t v0;
  uint64_t v1;
  CFIndex v2;
  uint64_t v3;
  const UniChar *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v0 = MEMORY[0x24BDAC7A8]();
  v4 = (const UniChar *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v2)
  {
    v5 = 0;
    v8 = *(_QWORD *)(v0 + 8);
    v6 = v0 + 8;
    v7 = v8;
    do
    {
      v9 = *(unsigned __int16 *)(v1 + 2 * v5);
      if (v7)
      {
        v10 = v6;
        v11 = v7;
        do
        {
          v12 = *(unsigned __int16 *)(v11 + 26);
          v13 = v12 >= v9;
          if (v12 >= v9)
            v14 = (uint64_t *)v11;
          else
            v14 = (uint64_t *)(v11 + 8);
          if (v13)
            v10 = v11;
          v11 = *v14;
        }
        while (*v14);
        if (v10 != v6 && *(unsigned __int16 *)(v10 + 26) <= v9)
          LOWORD(v9) = *(_WORD *)(v10 + 28);
      }
      v4[v5++] = v9;
    }
    while (v5 != v2);
  }
  return CFStringCreateWithCharacters(0, v4, v2);
}

uint64_t sub_20B88F908(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (v3 != *a2)
  {
    v5 = 0;
    v6 = v4 >> 1;
    v8 = *(_QWORD *)(result + 8);
    result += 8;
    v7 = v8;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v9 = *(unsigned __int16 *)(v2 + 2 * v5);
      if (v7)
      {
        v10 = result;
        v11 = v7;
        do
        {
          v12 = *(unsigned __int16 *)(v11 + 26);
          v13 = v12 >= v9;
          if (v12 >= v9)
            v14 = (uint64_t *)v11;
          else
            v14 = (uint64_t *)(v11 + 8);
          if (v13)
            v10 = v11;
          v11 = *v14;
        }
        while (*v14);
        if (v10 != result && *(unsigned __int16 *)(v10 + 26) <= v9)
          LOWORD(v9) = *(_WORD *)(v10 + 28);
      }
      *(_WORD *)(v2 + 2 * v5++) = v9;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_20B88F980(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20B88F980(a1, *a2);
    sub_20B88F980(a1, a2[1]);
    sub_20B88F9CC((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void sub_20B88F9CC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20B88F9CC(a1, *(_QWORD *)a2);
    sub_20B88F9CC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *sub_20B88FA1C(_QWORD *result, unsigned int a2)
{
  unsigned __int8 v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t i;
  unsigned int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25472AFE8);
  if ((v2 & 1) == 0)
  {
    v9 = result;
    v10 = a2;
    v11 = __cxa_guard_acquire(&qword_25472AFE8);
    a2 = v10;
    v12 = v11;
    result = v9;
    if (v12)
    {
      v14 = 33;
      sub_20B80BBD0(v15, "UserInteractive");
      v16 = 25;
      sub_20B80BBD0(v17, "UserInitiated");
      v18 = 21;
      sub_20B80BBD0(v19, "Default");
      v20 = 17;
      sub_20B80BBD0(v21, "Utility");
      v22 = 9;
      sub_20B80BBD0(v23, "Background");
      sub_20B88FD24(&v14, 5);
      for (i = 0; i != -20; i -= 4)
      {
        if (SHIBYTE(v23[i + 2]) < 0)
          operator delete((void *)v23[i]);
      }
      __cxa_atexit((void (*)(void *))sub_20B88FD20, &xmmword_25472AFF0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472AFE8);
      result = v9;
      a2 = v10;
    }
  }
  if (!*((_QWORD *)&xmmword_25472AFF0 + 1))
    return sub_20B80BBD0(result, "Unspecified");
  v3 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472AFF0 + 8));
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*((_QWORD *)&xmmword_25472AFF0 + 1) <= (unint64_t)a2)
      v4 = (unint64_t)a2 % *((_QWORD *)&xmmword_25472AFF0 + 1);
  }
  else
  {
    v4 = (DWORD2(xmmword_25472AFF0) - 1) & a2;
  }
  v5 = *(uint64_t ***)(xmmword_25472AFF0 + 8 * v4);
  if (!v5)
    return sub_20B80BBD0(result, "Unspecified");
  v6 = *v5;
  if (!v6)
    return sub_20B80BBD0(result, "Unspecified");
  while (1)
  {
    v7 = v6[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= *((_QWORD *)&xmmword_25472AFF0 + 1))
        v7 %= *((_QWORD *)&xmmword_25472AFF0 + 1);
    }
    else
    {
      v7 &= *((_QWORD *)&xmmword_25472AFF0 + 1) - 1;
    }
    if (v7 != v4)
      return sub_20B80BBD0(result, "Unspecified");
LABEL_17:
    v6 = (uint64_t *)*v6;
    if (!v6)
      return sub_20B80BBD0(result, "Unspecified");
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_17;
  if (*((char *)v6 + 47) < 0)
    return sub_20B80ACE0(result, (void *)v6[3], v6[4]);
  v8 = *(_OWORD *)(v6 + 3);
  result[2] = v6[5];
  *(_OWORD *)result = v8;
  return result;
}

void sub_20B88FC8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 159) < 0)
      operator delete(*(void **)(v1 + v3 + 136));
    v3 -= 32;
    if (v3 == -160)
    {
      __cxa_guard_abort(&qword_25472AFE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20B88FD0C()
{
  sub_20B83B31C("basic_string");
}

void sub_20B88FD24(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;

  xmmword_25472AFF0 = 0u;
  *(_OWORD *)&qword_25472B000 = 0u;
  dword_25472B010 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = 0;
    v5 = &a1[8 * a2];
    while (1)
    {
      v6 = *v3;
      v7 = *((_QWORD *)&xmmword_25472AFF0 + 1);
      if (*((_QWORD *)&xmmword_25472AFF0 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472AFF0 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v2 = *v3;
          if (*((_QWORD *)&xmmword_25472AFF0 + 1) <= v6)
            v2 = v6 % *((_QWORD *)&xmmword_25472AFF0 + 1);
        }
        else
        {
          v2 = (DWORD2(xmmword_25472AFF0) - 1) & v6;
        }
        v9 = *(uint64_t ***)(xmmword_25472AFF0 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = (uint64_t *)*i)
          {
            v11 = i[1];
            if (v11 == v6)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v6)
                goto LABEL_78;
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= *((_QWORD *)&xmmword_25472AFF0 + 1))
                  v11 %= *((_QWORD *)&xmmword_25472AFF0 + 1);
              }
              else
              {
                v11 &= *((_QWORD *)&xmmword_25472AFF0 + 1) - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v6;
      *((_DWORD *)v12 + 4) = v6;
      v13 = v12 + 24;
      if (*((char *)v3 + 31) < 0)
      {
        sub_20B80ACE0(v13, *((void **)v3 + 1), *((_QWORD *)v3 + 2));
        v4 = qword_25472B008;
      }
      else
      {
        v14 = *(_OWORD *)(v3 + 2);
        *((_QWORD *)v12 + 5) = *((_QWORD *)v3 + 3);
        *(_OWORD *)v13 = v14;
      }
      v15 = (float)(unint64_t)(v4 + 1);
      if (!v7 || (float)(*(float *)&dword_25472B010 * (float)v7) < v15)
        break;
LABEL_68:
      v31 = xmmword_25472AFF0;
      v32 = *(_QWORD **)(xmmword_25472AFF0 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_25472B000;
        qword_25472B000 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_25472B000;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v33 >= v7)
            v33 %= v7;
        }
        else
        {
          v33 &= v7 - 1;
        }
        v32 = (_QWORD *)(xmmword_25472AFF0 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      v4 = ++qword_25472B008;
LABEL_78:
      v3 += 8;
      if (v3 == v5)
        return;
    }
    v16 = (v7 & (v7 - 1)) != 0;
    if (v7 < 3)
      v16 = 1;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25472B010);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *((_QWORD *)&xmmword_25472AFF0 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472AFF0 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472AFF0 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_25472B008 / *(float *)&dword_25472B010);
      if (*((_QWORD *)&xmmword_25472AFF0 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472AFF0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)&xmmword_25472AFF0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_25472AFF0;
          *(_QWORD *)&xmmword_25472AFF0 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_25472AFF0 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472AFF0 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_25472B000;
          if (qword_25472B000)
          {
            v24 = *(_QWORD *)(qword_25472B000 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472AFF0 + 8 * v24) = &qword_25472B000;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_25472AFF0 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_25472AFF0 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472AFF0 + 8 * v30);
                **(_QWORD **)(xmmword_25472AFF0 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_25472AFF0;
        *(_QWORD *)&xmmword_25472AFF0 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *((_QWORD *)&xmmword_25472AFF0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = ((_DWORD)v7 - 1) & v6;
    }
    goto LABEL_68;
  }
}

void sub_20B890180(_Unwind_Exception *a1)
{
  void **v1;

  sub_20B8901C0(1, v1);
  sub_20B89020C((uint64_t)&xmmword_25472AFF0);
  _Unwind_Resume(a1);
}

void sub_20B8901C0(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20B89020C(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_20B890270()
{
  std::string *v0;
  __int128 v1;
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  const char *v8;
  NSObject *v9;
  void *__p[2];
  unsigned __int8 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  __int128 v15;
  int64_t v16;

  sub_20B80BBD0(&v12, "Serial");
  v0 = std::string::insert(&v12, 0, "com.apple.mecabra.", 0x12uLL);
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  v2 = std::string::append(&v13, "_", 1uLL);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20B88FA1C(__p, 0x11u);
  if ((v11 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v14, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16 = v6->__r_.__value_.__r.__words[2];
  v15 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v16 >= 0)
    v8 = (const char *)&v15;
  else
    v8 = (const char *)v15;
  v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  qword_25472C838 = (uint64_t)dispatch_queue_create(v8, v9);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
}

void sub_20B8903CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B890430(uint64_t a1, char *__s)
{
  size_t v4;
  const __CFURL *v5;
  CFURLRef v6;
  CFURLRef v7;
  CFURLRef v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = strlen(__s);
  v5 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)__s, v4, 1u);
  if (!v5)
    goto LABEL_11;
  v6 = CFURLCreateCopyAppendingPathComponent(0, v5, CFSTR("J_Numeral.dict"), 0);
  v7 = CFURLCreateCopyAppendingPathComponent(0, v5, CFSTR("Josu.data"), 0);
  v8 = v7;
  if (v6 && v7)
  {
    if (sub_20BA2A7C4())
      *(_QWORD *)a1 = 0;
    goto LABEL_7;
  }
  if (v7)
LABEL_7:
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  CFRelease(v5);
LABEL_11:
  if (*(_QWORD *)a1)
    *(_QWORD *)(a1 + 8) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  return a1;
}

void sub_20B890538(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B890560(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;

  v2 = *a1;
  if (v2)
    sub_20BA2ADF4(v2);
  v3 = (const void *)a1[1];
  if (v3)
    CFRelease(v3);
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = (uint64_t)v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20B8905AC(uint64_t a1, UniChar *chars, unint64_t a3, int a4, uint64_t a5)
{
  unsigned __int8 v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  CFStringRef v17;
  CFStringRef v18;
  __CFArray *Value;
  __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  __int16 v24;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  const __CFAllocator *v32;
  CFMutableArrayRef Mutable;
  CFStringRef v34;
  CFStringRef v35;
  unint64_t v36;
  unsigned int v37;
  const UniChar *p_p;
  CFIndex v39;
  CFStringRef v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  const UniChar *v49;
  CFIndex v50;
  CFStringRef v51;
  const UniChar *v52;
  CFIndex v53;
  CFStringRef v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, const UniChar *, CFIndex);
  void *v58;
  __CFArray *v59;
  void *__p;
  CFIndex v61;
  uint64_t v62;

  v10 = atomic_load((unsigned __int8 *)&qword_25472B020);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25472B020))
  {
    sub_20B8B2334(0);
    qword_25472B018 = (uint64_t)&qword_25472C9B0;
    __cxa_guard_release(&qword_25472B020);
  }
  if (*(_QWORD *)a1 && a3 && chars && *(_QWORD *)(a1 + 8))
  {
    v11 = 0;
    while (1)
    {
      v12 = chars[v11];
      v13 = v12 - 48;
      v14 = (unsigned __int16)(v12 + 240);
      if (v13 >= 0xA && v14 > 9)
        break;
      if (a3 == ++v11)
      {
        v11 = a3;
        break;
      }
    }
    v16 = v11 == a3 ? 1 : a4;
    if (v11)
    {
      if (v16)
      {
        v17 = CFStringCreateWithCharacters(0, chars, v11);
        if (v17)
        {
          v18 = v17;
          Value = (__CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v17);
          v20 = Value;
          if (!Value)
          {
            v25 = atomic_load((unsigned __int8 *)&qword_25472B030);
            if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_25472B030))
            {
              qword_25472B028 = 19;
              __cxa_guard_release(&qword_25472B030);
            }
            if (qword_25472B028 <= v11)
              goto LABEL_51;
            v26 = *chars;
            if ((v26 - 48) >= 0xA && (unsigned __int16)(v26 + 240) > 9u)
              goto LABEL_51;
            v27 = 1;
            while (v11 != v27)
            {
              v28 = chars[v27];
              v29 = v28 - 48;
              ++v27;
              v30 = (unsigned __int16)(v28 + 240);
              if (v29 >= 0xA && v30 >= 0xA)
              {
                if (v27 - 1 < v11)
                  goto LABEL_51;
                break;
              }
            }
            v32 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
            if (!Mutable)
            {
LABEL_51:
              CFRelease(v18);
              return;
            }
            v20 = Mutable;
            v34 = CFStringCreateWithCharacters(v32, chars, v11);
            if (v34)
            {
              v35 = v34;
              CFArrayAppendValue(v20, v34);
              CFRelease(v35);
            }
            sub_20B877ED0(&__p, chars, v11);
            if (*chars - 48 > 9)
            {
LABEL_50:
              sub_20B8D976C((uint64_t)&__p);
            }
            else
            {
              v36 = 0;
              while (v11 - 1 != v36)
              {
                v37 = chars[++v36] - 48;
                if (v37 >= 0xA)
                {
                  if (v36 < v11)
                    goto LABEL_50;
                  break;
                }
              }
              sub_20B8D9880((uint64_t)&__p);
            }
            if (v62 >= 0)
              p_p = (const UniChar *)&__p;
            else
              p_p = (const UniChar *)__p;
            if (v62 >= 0)
              v39 = HIBYTE(v62);
            else
              v39 = v61;
            v40 = CFStringCreateWithCharacters(v32, p_p, v39);
            if (v40)
            {
              CFArrayAppendValue(v20, v40);
              CFRelease(v40);
            }
            if (SHIBYTE(v62) < 0)
              operator delete(__p);
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = chars[v41];
              if (v43 >> 4 <= 0xFF0)
                v44 = -48;
              else
                v44 = -65296;
              v42 = v43 + 10 * v42 + v44;
              ++v41;
            }
            while (v11 != v41);
            v45 = 0;
            while (1)
            {
              v46 = chars[v45];
              v47 = v46 == 48 || v46 == 65296;
              if (!v47 && v46 != 12295)
                break;
              if (v11 == ++v45)
              {
                v45 = v11;
                break;
              }
            }
            v55 = MEMORY[0x24BDAC760];
            v56 = 0x40000000;
            v57 = sub_20B8915D8;
            v58 = &unk_24C46C058;
            v59 = v20;
            sub_20B8913E0(v42, v45, (uint64_t)&v55);
            if (!v45)
            {
              __p = 0;
              v61 = 0;
              v62 = 0;
              sub_20B8D9B30(v42, (uint64_t)&__p);
              if (v62 >= 0)
                v49 = (const UniChar *)&__p;
              else
                v49 = (const UniChar *)__p;
              if (v62 >= 0)
                v50 = HIBYTE(v62);
              else
                v50 = v61;
              v51 = CFStringCreateWithCharacters(v32, v49, v50);
              if (v51)
              {
                CFArrayAppendValue(v20, v51);
                CFRelease(v51);
              }
              sub_20B8D9880((uint64_t)&__p);
              if (v62 >= 0)
                v52 = (const UniChar *)&__p;
              else
                v52 = (const UniChar *)__p;
              if (v62 >= 0)
                v53 = HIBYTE(v62);
              else
                v53 = v61;
              v54 = CFStringCreateWithCharacters(v32, v52, v53);
              if (v54)
              {
                CFArrayAppendValue(v20, v54);
                CFRelease(v54);
              }
              if (SHIBYTE(v62) < 0)
                operator delete(__p);
            }
            if (CFArrayGetCount(v20))
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8), v18, v20);
          }
          CFRelease(v18);
          v56 = v11;
          v57 = 0;
          v55 = *(unsigned __int16 *)(qword_25472B018 + 50);
          WORD1(v55) = 5000;
          Count = CFArrayGetCount(v20);
          LOBYTE(__p) = 0;
          if (Count >= 1)
          {
            v22 = Count;
            v23 = 0;
            do
            {
              LODWORD(v57) = v23;
              (*(void (**)(uint64_t, uint64_t *, void **))(a5 + 16))(a5, &v55, &__p);
              if (v23)
                v24 = 1000;
              else
                v24 = 2000;
              WORD1(v55) += v24;
              ++v23;
            }
            while (v23 < v22 && !(_BYTE)__p);
          }
          if (!Value)
            CFRelease(v20);
        }
      }
    }
  }
}

void sub_20B890AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_guard_abort(&qword_25472B020);
  _Unwind_Resume(a1);
}

void sub_20B890ADC(_QWORD *a1, int a2, UniChar *a3, const UniChar *a4, int a5, uint64_t a6)
{
  if (*a1 && a4 && a3 && a1[1])
  {
    if (a5)
      sub_20B890B0C((uint64_t)a1, a2, a3, a4, a6);
    else
      sub_20B890DA4((uint64_t)a1, a2, a3, (unint64_t)a4, a6);
  }
}

uint64_t sub_20B890B0C(uint64_t result, int a2, const UniChar *a3, const UniChar *a4, uint64_t a5)
{
  const UniChar *v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  void **v11;
  BOOL v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  _QWORD *v19;
  CFIndex v20;
  BOOL v21;
  unint64_t i;
  int v23;
  CFIndex v26;
  CFStringRef v27;
  const __CFString *v28;
  const __CFString *v29;
  int v30;
  uint64_t v31;
  const __CFAllocator *contentsDeallocator;
  unint64_t v33;
  void *__p[2];
  unsigned __int8 v35;
  _OWORD v36[2];
  int v37;
  void *v38;
  const UniChar *v39[2];

  if (a3)
    v5 = a4;
  else
    v5 = 0;
  v39[0] = a3;
  v39[1] = v5;
  if (v5)
  {
    v8 = result;
    v38 = 0;
    memset(v36, 0, sizeof(v36));
    v37 = 1065353216;
    sub_20B87B938((uint64_t *)v39, (unint64_t *)&v38, (uint64_t)v36, 0, __p);
    v9 = v35;
    v10 = v35;
    if ((v35 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((v35 & 0x80u) != 0)
      v9 = (unint64_t)__p[1];
    if (v11)
      v12 = v9 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = (unint64_t)v38;
      v14 = v38 && a2 == 0;
      if (!v14 && (void *)v9 != v38)
      {
        if (a2 != 1)
          v13 = 0;
        v15 = v9 - v13;
        v16 = a2 == 1 ? 0 : v15 - 1;
        v33 = v15;
        if (v15 > v16)
        {
          v31 = a5;
          v17 = 0;
          v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          contentsDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
          while (1)
          {
            v19 = sub_20B891738(v36, &v33);
            v20 = v33;
            if (v19)
            {
              if (!v33)
                break;
              v21 = 0;
              for (i = 0; i != v33; v21 = i >= v33)
              {
                v23 = *((unsigned __int16 *)v11 + i);
                if ((v23 - 12353) >= 0x56 && v23 != 12540 && v23 != 12316)
                  break;
                ++i;
              }
              if (v21)
                break;
            }
LABEL_52:
            v33 = v20 - 1;
            if (v20 - 1 <= v16)
            {
LABEL_53:
              v10 = v35;
              goto LABEL_54;
            }
          }
          if (v39[0])
            v26 = v19[3];
          else
            v26 = 0;
          v27 = CFStringCreateWithCharacters(v18, v39[0], v26);
          v28 = CFStringCreateWithCharactersNoCopy(v18, (const UniChar *)v11, v20, contentsDeallocator);
          v29 = v28;
          if (v27)
          {
            if (!v28)
            {
              v30 = 2 * (v17 == 2);
LABEL_49:
              CFRelease(v27);
              goto LABEL_50;
            }
            v17 += sub_20B890E94(v8, v28, v27, v31);
            v30 = 2 * (v17 == 2);
          }
          else
          {
            v30 = 2 * (v17 == 2);
            if (!v28)
            {
LABEL_50:
              if (v30)
                goto LABEL_53;
              v20 = v33;
              goto LABEL_52;
            }
          }
          CFRelease(v29);
          if (!v27)
            goto LABEL_50;
          goto LABEL_49;
        }
      }
    }
LABEL_54:
    if ((v10 & 0x80) != 0)
      operator delete(__p[0]);
    return sub_20B84055C((uint64_t)v36);
  }
  return result;
}

void sub_20B890D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20B87E150(&a13, 0);
  sub_20B87E150(&a14, 0);
  if (a21 < 0)
    operator delete(__p);
  sub_20B84055C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20B890DA4(uint64_t a1, int a2, UniChar *chars, unint64_t numChars, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  CFStringRef v16;
  const __CFString *v17;

  if (a2 == 1)
    v5 = 0;
  else
    v5 = numChars - 1;
  if (v5 < numChars)
  {
    v7 = numChars;
    v10 = 0;
    do
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = chars[v12];
        if ((v13 - 12353) >= 0x56 && v13 != 12540 && v13 != 12316)
          break;
        v11 = ++v12 >= v7;
      }
      while (v7 != v12);
      if (v11)
      {
        v16 = CFStringCreateWithCharacters(0, chars, v7);
        if (v16)
        {
          v17 = v16;
          v10 += sub_20B890E94(a1, v17, v17, a5);
          CFRelease(v17);
        }
        if (v10 == 2)
          break;
      }
      --v7;
    }
    while (v7 > v5);
  }
}

BOOL sub_20B890E94(uint64_t a1, const __CFString *a2, const __CFString *key, uint64_t a4)
{
  const __CFArray *Value;
  const __CFArray *v9;
  CFMutableArrayRef v10;
  CFIndex Count;
  _BOOL8 v12;
  CFIndex v13;
  CFIndex v14;
  BOOL v15;
  char v17;
  _QWORD v18[2];
  uint64_t v19;

  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), key);
  if (Value)
  {
    v9 = Value;
    CFRetain(Value);
  }
  else
  {
    v10 = sub_20B890FB4((uint64_t *)a1, a2);
    if (!v10)
      return 0;
    v9 = v10;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8), key, v10);
  }
  sub_20B8B2334(0);
  v18[0] = (unsigned __int16)word_25472C9E2;
  v18[1] = CFStringGetLength(key);
  v19 = 0;
  v17 = 0;
  Count = CFArrayGetCount(v9);
  v12 = Count > 0;
  if (Count >= 1)
  {
    v13 = Count;
    v14 = 0;
    do
    {
      LODWORD(v19) = v14;
      WORD1(v18[0]) = v14 + 8000;
      (*(void (**)(uint64_t, _QWORD *, char *))(a4 + 16))(a4, v18, &v17);
      ++v14;
      if (v17)
        v15 = 0;
      else
        v15 = v14 < v13;
    }
    while (v15);
  }
  CFRelease(v9);
  return v12;
}

CFMutableArrayRef sub_20B890FB4(uint64_t *a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  char *v6;
  CFIndex v7;
  CFMutableArrayRef Mutable;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const __CFString *ValueAtIndex;
  CFIndex v13;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  UniChar v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  CFIndex v31;
  uint64_t v33;
  UniChar buffer[64];
  CFStringRef v35;
  const UniChar *v36;
  const char *v37;
  uint64_t v38;
  CFIndex v39;
  int64_t v40;
  int64_t v41;
  int v42;
  CFIndex v43[3];
  CFRange v44;
  CFRange v45;
  CFRange v46;

  v43[1] = *MEMORY[0x24BDAC8D0];
  if (!*a1)
    return 0;
  Length = CFStringGetLength(theString);
  CFStringGetMaximumSizeForEncoding(Length, 0x10000100u);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&buffer[-4] - v5;
  v43[0] = 0;
  v44.location = 0;
  v44.length = Length;
  CFStringGetBytes(theString, v44, 0x10000100u, 0, 0, (UInt8 *)&buffer[-4] - v5, v7, v43);
  v42 = 1752788843;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (sub_20B98C604(*a1, 2037345641, v43[0], (uint64_t)v6, 1025515552, 1, (uint64_t)&v42, 0, 0, 1u, Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  else
  {
    v33 = (uint64_t)&v33;
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      v10 = Count;
      do
      {
        v11 = v10--;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Mutable, v10);
        v13 = CFStringGetLength(ValueAtIndex);
        v35 = ValueAtIndex;
        v38 = 0;
        v39 = v13;
        CharactersPtr = CFStringGetCharactersPtr(ValueAtIndex);
        CStringPtr = 0;
        v36 = CharactersPtr;
        if (!CharactersPtr)
          CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x600u);
        v37 = CStringPtr;
        v40 = 0;
        v41 = 0;
        if (v13 >= 1)
        {
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 64;
          do
          {
            if ((unint64_t)v18 >= 4)
              v21 = 4;
            else
              v21 = v18;
            v22 = v39;
            if (v39 <= v18)
            {
              v23 = 0;
            }
            else if (v36)
            {
              v23 = v36[v18 + v38];
            }
            else if (v37)
            {
              v23 = v37[v38 + v18];
            }
            else
            {
              if (v41 <= v18 || v17 > v18)
              {
                v28 = v21 + v16;
                v29 = v20 - v21;
                v30 = v18 - v21;
                v31 = v30 + 64;
                if (v30 + 64 >= v39)
                  v31 = v39;
                v40 = v30;
                v41 = v31;
                if (v39 >= v29)
                  v22 = v29;
                v45.length = v22 + v28;
                v45.location = v30 + v38;
                CFStringGetCharacters(v35, v45, buffer);
                v17 = v40;
              }
              v23 = buffer[v18 - v17];
            }
            v24 = (unsigned __int16)(v23 - 48);
            v25 = (unsigned __int16)(v23 + 240);
            if (v24 < 0xA || v25 < 0xA)
              ++v19;
            ++v18;
            --v16;
            ++v20;
          }
          while (v13 != v18);
          if (v19 > 5)
            CFArrayRemoveValueAtIndex(Mutable, v10);
        }
      }
      while (v11 > 1);
    }
    v46.length = CFArrayGetCount(Mutable);
    v46.location = 0;
    CFArraySortValues(Mutable, v46, (CFComparatorFunction)sub_20B891628, 0);
  }
  return Mutable;
}

uint64_t sub_20B8912FC(uint64_t a1, const UniChar *a2, CFIndex a3, unsigned int a4, _DWORD *a5)
{
  CFStringRef v8;
  CFStringRef v9;
  const __CFArray *Value;
  const __CFArray *v11;
  const __CFString *ValueAtIndex;
  const __CFString *v13;
  CFIndex Length;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  CFRange v22;

  if (a5)
    *a5 = 0;
  v8 = CFStringCreateWithCharacters(0, a2, a3);
  if (!v8)
    return 0;
  v9 = v8;
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v8);
  if (Value
    && (v11 = Value, CFArrayGetCount(Value) > a4)
    && (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, a4)) != 0
    && (v13 = ValueAtIndex, (Length = CFStringGetLength(ValueAtIndex)) != 0))
  {
    v15 = Length;
    if (a5)
      *a5 = Length;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = (_QWORD *)(a1 + 16);
    v19 = v17 - v16;
    sub_20B87C6B4((uint64_t)v18, Length + ((v17 - v16) >> 1));
    v22.location = 0;
    v22.length = v15;
    CFStringGetCharacters(v13, v22, (UniChar *)(*v18 + v19));
    v20 = *v18 + v19;
  }
  else
  {
    v20 = 0;
  }
  CFRelease(v9);
  return v20;
}

void sub_20B8913E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *p_p;
  char *v13;
  unint64_t v14;
  __int16 v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *__p;
  uint64_t v21;
  uint64_t v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  sub_20B87BEB0(&__p, a2 + 20);
  if (a2)
  {
    v6 = a2;
    do
    {
      sub_20B88DACC((uint64_t)&__p, "\a0", 1uLL);
      --v6;
    }
    while (v6);
  }
  if (!a1)
    goto LABEL_11;
  v7 = a1;
  do
  {
    v8 = sub_20B8D96BC(v7 % 10, (uint64_t)&__p);
    if ((unint64_t)(v7 - 10) < 0xFFFFFFFFFFFFFFEDLL)
      v9 = v8;
    else
      v9 = 0;
    v7 /= 10;
  }
  while ((v9 & 1) != 0);
  if ((v8 & 1) != 0)
  {
LABEL_11:
    v10 = HIBYTE(v22);
    if (SHIBYTE(v22) < 0)
    {
      v11 = v21;
      if (!v21)
        goto LABEL_29;
      p_p = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v22))
        goto LABEL_29;
      v11 = HIBYTE(v22);
      p_p = (char *)&__p;
    }
    if (v11 != a2)
    {
      v13 = &p_p[2 * v11 - 2];
      if (v13 > &p_p[2 * a2])
      {
        v14 = (unint64_t)&p_p[2 * a2 + 2];
        do
        {
          v15 = *(_WORD *)(v14 - 2);
          *(_WORD *)(v14 - 2) = *(_WORD *)v13;
          *(_WORD *)v13 = v15;
          v13 -= 2;
          v16 = v14 >= (unint64_t)v13;
          v14 += 2;
        }
        while (!v16);
        v10 = HIBYTE(v22);
      }
    }
    if ((v10 & 0x80u) == 0)
      v17 = &__p;
    else
      v17 = __p;
    if ((v10 & 0x80u) == 0)
      v18 = v10;
    else
      v18 = v21;
    (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v17, v18);
  }
LABEL_29:
  if (SHIBYTE(v22) < 0)
  {
    *(_WORD *)__p = 0;
    v21 = 0;
    if (a2)
      goto LABEL_40;
  }
  else
  {
    LOWORD(__p) = 0;
    HIBYTE(v22) = 0;
    if (a2)
      goto LABEL_40;
  }
  if (sub_20B8D96BC(a1, (uint64_t)&__p))
  {
    if (SHIBYTE(v22) < 0)
    {
      if (!v21)
        goto LABEL_40;
      v19 = __p;
    }
    else
    {
      if (!HIBYTE(v22))
        return;
      v19 = &__p;
    }
    (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v19);
  }
LABEL_40:
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

void sub_20B8915B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8915D8(uint64_t a1, const UniChar *a2, CFIndex a3)
{
  __CFArray *v3;
  CFStringRef v4;
  CFStringRef v5;

  v3 = *(__CFArray **)(a1 + 32);
  v4 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(v3, v4);
    CFRelease(v5);
  }
}

uint64_t sub_20B891628(const __CFString *a1, const __CFString *a2)
{
  BOOL v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v10;
  int v11;
  int v12;

  if (!sub_20B8D1A28(a1) || !sub_20B8D1A28(a2))
    return 0;
  v11 = 0;
  v12 = 0;
  sub_20B8DA458(a1, (_BYTE *)&v12 + 3, (_BYTE *)&v12 + 2, (_BYTE *)&v12 + 1, &v12);
  sub_20B8DA458(a2, (_BYTE *)&v11 + 3, (_BYTE *)&v11 + 2, (_BYTE *)&v11 + 1, &v11);
  if (BYTE1(v12))
    v4 = BYTE2(v12) == 0;
  else
    v4 = 0;
  v5 = v4;
  if (BYTE1(v11))
    v6 = BYTE2(v11) == 0;
  else
    v6 = 0;
  v7 = v6;
  if (v5 == 1 && v7 == 0)
    return -1;
  if ((v5 | v7 ^ 1) != 1)
    return 1;
  if (!HIBYTE(v12) && HIBYTE(v11))
    return -1;
  if (HIBYTE(v12) && !HIBYTE(v11))
    return 1;
  if (!BYTE1(v12) && BYTE1(v11))
    return -1;
  if (BYTE1(v12) && !BYTE1(v11))
    return 1;
  if ((_BYTE)v12 && !(_BYTE)v11)
    return -1;
  if ((_BYTE)v12)
    v10 = 1;
  else
    v10 = v11 == 0;
  return !v10;
}

_QWORD *sub_20B891738(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MecabraSegmentGetRange(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 24);
  else
    return -1;
}

uint64_t MecabraSegmentGetReading(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

_QWORD *sub_20B891818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  MecabraSegmentGetTypeID();
  result = (_QWORD *)_CFRuntimeCreateInstance();
  if (result)
  {
    result[2] = a1;
    result[3] = a2;
    result[4] = a3;
    result[5] = 0;
  }
  return result;
}

uint64_t MecabraSegmentGetTypeID()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472C850))
  {
    qword_25472C848 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_25472C850);
  }
  return qword_25472C848;
}

void sub_20B8918C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C850);
  _Unwind_Resume(a1);
}

void sub_20B8918E0(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRelease(v3);
  }
}

__CFString *sub_20B891918(_QWORD *a1)
{
  __CFString *Mutable;
  const __CFString *v3;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MecabraSegment %p>{reading = "), a1);
  if (a1[2])
    v3 = (const __CFString *)a1[2];
  else
    v3 = CFSTR("NULL");
  CFStringAppend(Mutable, v3);
  CFStringAppendFormat(Mutable, 0, CFSTR(" range = {%ld, %ld}}"), a1[3], a1[4]);
  return Mutable;
}

void sub_20B89199C(unsigned int a1@<W0>, uint64_t *a2@<X8>)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  _QWORD v7[4];
  unsigned int v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  v4 = sub_20B8D101C(a1);
  sub_20B80BBD0(&v9, v4);
  v5 = std::string::append(&v9, "Tokenizer", 9uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11 = v5->__r_.__value_.__r.__words[2];
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = sub_20B892314;
  v7[3] = &unk_24C46C078;
  v8 = a1;
  sub_20B891A94((void **)&v10, (uint64_t)v7, 0, a2);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
}

void sub_20B891A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void sub_20B891A94(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472B040);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472B040))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472B038 = v74;
    __cxa_guard_release(&qword_25472B040);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472B048);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472B048))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547282B0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B048);
  }
  std::mutex::lock(&stru_2547282B0);
  v8 = (_QWORD *)qword_25472B038;
  v9 = sub_20B828414(qword_25472B038 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BE50;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472B038;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_2547282B0);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20B892290(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B040);
  _Unwind_Resume(a1);
}

uint64_t sub_20B892314(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 32) == 5)
  {
    v2 = operator new();
    sub_20BA2A0D8(v2, *(_DWORD *)(a1 + 32));
  }
  else
  {
    v2 = operator new();
    sub_20B9035F8(v2, *(_DWORD *)(a1 + 32));
  }
  return v2;
}

void sub_20B892388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1081C40EAC9FDC4);
  _Unwind_Resume(a1);
}

void sub_20B8923CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8923F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B892408(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E658))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B892448(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = off_24C4675C0;
  v2 = operator new();
  sub_20B86F774(v2);
  *(_QWORD *)(a1 + 8) = v2;
  v3 = (_QWORD *)operator new();
  sub_20BA11B78(v3);
  *(_QWORD *)(a1 + 16) = &off_24C467008;
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_20B8924D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10B3C4016B90007);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B892508(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_24C4675C0;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[1] = 0;
  a1[2] = &off_24C467008;
  v3 = a1[3];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

_QWORD *sub_20B892568(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467008;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B8925AC(_QWORD *a1)
{
  sub_20B892508(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B8925D0(uint64_t a1, uint64_t a2)
{
  char *v5;
  std::string::size_type size;
  void **v7;
  std::string::size_type v8;
  int v9;
  void *v10;
  std::string *v11;
  std::string v12;

  if (sub_20BA11F88(*(_QWORD **)(a1 + 24), a2) && (sub_20B86F9E4(*(_QWORD *)(a1 + 8), a2) & 1) != 0)
  {
    *(_DWORD *)(a1 + 32) = sub_20B8BC664(a2);
    *(double *)(a1 + 40) = sub_20B8927F8(a2, "theta");
    if (*(_QWORD *)(a1 + 8))
      return *(_QWORD *)(a1 + 24) != 0;
  }
  else
  {
    v5 = (char *)sub_20B8715E0(*(_QWORD *)(a1 + 8) + 136);
    sub_20B80BBD0(&v12, v5);
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v12.__r_.__value_.__l.__size_;
    if (size)
      std::string::append(&v12, " ", 1uLL);
    v7 = sub_20B8715E0(*(_QWORD *)(a1 + 24) + 88);
    v8 = strlen((const char *)v7);
    std::string::append(&v12, (const std::string::value_type *)v7, v8);
    v9 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
    v10 = (void *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v12;
    else
      v11 = (std::string *)v12.__r_.__value_.__r.__words[0];
    strncpy(byte_25472CA20, (const char *)v11, 0xFFuLL)[255] = 0;
    if (v9 < 0)
      operator delete(v10);
  }
  return 0;
}

void sub_20B8926F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B892714(uint64_t a1, char *a2)
{
  _BOOL8 v4;
  char *v5;
  int v6;
  void *v7;
  const char *v8;
  _QWORD v10[2];
  char v11;
  _BYTE v12[128];
  uint64_t v13;

  sub_20B892C88((uint64_t)v12);
  if (sub_20B8B96C8((uint64_t)v12, a2, (uint64_t)&off_24C499620) && sub_20B8BC708((uint64_t)v12))
  {
    v4 = sub_20B8925D0(a1, (uint64_t)v12);
  }
  else
  {
    v5 = (char *)sub_20B8715E0((uint64_t)&v13);
    sub_20B80BBD0(v10, v5);
    v6 = v11;
    v7 = (void *)v10[0];
    if (v11 >= 0)
      v8 = (const char *)v10;
    else
      v8 = (const char *)v10[0];
    strncpy(byte_25472CA20, v8, 0xFFuLL)[255] = 0;
    if (v6 < 0)
      operator delete(v7);
    v4 = 0;
  }
  sub_20B892E10((uint64_t)v12);
  return v4;
}

void sub_20B8927E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B892E10((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20B8927F8(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  double v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13[2];
  void *v14;
  double v15;
  void *__p[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  v3 = a1 + 8;
  sub_20B80BBD0(__p, a2);
  v4 = sub_20B871B2C(v3, __p);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x20BD39CB0]();
    return 0.0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
    {
      sub_20B80ACE0(v13, v4[7], (unint64_t)v4[8]);
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)(v4 + 7);
      v14 = v4[9];
    }
    sub_20B83BFEC((uint64_t)__p);
    v15 = 0.0;
    if (SHIBYTE(v14) >= 0)
      v6 = v13;
    else
      v6 = (void **)v13[0];
    if (SHIBYTE(v14) >= 0)
      v7 = HIBYTE(v14);
    else
      v7 = (uint64_t)v13[1];
    v8 = sub_20B828F84(v17, (uint64_t)v6, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0
      || (v9 = (_QWORD *)MEMORY[0x20BD39A34](__p, &v15), (*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      || (v10 = sub_20B871C3C(__p), (*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 2) == 0))
    {
      *(_QWORD *)operator new() = 0;
      MEMORY[0x20BD39CB0]();
      v5 = 0.0;
    }
    else
    {
      v5 = v15;
    }
    __p[0] = *(void **)MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v17[0] = v11;
    v17[1] = MEMORY[0x24BEDB848] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD39C2C](&v19);
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
  }
  return v5;
}

void sub_20B892A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B83C118((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B892A50(uint64_t a1, uint64_t a2)
{
  const char *v3;

  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 24))
    v3 = "atomic model replacement is not supported";
  else
    v3 = "current model is not available";
  strncpy(byte_25472CA20, v3, 0xFFuLL)[255] = 0;
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  return 0;
}

_DWORD *sub_20B892ABC(uint64_t a1)
{
  _DWORD *v2;
  float v3;
  const char *v4;

  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 24))
  {
    v2 = (_DWORD *)operator new();
    sub_20B8BB0AC((uint64_t)v2);
    if ((sub_20B8BB30C((uint64_t)v2, a1) & 1) != 0)
    {
      v3 = *(double *)(a1 + 40);
      (*(void (**)(_DWORD *, float))(*(_QWORD *)v2 + 272))(v2, v3);
      v2[8] = *(_DWORD *)(a1 + 32);
    }
    else
    {
      v4 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 320))(v2);
      strncpy(byte_25472CA20, v4, 0xFFuLL)[255] = 0;
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 336))(v2);
      return 0;
    }
  }
  else
  {
    v2 = 0;
    strncpy(byte_25472CA20, "Model is not available", 0xFFuLL)[255] = 0;
  }
  return v2;
}

void sub_20B892BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C40EC662B3ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B892BC4(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 24))
  {
    v2 = operator new();
    sub_20BA0F23C(v2, *(_QWORD *)(a1 + 24));
  }
  else
  {
    v2 = 0;
    strncpy(byte_25472CA20, "Model is not available", 0xFFuLL)[255] = 0;
  }
  return v2;
}

void sub_20B892C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C4086B49158);
  _Unwind_Resume(a1);
}

uint64_t sub_20B892C60(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v1)
    return *(_QWORD *)(v1 + 296);
  else
    return 0;
}

uint64_t sub_20B892C7C(uint64_t a1, unsigned int a2, int a3)
{
  return sub_20B871774(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, a3);
}

uint64_t sub_20B892C88(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)a1 = &unk_24C4674C0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_20B827F10(a1 + 128);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  return a1;
}

void sub_20B892D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v3 + 127) < 0)
    operator delete(*(void **)(v3 + 104));
  if (*(char *)(v3 + 103) < 0)
    operator delete(*(void **)(v3 + 80));
  if (*(char *)(v3 + 79) < 0)
    operator delete(*(void **)(v3 + 56));
  sub_20B83AFD0((void ***)va);
  sub_20B892D84(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_20B892D60(uint64_t a1)
{
  sub_20B892E10(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B892D84(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20B892D84(a1, *a2);
    sub_20B892D84(a1, a2[1]);
    sub_20B892DCC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20B892DCC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20B892E10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24C4674C0;
  v2 = a1 + 128;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 128) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 136) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 240);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v6 = (void **)(a1 + 32);
  sub_20B83AFD0(&v6);
  sub_20B892D84(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_20B892F0C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467008;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B892F5C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  unsigned __int16 v38;

  if (a2 >= 1)
  {
    v2 = 0;
    v3 = a2;
    v4 = &qword_25472B000;
    v5 = &qword_25472B000;
    do
    {
      v6 = v3 - 1;
      v7 = *(unsigned __int16 *)(a1 + 2 * (v3 - 1));
      v8 = atomic_load((unsigned __int8 *)&qword_25472B050);
      if ((v8 & 1) == 0)
      {
        v35 = a1;
        v29 = v3;
        v31 = v3 - 1;
        v33 = *(unsigned __int16 *)(a1 + 2 * (v3 - 1));
        v22 = __cxa_guard_acquire(&qword_25472B050);
        v7 = v33;
        v3 = v29;
        v6 = v31;
        v5 = &qword_25472B000;
        v4 = &qword_25472B000;
        v23 = v22;
        a1 = v35;
        if (v23)
        {
          v24 = 0;
          qword_25472B070 = 0;
          qword_25472B068 = 0;
          qword_25472B060 = (uint64_t)&qword_25472B068;
          do
          {
            v37 = asc_20BA93BC0[v24];
            sub_20B871FAC((uint64_t **)&qword_25472B060, (unsigned __int16 *)&v37, &v37);
            ++v24;
          }
          while (v24 != 13);
          __cxa_atexit((void (*)(void *))sub_20B893384, &qword_25472B060, &dword_20B7F7000);
          __cxa_guard_release(&qword_25472B050);
          a1 = v35;
          v3 = v29;
          v6 = v31;
          v4 = &qword_25472B000;
          v5 = &qword_25472B000;
          v7 = v33;
        }
      }
      v9 = v4[13];
      if (!v9)
        goto LABEL_15;
      v10 = &qword_25472B068;
      do
      {
        v11 = *(unsigned __int16 *)(v9 + 26);
        v12 = v11 >= v7;
        if (v11 >= v7)
          v13 = (uint64_t *)v9;
        else
          v13 = (uint64_t *)(v9 + 8);
        if (v12)
          v10 = (uint64_t *)v9;
        v9 = *v13;
      }
      while (*v13);
      if (v10 != &qword_25472B068 && *((unsigned __int16 *)v10 + 13) <= v7)
      {
        ++v2;
      }
      else
      {
LABEL_15:
        v14 = atomic_load((unsigned __int8 *)&qword_25472B058);
        if ((v14 & 1) == 0)
        {
          v36 = a1;
          v30 = v3;
          v32 = v6;
          v34 = v7;
          v25 = __cxa_guard_acquire(&qword_25472B058);
          v7 = v34;
          v3 = v30;
          v6 = v32;
          v5 = &qword_25472B000;
          v4 = &qword_25472B000;
          v26 = v25;
          a1 = v36;
          if (v26)
          {
            v27 = 0;
            qword_25472B088 = 0;
            qword_25472B080 = 0;
            qword_25472B078 = (uint64_t)&qword_25472B080;
            do
            {
              v38 = asc_20BA93BA4[v27];
              *((_DWORD *)sub_20B8933D4(v38, &v38) + 8) = v27++;
            }
            while (v27 != 13);
            __cxa_atexit((void (*)(void *))sub_20B8933AC, &qword_25472B078, &dword_20B7F7000);
            __cxa_guard_release(&qword_25472B058);
            a1 = v36;
            v3 = v30;
            v6 = v32;
            v4 = &qword_25472B000;
            v5 = &qword_25472B000;
            v7 = v34;
          }
        }
        v15 = v5[16];
        if (v15)
        {
          v16 = &qword_25472B080;
          do
          {
            v17 = *(unsigned __int16 *)(v15 + 28);
            v18 = v17 >= v7;
            if (v17 >= v7)
              v19 = (uint64_t *)v15;
            else
              v19 = (uint64_t *)(v15 + 8);
            if (v18)
              v16 = (uint64_t *)v15;
            v15 = *v19;
          }
          while (*v19);
          if (v16 != &qword_25472B080 && *((unsigned __int16 *)v16 + 14) <= v7)
          {
            v20 = *((unsigned int *)v16 + 8);
            if ((v20 & 0x80000000) == 0)
            {
              if (v2 <= 0)
                return (unsigned __int16)asc_20BA93BC0[v20];
              --v2;
            }
          }
        }
      }
      v21 = v3 <= 1;
      v3 = v6;
    }
    while (!v21);
  }
  return 0;
}

void sub_20B8932A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __guard *a10)
{
  sub_20B8934AC((_QWORD *)qword_25472B080);
  __cxa_guard_abort(&qword_25472B058);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8932E4(int ***a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t result;
  int **v7;
  uint64_t *v8;
  __int16 v9;

  result = sub_20B892F5C(a3, a4);
  v9 = result;
  if ((_DWORD)result)
  {
    sub_20B8B2334(0);
    v7 = *a1;
    v8 = sub_20B947D18();
    return sub_20B961F8C(v7, a2, (void *)*v8, v8[1], &v9, 1uLL, &v9, 1uLL, 0.0, 1609, 1609, 0, 0, 1, 0, 67, 2, 2);
  }
  return result;
}

uint64_t sub_20B893384(uint64_t a1)
{
  sub_20B8292CC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20B8933AC(uint64_t a1)
{
  sub_20B8934AC(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *sub_20B8933D4(unsigned __int16 a1, _WORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = qword_25472B080;
  if (qword_25472B080)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t *)v3;
        v5 = *(unsigned __int16 *)(v3 + 28);
        if (v5 <= a1)
          break;
        v3 = *v4;
        v6 = v4;
        if (!*v4)
          goto LABEL_9;
      }
      if (v5 >= a1)
        break;
      v3 = v4[1];
      if (!v3)
      {
        v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = &qword_25472B080;
    v4 = &qword_25472B080;
LABEL_9:
    v7 = v4;
    v4 = (uint64_t *)operator new(0x28uLL);
    *((_WORD *)v4 + 14) = *a2;
    *((_DWORD *)v4 + 8) = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t)v7;
    *v6 = (uint64_t)v4;
    v8 = v4;
    if (*(_QWORD *)qword_25472B078)
    {
      qword_25472B078 = *(_QWORD *)qword_25472B078;
      v8 = (uint64_t *)*v6;
    }
    sub_20B82973C((uint64_t *)qword_25472B080, v8);
    ++qword_25472B088;
  }
  return v4;
}

void sub_20B8934AC(_QWORD *a1)
{
  if (a1)
  {
    sub_20B8934AC(*a1);
    sub_20B8934AC(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_20B8934E4(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  CFIndex v14;

  v13 = 0;
  v14 = 0;
  sub_20B8D0624(a2, &v14, &v12);
  sub_20B8D0624(a3, &v13, &v11);
  v6 = v11;
  v5 = v12;
  if (v12)
    v7 = v14;
  else
    v7 = 0;
  if (v11)
    v8 = v13;
  else
    v8 = 0;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, CFIndex, uint64_t, CFIndex))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v12, v7, v11, v8);
  if (v6)
    MEMORY[0x20BD39C80](v6, 0x1000C80BDFB0063);
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C80BDFB0063);
  return (v9 >> 2) & 1;
}

void sub_20B8935B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (v11)
    MEMORY[0x20BD39C80](v11, 0x1000C80BDFB0063);
  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B893608(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20B8942D8(a1);
  *(_QWORD *)(v2 + 360) = 0;
  *(_QWORD *)(v2 + 368) = 0x1FF00000000;
  *(_QWORD *)(a1 + 376) = operator new[]();
  *(_QWORD *)(a1 + 384) = operator new[]();
  sub_20B827F10(a1 + 392);
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  memset(*(void **)(a1 + 376), 255, 0x800uLL);
  return a1;
}

void sub_20B893690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 384);
  *(_QWORD *)(v1 + 384) = 0;
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8052888210);
  v4 = *(_QWORD *)(v1 + 376);
  *(_QWORD *)(v1 + 376) = 0;
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8052888210);
  sub_20B894370(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8936F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_20B878B18(a1);
  if (*(char *)(a1 + 679) < 0)
    operator delete(*(void **)(a1 + 656));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 392) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 392 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 400) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 504);
  v4 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8052888210);
  v5 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C8052888210);
  return sub_20B894370(a1);
}

uint64_t sub_20B8937D8(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;

  sub_20B8938D8(a2, "dicdir", v8);
  sub_20B80BBD0(__p, "matrix.bin");
  sub_20B8BC594((uint64_t)v8, (uint64_t)__p, &v10);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v10;
  else
    v3 = (std::string *)v10.__r_.__value_.__r.__words[0];
  v4 = sub_20B8939DC(a1, (char *)v3, "r");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v4;
}

void sub_20B893890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

double sub_20B8938D8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  double result;
  __int128 v9;
  void *v10;
  void *__p[2];
  char v12;

  v5 = a1 + 8;
  sub_20B80BBD0(__p, a2);
  v6 = sub_20B871B2C(v5, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    __p[0] = &unk_24C467088;
    __p[1] = v7;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_20B894454(__p);
  }
  else
  {
    if (*((char *)v6 + 79) < 0)
    {
      sub_20B80ACE0(&v9, v6[7], (unint64_t)v6[8]);
    }
    else
    {
      v9 = *(_OWORD *)(v6 + 7);
      v10 = v6[9];
    }
    result = *(double *)&v9;
    *(_OWORD *)a3 = v9;
    a3[2] = v10;
  }
  return result;
}

void sub_20B8939C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8939DC(_QWORD *a1, char *a2, const char *a3)
{
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  if ((sub_20B893BDC((uint64_t)a1, a2, a3) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[49] - 24) + 392), 0);
    v7 = sub_20B828F84(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_20B828F84(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20B828F84(v8, (uint64_t)") [", 3);
    v10 = sub_20B828F84(v9, (uint64_t)"cmmap_.open(filename, mode)", 27);
    v11 = sub_20B828F84(v10, (uint64_t)"] ", 2);
    v12 = "cannot open: ";
    v13 = 13;
LABEL_8:
    v25 = sub_20B828F84(v11, (uint64_t)v12, v13);
    v20 = strlen(a2);
    v18 = v25;
    v19 = a2;
    goto LABEL_9;
  }
  v5 = a1[1];
  if (v5)
  {
    if (a1[2] > 3uLL)
      return sub_20B893F9C((uint64_t)a1, v5);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[49] - 24) + 392), 0);
    v21 = sub_20B828F84(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_20B828F84(v21, (uint64_t)"(", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = sub_20B828F84(v22, (uint64_t)") [", 3);
    v24 = sub_20B828F84(v23, (uint64_t)"cmmap_.size() >= 2", 18);
    v11 = sub_20B828F84(v24, (uint64_t)"] ", 2);
    v12 = "file size is invalid: ";
    v13 = 22;
    goto LABEL_8;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[49] - 24) + 392), 0);
  v14 = sub_20B828F84(a1 + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
  sub_20B828F84(v14, (uint64_t)"(", 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = sub_20B828F84(v15, (uint64_t)") [", 3);
  v17 = sub_20B828F84(v16, (uint64_t)"cmmap_.begin()", 14);
  v18 = sub_20B828F84(v17, (uint64_t)"] ", 2);
  v19 = "matrix is NULL";
  v20 = 14;
LABEL_9:
  sub_20B828F84(v18, (uint64_t)v19, v20);
  return 0;
}

uint64_t sub_20B893BDC(uint64_t a1, char *a2, const char *a3)
{
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  off_t st_size;
  void *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  size_t v46;
  stat v47;

  sub_20B878B18(a1);
  sub_20B80BBD0(&v47, a2);
  v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v47.st_dev;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v47.st_uid;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 340) = 0;
    v16 = open(a2, 0);
    *(_DWORD *)(a1 + 336) = v16;
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
    v18 = *(_QWORD *)(a1 + 48);
    v17 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(_QWORD *)(v18 - 24)), 0);
    v19 = sub_20B828F84(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_20B828F84(v19, (uint64_t)"(", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20B828F84(v20, (uint64_t)") [", 3);
    v22 = "(fd = ::open(filename, flag | O_BINARY)) >= 0";
    v23 = 45;
LABEL_15:
    v37 = sub_20B828F84(v21, (uint64_t)v22, v23);
    v13 = sub_20B828F84(v37, (uint64_t)"] ", 2);
    v14 = "open failed: ";
    v15 = 13;
    goto LABEL_19;
  }
  if (strcmp(a3, "r+"))
  {
    v8 = *(_QWORD *)(a1 + 48);
    v7 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(v8 - 24)), 0);
    v9 = sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_20B828F84(v9, (uint64_t)"(", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_20B828F84(v10, (uint64_t)") [", 3);
    v12 = sub_20B828F84(v11, (uint64_t)"false", 5);
    v13 = sub_20B828F84(v12, (uint64_t)"] ", 2);
    v14 = "unknown open mode: ";
    v15 = 19;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 340) = 514;
  v16 = open(a2, 514, 384);
  *(_DWORD *)(a1 + 336) = v16;
  if (v16 < 0)
  {
    v34 = *(_QWORD *)(a1 + 48);
    v33 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v33 + *(_QWORD *)(v34 - 24)), 0);
    v35 = sub_20B828F84(v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
    sub_20B828F84(v35, (uint64_t)"(", 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20B828F84(v36, (uint64_t)") [", 3);
    v22 = "(fd = ::open(filename, flag | O_BINARY, S_IRUSR | S_IWUSR)) >= 0";
    v23 = 64;
    goto LABEL_15;
  }
LABEL_9:
  if ((fstat(v16, &v47) & 0x80000000) == 0)
  {
    st_size = v47.st_size;
    *(_QWORD *)(a1 + 16) = v47.st_size;
    if (st_size)
    {
      v25 = mmap(0, st_size, *(_DWORD *)(a1 + 340) & 2 | 1u, 1, *(_DWORD *)(a1 + 336), 0);
      if (v25 == (void *)-1)
      {
        v40 = *(_QWORD *)(a1 + 48);
        v39 = (_QWORD *)(a1 + 48);
        std::ios_base::clear((std::ios_base *)((char *)v39 + *(_QWORD *)(v40 - 24)), 0);
        v41 = sub_20B828F84(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
        sub_20B828F84(v41, (uint64_t)"(", 1);
        v42 = (_QWORD *)std::ostream::operator<<();
        v43 = sub_20B828F84(v42, (uint64_t)") [", 3);
        v44 = sub_20B828F84(v43, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
        v13 = sub_20B828F84(v44, (uint64_t)"] ", 2);
        v14 = "mmap() failed: ";
        v15 = 15;
        goto LABEL_19;
      }
      v26 = v25;
      madvise(v25, *(_QWORD *)(a1 + 16), 1);
    }
    else
    {
      v26 = 0;
    }
    *(_QWORD *)(a1 + 8) = v26;
    close(*(_DWORD *)(a1 + 336));
    *(_DWORD *)(a1 + 336) = -1;
    return 1;
  }
  v28 = *(_QWORD *)(a1 + 48);
  v27 = (_QWORD *)(a1 + 48);
  std::ios_base::clear((std::ios_base *)((char *)v27 + *(_QWORD *)(v28 - 24)), 0);
  v29 = sub_20B828F84(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/mmap.h", 59);
  sub_20B828F84(v29, (uint64_t)"(", 1);
  v30 = (_QWORD *)std::ostream::operator<<();
  v31 = sub_20B828F84(v30, (uint64_t)") [", 3);
  v32 = sub_20B828F84(v31, (uint64_t)"::fstat(fd, &st) >= 0", 21);
  v13 = sub_20B828F84(v32, (uint64_t)"] ", 2);
  v14 = "failed to get file size: ";
  v15 = 25;
LABEL_19:
  v45 = sub_20B828F84(v13, (uint64_t)v14, v15);
  v46 = strlen(a2);
  sub_20B828F84(v45, (uint64_t)a2, v46);
  return 0;
}

uint64_t sub_20B893F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v2 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a1 + 368) = v2;
  v3 = *(unsigned __int16 *)(a2 + 10);
  *(_WORD *)(a1 + 370) = v3;
  if (!v2)
  {
    v7 = (_QWORD *)(a1 + 392);
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(_QWORD *)(*(_QWORD *)(a1 + 392) - 24)), 0);
    v8 = sub_20B828F84(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_20B828F84(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_20B828F84(v9, (uint64_t)") [", 3);
    v11 = "lsize_ > 0";
LABEL_7:
    v15 = sub_20B828F84(v10, (uint64_t)v11, 10);
    v16 = sub_20B828F84(v15, (uint64_t)"] ", 2);
    v17 = "left size is invalid";
    v18 = 20;
    goto LABEL_9;
  }
  if (!v3)
  {
    v12 = (_QWORD *)(a1 + 392);
    std::ios_base::clear((std::ios_base *)(a1 + 392 + *(_QWORD *)(*(_QWORD *)(a1 + 392) - 24)), 0);
    v13 = sub_20B828F84(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
    sub_20B828F84(v13, (uint64_t)"(", 1);
    v14 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_20B828F84(v14, (uint64_t)") [", 3);
    v11 = "rsize_ > 0";
    goto LABEL_7;
  }
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = a2 + 16 + 4 * v2 + 4;
    *(_QWORD *)(a1 + 344) = a2 + 16;
    *(_QWORD *)(a1 + 352) = v5;
    *(_QWORD *)(a1 + 360) = v5 + 2 * v4;
    return 1;
  }
  v19 = (_QWORD *)(a1 + 392);
  std::ios_base::clear((std::ios_base *)(a1 + 392 + *(_QWORD *)(*(_QWORD *)(a1 + 392) - 24)), 0);
  v20 = sub_20B828F84(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/compressed_connector.cpp", 77);
  sub_20B828F84(v20, (uint64_t)"(", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = sub_20B828F84(v21, (uint64_t)") [", 3);
  v23 = sub_20B828F84(v22, (uint64_t)"num_elements > 0", 16);
  v16 = sub_20B828F84(v23, (uint64_t)"] ", 2);
  v17 = "number of elements is invalid";
  v18 = 29;
LABEL_9:
  sub_20B828F84(v16, (uint64_t)v17, v18);
  return 0;
}

_QWORD *sub_20B894160(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BD399D4](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 52);
  return a1;
}

uint64_t sub_20B8941B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD39C2C](a1 + 120);
  return a1;
}

void sub_20B89423C()
{
  const std::locale::facet *v0;
  std::locale v1;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v0 = std::locale::use_facet(&v1, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v0->__vftable[2].~facet_0)(v0, 10);
  std::locale::~locale(&v1);
  std::ostream::put();
  std::ostream::flush();
  exit(-1);
}

void sub_20B8942BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_20B854468(a1);
}

uint64_t sub_20B8942D8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C467480;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20B827F10(a1 + 48);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_20B894330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20B89434C(uint64_t a1)
{
  sub_20B894370(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B894370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C467480;
  sub_20B878B18(a1);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 160);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20B894430(_QWORD *a1)
{
  sub_20B894454(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B894454(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C467088;
  v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x20BD39CB0](v2, 0x1012C40EC159624);
  }
  return a1;
}

void sub_20B8944B4(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void sub_20B8945C4(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472B098);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472B098))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472B090 = v74;
    __cxa_guard_release(&qword_25472B098);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472B0A0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0A0))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547282F0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B0A0);
  }
  std::mutex::lock(&stru_2547282F0);
  v8 = (_QWORD *)qword_25472B090;
  v9 = sub_20B828414(qword_25472B090 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BF30;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472B090;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_2547282F0);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20B894DC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B098);
  _Unwind_Resume(a1);
}

uint64_t sub_20B894E44(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  v2 = operator new();
  sub_20BA1B1B0(v2, *(_DWORD *)(a1 + 40));
  v3 = *(char **)(a1 + 32);
  if (v3[23] < 0)
    v3 = *(char **)v3;
  if ((sub_20BA1B3D4(v2, v3, (uint64_t)"r") & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    return 0;
  }
  return v2;
}

void sub_20B894EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40B09A9449);
  _Unwind_Resume(a1);
}

void sub_20B894EE8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B894F0C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B894F24(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E6A0))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B894F64(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __CFString **v10;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v6 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 216))(v6), (_DWORD)result))
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
        if ((_DWORD)result)
        {
          v7 = *(_QWORD *)(a1 + 32);
          if (!v7)
            sub_20B80BB74();
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
          if (v8 == 2 || v8 == 4)
          {
            v10 = &off_24C49C6E8;
          }
          else
          {
            if (v8 != 5)
              return 1;
            v10 = &off_24C49C6F0;
          }
          CFDictionaryAddValue(a2, *v10, (const void *)*MEMORY[0x24BDBD270]);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B895068(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B8950B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD39CB0);
}

void sub_20B895118(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t *v10;
  double v11;
  uint64_t **v12;
  double v13;
  unsigned __int16 v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t **v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *(*v27)(_QWORD *, _QWORD *);
  void (*v28)(uint64_t);
  const void ***v29;
  const void **v30[2];
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  _QWORD v35[2];
  char v36;

  v34 = 0;
  v32 = 0;
  v33 = 0;
  v30[1] = 0;
  v31 = &v32;
  v24 = 0;
  v25 = &v24;
  v26 = 0x4002000000;
  v27 = sub_20B89541C;
  v28 = sub_20B895458;
  v29 = v30;
  v30[0] = 0;
  v6 = (uint64_t *)operator new(0x30uLL);
  v7 = v6;
  v35[0] = v6;
  v35[1] = &v32;
  v36 = 0;
  if (!a1)
  {
    v6[4] = 0;
    v6[5] = 0;
    v36 = 1;
LABEL_12:
    v23 = &v32;
    v12 = &v32;
    goto LABEL_13;
  }
  v8 = CFRetain(a1);
  v9 = v35[0];
  v10 = v32;
  v7[4] = (uint64_t)v8;
  v7[5] = 0;
  v36 = 1;
  if (!v10)
  {
    v7 = (uint64_t *)v9;
    goto LABEL_12;
  }
  v11 = *(double *)(v9 + 40);
  do
  {
    while (1)
    {
      v12 = (uint64_t **)v10;
      v13 = *((double *)v10 + 5);
      if (v11 >= v13)
        break;
      if (v13 < v11)
        goto LABEL_16;
      v10 = (uint64_t *)v10[1];
      if (!v10)
      {
        v23 = v12 + 1;
        v7 = (uint64_t *)v9;
        goto LABEL_13;
      }
    }
    v10 = (uint64_t *)*v10;
  }
  while (*v12);
  v7 = (uint64_t *)v9;
  v23 = v12;
LABEL_13:
  *v7 = 0;
  v7[1] = 0;
  v7[2] = (uint64_t)v12;
  *v23 = v7;
  if (*v31)
  {
    v31 = (uint64_t **)*v31;
    v7 = *v23;
  }
  sub_20B82973C(v32, v7);
  ++v33;
  v35[0] = 0;
LABEL_16:
  sub_20B895614((uint64_t)v35);
  if (v33)
  {
    v14 = 0;
    while (1)
    {
      v15 = v31;
      if (v31 != &v32)
        break;
LABEL_28:
      v19 = v25;
      sub_20B89559C((const void **)v32);
      v20 = v19 + 6;
      v21 = (uint64_t *)v19[6];
      v31 = (uint64_t **)v19[5];
      v32 = v21;
      v33 = v19[7];
      if (v33)
      {
        v21[2] = (uint64_t)&v32;
        v19[5] = (uint64_t)v20;
        *v20 = 0;
        v19[7] = 0;
      }
      else
      {
        v31 = &v32;
      }
      v22 = v25 + 6;
      sub_20B89559C((const void **)v25[6]);
      *(v22 - 1) = v22;
      *v22 = 0;
      v22[1] = 0;
      ++v14;
      if (!v33)
        goto LABEL_32;
    }
    while (1)
    {
      (*(void (**)(uint64_t, uint64_t *, _QWORD, char *, double))(a2 + 16))(a2, v15[4], v14, &v34, *((double *)v15 + 5));
      if (v34)
        break;
      if (a3 > v14)
        LXCursorEnumerateChildren();
      v16 = v15[1];
      if (v16)
      {
        do
        {
          v17 = (uint64_t **)v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t **)v15[2];
          v18 = *v17 == (uint64_t *)v15;
          v15 = v17;
        }
        while (!v18);
      }
      v15 = v17;
      if (v17 == &v32)
        goto LABEL_28;
    }
  }
LABEL_32:
  _Block_object_dispose(&v24, 8);
  sub_20B89559C(v30[0]);
  sub_20B89559C((const void **)v32);
}

void sub_20B8953E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void **a23,uint64_t a24,uint64_t a25,const void **a26)
{
  uint64_t v26;

  sub_20B895614(v26 - 144);
  _Block_object_dispose(&a17, 8);
  sub_20B89559C(a23);
  sub_20B89559C(a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B89541C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_20B895458(uint64_t a1)
{
  sub_20B89559C(*(const void ***)(a1 + 48));
}

uint64_t sub_20B895460(uint64_t a1, const void *a2)
{
  double v4;
  uint64_t result;
  double v6;
  double v7;
  uint64_t v8;
  double **v9;
  double *v10;
  CFTypeRef v11;
  double *v12;
  double *v13;
  double **v14;
  double v15;
  double v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;

  v4 = *(double *)(a1 + 40);
  result = LXCursorConditionalProbability();
  v7 = v4 + v6;
  if (v7 >= *(double *)(a1 + 48))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = (double **)(v8 + 48);
    v10 = (double *)operator new(0x30uLL);
    v18[0] = v10;
    v18[1] = v8 + 48;
    v19 = 0;
    if (a2)
    {
      v11 = CFRetain(a2);
      v12 = (double *)v18[0];
    }
    else
    {
      v11 = 0;
      v12 = v10;
    }
    *((_QWORD *)v10 + 4) = v11;
    v10[5] = v7;
    v19 = 1;
    v13 = *v9;
    v14 = (double **)(v8 + 48);
    if (*v9)
    {
      v15 = v12[5];
      do
      {
        while (1)
        {
          v14 = (double **)v13;
          v16 = v13[5];
          if (v15 < v16)
            break;
          v13 = *(double **)v13;
          v9 = v14;
          if (!*v14)
            goto LABEL_12;
        }
        if (v16 < v15)
          return sub_20B895614((uint64_t)v18);
        v13 = (double *)*((_QWORD *)v13 + 1);
      }
      while (v13);
      v9 = v14 + 1;
    }
LABEL_12:
    *v12 = 0.0;
    v12[1] = 0.0;
    *((_QWORD *)v12 + 2) = v14;
    *v9 = v12;
    v17 = **(_QWORD **)(v8 + 40);
    if (v17)
    {
      *(_QWORD *)(v8 + 40) = v17;
      v12 = *v9;
    }
    sub_20B82973C(*(uint64_t **)(v8 + 48), (uint64_t *)v12);
    ++*(_QWORD *)(v8 + 56);
    v18[0] = 0;
    return sub_20B895614((uint64_t)v18);
  }
  return result;
}

void sub_20B895588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B895614((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B89559C(const void **a1)
{
  if (a1)
  {
    sub_20B89559C(*a1);
    sub_20B89559C(a1[1]);
    sub_20B8955E0(a1 + 4, 0);
    operator delete(a1);
  }
}

void sub_20B8955E0(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B895614(uint64_t a1)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B8955E0(v2 + 4, 0);
    operator delete(v2);
  }
  return a1;
}

const __CFNumber *sub_20B89565C(const __CFDictionary *a1, const void *a2, void *a3)
{
  const __CFNumber *result;
  const __CFNumber *v5;
  CFTypeID v6;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    result = (const __CFNumber *)CFNumberGetTypeID();
    if ((const __CFNumber *)v6 == result)
      return (const __CFNumber *)CFNumberGetValue(v5, kCFNumberFloatType, a3);
  }
  return result;
}

uint64_t sub_20B8956BC(unsigned int a1)
{
  unsigned __int8 v1;
  char *v4;
  _QWORD v5[4];
  unsigned int v6;
  std::string __p;
  std::string v8;

  v1 = atomic_load((unsigned __int8 *)&qword_25472C868);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25472C868))
  {
    v4 = sub_20B8D101C(a1);
    sub_20B80BBD0(&__p, v4);
    sub_20B896098("CPSearchParameters", &__p, &v8);
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 0x40000000;
    v5[2] = sub_20B8960F4;
    v5[3] = &unk_24C46C0E0;
    v6 = a1;
    sub_20B895810((void **)&v8.__r_.__value_.__l.__data_, (uint64_t)v5, 0, &qword_25472C858);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))sub_20B896274, &qword_25472C858, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C868);
  }
  return qword_25472C858;
}

void sub_20B8957C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 17) < 0)
    operator delete(*(void **)(v20 - 40));
  if (a20 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25472C868);
  _Unwind_Resume(a1);
}

void sub_20B895810(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unsigned __int8 **v35;
  unsigned __int8 *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 **v58;
  _QWORD *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  NSObject *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  std::__shared_weak_count *v79;
  __int128 buf;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472B0B0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0B0))
  {
    v74 = operator new();
    *(_OWORD *)v74 = 0u;
    *(_OWORD *)(v74 + 16) = 0u;
    *(_DWORD *)(v74 + 32) = 1065353216;
    qword_25472B0A8 = v74;
    __cxa_guard_release(&qword_25472B0B0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472B0B8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0B8))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254728330, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B0B8);
  }
  std::mutex::lock(&stru_254728330);
  v8 = (_QWORD *)qword_25472B0A8;
  v9 = sub_20B828414(qword_25472B0A8 + 24, (uint64_t)a1);
  v10 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_20;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*v8 + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_20:
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, a1);
    v21 = sub_20B9A7C5C(0xDu);
    v22 = v20 - 1;
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v23 = v21;
      if (os_signpost_enabled(v21))
      {
        if (*((char *)a1 + 23) >= 0)
          v24 = a1;
        else
          v24 = *a1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v20, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v25 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v26 = (std::__shared_weak_count *)operator new();
    v26->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BD00;
    v26->__shared_owners_ = 0;
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
    v75 = v25;
    v78 = v25;
    v79 = v26;
    v28 = qword_25472B0A8;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    v30 = sub_20B828414(v28 + 24, (uint64_t)a1);
    v31 = v30;
    v32 = *(_QWORD *)(v28 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        v22 = v30;
        if (v30 >= v32)
          v22 = v30 % v32;
      }
      else
      {
        v22 = (v32 - 1) & v30;
      }
      v35 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      if (v35)
      {
        for (i = *v35; i; i = *(unsigned __int8 **)i)
        {
          v37 = *((_QWORD *)i + 1);
          if (v37 == v31)
          {
            if ((sub_20B8288BC(v28 + 32, i + 16, (unsigned __int8 *)a1) & 1) != 0)
            {
              v72 = v75;
              v71 = v20 - 1;
              goto LABEL_104;
            }
          }
          else
          {
            if (v34 > 1)
            {
              if (v37 >= v32)
                v37 %= v32;
            }
            else
            {
              v37 &= v32 - 1;
            }
            if (v37 != v22)
              break;
          }
        }
      }
    }
    v38 = operator new(0x38uLL);
    v39 = (_QWORD *)(v28 + 16);
    *(_QWORD *)&buf = v38;
    *((_QWORD *)&buf + 1) = v28 + 16;
    v81 = 0;
    *v38 = 0;
    v38[1] = v31;
    v40 = v38 + 2;
    if (*((char *)a1 + 23) < 0)
    {
      sub_20B80ACE0(v40, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)a1;
      v38[4] = a1[2];
    }
    v38[5] = 0;
    v38[6] = 0;
    v81 = 1;
    v41 = (float)(unint64_t)(*(_QWORD *)(v28 + 24) + 1);
    v42 = *(float *)(v28 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
LABEL_94:
      v58 = *(unsigned __int8 ***)(*(_QWORD *)v28 + 8 * v22);
      i = (unsigned __int8 *)buf;
      if (v58)
      {
        *(_QWORD *)buf = *v58;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v28 + 16);
        *(_QWORD *)(v28 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v28 + 8 * v22) = v39;
        v72 = v75;
        v71 = v20 - 1;
        v59 = (_QWORD *)(v28 + 24);
        if (!*(_QWORD *)i)
          goto LABEL_103;
        v60 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v60 >= v32)
            v60 %= v32;
        }
        else
        {
          v60 &= v32 - 1;
        }
        v58 = (unsigned __int8 **)(*(_QWORD *)v28 + 8 * v60);
      }
      *v58 = i;
LABEL_103:
      *(_QWORD *)&buf = 0;
      ++*v59;
      sub_20B876070((uint64_t *)&buf);
LABEL_104:
      v61 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v72;
      *((_QWORD *)i + 6) = v26;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
      v62 = sub_20B9A7C5C(0xDu);
      if (v71 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v63 = v62;
        if (os_signpost_enabled(v62))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v63, OS_SIGNPOST_INTERVAL_END, v20, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_109;
    }
    v43 = 1;
    if (v32 >= 3)
      v43 = (v32 & (v32 - 1)) != 0;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = *(_QWORD *)(v28 + 8);
    if (*(_QWORD *)&prime > v32)
      goto LABEL_60;
    if (*(_QWORD *)&prime < v32)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v28 + 24) / *(float *)(v28 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v28 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v47 = operator new(8 * *(_QWORD *)&prime);
          v48 = *(void **)v28;
          *(_QWORD *)v28 = v47;
          if (v48)
            operator delete(v48);
          v49 = 0;
          *(int8x8_t *)(v28 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v49++) = 0;
          while (*(_QWORD *)&prime != v49);
          v50 = (_QWORD *)*v39;
          if (*v39)
          {
            v51 = v50[1];
            v52 = (uint8x8_t)vcnt_s8(prime);
            v52.i16[0] = vaddlv_u8(v52);
            if (v52.u32[0] > 1uLL)
            {
              if (v51 >= *(_QWORD *)&prime)
                v51 %= *(_QWORD *)&prime;
            }
            else
            {
              v51 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v51) = v39;
            v56 = (_QWORD *)*v50;
            if (*v50)
            {
              do
              {
                v57 = v56[1];
                if (v52.u32[0] > 1uLL)
                {
                  if (v57 >= *(_QWORD *)&prime)
                    v57 %= *(_QWORD *)&prime;
                }
                else
                {
                  v57 &= *(_QWORD *)&prime - 1;
                }
                if (v57 != v51)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v28 + 8 * v57))
                  {
                    *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v50;
                    goto LABEL_85;
                  }
                  *v50 = *v56;
                  *v56 = **(_QWORD **)(*(_QWORD *)v28 + 8 * v57);
                  **(_QWORD **)(*(_QWORD *)v28 + 8 * v57) = v56;
                  v56 = v50;
                }
                v57 = v51;
LABEL_85:
                v50 = v56;
                v56 = (_QWORD *)*v56;
                v51 = v57;
              }
              while (v56);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_89;
        }
        v73 = *(void **)v28;
        *(_QWORD *)v28 = 0;
        if (v73)
          operator delete(v73);
        v32 = 0;
        *(_QWORD *)(v28 + 8) = 0;
      }
    }
LABEL_89:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v22 = v31 % v32;
      else
        v22 = v31;
    }
    else
    {
      v22 = (v32 - 1) & v31;
    }
    goto LABEL_94;
  }
  v17 = (uint64_t)(v8 + 4);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_20;
LABEL_19:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_20;
  }
  if ((sub_20B8288BC(v17, v16 + 16, (unsigned __int8 *)a1) & 1) == 0)
    goto LABEL_19;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  if (!v67)
    goto LABEL_20;
  if (v67->__shared_owners_ == -1 || a3 != 0)
    goto LABEL_20;
  v69 = std::__shared_weak_count::lock(v67);
  if (v69)
    v70 = *((_QWORD *)v16 + 5);
  else
    v70 = 0;
  v78 = v70;
  v79 = v69;
LABEL_109:
  std::mutex::unlock(&stru_254728330);
  *a4 = v78;
  a4[1] = (uint64_t)v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldxr(p_shared_owners);
    while (__stxr(v65 + 1, p_shared_owners));
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_20B89600C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B0B0);
  _Unwind_Resume(a1);
}

__n128 sub_20B896098@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_20B8960F4(uint64_t a1)
{
  signed int v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;

  v1 = *(_DWORD *)(a1 + 32);
  v2 = operator new();
  *(_OWORD *)v2 = xmmword_20BA3AB30;
  *(_OWORD *)(v2 + 16) = xmmword_20BA3AB40;
  *(_DWORD *)(v2 + 32) = 1129447424;
  v3 = (_QWORD *)sub_20B9AE60C();
  v4 = (char *)sub_20B9AE6A0(v3, v1, off_254729648[0], off_254729630[0]);
  if (v4[23] < 0)
    v4 = *(char **)v4;
  v5 = (const __CFDictionary *)sub_20B8D25FC(v4);
  if (v5)
  {
    v6 = v5;
    sub_20B89565C(v5, CFSTR("keyRadii"), (void *)v2);
    sub_20B89565C(v6, CFSTR("CTCPathScoreMargin"), (void *)(v2 + 4));
    sub_20B89565C(v6, CFSTR("CTCLMScorerAlpha"), (void *)(v2 + 8));
    sub_20B89565C(v6, CFSTR("CTCFTotalDistanceDeviationRatio"), (void *)(v2 + 12));
    sub_20B89565C(v6, CFSTR("CTCMinDistanceThreshold"), (void *)(v2 + 16));
    sub_20B89565C(v6, CFSTR("CTCFirstCharDistanceThreshold"), (void *)(v2 + 20));
    sub_20B89565C(v6, CFSTR("CTCLastCharDistanceThreshold"), (void *)(v2 + 24));
    sub_20B89565C(v6, CFSTR("CTCShortPathDistance"), (void *)(v2 + 28));
    sub_20B89565C(v6, CFSTR("CTCLongPathDistance"), (void *)(v2 + 32));
    CFRelease(v6);
  }
  return v2;
}

void sub_20B89625C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20B89627C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8962A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x20BD39CB0);
  return result;
}

uint64_t sub_20B8962C0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E5C8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B896300(UTF32Char theChar)
{
  unsigned __int8 v2;
  uint64_t result;

  v2 = atomic_load((unsigned __int8 *)&qword_25472C878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472C878))
  {
    qword_25472C870 = CEMCreateEmojiCharacterSet();
    __cxa_guard_release(&qword_25472C878);
  }
  result = qword_25472C870;
  if (qword_25472C870)
    return CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_25472C870, theChar) != 0;
  return result;
}

void sub_20B896370(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C878);
  _Unwind_Resume(a1);
}

BOOL sub_20B896388(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  CFIndex v4;
  const __CFAllocator *v5;
  _BOOL8 v6;
  CFRange RangeOfComposedCharactersAtIndex;
  CFStringRef v8;
  int IsSingleEmoji;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  if (!Length)
    return 0;
  v3 = Length;
  v4 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  do
  {
    v6 = v4 >= v3;
    if (v4 >= v3)
      break;
    RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a1, v4);
    v4 += RangeOfComposedCharactersAtIndex.length;
    if (v4 > v3)
      break;
    v8 = CFStringCreateWithSubstring(v5, a1, RangeOfComposedCharactersAtIndex);
    IsSingleEmoji = CEMStringIsSingleEmoji();
    if (v8)
      CFRelease(v8);
  }
  while (IsSingleEmoji);
  return v6;
}

void sub_20B89644C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_20B896464(CFStringRef theString)
{
  unsigned __int8 v2;
  CFIndex result;
  const __CFCharacterSet *v4;
  CFRange v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25472C888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472C888))
  {
    qword_25472C880 = (uint64_t)sub_20B896520();
    __cxa_guard_release(&qword_25472C888);
  }
  if (!theString)
    return 0;
  result = CFStringGetLength(theString);
  if (result)
  {
    v4 = (const __CFCharacterSet *)qword_25472C880;
    v5.length = CFStringGetLength(theString);
    v5.location = 0;
    return CFStringFindCharacterFromSet(theString, v4, v5, 2uLL, 0) == 0;
  }
  return result;
}

void sub_20B896508(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C888);
  _Unwind_Resume(a1);
}

__CFCharacterSet *sub_20B896520()
{
  __CFCharacterSet *Mutable;
  const __CFCharacterSet *Predefined;
  CFRange v3;
  CFRange v4;

  Mutable = CFCharacterSetCreateMutable(0);
  v3.location = 97;
  v3.length = 26;
  CFCharacterSetAddCharactersInRange(Mutable, v3);
  v4.location = 65;
  v4.length = 26;
  CFCharacterSetAddCharactersInRange(Mutable, v4);
  CFCharacterSetAddCharactersInString(Mutable, CFSTR("'-"));
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  CFCharacterSetUnion(Mutable, Predefined);
  CFCharacterSetInvert(Mutable);
  return Mutable;
}

void sub_20B896590(CFStringRef theString@<X1>, const __CFString *a2@<X0>, std::string *a3@<X8>)
{
  CFIndex Length;
  CFIndex v7;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  const UniChar *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t *v17;
  uint64_t v18;
  CFIndex v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  CFIndex v30;
  UniChar v31;
  UniChar *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  UniChar v36;
  int64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v46;
  CFIndex v47;
  CFIndex v48;
  CFIndex v49;
  uint64_t v50;
  CFIndex v51;
  unint64_t v52;
  UniChar v53;
  int64_t v54;
  uint64_t v56;
  CFIndex v57;
  int64_t v58;
  CFIndex v59;
  uint64_t v60;
  CFIndex v61;
  UniChar v62;
  UniChar *v63;
  uint64_t v64;
  uint64_t v65;
  CFIndex v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  BOOL v73;
  unint64_t v74;
  std::string::size_type size;
  _BYTE *v76;
  BOOL v77;
  unint64_t v78;
  char v79;
  CFIndex v81;
  CFIndex i;
  uint64_t v83;
  CFIndex v84;
  UniChar v85;
  uint64_t v86;
  uint64_t v87;
  CFIndex v88;
  uint64_t v89;
  CFIndex v90;
  CFIndex v91;
  CFIndex v92;
  std::string *v93;
  uint64_t v94;
  CFIndex v95;
  CFIndex v96;
  int64_t v97;
  uint64_t v98;
  void *__p[2];
  UniChar v101[64];
  CFStringRef v102;
  UniChar *v103;
  const char *v104;
  uint64_t v105;
  CFIndex v106;
  uint64_t v107;
  uint64_t v108;
  UniChar buffer[64];
  CFStringRef theStringa;
  UniChar *v111;
  const char *v112;
  uint64_t v113;
  CFIndex v114;
  int64_t v115;
  int64_t v116;
  CFRange v117;
  CFRange v118;
  CFRange v119;
  CFRange v120;
  CFRange v121;

  Length = CFStringGetLength(theString);
  v7 = CFStringGetLength(a2);
  theStringa = theString;
  v113 = 0;
  v114 = Length;
  CharactersPtr = CFStringGetCharactersPtr(theString);
  CStringPtr = 0;
  v111 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  v115 = 0;
  v116 = 0;
  v112 = CStringPtr;
  v102 = a2;
  v105 = 0;
  v106 = v7;
  v10 = CFStringGetCharactersPtr(a2);
  v11 = 0;
  v103 = (UniChar *)v10;
  if (!v10)
    v11 = CFStringGetCStringPtr(a2, 0x600u);
  v107 = 0;
  v108 = 0;
  v104 = v11;
  sub_20B896E08(__p, v7 + 1 + (v7 + 1) * Length);
  v12 = (char *)__p[0];
  *(_QWORD *)__p[0] = 0;
  v13 = 8 * v7;
  if (Length >= 1)
  {
    v14 = (uint64_t *)&v12[v13 + 8];
    v15 = 2;
    v16 = Length;
    do
    {
      *v14 = v15;
      v14 = (uint64_t *)((char *)v14 + v13 + 8);
      v15 += 2;
      --v16;
    }
    while (v16);
  }
  if (v7 >= 1)
  {
    v17 = (uint64_t *)(v12 + 8);
    v18 = 2;
    v19 = v7;
    do
    {
      *v17++ = v18;
      v18 += 2;
      --v19;
    }
    while (v19);
  }
  if (Length < 1)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_114;
  }
  v91 = Length - 1;
  v92 = v7 + 1;
  v93 = a3;
  v94 = v13 + 8;
  v20 = 1;
  v98 = 8;
  v21 = v7;
  v95 = Length;
  do
  {
    if (v7 >= 1)
    {
      v22 = 0;
      v23 = v20 - 1;
      v24 = v20 - 5;
      if ((unint64_t)v20 < 5)
        v24 = 0;
      v97 = v24;
      v96 = v24 + 64;
      v25 = -1;
      v26 = v98;
      v27 = 65;
      v28 = 1;
      do
      {
        if (v28 >= 5)
          v29 = 5;
        else
          v29 = v28;
        v30 = v114;
        if (v114 >= v20)
        {
          v32 = v111;
          if (v111)
          {
            v33 = v113 + v23;
          }
          else
          {
            if (v112)
            {
              v31 = v112[v113 + v23];
              goto LABEL_27;
            }
            v37 = v115;
            if (v116 < v20 || v115 >= v20)
            {
              if (v96 < v114)
                v30 = v96;
              v115 = v97;
              v116 = v30;
              v117.location = v113 + v97;
              v117.length = v30 - v97;
              CFStringGetCharacters(theStringa, v117, buffer);
              v37 = v115;
              v23 = v20 - 1;
            }
            v33 = v23 - v37;
            v32 = buffer;
          }
          v31 = v32[v33];
        }
        else
        {
          v31 = 0;
        }
LABEL_27:
        v34 = v22 + 1;
        v35 = v106;
        if (v106 >= v22 + 1)
        {
          if (v103)
          {
            v36 = v103[v22 + v105];
          }
          else if (v104)
          {
            v36 = v104[v105 + v22];
          }
          else
          {
            if (v108 < v34 || (v39 = v107, v107 >= v34))
            {
              v40 = v22 - v29 + 65;
              if (v40 >= v106)
                v40 = v106;
              v107 = v22 - v29 + 1;
              v108 = v40;
              if (v106 >= v27 - v29)
                v35 = v27 - v29;
              v118.length = v35 + v29 + v25;
              v118.location = v22 - v29 + 1 + v105;
              CFStringGetCharacters(v102, v118, v101);
              v39 = v107;
              v23 = v20 - 1;
            }
            v36 = v101[v22 - v39];
          }
        }
        else
        {
          v36 = 0;
        }
        v41 = (char *)__p[0] + 8 * v22 + v13;
        if (v31 == v36)
          v42 = *(_QWORD *)((char *)__p[0] + v26 - 8);
        else
          v42 = *(_QWORD *)((char *)__p[0] + v26 - 8) + 1;
        if (*(_QWORD *)((char *)__p[0] + v26) + 2 >= *((_QWORD *)v41 + 1) + 2)
          v43 = *((_QWORD *)v41 + 1) + 2;
        else
          v43 = *(_QWORD *)((char *)__p[0] + v26) + 2;
        if (v42 >= v43)
          v42 = v43;
        *((_QWORD *)v41 + 2) = v42;
        ++v28;
        ++v22;
        --v25;
        ++v27;
        v26 += 8;
        v7 = v21;
      }
      while (v21 != v22);
    }
    v44 = v95;
    v98 += v94;
    v13 += v94;
  }
  while (v20++ != v95);
  v93->__r_.__value_.__r.__words[0] = 0;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  if (v7 >= 1)
  {
    v46 = 0;
    v47 = -v95;
    v48 = v95 + 64;
    v49 = ~v7;
    while (1)
    {
      if ((unint64_t)v44 >= 5)
        v50 = 5;
      else
        v50 = v44;
      v51 = v114;
      if (v114 >= v44)
      {
        if (v111)
        {
          v52 = v44;
          v53 = v111[v44 - 1 + v113];
        }
        else if (v112)
        {
          v52 = v44;
          LOBYTE(v53) = v112[v113 - 1 + v44];
        }
        else
        {
          v54 = v115;
          if (v116 < v44 || v115 >= v44)
          {
            v56 = v50 + v47;
            v57 = v48 - v50;
            v58 = v44 - v50;
            v59 = v58 + 64;
            if (v58 + 64 >= v114)
              v59 = v114;
            v115 = v58;
            v116 = v59;
            if (v114 >= v57)
              v51 = v57;
            v119.length = v51 + v56;
            v119.location = v58 + v113;
            CFStringGetCharacters(theStringa, v119, buffer);
            v54 = v115;
          }
          v52 = v44;
          v53 = buffer[v44 - 1 - v54];
        }
      }
      else
      {
        v52 = v44;
        LOBYTE(v53) = 0;
      }
      v60 = v21 - 1;
      v61 = v106;
      if (v106 >= v21)
      {
        v63 = v103;
        if (v103)
        {
          v64 = v105 + v60;
        }
        else
        {
          if (v104)
          {
            LOBYTE(v62) = v104[v105 + v60];
            goto LABEL_88;
          }
          if (v108 < v21 || (v69 = v107, v107 >= v21))
          {
            v70 = v21 - 5;
            if ((unint64_t)v21 < 5)
              v70 = 0;
            if (v70 + 64 < v106)
              v61 = v70 + 64;
            v107 = v70;
            v108 = v61;
            v120.location = v105 + v70;
            v120.length = v61 - v70;
            CFStringGetCharacters(v102, v120, v101);
            v69 = v107;
          }
          v64 = v60 - v69;
          v63 = v101;
        }
        v62 = v63[v64];
      }
      else
      {
        LOBYTE(v62) = 0;
      }
LABEL_88:
      v65 = *((_QWORD *)__p[0] + v95 * v92 + v21 + v46);
      v66 = v91 * v92 + v21 + v46;
      v67 = *((_QWORD *)__p[0] + v66 - 1);
      if ((char)v53 != (char)v62)
        ++v67;
      if (v65 == v67 || v65 != *((_QWORD *)__p[0] + v66) + 2)
      {
        std::string::push_back(v93, v62);
        --v21;
      }
      else
      {
        std::string::push_back(v93, 45);
      }
      v68 = v52 - 1;
      if (v52 >= 2)
      {
        ++v47;
        --v48;
        v46 += v49;
        v44 = v52 - 1;
        if (v21)
          continue;
      }
      goto LABEL_107;
    }
  }
  v68 = v95;
LABEL_107:
  if (v68 < 1)
  {
    Length = v68;
    a3 = v93;
    v7 = v21;
    goto LABEL_114;
  }
  v7 = v21;
  a3 = v93;
  if (v21 > 0)
  {
    Length = v68;
LABEL_114:
    if (Length > 0)
      goto LABEL_115;
    goto LABEL_132;
  }
  v71 = v68 + 1;
  do
  {
    std::string::push_back(v93, 45);
    --v71;
  }
  while (v71 > 1);
LABEL_132:
  v81 = -v7;
  for (i = v7 + 64; ; --i)
  {
    v83 = (unint64_t)v7 >= 5 ? 5 : v7;
    if (v7 < 1)
      break;
    v84 = v106;
    if (v106 >= v7)
    {
      if (v103)
      {
        v85 = v103[v7 - 1 + v105];
      }
      else if (v104)
      {
        LOBYTE(v85) = v104[v105 - 1 + v7];
      }
      else
      {
        if (v108 < v7 || (v86 = v107, v107 >= v7))
        {
          v87 = v83 + v81;
          v88 = i - v83;
          v89 = v7 - v83;
          v90 = v89 + 64;
          if (v89 + 64 >= v106)
            v90 = v106;
          v107 = v89;
          v108 = v90;
          if (v106 >= v88)
            v84 = v88;
          v121.length = v84 + v87;
          v121.location = v89 + v105;
          CFStringGetCharacters(v102, v121, v101);
          v86 = v107;
        }
        v85 = v101[v7 - 1 - v86];
      }
    }
    else
    {
      LOBYTE(v85) = 0;
    }
    ++v81;
    std::string::push_back(a3, v85);
    --v7;
  }
LABEL_115:
  v72 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v73 = v72 < 0;
  if (v72 >= 0)
    v74 = (unint64_t)a3;
  else
    v74 = a3->__r_.__value_.__r.__words[0];
  if (v73)
    size = a3->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  v76 = (_BYTE *)(v74 + size - 1);
  if (size)
    v77 = (unint64_t)v76 > v74;
  else
    v77 = 0;
  if (v77)
  {
    v78 = v74 + 1;
    do
    {
      v79 = *(_BYTE *)(v78 - 1);
      *(_BYTE *)(v78 - 1) = *v76;
      *v76-- = v79;
    }
    while (v78++ < (unint64_t)v76);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20B896CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (*(char *)(a12 + 23) < 0)
    operator delete(*(void **)a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B896D34(CFStringRef result, CFIndex a2)
{
  const __CFString *v3;
  const __CFCharacterSet *v4;
  CFIndex Length;
  CFIndex v6;
  uint64_t v7;
  CFRange v8;
  __int128 v9;
  CFRange v10;

  if (result)
  {
    v3 = result;
    v4 = (const __CFCharacterSet *)sub_20B8D2A0C();
    v9 = xmmword_20BA3AC80;
    v10.length = CFStringGetLength(v3);
    v10.location = 0;
    LODWORD(v4) = CFStringFindCharacterFromSet(v3, v4, v10, 4uLL, (CFRange *)&v9);
    Length = CFStringGetLength(v3);
    if ((_DWORD)v4)
      v6 = *((_QWORD *)&v9 + 1) + v9;
    else
      v6 = 0;
    v7 = Length - v6 - a2;
    v8.location = (v7 & ~(v7 >> 63)) + v6;
    if (v8.location < 1)
    {
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
    }
    else
    {
      if (v7 <= 0)
        v8.length = Length - v6;
      else
        v8.length = a2;
      return CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v8);
    }
  }
  return result;
}

_QWORD *sub_20B896E08(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B812928(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20B896E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B896E7C(uint64_t a1, const __CFURL *a2, uint64_t a3, int a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v10[2];

  *(_QWORD *)a1 = &off_24C461E88;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = sub_20B896F94();
  sub_20B80627C((_QWORD *)(a1 + 32));
  sub_20B8B2334(0);
  *(_QWORD *)(a1 + 40) = &qword_25472C9B0;
  v6 = (char *)sub_20B8CF134(a2);
  v7 = v6;
  v10[1] = v6;
  if (v6)
  {
    sub_20B8D0008((const __CFURL *)v6, CFSTR("heteronyms.dat"), v10);
    v8 = v10[0];
    if (v10[0])
    {
      sub_20B806380((_QWORD **)(a1 + 32), v10[0]);
      MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
    }
    CFRelease(v7);
  }
  return a1;
}

void sub_20B896F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  sub_20B876164((const void **)va, 0);
  sub_20B806284(v2);
  _Unwind_Resume(a1);
}

void *sub_20B896F94()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2547285F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2547285F0))
  {
    sub_20B95B740((uint64_t)&unk_254728370);
    __cxa_atexit((void (*)(void *))sub_20B89A804, &unk_254728370, &dword_20B7F7000);
    __cxa_guard_release(&qword_2547285F0);
  }
  return &unk_254728370;
}

_QWORD *sub_20B89700C(_QWORD *a1)
{
  *a1 = &off_24C461E88;
  sub_20B806284(a1 + 4);
  return a1;
}

void sub_20B89703C(_QWORD *a1)
{
  *a1 = &off_24C461E88;
  sub_20B806284(a1 + 4);
  JUMPOUT(0x20BD39CB0);
}

double sub_20B89707C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  sub_20B9C3090(a2, a3, &v14, &v11, &__p, 0xFFFFFFFFFFFFFFFFLL);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 408))(a3);
  v6 = (*(double (**)(uint64_t, void **, void **, void **, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v14, &v11, &__p, v5);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  return v6;
}

void sub_20B897148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

double sub_20B897184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int16 **v5;
  unsigned __int16 **v6;
  UniChar **v7;
  UniChar **v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  UniChar *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  UniChar *v35;
  __int16 v36;
  unsigned int v37;
  BOOL v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unsigned __int16 **v47;
  unsigned __int16 *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  std::string::size_type v52;
  int v53;
  unsigned __int16 *v54;
  std::string::size_type size;
  std::string *v56;
  std::string::size_type v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v63;
  UniChar *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  __int16 *v79;
  unsigned __int16 *v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned __int8 v89;
  unsigned __int16 v90;
  _QWORD *v91;
  int v92;
  unint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t *v96;
  char v97;
  uint64_t *v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t *v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  double *v107;
  uint64_t v108;
  __int16 *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  BOOL v113;
  char v114;
  int v115;
  _BOOL4 v116;
  uint64_t v117;
  unsigned __int16 *v118;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v126;
  _BOOL4 v127;
  char v128;
  uint64_t v129;
  __int16 *v130;
  _BOOL4 v131;
  BOOL v132;
  uint64_t v133;
  unsigned __int16 *v134;
  unsigned __int8 v136;
  unsigned __int8 v137;
  uint64_t *v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unsigned __int16 *v142;
  UniChar *v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  unint64_t v147;
  unsigned __int16 *v148;
  UniChar *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v153;
  char v154;
  double v155;
  uint64_t v156;
  UChar32 v157;
  unint64_t v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  UChar32 v163;
  int v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v170;
  char v171;
  std::string::size_type v172;
  std::string *v173;
  std::string::size_type v174;
  std::string *v175;
  char *v176;
  std::string::size_type v177;
  std::string::size_type v178;
  char *v179;
  std::string::size_type v180;
  std::string::size_type v181;
  double v182;
  void **v183;
  uint64_t v184;
  double v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  __int16 *v192;
  unsigned __int16 *v193;
  int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  unint64_t v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t *v210;
  unsigned __int8 v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  unint64_t v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  uint64_t j;
  uint64_t i;
  double *v224;
  int v225;
  int v226;
  double *v228;
  double *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  double *v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unsigned int v238;
  unsigned __int16 *v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  _BOOL4 v243;
  uint64_t v244;
  double *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unsigned __int16 *v249;
  const __CFString *cf;
  void *v251[2];
  char v252;
  void *__dst;
  _BYTE *v254;
  uint64_t v255;
  std::string v256;
  std::string v257;
  void *__p[2];
  __int128 v259;
  __int128 __len;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _WORD *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  const char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  _WORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _WORD *v308;
  uint64_t v309;
  _WORD *v310;
  uint64_t v311;
  _WORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _WORD *v318;
  uint64_t v319;
  const __int16 *v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  _QWORD v330[2];
  __int16 v331;
  const char *v332;
  uint64_t v333;
  _WORD *v334;
  uint64_t v335;
  uint64_t v336[8];
  uint64_t v337[8];
  uint64_t v338[8];
  uint64_t v339[8];
  uint64_t v340[8];
  uint64_t v341[8];
  uint64_t v342[8];
  _QWORD v343[16];
  uint64_t v344[8];
  uint64_t v345[8];
  uint64_t v346[8];
  uint64_t v347[8];
  uint64_t v348[8];
  uint64_t v349[8];
  _QWORD v350[40];
  uint64_t v351[8];
  uint64_t v352[8];
  uint64_t v353[8];
  _QWORD v354[48];
  uint64_t v355[8];
  uint64_t v356[8];
  uint64_t v357[8];
  uint64_t v358[8];
  uint64_t v359[8];
  uint64_t v360[8];
  uint64_t v361[8];
  uint64_t v362[8];
  _QWORD v363[24];
  _QWORD v364[16];
  _QWORD v365[16];
  _QWORD v366[24];
  uint64_t v367[8];
  uint64_t v368[8];
  uint64_t v369[8];
  uint64_t v370[8];
  uint64_t v371[8];
  uint64_t v372[8];
  uint64_t v373[8];
  uint64_t v374[8];
  uint64_t v375[8];
  uint64_t v376[8];
  uint64_t v377[8];
  uint64_t v378[8];
  uint64_t v379[8];
  _QWORD v380[32];
  uint64_t v381[8];
  _QWORD v382[12];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v382[9] = *MEMORY[0x24BDAC8D0];
  v10 = (double *)sub_20B896F94();
  v11 = v4[1];
  v12 = v11 - *v4;
  if (v11 == *v4)
    return 0.0;
  v231 = 0;
  v232 = v11 - *v4;
  v13 = v12 / 40;
  v230 = 0;
  v14 = 0;
  v15 = *v6;
  v16 = *v8;
  v240 = v12 / 40 - 1;
  if ((unint64_t)(v12 / 40) <= 1)
    v13 = 1;
  v237 = v13;
  v17 = 0.0;
  v228 = v10 + 27;
  v229 = v10 + 25;
  v244 = v9;
  v234 = v10 + 26;
  v235 = (uint64_t *)(v9 + 32);
  v245 = v10;
  v233 = v2;
  v236 = v4;
  do
  {
    v18 = *v4 + 40 * v14;
    v19 = *(unsigned __int16 *)(v18 + 24);
    if (v16)
      v20 = *(unsigned __int16 *)(v18 + 24);
    else
      v20 = 0;
    v21 = *(unsigned __int16 *)(v18 + 28);
    if (v15)
      v22 = *(unsigned __int16 *)(v18 + 28);
    else
      v22 = 0;
    v248 = v22;
    if (v14 == v240)
    {
      v247 = 0;
      v241 = 0;
      v238 = 0;
    }
    else
    {
      v23 = (unsigned __int16 *)(*v4 + 40 * v14);
      v24 = v23[32];
      if (!v16)
        v24 = 0;
      v247 = v24;
      v25 = v23[34];
      if (!v15)
        v25 = 0;
      v241 = v25;
      v238 = v23[35];
    }
    v249 = &v16[v19];
    v239 = &v15[v21];
    cf = CFStringCreateWithCharacters(0, v16, v20);
    v246 = v14;
    if (*(_DWORD *)(*v4 + 40 * v14) == 5)
    {
      v26 = 0;
      v27 = v248;
      if (v16)
      {
        v28 = v247;
        if (v20)
        {
          if (*v16 - 48 > 9)
          {
            v243 = 0;
            goto LABEL_38;
          }
          v29 = 1;
          while (v20 != v29)
          {
            v30 = v16[v29++] - 48;
            if (v30 >= 0xA)
            {
              v31 = v29 - 1;
              goto LABEL_36;
            }
          }
          v31 = v20;
LABEL_36:
          v26 = v31 >= v20;
        }
      }
      else
      {
        v28 = v247;
      }
      v243 = v26;
      if (!v20)
      {
        v33 = 0;
        goto LABEL_46;
      }
LABEL_38:
      v34 = 2 * v20 - 2;
      v35 = v16;
      do
      {
        v36 = *v35++;
        v37 = (unsigned __int16)(v36 + 240);
        v33 = v37 < 0xA;
        v38 = v37 > 9 || v34 == 0;
        v34 -= 2;
      }
      while (!v38);
LABEL_46:
      if (v14 == v240)
        goto LABEL_238;
      goto LABEL_47;
    }
    v27 = v248;
    if (v20 != 1 || (v32 = *v16, v28 = v247, v32 != 49) && v32 != 65297 && v32 != 19968)
    {
      v33 = 0;
      v243 = 0;
      goto LABEL_238;
    }
    v33 = 0;
    v243 = 0;
    if (v14 == v240)
    {
      v243 = 0;
      goto LABEL_238;
    }
LABEL_47:
    v39 = atomic_load((unsigned __int8 *)&qword_25472B0C0);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0C0))
    {
      sub_20B87C9E0(__p, (char *)L"時");
      WORD4(v259) = 27;
      sub_20B87C9E0(&__len, (char *)L"次");
      WORD4(v261) = 11;
      sub_20B87C9E0(&v262, byte_20BA93BDC);
      WORD4(v263) = 25;
      sub_20B87C9E0(&v264, (char *)L"大");
      WORD4(v265) = 100;
      sub_20B87C9E0(&v266, byte_20BA93BE2);
      WORD4(v267) = 10;
      sub_20B87C9E0(&v268, byte_20BA93BE6);
      WORD4(v269) = 100;
      sub_20B89A830((uint64_t)__p, 6);
      for (i = 0; i != -192; i -= 32)
      {
        if (*((char *)&v269 + i + 7) < 0)
          operator delete(*(void **)((char *)&v268 + i));
      }
      __cxa_atexit((void (*)(void *))sub_20B89A82C, &xmmword_25472B1E8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B0C0);
      v2 = v233;
      v4 = v236;
      v28 = v247;
    }
    sub_20B877ED0(__p, v249, v28);
    v40 = sub_20B89ACFC((uint64_t)&qword_25472B200, (uint64_t)__p);
    v41 = *((_QWORD *)&xmmword_25472B1E8 + 1);
    if (!*((_QWORD *)&xmmword_25472B1E8 + 1))
    {
      v46 = 0;
LABEL_68:
      v14 = v246;
LABEL_69:
      v50 = v247;
      goto LABEL_70;
    }
    v42 = v40;
    v43 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B1E8 + 8));
    v43.i16[0] = vaddlv_u8(v43);
    v44 = v43.u32[0];
    if (v43.u32[0] > 1uLL)
    {
      v45 = v40;
      if (v40 >= *((_QWORD *)&xmmword_25472B1E8 + 1))
        v45 = v40 % *((_QWORD *)&xmmword_25472B1E8 + 1);
    }
    else
    {
      v45 = (*((_QWORD *)&xmmword_25472B1E8 + 1) - 1) & v40;
    }
    v47 = *(unsigned __int16 ***)(xmmword_25472B1E8 + 8 * v45);
    if (!v47)
    {
      v46 = 0;
      goto LABEL_67;
    }
    v48 = *v47;
    if (!*v47)
    {
LABEL_65:
      v46 = 0;
      v2 = v233;
LABEL_67:
      v4 = v236;
      goto LABEL_68;
    }
    while (1)
    {
      v49 = *((_QWORD *)v48 + 1);
      if (v42 == v49)
        break;
      if (v44 > 1)
      {
        if (v49 >= v41)
          v49 %= v41;
      }
      else
      {
        v49 &= v41 - 1;
      }
      if (v49 != v45)
        goto LABEL_65;
LABEL_64:
      v48 = *(unsigned __int16 **)v48;
      if (!v48)
        goto LABEL_65;
    }
    if (!sub_20B89AD3C((uint64_t)&dword_25472B208, v48 + 8, (unsigned __int16 *)__p))
      goto LABEL_64;
    if (v16)
    {
      if (v20)
      {
        v53 = *v16;
        if ((v53 - 48) < 0xA || (unsigned __int16)(v53 + 240) <= 9u)
        {
          v58 = 0;
          while (v20 - 1 != v58)
          {
            v59 = v16[v58 + 1];
            v60 = v59 - 48;
            ++v58;
            v61 = (unsigned __int16)(v59 + 240);
            if (v60 >= 0xA && v61 >= 0xA)
            {
              if (v58 < v20)
                goto LABEL_87;
              break;
            }
          }
          v63 = 0;
          v64 = v16;
          v65 = v20;
          v14 = v246;
          do
          {
            v67 = *v64++;
            v66 = v67;
            if (v67 >> 4 <= 0xFF0)
              v68 = -48;
            else
              v68 = -65296;
            v63 = v66 + 10 * v63 + v68;
            --v65;
          }
          while (v65);
          v46 = v63 > v48[20];
          v2 = v233;
          v4 = v236;
          goto LABEL_69;
        }
      }
    }
LABEL_87:
    v256.__r_.__value_.__r.__words[0] = 0;
    sub_20B877ED0(&v257, v16, v20);
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = (unsigned __int16 *)&v257;
    else
      v54 = (unsigned __int16 *)v257.__r_.__value_.__r.__words[0];
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v257.__r_.__value_.__r.__words[2]);
    else
      size = v257.__r_.__value_.__l.__size_;
    v4 = v236;
    v14 = v246;
    v50 = v247;
    v46 = (sub_20B8D9D58(v54, size, &v256)
        || ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v56 = &v257)
          : (v56 = (std::string *)v257.__r_.__value_.__r.__words[0]),
            (v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v57 = HIBYTE(v257.__r_.__value_.__r.__words[2]))
          : (v57 = v257.__r_.__value_.__l.__size_),
            sub_20B8D9C9C((uint64_t)v56, v57, (uint64_t *)&v256)))
       && (int64_t)v256.__r_.__value_.__r.__words[0] > v48[20];
    v2 = v233;
    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v257.__r_.__value_.__l.__data_);
LABEL_70:
    if (SBYTE7(v259) < 0)
    {
      operator delete(__p[0]);
      if (v46)
        goto LABEL_236;
    }
    else if (v46)
    {
      goto LABEL_236;
    }
    v51 = atomic_load((unsigned __int8 *)&qword_25472B0C8);
    if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0C8))
    {
      LOWORD(__p[0]) = 0;
      __p[1] = &unk_20BA93BEA;
      *(_QWORD *)&v259 = 2;
      *((_QWORD *)&v259 + 1) = &unk_20BA93BF0;
      *(_QWORD *)&__len = 1;
      WORD4(__len) = 8;
      *(_QWORD *)&v261 = "o0a0";
      *((_QWORD *)&v261 + 1) = 2;
      *(_QWORD *)&v262 = "!h";
      *((_QWORD *)&v262 + 1) = 1;
      LOWORD(v263) = 10;
      *((_QWORD *)&v263 + 1) = L"と";
      *(_QWORD *)&v264 = 1;
      *((_QWORD *)&v264 + 1) = &unk_20BA93BFE;
      *(_QWORD *)&v265 = 1;
      WORD4(v265) = 9;
      *(_QWORD *)&v266 = word_20BA933FC;
      *((_QWORD *)&v266 + 1) = 1;
      *(_QWORD *)&v267 = &unk_20BA93C02;
      *((_QWORD *)&v267 + 1) = 1;
      LOWORD(v268) = 9;
      *((_QWORD *)&v268 + 1) = word_20BA93C06;
      *(_QWORD *)&v269 = 3;
      *((_QWORD *)&v269 + 1) = word_20BA93C0E;
      *(_QWORD *)&v270 = 1;
      WORD4(v270) = 9;
      *(_QWORD *)&v271 = word_20BA93C06;
      *((_QWORD *)&v271 + 1) = 3;
      *(_QWORD *)&v272 = L"時";
      *((_QWORD *)&v272 + 1) = 1;
      LOWORD(v273) = 5;
      *((_QWORD *)&v273 + 1) = word_20BA93220;
      v274 = 1;
      v275 = (uint64_t)&unk_20BA93C12;
      v276 = 1;
      LOWORD(v277) = 5;
      v278 = word_20BA93220;
      v279 = 1;
      v280 = byte_20BA93BE6;
      v281 = 1;
      LOWORD(v282) = 5;
      v283 = (uint64_t)word_20BA93220;
      v284 = 1;
      v285 = (uint64_t)&unk_20BA93C16;
      v286 = 1;
      LOWORD(v287) = 10;
      v288 = (const char *)word_20BA93C1A;
      v289 = 3;
      v290 = (char *)&unk_20BA93C22;
      v291 = 1;
      LOWORD(v292) = 10;
      v293 = (uint64_t)word_20BA93C1A;
      v294 = 3;
      v295 = (uint64_t)byte_20BA93BE6;
      v296 = 1;
      LOWORD(v297) = 10;
      v298 = (const char *)word_20BA93C1A;
      v299 = 3;
      v300 = &unk_20BA93C16;
      v301 = 1;
      LOWORD(v302) = 2;
      v303 = (uint64_t)L"に";
      v304 = 1;
      v305 = (uint64_t)&unk_20BA93C26;
      v306 = 1;
      LOWORD(v307) = 10;
      v308 = word_20BA93C1A;
      v309 = 3;
      v310 = word_20BA93C2A;
      v311 = 1;
      LOWORD(v312) = 2;
      v313 = (uint64_t)L"に";
      v314 = 1;
      v315 = (uint64_t)&unk_20BA93C2E;
      v316 = 1;
      LOWORD(v317) = 20;
      v318 = &unk_20BA93C32;
      v319 = 4;
      v320 = L"時";
      v321 = 1;
      LOWORD(v322) = 28;
      v323 = (uint64_t)&unk_20BA93C3C;
      v324 = 6;
      v325 = (uint64_t)L"時";
      v326 = 1;
      LOWORD(v327) = 9;
      v328 = (const char *)word_20BA93C06;
      v329 = 3;
      v330[0] = &unk_20BA93C4A;
      v330[1] = 2;
      v331 = 2;
      v332 = "v0_0";
      v333 = 2;
      v334 = word_20BA93C2A;
      v335 = 1;
      sub_20B89B7FC((uint64_t **)&unk_25472B140, (__int128 *)__p, 19);
      __cxa_atexit((void (*)(void *))sub_20B89AE70, &unk_25472B140, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B0C8);
      v2 = v233;
      v4 = v236;
      v50 = v247;
    }
    v257.__r_.__value_.__r.__words[0] = 0;
    v27 = v248;
    if ((sub_20B89AE98(v16, v20, (uint64_t *)&v257) & 1) == 0
      || (v52 = v257.__r_.__value_.__r.__words[0], (uint64_t)v257.__r_.__value_.__l.__data_ >= 0x8000))
    {
      v14 = v246;
      goto LABEL_238;
    }
    switch(v257.__r_.__value_.__r.__words[0])
    {
      case 1uLL:
        if ((_DWORD)v248 == 1)
        {
          v73 = *v15;
          v81 = 12402;
          goto LABEL_199;
        }
        if ((_DWORD)v248 != 2 || *v15 != 12402)
          goto LABEL_200;
        goto LABEL_194;
      case 2uLL:
        if ((_DWORD)v248 == 1)
        {
          v73 = *v15;
          if (v73 == 12376)
            goto LABEL_235;
          v81 = 12405;
          goto LABEL_199;
        }
        if ((_DWORD)v248 != 2)
          goto LABEL_200;
        v76 = *v15;
        if (v76 == 12395)
        {
LABEL_194:
          v73 = v15[1];
          v81 = 12356;
          goto LABEL_199;
        }
        if (v76 == 12407)
        {
          v73 = v15[1];
          v81 = 12383;
          goto LABEL_199;
        }
        if (v76 != 12405)
          goto LABEL_200;
        v73 = v15[1];
        if (v73 == 12358)
          goto LABEL_235;
        if (v73 != 12383)
        {
LABEL_158:
          v81 = 12388;
          goto LABEL_199;
        }
        if (v50 == 1)
        {
          v77 = *v249;
          if (v77 == 26376 || v77 == 26847)
            goto LABEL_200;
        }
        if (v241 != 2)
        {
          if (v241 != 3)
            goto LABEL_235;
          v78 = 3;
          v79 = &word_20BA93C60;
          v80 = v239;
          while ((unsigned __int16)*v79 == *v80)
          {
            ++v80;
            ++v79;
            if (!--v78)
              goto LABEL_200;
          }
          for (j = 0; j != 3; ++j)
          {
            if ((unsigned __int16)word_20BA93C68[j] != v239[j])
              goto LABEL_235;
          }
          goto LABEL_200;
        }
        v221 = *v239;
        if (v221 <= 0x306E)
        {
          if (v221 == 12365)
          {
            v82 = v239[1];
            v83 = 12428;
          }
          else
          {
            if (v221 != 12369)
              goto LABEL_235;
            v82 = v239[1];
            v83 = 12383;
          }
          goto LABEL_539;
        }
        if (v221 == 12399 || v221 == 12405)
        {
          v82 = v239[1];
          v83 = 12426;
          goto LABEL_539;
        }
        goto LABEL_235;
      case 3uLL:
        if ((_DWORD)v248 == 1)
        {
          v73 = *v15;
          v81 = 12415;
          goto LABEL_199;
        }
        if ((_DWORD)v248 != 2)
          goto LABEL_200;
        v74 = *v15;
        v75 = 12415;
        goto LABEL_151;
      case 4uLL:
        if ((_DWORD)v248 != 1)
        {
          if ((_DWORD)v248 == 2 && *v15 == 12424)
          {
            v73 = v15[1];
            goto LABEL_153;
          }
          goto LABEL_200;
        }
        if (*v15 != 12375)
          goto LABEL_200;
        if (v50 == 1)
        {
          v82 = *v249;
          v83 = 26376;
          goto LABEL_539;
        }
        goto LABEL_235;
      case 5uLL:
        if (v248 != 2)
          goto LABEL_200;
        v71 = *v15;
        v72 = 12356;
        goto LABEL_156;
      case 6uLL:
        if ((_DWORD)v248 == 1)
        {
          v73 = *v15;
          v81 = 12416;
        }
        else
        {
          if ((_DWORD)v248 != 2)
            goto LABEL_200;
          v74 = *v15;
          v75 = 12416;
LABEL_151:
          if (v74 != v75)
            goto LABEL_200;
          v73 = v15[1];
          if (v73 == 12356)
            goto LABEL_235;
LABEL_153:
          v81 = 12387;
        }
LABEL_199:
        if (v73 == v81)
          goto LABEL_235;
        goto LABEL_200;
      case 8uLL:
        if (v248 != 2)
          goto LABEL_200;
        v71 = *v15;
        v72 = 12399;
LABEL_156:
        if (v71 != v72)
          goto LABEL_200;
        v73 = v15[1];
        goto LABEL_158;
      case 9uLL:
        if (v248 != 1 || *v15 != 12367)
          goto LABEL_200;
        if (v50 == 2)
        {
          v220 = *v249;
          if (v220 == 24180)
          {
            v82 = v249[1];
            v83 = 38291;
            goto LABEL_539;
          }
          if (v220 != 26178)
            goto LABEL_235;
          v82 = v249[1];
          if (v82 != 38291)
          {
            v83 = 38480;
            goto LABEL_539;
          }
          goto LABEL_200;
        }
        if (v50 != 1)
          goto LABEL_235;
        v82 = *v249;
        if (v82 > 0x6641)
        {
          if (v82 != 26178 && v82 != 26376)
          {
            v83 = 27573;
            goto LABEL_539;
          }
          goto LABEL_200;
        }
        if (v82 == 20154)
          goto LABEL_200;
        v83 = 24180;
        goto LABEL_539;
      case 0xAuLL:
        if ((_DWORD)v248 != 1)
        {
          if ((_DWORD)v248 == 2 && *v15 == 12392)
          {
            v69 = v15[1];
            v70 = 12362;
            goto LABEL_171;
          }
          goto LABEL_200;
        }
        if (*v15 != 12392 || v241 == 1 && *v239 == 12405)
          goto LABEL_200;
        if (v50 == 1)
        {
          v82 = *v249;
          v83 = 37325;
          goto LABEL_539;
        }
        if (v50 == 2 && *v249 == 25991)
        {
          v82 = v249[1];
          v83 = 23383;
          goto LABEL_539;
        }
        goto LABEL_235;
      case 0xEuLL:
        if (v248 != 3)
          goto LABEL_200;
        v84 = 0;
        break;
      case 0x14uLL:
        if (v248 != 2 || *v15 != 12399)
          goto LABEL_200;
        v69 = v15[1];
        if (v69 == 12383)
        {
          if (v50 != 1)
            goto LABEL_235;
          v82 = *v249;
          if (v82 == 27507)
            goto LABEL_200;
          v83 = 25165;
        }
        else
        {
          v70 = 12388;
LABEL_171:
          if (v69 != v70)
            goto LABEL_200;
          if (v50 != 1)
            goto LABEL_235;
          v82 = *v249;
          v83 = 26085;
        }
LABEL_539:
        if (v82 == v83)
          goto LABEL_200;
        goto LABEL_235;
      default:
        goto LABEL_200;
    }
    while (*(unsigned __int16 *)&aX0c0w0[v84 * 2] == v15[v84])
    {
      if (++v84 == 3)
        goto LABEL_235;
    }
LABEL_200:
    v85 = atomic_load((unsigned __int8 *)&qword_25472B0F0);
    if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0F0))
    {
      qmemcpy(__p, "K0M0O0Q0S0", 10);
      sub_20B89BA68((uint64_t)qword_25472B210, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472B210, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B0F0);
      v4 = v236;
      v27 = v248;
      v50 = v247;
    }
    v86 = atomic_load((unsigned __int8 *)&qword_25472B0F8);
    if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0F8))
    {
      qmemcpy(__p, "U0W0Y0[0]0", 10);
      sub_20B89BA68((uint64_t)qword_25472B238, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472B238, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B0F8);
      v4 = v236;
      v27 = v248;
      v50 = v247;
    }
    v87 = atomic_load((unsigned __int8 *)&qword_25472B100);
    v88 = v241;
    if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_25472B100))
    {
      qmemcpy(__p, "_0a0d0f0h0", 10);
      sub_20B89BA68((uint64_t)&unk_25472B260, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, &unk_25472B260, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B100);
      v4 = v236;
      v27 = v248;
      v50 = v247;
      v88 = v241;
    }
    v89 = atomic_load((unsigned __int8 *)&qword_25472B108);
    if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_25472B108))
    {
      qmemcpy(__p, "q0t0w0z0}0", 10);
      sub_20B89BA68((uint64_t)qword_25472B288, (unsigned __int16 *)__p, 5);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472B288, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B108);
      v4 = v236;
      v27 = v248;
      v50 = v247;
      v88 = v241;
    }
    if (v88)
    {
      v90 = *v239;
      if (v52 == 8)
      {
        if (v27 == 2 && *v15 == 12399 && v15[1] == 12387)
        {
          LOWORD(__p[0]) = *v239;
          if (!sub_20B886524(qword_25472B210, (unsigned __int16 *)__p))
          {
            LOWORD(__p[0]) = v90;
            if (!sub_20B886524(qword_25472B238, (unsigned __int16 *)__p))
            {
              LOWORD(__p[0]) = v90;
              v91 = &unk_25472B260;
              goto LABEL_211;
            }
          }
        }
      }
      else if (v52 == 6 && v27 == 2 && *v15 == 12429 && v15[1] == 12387)
      {
        LOWORD(__p[0]) = *v239;
        v91 = qword_25472B210;
LABEL_211:
        if (!sub_20B886524(v91, (unsigned __int16 *)__p))
        {
          LOWORD(__p[0]) = v90;
          if (!sub_20B886524(qword_25472B288, (unsigned __int16 *)__p))
          {
LABEL_235:
            v2 = v233;
            v14 = v246;
            goto LABEL_236;
          }
        }
      }
    }
    if (v257.__r_.__value_.__r.__words[0] == 1)
    {
      if (v50 == 1)
      {
        v92 = *v249;
LABEL_222:
        if (v92 == 26085
          && v241 == 1
          && v257.__r_.__value_.__r.__words[0] - 2 >= 9
          && *v239 == 12363
          && (v257.__r_.__value_.__r.__words[0] > 0x18 || ((1 << v257.__r_.__value_.__s.__data_[0]) & 0x1104000) == 0))
        {
          goto LABEL_235;
        }
      }
    }
    else if (v50 == 1)
    {
      v92 = *v249;
      if (v92 != 26085 || v241 != 2)
        goto LABEL_222;
      if (*v239 == 12376 && v239[1] == 12388)
        goto LABEL_235;
    }
    LOWORD(__p[0]) = v257.__r_.__value_.__l.__data_;
    __p[1] = v15;
    *(_QWORD *)&v259 = v27;
    *((_QWORD *)&v259 + 1) = v249;
    *(_QWORD *)&__len = v50;
    v93 = v248;
    if (sub_20B89BADC((uint64_t)&unk_25472B140, __p) != (_QWORD *)&unk_25472B148)
      goto LABEL_235;
    v204 = atomic_load((unsigned __int8 *)&qword_25472B0D8);
    if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0D8))
    {
      sub_20B89AF8C();
      qword_25472B0D0 = (uint64_t)&qword_25472B158;
      __cxa_guard_release(&qword_25472B0D8);
      v4 = v236;
      v93 = v248;
      v50 = v247;
    }
    LOWORD(__p[0]) = v257.__r_.__value_.__l.__data_;
    __p[1] = v15;
    *(_QWORD *)&v259 = v93;
    *((_QWORD *)&v259 + 1) = v249;
    *(_QWORD *)&__len = v50;
    *((_QWORD *)&__len + 1) = v239;
    v205 = v241;
    *(_QWORD *)&v261 = v241;
    v206 = qword_25472B160;
    if (qword_25472B160)
    {
      v207 = qword_25472B0D0 + 8;
      v208 = qword_25472B0D0 + 8;
      do
      {
        v209 = sub_20B89BDBC((_QWORD *)(v206 + 32), __p);
        if (v209 >= 0)
          v210 = (uint64_t *)v206;
        else
          v210 = (uint64_t *)(v206 + 8);
        if (v209 >= 0)
          v208 = v206;
        v206 = *v210;
      }
      while (*v210);
      v38 = v208 == v207;
      v205 = v241;
      if (!v38 && (sub_20B89BDBC(__p, (_QWORD *)(v208 + 32)) & 0x80) == 0)
        goto LABEL_235;
    }
    v211 = atomic_load((unsigned __int8 *)&qword_25472B0E8);
    if ((v211 & 1) == 0 && __cxa_guard_acquire(&qword_25472B0E8))
    {
      sub_20B89B614();
      qword_25472B0E0 = (uint64_t)&qword_25472B170;
      __cxa_guard_release(&qword_25472B0E8);
      v4 = v236;
      v205 = v241;
    }
    v212 = qword_25472B0E0;
    LOWORD(__p[0]) = v257.__r_.__value_.__l.__data_;
    __p[1] = v15;
    *(_QWORD *)&v259 = v248;
    *((_QWORD *)&v259 + 1) = v239;
    *(_QWORD *)&__len = v205;
    v38 = v212 + 8 == (_QWORD)sub_20B89BADC(qword_25472B0E0, __p);
    v2 = v233;
    v14 = v246;
    if (!v38)
LABEL_236:
      v17 = v17 + v245[20] / 0.1;
    v27 = v248;
LABEL_238:
    v94 = atomic_load((unsigned __int8 *)&qword_25472B120);
    if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_25472B120))
    {
      __p[0] = &unk_20BA93D82;
      __p[1] = (void *)3;
      *(_QWORD *)&v259 = &unk_20BA93D8A;
      *((_QWORD *)&v259 + 1) = 6;
      *(_QWORD *)&__len = &unk_20BA93D98;
      *((_QWORD *)&__len + 1) = 3;
      *(_QWORD *)&v261 = &unk_20BA93DA0;
      *((_QWORD *)&v261 + 1) = 6;
      *(_QWORD *)&v262 = &unk_20BA93DAE;
      *((_QWORD *)&v262 + 1) = 3;
      *(_QWORD *)&v263 = &unk_20BA93DB6;
      *((_QWORD *)&v263 + 1) = 6;
      *(_QWORD *)&v264 = "ASUO]N";
      *((_QWORD *)&v264 + 1) = 3;
      *(_QWORD *)&v265 = &unk_20BA93DCC;
      *((_QWORD *)&v265 + 1) = 6;
      sub_20B89BF00((uint64_t)__p, 4);
      __cxa_atexit((void (*)(void *))sub_20B89BED8, &qword_25472B188, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B120);
      v2 = v233;
      v4 = v236;
      v14 = v246;
      v27 = v248;
    }
    __p[0] = v16;
    __p[1] = (void *)v20;
    *(_QWORD *)&v259 = v15;
    *((_QWORD *)&v259 + 1) = v27;
    v95 = qword_25472B190;
    if (qword_25472B190)
    {
      v96 = &qword_25472B190;
      do
      {
        v97 = sub_20B89C098((unsigned __int16 **)(v95 + 32), (unsigned __int16 **)__p);
        if (v97 >= 0)
          v98 = (uint64_t *)v95;
        else
          v98 = (uint64_t *)(v95 + 8);
        if (v97 >= 0)
          v96 = (uint64_t *)v95;
        v95 = *v98;
      }
      while (*v98);
      if (v96 != &qword_25472B190
        && (sub_20B89C098((unsigned __int16 **)__p, (unsigned __int16 **)v96 + 4) & 0x80) == 0)
      {
        goto LABEL_260;
      }
    }
    v99 = atomic_load((unsigned __int8 *)&qword_25472B128);
    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_25472B128))
    {
      sub_20B89C174(__p, "d0Q0", "d0Q0", word_20BA93DE0, "D0c0");
      sub_20B89C174(&v262, "~0Z0", "~0Z0", "mQ", word_20BA93C92);
      *(_QWORD *)&v266 = "~0Z0";
      *((_QWORD *)&v266 + 1) = 2;
      *(_QWORD *)&v267 = "~0Z0";
      *((_QWORD *)&v267 + 1) = 2;
      *(_QWORD *)&v268 = word_20BA93DEE;
      *((_QWORD *)&v268 + 1) = 2;
      *(_QWORD *)&v269 = "W0K0c0";
      *((_QWORD *)&v269 + 1) = 3;
      sub_20B89C174(&v270, L"ら", L"ら", word_20BA93DEE, "W0K0c0");
      v274 = (uint64_t)&unk_20BA93DFC;
      v275 = 3;
      v276 = (uint64_t)&unk_20BA93DFC;
      v277 = 3;
      v278 = &unk_20BA93E04;
      v279 = 4;
      v280 = (char *)&unk_20BA93E0E;
      v281 = 6;
      v282 = &unk_20BA93E1C;
      v283 = 2;
      v284 = (uint64_t)&unk_20BA93E1C;
      v285 = 2;
      v286 = (uint64_t)word_20BA93E22;
      v287 = 2;
      v288 = (const char *)word_20BA93E28;
      v289 = 4;
      v290 = (char *)&unk_20BA93E32;
      v291 = 2;
      v292 = &unk_20BA93E1C;
      v293 = 2;
      v294 = (uint64_t)word_20BA93E22;
      v295 = 2;
      v296 = (uint64_t)word_20BA93E28;
      v297 = 4;
      v298 = (const char *)&unk_20BA93E38;
      v299 = 2;
      v300 = &unk_20BA93E1C;
      v301 = 2;
      v302 = word_20BA93E22;
      v303 = 2;
      v304 = (uint64_t)word_20BA93E28;
      v305 = 4;
      v306 = (uint64_t)&unk_20BA93E3E;
      v307 = 2;
      v308 = &unk_20BA93E1C;
      v309 = 2;
      v310 = word_20BA93E22;
      v311 = 2;
      v312 = word_20BA93E28;
      v313 = 4;
      v314 = (uint64_t)&unk_20BA93E44;
      v315 = 4;
      v316 = (uint64_t)"h0R0h0R0";
      v317 = 4;
      v318 = word_20BA93DEE;
      v319 = 2;
      v320 = (const __int16 *)"W0K0c0";
      v321 = 3;
      v322 = &unk_20BA93E58;
      v323 = 2;
      v324 = (uint64_t)"o0R0";
      v325 = 2;
      v326 = (uint64_t)word_20BA93DEE;
      v327 = 2;
      v328 = "W0K0c0";
      v329 = 3;
      sub_20B89C174(v330, word_20BA93E64, word_20BA93E6C, word_20BA93E74, word_20BA933FC);
      sub_20B89C174(v336, word_20BA93E64, word_20BA93E6C, word_20BA93E78, word_20BA933FC);
      sub_20B89C174(v337, word_20BA93E64, word_20BA93E6C, word_20BA93E7C, word_20BA933FC);
      sub_20B89C174(v338, word_20BA93E80, word_20BA93E88, word_20BA93DEE, "W0K0c0");
      sub_20B89C174(v339, word_20BA93E90, word_20BA93E96, word_20BA93DE0, "D0c0");
      sub_20B89C174(v340, word_20BA93E9C, word_20BA93EA2, "mQ", word_20BA93C92);
      sub_20B89C174(v341, word_20BA93E9C, word_20BA93EA2, word_20BA93EA8, word_20BA93C92);
      sub_20B89C174(v342, word_20BA93E9C, word_20BA93EA2, word_20BA93EAC, word_20BA93C92);
      sub_20B89C174(v343, word_20BA93EB0, "D0c0[0D0", word_20BA93EC0, word_20BA93EC6);
      v343[8] = &unk_20BA93ECE;
      v343[9] = 2;
      v343[10] = "D0a0X0";
      v343[11] = 3;
      v343[12] = word_20BA93CDE;
      v343[13] = 1;
      v343[14] = L"かい";
      v343[15] = 2;
      sub_20B89C174(v344, word_20BA93EDC, word_20BA93EE2, word_20BA93C2A, L"い");
      sub_20B89C174(v345, word_20BA93EEA, word_20BA93EE2, word_20BA93C2A, L"い");
      sub_20B89C174(v346, word_20BA93EF0, word_20BA93EE2, word_20BA93C2A, L"い");
      sub_20B89C174(v347, word_20BA93EF6, word_20BA93EFC, "sk", "h0W0");
      sub_20B89C174(v348, "\tN/c", word_20BA93F12, word_20BA93F1C, "h0F0");
      sub_20B89C174(v349, "\tN,g", word_20BA93F2C, word_20BA93F34, word_20BA93F3A);
      sub_20B89C174(v350, "\tN,g", word_20BA93F2C, word_20BA93F44, "r0M0F0Q0");
      v350[8] = "\tN,g";
      v350[9] = 2;
      v350[10] = word_20BA93F2C;
      v350[11] = 3;
      v350[12] = &unk_20BA93F54;
      v350[13] = 4;
      v350[14] = "r0M0F0Q0";
      v350[15] = 4;
      v350[16] = "\tN,g";
      v350[17] = 2;
      v350[18] = word_20BA93F2C;
      v350[19] = 3;
      v350[20] = &unk_20BA93F5E;
      v350[21] = 3;
      v350[22] = "r0M0F0Q0";
      v350[23] = 4;
      v350[24] = "\tN0u";
      v350[25] = 2;
      v350[26] = &unk_20BA93F6C;
      v350[27] = 3;
      v350[28] = &unk_20BA93F74;
      v350[29] = 1;
      v350[30] = "Y0L0_0";
      v350[31] = 3;
      v350[32] = "\vN";
      v350[33] = 1;
      v350[34] = "W0_0";
      v350[35] = 2;
      v350[36] = word_20BA93DEE;
      v350[37] = 2;
      v350[38] = "W0K0c0";
      v350[39] = 3;
      sub_20B89C174(v351, word_20BA93F8A, word_20BA93F92, L"日", L"か");
      sub_20B89C174(v352, word_20BA93F9A, word_20BA93F92, L"日", L"か");
      sub_20B89C174(v353, word_20BA93FA2, word_20BA93F92, L"日", L"か");
      sub_20B89C174(v354, word_20BA93FAA, "o0d0K0", word_20BA93FBA, word_20BA93FC0);
      v354[8] = word_20BA93FAA;
      v354[9] = 3;
      v354[10] = "o0d0K0";
      v354[11] = 3;
      v354[12] = &unk_20BA93FC8;
      v354[13] = 1;
      v354[14] = "O0N0";
      v354[15] = 2;
      v354[16] = "2";
      v354[17] = 3;
      v354[18] = "o0d0K0";
      v354[19] = 3;
      v354[20] = &unk_20BA93FC8;
      v354[21] = 1;
      v354[22] = "O0N0";
      v354[23] = 2;
      v354[24] = &unk_20BA93FDA;
      v354[25] = 3;
      v354[26] = "o0d0K0";
      v354[27] = 3;
      v354[28] = &unk_20BA93FC8;
      v354[29] = 1;
      v354[30] = "O0N0";
      v354[31] = 2;
      v354[32] = &unk_20BA93FE2;
      v354[33] = 1;
      v354[34] = L"かい";
      v354[35] = 2;
      v354[36] = &unk_20BA93FE6;
      v354[37] = 2;
      v354[38] = &unk_20BA93FEC;
      v354[39] = 4;
      v354[40] = &unk_20BA93FF6;
      v354[41] = 2;
      v354[42] = "K0D0Q0D0";
      v354[43] = 4;
      v354[44] = &unk_20BA94006;
      v354[45] = 3;
      v354[46] = &unk_20BA9400E;
      v354[47] = 3;
      sub_20B89C174(v355, word_20BA94016, word_20BA9401C, word_20BA94026, "K0R0d0");
      sub_20B89C174(v356, word_20BA94016, word_20BA9401C, "K0\bg", "K0R0d0");
      sub_20B89C174(v357, word_20BA94016, word_20BA9401C, word_20BA9403A, "K0R0d0");
      sub_20B89C174(v358, "ASpe", "X0c0Y0F0", "\rP", L"ばい");
      sub_20B89C174(v359, "ASpe", "X0c0Y0F0", word_20BA93CDE, L"かい");
      sub_20B89C174(v360, word_20BA94054, "i0F0D0d0", word_20BA94064, "[0D0");
      sub_20B89C174(v361, word_20BA9406E, word_20BA94074, word_20BA93C2A, L"い");
      sub_20B89C174(v362, word_20BA9407C, word_20BA94074, word_20BA93C2A, L"い");
      sub_20B89C174(v363, word_20BA94082, word_20BA94074, word_20BA93C2A, L"い");
      v363[8] = &unk_20BA94088;
      v363[9] = 2;
      v363[10] = &unk_20BA9408E;
      v363[11] = 2;
      v363[12] = &unk_20BA94094;
      v363[13] = 1;
      v363[14] = &unk_20BA94098;
      v363[15] = 3;
      v363[16] = word_20BA940A0;
      v363[17] = 2;
      v363[18] = word_20BA940A6;
      v363[19] = 4;
      v363[20] = &unk_20BA940B0;
      v363[21] = 2;
      v363[22] = &unk_20BA940B6;
      v363[23] = 2;
      sub_20B89C174(v364, word_20BA940A0, word_20BA940A6, word_20BA940BC, word_20BA940C0);
      v364[8] = word_20BA940A0;
      v364[9] = 2;
      v364[10] = word_20BA940A6;
      v364[11] = 4;
      v364[12] = &unk_20BA940C6;
      v364[13] = 2;
      v364[14] = "T0F0Q0D0";
      v364[15] = 4;
      sub_20B89C174(v365, word_20BA940D6, word_20BA940DC, L"と", L"と");
      v365[8] = &unk_20BA940E4;
      v365[9] = 2;
      v365[10] = "J0h0j0";
      v365[11] = 3;
      v365[12] = word_20BA93DEE;
      v365[13] = 2;
      v365[14] = "W0K0c0";
      v365[15] = 3;
      sub_20B89C174(v366, word_20BA940F2, word_20BA940F8, word_20BA93DEE, "W0K0c0");
      v366[8] = &unk_20BA94102;
      v366[9] = 2;
      v366[10] = &unk_20BA94108;
      v366[11] = 4;
      v366[12] = &unk_20BA94112;
      v366[13] = 4;
      v366[14] = &unk_20BA9411C;
      v366[15] = 10;
      v366[16] = &unk_20BA94132;
      v366[17] = 2;
      v366[18] = &unk_20BA94138;
      v366[19] = 4;
      v366[20] = &unk_20BA94142;
      v366[21] = 4;
      v366[22] = &unk_20BA9414C;
      v366[23] = 8;
      sub_20B89C174(v367, word_20BA9415E, word_20BA94164, word_20BA93E22, word_20BA93E28);
      sub_20B89C174(v368, L"日", "s0", word_20BA9416C, word_20BA94172);
      sub_20B89C174(v370, word_20BA9418A, word_20BA94190, word_20BA93DEE, "W0K0c0");
      sub_20B89C174(v373, word_20BA941A4, "o0a0", word_20BA93C0E, "~0M0");
      sub_20B89C174(v374, "8", "o0a0", word_20BA93C0E, "~0M0");
      sub_20B89C174(v375, word_20BA941B2, word_20BA941B8, word_20BA93C2A, L"い");
      sub_20B89C174(v376, word_20BA941C0, word_20BA941B8, word_20BA93C2A, L"い");
      sub_20B89C174(v377, word_20BA941C6, word_20BA941B8, word_20BA93C2A, L"い");
      sub_20B89C174(v378, word_20BA941CC, "j0n0K0", word_20BA93C2A, L"い");
      sub_20B89C174(v379, "7", "j0n0K0", word_20BA93C2A, L"い");
      sub_20B89C174(v380, word_20BA941E0, "j0n0K0", word_20BA93C2A, L"い");
      v380[8] = &unk_20BA941E6;
      v380[9] = 2;
      v380[10] = "S0S0n0K0";
      v380[11] = 4;
      v380[12] = word_20BA93C2A;
      v380[13] = 1;
      v380[14] = L"い";
      v380[15] = 1;
      v380[16] = "9";
      v380[17] = 2;
      v380[18] = "S0S0n0K0";
      v380[19] = 4;
      v380[20] = word_20BA93C2A;
      v380[21] = 1;
      v380[22] = L"い";
      v380[23] = 1;
      v380[24] = &unk_20BA941FC;
      v380[25] = 2;
      v380[26] = "S0S0n0K0";
      v380[27] = 4;
      v380[28] = word_20BA93C2A;
      v380[29] = 1;
      v380[30] = L"い";
      v380[31] = 1;
      sub_20B89C174(v381, word_20BA94202, "v0_0", word_20BA93C2A, L"い");
      sub_20B89C174(v382, word_20BA94206, L"さん", L"日", "X0d0");
      sub_20B89C22C((uint64_t)__p, 78);
      __cxa_atexit((void (*)(void *))sub_20B89C14C, &qword_25472B1A0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B128);
      v2 = v233;
      v4 = v236;
      v14 = v246;
    }
    __p[0] = v16;
    __p[1] = (void *)v20;
    *(_QWORD *)&v259 = v15;
    *((_QWORD *)&v259 + 1) = v248;
    *(_QWORD *)&__len = v249;
    *((_QWORD *)&__len + 1) = v247;
    *(_QWORD *)&v261 = v239;
    *((_QWORD *)&v261 + 1) = v241;
    v100 = qword_25472B1A8;
    if (qword_25472B1A8)
    {
      v101 = &qword_25472B1A8;
      do
      {
        v102 = sub_20B89C3CC((unsigned __int16 **)(v100 + 32), (unsigned __int16 **)__p);
        if (v102 >= 0)
          v103 = (uint64_t *)v100;
        else
          v103 = (uint64_t *)(v100 + 8);
        if (v102 >= 0)
          v101 = (uint64_t *)v100;
        v100 = *v103;
      }
      while (*v103);
      if (v101 != &qword_25472B1A8
        && (sub_20B89C3CC((unsigned __int16 **)__p, (unsigned __int16 **)v101 + 4) & 0x80) == 0)
      {
LABEL_260:
        v17 = v17 + (v245[20] + v245[20]) / 0.1;
      }
    }
    if (*(_DWORD *)(v244 + 16) || (v104 = *v4, *(_DWORD *)(*v4 + 40 * v14) != 5))
    {
      v242 = 0;
      v106 = v248;
    }
    else
    {
      v105 = *(unsigned __int16 *)(*(_QWORD *)(v244 + 40) + 50);
      v106 = v248;
      if (v105 != *(unsigned __int16 *)(v104 + 40 * v14 + 30) && v105 != *(unsigned __int16 *)(v104 + 40 * v14 + 32)
        || !sub_20B8D1A28(cf))
      {
        goto LABEL_517;
      }
      if (v232 == 40)
      {
        v242 = 0;
        v107 = v229;
        goto LABEL_481;
      }
      if (sub_20B89A690(v238) || (v193 = *(unsigned __int16 **)(v244 + 40), v193[25] == v238))
      {
        v242 = 1;
        v107 = v234;
        goto LABEL_481;
      }
      if (v193[44] <= v238)
      {
        v242 = 0;
        v219 = v193[45];
        v107 = v228;
        if (v219 >= v238)
LABEL_481:
          v17 = v17 + *v107 / 0.1;
      }
      else
      {
LABEL_517:
        v242 = 0;
      }
    }
    if ((*(_DWORD *)(*v4 + 40 * v14) == 5 || v20 == 1 && *v16 == 19968)
      && (sub_20B89A690(v238) || *(unsigned __int16 *)(*(_QWORD *)(v244 + 40) + 50) == v238))
    {
      if (v20)
      {
        v108 = 2 * v20;
        v109 = (__int16 *)v16;
        while (sub_20B8DA100(*v109))
        {
          ++v109;
          v108 -= 2;
          if (!v108)
            goto LABEL_276;
        }
        v106 = v248;
        goto LABEL_282;
      }
LABEL_276:
      v110 = v247;
      v106 = v248;
      if (sub_20B89A730(v249, v247))
        v17 = v17 + v245[22] / 0.1;
    }
    else
    {
LABEL_282:
      v110 = v247;
    }
    v111 = *(_DWORD *)(*v4 + 40 * v14);
    if ((_DWORD)v2 == 2 && v111 == 5)
    {
      v112 = v2;
      v17 = v17 + v245[24] / 0.1;
    }
    else
    {
      v112 = v2;
    }
    if (v15)
      v113 = v106 == 0;
    else
      v113 = 1;
    v114 = v113;
    if (v113 || (v115 = *v15, (v115 - 48) >= 0xA) && (unsigned __int16)(v115 + 240) > 9u)
    {
LABEL_296:
      v116 = 0;
      goto LABEL_297;
    }
    v121 = 1;
    while (v106 != v121)
    {
      v122 = v15[v121];
      v123 = v122 - 48;
      ++v121;
      v124 = (unsigned __int16)(v122 + 240);
      if (v123 >= 0xA && v124 >= 0xA)
      {
        v126 = v121 - 1;
        goto LABEL_316;
      }
    }
    v126 = v106;
LABEL_316:
    v116 = v126 >= v106;
    if (v111 != 5)
    {
LABEL_297:
      if (!v243)
        goto LABEL_331;
LABEL_298:
      if (!sub_20B89A730(v249, v110))
        goto LABEL_331;
      if (v110)
      {
        v117 = 2 * v110;
        v118 = v249;
        while ((unsigned __int16)(*v118 + 191) < 0x1Au || (unsigned __int16)(*v118 + 223) < 0x1Au)
        {
          ++v118;
          v117 -= 2;
          if (!v117)
          {
            v120 = v110;
            goto LABEL_344;
          }
        }
        goto LABEL_331;
      }
      v120 = 0;
LABEL_344:
      v17 = v17 + v245[23] / 0.1;
      goto LABEL_345;
    }
    if (v126 < v106)
      goto LABEL_296;
    if ((v231 & 0x100000000) != 0)
    {
      v127 = 1;
      v128 = v231;
    }
    else
    {
      v127 = 0;
      v128 = v231;
      if (v16 && v20)
      {
        v194 = *v16;
        if ((v194 - 48) < 0xA || (unsigned __int16)(v194 + 240) <= 9u)
        {
          v213 = 1;
          while (v20 != v213)
          {
            v214 = v16[v213];
            v215 = v214 - 48;
            ++v213;
            v216 = (unsigned __int16)(v214 + 240);
            if (v215 >= 0xA && v216 >= 0xA)
            {
              v218 = v213 - 1;
              goto LABEL_529;
            }
          }
          v218 = v20;
LABEL_529:
          v127 = v218 >= v20;
        }
        else
        {
          v127 = 0;
        }
      }
    }
    HIDWORD(v231) = v127;
    if ((v128 & 1) != 0 || !v20)
    {
      LODWORD(v231) = 1;
    }
    else
    {
      v129 = 2 * v20 - 2;
      v130 = (__int16 *)v16;
      do
      {
        v131 = sub_20B8DA100(*v130++);
        if (v129)
          v132 = v131;
        else
          v132 = 0;
        v129 -= 2;
      }
      while (v132);
      LODWORD(v231) = v131;
      v106 = v248;
      v110 = v247;
    }
    HIDWORD(v230) |= v243;
    LODWORD(v230) = v230 | v33;
    v116 = 1;
    if (v243)
      goto LABEL_298;
LABEL_331:
    if (v33 && sub_20B89A730(v249, v110))
    {
      if (v110)
      {
        v133 = 2 * v110;
        v134 = v249;
        while ((unsigned __int16)(*v134 + 191) < 0x1Au || (unsigned __int16)(*v134 + 223) < 0x1Au)
        {
          ++v134;
          v133 -= 2;
          if (!v133)
          {
            v120 = v110;
            goto LABEL_345;
          }
        }
        v120 = v110;
        goto LABEL_344;
      }
      v120 = 0;
    }
    else
    {
      v120 = v110;
    }
LABEL_345:
    if ((v116 & sub_20B8DA20C(v249, v120)) == 1)
      v17 = v17 + v245[15] / -0.1;
    v136 = atomic_load((unsigned __int8 *)&qword_25472B130);
    if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_25472B130))
    {
      v270 = xmmword_24C499AF0;
      v271 = *(_OWORD *)&off_24C499B00;
      v272 = xmmword_24C499B10;
      v273 = *(_OWORD *)&off_24C499B20;
      v266 = xmmword_24C499AB0;
      v267 = unk_24C499AC0;
      v268 = xmmword_24C499AD0;
      v269 = unk_24C499AE0;
      v262 = xmmword_24C499A70;
      v263 = *(_OWORD *)&off_24C499A80;
      v264 = xmmword_24C499A90;
      v265 = unk_24C499AA0;
      *(_OWORD *)__p = xmmword_24C499A30;
      v259 = unk_24C499A40;
      __len = xmmword_24C499A50;
      v261 = *(_OWORD *)&off_24C499A60;
      sub_20B89C540((uint64_t *)__p, 16);
      __cxa_atexit((void (*)(void *))sub_20B89C518, &qword_25472B1B8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B130);
      v112 = v233;
      v4 = v236;
      v106 = v248;
      v110 = v247;
    }
    v137 = atomic_load((unsigned __int8 *)&qword_25472B138);
    if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_25472B138))
    {
      LOWORD(__p[0]) = 10;
      __p[1] = word_20BA93C1A;
      *(_QWORD *)&v259 = 3;
      *((_QWORD *)&v259 + 1) = &unk_20BA9429A;
      *(_QWORD *)&__len = 1;
      WORD4(__len) = 3;
      *(_QWORD *)&v261 = L"さん";
      *((_QWORD *)&v261 + 1) = 2;
      *(_QWORD *)&v262 = &unk_20BA9429A;
      *((_QWORD *)&v262 + 1) = 1;
      LOWORD(v263) = 5;
      *((_QWORD *)&v263 + 1) = word_20BA93220;
      *(_QWORD *)&v264 = 1;
      *((_QWORD *)&v264 + 1) = L"かい";
      *(_QWORD *)&v265 = 2;
      WORD4(v265) = 5;
      *(_QWORD *)&v266 = word_20BA93220;
      *((_QWORD *)&v266 + 1) = 1;
      *(_QWORD *)&v267 = word_20BA93CDE;
      *((_QWORD *)&v267 + 1) = 1;
      LOWORD(v268) = 5;
      *((_QWORD *)&v268 + 1) = word_20BA93220;
      *(_QWORD *)&v269 = 1;
      *((_QWORD *)&v269 + 1) = &unk_20BA9429E;
      *(_QWORD *)&v270 = 1;
      WORD4(v270) = 3;
      *(_QWORD *)&v271 = L"さん";
      *((_QWORD *)&v271 + 1) = 2;
      *(_QWORD *)&v272 = L"次";
      *((_QWORD *)&v272 + 1) = 1;
      LOWORD(v273) = 3;
      *((_QWORD *)&v273 + 1) = L"さん";
      v274 = 2;
      v275 = (uint64_t)&unk_20BA942A2;
      v276 = 1;
      LOWORD(v277) = 9;
      v278 = word_20BA93C06;
      v279 = 3;
      v280 = (char *)&unk_20BA942A6;
      v281 = 1;
      LOWORD(v282) = 9;
      v283 = (uint64_t)word_20BA93C06;
      v284 = 3;
      v285 = (uint64_t)&unk_20BA942AA;
      v286 = 1;
      LOWORD(v287) = 2;
      v288 = "u0_0";
      v289 = 2;
      v290 = byte_20BA93B9E;
      v291 = 0;
      LOWORD(v292) = 9;
      v293 = (uint64_t)word_20BA933FC;
      v294 = 1;
      v295 = (uint64_t)&unk_20BA93C76;
      v296 = 1;
      LOWORD(v297) = 1;
      v298 = "D0c0";
      v299 = 2;
      v300 = &unk_20BA942AE;
      v301 = 2;
      sub_20B89B7FC((uint64_t **)&qword_25472B1D0, (__int128 *)__p, 12);
      __cxa_atexit((void (*)(void *))sub_20B89AE70, &qword_25472B1D0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B138);
      v112 = v233;
      v4 = v236;
      v106 = v248;
      v110 = v247;
    }
    v138 = (uint64_t *)qword_25472B1C0;
    if (!qword_25472B1C0)
      goto LABEL_373;
    v139 = &qword_25472B1C0;
    while (2)
    {
      v140 = v138[5];
      if (v20 >= v140)
        v141 = v138[5];
      else
        v141 = v20;
      if (v141)
      {
        v142 = (unsigned __int16 *)v138[4];
        v143 = v16;
        while (1)
        {
          v144 = *v142;
          v145 = *v143;
          if (v144 < v145)
            break;
          if (v145 < v144)
            goto LABEL_361;
          ++v142;
          ++v143;
          if (!--v141)
            goto LABEL_359;
        }
LABEL_360:
        ++v138;
      }
      else
      {
LABEL_359:
        if (v140 < v20)
          goto LABEL_360;
LABEL_361:
        v139 = v138;
      }
      v138 = (uint64_t *)*v138;
      if (v138)
        continue;
      break;
    }
    if (v139 == &qword_25472B1C0)
      goto LABEL_373;
    v146 = v139[5];
    if (v146 >= v20)
      v147 = v20;
    else
      v147 = v139[5];
    if (!v147)
    {
LABEL_372:
      if (v146 > v20)
        goto LABEL_373;
LABEL_383:
      v17 = v17 + v245[15] / 0.1;
      goto LABEL_384;
    }
    v148 = (unsigned __int16 *)v139[4];
    v149 = v16;
    while (1)
    {
      v150 = *v149;
      v151 = *v148;
      if (v150 < v151)
        break;
      if (v151 < v150)
        goto LABEL_383;
      ++v149;
      ++v148;
      if (!--v147)
        goto LABEL_372;
    }
LABEL_373:
    v257.__r_.__value_.__r.__words[0] = 0;
    if ((sub_20B89AE98(v16, v20, (uint64_t *)&v257) & 1) != 0)
    {
      if (v257.__r_.__value_.__r.__words[0] == 14 && v106 == 4)
      {
        v153 = 0;
        while ((unsigned __int16)word_20BA93D1A[v153] == v15[v153])
        {
          if (++v153 == 4)
            goto LABEL_383;
        }
      }
      LOWORD(__p[0]) = v257.__r_.__value_.__l.__data_;
      __p[1] = v15;
      *(_QWORD *)&v259 = v106;
      *((_QWORD *)&v259 + 1) = v249;
      *(_QWORD *)&__len = v110;
      v106 = v248;
      if (sub_20B89BADC((uint64_t)&qword_25472B1D0, __p) != (_QWORD *)algn_25472B1D8)
        goto LABEL_383;
    }
LABEL_384:
    v154 = *(_DWORD *)(*v4 + 40 * v246) != 5 || v116;
    if ((v154 & 1) == 0 && sub_20B8D1A28(cf))
    {
      v155 = v245[15];
      goto LABEL_390;
    }
    if (!v16 || !v20)
    {
      if (!**(_BYTE **)(v244 + 24))
      {
        v157 = *v16;
        goto LABEL_408;
      }
      goto LABEL_428;
    }
    v157 = *v16;
    if ((v157 - 48) < 0xA || (unsigned __int16)(v157 + 240) <= 9u)
    {
      v165 = 1;
      while (v20 != v165)
      {
        v166 = v16[v165];
        v167 = v166 - 48;
        ++v165;
        v168 = (unsigned __int16)(v166 + 240);
        if (v167 >= 0xA && v168 >= 0xA)
        {
          v170 = v165 - 1;
          goto LABEL_423;
        }
      }
      v170 = v20;
LABEL_423:
      v171 = v170 < v20 || v116;
      if ((v171 & 1) != 0)
      {
        if (!**(_BYTE **)(v244 + 24))
        {
LABEL_476:
          v156 = v246;
          if ((v114 & 1) == 0)
          {
            v195 = *v15;
            v196 = v195 - 48;
            v197 = (unsigned __int16)(v195 + 240);
            if (v196 < 0xA || v197 < 0xA)
              goto LABEL_408;
            v199 = 0;
            while (v106 - 1 != v199)
            {
              v200 = v15[v199 + 1];
              v201 = v200 - 48;
              ++v199;
              v202 = (unsigned __int16)(v200 + 240);
              if (v201 < 0xA || v202 <= 9)
              {
                if (v199 >= v106)
                  break;
                goto LABEL_408;
              }
            }
          }
          v17 = v17 + v245[19] / 0.1;
          goto LABEL_392;
        }
LABEL_428:
        sub_20B8D15F4(v15, v106, &v257);
        sub_20B8D15F4(v16, v20, &v256);
        v172 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v173 = &v257;
        else
          v173 = (std::string *)v257.__r_.__value_.__r.__words[0];
        v2 = v112;
        if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
        {
          v254 = 0;
          __dst = 0;
          v255 = 0;
          v174 = v256.__r_.__value_.__l.__size_;
          v175 = (std::string *)v256.__r_.__value_.__r.__words[0];
        }
        else
        {
          v174 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
          v254 = 0;
          __dst = 0;
          v175 = &v256;
          v255 = 0;
        }
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v172 = v257.__r_.__value_.__l.__size_;
        sub_20B871DC8((unint64_t *)&__dst, v174 + v172 + 4);
        v156 = v246;
        v176 = (char *)__dst;
        if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v177 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
        else
          v177 = v256.__r_.__value_.__l.__size_;
        memcpy(__dst, v175, v177);
        v178 = HIBYTE(v256.__r_.__value_.__r.__words[2]);
        if ((v256.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v178 = v256.__r_.__value_.__l.__size_;
        *(_WORD *)&v176[v178] = 8224;
        v179 = &v176[v178 + 2];
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v180 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
        else
          v180 = v257.__r_.__value_.__l.__size_;
        memcpy(v179, v173, v180);
        v181 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v181 = v257.__r_.__value_.__l.__size_;
        *(_WORD *)&v179[v181] = 8224;
        sub_20B7F8B20(__p);
        sub_20B7F8BDC(__p, (uint64_t)__dst, v254 - (_BYTE *)__dst);
        v4 = v236;
        v182 = 0.0;
        if (sub_20B8068B4(v235, (uint64_t)__p))
        {
          sub_20B82E068(v251, *((void **)&v259 + 1), __len);
          v183 = v251;
          if (v252 < 0)
            v183 = (void **)v251[0];
          v184 = strtol((const char *)v183 + v254 - (_BYTE *)__dst, 0, 16);
          if (v252 < 0)
            operator delete(v251[0]);
          v182 = (double)v184 / -700.0;
        }
        sub_20B7F8B30((uint64_t)__p);
        if (__dst)
        {
          v254 = __dst;
          operator delete(__dst);
        }
        if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v256.__r_.__value_.__l.__data_);
        if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v257.__r_.__value_.__l.__data_);
        v17 = v17 + v182;
        if (!v242)
          goto LABEL_461;
        v185 = *v234 / -0.1;
      }
      else
      {
        v156 = v246;
        v189 = v246 != v240 || v232 == 40;
        v190 = 17;
        if (v189)
          v190 = 16;
        v17 = v17 + v245[v190] / 0.1;
        if (v232 != 40)
          goto LABEL_392;
        if (!sub_20B9698DC(**(_DWORD **)(v244 + 8)))
          goto LABEL_391;
        v191 = 2 * v20;
        v192 = (__int16 *)v16;
        v156 = v246;
        v2 = v112;
        while (sub_20B8DA100(*v192))
        {
          ++v192;
          v191 -= 2;
          if (!v191)
            goto LABEL_461;
        }
        v185 = v245[18] / 0.1;
      }
      v17 = v17 + v185;
      goto LABEL_461;
    }
    if (**(_BYTE **)(v244 + 24))
      goto LABEL_428;
    v158 = 0;
    while (v20 - 1 != v158)
    {
      v159 = v16[v158 + 1];
      v160 = v159 - 48;
      ++v158;
      v161 = (unsigned __int16)(v159 + 240);
      if (v160 < 0xA || v161 <= 9)
      {
        if (v158 >= v20)
          break;
        goto LABEL_476;
      }
    }
LABEL_408:
    if (v157 == 9787)
      goto LABEL_428;
    if ((u_charType(v157) - 19) > 0xA)
      goto LABEL_428;
    v163 = *v15;
    if (v163 == 9787)
      goto LABEL_428;
    if ((u_charType(v163) - 19) > 0xA)
      goto LABEL_428;
    v164 = sub_20B8D9E14(*v16);
    if (v164 == sub_20B8D9E14(*v15))
      goto LABEL_428;
    v155 = v245[21];
LABEL_390:
    v17 = v17 + v155 / 0.1;
LABEL_391:
    v156 = v246;
LABEL_392:
    v2 = v112;
LABEL_461:
    v186 = *v4 + 40 * v156;
    v187 = *(unsigned __int16 *)(v186 + 24);
    v188 = *(unsigned __int16 *)(v186 + 28);
    if (cf)
      CFRelease(cf);
    v16 += v187;
    v15 += v188;
    v14 = v156 + 1;
  }
  while (v14 != v237);
  if ((HIDWORD(v231) & v231 & 1) != 0)
  {
    v224 = v245;
    v17 = v17 + v245[15] / 0.1;
    v225 = HIDWORD(v230);
    v226 = v230;
  }
  else
  {
    v225 = HIDWORD(v230);
    v226 = v230;
    v224 = v245;
  }
  if ((v225 & v226 & 1) != 0)
    return v17 + v224[23] / 0.1;
  return v17;
}

void sub_20B89A478()
{
  JUMPOUT(0x20B89A610);
}

void sub_20B89A658(void *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  JUMPOUT(0x20B89A688);
}

void sub_20B89A66C()
{
  JUMPOUT(0x20B89A688);
}

BOOL sub_20B89A690(unsigned int a1)
{
  unsigned __int16 *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL8 result;

  v1 = (unsigned __int16 *)((char *)&unk_20BA3BB2A + 14 * a1);
  v2 = (uint64_t *)(&off_24C499C48 + 2 * *v1);
  if (v2[1] == 3)
  {
    v3 = 0;
    v4 = (uint64_t *)(&off_24C499C48 + 2 * v1[2]);
    v5 = *v4;
    v6 = v4[1];
    v7 = *v2;
    while (asc_20BA92E46[v3] == *(_WORD *)(v7 + v3 * 2))
    {
      if (++v3 == 3)
      {
        if (v6 < 3)
          return 0;
        v8 = 0;
        do
        {
          v9 = *(unsigned __int16 *)(v5 + v8 * 2);
          v10 = (unsigned __int16)asc_20BA92E80[v8];
          result = v10 == v9;
        }
        while (v10 == v9 && v8++ != 2);
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_20B89A730(unsigned __int16 *a1, uint64_t a2)
{
  unsigned __int16 *v2;
  unsigned int v3;
  BOOL v4;
  BOOL v6;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;

  if (a2)
  {
    v2 = &a1[a2];
    while (1)
    {
      v3 = *a1;
      v4 = (unsigned __int16)((v3 & 0xFFDF) - 65) >= 0x1Au && (unsigned __int16)(v3 + 191) >= 0x1Au;
      if (v4 && (unsigned __int16)(v3 + 223) >= 0x1Au)
      {
        v6 = v3 - 13184 >= 0x5E && (unsigned __int16)(v3 - 945) >= 0x1Bu;
        if (v6 && (unsigned __int16)(v3 - 913) >= 0x1Bu)
        {
          v8 = "%";
          v9 = 6;
          do
          {
            v10 = v9 >> 1;
            v11 = &v8[2 * (v9 >> 1)];
            v13 = *(unsigned __int16 *)v11;
            v12 = v11 + 2;
            v9 += ~(v9 >> 1);
            if (v13 < v3)
              v8 = v12;
            else
              v9 = v10;
          }
          while (v9);
          if (v8 == "22InspectorAccessContext" || v3 < *(unsigned __int16 *)v8)
            break;
        }
      }
      if (++a1 == v2)
        return 1;
    }
  }
  return 0;
}

std::mutex *sub_20B89A804(std::mutex *a1)
{
  std::mutex::~mutex(a1 + 9);
  return a1;
}

void sub_20B89A830(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 *i;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_25472B1E8 = 0u;
  *(_OWORD *)&qword_25472B1F8 = 0u;
  dword_25472B208 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = sub_20B89ACFC((uint64_t)&qword_25472B200, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_25472B1E8 + 1);
      if (*((_QWORD *)&xmmword_25472B1E8 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B1E8 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_25472B1E8 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_25472B1E8 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_25472B1E8 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int16 ***)(xmmword_25472B1E8 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int16 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if (sub_20B89AD3C((uint64_t)&dword_25472B208, i + 8, (unsigned __int16 *)v3))
                goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = v12 + 16;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_20B88DD4C(v13, *(void **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)v13 = v14;
      }
      *((_WORD *)v12 + 20) = *(_WORD *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_25472B200 + 1);
      if (!v6 || (float)(*(float *)&dword_25472B208 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_25472B1E8;
      v32 = *(_QWORD **)(xmmword_25472B1E8 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_25472B1F8;
        qword_25472B1F8 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_25472B1F8;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_25472B1E8 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_25472B200;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25472B208);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_25472B1E8 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472B1E8 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472B1E8 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_25472B200 / *(float *)&dword_25472B208);
      if (*((_QWORD *)&xmmword_25472B1E8 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B1E8 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_25472B1E8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_25472B1E8;
          *(_QWORD *)&xmmword_25472B1E8 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_25472B1E8 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472B1E8 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_25472B1F8;
          if (qword_25472B1F8)
          {
            v24 = *(_QWORD *)(qword_25472B1F8 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472B1E8 + 8 * v24) = &qword_25472B1F8;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_25472B1E8 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_25472B1E8 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472B1E8 + 8 * v30);
                **(_QWORD **)(xmmword_25472B1E8 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_25472B1E8;
        *(_QWORD *)&xmmword_25472B1E8 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_25472B1E8 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_20B89ACBC(_Unwind_Exception *a1)
{
  void **v1;

  sub_20B89ADC0(1, v1);
  sub_20B89AE0C((uint64_t)&xmmword_25472B1E8);
  _Unwind_Resume(a1);
}

unint64_t sub_20B89ACFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v2 = v3;
  }
  return sub_20B828450((uint64_t)&v5, (uint64_t *)a2, 2 * v2);
}

BOOL sub_20B89AD3C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 result;

  v3 = *((char *)a2 + 23);
  v4 = *((_QWORD *)a2 + 1);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  v5 = *((unsigned __int8 *)a3 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a3 + 1);
  if (v4 != v5)
    return 0;
  if (!v4)
    return 1;
  if (v3 >= 0)
    v7 = a2;
  else
    v7 = *(unsigned __int16 **)a2;
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = *(unsigned __int16 **)a3;
  v9 = v4 - 1;
  do
  {
    v11 = *v7++;
    v10 = v11;
    v13 = *v8++;
    v12 = v13;
    v15 = v9-- != 0;
    result = v12 == v10;
  }
  while (v12 == v10 && v15);
  return result;
}

void sub_20B89ADC0(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20B89AE0C(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20B89AE70(uint64_t a1)
{
  sub_20B8934AC(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20B89AE98(unsigned __int16 *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v4 = a2;
  v5 = a1;
  if (a1
    && a2
    && ((v6 = *a1, v7 = v6 - 48, v8 = (unsigned __int16)(v6 + 240), v7 >= 0xA) ? (v9 = v8 > 9) : (v9 = 0), !v9))
  {
    v10 = 0;
    while (a2 - 1 != v10)
    {
      v11 = a1[v10 + 1];
      v12 = v11 - 48;
      ++v10;
      v13 = (unsigned __int16)(v11 + 240);
      if (v12 >= 0xA && v13 >= 0xA)
      {
        if (v10 < a2)
          goto LABEL_15;
        break;
      }
    }
    v16 = 0;
    do
    {
      v18 = *v5++;
      v17 = v18;
      if (v18 >> 4 <= 0xFF0)
        v19 = -48;
      else
        v19 = -65296;
      v16 = v17 + 10 * v16 + v19;
      --v4;
    }
    while (v4);
    *a3 = v16;
  }
  else
  {
LABEL_15:
    if (!sub_20B8D9D58(a1, a2, a3))
      return sub_20B8D9C9C((uint64_t)v5, v4, a3);
  }
  return 1;
}

void sub_20B89AF8C()
{
  unsigned __int8 v0;
  _BYTE v1[56];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _WORD v6[32];
  const __int16 *v7;
  uint64_t v8;
  const __int16 *v9;
  uint64_t v10;
  const __int16 *v11;
  uint64_t v12;
  _WORD v13[32];
  _WORD *v14;
  uint64_t v15;
  const __int16 *v16;
  uint64_t v17;
  const __int16 *v18;
  uint64_t v19;
  _WORD v20[32];
  _WORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD v31[32];
  void *v32;
  uint64_t v33;
  const __int16 *v34;
  uint64_t v35;
  const __int16 *v36;
  uint64_t v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;
  const __int16 *v41;
  uint64_t v42;
  const __int16 *v43;
  uint64_t v44;
  _WORD v45[32];
  const char *v46;
  uint64_t v47;
  const __int16 *v48;
  uint64_t v49;
  const __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD v54[32];
  const char *v55;
  uint64_t v56;
  const __int16 *v57;
  uint64_t v58;
  const __int16 *v59;
  uint64_t v60;
  __int16 v61;
  _WORD *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  __int16 v68;
  _WORD *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  const __int16 *v73;
  uint64_t v74;
  __int16 v75;
  _WORD *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _WORD v82[32];
  _WORD *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  __int16 v89;
  _WORD *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  __int16 v96;
  _WORD *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  __int16 v103;
  _WORD *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _WORD v110[32];
  __int16 *v111;
  uint64_t v112;
  const __int16 *v113;
  uint64_t v114;
  const __int16 *v115;
  uint64_t v116;
  __int16 v117;
  __int16 *v118;
  uint64_t v119;
  _WORD *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  __int16 v124;
  void *v125;
  uint64_t v126;
  const __int16 *v127;
  uint64_t v128;
  const __int16 *v129;
  uint64_t v130;
  __int16 v131;
  void *v132;
  uint64_t v133;
  const __int16 *v134;
  uint64_t v135;
  const __int16 *v136;
  uint64_t v137;
  _WORD v138[32];
  void *v139;
  uint64_t v140;
  const __int16 *v141;
  uint64_t v142;
  const __int16 *v143;
  uint64_t v144;
  __int16 v145;
  void *v146;
  uint64_t v147;
  const __int16 *v148;
  uint64_t v149;
  const __int16 *v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25472B110);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472B110))
    {
      sub_20B89BB80((uint64_t)v1, 2, L"に", L"つ", L"つ");
      sub_20B89BB80((uint64_t)&v2, 2, L"に", word_20BA93512, word_20BA93512);
      sub_20B89BB80((uint64_t)&v3, 2, L"に", L"人", word_20BA93C98);
      sub_20B89BB80((uint64_t)&v4, 2, L"に", L"日", L"か");
      sub_20B89BB80((uint64_t)&v5, 2, L"に", L"日", word_20BA932F4);
      sub_20B89BB80((uint64_t)v6, 2, L"に", "\bg", "d0M0");
      v6[28] = 3;
      v7 = L"さん";
      v8 = 2;
      v9 = L"日";
      v10 = 1;
      v11 = L"か";
      v12 = 1;
      sub_20B89BB80((uint64_t)v13, 4, L"よ", L"つ", L"つ");
      v13[28] = 4;
      v14 = word_20BA93CA4;
      v15 = 2;
      v16 = L"日";
      v17 = 1;
      v18 = L"か";
      v19 = 1;
      sub_20B89BB80((uint64_t)v20, 4, word_20BA93CA4, L"日", "X0d0");
      v20[28] = 4;
      v21 = word_20BA93CA4;
      v22 = 2;
      v23 = &unk_20BA93CAA;
      v24 = 1;
      v25 = word_20BA93C06;
      v26 = 3;
      sub_20B89BB80((uint64_t)&v27, 5, word_20BA93220, L"つ", L"つ");
      sub_20B89BB80((uint64_t)&v28, 5, word_20BA93220, L"日", L"か");
      sub_20B89BB80((uint64_t)&v29, 5, word_20BA93220, word_20BA93CAE, word_20BA93CB2);
      sub_20B89BB80((uint64_t)&v30, 6, word_20BA9351A, L"つ", L"つ");
      sub_20B89BB80((uint64_t)v31, 6, word_20BA936C4, L"つ", L"つ");
      v31[28] = 6;
      v32 = &unk_20BA93CB8;
      v33 = 2;
      v34 = L"日";
      v35 = 1;
      v36 = L"か";
      v37 = 1;
      v38 = 7;
      v39 = "j0j0";
      v40 = 2;
      v41 = L"日";
      v42 = 1;
      v43 = L"か";
      v44 = 1;
      sub_20B89BB80((uint64_t)v45, 8, "o0a0", L"人", word_20BA93C98);
      v45[28] = 8;
      v46 = "o0a0";
      v47 = 2;
      v48 = L"日";
      v49 = 1;
      v50 = L"か";
      v51 = 1;
      sub_20B89BB80((uint64_t)&v52, 9, word_20BA93C06, L"日", L"か");
      sub_20B89BB80((uint64_t)&v53, 9, word_20BA93C06, "]u", word_20BA93748);
      sub_20B89BB80((uint64_t)v54, 10, "X0c0", "pe", "Y0F0");
      v54[28] = 10;
      v55 = "X0c0";
      v56 = 2;
      v57 = L"日";
      v58 = 1;
      v59 = L"か";
      v60 = 1;
      v61 = 10;
      v62 = word_20BA93C1A;
      v63 = 3;
      v64 = &unk_20BA93C02;
      v65 = 1;
      v66 = "U0d0";
      v67 = 2;
      v68 = 10;
      v69 = word_20BA93C1A;
      v70 = 3;
      v71 = &unk_20BA93CDE;
      v72 = 1;
      v73 = L"かい";
      v74 = 2;
      v75 = 10;
      v76 = word_20BA93C1A;
      v77 = 3;
      v78 = &unk_20BA93C0E;
      v79 = 1;
      v80 = &unk_20BA93CE2;
      v81 = 2;
      sub_20B89BB80((uint64_t)v82, 10, word_20BA93C1A, L"日", L"か");
      v82[28] = 10;
      v83 = word_20BA93C1A;
      v84 = 3;
      v85 = &unk_20BA93C4A;
      v86 = 2;
      v87 = &unk_20BA93CE8;
      v88 = 4;
      v89 = 10;
      v90 = word_20BA93C1A;
      v91 = 3;
      v92 = &unk_20BA93CF2;
      v93 = 1;
      v94 = &unk_20BA93CF6;
      v95 = 2;
      v96 = 10;
      v97 = word_20BA93C1A;
      v98 = 3;
      v99 = &unk_20BA93CFC;
      v100 = 1;
      v101 = "[0M0";
      v102 = 2;
      v103 = 10;
      v104 = word_20BA93C1A;
      v105 = 3;
      v106 = &unk_20BA93D06;
      v107 = 1;
      v108 = &unk_20BA93D0A;
      v109 = 3;
      sub_20B89BB80((uint64_t)v110, 10, word_20BA93D12, L"日", L"か");
      v110[28] = 14;
      v111 = &word_20BA93D1A;
      v112 = 4;
      v113 = L"日";
      v114 = 1;
      v115 = L"か";
      v116 = 1;
      v117 = 14;
      v118 = &word_20BA93D1A;
      v119 = 4;
      v120 = word_20BA93CAE;
      v121 = 1;
      v122 = "~0D0";
      v123 = 2;
      v124 = 14;
      v125 = &unk_20BA93D2A;
      v126 = 5;
      v127 = L"日";
      v128 = 1;
      v129 = L"か";
      v130 = 1;
      v131 = 20;
      v132 = &unk_20BA93C32;
      v133 = 4;
      v134 = L"日";
      v135 = 1;
      v136 = L"か";
      v137 = 1;
      sub_20B89BB80((uint64_t)v138, 20, "o0d0", L"日", "k0a0");
      v138[28] = 24;
      v139 = &unk_20BA93D3C;
      v140 = 5;
      v141 = L"日";
      v142 = 1;
      v143 = L"か";
      v144 = 1;
      v145 = 24;
      v146 = &unk_20BA93D48;
      v147 = 6;
      v148 = L"日";
      v149 = 1;
      v150 = L"か";
      v151 = 1;
      sub_20B89BC10((uint64_t)v1, 40);
      __cxa_atexit((void (*)(void *))sub_20B89BB58, &qword_25472B158, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B110);
    }
  }
}

void sub_20B89B5FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B110);
  _Unwind_Resume(a1);
}

void sub_20B89B614()
{
  unsigned __int8 v0;
  __int128 v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int16 v5;
  const __int16 *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int16 v10;
  const __int16 *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  __int16 v15;
  const __int16 *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int16 v20;
  const __int16 *v21;
  uint64_t v22;
  const __int16 *v23;
  uint64_t v24;
  __int16 v25;
  const __int16 *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __int16 v30;
  const __int16 *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  __int16 v35;
  const __int16 *v36;
  uint64_t v37;
  const __int16 *v38;
  uint64_t v39;
  __int16 v40;
  _WORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  __int16 v45;
  _WORD *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  __int16 v50;
  void *v51;
  uint64_t v52;
  const __int16 *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25472B118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472B118))
    {
      LOWORD(v1) = 1;
      *((_QWORD *)&v1 + 1) = "D0c0";
      v2 = 2;
      v3 = &unk_20BA93D5C;
      v4 = 2;
      v5 = 2;
      v6 = L"に";
      v7 = 1;
      v8 = &unk_20BA935DA;
      v9 = 1;
      v10 = 4;
      v11 = L"よ";
      v12 = 1;
      v13 = "J0O0";
      v14 = 2;
      v15 = 4;
      v16 = L"よ";
      v17 = 1;
      v18 = &unk_20BA93D68;
      v19 = 2;
      v20 = 4;
      v21 = L"よ";
      v22 = 1;
      v23 = L"ど";
      v24 = 1;
      v25 = 4;
      v26 = L"よ";
      v27 = 1;
      v28 = &unk_20BA93D6E;
      v29 = 3;
      v30 = 4;
      v31 = L"よ";
      v32 = 1;
      v33 = "~0D0";
      v34 = 2;
      v35 = 4;
      v36 = L"よ";
      v37 = 1;
      v38 = L"わ";
      v39 = 1;
      v40 = 4;
      v41 = word_20BA93CA4;
      v42 = 2;
      v43 = &unk_20BA93390;
      v44 = 1;
      v45 = 9;
      v46 = word_20BA93C06;
      v47 = 3;
      v48 = "Y0F0";
      v49 = 2;
      v50 = 30;
      v51 = &unk_20BA93D76;
      v52 = 5;
      v53 = L"か";
      v54 = 1;
      sub_20B89B7FC((uint64_t **)&qword_25472B170, &v1, 11);
      __cxa_atexit((void (*)(void *))sub_20B89AE70, &qword_25472B170, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B118);
    }
  }
}

void sub_20B89B7E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B118);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B89B7FC(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 *v5;
  uint64_t *v6;
  __int128 *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = (__int128 *)((char *)a2 + 40 * a3);
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_17;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if ((sub_20B89B994(v9 + 4, v5) & 0x80) != 0)
      {
LABEL_17:
        if (v6)
          v14 = v9;
        else
          v14 = v4;
        if (v6)
          v13 = v9 + 1;
        else
          v13 = v4;
        if (*v13)
          goto LABEL_27;
      }
      else
      {
        v13 = v4;
        v14 = v4;
        if (v6)
        {
          v15 = v6;
          do
          {
            while (1)
            {
              v14 = v15;
              v16 = v15 + 4;
              if ((sub_20B89B994(v5, v15 + 4) & 0x80) == 0)
                break;
              v15 = (uint64_t *)*v14;
              v13 = v14;
              if (!*v14)
                goto LABEL_24;
            }
            if ((sub_20B89B994(v16, v5) & 0x80) == 0)
              goto LABEL_27;
            v15 = (uint64_t *)v14[1];
          }
          while (v15);
          v13 = v14 + 1;
        }
      }
LABEL_24:
      v17 = operator new(0x48uLL);
      v18 = *v5;
      v19 = v5[1];
      v17[8] = *((_QWORD *)v5 + 4);
      *((_OWORD *)v17 + 2) = v18;
      *((_OWORD *)v17 + 3) = v19;
      *v17 = 0;
      v17[1] = 0;
      v17[2] = v14;
      *v13 = (uint64_t)v17;
      v20 = (uint64_t *)**a1;
      if (v20)
      {
        *a1 = v20;
        v17 = (_QWORD *)*v13;
      }
      sub_20B82973C(a1[1], v17);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      v5 = (__int128 *)((char *)v5 + 40);
      if (v5 == v7)
        return a1;
      v8 = (uint64_t **)*a1;
      v6 = a1[1];
    }
  }
  return a1;
}

void sub_20B89B980(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8934AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89B994(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;

  v2 = *(unsigned __int16 *)a1;
  v3 = *(unsigned __int16 *)a2;
  v4 = v2 == v3;
  if (v2 < v3)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4)
  {
    v6 = a1[2];
    v7 = a2[2];
    if (v7 >= v6)
      v8 = a1[2];
    else
      v8 = a2[2];
    if (v8)
    {
      v9 = (unsigned __int16 *)a2[1];
      v10 = (unsigned __int16 *)a1[1];
      do
      {
        v11 = *v10;
        v12 = *v9;
        if (v11 < v12)
          return 255;
        if (v12 < v11)
          return 1;
        ++v10;
        ++v9;
      }
      while (--v8);
    }
    v13 = v6 >= v7;
    if (v6 == v7)
    {
      v14 = a1[4];
      v15 = a2[4];
      if (v15 >= v14)
        v16 = a1[4];
      else
        v16 = a2[4];
      if (v16)
      {
        v17 = (unsigned __int16 *)a2[3];
        v18 = (unsigned __int16 *)a1[3];
        do
        {
          v19 = *v18;
          v20 = *v17;
          if (v19 < v20)
            return 255;
          if (v20 < v19)
            return 1;
          ++v18;
          ++v17;
        }
        while (--v16);
      }
      v13 = v14 >= v15;
      if (v14 == v15)
        return 0;
    }
    if (v13)
      return 1;
    return 255;
  }
  return v5;
}

uint64_t sub_20B89BA68(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 2 * a3;
    do
    {
      sub_20B886308(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_20B89BAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B84055C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B89BADC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_20B89B994(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_20B89B994(a2, v5 + 4) & 0x80) != 0)
    return v2;
  return v5;
}

uint64_t sub_20B89BB58(uint64_t a1)
{
  sub_20B8934AC(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20B89BB80(uint64_t result, __int16 a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_WORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (*a3)
  {
    v5 = 0;
    do
      v6 = v5 + 1;
    while (a3[++v5]);
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = a4;
  if (*a4)
  {
    v8 = 0;
    do
      v9 = v8 + 1;
    while (a4[++v8]);
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(result + 40) = a5;
  if (*a5)
  {
    v11 = 0;
    do
      v12 = v11 + 1;
    while (a5[++v11]);
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(result + 48) = v12;
  return result;
}

uint64_t sub_20B89BC10(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;

  qword_25472B168 = 0;
  qword_25472B160 = 0;
  qword_25472B158 = (uint64_t)&qword_25472B160;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = result + 56 * a2;
    v5 = &qword_25472B160;
    while (v5 != &qword_25472B160)
    {
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_25472B160;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      result = sub_20B89BDBC(v7 + 4, (_QWORD *)v2);
      if ((result & 0x80) != 0)
        goto LABEL_19;
      if (v3)
      {
        v10 = (uint64_t *)v3;
        do
        {
          while (1)
          {
            v7 = v10;
            v11 = v10 + 4;
            if ((sub_20B89BDBC((_QWORD *)v2, v10 + 4) & 0x80) == 0)
              break;
            v10 = (uint64_t *)*v7;
            v16 = v7;
            if (!*v7)
              goto LABEL_23;
          }
          result = sub_20B89BDBC(v11, (_QWORD *)v2);
          if ((result & 0x80) == 0)
            goto LABEL_26;
          v10 = (uint64_t *)v7[1];
        }
        while (v10);
        v16 = v7 + 1;
        goto LABEL_23;
      }
LABEL_22:
      v16 = &qword_25472B160;
      v7 = &qword_25472B160;
LABEL_23:
      v12 = operator new(0x58uLL);
      v13 = *(_OWORD *)v2;
      v14 = *(_OWORD *)(v2 + 16);
      v15 = *(_OWORD *)(v2 + 32);
      v12[10] = *(_QWORD *)(v2 + 48);
      *((_OWORD *)v12 + 3) = v14;
      *((_OWORD *)v12 + 4) = v15;
      *((_OWORD *)v12 + 2) = v13;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v7;
      *v16 = (uint64_t)v12;
      if (*(_QWORD *)qword_25472B158)
      {
        qword_25472B158 = *(_QWORD *)qword_25472B158;
        v12 = (_QWORD *)*v16;
      }
      result = (uint64_t)sub_20B82973C((uint64_t *)qword_25472B160, v12);
      ++qword_25472B168;
LABEL_26:
      v2 += 56;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)qword_25472B158;
      v3 = qword_25472B160;
    }
    v7 = &qword_25472B160;
LABEL_19:
    if (v3)
    {
      v16 = v7 + 1;
      if (v7[1])
        goto LABEL_26;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_20B89BDA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8934AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89BDBC(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;

  v2 = *(unsigned __int16 *)a1;
  v3 = *(unsigned __int16 *)a2;
  v4 = v2 == v3;
  if (v2 < v3)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4)
  {
    v6 = a1[2];
    v7 = a2[2];
    if (v7 >= v6)
      v8 = a1[2];
    else
      v8 = a2[2];
    if (v8)
    {
      v9 = (unsigned __int16 *)a2[1];
      v10 = (unsigned __int16 *)a1[1];
      do
      {
        v11 = *v10;
        v12 = *v9;
        if (v11 < v12)
          return 255;
        if (v12 < v11)
          return 1;
        ++v10;
        ++v9;
      }
      while (--v8);
    }
    v13 = v6 >= v7;
    if (v6 == v7)
    {
      v14 = a1[4];
      v15 = a2[4];
      if (v15 >= v14)
        v16 = a1[4];
      else
        v16 = a2[4];
      if (v16)
      {
        v17 = (unsigned __int16 *)a2[3];
        v18 = (unsigned __int16 *)a1[3];
        do
        {
          v19 = *v18;
          v20 = *v17;
          if (v19 < v20)
            return 255;
          if (v20 < v19)
            return 1;
          ++v18;
          ++v17;
        }
        while (--v16);
      }
      v13 = v14 >= v15;
      if (v14 == v15)
      {
        v21 = a1[6];
        v22 = a2[6];
        if (v22 >= v21)
          v23 = a1[6];
        else
          v23 = a2[6];
        if (v23)
        {
          v24 = (unsigned __int16 *)a2[5];
          v25 = (unsigned __int16 *)a1[5];
          do
          {
            v26 = *v25;
            v27 = *v24;
            if (v26 < v27)
              return 255;
            if (v27 < v26)
              return 1;
            ++v25;
            ++v24;
          }
          while (--v23);
        }
        v13 = v21 >= v22;
        if (v21 == v22)
          return 0;
      }
    }
    if (v13)
      return 1;
    return 255;
  }
  return v5;
}

uint64_t sub_20B89BED8(uint64_t a1)
{
  sub_20B8934AC(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20B89BF00(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 **v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t *v14;

  qword_25472B198 = 0;
  qword_25472B190 = 0;
  qword_25472B188 = (uint64_t)&qword_25472B190;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = result + 32 * a2;
    v5 = &qword_25472B190;
    while (v5 != &qword_25472B190)
    {
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_25472B190;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      result = sub_20B89C098((unsigned __int16 **)v7 + 4, (unsigned __int16 **)v2);
      if ((result & 0x80) != 0)
        goto LABEL_19;
      if (v3)
      {
        v10 = v3;
        do
        {
          while (1)
          {
            v7 = (uint64_t *)v10;
            v11 = (unsigned __int16 **)(v10 + 32);
            if ((sub_20B89C098((unsigned __int16 **)v2, (unsigned __int16 **)(v10 + 32)) & 0x80) == 0)
              break;
            v10 = *v7;
            v14 = v7;
            if (!*v7)
              goto LABEL_23;
          }
          result = sub_20B89C098(v11, (unsigned __int16 **)v2);
          if ((result & 0x80) == 0)
            goto LABEL_26;
          v10 = v7[1];
        }
        while (v10);
        v14 = v7 + 1;
        goto LABEL_23;
      }
LABEL_22:
      v14 = &qword_25472B190;
      v7 = &qword_25472B190;
LABEL_23:
      v12 = operator new(0x40uLL);
      v13 = *(_OWORD *)(v2 + 16);
      v12[2] = *(_OWORD *)v2;
      v12[3] = v13;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v7;
      *v14 = (uint64_t)v12;
      if (*(_QWORD *)qword_25472B188)
      {
        qword_25472B188 = *(_QWORD *)qword_25472B188;
        v12 = (_OWORD *)*v14;
      }
      result = (uint64_t)sub_20B82973C((uint64_t *)qword_25472B190, (uint64_t *)v12);
      ++qword_25472B198;
LABEL_26:
      v2 += 32;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)qword_25472B188;
      v3 = qword_25472B190;
    }
    v7 = &qword_25472B190;
LABEL_19:
    if (v3)
    {
      v14 = v7 + 1;
      if (v7[1])
        goto LABEL_26;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_20B89C084(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8934AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89C098(unsigned __int16 **a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;

  v2 = a1[1];
  v3 = a2[1];
  if (v3 >= v2)
    v4 = a1[1];
  else
    v4 = a2[1];
  if (v4)
  {
    v5 = *a2;
    v6 = *a1;
    do
    {
      v7 = *v6;
      v8 = *v5;
      if (v7 < v8)
        return 255;
      if (v8 < v7)
        return 1;
      ++v6;
      ++v5;
      v4 = (unsigned __int16 *)((char *)v4 - 1);
    }
    while (v4);
  }
  v9 = v2 >= v3;
  if (v2 == v3)
  {
    v10 = a1[3];
    v11 = a2[3];
    if (v11 >= v10)
      v12 = a1[3];
    else
      v12 = a2[3];
    if (v12)
    {
      v13 = a2[2];
      v14 = a1[2];
      do
      {
        v15 = *v14;
        v16 = *v13;
        if (v15 < v16)
          return 255;
        if (v16 < v15)
          return 1;
        ++v14;
        ++v13;
        v12 = (unsigned __int16 *)((char *)v12 - 1);
      }
      while (v12);
    }
    v9 = v10 >= v11;
    if (v10 == v11)
      return 0;
  }
  if (!v9)
    return 255;
  return 1;
}

uint64_t sub_20B89C14C(uint64_t a1)
{
  sub_20B8934AC(*(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_20B89C174(_QWORD *result, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  *result = a2;
  if (*a2)
  {
    v5 = 0;
    do
      v6 = v5 + 1;
    while (a2[++v5]);
  }
  else
  {
    v6 = 0;
  }
  result[1] = v6;
  result[2] = a3;
  if (*a3)
  {
    v8 = 0;
    do
      v9 = v8 + 1;
    while (a3[++v8]);
  }
  else
  {
    v9 = 0;
  }
  result[3] = v9;
  result[4] = a4;
  if (*a4)
  {
    v11 = 0;
    do
      v12 = v11 + 1;
    while (a4[++v11]);
  }
  else
  {
    v12 = 0;
  }
  result[5] = v12;
  result[6] = a5;
  if (*a5)
  {
    v14 = 0;
    do
      v15 = v14 + 1;
    while (a5[++v14]);
  }
  else
  {
    v15 = 0;
  }
  result[7] = v15;
  return result;
}

uint64_t sub_20B89C22C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 **v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;

  qword_25472B1B0 = 0;
  qword_25472B1A8 = 0;
  qword_25472B1A0 = (uint64_t)&qword_25472B1A8;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = result + (a2 << 6);
    v5 = &qword_25472B1A8;
    while (v5 != &qword_25472B1A8)
    {
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_25472B1A8;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      result = sub_20B89C3CC((unsigned __int16 **)v7 + 4, (unsigned __int16 **)v2);
      if ((result & 0x80) != 0)
        goto LABEL_19;
      if (v3)
      {
        v10 = v3;
        do
        {
          while (1)
          {
            v7 = (uint64_t *)v10;
            v11 = (unsigned __int16 **)(v10 + 32);
            if ((sub_20B89C3CC((unsigned __int16 **)v2, (unsigned __int16 **)(v10 + 32)) & 0x80) == 0)
              break;
            v10 = *v7;
            v16 = v7;
            if (!*v7)
              goto LABEL_23;
          }
          result = sub_20B89C3CC(v11, (unsigned __int16 **)v2);
          if ((result & 0x80) == 0)
            goto LABEL_26;
          v10 = v7[1];
        }
        while (v10);
        v16 = v7 + 1;
        goto LABEL_23;
      }
LABEL_22:
      v16 = &qword_25472B1A8;
      v7 = &qword_25472B1A8;
LABEL_23:
      v12 = operator new(0x60uLL);
      v13 = *(_OWORD *)v2;
      v14 = *(_OWORD *)(v2 + 16);
      v15 = *(_OWORD *)(v2 + 48);
      v12[4] = *(_OWORD *)(v2 + 32);
      v12[5] = v15;
      v12[2] = v13;
      v12[3] = v14;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v7;
      *v16 = (uint64_t)v12;
      if (*(_QWORD *)qword_25472B1A0)
      {
        qword_25472B1A0 = *(_QWORD *)qword_25472B1A0;
        v12 = (_OWORD *)*v16;
      }
      result = (uint64_t)sub_20B82973C((uint64_t *)qword_25472B1A8, (uint64_t *)v12);
      ++qword_25472B1B0;
LABEL_26:
      v2 += 64;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)qword_25472B1A0;
      v3 = qword_25472B1A8;
    }
    v7 = &qword_25472B1A8;
LABEL_19:
    if (v3)
    {
      v16 = v7 + 1;
      if (v7[1])
        goto LABEL_26;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_20B89C3B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8934AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89C3CC(unsigned __int16 **a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;

  v2 = a1[1];
  v3 = a2[1];
  if (v3 >= v2)
    v4 = a1[1];
  else
    v4 = a2[1];
  if (v4)
  {
    v5 = *a2;
    v6 = *a1;
    do
    {
      v7 = *v6;
      v8 = *v5;
      if (v7 < v8)
        return 255;
      if (v8 < v7)
        return 1;
      ++v6;
      ++v5;
      v4 = (unsigned __int16 *)((char *)v4 - 1);
    }
    while (v4);
  }
  v9 = v2 >= v3;
  if (v2 == v3)
  {
    v10 = a1[3];
    v11 = a2[3];
    if (v11 >= v10)
      v12 = a1[3];
    else
      v12 = a2[3];
    if (v12)
    {
      v13 = a2[2];
      v14 = a1[2];
      do
      {
        v15 = *v14;
        v16 = *v13;
        if (v15 < v16)
          return 255;
        if (v16 < v15)
          return 1;
        ++v14;
        ++v13;
        v12 = (unsigned __int16 *)((char *)v12 - 1);
      }
      while (v12);
    }
    v9 = v10 >= v11;
    if (v10 == v11)
    {
      v17 = a1[5];
      v18 = a2[5];
      if (v18 >= v17)
        v19 = a1[5];
      else
        v19 = a2[5];
      if (v19)
      {
        v20 = a2[4];
        v21 = a1[4];
        do
        {
          v22 = *v21;
          v23 = *v20;
          if (v22 < v23)
            return 255;
          if (v23 < v22)
            return 1;
          ++v21;
          ++v20;
          v19 = (unsigned __int16 *)((char *)v19 - 1);
        }
        while (v19);
      }
      v9 = v17 >= v18;
      if (v17 == v18)
      {
        v24 = a1[7];
        v25 = a2[7];
        if (v25 >= v24)
          v26 = a1[7];
        else
          v26 = a2[7];
        if (v26)
        {
          v27 = a2[6];
          v28 = a1[6];
          do
          {
            v29 = *v28;
            v30 = *v27;
            if (v29 < v30)
              return 255;
            if (v30 < v29)
              return 1;
            ++v28;
            ++v27;
            v26 = (unsigned __int16 *)((char *)v26 - 1);
          }
          while (v26);
        }
        v9 = v24 >= v25;
        if (v24 == v25)
          return 0;
      }
    }
  }
  if (!v9)
    return 255;
  return 1;
}

uint64_t sub_20B89C518(uint64_t a1)
{
  sub_20B8934AC(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *sub_20B89C540(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  _OWORD *v32;

  qword_25472B1C8 = 0;
  qword_25472B1C0 = 0;
  qword_25472B1B8 = (uint64_t)&qword_25472B1C0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[2 * a2];
    v5 = &qword_25472B1C0;
    while (1)
    {
      if (v5 == &qword_25472B1C0)
      {
        v7 = &qword_25472B1C0;
LABEL_19:
        if (v3)
        {
          v17 = v7 + 1;
          v18 = (uint64_t *)v7[1];
          goto LABEL_44;
        }
LABEL_42:
        v17 = &qword_25472B1C0;
        v18 = &qword_25472B1C0;
        goto LABEL_45;
      }
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_25472B1C0;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      v10 = v2[1];
      v11 = v7[5];
      if (v10 >= v11)
        v12 = v7[5];
      else
        v12 = v2[1];
      if (v12)
      {
        v13 = (unsigned __int16 *)v7[4];
        v14 = (unsigned __int16 *)*v2;
        do
        {
          v15 = *v13;
          v16 = *v14;
          if (v15 < v16)
            goto LABEL_19;
          if (v16 < v15)
            goto LABEL_21;
          ++v13;
          ++v14;
        }
        while (--v12);
      }
      if (v11 < v10)
        goto LABEL_19;
LABEL_21:
      if (!v3)
        goto LABEL_42;
      v19 = (uint64_t *)v3;
      v17 = &qword_25472B1C0;
      while (1)
      {
        while (1)
        {
          v18 = v19;
          v20 = (unsigned __int16 *)v19[4];
          v21 = v18[5];
          if (v21 >= v10)
            v22 = v2[1];
          else
            v22 = v18[5];
          if (v22)
          {
            v23 = v22;
            v24 = v20;
            v25 = (unsigned __int16 *)*v2;
            do
            {
              v26 = *v25;
              v27 = *v24;
              if (v26 < v27)
                goto LABEL_32;
              if (v27 < v26)
                goto LABEL_34;
              ++v25;
              ++v24;
            }
            while (--v23);
          }
          if (v21 <= v10)
            break;
LABEL_32:
          v19 = (uint64_t *)*v18;
          v17 = v18;
          if (!*v18)
            goto LABEL_45;
        }
LABEL_34:
        if (v22)
        {
          v28 = (unsigned __int16 *)*v2;
          do
          {
            v29 = *v20;
            v30 = *v28;
            if (v29 < v30)
              goto LABEL_40;
            if (v30 < v29)
              goto LABEL_43;
            ++v20;
            ++v28;
          }
          while (--v22);
        }
        if (v21 >= v10)
          break;
LABEL_40:
        v17 = v18 + 1;
        v19 = (uint64_t *)v18[1];
        if (!v19)
          goto LABEL_45;
      }
LABEL_43:
      v7 = v18;
LABEL_44:
      v31 = v18;
      v18 = v7;
      if (!v31)
      {
LABEL_45:
        v32 = operator new(0x30uLL);
        v32[2] = *(_OWORD *)v2;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v18;
        *v17 = (uint64_t)v32;
        if (*(_QWORD *)qword_25472B1B8)
        {
          qword_25472B1B8 = *(_QWORD *)qword_25472B1B8;
          v32 = (_OWORD *)*v17;
        }
        result = sub_20B82973C((uint64_t *)qword_25472B1C0, (uint64_t *)v32);
        ++qword_25472B1C8;
      }
      v2 += 2;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)qword_25472B1B8;
      v3 = qword_25472B1C0;
    }
  }
  return result;
}

void sub_20B89C774(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8934AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89C788(uint64_t a1, uint64_t a2)
{
  const __CFString *v3;

  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24C45FE18;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = (const __CFString *)sub_20B8A12EC(a2);
  *(_BYTE *)(a1 + 64) = CFStringCompare(v3, CFSTR("NumberValue.index"), 0) == kCFCompareEqualTo;
  return a1;
}

void sub_20B89C7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8A2CE0(v1);
  _Unwind_Resume(a1);
}

void sub_20B89C7FC(uint64_t a1)
{
  sub_20B8A2CE0(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B89C820(_QWORD *a1, void *__src, unint64_t a3, const void *a4)
{
  void *v8;
  const void *v9;
  CFStringRef v10;

  v8 = (void *)a1[4];
  if (!v8)
  {
    v8 = (void *)operator new[]();
    a1[4] = v8;
  }
  if (a3 <= 0x80)
  {
    a1[5] = a3;
    memcpy(v8, __src, 2 * a3);
    a1[3] = CFRetain(a4);
    v9 = (const void *)a1[7];
    if (v9)
      CFRelease(v9);
    v10 = CFStringCreateWithBytes(0, (const UInt8 *)__src, 2 * a3, 0x100u, 0);
    a1[6] = 0;
    a1[7] = v10;
  }
  return a3 < 0x81;
}

uint64_t sub_20B89C8D4()
{
  return 0;
}

uint64_t sub_20B89C8DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t v10;
  CFComparisonResult v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;

  result = 0;
  *a6 = 0;
  if (*(uint64_t *)(a1 + 48) > 0)
    return result;
  if (*(_BYTE *)(a1 + 64))
  {
    v10 = a3 - 4;
    *a4 = a3 - 4;
    a4[1] = 4;
    if (CFStringCompare(*(CFStringRef *)(a1 + 56), CFSTR("openCount"), 0) == kCFCompareEqualTo)
    {
      v12 = 0;
      goto LABEL_13;
    }
    if (CFStringCompare(*(CFStringRef *)(a1 + 56), CFSTR("initiallyOpenedCallCount"), 0) == kCFCompareEqualTo)
    {
      v12 = dword_25472B2B0;
      goto LABEL_13;
    }
    v11 = CFStringCompare(*(CFStringRef *)(a1 + 56), CFSTR("lastlyClosedCallCount"), 0);
    result = 0;
    if (v11 == kCFCompareEqualTo)
    {
      v12 = dword_25472B2B4;
LABEL_13:
      *(_DWORD *)((char *)a4 + v10) = v12;
      goto LABEL_14;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = a3 - 2 * v13;
    *a4 = v14 - 2;
    a4[1] = 2 * v13 + 2;
    *(_WORD *)((char *)a4 + v14 - 2) = 2 * v13;
    v15 = *(_QWORD *)(a1 + 40);
    if (v15 < 1)
    {
LABEL_14:
      result = 1;
      goto LABEL_15;
    }
    v16 = (_WORD *)((char *)a4 + v14);
    v17 = *(_QWORD *)(a1 + 32) - 2;
    result = 1;
    do
      *v16++ = *(_WORD *)(v17 + 2 * v15--);
    while (v15);
  }
LABEL_15:
  if (a5)
    *a5 = a4;
  *(_QWORD *)(a1 + 48) += result;
  return result;
}

uint64_t sub_20B89CA04()
{
  return 0;
}

uint64_t sub_20B89CA0C()
{
  return 0;
}

uint64_t sub_20B89CA14()
{
  return 0;
}

uint64_t sub_20B89CA1C()
{
  return 0;
}

uint64_t sub_20B89CA24()
{
  return 0;
}

BOOL sub_20B89CA2C(uint64_t a1)
{
  __CFWriteStream *v2;
  __CFWriteStream *v3;
  CFIndex v4;
  _BOOL8 v5;

  v2 = CFWriteStreamCreateWithFile(0, *(CFURLRef *)a1);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFWriteStreamOpen(v2))
  {
    v4 = CFPropertyListWriteToStream(*(CFPropertyListRef *)(a1 + 8), v3, kCFPropertyListXMLFormat_v1_0, 0);
    CFWriteStreamClose(v3);
    v5 = v4 > 0;
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v3);
  return v5;
}

uint64_t sub_20B89CAA8(uint64_t a1, int a2)
{
  if (a2)
    ++dword_25472B2B0;
  return 1;
}

void sub_20B89CAC4(uint64_t a1, int a2)
{
  if (a2)
    ++dword_25472B2B4;
}

uint64_t sub_20B89CADC()
{
  return 0;
}

uint64_t sub_20B89CAE4(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  _DWORD v10[2];

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v7 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 216))(v7), (_DWORD)result))
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 416))(v7) & 0x4000) == 0)
          return 0;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 416))(v7) & 0x8000) != 0)
          CFDictionaryAddValue(a2, CFSTR("pinyin10KeySyllableSelected"), (const void *)*MEMORY[0x24BDBD270]);
        v8 = *(_QWORD *)(a1 + 32);
        if (!v8)
          sub_20B80BB74();
        v10[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
        v10[1] = 4;
        v9 = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 56))(lpsrc);
        if (sub_20BA01784((uint64_t)v10, v9))
          CFDictionaryAddValue(a2, CFSTR("pinyin10KeyFlickInput"), (const void *)*MEMORY[0x24BDBD270]);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20B89CC2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B89CC7C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89CCDC(uint64_t a1, CFStringRef theString, const __CFString *a3, int a4)
{
  _QWORD *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  void *__p[2];
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;

  *(_QWORD *)a1 = &unk_24C460B90;
  v6 = (_QWORD *)sub_20B9125E4(a1, (uint64_t *)&off_24C45F2A8, theString, a3, a4);
  *v6 = off_24C460810;
  v6[15] = &off_24C460A58;
  *(_QWORD *)(a1 + 176) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 184) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 192) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  sub_20B8D09C0(a3, __p);
  if ((v15 & 0x80u) == 0)
    v7 = (unsigned __int16 *)__p;
  else
    v7 = (unsigned __int16 *)__p[0];
  if ((v15 & 0x80u) == 0)
    v8 = v15;
  else
    v8 = (unint64_t)__p[1];
  sub_20B9292C0(v7, v8, &v16);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  v9 = v16;
  v10 = v17;
  if (v16 != v17)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      LOWORD(__p[0]) = *v9;
      v12 = CFNumberCreate(v11, kCFNumberShortType, __p);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 176), v12);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 184), v12);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 192), v12);
      CFRelease(v12);
      ++v9;
    }
    while (v9 != v10);
    v9 = v16;
  }
  if (v9)
  {
    v17 = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_20B89CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t *v16;

  if (a14 < 0)
    operator delete(__p);
  sub_20B8D7210(v16, (uint64_t *)&off_24C45F2B0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B89CEA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C460810;
  *(_QWORD *)(a1 + 120) = &off_24C460A58;
  CFRelease(*(CFTypeRef *)(a1 + 176));
  CFRelease(*(CFTypeRef *)(a1 + 184));
  CFRelease(*(CFTypeRef *)(a1 + 192));
  return sub_20B8D7210((uint64_t *)a1, (uint64_t *)&off_24C45F2B0);
}

void sub_20B89CF04(uint64_t a1)
{
  sub_20B89CEA8(a1);
  JUMPOUT(0x20BD39CB0);
}

__CFString *sub_20B89CF28(uint64_t a1)
{
  __CFString *Mutable;
  CFIndex v3;
  const __CFNumber *ValueAtIndex;
  __int16 valuePtr;

  Mutable = CFStringCreateMutable(0, 0);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 192)) >= 1)
  {
    v3 = 0;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 192), v3);
      valuePtr = 0;
      if (CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr))
        CFStringAppendFormat(Mutable, 0, CFSTR("%d"), valuePtr);
      ++v3;
    }
    while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 192)));
  }
  return Mutable;
}

uint64_t sub_20B89CFD0(_QWORD *a1)
{
  return sub_20B89CFE0((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20B89CFE0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C460B90;
  sub_20B8D70E0(v2, (uint64_t *)&off_24C45F1F8, a1 - 120);
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_24C460270;
  *(_QWORD *)(v2 + 120) = &off_24C4604B8;
  *(_QWORD *)(v2 + 128) = &off_24C467C40;
  *(_OWORD *)(v2 + 152) = v3;
  *(_QWORD *)(v2 + 168) = *(_QWORD *)(a1 + 48);
  return v2;
}

void sub_20B89D078(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B89D09C(uint64_t *a1)
{
  return sub_20B8D7210(a1, (uint64_t *)&off_24C45F1F8);
}

void sub_20B89D0AC(uint64_t *a1)
{
  sub_20B8D7210(a1, (uint64_t *)&off_24C45F1F8);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89D0DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_20B89D0E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B89D0F0()
{
  return 0;
}

unint64_t sub_20B89D0F8(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3);
}

uint64_t sub_20B89D114(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B89D11C()
{
  return 1;
}

uint64_t sub_20B89D124(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_20B89D12C()
{
  return 1;
}

uint64_t sub_20B89D134(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_20B89D13C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_20B89D144(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_20B89D14C()
{
  return 0;
}

uint64_t sub_20B89D154(uint64_t a1)
{
  const __CFString *v1;

  v1 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return sub_20B8D345C(v1);
}

uint64_t sub_20B89D170()
{
  return 0;
}

uint64_t sub_20B89D178()
{
  return 0;
}

uint64_t sub_20B89D180(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_20B89D188()
{
  return 0;
}

uint64_t sub_20B89D190()
{
  return 0;
}

uint64_t sub_20B89D198()
{
  return 1;
}

uint64_t sub_20B89D1A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

uint64_t sub_20B89D1A8()
{
  return 0;
}

uint64_t sub_20B89D1B0()
{
  return 0;
}

uint64_t sub_20B89D1B8()
{
  return 0;
}

uint64_t sub_20B89D1C0(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) >> 20) & 1;
}

uint64_t sub_20B89D1E0()
{
  return 0;
}

uint64_t sub_20B89D1E8(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_20B89D1F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
}

uint64_t sub_20B89D1FC()
{
  return 0;
}

uint64_t sub_20B89D204()
{
  return 0;
}

uint64_t sub_20B89D20C()
{
  return 0;
}

uint64_t sub_20B89D214()
{
  return 0;
}

uint64_t sub_20B89D21C()
{
  return 0;
}

uint64_t sub_20B89D224()
{
  return -1;
}

uint64_t sub_20B89D22C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t sub_20B89D234(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

double sub_20B89D23C(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

uint64_t sub_20B89D244(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  return result;
}

uint64_t sub_20B89D24C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_20B89D254(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_20B89D25C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_20B89D268(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_20B89D274()
{
  return 0;
}

uint64_t sub_20B89D27C()
{
  return 0;
}

uint64_t sub_20B89D284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t sub_20B89D28C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_20B89D294(uint64_t result, char a2)
{
  *(_BYTE *)(result + 89) = a2;
  return result;
}

uint64_t sub_20B89D29C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 91) = a2;
  return result;
}

uint64_t sub_20B89D2A8()
{
  return 1;
}

uint64_t sub_20B89D2B0()
{
  return 0;
}

uint64_t sub_20B89D2B8()
{
  return 0;
}

uint64_t sub_20B89D2C8()
{
  return 0;
}

uint64_t sub_20B89D2D0()
{
  return 0;
}

uint64_t sub_20B89D2D8()
{
  return 0;
}

uint64_t sub_20B89D2E0()
{
  return 0;
}

uint64_t *sub_20B89D2F0(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B89D62C(v2);
  *a1 = v2;
  return a1;
}

void sub_20B89D334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A0C40A1EC6FE4);
  _Unwind_Resume(a1);
}

CFIndex sub_20B89D358(CFIndex result, CFArrayRef theArray, CFIndex a3)
{
  uint64_t v3;
  const char *v6;
  const void *ValueAtIndex;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  if ((a3 & 0x8000000000000000) == 0)
  {
    v3 = result;
    if (*(_BYTE *)(result + 24))
    {
      result = CFArrayGetCount(theArray);
      if (result >= a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
        v8 = *(id *)(v3 + 8);
        if (!v8)
        {
          v8 = objc_alloc_init(MEMORY[0x24BDBCED8]);
          *(_QWORD *)(v3 + 8) = v8;
        }
        v9 = (void *)objc_msgSend_objectForKey_(v8, v6, (uint64_t)ValueAtIndex);
        v12 = (void *)MEMORY[0x24BDD16E0];
        if (v9)
        {
          v13 = objc_msgSend_integerValue(v9, v10, v11) + 1;
          v15 = objc_msgSend_numberWithInteger_(v12, v14, v13);
        }
        else
        {
          v15 = objc_msgSend_numberWithInteger_(MEMORY[0x24BDD16E0], v10, 1);
        }
        return MEMORY[0x24BEDD108](*(_QWORD *)(v3 + 8), sel_setObject_forKey_, v15);
      }
    }
  }
  return result;
}

uint64_t sub_20B89D410(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 24))
  {
    v3 = result;
    if (objc_msgSend_count(*(void **)(result + 8), a2, a3))
    {
      v10 = (void *)objc_msgSend_keysSortedByValueUsingComparator_(*(void **)(v3 + 8), v4, (uint64_t)&unk_24C46CD70);
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v31, v35, 16);
      if (v12)
      {
        v14 = v12;
        v15 = 0;
        v16 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v32 != v16)
              objc_enumerationMutation(v10);
            v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
            v19 = (void *)objc_msgSend_objectForKey_(*(void **)(v3 + 8), v13, (uint64_t)v18);
            v15 += objc_msgSend_integerValue(v19, v20, v21);
            v22 = *(_QWORD *)v3;
            v25 = objc_msgSend_UTF8String(v18, v23, v24);
            sub_20B954D48(v22, 0x200000u, (uint64_t)"%s : %ld\n", v26, v27, v28, v29, v30, v25);
          }
          v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v31, v35, 16);
        }
        while (v14);
      }
    }
    return sub_20B954D48(*(_QWORD *)v3, 0x200000u, (uint64_t)"Token count: %ld, UNK count = %ld\n", v5, v6, v7, v8, v9, *(_QWORD *)(v3 + 16));
  }
  return result;
}

void sub_20B89D588(uint64_t a1, uint64_t a2, char a3, int a4)
{
  const char *v6;
  uint64_t v7;
  __CFString *v8;
  __CFString **v9;
  uint64_t v10;
  char v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 24))
  {
    v8 = sub_20B9D97DC(a2, a3);
    v9 = &off_2547285F8;
    v10 = *(_QWORD *)a1;
    if (!a4)
      v9 = &off_254728600;
    v11 = objc_msgSend_UTF8String(*v9, v6, v7);
    objc_msgSend_UTF8String(v8, v12, v13);
    sub_20B954DEC(v10, "%s:%s\n", v14, v15, v16, v17, v18, v19, v11);
    CFRelease(v8);
  }
}

uint64_t sub_20B89D62C(uint64_t a1)
{
  _BYTE *v2;
  BOOL v3;

  v2 = sub_20B9547EC();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v2;
  v3 = *v2 && (v2[10] & 0x20) != 0 || *((_DWORD *)v2 + 1) < 8u;
  *(_BYTE *)(a1 + 24) = v3;
  return a1;
}

uint64_t sub_20B89D680(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v5 = objc_msgSend_integerValue(a2, (const char *)a2, (uint64_t)a3);
  if (v5 > objc_msgSend_integerValue(a3, v6, v7))
    return -1;
  v11 = objc_msgSend_integerValue(a2, v8, v9);
  return v11 < objc_msgSend_integerValue(a3, v12, v13);
}

void sub_20B89D6E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    JUMPOUT(0x20BD39CB0);
  }
}

UInt8 *sub_20B89D734(const __CFString *a1, CFStringEncoding a2, unint64_t *a3)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v8;
  CFIndex usedBufLen;
  CFRange v11;

  if (a1)
  {
    Length = CFStringGetLength(a1);
    usedBufLen = 0;
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, a2);
    v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0xFCECAB9AuLL);
    v11.location = 0;
    v11.length = Length;
    CFStringGetBytes(a1, v11, a2, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen);
    if (a3)
      *a3 = (unint64_t)usedBufLen >> 1;
  }
  else
  {
    v8 = 0;
    if (a3)
      *a3 = 0;
  }
  return v8;
}

char *sub_20B89D7EC(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFString *v2;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v5;

  v1 = CFURLCopyAbsoluteURL(a1);
  v2 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  CFRelease(v1);
  if (!v2)
    return 0;
  Length = CFStringGetLength(v2);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v5 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x31523115uLL);
  LODWORD(MaximumSizeForEncoding) = CFStringGetFileSystemRepresentation(v2, v5, MaximumSizeForEncoding);
  CFRelease(v2);
  if (!(_DWORD)MaximumSizeForEncoding)
  {
    free(v5);
    return 0;
  }
  return v5;
}

CFURLRef sub_20B89D888(CFURLRef url, CFStringRef pathComponent)
{
  if (pathComponent)
    return CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 0);
  else
    return (CFURLRef)CFRetain(url);
}

CFBundleRef sub_20B89D8A8(const __CFURL *a1)
{
  CFStringRef PathComponent;
  char v3;
  const __CFString *v4;
  CFComparisonResult v5;
  const __CFURL *v6;
  CFBundleRef v7;

  PathComponent = CFURLCopyLastPathComponent(a1);
  if (CFStringCompare(PathComponent, CFSTR("/"), 0) == kCFCompareEqualTo)
  {
    v7 = 0;
LABEL_10:
    CFRelease(PathComponent);
    return v7;
  }
  v3 = 0;
  v4 = PathComponent;
  PathComponent = (CFStringRef)a1;
  while (1)
  {
    v5 = CFStringCompare(v4, CFSTR("Contents"), 0);
    CFRelease(v4);
    v6 = CFURLCreateCopyDeletingLastPathComponent(0, (CFURLRef)PathComponent);
    if (v5 == kCFCompareEqualTo)
      break;
    if ((v3 & 1) != 0)
      CFRelease(PathComponent);
    v4 = CFURLCopyLastPathComponent(v6);
    v3 = 1;
    PathComponent = (CFStringRef)v6;
    if (CFStringCompare(v4, CFSTR("/"), 0) == kCFCompareEqualTo)
    {
      CFRelease(v4);
      v7 = 0;
      PathComponent = (CFStringRef)v6;
      goto LABEL_10;
    }
  }
  v7 = CFBundleCreate(0, v6);
  CFRelease(v6);
  if ((v3 & 1) != 0)
    goto LABEL_10;
  return v7;
}

DIR *sub_20B89D9B8(DIR *result)
{
  const std::__fs::filesystem::path *v1;
  std::error_code *v2;
  DIR *v3;
  size_t v4;
  char *v5;
  size_t v6;
  char *v7;
  dirent *v8;
  const char *d_name;
  stat v10;

  if (result)
  {
    v1 = (const std::__fs::filesystem::path *)result;
    memset(&v10, 0, sizeof(v10));
    if (lstat((const char *)result, &v10) < 0)
    {
      return 0;
    }
    else if ((v10.st_mode & 0xF000) == 0x4000)
    {
      result = opendir((const char *)v1);
      if (result)
      {
        v3 = result;
        v4 = strlen((const char *)v1) + 256;
        v5 = (char *)malloc_type_malloc(v4, 0x227CDEFCuLL);
        strlcpy(v5, (const char *)v1, v4);
        v6 = strlen((const char *)v1);
        *(_WORD *)&v5[v6] = 47;
        v7 = &v5[v6 + 1];
        while (1)
        {
          v8 = readdir(v3);
          if (!v8)
            break;
          d_name = v8->d_name;
          if (strcmp(v8->d_name, "."))
          {
            if (strcmp(d_name, ".."))
            {
              strlcpy(v7, d_name, 0x100uLL);
              if (!sub_20B89D9B8(v5))
              {
                free(v5);
                closedir(v3);
                return 0;
              }
            }
          }
        }
        free(v5);
        closedir(v3);
        return (DIR *)(rmdir((const char *)v1) >= 0);
      }
    }
    else
    {
      return (DIR *)!remove(v1, v2);
    }
  }
  return result;
}

void (*sub_20B89DB24(int a1, uint64_t a2, int a3, _QWORD *a4))(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void (*result)(uint64_t, uint64_t, _BYTE *);
  void (*v6)(uint64_t, uint64_t, _BYTE *);
  void (*v7)(uint64_t, uint64_t, _BYTE *);

  result = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DBC0;
  switch(a1)
  {
    case 0:
      if (a4)
        *a4 = a2;
      return sub_20B89DBB8;
    case 1:
      return result;
    case 2:
      v6 = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DBD0;
      v7 = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DBE8;
      goto LABEL_9;
    case 4:
      v6 = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DBF8;
      v7 = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DC0C;
      goto LABEL_9;
    case 8:
      v6 = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DC1C;
      v7 = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DC30;
LABEL_9:
      if (a3)
        result = v6;
      else
        result = v7;
      break;
    default:
      result = (void (*)(uint64_t, uint64_t, _BYTE *))sub_20B89DC40;
      break;
  }
  return result;
}

void sub_20B89DBB8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
}

uint64_t sub_20B89DBC0(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  *a3 = 1;
  return *a2;
}

uint64_t sub_20B89DBD0(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = 2;
  return bswap32(*a2) >> 16;
}

uint64_t sub_20B89DBE8(uint64_t a1, unsigned __int16 *a2, _BYTE *a3)
{
  *a3 = 2;
  return *a2;
}

uint64_t sub_20B89DBF8(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  *a3 = 4;
  return bswap32(*a2);
}

uint64_t sub_20B89DC0C(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  *a3 = 4;
  return *a2;
}

unint64_t sub_20B89DC1C(uint64_t a1, unint64_t *a2, _BYTE *a3)
{
  *a3 = 8;
  return bswap64(*a2);
}

uint64_t sub_20B89DC30(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 8;
  return *(_QWORD *)a2;
}

uint64_t sub_20B89DC40(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  return 0;
}

_BYTE *sub_20B89DC4C(const void *a1, size_t a2, unsigned int a3, int a4, size_t *a5)
{
  size_t v10;
  _BYTE *v11;

  if (a3)
  {
    v10 = a2 + a3;
    v11 = malloc_type_malloc(v10, 0xADE06197uLL);
    memcpy(&v11[a3], a1, a2);
    *a5 = v10;
    sub_20B89DCE4(v11, a2, a3, a4);
    return v11;
  }
  else
  {
    *a5 = a2;
  }
  return a1;
}

_BYTE *sub_20B89DCE4(_BYTE *result, unint64_t a2, int a3, int a4)
{
  switch(a3)
  {
    case 1:
      *result = a2;
      break;
    case 2:
      if (a4)
        *(_WORD *)result = bswap32(a2) >> 16;
      else
        *(_WORD *)result = a2;
      break;
    case 4:
      if (a4)
        *(_DWORD *)result = bswap32(a2);
      else
        *(_DWORD *)result = a2;
      break;
    case 8:
      if (a4)
        *(_QWORD *)result = bswap64(a2);
      else
        *(_QWORD *)result = a2;
      break;
    default:
      return result;
  }
  return result;
}

void sub_20B89DD5C(__CFData *a1, const __CFString *cf, int a3, int a4, int a5)
{
  CFTypeID v10;
  unsigned int v11;
  unsigned int v12;
  __CFData *v13;
  CFIndex v14;
  CFTypeID v15;
  CFIndex Length;
  uint64_t v17;
  CFStringEncoding v18;
  UInt8 *v19;
  CFTypeID v20;
  CFIndex v21;
  const UInt8 *BytePtr;
  unint64_t v23;
  unint64_t v24;
  double valuePtr;
  CFRange v26;

  v10 = CFGetTypeID(cf);
  if (v10 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      if (a3 == 8)
      {
        valuePtr = 0.0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberFloat64Type, &valuePtr);
        v23 = (unint64_t)valuePtr;
        v24 = bswap64((unint64_t)valuePtr);
        if (a5)
          v23 = v24;
        valuePtr = (double)v23;
        v13 = a1;
        v14 = 8;
      }
      else
      {
        if (a3 != 4)
          return;
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)cf, kCFNumberFloat32Type, &valuePtr);
        v11 = *(float *)&valuePtr;
        v12 = bswap32(*(float *)&valuePtr);
        if (a5)
          v11 = v12;
        *(float *)&valuePtr = (float)v11;
        v13 = a1;
        v14 = 4;
      }
      CFDataAppendBytes(v13, (const UInt8 *)&valuePtr, v14);
    }
    else
    {
      valuePtr = 0.0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
      sub_20B89DFAC(a1, *(unint64_t *)&valuePtr, a3, a5);
    }
  }
  else
  {
    v15 = CFGetTypeID(cf);
    if (v15 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(cf);
      v17 = 2 * Length;
      valuePtr = 0.0;
      if (!a4)
        sub_20B89DFAC(a1, v17, a3, a5);
      if (a5)
        v18 = 268435712;
      else
        v18 = 335544576;
      v19 = (UInt8 *)malloc_type_malloc(v17, 0x3847585DuLL);
      v26.location = 0;
      v26.length = Length;
      CFStringGetBytes(cf, v26, v18, 0, 0, v19, v17, (CFIndex *)&valuePtr);
      CFDataAppendBytes(a1, v19, *(CFIndex *)&valuePtr);
      free(v19);
    }
    else
    {
      v20 = CFGetTypeID(cf);
      if (v20 == CFDataGetTypeID())
      {
        v21 = CFDataGetLength((CFDataRef)cf);
        if (!a4)
          sub_20B89DFAC(a1, v21, a3, a5);
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        CFDataAppendBytes(a1, BytePtr, v21);
      }
    }
  }
}

void sub_20B89DFAC(__CFData *a1, unint64_t a2, int a3, int a4)
{
  const UInt8 *v4;
  CFIndex v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  __int16 v11;
  char v12;

  switch(a3)
  {
    case 1:
      v12 = a2;
      v4 = (const UInt8 *)&v12;
      v5 = 1;
      goto LABEL_12;
    case 2:
      v6 = bswap32(a2) >> 16;
      if (!a4)
        LOWORD(v6) = a2;
      v11 = v6;
      v4 = (const UInt8 *)&v11;
      v5 = 2;
      goto LABEL_12;
    case 4:
      v7 = bswap32(a2);
      if (!a4)
        v7 = a2;
      v10 = v7;
      v4 = (const UInt8 *)&v10;
      v5 = 4;
      goto LABEL_12;
    case 8:
      v8 = bswap64(a2);
      if (!a4)
        v8 = a2;
      v9 = v8;
      v4 = (const UInt8 *)&v9;
      v5 = 8;
LABEL_12:
      CFDataAppendBytes(a1, v4, v5);
      break;
    default:
      return;
  }
}

void sub_20B89E050(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  __int16 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  _WORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int16 v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  _QWORD v47[2];
  _QWORD v48[2];

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v5 < 2)
    v6 = 0;
  else
    v6 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 352))(a1, v5 - 2);
  *(_WORD *)(a1 + 256) = v6;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 3) - 1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 3) == 1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    LODWORD(v8) = 0;
    LODWORD(v9) = 0;
    v10 = (unsigned __int16 *)(*v4 + 28);
    do
    {
      v9 = v9 + *v10;
      v8 = v8 + *(v10 - 2);
      v10 += 20;
      --v7;
    }
    while (v7);
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
  v13 = v12 - v8;
  if (!v11)
    v13 = 0;
  v48[0] = v11 + 2 * v8;
  v48[1] = v13;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
  v16 = v15 - v9;
  if (!v14)
    v16 = 0;
  v47[0] = v14 + 2 * v9;
  v47[1] = v16;
  v17 = (void **)(a1 + 288);
  (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v47, v48, 0, a1 + 264, a1 + 288);
  v18 = *(char **)(a1 + 264);
  v19 = *(char **)(a1 + 272);
  v20 = v19 - v18;
  if (v19 == v18)
  {
    v21 = *(_WORD *)(*v4 + 40 * v5 - 8);
    v22 = *(_QWORD *)(a1 + 280);
    if ((unint64_t)v19 >= v22)
    {
      if (v20 <= -3)
        sub_20B80CDD8();
      v24 = v20 >> 1;
      v25 = v22 - (_QWORD)v18;
      if (v25 <= (v20 >> 1) + 1)
        v26 = v24 + 1;
      else
        v26 = v25;
      if (v25 >= 0x7FFFFFFFFFFFFFFELL)
        v27 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v28 = (char *)sub_20B80FD48(a1 + 280, v27);
      v29 = *(char **)(a1 + 264);
      v30 = *(char **)(a1 + 272);
      v31 = &v28[2 * v24];
      v33 = &v28[2 * v32];
      *(_WORD *)v31 = v21;
      v23 = v31 + 2;
      while (v30 != v29)
      {
        v34 = *((_WORD *)v30 - 1);
        v30 -= 2;
        *((_WORD *)v31 - 1) = v34;
        v31 -= 2;
      }
      *(_QWORD *)(a1 + 264) = v31;
      *(_QWORD *)(a1 + 272) = v23;
      *(_QWORD *)(a1 + 280) = v33;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_WORD *)v19 = v21;
      v23 = v19 + 2;
    }
    *(_QWORD *)(a1 + 272) = v23;
    v36 = *(char **)(a1 + 296);
    v35 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v36 >= v35)
    {
      v38 = (char *)*v17;
      v39 = (v36 - (_BYTE *)*v17) >> 2;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62)
        sub_20B80CDD8();
      v41 = v35 - (_QWORD)v38;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (char *)sub_20B8127BC(a1 + 304, v42);
        v38 = *(char **)(a1 + 288);
        v36 = *(char **)(a1 + 296);
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[4 * v39];
      v45 = &v43[4 * v42];
      *(_DWORD *)v44 = 0;
      v37 = v44 + 4;
      while (v36 != v38)
      {
        v46 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      *(_QWORD *)(a1 + 288) = v44;
      *(_QWORD *)(a1 + 296) = v37;
      *(_QWORD *)(a1 + 304) = v45;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_DWORD *)v36 = 0;
      v37 = v36 + 4;
    }
    *(_QWORD *)(a1 + 296) = v37;
  }
}

uint64_t sub_20B89E320(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 32)) = a2[5];
  *(_QWORD *)(a1 + 24) = &off_24C463300;
  sub_20B88AE28((const void **)(a1 + 248), 0);
  sub_20B88B74C((const void **)(a1 + 240), 0);
  sub_20B87AA1C((const void **)(a1 + 232), 0);
  v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(_QWORD *)(a1 + 144) = v4;
    operator delete(v4);
  }
  sub_20B87E150((const void **)(a1 + 128), 0);
  sub_20B87E150((const void **)(a1 + 120), 0);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_20B87E150((const void **)(a1 + 88), 0);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_20B87E150((const void **)(a1 + 56), 0);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

_QWORD *sub_20B89E3F8(_QWORD *a1, void *__src, unint64_t a3, void *a4, unint64_t a5, void *a6, unint64_t a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14)
{
  uint64_t v15;

  *a1 = &unk_24C460B90;
  v15 = sub_20B915EFC((uint64_t)a1, (uint64_t *)&off_24C45F318, __src, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, SHIDWORD(a12), a13);
  *(_QWORD *)v15 = off_24C462C20;
  *(_QWORD *)(v15 + 24) = &unk_24C462E78;
  *(_WORD *)(v15 + 256) = 0;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  sub_20B89E050(v15, a14);
  return a1;
}

void sub_20B89E4B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[36];
  if (v4)
  {
    v1[37] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[34] = v5;
    operator delete(v5);
  }
  sub_20B89E320((uint64_t)v1, (uint64_t *)&off_24C45F318);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89E4F0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B916564(v2, a1);
  return v2;
}

void sub_20B89E534(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F3C4074548AAFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89E558(uint64_t a1)
{
  return sub_20B89E320(a1, (uint64_t *)&off_24C45F350);
}

void sub_20B89E564(uint64_t a1)
{
  sub_20B89E320(a1, (uint64_t *)&off_24C45F350);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89E590(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B89E598(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B89E5A4()
{
  return 0;
}

unint64_t sub_20B89E5AC(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3);
}

uint64_t sub_20B89E5C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_20B89E5D0()
{
  return 1;
}

uint64_t sub_20B89E5D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_20B89E5E0()
{
  return 0;
}

uint64_t sub_20B89E5E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 204);
}

uint64_t sub_20B89E5F0()
{
  return 1;
}

uint64_t sub_20B89E5F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t sub_20B89E600()
{
  return 0;
}

uint64_t sub_20B89E608(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232);
}

uint64_t sub_20B89E610(uint64_t a1)
{
  int v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  int v8;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v3 = (char *)(a1 + 32);
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 55);
  if (v2 == 89)
  {
    if ((v4 & 0x80) != 0)
    {
      v3 = *(char **)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
    }
    return sub_20B8D25B4(v3, 2 * (int)v4);
  }
  else
  {
    if ((v4 & 0x80) != 0)
    {
      v3 = *(char **)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 40);
    }
    v6 = (2 * v4);
    if ((_DWORD)v6)
    {
      v7 = 0;
      do
      {
        v8 = *v3++;
        v7 = (1025 * (v7 + v8)) ^ ((1025 * (v7 + v8)) >> 6);
        --v6;
      }
      while (v6);
      LODWORD(v6) = 9 * v7;
    }
    return 32769 * (v6 ^ (v6 >> 11));
  }
}

uint64_t sub_20B89E69C(_QWORD *a1)
{
  uint64_t result;
  const __CFString *v3;

  if (a1[17] == a1[18])
    return 0;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (result)
  {
    if (*(_DWORD *)a1[17] == 7)
    {
      return 1;
    }
    else
    {
      v3 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
      return sub_20B896388(v3);
    }
  }
  return result;
}

uint64_t sub_20B89E70C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 218);
}

const __CFString *sub_20B89E714()
{
  return &stru_24C4B3660;
}

uint64_t sub_20B89E720()
{
  return 1;
}

uint64_t sub_20B89E728(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

BOOL sub_20B89E730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 136);
  v1 = *(_QWORD *)(a1 + 144);
  if (v2 == v1)
    return 1;
  v3 = v2 + 40;
  do
  {
    v4 = *(_DWORD *)(v3 - 28);
    result = v4 != 0;
    if (v4)
      v6 = v3 == v1;
    else
      v6 = 1;
    v3 += 40;
  }
  while (!v6);
  return result;
}

BOOL sub_20B89E764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 136);
  v1 = *(_QWORD *)(a1 + 144);
  if (v2 == v1)
    return 0;
  v3 = v2 + 40;
  do
  {
    v4 = *(_DWORD *)(v3 - 40);
    result = v4 == 8;
    v6 = v4 == 8 || v3 == v1;
    v3 += 40;
  }
  while (!v6);
  return result;
}

uint64_t sub_20B89E798(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_20B89E7A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t sub_20B89E7A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

double sub_20B89E7B0(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

uint64_t sub_20B89E7B8(uint64_t result, double a2)
{
  *(double *)(result + 176) = a2;
  return result;
}

uint64_t sub_20B89E7C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_20B89E7C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_20B89E7D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_20B89E7D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t sub_20B89E7E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t sub_20B89E7EC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 216) = a2;
  return result;
}

uint64_t sub_20B89E7F4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 218) = a2;
  return result;
}

uint64_t sub_20B89E7FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  v1 = a1 + 32;
  v2 = v3;
  if (*(char *)(v1 + 23) >= 0)
    return v1;
  return v2;
}

uint64_t sub_20B89E820(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    return *(_QWORD *)(a1 + 96);
  else
    return a1 + 96;
}

uint64_t sub_20B89E84C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 136) + 40 * a2;
}

uint64_t sub_20B89E85C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

void sub_20B89E86C(_QWORD *a1)
{
  sub_20B89E8A0(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89E890(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 256);
}

uint64_t sub_20B89E898(uint64_t a1)
{
  return sub_20B89E4F0(a1 - 24);
}

uint64_t sub_20B89E8A0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_24C462C20;
  a1[3] = &unk_24C462E78;
  v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[33];
  if (v3)
  {
    a1[34] = v3;
    operator delete(v3);
  }
  return sub_20B89E320((uint64_t)a1, (uint64_t *)&off_24C45F318);
}

uint64_t sub_20B89E8FC(uint64_t a1, CFStringRef theString, const __CFURL *a3)
{
  std::string *p_str;
  std::string::size_type size;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string __str;
  stat v15;

  p_str = &__str;
  sub_20B969780(theString, a3, CFSTR("zip_code.dat"), &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v6 = *(unsigned __int8 *)(a1 + 79);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 64);
  if (size == v6)
  {
    if (v7 >= 0)
      v8 = (unsigned __int8 *)(a1 + 56);
    else
      v8 = *(unsigned __int8 **)(a1 + 56);
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!memcmp(__str.__r_.__value_.__l.__data_, v8, __str.__r_.__value_.__l.__size_))
        goto LABEL_19;
      goto LABEL_18;
    }
    if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
      goto LABEL_19;
    v9 = &__str;
    v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    while (v9->__r_.__value_.__s.__data_[0] == *v8)
    {
      v9 = (std::string *)((char *)v9 + 1);
      ++v8;
      if (!--v10)
        goto LABEL_19;
    }
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_18:
  if (!stat((const char *)p_str, &v15))
  {
    std::string::operator=((std::string *)(a1 + 56), &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &__str;
    else
      v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
    sub_20B806380((_QWORD **)a1, (char *)v12);
    v11 = 1;
    goto LABEL_24;
  }
LABEL_19:
  v11 = 0;
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v11;
}

void sub_20B89EA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B89EA54(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v3;
  int v7;
  size_t v8;
  const void *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  UniChar *v13;
  uint64_t v14;
  UniChar *v15;
  CFIndex v16;
  char v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (const void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 < 0)
    v3 = a2[1];
  if (v3 == (const void *)7)
  {
    sub_20B89EC5C(&v18, 8uLL);
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v8)
    {
      if (v7 >= 0)
        v9 = a2;
      else
        v9 = *a2;
      memmove(v18, v9, v8);
    }
    *(v19 - 1) = 32;
    sub_20B7F8DC0((_QWORD *)(a1 + 8));
    sub_20B7F8BDC((_QWORD *)(a1 + 8), (uint64_t)v18, v19 - v18);
    v17 = 0;
    do
    {
      if (!sub_20B8068B4((uint64_t *)a1, a1 + 8))
        break;
      v10 = (char *)(v18 - v19 + *(unsigned int *)(a1 + 40));
      MEMORY[0x24BDAC7A8]();
      v12 = (char *)&v14 - v11;
      if (v10)
        memmove(v12, (const void *)(*(_QWORD *)(a1 + 32) + v19 - v18), (size_t)v10);
      v10[(_QWORD)v12] = 0;
      v16 = 0;
      sub_20B8D054C(v12, &v16, &v15);
      v13 = v15;
      (*(void (**)(uint64_t, UniChar *, CFIndex, char *))(a3 + 16))(a3, v15, v16, &v17);
      if (v13)
        MEMORY[0x20BD39C80](v13, 0x1000C80BDFB0063);
    }
    while (!v17);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
  }
}

void sub_20B89EC0C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B89EC5C(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B80EEA8(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20B89ECB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_20B89ECCC(uint64_t a1, const __CFString *a2)
{
  const void *Value;
  pthread_rwlock_t *v4;
  _QWORD *v5;

  if (!a2)
    return 0;
  if ((byte_25472C898 & 1) == 0)
    pthread_once(&stru_254728608, (void (*)(void))sub_20B89F044);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(qword_25472C890 + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_25472C890 + 8), a2);
  pthread_rwlock_unlock((pthread_rwlock_t *)(qword_25472C890 + 16));
  if (!Value)
  {
    v4 = (pthread_rwlock_t *)(qword_25472C890 + 16);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_25472C890 + 16));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_25472C890 + 8), a2);
    if (!Value)
    {
      v5 = (_QWORD *)sub_20B89EDB8(0, a2);
      Value = v5;
      if (v5)
        sub_20B89EFC0((uint64_t)v5, v5);
    }
    pthread_rwlock_unlock(v4);
  }
  return Value;
}

void sub_20B89EDA0(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89EDB8(int a1, CFStringRef theString1)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (**v5)();

  if (!theString1)
    return 0;
  if (CFStringCompare(theString1, CFSTR("com.apple.TrieAccessMethod"), 0) == kCFCompareEqualTo)
  {
    v3 = operator new();
    *(_QWORD *)v3 = off_24C45F458;
    v4 = CFRetain(theString1);
    v5 = &off_24C45FCC8;
    goto LABEL_9;
  }
  if (CFStringCompare(theString1, CFSTR("com.apple.HeapAccessMethod"), 0) == kCFCompareEqualTo)
  {
    v3 = operator new();
    *(_QWORD *)v3 = off_24C45F458;
    v4 = CFRetain(theString1);
    v5 = &off_24C45FC20;
    goto LABEL_9;
  }
  v3 = 0;
  if (CFStringCompare(theString1, CFSTR("com.apple.TestAccessMethod-Inspector"), 0) == kCFCompareEqualTo)
  {
    v3 = operator new();
    *(_QWORD *)v3 = off_24C45F458;
    v4 = CFRetain(theString1);
    v5 = &off_24C45FD70;
LABEL_9:
    *(_QWORD *)v3 = v5;
    *(_QWORD *)(v3 + 8) = v4;
    *(_DWORD *)(v3 + 168) = 1;
    *(_QWORD *)(v3 + 72) = sub_20B8A0CB8;
    *(_QWORD *)(v3 + 80) = sub_20B8A0CC8;
    *(_QWORD *)(v3 + 88) = sub_20B8A0CE8;
    *(_QWORD *)(v3 + 96) = sub_20B8A0CF8;
    *(_QWORD *)(v3 + 104) = sub_20B8A0D08;
    *(_QWORD *)(v3 + 112) = sub_20B8A0D28;
    *(_QWORD *)(v3 + 120) = sub_20B8A0D38;
    *(_QWORD *)(v3 + 128) = sub_20B8A0D48;
    *(_QWORD *)(v3 + 136) = sub_20B8A0D68;
    *(_QWORD *)(v3 + 144) = sub_20B8A0D88;
    *(_QWORD *)(v3 + 152) = sub_20B8A0DA8;
    *(_QWORD *)(v3 + 160) = sub_20B8A0DC8;
    *(_QWORD *)(v3 + 40) = sub_20B8A0DE8;
    *(_QWORD *)(v3 + 48) = sub_20B8A0E08;
    *(_QWORD *)(v3 + 56) = sub_20B8A0E18;
    *(_QWORD *)(v3 + 64) = sub_20B8A0CA8;
    *(_QWORD *)(v3 + 16) = v3 + 32;
    *(_QWORD *)(v3 + 24) = v3;
  }
  return v3;
}

void sub_20B89EF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C404BFD5011);
  _Unwind_Resume(a1);
}

void sub_20B89EFC0(uint64_t a1, _QWORD *a2)
{
  __CFDictionary *v3;
  const void *v4;

  if ((byte_25472C898 & 1) == 0)
    pthread_once(&stru_254728608, (void (*)(void))sub_20B89F044);
  if (a2)
  {
    v3 = *(__CFDictionary **)(qword_25472C890 + 8);
    v4 = (const void *)a2[1];
    if (!CFDictionaryContainsKey(v3, v4))
      CFDictionarySetValue(v3, v4, a2);
  }
}

uint64_t sub_20B89F044()
{
  uint64_t v0;
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  v0 = operator new();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], 0);
  *(_QWORD *)v0 = &unk_24C45F5D8;
  *(_QWORD *)(v0 + 8) = Mutable;
  result = pthread_rwlock_init((pthread_rwlock_t *)(v0 + 16), 0);
  *(_QWORD *)v0 = &unk_24C45FF20;
  qword_25472C890 = v0;
  byte_25472C898 = 1;
  return result;
}

void sub_20B89F0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10C1C40412F3666);
  _Unwind_Resume(a1);
}

void sub_20B89F0F8(uint64_t a1)
{
  sub_20B89F14C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89F11C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_20B89F128(uint64_t a1)
{
  sub_20B89F14C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89F14C(uint64_t a1)
{
  const void *v2;

  *(_QWORD *)a1 = &unk_24C45F5D8;
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 16));
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_20B89F190(_QWORD *a1)
{
  const void *v2;

  *a1 = off_24C45F458;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_20B89F1D0(_QWORD *a1)
{
  sub_20B89F190(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89F1F4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a1 + 16;
  return 1;
}

uint64_t sub_20B89F204(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 168) = v1;
  return v1;
}

uint64_t sub_20B89F218(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 168) - 1);
  *(_DWORD *)(a1 + 168) = v1;
  return v1;
}

_BYTE *sub_20B89F22C(uint64_t a1, const __CFURL *a2, const void *a3)
{
  _QWORD *v5;
  _BYTE *v6;

  v5 = (_QWORD *)operator new();
  sub_20B8A1088((uint64_t)v5, a2, a3, 0);
  v6 = (_BYTE *)operator new();
  sub_20B8A4E60((uint64_t)v6, v5);
  if ((sub_20B8A2D3C(v6) & 1) != 0)
  {
    v6[16] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return v6;
}

void sub_20B89F2D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C4039AFCBB9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B89F314(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)operator new();
  sub_20B8A4E60((uint64_t)v3, a2);
  if ((sub_20B8A2D3C(v3) & 1) != 0)
  {
    v3[16] = 0;
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  return v3;
}

void sub_20B89F380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C4039AFCBB9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89F3A4(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(a2[1] + 232));
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 96))(a2, 1);
  pthread_mutex_unlock((pthread_mutex_t *)(a2[1] + 232));
  return (*(uint64_t (**)(_QWORD *))(*a2 + 8))(a2);
}

uint64_t sub_20B89F3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3, a4, a5);
}

uint64_t sub_20B89F414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, a4, a5);
}

uint64_t sub_20B89F430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89F454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
}

uint64_t sub_20B89F468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a3, a4);
}

uint64_t sub_20B89F480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a3, a4, a5);
}

uint64_t sub_20B89F49C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t sub_20B89F4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89F4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3, a4, a5, a6, a7);
}

BOOL sub_20B89F4F4(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, _QWORD *a5)
{
  return sub_20B8A6418(a2, a3, a4, a5);
}

uint64_t sub_20B89F508(uint64_t a1, const __CFURL *a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = operator new();
  sub_20B8A1088(v5, a2, a3, 0);
  v6 = sub_20B8A69F8(v5);
  v7 = sub_20B8A121C(v5);
  MEMORY[0x20BD39CB0](v7, 0x1070C4063F6B07ELL);
  return v6;
}

void sub_20B89F588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89F5B4()
{
  return 0;
}

uint64_t sub_20B89F5BC()
{
  return 0;
}

void sub_20B89F5C8(_QWORD *a1)
{
  sub_20B89F190(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89F5EC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a1 + 16;
  return 1;
}

uint64_t sub_20B89F5FC(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 168) = v1;
  return v1;
}

uint64_t sub_20B89F610(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 168) - 1);
  *(_DWORD *)(a1 + 168) = v1;
  return v1;
}

_BYTE *sub_20B89F624(uint64_t a1, const __CFURL *a2, const void *a3)
{
  _QWORD *v5;
  _BYTE *v6;

  v5 = (_QWORD *)operator new();
  sub_20B8A1088((uint64_t)v5, a2, a3, 0);
  v6 = (_BYTE *)operator new();
  sub_20B8A2E34((uint64_t)v6, v5);
  if ((sub_20B8A2D3C(v6) & 1) != 0)
  {
    v6[16] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return v6;
}

void sub_20B89F6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40614AD078);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B89F70C(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)operator new();
  sub_20B8A2E34((uint64_t)v3, a2);
  if ((sub_20B8A2D3C(v3) & 1) != 0)
  {
    v3[16] = 0;
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  return v3;
}

void sub_20B89F778(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40614AD078);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89F79C(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(a2[1] + 232));
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 96))(a2, 1);
  pthread_mutex_unlock((pthread_mutex_t *)(a2[1] + 232));
  return (*(uint64_t (**)(_QWORD *))(*a2 + 8))(a2);
}

uint64_t sub_20B89F7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3, a4, a5);
}

uint64_t sub_20B89F80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, a4, a5);
}

uint64_t sub_20B89F828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89F84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
}

uint64_t sub_20B89F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a3, a4);
}

uint64_t sub_20B89F878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a3, a4, a5);
}

uint64_t sub_20B89F894(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t sub_20B89F8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89F8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3, a4, a5, a6, a7);
}

BOOL sub_20B89F8EC(int a1, uint64_t a2, int a3, CFArrayRef theArray, _QWORD *a5)
{
  return sub_20B8A3FA8(a2, a3, theArray, a5);
}

uint64_t sub_20B89F900(uint64_t a1, const __CFURL *a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = operator new();
  sub_20B8A1088(v5, a2, a3, 0);
  v6 = sub_20B8A4810(v5);
  v7 = sub_20B8A121C(v5);
  MEMORY[0x20BD39CB0](v7, 0x1070C4063F6B07ELL);
  return v6;
}

void sub_20B89F980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

void sub_20B89F9A8(_QWORD *a1)
{
  sub_20B89F190(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B89F9CC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a1 + 16;
  return 1;
}

uint64_t sub_20B89F9DC(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 168) + 1);
  *(_DWORD *)(a1 + 168) = v1;
  return v1;
}

uint64_t sub_20B89F9F0(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 168) - 1);
  *(_DWORD *)(a1 + 168) = v1;
  return v1;
}

_BYTE *sub_20B89FA04(uint64_t a1, const __CFURL *a2, const void *a3)
{
  uint64_t v5;
  _BYTE *v6;

  v5 = operator new();
  sub_20B8A1088(v5, a2, a3, 0);
  v6 = (_BYTE *)operator new();
  sub_20B89C788((uint64_t)v6, v5);
  if ((sub_20B8A2D3C(v6) & 1) != 0)
  {
    v6[16] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return v6;
}

void sub_20B89FAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40F8DAED6BLL);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B89FAEC(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)operator new();
  sub_20B89C788((uint64_t)v3, a2);
  if ((sub_20B8A2D3C(v3) & 1) != 0)
  {
    v3[16] = 0;
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  return v3;
}

void sub_20B89FB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40F8DAED6BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89FB7C(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(a2[1] + 232));
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 96))(a2, 1);
  pthread_mutex_unlock((pthread_mutex_t *)(a2[1] + 232));
  return (*(uint64_t (**)(_QWORD *))(*a2 + 8))(a2);
}

uint64_t sub_20B89FBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3, a4, a5);
}

uint64_t sub_20B89FBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, a4, a5);
}

uint64_t sub_20B89FC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89FC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
}

uint64_t sub_20B89FC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a3, a4);
}

uint64_t sub_20B89FC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a3, a4, a5);
}

uint64_t sub_20B89FC74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t sub_20B89FC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89FCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B89FCCC()
{
  return 0;
}

BOOL sub_20B89FCD4(uint64_t a1, const __CFURL *a2, const void *a3)
{
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;

  v5 = operator new();
  sub_20B8A1088(v5, a2, a3, 0);
  v6 = sub_20B89CA2C(v5);
  v7 = sub_20B8A121C(v5);
  MEMORY[0x20BD39CB0](v7, 0x1070C4063F6B07ELL);
  return v6;
}

void sub_20B89FD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B89FD78(uint64_t a1, int a2, int a3, CFArrayRef theArray, _QWORD *a5)
{
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  CFIndex v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  CFStringRef v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  const void **v35;
  uint64_t *v36;
  _QWORD v37[6];

  v8 = 0;
  v9 = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C45F7A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C45F870;
  *(_OWORD *)(a1 + 40) = 0u;
  v35 = (const void **)(a1 + 40);
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  v36 = (uint64_t *)(a1 + 48);
  v10 = a1 + 64;
  *(_OWORD *)(a1 + 56) = 0u;
  while (v8 < CFArrayGetCount(theArray))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v8);
    Length = CFStringGetLength(ValueAtIndex);
    v13 = Length;
    v14 = *(_DWORD *)(*a5 + 4 * v8);
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    if (v15 >= v16)
    {
      v18 = *v36;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v36) >> 4);
      v20 = v19 + 1;
      if (v19 + 1 > 0x555555555555555)
        sub_20B873738();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v18) >> 4);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x2AAAAAAAAAAAAAALL)
        v22 = 0x555555555555555;
      else
        v22 = v20;
      v37[4] = v10;
      if (v22)
      {
        v23 = (char *)sub_20B87374C(v10, v22);
        v18 = *(_QWORD *)(a1 + 48);
        v15 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[48 * v19];
      *(_QWORD *)v24 = &off_24C467C40;
      *((_DWORD *)v24 + 2) = v14;
      *((_QWORD *)v24 + 2) = v9;
      *((_QWORD *)v24 + 3) = v13;
      *((_QWORD *)v24 + 4) = 64;
      *((_QWORD *)v24 + 5) = 0xFFFFFFFFLL;
      if (v15 == v18)
      {
        v26 = &v23[48 * v19];
      }
      else
      {
        v25 = v15;
        v26 = &v23[48 * v19];
        do
        {
          *((_QWORD *)v26 - 6) = &off_24C467C40;
          v26 -= 48;
          v27 = *(_OWORD *)(v25 - 40);
          v28 = *(_OWORD *)(v25 - 24);
          *((_QWORD *)v26 + 5) = *(_QWORD *)(v25 - 8);
          *(_OWORD *)(v26 + 24) = v28;
          *(_OWORD *)(v26 + 8) = v27;
          v25 -= 48;
        }
        while (v25 != v18);
      }
      v17 = v24 + 48;
      *(_QWORD *)(a1 + 48) = v26;
      *(_QWORD *)(a1 + 56) = v24 + 48;
      v29 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = &v23[48 * v22];
      v37[2] = v15;
      v37[3] = v29;
      v37[0] = v18;
      v37[1] = v18;
      sub_20B873790((uint64_t)v37);
    }
    else
    {
      *(_QWORD *)v15 = &off_24C467C40;
      *(_DWORD *)(v15 + 8) = v14;
      *(_QWORD *)(v15 + 16) = v9;
      *(_QWORD *)(v15 + 24) = Length;
      *(_QWORD *)(v15 + 32) = 64;
      v17 = (char *)(v15 + 48);
      *(_QWORD *)(v15 + 40) = 0xFFFFFFFFLL;
    }
    *(_QWORD *)(a1 + 56) = v17;
    v9 += v13;
    ++v8;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v30 = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x24BDBD240], theArray, &stru_24C4B3660);
  v31 = (std::__shared_weak_count *)operator new(0x20uLL);
  v31->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B8D8;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)v30;
  sub_20B88B52C(v35, v30);
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  return a1;
}

void sub_20B8A0038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10, uint64_t a11, void **a12, void **a13)
{
  const void **v13;
  const void **v14;

  sub_20B88B74C(v14, 0);
  sub_20B88AE28(v13, 0);
  a13 = a12;
  sub_20B8737E0(&a13);
  sub_20B87E150(a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A0098(uint64_t a1, int a2, int a3, CFStringRef theString, uint64_t a5)
{
  CFStringRef Copy;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C45F7A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C45F870;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  if (theString)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 40) = Copy;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_20B8A011C(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B88AE28(a1, cf);
  }
}

void sub_20B8A0168(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B88B74C(a1, cf);
  }
}

uint64_t sub_20B8A01B4(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 0;
  return v2;
}

uint64_t sub_20B8A01EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 48);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v2) >> 4);
  v4 = v2 + 48 * a2;
  if (v3 >= a2)
    return v4;
  else
    return 0;
}

uint64_t sub_20B8A0224(uint64_t a1)
{
  return sub_20B8D345C(*(const __CFString **)(a1 + 40));
}

BOOL sub_20B8A022C(uint64_t a1, uint64_t a2)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  const void *v7;
  const void *v8;
  const __CFString *v9;
  const __CFString *v10;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) != 89
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != 89
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) == 89)
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 89
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) == 89)
  {
    v4 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    v5 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2);
    if (CFNumberCompare(v4, v5, 0))
      return 0;
    v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
    return CFEqual(v7, v8) != 0;
  }
  else
  {
    v9 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v10 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return CFStringCompare(v9, v10, 0) == kCFCompareEqualTo;
  }
}

void sub_20B8A0398(uint64_t a1, char *a2, CFIndex capacity)
{
  uint64_t v3;
  __CFArray *Mutable;
  CFNumberRef v7;

  v3 = capacity;
  Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x24BDBD690]);
  if (v3 >= 1)
  {
    do
    {
      v7 = CFNumberCreate(0, kCFNumberCFIndexType, a2);
      CFArrayAppendValue(Mutable, v7);
      if (v7)
        CFRelease(v7);
      a2 += 8;
      --v3;
    }
    while (v3);
  }
  sub_20B88B74C((const void **)(a1 + 80), Mutable);
}

void sub_20B8A043C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88AE28((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A0454(_QWORD *a1)
{
  uint64_t v2;
  const __CFString *v3;
  CFStringRef Copy;
  const void *v5;
  const void *v6;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C45F7A0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = &unk_24C45F870;
  *(_QWORD *)(v2 + 32) = a1[1];
  v3 = (const __CFString *)a1[2];
  if (v3)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
  else
    Copy = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = Copy;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  sub_20B87386C((char *)(v2 + 48), a1[3], a1[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 4));
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  v5 = (const void *)a1[6];
  if (v5)
    sub_20B8A011C((const void **)(v2 + 72), v5);
  v6 = (const void *)a1[7];
  if (v6)
    sub_20B8A0168((const void **)(v2 + 80), v6);
  return v2;
}

void sub_20B8A0538(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C408D9C284ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A0570(_QWORD *a1)
{
  return sub_20B8A0454((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
}

uint64_t sub_20B8A0580(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C45F7A0;
  *(_QWORD *)(a1 + 24) = &unk_24C45F870;
  sub_20B88B74C((const void **)(a1 + 80), 0);
  sub_20B88AE28((const void **)(a1 + 72), 0);
  v3 = (void **)(a1 + 48);
  sub_20B8737E0(&v3);
  sub_20B87E150((const void **)(a1 + 40), 0);
  return a1;
}

uint64_t sub_20B8A05F0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C45F7A0;
  *(_QWORD *)(a1 + 24) = &unk_24C45F870;
  sub_20B88B74C((const void **)(a1 + 80), 0);
  sub_20B88AE28((const void **)(a1 + 72), 0);
  v3 = (void **)(a1 + 48);
  sub_20B8737E0(&v3);
  sub_20B87E150((const void **)(a1 + 40), 0);
  return MEMORY[0x20BD39CB0](a1, 0x10E1C408D9C284ALL);
}

uint64_t sub_20B8A0674(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_20B8A067C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B8A0688()
{
  return 0;
}

unint64_t sub_20B8A0690(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
}

uint64_t sub_20B8A06AC()
{
  return 0;
}

uint64_t sub_20B8A06B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_20B8A06C0()
{
  return 0;
}

uint64_t sub_20B8A06C8()
{
  return 0;
}

uint64_t sub_20B8A06D0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 38) << 26 >> 31) & 0x59;
}

uint64_t sub_20B8A06E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_20B8A06EC()
{
  return 0;
}

uint64_t sub_20B8A06F4()
{
  return 0;
}

uint64_t sub_20B8A06FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_20B8A0704(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

void *sub_20B8A070C(int a1, CFURLRef relativeURL)
{
  const __CFURL *v3;
  CFStringRef v4;
  void *Value;
  pthread_rwlock_t *v6;
  uint64_t v7;

  if ((byte_25472C8A0 & 1) == 0)
    pthread_once(&stru_254728618, (void (*)(void))sub_20B8A088C);
  v3 = CFURLCopyAbsoluteURL(relativeURL);
  v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
  CFRelease(v3);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(qword_25472C8A8 + 16));
  Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(qword_25472C8A8 + 8), v4);
  pthread_rwlock_unlock((pthread_rwlock_t *)(qword_25472C8A8 + 16));
  if (!Value)
  {
    v6 = (pthread_rwlock_t *)(qword_25472C8A8 + 16);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_25472C8A8 + 16));
    Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(qword_25472C8A8 + 8), v4);
    if (!Value)
    {
      Value = (void *)operator new();
      sub_20B8A1974((uint64_t)Value, relativeURL);
      if (sub_20B8A1C3C((CFDictionaryRef *)Value))
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(qword_25472C8A8 + 8), v4, Value);
      }
      else
      {
        v7 = sub_20B8A19FC((uint64_t)Value);
        MEMORY[0x20BD39CB0](v7, 0x10E0C4030B049B9);
        Value = 0;
      }
    }
    pthread_rwlock_unlock(v6);
  }
  CFRelease(v4);
  return Value;
}

void sub_20B8A0850(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10E0C4030B049B9);
  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A088C()
{
  uint64_t v0;
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  v0 = operator new();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], 0);
  *(_QWORD *)v0 = &unk_24C45F5D8;
  *(_QWORD *)(v0 + 8) = Mutable;
  result = pthread_rwlock_init((pthread_rwlock_t *)(v0 + 16), 0);
  *(_QWORD *)v0 = &unk_24C45FF20;
  qword_25472C8A8 = v0;
  byte_25472C8A0 = 1;
  return result;
}

void sub_20B8A0918(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10C1C40412F3666);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A093C(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v3;
  __CFDictionary *v4;
  CFStringRef v5;
  uint64_t v6;

  v3 = (pthread_rwlock_t *)(qword_25472C8A8 + 16);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_25472C8A8 + 16));
  v4 = *(__CFDictionary **)(qword_25472C8A8 + 8);
  *(CFAbsoluteTime *)(a2 + 320) = CFAbsoluteTimeGetCurrent();
  v5 = CFURLCopyFileSystemPath(*(CFURLRef *)(a2 + 8), kCFURLPOSIXPathStyle);
  CFDictionaryRemoveValue(v4, v5);
  CFRelease(v5);
  v6 = sub_20B8A19FC(a2);
  MEMORY[0x20BD39CB0](v6, 0x10E0C4030B049B9);
  return pthread_rwlock_unlock(v3);
}

void sub_20B8A09D0(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B8A09E8(uint64_t a1, const __CFString *a2)
{
  const __CFString *v2;
  CFTypeID v3;
  const void *Value;
  pthread_rwlock_t *v5;
  _BOOL4 v6;
  CFTypeID v7;
  const __CFURL *v8;
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v10;
  int v11;
  CFDataRef resourceData;

  if (a2)
    v2 = a2;
  else
    v2 = CFSTR("IDXDefaultProperty");
  v3 = CFGetTypeID(v2);
  if (v3 == CFStringGetTypeID())
  {
    if ((byte_25472B2B8 & 1) == 0)
      pthread_once(&stru_254728628, (void (*)(void))sub_20B8A0BF4);
    pthread_rwlock_rdlock((pthread_rwlock_t *)(qword_25472B2C0 + 16));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_25472B2C0 + 8), v2);
    pthread_rwlock_unlock((pthread_rwlock_t *)(qword_25472B2C0 + 16));
    if (!Value)
    {
      v5 = (pthread_rwlock_t *)(qword_25472B2C0 + 16);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(qword_25472B2C0 + 16));
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(qword_25472B2C0 + 8), v2);
      if (Value)
      {
        v6 = 0;
      }
      else
      {
        if (CFStringGetCharacterAtIndex(v2, 0) == 47)
        {
          v8 = CFURLCreateWithFileSystemPath(0, v2, kCFURLPOSIXPathStyle, 0);
        }
        else
        {
          BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.DictionaryServices"));
          v8 = CFBundleCopyResourceURL(BundleWithIdentifier, v2, CFSTR("plist"), 0);
        }
        v10 = v8;
        if (!v8)
        {
          Value = 0;
LABEL_24:
          pthread_rwlock_unlock(v5);
          return (const __CFString *)Value;
        }
        resourceData = 0;
        v11 = CFURLCreateDataAndPropertiesFromResource(0, v8, &resourceData, 0, 0, 0);
        v6 = v11 != 0;
        if (v11)
        {
          Value = CFPropertyListCreateFromXMLData(0, resourceData, 0, 0);
          CFRelease(resourceData);
        }
        else
        {
          Value = 0;
        }
        CFRelease(v10);
        if (!Value)
          goto LABEL_24;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(qword_25472B2C0 + 8), v2, Value);
      if (v6)
        CFRelease(Value);
      goto LABEL_24;
    }
  }
  else
  {
    v7 = CFGetTypeID(v2);
    if (v7 == CFDictionaryGetTypeID())
      return v2;
    else
      return 0;
  }
  return (const __CFString *)Value;
}

void sub_20B8A0BC8(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A0BF4()
{
  uint64_t v0;
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  v0 = operator new();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)v0 = &unk_24C45F5D8;
  *(_QWORD *)(v0 + 8) = Mutable;
  result = pthread_rwlock_init((pthread_rwlock_t *)(v0 + 16), 0);
  *(_QWORD *)v0 = &unk_24C45FF20;
  qword_25472B2C0 = v0;
  byte_25472B2B8 = 1;
  return result;
}

void sub_20B8A0C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10C1C40412F3666);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A0CA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0CB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0CC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0CE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0CF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0D08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0D28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0D38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0D48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0D68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0D88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0DA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0DC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0DE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0E08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0E18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B8A0E28(_QWORD *a1, char *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;

  sub_20B827F10((uint64_t)v15);
  __p = 0;
  v19 = 0;
  v20 = 0;
  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  if ((sub_20B8769A0((uint64_t)a1, v4, "r") & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)v15 + *(_QWORD *)(v15[0] - 24)), 0);
    v10 = sub_20B828F84(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Japanese/BlocklistManager.cpp", 83);
    sub_20B828F84(v10, (uint64_t)"(", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = sub_20B828F84(v11, (uint64_t)") [", 3);
    v13 = sub_20B828F84(v12, (uint64_t)"m_mmap.open(filename.c_str(), \"r\")", 34);
    sub_20B828F84(v13, (uint64_t)"] ", 2);
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v5 = a1[1];
  if (!v5)
    goto LABEL_11;
  v6 = a1[2];
  if (!v6)
    goto LABEL_11;
  v7 = (_QWORD *)operator new();
  *v7 = v5;
  v7[1] = v6;
  v8 = a1[43];
  a1[43] = v7;
  if (v8)
    MEMORY[0x20BD39CB0](v8, 0x1050C40717B85FCLL);
  v9 = 1;
LABEL_12:
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v15[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](&v17);
  return v9;
}

void sub_20B8A0FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B8A0FF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A0FF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 112);
  return a1;
}

uint64_t sub_20B8A1088(uint64_t a1, const __CFURL *a2, const void *a3, const void *a4)
{
  const __CFURL *PathComponent;
  CFStringRef v9;
  __CFBundle *v10;
  const __CFURL *v11;
  const __CFURL *v12;
  const __CFString *v13;
  CFRange v14;
  CFRange v16;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = -1;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 100) = -1;
  *(_DWORD *)(a1 + 108) = -1;
  *(_BYTE *)(a1 + 160) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 168), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 232), 0);
  *(_QWORD *)(a1 + 8) = CFRetain(a3);
  *(_QWORD *)(a1 + 32) = CFURLCopyLastPathComponent(a2);
  if (a4)
    *(_QWORD *)(a1 + 40) = CFRetain(a4);
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, a2);
  v9 = CFURLCopyLastPathComponent(PathComponent);
  if (CFStringCompare(v9, CFSTR("Resources"), 0) == kCFCompareEqualTo)
  {
    v10 = *(__CFBundle **)(a1 + 40);
    if (v10 || (v10 = sub_20B89D8A8(a2), (*(_QWORD *)(a1 + 40) = v10) != 0))
    {
      v11 = CFBundleCopyResourceURL(v10, *(CFStringRef *)(a1 + 32), 0, 0);
      if (!v11)
      {
        CFRelease(PathComponent);
        CFRelease(v9);
        return a1;
      }
      v12 = v11;
      *(_QWORD *)a1 = CFURLCopyAbsoluteURL(v11);
      CFRelease(v12);
      v13 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
      *(_QWORD *)(a1 + 16) = v13;
      v14 = CFStringFind(v13, CFSTR("Contents/"), 0);
      v16.length = CFStringGetLength(*(CFStringRef *)(a1 + 16)) - (v14.location + v14.length);
      v16.location = v14.location + v14.length;
      *(_QWORD *)(a1 + 24) = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 16), v16);
    }
  }
  CFRelease(PathComponent);
  CFRelease(v9);
  if (!*(_QWORD *)a1)
    *(_QWORD *)a1 = CFURLCopyAbsoluteURL(a2);
  return a1;
}

uint64_t sub_20B8A121C(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;

  sub_20B8A12A8(a1);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
  v7 = *(void **)(a1 + 48);
  if (v7)
    free(v7);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 168));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 232));
  return a1;
}

void sub_20B8A12A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 160))
  {
    free(*(void **)(a1 + 136));
    free(*(void **)(a1 + 144));
    free(*(void **)(a1 + 152));
  }
}

const __CFDictionary *sub_20B8A12EC(uint64_t a1)
{
  const __CFDictionary *result;
  const void *Value;

  result = *(const __CFDictionary **)(a1 + 24);
  if (!result)
  {
    result = *(const __CFDictionary **)(a1 + 8);
    if (result)
    {
      Value = CFDictionaryGetValue(result, CFSTR("IDXIndexPath"));
      *(_QWORD *)(a1 + 24) = Value;
      CFRetain(Value);
      return *(const __CFDictionary **)(a1 + 24);
    }
  }
  return result;
}

uint64_t sub_20B8A1334(uint64_t a1)
{
  uint64_t result;
  const __CFString *v3;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v6;
  const __CFString *v7;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v3 = *(const __CFString **)(a1 + 16);
      if (!v3)
      {
        v3 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
        *(_QWORD *)(a1 + 16) = v3;
      }
      Length = CFStringGetLength(v3);
      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      v6 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x7C0BA5A3uLL);
      *(_QWORD *)(a1 + 48) = v6;
      v7 = *(const __CFString **)(a1 + 16);
      if (!v7)
      {
        if (*(_QWORD *)(a1 + 8))
        {
          v7 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
          *(_QWORD *)(a1 + 16) = v7;
          v6 = *(char **)(a1 + 48);
        }
        else
        {
          v7 = 0;
        }
      }
      CFStringGetFileSystemRepresentation(v7, v6, MaximumSizeForEncoding);
      return *(_QWORD *)(a1 + 48);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B8A13E4(_QWORD *a1)
{
  void *v1;
  const __CFDictionary *v4;
  const __CFNumber *Value;

  v1 = a1 + 10;
  if (a1[10] == -1)
  {
    v4 = (const __CFDictionary *)a1[1];
    if (v4)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("IDXIndexDataSizeLength"));
      if (Value && CFNumberGetValue(Value, kCFNumberCFIndexType, v1))
      {
        if (*(_QWORD *)v1)
          return *(_QWORD *)v1;
      }
      else
      {
        *(_QWORD *)v1 = 0;
      }
      sub_20B8A1484((uint64_t)a1);
      if (a1[16] == 1 && !a1[14] && !a1[15])
        a1[10] = *(_QWORD *)(a1[19] + 8);
    }
  }
  return *(_QWORD *)v1;
}

uint64_t sub_20B8A1484(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 160) && *(_QWORD *)(a1 + 8))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 168));
    if (!*(_BYTE *)(a1 + 160))
    {
      sub_20B8A1694(a1);
      *(_BYTE *)(a1 + 160) = 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 168));
  }
  return a1 + 112;
}

uint64_t sub_20B8A14E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 96))
  {
    sub_20B8A1484(a1);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 168));
    if (!*(_BYTE *)(a1 + 96))
    {
      *(_QWORD *)(a1 + 88) = 0;
      if (!*(_QWORD *)(a1 + 128))
      {
        v2 = *(_QWORD *)(a1 + 112);
        if (v2 < 1)
        {
          v3 = 0;
        }
        else
        {
          v3 = 0;
          v4 = (uint64_t *)(*(_QWORD *)(a1 + 136) + 16);
          do
          {
            v5 = *v4;
            v4 += 3;
            v3 += v5;
            --v2;
          }
          while (v2);
          *(_QWORD *)(a1 + 88) = v3;
        }
        v6 = *(_QWORD *)(a1 + 120);
        if (v6 >= 1)
        {
          v7 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 8);
          do
          {
            v8 = *v7;
            v7 += 2;
            v3 += v8;
            --v6;
          }
          while (v6);
          *(_QWORD *)(a1 + 88) = v3;
        }
      }
    }
    *(_BYTE *)(a1 + 96) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 168));
  }
  return *(_QWORD *)(a1 + 88);
}

BOOL sub_20B8A159C(uint64_t a1)
{
  int v1;
  const __CFDictionary *v4;
  const __CFBoolean *Value;
  int v6;
  const char *v7;
  const char *v8;

  v1 = *(_DWORD *)(a1 + 100);
  if (v1 == -1)
  {
    v4 = *(const __CFDictionary **)(a1 + 8);
    if (v4)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(v4, CFSTR("IDXIndexWritable"));
      v6 = CFBooleanGetValue(Value);
      *(_DWORD *)(a1 + 100) = v6;
      if (v6)
      {
        v7 = (const char *)sub_20B8A1334(a1);
        if (access(v7, 0))
        {
          v1 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          v8 = (const char *)sub_20B8A1334(a1);
          v1 = access(v8, 2) == 0;
          *(_DWORD *)(a1 + 100) = v1;
        }
      }
      else
      {
        v1 = 0;
      }
    }
    else
    {
      v1 = -1;
    }
  }
  return v1 != 0;
}

BOOL sub_20B8A163C(uint64_t a1)
{
  int v2;
  const __CFDictionary *v3;
  const __CFBoolean *Value;

  v2 = *(_DWORD *)(a1 + 108);
  if (v2 == -1)
  {
    v3 = *(const __CFDictionary **)(a1 + 8);
    if (v3)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(v3, CFSTR("IDXIndexBigEndian"));
      v2 = CFBooleanGetValue(Value);
      *(_DWORD *)(a1 + 108) = v2;
    }
    else
    {
      v2 = -1;
    }
  }
  return v2 != 0;
}

CFIndex sub_20B8A1694(uint64_t a1)
{
  CFIndex result;
  const __CFDictionary *v3;
  const __CFArray *Value;
  const __CFArray *v5;
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex j;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex k;
  const __CFDictionary *v24;
  const __CFNumber *v25;

  result = (CFIndex)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), CFSTR("IDXIndexDataFields"));
  if (!result)
    return result;
  v3 = (const __CFDictionary *)result;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("IDXExternalDataFields"));
  if (!Value)
  {
    *(_QWORD *)(a1 + 112) = 0;
    goto LABEL_9;
  }
  v5 = Value;
  Count = CFArrayGetCount(Value);
  *(_QWORD *)(a1 + 112) = Count;
  if (!Count)
  {
LABEL_9:
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_10;
  }
  v7 = Count;
  *(_QWORD *)(a1 + 136) = malloc_type_malloc(24 * Count, 0x106004033AEC38CuLL);
  if (v7 >= 1)
  {
    v8 = 0;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, i);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + v8) = CFDictionaryGetValue(ValueAtIndex, CFSTR("IDXDataFieldName"));
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + v8 + 8) = CFDictionaryGetValue(ValueAtIndex, CFSTR("IDXIndexPath"));
      v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("IDXDataSize"));
      CFNumberGetValue(v11, kCFNumberCFIndexType, (void *)(*(_QWORD *)(a1 + 136) + v8 + 16));
      v8 += 24;
    }
  }
LABEL_10:
  v12 = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("IDXFixedDataFields"));
  if (!v12)
  {
    *(_QWORD *)(a1 + 120) = 0;
    goto LABEL_17;
  }
  v13 = v12;
  v14 = CFArrayGetCount(v12);
  *(_QWORD *)(a1 + 120) = v14;
  if (!v14)
  {
LABEL_17:
    *(_QWORD *)(a1 + 144) = 0;
    goto LABEL_18;
  }
  v15 = v14;
  *(_QWORD *)(a1 + 144) = malloc_type_malloc(16 * v14, 0x1060040C2E02434uLL);
  if (v15 >= 1)
  {
    v16 = 0;
    for (j = 0; j != v15; ++j)
    {
      v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, j);
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + v16) = CFDictionaryGetValue(v18, CFSTR("IDXDataFieldName"));
      v19 = (const __CFNumber *)CFDictionaryGetValue(v18, CFSTR("IDXDataSize"));
      CFNumberGetValue(v19, kCFNumberCFIndexType, (void *)(*(_QWORD *)(a1 + 144) + v16 + 8));
      v16 += 16;
    }
  }
LABEL_18:
  result = (CFIndex)CFDictionaryGetValue(v3, CFSTR("IDXVariableDataFields"));
  if (!result)
  {
    *(_QWORD *)(a1 + 128) = 0;
    goto LABEL_25;
  }
  v20 = (const __CFArray *)result;
  result = CFArrayGetCount((CFArrayRef)result);
  *(_QWORD *)(a1 + 128) = result;
  if (!result)
  {
LABEL_25:
    *(_QWORD *)(a1 + 152) = 0;
    return result;
  }
  v21 = result;
  result = (CFIndex)malloc_type_malloc(16 * result, 0x1060040C2E02434uLL);
  *(_QWORD *)(a1 + 152) = result;
  if (v21 >= 1)
  {
    v22 = 0;
    for (k = 0; k != v21; ++k)
    {
      v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, k);
      *(_QWORD *)(*(_QWORD *)(a1 + 152) + v22) = CFDictionaryGetValue(v24, CFSTR("IDXDataFieldName"));
      v25 = (const __CFNumber *)CFDictionaryGetValue(v24, CFSTR("IDXDataSizeLength"));
      result = CFNumberGetValue(v25, kCFNumberCFIndexType, (void *)(*(_QWORD *)(a1 + 152) + v22 + 8));
      v22 += 16;
    }
  }
  return result;
}

uint64_t sub_20B8A1974(uint64_t a1, CFURLRef relativeURL)
{
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 8) = CFURLCopyAbsoluteURL(relativeURL);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 32), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 112), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 256), 0);
  *(CFAbsoluteTime *)(a1 + 320) = CFAbsoluteTimeGetCurrent();
  return a1;
}

uint64_t sub_20B8A19FC(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  void *v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 248);
  if (v4)
    CFRelease(v4);
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 104);
    if (v6 >= 1)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * i);
        if (v8)
        {
          v9 = sub_20B8A121C(v8);
          MEMORY[0x20BD39CB0](v9, 0x1070C4063F6B07ELL);
          v6 = *(_DWORD *)(a1 + 104);
        }
      }
      v5 = *(void **)(a1 + 96);
    }
    free(v5);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 184));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 112));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 256));
  return a1;
}

CFDictionaryRef sub_20B8A1AB8(CFDictionaryRef *a1)
{
  const __CFNumber *Value;

  if (*a1 == (CFDictionaryRef)-1)
  {
    if (sub_20B8A1B14((uint64_t)a1))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1[2], CFSTR("IDXDictionaryVersion"));
      if (Value)
        CFNumberGetValue(Value, kCFNumberCFIndexType, a1);
    }
  }
  return *a1;
}

uint64_t sub_20B8A1B14(uint64_t a1)
{
  const __CFURL *v2;
  BOOL v3;
  CFDataRef resourceData;

  if (!*(_BYTE *)(a1 + 24))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
    {
      v2 = CFURLCreateCopyAppendingPathComponent(0, *(CFURLRef *)(a1 + 8), CFSTR("Info.plist"), 0);
      resourceData = 0;
      if (CFURLCreateDataAndPropertiesFromResource(0, v2, &resourceData, 0, 0, 0))
        v3 = resourceData == 0;
      else
        v3 = 1;
      if (!v3)
      {
        *(_QWORD *)(a1 + 16) = CFPropertyListCreateFromXMLData(0, resourceData, 0, 0);
        CFRelease(resourceData);
      }
      CFRelease(v2);
    }
    *(_BYTE *)(a1 + 24) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  }
  *(CFAbsoluteTime *)(a1 + 320) = CFAbsoluteTimeGetCurrent();
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8A1BE8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  if (!result)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 256));
    if (!*(_QWORD *)(a1 + 248))
      *(_QWORD *)(a1 + 248) = CFBundleCreate(0, *(CFURLRef *)(a1 + 8));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 256));
    return *(_QWORD *)(a1 + 248);
  }
  return result;
}

BOOL sub_20B8A1C3C(CFDictionaryRef *a1)
{
  CFDictionaryRef v2;
  _BOOL8 result;

  v2 = sub_20B8A1AB8(a1);
  result = 0;
  if (v2 != (CFDictionaryRef)-1 && (uint64_t)v2 <= 2)
    return sub_20B8A1C88((uint64_t)a1, 0) != 0;
  return result;
}

uint64_t sub_20B8A1C88(uint64_t a1, _DWORD *a2)
{
  const __CFArray *Value;
  const __CFArray *v5;
  int Count;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v9;
  const __CFURL *v10;
  uint64_t v11;
  const void *v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;

  if (!*(_BYTE *)(a1 + 108) && sub_20B8A1B14(a1))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    if (!*(_BYTE *)(a1 + 108))
    {
      Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), CFSTR("IDXDictionaryIndexes"));
      if (Value)
      {
        v5 = Value;
        Count = CFArrayGetCount(Value);
        *(_DWORD *)(a1 + 104) = Count;
        *(_QWORD *)(a1 + 96) = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
        if (*(int *)(a1 + 104) >= 1)
        {
          v7 = 0;
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v7);
            v9 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("IDXIndexPath"));
            v10 = sub_20B89D888(*(CFURLRef *)(a1 + 8), v9);
            v11 = operator new();
            v12 = (const void *)sub_20B8A1BE8(a1);
            sub_20B8A1088(v11, v10, ValueAtIndex, v12);
            *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v7) = v11;
            v13 = v7;
            if (!**(_QWORD **)(*(_QWORD *)(a1 + 96) + 8 * v7))
            {
              do
              {
                v14 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v13);
                if (v14)
                {
                  v15 = sub_20B8A121C(v14);
                  MEMORY[0x20BD39CB0](v15, 0x1070C4063F6B07ELL);
                }
              }
              while (v13-- > 0);
              v17 = *(void **)(a1 + 96);
              *(_DWORD *)(a1 + 104) = 0;
              free(v17);
              *(_QWORD *)(a1 + 96) = 0;
            }
            CFRelease(v10);
            ++v7;
          }
          while (v7 < *(int *)(a1 + 104));
        }
      }
      *(_BYTE *)(a1 + 108) = 1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
  }
  if (a2)
    *a2 = *(_DWORD *)(a1 + 104);
  return *(_QWORD *)(a1 + 96);
}

void sub_20B8A1E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A1E68(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *Value;
  const __CFDictionary *v9;
  uint64_t v10;

  v4 = sub_20B8A1C88(a1, 0);
  v5 = *(_DWORD *)(a1 + 104);
  if (a2)
  {
    if (v5 >= 1)
    {
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)v4;
        Value = *(const __CFString **)(*(_QWORD *)v4 + 56);
        if (Value
          || (v9 = *(const __CFDictionary **)(v7 + 8)) != 0
          && (Value = (const __CFString *)CFDictionaryGetValue(v9, CFSTR("IDXIndexName")),
              (*(_QWORD *)(v7 + 56) = Value) != 0))
        {
          if (CFStringCompare(a2, Value, 0) == kCFCompareEqualTo)
            break;
        }
        if (CFStringCompare(a2, *(CFStringRef *)(*(_QWORD *)v4 + 32), 0) == kCFCompareEqualTo)
          break;
        ++v6;
        v4 += 8;
        if (v6 >= *(int *)(a1 + 104))
          return 0;
      }
      goto LABEL_13;
    }
    return 0;
  }
  if (v5 <= 0)
    return 0;
LABEL_13:
  v10 = *(_QWORD *)v4;
  if (v10)
    sub_20B8A1F54(a1);
  return v10;
}

void sub_20B8A1F54(uint64_t a1)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(a1 + 184);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 184));
  ++*(_DWORD *)(a1 + 176);
  pthread_mutex_unlock(v2);
  *(CFAbsoluteTime *)(a1 + 320) = CFAbsoluteTimeGetCurrent();
}

void sub_20B8A1F98(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  BOOL v4;
  int v5;

  v2 = (pthread_mutex_t *)(a1 + 184);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 184));
  v3 = *(_DWORD *)(a1 + 176);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v5 < 0 == v4)
    *(_DWORD *)(a1 + 176) = v5;
  pthread_mutex_unlock(v2);
  *(CFAbsoluteTime *)(a1 + 320) = CFAbsoluteTimeGetCurrent();
}

uint64_t sub_20B8A1FE0()
{
  if (!byte_254728648)
  {
    pthread_mutex_lock(&stru_254728650);
    if (!byte_254728648)
    {
      qword_254728690 = operator new();
      byte_254728648 = 1;
    }
    pthread_mutex_unlock(&stru_254728650);
  }
  return qword_254728690;
}

_QWORD *sub_20B8A205C(uint64_t a1, const __CFURL *a2, const __CFString *a3)
{
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const __CFString *Value;
  const __CFDictionary *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Instance;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  _BOOL4 v23;

  v5 = sub_20B8A1FE0();
  v6 = sub_20B8A070C(v5, a2);
  if (!v6)
    return 0;
  v7 = (uint64_t)v6;
  v8 = sub_20B8A1E68((uint64_t)v6, a3);
  if (!v8)
    return 0;
  v9 = (_QWORD *)v8;
  v10 = sub_20B8A21E0();
  Value = (const __CFString *)v9[8];
  if (!Value)
  {
    v12 = (const __CFDictionary *)v9[1];
    if (v12)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v12, CFSTR("IDXIndexAccessMethod"));
      v9[8] = Value;
    }
    else
    {
      Value = 0;
    }
  }
  v13 = sub_20B89ECCC(v10, Value);
  if (!v13
    || (v14 = v13, (v15 = (*(uint64_t (**)(const void *, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v9)) == 0))
  {
LABEL_12:
    sub_20B8A1F98(v7);
    return 0;
  }
  v16 = v15;
  pthread_once(&stru_254728638, (void (*)(void))sub_20B8A2B28);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    (*(void (**)(const void *, uint64_t))(*(_QWORD *)v14 + 56))(v14, v16);
    goto LABEL_12;
  }
  v18 = (_QWORD *)Instance;
  v19 = (_QWORD *)sub_20B8A1484((uint64_t)v9);
  v20 = malloc_type_malloc((32 * (v19[1] + *v19 + v19[2])) | 0x10, 0xA067575DuLL);
  v18[2] = v14;
  v18[3] = v7;
  v18[4] = v9;
  v18[5] = v16;
  v18[8] = v20;
  v21 = sub_20B8A13E4(v9);
  v22 = sub_20B8A14E0((uint64_t)v9);
  v23 = sub_20B8A163C((uint64_t)v9);
  v18[6] = sub_20B89DB24(v21, v22, v23, v18 + 7);
  return v18;
}

uint64_t sub_20B8A21E0()
{
  _QWORD *v0;

  if (!byte_254728698)
  {
    pthread_mutex_lock(&stru_2547286A0);
    if (!byte_254728698)
    {
      v0 = (_QWORD *)operator new();
      *v0 = 1;
      v0[1] = 1;
      v0[2] = 1;
      v0[3] = 1;
      qword_2547286E0 = (uint64_t)v0;
      byte_254728698 = 1;
    }
    pthread_mutex_unlock(&stru_2547286A0);
  }
  return qword_2547286E0;
}

uint64_t sub_20B8A2260(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  UInt8 *v5;
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v5 = sub_20B89D734(a2, 0x100u, &v8);
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, UInt8 *, unint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), v5, v8, a3);
  if (v5)
    free(v5);
  return v6;
}

CFIndex sub_20B8A22DC(uint64_t a1, const __CFArray *a2)
{
  uint64_t *v3;
  CFIndex result;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  const __CFString *ValueAtIndex;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  const __CFString *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex *v30;
  int v31;
  _BOOL4 v32;
  CFIndex v33;
  const __CFString *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *(_QWORD *)(a1 + 32);
  v3 = (uint64_t *)sub_20B8A1484(v39);
  result = CFArrayGetCount(a2);
  v5 = result;
  v36 = *v3;
  v38 = v3;
  if (*v3 < 1)
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v3[3];
      if (v5 < 1)
      {
        v11 = 0;
      }
      else
      {
        v11 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v11);
          result = CFStringCompare(ValueAtIndex, *(CFStringRef *)(v10 + 24 * v9), 0);
          if (!result)
            break;
          if (v5 == ++v11)
            goto LABEL_11;
        }
        v13 = v8 + 1;
        v14 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 32 * v8);
        v14[5] = v11 + 1;
        v15 = *(_QWORD *)(v10 + 24 * v9 + 16);
        result = sub_20B8A163C(v39);
        v14[4] = v15;
        ++v6;
        v8 = v13;
        v14[2] = v7;
        v14[3] = sub_20B89DBB8;
        v3 = v38;
        v7 = 0;
      }
      if (v11 == v5)
LABEL_11:
        v7 += *(_QWORD *)(v10 + 24 * v9 + 16);
      ++v9;
    }
    while (v9 != v36);
  }
  v16 = v3[1];
  if (v16 >= 1 && v6 < v5)
  {
    v18 = 0;
    v37 = v3[1];
    do
    {
      v19 = v3[4];
      if (v5 < 1)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        while (1)
        {
          v21 = (const __CFString *)CFArrayGetValueAtIndex(a2, v20);
          result = CFStringCompare(v21, *(CFStringRef *)(v19 + 16 * v18), 0);
          if (!result)
            break;
          if (v5 == ++v20)
          {
            v16 = v37;
            goto LABEL_29;
          }
        }
        v22 = v8 + 1;
        v23 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 32 * v8);
        v23[5] = v20 + 1;
        v24 = *(_QWORD *)(v19 + 16 * v18 + 8);
        result = sub_20B8A163C(v39);
        v23[4] = v24;
        ++v6;
        v8 = v22;
        v23[2] = v7;
        v23[3] = sub_20B89DBB8;
        v16 = v37;
        v3 = v38;
        v7 = 0;
      }
      if (v20 == v5)
LABEL_29:
        v7 += *(_QWORD *)(v19 + 16 * v18 + 8);
      ++v18;
    }
    while (v18 < v16 && v6 < v5);
  }
  v25 = v3[2];
  if (v25 >= 1 && v6 < v5)
  {
    v27 = 0;
    do
    {
      v28 = v3[5] + 16 * v27;
      v29 = *(_QWORD *)(a1 + 64) + 32 * v8;
      *(_QWORD *)(v29 + 40) = 0;
      v30 = (CFIndex *)(v29 + 40);
      v31 = *(unsigned __int8 *)(v28 + 8);
      v32 = sub_20B8A163C(v39);
      result = (CFIndex)sub_20B89DB24(v31, 0, v32, v30 - 1);
      *(v30 - 3) = v7;
      *(v30 - 2) = result;
      if (v5 >= 1)
      {
        v33 = 0;
        while (1)
        {
          v34 = (const __CFString *)CFArrayGetValueAtIndex(a2, v33);
          result = CFStringCompare(v34, *(CFStringRef *)v28, 0);
          ++v33;
          if (!result)
            break;
          if (v5 == v33)
            goto LABEL_44;
        }
        *v30 = v33;
        ++v6;
      }
LABEL_44:
      v3 = v38;
      ++v8;
      if (++v27 >= v25)
        break;
      v7 = 0;
    }
    while (v6 < v5);
  }
  v35 = *(uint64_t **)(a1 + 64);
  *v35 = v5;
  v35[1] = v8;
  return result;
}

uint64_t sub_20B8A25B4(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v7 = *(uint64_t **)(result + 64);
  v8 = *v7;
  if (*v7 >= 1)
  {
    v9 = a4;
    v10 = a5;
    do
    {
      *v9++ = 0;
      *v10++ = 0;
      --v8;
    }
    while (v8);
  }
  if (a3 >= 1)
  {
    v11 = v7[1];
    if (v11 >= 1)
    {
      v12 = a2 + a3;
      v19 = 0;
      v13 = v7 + 5;
      v14 = 1;
      do
      {
        v15 = a2 + *(v13 - 3);
        result = ((uint64_t (*)(_QWORD, uint64_t, unsigned __int8 *))*(v13 - 2))(*(v13 - 1), v15, &v19);
        v16 = v15 + v19;
        if (*v13)
        {
          if (result <= 0)
            v17 = 0;
          else
            v17 = v15 + v19;
          v18 = 8 * *v13 - 8;
          *(_QWORD *)((char *)a4 + v18) = v17;
          *(_QWORD *)((char *)a5 + v18) = result;
        }
        if (v14 >= v11)
          break;
        v13 += 4;
        a2 = v16 + result;
        ++v14;
      }
      while (v16 + result < v12);
    }
  }
  return result;
}

__CFData *sub_20B8A269C(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _BOOL4 v5;
  __CFData *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *Value;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  UInt8 *v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)sub_20B8A1484(v3);
  v5 = sub_20B8A163C(v3);
  Mutable = CFDataCreateMutable(0, 0);
  v7 = *v4;
  if (*v4 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = v4[3];
      if (CFDictionaryContainsKey(a2, *(const void **)(v9 + v8)))
      {
        v10 = v9 + v8;
        Value = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)v10);
        sub_20B89DD5C(Mutable, Value, *(unsigned __int8 *)(v10 + 16), 1, v5);
      }
      else
      {
        sub_20B89DFAC(Mutable, 0, *(unsigned __int8 *)(v9 + v8 + 16), v5);
      }
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v12 = v4[1];
  if (v12 >= 1)
  {
    v13 = 0;
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    do
    {
      v15 = v4[4];
      if (CFDictionaryContainsKey(a2, *(const void **)(v15 + v13)))
      {
        v16 = v15 + v13;
        v17 = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)v16);
        sub_20B89DD5C(Mutable, v17, *(unsigned __int8 *)(v16 + 8), 1, v5);
      }
      else
      {
        v18 = v15 + v13;
        v19 = (UInt8 *)malloc_type_calloc(1uLL, *(_QWORD *)(v15 + v13 + 8), 0x8E2BA5EDuLL);
        v20 = (const __CFString *)CFDataCreateWithBytesNoCopy(0, v19, *(_QWORD *)(v18 + 8), v14);
        sub_20B89DD5C(Mutable, v20, *(unsigned __int8 *)(v18 + 8), 1, v5);
        CFRelease(v20);
        free(v19);
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  v21 = v4[2];
  if (v21 >= 1)
  {
    v22 = 0;
    do
    {
      v23 = v4[5];
      if (CFDictionaryContainsKey(a2, *(const void **)(v23 + v22)))
      {
        v24 = v23 + v22;
        v25 = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)v24);
        sub_20B89DD5C(Mutable, v25, *(unsigned __int8 *)(v24 + 8), 0, v5);
      }
      else
      {
        sub_20B89DFAC(Mutable, 0, *(unsigned __int8 *)(v23 + v22 + 8), v5);
      }
      v22 += 16;
      --v21;
    }
    while (v21);
  }
  return Mutable;
}

uint64_t sub_20B8A28B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  const __CFDictionary *v10;
  const void *Value;

  if (!a2
    && ((v9 = *(_QWORD *)(a1 + 32), *(_QWORD *)(v9 + 72))
     || (v10 = *(const __CFDictionary **)(v9 + 8)) != 0
     && (Value = CFDictionaryGetValue(v10, CFSTR("IDXIndexKeyMatchingMethods")), (*(_QWORD *)(v9 + 72) = Value) != 0)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2, a3, a4);
  }
}

uint64_t sub_20B8A2944(const __CFURL *a1, const __CFString *a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  char *v8;
  const __CFURL *v9;
  __CFWriteStream *v10;
  __CFWriteStream *v11;
  CFIndex v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const __CFString *Value;
  const __CFDictionary *v21;
  const void *v22;
  uint64_t v23;
  int v25;

  v4 = sub_20B8A1FE0();
  v5 = sub_20B8A21E0();
  v6 = sub_20B8A09E8(v4, a2);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = sub_20B89D7EC(a1);
  if (mkdir(v8, 0x1FFu))
    goto LABEL_27;
  v9 = CFURLCreateCopyAppendingPathComponent(0, a1, CFSTR("Info.plist"), 0);
  v10 = CFWriteStreamCreateWithFile(0, v9);
  if (v10)
  {
    v11 = v10;
    if (CFWriteStreamOpen(v10))
    {
      v12 = CFPropertyListWriteToStream(v7, v11, kCFPropertyListXMLFormat_v1_0, 0);
      CFWriteStreamClose(v11);
      v13 = v12 > 0;
    }
    else
    {
      v13 = 0;
    }
    CFRelease(v11);
    if (!v9)
      goto LABEL_11;
    goto LABEL_10;
  }
  v13 = 0;
  if (v9)
LABEL_10:
    CFRelease(v9);
LABEL_11:
  if (v13)
  {
    v14 = sub_20B8A070C(v4, a1);
    if (v14)
    {
      v15 = (uint64_t)v14;
      v25 = 0;
      v16 = sub_20B8A1C88((uint64_t)v14, &v25);
      if (v16)
      {
        if (v25 < 1)
        {
LABEL_23:
          v23 = 1;
          if (!v8)
            return v23;
          goto LABEL_28;
        }
        v17 = v16;
        v18 = 0;
        while (1)
        {
          v19 = *(_QWORD **)(v17 + 8 * v18);
          Value = (const __CFString *)v19[8];
          if (!Value)
          {
            v21 = (const __CFDictionary *)v19[1];
            if (v21)
            {
              Value = (const __CFString *)CFDictionaryGetValue(v21, CFSTR("IDXIndexAccessMethod"));
              v19[8] = Value;
            }
            else
            {
              Value = 0;
            }
          }
          v22 = sub_20B89ECCC(v5, Value);
          if (!v22
            || ((*(uint64_t (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)v22 + 144))(v22, *v19, v19[1]) & 1) == 0)
          {
            break;
          }
          if (++v18 >= v25)
            goto LABEL_23;
        }
      }
      sub_20B8A093C(v4, v15);
    }
  }
  sub_20B89D9B8((DIR *)v8);
LABEL_27:
  v23 = 0;
  if (v8)
LABEL_28:
    free(v8);
  return v23;
}

uint64_t sub_20B8A2B28()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  qword_25472C8B0 = result;
  return result;
}

void sub_20B8A2B4C(uint64_t a1)
{
  void *v2;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 32))
    sub_20B8A1F98(*(_QWORD *)(a1 + 24));
  v2 = *(void **)(a1 + 64);
  if (v2)
    free(v2);
}

BOOL sub_20B8A2BA0(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

CFStringRef sub_20B8A2BAC(CFURLRef **a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFStringRef PathComponent;
  CFStringRef v6;
  CFStringRef v7;

  v4 = CFGetAllocator(a1);
  PathComponent = CFURLCopyLastPathComponent(*a1[4]);
  if (!PathComponent)
    return CFStringCreateWithFormat(v4, a2, CFSTR("<#invalid index>"));
  v6 = PathComponent;
  v7 = CFStringCreateWithFormat(v4, a2, CFSTR("<%@>"), PathComponent);
  CFRelease(v6);
  return v7;
}

CFStringRef sub_20B8A2C44(uint64_t a1)
{
  const __CFAllocator *v2;
  CFStringRef v3;
  uint64_t v4;
  CFStringRef v5;
  CFStringRef v6;

  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = CFURLCopyFileSystemPath(**(CFURLRef **)(a1 + 32), kCFURLPOSIXPathStyle);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (!v3)
    return CFStringCreateWithFormat(v2, 0, CFSTR("<IDXIndexRef %p>{access method = %@, #invalid index}"), a1, v4);
  v5 = v3;
  v6 = CFStringCreateWithFormat(v2, 0, CFSTR("<IDXIndexRef %p>{access method = %@, index = %@, open# = %d}"), a1, v4, v3, 0);
  CFRelease(v5);
  return v6;
}

uint64_t sub_20B8A2CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24C45F520;
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = sub_20B8A121C(v2);
      MEMORY[0x20BD39CB0](v3, 0x1070C4063F6B07ELL);
    }
  }
  return a1;
}

uint64_t sub_20B8A2D3C(_QWORD *a1)
{
  uint64_t v2;

  pthread_mutex_lock((pthread_mutex_t *)(a1[1] + 232));
  v2 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 88))(a1, 1, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1[1] + 232));
  return v2;
}

uint64_t sub_20B8A2D90(int a1, int a2, off_t *a3)
{
  int v5;
  off_t st_size;
  stat v8;

  if (a2)
    v5 = 3;
  else
    v5 = 1;
  if (fstat(a1, &v8) == -1)
    return -1;
  st_size = v8.st_size;
  if (a3)
    *a3 = v8.st_size;
  return (uint64_t)mmap(0, st_size, v5, 1, a1, 0);
}

uint64_t sub_20B8A2E08()
{
  return 0;
}

uint64_t sub_20B8A2E10()
{
  return 0;
}

uint64_t sub_20B8A2E18()
{
  return 0;
}

uint64_t sub_20B8A2E20()
{
  return 0;
}

uint64_t sub_20B8A2E28()
{
  return 1;
}

uint64_t sub_20B8A2E34(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _BOOL4 v6;
  void (*v7)(uint64_t, uint64_t, _BYTE *);
  const __CFDictionary *v8;
  const __CFNumber *Value;
  int v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _BYTE *);
  int v13;
  uint64_t v14;
  const __CFDictionary *v15;
  const __CFNumber *v16;
  const __CFDictionary *v17;
  unint64_t v18;
  const __CFNumber *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  uint64x2_t v25;
  int8x16_t v26;
  uint64x2_t v27;
  int64x2_t v28;
  int8x16_t v29;
  uint64x2_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  uint64x2_t v35;
  int8x16_t v36;
  uint64x2_t v37;
  int64x2_t v38;
  int8x16_t v39;
  uint64x2_t v40;
  int8x16_t v41;
  unint64_t valuePtr;

  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24C45F600;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 32) = sub_20B8A14E0((uint64_t)a2) != 0;
  *(_BYTE *)(a1 + 33) = sub_20B8A159C(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 34) = sub_20B8A163C((uint64_t)a2);
  v4 = sub_20B8A13E4(a2);
  v5 = sub_20B8A14E0((uint64_t)a2);
  v6 = sub_20B8A163C((uint64_t)a2);
  v7 = sub_20B89DB24(v4, v5, v6, (_QWORD *)(a1 + 128));
  *(_WORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 120) = v7;
  v8 = (const __CFDictionary *)a2[1];
  if (v8)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("HeapDataCompressionType"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(a1 + 36));
  }
  v10 = *(__int16 *)(a1 + 36);
  *(_BYTE *)(a1 + 35) = *(_WORD *)(a1 + 36) != 0;
  *(_BYTE *)(a1 + 38) = v10 > 3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if ((v10 & 0xFFFE) == 2)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 120);
    v11 = sub_20B8A13E4(a2);
    v12 = sub_20B89DB24(((_DWORD)v11 << (v11 < 4)), 0, *(unsigned __int8 *)(a1 + 34), 0);
    v13 = *(unsigned __int16 *)(a1 + 36);
    v14 = 0x2000;
    if (v13 == 2)
      v14 = 0x8000;
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 120) = v12;
    v15 = (const __CFDictionary *)a2[1];
    if (v15)
    {
      v16 = (const __CFNumber *)CFDictionaryGetValue(v15, CFSTR("HeapDataCompressionBlockSize"));
      if (v16)
        CFNumberGetValue(v16, kCFNumberCFIndexType, (void *)(a1 + 56));
      v17 = (const __CFDictionary *)a2[1];
      if (*(_WORD *)(a1 + 36) == 2)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = 0xFFFFLL;
      valuePtr = v18;
      if (v17)
      {
        v19 = (const __CFNumber *)CFDictionaryGetValue(v17, CFSTR("HeapDataCompressionMaxBlockCount"));
        if (v19)
        {
          CFNumberGetValue(v19, kCFNumberLongLongType, &valuePtr);
          v18 = valuePtr;
        }
      }
    }
    else if (v13 == 2)
    {
      v18 = 0xFFFFFFFFLL;
    }
    else
    {
      v18 = 0xFFFFLL;
    }
    if (*(_WORD *)(a1 + 36) == 2)
      v20 = 64;
    else
      v20 = 32;
    LODWORD(v21) = vcvtpd_s64_f64(log2((double)v18));
    v22 = (v20 - v21);
    *(_QWORD *)(a1 + 88) = 0;
    if ((int)v21 < 1)
    {
      v32 = 0;
    }
    else
    {
      v23 = (v21 + 1) & 0x1FFFFFFFELL;
      v24 = (int64x2_t)xmmword_20BA3AF70;
      v25 = (uint64x2_t)vdupq_n_s64(v21 - 1);
      v26 = 0uLL;
      v27 = (uint64x2_t)vdupq_n_s64(1uLL);
      v28 = vdupq_n_s64(2uLL);
      do
      {
        v29 = v26;
        v30 = (uint64x2_t)v24;
        v26 = vorrq_s8(v26, (int8x16_t)vshlq_u64(v27, (uint64x2_t)v24));
        v24 = vaddq_s64(v24, v28);
        v23 -= 2;
      }
      while (v23);
      v31 = vbslq_s8((int8x16_t)vcgtq_u64(v30, v25), v29, v26);
      *(int8x8_t *)v31.i8 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      *(_QWORD *)(a1 + 88) = v31.i64[0];
      v32 = v31.i64[0];
    }
    *(_QWORD *)(a1 + 104) = 0;
    if ((int)v22 >= 1)
    {
      v33 = (v22 + 1) & 0x1FFFFFFFELL;
      v34 = (int64x2_t)xmmword_20BA3AF70;
      v35 = (uint64x2_t)vdupq_n_s64(v22 - 1);
      v36 = 0uLL;
      v37 = (uint64x2_t)vdupq_n_s64(1uLL);
      v38 = vdupq_n_s64(2uLL);
      do
      {
        v39 = v36;
        v40 = (uint64x2_t)v34;
        v36 = vorrq_s8(v36, (int8x16_t)vshlq_u64(v37, (uint64x2_t)v34));
        v34 = vaddq_s64(v34, v38);
        v33 -= 2;
      }
      while (v33);
      v41 = vbslq_s8((int8x16_t)vcgtq_u64(v40, v35), v39, v36);
      *(int8x8_t *)(a1 + 104) = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    }
    *(_QWORD *)(a1 + 96) = v32 << v22;
    *(_BYTE *)(a1 + 112) = v22;
  }
  *(_BYTE *)(a1 + 113) = 0;
  return a1;
}

void sub_20B8A310C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8A2CE0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A3130(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C45F600;
  v2 = (void *)a1[5];
  if (v2)
    free(v2);
  return sub_20B8A2CE0((uint64_t)a1);
}

void sub_20B8A316C(_QWORD *a1)
{
  sub_20B8A3130(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8A3190(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;

  v4 = *(unsigned __int16 *)(a1 + 36);
  if ((v4 & 0xFFFE) == 2)
    a2 = (*(_QWORD *)(a1 + 96) & a2) >> *(_BYTE *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 24);
  if (v4 != 3 && *(_BYTE *)(a1 + 32) == 0)
  {
    v8 = (_DWORD *)(*(_QWORD *)(v5 + 16) + a2);
    if (!*v8)
    {
      v10 = 0;
      v9 = 0;
      if (!a3)
        return v10;
      goto LABEL_11;
    }
    v7 = (uint64_t)(v8 + 1);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 16) + (a2 - 1) * *(unsigned int *)(v5 + 36) + 8;
  }
  v12 = 0;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *))(a1 + 120))(*(_QWORD *)(a1 + 128), v7, &v12);
  v10 = v7 + v12;
  if (a3)
LABEL_11:
    *a3 = v9;
  return v10;
}

int64_t sub_20B8A324C(uint64_t a1, uint64_t a2, int64_t a3, Bytef *a4)
{
  unsigned int v6;
  uint64_t v8;
  Bytef *v9;
  int64_t v10;
  uLong v11;
  int v12;
  void *v13;
  uint64_t v14;
  uLong v15;
  uLongf destLen;
  unsigned __int8 v18;
  uLong sourceLen;

  v6 = a2;
  sourceLen = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uLong *))(*(_QWORD *)a1 + 48))(a1, a2, &sourceLen);
  v18 = 0;
  if (!v8)
    return 0;
  v9 = (Bytef *)v8;
  if (*(_BYTE *)(a1 + 113) || *(_BYTE *)(a1 + 35))
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *))(a1 + 120))(0, v8, &v18);
    v11 = sourceLen - v18;
    sourceLen = v11;
    v9 += v18;
  }
  else
  {
    v11 = sourceLen;
    v10 = sourceLen;
  }
  v12 = *(unsigned __int16 *)(a1 + 36);
  if ((v12 & 0xFFFE) == 2)
  {
    if (v10 > *(_QWORD *)(a1 + 48))
    {
      v13 = *(void **)(a1 + 40);
      if (v13)
        free(v13);
      *(_QWORD *)(a1 + 40) = malloc_type_malloc(v10, 0xBF05C3A8uLL);
      *(_QWORD *)(a1 + 48) = v10;
    }
    if (v9 != *(Bytef **)(a1 + 64))
    {
      destLen = v10;
      uncompress(*(Bytef **)(a1 + 40), &destLen, v9, sourceLen);
      *(_QWORD *)(a1 + 64) = v9;
    }
    v14 = *(_QWORD *)(a1 + 40) + (v6 & *(_DWORD *)(a1 + 104));
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *))(a1 + 80))(0, v14, &v18);
    sourceLen = v15;
    v9 = (Bytef *)(v14 + v18);
    if (*(_BYTE *)(a1 + 113))
    {
      v10 = (*(uint64_t (**)(_QWORD, Bytef *, unsigned __int8 *))(a1 + 80))(0, v9, &v18);
      v11 = sourceLen - v18;
      sourceLen = v11;
      v9 += v18;
    }
    else
    {
      v11 = v15;
      v10 = v15;
    }
    v12 = *(unsigned __int16 *)(a1 + 36);
  }
  if (v12 == 1)
  {
    if (v10 > a3)
      return v10;
    destLen = a3;
    uncompress(a4, &destLen, v9, v11);
  }
  else
  {
    if (v10 > a3)
      return v10;
    memcpy(a4, v9, v11);
  }
  if (*(_BYTE *)(a1 + 113) && v10 <= a3)
    free(v9);
  return v10;
}

BOOL sub_20B8A3430(uint64_t a1, uint64_t a2, uint64_t a3, const Bytef *a4, size_t a5, unint64_t *a6)
{
  Bytef *v9;
  uint64_t v10;
  uint64_t v11;
  uLong v12;
  const Bytef *v13;
  Bytef *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uLongf destLen;
  uLong v66;
  unsigned __int8 v67;
  uLong sourceLen;
  unsigned __int8 v69;
  uint64_t v70;
  size_t __len;

  __len = a5;
  if (!*(_BYTE *)(a1 + 33))
    return 0;
  v70 = 0;
  v69 = 0;
  (*(void (**)(_QWORD, uint64_t *, unsigned __int8 *))(a1 + 120))(*(_QWORD *)(a1 + 128), &v70, &v69);
  if ((*(_WORD *)(a1 + 36) & 0xFFFE) != 2)
  {
    if (*(_BYTE *)(a1 + 35))
      v21 = sub_20B8A3AE8(a1, a4, __len, v69, &__len);
    else
      v21 = sub_20B89DC4C(a4, __len, v69, *(unsigned __int8 *)(a1 + 34), &__len);
    v16 = v21;
    v22 = *(unsigned __int8 *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 24);
    v24 = __len;
    if (!v22)
    {
      v19 = sub_20B8A3BA0(v23, v21, __len);
      goto LABEL_90;
    }
    v25 = *(unsigned int *)(v23 + 36);
    if (__len)
    {
      if ((_DWORD)v25)
      {
        if (__len != v25)
          goto LABEL_45;
      }
      else
      {
        *(_DWORD *)(v23 + 36) = __len;
        LODWORD(v25) = v24;
      }
    }
    else if (!(_DWORD)v25)
    {
      goto LABEL_45;
    }
    v33 = *(_DWORD **)(v23 + 16);
    if (v33)
    {
      v34 = *(_QWORD *)(v23 + 24);
      if (v34 >= (*(_DWORD *)(v23 + 32) + v25))
        goto LABEL_42;
      v35 = v34 + ((_DWORD)v25 << 10);
    }
    else
    {
      v35 = ((_DWORD)v25 << 10) | 8u;
    }
    v33 = (_DWORD *)(*(uint64_t (**)(void))v23)();
    if (!v33)
    {
LABEL_45:
      v19 = 0;
      goto LABEL_90;
    }
    *(_QWORD *)(v23 + 16) = v33;
    *(_QWORD *)(v23 + 24) = v35;
LABEL_42:
    v36 = *(_DWORD *)(v23 + 32);
    if (!v36)
    {
      *(_DWORD *)(v23 + 32) = 8;
      *v33 = 8;
      v33[1] = *(_DWORD *)(v23 + 36);
      v36 = *(_DWORD *)(v23 + 32);
    }
    v37 = *(_QWORD *)(v23 + 40);
    memcpy((char *)v33 + v36, v16, *(unsigned int *)(v23 + 36));
    v38 = *(_DWORD *)(v23 + 32) + *(_DWORD *)(v23 + 36);
    *(_DWORD *)(v23 + 32) = v38;
    **(_DWORD **)(v23 + 16) = v38;
    ++*(_QWORD *)(v23 + 40);
    v19 = v37 + 1;
    goto LABEL_90;
  }
  sourceLen = 0;
  v67 = 0;
  (*(void (**)(_QWORD, uint64_t *, unsigned __int8 *))(a1 + 80))(0, &v70, &v67);
  v9 = sub_20B89DC4C(a4, __len, v67, *(unsigned __int8 *)(a1 + 34), &__len);
  v10 = *(_QWORD *)(a1 + 72);
  if (!v10
    || (v11 = (*(uint64_t (**)(uint64_t, uint64_t, uLong *))(*(_QWORD *)a1 + 48))(a1, v10, &sourceLen),
        v12 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int8 *))(a1 + 120))(0, v11, &v69),
        sourceLen = v12,
        v12 >= *(_QWORD *)(a1 + 104)))
  {
LABEL_8:
    v16 = sub_20B8A3AE8(a1, v9, __len, v69, &__len);
    if (v9 != a4)
      free(v9);
    sourceLen = 0;
    if (*(_WORD *)(a1 + 36) == 2)
    {
      v17 = *(_QWORD *)(a1 + 24);
LABEL_12:
      v18 = sub_20B8A3BA0(v17, v16, __len) << *(_BYTE *)(a1 + 112);
      v19 = v18 + sourceLen;
      if ((int64_t)__len >= *(_QWORD *)(a1 + 56))
        v18 = 0;
      *(_QWORD *)(a1 + 72) = v18;
      goto LABEL_90;
    }
    goto LABEL_48;
  }
  v13 = (const Bytef *)(v11 + v69);
  v66 = __len + v12;
  v14 = (Bytef *)malloc_type_malloc(__len + v12, 0xDC58DB5AuLL);
  destLen = v66;
  uncompress(v14, &destLen, v13, sourceLen);
  memmove(&v14[sourceLen], v9, __len);
  v15 = sub_20B8A3AE8(a1, v14, v66, v69, &v66);
  v16 = v15;
  if (*(_WORD *)(a1 + 36) != 2 && (int64_t)v66 > *(_QWORD *)(a1 + 56))
  {
    free(v15);
    free(v14);
    goto LABEL_8;
  }
  if (v9 != a4)
    free(v9);
  __len = v66;
  free(v14);
  v17 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 72) >> *(_BYTE *)(a1 + 112);
  if (*(_WORD *)(a1 + 36) == 2)
  {
    v27 = *(unsigned int *)(v17 + 36);
    if (v26 < v27)
    {
      v28 = *(_DWORD **)(v17 + 16);
      v29 = (_DWORD *)((char *)v28 + v26);
      v30 = *(unsigned int *)((char *)v28 + v26);
      if ((_DWORD)v30)
      {
        if (v26 + v30 + 4 == v27)
        {
          v31 = v27 - v30 - 4;
          *(_DWORD *)(v17 + 36) = v31;
          *v28 = v31;
          if (*(int *)(v17 + 32) >= 1)
          {
            v32 = *(_DWORD *)(v17 + 48) - 1;
            *(_DWORD *)(v17 + 48) = v32;
            v28[5] = v32;
          }
        }
        else
        {
          *v29 = 0;
          if (v30 >= 4 && *(int *)(v17 + 32) >= 1)
          {
            v29[1] = v30;
            if (v30 >= 0x20 && v26 > *(unsigned int *)(v17 + 40))
            {
              v64 = *(unsigned int *)(v17 + 44);
              if (!(_DWORD)v64 || v26 < v64)
              {
                *(_DWORD *)(v17 + 44) = v26;
                v28[4] = v26;
              }
            }
          }
        }
      }
    }
    goto LABEL_12;
  }
  if (*(_QWORD *)(v17 + 40) == v26)
  {
    *(_QWORD *)(v17 + 40) = v26 - 1;
    v39 = *(_DWORD *)(v17 + 32) - *(_DWORD *)(v17 + 36);
    *(_DWORD *)(v17 + 32) = v39;
    **(_DWORD **)(v17 + 16) = v39;
  }
LABEL_48:
  v40 = v16;
  v41 = *(_QWORD *)(a1 + 56);
  if ((uint64_t)__len % v41)
    v42 = (uint64_t)__len / v41 + 1;
  else
    v42 = (uint64_t)__len / v41;
  v43 = v42 * v41;
  v16 = (char *)malloc_type_calloc(1uLL, v42 * v41, 0x2C2FA817uLL);
  memmove(v16, v40, __len);
  free(v40);
  v44 = *(_QWORD *)(a1 + 24);
  v45 = *(_QWORD *)(a1 + 56);
  v46 = *(unsigned int *)(v44 + 36);
  if (v45)
  {
    if ((_DWORD)v46)
    {
      if (v45 != v46)
        goto LABEL_70;
    }
    else
    {
      *(_DWORD *)(v44 + 36) = v45;
      LODWORD(v46) = v45;
    }
  }
  else if (!(_DWORD)v46)
  {
    goto LABEL_70;
  }
  v47 = *(_DWORD **)(v44 + 16);
  if (v47)
  {
    v48 = *(_QWORD *)(v44 + 24);
    if (v48 >= (*(_DWORD *)(v44 + 32) + v46))
      goto LABEL_64;
    v49 = v48 + ((_DWORD)v46 << 10);
  }
  else
  {
    v49 = ((_DWORD)v46 << 10) | 8u;
  }
  v47 = (_DWORD *)(*(uint64_t (**)(void))v44)();
  if (!v47)
    goto LABEL_70;
  *(_QWORD *)(v44 + 16) = v47;
  *(_QWORD *)(v44 + 24) = v49;
LABEL_64:
  v50 = *(_DWORD *)(v44 + 32);
  if (!v50)
  {
    *(_DWORD *)(v44 + 32) = 8;
    *v47 = 8;
    v47[1] = *(_DWORD *)(v44 + 36);
    v50 = *(_DWORD *)(v44 + 32);
  }
  v51 = *(_QWORD *)(v44 + 40);
  memcpy((char *)v47 + v50, v16, *(unsigned int *)(v44 + 36));
  v52 = *(_DWORD *)(v44 + 32) + *(_DWORD *)(v44 + 36);
  *(_DWORD *)(v44 + 32) = v52;
  **(_DWORD **)(v44 + 16) = v52;
  ++*(_QWORD *)(v44 + 40);
  *(_QWORD *)(a1 + 72) = v51 + 1;
  if (v51 < *(_QWORD *)(a1 + 88))
  {
    v53 = (v51 + 1) << *(_BYTE *)(a1 + 112);
    *(_QWORD *)(a1 + 72) = v53;
    v19 = v53 + sourceLen;
    goto LABEL_71;
  }
  if (v51 != -1)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Failed to add a new data since record count exceeds limit (%lld) defined in the current compaction-type.\n", *(_QWORD *)(a1 + 88));
LABEL_70:
  v19 = 0;
  v43 = 0;
  *(_QWORD *)(a1 + 72) = 0;
LABEL_71:
  v54 = *(_QWORD *)(a1 + 56);
  v55 = v43 - v54;
  if (v43 != v54)
  {
    v56 = v16;
    do
    {
      v56 += v54;
      v57 = *(_QWORD *)(a1 + 24);
      v58 = *(unsigned int *)(v57 + 36);
      if (v54)
      {
        if ((_DWORD)v58)
        {
          if (v54 != v58)
            goto LABEL_89;
        }
        else
        {
          *(_DWORD *)(v57 + 36) = v54;
          LODWORD(v58) = v54;
        }
      }
      else if (!(_DWORD)v58)
      {
        goto LABEL_89;
      }
      v59 = *(_DWORD **)(v57 + 16);
      if (v59)
      {
        v60 = *(_QWORD *)(v57 + 24);
        if (v60 >= (*(_DWORD *)(v57 + 32) + v58))
          goto LABEL_86;
        v61 = v60 + ((_DWORD)v58 << 10);
      }
      else
      {
        v61 = ((_DWORD)v58 << 10) | 8u;
      }
      v59 = (_DWORD *)(*(uint64_t (**)(void))v57)();
      if (v59)
      {
        *(_QWORD *)(v57 + 16) = v59;
        *(_QWORD *)(v57 + 24) = v61;
LABEL_86:
        v62 = *(unsigned int *)(v57 + 32);
        if (!(_DWORD)v62)
        {
          *(_DWORD *)(v57 + 32) = 8;
          *v59 = 8;
          v59[1] = *(_DWORD *)(v57 + 36);
          v62 = *(unsigned int *)(v57 + 32);
        }
        memcpy((char *)v59 + v62, v56, *(unsigned int *)(v57 + 36));
        v63 = *(_DWORD *)(v57 + 32) + *(_DWORD *)(v57 + 36);
        *(_DWORD *)(v57 + 32) = v63;
        **(_DWORD **)(v57 + 16) = v63;
        ++*(_QWORD *)(v57 + 40);
      }
LABEL_89:
      *(_QWORD *)(a1 + 72) = 0;
      v54 = *(_QWORD *)(a1 + 56);
      v55 -= v54;
    }
    while (v55);
  }
LABEL_90:
  free(v16);
  if (a6)
    *a6 = v19;
  return v19 != 0;
}

_BYTE *sub_20B8A3AE8(uint64_t a1, const Bytef *a2, uLong sourceLen, unsigned int a4, _QWORD *a5)
{
  _BYTE *v10;
  uLongf v11;
  uLongf destLen;

  destLen = compressBound(sourceLen) + 2 * a4;
  v10 = malloc_type_malloc(destLen, 0x6DA86883uLL);
  compress(&v10[2 * a4], &destLen, a2, sourceLen);
  sub_20B89DCE4(&v10[a4], sourceLen, a4, *(unsigned __int8 *)(a1 + 34));
  v11 = destLen;
  sub_20B89DCE4(v10, destLen + a4, a4, *(unsigned __int8 *)(a1 + 34));
  if (a5)
    *a5 = v11 + 2 * a4;
  return v10;
}

unint64_t sub_20B8A3BA0(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  size_t v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int *v34;
  int v35;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (__n + 4 + *(unsigned int *)(a1 + 36) <= v7)
      goto LABEL_11;
    v8 = (__n + 4) << 10;
    if (v8 >= __n + 262148)
      v8 = __n + 262148;
    v9 = v7 + v8;
  }
  else
  {
    v10 = (__n << 10) + 4096;
    if (v10 >= __n + 262148)
      v10 = __n + 262148;
    v9 = v10 + 32;
  }
  v6 = (*(uint64_t (**)(void))a1)();
  if (!v6)
    return 0;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v9;
LABEL_11:
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11)
  {
    v12 = *(_DWORD *)(a1 + 44);
    if (v12)
    {
      v13 = *(_DWORD *)(a1 + 40);
      if (v12 < v13)
      {
        *(_DWORD *)(a1 + 44) = v13;
        v12 = v13;
      }
      if (v12 < v11)
      {
        v14 = 0;
        v15 = __n + 4;
        v16 = v12;
        while (1)
        {
          v17 = *(_QWORD *)(a1 + 16);
          v18 = (_DWORD *)(v17 + v16);
          v19 = *(_DWORD *)(v17 + v16);
          if (!v19)
          {
            v20 = v18[1];
            v19 = v18[1];
            v21 = (_DWORD *)((char *)v18 + v20 + 4);
            v22 = v17 + v11;
            if ((unint64_t)v21 >= v22)
            {
              v23 = 0;
            }
            else
            {
              v23 = 0;
              do
              {
                if (*v21)
                  break;
                v24 = v21[1];
                v21 = (_DWORD *)((char *)v21 + v24 + 4);
                v19 += v24 + 4;
                ++v23;
              }
              while ((unint64_t)v21 < v22);
              v20 = v19;
            }
            if (v20 != __n && __n + 8 >= v20)
            {
              v27 = 0;
              if (v14)
                goto LABEL_37;
            }
            else
            {
              *(_DWORD *)(a1 + 48) -= v23;
              *v18 = __n;
              memcpy(v18 + 1, __src, __n);
              if (v20 > __n)
              {
                v26 = (_DWORD *)((char *)v18 + v15);
                v19 -= v15;
                *v26 = 0;
                v26[1] = v19;
                ++*(_DWORD *)(a1 + 48);
              }
              v27 = v16;
              if (v14)
                goto LABEL_37;
            }
            if (v19 > 0x1F || v27)
            {
              *(_DWORD *)(a1 + 44) = v16;
LABEL_37:
              if (v27)
              {
                v30 = *(_DWORD **)(a1 + 16);
                v30[4] = *(_DWORD *)(a1 + 44);
                goto LABEL_46;
              }
              v14 = 1;
              goto LABEL_39;
            }
            v14 = 0;
          }
LABEL_39:
          v16 += v19 + 4;
          v11 = *(unsigned int *)(a1 + 36);
          if (v16 >= v11)
          {
            if (!v14)
              break;
            v6 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 44);
            goto LABEL_45;
          }
        }
      }
      *(_DWORD *)(a1 + 44) = 0;
      v6 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v6 + 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0x2000000001;
    *(_DWORD *)(a1 + 40) = 32;
    *(_QWORD *)v6 = 32;
    *(_DWORD *)(v6 + 8) = -*(_DWORD *)(a1 + 32);
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(v6 + 20) = *(_DWORD *)(a1 + 48);
    *(_QWORD *)(v6 + 24) = -1;
  }
LABEL_45:
  v27 = *(unsigned int *)(a1 + 36);
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(v6 + v27) = __n;
  v28 = (*(_DWORD *)(a1 + 36) + 4);
  *(_DWORD *)(a1 + 36) = v28;
  memcpy((void *)(*(_QWORD *)(a1 + 16) + v28), __src, __n);
  v29 = *(_DWORD *)(a1 + 36) + __n;
  *(_DWORD *)(a1 + 36) = v29;
  v30 = *(_DWORD **)(a1 + 16);
  *v30 = v29;
LABEL_46:
  if (*(int *)(a1 + 32) >= 1)
  {
    v31 = *(_DWORD *)(a1 + 48);
    if (v31 >= 0x1389)
    {
      v32 = *(_DWORD *)(a1 + 40);
      v33 = 500;
      do
      {
        v34 = (_DWORD *)((char *)v30 + v32);
        v35 = *v34;
        if (!*v34)
          v35 = v34[1];
        v32 += v35 + 4;
        *(_DWORD *)(a1 + 40) = v32;
        --v33;
      }
      while (v33);
      v30[3] = v32;
      v31 = 4501;
      *(_DWORD *)(a1 + 48) = 4501;
    }
    v30[5] = v31;
  }
  return v27;
}

uint64_t sub_20B8A3EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v18;

  if (*(_BYTE *)(a1 + 33) && (*(_WORD *)(a1 + 36) & 0xFFFE) != 2)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 32))
    {
      v7 = *(_QWORD *)(v6 + 40);
      if (v7 >= a6)
      {
        if (v7 == a6)
        {
          *(_QWORD *)(v6 + 40) = a6 - 1;
          v8 = *(_DWORD *)(v6 + 32) - *(_DWORD *)(v6 + 36);
          *(_DWORD *)(v6 + 32) = v8;
          **(_DWORD **)(v6 + 16) = v8;
        }
        return 1;
      }
    }
    else
    {
      v10 = *(unsigned int *)(v6 + 36);
      if (v10 > a6)
      {
        v11 = *(_DWORD **)(v6 + 16);
        v12 = (_DWORD *)((char *)v11 + a6);
        v13 = *(unsigned int *)((char *)v11 + a6);
        if ((_DWORD)v13)
        {
          if (a6 + v13 + 4 == v10)
          {
            v14 = v10 - v13 - 4;
            *(_DWORD *)(v6 + 36) = v14;
            *v11 = v14;
            if (*(int *)(v6 + 32) >= 1)
            {
              v15 = *(_DWORD *)(v6 + 48) - 1;
              *(_DWORD *)(v6 + 48) = v15;
              v11[5] = v15;
            }
          }
          else
          {
            *v12 = 0;
            if (v13 >= 4 && *(_DWORD *)(v6 + 32) >= 1)
            {
              v12[1] = v13;
              if (v13 >= 0x20 && *(unsigned int *)(v6 + 40) < a6)
              {
                v18 = *(unsigned int *)(v6 + 44);
                if (!(_DWORD)v18 || v18 > a6)
                {
                  *(_DWORD *)(v6 + 44) = a6;
                  v11[4] = a6;
                }
              }
            }
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

BOOL sub_20B8A3FA8(uint64_t a1, int a2, CFArrayRef theArray, _QWORD *a4)
{
  int64_t Count;
  void **v8;
  unint64_t *v9;
  unint64_t *v10;
  const __CFData *v11;
  int v12;
  CFIndex k;
  const __CFData *v14;
  uint64_t v15;
  const void **v16;
  unint64_t *v17;
  int64_t v18;
  int v19;
  const void *v20;
  _DWORD *v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int64_t v28;
  _BOOL4 v29;
  _BOOL8 v30;
  CFMutableDataRef Mutable;
  uint64_t v32;
  CFIndex v33;
  char *v34;
  CFIndex v35;
  const __CFData *v36;
  const UInt8 *v37;
  size_t v38;
  UInt8 *v39;
  char v40;
  const Bytef *v41;
  uLong v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char *v48;
  char v49;
  int64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  size_t v55;
  unint64_t v56;
  _BOOL4 v57;
  char v58;
  CFIndex i;
  const __CFData *ValueAtIndex;
  int v61;
  const Bytef *BytePtr;
  uLong Length;
  _BYTE *v64;
  uint64_t v65;
  void **v66;
  size_t *v67;
  unint64_t *v68;
  size_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t j;
  unint64_t v74;
  void **v75;
  int64_t v76;
  void *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  const void *v81;
  _DWORD *v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  void **v89;
  void *v90;
  char v91;
  _QWORD *v92;
  CFIndex v93;
  unint64_t *v94;
  uint64_t v95;
  void **v97;
  unint64_t *v98;
  unint64_t *v99;
  CFIndex v100;
  int64_t v101;
  uint64_t v102;
  size_t *v103;
  char *v104;
  void *v105;
  unsigned __int8 v106;
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  CFIndex v110;

  Count = CFArrayGetCount(theArray);
  v8 = (void **)malloc_type_malloc(8 * Count, 0x10040436913F5uLL);
  v9 = (unint64_t *)malloc_type_malloc(8 * Count, 0x100004000313F17uLL);
  if (!*(_BYTE *)(a1 + 33))
    return 0;
  v10 = v9;
  if (!*(_BYTE *)(a1 + 32))
  {
    v103 = (size_t *)malloc_type_calloc(8uLL, Count, 0x3625C7F5uLL);
    v110 = 0;
    v109 = 0;
    v108 = 0;
    (*(void (**)(_QWORD, uint64_t *, unsigned __int8 *))(a1 + 120))(*(_QWORD *)(a1 + 128), &v109, &v108);
    if ((*(_WORD *)(a1 + 36) & 0xFFFE) != 2)
    {
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, i);
          v61 = *(unsigned __int8 *)(a1 + 35);
          BytePtr = CFDataGetBytePtr(ValueAtIndex);
          Length = CFDataGetLength(ValueAtIndex);
          if (v61)
            v64 = sub_20B8A3AE8(a1, BytePtr, Length, v108, &v110);
          else
            v64 = sub_20B89DC4C(BytePtr, Length, v108, *(unsigned __int8 *)(a1 + 34), (size_t *)&v110);
          v8[i] = v64;
          v103[i] = v110;
        }
      }
      if (Count)
      {
        v65 = *(_QWORD *)(a1 + 24);
        v28 = Count;
        v66 = v8;
        v67 = v103;
        v68 = v10;
        while (1)
        {
          v69 = *v67++;
          v70 = sub_20B8A3BA0(v65, *v66, v69);
          *v68 = v70;
          if (!v70)
            break;
          ++v68;
          ++v66;
          if (!--v28)
            goto LABEL_92;
        }
        LODWORD(v28) = -1;
LABEL_92:
        if (Count >= 1)
        {
          v75 = v8;
          v76 = Count;
          do
          {
            v77 = *v75++;
            free(v77);
            --v76;
          }
          while (v76);
        }
      }
      else
      {
        LODWORD(v28) = 0;
      }
      v29 = 0;
LABEL_124:
      free(v103);
      goto LABEL_125;
    }
    Mutable = CFDataCreateMutable(0, 0);
    v107 = 0;
    v106 = 0;
    (*(void (**)(_QWORD, uint64_t *, unsigned __int8 *))(a1 + 80))(0, &v109, &v106);
    v101 = Count - 1;
    if (Count < 1)
    {
      CFRelease(Mutable);
      if (*(_WORD *)(a1 + 36) != 2)
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 36) = *(_QWORD *)(a1 + 56);
      LODWORD(v28) = 0;
      v29 = a4 != 0;
      goto LABEL_124;
    }
    v32 = 0;
    v102 = 0;
    v33 = 0;
    v97 = v8;
    v99 = v10;
    v100 = Count;
    do
    {
      v34 = 0;
      v35 = v33;
      while (1)
      {
        v104 = v34;
        v36 = (const __CFData *)CFArrayGetValueAtIndex(theArray, v35);
        v37 = CFDataGetBytePtr(v36);
        v38 = CFDataGetLength(v36);
        v39 = sub_20B89DC4C(v37, v38, v106, *(unsigned __int8 *)(a1 + 34), (size_t *)&v110);
        if (a4)
        {
          v40 = *(_BYTE *)(a1 + 112);
          a4[v35] = (v102 << v40) + CFDataGetLength(Mutable);
        }
        CFDataAppendBytes(Mutable, v39, v110);
        if (CFDataGetBytePtr(v36) != v39)
          free(v39);
        v41 = CFDataGetBytePtr(Mutable);
        v42 = CFDataGetLength(Mutable);
        v43 = sub_20B8A3AE8(a1, v41, v42, v108, &v107);
        v44 = v43;
        v45 = v107;
        v46 = *(_QWORD *)(a1 + 56);
        Count = v100;
        if (v107 > v46 || v35 == v101)
          break;
        v32 = v107;
        if (v104)
        {
          free(v104);
          v32 = v107;
        }
        v47 = v35 + 1 < v100;
        if (v35 + 1 >= v100)
          v34 = 0;
        else
          v34 = v44;
        if (v35 + 1 < v100)
          ++v35;
        else
          v35 = v33;
        if (!v47 && v33 >= v100)
        {
          CFRelease(Mutable);
          v8 = v97;
          v10 = v99;
          v71 = v102;
          goto LABEL_81;
        }
      }
      v48 = v104;
      if (*(_WORD *)(a1 + 36) == 2 || v107 <= v46 || !v104)
      {
        if (v104)
        {
          free(v104);
          v45 = v107;
        }
        v33 = v35 + 1;
        v32 = v45;
        v48 = v44;
      }
      else
      {
        free(v43);
        v33 = v35;
      }
      v10 = v99;
      if (*(_WORD *)(a1 + 36) == 2)
      {
        v49 = 0;
        v97[v102] = v44;
        v8 = v97;
        v103[v102++] = v107;
      }
      else
      {
        v105 = v48;
        if (v32 < 1)
        {
          v49 = 0;
          v8 = v97;
        }
        else
        {
          v50 = *(_QWORD *)(a1 + 56);
          v51 = v48;
          while (1)
          {
            v52 = v102;
            v53 = malloc_type_calloc(1uLL, v50, 0x4E9EF2FEuLL);
            v54 = v53;
            v55 = v32 >= *(_QWORD *)(a1 + 56) ? *(_QWORD *)(a1 + 56) : v32;
            memmove(v53, v51, v55);
            v97[v102] = v54;
            v56 = *(_QWORD *)(a1 + 88);
            ++v102;
            if (v52 + 1 > v56)
              break;
            v50 = *(_QWORD *)(a1 + 56);
            v51 += v50;
            v47 = v32 <= v50;
            v32 -= v50;
            if (v47)
            {
              v49 = 0;
              v102 = v52 + 1;
              goto LABEL_63;
            }
          }
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Record count exceeds limit (%lld).\n", v56);
          v49 = 1;
LABEL_63:
          v8 = v97;
          v10 = v99;
        }
        free(v105);
      }
      CFDataSetLength(Mutable, 0);
    }
    while (v33 < v100 && (v49 & 1) == 0);
    CFRelease(Mutable);
    v71 = v102;
    if ((v49 & 1) != 0)
    {
      v57 = 0;
      LODWORD(v28) = -1;
      v58 = 1;
LABEL_115:
      if (v71 >= 1)
      {
        v89 = v8;
        do
        {
          v90 = *v89++;
          free(v90);
          --v71;
        }
        while (v71);
      }
      goto LABEL_118;
    }
LABEL_81:
    v72 = *(_QWORD *)(a1 + 24);
    if (*(_WORD *)(a1 + 36) == 2)
    {
      if (v71)
      {
        for (j = 0; j != v71; ++j)
        {
          v74 = sub_20B8A3BA0(v72, v8[j], v103[j]);
          v10[j] = v74;
          v57 = v74 != 0;
          if (!v74)
          {
            v58 = 0;
            LODWORD(v28) = -1;
            goto LABEL_115;
          }
        }
        v58 = 0;
        LODWORD(v28) = 0;
        goto LABEL_115;
      }
LABEL_113:
      LODWORD(v28) = 0;
      v58 = 0;
      v57 = 1;
LABEL_118:
      v29 = 0;
      if ((v58 & 1) == 0 && a4 && v57)
      {
        v91 = *(_BYTE *)(a1 + 112);
        v92 = a4;
        v93 = v100;
        do
        {
          *v92 = (*(_QWORD *)(a1 + 104) & *v92) + (v10[((*(_QWORD *)(a1 + 96) & *v92) >> v91)] << v91);
          ++v92;
          --v93;
        }
        while (v93);
        v29 = 1;
      }
      goto LABEL_124;
    }
    *(_DWORD *)(v72 + 36) = *(_QWORD *)(a1 + 56);
    if (!v71)
      goto LABEL_113;
    v78 = 0;
    while (1)
    {
      v79 = *(_DWORD *)(v72 + 36);
      if (v79)
        break;
      v86 = 0;
LABEL_111:
      v10[v78++] = v86;
      if (v71 == v78)
      {
        v58 = 0;
        LODWORD(v28) = 0;
        v57 = 1;
        goto LABEL_115;
      }
    }
    v80 = v71;
    v81 = v8[v78];
    v82 = *(_DWORD **)(v72 + 16);
    if (v82)
    {
      v83 = *(_DWORD *)(v72 + 32);
      v84 = *(_QWORD *)(v72 + 24);
      if (v84 >= v83 + v79)
        goto LABEL_106;
      v85 = v84 + (v79 << 10);
    }
    else
    {
      v85 = (v79 << 10) | 8u;
    }
    v82 = (_DWORD *)(*(uint64_t (**)(void))v72)();
    if (!v82)
    {
      v86 = 0;
LABEL_110:
      v71 = v80;
      goto LABEL_111;
    }
    *(_QWORD *)(v72 + 16) = v82;
    *(_QWORD *)(v72 + 24) = v85;
    v83 = *(_DWORD *)(v72 + 32);
LABEL_106:
    if (!v83)
    {
      *(_DWORD *)(v72 + 32) = 8;
      *v82 = 8;
      v82[1] = *(_DWORD *)(v72 + 36);
      v83 = *(_DWORD *)(v72 + 32);
    }
    v87 = *(_QWORD *)(v72 + 40);
    memcpy((char *)v82 + v83, v81, *(unsigned int *)(v72 + 36));
    v88 = *(_DWORD *)(v72 + 32) + *(_DWORD *)(v72 + 36);
    *(_DWORD *)(v72 + 32) = v88;
    **(_DWORD **)(v72 + 16) = v88;
    ++*(_QWORD *)(v72 + 40);
    v86 = v87 + 1;
    goto LABEL_110;
  }
  v11 = (const __CFData *)CFArrayGetValueAtIndex(theArray, 0);
  v12 = CFDataGetLength(v11);
  if (Count >= 1)
  {
    for (k = 0; k != Count; ++k)
    {
      v14 = (const __CFData *)CFArrayGetValueAtIndex(theArray, k);
      v8[k] = (void *)CFDataGetBytePtr(v14);
    }
  }
  v15 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v15 + 36) = v12;
  if (!Count)
  {
    LODWORD(v28) = 0;
    v29 = 0;
    goto LABEL_125;
  }
  v16 = (const void **)v8;
  v98 = v10;
  v17 = v10;
  v18 = Count;
  do
  {
    v19 = *(_DWORD *)(v15 + 36);
    if (!v19)
    {
LABEL_18:
      v27 = 0;
      goto LABEL_19;
    }
    v20 = *v16;
    v21 = *(_DWORD **)(v15 + 16);
    if (v21)
    {
      v22 = *(_DWORD *)(v15 + 32);
      v23 = *(_QWORD *)(v15 + 24);
      if (v23 >= v22 + v19)
        goto LABEL_15;
      v24 = v23 + (v19 << 10);
    }
    else
    {
      v24 = (v19 << 10) | 8u;
    }
    v21 = (_DWORD *)(*(uint64_t (**)(void))v15)();
    if (!v21)
      goto LABEL_18;
    *(_QWORD *)(v15 + 16) = v21;
    *(_QWORD *)(v15 + 24) = v24;
    v22 = *(_DWORD *)(v15 + 32);
LABEL_15:
    if (!v22)
    {
      *(_DWORD *)(v15 + 32) = 8;
      *v21 = 8;
      v21[1] = *(_DWORD *)(v15 + 36);
      v22 = *(_DWORD *)(v15 + 32);
    }
    v25 = *(_QWORD *)(v15 + 40);
    memcpy((char *)v21 + v22, v20, *(unsigned int *)(v15 + 36));
    v26 = *(_DWORD *)(v15 + 32) + *(_DWORD *)(v15 + 36);
    *(_DWORD *)(v15 + 32) = v26;
    **(_DWORD **)(v15 + 16) = v26;
    ++*(_QWORD *)(v15 + 40);
    v27 = v25 + 1;
LABEL_19:
    *v17++ = v27;
    ++v16;
    --v18;
  }
  while (v18);
  LODWORD(v28) = 0;
  v29 = 0;
  v10 = v98;
LABEL_125:
  v30 = (_DWORD)v28 == 0;
  if (!(_DWORD)v28 && Count >= 1 && a4 && !v29)
  {
    v94 = v10;
    do
    {
      v95 = *v94++;
      *a4++ = v95;
      --Count;
    }
    while (Count);
  }
  free(v10);
  free(v8);
  return v30;
}

uint64_t sub_20B8A4810(uint64_t a1)
{
  const char *v2;
  int v3;
  int v4;
  const std::__fs::filesystem::path *v6;
  std::error_code *v7;

  v2 = (const char *)sub_20B8A1334(a1);
  if (sub_20B8A159C(a1))
    v3 = open(v2, 2562, 438);
  else
    v3 = open(v2, 2560, 438);
  if (v3 != -1)
  {
    v4 = v3;
    if (lseek(v3, 63, 0) != -1 && write(v4, &unk_20BA6DA41, 1uLL) == 1)
    {
      close(v4);
      return 1;
    }
    close(v4);
    v6 = (const std::__fs::filesystem::path *)sub_20B8A1334(a1);
    remove(v6, v7);
  }
  return 0;
}

uint64_t sub_20B8A48C8(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (*(_BYTE *)(result + 32) || *(_WORD *)(result + 36) == 3)
  {
    v1 = *(_QWORD *)(result + 24);
    v2 = *(unsigned int *)(v1 + 32);
    if (*(_QWORD *)(v1 + 24) > v2)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))v1)(*(_QWORD *)(v1 + 16), *(unsigned int *)(v1 + 32), *(_QWORD *)(v1 + 8));
      if (result)
      {
        *(_QWORD *)(v1 + 16) = result;
        *(_QWORD *)(v1 + 24) = v2;
      }
    }
  }
  return result;
}

uint64_t sub_20B8A4920(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;

  if (*(_BYTE *)(a1 + 32) || *(_WORD *)(a1 + 36) == 3)
  {
    v1 = *(_QWORD *)(a1 + 24);
    v2 = (unsigned int *)(v1 + 32);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 24);
    v2 = (unsigned int *)(v1 + 36);
  }
  return msync((void *)(*(_QWORD *)(v1 + 16) - 64), *v2 + 64, 16);
}

BOOL sub_20B8A4964(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  BOOL v5;
  const char *v6;
  int v7;
  int v8;
  _DWORD *v9;
  unsigned int *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  off_t v20;

  v3 = *(unsigned __int8 *)(a1 + 38);
  result = *(_BYTE *)(a1 + 38) == 0;
  if (v3)
    v5 = 1;
  else
    v5 = a2 == 0;
  if (!v5)
  {
    v20 = 0;
    v6 = (const char *)sub_20B8A1334(*(_QWORD *)(a1 + 8));
    v7 = open(v6, 2 * *(unsigned __int8 *)(a1 + 33));
    if (v7 == -1)
      return 0;
    v8 = v7;
    v9 = (_DWORD *)sub_20B8A2D90(v7, *(unsigned __int8 *)(a1 + 33), &v20);
    close(v8);
    if (v9 == (_DWORD *)-1)
      return 0;
    v10 = v9 + 16;
    v11 = v20 - 64;
    v20 -= 64;
    if (!*(_BYTE *)(a1 + 32) && *(_WORD *)(a1 + 36) != 3)
    {
      v12 = malloc_type_malloc(0x38uLL, 0x10900408C52C49CuLL);
      if (v12)
      {
        *v12 = sub_20B8A4B28;
        v12[1] = a1;
        v12[2] = v10;
        v12[3] = v11;
        *((_DWORD *)v12 + 8) = 0;
        v12[5] = 0;
        *((_DWORD *)v12 + 12) = 0;
        if (v11 >= 4 && (v15 = *v10, v11 >= v15))
        {
          *((_DWORD *)v12 + 9) = v15;
          if (v15 >= 0x20 && !v9[17])
          {
            v19 = -v9[18] & ((int)v9[18] >> 31);
            *((_DWORD *)v12 + 8) = v19;
            if (v19 >= 1)
            {
              *((_DWORD *)v12 + 10) = v9[19];
              *((_DWORD *)v12 + 11) = v9[20];
              *((_DWORD *)v12 + 12) = v9[21];
            }
          }
        }
        else
        {
          *((_DWORD *)v12 + 9) = 0;
        }
      }
      goto LABEL_15;
    }
    v12 = malloc_type_malloc(0x30uLL, 0x109004033C35484uLL);
    if (!v12)
    {
LABEL_15:
      *(_QWORD *)(a1 + 24) = v12;
      return 1;
    }
    *v12 = sub_20B8A4B28;
    v12[1] = a1;
    v12[2] = v10;
    v12[3] = v11;
    if (v11 >= 4 && (v13 = *v10, v11 >= v13))
    {
      *((_DWORD *)v12 + 8) = v13;
      v16 = v13 >= 8;
      v17 = v13 - 8;
      if (v16)
      {
        v18 = v9[17];
        *((_DWORD *)v12 + 9) = v18;
        if (!v18)
          goto LABEL_15;
        v14 = v17 / v18;
        goto LABEL_14;
      }
    }
    else
    {
      *((_DWORD *)v12 + 8) = 0;
    }
    v14 = 0;
    *((_DWORD *)v12 + 9) = 0;
LABEL_14:
    v12[5] = v14;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_20B8A4B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const char *v6;
  int v7;
  int v8;
  void *v9;
  off_t st_size;
  uint64_t v11;
  stat v13;

  v5 = *(unsigned __int8 *)(a3 + 33);
  v6 = (const char *)sub_20B8A1334(*(_QWORD *)(a3 + 8));
  v7 = open(v6, 2 * v5);
  if (v7 == -1)
    return 0;
  v8 = v7;
  if (fstat(v7, &v13) == -1)
    return 0;
  v9 = (void *)(a1 - 64);
  st_size = v13.st_size;
  msync(v9, v13.st_size, 16);
  munmap(v9, st_size);
  if (ftruncate(v8, a2 + 64) == -1)
    return 0;
  v11 = sub_20B8A2D90(v8, v5 != 0, 0);
  close(v8);
  return v11 + 64;
}

uint64_t sub_20B8A4BF4(uint64_t result, int a2)
{
  unsigned int *v2;
  unsigned int *v3;
  size_t v4;
  char *v5;

  if (a2)
  {
    if (*(_BYTE *)(result + 32) || *(_WORD *)(result + 36) == 3)
    {
      v2 = *(unsigned int **)(result + 24);
      v3 = v2 + 8;
    }
    else
    {
      v2 = *(unsigned int **)(result + 24);
      v3 = v2 + 9;
    }
    v4 = *v3;
    v5 = (char *)*((_QWORD *)v2 + 2);
    free(v2);
    v5 -= 64;
    v4 += 64;
    msync(v5, v4, 16);
    return munmap(v5, v4);
  }
  return result;
}

uint64_t sub_20B8A4C68()
{
  return 0;
}

uint64_t sub_20B8A4C70()
{
  return 0;
}

uint64_t sub_20B8A4C78()
{
  return 0;
}

uint64_t sub_20B8A4C80()
{
  return 0;
}

BOOL sub_20B8A4C88(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 35) && *(_BYTE *)(a1 + 113) == 0;
}

uint64_t sub_20B8A4CA8(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  const void *v6;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  if (result)
  {
    v5 = result;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result) & 0x200) != 0)
    {
      v6 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionaryAddValue(a2, CFSTR("predictionCandidateAccepted"), (const void *)*MEMORY[0x24BDBD270]);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x20000) != 0)
        CFDictionaryAddValue(a2, CFSTR("lstmPredictionCandidateAccepted"), v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x400000) != 0)
        CFDictionaryAddValue(a2, CFSTR("unilmPredictionCandidateAccepted"), v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x40000) != 0)
        CFDictionaryAddValue(a2, CFSTR("ngramPredictionCandidateAccepted"), v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x80000) != 0)
        CFDictionaryAddValue(a2, CFSTR("lexiconCompletionPredictionCandidateAccepted"), v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x800) != 0)
        CFDictionaryAddValue(a2, CFSTR("lexiconDynamicLearningCandidateAccepted"), v6);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x40) != 0)
        CFDictionaryAddValue(a2, CFSTR("emojiCandidateAccepted"), v6);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20B8A4E4C()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8A4E60(uint64_t a1, _QWORD *a2)
{
  BOOL v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  unsigned __int8 v7;
  uint64_t v8;
  _BOOL4 v9;

  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24C45F6A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 64) = sub_20B8A159C((uint64_t)a2);
  v4 = sub_20B8A163C((uint64_t)a2);
  *(_WORD *)(a1 + 66) = 0;
  *(_BYTE *)(a1 + 65) = v4;
  v5 = (const __CFDictionary *)a2[1];
  if (v5)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("TrieIndexCompressionType"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(a1 + 66));
  }
  v7 = sub_20B8A13E4(a2);
  v8 = sub_20B8A14E0((uint64_t)a2);
  v9 = sub_20B8A163C((uint64_t)a2);
  *(_QWORD *)(a1 + 160) = sub_20B89DB24(v7, v8, v9, (_QWORD *)(a1 + 168));
  return a1;
}

void sub_20B8A4F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8A2CE0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A4F44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C45F6A8;
  v2 = a1[9];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  v3 = a1[16];
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1060C8043D569EALL);
  v4 = a1[6];
  if (v4)
    MEMORY[0x20BD39C80](v4, 0x1000C8077774924);
  return sub_20B8A2CE0((uint64_t)a1);
}

void sub_20B8A4FC8(_QWORD *a1)
{
  sub_20B8A4F44(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8A4FEC(uint64_t a1, unsigned __int16 *__src, uint64_t a3, CFStringRef theString1)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  unsigned __int16 *v17;
  unsigned int v18;

  if (*(CFStringRef *)(a1 + 96) == theString1)
    goto LABEL_26;
  if (CFStringCompare(theString1, CFSTR("IDXExactMatch"), 0))
  {
    if (CFStringCompare(theString1, CFSTR("IDXExactMatchVoicedAmbi"), 0))
    {
      if (CFStringCompare(theString1, CFSTR("IDXExactMatchSmallAmbi"), 0))
      {
        if (CFStringCompare(theString1, CFSTR("IDXExactMatchVoicedAndSmallAmbi"), 0))
        {
          if (CFStringCompare(theString1, CFSTR("IDXCommonPrefixMatch"), 0))
          {
            if (CFStringCompare(theString1, CFSTR("IDXPrefixMatch"), 0) == kCFCompareEqualTo)
            {
LABEL_24:
              v9 = 1;
              goto LABEL_25;
            }
            if (CFStringCompare(theString1, CFSTR("IDXPrefixMatchVoicedAmbi"), 0))
            {
              if (CFStringCompare(theString1, CFSTR("IDXPrefixMatchSmallAmbi"), 0))
              {
                if (CFStringCompare(theString1, CFSTR("IDXPrefixMatchVoicedAndSmallAmbi"), 0))
                {
                  if (CFStringCompare(theString1, CFSTR("IDXWildcardMatch"), 0))
                  {
                    if (CFStringCompare(theString1, CFSTR("IDXAllMatch"), 0))
                      return 0;
                    a3 = 0;
                    __src = 0;
                    goto LABEL_24;
                  }
                  v9 = 3;
                }
                else
                {
                  v9 = 9;
                }
              }
              else
              {
                v9 = 8;
              }
            }
            else
            {
              v9 = 7;
            }
          }
          else
          {
            v9 = 2;
          }
        }
        else
        {
          v9 = 6;
        }
      }
      else
      {
        v9 = 5;
      }
    }
    else
    {
      v9 = 4;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_25:
  *(_DWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 96) = theString1;
LABEL_26:
  if (a3 > *(_QWORD *)(a1 + 80))
  {
    *(_QWORD *)(a1 + 80) = a3 + 128;
    v10 = *(_QWORD *)(a1 + 72);
    if (v10)
      MEMORY[0x20BD39C80](v10, 0x1000C80BDFB0063);
    *(_QWORD *)(a1 + 72) = operator new[]();
    v11 = *(_QWORD *)(a1 + 128);
    if (v11)
      MEMORY[0x20BD39C80](v11, 0x1060C8043D569EALL);
    v12 = *(_QWORD *)(a1 + 80);
    is_mul_ok(v12, 0x18uLL);
    v13 = operator new[]();
    if (v12)
    {
      v14 = v13;
      do
      {
        *(_WORD *)v14 = 0;
        *(_QWORD *)(v14 + 12) = 0;
        *(_QWORD *)(v14 + 4) = 0;
        *(_DWORD *)(v14 + 20) = 0;
        v14 += 24;
      }
      while (v14 != v13 + 24 * v12);
    }
    *(_QWORD *)(a1 + 128) = v13;
  }
  *(_QWORD *)(a1 + 88) = 2 * a3;
  if (a3 >= 1 && __src)
  {
    v15 = *(_WORD **)(a1 + 72);
    if (*(_BYTE *)(a1 + 65))
    {
      v16 = v15 + 1;
      v17 = __src + 1;
      do
      {
        v18 = *v17++;
        *v16++ = bswap32(v18) >> 16;
        --a3;
      }
      while (a3);
    }
    else
    {
      memcpy(v15, __src, 2 * a3);
    }
  }
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 1;
  *(_QWORD *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_20B8A52F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_20B8A5300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_20B8A5330(a1, a2, a3, a4, 0, 0, 0, 0, 0);
}

uint64_t sub_20B8A5330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v9 = a7;
  v10 = a6;
  v75 = a8;
  v74 = 0;
  if (*(_QWORD *)(a1 + 88))
    v15 = *(unsigned __int8 **)(a1 + 72);
  else
    v15 = 0;
  v16 = a9;
  v17 = *(_QWORD *)(a1 + 152);
  if (v17)
  {
    v18 = sub_20B8A5874(a1, v17, 0, *(_DWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), a2, a3, a4, a5, a6, a7, &v75, (size_t *)&v74);
    a2 -= v18;
    v19 = v74;
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  if (a2 >= 1 && !v19)
  {
    if (!*(_BYTE *)(a1 + 108))
    {
      if ((*(_DWORD *)(a1 + 104) & 0xFFFFFFFD) != 0)
        v22 = a2;
      else
        v22 = 1;
      v23 = 3 * v22;
      v24 = operator new[]();
      v26 = v24 + 8 * v23;
      v27 = v24;
      v28 = v24;
      do
      {
        *(_WORD *)v28 = 0;
        *(_QWORD *)(v28 + 12) = 0;
        *(_QWORD *)(v28 + 4) = 0;
        *(_DWORD *)(v28 + 20) = 0;
        v28 += 24;
      }
      while (v28 != v26);
      v72 = v24;
      v70 = a5;
      v69 = a4;
      switch(*(_DWORD *)(a1 + 104))
      {
        case 0:
          v29 = *(_QWORD *)(a1 + 24);
          v30 = *(_QWORD *)(a1 + 88);
          if (*(_WORD *)(a1 + 66))
            v31 = sub_20B969160(v29, v15, v30, v25);
          else
            v31 = sub_20B963D24(v29, v15, v30);
          if (v31 < 1)
          {
            v32 = 0;
            v54 = 1;
          }
          else
          {
            *(_DWORD *)(v27 + 8) = v31;
            v54 = 1;
            v32 = 1;
          }
          goto LABEL_56;
        case 1:
          v34 = *(int **)(a1 + 24);
          v35 = *(_QWORD *)(a1 + 88);
          v36 = *(_QWORD *)(a1 + 112);
          if (*(_WORD *)(a1 + 66))
            v32 = sub_20BA18380(v34, (char *)v15, v35, v36, a2, 0, v27, v25);
          else
            v32 = sub_20B9269B0((uint64_t)v34, v15, v35, v36, a2, 0, v27);
          goto LABEL_55;
        case 2:
          v37 = *(_QWORD *)(a1 + 112);
          v33 = *(_QWORD *)(a1 + 128);
          if (v37)
          {
            v33 += 24 * v37;
            v32 = *(_QWORD *)(a1 + 120) - v37;
          }
          else
          {
            v32 = sub_20B963DBC(*(_QWORD *)(a1 + 24), (uint64_t)v15, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 128));
            *(_QWORD *)(a1 + 120) = v32;
          }
          v54 = 1;
          goto LABEL_57;
        case 3:
          v38 = *(unsigned int **)(a1 + 24);
          v39 = *(_QWORD *)(a1 + 88);
          if (*(_WORD *)(a1 + 66))
            v32 = sub_20B8FB198(v38, (unsigned __int16 *)v15, v39, 2u, *(_QWORD *)(a1 + 112), a2, v27, 0, v25);
          else
            v32 = sub_20B9F5F60((uint64_t)v38, (uint64_t)v15, v39, *(_BYTE *)(a1 + 65) == 0, 2u, *(_QWORD *)(a1 + 112), a2, v27);
          goto LABEL_55;
        case 4:
          if (*(_WORD *)(a1 + 66))
            goto LABEL_45;
          v40 = *(_QWORD *)(a1 + 24);
          v41 = *(_QWORD *)(a1 + 88);
          v42 = *(_QWORD *)(a1 + 112);
          v43 = (uint64_t)v15;
          v44 = a2;
          v45 = v27;
          v46 = 10;
          goto LABEL_39;
        case 5:
          if (*(_WORD *)(a1 + 66))
            goto LABEL_45;
          v40 = *(_QWORD *)(a1 + 24);
          v41 = *(_QWORD *)(a1 + 88);
          v42 = *(_QWORD *)(a1 + 112);
          v43 = (uint64_t)v15;
          v44 = a2;
          v45 = v27;
          v46 = 12;
          goto LABEL_39;
        case 6:
          if (*(_WORD *)(a1 + 66))
            goto LABEL_45;
          v40 = *(_QWORD *)(a1 + 24);
          v41 = *(_QWORD *)(a1 + 88);
          v42 = *(_QWORD *)(a1 + 112);
          v43 = (uint64_t)v15;
          v44 = a2;
          v45 = v27;
          v46 = 14;
LABEL_39:
          v32 = sub_20B927224(v40, v43, v41, v42, v44, v45, v46);
          goto LABEL_55;
        case 7:
          if (*(_WORD *)(a1 + 66))
            goto LABEL_45;
          v47 = *(_QWORD *)(a1 + 24);
          v48 = *(_QWORD *)(a1 + 88);
          v49 = *(_QWORD *)(a1 + 112);
          v50 = (uint64_t)v15;
          v51 = a2;
          v52 = v27;
          v53 = 10;
          goto LABEL_54;
        case 8:
          if (*(_WORD *)(a1 + 66))
            goto LABEL_45;
          v47 = *(_QWORD *)(a1 + 24);
          v48 = *(_QWORD *)(a1 + 88);
          v49 = *(_QWORD *)(a1 + 112);
          v50 = (uint64_t)v15;
          v51 = a2;
          v52 = v27;
          v53 = 12;
          goto LABEL_54;
        case 9:
          if (*(_WORD *)(a1 + 66))
          {
LABEL_45:
            v32 = 0;
          }
          else
          {
            v47 = *(_QWORD *)(a1 + 24);
            v48 = *(_QWORD *)(a1 + 88);
            v49 = *(_QWORD *)(a1 + 112);
            v50 = (uint64_t)v15;
            v51 = a2;
            v52 = v27;
            v53 = 14;
LABEL_54:
            v32 = sub_20B92778C(v47, v50, v48, v49, v51, v52, v53);
          }
LABEL_55:
          v54 = v32 < a2;
LABEL_56:
          v33 = v27;
LABEL_57:
          *(_BYTE *)(a1 + 108) = v54;
LABEL_58:
          v19 = 0;
          v55 = 0;
          v56 = v33 + 8;
          v71 = v33 + 8;
          break;
        default:
          v32 = 0;
          v33 = v27;
          goto LABEL_58;
      }
      do
      {
        v57 = v10;
        v58 = v9;
        v59 = v32;
        if (v55 <= v32)
          v60 = v32;
        else
          v60 = v55;
        v61 = (unsigned int *)(v56 + 24 * v55);
        do
        {
          if (v60 == v55)
          {
            v55 = v60;
            v32 = v59;
            goto LABEL_74;
          }
          ++v55;
          v62 = *v61;
          v61 += 6;
          v63 = (unsigned int *)sub_20B8A5A24(a1, v62, 0);
        }
        while (!v63);
        if (*(_BYTE *)(a1 + 65))
          v64 = bswap32(*v63);
        else
          v64 = *v63;
        v9 = v58;
        v10 = v57;
        v65 = sub_20B8A5874(a1, (uint64_t)v63, 4, v64, 0, a2, a3 + 8 * v18, v69 + 8 * v18, v70, v57 + 16 * v18, v58, &v75, (size_t *)&v74);
        a2 -= v65;
        v18 += v65;
        v19 = v74;
        if (a2)
          v66 = v74 < 1;
        else
          v66 = 0;
        v56 = v71;
        v32 = v59;
      }
      while (v66);
LABEL_74:
      if (*(_BYTE *)(a1 + 108))
        v67 = v55 == v32;
      else
        v67 = 0;
      v68 = v67;
      *(_BYTE *)(a1 + 108) = v68;
      *(_QWORD *)(a1 + 112) += v55;
      MEMORY[0x20BD39C80](v72, 0x1060C8043D569EALL);
      v16 = a9;
      if (!a9)
        return v18;
      goto LABEL_12;
    }
    v19 = 0;
  }
  if (!a9)
    return v18;
LABEL_12:
  if (*(_BYTE *)(a1 + 108))
  {
    v20 = *(_QWORD *)(a1 + 152);
    if (!v20)
      goto LABEL_16;
  }
  if (!v18)
  {
    v20 = v19 + 16;
LABEL_16:
    *v16 = v20;
  }
  return v18;
}

uint64_t sub_20B8A5824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  *a5 = a4;
  if (a6)
    *a6 = a3;
  if (!a2)
    a2 = 1000;
  return sub_20B8A5330(a1, a2, 0, 0, 1, a4, a4, a4 + a3, a6);
}

uint64_t sub_20B8A5874(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, _QWORD *a12, size_t *a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int8 v30;

  v14 = a3;
  v15 = a1;
  v16 = 0;
  v17 = a2 + a3;
  *(_QWORD *)(a1 + 152) = 0;
  v18 = a4;
  while (1)
  {
    v30 = 0;
    v19 = (*(uint64_t (**)(_QWORD, size_t, unsigned __int8 *))(v15 + 160))(*(_QWORD *)(v15 + 168), v17, &v30);
    v20 = v19;
    if (!a9)
      break;
    v21 = (void *)(*a12 - v19);
    if (a10 + 16 * (v16 + 1) > (unint64_t)v21)
    {
      *a13 = v20;
      v17 = a2 + v30 + v20 + v14;
      ++a5;
LABEL_11:
      v15 = a1;
      goto LABEL_13;
    }
    *a12 = v21;
    memmove(v21, (const void *)(v17 + v30), v20);
    v22 = (_QWORD *)(a10 + 16 * v16);
    *v22 = *a12 - a11;
    v22[1] = v20;
    v14 += v20 + v30;
    v17 = a2 + v14;
    ++a5;
    if (v16 + 1 == a6)
    {
      v16 = a6;
      goto LABEL_11;
    }
    ++v16;
    v15 = a1;
LABEL_7:
    if (a5 == v18)
      return v16;
  }
  *(_QWORD *)(a8 + 8 * v16) = v19;
  v23 = v30;
  *(_QWORD *)(a7 + 8 * v16++) = v17 + v30;
  v14 += v19 + v23;
  v17 = a2 + v14;
  ++a5;
  if (v16 != a6)
    goto LABEL_7;
  v16 = a6;
LABEL_13:
  if (a5 < v18)
  {
    *(_QWORD *)(v15 + 144) = a5;
    *(_QWORD *)(v15 + 152) = v17;
    *(_QWORD *)(v15 + 136) = v18;
  }
  return v16;
}

uint64_t sub_20B8A5A24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40)))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), a2, a3);
  v7 = *(_QWORD *)(a1 + 48);
  if (!v7)
  {
    *(_QWORD *)(a1 + 56) = 0x8000;
    v7 = operator new[]();
    *(_QWORD *)(a1 + 48) = v7;
  }
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 56), v7);
  if (v8 > *(_QWORD *)(a1 + 56))
  {
    v9 = *(_QWORD *)(a1 + 48);
    if (v9)
      MEMORY[0x20BD39C80](v9, 0x1000C8077774924);
    *(_QWORD *)(a1 + 56) = v8;
    v10 = operator new[]();
    *(_QWORD *)(a1 + 48) = v10;
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 56), v10);
  }
  if (a3)
    *a3 = v8;
  return *(_QWORD *)(a1 + 48);
}

BOOL sub_20B8A5B44(uint64_t a1, void *a2, uint8x8_t a3)
{
  _BOOL8 result;
  unsigned __int8 *v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int *v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  _WORD v24[2];
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  result = 0;
  v28 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 **)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 88);
  v24[0] = 0;
  v26 = 0;
  v25 = 0;
  v27 = 0;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(_DWORD *)(a1 + 104);
    if (a2 && v8 == 2)
    {
      if ((int)((v6 >> 1) - 1) < 0)
        return 0;
      bzero(a2, (v6 >> 1));
      v8 = *(_DWORD *)(a1 + 104);
    }
    result = 0;
    switch(v8)
    {
      case 0:
        v9 = *(_QWORD *)(a1 + 24);
        if (*(_WORD *)(a1 + 66))
        {
          v10 = sub_20B969160(v9, v5, v6, a3) == 0;
          goto LABEL_35;
        }
        return (int)sub_20B963D24(v9, v5, v6) > 0;
      case 1:
        v11 = *(int **)(a1 + 24);
        if (*(_WORD *)(a1 + 66))
        {
          v22 = 0;
          v23 = 0;
          sub_20B968BE8((uint64_t)v11, *v11, v5, v6, &v23, 1uLL, &v22, (uint64_t)v24, a3, 0, (uint64_t)v5);
          v10 = v22 == 0;
          goto LABEL_35;
        }
        v13 = sub_20B9269B0((uint64_t)v11, v5, v6, 0, 1uLL, 0, (uint64_t)v24);
        goto LABEL_34;
      case 3:
        v12 = *(unsigned int **)(a1 + 24);
        if (*(_WORD *)(a1 + 66))
          v13 = sub_20B8FB198(v12, (unsigned __int16 *)v5, v6, 2u, 0, 1uLL, (uint64_t)v24, 0, a3);
        else
          v13 = sub_20B9F5F60((uint64_t)v12, (uint64_t)v5, v6, *(_BYTE *)(a1 + 65) == 0, 2u, 0, 1uLL, (uint64_t)v24);
        goto LABEL_34;
      case 4:
        if (*(_WORD *)(a1 + 66))
          return 0;
        v14 = *(_QWORD *)(a1 + 24);
        v15 = (uint64_t)v5;
        v16 = v6;
        v17 = 10;
        goto LABEL_22;
      case 5:
        if (*(_WORD *)(a1 + 66))
          return 0;
        v14 = *(_QWORD *)(a1 + 24);
        v15 = (uint64_t)v5;
        v16 = v6;
        v17 = 12;
        goto LABEL_22;
      case 6:
        if (*(_WORD *)(a1 + 66))
          return 0;
        v14 = *(_QWORD *)(a1 + 24);
        v15 = (uint64_t)v5;
        v16 = v6;
        v17 = 14;
LABEL_22:
        v13 = sub_20B927224(v14, v15, v16, 0, 1uLL, (uint64_t)v24, v17);
        goto LABEL_34;
      case 7:
        if (*(_WORD *)(a1 + 66))
          return 0;
        v18 = *(_QWORD *)(a1 + 24);
        v19 = (uint64_t)v5;
        v20 = v6;
        v21 = 10;
        goto LABEL_33;
      case 8:
        if (*(_WORD *)(a1 + 66))
          return 0;
        v18 = *(_QWORD *)(a1 + 24);
        v19 = (uint64_t)v5;
        v20 = v6;
        v21 = 12;
        goto LABEL_33;
      case 9:
        if (*(_WORD *)(a1 + 66))
          return 0;
        v18 = *(_QWORD *)(a1 + 24);
        v19 = (uint64_t)v5;
        v20 = v6;
        v21 = 14;
LABEL_33:
        v13 = sub_20B92778C(v18, v19, v20, 0, 1uLL, (uint64_t)v24, v21);
LABEL_34:
        v10 = v13 == 0;
LABEL_35:
        result = !v10;
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL sub_20B8A5E10(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const void *a4, size_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  size_t v19;
  size_t v20;
  size_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t *v31;
  size_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  size_t v35[2];

  v35[1] = *MEMORY[0x24BDAC8D0];
  v35[0] = a5;
  if (!*(_BYTE *)(a1 + 64) || *(_WORD *)(a1 + 66))
    return 0;
  v12 = 2 * a3;
  MEMORY[0x24BDAC7A8]();
  if (*(_BYTE *)(a1 + 65))
  {
    if (v13)
    {
      for (i = 0; i != v13; ++i)
        *(_WORD *)((char *)&v27 + 2 * i - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 2) = bswap32(*(unsigned __int16 *)&a2[2 * i + 2]) >> 16;
    }
    a2 = (unsigned __int8 *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  v34 = 0;
  v33 = 0;
  (*(void (**)(_QWORD, uint64_t *, unsigned __int8 *))(a1 + 160))(*(_QWORD *)(a1 + 168), &v34, &v33);
  v15 = sub_20B89DC4C(a4, a5, v33, *(unsigned __int8 *)(a1 + 65), v35);
  v16 = sub_20B963D24(*(_QWORD *)(a1 + 24), a2, v12);
  if (v16 < 1)
  {
    v20 = v35[0];
    v21 = v35[0] + 4;
    v22 = malloc_type_malloc(v35[0] + 4, 0xDFE39E8EuLL);
    memcpy(v22 + 1, v15, v20);
    if (*(_BYTE *)(a1 + 65))
      v24 = 0x1000000;
    else
      v24 = 1;
    *v22 = v24;
  }
  else
  {
    v28 = a6;
    v30 = v12;
    v31 = &v27;
    v32 = 0;
    v17 = v16;
    v18 = (_DWORD *)sub_20B8A5A24(a1, v16, (uint64_t *)&v32);
    v19 = v32;
    v20 = v35[0];
    v21 = v35[0] + v32;
    v22 = malloc_type_malloc(v35[0] + v32, 0xC3CD8DA7uLL);
    memcpy(v22, v18, v32);
    v29 = v15;
    memcpy((char *)v22 + v19, v15, v20);
    if (*(_BYTE *)(a1 + 65))
      v23 = bswap32(bswap32(*v18) + 1);
    else
      v23 = *v18 + 1;
    *v22 = v23;
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), 0, 0, 0, 0, v17);
    v12 = v30;
    a6 = v28;
    v15 = v29;
  }
  if (v20 != a5)
    free(v15);
  v32 = 0;
  v25 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *, size_t, size_t *))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40), 0, 0, v22, v21, &v32);
  free(v22);
  if (!v25)
    return 0;
  v26 = sub_20B963E6C(*(_QWORD *)(a1 + 24), (uint64_t)a2, v12, v32);
  if (a6)
    *a6 = 0;
  sub_20B8A60E0(a1);
  return v26 == 0;
}

uint64_t sub_20B8A60E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (*(_WORD *)(a1 + 66))
  {
    if (v2)
    {
      v3 = v2[1];
      v4 = v2[2] - v3 + v2[3];
    }
    else
    {
      v4 = 0;
      v3 = 0;
    }
  }
  else
  {
    v4 = 8 * (*((_DWORD *)v2 + 4) + 259) + 16;
    v3 = *v2;
  }
  msync((void *)(v3 - 64), v4 + 64, 16);
  return sub_20B8A4920(*(_QWORD *)(a1 + 40));
}

BOOL sub_20B8A6154(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const void *a4, size_t a5)
{
  _BOOL8 v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  int v26;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  const void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64) && !*(_WORD *)(a1 + 66))
  {
    v10 = 2 * a3;
    MEMORY[0x24BDAC7A8]();
    if (*(_BYTE *)(a1 + 65))
    {
      if (v11)
      {
        for (i = 0; i != v11; ++i)
          *(_WORD *)((char *)&v28 + 2 * i - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 2) = bswap32(*(unsigned __int16 *)&a2[2 * i + 2]) >> 16;
      }
      a2 = (unsigned __int8 *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    }
    v13 = sub_20B963D24(*(_QWORD *)(a1 + 24), a2, v10);
    if (v13 < 1)
      return 0;
    v36[0] = 0;
    v14 = v13;
    v15 = (unsigned int *)sub_20B8A5A24(a1, v13, v36);
    if (!v15)
      return 0;
    v16 = v15;
    v17 = *(unsigned __int8 *)(a1 + 65);
    v32 = &v28;
    if (v17)
      v18 = bswap32(*v15);
    else
      v18 = *v15;
    v30 = v10;
    v31 = v14;
    v29 = a2;
    v19 = 8 * v18;
    v34 = (char *)malloc_type_malloc(v36[0] + v19, 0x9D5FE6B5uLL);
    if ((_DWORD)v19)
    {
      v33 = a4;
      v20 = 0;
      v21 = 4;
      v22 = 4;
      do
      {
        LOBYTE(v35) = 0;
        v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(a1 + 160))(*(_QWORD *)(a1 + 168), (uint64_t)v16 + v22, &v35);
        v24 = v35;
        if (v23 == a5 && !memcmp(v33, (char *)v16 + v22 + v35, a5))
        {
          v25 = v23 + v24;
        }
        else
        {
          v25 = v23 + v24;
          memcpy(&v34[v21], (char *)v16 + v22, v25);
          v21 += v25;
          ++v20;
        }
        v22 += v25;
        LODWORD(v19) = v19 - 1;
      }
      while ((_DWORD)v19);
    }
    else
    {
      v20 = 0;
      v21 = 4;
    }
    if (*(_BYTE *)(a1 + 65))
      *(_DWORD *)v34 = bswap32(v20);
    else
      *(_DWORD *)v34 = v20;
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), 0, 0, 0, 0, v31);
    if (v20)
    {
      v35 = 0;
      if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 40)
                                                                                               + 72))(*(_QWORD *)(a1 + 40), 0, 0, v34, v21, &v35))
      {
        v6 = 0;
        goto LABEL_33;
      }
      v26 = sub_20B963E6C(*(_QWORD *)(a1 + 24), (uint64_t)v29, v30, v35);
    }
    else
    {
      v26 = sub_20B964420(*(_QWORD *)(a1 + 24), (uint64_t)v29, v30);
    }
    v6 = v26 == 0;
LABEL_33:
    free(v34);
    sub_20B8A60E0(a1);
    return v6;
  }
  return 0;
}

BOOL sub_20B8A6418(uint64_t a1, CFArrayRef theArray, const __CFArray *a3, _QWORD *a4)
{
  CFIndex Count;
  int64_t v9;
  CFStringEncoding v10;
  _QWORD *v11;
  const void ***v12;
  unsigned __int8 **v13;
  CFIndex i;
  const __CFString *ValueAtIndex;
  UInt8 *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  size_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  unint64_t v25;
  const void *v26;
  unsigned __int8 **v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _DWORD *v34;
  char *v35;
  const __CFData *v36;
  size_t Length;
  const UInt8 *BytePtr;
  _BYTE *v39;
  size_t v40;
  uint64_t *v41;
  int v42;
  int v43;
  BOOL v44;
  unsigned __int8 **v45;
  int v46;
  int v47;
  void ***v48;
  void **v49;
  _QWORD *v51;
  _QWORD *v52;
  unsigned __int8 **v53;
  int64_t v54;
  const void ***v55;
  uint64_t *v56;
  _DWORD *v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  const void *v61;
  unsigned __int8 v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;

  Count = CFArrayGetCount(theArray);
  if (!*(_BYTE *)(a1 + 64))
    return 0;
  v9 = Count;
  v64 = 0;
  if (*(_BYTE *)(a1 + 65))
    v10 = 268435712;
  else
    v10 = 335544576;
  v63 = 0;
  v62 = 0;
  (*(void (**)(_QWORD, uint64_t *, unsigned __int8 *))(a1 + 160))(*(_QWORD *)(a1 + 168), &v63, &v62);
  v11 = (_QWORD *)operator new[]();
  v12 = (const void ***)operator new[]();
  v13 = (unsigned __int8 **)operator new[]();
  v56 = (uint64_t *)operator new[]();
  v57 = (_DWORD *)operator new[]();
  v51 = a4;
  v52 = v11;
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      v16 = sub_20B89D734(ValueAtIndex, v10, &v64);
      v12[i] = (const void **)v11;
      v17 = 2 * v64;
      *v11 = v16;
      v11[1] = v17;
      v11[2] = CFArrayGetValueAtIndex(a3, i);
      v11[3] = i;
      v11 += 4;
    }
    qsort(v12, v9, 8uLL, (int (__cdecl *)(const void *, const void *))sub_20B8A69A4);
    v18 = 0;
    v19 = v12 + 1;
    v21 = **v12;
    v20 = (size_t)(*v12)[1];
    v22 = 1;
    v23 = 1;
    v54 = v9;
    v55 = v12;
    v53 = v13;
    while (1)
    {
      if (v23 < v9)
      {
        v24 = v12[v23];
        v26 = *v24;
        v25 = (unint64_t)v24[1];
        v64 = v25;
        if (v25 == v20)
        {
          v27 = v13;
          v28 = v20;
          if (!memcmp(v26, v21, v20))
          {
            v61 = v21;
            ++v22;
            v20 = v28;
            v13 = v27;
            v12 = v55;
            goto LABEL_33;
          }
          v21 = v26;
          v20 = v28;
          v13 = v27;
          v12 = v55;
        }
        else
        {
          v21 = v26;
          v20 = v25;
        }
      }
      v60 = v18;
      v61 = v21;
      v59 = v20;
      if (v22 <= 0)
      {
        v34 = (_DWORD *)operator new[]();
        v32 = 4;
        v41 = v56;
      }
      else
      {
        v29 = v62;
        v58 = v22;
        v30 = -v22;
        v31 = v30;
        v32 = 4;
        do
        {
          v32 += v29 + CFDataGetLength((CFDataRef)v19[v31][2]);
          v33 = __CFADD__(v31++, 1);
        }
        while (!v33);
        v34 = (_DWORD *)operator new[]();
        v35 = (char *)(v34 + 1);
        do
        {
          v36 = (const __CFData *)v19[v30][2];
          Length = CFDataGetLength(v36);
          v65 = Length;
          BytePtr = CFDataGetBytePtr(v36);
          v39 = sub_20B89DC4C(BytePtr, Length, v29, *(unsigned __int8 *)(a1 + 65), &v65);
          v40 = v65;
          memcpy(v35, v39, v65);
          if ((_DWORD)v29)
            free(v39);
          v35 += v40;
          v33 = __CFADD__(v30++, 1);
        }
        while (!v33);
        v9 = v54;
        v12 = v55;
        v13 = v53;
        v41 = v56;
        v22 = v58;
      }
      if (*(_BYTE *)(a1 + 65))
        *v34 = bswap32(v22);
      else
        *v34 = v22;
      v65 = 0;
      v42 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *, uint64_t, size_t *))(**(_QWORD **)(a1 + 40)
                                                                                           + 72))(*(_QWORD *)(a1 + 40), 0, 0, v34, v32, &v65);
      MEMORY[0x20BD39C80](v34, 0x1000C8077774924);
      v43 = v65;
      if (v42)
        v44 = v65 == 0;
      else
        v44 = 1;
      if (v44)
      {
        MEMORY[0x20BD39C80](v57, 0x1000C8052888210);
        MEMORY[0x20BD39C80](v41, 0x1000C8000313F17);
        MEMORY[0x20BD39C80](v13, 0x50C80EE9192B6);
        MEMORY[0x20BD39C80](v12, 0x20C8093837F09);
        MEMORY[0x20BD39C80](v52, 0x1070C80BBF44EAALL);
        return 0;
      }
      v45 = (unsigned __int8 **)v12[v23 - v22];
      v20 = v59;
      v13[v60] = *v45;
      v41[v60] = (uint64_t)v45[1];
      v57[v60] = v43;
      v18 = v60 + 1;
      v22 = 1;
LABEL_33:
      ++v19;
      v44 = v23++ == v9;
      v21 = v61;
      if (v44)
        goto LABEL_38;
    }
  }
  qsort(v12, v9, 8uLL, (int (__cdecl *)(const void *, const void *))sub_20B8A69A4);
  v18 = 0;
LABEL_38:
  if (*(_WORD *)(a1 + 66))
    v46 = sub_20B8FCAA0(*(_QWORD *)(a1 + 24), v18, v13, v56, v57);
  else
    v46 = sub_20BA00814();
  v47 = v46;
  sub_20B8A48C8(*(_QWORD *)(a1 + 40));
  MEMORY[0x20BD39C80](v13, 0x50C80EE9192B6);
  MEMORY[0x20BD39C80](v56, 0x1000C8000313F17);
  MEMORY[0x20BD39C80](v57, 0x1000C8052888210);
  if (v9 >= 1)
  {
    v48 = (void ***)v12;
    do
    {
      v49 = *v48++;
      free(*v49);
      --v9;
    }
    while (v9);
  }
  MEMORY[0x20BD39C80](v12, 0x20C8093837F09);
  MEMORY[0x20BD39C80](v52, 0x1070C80BBF44EAALL);
  if (v51)
    *v51 = 0;
  sub_20B8A60E0(a1);
  return v47 == 0;
}

uint64_t sub_20B8A69A4(const void ***a1, const void ***a2)
{
  const void **v2;
  const void **v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  size_t v8;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = v2[1];
  v6 = **a2;
  v7 = v3[1];
  if ((uint64_t)v5 >= (uint64_t)v7)
    v8 = (size_t)v3[1];
  else
    v8 = (size_t)v2[1];
  result = memcmp(v4, v6, v8);
  if (!(_DWORD)result)
  {
    result = ((_DWORD)v5 - (_DWORD)v7);
    if ((_DWORD)v5 == (_DWORD)v7)
      return (*((_DWORD *)v2 + 6) - *((_DWORD *)v3 + 6));
  }
  return result;
}

uint64_t sub_20B8A69F8(uint64_t a1)
{
  const char *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::__fs::filesystem::path *v9;
  std::error_code *v10;

  v2 = (const char *)sub_20B8A1334(a1);
  if (sub_20B8A159C(a1))
    v3 = open(v2, 2562, 438);
  else
    v3 = open(v2, 2560, 438);
  if (v3 != -1)
  {
    v4 = v3;
    if (lseek(v3, 4159, 0) != -1 && write(v4, &unk_20BA6DA5B, 1uLL) == 1)
    {
      close(v4);
      v5 = sub_20B8A6AE0(a1);
      v6 = sub_20B8A4810(v5);
      v7 = sub_20B8A121C(v5);
      MEMORY[0x20BD39CB0](v7, 0x1070C4063F6B07ELL);
      return v6;
    }
    close(v4);
    v9 = (const std::__fs::filesystem::path *)sub_20B8A1334(a1);
    remove(v9, v10);
  }
  return 0;
}

uint64_t sub_20B8A6AE0(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *Value;
  const __CFDictionary *MutableCopy;
  __CFDictionary *Mutable;
  BOOL v6;
  const __CFString *v7;
  CFStringRef v8;
  char v9;
  const __CFDictionary *v10;
  const __CFString *v11;
  const __CFDictionary *v12;
  const __CFString *v13;
  const __CFDictionary *v14;
  BOOL v15;
  const __CFURL *v16;
  CFStringRef PathComponent;
  const __CFString *v18;
  const __CFString *v19;
  const __CFURL *v20;
  const __CFURL *v21;
  const __CFURL *v22;
  const __CFString *v23;
  const __CFDictionary *v24;
  const void *v25;
  const __CFDictionary *v26;
  const void *v27;
  CFArrayRef v28;
  CFDictionaryRef v29;
  const __CFString *v30;
  CFMutableStringRef v31;
  const __CFString *v32;
  const __CFURL *v33;
  uint64_t v34;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  const __CFString *v38;
  CFTypeRef cf;
  __int16 valuePtr;
  void *values;
  CFNumberRef v42;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = *(const __CFDictionary **)(a1 + 8);
  if (!v2)
    goto LABEL_14;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("TrieAuxiliaryDataOptions"));
  if (!Value)
  {
    v10 = *(const __CFDictionary **)(a1 + 8);
    if (v10)
    {
      v11 = (const __CFString *)CFDictionaryGetValue(v10, CFSTR("TrieAuxiliaryDataFile"));
      if (v11)
      {
LABEL_13:
        v8 = v11;
        v6 = 1;
        goto LABEL_16;
      }
      v12 = *(const __CFDictionary **)(a1 + 8);
      if (v12)
      {
        v13 = (const __CFString *)CFDictionaryGetValue(v12, CFSTR("TrieSubIndexPath"));
        v6 = 1;
        if (!v13)
        {
          Mutable = 0;
          goto LABEL_15;
        }
        v8 = v13;
LABEL_16:
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        v9 = v6;
        goto LABEL_17;
      }
    }
LABEL_14:
    Mutable = 0;
    v6 = 1;
    goto LABEL_15;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  Mutable = MutableCopy;
  v6 = MutableCopy == 0;
  if (!MutableCopy)
  {
    v14 = *(const __CFDictionary **)(a1 + 8);
    if (v14)
    {
      v11 = (const __CFString *)CFDictionaryGetValue(v14, CFSTR("TrieAuxiliaryDataFile"));
      if (!v11)
        goto LABEL_31;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v7 = (const __CFString *)CFDictionaryGetValue(MutableCopy, CFSTR("IDXIndexPath"));
  if (v7)
  {
LABEL_5:
    v8 = v7;
    v9 = 1;
    goto LABEL_17;
  }
  v36 = *(const __CFDictionary **)(a1 + 8);
  if (!v36)
  {
    v6 = 0;
    goto LABEL_15;
  }
  v7 = (const __CFString *)CFDictionaryGetValue(v36, CFSTR("TrieAuxiliaryDataFile"));
  if (v7)
    goto LABEL_5;
LABEL_31:
  v37 = *(const __CFDictionary **)(a1 + 8);
  if (!v37 || (v38 = (const __CFString *)CFDictionaryGetValue(v37, CFSTR("TrieSubIndexPath"))) == 0)
  {
LABEL_15:
    v15 = v6;
    v16 = CFURLCreateCopyDeletingPathExtension(0, *(CFURLRef *)a1);
    PathComponent = CFURLCopyLastPathComponent(v16);
    CFRelease(v16);
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("%@_aux.data"), PathComponent);
    CFRelease(PathComponent);
    v6 = 0;
    v9 = 0;
    if (!v15)
      goto LABEL_17;
    goto LABEL_16;
  }
  v8 = v38;
  v6 = 1;
  v9 = 1;
  if (!Mutable)
    goto LABEL_16;
LABEL_17:
  CFDictionarySetValue(Mutable, CFSTR("IDXIndexAccessMethod"), CFSTR("com.apple.HeapAccessMethod"));
  v18 = (const __CFString *)sub_20B8A12EC(a1);
  if (CFStringFind(v18, CFSTR("/"), 0).location == -1)
  {
    v23 = (const __CFString *)CFRetain(v8);
  }
  else
  {
    v19 = (const __CFString *)sub_20B8A12EC(a1);
    v20 = CFURLCreateWithFileSystemPath(0, v19, kCFURLPOSIXPathStyle, 0);
    v21 = CFURLCreateCopyDeletingLastPathComponent(0, v20);
    v22 = CFURLCreateCopyAppendingPathComponent(0, v21, v8, 0);
    v23 = CFURLCopyFileSystemPath(v22, kCFURLPOSIXPathStyle);
    CFRelease(v20);
    CFRelease(v21);
    CFRelease(v22);
  }
  CFDictionarySetValue(Mutable, CFSTR("IDXIndexPath"), v23);
  if ((v9 & 1) == 0)
    CFRelease(v8);
  CFDictionarySetValue(Mutable, CFSTR("IDXIndexSupportDataID"), (const void *)*MEMORY[0x24BDBD270]);
  v24 = *(const __CFDictionary **)(a1 + 8);
  if (v24)
    v25 = CFDictionaryGetValue(v24, CFSTR("IDXIndexWritable"));
  else
    v25 = 0;
  CFDictionarySetValue(Mutable, CFSTR("IDXIndexWritable"), v25);
  v26 = *(const __CFDictionary **)(a1 + 8);
  if (v26)
    v27 = CFDictionaryGetValue(v26, CFSTR("IDXIndexBigEndian"));
  else
    v27 = 0;
  CFDictionarySetValue(Mutable, CFSTR("IDXIndexBigEndian"), v27);
  keys[0] = CFSTR("IDXDataFieldName");
  keys[1] = CFSTR("IDXDataSizeLength");
  valuePtr = 4;
  values = CFSTR("Packed Homograph");
  v42 = CFNumberCreate(0, kCFNumberSInt16Type, &valuePtr);
  cf = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFRelease(v42);
  v28 = CFArrayCreate(0, &cf, 1, MEMORY[0x24BDBD690]);
  CFRelease(cf);
  keys[0] = CFSTR("IDXVariableDataFields");
  values = v28;
  v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFRelease(v28);
  CFDictionarySetValue(Mutable, CFSTR("IDXIndexDataFields"), v29);
  CFRelease(v29);
  v30 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
  v31 = CFStringCreateMutableCopy(0, 0, v30);
  CFRelease(v30);
  v32 = (const __CFString *)sub_20B8A12EC(a1);
  CFStringTrim(v31, v32);
  CFStringAppend(v31, v23);
  v33 = CFURLCreateWithFileSystemPath(0, v31, kCFURLPOSIXPathStyle, 0);
  CFRelease(v31);
  CFRelease(v23);
  v34 = operator new();
  sub_20B8A1088(v34, v33, Mutable, *(const void **)(a1 + 40));
  CFRelease(v33);
  CFRelease(Mutable);
  return v34;
}

void sub_20B8A6FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1070C4063F6B07ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A7020(uint64_t a1, int a2)
{
  const char *v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  off_t v11;

  if (*(unsigned __int16 *)(a1 + 66) > 1u || *(_WORD *)(a1 + 66) && *(_BYTE *)(a1 + 65))
    return 0;
  if (a2)
  {
    v11 = 0;
    v3 = (const char *)sub_20B8A1334(*(_QWORD *)(a1 + 8));
    v4 = open(v3, 2 * *(unsigned __int8 *)(a1 + 64));
    if (v4 == -1)
      return 0;
    v5 = v4;
    v6 = sub_20B8A2D90(v4, *(unsigned __int8 *)(a1 + 64), &v11);
    close(v5);
    if (v6 == -1)
      return 0;
    v7 = v11 - 64;
    v11 -= 64;
    if (*(_WORD *)(a1 + 66))
      sub_20B969098((uint64_t)sub_20B8A7178, a1, v6 + 64, v7);
    else
      v8 = sub_20B963C34((uint64_t)sub_20B8A7178, (int *)(v6 + 64), v7, a1);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = sub_20B8A6AE0(*(_QWORD *)(a1 + 8));
  }
  v9 = (_QWORD *)operator new();
  sub_20B8A2E34((uint64_t)v9, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 40) = v9;
  if ((sub_20B8A2D3C(v9) & 1) != 0)
    return 1;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

void sub_20B8A7154(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40614AD078);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A7178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const char *v6;
  int v7;
  int v8;
  void *v9;
  off_t st_size;
  uint64_t v11;
  stat v13;

  v5 = *(unsigned __int8 *)(a3 + 64);
  v6 = (const char *)sub_20B8A1334(*(_QWORD *)(a3 + 8));
  v7 = open(v6, 2 * v5);
  if (v7 == -1)
    return 0;
  v8 = v7;
  if (fstat(v7, &v13) == -1)
    return 0;
  v9 = (void *)(a1 - 64);
  st_size = v13.st_size;
  msync(v9, v13.st_size, 16);
  munmap(v9, st_size);
  if (ftruncate(v8, a2 + 64) == -1)
    return 0;
  v11 = sub_20B8A2D90(v8, v5 != 0, 0);
  close(v8);
  return v11 + 64;
}

uint64_t sub_20B8A7244(uint64_t a1, int a2)
{
  _QWORD *v4;
  uint64_t result;
  void **v6;
  char *v7;
  uint64_t v8;
  char *v9;
  size_t v10;

  v4 = *(_QWORD **)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(v4[1] + 232));
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 96))(v4, 1);
  pthread_mutex_unlock((pthread_mutex_t *)(v4[1] + 232));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (a2)
  {
    v6 = *(void ***)(a1 + 24);
    if (*(_WORD *)(a1 + 66))
    {
      if (v6)
      {
        v7 = (char *)v6[1];
        v8 = (uint64_t)v6[3] + (_BYTE *)v6[2] - v7;
      }
      else
      {
        v8 = 0;
        v7 = 0;
      }
      sub_20B969128(v6);
    }
    else
    {
      v8 = 8 * (*((_DWORD *)v6 + 4) + 259) + 16;
      v7 = (char *)*v6;
      sub_20B963CE8(v6);
    }
    v9 = v7 - 64;
    v10 = v8 + 64;
    msync(v9, v10, 16);
    munmap(v9, v10);
    result = *(_QWORD *)(a1 + 32);
    if (result)
    {
      sub_20B8A121C(result);
      JUMPOUT(0x20BD39CB0);
    }
  }
  return result;
}

uint64_t sub_20B8A7350()
{
  return 0;
}

uint64_t sub_20B8A7358()
{
  return 0;
}

std::string *sub_20B8A7360(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_20B8A741C(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_20B8A7360(a1, __s, v4);
}

void ***sub_20B8A7450(void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B80CDD8();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20B800BE8(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

uint64_t sub_20B8A7538(uint64_t a1)
{
  __int128 *v2;
  __int128 *i;
  __int128 v4;
  char *v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11[3];
  uint64_t v12[7];
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_20B805A44((uint64_t)v10);
  v2 = *(__int128 **)(a1 + 8);
  for (i = *(__int128 **)(a1 + 16); v2 != i; v2 = (__int128 *)((char *)v2 + 24))
  {
    if (*((char *)v2 + 23) < 0)
    {
      sub_20B80ACE0(__p, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v4 = *v2;
      v16 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__p = v4;
    }
    if (v16 >= 0)
      v5 = (char *)__p;
    else
      v5 = (char *)__p[0];
    if (v16 >= 0)
      v6 = HIBYTE(v16);
    else
      v6 = (size_t)__p[1];
    sub_20B805CBC(v10, v5, v6, 1.0);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  sub_20B806288((_QWORD **)(a1 + 104), (uint64_t)v10, 0);
  sub_20B83BFEC((uint64_t)__p);
  sub_20B806B0C(&v16, a1 + 104);
  sub_20B871648((uint64_t)v17, &v13);
  v7 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v13;
  *(_QWORD *)(a1 + 128) = v14;
  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v16 = v8;
  v17[0] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v19);
  sub_20B806200(v12);
  sub_20B806184(v11);
  sub_20B806184(v10);
  return 1;
}

void sub_20B8A76D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20B83C118((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20B8A769CLL);
}

void sub_20B8A7700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20B8A7730(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B8A7730(uint64_t *a1)
{
  sub_20B806200(a1 + 6);
  sub_20B806184(a1 + 3);
  return sub_20B806184(a1);
}

uint64_t sub_20B8A7760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a1 + 56;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  sub_20B7F8BDC((_QWORD *)(a1 + 56), a2, v5);
  if ((sub_20B8067D0((uint64_t *)(a1 + 104), v3) & 1) == 0)
  {
    v6 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MarisaTrieBuilder.cpp", 86);
    sub_20B828F84(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = sub_20B828F84(v7, (uint64_t)") [", 3);
    v9 = sub_20B828F84(v8, (uint64_t)"m_trie.lookup(m_agent)", 22);
    v10 = sub_20B828F84(v9, (uint64_t)"] ", 2);
    sub_20B828F84(v10, (uint64_t)"cannot find entry in trie.\n", 27);
    sub_20B89423C();
  }
  return *(unsigned int *)(a1 + 92);
}

void sub_20B8A7834()
{
  sub_20B89423C();
}

void sub_20B8A7840()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void sub_20B8A784C(uint64_t a1)
{
  sub_20B8A78CC(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8A7870(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(_QWORD *)(a1 + 120))
      return *(_QWORD *)(a1 + 112);
    else
      return 0;
  }
  else if (*(_BYTE *)(a1 + 135))
  {
    return a1 + 112;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20B8A78A0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
    return 0;
  if (*(char *)(a1 + 135) < 0)
    return *(_QWORD *)(a1 + 120);
  return *(unsigned __int8 *)(a1 + 135);
}

uint64_t sub_20B8A78CC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C461AE0;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  sub_20B806284(a1 + 104);
  sub_20B7F8B30(a1 + 56);
  return sub_20B8A7918(a1);
}

uint64_t sub_20B8A7918(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24C460CE8;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 8);
  sub_20B83AFD0(&v4);
  return a1;
}

uint64_t *sub_20B8A7978(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *a1 = sub_20B96621C();
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = (uint64_t)sub_20B896F94();
  a1[4] = a2;
  sub_20B873E04((uint64_t *)&v8);
  sub_20B82E770((uint64_t)(a1 + 1), &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_20B8A7A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B811FE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A7A2C(uint64_t a1, uint64_t a2, UniChar *chars, unint64_t numChars, char a5)
{
  BOOL v5;
  uint64_t v6;
  UniChar *v8;
  CFStringRef v11;
  CFIndex v12;
  __int16 v13;
  unsigned int v14;
  _BOOL4 v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  uint64_t *v24;
  const __CFString *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  CFTypeRef cf;
  uint64_t v36;
  char v37;
  UniChar *v38;
  unint64_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v38 = chars;
  v39 = numChars;
  v37 = a5;
  v36 = 0x3FF8000000000000;
  if (*(_QWORD *)a1)
    v5 = numChars == 0;
  else
    v5 = 1;
  v6 = !v5;
  if (v5)
    return v6;
  v8 = chars;
  v11 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], chars, numChars);
  cf = v11;
  v12 = 2 * numChars - 2;
  do
  {
    v13 = *v8++;
    v14 = (unsigned __int16)(v13 + 223);
    v16 = (unsigned __int16)(v13 + 191) < 0x1Au || v14 < 0x1A;
    v17 = !v16 || v12 == 0;
    v12 -= 2;
  }
  while (!v17);
  v34 = v16;
  v32 = 0;
  v33 = 0;
  v31 = 1;
  v30 = -9.0;
  v18 = *(uint64_t **)a1;
  v19 = operator new(0x60uLL);
  *v19 = &off_24C469DC8;
  v19[1] = &v31;
  v19[2] = &v38;
  v19[3] = &v33;
  v19[4] = &v32;
  v19[5] = &cf;
  v19[6] = &v36;
  v19[7] = &v30;
  v19[8] = a1;
  v19[9] = &v37;
  v19[10] = a2;
  v19[11] = &v34;
  v41 = v19;
  sub_20B966398(v18, v11, 0, 3u, (uint64_t)v40, 0, -9.0);
  v20 = v41;
  if (v41 == v40)
  {
    v21 = 4;
    v20 = v40;
    goto LABEL_24;
  }
  if (v41)
  {
    v21 = 5;
LABEL_24:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  if ((**(_BYTE **)(a1 + 32) & 2) != 0 && v39 >= 4)
  {
    v22 = v33;
    v23 = fmax((6.0 - (double)v39) * 1.5, 0.0) + -9.0;
    v30 = v23;
    v33 = 0;
    v31 = 0;
    v24 = *(uint64_t **)a1;
    v25 = (const __CFString *)cf;
    v26 = operator new(0x60uLL);
    *v26 = &off_24C469DC8;
    v26[1] = &v31;
    v26[2] = &v38;
    v26[3] = &v33;
    v26[4] = &v32;
    v26[5] = &cf;
    v26[6] = &v36;
    v26[7] = &v30;
    v26[8] = a1;
    v26[9] = &v37;
    v26[10] = a2;
    v26[11] = &v34;
    v41 = v26;
    sub_20B966398(v24, v25, 256, (unsigned __int16)(3 - v22), (uint64_t)v40, 0, v23);
    v27 = v41;
    if (v41 == v40)
    {
      v28 = 4;
      v27 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_32;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
LABEL_32:
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_20B8A7CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20B87E150(&a15, 0);
  _Unwind_Resume(a1);
}

unsigned int *sub_20B8A7D54(uint64_t a1, _QWORD *a2, UniChar *a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const __CFAllocator *v17;
  unint64_t v18;
  uint64_t v19;
  CFIndex v20;
  const UniChar *v21;
  CFIndex v22;
  const __CFString *v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  const __CFString *v37;
  uint64_t Prediction;
  int v39;
  __CFString *Mutable;
  uint64_t v41;
  const __CFString *v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  CFIndex location;
  unint64_t Length;
  const void *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFAllocator *alloc;
  uint64_t v57;
  unsigned __int8 v58;
  CFTypeRef cf;
  CFStringRef theString2;
  double v63;
  CFStringRef stringToFind;
  CFMutableStringRef theString;
  void *__p;
  char *v67;
  char *v68;
  _DWORD v69[2];
  uint64_t v70;
  CFRange v71;

  v70 = *MEMORY[0x24BDAC8D0];
  v9 = a5[1];
  v8 = a5[2];
  v10 = 0;
  if (sub_20B969C84(a5, 0) && v8 != v9)
  {
    sub_20B9C3978((uint64_t)a5);
    v10 = *(unsigned int **)(a1 + 8);
    if (v10)
    {
      sub_20B87646C(*(_QWORD *)(a1 + 8));
      v11 = atomic_load(v10 + 10);
      if (v11 != 2)
        return 0;
      v10 = *(unsigned int **)v10;
      if (v10)
      {
        v12 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 328);
        v13 = (v8 - v9) / 40;
        __p = 0;
        v67 = 0;
        v68 = 0;
        v14 = v13 - v12;
        if (v13 <= v12)
        {
          v15 = (char *)operator new(4uLL);
          __p = v15;
          *(_DWORD *)v15 = 1;
          v67 = v15 + 4;
          v68 = v15 + 4;
        }
        alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v16 = v14 & ~(v14 >> 63);
        theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
        if (v16 < v13)
        {
          v58 = 0;
          v17 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
          while (1)
          {
            v18 = *(_QWORD *)(a5[10] + 8 * v16);
            v19 = a5[4];
            if (v18 >= (a5[5] - v19) >> 1)
            {
              v20 = 0;
              v21 = 0;
            }
            else
            {
              v20 = 0;
              v21 = (const UniChar *)(v19 + 2 * v18);
              if (v19)
              {
                v22 = *(unsigned __int16 *)(a5[1] + 40 * v16 + 24);
                if (*(_WORD *)(a5[1] + 40 * v16 + 24))
                {
                  if (*v21 == 32 && (++v21, --v22, !v22))
                  {
                    v20 = 0;
                  }
                  else
                  {
                    v20 = v22 - 1;
                    if (v21[v22 - 1] == 32)
                      v58 |= v16 == v13 - 1;
                    else
                      v20 = v22;
                  }
                }
              }
            }
            v23 = CFStringCreateWithCharactersNoCopy(0, v21, v20, v17);
            stringToFind = v23;
            if (!v23)
              goto LABEL_50;
            CFStringAppend(theString, v23);
            if ((sub_20B9671AC(*(uint64_t **)a1, v23, 2) & 1) != 0
              || (v24 = (*(uint64_t (**)(unsigned int *, const __CFString *))(*(_QWORD *)v10 + 16))(v10, v23), (v25 = v24) == 0))
            {
              v28 = 0;
            }
            else
            {
              v26 = v67;
              if (v67 >= v68)
              {
                v29 = (char *)__p;
                v30 = (v67 - (_BYTE *)__p) >> 2;
                v31 = v30 + 1;
                if ((unint64_t)(v30 + 1) >> 62)
                  sub_20B80CDD8();
                v32 = v68 - (_BYTE *)__p;
                if ((v68 - (_BYTE *)__p) >> 1 > v31)
                  v31 = v32 >> 1;
                if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                  v33 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v33 = v31;
                if (v33)
                {
                  v34 = (char *)sub_20B8127BC((uint64_t)&v68, v33);
                  v29 = (char *)__p;
                  v26 = v67;
                }
                else
                {
                  v34 = 0;
                }
                v35 = &v34[4 * v30];
                *(_DWORD *)v35 = v25;
                v27 = v35 + 4;
                while (v26 != v29)
                {
                  v36 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v35 - 1) = v36;
                  v35 -= 4;
                }
                __p = v35;
                v67 = v27;
                v68 = &v34[4 * v33];
                if (v29)
                  operator delete(v29);
              }
              else
              {
                *(_DWORD *)v67 = v24;
                v27 = v26 + 4;
              }
              v67 = v27;
              v28 = 1;
            }
            CFRelease(v23);
            if ((v28 & 1) == 0)
              goto LABEL_50;
            if (++v16 == v13)
              goto LABEL_46;
          }
        }
        v58 = 0;
LABEL_46:
        if (__p == v67 || !LMLanguageModelCreatePredictionEnumerator())
        {
LABEL_50:
          v10 = 0;
          goto LABEL_100;
        }
        if (a4)
          v37 = CFStringCreateWithCharactersNoCopy(0, a3, a4, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
        else
          v37 = 0;
        v57 = 0;
        stringToFind = v37;
        while (1)
        {
          if (!LMPredictionEnumeratorAdvance()
            || (v63 = 0.0, Prediction = LMPredictionEnumeratorGetPrediction(), Prediction <= 0))
          {
LABEL_97:
            LMPredictionEnumeratorRelease();
            if (stringToFind)
              CFRelease(stringToFind);
            v10 = (unsigned int *)1;
LABEL_100:
            if (theString)
              CFRelease(theString);
            if (__p)
            {
              v67 = (char *)__p;
              operator delete(__p);
            }
            return v10;
          }
          if (v69[0] >= 0x1F4u)
            break;
          v39 = 5;
LABEL_96:
          if (v39 == 6)
            goto LABEL_97;
        }
        Mutable = CFStringCreateMutable(0, 0);
        v41 = 0;
        theString2 = Mutable;
        do
        {
          v42 = (const __CFString *)(*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v10 + 32))(v10, v69[v41]);
          cf = v42;
          if (!v42)
            break;
          v43 = sub_20B9671AC(*(uint64_t **)a1, v42, 134);
          if ((v43 & 1) != 0)
            goto LABEL_108;
          if ((v58 & (v41 == 0)) == 0)
          {
            CFStringAppend(Mutable, CFSTR(" "));
            v42 = (const __CFString *)cf;
            Mutable = (__CFString *)theString2;
          }
          CFStringAppend(Mutable, v42);
          v42 = (const __CFString *)cf;
          if (cf)
          {
LABEL_108:
            CFRelease(v42);
            if ((v43 & 1) != 0)
            {
              v39 = 5;
              v47 = theString2;
              if (!theString2)
                goto LABEL_96;
              goto LABEL_95;
            }
          }
          ++v41;
        }
        while (Prediction != v41);
        v44 = (_QWORD *)a2[6];
        v45 = (_QWORD *)a2[7];
        if (v44 == v45)
        {
          v47 = theString2;
LABEL_72:
          if (CFStringGetLength(v47) >= 1)
          {
            v48 = stringToFind;
            if (stringToFind)
            {
              location = CFStringFind(v47, stringToFind, 0).location;
              Length = CFStringGetLength(v48);
              if (location == 1 && Length <= 2)
              {
                if (Length + 1 != CFStringGetLength(v47))
                  goto LABEL_91;
              }
              else if (location != 1)
              {
                goto LABEL_91;
              }
            }
            cf = 0;
            if (Prediction == 1)
            {
              v51 = (const void *)sub_20B967324(*(_QWORD *)a1, (uint64_t)theString, v47, (v58 ^ 1) & 1);
              sub_20B87E150(&cf, v51);
            }
            if ((v58 & 1) != 0)
            {
              v52 = (const __CFString *)CFRetain(v47);
            }
            else
            {
              v71.length = CFStringGetLength(v47) - 1;
              v71.location = 1;
              v52 = CFStringCreateWithSubstring(alloc, v47, v71);
            }
            v53 = v52;
            if (cf)
              v54 = (const __CFString *)cf;
            else
              v54 = v47;
            sub_20B8A8488(a1, a2, v54, v52, a3, a4, 1, 0, v63);
            if (v53)
              CFRelease(v53);
            if (cf)
              CFRelease(cf);
          }
        }
        else
        {
          while (1)
          {
            v46 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v44 + 24))(*v44);
            v47 = theString2;
            if (CFStringCompare(v46, theString2, 1uLL) == kCFCompareEqualTo)
              break;
            if (++v44 == v45)
              goto LABEL_72;
          }
        }
LABEL_91:
        if (++v57 == 8)
          v39 = 6;
        else
          v39 = 0;
        if (v47)
        {
LABEL_95:
          CFRelease(v47);
          goto LABEL_96;
        }
        goto LABEL_96;
      }
    }
  }
  return v10;
}

void sub_20B8A83A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, const void *a18, const void *a19, uint64_t a20,const void *a21,const void *a22,void *__p,uint64_t a24)
{
  sub_20B87E150(&a18, 0);
  sub_20B8A89DC(&a19, 0);
  sub_20B87E150(&a21, 0);
  sub_20B8A89DC(&a22, 0);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B8A8488(uint64_t a1, _QWORD *a2, CFStringRef theString, const __CFString *a4, void *a5, unint64_t a6, int a7, int a8, double a9)
{
  CFIndex Length;
  int v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const void *v24;
  unint64_t v25;
  unsigned __int8 v26;
  const void *p_p;
  unsigned __int16 *v28;
  unint64_t v29;
  __int16 *v30;
  __int16 v31;
  _BYTE *v32;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  void *__p;
  unint64_t v44;
  unsigned __int8 v45;
  void *v46;
  unint64_t v47;
  unsigned __int8 v48;
  void *v49;
  _BYTE *v50;
  void *__dst;
  _BYTE *v52;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!theString)
    return;
  Length = CFStringGetLength(theString);
  if (!a4 || !Length || !CFStringGetLength(a4))
    return;
  if (a7)
    v19 = 0;
  else
    v19 = 15000;
  v20 = atomic_load((unsigned __int8 *)&qword_25472B2D0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_25472B2D0))
  {
    sub_20B8B2334(0);
    qword_25472B2C8 = (uint64_t)&qword_25472C9B0;
    __cxa_guard_release(&qword_25472B2D0);
  }
  sub_20B8D0790(theString, (UniChar **)&__dst);
  sub_20B8D0790(a4, (UniChar **)&v49);
  if (**(_BYTE **)(a1 + 24) && a8)
  {
    sub_20B877ED0(&v46, __dst, (v52 - (_BYTE *)__dst) >> 1);
    sub_20B877ED0(&__p, v49, (v50 - (_BYTE *)v49) >> 1);
    sub_20B8D9880((uint64_t)&v46);
    sub_20B8D9880((uint64_t)&__p);
    if ((v48 & 0x80u) == 0)
      v21 = v48;
    else
      v21 = v47;
    sub_20B87C6B4((uint64_t)&__dst, v21);
    if ((v45 & 0x80u) == 0)
      v22 = v45;
    else
      v22 = v44;
    sub_20B87C6B4((uint64_t)&v49, v22);
    v23 = v48;
    if ((v48 & 0x80u) != 0)
      v23 = v47;
    if (v23)
    {
      if ((v48 & 0x80u) == 0)
        v24 = &v46;
      else
        v24 = v46;
      memmove(__dst, v24, 2 * v23);
    }
    v25 = v45;
    v26 = v45;
    if ((v45 & 0x80u) != 0)
      v25 = v44;
    if (v25)
    {
      if ((v45 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v49, p_p, 2 * v25);
      v26 = v45;
    }
    if ((v26 & 0x80) != 0)
      operator delete(__p);
    if ((char)v48 < 0)
      operator delete(v46);
  }
  v28 = (unsigned __int16 *)__dst;
  v29 = v52 - (_BYTE *)__dst;
  if (v52 != __dst && (u_isupper(*(unsigned __int16 *)__dst) || v29 >= 3 && u_isupper(v28[1])))
    v30 = (__int16 *)(qword_25472B2C8 + 48);
  else
    v30 = (__int16 *)(qword_25472B2C8 + 52);
  v31 = *v30;
  v32 = v49;
  v33 = (v50 - (_BYTE *)v49) >> 1;
  v34 = v33 > a6;
  if (a6 - 1 > 3 || v33 <= a6)
  {
    v35 = (v52 - (_BYTE *)__dst) >> 1;
    v46 = __dst;
    v47 = v35;
    v36 = sub_20B969D6C((uint64_t *)&v46);
    v37 = (_QWORD *)sub_20B961A6C(0, __dst, (v52 - (_BYTE *)__dst) >> 1, a5, a6, v49, (v50 - (_BYTE *)v49) >> 1, v31, a9 * 1.5, v31, 800 * ((int)v35 - (int)a6) + v19, 800 * ((int)v35 - (int)a6), 71, 2 * v34, **(_DWORD **)(a1 + 32), v36);
    v46 = v37;
    if (!v37)
    {
LABEL_54:
      v32 = v49;
      goto LABEL_55;
    }
    v37[1] = 0;
    (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v37 + 528))(v37, 3, "Adding a single English word candidate", 1);
    v53[0] = &unk_24C459188;
    v54 = v53;
    v38 = sub_20B8FDA94(a2, (_QWORD **)&v46, 1, 0, (uint64_t)v53);
    v39 = v54;
    if (v54 == v53)
    {
      v40 = 4;
      v39 = v53;
    }
    else
    {
      if (!v54)
        goto LABEL_49;
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_49:
    if ((v38 & 1) == 0)
    {
      v41 = sub_20B9A7C5C(3u);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_debug_impl(&dword_20B7F7000, v41, OS_LOG_TYPE_DEBUG, " ∟ Rejected", (uint8_t *)&__p, 2u);
      }
    }
    v42 = v46;
    v46 = 0;
    if (v42)
      (*(void (**)(void *))(*(_QWORD *)v42 + 16))(v42);
    goto LABEL_54;
  }
LABEL_55:
  if (v32)
  {
    v50 = v32;
    operator delete(v32);
  }
  if (__dst)
  {
    v52 = __dst;
    operator delete(__dst);
  }
}

void sub_20B8A88AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  __cxa_guard_abort(&qword_25472B2D0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A8990(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)v1)
    {
      sub_20B87646C(*(_QWORD *)(result + 8));
      atomic_load((unsigned int *)(v1 + 40));
      return LMLanguageModelReset();
    }
  }
  return result;
}

void sub_20B8A89DC(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B8A8A14()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8A8A28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_24C469DC8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B8A8A88(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C469DC8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_20B8A8AD0(uint64_t a1, const __CFString **a2, CFStringRef *a3, double *a4, _BYTE *a5)
{
  const __CFString *v7;
  const __CFString *v8;
  double v9;
  uint64_t v10;
  CFIndex Length;
  CFIndex v12;
  double *v13;
  double v14;
  const __CFString *v15;
  CFIndex v16;
  int CharacterAtIndex;
  const __CFString *v18;
  CFIndex v19;
  CFIndex v20;
  const UniChar *v21;
  unsigned int v22;
  uint64_t v23;
  CFIndex v24;
  double v25;
  double *v26;
  double v27;
  const __CFString *v28;
  CFIndex v29;
  int v30;
  CFMutableStringRef Mutable;
  const UniChar *v32;
  CFIndex v33;

  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *(_QWORD *)(a1 + 64);
  Length = CFStringGetLength(*a3);
  v12 = Length;
  if (**(_BYTE **)(a1 + 8) || Length != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    v13 = *(double **)(a1 + 32);
    if (**(_QWORD **)(a1 + 24))
    {
      v14 = *v13;
    }
    else
    {
      *v13 = v9;
      v14 = v9;
    }
    if (v14 + -4.0 > v9)
    {
      *a5 = 1;
      return;
    }
    v15 = **(const __CFString ***)(a1 + 40);
    if (!v15)
      goto LABEL_29;
    v16 = 0;
    do
    {
      if (v16 >= CFStringGetLength(v15))
      {
        v15 = 0;
        goto LABEL_29;
      }
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, v16++);
    }
    while ((CharacterAtIndex - 65) > 0x19);
    v18 = **(const __CFString ***)(a1 + 40);
    v19 = CFStringGetLength(v7);
    if (v19 < CFStringGetLength(v18))
    {
      v15 = 0;
      goto LABEL_46;
    }
    v33 = 0;
    sub_20B8D0624(v7, &v33, &v32);
    v20 = 0;
    v21 = v32;
    while (v20 < CFStringGetLength(v18))
    {
      v22 = CFStringGetCharacterAtIndex(v18, v20) - 65;
      v23 = v21[v20];
      if (v22 > 0x19)
      {
        if ((v23 - 65) < 0x1A)
        {
          v15 = 0;
LABEL_27:
          MEMORY[0x20BD39C80](v21, 0x1000C80BDFB0063);
          goto LABEL_28;
        }
      }
      else
      {
        v21[v20] = MEMORY[0x20BD3A76C](v23);
      }
      ++v20;
    }
    if (v21)
      v24 = v33;
    else
      v24 = 0;
    v15 = CFStringCreateWithCharacters(0, v21, v24);
    if (v21)
      goto LABEL_27;
LABEL_28:
    if (v15)
    {
LABEL_29:
      v25 = 0.0;
      if (!**(_BYTE **)(a1 + 8))
        v25 = (double)(unint64_t)(v12 - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)) * 0.15;
      v26 = *(double **)(a1 + 48);
      if (v25 >= *v26)
        v25 = *v26;
      v27 = v9 - v25;
      if (v27 < **(double **)(a1 + 56))
        goto LABEL_48;
      if (v15)
        v7 = v15;
      if (sub_20B9698DC(**(_DWORD **)(v10 + 32)))
      {
        v28 = **(const __CFString ***)(a1 + 40);
        if (v28)
        {
          v29 = 0;
          while (v29 < CFStringGetLength(v28))
          {
            v30 = CFStringGetCharacterAtIndex(v28, v29++);
            if ((v30 - 65) <= 0x19)
            {
              if (!CFStringHasPrefix(v7, **(CFStringRef **)(a1 + 40)))
                goto LABEL_48;
              break;
            }
          }
        }
      }
      if (**(_BYTE **)(a1 + 72))
      {
        Mutable = CFStringCreateMutable(0, 0);
        CFStringAppend(Mutable, CFSTR(" "));
        CFStringAppend(Mutable, v7);
        sub_20B8A8488(v10, *(_QWORD **)(a1 + 80), Mutable, v8, **(void ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, **(unsigned __int8 **)(a1 + 88), v27);
        if (Mutable)
          CFRelease(Mutable);
      }
      else
      {
        sub_20B8A8488(v10, *(_QWORD **)(a1 + 80), v7, v8, **(void ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, **(unsigned __int8 **)(a1 + 88), v27);
      }
    }
LABEL_46:
    ++**(_QWORD **)(a1 + 24);
    if (**(_BYTE **)(a1 + 8))
      *a5 = 1;
LABEL_48:
    if (v15)
      CFRelease(v15);
  }
}

void sub_20B8A8E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8A8E94(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8A8ED0()
{
  return &unk_24C45ED50;
}

uint64_t sub_20B8A8EDC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B8A8F2C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B8A8F8C(uint64_t a1, void *a2)
{
  uint64_t v2;
  const char *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_20B80BB74();
  v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (v5)
  {
    objc_msgSend_addEntriesFromDictionary_(a2, v4, (uint64_t)v5);
    CFRelease(v5);
  }
  return v5 != 0;
}

void sub_20B8A8FE8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20B8A9000(uint64_t a1, uint64_t a2)
{
  const void *v2;
  size_t v3;
  const void *v5;
  size_t v6;
  size_t v8;
  int v9;
  BOOL v11;

  v2 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v3 >= v6)
    v8 = v6;
  else
    v8 = v3;
  v9 = memcmp(v2, v5, v8);
  if (v9 < 0)
    return 1;
  if (v9)
    v11 = 1;
  else
    v11 = v3 >= v6;
  return !v11;
}

uint64_t sub_20B8A9044(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C466D98;
  sub_20B8789BC(a1 + 8);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  sub_20B827F10(a1 + 424);
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 777) = 0u;
  return a1;
}

void sub_20B8A90C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 423) < 0)
    operator delete(*v3);
  sub_20B878A58(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8A90E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24C466D98;
  sub_20B8A91DC((_QWORD *)a1);
  v2 = *(void **)(a1 + 768);
  if (v2)
  {
    *(_QWORD *)(a1 + 776) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 744);
  if (v3)
  {
    *(_QWORD *)(a1 + 752) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 720);
  if (v4)
  {
    *(_QWORD *)(a1 + 728) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 711) < 0)
    operator delete(*(void **)(a1 + 688));
  v5 = MEMORY[0x24BEDB800];
  v6 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 424) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 424 + *(_QWORD *)(v6 - 24)) = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(a1 + 432) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 519) < 0)
    operator delete(*(void **)(a1 + 496));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 536);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  sub_20B878A58(a1 + 8);
  return a1;
}

_QWORD *sub_20B8A91DC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  void **v6;

  if (*((_DWORD *)result + 95) != 3)
  {
    v1 = result;
    v2 = result[94];
    v3 = result[93];
    if (v2 == v3)
    {
      v3 = result[94];
    }
    else
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v6 = *(void ***)(v3 + 8 * v4);
        if (v6)
        {
          sub_20B969128(v6);
          v2 = v1[94];
          v3 = v1[93];
        }
        v4 = v5++;
      }
      while (v4 < (v2 - v3) >> 3);
    }
    v1[94] = v3;
    v1[91] = v1[90];
    v1[97] = v1[96];
    return sub_20B878B18((uint64_t)(v1 + 1));
  }
  return result;
}

void sub_20B8A9274(uint64_t a1)
{
  sub_20B8A90E8(a1);
  JUMPOUT(0x20BD39CB0);
}

int *sub_20B8A9298(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *result;
  unint64_t v9;

  v5 = *(_QWORD *)(a1 + 744);
  v6 = *(_QWORD *)(a1 + 752);
  if (v5 == v6)
    return 0;
  v7 = *(unsigned int *)(a1 + 712);
  if (v7 >= (v6 - v5) >> 3)
    return 0;
  result = *(int **)(v5 + 8 * v7);
  if (result)
  {
    v9 = 0;
    sub_20B9692E0((uint64_t)result, *result, a2, a3, a5, &v9, a4, (__int16)a2);
    return (int *)v9;
  }
  return result;
}

uint64_t sub_20B8A9304@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, uint8x8_t a5@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;

  *(_WORD *)a4 = 0;
  *(_QWORD *)(a4 + 12) = 0;
  *(_QWORD *)(a4 + 4) = 0;
  *(_DWORD *)(a4 + 20) = 0;
  v6 = *(_QWORD *)(result + 744);
  v7 = *(_QWORD *)(result + 752);
  if (v6 != v7)
  {
    v8 = *(unsigned int *)(result + 712);
    if (v8 < (v7 - v6) >> 3)
    {
      result = *(_QWORD *)(v6 + 8 * v8);
      if (result)
      {
        v9 = a3;
        result = sub_20B969160(result, a2, a3, a5);
        *(_DWORD *)(a4 + 8) = result;
        *(_WORD *)(a4 + 12) = v9;
      }
    }
  }
  return result;
}

void sub_20B8A9368(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 0;
}

uint64_t sub_20B8A937C()
{
  return 0;
}

uint64_t sub_20B8A9384(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unsigned int *v26;
  _QWORD v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[16];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 744);
  v10 = *(_QWORD *)(a1 + 752);
  if (v9 == v10)
    return 0;
  v12 = *(unsigned int *)(a1 + 712);
  if (v12 >= (v10 - v9) >> 3 || !*(_QWORD *)(v9 + 8 * v12))
    return 0;
  v20 = a2;
  if (a2 == 2)
    v21 = 1;
  else
    v21 = 2 * (a2 == 1);
  if (a2 == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    {
      v9 = *(_QWORD *)(a1 + 744);
      v10 = *(_QWORD *)(a1 + 752);
      goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  if (v9 == v10 || (v22 = *(unsigned int *)(a1 + 712), v22 >= (v10 - v9) >> 3))
    v23 = 0;
  else
    v23 = *(_QWORD *)(v9 + 8 * v22);
  v27[0] = v23;
  v27[1] = a5;
  v27[2] = a6;
  v27[3] = a3;
  LODWORD(v28) = a4;
  *((_QWORD *)&v28 + 1) = a9;
  *(_QWORD *)&v29 = a8;
  *((_QWORD *)&v29 + 1) = a7;
  LOBYTE(v31) = (a2 & 0x800) == 0;
  BYTE1(v31) = (a2 & 0xF100) != 0;
  LOBYTE(v32[0]) = (v20 == 1) & ((unsigned __int16)(a2 & 0x800) >> 11);
  LODWORD(v30) = v21;
  BYTE1(v32[0]) = 1;
  if (a4 >= 0x80)
    LOBYTE(v32[0]) = 0;
  *((_QWORD *)&v31 + 1) = (char *)v32 + 2;
  if (v9 == v10 || (v25 = *(unsigned int *)(a1 + 712), v25 >= (v10 - v9) >> 3))
    v26 = 0;
  else
    v26 = *(unsigned int **)(v9 + 8 * v25);
  return sub_20BA19018(v26, (uint64_t)v27, 0.0);
}

int *sub_20B8A95A8(uint64_t a1, __int16 a2, unsigned __int16 *a3, unsigned int a4, uint64_t a5, _BYTE *a6, uint8x8_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int *result;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;

  v7 = *(_QWORD *)(a1 + 744);
  v8 = *(_QWORD *)(a1 + 752);
  if (v7 == v8)
    return 0;
  v10 = *(unsigned int *)(a1 + 712);
  if (v10 >= (v8 - v7) >> 3)
    return 0;
  result = *(int **)(v7 + 8 * v10);
  if (!result)
    return result;
  if (a2 == 3)
  {
    v23 = 0;
    sub_20BA17980((uint64_t)result, *result, a3, a4, 1, a5, (uint64_t)a6, a6, a7, &v23);
    return (int *)v23;
  }
  if (a2 != 1)
  {
    if (!(_BYTE)a2)
    {
      v23 = 0;
      sub_20BA174F8((uint64_t)result, *result, a3, a4, -1, 0, a5, (uint64_t)a6, a6, &v23);
      return (int *)v23;
    }
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  v18 = *(_QWORD *)(a1 + 744);
  if ((a2 & 0xF000) == 0)
  {
    v22 = *(int **)(v18 + 8 * *(unsigned int *)(a1 + 712));
    v23 = 0;
    sub_20BA17980((uint64_t)v22, *v22, a3, a4, 0, a5, (uint64_t)a6, a6, v17, &v23);
    return (int *)v23;
  }
  v19 = *(_QWORD *)(a1 + 752);
  if (v18 == v19 || (v20 = *(unsigned int *)(a1 + 712), v20 >= (v19 - v18) >> 3))
    v21 = 0;
  else
    v21 = *(int **)(v18 + 8 * v20);
  return (int *)sub_20BA17D2C(v21, a3, a4, a5, a6);
}

uint64_t sub_20B8A9730(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  char **v31;
  char **v32;
  int v33;
  char *v34;
  unint64_t v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  size_t v91;
  uint64_t v93;
  uint64_t v94;
  void **v95;

  v6 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_20B8A741C((std::string *)(a1 + 400), a2);
  if ((sub_20B8769A0(v6, a2, a3) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(_QWORD *)(*(_QWORD *)(a1 + 424) - 24)), 0);
    v18 = sub_20B828F84((_QWORD *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_20B828F84(v18, (uint64_t)"(", 1);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = sub_20B828F84(v19, (uint64_t)") [", 3);
    v21 = sub_20B828F84(v20, (uint64_t)"dmmap_.open(file, mode)", 23);
    v22 = "no such file or directory: ";
LABEL_81:
    v89 = sub_20B828F84(v21, (uint64_t)"] ", 2);
    v90 = sub_20B828F84(v89, (uint64_t)v22, 27);
    v91 = strlen(a2);
    sub_20B828F84(v90, (uint64_t)a2, v91);
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 <= 0x63)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(_QWORD *)(*(_QWORD *)(a1 + 424) - 24)), 0);
    v23 = sub_20B828F84((_QWORD *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_20B828F84(v23, (uint64_t)"(", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = sub_20B828F84(v24, (uint64_t)") [", 3);
    v26 = "dmmap_.size() >= 100";
    v27 = 20;
LABEL_80:
    v21 = sub_20B828F84(v25, (uint64_t)v26, v27);
    v22 = "dictionary file is broken: ";
    goto LABEL_81;
  }
  v8 = *(unsigned int **)(a1 + 16);
  if (v7 != (*v8 ^ 0xEF718F77))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(_QWORD *)(*(_QWORD *)(a1 + 424) - 24)), 0);
    v28 = sub_20B828F84((_QWORD *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_20B828F84(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v25 = sub_20B828F84(v29, (uint64_t)") [", 3);
    v26 = "(magic ^ DictionaryMagicID) == dmmap_.size()";
    v27 = 44;
    goto LABEL_80;
  }
  *(_DWORD *)(a1 + 376) = v8[1];
  *(_DWORD *)(a1 + 380) = v8[2];
  *(_DWORD *)(a1 + 384) = v8[3];
  *(_DWORD *)(a1 + 388) = v8[4];
  *(_DWORD *)(a1 + 392) = v8[5];
  v9 = v8[6];
  *(_DWORD *)(a1 + 396) = v8[7];
  v11 = v8[8];
  v10 = v8[9];
  *(_QWORD *)(a1 + 368) = v8 + 10;
  v12 = (int *)(v8 + 18);
  *(_DWORD *)(a1 + 712) = 0;
  v94 = a1 + 760;
  v93 = v11;
  if (v10 >= 2)
  {
    v30 = 0;
    v95 = (void **)(a1 + 720);
    v31 = (char **)(a1 + 744);
    v32 = (char **)(a1 + 768);
    do
    {
      v33 = *v12;
      v34 = *(char **)(a1 + 728);
      v35 = *(_QWORD *)(a1 + 736);
      if ((unint64_t)v34 >= v35)
      {
        v37 = (char *)*v95;
        v38 = (v34 - (_BYTE *)*v95) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          sub_20B80CDD8();
        v40 = v35 - (_QWORD)v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_20B8127BC(a1 + 736, v41);
          v34 = *(char **)(a1 + 728);
          v37 = *(char **)(a1 + 720);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = v33;
        v36 = v43 + 4;
        while (v34 != v37)
        {
          v44 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        *(_QWORD *)(a1 + 720) = v43;
        *(_QWORD *)(a1 + 728) = v36;
        *(_QWORD *)(a1 + 736) = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v34 = v33;
        v36 = v34 + 4;
      }
      *(_QWORD *)(a1 + 728) = v36;
      v45 = (uint64_t)(v12 + 2);
      v46 = v12[1];
      sub_20B969098(0, 0, v45, v46);
      v48 = v47;
      v49 = *(_QWORD **)(a1 + 752);
      v50 = *(_QWORD *)(a1 + 760);
      if ((unint64_t)v49 >= v50)
      {
        v52 = ((char *)v49 - *v31) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
          goto LABEL_84;
        v53 = v50 - (_QWORD)*v31;
        v54 = v53 >> 2;
        if (v53 >> 2 <= (unint64_t)(v52 + 1))
          v54 = v52 + 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v56 = (char *)sub_20B800BE8(v94, v55);
        else
          v56 = 0;
        v57 = &v56[8 * v52];
        *(_QWORD *)v57 = v48;
        v51 = v57 + 8;
        v58 = *(char **)(a1 + 752);
        v59 = *(char **)(a1 + 744);
        if (v58 != v59)
        {
          do
          {
            v60 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *((_QWORD *)v57 - 1) = v60;
            v57 -= 8;
          }
          while (v58 != v59);
          v58 = *v31;
        }
        *(_QWORD *)(a1 + 744) = v57;
        *(_QWORD *)(a1 + 752) = v51;
        *(_QWORD *)(a1 + 760) = &v56[8 * v55];
        if (v58)
          operator delete(v58);
      }
      else
      {
        *v49 = v47;
        v51 = v49 + 1;
      }
      *(_QWORD *)(a1 + 752) = v51;
      v61 = v45 + v46 + 4;
      v62 = *(unsigned int *)(v45 + v46);
      v63 = *(uint64_t **)(a1 + 776);
      v64 = *(_QWORD *)(a1 + 784);
      if ((unint64_t)v63 >= v64)
      {
        v66 = ((char *)v63 - *v32) >> 3;
        if ((unint64_t)(v66 + 1) >> 61)
          sub_20B8AD01C();
        v67 = v64 - (_QWORD)*v32;
        v68 = v67 >> 2;
        if (v67 >> 2 <= (unint64_t)(v66 + 1))
          v68 = v66 + 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        if (v69)
          v70 = (char *)sub_20B800BE8(a1 + 784, v69);
        else
          v70 = 0;
        v71 = (uint64_t *)&v70[8 * v66];
        *v71 = v61;
        v65 = v71 + 1;
        v72 = *(char **)(a1 + 776);
        v73 = *(char **)(a1 + 768);
        if (v72 != v73)
        {
          do
          {
            v74 = *((_QWORD *)v72 - 1);
            v72 -= 8;
            *--v71 = v74;
          }
          while (v72 != v73);
          v72 = *v32;
        }
        *(_QWORD *)(a1 + 768) = v71;
        *(_QWORD *)(a1 + 776) = v65;
        *(_QWORD *)(a1 + 784) = &v70[8 * v69];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v63 = v61;
        v65 = v63 + 1;
      }
      *(_QWORD *)(a1 + 776) = v65;
      v12 = (int *)(v61 + v62);
      ++v30;
    }
    while (v30 != v10);
  }
  else
  {
    sub_20B969098(0, 0, (uint64_t)v12, v9);
    v14 = v13;
    v15 = *(_QWORD **)(a1 + 752);
    v16 = *(_QWORD *)(a1 + 760);
    if ((unint64_t)v15 >= v16)
    {
      v75 = *(_QWORD *)(a1 + 744);
      v76 = ((uint64_t)v15 - v75) >> 3;
      if ((unint64_t)(v76 + 1) >> 61)
LABEL_84:
        sub_20B8AD01C();
      v77 = v16 - v75;
      v78 = v77 >> 2;
      if (v77 >> 2 <= (unint64_t)(v76 + 1))
        v78 = v76 + 1;
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
        v79 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v79 = v78;
      if (v79)
        v80 = (char *)sub_20B800BE8(v94, v79);
      else
        v80 = 0;
      v81 = &v80[8 * v76];
      v82 = &v80[8 * v79];
      *(_QWORD *)v81 = v14;
      v17 = v81 + 8;
      v83 = *(char **)(a1 + 752);
      v84 = *(char **)(a1 + 744);
      if (v83 != v84)
      {
        do
        {
          v85 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v81 - 1) = v85;
          v81 -= 8;
        }
        while (v83 != v84);
        v83 = *(char **)(a1 + 744);
      }
      *(_QWORD *)(a1 + 744) = v81;
      *(_QWORD *)(a1 + 752) = v17;
      *(_QWORD *)(a1 + 760) = v82;
      if (v83)
        operator delete(v83);
    }
    else
    {
      *v15 = v13;
      v17 = v15 + 1;
    }
    *(_QWORD *)(a1 + 752) = v17;
    v12 = (int *)((char *)v12 + v9);
  }
  *(_QWORD *)(a1 + 352) = v12;
  v86 = (char *)v12 + *(unsigned int *)(a1 + 396);
  if ((_DWORD)v93)
    *(_QWORD *)(a1 + 360) = v86;
  if (&v86[v93] != (char *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24)))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 424 + *(_QWORD *)(*(_QWORD *)(a1 + 424) - 24)), 0);
    v87 = sub_20B828F84((_QWORD *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
    sub_20B828F84(v87, (uint64_t)"(", 1);
    v88 = (_QWORD *)std::ostream::operator<<();
    v25 = sub_20B828F84(v88, (uint64_t)") [", 3);
    v26 = "ptr == dmmap_.end()";
    v27 = 19;
    goto LABEL_80;
  }
  return 1;
}

BOOL sub_20B8A9DA8(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  _BOOL8 v5;
  void *v7[2];
  void *v8;
  void *__p[2];
  char v10;

  v3 = a1 + 8;
  sub_20B80BBD0(__p, a2);
  v4 = sub_20B871B2C(v3, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_BYTE *)operator new() = 0;
    MEMORY[0x20BD39CB0]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
    {
      sub_20B80ACE0(v7, v4[7], (unint64_t)v4[8]);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)(v4 + 7);
      v8 = v4[9];
    }
    v5 = sub_20B8AE650((uint64_t)v7);
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
  }
  return v5;
}

void sub_20B8A9E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8A9EB8@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = sub_20B8298D4(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t sub_20B8A9F48(uint64_t a1, int a2, int a3)
{
  uint64_t v6;

  v6 = sub_20B8A9044(a1);
  *(_QWORD *)v6 = &off_24C467310;
  *(_QWORD *)(v6 + 800) = 0;
  *(_DWORD *)(v6 + 808) = a2;
  *(_DWORD *)(v6 + 812) = a3;
  *(_DWORD *)(v6 + 820) = 0;
  *(_DWORD *)(v6 + 824) = a2;
  *(_QWORD *)(v6 + 828) = 0;
  *(_WORD *)(v6 + 836) = 1;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *(_OWORD *)(v6 + 872) = 0u;
  *(_OWORD *)(v6 + 888) = 0u;
  *(_OWORD *)(v6 + 904) = 0u;
  *(_OWORD *)(v6 + 920) = 0u;
  pthread_rwlock_init((pthread_rwlock_t *)(v6 + 936), 0);
  *(_QWORD *)(a1 + 1136) = 850045863;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  return a1;
}

void sub_20B8A9FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 935) < 0)
    operator delete(*(void **)(v2 + 912));
  v5 = *(void **)(v2 + 888);
  if (v5)
  {
    *(_QWORD *)(v2 + 896) = v5;
    operator delete(v5);
  }
  sub_20B83AFD0((void ***)va);
  if (*(char *)(v2 + 863) < 0)
    operator delete(*v3);
  sub_20B8A90E8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8AA04C(uint64_t a1)
{
  pthread_rwlock_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  void *v8;
  void *v9;
  void **v11;

  *(_QWORD *)a1 = &off_24C467310;
  v2 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  v3 = *(_QWORD *)(a1 + 752);
  v4 = *(_QWORD *)(a1 + 744);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    v6 = *(unsigned int *)(a1 + 712);
    if (v6 >= v5 >> 3)
      v7 = 0;
    else
      v7 = *(_DWORD **)(v4 + 8 * v6);
    sub_20B963CE8(v7);
    *(_QWORD *)(a1 + 752) = *(_QWORD *)(a1 + 744);
  }
  v8 = *(void **)(a1 + 800);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 800) = 0;
  }
  pthread_rwlock_unlock(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 1136));
  pthread_rwlock_destroy(v2);
  if (*(char *)(a1 + 935) < 0)
    operator delete(*(void **)(a1 + 912));
  v9 = *(void **)(a1 + 888);
  if (v9)
  {
    *(_QWORD *)(a1 + 896) = v9;
    operator delete(v9);
  }
  v11 = (void **)(a1 + 864);
  sub_20B83AFD0(&v11);
  if (*(char *)(a1 + 863) < 0)
    operator delete(*(void **)(a1 + 840));
  return sub_20B8A90E8(a1);
}

void sub_20B8AA13C(uint64_t a1)
{
  sub_20B8AA04C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8AA160(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  const char *v4;
  const std::__fs::filesystem::path *v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  std::error_code *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  std::string::size_type v40;
  const std::string::value_type *v41;
  const std::string::value_type *v42;
  const std::string::value_type *v43;
  uint64_t v44;
  char *v45;
  const std::string::value_type *v46;
  const std::string::value_type *v47;
  std::string::value_type v48;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  char *v55;
  char *v56;
  std::string::value_type *v57;
  char *v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD *v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _DWORD *v90;
  unsigned int v91;
  std::string::value_type *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  size_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  const std::string::value_type *v104;
  size_t __n;
  std::mutex *v106;
  char *v107;
  size_t v108;
  unsigned __int8 *v109;
  std::string::size_type v110;
  uint64_t v111;
  uint64_t v112;
  void *__p[2];
  uint64_t v114;
  void *v115;
  _BYTE *v116;
  char *v117;

  v2 = (std::mutex *)(a1 + 1136);
  std::mutex::lock((std::mutex *)(a1 + 1136));
  v3 = 1;
  if (!*(_BYTE *)(a1 + 837))
  {
    *(_BYTE *)(a1 + 837) = 1;
    v4 = (const char *)(a1 + 912);
    if (*(char *)(a1 + 935) < 0)
      v4 = *(const char **)v4;
    v5 = (const std::__fs::filesystem::path *)(a1 + 400);
    v6 = (char *)(a1 + 400);
    if (*(char *)(a1 + 423) < 0)
      v6 = (char *)v5->__pn_.__r_.__value_.__r.__words[0];
    if ((sub_20B8769A0(a1 + 8, v6, v4) & 1) != 0)
    {
      v7 = *(_QWORD *)(a1 + 24);
      if (v7 && (v8 = *(unsigned int **)(a1 + 16), v7 == (*v8 ^ 0xEF718F77)))
      {
        *(_QWORD *)(a1 + 388) = 0;
        v9 = v8[1];
        *(_DWORD *)(a1 + 376) = v9;
        if (v9 > 0x68)
        {
          *(_DWORD *)(a1 + 380) = v8[2];
          *(_DWORD *)(a1 + 384) = v8[3];
          *(_DWORD *)(a1 + 820) = v8[4];
          v20 = v8[5];
          v21 = v8[6];
          v22 = v8[8];
          v112 = v8[7];
          __n = v8[9];
          v106 = v2;
          v23 = malloc_type_malloc(v21, 0x49A76DDDuLL);
          v110 = v20;
          memcpy(v23, v8 + 10, v21);
          v108 = v21;
          v24 = sub_20B963C34(0, (int *)v23, v21, 0);
          v25 = v24;
          v26 = *(_QWORD **)(a1 + 752);
          v27 = *(_QWORD *)(a1 + 760);
          if ((unint64_t)v26 >= v27)
          {
            v29 = *(_QWORD *)(a1 + 744);
            v30 = ((uint64_t)v26 - v29) >> 3;
            if ((unint64_t)(v30 + 1) >> 61)
              sub_20B8AD01C();
            v31 = v27 - v29;
            v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1))
              v32 = v30 + 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
              v34 = (char *)sub_20B800BE8(a1 + 760, v33);
            else
              v34 = 0;
            v35 = &v34[8 * v30];
            v36 = &v34[8 * v33];
            *(_QWORD *)v35 = v25;
            v28 = v35 + 8;
            v37 = *(char **)(a1 + 752);
            v38 = *(char **)(a1 + 744);
            if (v37 != v38)
            {
              do
              {
                v39 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v35 - 1) = v39;
                v35 -= 8;
              }
              while (v37 != v38);
              v37 = *(char **)(a1 + 744);
            }
            *(_QWORD *)(a1 + 744) = v35;
            *(_QWORD *)(a1 + 752) = v28;
            *(_QWORD *)(a1 + 760) = v36;
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v26 = v24;
            v28 = v26 + 1;
          }
          *(_QWORD *)(a1 + 752) = v28;
          *(_DWORD *)(a1 + 712) = 0;
          v40 = v110;
          v41 = (char *)v8 + v21 + 40;
          v42 = &v41[v110];
          v43 = &v41[v110 + v22];
          v115 = 0;
          v116 = 0;
          v117 = 0;
          v44 = v112;
          if ((((int)v43 - *(_DWORD *)(a1 + 16)) & 7) != 0)
          {
            if ((_DWORD)v112)
            {
              v104 = v43;
              v45 = 0;
              v46 = &v43[v112];
              v47 = v43;
              do
              {
                v48 = *v47;
                if (v45 >= v117)
                {
                  v50 = (unint64_t)v115;
                  v51 = v45 - (_BYTE *)v115;
                  v52 = v45 - (_BYTE *)v115 + 1;
                  if (v52 < 0)
                    sub_20B80CDD8();
                  v53 = v117 - (_BYTE *)v115;
                  if (2 * (v117 - (_BYTE *)v115) > (unint64_t)v52)
                    v52 = 2 * v53;
                  if (v53 >= 0x3FFFFFFFFFFFFFFFLL)
                    v54 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v54 = v52;
                  if (v54)
                    v55 = (char *)operator new(v54);
                  else
                    v55 = 0;
                  v56 = &v55[v51];
                  v57 = &v55[v51];
                  *v57 = v48;
                  v49 = v57 + 1;
                  if (v45 != (char *)v50)
                  {
                    v58 = &v45[~v50];
                    do
                    {
                      v59 = *--v45;
                      (v58--)[(_QWORD)v55] = v59;
                    }
                    while (v45 != (char *)v50);
                    v45 = (char *)v115;
                    v56 = v55;
                  }
                  v115 = v56;
                  v117 = &v55[v54];
                  if (v45)
                    operator delete(v45);
                }
                else
                {
                  *v45 = v48;
                  v49 = v45 + 1;
                }
                v116 = v49;
                ++v47;
                v45 = v49;
              }
              while (v47 != v46);
              v107 = (char *)v115;
              v21 = v108;
              v40 = v110;
              v44 = v112;
              v41 = (char *)v8 + v108 + 40;
              v43 = v104;
            }
            else
            {
              v107 = 0;
            }
          }
          else
          {
            v107 = (char *)v43;
          }
          if (*(char *)(a1 + 863) < 0)
          {
            **(_BYTE **)(a1 + 840) = 0;
            *(_QWORD *)(a1 + 848) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 840) = 0;
            *(_BYTE *)(a1 + 863) = 0;
          }
          *(_QWORD *)(a1 + 896) = *(_QWORD *)(a1 + 888);
          sub_20B83B010((uint64_t *)(a1 + 864));
          std::string::append((std::string *)(a1 + 840), v41, v40);
          v60 = *(int *)(a1 + 820);
          *(_DWORD *)(a1 + 816) = v60;
          v61 = malloc_type_malloc(16 * v60, 0x100004023422098uLL);
          *(_QWORD *)(a1 + 800) = v61;
          memcpy(v61, &v43[v44], __n);
          if (*(int *)(a1 + 820) >= 1)
          {
            v62 = 0;
            v63 = (_QWORD *)(a1 + 888);
            v64 = (uint64_t)v8 + v21 + v40 + 42;
            do
            {
              v65 = *(_QWORD *)(a1 + 800) + 16 * v62;
              *(_BYTE *)(v65 + 6) = 32;
              v66 = (unsigned __int8 *)(v65 + 6);
              v67 = *(unsigned int *)(v66 + 6);
              v68 = *(_QWORD *)(a1 + 896);
              *(_DWORD *)(v66 + 6) = -1431655765 * ((unint64_t)(v68 - *(_QWORD *)(a1 + 888)) >> 2);
              v69 = v66 - 1;
              if (*(v66 - 1))
              {
                v109 = v66;
                v111 = v62;
                v70 = 0;
                v71 = &v107[v67];
                do
                {
                  v72 = &v71[12 * v70];
                  v73 = *(_QWORD *)(a1 + 896);
                  v74 = *(_QWORD *)(a1 + 904);
                  if (v73 >= v74)
                  {
                    v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *v63) >> 2);
                    v78 = v77 + 1;
                    if (v77 + 1 > 0x1555555555555555)
                      sub_20B8AD01C();
                    v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *v63) >> 2);
                    if (2 * v79 > v78)
                      v78 = 2 * v79;
                    if (v79 >= 0xAAAAAAAAAAAAAAALL)
                      v80 = 0x1555555555555555;
                    else
                      v80 = v78;
                    if (v80)
                      v80 = (unint64_t)sub_20B8AD2A4(v80);
                    else
                      v81 = 0;
                    v82 = v80 + 12 * v77;
                    v83 = *(_QWORD *)v72;
                    *(_DWORD *)(v82 + 8) = *((_DWORD *)v72 + 2);
                    *(_QWORD *)v82 = v83;
                    v84 = *(_DWORD **)(a1 + 896);
                    v85 = *(_DWORD **)(a1 + 888);
                    v86 = v82;
                    if (v84 != v85)
                    {
                      do
                      {
                        v87 = *(_QWORD *)(v84 - 3);
                        v84 -= 3;
                        v88 = v84[2];
                        *(_QWORD *)(v86 - 12) = v87;
                        v86 -= 12;
                        *(_DWORD *)(v86 + 8) = v88;
                      }
                      while (v84 != v85);
                      v84 = (_DWORD *)*v63;
                    }
                    *(_QWORD *)(a1 + 888) = v86;
                    v76 = v82 + 12;
                    *(_QWORD *)(a1 + 896) = v82 + 12;
                    *(_QWORD *)(a1 + 904) = v80 + 12 * v81;
                    if (v84)
                      operator delete(v84);
                  }
                  else
                  {
                    v75 = *(_QWORD *)v72;
                    *(_DWORD *)(v73 + 8) = *((_DWORD *)v72 + 2);
                    *(_QWORD *)v73 = v75;
                    v76 = v73 + 12;
                  }
                  *(_QWORD *)(a1 + 896) = v76;
                  v91 = *(_DWORD *)(v76 - 4);
                  v90 = (_DWORD *)(v76 - 4);
                  v89 = v91;
                  v92 = (std::string::value_type *)&v42[v91];
                  if (*(_WORD *)v92)
                  {
                    v93 = 0;
                    v94 = v64 + v89;
                    do
                    {
                      v95 = v93 + 2;
                      v96 = *(unsigned __int16 *)(v94 + v93);
                      v93 += 2;
                    }
                    while (v96);
                    v97 = v95 + 2;
                  }
                  else
                  {
                    v97 = 2;
                  }
                  sub_20B82E068(__p, v92, v97);
                  v98 = *(_QWORD *)(a1 + 872);
                  *v90 = -1431655765 * ((v98 - *(_QWORD *)(a1 + 864)) >> 3);
                  if (v98 >= *(_QWORD *)(a1 + 880))
                  {
                    v100 = sub_20B8AD184((uint64_t *)(a1 + 864), (__int128 *)__p);
                  }
                  else
                  {
                    if (SHIBYTE(v114) < 0)
                    {
                      sub_20B80ACE0((_BYTE *)v98, __p[0], (unint64_t)__p[1]);
                    }
                    else
                    {
                      v99 = *(_OWORD *)__p;
                      *(_QWORD *)(v98 + 16) = v114;
                      *(_OWORD *)v98 = v99;
                    }
                    v100 = v98 + 24;
                    *(_QWORD *)(a1 + 872) = v98 + 24;
                  }
                  *(_QWORD *)(a1 + 872) = v100;
                  if (SHIBYTE(v114) < 0)
                    operator delete(__p[0]);
                  ++v70;
                  v101 = *v69;
                }
                while (v70 < v101);
                v62 = v111;
                v102 = *v109;
                v68 = *(_QWORD *)(a1 + 896);
              }
              else
              {
                v101 = 0;
                v102 = 32;
              }
              LODWORD(__p[1]) = 0;
              __p[0] = 0;
              sub_20B8AD2E8((unint64_t *)(a1 + 888), v68, v102 - v101, (unint64_t)__p);
              ++v62;
            }
            while (v62 < *(int *)(a1 + 820));
          }
          sub_20B878B18(a1 + 8);
          if (v115)
            operator delete(v115);
          v3 = 1;
          v2 = v106;
        }
        else
        {
          sub_20B878B18(a1 + 8);
          pthread_mutex_lock(&stru_2547286E8);
          if (*(char *)(a1 + 423) < 0)
            v5 = (const std::__fs::filesystem::path *)v5->__pn_.__r_.__value_.__r.__words[0];
          remove(v5, v10);
          pthread_mutex_unlock(&stru_2547286E8);
          sub_20B8AAA34(a1, *(_DWORD *)(a1 + 812), 105, 3);
        }
      }
      else
      {
        sub_20B8AAA34(a1, *(_DWORD *)(a1 + 812), 105, 3);
        sub_20B878B18(a1 + 8);
      }
    }
    else
    {
      std::ios_base::clear((std::ios_base *)(a1 + 424 + *(_QWORD *)(*(_QWORD *)(a1 + 424) - 24)), 0);
      v11 = sub_20B828F84((_QWORD *)(a1 + 424), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/dictionary.cpp", 67);
      sub_20B828F84(v11, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = sub_20B828F84(v12, (uint64_t)") [", 3);
      v14 = sub_20B828F84(v13, (uint64_t)"dmmap_.open(filename_.c_str(), mode)", 36);
      v15 = sub_20B828F84(v14, (uint64_t)"] ", 2);
      v16 = sub_20B828F84(v15, (uint64_t)"no such file or directory: ", 27);
      v17 = *(char *)(a1 + 423);
      if (v17 >= 0)
        v18 = a1 + 400;
      else
        v18 = *(_QWORD *)(a1 + 400);
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a1 + 423);
      else
        v19 = *(_QWORD *)(a1 + 408);
      sub_20B828F84(v16, v18, v19);
      v3 = 0;
    }
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_20B8AA8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26)
{
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8AA978(uint64_t a1, char *a2, char *a3)
{
  sub_20B8A741C((std::string *)(a1 + 400), a2);
  sub_20B8A741C((std::string *)(a1 + 912), a3);
  *(_DWORD *)(a1 + 380) = 3;
  return 1;
}

_QWORD *sub_20B8AA9B8(_QWORD *result)
{
  _QWORD *v1;
  _DWORD **v2;
  _DWORD **v3;
  _DWORD *v4;

  if (*((_DWORD *)result + 95) != 3)
  {
    v1 = result;
    v2 = (_DWORD **)result[93];
    v3 = (_DWORD **)result[94];
    if (v2 != v3)
    {
      do
      {
        v4 = *v2++;
        sub_20B963CE8(v4);
      }
      while (v2 != v3);
      v2 = (_DWORD **)v1[93];
    }
    v1[94] = v2;
    v1[91] = v1[90];
    v1[97] = v1[96];
    return sub_20B878B18((uint64_t)(v1 + 1));
  }
  return result;
}

uint64_t sub_20B8AAA34(uint64_t a1, int a2, int a3, int a4)
{
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;

  v6 = *(_DWORD *)(a1 + 808);
  *(_DWORD *)(a1 + 380) = a4;
  *(_DWORD *)(a1 + 376) = a3;
  *(_BYTE *)(a1 + 837) = 1;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v7 = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
  v8 = v7;
  if (v7)
  {
    v7[20] = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    v7[4] = 0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 3) = 0;
  }
  v9 = *(_QWORD **)(a1 + 752);
  v10 = *(_QWORD *)(a1 + 760);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(_QWORD *)(a1 + 744);
    v13 = ((uint64_t)v9 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_20B8AD01C();
    v14 = v10 - v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)sub_20B800BE8(a1 + 760, v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = v8;
    v11 = v18 + 8;
    v20 = *(char **)(a1 + 752);
    v21 = *(char **)(a1 + 744);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = *(char **)(a1 + 744);
    }
    *(_QWORD *)(a1 + 744) = v18;
    *(_QWORD *)(a1 + 752) = v11;
    *(_QWORD *)(a1 + 760) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v9 = v7;
    v11 = v9 + 1;
  }
  *(_QWORD *)(a1 + 752) = v11;
  if (v6 >= a2)
    v23 = a2;
  else
    v23 = v6;
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 816) = v23;
  *(_QWORD *)(a1 + 800) = malloc_type_malloc(16 * v23, 0x100004023422098uLL);
  return 1;
}

uint64_t sub_20B8AABA0(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;

  v2 = *(_QWORD *)(result + 744);
  v3 = *(_QWORD *)(result + 752);
  if (v2 != v3)
  {
    v4 = result;
    v5 = *(unsigned int *)(result + 712);
    if (v5 < (v3 - v2) >> 3)
    {
      result = *(_QWORD *)(v2 + 8 * v5);
      if (result)
      {
        v7 = (_QWORD *)(v4 + 840);
        if (*(char *)(v4 + 863) < 0)
          v7 = (_QWORD *)*v7;
        result = sub_20B964420(result, (uint64_t)v7 + *a2, *((unsigned __int8 *)a2 + 4));
        *(_DWORD *)(v4 + 384) -= *((unsigned __int8 *)a2 + 5);
      }
    }
  }
  return result;
}

uint64_t sub_20B8AAC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_rwlock_t *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 800) + 16 * (*(_DWORD *)(a2 + 8) - 1) + 12);
  v8 = *(_QWORD *)(a1 + 888);
  pthread_rwlock_unlock(v6);
  return v8 + 12 * (v7 + a3);
}

uint64_t sub_20B8AAC88(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  uint64_t v5;

  v4 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 800) + 16 * (*(_DWORD *)(a2 + 8) - 1) + 5);
  pthread_rwlock_unlock(v4);
  return v5;
}

void sub_20B8AACE0(uint64_t a1, uint64_t a2, __int16 a3, void *__src, size_t __len, __int16 a6, __int16 a7)
{
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::string __p;
  std::string::value_type __s[2];

  *(_WORD *)(a2 + 2) = a6;
  *(_WORD *)(a2 + 6) = a7;
  *(_WORD *)(a2 + 4) = 11;
  *(_WORD *)a2 = a3;
  *(_DWORD *)(a2 + 8) = -1431655765 * ((*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 3);
  *(_WORD *)__s = 0;
  sub_20B82E068(&__p, __src, __len);
  std::string::append(&__p, __s, 2uLL);
  v8 = *(_QWORD *)(a1 + 872);
  if (v8 >= *(_QWORD *)(a1 + 880))
  {
    v10 = sub_20B8AD184((uint64_t *)(a1 + 864), (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20B80ACE0(*(_BYTE **)(a1 + 872), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v8 = v9;
    }
    v10 = v8 + 24;
    *(_QWORD *)(a1 + 872) = v8 + 24;
  }
  *(_QWORD *)(a1 + 872) = v10;
  ++*(_DWORD *)(a1 + 832);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B8AADD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 872) = v15;
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8AADFC(uint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  std::string *__str;
  unint64_t v15;
  unint64_t v16;
  std::string **p_str;

  __str = 0;
  v15 = 0;
  v16 = 0;
  v2 = *(_DWORD *)(a1 + 820);
  if (v2 < 1)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    for (i = 0; i < v2; ++i)
    {
      v5 = *(_QWORD *)(a1 + 800) + 16 * i;
      v7 = *(unsigned __int8 *)(v5 + 5);
      v6 = (unsigned __int8 *)(v5 + 5);
      if (v7)
      {
        v8 = 0;
        v9 = (_DWORD *)(*(_QWORD *)(a1 + 800) + 16 * i + 12);
        do
        {
          v10 = *(_QWORD *)(a1 + 888) + 12 * (v8 + *v9);
          v11 = *(_DWORD *)(v10 + 8);
          *(_DWORD *)(v10 + 8) = -1431655765 * ((v3 - (unint64_t)__str) >> 3);
          v12 = *(_QWORD *)(a1 + 864) + 24 * v11;
          if (v3 >= v16)
          {
            v3 = sub_20B8AD184((uint64_t *)&__str, (__int128 *)v12);
          }
          else
          {
            if (*(char *)(v12 + 23) < 0)
            {
              sub_20B80ACE0((_BYTE *)v3, *(void **)v12, *(_QWORD *)(v12 + 8));
            }
            else
            {
              v13 = *(_OWORD *)v12;
              *(_QWORD *)(v3 + 16) = *(_QWORD *)(v12 + 16);
              *(_OWORD *)v3 = v13;
            }
            v3 += 24;
          }
          v15 = v3;
          ++v8;
        }
        while (v8 < *v6);
        v2 = *(_DWORD *)(a1 + 820);
      }
    }
  }
  if ((std::string **)(a1 + 864) != &__str)
    sub_20B8AD558(a1 + 864, __str, (__int128 *)v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)__str) >> 3));
  p_str = &__str;
  sub_20B83AFD0((void ***)&p_str);
}

void sub_20B8AAF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20B83AFD0(&a12);
  _Unwind_Resume(a1);
}

void sub_20B8AAF98(uint64_t a1)
{
  _QWORD *v2;
  _DWORD **v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v2 = (_QWORD *)(a1 + 744);
  v3 = *(_DWORD ***)(a1 + 744);
  if (*(_DWORD ***)(a1 + 752) != v3)
  {
    if (*v3)
    {
      sub_20B963CE8(*v3);
      v3 = (_DWORD **)*v2;
    }
    *(_QWORD *)(a1 + 752) = v3;
  }
  v4 = malloc_type_malloc(24 * *(int *)(a1 + 820), 0x1010040E2407E0AuLL);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 820);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = v4 + 4;
    v9 = (unsigned __int8 *)(*(_QWORD *)(a1 + 800) + 4);
    do
    {
      v10 = a1 + 840;
      if (*(char *)(a1 + 863) < 0)
        v10 = *(_QWORD *)(a1 + 840);
      v11 = v10 + *((unsigned int *)v9 - 1);
      v12 = *v9;
      v9 += 16;
      *((_QWORD *)v8 - 2) = v11;
      *((_QWORD *)v8 - 1) = v12;
      *v8 = ++v7;
      v8 += 6;
    }
    while (v6 != v7);
  }
  qsort(v4, (int)v6, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_20B8AB238);
  v13 = malloc_type_malloc(8 * *(int *)(a1 + 820), 0x10040436913F5uLL);
  v14 = malloc_type_malloc(8 * *(int *)(a1 + 820), 0x100004000313F17uLL);
  v15 = malloc_type_malloc(4 * *(int *)(a1 + 820), 0x100004052888210uLL);
  v16 = v15;
  if (*(int *)(a1 + 820) >= 1)
  {
    v17 = 0;
    v18 = v5 + 4;
    do
    {
      v19 = *((_QWORD *)v18 - 1);
      v13[v17] = *((_QWORD *)v18 - 2);
      v14[v17] = v19;
      v20 = *v18;
      v18 += 6;
      *((_DWORD *)v15 + v17++) = v20;
    }
    while (v17 < *(int *)(a1 + 820));
  }
  v21 = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
  v22 = v21;
  if (v21)
  {
    v21[20] = 0;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    v21[4] = 0;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 3) = 0;
  }
  sub_20BA00814();
  v23 = *(_QWORD **)(a1 + 752);
  v24 = *(_QWORD *)(a1 + 760);
  if ((unint64_t)v23 >= v24)
  {
    v26 = ((uint64_t)v23 - *v2) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      sub_20B8AD01C();
    v27 = v24 - *v2;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v30 = (char *)sub_20B800BE8(a1 + 760, v29);
    else
      v30 = 0;
    v31 = &v30[8 * v26];
    v32 = &v30[8 * v29];
    *(_QWORD *)v31 = v22;
    v25 = v31 + 8;
    v33 = *(_QWORD **)(a1 + 752);
    v34 = *(_QWORD **)(a1 + 744);
    if (v33 != v34)
    {
      do
      {
        v35 = *--v33;
        *((_QWORD *)v31 - 1) = v35;
        v31 -= 8;
      }
      while (v33 != v34);
      v33 = (_QWORD *)*v2;
    }
    *(_QWORD *)(a1 + 744) = v31;
    *(_QWORD *)(a1 + 752) = v25;
    *(_QWORD *)(a1 + 760) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v23 = v22;
    v25 = v23 + 1;
  }
  *(_QWORD *)(a1 + 752) = v25;
  free(v16);
  free(v14);
  free(v13);
  free(v5);
}

uint64_t sub_20B8AB238(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  _BOOL4 v12;

  v2 = (unint64_t)a1[1];
  v3 = (unint64_t)a2[1];
  if (v2 >= v3)
    v4 = a2[1];
  else
    v4 = a1[1];
  if (v4)
  {
    v5 = *a1;
    v6 = *a2;
    while (1)
    {
      v8 = *v5++;
      v7 = v8;
      v9 = *v6++;
      v10 = v7 >= v9;
      v11 = v7 == v9;
      if (v7 < v9)
        return 0xFFFFFFFFLL;
      if (!v11 && v10)
        return 1;
      if (!--v4)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v10 = v2 >= v3;
    v12 = v2 > v3;
    if (v10)
      return v12;
    else
      return 0xFFFFFFFFLL;
  }
}

void sub_20B8AB290(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, void *a4, size_t a5, __int16 a6, __int16 a7, __int16 a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t i;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  const std::string::value_type *v48;
  unsigned int v49;
  uint64_t v50;
  char *v51;
  int v54;
  std::string __str;

  v8 = *(_QWORD *)(a1 + 744);
  v9 = *(_QWORD *)(a1 + 752);
  if (v8 != v9)
  {
    v11 = *(unsigned int *)(a1 + 712);
    if (v11 < (v9 - v8) >> 3)
    {
      if (*(_QWORD *)(v8 + 8 * v11))
      {
        v17 = *(unsigned int *)(a1 + 820);
        v18 = *(_DWORD *)(a1 + 808);
        v54 = v18;
        if ((_DWORD)v17 == v18)
        {
          v19 = *(unsigned int **)(a1 + 800);
          if ((int)v17 <= 1)
          {
            sub_20B8AABA0(a1, v19);
            v20 = 0;
          }
          else
          {
            v20 = 0;
            v21 = v19[2];
            v22 = v19 + 6;
            for (i = 1; i != v17; ++i)
            {
              v25 = *v22;
              v22 += 4;
              v24 = v25;
              v26 = v21 > v25;
              if (v21 >= v25)
                v21 = v24;
              if (v26)
                v20 = i;
            }
            sub_20B8AABA0(a1, &v19[4 * v20]);
          }
          v28 = *(char **)(a1 + 800);
          v50 = v20;
          v29 = &v28[16 * v20];
        }
        else
        {
          if ((_DWORD)v17 == *(_DWORD *)(a1 + 816))
          {
            v27 = *(_DWORD *)(a1 + 812) + v17;
            if (v27 >= v18)
              v27 = *(_DWORD *)(a1 + 808);
            *(_DWORD *)(a1 + 816) = v27;
            v28 = (char *)malloc_type_realloc(*(void **)(a1 + 800), 16 * v27, 0x100004023422098uLL);
            *(_QWORD *)(a1 + 800) = v28;
          }
          else
          {
            v28 = *(char **)(a1 + 800);
          }
          v50 = (int)v17;
          v30 = &v28[16 * (int)v17];
          v31 = *(_QWORD *)(a1 + 896);
          *((_DWORD *)v30 + 3) = -1431655765 * ((unint64_t)(v31 - *(_QWORD *)(a1 + 888)) >> 2);
          v30[6] = 32;
          LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
          __str.__r_.__value_.__r.__words[0] = 0;
          sub_20B8AD2E8((unint64_t *)(a1 + 888), v31, 0x20uLL, (unint64_t)&__str);
          v29 = v30;
          v20 = v17;
        }
        v32 = (uint64_t *)(a1 + 840);
        if (*(char *)(a1 + 863) < 0)
          v33 = *(_QWORD *)(a1 + 848);
        else
          LODWORD(v33) = *(unsigned __int8 *)(a1 + 863);
        v51 = v29;
        *(_DWORD *)v29 = v33;
        std::string::append((std::string *)(a1 + 840), a2, a3);
        v34 = &v28[16 * v50];
        v34[4] = a3;
        v35 = (unsigned __int8 *)(v34 + 4);
        sub_20B8AACE0(a1, *(_QWORD *)(a1 + 888) + 12 * *((unsigned int *)v35 + 2), a8, a4, a5, a6, a7);
        v35[1] = 1;
        v36 = *(_DWORD *)(a1 + 824);
        *(_DWORD *)(a1 + 824) = v36 + 1;
        *((_DWORD *)v35 + 1) = v36;
        v37 = *(_QWORD *)(a1 + 744);
        v38 = *(_QWORD *)(a1 + 752);
        if (v37 == v38)
        {
          v41 = 0;
          v40 = v54;
        }
        else
        {
          v39 = *(unsigned int *)(a1 + 712);
          v40 = v54;
          if (v39 >= (v38 - v37) >> 3)
            v41 = 0;
          else
            v41 = *(_QWORD *)(v37 + 8 * v39);
        }
        v42 = a1 + 840;
        if (*(char *)(a1 + 863) < 0)
          v42 = *v32;
        sub_20B963E6C(v41, v42 + *(unsigned int *)v51, *v35, v20 + 1);
        if ((_DWORD)v17 != v40)
          ++*(_DWORD *)(a1 + 820);
        v43 = *(_DWORD *)(a1 + 828) + 1;
        *(_DWORD *)(a1 + 828) = v43;
        if (v43 == 300)
        {
          sub_20B8AAF98(a1);
          memset(&__str, 0, sizeof(__str));
          if (*(int *)(a1 + 820) >= 1)
          {
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = a1 + 840;
              if (*(char *)(a1 + 863) < 0)
                v46 = *v32;
              v47 = (unsigned int *)(*(_QWORD *)(a1 + 800) + v44);
              v48 = (const std::string::value_type *)(v46 + *v47);
              v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v49 = __str.__r_.__value_.__r.__words[1];
              *v47 = v49;
              std::string::append(&__str, v48, *((unsigned __int8 *)v47 + 4));
              ++v45;
              v44 += 16;
            }
            while (v45 < *(int *)(a1 + 820));
          }
          std::string::operator=((std::string *)(a1 + 840), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          *(_DWORD *)(a1 + 828) = 0;
        }
        ++*(_DWORD *)(a1 + 384);
      }
    }
  }
}

void sub_20B8AB5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8AB600(uint64_t a1, int a2, unsigned __int16 *__src, size_t a4, int a5, int a6, __int16 a7)
{
  size_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  __int16 *v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _BOOL4 v43;
  uint64_t v44;
  _BOOL4 v45;
  __int16 *v46;
  __int16 *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t i;
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int *v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;

  v10 = a4;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 800);
  v14 = a2;
  v15 = v13 + 16 * a2;
  v18 = *(unsigned __int8 *)(v15 + 5);
  v17 = (_BYTE *)(v15 + 5);
  LODWORD(v16) = v18;
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v63 = a2;
    v64 = *(_QWORD *)(a1 + 800);
    v21 = v13 + 16 * a2;
    v22 = (unsigned int *)(v21 + 12);
    v23 = (unsigned __int8 *)(v21 + 4);
    v57 = (a4 >> 1) - 1;
    if (a4 >> 1 <= 1)
      v24 = 1;
    else
      v24 = a4 >> 1;
    v25 = -1;
    do
    {
      v26 = *v22;
      v27 = *(_QWORD *)(v12 + 888);
      v28 = v19;
      while (1)
      {
        v29 = v26 + v28;
        v30 = (__int16 *)(v27 + 12 * (v26 + v28));
        if (*v30 < a7)
        {
          if (*v23 > 5u
            || ((v31 = v27 + 12 * v29,
                 v32 = *(unsigned __int16 *)(v31 + 2),
                 v33 = *(unsigned __int16 *)(v31 + 6),
                 v32 == a5)
              ? (v34 = v33 == a6)
              : (v34 = 0),
                v34))
          {
            a7 = *v30;
          }
        }
        if ((v20 & 1) == 0)
          break;
        ++v28;
        v20 = 1;
        if (v28 >= v16)
          goto LABEL_36;
      }
      v58 = v24;
      v59 = v25;
      v60 = v22;
      v61 = v17;
      v62 = a5;
      v35 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 144);
      v36 = v12;
      v37 = v12;
      v38 = v10;
      v39 = v35(v37);
      v10 = v38;
      if (v38 >= 2)
      {
        v41 = 0;
        v42 = __src;
        v12 = v36;
        a5 = v62;
        v22 = v60;
        v17 = v61;
        v25 = v59;
        v24 = v58;
        while (*(_WORD *)(v39 + 2 * v41))
        {
          if (*(unsigned __int16 *)(v39 + 2 * v41) != *v42)
            goto LABEL_28;
          ++v41;
          ++v42;
          if (v58 == v41)
          {
            v40 = v58;
            goto LABEL_25;
          }
        }
        if (v41 >= v57)
          goto LABEL_26;
LABEL_28:
        v43 = 0;
      }
      else
      {
        v40 = 0;
        v12 = v36;
        a5 = v62;
        v22 = v60;
        v17 = v61;
        v25 = v59;
        v24 = v58;
LABEL_25:
        v42 = (unsigned __int16 *)(v39 + 2 * v40);
LABEL_26:
        v43 = *v42 == 0;
      }
      v44 = v27 + 12 * v29;
      if (*(unsigned __int16 *)(v44 + 2) != a5)
        v43 = 0;
      v45 = *(unsigned __int16 *)(v44 + 6) == a6;
      v20 = v43 && v45;
      if (v43 && v45)
        v25 = v28;
      v16 = *v17;
      v19 = (v28 + 1);
    }
    while ((int)v28 + 1 < v16);
    if ((v20 & 1) != 0)
    {
      v26 = *v22;
      v27 = *(_QWORD *)(v12 + 888);
      v25 = v28;
LABEL_36:
      v14 = v63;
      v13 = v64;
      v46 = (__int16 *)(v27 + 12 * (v26 + v25));
      if (*v46 != a7)
      {
        if ((_DWORD)v16)
        {
          v16 = v16;
          do
          {
            v47 = (__int16 *)(v27 + 12 * v26);
            v48 = *v47;
            if (v48 < *v46)
              *v47 = v48 + 1;
            ++v26;
            --v16;
          }
          while (v16);
        }
        *v46 = a7;
      }
      goto LABEL_45;
    }
    v14 = v63;
    v13 = v64;
    if (v16 <= 0x1F)
      goto LABEL_44;
    v50 = 0;
    v51 = *v22;
    v52 = *(_QWORD *)(v12 + 888);
    v53 = 12 * *v22;
    v54 = *(_WORD *)(v52 + v53);
    *(_WORD *)(v52 + v53) = v54 + 1;
    for (i = 1; i != v16; ++i)
    {
      v56 = *(__int16 *)(v52 + 12 * (v51 + i));
      if (v54 < v56)
        v50 = i;
      if (v54 <= v56)
        v54 = *(_WORD *)(v52 + 12 * (v51 + i));
      *(_WORD *)(v52 + 12 * (v51 + i)) = v56 + 1;
    }
    sub_20B8AACE0(v12, v52 + 12 * (v50 + v51), a7, __src, v10, a5, a6);
  }
  else
  {
LABEL_44:
    sub_20B8AACE0(v12, *(_QWORD *)(v12 + 888) + 12 * (*(_DWORD *)(v13 + 16 * v14 + 12) + v16), a7 - 1, __src, v10, a5, a6);
    ++*v17;
    ++*(_DWORD *)(v12 + 384);
  }
LABEL_45:
  v49 = *(_DWORD *)(v12 + 824);
  *(_DWORD *)(v12 + 824) = v49 + 1;
  *(_DWORD *)(v13 + 16 * v14 + 8) = v49;
}

uint64_t sub_20B8AB938(uint64_t a1, unsigned __int8 *a2, std::string::size_type a3, void *a4, size_t a5, int a6, int a7, __int16 a8)
{
  pthread_rwlock_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;

  v16 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  v17 = *(_QWORD *)(a1 + 744);
  v18 = *(_QWORD *)(a1 + 752);
  if (v17 == v18 || (v19 = *(unsigned int *)(a1 + 712), v19 >= (v18 - v17) >> 3))
  {
    v20 = 0;
    if (!a5)
      return pthread_rwlock_unlock(v16);
  }
  else
  {
    v20 = *(_QWORD *)(v17 + 8 * v19) != 0;
    if (!a5)
      return pthread_rwlock_unlock(v16);
  }
  if (a4 && a3 && a2 && v20)
  {
    sub_20B8B2334(0);
    if (!a6)
      LOWORD(a6) = word_25472C9E4;
    if (!a7)
      LOWORD(a7) = word_25472C9E4;
    sub_20B8AA160(a1);
    v21 = *(_QWORD *)(a1 + 744);
    v22 = *(_QWORD *)(a1 + 752);
    if (v21 == v22 || (v23 = *(unsigned int *)(a1 + 712), v23 >= (v22 - v21) >> 3))
      v24 = 0;
    else
      v24 = *(_QWORD *)(v21 + 8 * v23);
    v25 = sub_20B963D24(v24, a2, a3);
    if (v25 < 0)
      sub_20B8AB290(a1, (const std::string::value_type *)a2, a3, a4, a5, a6, a7, a8);
    else
      sub_20B8AB600(a1, v25 - 1, (unsigned __int16 *)a4, a5, (unsigned __int16)a6, (unsigned __int16)a7, a8);
    if (*(_DWORD *)(a1 + 832) >= 0x12Cu)
    {
      sub_20B8AADFC(a1);
      *(_DWORD *)(a1 + 832) = 0;
    }
    *(_BYTE *)(a1 + 836) = 0;
  }
  return pthread_rwlock_unlock(v16);
}

void sub_20B8ABAB8(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8ABAD8(uint64_t a1, const void ***a2)
{
  pthread_rwlock_t *v4;
  const void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t i;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void **v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  const void **v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int *v47;
  int *v48;
  int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  pthread_rwlock_t *v61;
  int *v62;
  int *v63;
  int *v64;
  void *__p;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;

  v4 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  v5 = *a2;
  v6 = (char *)a2[1] - (char *)*a2;
  if (v6)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= *(int *)(a1 + 808))
      v8 = *(int *)(a1 + 808);
    else
      v8 = v7;
    v61 = v4;
    if (v8 > *(int *)(a1 + 816))
    {
      *(_DWORD *)(a1 + 816) = v8;
      *(_QWORD *)(a1 + 800) = malloc_type_realloc(*(void **)(a1 + 800), 16 * (int)v8, 0x100004023422098uLL);
      v5 = *a2;
    }
    v68 = sub_20B8A9000;
    v9 = 126 - 2 * __clz(v8);
    if (v8)
      v10 = v9;
    else
      v10 = 0;
    sub_20B8AD760((uint64_t)v5, (unint64_t)&v5[5 * v8], (uint64_t (**)(__int128 *, __int128 *))&v68, v10, 1);
    v68 = 0;
    v69 = 0;
    v70 = 0;
    __p = 0;
    v66 = 0;
    v67 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v11 = **a2;
    v12 = (size_t)(*a2)[1];
    *(_DWORD *)(a1 + 820) = 0;
    if (v8)
    {
      for (i = 0; i != v8; ++i)
      {
        if (i && (v14 = *a2, (const void *)v12 == (*a2)[5 * i + 1]) && !memcmp(v11, v14[5 * i], v12))
        {
          v58 = *(_QWORD *)(a1 + 800) + 16 * *(int *)(a1 + 820);
          v59 = *(unsigned __int8 *)(v58 - 11);
          if (v59 <= 0x1F)
          {
            sub_20B8AACE0(a1, *(_QWORD *)(a1 + 888) + 12 * (*(_DWORD *)(v58 - 4) + v59), WORD2(v14[5 * i + 4]), (void *)v14[5 * i + 2], (size_t)v14[5 * i + 3], (__int16)v14[5 * i + 4], WORD1(v14[5 * i + 4]));
            ++*(_BYTE *)(v58 - 11);
          }
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 800);
          v16 = *(int *)(a1 + 820);
          v17 = *(_QWORD *)(a1 + 896);
          v18 = v15 + 16 * v16;
          *(_DWORD *)(v18 + 12) = -1431655765 * ((unint64_t)(v17 - *(_QWORD *)(a1 + 888)) >> 2);
          v19 = (unsigned int *)(v18 + 12);
          *((_BYTE *)v19 - 6) = 32;
          v72 = 0;
          v71 = 0;
          sub_20B8AD2E8((unint64_t *)(a1 + 888), v17, 0x20uLL, (unint64_t)&v71);
          if (*(char *)(a1 + 863) < 0)
            v20 = *(_QWORD *)(a1 + 848);
          else
            LODWORD(v20) = *(unsigned __int8 *)(a1 + 863);
          *(_DWORD *)(v15 + 16 * v16) = v20;
          std::string::append((std::string *)(a1 + 840), (const std::string::value_type *)(*a2)[5 * i], (std::string::size_type)(*a2)[5 * i + 1]);
          v21 = (uint64_t)&(*a2)[5 * i];
          v22 = v15 + 16 * v16;
          *(_BYTE *)(v22 + 4) = *(_QWORD *)(v21 + 8);
          sub_20B8AACE0(a1, *(_QWORD *)(a1 + 888) + 12 * *v19, *(_WORD *)(v21 + 36), *(void **)(v21 + 16), *(_QWORD *)(v21 + 24), *(_WORD *)(v21 + 32), *(_WORD *)(v21 + 34));
          *(_BYTE *)(v22 + 5) = 1;
          v23 = *(_DWORD *)(a1 + 824);
          *(_DWORD *)(a1 + 824) = v23 + 1;
          *(_DWORD *)(v22 + 8) = v23;
          v24 = &(*a2)[5 * i];
          v25 = v69;
          if (v69 >= v70)
          {
            v27 = (v69 - (_BYTE *)v68) >> 3;
            if ((unint64_t)(v27 + 1) >> 61)
              sub_20B80CDD8();
            v28 = (v70 - (_BYTE *)v68) >> 2;
            if (v28 <= v27 + 1)
              v28 = v27 + 1;
            if ((unint64_t)(v70 - (_BYTE *)v68) >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
              v30 = (char *)sub_20B800BE8((uint64_t)&v70, v29);
            else
              v30 = 0;
            v31 = &v30[8 * v27];
            *(_QWORD *)v31 = *v24;
            v26 = v31 + 8;
            v33 = (char *)v68;
            v32 = v69;
            if (v69 != v68)
            {
              do
              {
                v34 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v31 - 1) = v34;
                v31 -= 8;
              }
              while (v32 != v33);
              v32 = (char *)v68;
            }
            v68 = v31;
            v69 = v26;
            v70 = &v30[8 * v29];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v69 = *v24;
            v26 = v25 + 8;
          }
          v69 = v26;
          v35 = &(*a2)[5 * i + 1];
          v36 = v66;
          if (v66 >= v67)
          {
            v38 = (char *)__p;
            v39 = (v66 - (_BYTE *)__p) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              sub_20B80CDD8();
            v41 = v67 - (_BYTE *)__p;
            if ((v67 - (_BYTE *)__p) >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              v43 = (char *)sub_20B800BE8((uint64_t)&v67, v42);
              v38 = (char *)__p;
              v36 = v66;
            }
            else
            {
              v43 = 0;
            }
            v44 = &v43[8 * v39];
            *(_QWORD *)v44 = *v35;
            v37 = v44 + 8;
            while (v36 != v38)
            {
              v45 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *((_QWORD *)v44 - 1) = v45;
              v44 -= 8;
            }
            __p = v44;
            v66 = v37;
            v67 = &v43[8 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_QWORD *)v66 = *v35;
            v37 = v36 + 8;
          }
          v66 = v37;
          v46 = *(_DWORD *)(a1 + 820) + 1;
          v47 = v63;
          if (v63 >= v64)
          {
            v49 = v62;
            v50 = v63 - v62;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
              sub_20B80CDD8();
            v52 = (char *)v64 - (char *)v62;
            if (((char *)v64 - (char *)v62) >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)sub_20B8127BC((uint64_t)&v64, v53);
              v49 = v62;
              v47 = v63;
            }
            else
            {
              v54 = 0;
            }
            v55 = (int *)&v54[4 * v50];
            *v55 = v46;
            v48 = v55 + 1;
            while (v47 != v49)
            {
              v56 = *--v47;
              *--v55 = v56;
            }
            v62 = v55;
            v64 = (int *)&v54[4 * v53];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *v63 = v46;
            v48 = v63 + 1;
          }
          v63 = v48;
          v57 = (uint64_t)&(*a2)[5 * i];
          v11 = *(const void **)v57;
          v12 = *(_QWORD *)(v57 + 8);
          ++*(_DWORD *)(a1 + 820);
        }
      }
    }
    v4 = v61;
    sub_20BA00814();
    *(_DWORD *)(a1 + 832) = 0;
    if (v62)
      operator delete(v62);
    if (__p)
    {
      v66 = (char *)__p;
      operator delete(__p);
    }
    if (v68)
    {
      v69 = (char *)v68;
      operator delete(v68);
    }
  }
  return pthread_rwlock_unlock(v4);
}

void sub_20B8AC058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_rwlock_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  pthread_rwlock_unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8AC0C0(uint64_t a1)
{
  pthread_rwlock_t *v2;
  _DWORD **v3;
  char *v4;
  uint64_t v5;
  char *v6;

  v2 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  v3 = *(_DWORD ***)(a1 + 744);
  if (*(_DWORD ***)(a1 + 752) != v3)
  {
    if (*v3)
    {
      sub_20B963CE8(*v3);
      v3 = *(_DWORD ***)(a1 + 744);
    }
    *(_QWORD *)(a1 + 752) = v3;
  }
  v4 = *(char **)(a1 + 800);
  if (v4)
  {
    v5 = *(unsigned int *)(a1 + 820);
    if ((int)v5 >= 1)
    {
      v6 = v4 + 6;
      do
      {
        *(_WORD *)(v6 - 1) = 0;
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    free(v4);
    *(_QWORD *)(a1 + 800) = 0;
    *(_QWORD *)(a1 + 816) = 0;
  }
  if (*(char *)(a1 + 863) < 0)
  {
    **(_BYTE **)(a1 + 840) = 0;
    *(_QWORD *)(a1 + 848) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 840) = 0;
    *(_BYTE *)(a1 + 863) = 0;
  }
  sub_20B83B010((uint64_t *)(a1 + 864));
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 828) = 0;
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a1 + 808);
  *(_WORD *)(a1 + 836) = 1;
  return pthread_rwlock_unlock(v2);
}

BOOL sub_20B8AC198(uint64_t a1)
{
  _BOOL8 v2;
  int *v3;
  int64_t v4;
  _DWORD *v5;
  int64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  std::string::value_type *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  pthread_rwlock_t *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  std::string::value_type *__s;
  int v49;
  int v50;
  void *__base[3];
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  _BYTE v56[16];
  uint64_t v57;
  _BYTE v58[408];
  uint64_t v59;
  _QWORD v60[17];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v43 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 936));
  if (*(_DWORD *)(a1 + 820))
  {
    v2 = 1;
    if (!*(_BYTE *)(a1 + 836))
    {
      *(_BYTE *)(a1 + 836) = 1;
      sub_20B8AAF98(a1);
      v3 = (int *)(a1 + 820);
      memset(&v55, 0, sizeof(v55));
      memset(&v54, 0, sizeof(v54));
      memset(&v53, 0, sizeof(v53));
      memset(&v52, 0, sizeof(v52));
      sub_20B8AE5DC(__base, *(int *)(a1 + 820));
      v4 = *(int *)(a1 + 820);
      v5 = __base[0];
      if ((int)v4 > 0)
      {
        v6 = 0;
        v7 = (int *)(*(_QWORD *)(a1 + 800) + 8);
        do
        {
          v8 = *v7;
          v7 += 4;
          v5[v6++] = v8;
          v4 = *v3;
        }
        while (v6 < v4);
      }
      qsort(v5, v4, 4uLL, (int (__cdecl *)(const void *, const void *))sub_20B8AC9AC);
      LODWORD(v9) = *v3;
      if (*v3 >= 1)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(a1 + 800);
          v15 = (std::string::value_type *)(v14 + 16 * v10);
          v16 = bsearch(v15 + 8, __base[0], (int)v9, 4uLL, (int (__cdecl *)(const void *, const void *))sub_20B8AC9AC);
          *((_DWORD *)v15 + 2) = ((unint64_t)v16 - (unint64_t)__base[0]) >> 2;
          v17 = a1 + 840;
          if (*(char *)(a1 + 863) < 0)
            v17 = *(_QWORD *)(a1 + 840);
          v18 = v14 + 16 * v10;
          std::string::append(&v53, (const std::string::value_type *)(v17 + *(unsigned int *)v15), *(unsigned __int8 *)(v18 + 4));
          v19 = *(_DWORD *)v15;
          __s = v15;
          *(_DWORD *)v15 = v11;
          v46 = *(unsigned __int8 *)(v18 + 4);
          v47 = v12;
          v20 = (_DWORD *)(v18 + 12);
          v21 = *(_DWORD *)(v18 + 12);
          *(_DWORD *)(v18 + 12) = v12;
          if (*(_BYTE *)(v18 + 5))
          {
            v44 = v19;
            v45 = v10;
            v22 = 0;
            do
            {
              v23 = *(_QWORD *)(a1 + 888) + 12 * (v21 + v22);
              v24 = (int *)(v23 + 8);
              v25 = *(_QWORD *)(a1 + 864) + 24 * *(unsigned int *)(v23 + 8);
              if (*(char *)(v25 + 23) < 0)
                v26 = *(_QWORD *)(v25 + 8);
              else
                v26 = *(unsigned __int8 *)(v25 + 23);
              v27 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, *(_QWORD *)(a1 + 888) + 12 * (v21 + v22));
              std::string::append(&v55, v27, v26);
              v28 = *v24;
              *v24 = v13;
              std::string::append(&v54, (const std::string::value_type *)v23, 0xCuLL);
              v13 += v26;
              *v24 = v28;
              ++v22;
              v29 = *((unsigned __int8 *)v20 - 7);
            }
            while (v22 < v29);
            v3 = (int *)(a1 + 820);
            v10 = v45;
            v19 = v44;
          }
          else
          {
            LODWORD(v29) = 0;
          }
          std::string::append(&v52, __s, 0x10uLL);
          v11 += v46;
          v12 = v47 + 12 * v29;
          *v20 = v21;
          *(_DWORD *)__s = v19;
          ++v10;
          v9 = *v3;
        }
        while (v10 < v9);
      }
      v30 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = v53.__r_.__value_.__r.__words[1];
      v50 = v30;
      v31 = *(uint64_t **)(a1 + 744);
      if (*(uint64_t **)(a1 + 752) == v31 || (v32 = *v31) == 0)
      {
        v2 = 0;
      }
      else
      {
        v49 = 8 * (*(_DWORD *)(v32 + 16) + 259) + 16;
        sub_20B851EFC(&v57);
        v2 = (*(_DWORD *)&v58[*(_QWORD *)(v57 - 24) + 24] & 5) == 0;
        if ((*(_DWORD *)&v58[*(_QWORD *)(v57 - 24) + 24] & 5) == 0)
        {
          v33 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = v55.__r_.__value_.__r.__words[1];
          v34 = v49 + v50 + v33 + 40;
          LOBYTE(v61) = 0;
          while ((v34 & 7) != 0)
          {
            std::string::append(&v55, (const std::string::value_type *)&v61, 1uLL);
            ++v34;
          }
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          else
            v35 = v54.__r_.__value_.__r.__words[1];
          v36 = v34 + v35;
          DWORD2(v61) = 0;
          *(_QWORD *)&v61 = 0;
          if ((v36 & 7) != 0)
          {
            v37 = v36 + 12;
            do
            {
              std::string::append(&v54, (const std::string::value_type *)&v61, 0xCuLL);
              v38 = (v37 & 7) == 0;
              v37 += 12;
            }
            while (!v38);
          }
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          v39 = &v58[*(_QWORD *)(v57 - 24) - 8];
          if ((v39[32] & 5) == 0)
            (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v39 + 5)
                                                                                             + 32))(&v61, *((_QWORD *)v39 + 5), 0, 1, 16);
          MEMORY[0x20BD39A7C](v56, &v57);
          v40 = &v58[*(_QWORD *)(v57 - 24) - 8];
          if ((v40[32] & 5) == 0)
          {
            v41 = *((_QWORD *)v40 + 5);
            v69 = 0;
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v41 + 40))(v60, v41, &v61, 16);
            if (v60[16] == -1)
              std::ios_base::clear((std::ios_base *)&v58[*(_QWORD *)(v57 - 24) - 8], *(_DWORD *)&v58[*(_QWORD *)(v57 - 24) + 24] | 4);
          }
          MEMORY[0x20BD39A88](v56);
          std::ostream::write();
          if (!std::filebuf::close())
            std::ios_base::clear((std::ios_base *)&v58[*(_QWORD *)(v57 - 24) - 8], *(_DWORD *)&v58[*(_QWORD *)(v57 - 24) + 24] | 4);
        }
        v57 = *MEMORY[0x24BEDB7E8];
        *(_QWORD *)&v58[*(_QWORD *)(v57 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
        MEMORY[0x20BD399D4](v58);
        std::ostream::~ostream();
        MEMORY[0x20BD39C2C](&v59);
      }
      if (__base[0])
      {
        __base[1] = __base[0];
        operator delete(__base[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v2 = 1;
  }
  pthread_rwlock_unlock(v43);
  return v2;
}

void sub_20B8AC8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_rwlock_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51)
{
  MEMORY[0x20BD39A88](&a49);
  sub_20B894160(&a51);
  if (__p)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  pthread_rwlock_unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8AC9AC(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t sub_20B8AC9C4(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v17 = atomic_load((unsigned __int8 *)&qword_25472B2E0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25472B2E0))
  {
    qword_25472B2D8 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472B2E0);
  }
  if (!a5 || (*(_BYTE *)(a5 + 5) & 1) == 0)
  {
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
    sub_20B8AA160(a1);
    v18 = *(_QWORD *)(a1 + 744);
    v19 = *(_QWORD *)(a1 + 752);
    if (v18 != v19)
    {
      v20 = *(unsigned int *)(a1 + 712);
      if (v20 < (v19 - v18) >> 3)
      {
        v21 = *(_QWORD *)(v18 + 8 * v20);
        if (v21)
        {
          if ((_BYTE)a2)
          {
            if (a2 == 1)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
              {
                if ((a2 & 0x800) != 0)
                {
                  v29 = *(_QWORD *)(a1 + 744);
                  v30 = *(_QWORD *)(a1 + 752);
                  if (v29 == v30 || (v31 = *(unsigned int *)(a1 + 712), v31 >= (v30 - v29) >> 3))
                    v32 = 0;
                  else
                    v32 = *(_QWORD *)(v29 + 8 * v31);
                  v22 = sub_20B927F98(v32, a3, a4, a9, a8, a5, a6, 0, 2u, 0);
                }
                else if ((a2 & 0xF000) != 0 && *(_BYTE *)qword_25472B2D8)
                {
                  v24 = *(_QWORD *)(a1 + 744);
                  v25 = *(_QWORD *)(a1 + 752);
                  if (v24 == v25 || (v26 = *(unsigned int *)(a1 + 712), v26 >= (v25 - v24) >> 3))
                    v27 = 0;
                  else
                    v27 = *(_QWORD *)(v24 + 8 * v26);
                  v22 = sub_20B92778C(v27, (uint64_t)a3, a4, 0, a9, a8, (a2 >> 12) & 0xE | (a2 >> 8) & 0x10);
                }
                else
                {
                  v35 = *(_QWORD *)(a1 + 744);
                  v36 = *(_QWORD *)(a1 + 752);
                  if (v35 == v36 || (v37 = *(unsigned int *)(a1 + 712), v37 >= (v36 - v35) >> 3))
                    v38 = 0;
                  else
                    v38 = *(_QWORD *)(v35 + 8 * v37);
                  v22 = sub_20B9269B0(v38, a3, a4, 0, a9, 0, a8);
                }
                goto LABEL_27;
              }
            }
            else if (a2 == 2)
            {
              if ((a2 & 0x800) == 0)
              {
                if ((a2 & 0xF000) != 0)
                  v22 = sub_20B9274A8(v21, (uint64_t)a3, a4, a9, a8, (a2 >> 12) & 0xE | (a2 >> 8) & 0x10);
                else
                  v22 = sub_20B963DBC(v21, (uint64_t)a3, a4, a9, a8);
                goto LABEL_27;
              }
              v28 = 1;
              goto LABEL_26;
            }
          }
          else
          {
            if ((a2 & 0x800) != 0)
            {
              a7 = 0;
              v28 = 0;
LABEL_26:
              v22 = sub_20B927F98(v21, a3, a4, a9, a8, a5, a6, a7, v28, 0);
              goto LABEL_27;
            }
            if ((a2 & 0xF000) != 0)
            {
              v22 = sub_20B927224(v21, (uint64_t)a3, a4, 0, a9, a8, (a2 >> 12) & 0xE | (a2 >> 8) & 0x10);
LABEL_27:
              v23 = v22;
LABEL_34:
              pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 936));
              return v23;
            }
            v33 = sub_20B963D24(v21, a3, a4);
            if ((v33 & 0x80000000) == 0)
            {
              *(_DWORD *)(a8 + 8) = v33;
              *(_WORD *)(a8 + 12) = a4;
              v23 = 1;
              goto LABEL_34;
            }
          }
        }
      }
    }
    v23 = 0;
    goto LABEL_34;
  }
  return 0;
}

void sub_20B8ACCFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B2E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8ACD30(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5, _BYTE *a6)
{
  pthread_rwlock_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;

  v12 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  sub_20B8AA160(a1);
  v13 = *(_QWORD *)(a1 + 744);
  v14 = *(_QWORD *)(a1 + 752);
  if (v13 == v14
    || (v15 = *(unsigned int *)(a1 + 712), v15 >= (v14 - v13) >> 3)
    || (v16 = *(_QWORD *)(v13 + 8 * v15)) == 0)
  {
LABEL_16:
    v23 = 0;
    goto LABEL_17;
  }
  if ((_BYTE)a2)
  {
    if (a2 == 1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
      {
        v24 = *(_QWORD *)(a1 + 744);
        v25 = *(_QWORD *)(a1 + 752);
        if ((a2 & 0xF000) != 0)
        {
          if (v24 == v25 || (v26 = *(unsigned int *)(a1 + 712), v26 >= (v25 - v24) >> 3))
            v27 = 0;
          else
            v27 = *(_QWORD *)(v24 + 8 * v26);
          v22 = sub_20B927D64(v27, a3, a4, a5, a6);
          goto LABEL_20;
        }
        if (v24 == v25 || (v29 = *(unsigned int *)(a1 + 712), v29 >= (v25 - v24) >> 3))
          v16 = 0;
        else
          v16 = *(_QWORD *)(v24 + 8 * v29);
        v17 = (unsigned __int8 *)a3;
        v18 = a4;
        v19 = a5;
        v20 = (uint64_t)a6;
        v21 = 0;
LABEL_8:
        v22 = sub_20B927BCC(v16, v17, v18, v19, v20, v21);
LABEL_20:
        v23 = v22;
        goto LABEL_17;
      }
    }
    else if (a2 == 3)
    {
      v17 = (unsigned __int8 *)a3;
      v18 = a4;
      v19 = a5;
      v20 = (uint64_t)a6;
      v21 = 1;
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  v23 = 0;
  v30 = 0;
  if (*(_QWORD *)(v16 + 24) >= 2uLL)
  {
    sub_20B9279D4(v16, 1u, a3, a4, a5, (uint64_t)a6, (uint64_t)a6, &v30);
    v23 = v30;
  }
LABEL_17:
  pthread_rwlock_unlock(v12);
  return v23;
}

void sub_20B8ACEDC(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  pthread_rwlock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8ACEFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 368);
}

uint64_t sub_20B8ACF04(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)a1 + 56))(a1, __s, v4);
}

uint64_t sub_20B8ACF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, a6, 0);
}

void sub_20B8ACF6C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_20B8ACF78(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_20B8ACF84()
{
  return 1;
}

uint64_t sub_20B8ACF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *(unsigned int *)(a2 + 8);
  if (*(_QWORD *)(a1 + 752) - *(_QWORD *)(a1 + 744) == 8)
    return *(_QWORD *)(a1 + 352) + 12 * (v3 >> 8) + 12 * a3;
  else
    return *(_QWORD *)(a1 + 352)
         + 12
         * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + 8 * *(unsigned int *)(a1 + 712))
                           + 4 * (a3 + (v3 >> 8)));
}

uint64_t sub_20B8ACFE0(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_20B8ACFE8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 360) + *(unsigned int *)(a2 + 8);
}

char *sub_20B8ACFF8(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(a1 + 864) + 24 * *(unsigned int *)(a2 + 8));
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

void sub_20B8AD01C()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B8AD030(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B8AD0A4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B8AD0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  sub_20B8AD150((uint64_t)v12);
  return v10;
}

uint64_t sub_20B8AD150(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B86EE38(a1);
  return a1;
}

uint64_t sub_20B8AD184(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_20B83BAB4(a1, v15);
  v13 = a1[1];
  sub_20B83BC3C((uint64_t)v15);
  return v13;
}

void sub_20B8AD290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20B8AD2A4(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    sub_20B800BC0();
  return operator new(12 * a1);
}

void sub_20B8AD2E8(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  char *v39;
  int64_t v40;
  _DWORD *v41;

  if (a3)
  {
    v4 = a4;
    v8 = (char *)*a1;
    v7 = (char *)a1[1];
    v9 = (uint64_t)(a2 - *a1) / 12;
    v10 = (char *)(*a1 + 12 * v9);
    v11 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v7) >> 2) >= a3)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 2);
      v17 = (char *)a1[1];
      v18 = a3;
      if (a3 > v16)
      {
        v19 = 0;
        v17 = &v7[12 * (a3 - v16)];
        do
        {
          v20 = &v7[v19];
          v21 = *(_QWORD *)a4;
          *((_DWORD *)v20 + 2) = *(_DWORD *)(a4 + 8);
          *(_QWORD *)v20 = v21;
          v19 += 12;
        }
        while (12 * a3 - 4 * ((v7 - v10) >> 2) != v19);
        a1[1] = (unint64_t)v17;
        if (v7 == v10)
          return;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 2);
      }
      v22 = &v10[12 * a3];
      v23 = (unint64_t)&v17[-12 * a3];
      v24 = v17;
      if (v23 < (unint64_t)v7)
      {
        v24 = v17;
        do
        {
          v25 = *(_QWORD *)v23;
          *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
          *(_QWORD *)v24 = v25;
          v24 += 12;
          v23 += 12;
        }
        while (v23 < (unint64_t)v7);
      }
      a1[1] = (unint64_t)v24;
      if (v17 != v22)
        memmove(&v10[12 * a3], v10, v17 - v22);
      if ((unint64_t)v10 <= v4)
      {
        if (a1[1] <= v4)
          v26 = 0;
        else
          v26 = a3;
        v4 += 12 * v26;
      }
      do
      {
        v27 = *(_QWORD *)v4;
        *((_DWORD *)v10 + 2) = *(_DWORD *)(v4 + 8);
        *(_QWORD *)v10 = v27;
        v10 += 12;
        --v18;
      }
      while (v18);
    }
    else
    {
      v12 = a3 - 0x5555555555555555 * ((v7 - v8) >> 2);
      if (v12 > 0x1555555555555555)
        sub_20B8AD01C();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v8) >> 2);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0xAAAAAAAAAAAAAAALL)
        v14 = 0x1555555555555555;
      else
        v14 = v12;
      if (v14)
        v14 = (unint64_t)sub_20B8AD2A4(v14);
      else
        v15 = 0;
      v28 = v14 + 12 * v9;
      v29 = 3 * a3;
      v30 = (char *)(v28 + 12 * a3);
      v31 = 4 * v29;
      v32 = v28;
      do
      {
        v33 = *(_QWORD *)v4;
        *(_DWORD *)(v32 + 8) = *(_DWORD *)(v4 + 8);
        *(_QWORD *)v32 = v33;
        v32 += 12;
        v31 -= 12;
      }
      while (v31);
      v34 = (char *)*a1;
      if ((char *)*a1 != v10)
      {
        v35 = v10;
        do
        {
          v36 = *(_QWORD *)(v35 - 12);
          v35 -= 12;
          v37 = *((_DWORD *)v35 + 2);
          *(_QWORD *)(v28 - 12) = v36;
          v28 -= 12;
          *(_DWORD *)(v28 + 8) = v37;
        }
        while (v35 != v34);
      }
      v38 = v14 + 12 * v15;
      v39 = (char *)a1[1];
      v40 = v39 - v10;
      if (v39 != v10)
        memmove(v30, v10, v39 - v10);
      v41 = (_DWORD *)*a1;
      *a1 = v28;
      a1[1] = (unint64_t)&v30[v40];
      a1[2] = v38;
      if (v41)
        operator delete(v41);
    }
  }
}

void sub_20B8AD558(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20B8AD6CC((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_20B828D20((_QWORD *)a1, v11);
    v12 = sub_20B83C51C(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_20B8AD704(__str, v13, v9);
    v12 = sub_20B83C51C(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20B8AD704(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20B8AD6BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B8AD6C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B8AD6CC(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B83B010(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_20B8AD704(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void sub_20B8AD760(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 *v27;
  unint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  int v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 *v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  int64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  BOOL v120;
  uint64_t v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  __int128 *v131;
  unint64_t v132;
  uint64_t v133;
  int64_t v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

uint64_t sub_20B8AE0A0(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
    }
    else
    {
      v25 = *a1;
      v26 = a1[1];
      v27 = *((_QWORD *)a1 + 4);
      v28 = *((_QWORD *)a2 + 4);
      v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_QWORD *)a1 + 4) = v28;
      *((_QWORD *)a2 + 4) = v27;
      *a2 = v25;
      a2[1] = v26;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      v11 = a2[1];
      v12 = *((_QWORD *)a2 + 4);
      v30 = *((_QWORD *)a3 + 4);
      v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_QWORD *)a2 + 4) = v30;
    }
    *((_QWORD *)a3 + 4) = v12;
    *a3 = v10;
    a3[1] = v11;
  }
  else if ((_DWORD)result)
  {
    v15 = *a2;
    v16 = a2[1];
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v20 = *a1;
      v21 = a1[1];
      v22 = *((_QWORD *)a1 + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_QWORD *)a1 + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      *a2 = v20;
      a2[1] = v21;
    }
  }
  return result;
}

BOOL sub_20B8AE1D8(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if (!(*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a2 - 8);
      v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a2 - 8) = v11;
      result = 1;
      *v8 = v9;
      *(_OWORD *)(a2 - 24) = v10;
      return result;
    case 3uLL:
      sub_20B8AE0A0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_20B8AE3CC(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_20B8AE4B4(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 80);
      sub_20B8AE0A0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_QWORD *)(v20 + 152) = *(_QWORD *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if (((*a3)(&v24, (__int128 *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_QWORD *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_20B8AE3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  sub_20B8AE0A0((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_OWORD *)a3;
    v12 = *(_OWORD *)(a3 + 16);
    v13 = *(_QWORD *)(a3 + 32);
    v14 = *(_QWORD *)(a4 + 32);
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 32) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_OWORD *)a2;
      v17 = *(_OWORD *)(a2 + 16);
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_QWORD *)(a2 + 32) = v19;
      *(_QWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        result = *(__n128 *)a1;
        v21 = *(_OWORD *)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *(_QWORD *)(a2 + 32);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_QWORD *)(a1 + 32) = v23;
        *(_QWORD *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 sub_20B8AE4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v12 = sub_20B8AE3CC(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_OWORD *)a4;
    v15 = *(_OWORD *)(a4 + 16);
    v16 = *(_QWORD *)(a4 + 32);
    v17 = *(_QWORD *)(a5 + 32);
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_QWORD *)(a4 + 32) = v17;
    *(_QWORD *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 16);
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(_QWORD *)(a4 + 32);
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v22;
      *(_QWORD *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(__n128 *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v26 = *(_QWORD *)(a2 + 32);
        v27 = *(_QWORD *)(a3 + 32);
        v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_QWORD *)(a2 + 32) = v27;
        *(_QWORD *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          result = *(__n128 *)a1;
          v29 = *(_OWORD *)(a1 + 16);
          v30 = *(_QWORD *)(a1 + 32);
          v31 = *(_QWORD *)(a2 + 32);
          v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 32) = v31;
          *(_QWORD *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20B8AE5DC(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B81277C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20B8AE634(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B8AE650(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  sub_20B83BFEC((uint64_t)v12);
  v11 = 0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_20B828F84(v13, v3, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0
    || (v6 = (_QWORD *)MEMORY[0x20BD39A28](v12, &v11), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    || (v7 = sub_20B871C3C(v12), (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0))
  {
    *(_BYTE *)operator new() = 0;
    MEMORY[0x20BD39CB0]();
    v8 = 0;
  }
  else
  {
    v8 = v11;
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v9;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v15);
  return v8 != 0;
}

void sub_20B8AE7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83C118((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B8AE7D4(uint64_t a1, unint64_t a2)
{
  BOOL v2;
  unint64_t v3;
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  v2 = a2 >= 3;
  v3 = a2 - 3;
  return v2 && sub_20B8AED64(v5, v3, 0xFFFFFFFFFFFFFFFFLL, "▁", 3uLL) == 0;
}

void sub_20B8AE824(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;

  v6 = atomic_load((unsigned __int8 *)&qword_25472C978);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C978))
  {
    v7 = operator new();
    *(_OWORD *)(v7 + 8) = xmmword_20BA3B220;
    *(_DWORD *)(v7 + 24) = 0;
    *(_QWORD *)v7 = &unk_24C46B760;
    xmmword_25472C8B8 = 0u;
    unk_25472C8C8 = 0u;
    xmmword_25472C8D8 = 0u;
    qword_25472C8E8 = v7;
    unk_25472C8F0 = 0u;
    unk_25472C900 = 0u;
    unk_25472C910 = 0u;
    unk_25472C920 = 0u;
    unk_25472C930 = 0u;
    unk_25472C940 = 0u;
    unk_25472C950 = 0u;
    unk_25472C960 = 0u;
    qword_25472C970 = 0;
    __cxa_atexit((void (*)(void *))sub_20B8AE934, &xmmword_25472C8B8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C978);
  }
  sub_20B8AE938((uint64_t)&xmmword_25472C8B8, a1, &a1[a2], a3);
}

void sub_20B8AE91C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C978);
  _Unwind_Resume(a1);
}

void sub_20B8AE938(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void **v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _WORD *p_p;
  char *v36;
  char *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  void *__p;
  unint64_t v48;
  int64_t v49;
  _OWORD v50[8];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_23;
  v7 = a2;
  sub_20B8AEE9C((_QWORD *)a4, 2 * (a3 - a2), 0);
  if (a3 != v7)
  {
    if (*(char *)(a4 + 23) >= 0)
      v8 = 10;
    else
      v8 = (*(_QWORD *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    sub_20B87CBE0(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v50[4] = *(_OWORD *)(a1 + 120);
    v50[5] = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v50[6] = *(_OWORD *)(a1 + 152);
    v50[7] = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v50[0] = *(_OWORD *)(a1 + 56);
    v50[1] = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    v14 = *(unsigned __int8 *)(a4 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = (_BYTE *)a4;
    else
      v15 = *(_BYTE **)a4;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a4 + 8);
    v16 = &v15[2 * v14];
    v50[2] = *(_OWORD *)(a1 + 88);
    v50[3] = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, _OWORD *, char *, char *, char **, _BYTE *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v50, v7, a3, &v46, v15, v16, &v45, v12);
      v18 = v46 == v7;
      *(_QWORD *)(a1 + 184) += v46 - v7;
      if (v18)
        goto LABEL_36;
      if (v17 != 1)
        break;
      if (*(char *)(a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = *(_QWORD *)a4;
      v20 = v45 - v19;
      sub_20B87CBE0(a4, v45 - v19, 0);
      v21 = *(unsigned __int8 *)(a4 + 23);
      v22 = v21;
      v23 = *(_QWORD *)a4;
      if ((v21 & 0x80u) == 0)
        v23 = a4;
      v15 = (_BYTE *)(v23 + v20);
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a4 + 8);
      v16 = (char *)(v23 + 2 * v21);
      v7 = v46;
      if (v46 >= a3)
      {
        if ((v22 & 0x80) == 0)
          goto LABEL_23;
LABEL_37:
        operator delete(*(void **)a4);
LABEL_23:
        v24 = (void **)(a1 + 24);
        if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 47))
          {
            *(_OWORD *)a4 = *(_OWORD *)v24;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 40);
            return;
          }
LABEL_74:
          sub_20B8AEE4C("wstring_convert: from_bytes error");
        }
        v31 = *(_QWORD *)(a1 + 32);
        if (!v31)
          goto LABEL_74;
        sub_20B88DD4C((_BYTE *)a4, *v24, v31);
        return;
      }
    }
    if (v17)
    {
      if (v17 != 3)
      {
LABEL_36:
        if ((*(_BYTE *)(a4 + 23) & 0x80) != 0)
          goto LABEL_37;
        goto LABEL_23;
      }
      if (*(char *)(a4 + 23) >= 0)
        v25 = (_BYTE *)a4;
      else
        v25 = *(_BYTE **)a4;
      sub_20B87CBE0(a4, (v15 - v25) >> 1, 0);
      LODWORD(v26) = *(char *)(a4 + 23);
      if ((v26 & 0x80000000) != 0)
      {
        v28 = a3 - v7;
        if (a3 == v7)
          return;
        v27 = *(_QWORD *)(a4 + 8);
        v33 = *(_QWORD *)(a4 + 16);
        v29 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v30 = *(_QWORD *)a4;
        v26 = HIBYTE(v33);
      }
      else
      {
        if (v7 == a3)
          return;
        v27 = *(unsigned __int8 *)(a4 + 23);
        v28 = a3 - v7;
        v29 = 10;
        v30 = a4;
      }
      v34 = v28 >> 1;
      if (v30 > (unint64_t)v7 || v30 + 2 * v27 + 2 <= (unint64_t)v7)
      {
        if (v29 - v27 < v34)
        {
          sub_20B87CAC0(a4, v29, v27 - v29 + v34, v27, v27, 0, 0);
          *(_QWORD *)(a4 + 8) = v27;
          LOBYTE(v26) = *(_BYTE *)(a4 + 23);
        }
        if ((v26 & 0x80u) == 0)
          v36 = (char *)a4;
        else
          v36 = *(char **)a4;
        v37 = &v36[2 * v27];
        while (v7 != a3)
        {
          v38 = *(_WORD *)v7;
          v7 += 2;
          *(_WORD *)v37 = v38;
          v37 += 2;
        }
        *(_WORD *)v37 = 0;
        v39 = v34 + v27;
        if (*(char *)(a4 + 23) < 0)
          *(_QWORD *)(a4 + 8) = v39;
        else
          *(_BYTE *)(a4 + 23) = v39 & 0x7F;
      }
      else
      {
        if (v28 < 0)
          sub_20B877F70();
        if ((unint64_t)v28 > 0x15)
        {
          v40 = (v34 & 0xFFFFFFFFFFFFFFFCLL) + 4;
          if ((v34 | 3) != 0xB)
            v40 = v34 | 3;
          p_p = sub_20B80FD48((uint64_t)&__p, v40 + 1);
          v48 = v34;
          v49 = v41 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v49) = (unint64_t)v28 >> 1;
          p_p = &__p;
        }
        while (v7 != a3)
        {
          v42 = *(_WORD *)v7;
          v7 += 2;
          *p_p++ = v42;
        }
        *p_p = 0;
        if (v49 >= 0)
          v43 = &__p;
        else
          v43 = __p;
        if (v49 >= 0)
          v44 = HIBYTE(v49);
        else
          v44 = v48;
        sub_20B88DACC(a4, v43, v44);
        if (SHIBYTE(v49) < 0)
          operator delete(__p);
      }
    }
    else
    {
      if (*(char *)(a4 + 23) >= 0)
        v32 = a4;
      else
        v32 = *(_QWORD *)a4;
      sub_20B87CBE0(a4, (v45 - v32) >> 1, 0);
    }
  }
}

void sub_20B8AED1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8AED64(_QWORD *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5;
  BOOL v6;
  size_t v7;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1[1];
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (!v6)
    sub_20B83B31C("string_view::substr");
  v9 = (const void *)(*a1 + a2);
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  if (a5 >= v10)
    v11 = v10;
  else
    v11 = a5;
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5)
    v13 = -1;
  else
    v13 = 1;
  if (v10 == a5)
    v13 = 0;
  if ((_DWORD)result)
    return result;
  else
    return v13;
}

void sub_20B8AEDD4()
{
  MEMORY[0x20BD39BE4]();
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8AEDF8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8AEE4C(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_20B8AEF3C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C457E90, MEMORY[0x24BEDAAD0]);
}

void sub_20B8AEE88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8AEE9C(_QWORD *a1, unint64_t a2, __int16 a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  if (a2 >= 0xB)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB)
      v6 = a2 | 3;
    a1 = sub_20B80FD48((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v8 = 0;
  do
    *((_WORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_WORD *)a1 + a2) = 0;
  return v3;
}

std::runtime_error *sub_20B8AEF3C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
  return result;
}

uint64_t sub_20B8AEF60(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  _QWORD *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  const void **v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  if (result)
  {
    v6 = (_QWORD *)result;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 416))(result) & 0x80000000) != 0
      && (*(unsigned int (**)(_QWORD *))(*v6 + 96))(v6) != 90)
    {
      if (v6[1] == *(_DWORD *)(a1 + 8))
      {
        v7 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD *))(*v6 + 544))(v6);
        if (v7)
          v9 = v8 == 0;
        else
          v9 = 1;
        if (v9
          || ((v10 = *v7, v11 = v10 - 48, v12 = (unsigned __int16)(v10 + 240), v11 >= 0xA) ? (v13 = v12 > 9) : (v13 = 0),
              v13))
        {
LABEL_25:
          v15 = (const void **)MEMORY[0x24BDBD270];
        }
        else
        {
          v14 = 0;
          v15 = (const void **)MEMORY[0x24BDBD268];
          while (v8 - 1 != v14)
          {
            v16 = v7[v14 + 1];
            v17 = v16 - 48;
            ++v14;
            v18 = (unsigned __int16)(v16 + 240);
            if (v17 >= 0xA && v18 >= 0xA)
            {
              if (v14 >= v8)
                goto LABEL_26;
              goto LABEL_25;
            }
          }
        }
      }
      else
      {
LABEL_26:
        v15 = (const void **)MEMORY[0x24BDBD268];
      }
      CFDictionaryAddValue(a2, CFSTR("symbolCandidateInTenKeyNumberMultiTap"), *v15);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20B8AF0AC()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8AF0C0(uint64_t a1, char a2, int a3, int a4, uint64_t a5)
{
  const void **v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  const __CFLocale *v24;
  CFStringTokenizerRef v25;
  CFRange v27;

  *(_BYTE *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = (const void **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = dispatch_queue_create("com.apple.inMemoryImmutableDictionaryDispatcher.modify", 0);
  *(_QWORD *)(a1 + 32) = dispatch_queue_create("com.apple.inMemoryImmutableDictionaryDispatcher.build", 0);
  *(_QWORD *)(a1 + 48) = dispatch_group_create();
  if (a4 == 2)
  {
    v15 = operator new();
    v16 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_DWORD *)(v15 + 24) = v16;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_QWORD *)(v15 + 78) = 0;
    *(_WORD *)(v15 + 86) = 1;
    *(_DWORD *)(v15 + 88) = 0;
    *(_QWORD *)(v15 + 96) = 0;
    *(_QWORD *)(v15 + 104) = 850045863;
    *(_OWORD *)(v15 + 112) = 0u;
    *(_OWORD *)(v15 + 128) = 0u;
    *(_OWORD *)(v15 + 144) = 0u;
    *(_QWORD *)(v15 + 160) = 0;
    v10 = (char *)&unk_24C469258;
    *(_QWORD *)v15 = &unk_24C469268;
    v17 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    goto LABEL_12;
  }
  if (a4 == 1)
  {
    v18 = operator new();
    v19 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_DWORD *)(v18 + 24) = v19;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_QWORD *)(v18 + 78) = 0;
    *(_WORD *)(v18 + 86) = 1;
    *(_DWORD *)(v18 + 88) = 0;
    *(_QWORD *)(v18 + 96) = 0;
    *(_QWORD *)(v18 + 104) = 850045863;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_QWORD *)(v18 + 160) = 0;
    v10 = (char *)&unk_24C468BE0;
    *(_QWORD *)v18 = &unk_24C468BF0;
    v20 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v18;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_12:
    v12 = operator new();
    v21 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 24) = v21;
    v14 = 0uLL;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_QWORD *)(v12 + 78) = 0;
    *(_WORD *)(v12 + 86) = 1;
    goto LABEL_13;
  }
  if (a4)
    goto LABEL_15;
  v8 = operator new();
  v9 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = v9;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 78) = 0;
  *(_WORD *)(v8 + 86) = 9800;
  *(_DWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 850045863;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_QWORD *)(v8 + 160) = 0;
  v10 = (char *)&unk_24C468DB8;
  *(_QWORD *)v8 = &unk_24C468DC8;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new();
  v13 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = v13;
  v14 = 0uLL;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_QWORD *)(v12 + 78) = 0;
  *(_WORD *)(v12 + 86) = 9800;
LABEL_13:
  *(_DWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 104) = 850045863;
  *(_OWORD *)(v12 + 112) = v14;
  *(_OWORD *)(v12 + 128) = v14;
  *(_OWORD *)(v12 + 144) = v14;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)v12 = v10 + 16;
  v22 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_15:
  v23 = sub_20B8D0E3C(*(_DWORD *)(a1 + 4));
  v24 = sub_20B8D0FCC(v23);
  if (v24)
  {
    v27.location = 0;
    v27.length = 0;
    v25 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v27, 0x210004uLL, v24);
    sub_20B8AF4A8(v7, v25);
    CFRelease(v24);
  }
  return a1;
}

void sub_20B8AF430(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  sub_20B8AF4A8(v2, 0);
  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void sub_20B8AF4A8(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B8AF4DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  atomic_store(1u, (unsigned __int8 *)(a1 + 24));
  if (*(_BYTE *)a1)
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  sub_20B8AF4A8((const void **)(a1 + 72), 0);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20B8AF570(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_20B8AF5F4;
  block[3] = &unk_24C46C100;
  block[4] = a1;
  if (*(_BYTE *)a1)
  {
    dispatch_sync(*(dispatch_queue_t *)(a1 + 40), block);
  }
  else
  {
    sub_20BA1C8FC(*(_QWORD *)(a1 + 56));
    sub_20BA1C8FC(*(_QWORD *)(a1 + 64));
  }
}

void sub_20B8AF5F4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_20BA1C8FC(*(_QWORD *)(v1 + 56));
  sub_20BA1C8FC(*(_QWORD *)(v1 + 64));
}

void sub_20B8AF61C(uint64_t a1, const void *a2)
{
  unsigned int *v4;
  unsigned int v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  _QWORD v9[6];

  v4 = (unsigned int *)(a1 + 28);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  sub_20B8AF570(a1);
  if (a2 && CFArrayGetCount((CFArrayRef)a2))
  {
    if (*(_BYTE *)a1)
    {
      CFRetain(a2);
      v6 = *(NSObject **)(a1 + 48);
      v7 = *(NSObject **)(a1 + 32);
      v9[0] = MEMORY[0x24BDAC760];
      v9[1] = 0x40000000;
      v9[2] = sub_20B8AF6F8;
      v9[3] = &unk_24C499C28;
      v9[4] = a1;
      v9[5] = a2;
      dispatch_group_async(v6, v7, v9);
    }
    else
    {
      sub_20B8AF724(a1, (const __CFArray *)a2);
    }
  }
  else
  {
    do
      v8 = __ldaxr(v4);
    while (__stlxr(v8 - 1, v4));
  }
}

void sub_20B8AF6F8(uint64_t a1)
{
  sub_20B8AF724(*(_QWORD *)(a1 + 32), *(const __CFArray **)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_20B8AF724(uint64_t a1, const __CFArray *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)(a1 + 28);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 8) == 2)
      sub_20B8AF894(a1, a2);
    else
      sub_20B8AFBA8(a1, a2);
  }
}

CFIndex sub_20B8AF758(uint64_t a1, const __CFString *a2, CFStringRef theString)
{
  CFIndex result;
  int v8;
  CFIndex v9;
  BOOL v10;
  CFIndex i;
  int CharacterAtIndex;
  uint64_t v13;
  BOOL v14;
  _DWORD v15[2];

  if ((const __CFString *)*MEMORY[0x24BDBD430] == a2 || *MEMORY[0x24BDBD430] == (_QWORD)theString)
    return 0;
  result = CFStringGetLength(theString);
  if (result)
  {
    if (a2)
    {
      v8 = *(_DWORD *)(a1 + 4);
      result = CFStringGetLength(a2);
      if (!result)
        return result;
      if (v8 == 5)
      {
        v9 = result;
        if (result >= 1)
        {
          v10 = 0;
          for (i = 0; i != v9; v10 = i >= v9)
          {
            CharacterAtIndex = CFStringGetCharacterAtIndex(a2, i);
            if ((CharacterAtIndex - 12549) >= 0x25)
            {
              v13 = 0;
              while ((unsigned __int16)word_20BA4B1C4[v13] != CharacterAtIndex)
              {
                if (++v13 == 5)
                  goto LABEL_20;
              }
              if (v13 == -1)
                break;
            }
            ++i;
          }
LABEL_20:
          if (!v10)
            return 0;
        }
      }
      else
      {
        v15[0] = v8;
        v15[1] = 0;
        v14 = sub_20BA01784((uint64_t)v15, a2);
        result = 0;
        if (!v14)
          return result;
      }
      if (sub_20B8D1450(theString) != 1 || *(_DWORD *)(a1 + 8))
        return 1;
    }
    return 0;
  }
  return result;
}

void sub_20B8AF894(uint64_t a1, const __CFArray *a2)
{
  const CFArrayCallBacks *v4;
  CFIndex v5;
  CFIndex Count;
  int v7;
  unsigned __int8 v8;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v10;
  const __CFString *v11;
  const __CFArray *v12;
  CFStringRef v13;
  __CFArray *v14;
  const void *v15;
  const void *v16;
  unsigned __int8 v17;
  void *value;
  const __CFArray *v19;
  __CFArray *Mutable;
  __CFArray *theArray;

  v4 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v5 = 0;
  Mutable = CFArrayCreateMutable(0, 0, v4);
  value = (void *)*MEMORY[0x24BDBD430];
  v19 = a2;
  while (1)
  {
    Count = CFArrayGetCount(a2);
    v7 = atomic_load((unsigned int *)(a1 + 28));
    if (v5 >= Count)
      break;
    if (v7 > 0)
      goto LABEL_32;
    v8 = atomic_load((unsigned __int8 *)(a1 + 24));
    if ((v8 & 1) != 0)
      goto LABEL_32;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v5);
    v10 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconSurfaceKey[0]);
    v11 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconReadingKey[0]);
    if ((sub_20B8AF758(a1, v11, v10) & 1) != 0)
    {
      v12 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      if (sub_20B8AFDA0(a1, v10, v11, v12))
        v13 = sub_20B8AFF38(a1, v12, *(_DWORD *)(a1 + 4) == 5);
      else
        v13 = 0;
      if (v13)
        v14 = theArray;
      else
        v14 = Mutable;
      CFArrayAppendValue(v14, v10);
      if (v13)
        CFArrayAppendValue(theArray, v13);
      else
        CFArrayAppendValue(Mutable, v11);
      v15 = CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconItemPrefixKey[0]);
      a2 = v19;
      if (v15)
        CFArrayAppendValue(v14, v15);
      else
        CFArrayAppendValue(v14, value);
      v16 = CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconIdentifiersKey[0]);
      if (v16)
        CFArrayAppendValue(v14, v16);
      else
        CFArrayAppendValue(v14, value);
      if (v13)
        CFRelease(v13);
      if (v12)
        CFRelease(v12);
    }
    ++v5;
  }
  if (v7 <= 0)
  {
    v17 = atomic_load((unsigned __int8 *)(a1 + 24));
    if ((v17 & 1) == 0)
    {
      if (CFArrayGetCount(theArray))
        sub_20BA1CA68(*(_QWORD *)(a1 + 56), theArray);
      if (CFArrayGetCount(Mutable))
        sub_20BA1CA68(*(_QWORD *)(a1 + 64), Mutable);
    }
  }
LABEL_32:
  if (Mutable)
    CFRelease(Mutable);
  if (theArray)
    CFRelease(theArray);
}

void sub_20B8AFB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  sub_20B8B035C((const void **)va, 0);
  sub_20B8B035C((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_20B8AFBA8(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  const CFArrayCallBacks *v5;
  __CFArray *Mutable;
  __CFArray *v7;
  __CFArray *v8;
  CFIndex i;
  int v10;
  unsigned __int8 v11;
  const __CFString *ValueAtIndex;
  CFIndex v13;
  const __CFString *v14;
  CFStringRef v15;
  CFStringRef v16;
  int v17;
  unsigned __int8 v18;

  Count = CFArrayGetCount(theArray);
  if ((Count & 1) == 0)
  {
    v5 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    v7 = CFArrayCreateMutable(0, 0, v5);
    v8 = CFArrayCreateMutable(0, 0, v5);
    if (Count >= 1)
    {
      for (i = 0; i < Count; i = v13 + 1)
      {
        v10 = atomic_load((unsigned int *)(a1 + 28));
        if (v10 > 0)
          break;
        v11 = atomic_load((unsigned __int8 *)(a1 + 24));
        if ((v11 & 1) != 0)
          break;
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
        v13 = i + 1;
        v14 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v13);
        if (sub_20B8AF758(a1, v14, ValueAtIndex))
        {
          CFArrayRemoveAllValues(v8);
          if (sub_20B8AFDA0(a1, ValueAtIndex, v14, v8)
            && (v15 = sub_20B8AFF38(a1, v8, *(_DWORD *)(a1 + 4) == 5)) != 0)
          {
            v16 = v15;
            CFArrayAppendValue(Mutable, ValueAtIndex);
            CFArrayAppendValue(Mutable, v16);
            CFRelease(v16);
          }
          else
          {
            CFArrayAppendValue(v7, ValueAtIndex);
            CFArrayAppendValue(v7, v14);
          }
        }
      }
    }
    v17 = atomic_load((unsigned int *)(a1 + 28));
    if (v17 <= 0)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 24));
      if ((v18 & 1) == 0)
      {
        if (CFArrayGetCount(Mutable))
          sub_20BA1CA68(*(_QWORD *)(a1 + 56), Mutable);
        if (CFArrayGetCount(v7))
          sub_20BA1CA68(*(_QWORD *)(a1 + 64), v7);
      }
    }
    CFRelease(Mutable);
    CFRelease(v7);
    CFRelease(v8);
  }
}

BOOL sub_20B8AFDA0(uint64_t a1, const __CFString *a2, CFStringRef theString, __CFArray *a4)
{
  CFIndex Length;
  __CFStringTokenizer *v9;
  CFIndex v10;
  const __CFString *v11;
  const __CFArray *v12;
  _BOOL8 v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const __CFString *ValueAtIndex;
  CFIndex v18;
  CFIndex v19;
  __CFArray *theArray;
  CFRange v22;
  CFRange v23;
  CFRange v24;

  Length = CFStringGetLength(theString);
  if (Length < CFStringGetLength(a2))
    return 0;
  v9 = *(__CFStringTokenizer **)(a1 + 72);
  v22.length = CFStringGetLength(a2);
  v22.location = 0;
  CFStringTokenizerSetString(v9, a2, v22);
  if (!CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 72)))
    return 1;
  v10 = 0;
  theArray = a4;
  do
  {
    v11 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 72), 0x10000uLL);
    v12 = sub_20B8D2F34(v11, *(_DWORD *)(a1 + 4) == 5);
    if (v11)
      CFRelease(v11);
    v13 = v12 != 0;
    if (!v12)
      break;
    Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      v15 = Count;
      v16 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v16);
        v18 = CFStringGetLength(ValueAtIndex);
        v19 = v18 + v10;
        if (v18 + v10 > Length)
          break;
        v23.length = v18;
        v23.location = v10;
        if (CFStringCompareWithOptions(theString, ValueAtIndex, v23, 1uLL))
          break;
        ++v16;
        v10 = v19;
        if (v15 == v16)
          goto LABEL_14;
      }
      CFRelease(v12);
      return 0;
    }
    v19 = v10;
LABEL_14:
    v24.length = CFArrayGetCount(v12);
    v24.location = 0;
    CFArrayAppendArray(theArray, v12, v24);
    CFRelease(v12);
    v10 = v19;
  }
  while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 72)));
  return v13;
}

CFStringRef sub_20B8AFF38(uint64_t a1, CFArrayRef theArray, char a3)
{
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  unsigned __int16 ***v10;
  unsigned __int16 *v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned __int16 *v25;
  unsigned __int16 v26;
  char *v27;
  CFStringRef v28;
  UniChar *buffer;
  UniChar *v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  uint64_t v35;
  void *__p;
  char *v37;
  char *v38;
  CFRange v39;

  __p = 0;
  v37 = 0;
  v38 = 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  for (i = 0; i != Count; ++i)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    buffer = 0;
    v31 = 0;
    v32 = 0;
    Length = CFStringGetLength(ValueAtIndex);
    sub_20B87C6B4((uint64_t)&buffer, Length);
    v39.length = CFStringGetLength(ValueAtIndex);
    v39.location = 0;
    CFStringGetCharacters(ValueAtIndex, v39, buffer);
    if ((sub_20BA1AEE8((uint64_t *)&buffer, &v33, a3) & 1) == 0)
    {
LABEL_18:
      LOBYTE(v11) = 0;
      goto LABEL_35;
    }
    v10 = *(unsigned __int16 ****)(a1 + 16);
    v11 = **v10;
    v12 = (char *)v33;
    if (v11)
      v13 = v34 == v33;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = 0;
      v15 = v34 - (_BYTE *)v33;
      do
      {
        v11 = sub_20B9F17AC((uint64_t)v10, v11, v12[v14++]);
        if (v11)
          v16 = v14 >= v15;
        else
          v16 = 1;
      }
      while (!v16);
    }
    if (v11)
    {
      v17 = v11[1];
      if (v17 == 0xFFFF)
        goto LABEL_18;
      v18 = (unsigned __int16 *)v37;
      if (v37 >= v38)
      {
        v19 = (unsigned __int16 *)__p;
        v20 = v37 - (_BYTE *)__p;
        if (v37 - (_BYTE *)__p <= -3)
          sub_20B80CDD8();
        v21 = v20 >> 1;
        if (v38 - (_BYTE *)__p <= (unint64_t)((v20 >> 1) + 1))
          v22 = v21 + 1;
        else
          v22 = v38 - (_BYTE *)__p;
        if ((unint64_t)(v38 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)sub_20B80FD48((uint64_t)&v38, v23);
          v19 = (unsigned __int16 *)__p;
          v18 = (unsigned __int16 *)v37;
          LOWORD(v17) = v11[1];
        }
        else
        {
          v24 = 0;
        }
        v25 = (unsigned __int16 *)&v24[2 * v21];
        *v25 = v17;
        v11 = v25 + 1;
        while (v18 != v19)
        {
          v26 = *--v18;
          *--v25 = v26;
        }
        __p = v25;
        v37 = (char *)v11;
        v38 = &v24[2 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_WORD *)v37 = v17;
        v11 = v18 + 1;
      }
      v37 = (char *)v11;
      LOBYTE(v11) = 1;
    }
LABEL_35:
    if (buffer)
    {
      v31 = buffer;
      operator delete(buffer);
    }
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if ((v11 & 1) == 0)
    {
      v28 = 0;
      goto LABEL_45;
    }
  }
  v27 = (char *)__p;
  if (__p != v37)
  {
    v28 = CFStringCreateWithCharacters(0, (const UniChar *)__p, (v37 - (_BYTE *)__p) >> 1);
LABEL_45:
    v27 = (char *)__p;
    if (!__p)
      return v28;
LABEL_46:
    v37 = v27;
    operator delete(v27);
    return v28;
  }
  v28 = 0;
  if (__p)
    goto LABEL_46;
  return v28;
}

void sub_20B8B01AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_20B8B01FC(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = (char *)operator new(8uLL);
    *(_QWORD *)v5 = v4;
    v6 = v5 + 8;
    a2[1] = v5 + 8;
    a2[2] = v5 + 8;
    *a2 = v5;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
  {
    v8 = v6 - v5;
    v9 = (v6 - v5) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20B80CDD8();
    if (v8 >> 2 > v10)
      v10 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 61)
        sub_20B800BC0();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v9];
    *(_QWORD *)v13 = v7;
    v14 = v13 + 8;
    if (v6 != v5)
    {
      do
      {
        v15 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v13 - 1) = v15;
        v13 -= 8;
      }
      while (v6 != v5);
      v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v14;
    a2[2] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
    a2[1] = v14;
  }
}

void sub_20B8B030C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B8B0328(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B8B035C(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B8B0390(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_24C45F418;
  return result;
}

uint64_t sub_20B8B03A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

uint64_t sub_20B8B03AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C988);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472C988))
  {
    unk_254727EC0 = 0u;
    unk_254727EB0 = 0u;
    qword_25472C980 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_25472C988);
  }
  return qword_25472C980;
}

void sub_20B8B0418(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C988);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B0430(uint64_t a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  sub_20B8B03AC();
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t sub_20B8B0470(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_24C45F598;
  return result;
}

uint64_t sub_20B8B0480()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472C998);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472C998))
  {
    unk_254727F20 = 0u;
    unk_254727F10 = 0u;
    qword_25472C990 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_25472C998);
  }
  return qword_25472C990;
}

void sub_20B8B04EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C998);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B0504(uint64_t a1)
{
  uint64_t result;

  CFAllocatorGetDefault();
  sub_20B8B0480();
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

_QWORD *sub_20B8B0544(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C45F418;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  return a1;
}

void sub_20B8B0584(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C45F418;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8B05D4()
{
  return 0;
}

uint64_t sub_20B8B05DC()
{
  return 0;
}

uint64_t sub_20B8B05E4()
{
  return 0;
}

uint64_t sub_20B8B05EC()
{
  return 0;
}

void sub_20B8B05F8(_QWORD *a1)
{
  sub_20B8B061C(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8B061C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C45F598;
  v2 = a1[1];
  if (v2)
  {
    sub_20B87E150((const void **)(v2 + 24), 0);
    MEMORY[0x20BD39CB0](v2, 0x1060C40B5E1536ALL);
  }
  return a1;
}

uint64_t sub_20B8B0674(uint64_t a1, char *a2, _QWORD **a3)
{
  int v4;
  size_t v5;
  uint64_t v7;
  _QWORD *v8;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  _WORD *v16;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  CFPropertyListRef v26;
  int v27;
  UInt8 *v28;
  CFIndex v29;
  const __CFDictionary *Value;
  const __CFDictionary *v31;
  const __CFString *v32;
  char v33;
  const __CFArray *v34;
  const __CFArray *v35;
  BOOL v36;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFBoolean *v39;
  _BOOL4 v40;
  const __CFString *v41;
  CFComparisonResult v42;
  BOOL v43;
  uint64_t v44;
  const __CFBoolean *v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::runtime_error *v63;
  void *v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  void *v67;
  _QWORD *v68;
  char v70[24];
  CFTypeRef cf;
  CFTypeRef v72;

  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a3 + 23);
  else
    v5 = (size_t)a3[1];
  v7 = a1;
  switch(v5)
  {
    case 5uLL:
      if (v4 >= 0)
        v8 = a3;
      else
        v8 = *a3;
      if (*(_DWORD *)v8 == 1702390125 && *((_BYTE *)v8 + 4) == 100)
      {
        v11 = 12;
        break;
      }
      if (*(_DWORD *)v8 == 1785687397 && *((_BYTE *)v8 + 4) == 105)
      {
        v11 = 4;
        break;
      }
      if (memcmp(v8, "asset", v5))
        goto LABEL_134;
      v11 = 7;
      break;
    case 6uLL:
      if (v4 >= 0)
        v16 = a3;
      else
        v16 = *a3;
      if (*(_DWORD *)v16 == 1953724787 && v16[2] == 28005)
      {
        v11 = 0;
      }
      else
      {
        if (memcmp(v16, "region", v5))
        {
LABEL_134:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Wrong dictionary type string");
          __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        v11 = 16;
      }
      break;
    case 7uLL:
      if (v4 >= 0)
        v19 = a3;
      else
        v19 = *a3;
      if (memcmp(v19, "english", v5))
        goto LABEL_134;
      v11 = 6;
      break;
    case 8uLL:
      if (v4 >= 0)
        v20 = a3;
      else
        v20 = *a3;
      if (*v20 != 0x79726F6765746163)
        goto LABEL_134;
      v11 = 3;
      break;
    case 0xAuLL:
      if (v4 >= 0)
        v12 = (uint64_t *)a3;
      else
        v12 = *a3;
      v13 = *v12;
      v14 = *((unsigned __int16 *)v12 + 4);
      if (v13 != 0x656D656C70707573 || v14 != 29806)
        goto LABEL_134;
      v11 = 5;
      break;
    case 0xBuLL:
      if (v4 >= 0)
        v18 = a3;
      else
        v18 = *a3;
      if (memcmp(v18, "asset_mixed", v5))
        goto LABEL_134;
      v11 = 15;
      break;
    case 0x10uLL:
      if (v4 >= 0)
        v21 = (uint64_t *)a3;
      else
        v21 = *a3;
      v23 = *v21;
      v22 = v21[1];
      if (v23 != 0x635F656C676E6973 || v22 != 0x7265746361726168)
        goto LABEL_134;
      v11 = 1;
      break;
    default:
      goto LABEL_134;
  }
  *(_DWORD *)(v7 + 40) = v11;
  if (a2[23] >= 0)
    v25 = a2;
  else
    v25 = *(char **)a2;
  v26 = sub_20B8D25FC(v25);
  v72 = v26;
  if (!v26)
  {
    v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Cannot load dictionary index property plist.");
    __cxa_throw(v66, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v27 = *((char *)a3 + 23);
  if (v27 >= 0)
    v28 = (UInt8 *)a3;
  else
    v28 = (UInt8 *)*a3;
  if (v27 >= 0)
    v29 = *((unsigned __int8 *)a3 + 23);
  else
    v29 = (CFIndex)a3[1];
  cf = sub_20B8D2DD4(v28, v29);
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v26, cf);
  v31 = Value;
  if (!Value)
  {
    v67 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x20BD398B4](v67, v70);
    __cxa_throw(v67, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v32 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("feature_format"));
  if (CFStringCompare(v32, CFSTR("full"), 0))
  {
    if (CFStringCompare(v32, CFSTR("skip_syllable_lengths"), 0))
    {
      v68 = __cxa_allocate_exception(8uLL);
      *v68 = "Unrecognized feature format.";
      __cxa_throw(v68, MEMORY[0x24BEDB718], 0);
    }
    v33 = 1;
  }
  else
  {
    v33 = 0;
  }
  *(_BYTE *)(v7 + 24) = v33;
  v34 = (const __CFArray *)CFDictionaryGetValue(v31, CFSTR("indexes"));
  v35 = v34;
  if (!v34 || !CFArrayGetCount(v34))
  {
    v64 = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    __cxa_throw(v64, (struct type_info *)&unk_24C45E6B8, MEMORY[0x24BEDACF0]);
  }
  v36 = 0;
  for (i = 0; i < CFArrayGetCount(v35); ++i)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, i);
    v39 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, CFSTR("is_reversed"));
    if (v39)
      v40 = CFBooleanGetValue(v39) != 0;
    else
      v40 = 0;
    v41 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("type"));
    v42 = CFStringCompare(v41, CFSTR("string"), 0);
    v43 = v42 == kCFCompareEqualTo;
    if (v42)
    {
      if (CFStringCompare(v41, CFSTR("syllable_id"), 0))
      {
        v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Unrecognized dictionary key type.");
        goto LABEL_130;
      }
      if (!v40)
      {
        v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "syllable_id based dictionary key must be in reversed direction");
LABEL_130:
        __cxa_throw(v63, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      if (v36)
      {
        v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Syllable ID indexes must be before string indexes");
        goto LABEL_130;
      }
      ++*(_QWORD *)(a1 + 32);
      v44 = 1;
    }
    else
    {
      v44 = 0;
    }
    v45 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, CFSTR("has_sub_index_for_prefix"));
    if (v45)
      v46 = CFBooleanGetValue(v45) != 0;
    else
      v46 = 0;
    v7 = a1;
    v48 = *(uint64_t **)(a1 + 8);
    v47 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v48 >= v47)
    {
      v52 = *(uint64_t **)a1;
      v53 = ((uint64_t)v48 - *(_QWORD *)a1) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        sub_20B80CDD8();
      v55 = v47 - (_QWORD)v52;
      if (v55 >> 2 > v54)
        v54 = v55 >> 2;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 61)
          sub_20B800BC0();
        v57 = (char *)operator new(8 * v56);
      }
      else
      {
        v57 = 0;
      }
      v58 = (uint64_t *)&v57[8 * v53];
      v59 = 0x10000000000;
      if (!v46)
        v59 = 0;
      v60 = 0x100000000;
      if (!v40)
        v60 = 0;
      *v58 = v60 | v59 | v44;
      v51 = v58 + 1;
      if (v48 == v52)
      {
        v7 = a1;
      }
      else
      {
        v7 = a1;
        do
        {
          v61 = *--v48;
          *--v58 = v61;
        }
        while (v48 != v52);
        v48 = *(uint64_t **)a1;
      }
      *(_QWORD *)v7 = v58;
      *(_QWORD *)(v7 + 8) = v51;
      *(_QWORD *)(v7 + 16) = &v57[8 * v56];
      if (v48)
        operator delete(v48);
    }
    else
    {
      v49 = 0x10000000000;
      if (!v46)
        v49 = 0;
      v50 = 0x100000000;
      if (!v40)
        v50 = 0;
      *v48 = v50 | v49 | v44;
      v51 = v48 + 1;
    }
    *(_QWORD *)(v7 + 8) = v51;
    v36 = v43;
  }
  if (cf)
    CFRelease(cf);
  if (v72)
    CFRelease(v72);
  return v7;
}

void sub_20B8B0D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  void *v17;
  int v18;
  uint64_t v20;
  void *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    v20 = a9;
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_20B87E150(&a16, 0);
      sub_20B87AA1C(&a17, 0);
      v21 = *(void **)v20;
      if (*(_QWORD *)v20)
      {
        *(_QWORD *)(v20 + 8) = v21;
        operator delete(v21);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v20 = a9;
    if (!v18)
      goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

BOOL sub_20B8B0E3C(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t sub_20B8B0EB0(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  CFMutableArrayRef Mutable;

  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  *(_QWORD *)a1 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 8) = CFDictionaryCreateMutable(v2, 0, v3, v4);
  *(_BYTE *)(a1 + 16) = 0;
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x24BDBD690]);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, (const void *)qword_254728728, Mutable);
  CFRelease(Mutable);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, (const void *)qword_254728730, (const void *)*MEMORY[0x24BDBD430]);
  return a1;
}

uint64_t sub_20B8B0F78(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_20B8B0FB4(uint64_t a1)
{
  CFNumberRef v2;
  char valuePtr;

  if (*(_BYTE *)(a1 + 16))
  {
    valuePtr = 1;
    v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt8Type, &valuePtr);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8), (const void *)qword_254728738, v2);
    CFRelease(v2);
  }
}

_BYTE *sub_20B8B1020(_BYTE *result, const __CFString *a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  const __CFArray *v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  __CFString *Mutable;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  void *v19;
  const char *v20;
  uint64_t v21;
  const __CFString *v22;
  const __CFString *v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex j;
  void *v27;
  const char *v28;
  uint64_t v29;
  const __CFString *v30;
  const __CFString *v31;
  __CFString *v32;
  const __CFString *v33;
  __CFString *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex k;
  _QWORD **ValueAtIndex;
  const __CFString *v39;
  const __CFString *v40;
  const __CFArray *v41;
  const __CFArray *v42;
  const __CFArray *v43;
  CFIndex Length;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  CFIndex v48;
  uint64_t v49;
  const __CFString *v50;
  const __CFAllocator *v51;
  uint64_t valuePtr;
  const __CFString *v53;

  valuePtr = a4;
  if (!result[16])
    return result;
  v10 = result;
  result = CFDictionaryGetValue(*(CFDictionaryRef *)result, (const void *)qword_254728728);
  if (!result || !*((_QWORD *)v10 + 1))
    return result;
  v11 = (const __CFArray *)result;
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberLongType, &valuePtr);
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("MecabraAnalysisOption"), v13);
  CFRelease(v13);
  if (a2)
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("CurrentAnalysisString"), a2);
  if (a5 && a6)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6) & 1) != 0)
      goto LABEL_22;
    v50 = a2;
    v51 = v12;
    Mutable = CFStringCreateMutable(v12, 0);
    v15 = *(const __CFArray **)(a5 + 16);
    if (v15)
    {
      Count = CFArrayGetCount(v15);
      if (Count >= 1)
      {
        v17 = Count;
        for (i = 0; i != v17; ++i)
        {
          v19 = (void *)sub_20B96AAF4(a5, i);
          v22 = sub_20B8E29FC(v19, v20, v21);
          v53 = v22;
          if (v22)
          {
            v23 = v22;
            CFStringAppend(Mutable, v22);
            CFStringAppend(Mutable, CFSTR("\n"));
            CFRelease(v23);
          }
        }
      }
    }
    v24 = CFArrayGetCount(*(CFArrayRef *)(a5 + 32));
    if (v24 >= 1)
    {
      v25 = v24;
      for (j = 0; j != v25; ++j)
      {
        v27 = (void *)sub_20B96ABC8(a5, j);
        v30 = sub_20B8E29FC(v27, v28, v29);
        v53 = v30;
        if (v30)
        {
          v31 = v30;
          CFStringAppend(Mutable, v30);
          CFStringAppend(Mutable, CFSTR("\n"));
          CFRelease(v31);
        }
      }
    }
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("CandidateContext"), Mutable);
    CFRelease(Mutable);
    a2 = v50;
    v12 = v51;
  }
  if (a6)
  {
LABEL_22:
    v32 = sub_20B9D97DC(a6, 0);
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("InputContext"), v32);
    CFRelease(v32);
    if (!a5)
      goto LABEL_26;
LABEL_25:
    v33 = *(const __CFString **)(a5 + 72);
    if (v33)
      goto LABEL_27;
    goto LABEL_26;
  }
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("InputContext"), CFSTR("Empty Input Context."));
  if (a5)
    goto LABEL_25;
LABEL_26:
  v33 = CFSTR("Empty App Context.");
LABEL_27:
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("AppContext"), v33);
  if (a3)
  {
    v34 = CFStringCreateMutable(v12, 0);
    v35 = CFArrayGetCount(a3);
    if (v35 >= 1)
    {
      v36 = v35;
      for (k = 0; k != v36; ++k)
      {
        ValueAtIndex = (_QWORD **)CFArrayGetValueAtIndex(a3, k);
        v39 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*ValueAtIndex[3] + 40))(ValueAtIndex[3]);
        v53 = v39;
        if (v39)
        {
          v40 = v39;
          CFStringAppend(v34, v39);
          CFRelease(v40);
        }
      }
    }
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("GesturesData"), v34);
    if (v34)
      CFRelease(v34);
  }
  if (a5)
  {
    v41 = *(const __CFArray **)(a5 + 48);
    if (v41)
    {
      if (CFStringGetLength(a2) <= 80)
      {
        v42 = sub_20B951BDC(v41);
        if (v42)
        {
          v43 = v42;
          CFDictionaryAddValue(*((CFMutableDictionaryRef *)v10 + 1), CFSTR("GeometryData"), v42);
          CFRelease(v43);
        }
      }
    }
  }
  if (!a2)
  {
    v45 = 1;
    goto LABEL_44;
  }
  Length = CFStringGetLength(a2);
  v45 = Length < 31;
  if (Length <= 50)
  {
LABEL_44:
    v46 = 5;
    goto LABEL_45;
  }
  v46 = 1;
LABEL_45:
  if (v45)
    v47 = 10;
  else
    v47 = v46;
  v48 = CFArrayGetCount(v11);
  if (v48 >= v47)
  {
    v49 = v48 + 1;
    do
    {
      CFArrayRemoveValueAtIndex(v11, 0);
      --v49;
    }
    while (v49 > v47);
  }
  CFArrayAppendValue(v11, *((const void **)v10 + 1));
  CFRelease(*((CFTypeRef *)v10 + 1));
  result = CFDictionaryCreateMutable(v12, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *((_QWORD *)v10 + 1) = result;
  return result;
}

void sub_20B8B1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8B1440(uint64_t a1)
{
  CFMutableArrayRef Mutable;

  if (*(_BYTE *)(a1 + 16))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    CFDictionaryReplaceValue(*(CFMutableDictionaryRef *)a1, (const void *)qword_254728728, Mutable);
    CFRelease(Mutable);
  }
}

uint64_t sub_20B8B14A8(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int16 **a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;

  *(_DWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)result = &unk_24C45F9E8;
  *(_OWORD *)(result + 48) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(result + 64) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (uint64_t)a5[1];
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = *a5;
    do
    {
      v8 = *v7++;
      v6 = v6 + v8 - 48;
      if (v6 <= 0x20)
        *(_DWORD *)(result + 44) |= 1 << (v6 - 1);
      --v5;
    }
    while (v5);
  }
  return result;
}

_QWORD *sub_20B8B1530(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C45F9E8;
  v2 = (uint64_t)(a1 + 6);
  sub_20B811FE4((uint64_t)(a1 + 8));
  sub_20B811FE4(v2);
  return a1;
}

void sub_20B8B1574(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C45F9E8;
  v1 = (uint64_t)(a1 + 6);
  sub_20B811FE4((uint64_t)(a1 + 8));
  sub_20B811FE4(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8B15C8()
{
  return 0;
}

uint64_t sub_20B8B15D0(uint64_t a1)
{
  CFStringRef *v2;
  const __CFString *v3;

  v2 = *(CFStringRef **)(a1 + 64);
  if (!v2)
  {
    v3 = **(const __CFString ***)(a1 + 48);
    if (!v3)
      return 0;
    goto LABEL_7;
  }
  if (*v2)
    CFStringGetLength(*v2);
  v3 = **(const __CFString ***)(a1 + 48);
  if (v3)
LABEL_7:
    CFStringGetLength(v3);
  return 0;
}

uint64_t sub_20B8B1644()
{
  return 0;
}

void sub_20B8B164C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_20B8B1658(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_20B8B1664(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_20B8B1670()
{
  return 0;
}

uint64_t sub_20B8B1678()
{
  return 0;
}

uint64_t sub_20B8B1680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = a1 + 48;
  *(_QWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v9 = **(_QWORD **)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = (*(_QWORD *)(a2 + 64) - v10) >> 1;
  v12 = v10 + 2 * v9;
  if (v11 <= v9)
    v12 = 0;
  if (v10)
    v13 = v11 - v9;
  else
    v13 = 0;
  if (v11 <= v9)
    v14 = 0;
  else
    v14 = v13;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v14;
  v15 = **(_QWORD **)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 32);
  v17 = (*(_QWORD *)(a2 + 40) - v16) >> 1;
  v18 = v16 + 2 * v15;
  if (v17 <= v15)
    v18 = 0;
  if (v16)
    v19 = v17 - v15;
  else
    v19 = 0;
  if (v17 <= v15)
    v20 = 0;
  else
    v20 = v19;
  *(_QWORD *)(a1 + 24) = v18;
  *(_QWORD *)(a1 + 32) = v20;
  sub_20B87D570((void **)(a1 + 48), *(_QWORD *)(a3 + 8) + v14);
  sub_20B8B17F4(*(_WORD **)(a1 + 8), (_WORD *)(*(_QWORD *)(a1 + 8) + 2 * *(_QWORD *)(a1 + 16)), v8);
  sub_20B8B17F4(*(_WORD **)a3, (_WORD *)(*(_QWORD *)a3 + 2 * *(_QWORD *)(a3 + 8)), v8);
  sub_20B87D570((void **)(v8 + 24), *(_QWORD *)(a4 + 8) + *(_QWORD *)(a1 + 16));
  sub_20B8B17F4(*(_WORD **)(a1 + 8), (_WORD *)(*(_QWORD *)(a1 + 8) + 2 * *(_QWORD *)(a1 + 16)), v8 + 24);
  sub_20B8B17F4(*(_WORD **)a4, (_WORD *)(*(_QWORD *)a4 + 2 * *(_QWORD *)(a4 + 8)), v8 + 24);
  return a1;
}

void sub_20B8B17C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_20B8B17F4(_WORD *a1, _WORD *a2, uint64_t a3)
{
  _WORD *v3;
  _WORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    sub_20B888330(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t sub_20B8B1854(int *a1, CFArrayRef *a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, float a8)
{
  unsigned int v10;
  int v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t **v33;
  uint64_t *v34;
  unsigned __int16 *v35;
  float v36;
  int v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  const __CFArray *Count;
  const UInt8 *v44;
  const UInt8 *v45;
  unsigned __int16 v46;
  double v47;
  unint64_t v48;
  double v49;
  double v50;
  BOOL v51;
  int8_t v52;
  double v53;
  double v54;
  float v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  unsigned __int16 v59;
  BOOL v60;
  int v61;
  BOOL v62;
  _BOOL4 v64;

  v10 = a5;
  v14 = a3[a5];
  *(_WORD *)a6 = v14;
  *(float *)(a6 + 4) = a8;
  v15 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
  v16 = *((_QWORD *)a1 + 11);
  if (v16 >= a4)
    v17 = a4;
  else
    v17 = *((_QWORD *)a1 + 11);
  if (v17)
  {
    if (*a3 == *v15)
    {
      v18 = 0;
      while (v17 - 1 != v18)
      {
        v19 = a3[v18 + 1];
        v20 = v15[++v18];
        if (v19 != v20)
          goto LABEL_12;
      }
      v18 = v17;
LABEL_12:
      v21 = v17 > v18;
    }
    else
    {
      v21 = 1;
    }
    v22 = &v15[v16 - 1];
    v23 = &a3[a4 - 1];
    while (1)
    {
      v25 = *v23--;
      v24 = v25;
      v26 = *v22--;
      if (v24 != v26)
        break;
      if (!--v17)
        goto LABEL_16;
    }
    if (v21)
      return 1;
  }
  else
  {
LABEL_16:
    v10 = a5 - a4 + v16;
  }
  if ((v10 & 0x80000000) != 0)
    return 1;
  v27 = *a1;
  v28 = sub_20B896F94();
  if ((v27 & 0x40) == 0)
    goto LABEL_43;
  v29 = 60;
  if (!*v28)
    v29 = 255;
  if (v29 > v10
    && (!v10 ? (v30 = 0) : (v30 = v15[v10 - 1]),
        v16 - 1 <= v10 ? (v32 = 0) : (v32 = v15[v10 + 1]),
        (v33 = sub_20BA02088(v14, v30, v32, (*a1 >> 6) & 8 | *(_BYTE *)a1 & 0x20 | (*a1 >> 4) & 0x10 | (*a1 << 24 >> 31) & 6)) != 0&& (v34 = *v33, v35 = (unsigned __int16 *)v33[1], *v33 != (uint64_t *)v35)))
  {
    v36 = a8 + -1.0;
    v31 = 1;
    do
    {
      v37 = *(unsigned __int16 *)v34;
      if (v37 != v14)
      {
        if ((int)v31 < 1)
        {
LABEL_38:
          v40 = a6 + 8 * (int)v31;
          *(_WORD *)v40 = v37;
          *(float *)(v40 + 4) = v36;
          v31 = (v31 + 1);
        }
        else
        {
          v38 = v31;
          v39 = (float *)(a6 + 4);
          while (*((unsigned __int16 *)v39 - 2) != v37)
          {
            v39 += 2;
            if (!--v38)
              goto LABEL_38;
          }
          if (*v39 < v36)
            *v39 = v36;
        }
      }
      v34 = (uint64_t *)((char *)v34 + 2);
    }
    while (v34 != (uint64_t *)v35);
  }
  else
  {
LABEL_43:
    v31 = 1;
  }
  if ((v27 & 0x20) != 0)
  {
    v42 = (unint64_t)v10 >> 3;
    if (v42 < 5)
    {
      v41 = -0.65;
      goto LABEL_52;
    }
LABEL_49:
    if (v42 >= 0xF)
      v41 = 0.0;
    else
      v41 = -0.2;
    goto LABEL_52;
  }
  v41 = -0.5;
  v42 = (unint64_t)v10 >> 2;
  if (v42 >= 5)
    goto LABEL_49;
LABEL_52:
  if (a2 && (v27 & 0x10) != 0)
  {
    Count = *a2;
    if (*a2)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count > (int)v10)
    {
      v44 = sub_20B951B88(a2, (int)v10);
      if (v44)
      {
        v45 = v44;
        v46 = *(_WORD *)v44;
        if (*(_WORD *)v44)
          v47 = *((float *)v44 + 1);
        else
          v47 = 0.0;
        v48 = 0;
        if ((v27 & 0x20) != 0)
          v49 = 4.0;
        else
          v49 = 7.5;
        v50 = a8;
        while (1)
        {
          v51 = v14 == 9787;
          if (v46 == 9787)
            goto LABEL_117;
          if (!v46)
            return v31;
          v52 = u_charType(v46);
          v51 = v14 == v46;
          if (v14 == v46 || (v52 - 30) <= 0xF4u)
          {
LABEL_117:
            if (!v51)
            {
              v53 = *((float *)v45 + 1) - v47;
              if (v53 >= v41)
              {
                v54 = v49 * v53;
                if ((v27 & 0x20) != 0)
                {
                  if (v14 == 105 && v46 == 111
                    || v14 == 111 && v46 == 105
                    || (v14 == 105 ? (v60 = v46 == 117) : (v60 = 0),
                        !v60 ? (v61 = 0) : (v61 = 1),
                        v46 == 105 ? (v62 = v14 == 117) : (v62 = 0),
                        v62 || v61))
                  {
                    v54 = v54 + -2.0;
                  }
                  else
                  {
                    v64 = v14 == 109 && v46 == 110;
                    if (v14 == 110 && v46 == 109 || v64)
                      v54 = v54 + -0.3;
                  }
                }
                v55 = v54 + -0.3 + v50;
                if ((int)v31 < 1)
                {
LABEL_81:
                  v58 = a6 + 8 * (int)v31;
                  *(_WORD *)v58 = v46;
                  *(float *)(v58 + 4) = v55;
                  v31 = (v31 + 1);
                }
                else
                {
                  v56 = v31;
                  v57 = (float *)(a6 + 4);
                  while (*((unsigned __int16 *)v57 - 2) != v46)
                  {
                    v57 += 2;
                    if (!--v56)
                      goto LABEL_81;
                  }
                  if (*v57 < v55)
                    *v57 = v55;
                }
                if ((int)v31 >= a7 || v48 > 1)
                  return v31;
                ++v48;
              }
            }
          }
          v59 = *((_WORD *)v45 + 4);
          v45 += 8;
          v46 = v59;
        }
      }
    }
  }
  return v31;
}

uint64_t sub_20B8B1CB4(int *a1, CFArrayRef *a2, float a3, uint64_t a4, int a5, int a6, uint64_t a7, unint64_t a8)
{
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned __int16 *v29;
  float v30;
  int v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  double v35;
  BOOL v36;
  const __CFArray *Count;
  const UInt8 *v38;
  const UInt8 *v39;
  unsigned __int16 v40;
  double v41;
  unint64_t v42;
  double v43;
  double v44;
  BOOL v45;
  int8_t v46;
  double v47;
  double v48;
  float v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  unsigned __int16 v53;
  BOOL v54;
  int v55;
  BOOL v56;
  _BOOL4 v58;

  if (*(_BYTE *)sub_20B896F94())
    v15 = 60;
  else
    v15 = 255;
  if (a5 >= a6)
    return 0;
  v16 = *((_QWORD *)a1 + 13);
  if (v16 <= a5)
    return 0;
  v17 = *((_QWORD *)a1 + 12);
  v18 = *a1;
  v19 = *a1 & 0x20;
  v20 = *a1 & 0x40;
  v21 = *(unsigned __int16 *)(v17 + 2 * a5);
  *(_WORD *)a7 = v21;
  *(float *)(a7 + 4) = a3;
  v22 = v15 <= a5 || v20 == 0;
  if (v22
    || (a5 < 1 ? (v23 = 0) : (v23 = *(unsigned __int16 *)(v17 + 2 * (a5 - 1))),
        v16 - 1 <= a5 ? (v26 = 0) : (v26 = *(unsigned __int16 *)(v17 + 2 * a5 + 2)),
        (v27 = sub_20BA02088(v21, v23, v26, (v18 >> 4) & 0x10 | (v18 >> 6) & 8 | ((char)v18 >> 7) & 6 | v19)) == 0
     || (v28 = *v27, v29 = (unsigned __int16 *)v27[1], *v27 == (uint64_t *)v29)))
  {
    v24 = 1;
  }
  else
  {
    v30 = a3 + -1.0;
    v24 = 1;
    do
    {
      v31 = *(unsigned __int16 *)v28;
      if (v31 != v21)
      {
        if ((int)v24 < 1)
        {
LABEL_26:
          v34 = a7 + 8 * (int)v24;
          *(_WORD *)v34 = v31;
          *(float *)(v34 + 4) = v30;
          v24 = (v24 + 1);
        }
        else
        {
          v32 = v24;
          v33 = (float *)(a7 + 4);
          while (*((unsigned __int16 *)v33 - 2) != v31)
          {
            v33 += 2;
            if (!--v32)
              goto LABEL_26;
          }
          if (*v33 < v30)
            *v33 = v30;
        }
      }
      v28 = (uint64_t *)((char *)v28 + 2);
    }
    while (v28 != (uint64_t *)v29);
  }
  if (v19)
  {
    if (a5 >= 0x28)
    {
      v36 = a5 >= 0x78;
LABEL_38:
      if (v36)
        v35 = 0.0;
      else
        v35 = -0.2;
      goto LABEL_41;
    }
    v35 = -0.65;
  }
  else
  {
    v35 = -0.5;
    if (a5 >= 0x14)
    {
      v36 = a5 >= 0x3C;
      goto LABEL_38;
    }
  }
LABEL_41:
  if (a2 && (v18 & 0x10) != 0)
  {
    Count = *a2;
    if (*a2)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count > a5)
    {
      v38 = sub_20B951B88(a2, a5);
      if (v38)
      {
        v39 = v38;
        v40 = *(_WORD *)v38;
        if (*(_WORD *)v38)
          v41 = *((float *)v38 + 1);
        else
          v41 = 0.0;
        v42 = 0;
        v43 = a3;
        if (v19)
          v44 = 4.0;
        else
          v44 = 7.5;
        while (1)
        {
          v45 = v21 == 9787;
          if (v40 == 9787)
            goto LABEL_104;
          if (!v40)
            return v24;
          v46 = u_charType(v40);
          v45 = v21 == v40;
          if (v21 == v40 || (v46 - 30) <= 0xF4u)
          {
LABEL_104:
            if (!v45)
            {
              v47 = *((float *)v39 + 1) - v41;
              if (v47 >= v35)
              {
                v48 = v44 * v47;
                if (v19)
                {
                  if (v21 == 105 && v40 == 111
                    || v21 == 111 && v40 == 105
                    || (v21 == 105 ? (v54 = v40 == 117) : (v54 = 0),
                        !v54 ? (v55 = 0) : (v55 = 1),
                        v40 == 105 ? (v56 = v21 == 117) : (v56 = 0),
                        v56 || v55))
                  {
                    v48 = v48 + -2.0;
                  }
                  else
                  {
                    v58 = v21 == 109 && v40 == 110;
                    if (v21 == 110 && v40 == 109 || v58)
                      v48 = v48 + -0.3;
                  }
                }
                v49 = v48 + -0.3 + v43;
                if ((int)v24 < 1)
                {
LABEL_69:
                  v52 = a7 + 8 * (int)v24;
                  *(_WORD *)v52 = v40;
                  *(float *)(v52 + 4) = v49;
                  v24 = (v24 + 1);
                }
                else
                {
                  v50 = v24;
                  v51 = (float *)(a7 + 4);
                  while (*((unsigned __int16 *)v51 - 2) != v40)
                  {
                    v51 += 2;
                    if (!--v50)
                      goto LABEL_69;
                  }
                  if (*v51 < v49)
                    *v51 = v49;
                }
                if ((int)v24 >= a8 || v42 > 1)
                  return v24;
                ++v42;
              }
            }
          }
          v53 = *((_WORD *)v39 + 4);
          v39 += 8;
          v40 = v53;
        }
      }
    }
  }
  return v24;
}

const UInt8 *sub_20B8B2084(CFArrayRef *a1, unsigned int a2)
{
  unsigned __int8 v3;
  const UInt8 *result;
  int v5;
  const UInt8 *v6;
  float v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  CFArrayRef *v13;

  v3 = atomic_load((unsigned __int8 *)&qword_25472C9A8);
  if ((v3 & 1) == 0)
  {
    v13 = a1;
    v12 = __cxa_guard_acquire(&qword_25472C9A8);
    a1 = v13;
    if (v12)
    {
      qword_25472C9A0 = (uint64_t)L"'aeinouyxa";
      __cxa_guard_release(&qword_25472C9A8);
      a1 = v13;
    }
  }
  result = sub_20B951B88(a1, (int)a2);
  if (result)
  {
    v6 = result + 8;
    v5 = *((unsigned __int16 *)result + 4);
    if (*((_WORD *)result + 4))
    {
      v7 = *((float *)result + 1);
      v8 = -0.2;
      if (a2 >= 0x78)
        v8 = 0.0;
      if (a2 < 0x28)
        v8 = -0.65;
      while (1)
      {
        v9 = *((float *)result + 3);
        result = v6;
        if (v8 <= (float)(v9 - v7))
        {
          v10 = 0;
          while (*(unsigned __int16 *)(qword_25472C9A0 + v10) != v5)
          {
            v10 += 2;
            if (v10 == 16)
            {
              v11 = qword_25472C9A0 + 16;
              goto LABEL_14;
            }
          }
          v11 = qword_25472C9A0 + v10;
LABEL_14:
          if (v11 - qword_25472C9A0 != 16)
            return (const UInt8 *)1;
        }
        v6 = result + 8;
        v5 = *((unsigned __int16 *)result + 4);
        if (!*((_WORD *)result + 4))
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_20B8B21AC(const char *a1, uint64_t *a2, unint64_t a3)
{
  const char *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *i;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  void *v16;
  unsigned __int8 *v17;
  void *v18;
  _BYTE *v19;
  uint64_t *v21;
  void *__p[2];
  char v23;

  v5 = a1;
  v6 = strlen(a1);
  if (v6 < 1)
    return 0;
  v7 = 0;
  v8 = (unint64_t)&v5[v6];
  v9 = a3;
  while (1)
  {
    for (i = (unsigned __int8 *)v5; ; ++i)
    {
      v11 = *i;
      if (v11 != 9 && v11 != 32)
        break;
      ++v5;
    }
    if (v11 == 34)
    {
      v12 = ++i;
      v13 = i;
      if ((unint64_t)i < v8)
      {
        v13 = i;
        v12 = i;
        do
        {
          v14 = *v13;
          if (v14 == 34)
          {
            v15 = *++v13;
            if (v15 != 34)
              break;
          }
          *v12++ = v14;
          ++v13;
        }
        while ((unint64_t)v13 < v8);
      }
      v16 = memchr(v13, 44, v8 - (_QWORD)v13);
      v17 = v16 ? (unsigned __int8 *)v16 : (unsigned __int8 *)v8;
    }
    else
    {
      v18 = memchr(i, 44, v8 - (_QWORD)v5);
      v19 = v18 ? v18 : (_BYTE *)v8;
      v12 = &i[v19 - v5];
      v17 = v12;
    }
    if (v9 >= 2)
      *v12 = 0;
    sub_20B80BBD0(__p, (char *)i);
    v21 = a2;
    sub_20B8677B0(&v21, (__int128 *)__p);
    if (v23 < 0)
      operator delete(__p[0]);
    if (!--v9)
      break;
    ++v7;
    v5 = (const char *)(v17 + 1);
    if ((unint64_t)(v17 + 1) >= v8)
      return v7;
  }
  return a3;
}

void sub_20B8B2318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B8B2334(const __CFURL *a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25472CA18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25472CA18))
  {
    sub_20B8B23FC((uint64_t)&qword_25472C9B0, a1);
    __cxa_atexit((void (*)(void *))sub_20B8B23D0, &qword_25472C9B0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CA18);
  }
  return &qword_25472C9B0;
}

void sub_20B8B23B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CA18);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B23D0(uint64_t a1)
{
  sub_20B88B74C((const void **)(a1 + 8), 0);
  return a1;
}

uint64_t sub_20B8B23FC(uint64_t a1, const __CFURL *a2)
{
  const void **v3;
  CFStringRef v4;
  const __CFDictionary *Value;
  const void *v6;

  *(_QWORD *)a1 = 1616;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (const void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = &unk_20BA3B358;
  *(_QWORD *)(a1 + 24) = 193;
  *(_QWORD *)(a1 + 32) = &unk_20BA3B4DA;
  *(_QWORD *)(a1 + 40) = 1616;
  *(_OWORD *)(a1 + 48) = xmmword_20BA3B320;
  *(_OWORD *)(a1 + 64) = xmmword_20BA3B330;
  *(_OWORD *)(a1 + 80) = xmmword_20BA3B340;
  *(_QWORD *)(a1 + 96) = 0x64C0644061F061CLL;
  v4 = sub_20B8CF134(a2);
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)off_254728058, CFSTR("posmap-migration.plist"));
  v6 = CFDictionaryGetValue(Value, CFSTR("innsbruck"));
  sub_20B8A0168(v3, v6);
  if (v4)
    CFRelease(v4);
  return a1;
}

void sub_20B8B24D4(_Unwind_Exception *a1)
{
  const void **v1;

  sub_20B88B74C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B2500(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;

  v3 = *(unsigned __int16 *)(a1 + 72);
  if (v3 <= a2
    && ((v4 = *(unsigned __int16 *)(a1 + 74), v4 >= a3) ? (v5 = v3 >= a3, v6 = v3 == a3) : (v5 = 1, v6 = 0),
        v6 || !v5 ? (v7 = v4 >= a2) : (v7 = 0),
        v7))
  {
    return 0;
  }
  else
  {
    return sub_20B8B252C(a1, a2, a3);
  }
}

uint64_t sub_20B8B252C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(unsigned __int16 *)(a1 + 50);
  if (v3 != a2 || (v4 = 0, a3 != 1607) && a2 != a3)
  {
    v5 = a2 - 1607;
    if (a2 == 1607 && v3 == a3)
      return 0;
    v6 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a2 + 5]);
    if ((unint64_t)v6[1] >= 3)
    {
      v8 = 0;
      v9 = *v6;
      while (word_20BA424C8[v8] == *(_WORD *)(v9 + v8 * 2))
      {
        if (++v8 == 3)
        {
          if (*(unsigned __int16 *)(a1 + 84) <= a3 && *(unsigned __int16 *)(a1 + 86) >= a3)
            return 0;
          break;
        }
      }
    }
    if (v5 > 5 || (v4 = 1, ((1 << v5) & 0x25) == 0))
    {
      v10 = *(_QWORD *)(a1 + 40);
      if (v10 > a2)
      {
        v11 = *(_QWORD *)(a1 + 32);
        if ((*(_BYTE *)(v11 + a2) & 1) != 0 && v10 > a3)
          return (*(unsigned __int8 *)(v11 + a3) >> 1) & 1;
      }
      return 0;
    }
  }
  return v4;
}

uint64_t sub_20B8B2630(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t *v8;
  BOOL v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(unsigned __int16 *)(a1 + 50);
  if (v3 == a2 && v3 == a3)
    return 0;
  if (sub_20B8B2758(a1, a2))
  {
    v8 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a2 + 5]);
    if ((unint64_t)v8[1] >= 3)
    {
      v13 = 0;
      v14 = *v8;
      while (*(unsigned __int16 *)&aBBkb[v13] == *(unsigned __int16 *)(v14 + v13))
      {
        v13 += 2;
        if (v13 == 6)
          return 1;
      }
      v15 = 0;
      while (word_20BA424F2[v15] == *(_WORD *)(v14 + v15 * 2))
      {
        if (++v15 == 3)
          return 1;
      }
    }
  }
  v9 = sub_20B8B2860(a1, a2);
  result = 1;
  if (a2 != 1609 && !v9)
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (v11 > a2)
    {
      v12 = *(_QWORD *)(a1 + 32);
      if ((*(_BYTE *)(v12 + a2) & 1) != 0 && v11 > a3)
        return (*(unsigned __int8 *)(v12 + a3) >> 1) & 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_20B8B2758(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  if (*(unsigned __int16 *)(a1 + 76) <= a2 && *(unsigned __int16 *)(a1 + 78) >= a2)
    return 1;
  v2 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a2]);
  if (v2[1] == 3)
  {
    v3 = 0;
    v4 = *v2;
    while (word_20BA424D0[v3] == *(_WORD *)(v4 + v3 * 2))
    {
      if (++v3 == 3)
        return 1;
    }
  }
  v6 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a2 + 1]);
  v7 = (void *)v6[1];
  if (v7 == (void *)4)
  {
    v13 = 0;
    v14 = *v6;
    do
    {
      v15 = *(unsigned __int16 *)(v14 + v13 * 2);
      v16 = (unsigned __int16)word_20BA424E0[v13];
      result = v16 == v15;
    }
    while (v16 == v15 && v13++ != 3);
  }
  else if (v7 == (void *)3)
  {
    v8 = 0;
    v9 = *v6;
    do
    {
      v10 = *(unsigned __int16 *)(v9 + v8 * 2);
      v11 = (unsigned __int16)word_20BA424D8[v8];
      result = v11 == v10;
    }
    while (v11 == v10 && v8++ != 2);
  }
  else
  {
    return 0;
  }
  return result;
}

BOOL sub_20B8B2860(uint64_t a1, unsigned int a2)
{
  _UNKNOWN **v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _BOOL8 result;
  uint64_t v15;
  int v16;
  int v17;

  if (*(unsigned __int16 *)(a1 + 72) <= a2 && *(unsigned __int16 *)(a1 + 74) >= a2)
    return 1;
  v2 = &off_24C499C48 + 2 * word_20BA3BB2A[7 * a2];
  v3 = v2[1];
  if (v3 == (void *)3)
  {
    v5 = 0;
    while (word_20BA42500[v5] == *(_WORD *)((char *)*v2 + v5 * 2))
    {
      if (++v5 == 3)
        return 1;
    }
    v4 = 1;
    goto LABEL_13;
  }
  if (v3 == (void *)2 && *(_WORD *)*v2 == 21103 && *((unsigned __int16 *)*v2 + 1) == 35422)
    return 1;
  v4 = 0;
LABEL_13:
  v6 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a2 + 1]);
  v7 = (void *)v6[1];
  if (v7 == (void *)4)
  {
    v10 = 0;
    v11 = *v6;
    while (word_20BA42510[v10] == *(_WORD *)(v11 + v10 * 2))
    {
      if (++v10 == 4)
        return 1;
    }
  }
  else if (v7 == (void *)3)
  {
    v8 = 0;
    v9 = *v6;
    while (word_20BA42508[v8] == *(_WORD *)(v9 + v8 * 2))
    {
      if (++v8 == 3)
        return 1;
    }
  }
  if (!v4)
    return 0;
  v12 = 0;
  v13 = *v2;
  while (word_20BA4251A[v12] == v13[v12])
  {
    if (++v12 == 3)
      return 1;
  }
  v15 = 0;
  do
  {
    v16 = (unsigned __int16)v13[v15];
    v17 = (unsigned __int16)word_20BA42522[v15];
    result = v17 == v16;
  }
  while (v17 == v16 && v15++ != 2);
  return result;
}

uint64_t sub_20B8B2A00(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_20B8B2A18(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  void *p_p;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  void *v23[2];
  char v24;
  void *__p;
  uint64_t v26;
  char v27;
  void *v28;
  char v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  __int16 v36;
  char v37;

  v37 = 0;
  sub_20B827F10((uint64_t)&v32);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 44;
  sub_20B828F84(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_20B828F84(v10, (uint64_t)"\t", 1);
  sub_20B871648((uint64_t)v33, &__p);
  if (v27 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  sub_20B7F8B58((_QWORD *)(a1 + 8), (uint64_t)p_p);
  if (v27 < 0)
    operator delete(__p);
  v36 = 0;
  do
  {
    sub_20B8B2D88((uint64_t *)&__p, a1, a4, &v36);
    if (!__p)
      break;
    v31 = __p;
    (*(void (**)(uint64_t, void **, _QWORD, char *))(a5 + 16))(a5, &v31, v36, &v37);
    v12 = v31;
    v31 = 0;
    if (v12)
      (*(void (**)(void *))(*(_QWORD *)v12 + 16))(v12);
  }
  while (!v37);
  v13 = MEMORY[0x24BEDB848];
  v14 = MEMORY[0x24BEDB800];
  if (a2)
  {
    sub_20B827F10((uint64_t)&__p);
    v15 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v23[0]) = 44;
    sub_20B828F84(v15, (uint64_t)v23, 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_20B828F84(v16, (uint64_t)"\t", 1);
    sub_20B871648((uint64_t)&v26, v23);
    if (v24 >= 0)
      v17 = v23;
    else
      v17 = (void **)v23[0];
    sub_20B7F8B58((_QWORD *)(a1 + 8), (uint64_t)v17);
    if (v24 < 0)
      operator delete(v23[0]);
    do
    {
      sub_20B8B2D88((uint64_t *)v23, a1, a4, &v36);
      if (!v23[0])
        break;
      v22 = v23[0];
      (*(void (**)(uint64_t, void **, _QWORD, char *))(a5 + 16))(a5, &v22, v36, &v37);
      v18 = v22;
      v22 = 0;
      if (v18)
        (*(void (**)(void *))(*(_QWORD *)v18 + 16))(v18);
    }
    while (!v37);
    v19 = *(void **)v14;
    __p = v19;
    v20 = *(void **)(v14 + 24);
    *(void **)((char *)&__p + *((_QWORD *)v19 - 3)) = v20;
    v26 = v13 + 16;
    if (v29 < 0)
      operator delete(v28);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v30);
  }
  else
  {
    v19 = (void *)*MEMORY[0x24BEDB800];
    v20 = *(void **)(MEMORY[0x24BEDB800] + 24);
  }
  v32 = v19;
  *(_QWORD *)((char *)&v33[-1] + *((_QWORD *)v19 - 3)) = v20;
  v33[0] = v13 + 16;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD39C2C](&v35);
}

void sub_20B8B2CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20B83AB08((uint64_t)&a16);
  sub_20B83AB08((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20B8B2D88(uint64_t *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  void **v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  const char *v12;
  const char **v13;
  const char *v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  const char *v18;
  char **v19;
  const char *v20;
  char *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  UniChar *v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  UniChar *v33;
  unint64_t v34;
  void *__p;
  void *v36;
  char *v37;
  UniChar *v38;
  unint64_t v39;
  UniChar *v40;
  unint64_t v41;
  void *__dst[2];
  char v43;
  char *v44[2];
  char *v45[2];
  char *cStr[2];
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (sub_20B8068B4((uint64_t *)a2, a2 + 8))
  {
    sub_20B82E068(__dst, *(void **)(a2 + 32), *(unsigned int *)(a2 + 40));
    if (v43 >= 0)
      v8 = __dst;
    else
      v8 = (void **)__dst[0];
    strncpy(*(char **)(a2 + 56), (const char *)v8, 0x80uLL);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v9 = *(const char **)(a2 + 56);
    v10 = strlen(v9);
    v11 = 0;
    v12 = &v9[v10];
    v13 = (const char **)&v47;
    while (v9 != v12)
    {
      v14 = v9;
      while (*v14 != 9)
      {
        if (++v14 == v12)
          goto LABEL_15;
      }
      *v14 = 0;
      *v13++ = v9;
      ++v11;
      v9 = v14 + 1;
      if (v11 == 3)
        goto LABEL_16;
    }
    v9 = v12;
LABEL_15:
    *v12 = 0;
    *v13 = v9;
    if (v11 == 2)
    {
LABEL_16:
      *a4 = atoi(v48);
      strncpy(*(char **)(a2 + 64), v49, 0x80uLL);
      *(_OWORD *)v45 = 0u;
      *(_OWORD *)cStr = 0u;
      *(_OWORD *)v44 = 0u;
      v15 = *(const char **)(a2 + 64);
      v16 = strlen(v15);
      v17 = 0;
      v18 = &v15[v16];
      v19 = v44;
      while (v15 != v18)
      {
        v20 = v15;
        while (*v20 != 44)
        {
          if (++v20 == v18)
            goto LABEL_25;
        }
        *v20 = 0;
        *v19++ = (char *)v15;
        ++v17;
        v15 = v20 + 1;
        if (v17 == 6)
          goto LABEL_26;
      }
      v15 = v18;
LABEL_25:
      *v18 = 0;
      *v19 = (char *)v15;
      if (v17 == 5)
      {
LABEL_26:
        v21 = v44[0];
        v41 = 0;
        sub_20B8D054C(cStr[1], (CFIndex *)&v41, &v40);
        v39 = 0;
        sub_20B8D054C(v21, (CFIndex *)&v39, &v38);
        LOWORD(v21) = atoi(v44[1]);
        v22 = atoi(v45[0]);
        v23 = atoi(v45[1]);
        v24 = v41;
        v25 = v39;
        v26 = operator new(0x28uLL);
        *v26 = 0x7FFFFFFF00000000;
        v26[1] = 0;
        v26[2] = 0;
        *((_WORD *)v26 + 12) = v24;
        *((_WORD *)v26 + 13) = v25;
        *((_WORD *)v26 + 14) = v25;
        *((_WORD *)v26 + 15) = (_WORD)v21;
        *((_WORD *)v26 + 16) = v23;
        *((_WORD *)v26 + 17) = v22;
        *((_DWORD *)v26 + 9) = 131328;
        v36 = v26 + 5;
        v37 = (char *)(v26 + 5);
        __p = v26;
        v27 = operator new();
        v28 = v27;
        v29 = v40;
        if (v40)
          v30 = v41;
        else
          v30 = 0;
        v31 = *(void **)a3;
        v32 = *(_QWORD *)(a3 + 8);
        v33 = v38;
        if (v38)
          v34 = v39;
        else
          v34 = 0;
        sub_20B916250(v27, v40, v30, v31, v32, v38, v34, 0x7FFFFFFF, 0, 0, (uint64_t)&__p, 67, 2, 0);
        *a1 = v28;
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }
        if (v33)
          MEMORY[0x20BD39C80](v33, 0x1000C80BDFB0063);
        if (v29)
          MEMORY[0x20BD39C80](v29, 0x1000C80BDFB0063);
        goto LABEL_39;
      }
    }
    *a1 = 0;
LABEL_39:
    if (v43 < 0)
      operator delete(__dst[0]);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_20B8B30C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _QWORD *v25;
  uint64_t v26;

  MEMORY[0x20BD39CB0](v26, 0x10F3C4074548AAFLL);
  if (__p)
    operator delete(__p);
  if (a16)
    MEMORY[0x20BD39C80](a16, 0x1000C80BDFB0063);
  if (a18)
    MEMORY[0x20BD39C80](a18, 0x1000C80BDFB0063);
  if (a25 < 0)
    operator delete(a20);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *v25 = 0;
    __cxa_end_catch();
    JUMPOUT(0x20B8B308CLL);
  }
  _Unwind_Resume(a1);
}

void sub_20B8B31AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _WORD *v4;
  _WORD *v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_WORD **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *(_WORD **)a1;
    v7 = (uint64_t)v4 - *(_QWORD *)a1;
    if (v7 <= -3)
      sub_20B80CDD8();
    v8 = v7 >> 1;
    v9 = v3 - (_QWORD)v6;
    if (v9 <= (v7 >> 1) + 1)
      v10 = v8 + 1;
    else
      v10 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)sub_20B80FD48(v2, v11);
      v6 = *(_WORD **)a1;
      v4 = *(_WORD **)(a1 + 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[2 * v8];
    v14 = &v12[2 * v11];
    *(_WORD *)v13 = 32;
    v5 = v13 + 2;
    while (v4 != v6)
    {
      v15 = *--v4;
      *((_WORD *)v13 - 1) = v15;
      v13 -= 2;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v4 = 32;
    v5 = v4 + 1;
  }
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v5;
  v17 = *(_QWORD *)(a1 + 32);
  if (v17 >= v16)
  {
    v19 = *(_QWORD *)(a1 + 24);
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v19) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0x666666666666666)
      sub_20B8821D4();
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v19) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x333333333333333)
      v23 = 0x666666666666666;
    else
      v23 = v21;
    if (v23)
      v24 = (char *)sub_20B882310(a1 + 40, v23);
    else
      v24 = 0;
    v25 = &v24[40 * v20];
    v26 = &v24[40 * v23];
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *((_DWORD *)v25 + 6) = 65537;
    *((_WORD *)v25 + 14) = 1;
    *(_QWORD *)(v25 + 30) = 0;
    *((_WORD *)v25 + 19) = 0;
    v18 = v25 + 40;
    v28 = *(char **)(a1 + 24);
    v27 = *(char **)(a1 + 32);
    if (v27 != v28)
    {
      do
      {
        v29 = *(_OWORD *)(v27 - 40);
        v30 = *(_OWORD *)(v27 - 24);
        *((_QWORD *)v25 - 1) = *((_QWORD *)v27 - 1);
        *(_OWORD *)(v25 - 24) = v30;
        *(_OWORD *)(v25 - 40) = v29;
        v25 -= 40;
        v27 -= 40;
      }
      while (v27 != v28);
      v27 = *(char **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v26;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_DWORD *)(v17 + 24) = 65537;
    *(_WORD *)(v17 + 28) = 1;
    *(_QWORD *)(v17 + 30) = 0;
    v18 = (char *)(v17 + 40);
    *(_WORD *)(v17 + 38) = 0;
  }
  *(_QWORD *)(a1 + 32) = v18;
}

void sub_20B8B33B4(uint64_t a1)
{
  NSObject *v2;
  CFStringRef v3;
  NSObject *v4;
  NSObject *v5;
  unint64_t v6;
  uint8_t buf[4];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(4u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = CFStringCreateWithCharacters(0, *(const UniChar **)a1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1);
    v4 = sub_20B9A7C5C(4u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v8 = (unint64_t)v3;
      _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "History: [%@]", buf, 0xCu);
    }
    v5 = sub_20B9A7C5C(4u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
      *(_DWORD *)buf = 134217984;
      v8 = v6;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "History: [%zu words]", buf, 0xCu);
      if (!v3)
        return;
    }
    else if (!v3)
    {
      return;
    }
    CFRelease(v3);
  }
}

void sub_20B8B3504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B8B3530(char *result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v3 = (uint64_t)result;
    v4 = *(char *)(a2 + 55);
    v5 = v4 < 0;
    if (v4 >= 0)
      v6 = (_WORD *)(a2 + 32);
    else
      v6 = *(_WORD **)(a2 + 32);
    v7 = *(unsigned __int8 *)(a2 + 55);
    if (v5)
      v7 = *(_QWORD *)(a2 + 40);
    sub_20B8B17F4(v6, &v6[v7], v3);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
    return sub_20B8B35B4((char *)(v3 + 24), *(char **)v8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3));
  }
  return result;
}

char *sub_20B8B35B4(char *result, char *a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    if (a3)
    {
      v5 = (uint64_t)result;
      sub_20B8B3708((void **)result, a3 - 0x3333333333333333 * ((uint64_t)(*((_QWORD *)result + 1) - *(_QWORD *)result) >> 3));
      return sub_20B8B37E8(v5, *(_QWORD *)(v5 + 8), a2, &a2[40 * a3], a3);
    }
  }
  return result;
}

void sub_20B8B362C(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  void *v8;
  const char *v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  void *v13;

  if (a2)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
    v4 = *(const __CFArray **)(a2 + 16);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          v8 = (void *)sub_20B96AAF4(a2, i);
          v11 = (const void *)objc_msgSend_rawCandidate(v8, v9, v10);
          if (v11
            && (v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
          {
            v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C378, 0);
          }
          else
          {
            v13 = 0;
          }
          sub_20B8B3530((char *)a1, (uint64_t)v13);
        }
      }
    }
    sub_20B8B33B4(a1);
  }
}

void sub_20B8B3708(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_20B8821D4();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 40;
    v6 = (char *)sub_20B882310(v3, a2);
    v7 = &v6[40 * v5];
    v9 = &v6[40 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 40);
        v14 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 40) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *sub_20B8B37E8(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0x666666666666666)
      sub_20B8821D4();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x333333333333333)
      v18 = 0x666666666666666;
    else
      v18 = v17;
    v39 = v9;
    if (v18)
      v19 = (char *)sub_20B882310(v9, v18);
    else
      v19 = 0;
    v29 = &v19[40 * v15];
    __p = v19;
    v36 = v29;
    v38 = &v19[40 * v18];
    v30 = &v29[40 * a5];
    v31 = 40 * a5;
    do
    {
      v32 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      *((_QWORD *)v29 + 4) = *((_QWORD *)v7 + 4);
      *(_OWORD *)v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 40;
      v7 += 40;
      v31 -= 40;
    }
    while (v31);
    v37 = v30;
    v5 = (char *)sub_20B8B3A88((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36)
      v37 = &v36[(v37 - v36 - 40) % 0x28uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    v21 = &__src[40 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[40 * a5];
    v25 = &v23[-40 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        *((_QWORD *)v26 + 4) = *((_QWORD *)v25 + 4);
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v25 += 40;
        v26 += 40;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[40 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_20B8B3A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20B8B3A88(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  void *v16;
  void *v17;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 40);
      v11 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 40);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v11;
      *(_OWORD *)(v9 - 40) = v10;
      v8 -= 40;
      v9 -= 40;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v12 = a1[1];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = v12 - __src;
  if (v12 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v12 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v13 + v14;
  v15 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v15;
  v16 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v16;
  v17 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_20B8B3B6C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1[1];
  v5 = (char **)(a1 + 1);
  v6 = a1[2] - v4;
  v7 = a1[5];
  if (v7 >= v6 >> 4)
  {
LABEL_5:
    if (a1[6] <= a2)
      v11 = a2;
    else
      v11 = a1[6];
    v12 = operator new[]();
    v13 = a1[3];
    v14 = (unint64_t *)a1[2];
    if ((unint64_t)v14 >= v13)
    {
      v16 = ((char *)v14 - *v5) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        sub_20B80CDD8();
      v18 = v13 - (_QWORD)*v5;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)sub_20B829AD0((uint64_t)(a1 + 3), v19);
      else
        v20 = 0;
      v22 = &v20[16 * v16];
      v23 = &v20[16 * v19];
      *(_QWORD *)v22 = v11;
      *((_QWORD *)v22 + 1) = v12;
      v15 = v22 + 16;
      v25 = (char *)a1[1];
      v24 = (char *)a1[2];
      if (v24 != v25)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v24 - 1);
          v22 -= 16;
          v24 -= 16;
        }
        while (v24 != v25);
        v24 = *v5;
      }
      a1[1] = v22;
      a1[2] = v15;
      a1[3] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = v11;
      v14[1] = v12;
      v15 = v14 + 2;
    }
    a1[2] = v15;
    v26 = a1[1];
    v27 = (((uint64_t)v15 - v26) >> 4) - 1;
    a1[4] += a2;
    a1[5] = v27;
    return *(_QWORD *)(v26 + 16 * v27 + 8);
  }
  else
  {
    v8 = v6 >> 4;
    v9 = a1[4];
    v10 = (_QWORD *)(v4 + 16 * v7 + 8);
    while (v9 + a2 >= *(v10 - 1))
    {
      v9 = 0;
      ++v7;
      a1[4] = 0;
      a1[5] = v7;
      v10 += 2;
      if (v8 == v7)
        goto LABEL_5;
    }
    result = *v10 + v9;
    a1[4] = v9 + a2;
  }
  return result;
}

uint64_t sub_20B8B3D08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  char *v4;
  char *v5;
  char *v6;
  char v7;
  char __s;
  _BYTE v11[71];

  *(_QWORD *)&v11[63] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_6;
  v2 = 0;
  do
  {
    v11[v2++ - 1] = (a2 % 0xA) | 0x30;
    v3 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v3);
  if (v2)
  {
    v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    v4 = v11;
    __s = 48;
  }
  *v4 = 0;
  v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    v6 = v11;
    do
    {
      v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return sub_20B8BB040(a1, &__s);
}

_QWORD *sub_20B8B3DF8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B812928(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20B8B3E50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8B3E70(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &unk_24C467290;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (char *)a1[1];
  v3 = (char *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (*(_QWORD *)&v2[16 * v5 + 8])
    {
      MEMORY[0x20BD39C80](*(_QWORD *)&v2[16 * v5 + 8], 0x1000C8077774924);
      v5 = a1[5];
      v2 = (char *)a1[1];
      v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B8B3F0C(_QWORD *a1)
{
  sub_20B8B3E70(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B8B3F30(uint64_t a1, char *a2, char *a3)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  _BOOL8 result;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = sub_20B8B3FAC(a2);
  v6 = sub_20B8B3FAC(a3);
  if (!strcmp(v5, v6))
    return 1;
  v7 = MEMORY[0x20BD3A0C4](v6, v5);
  result = v7 != -1;
  if (v7 == -1)
    v7 = 0;
  *(_QWORD *)(a1 + 8) = v7;
  return result;
}

const char *sub_20B8B3FAC(char *a1)
{
  unsigned int v2;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;

  v2 = sub_20B8BC1E4(a1);
  if (v2 < 6)
    return off_24C49B9C8[v2];
  v4 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"charset ", 8);
  v5 = strlen(a1);
  v6 = sub_20B828F84(v4, (uint64_t)a1, v5);
  sub_20B828F84(v6, (uint64_t)" is not defined, use EUC-JP", 27);
  return "EUC-JP";
}

uint64_t sub_20B8B4030(uint64_t a1, std::string *a2)
{
  std::string::size_type size;
  _BOOL8 v5;
  int64_t v6;
  std::string *v7;
  std::string *v8;
  std::string *v10;
  std::string *v11;
  std::string v12;
  uint64_t v13;
  std::string::size_type v14;

  if (!*(_QWORD *)(a1 + 8))
    return 1;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v6 = 4 * size;
  v13 = 4 * size;
  v14 = size;
  memset(&v12, 0, sizeof(v12));
  std::string::reserve(&v12, 4 * size);
  v7 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v11 = v7;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v12;
  else
    v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  v10 = v8;
  if (v6 >= 1)
    bzero(v8, v6);
  MEMORY[0x20BD3A0AC](*(_QWORD *)(a1 + 8), 0, &v14, 0, &v13);
  while (1)
  {
    v5 = v14 == 0;
    if (!v14)
      break;
    if (MEMORY[0x20BD3A0AC](*(_QWORD *)(a1 + 8), &v11, &v14, &v10, &v13) == -1)
      goto LABEL_18;
  }
  sub_20B8A7360(a2, (const std::string::value_type *)v8, v6 - v13);
LABEL_18:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20B8B415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8B4180(_QWORD *a1)
{
  *a1 = &off_24C4674A0;
  if (a1[1])
    MEMORY[0x20BD3A0B8]();
  return a1;
}

void sub_20B8B41C0(_QWORD *a1)
{
  sub_20B8B4180(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8B41E4(_QWORD *a1, _BYTE *a2, __CFString *a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v12;
  uint64_t v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  BOOL v18;
  uint64_t v19;

  v12 = a1[16];
  if (v12 < CFArrayGetCount(*(CFArrayRef *)(a1[1] + 32)) && sub_20B8B4318((uint64_t)a1))
  {
    if ((a2[32] & 0x10) == 0)
      return sub_20B974770(a1[14], a3, 0, 0, a6);
    v15 = (__CFString *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, a4, a5);
    v16 = (__CFString *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a4, a5);
    v17 = v16;
    if (v15)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (v18)
    {
      v19 = 0;
      v14 = 0;
      if (!v15)
        goto LABEL_14;
    }
    else
    {
      v19 = sub_20B974770(a1[14], a3, v15, v16, a6);
    }
    CFRelease(v15);
    v14 = v19;
LABEL_14:
    if (v17)
      CFRelease(v17);
    return v14;
  }
  return 0;
}

BOOL sub_20B8B4318(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v1 = *(_QWORD **)(a1 + 72);
  if (v1 == *(_QWORD **)(a1 + 80))
    return 0;
  v3 = *v1;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v1 + 72))(*v1) == 5)
    return *(_BYTE *)(a1 + 144) != 0;
  else
    return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3) & 0x100) == 0;
}

uint64_t sub_20B8B438C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = a2;
  return result;
}

unint64_t sub_20B8B4394(_QWORD *a1)
{
  unint64_t v2;
  unint64_t result;

  v2 = a1[16];
  result = CFArrayGetCount(*(CFArrayRef *)(a1[1] + 32));
  if (v2 < result)
    a1[17] = (uint64_t)(a1[7] - a1[6]) >> 2;
  return result;
}

BOOL sub_20B8B43D8(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[16];
  return v2 < CFArrayGetCount(*(CFArrayRef *)(a1[1] + 32))
      || (unint64_t)(((uint64_t)(a1[7] - a1[6]) >> 2) - a1[17]) < a1[15];
}

void sub_20B8B4438(uint64_t a1)
{
  sub_20B9D8644(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B8B445C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48);
}

void sub_20B8B446C(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = a1 + 32;
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 7) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = v3;
  v5 = (void **)(a1 + 56);
  v6 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(double *)(a1 + 16) = a3;
  if (a2)
  {
    v7 = a2;
    v46 = a1 + 72;
    do
    {
      v9 = *v7;
      if ((*(_DWORD *)(*v7 + 8) - 1) >= 2)
      {
        v10 = *(_QWORD **)(v9 + 16);
        v11 = (_QWORD *)*v10;
        if (*v10)
        {
          v45 = *v7;
          v12 = v11[1] - 1;
          if (v12 >= 0)
          {
            v13 = v11[2];
            v14 = v11[4];
            do
            {
              sub_20B8B473C(v4, *(char **)(a1 + 32), (char *)(v13 + 2 * v12));
              v15 = *(unsigned __int8 *)(v14 + 4 * v12 + 1);
              v17 = *(char **)(a1 + 64);
              v16 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v17 >= v16)
              {
                v18 = (char *)*v5;
                v19 = (v17 - (_BYTE *)*v5) >> 3;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 61)
                  goto LABEL_54;
                v21 = v16 - (_QWORD)v18;
                if (v21 >> 2 > v20)
                  v20 = v21 >> 2;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                  v22 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                {
                  v23 = (char *)sub_20B800BE8(v46, v22);
                  v18 = *(char **)(a1 + 56);
                  v17 = *(char **)(a1 + 64);
                }
                else
                {
                  v23 = 0;
                }
                v24 = &v23[8 * v19];
                *(_QWORD *)v24 = v15;
                v6 = v24 + 8;
                while (v17 != v18)
                {
                  v25 = *((_QWORD *)v17 - 1);
                  v17 -= 8;
                  *((_QWORD *)v24 - 1) = v25;
                  v24 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v24;
                *(_QWORD *)(a1 + 64) = v6;
                *(_QWORD *)(a1 + 72) = &v23[8 * v22];
                if (v18)
                  operator delete(v18);
              }
              else
              {
                *(_QWORD *)v17 = v15;
                v6 = v17 + 8;
              }
              *(_QWORD *)(a1 + 64) = v6;
            }
            while (v12-- > 0);
          }
          v27 = v11[5];
          if ((v27 & 1) == 0)
            *(_BYTE *)(a1 + 9) = 1;
          v9 = v45;
          if ((v27 & 0x10) != 0)
            *(_BYTE *)(a1 + 8) = 1;
        }
        else
        {
          sub_20B8B473C(v4, *(char **)(a1 + 32), byte_20BA4376C);
          v28 = v10[2];
          v30 = *(char **)(a1 + 64);
          v29 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v30 >= v29)
          {
            v31 = (char *)*v5;
            v32 = (v30 - (_BYTE *)*v5) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
LABEL_54:
              sub_20B80CDD8();
            v34 = v29 - (_QWORD)v31;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_20B800BE8(v46, v35);
              v31 = *(char **)(a1 + 56);
              v30 = *(char **)(a1 + 64);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[8 * v32];
            *(_QWORD *)v37 = v28;
            v6 = v37 + 8;
            while (v30 != v31)
            {
              v38 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            *(_QWORD *)(a1 + 56) = v37;
            *(_QWORD *)(a1 + 64) = v6;
            *(_QWORD *)(a1 + 72) = &v36[8 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v30 = v28;
            v6 = v30 + 8;
          }
          *(_QWORD *)(a1 + 64) = v6;
          *(_BYTE *)(a1 + 10) = 1;
        }
        *(_QWORD *)(a1 + 24) = v9;
        ++*(_QWORD *)a1;
      }
      v7 = (_QWORD *)v7[1];
    }
    while (v7);
    v39 = *v5;
  }
  else
  {
    v39 = v6;
  }
  v40 = (char *)v6 - v39;
  if ((char *)v6 - v39 >= 9)
  {
    v41 = v40 >> 3;
    v42 = *(_QWORD *)&v39[(v40 & 0xFFFFFFFFFFFFFFF8) - 8];
    v43 = v39 - 16;
    do
    {
      v42 += *(_QWORD *)&v43[8 * v41];
      *(_QWORD *)&v43[8 * v41] = v42;
      v44 = v41 - 2;
      --v41;
    }
    while (v44 > 0);
  }
}

char *sub_20B8B473C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _WORD *v11;
  __int16 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void *__p;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = (uint64_t)&v6[-*(_QWORD *)a1];
    if (v14 <= -3)
      sub_20B80CDD8();
    v15 = __src - v13;
    v16 = (__src - v13) >> 1;
    v17 = v14 >> 1;
    v18 = v7 - (_QWORD)v13;
    if (v18 <= v17 + 1)
      v19 = v17 + 1;
    else
      v19 = v18;
    if (v18 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v32 = a1 + 16;
    if (v20)
      v21 = (char *)sub_20B80FD48(a1 + 16, v20);
    else
      v21 = 0;
    v22 = &v21[2 * v16];
    __p = v21;
    v29 = v22;
    v30 = v22;
    v31 = &v21[2 * v20];
    if (v16 == v20)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v24 = 1;
        else
          v24 = v4 - v13;
        v25 = (char *)sub_20B80FD48(v8, v24);
        v22 = &v25[2 * (v24 >> 2)];
        __p = v25;
        v29 = v22;
        v31 = &v25[2 * v26];
        if (v21)
          operator delete(v21);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v22 -= v23 & 0xFFFFFFFFFFFFFFFELL;
        v29 = v22;
      }
    }
    *(_WORD *)v22 = *(_WORD *)v3;
    v30 = v22 + 2;
    v4 = sub_20B87D804((void **)a1, (uint64_t)&__p, v4);
    if (v30 != v29)
      v30 += (v29 - v30 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_WORD *)__src = *(_WORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 2;
  }
  else
  {
    v9 = __src + 2;
    v10 = v6 - 2;
    v11 = *(_WORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_WORD *)v10;
      v10 += 2;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-2 * ((v6 - v9) >> 1)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 2 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_WORD *)v4 = *(_WORD *)v3;
  }
  return v4;
}

void sub_20B8B493C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8B4974(_QWORD *result, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  _QWORD *v23;

  v3 = (char **)result;
  v4 = result[2];
  v5 = result[1];
  if (v5 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 4);
    v9 = v8 + 1;
    if (v8 + 1 > 0x555555555555555)
      sub_20B80CDD8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *result) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    v23 = result + 2;
    if (v9 > 0x555555555555555)
      sub_20B800BC0();
    v11 = 3 * v9;
    v12 = (char *)operator new(48 * v9);
    v13 = &v12[48 * v8];
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v13 = *(_OWORD *)a2;
    *((_OWORD *)v13 + 1) = v14;
    *((_QWORD *)v13 + 4) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *((_QWORD *)v13 + 5) = *(_QWORD *)(a2 + 40);
    v7 = v13 + 48;
    v15 = *v3;
    v16 = (unint64_t)v3[1];
    if ((char *)v16 == *v3)
    {
      v18 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        *((_OWORD *)v13 - 3) = *(_OWORD *)(v16 - 48);
        v17 = *(_OWORD *)(v16 - 32);
        *((_QWORD *)v13 - 2) = *(_QWORD *)(v16 - 16);
        *((_OWORD *)v13 - 2) = v17;
        *(_QWORD *)(v16 - 24) = 0;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 - 32) = 0;
        *((_QWORD *)v13 - 1) = *(_QWORD *)(v16 - 8);
        v13 -= 48;
        v16 -= 48;
      }
      while ((char *)v16 != v15);
      v18 = *(int64x2_t *)v3;
    }
    *v3 = v13;
    v3[1] = v7;
    v21 = v18;
    v19 = v3[2];
    v3[2] = &v12[16 * v11];
    v22 = v19;
    v20 = v18.i64[0];
    result = (_QWORD *)sub_20B8B6698((uint64_t)&v20);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
    v7 = (char *)(v5 + 48);
  }
  v3[1] = v7;
  return result;
}

uint64_t sub_20B8B4B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char **a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = off_24C460C88;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)(a8 + 24) = 0;
  *(_BYTE *)(a8 + 32) = 0;
  return sub_20B8B4B90(a1, a8, a2, a3, a4, a5, a6, a7);
}

void sub_20B8B4B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  *v2 = v4;
  sub_20B8B66F8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B4B90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, char **a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  UniChar *v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  const __CFAllocator *v19;
  const __CFAllocator *v20;
  CFStringRef v21;
  CFStringRef v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8x8_t v29;
  _QWORD *v30;
  _QWORD *i;
  unint64_t v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *p_p;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  int64x2_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  int v68;
  int v70;
  __int16 v71;
  char *v72;
  _WORD *v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  char *v78;
  unint64_t v79;
  char v80;
  size_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  char **v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  int64x2_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  __int16 *v118;
  __int16 v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _WORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  __int128 v138;
  int64x2_t v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t j;
  void **v146;
  _WORD *v147;
  uint64_t v148;
  int v149;
  char *v150;
  CFIndex v151;
  uint64_t v152;
  void **v153;
  int v154;
  char *v155;
  int64_t v156;
  __int16 v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _WORD *v167;
  char *v168;
  uint64_t v169;
  __int16 *v170;
  uint64_t v171;
  int v172;
  char *v173;
  int64_t v174;
  __int16 v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  _WORD *v179;
  __int16 *v180;
  int v181;
  BOOL v182;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  int v187;
  char *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _WORD *v193;
  _WORD *p_dst;
  char *v195;
  int64_t v196;
  __int16 v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  _QWORD *v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint8x8_t v213;
  _QWORD *v214;
  _QWORD *k;
  unint64_t v216;
  _QWORD *v217;
  float v218;
  float v219;
  _BOOL8 v220;
  unint64_t v221;
  unint64_t v222;
  size_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  void **v228;
  _QWORD *v229;
  int v230;
  _QWORD *v231;
  char *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  char v241;
  int v242;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v248;
  UniChar *v249;
  unint64_t v251;
  unint64_t v252;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  int64x2_t v257;
  _QWORD v258[2];
  void *v259[2];
  unsigned __int8 v260;
  unint64_t v261;
  __int128 v262;
  __int128 v263;
  int v264;
  UniChar *v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  float v269;
  void *__p;
  unint64_t v271;
  unsigned __int8 v272;
  void *__dst;
  unint64_t v274;
  unsigned __int8 v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  __int128 v280;
  char *v281;
  _BYTE buf[40];
  unint64_t v283;
  _QWORD v284[3];
  unint64_t v285;
  _QWORD *v286;
  uint64_t v287;

  v287 = *MEMORY[0x24BDAC8D0];
  v265 = (UniChar *)a3;
  v266 = a4;
  v11 = a2 + 8;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  sub_20B9B5A9C(v11, v12 + a4);
  v262 = 0u;
  v263 = 0u;
  v264 = 1065353216;
  v261 = 0;
  sub_20B87B938((uint64_t *)&v265, &v261, (uint64_t)&v262, 0, v259);
  v13 = v260;
  if ((v260 & 0x80u) == 0)
    v14 = v259;
  else
    v14 = (void **)v259[0];
  if ((v260 & 0x80u) != 0)
    v13 = (unint64_t)v259[1];
  if (!v14)
    v13 = 0;
  v248 = v13;
  v249 = (UniChar *)v14;
  v15 = v265;
  v16 = v266;
  v17 = v261;
  v18 = sub_20B9A7C5C(5u);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v20 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    v21 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v15, v16, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    v284[0] = v21;
    v22 = CFStringCreateWithCharactersNoCopy(v19, v249, v248, v20);
    *(_QWORD *)&v267 = v22;
    v23 = sub_20B9A7C5C(5u);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v22;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a5 & 0x1E;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a5 & 1;
      _os_log_debug_impl(&dword_20B7F7000, v23, OS_LOG_TYPE_DEBUG, "[TSC::generateReplacements] string:%@ converted:%@ non-geometric:%d, endingIncompleteRomaji: %d", buf, 0x22u);
      if (!v22)
      {
LABEL_12:
        if (v21)
          CFRelease(v21);
        goto LABEL_14;
      }
    }
    else if (!v22)
    {
      goto LABEL_12;
    }
    CFRelease(v22);
    goto LABEL_12;
  }
LABEL_14:
  sub_20B877ED0(&__dst, v15, v16);
  v245 = v12;
  v246 = a2;
  v244 = a8;
  sub_20B877ED0(&__p, v249, v248);
  v255 = v17;
  v257 = 0uLL;
  v258[0] = 0;
  v267 = 0u;
  v268 = 0u;
  v269 = 1.0;
  v24 = (_QWORD *)v263;
  if ((_QWORD)v263)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v28 = v24[2];
      v27 = v24[3];
      if (v26)
      {
        v29 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v17 = v24[3];
          if (v26 <= v27)
            v17 = v27 % v26;
        }
        else
        {
          v17 = v27 & (v26 - 1);
        }
        v30 = *(_QWORD **)(v267 + 8 * v17);
        if (v30)
        {
          for (i = (_QWORD *)*v30; i; i = (_QWORD *)*i)
          {
            v32 = i[1];
            if (v32 == v27)
            {
              if (i[2] == v27)
                goto LABEL_54;
            }
            else
            {
              if (v29.u32[0] > 1uLL)
              {
                if (v32 >= v26)
                  v32 %= v26;
              }
              else
              {
                v32 &= v26 - 1;
              }
              if (v32 != v17)
                break;
            }
          }
        }
      }
      v16 = (unint64_t)operator new(0x20uLL);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = v27;
      *(_QWORD *)(v16 + 16) = v27;
      *(_QWORD *)(v16 + 24) = v28;
      v33 = (float)(unint64_t)(v25 + 1);
      if (!v26 || (float)(v269 * (float)v26) < v33)
      {
        v34 = (v26 & (v26 - 1)) != 0;
        if (v26 < 3)
          v34 = 1;
        v35 = v34 | (2 * v26);
        v36 = vcvtps_u32_f32(v33 / v269);
        if (v35 <= v36)
          v37 = v36;
        else
          v37 = v35;
        sub_20B828960((uint64_t)&v267, v37);
        v26 = *((_QWORD *)&v267 + 1);
        if ((*((_QWORD *)&v267 + 1) & (*((_QWORD *)&v267 + 1) - 1)) != 0)
        {
          if (*((_QWORD *)&v267 + 1) <= v27)
            v17 = v27 % *((_QWORD *)&v267 + 1);
          else
            v17 = v27;
        }
        else
        {
          v17 = (*((_QWORD *)&v267 + 1) - 1) & v27;
        }
      }
      v38 = v267;
      v39 = *(unint64_t **)(v267 + 8 * v17);
      if (v39)
      {
        *(_QWORD *)v16 = *v39;
      }
      else
      {
        *(_QWORD *)v16 = v268;
        *(_QWORD *)&v268 = v16;
        *(_QWORD *)(v38 + 8 * v17) = &v268;
        if (!*(_QWORD *)v16)
          goto LABEL_53;
        v40 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v40 >= v26)
            v40 %= v26;
        }
        else
        {
          v40 &= v26 - 1;
        }
        v39 = (unint64_t *)(v267 + 8 * v40);
      }
      *v39 = v16;
LABEL_53:
      v25 = ++*((_QWORD *)&v268 + 1);
LABEL_54:
      v24 = (_QWORD *)*v24;
    }
    while (v24);
  }
  v277 = 1;
  v41 = v275;
  if ((v275 & 0x80u) != 0)
    v41 = v274;
  if (v41)
  {
    v42 = 0;
    v43 = 0;
    v16 = (unint64_t)&buf[16];
    do
    {
      v44 = sub_20B8B6C54(&v267, &v277);
      v45 = v44;
      if (v44)
      {
        if ((v272 & 0x80u) == 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        sub_20B877ED0(&v280, &p_p[2 * v42], v44[3] - v42);
        *(_QWORD *)buf = v43;
        *(_QWORD *)&buf[8] = v277 - v43;
        if (SHIBYTE(v281) < 0)
        {
          sub_20B88DD4C(&buf[16], (void *)v280, *((unint64_t *)&v280 + 1));
        }
        else
        {
          *(_OWORD *)&buf[16] = v280;
          *(_QWORD *)&buf[32] = v281;
        }
        v283 = 0;
        v47 = v257.u64[1];
        v48 = v258[0];
        if (v257.i64[1] >= v258[0])
        {
          v50 = v257.i64[0];
          v51 = 0xAAAAAAAAAAAAAAABLL * ((v257.i64[1] - v257.i64[0]) >> 4);
          v52 = v51 + 1;
          if (v51 + 1 > 0x555555555555555)
            sub_20B80CDD8();
          if (0x5555555555555556 * ((v258[0] - v257.i64[0]) >> 4) > v52)
            v52 = 0x5555555555555556 * ((v258[0] - v257.i64[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v258[0] - v257.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v53 = 0x555555555555555;
          else
            v53 = v52;
          v286 = v258;
          if (v53 > 0x555555555555555)
            sub_20B800BC0();
          v54 = (char *)operator new(48 * v53);
          v55 = &v54[16 * ((v257.i64[1] - v257.i64[0]) >> 4)];
          v56 = *(_OWORD *)&buf[16];
          *(_OWORD *)v55 = *(_OWORD *)buf;
          *((_OWORD *)v55 + 1) = v56;
          v57 = *(_QWORD *)&buf[32];
          memset(&buf[16], 0, 24);
          *((_QWORD *)v55 + 4) = v57;
          *((_QWORD *)v55 + 5) = 0;
          if (v47 == v50)
          {
            v60 = vdupq_n_s64(v47);
            v58 = &v54[48 * v51];
          }
          else
          {
            v58 = &v54[48 * v51];
            do
            {
              *((_OWORD *)v58 - 3) = *(_OWORD *)(v47 - 48);
              v59 = *(_OWORD *)(v47 - 32);
              *((_QWORD *)v58 - 2) = *(_QWORD *)(v47 - 16);
              *((_OWORD *)v58 - 2) = v59;
              *(_QWORD *)(v47 - 24) = 0;
              *(_QWORD *)(v47 - 16) = 0;
              *(_QWORD *)(v47 - 32) = 0;
              *((_QWORD *)v58 - 1) = *(_QWORD *)(v47 - 8);
              v58 -= 48;
              v47 -= 48;
            }
            while (v47 != v50);
            v60 = v257;
            v48 = v258[0];
          }
          v61 = v55 + 48;
          v257.i64[0] = (uint64_t)v58;
          *(int64x2_t *)&v284[1] = v60;
          v258[0] = &v54[48 * v53];
          v285 = v48;
          v284[0] = v60.i64[0];
          sub_20B8B6698((uint64_t)v284);
          v257.i64[1] = (uint64_t)v61;
          if ((buf[39] & 0x80000000) != 0)
            operator delete(*(void **)&buf[16]);
        }
        else
        {
          *(_OWORD *)v257.i64[1] = *(_OWORD *)buf;
          v49 = *(_OWORD *)&buf[16];
          *(_QWORD *)(v47 + 32) = *(_QWORD *)&buf[32];
          *(_OWORD *)(v47 + 16) = v49;
          memset(&buf[16], 0, 24);
          *(_QWORD *)(v47 + 40) = v283;
          v257.i64[1] = v47 + 48;
        }
        v43 = v277;
        v42 = v45[3];
        if (SHIBYTE(v281) < 0)
          operator delete((void *)v280);
      }
      v62 = ++v277;
      v63 = v275;
      if ((v275 & 0x80u) != 0)
        v63 = v274;
    }
    while (v62 <= v63);
  }
  v280 = 0uLL;
  v281 = 0;
  sub_20B87D570((void **)&v280, 3uLL);
  v64 = v272;
  if ((v272 & 0x80u) != 0)
    v64 = v271;
  v65 = v64 - v255;
  if ((a5 & 2) != 0)
    v66 = 0;
  else
    v66 = v64 - v255;
  if ((a5 & 1) == 0 || (v65 = v64, v66 <= v64))
  {
    v254 = v66;
    v251 = v65;
    do
    {
      if (v66 == v65)
        goto LABEL_108;
      v67 = (unsigned __int16 *)&__p;
      if ((v272 & 0x80u) != 0)
        v67 = (unsigned __int16 *)__p;
      v68 = v67[v66];
      if ((v68 & 0xFFFFFFDF) - 65 < 0x1A || v68 == 12435)
      {
        v70 = v67[v66];
        if (v70 == 12435)
          v71 = 110;
        else
          v71 = v70;
        v72 = (char *)*((_QWORD *)&v280 + 1);
        if (*((_QWORD *)&v280 + 1) >= (unint64_t)v281)
        {
          v112 = (char *)v280;
          v113 = *((_QWORD *)&v280 + 1) - v280;
          if ((uint64_t)(*((_QWORD *)&v280 + 1) - v280) <= -3)
            sub_20B80CDD8();
          v114 = v113 >> 1;
          if ((unint64_t)&v281[-v280] <= (v113 >> 1) + 1)
            v115 = v114 + 1;
          else
            v115 = (uint64_t)&v281[-v280];
          if ((unint64_t)&v281[-v280] >= 0x7FFFFFFFFFFFFFFELL)
            v116 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v116 = v115;
          if (v116)
          {
            v117 = (char *)sub_20B80FD48((uint64_t)&v281, v116);
            v72 = (char *)*((_QWORD *)&v280 + 1);
            v112 = (char *)v280;
          }
          else
          {
            v117 = 0;
          }
          v118 = (__int16 *)&v117[2 * v114];
          *v118 = v71;
          v73 = v118 + 1;
          while (v72 != v112)
          {
            v119 = *((_WORD *)v72 - 1);
            v72 -= 2;
            *--v118 = v119;
          }
          *(_QWORD *)&v280 = v118;
          *((_QWORD *)&v280 + 1) = v73;
          v281 = &v117[2 * v116];
          if (v112)
            operator delete(v112);
        }
        else
        {
          **((_WORD **)&v280 + 1) = v71;
          v73 = v72 + 2;
        }
        *((_QWORD *)&v280 + 1) = v73;
        ++v66;
      }
      else
      {
LABEL_108:
        if ((_QWORD)v280 == *((_QWORD *)&v280 + 1))
        {
          ++v66;
        }
        else
        {
          v74 = sub_20B87AF40();
          v75 = *((_QWORD *)&v280 + 1);
          v278 = 0;
          v279 = 0;
          v277 = 0;
          *(_QWORD *)buf = &v277;
          buf[8] = 0;
          v76 = *((_QWORD *)&v280 + 1) - v280;
          if (*((_QWORD *)&v280 + 1) != (_QWORD)v280)
          {
            if ((unint64_t)v76 >= 0xFFFFFFFFFFFFFFFLL)
              sub_20B80CDD8();
            v77 = v74;
            v252 = v66;
            v78 = (char *)operator new(16 * v76);
            v277 = (unint64_t)v78;
            v279 = &v78[32 * (v76 >> 1)];
            bzero(v78, 16 * v76);
            v79 = 0;
            v278 = &v78[16 * v76];
            do
            {
              v80 = 0;
              v81 = 6;
              v82 = 3;
              do
              {
                if (v79 + v82 <= (uint64_t)(*((_QWORD *)&v280 + 1) - v280) >> 1)
                {
                  sub_20B82E068(buf, (void *)(v280 + 2 * v79), v81);
                  v83 = sub_20B829B04(v77, buf);
                  if (v83)
                  {
                    v84 = v277;
                    v85 = v277 + 32 * v79;
                    if ((unsigned __int8 *)v85 != v83 + 40)
                    {
                      sub_20B8AD558(v85, *((std::string **)v83 + 5), *((__int128 **)v83 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v83 + 6) - *((_QWORD *)v83 + 5)) >> 3));
                      v84 = v277;
                    }
                    *(_QWORD *)(v84 + 32 * v79 + 24) = v82;
                    v80 = 1;
                  }
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (v83)
                    break;
                }
                --v82;
                v81 -= 2;
              }
              while (v81);
              if ((v80 & 1) != 0)
                v86 = *(_QWORD *)(v277 + 32 * v79 + 24);
              else
                v86 = 1;
              v79 += v86;
              v75 = v280;
            }
            while (v79 < (uint64_t)(*((_QWORD *)&v280 + 1) - v280) >> 1);
            v88 = v277;
            v87 = v278;
            if (v278 != (char *)v277)
            {
              v89 = 0;
              do
              {
                v90 = (char **)(v88 + 32 * v89);
                v91 = *v90;
                v92 = v90[1];
                if (*v90 != v92)
                {
                  v256 = v90[3];
                  v276 = v89 + v254;
                  if (v89 + v254)
                  {
                    v93 = sub_20B8B6C54(&v262, &v276)[3];
                    v91 = *v90;
                    v92 = v90[1];
                  }
                  else
                  {
                    v93 = 0;
                  }
                  while (v91 != v92)
                  {
                    if (v91[23] < 0)
                    {
                      v95 = *(char **)v91;
                      v94 = *((_QWORD *)v91 + 1);
                    }
                    else
                    {
                      v94 = v91[23];
                      v95 = v91;
                    }
                    v96 = v94 >> 1;
                    if (v95)
                      v97 = v96;
                    else
                      v97 = 0;
                    if (v97 <= 1)
                    {
                      *(_QWORD *)buf = v93;
                      *(_QWORD *)&buf[8] = v256;
                      sub_20B877ED0(&buf[16], v95, v97);
                      v283 = 0xBFF0000000000000;
                      v98 = v257.u64[1];
                      v16 = v258[0];
                      if (v257.i64[1] >= v258[0])
                      {
                        v100 = v257.i64[0];
                        v101 = 0xAAAAAAAAAAAAAAABLL * ((v257.i64[1] - v257.i64[0]) >> 4);
                        v102 = v101 + 1;
                        if (v101 + 1 > 0x555555555555555)
                          sub_20B80CDD8();
                        if (0x5555555555555556 * ((v258[0] - v257.i64[0]) >> 4) > v102)
                          v102 = 0x5555555555555556 * ((v258[0] - v257.i64[0]) >> 4);
                        if (0xAAAAAAAAAAAAAAABLL * ((v258[0] - v257.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                          v103 = 0x555555555555555;
                        else
                          v103 = v102;
                        v286 = v258;
                        if (v103 > 0x555555555555555)
                          sub_20B800BC0();
                        v104 = (char *)operator new(48 * v103);
                        v105 = &v104[16 * ((v257.i64[1] - v257.i64[0]) >> 4)];
                        v106 = *(_OWORD *)&buf[16];
                        *(_OWORD *)v105 = *(_OWORD *)buf;
                        *((_OWORD *)v105 + 1) = v106;
                        v107 = *(_QWORD *)&buf[32];
                        memset(&buf[16], 0, 24);
                        *((_QWORD *)v105 + 4) = v107;
                        *((_QWORD *)v105 + 5) = 0xBFF0000000000000;
                        if (v98 == v100)
                        {
                          v110 = vdupq_n_s64(v98);
                          v108 = &v104[48 * v101];
                        }
                        else
                        {
                          v108 = &v104[48 * v101];
                          do
                          {
                            *((_OWORD *)v108 - 3) = *(_OWORD *)(v98 - 48);
                            v109 = *(_OWORD *)(v98 - 32);
                            *((_QWORD *)v108 - 2) = *(_QWORD *)(v98 - 16);
                            *((_OWORD *)v108 - 2) = v109;
                            *(_QWORD *)(v98 - 24) = 0;
                            *(_QWORD *)(v98 - 16) = 0;
                            *(_QWORD *)(v98 - 32) = 0;
                            *((_QWORD *)v108 - 1) = *(_QWORD *)(v98 - 8);
                            v108 -= 48;
                            v98 -= 48;
                          }
                          while (v98 != v100);
                          v110 = v257;
                          v16 = v258[0];
                        }
                        v111 = v105 + 48;
                        v257.i64[0] = (uint64_t)v108;
                        *(int64x2_t *)&v284[1] = v110;
                        v258[0] = &v104[48 * v103];
                        v285 = v16;
                        v284[0] = v110.i64[0];
                        sub_20B8B6698((uint64_t)v284);
                        v257.i64[1] = (uint64_t)v111;
                        if ((buf[39] & 0x80000000) != 0)
                          operator delete(*(void **)&buf[16]);
                      }
                      else
                      {
                        *(_OWORD *)v257.i64[1] = *(_OWORD *)buf;
                        v99 = *(_OWORD *)&buf[16];
                        *(_QWORD *)(v98 + 32) = *(_QWORD *)&buf[32];
                        *(_OWORD *)(v98 + 16) = v99;
                        memset(&buf[16], 0, 24);
                        *(_QWORD *)(v98 + 40) = v283;
                        v257.i64[1] = v98 + 48;
                      }
                    }
                    v91 += 24;
                  }
                  v88 = v277;
                  v87 = v278;
                }
                ++v89;
              }
              while (v89 < (uint64_t)&v87[-v88] >> 5);
              v75 = v280;
            }
            v65 = v251;
            v66 = v252;
          }
          *((_QWORD *)&v280 + 1) = v75;
          ++v66;
          *(_QWORD *)buf = &v277;
          sub_20B83B494((void ***)buf);
        }
        v254 = v66;
      }
    }
    while (v66 <= v65);
  }
  if ((_QWORD)v280)
  {
    *((_QWORD *)&v280 + 1) = v280;
    operator delete((void *)v280);
  }
  if ((a5 & 4) != 0)
  {
    v120 = v272;
    if ((v272 & 0x80u) != 0)
      v120 = v271;
    if (v120)
    {
      v121 = 0;
      v122 = 0;
      v123 = 1;
      do
      {
        v124 = v122 + 1;
        *(_QWORD *)buf = v122 + 1;
        v125 = sub_20B8B6C54(&v262, (unint64_t *)buf);
        if (v125)
        {
          v126 = v125[3];
          if ((v123 & 1) != 0
            || ((v272 & 0x80u) == 0 ? (v127 = &__p) : (v127 = __p), (v127[v122] & 0xFFDFu) - 65 > 0x19))
          {
            v123 = 0;
          }
          else
          {
            v128 = v126 - v121;
            v16 = v257.u64[1];
            v129 = v258[0];
            if (v257.i64[1] >= v258[0])
            {
              v131 = v257.i64[0];
              v132 = 0xAAAAAAAAAAAAAAABLL * ((v257.i64[1] - v257.i64[0]) >> 4);
              v133 = v132 + 1;
              if (v132 + 1 > 0x555555555555555)
                sub_20B80CDD8();
              if (0x5555555555555556 * ((v258[0] - v257.i64[0]) >> 4) > v133)
                v133 = 0x5555555555555556 * ((v258[0] - v257.i64[0]) >> 4);
              if (0xAAAAAAAAAAAAAAABLL * ((v258[0] - v257.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                v134 = 0x555555555555555;
              else
                v134 = v133;
              *(_QWORD *)&buf[32] = v258;
              if (v134 > 0x555555555555555)
                sub_20B800BC0();
              v135 = (char *)operator new(48 * v134);
              v136 = &v135[16 * ((v257.i64[1] - v257.i64[0]) >> 4)];
              *(_QWORD *)v136 = v121;
              *((_QWORD *)v136 + 1) = v128;
              *((_QWORD *)v136 + 2) = 0;
              *((_QWORD *)v136 + 3) = 0;
              *((_QWORD *)v136 + 4) = 0;
              *((_QWORD *)v136 + 5) = 0xC000000000000000;
              if (v16 == v131)
              {
                v139 = vdupq_n_s64(v16);
                v137 = &v135[48 * v132];
              }
              else
              {
                v137 = &v135[48 * v132];
                do
                {
                  *((_OWORD *)v137 - 3) = *(_OWORD *)(v16 - 48);
                  v138 = *(_OWORD *)(v16 - 32);
                  *((_QWORD *)v137 - 2) = *(_QWORD *)(v16 - 16);
                  *((_OWORD *)v137 - 2) = v138;
                  *(_QWORD *)(v16 - 24) = 0;
                  *(_QWORD *)(v16 - 16) = 0;
                  *(_QWORD *)(v16 - 32) = 0;
                  *((_QWORD *)v137 - 1) = *(_QWORD *)(v16 - 8);
                  v137 -= 48;
                  v16 -= 48;
                }
                while (v16 != v131);
                v139 = v257;
                v129 = v258[0];
              }
              v130 = v136 + 48;
              v257.i64[0] = (uint64_t)v137;
              v257.i64[1] = (uint64_t)(v136 + 48);
              *(int64x2_t *)&buf[8] = v139;
              v258[0] = &v135[48 * v134];
              *(_QWORD *)&buf[24] = v129;
              *(_QWORD *)buf = v139.i64[0];
              sub_20B8B6698((uint64_t)buf);
            }
            else
            {
              *(_QWORD *)v257.i64[1] = v121;
              *(_QWORD *)(v16 + 8) = v128;
              *(_QWORD *)(v16 + 16) = 0;
              *(_QWORD *)(v16 + 24) = 0;
              v130 = (_QWORD *)(v16 + 48);
              *(_QWORD *)(v16 + 32) = 0;
              *(_QWORD *)(v16 + 40) = 0xC000000000000000;
            }
            v257.i64[1] = (uint64_t)v130;
            v123 = 1;
          }
        }
        else
        {
          v126 = v121;
        }
        v140 = v272;
        if ((v272 & 0x80u) != 0)
          v140 = v271;
        v121 = v126;
        v122 = v124;
      }
      while (v124 < v140);
    }
  }
  if ((a5 & 8) != 0)
  {
    v141 = v272;
    v142 = (v272 & 0x80u) != 0;
    v143 = v271;
    v144 = (v272 & 0x80u) == 0 ? v272 : v271;
    if (v144 >= 2)
    {
      for (j = 1; j < v158; ++j)
      {
        v146 = (void **)__p;
        if (v142)
          v147 = __p;
        else
          v147 = &__p;
        if (v147[j - 1] == 12435)
        {
          v148 = 0;
          v149 = (unsigned __int16)v147[j];
          while (*(unsigned __int16 *)&aB0d0f0h0j0[v148] != v149)
          {
            v148 += 2;
            if (v148 == 10)
            {
              v150 = "";
              goto LABEL_230;
            }
          }
          v150 = &aB0d0f0h0j0[v148];
LABEL_230:
          if (v150 - "B0D0F0H0J0" != 10)
          {
            if (j == 1)
            {
              v151 = 0;
            }
            else
            {
              *(_QWORD *)buf = j - 1;
              v151 = sub_20B8B6C54(&v262, (unint64_t *)buf)[3];
              LOBYTE(v141) = v272;
              v146 = (void **)__p;
            }
            v152 = 0;
            strcpy(buf, "n");
            if ((v141 & 0x80u) == 0)
              v153 = &__p;
            else
              v153 = v146;
            v154 = *((unsigned __int16 *)v153 + j);
            while (*(unsigned __int16 *)&aB0d0f0h0j0[v152] != v154)
            {
              v152 += 2;
              if (v152 == 10)
              {
                v155 = "";
                goto LABEL_242;
              }
            }
            v155 = &aB0d0f0h0j0[v152];
LABEL_242:
            v156 = v155 - "B0D0F0H0J0";
            if (v156 == 10)
              v157 = 0;
            else
              v157 = *(__int16 *)((char *)L"aiueo" + v156);
            *(_WORD *)&buf[2] = v157;
            sub_20B8B6560(&v257, v151, (UniChar *)buf, 2, 2, -0.5);
            v141 = v272;
            v143 = v271;
          }
        }
        v142 = (v141 & 0x80u) != 0;
        if ((v141 & 0x80u) == 0)
          v158 = v141;
        else
          v158 = v143;
      }
    }
  }
  if ((a5 & 0x10) != 0)
  {
    v159 = v272;
    if ((v272 & 0x80u) != 0)
      v159 = v271;
    if (v159)
    {
      v160 = 0;
      v16 = (unint64_t)"";
      do
      {
        v161 = v160++;
        *(_QWORD *)buf = v160;
        v162 = sub_20B8B6C54(&v262, (unint64_t *)buf);
        v163 = v162;
        if (v162)
        {
          v164 = v272;
          if (v161)
          {
            v165 = 0;
            v166 = v161 - 1;
            if ((v272 & 0x80u) == 0)
              v167 = &__p;
            else
              v167 = __p;
            while (*(unsigned __int16 *)&aB0d0f0h0j0[v165] != (unsigned __int16)v167[v166])
            {
              v165 += 2;
              if (v165 == 10)
              {
                v168 = "";
                goto LABEL_264;
              }
            }
            v168 = &aB0d0f0h0j0[v165];
LABEL_264:
            if (v168 - "B0D0F0H0J0" != 10)
            {
              v169 = 0;
              while (aKstnhmyrwgzjdb[v169] != v167[v161])
              {
                if (++v169 == 18)
                {
                  v170 = L"";
                  goto LABEL_270;
                }
              }
              v170 = &aKstnhmyrwgzjdb[v169];
LABEL_270:
              if ((char *)v170 - (char *)L"kstnhmyrwgzjdbpofv" != 36)
              {
                v171 = 0;
                *(_WORD *)buf = v167[v161];
                v172 = (unsigned __int16)v167[v166];
                while (*(unsigned __int16 *)&aB0d0f0h0j0[v171] != v172)
                {
                  v171 += 2;
                  if (v171 == 10)
                  {
                    v173 = "";
                    goto LABEL_276;
                  }
                }
                v173 = &aB0d0f0h0j0[v171];
LABEL_276:
                v174 = v173 - "B0D0F0H0J0";
                if (v174 == 10)
                  v175 = 0;
                else
                  v175 = *(__int16 *)((char *)L"aiueo" + v174);
                *(_WORD *)&buf[2] = v175;
                sub_20B8B6560(&v257, v162[3] - 2, (UniChar *)buf, 2, 2, -1.5);
                v164 = v272;
              }
            }
          }
          v176 = v161 + 2;
          v177 = (char)v164;
          if ((v164 & 0x80u) != 0)
            v164 = v271;
          if (v176 < v164)
          {
            v178 = 0;
            v179 = __p;
            if (v177 >= 0)
              v179 = &__p;
            while (aKstnhmyrwgzjdb[v178] != v179[v161])
            {
              if (++v178 == 18)
              {
                v180 = L"";
                goto LABEL_289;
              }
            }
            v180 = &aKstnhmyrwgzjdb[v178];
LABEL_289:
            if ((char *)v180 - (char *)L"kstnhmyrwgzjdbpofv" != 36)
            {
              v181 = (unsigned __int16)v179[v160];
              v182 = (v181 - 12353) < 0x56 || v181 == 12540;
              if (v182 || v181 == 12316)
              {
                v184 = 0;
                while (*(unsigned __int16 *)&aB0d0f0h0j0[v184] != (unsigned __int16)v179[v160])
                {
                  v184 += 2;
                  if (v184 == 10)
                  {
                    v185 = "";
                    goto LABEL_303;
                  }
                }
                v185 = &aB0d0f0h0j0[v184];
LABEL_303:
                if (v185 - "B0D0F0H0J0" == 10)
                {
                  v186 = 0;
                  v187 = (unsigned __int16)v179[v176];
                  while (*(unsigned __int16 *)&aB0d0f0h0j0[v186] != v187)
                  {
                    v186 += 2;
                    if (v186 == 10)
                    {
                      v188 = "";
                      goto LABEL_309;
                    }
                  }
                  v188 = &aB0d0f0h0j0[v186];
LABEL_309:
                  if (v188 - "B0D0F0H0J0" != 10)
                  {
                    *(_QWORD *)buf = v161 + 2;
                    v189 = sub_20B8B6C54(&v262, (unint64_t *)buf);
                    if (v189)
                    {
                      v190 = v189[3];
                      v191 = v163[3];
                      if (v190 - v191 == 2)
                      {
                        v192 = 0;
                        v193 = __p;
                        if ((v272 & 0x80u) == 0)
                          v193 = &__p;
                        *(_WORD *)buf = v193[v161];
                        p_dst = __dst;
                        if ((v275 & 0x80u) == 0)
                          p_dst = &__dst;
                        *(_WORD *)&buf[2] = p_dst[v190 - 1];
                        *(_WORD *)&buf[4] = p_dst[v191];
                        while (*(unsigned __int16 *)&aB0d0f0h0j0[v192] != (unsigned __int16)v193[v176])
                        {
                          v192 += 2;
                          if (v192 == 10)
                          {
                            v195 = "";
                            goto LABEL_321;
                          }
                        }
                        v195 = &aB0d0f0h0j0[v192];
LABEL_321:
                        v196 = v195 - "B0D0F0H0J0";
                        if (v196 == 10)
                          v197 = 0;
                        else
                          v197 = *(__int16 *)((char *)L"aiueo" + v196);
                        *(_WORD *)&buf[6] = v197;
                        sub_20B8B6560(&v257, v191 - 1, (UniChar *)buf, 4, 4, -1.5);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v198 = v272;
        if ((v272 & 0x80u) != 0)
          v198 = v271;
      }
      while (v160 < v198);
    }
  }
  sub_20B84055C((uint64_t)&v267);
  if ((char)v272 < 0)
    operator delete(__p);
  if ((char)v275 < 0)
    operator delete(__dst);
  v199 = v257.i64[1];
  if (v257.i64[0] != v257.i64[1])
  {
    v200 = v257.i64[0] + 16;
    do
    {
      v201 = v200 - 16;
      if (*(char *)(v200 + 23) < 0)
      {
        v203 = *(void **)v200;
        v202 = *(_QWORD *)(v200 + 8);
      }
      else
      {
        v202 = *(unsigned __int8 *)(v200 + 23);
        v203 = (void *)v200;
      }
      sub_20B8B6470(v246, *(_QWORD *)(v200 - 16) + v245, v203, v202, *(_QWORD *)(v200 - 8), 0, 0xFFFFFF, -1, *(double *)(v200 + 24), 255);
      v200 += 48;
    }
    while (v201 + 48 != v199);
  }
  v205 = (_QWORD *)(a6 + 16);
  v204 = *(_QWORD **)(a6 + 16);
  if (v204)
  {
    v206 = 0;
    v207 = 0;
    do
    {
      v208 = v204[2];
      if (v206 < v208)
        v207 = v204[3];
      if (v206 <= v208)
        v206 = v204[2];
      v204 = (_QWORD *)*v204;
    }
    while (v204);
  }
  else
  {
    v207 = 0;
    v206 = 0;
  }
  v209 = (_QWORD *)v263;
  if ((_QWORD)v263)
  {
    v210 = *(_QWORD *)(a6 + 8);
    do
    {
      v211 = v209[3];
      v212 = v209[2] + v206;
      if (v210)
      {
        v213 = (uint8x8_t)vcnt_s8((int8x8_t)v210);
        v213.i16[0] = vaddlv_u8(v213);
        if (v213.u32[0] > 1uLL)
        {
          v16 = v209[2] + v206;
          if (v210 <= v212)
            v16 = v212 % v210;
        }
        else
        {
          v16 = (v210 - 1) & v212;
        }
        v214 = *(_QWORD **)(*(_QWORD *)a6 + 8 * v16);
        if (v214)
        {
          for (k = (_QWORD *)*v214; k; k = (_QWORD *)*k)
          {
            v216 = k[1];
            if (v216 == v212)
            {
              if (k[2] == v212)
                goto LABEL_387;
            }
            else
            {
              if (v213.u32[0] > 1uLL)
              {
                if (v216 >= v210)
                  v216 %= v210;
              }
              else
              {
                v216 &= v210 - 1;
              }
              if (v216 != v16)
                break;
            }
          }
        }
      }
      v217 = operator new(0x20uLL);
      *v217 = 0;
      v217[1] = v212;
      v217[2] = v212;
      v217[3] = v211 + v207;
      v218 = (float)(unint64_t)(*(_QWORD *)(a6 + 24) + 1);
      v219 = *(float *)(a6 + 32);
      if (!v210 || (float)(v219 * (float)v210) < v218)
      {
        v220 = (v210 & (v210 - 1)) != 0;
        if (v210 < 3)
          v220 = 1;
        v221 = v220 | (2 * v210);
        v222 = vcvtps_u32_f32(v218 / v219);
        if (v221 <= v222)
          v223 = v222;
        else
          v223 = v221;
        sub_20B828960(a6, v223);
        v210 = *(_QWORD *)(a6 + 8);
        if ((v210 & (v210 - 1)) != 0)
        {
          if (v210 <= v212)
            v16 = v212 % v210;
          else
            v16 = v212;
        }
        else
        {
          v16 = (v210 - 1) & v212;
        }
      }
      v224 = *(_QWORD *)a6;
      v225 = *(_QWORD **)(*(_QWORD *)a6 + 8 * v16);
      if (v225)
      {
        *v217 = *v225;
        v226 = a6;
      }
      else
      {
        *v217 = *v205;
        *v205 = v217;
        *(_QWORD *)(v224 + 8 * v16) = v205;
        v226 = a6;
        if (!*v217)
          goto LABEL_386;
        v227 = *(_QWORD *)(*v217 + 8);
        if ((v210 & (v210 - 1)) != 0)
        {
          if (v227 >= v210)
            v227 %= v210;
        }
        else
        {
          v227 &= v210 - 1;
        }
        v225 = (_QWORD *)(*(_QWORD *)a6 + 8 * v227);
      }
      *v225 = v217;
LABEL_386:
      ++*(_QWORD *)(v226 + 24);
LABEL_387:
      v209 = (_QWORD *)*v209;
    }
    while (v209);
  }
  v228 = (void **)a7;
  if (a7)
  {
    v229 = sub_20B877ED0(buf, v249, v248);
    v230 = *((char *)a7 + 23);
    v231 = a7 + 1;
    if (v230 >= 0)
      v232 = (char *)a7;
    else
      v232 = *a7;
    if (v230 >= 0)
      v233 = *((unsigned __int8 *)a7 + 23);
    else
      v233 = (unint64_t)a7[1];
    if (buf[23] >= 0)
      v234 = buf[23];
    else
      v234 = *(_QWORD *)&buf[8];
    if (buf[23] >= 0)
      v235 = 10;
    else
      v235 = (*(_QWORD *)&buf[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v235 - v234 >= v233)
    {
      if (v233)
      {
        if (buf[23] >= 0)
          v236 = buf;
        else
          v236 = *(char **)buf;
        if (v234)
        {
          if (&v236[2 * v234] <= v232 || v236 > v232)
            v238 = 0;
          else
            v238 = v233;
          v232 += 2 * v238;
          memmove(&v236[2 * v233], v236, 2 * v234);
        }
        memmove(v236, v232, 2 * v233);
        v239 = v234 + v233;
        if ((buf[23] & 0x80000000) != 0)
          *(_QWORD *)&buf[8] = v234 + v233;
        else
          buf[23] = v239 & 0x7F;
        *(_WORD *)&v236[2 * v239] = 0;
        v228 = (void **)a7;
      }
    }
    else
    {
      sub_20B88DB90((uint64_t)v229, v235, v234 + v233 - v235, v234, 0, 0, v233, v232);
    }
    v240 = *(char **)buf;
    v284[0] = *(_QWORD *)&buf[8];
    *(_QWORD *)((char *)v284 + 7) = *(_QWORD *)&buf[15];
    v241 = buf[23];
    memset(buf, 0, 24);
    if (*((char *)v228 + 23) < 0)
    {
      operator delete(*v228);
      v242 = buf[23];
      *v228 = v240;
      *v231 = v284[0];
      *(char **)((char *)a7 + 15) = *(char **)((char *)v284 + 7);
      *((_BYTE *)v228 + 23) = v241;
      if (v242 < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      *v228 = v240;
      *v231 = v284[0];
      *(char **)((char *)a7 + 15) = *(char **)((char *)v284 + 7);
      *((_BYTE *)v228 + 23) = v241;
    }
  }
  if (v244)
    *v244 = v261;
  *(_QWORD *)buf = &v257;
  sub_20B8B6BDC((void ***)buf);
  if ((char)v260 < 0)
    operator delete(v259[0]);
  return sub_20B84055C((uint64_t)&v262);
}

void sub_20B8B62A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (*(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  *(_QWORD *)(v60 - 192) = &a25;
  sub_20B8B6BDC((void ***)(v60 - 192));
  if (a34 < 0)
    operator delete(__p);
  sub_20B84055C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B6470(uint64_t a1, uint64_t a2, void *__src, unint64_t a4, uint64_t a5, __int16 a6, int a7, char a8, double a9, char a10)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  char v22;
  __int16 v23;
  uint64_t v24;
  double v25;
  int v26;
  _QWORD v27[2];

  v11 = a10;
  v27[0] = __src;
  v27[1] = a4;
  v26 = a7;
  v25 = a9;
  v24 = a5;
  v23 = a6;
  v22 = a8;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v12 + 24 * a2;
  v15 = *(_QWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  v16 = (_QWORD *)(v13 + 8);
  if (v15 >= v14)
  {
    result = sub_20B8B67F4((uint64_t *)(v12 + 24 * a2), (uint64_t)v27, (uint64_t *)&v25, &v24, &v26, &v23, &v22, &a10);
  }
  else
  {
    sub_20B877ED0((_QWORD *)v15, __src, a4);
    *(double *)(v15 + 24) = a9;
    *(_QWORD *)(v15 + 32) = a5;
    *(_DWORD *)(v15 + 40) = a7;
    *(_WORD *)(v15 + 44) = a6;
    *(_BYTE *)(v15 + 46) = a8;
    *(_BYTE *)(v15 + 47) = v11;
    result = v15 + 48;
    *v16 = v15 + 48;
  }
  *v16 = result;
  return result;
}

void sub_20B8B6558(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

void sub_20B8B6560(_QWORD *a1, CFIndex a2, UniChar *chars, CFIndex numChars, CFIndex a5, float a6)
{
  void *v10;
  unint64_t v11;
  _WORD *v12;
  CFIndex v13;
  CFIndex v14[2];
  void *__p;
  char v16;
  double v17;
  void *__src;

  v14[0] = 0;
  sub_20B87C354(chars, numChars, v14, &__src);
  v10 = __src;
  v11 = v14[0];
  v12 = __src;
  if (v14[0])
  {
    v13 = 2 * v14[0];
    v12 = __src;
    while ((*v12 & 0xFFDFu) - 65 >= 0x1A)
    {
      ++v12;
      v13 -= 2;
      if (!v13)
        goto LABEL_7;
    }
  }
  if (v12 == (_WORD *)((char *)__src + 2 * v14[0]))
  {
LABEL_7:
    v14[0] = a2;
    v14[1] = a5;
    sub_20B877ED0(&__p, __src, v11);
    v17 = a6;
    sub_20B8B4974(a1, (uint64_t)v14);
    if (v16 < 0)
      operator delete(__p);
  }
  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C80BDFB0063);
}

void sub_20B8B6658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (v17)
    MEMORY[0x20BD39C80](v17, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8B6698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8B66F8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_20B8B6768(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B8B6768(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B8B67A8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B8B67A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

uint64_t sub_20B8B67F4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5, __int16 *a6, char *a7, char *a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  char v28;
  char *v29;
  uint64_t v30;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t *v36;

  v9 = *a1;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v11 = v10 + 1;
  if (v10 + 1 > 0x555555555555555)
    sub_20B80CDD8();
  v19 = (uint64_t)(a1 + 2);
  v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v9) >> 4);
  if (2 * v20 > v11)
    v11 = 2 * v20;
  if (v20 >= 0x2AAAAAAAAAAAAAALL)
    v21 = 0x555555555555555;
  else
    v21 = v11;
  v36 = a1 + 2;
  if (v21)
    v22 = (char *)sub_20B87374C(v19, v21);
  else
    v22 = 0;
  v32 = v22;
  v33 = &v22[48 * v10];
  v34 = v33;
  v35 = &v22[48 * v21];
  v23 = *a3;
  v24 = *a4;
  v25 = *a5;
  v26 = *a6;
  v27 = *a7;
  v28 = *a8;
  sub_20B877ED0(v33, *(void **)a2, *(_QWORD *)(a2 + 8));
  v29 = v33;
  *((_QWORD *)v33 + 3) = v23;
  *((_QWORD *)v29 + 4) = v24;
  *((_DWORD *)v29 + 10) = v25;
  *((_WORD *)v29 + 22) = v26;
  v29[46] = v27;
  v29[47] = v28;
  v34 += 48;
  sub_20B8B6968(a1, &v32);
  v30 = a1[1];
  sub_20B8B6B40((uint64_t)&v32);
  return v30;
}

void sub_20B8B6954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8B6B40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B6968(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B8B69DC((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B8B69DC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void **v9;
  _BYTE *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  __int128 v19;
  __int128 v20;

  v7 = a7;
  *(_QWORD *)&v20 = a6;
  *((_QWORD *)&v20 + 1) = a7;
  v19 = v20;
  v17[0] = a1;
  v17[1] = &v19;
  v17[2] = &v20;
  v18 = 0;
  if (a3 == a5)
  {
    v15 = a6;
  }
  else
  {
    v9 = (void **)a3;
    do
    {
      v10 = (_BYTE *)(v7 - 48);
      v11 = (__int128 *)(v9 - 6);
      if (*((char *)v9 - 25) < 0)
      {
        sub_20B88DD4C(v10, *(v9 - 6), (unint64_t)*(v9 - 5));
        v13 = *((_QWORD *)&v20 + 1);
      }
      else
      {
        v12 = *v11;
        *(_QWORD *)(v7 - 32) = *(v9 - 4);
        *(_OWORD *)v10 = v12;
        v13 = v7;
      }
      v14 = (uint64_t)*(v9 - 1);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 3);
      *(_QWORD *)(v7 - 8) = v14;
      v7 = v13 - 48;
      *((_QWORD *)&v20 + 1) = v13 - 48;
      v9 -= 6;
    }
    while (v11 != a5);
    v15 = v20;
  }
  v18 = 1;
  sub_20B8B6AC8((uint64_t)v17);
  return v15;
}

void sub_20B8B6AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B8B6AC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B6AC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B8B6AFC(a1);
  return a1;
}

void sub_20B8B6AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 48;
  }
}

uint64_t sub_20B8B6B40(uint64_t a1)
{
  sub_20B8B6B74(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8B6B74(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_20B8B6BC8()
{
  sub_20B83B31C("basic_string");
}

void sub_20B8B6BDC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20B8B6C54(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20B8B6D08()
{
  if (qword_25472B2F0 != -1)
    dispatch_once(&qword_25472B2F0, &unk_24C46CD90);
  return qword_25472B2E8;
}

void sub_20B8B6D48()
{
  NSObject *v0;
  os_signpost_id_t v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v0 = sub_20B9A7C5C(0xDu);
  v1 = os_signpost_id_make_with_pointer(v0, &qword_25472B2F0);
  v2 = sub_20B9A7C5C(0xDu);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "MecabraDPRecorderManager", "MecabraDPRecorderManager constructor", buf, 2u);
    }
  }
  v4 = (_QWORD *)operator new();
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = 0;
  *v4 = 0;
  v4[1] = v4 + 2;
  v4[5] = 0;
  v4[6] = 0;
  v4[4] = objc_opt_class();
  v5 = objc_opt_class();
  v4[5] = v5;
  if (v4[4] && v5)
    *v4 = dispatch_queue_create("com.apple.mecabra.dprecorder", 0);
  qword_25472B2E8 = (uint64_t)v4;
  v6 = sub_20B9A7C5C(0xDu);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)v8 = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v7, OS_SIGNPOST_INTERVAL_END, v1, "MecabraDPRecorderManager", (const char *)&unk_20BA9505F, v8, 2u);
    }
  }
}

void sub_20B8B6EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8934AC(*(_QWORD **)(v1 + 16));
  MEMORY[0x20BD39CB0](v1, 0x10E0C4017AF648ALL);
  _Unwind_Resume(a1);
}

void sub_20B8B6ED8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  _QWORD v18[8];
  _QWORD v19[4];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_alloc_init(MEMORY[0x24BDD1460]);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(v2 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 1;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2020000000;
  v19[3] = 0;
  v9 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x24BDD16E0], v8, 0);
  v11 = objc_msgSend_word_atPosition_(v5, v10, (uint64_t)v6, v9);
  objc_msgSend_addObject_(v7, v12, v11);
  v15 = objc_msgSend_length(v6, v13, v14);
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3221225472;
  v18[2] = sub_20B8B727C;
  v18[3] = &unk_24C49BA28;
  v18[4] = v7;
  v18[5] = v5;
  v18[6] = v19;
  v18[7] = &v20;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v6, v16, 0, v15, 2, v18);
  if (*((_BYTE *)v21 + 24))
    objc_msgSend_record_(v4, v17, (uint64_t)v7);

  _Block_object_dispose(v19, 8);
  _Block_object_dispose(&v20, 8);

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_20B8B7038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B705C(uint64_t a1, const char *a2, const __CFString *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  const __CFString *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  void *v19;
  _DWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t result;
  id v27;
  const __CFString *v28;
  NSObject *v29;
  _QWORD block[17];

  if ((_DWORD)a2 != 1)
    return 0;
  block[15] = v4;
  block[16] = v5;
  if (a4)
    v8 = 2;
  else
    v8 = 1;
  v10 = (_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_47;
  v11 = a1 + 16;
  do
  {
    v12 = *(_DWORD *)(v9 + 32);
    v13 = v12 >= v8;
    if (v12 >= v8)
      v14 = (uint64_t *)v9;
    else
      v14 = (uint64_t *)(v9 + 8);
    if (v13)
      v11 = v9;
    v9 = *v14;
  }
  while (*v14);
  if ((_QWORD *)v11 != v10 && v8 >= *(_DWORD *)(v11 + 32))
  {
    v19 = *(void **)(v11 + 40);
    if (!v19)
      return 0;
  }
  else
  {
LABEL_47:
    if (!*(_QWORD *)(a1 + 32))
      return 0;
    if (a4)
    {
      v15 = CFSTR("com.apple.keyboard.NewWords.zh_Hans.10Key");
      v16 = objc_msgSend_length(CFSTR("com.apple.keyboard.NewWords.zh_Hans.10Key"), a2, (uint64_t)a3);
    }
    else
    {
      v15 = CFSTR("com.apple.keyboard.NewWords.zh_Hans.Qwerty");
      v16 = objc_msgSend_length(CFSTR("com.apple.keyboard.NewWords.zh_Hans.Qwerty"), a2, (uint64_t)a3);
    }
    if (!v16)
      return 0;
    v17 = objc_alloc(*(Class *)(a1 + 32));
    v19 = (void *)objc_msgSend_initWithKey_(v17, v18, (uint64_t)v15);
    v20 = *(_DWORD **)(a1 + 16);
    v21 = v10;
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[8];
          if (v22 <= v8)
            break;
          v20 = (_DWORD *)*v21;
          v10 = v21;
          if (!*v21)
            goto LABEL_28;
        }
        if (v22 >= v8)
          break;
        v20 = (_DWORD *)v21[1];
        if (!v20)
        {
          v10 = v21 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      v23 = v21;
      v21 = operator new(0x30uLL);
      *((_DWORD *)v21 + 8) = v8;
      v21[5] = 0;
      *v21 = 0;
      v21[1] = 0;
      v21[2] = v23;
      *v10 = v21;
      v24 = **(_QWORD **)(a1 + 8);
      v25 = v21;
      if (v24)
      {
        *(_QWORD *)(a1 + 8) = v24;
        v25 = (uint64_t *)*v10;
      }
      sub_20B82973C(*(uint64_t **)(a1 + 16), v25);
      ++*(_QWORD *)(a1 + 24);
    }
    v21[5] = v19;
    if (!v19)
      return 0;
  }
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  result = 0;
  if (!a3 || !*(_QWORD *)a1)
    return result;
  if (CFStringGetLength(a3) < 1)
    return 0;
  CFRetain(a3);
  v27 = v19;
  v28 = *(const __CFString **)(a1 + 48);
  if (v28 != a3)
  {
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(a1 + 48) = 0;
    }
    *(_QWORD *)(a1 + 48) = CFRetain(a3);
  }
  v29 = *(NSObject **)a1;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_20B8B6ED8;
  block[3] = &unk_24C49BA00;
  block[4] = v19;
  block[5] = a1;
  block[6] = a3;
  dispatch_async(v29, block);
  return 1;
}

_QWORD *sub_20B8B727C(_QWORD *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;

  ++*(_QWORD *)(*(_QWORD *)(result[6] + 8) + 24);
  if (a2)
  {
    v8 = (void *)result[4];
    v9 = (void *)result[5];
    v10 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x24BDD16E0], a2, *(_QWORD *)(*(_QWORD *)(result[6] + 8) + 24));
    v12 = objc_msgSend_word_atPosition_(v9, v11, (uint64_t)a2, v10);
    return (_QWORD *)objc_msgSend_addObject_(v8, v13, v12);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(result[7] + 8) + 24) = 0;
    *a7 = 1;
  }
  return result;
}

uint64_t sub_20B8B7314(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v5;
  CFTypeRef v6;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C461840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C461A80;
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  if (a3)
    v6 = CFRetain(a3);
  else
    v6 = 0;
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

uint64_t sub_20B8B7380(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_20B8B73C0(uint64_t a1)
{
  sub_20B8B7380(a1);
  JUMPOUT(0x20BD39CB0);
}

__CFString *sub_20B8B73E4()
{
  return kMecabraAnalysisStringForFacemark[0];
}

__CFString *sub_20B8B73F0()
{
  return kMecabraAnalysisStringForFacemark[0];
}

uint64_t sub_20B8B73FC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  const char *v4;
  uint64_t v5;
  const char *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 0;
  v3 = atomic_load((unsigned __int8 *)&qword_25472B300);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472B300))
  {
    qword_25472B2F8 = (uint64_t)objc_alloc_init(MEMORY[0x24BDBCED8]);
    __cxa_guard_release(&qword_25472B300);
  }
  v5 = objc_msgSend_objectForKey_((void *)qword_25472B2F8, a2, v2);
  if (!v5)
  {
    v5 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x24BDBCE70], v4, v2, CFSTR("category"));
    objc_msgSend_setValue_forKey_((void *)qword_25472B2F8, v6, v5, v2);
  }
  return v5;
}

void sub_20B8B74B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B300);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B74D0(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef v4;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C461840;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = &unk_24C461A80;
  v3 = *(CFTypeRef *)(a1 + 8);
  if (v3)
    v3 = CFRetain(v3);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(CFTypeRef *)(a1 + 16);
  if (v4)
    v4 = CFRetain(v4);
  *(_QWORD *)(v2 + 40) = v4;
  return v2;
}

void sub_20B8B7544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B7568(_QWORD *a1)
{
  return sub_20B8B74D0((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20B8B7578(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_20B8B7580(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_20B8B7588()
{
  return 0;
}

uint64_t sub_20B8B7590()
{
  return 0;
}

uint64_t sub_20B8B759C()
{
  return 7;
}

uint64_t sub_20B8B75A4()
{
  return 0;
}

uint64_t sub_20B8B75AC()
{
  return 0;
}

uint64_t sub_20B8B75B4()
{
  return 0;
}

uint64_t sub_20B8B75BC()
{
  return 0;
}

uint64_t sub_20B8B75C4()
{
  return 0;
}

uint64_t sub_20B8B75CC()
{
  return 0;
}

const __CFString *sub_20B8B75D4(uint64_t a1)
{
  const __CFString *result;

  result = *(const __CFString **)(a1 + 32);
  if (result)
    return (const __CFString *)sub_20B8D345C(result);
  return result;
}

uint64_t sub_20B8B75E4()
{
  return 0;
}

uint64_t sub_20B8B75EC()
{
  return 0;
}

uint64_t sub_20B8B75F4()
{
  return 0;
}

uint64_t sub_20B8B75FC()
{
  return 0;
}

uint64_t sub_20B8B7604()
{
  return 0;
}

uint64_t sub_20B8B760C()
{
  return 1;
}

uint64_t sub_20B8B7614()
{
  return 1;
}

uint64_t sub_20B8B761C()
{
  return 0;
}

uint64_t sub_20B8B7624()
{
  return 0;
}

uint64_t sub_20B8B762C()
{
  return 0;
}

uint64_t sub_20B8B7634()
{
  return 0;
}

uint64_t sub_20B8B763C()
{
  return 0;
}

uint64_t sub_20B8B7644()
{
  return 0;
}

uint64_t sub_20B8B764C()
{
  return 0;
}

uint64_t sub_20B8B7654()
{
  return 0;
}

uint64_t sub_20B8B765C()
{
  return -1;
}

uint64_t sub_20B8B7664()
{
  return 0;
}

double sub_20B8B766C()
{
  return 0.0;
}

uint64_t sub_20B8B7678()
{
  return 0;
}

uint64_t sub_20B8B7680()
{
  return 0;
}

uint64_t sub_20B8B7688()
{
  return 0;
}

uint64_t sub_20B8B7690()
{
  return 0;
}

uint64_t sub_20B8B76A4()
{
  return 0;
}

uint64_t sub_20B8B76AC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  unsigned int v7;
  char *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int16 v26;
  void *v27;
  _BYTE *v28;
  unsigned int v30;
  void *__p;
  char *v32;
  char *v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  char v37[1020];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 224))
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1[1] + 224))(a1[1]);
  v30 = v5;
  v7 = sub_20B969844(v5, v6);
  v8 = *(char **)(a2 + 64);
  v9 = *(char *)(a2 + 87);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v32 = 0;
  v33 = 0;
  __p = 0;
  if (v10[1] == *v10)
  {
    v28 = 0;
    v27 = 0;
    v2 = 0;
  }
  else
  {
    v11 = v10;
    v12 = 0;
    v2 = 0;
    if (v9 >= 0)
      v8 = (char *)(a2 + 64);
    do
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      if (v13 - (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 376))(a2) == v12)
        v14 = v7 | 4;
      else
        v14 = v7;
      v15 = ((uint64_t (*)(_QWORD **, char *, unint64_t, uint64_t, char *, uint64_t, _QWORD))(*a1)[3])(a1, v8, *v11 + 40 * v12, v14, v37, 510, v30);
      if (v15 >= 2)
      {
        v16 = v15 >> 1;
        sub_20B87C64C((char *)&v34, v37, v15 >> 1);
      }
      else
      {
        v16 = (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 312))(a2, v12);
        sub_20B87C64C((char *)&v34, v8, v16);
      }
      v17 = v32;
      if (v32 >= v33)
      {
        v19 = (char *)__p;
        v20 = v32 - (_BYTE *)__p;
        if (v32 - (_BYTE *)__p <= -3)
          sub_20B80CDD8();
        v21 = v20 >> 1;
        if (v33 - (_BYTE *)__p <= (unint64_t)((v20 >> 1) + 1))
          v22 = v21 + 1;
        else
          v22 = v33 - (_BYTE *)__p;
        if ((unint64_t)(v33 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)sub_20B80FD48((uint64_t)&v33, v23);
          v19 = (char *)__p;
          v17 = v32;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[2 * v21];
        *(_WORD *)v25 = v16;
        v18 = v25 + 2;
        while (v17 != v19)
        {
          v26 = *((_WORD *)v17 - 1);
          v17 -= 2;
          *((_WORD *)v25 - 1) = v26;
          v25 -= 2;
        }
        __p = v25;
        v32 = v18;
        v33 = &v24[2 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_WORD *)v32 = v16;
        v18 = v17 + 2;
      }
      v32 = v18;
      v2 += v16;
      v8 += 2 * (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 312))(a2, v12++);
    }
    while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11[1] - *v11) >> 3));
    v27 = v34;
    v28 = v35;
  }
  sub_20B917140(a2, v27, (v28 - (_BYTE *)v27) >> 1, (uint64_t)&__p);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  return v2;
}

void sub_20B8B79A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B8B79DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, unint64_t a6, char a7)
{
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unsigned int v22;
  _QWORD v23[9];
  int v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v14 = *(_WORD *)(a3 + 26);
  v31 = 0;
  v32 = 0;
  v30 = 0uLL;
  v29 = *(_OWORD *)sub_20B947CC4();
  if (*(_BYTE *)(a3 + 38) == 1 || (a7 & 0x20) == 0 || (*(_BYTE *)(a3 + 37) & 8) != 0)
    goto LABEL_20;
  v15 = *(unsigned __int16 *)(a3 + 26);
  if (!a2)
    v15 = 0;
  v28[0] = a2;
  v28[1] = v15;
  sub_20B87B938(v28, (unint64_t *)&v32, 0, 0, &v25);
  v31 = v26;
  v30 = v25;
  v16 = HIBYTE(v26);
  if (v26 >= 0)
    v17 = &v30;
  else
    v17 = (__int128 *)v30;
  if (v26 < 0)
    v16 = *((_QWORD *)&v30 + 1);
  v18 = v17 ? v16 : 0;
  *(_QWORD *)&v29 = v17;
  *((_QWORD *)&v29 + 1) = v18;
  if (!v18)
    goto LABEL_20;
  if ((unsigned __int16)v18 <= 0x80uLL)
  {
    v14 = v18;
    if ((a4 & 4) == 0 || !v32)
    {
      v21 = (unsigned __int16)v18 - 1;
      v22 = *((unsigned __int16 *)v17 + v21);
      if (v22 <= 0xFF && memchr("bcdfghjklmpqrstvwxyz", (char)v22, 0x15uLL))
        *((_WORD *)v17 + v21) = 12387;
LABEL_21:
      *(_QWORD *)&v25 = 0;
      *((_QWORD *)&v25 + 1) = &v25;
      v26 = 0x2000000000;
      v27 = 0;
      if (*(_DWORD *)(a3 + 12))
      {
        if ((a4 & 4) != 0 && v32)
        {
          v23[0] = MEMORY[0x24BDAC760];
          v23[1] = 0x40000000;
          v23[2] = sub_20B8B7C6C;
          v23[3] = &unk_24C46C128;
          v23[4] = &v25;
          v23[5] = a1;
          v24 = a4;
          v23[6] = a3;
          v23[7] = a5;
          v23[8] = a6;
          sub_20B87C52C((uint64_t)&v29, v32, (uint64_t)v23);
          v19 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 24);
        }
        else
        {
          v19 = (*(int (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), v17, 2 * v14);
          *(_QWORD *)(*((_QWORD *)&v25 + 1) + 24) = v19;
        }
      }
      else
      {
        v19 = 2 * v14;
        v27 = v19;
        if (v19 <= a6)
        {
          memcpy(a5, v17, 2 * v14);
        }
        else
        {
          v19 = 0;
          v27 = 0;
        }
      }
      _Block_object_dispose(&v25, 8);
      if (v31 < 0)
        goto LABEL_30;
      return v19;
    }
LABEL_20:
    v17 = (__int128 *)a2;
    goto LABEL_21;
  }
  v19 = 0;
  if (v26 < 0)
LABEL_30:
    operator delete((void *)v30);
  return v19;
}

void sub_20B8B7C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 89) < 0)
    operator delete(*(void **)(v19 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8B7C6C(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *a2, a2[1] - *a2, *(unsigned int *)(*(_QWORD *)(a1 + 48) + 12), *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 36), *(_DWORD *)(a1 + 72) | 0x10000u, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (int)result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
  return result;
}

_BYTE *sub_20B8B7CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;

  v4 = *(_QWORD *)(a1 + 416);
  if (!v4)
    return sub_20B87C9E0(a3, byte_20BA93B9E);
  v5 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v5)
    return sub_20B87C9E0(a3, byte_20BA93B9E);
  v7 = (v5 >> 8) & 0xFFFFF;
  if (*(_QWORD *)(a1 + 424) <= v7)
    return sub_20B87C9E0(a3, byte_20BA93B9E);
  sub_20B7F8C4C(a1 + 368, *(unsigned int *)(v4 + 4 * v7));
  sub_20B80681C((unint64_t *)(a1 + 360), a1 + 368);
  return sub_20B877ED0(a3, *(void **)(a1 + 392), (unint64_t)*(unsigned int *)(a1 + 400) >> 1);
}

void sub_20B8B7D78(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 a4, uint64_t *a5, char **a6)
{
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int64_t v19;
  uint64_t v20;
  _QWORD v21[8];
  __int16 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v12 = (__int16 *)sub_20B896F94();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0x7FFFFFFF;
  v13 = *(_QWORD *)(a1 + 8);
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 0x40000000;
  v21[2] = sub_20B8B7EF4;
  v21[3] = &unk_24C46C950;
  v22 = a4;
  v21[6] = a5;
  v21[7] = a6;
  v21[4] = &v23;
  v21[5] = a1;
  sub_20BA20C80(v13, a2, a3, 2, (uint64_t)v21);
  v15 = *a5;
  v14 = a5[1];
  if (*a5 != v14)
  {
    v16 = *a6;
    do
    {
      v17 = a6[1];
      if (v16 == v17)
        break;
      v18 = *((_DWORD *)v24 + 6);
      if (*(_DWORD *)v16 <= v18 + v12[146])
      {
        *(_DWORD *)v16 -= v18;
        v16 += 4;
        v15 += 2;
      }
      else
      {
        v19 = v17 - (v16 + 4);
        if (v17 != v16 + 4)
        {
          memmove(v16, v16 + 4, v17 - (v16 + 4));
          v14 = a5[1];
        }
        a6[1] = &v16[v19];
        v20 = v14 - (v15 + 2);
        if (v14 != v15 + 2)
          memmove((void *)v15, (const void *)(v15 + 2), v14 - (v15 + 2));
        v14 = v15 + v20;
        a5[1] = v15 + v20;
      }
    }
    while (v15 != v14);
  }
  _Block_object_dispose(&v23, 8);
}

void sub_20B8B7EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20B8B7EF4(uint64_t a1, uint64_t a2)
{
  unsigned __int16 **v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;

  v3 = *(unsigned __int16 ***)(a1 + 48);
  v5 = *v3;
  v4 = v3[1];
  if (v5 != v4)
  {
    while (*v5 != *(__int16 *)(a2 + 92))
    {
      if (++v5 == v4)
      {
        v5 = v4;
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = *(_WORD *)(a2 + 92);
    v7 = *(__int16 *)(a2 + 84);
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(unsigned __int16 *)(a1 + 64));
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_WORD **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
    if ((unint64_t)v10 >= v11)
    {
      v13 = *(_WORD **)v9;
      v14 = (uint64_t)v10 - *(_QWORD *)v9;
      if (v14 <= -3)
        sub_20B80CDD8();
      v15 = v14 >> 1;
      v16 = v11 - (_QWORD)v13;
      if (v16 <= (v14 >> 1) + 1)
        v17 = v15 + 1;
      else
        v17 = v16;
      if (v16 >= 0x7FFFFFFFFFFFFFFELL)
        v18 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
      {
        v19 = (char *)sub_20B80FD48(v9 + 16, v18);
        v13 = *(_WORD **)v9;
        v10 = *(_WORD **)(v9 + 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[2 * v15];
      v21 = &v19[2 * v18];
      *(_WORD *)v20 = v6;
      v12 = v20 + 2;
      while (v10 != v13)
      {
        v22 = *--v10;
        *((_WORD *)v20 - 1) = v22;
        v20 -= 2;
      }
      *(_QWORD *)v9 = v20;
      *(_QWORD *)(v9 + 8) = v12;
      *(_QWORD *)(v9 + 16) = v21;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v10 = v6;
      v12 = v10 + 1;
    }
    v23 = v8 + v7;
    *(_QWORD *)(v9 + 8) = v12;
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_DWORD **)(v24 + 8);
    v26 = *(_QWORD *)(v24 + 16);
    if ((unint64_t)v25 >= v26)
    {
      v28 = *(_DWORD **)v24;
      v29 = ((uint64_t)v25 - *(_QWORD *)v24) >> 2;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        sub_20B80CDD8();
      v31 = v26 - (_QWORD)v28;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)sub_20B8127BC(v24 + 16, v32);
        v28 = *(_DWORD **)v24;
        v25 = *(_DWORD **)(v24 + 8);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      v35 = &v33[4 * v32];
      *(_DWORD *)v34 = v23;
      v27 = v34 + 4;
      while (v25 != v28)
      {
        v36 = *--v25;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      *(_QWORD *)v24 = v34;
      *(_QWORD *)(v24 + 8) = v27;
      *(_QWORD *)(v24 + 16) = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v25 = v23;
      v27 = v25 + 1;
    }
    *(_QWORD *)(v24 + 8) = v27;
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (v23 < *(_DWORD *)(v37 + 24))
      *(_DWORD *)(v37 + 24) = v23;
  }
}

void sub_20B8B8108(uint64_t a1)
{
  sub_20B8B812C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8B812C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C462BA8;
  v2 = a1 + 16;
  sub_20B878B18(a1 + 16);
  *(_QWORD *)(a1 + 416) = 0;
  sub_20B806918((_QWORD **)(a1 + 360));
  sub_20B7F8B30(a1 + 368);
  sub_20B806284(a1 + 360);
  sub_20B878A58(v2);
  return a1;
}

BOOL sub_20B8B8198(uint64_t a1, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _BOOL8 v14;
  std::locale::id *v15;
  uint64_t v16;
  const std::locale::facet *v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::string::size_type size;
  std::string::size_type v22;
  char *v23;
  char *v24;
  unint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  unsigned int v29;
  int v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  std::string *v34;
  unsigned int v35;
  int v36;
  std::string *p_p;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *p_str;
  std::string::size_type v47;
  std::string __p;
  std::string v50;
  std::string __str;
  char v52;
  _QWORD v53[2];
  _BYTE v54[408];
  _QWORD v55[21];

  v55[19] = *MEMORY[0x24BDAC8D0];
  sub_20B82EB18(v53);
  v4 = *(_QWORD *)(v53[0] - 24);
  if ((v54[v4 + 16] & 5) != 0)
  {
    v6 = *(_QWORD *)(a1 + 128);
    v5 = (_QWORD *)(a1 + 128);
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(v6 - 24)), 0);
    v7 = sub_20B828F84(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
    sub_20B828F84(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20B828F84(v8, (uint64_t)") [", 3);
    v10 = sub_20B828F84(v9, (uint64_t)"ifs", 3);
    v11 = sub_20B828F84(v10, (uint64_t)"] ", 2);
    v12 = sub_20B828F84(v11, (uint64_t)"no such file or directory: ", 27);
    v13 = strlen(a2);
    sub_20B828F84(v12, (uint64_t)a2, v13);
    v14 = 0;
    goto LABEL_61;
  }
  memset(&__str, 0, sizeof(__str));
  v15 = (std::locale::id *)MEMORY[0x24BEDB350];
  v16 = MEMORY[0x24BDAC740];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + v4));
    v17 = std::locale::use_facet((const std::locale *)&v50, v15);
    v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v50);
    v19 = sub_20B851B78(v53, (uint64_t)&__str, v18);
    v14 = (*(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0;
    if ((*(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0)
      break;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_51;
      v20 = *__str.__r_.__value_.__l.__data_;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_51;
      v20 = __str.__r_.__value_.__s.__data_[0];
    }
    if (v20 != 59 && v20 != 35)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (!size
        || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v22 = (std::string::size_type)&__str)
          : (v22 = __str.__r_.__value_.__r.__words[0]),
            (v23 = (char *)memchr((void *)v22, 61, size)) == 0 || (v24 = v23, &v23[-v22] == (char *)-1)))
      {
        v39 = *(_QWORD *)(a1 + 128);
        v38 = (_QWORD *)(a1 + 128);
        std::ios_base::clear((std::ios_base *)((char *)v38 + *(_QWORD *)(v39 - 24)), 0);
        v40 = sub_20B828F84(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
        sub_20B828F84(v40, (uint64_t)"(", 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        v42 = sub_20B828F84(v41, (uint64_t)") [", 3);
        v43 = sub_20B828F84(v42, (uint64_t)"pos != std::string::npos", 24);
        v44 = sub_20B828F84(v43, (uint64_t)"] ", 2);
        v45 = sub_20B828F84(v44, (uint64_t)"format error: ", 14);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v47 = __str.__r_.__value_.__l.__size_;
        sub_20B828F84(v45, (uint64_t)p_str, v47);
        break;
      }
      v25 = (unint64_t)&v23[-v22 + 1];
      do
      {
        v26 = v25;
        v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = __str.__r_.__value_.__l.__size_;
        if (v25 >= v27)
          break;
        v28 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__str
            : (std::string *)__str.__r_.__value_.__r.__words[0];
        v29 = v28->__r_.__value_.__s.__data_[v26];
        v30 = (v29 & 0x80000000) != 0 ? __maskrune(v29, 0x4000uLL) : *(_DWORD *)(v16 + 4 * v29 + 60) & 0x4000;
        v25 = v26 + 1;
      }
      while (v30);
      v31 = &v24[~v22];
      while (1)
      {
        v32 = v31;
        v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (((unint64_t)v32 & 0x8000000000000000) != 0)
          break;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &__str;
        else
          v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v35 = v32[(_QWORD)v34];
        if ((v35 & 0x80000000) != 0)
          v36 = __maskrune(v35, 0x4000uLL);
        else
          v36 = *(_DWORD *)(v16 + 4 * v35 + 60) & 0x4000;
        v31 = v32 - 1;
        if (!v36)
        {
          v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          break;
        }
      }
      if ((v33 & 0x80u) != 0)
        v33 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string(&v50, &__str, v26, v33 - v26, (std::allocator<char> *)&__p);
      std::string::basic_string(&__p, &__str, 0, (std::string::size_type)(v32 + 1), (std::allocator<char> *)&v52);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_20B8B8684(a1, (char *)p_p, (uint64_t)&v50, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
    }
LABEL_51:
    v4 = *(_QWORD *)(v53[0] - 24);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_61:
  v53[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v53 + *(_QWORD *)(v53[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](v54);
  std::istream::~istream();
  MEMORY[0x20BD39C2C](v55);
  return v14;
}

void sub_20B8B8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a26 < 0)
    operator delete(__p);
  sub_20B82EC24(&a28);
  _Unwind_Resume(a1);
}

void sub_20B8B8684(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  void *v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *__p[4];
  void *v13[2];
  char v14;
  void **v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  sub_20B80BBD0(v13, a2);
  if ((a4 & 1) != 0 || (void **)(a1 + 16) == sub_20B871B2C(a1 + 8, v13))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20B80ACE0(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      __p[2] = *(void **)(a3 + 16);
    }
    v7 = __p[0];
    v16[0] = __p[1];
    *(void **)((char *)v16 + 7) = *(void **)((char *)&__p[1] + 7);
    v8 = HIBYTE(__p[2]);
    memset(__p, 0, 24);
    v15 = v13;
    v9 = sub_20B8B99C4((uint64_t **)(a1 + 8), v13, (uint64_t)&unk_20BA37B7A, (__int128 **)&v15);
    v10 = v9;
    if (*((char *)v9 + 79) < 0)
      operator delete((void *)v9[7]);
    v11 = v16[0];
    v10[7] = (uint64_t)v7;
    v10[8] = v11;
    *(uint64_t *)((char *)v10 + 71) = *(_QWORD *)((char *)v16 + 7);
    *((_BYTE *)v10 + 79) = v8;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_20B8B87B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8B8804(uint64_t a1, int a2, char **a3, uint64_t a4)
{
  void **v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string::size_type v22;
  char v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  const char **v30;
  const char *v31;
  size_t v32;
  const char *v33;
  size_t v34;
  const char *v35;
  uint64_t v36;
  const char **v37;
  size_t v38;
  uint64_t v39;
  const char *v40;
  const char **v41;
  const char *v42;
  const char *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  char *v47;
  uint64_t v48;
  char **v49;
  char *v50;
  char *v51;
  uint64_t result;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char **v56;
  char *v57;
  int v58;
  uint64_t v59;
  size_t i;
  int v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t *v71;
  char **v72;
  char *v73;
  char *v74;
  uint64_t v75;
  std::string::size_type v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  char *v83;
  int v84;
  _QWORD *v85;
  size_t v86;
  _QWORD *v87;
  _QWORD *v88;
  size_t v89;
  _QWORD *v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::string v98;
  std::string v99;
  std::string v100;
  char *v101;
  uint64_t v102;
  _QWORD v103[4];

  v103[2] = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      *(_QWORD *)(a1 + 64) = 7;
      v25 = *(char **)(a1 + 56);
    }
    else
    {
      v25 = (char *)(a1 + 56);
      *(_BYTE *)(a1 + 79) = 7;
    }
    strcpy(v25, "unknown");
    return 1;
  }
  sub_20B80BBD0(&v100, *a3);
  v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)&v100.__r_.__value_.__l + 2);
  sub_20B80BBD0(&v98, "MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n");
  v6 = std::string::append(&v98, "\nUsage: ", 8uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 79);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a1 + 56);
  else
    v9 = *(const std::string::value_type **)(a1 + 56);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 79);
  else
    v10 = *(_QWORD *)(a1 + 64);
  v11 = std::string::append(&v99, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v100, " [options] files\n", 0x11uLL);
  v14 = (std::string *)(a1 + 80);
  v15 = v13->__r_.__value_.__r.__words[0];
  v103[0] = v13->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v103 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0)
    operator delete(v14->__r_.__value_.__l.__data_);
  v17 = v103[0];
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v103 + 7);
  *(_BYTE *)(a1 + 103) = v16;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  sub_20B80BBD0(&v98, "mecab");
  v18 = std::string::append(&v98, " of ", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v99, "0.97", 4uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v100, 10);
  v103[0] = v100.__r_.__value_.__l.__size_;
  v22 = v100.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v103 + 7) = *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 7);
  v23 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  memset(&v100, 0, sizeof(v100));
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    v26 = SHIBYTE(v100.__r_.__value_.__r.__words[2]);
    v27 = v103[0];
    *(_QWORD *)(a1 + 104) = v22;
    *(_QWORD *)(a1 + 112) = v27;
    *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v103 + 7);
    *(_BYTE *)(a1 + 127) = v23;
    if (v26 < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
  }
  else
  {
    v24 = v103[0];
    *(_QWORD *)(a1 + 104) = v22;
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v103 + 7);
    *(_BYTE *)(a1 + 127) = v23;
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  v28 = *(const char **)a4;
  if (*(_QWORD *)a4)
  {
    v29 = 0;
    v30 = (const char **)(a4 + 40);
    v31 = *(const char **)a4;
    do
    {
      v32 = strlen(v31);
      v33 = *(v30 - 2);
      if (v33)
        v34 = v32 + strlen(v33) + 2;
      else
        v34 = v32 + 1;
      if (v34 > v29)
        v29 = v34;
      v35 = *v30;
      v30 += 5;
      v31 = v35;
    }
    while (v35);
    v36 = 0;
    v37 = (const char **)a4;
    do
    {
      v38 = strlen(v28);
      v39 = a4 + 40 * v36;
      v42 = *(const char **)(v39 + 24);
      v41 = (const char **)(v39 + 24);
      v40 = v42;
      if (v42)
        v38 += strlen(v40) + 1;
      std::string::append(v14, " -", 2uLL);
      std::string::push_back(v14, *(_BYTE *)(a4 + 40 * v36 + 8));
      std::string::append(v14, ", --", 4uLL);
      v43 = *v37;
      v44 = strlen(v43);
      std::string::append(v14, v43, v44);
      if (*v41)
      {
        std::string::push_back(v14, 61);
        v45 = strlen(*v41);
        std::string::append(v14, *v41, v45);
      }
      while (v38 <= v29)
      {
        std::string::push_back(v14, 32);
        ++v38;
      }
      v46 = strlen(*(const char **)(a4 + 40 * v36 + 32));
      std::string::append(v14, *(const std::string::value_type **)(a4 + 40 * v36 + 32), v46);
      std::string::push_back(v14, 10);
      ++v36;
      v37 = (const char **)(a4 + 40 * v36);
      v28 = *v37;
    }
    while (*v37);
  }
  std::string::push_back(v14, 10);
  v47 = *(char **)a4;
  v48 = a1;
  if (*(_QWORD *)a4)
  {
    v49 = (char **)(a4 + 40);
    do
    {
      v50 = *(v49 - 3);
      if (v50)
      {
        sub_20B80BBD0(&v100, v50);
        v48 = a1;
        sub_20B8B8684(a1, v47, (uint64_t)&v100, 1);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
      }
      v51 = *v49;
      v49 += 5;
      v47 = v51;
    }
    while (v51);
  }
  result = 1;
  if (a2 < 2)
    return result;
  v53 = (uint64_t *)(v48 + 32);
  v54 = v48 + 48;
  LODWORD(v55) = 1;
  v56 = a3;
  v94 = v48 + 48;
  while (1)
  {
    v57 = v56[(int)v55];
    if (*v57 != 45)
    {
      sub_20B80BBD0(&v99, v56[(int)v55]);
      v63 = *(_QWORD *)(a1 + 40);
      v62 = *(_QWORD *)(a1 + 48);
      if (v63 >= v62)
      {
        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *v53) >> 3);
        v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - *v53) >> 3);
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v66;
        v102 = v54;
        if (v68)
          v69 = (char *)sub_20B828D70(v54, v68);
        else
          v69 = 0;
        v76 = (std::string::size_type)&v69[24 * v65];
        v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        v100.__r_.__value_.__l.__size_ = v76;
        v101 = &v69[24 * v68];
        v77 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        *(_QWORD *)(v76 + 16) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
        *(_OWORD *)v76 = v77;
        memset(&v99, 0, sizeof(v99));
        v100.__r_.__value_.__r.__words[2] = v76 + 24;
        sub_20B83BAB4(v53, &v100);
        v78 = *(_QWORD *)(a1 + 40);
        sub_20B83BC3C((uint64_t)&v100);
        v79 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a1 + 40) = v78;
        if (v79 < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
      }
      else
      {
        v64 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        *(_QWORD *)(v63 + 16) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
        *(_OWORD *)v63 = v64;
        *(_QWORD *)(a1 + 40) = v63 + 24;
      }
LABEL_99:
      v56 = a3;
      goto LABEL_100;
    }
    v58 = v57[1];
    if (v57[1])
      break;
LABEL_100:
    LODWORD(v55) = v55 + 1;
    if ((int)v55 >= a2)
      return 1;
  }
  v59 = (int)v55;
  if (v58 != 45)
  {
    v74 = *(char **)a4;
    if (!*(_QWORD *)a4)
      goto LABEL_106;
    if (*(unsigned __int8 *)(a4 + 8) != v58)
    {
      v75 = 0;
      v80 = (unsigned __int8 *)(a4 + 48);
      while (1)
      {
        v74 = (char *)*((_QWORD *)v80 - 1);
        if (!v74)
          break;
        v81 = *v80;
        v80 += 40;
        ++v75;
        if (v81 == v58)
          goto LABEL_85;
      }
LABEL_106:
      v86 = strlen(a3[(int)v55]);
      v87 = sub_20B828F84(v85, (uint64_t)a3[(int)v55], v86);
      return 0;
    }
    v75 = 0;
LABEL_85:
    v84 = v57[2];
    v83 = v57 + 2;
    v82 = v84;
    v54 = v94;
    if (!*(_QWORD *)(a4 + 40 * v75 + 24))
    {
      if (v82)
        goto LABEL_112;
      LODWORD(v100.__r_.__value_.__l.__data_) = 1;
      sub_20B8B923C(a1, v74);
      goto LABEL_99;
    }
    if (v82)
    {
      sub_20B80BBD0(&v100, v83);
      sub_20B8B8684(a1, v74, (uint64_t)&v100, 1);
      goto LABEL_104;
    }
    v55 = (int)v55 + 1;
    if ((_DWORD)v59 + 1 == a2)
      goto LABEL_113;
    sub_20B80BBD0(&v100, a3[v55]);
    sub_20B8B8684(a1, v74, (uint64_t)&v100, 1);
    v56 = a3;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    goto LABEL_100;
  }
  for (i = 0; ; ++i)
  {
    v61 = v57[i + 2];
    if (!v57[i + 2] || v61 == 61)
      break;
  }
  if (!i)
    return 1;
  v70 = *(char **)a4;
  if (!*(_QWORD *)a4)
    goto LABEL_106;
  v71 = v53;
  v72 = (char **)(a4 + 40);
  while (strlen(v70) != i || strncmp(v57 + 2, v70, i))
  {
    v73 = *v72;
    v72 += 5;
    v70 = v73;
    if (!v73)
      goto LABEL_106;
  }
  if (!*(v72 - 2))
  {
    v54 = v94;
    if (v61 == 61)
    {
LABEL_112:
      v89 = strlen(a3[(int)v55]);
      v90 = sub_20B828F84(v88, (uint64_t)a3[(int)v55], v89);
      return 0;
    }
    v53 = v71;
    LODWORD(v100.__r_.__value_.__l.__data_) = 1;
    sub_20B8B923C(a1, v70);
    goto LABEL_99;
  }
  v53 = v71;
  if (v61 == 61)
  {
    sub_20B80BBD0(&v100, &v57[i + 3]);
    v54 = v94;
    sub_20B8B8684(a1, v70, (uint64_t)&v100, 1);
    goto LABEL_104;
  }
  v55 = (int)v55 + 1;
  v54 = v94;
  if ((_DWORD)v59 + 1 != a2)
  {
    sub_20B80BBD0(&v100, a3[v55]);
    sub_20B8B8684(a1, v70, (uint64_t)&v100, 1);
LABEL_104:
    v56 = a3;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    goto LABEL_100;
  }
LABEL_113:
  v92 = strlen(a3[v59]);
  v93 = sub_20B828F84(v91, (uint64_t)a3[v59], v92);
  return 0;
}

void sub_20B8B9190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8B923C(uint64_t a1, char *a2)
{
  _QWORD *v3;
  const std::ios_base *v4;
  uint64_t width;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string::size_type v19;
  char v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25[2];
  char v26;
  std::locale v27;
  _QWORD *v28;
  std::string v29;
  __int128 *v30[13];
  char v31;
  uint64_t v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  sub_20B80BBD0(v25, a2);
  sub_20B83BFEC((uint64_t)v30);
  memset(&v29, 0, sizeof(v29));
  v3 = (_QWORD *)std::ostream::operator<<();
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    goto LABEL_29;
  MEMORY[0x20BD39A04](&v33, v30, 0);
  if (!v33)
    goto LABEL_27;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    *v29.__r_.__value_.__l.__data_ = 0;
    v29.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v29.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = 0;
  }
  v4 = (const std::ios_base *)((char *)v30 + *((_QWORD *)v30[0] - 3));
  width = v4->__width_;
  if (width <= 1)
    v6 = 1;
  else
    v6 = v4->__width_;
  std::ios_base::getloc(v4);
  v7 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v27);
  v8 = 0;
  if (width >= 1)
    v9 = v6;
  else
    v9 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v10 = *(__int128 **)((char *)&v30[5] + *((_QWORD *)v30[0] - 3));
    v11 = (_BYTE *)v10[3];
    if (v11 == (_BYTE *)v10[4])
      break;
    LOBYTE(v12) = *v11;
LABEL_15:
    if ((v12 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v12) & 0x4000) != 0)
    {
      v15 = 0;
      goto LABEL_24;
    }
    std::string::push_back(&v29, v12);
    v13 = *(__int128 **)((char *)&v30[5] + *((_QWORD *)v30[0] - 3));
    v14 = v13[3];
    if (v14 == v13[4])
      (*(void (**)(_QWORD *))(*v13 + 80))(v13);
    else
      v13[3] = v14 + 1;
    if (v9 == ++v8)
    {
      v15 = 0;
      v16 = v30[0];
      *(__int128 **)((char *)&v30[3] + *((_QWORD *)v30[0] - 3)) = 0;
      goto LABEL_26;
    }
  }
  v12 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
  if (v12 != -1)
    goto LABEL_15;
  v15 = 2;
LABEL_24:
  v16 = v30[0];
  *(__int128 **)((char *)&v30[3] + *((_QWORD *)v30[0] - 3)) = 0;
  if (!v8)
    v15 |= 4u;
LABEL_26:
  std::ios_base::clear((std::ios_base *)((char *)v30 + *((_QWORD *)v16 - 3)), *(_DWORD *)((char *)&v30[4] + *((_QWORD *)v16 - 3)) | v15);
LABEL_27:
  if ((*((_BYTE *)&v30[4] + *((_QWORD *)v30[0] - 3)) & 5) == 0
    && (v17 = sub_20B871C3C(v30), (*((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 32) & 2) != 0))
  {
    v34[0] = v29.__r_.__value_.__l.__size_;
    v19 = v29.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else
  {
LABEL_29:
    v18 = (_QWORD *)operator new();
    *v18 = 0;
    v18[1] = 0;
    v18[2] = 0;
    v27.__locale_ = (std::locale::__imp *)&unk_24C467088;
    v28 = v18;
    v34[0] = 0;
    *(_QWORD *)((char *)v34 + 7) = 0;
    sub_20B894454(&v27);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v19 = 0;
    v20 = 0;
  }
  v30[0] = *(__int128 **)MEMORY[0x24BEDB7F0];
  v21 = *(__int128 **)(MEMORY[0x24BEDB7F0] + 72);
  *(__int128 **)((char *)v30 + *((_QWORD *)v30[0] - 3)) = *(__int128 **)(MEMORY[0x24BEDB7F0] + 64);
  v30[2] = v21;
  v30[3] = (__int128 *)(MEMORY[0x24BEDB848] + 16);
  if (v31 < 0)
    operator delete(v30[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v32);
  v30[0] = (__int128 *)v25;
  v22 = sub_20B8B99C4((uint64_t **)(a1 + 8), v25, (uint64_t)&unk_20BA37B7A, v30);
  v23 = v22;
  if (*((char *)v22 + 79) < 0)
    operator delete((void *)v22[7]);
  v24 = v34[0];
  v23[7] = v19;
  v23[8] = v24;
  *(uint64_t *)((char *)v23 + 71) = *(_QWORD *)((char *)v34 + 7);
  *((_BYTE *)v23 + 79) = v20;
  if (v26 < 0)
    operator delete(v25[0]);
}

void sub_20B8B95E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  uint64_t v25;

  if (a2)
  {
    std::locale::~locale(&a16);
    __cxa_begin_catch(exception_object);
    v25 = a24;
    *(_DWORD *)((char *)&a24 + *(_QWORD *)(a24 - 24) + 32) |= 1u;
    if ((*((_BYTE *)&a24 + *(_QWORD *)(v25 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x20B8B9428);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8B96C8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char v16;
  char v17;
  int v18;
  int v20;
  uint64_t v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = operator new[]();
  v7 = v6;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v55 = 0;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = "mecab";
  LOBYTE(v8) = *a2;
  if (*a2)
  {
    v9 = 0;
    v10 = 1;
    v11 = MEMORY[0x24BDAC740];
    v12 = (char *)v6;
    while (1)
    {
      v13 = v10;
      while (1)
      {
        v14 = (v8 & 0x80) != 0
            ? __maskrune((char)v8, 0x4000uLL)
            : *(_DWORD *)(v11 + 4 * (char)v8 + 60) & 0x4000;
        if (!v14 || v9 != 0)
          break;
        *v12++ = 0;
        v16 = *++a2;
        LOBYTE(v8) = v16;
      }
      *v12 = *a2;
      if (!*a2)
        break;
      ++v10;
      (&v23)[v13] = v12;
      if (v13 == 511)
      {
        LODWORD(v13) = 512;
        break;
      }
      v17 = *a2;
      if (*a2)
      {
        while (1)
        {
          v18 = v17 < 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v11 + 4 * v17 + 60) & 0x4000;
          v8 = *a2;
          if (v18 && v9 == 0)
            break;
          if (v8 == 92)
          {
            v9 = 1;
          }
          else
          {
            v9 = 0;
            *v12++ = v8;
          }
          v20 = *++a2;
          v17 = v20;
          if (!v20)
            goto LABEL_29;
        }
        v9 = 0;
        if (*a2)
          continue;
      }
LABEL_29:
      *v12 = 0;
      LOBYTE(v8) = *a2;
      if (!*a2)
      {
        LODWORD(v13) = v13 + 1;
        break;
      }
    }
  }
  else
  {
    LODWORD(v13) = 1;
  }
  v21 = sub_20B8B8804(a1, v13, &v23, a3);
  MEMORY[0x20BD39C80](v7, 0x1000C8077774924);
  return v21;
}

void sub_20B8B9910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8B993C(uint64_t a1)
{
  const char *v2;
  size_t v3;

  if (sub_20B8A9DA8(a1, "help"))
  {
    v2 = (const char *)(a1 + 80);
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_4:
      v3 = strlen(v2);
      sub_20B828F84(MEMORY[0x24BEDB318], (uint64_t)v2, v3);
      return 0;
    }
LABEL_3:
    v2 = *(const char **)v2;
    goto LABEL_4;
  }
  if (sub_20B8A9DA8(a1, "version"))
  {
    v2 = (const char *)(a1 + 104);
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  return 1;
}

uint64_t *sub_20B8B99C4(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20B88A3C0((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20B8B9A6C((uint64_t)a1, a4, (uint64_t)v10);
    sub_20B8296A0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20B8B9B00((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20B8B9A6C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20B80ACE0(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20B8B9AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8B9B00(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B8B9B00(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B892DCC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_20B8B9B44(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (qword_25472B310 != -1)
    dispatch_once(&qword_25472B310, &unk_24C46CDB0);
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v61 = 0u;
  v4 = (void *)qword_25472B308;
  v5 = objc_msgSend_length(a1, a2, a3);
  v60 = (void *)objc_msgSend_matchesInString_options_range_(v4, v6, (uint64_t)a1, 0, 0, v5);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v7, (uint64_t)&v61, v65, 16);
  if (result)
  {
    v11 = result;
    v12 = *(_QWORD *)v62;
    while (2)
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v62 != v12)
          objc_enumerationMutation(v60);
        v14 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v13);
        if (v14 && objc_msgSend_numberOfRanges(*(void **)(*((_QWORD *)&v61 + 1) + 8 * v13), v9, v10) == 6)
        {
          objc_msgSend_rangeAtIndex_(v14, v9, 3);
          v16 = v15;
          v17 = objc_msgSend_rangeAtIndex_(v14, v15, 2);
          v59 = (void *)objc_msgSend_substringWithRange_(a1, v18, v17, v18);
          v20 = objc_msgSend_rangeAtIndex_(v14, v19, 5);
          v58 = objc_msgSend_substringWithRange_(a1, v21, v20, v21);
          v23 = objc_msgSend_rangeAtIndex_(v14, v22, 1);
          v25 = (void *)objc_msgSend_substringWithRange_(a1, v24, v23, v24);
          v27 = objc_msgSend_rangeAtIndex_(v14, v26, 4);
          v29 = (void *)objc_msgSend_substringWithRange_(a1, v28, v27, v28);
          objc_msgSend_length(v25, v30, v31);
          MEMORY[0x24BDAC7A8]();
          v33 = (char *)&v57 - v32;
          objc_msgSend_length(v29, v34, v35);
          MEMORY[0x24BDAC7A8]();
          v37 = (char *)&v57 - v36;
          v40 = objc_msgSend_length(v25, v38, v39);
          objc_msgSend_getCharacters_range_(v25, v41, (uint64_t)v33, 0, v40);
          v44 = objc_msgSend_length(v29, v42, v43);
          objc_msgSend_getCharacters_range_(v29, v45, (uint64_t)v37, 0, v44);
          v48 = objc_msgSend_length(v25, v46, v47);
          v49 = sub_20B8DA374((uint64_t)v33, v48, 0, 0);
          v52 = objc_msgSend_length(v29, v50, v51);
          v53 = sub_20B8DA374((uint64_t)v37, v52, 0, 0);
          if (v16)
            v54 = objc_msgSend_isEqualToString_(v59, v9, v58) ^ 1;
          else
            v54 = 0;
          if (v49 == v53)
            v54 = 1;
          v55 = !v49 || v53 == 0;
          if (v55 || v54 == 0)
            return 1;
        }
        ++v13;
      }
      while (v11 != v13);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v60, v9, (uint64_t)&v61, v65, 16);
      v11 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_20B8B9E6C()
{
  id v0;
  const char *v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x24BDD1798]);
  result = objc_msgSend_initWithPattern_options_error_(v0, v1, (uint64_t)CFSTR("([0-9０-９〇一二三四五六七八九十]{1,3})([時分秒年月日])(か|から|〜｜・|、)?([0-9０-９〇一二三四五六七八九十]{1,3})([時分秒年月日])"), 0, 0);
  qword_25472B308 = result;
  return result;
}

void sub_20B8B9EA4(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  unsigned __int8 v10;
  _BOOL4 v12;
  std::string *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _BOOL4 v19;
  __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  __int16 *v27;
  BOOL v28;
  int v29;
  const char *v30;
  BOOL v31;
  _BOOL4 v32;
  const char *v33;
  _BOOL4 v34;
  int v35;
  unint64_t v36;
  std::string *v37;
  std::string::size_type v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  unint64_t v43;
  unint64_t v44;
  std::string *p_p;
  std::string::size_type size;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  std::string *v51;
  std::string __p;

  v10 = atomic_load((unsigned __int8 *)&qword_25472B320);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25472B320))
  {
    word_25472B318 = *(_WORD *)(*(_QWORD *)(a1 + 88) + 50);
    __cxa_guard_release(&qword_25472B320);
  }
  v12 = *(unsigned __int16 *)(a4 + 30) == (unsigned __int16)word_25472B318
     || *(unsigned __int16 *)(a4 + 32) == (unsigned __int16)word_25472B318;
  v48 = v12;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  a6->__r_.__value_.__r.__words[0] = 0;
  v13 = a6;
  v51 = a6;
  std::string::reserve(a6, 3 * a3);
  if (!a3)
  {
    v43 = 0;
    goto LABEL_92;
  }
  v49 = a3;
  v50 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = 0;
    v17 = (unsigned __int16)a2[v14];
    v19 = (v17 - 48) < 0xA || (unsigned __int16)(v17 + 240) < 0xAu;
    while ((unsigned __int16)word_20BA94376[v16] != v17)
    {
      if (++v16 == 13)
      {
        v20 = 0;
        goto LABEL_20;
      }
    }
    v20 = &word_20BA94376[v16];
LABEL_20:
    v21 = 0;
    if (v20)
      v22 = v20 - word_20BA94376;
    else
      v22 = -1;
    while ((unsigned __int16)asc_20BA55B5C[v21] != v17)
    {
      if (++v21 == 32)
      {
        v23 = 0;
        goto LABEL_27;
      }
    }
    v23 = &asc_20BA55B5C[v21];
LABEL_27:
    v24 = 0;
    if (v23)
      v25 = (char *)v23 - (char *)asc_20BA55B5C == -2;
    else
      v25 = 1;
    v26 = !v25;
    while ((unsigned __int16)word_20BA55B9E[v24] != v17)
    {
      if (++v24 == 37)
      {
        v27 = 0;
        goto LABEL_37;
      }
    }
    v27 = &word_20BA55B9E[v24];
LABEL_37:
    if (v27)
      v28 = (char *)v27 - (char *)word_20BA55B9E == -2;
    else
      v28 = 1;
    v29 = !v28;
    if (v48)
    {
      v30 = (const char *)&unk_20BA94372;
      if (v17 != 65292)
        v30 = 0;
      v31 = v17 == 44;
      v32 = v17 == 44 || v17 == 65292;
      if (v31)
        v33 = ",";
      else
        v33 = v30;
      v34 = v33 - "," != -2 && v32;
    }
    else
    {
      v34 = 0;
    }
    v35 = v22 != -1 || v19;
    if ((v29 | v26 | v34 | v35) == 1)
    {
      if (v14 > v50)
      {
        v36 = a2 ? v14 - v50 : 0;
        sub_20B8D15F4(&a2[v50], v36, &__p);
        v37 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v38 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(v51, (const std::string::value_type *)v37, v38);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v50 = v14 + 1;
    }
    if (v34)
    {
      v13 = v51;
      goto LABEL_88;
    }
    if (v19)
    {
      v39 = "0";
      v13 = v51;
      if (!v15 && v14 != 0)
      {
        std::string::append(v51, " ", 1uLL);
        v39 = "0";
      }
    }
    else
    {
      v39 = " ";
      v13 = v51;
      if (!v15)
        goto LABEL_80;
    }
    std::string::append(v13, v39, 1uLL);
LABEL_80:
    if (v22 != -1)
    {
      v40 = strlen(off_24C49BA48[v22]);
      std::string::append(v13, off_24C49BA48[v22], v40);
      v15 = v19;
      goto LABEL_88;
    }
    if (v26)
    {
      std::string::push_back(v13, 32);
      v41 = "xSYMx";
      v42 = 5;
LABEL_86:
      std::string::append(v13, v41, v42);
      std::string::push_back(v13, 32);
      v15 = v19;
      goto LABEL_88;
    }
    if (v29)
    {
      std::string::push_back(v13, 32);
      v41 = "xOLTRx";
      v42 = 6;
      goto LABEL_86;
    }
    v15 = v19;
LABEL_88:
    ++v14;
  }
  while (v14 != v49);
  a3 = v49;
  v43 = v50;
  if (v15)
  {
    std::string::append(v13, " ", 1uLL);
    goto LABEL_103;
  }
LABEL_92:
  if (a2)
    v44 = a3 - v43;
  else
    v44 = 0;
  sub_20B8D15F4(&a2[v43], v44, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(v13, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_103:
  if (a5 && a3 == 1 && *a2 == 8451)
  {
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
    {
      v13->__r_.__value_.__l.__size_ = 3;
      v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v13->__r_.__value_.__s + 23) = 3;
    }
    LODWORD(v13->__r_.__value_.__l.__data_) = 10926821;
  }
}

void sub_20B8BA300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(a12 + 23) < 0)
    operator delete(*(void **)a12);
  _Unwind_Resume(exception_object);
}

void sub_20B8BA350(char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  int v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  std::string::size_type size;
  const char *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  char *v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  const char *v28;
  std::string::size_type v29;
  size_t v30;
  std::string *v31;
  void *v32;
  std::string v33;
  std::string v34;
  void *__p[2];
  int64_t v36;
  std::string v37;

  memset(&v37, 0, sizeof(v37));
  std::string::reserve(&v37, 3 * a2);
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = &a1[2 * v6];
      v10 = *(unsigned __int16 *)v9;
      if (v10 == 44)
        goto LABEL_60;
      if ((v10 - 48) < 0xA || (unsigned __int16)(v10 + 240) < 0xAu)
      {
LABEL_58:
        if (!v7)
          ++v8;
        goto LABEL_60;
      }
      v12 = 0;
      while ((unsigned __int16)word_20BA94392[v12] != v10)
      {
        if (++v12 == 10)
          goto LABEL_14;
      }
      if (v12 != -1)
        goto LABEL_58;
LABEL_14:
      if (a2 == 1)
      {
        if (*(unsigned __int16 *)v9 <= 0x5340u)
        {
          if (v10 == 19975)
            goto LABEL_24;
LABEL_22:
          if (v10 == 20740 || v10 == 20806)
          {
LABEL_24:
            v14 = v8 + v7;
            if (v14 >= 4)
              v14 = 4;
            if (v14 > 1)
              goto LABEL_34;
            size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v37.__r_.__value_.__l.__size_;
            if (v10 != 19975 || size)
            {
LABEL_34:
              v16 = (const char *)*((_QWORD *)&off_24C49BAB0 + v14);
              sub_20B8D15F4(v9, a1 != 0, &v33);
              v17 = strlen(v16);
              v18 = std::string::insert(&v33, 0, v16, v17);
              v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
              v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
              v18->__r_.__value_.__l.__size_ = 0;
              v18->__r_.__value_.__r.__words[2] = 0;
              v18->__r_.__value_.__r.__words[0] = 0;
              v20 = std::string::append(&v34, " ", 1uLL);
              v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
              v36 = v20->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v21;
              v20->__r_.__value_.__l.__size_ = 0;
              v20->__r_.__value_.__r.__words[2] = 0;
              v20->__r_.__value_.__r.__words[0] = 0;
              if (v36 >= 0)
                v22 = __p;
              else
                v22 = (void **)__p[0];
              if (v36 >= 0)
                v23 = HIBYTE(v36);
              else
                v23 = (std::string::size_type)__p[1];
              std::string::append(&v37, (const std::string::value_type *)v22, v23);
              if (SHIBYTE(v36) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34.__r_.__value_.__l.__data_);
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v33.__r_.__value_.__l.__data_);
              v8 = 0;
              v7 = 0;
            }
            else
            {
              if (v8 <= 1)
                v8 = 1;
              v7 = 4;
            }
            goto LABEL_60;
          }
          goto LABEL_65;
        }
        switch(v10)
        {
          case 21313:
            v24 = "AS~vCS";
            goto LABEL_64;
          case 21315:
            goto LABEL_54;
          case 30334:
            goto LABEL_62;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v9 <= 0x5340u)
        {
          if (*(unsigned __int16 *)v9 <= 0x5103u)
          {
            if (v10 == 19975)
              goto LABEL_24;
            v13 = 20309;
LABEL_57:
            if (v10 == v13)
              goto LABEL_58;
            goto LABEL_65;
          }
          goto LABEL_22;
        }
        if (*(unsigned __int16 *)v9 > 0x656Fu)
        {
          if (v10 != 30334)
          {
            v13 = 25968;
            goto LABEL_57;
          }
LABEL_62:
          v24 = "~vCS";
LABEL_64:
          if (v24 - "AS~vCS" != -2)
          {
            v25 = (unint64_t)(v24 - "AS~vCS") >> 1;
            if (v8 <= 1)
              v26 = 1;
            else
              v26 = v8;
            if ((int)v25 + 1 > v7)
            {
              v8 = v26;
              v7 = v25 + 1;
            }
            goto LABEL_60;
          }
          goto LABEL_65;
        }
        v24 = "AS~vCS";
        if (v10 == 21313)
          goto LABEL_64;
        if (v10 == 21315)
        {
LABEL_54:
          v24 = "CS";
          goto LABEL_64;
        }
      }
LABEL_65:
      if (!v6)
      {
        sub_20B8D15F4(a1, a2, (std::string *)a3);
        goto LABEL_88;
      }
LABEL_60:
      if (++v6 == a2)
      {
        v27 = v7 + v8;
        goto LABEL_73;
      }
    }
  }
  v27 = 0;
LABEL_73:
  if (v27 >= 4)
    v27 = 4;
  v28 = (const char *)*((_QWORD *)&off_24C49BAB0 + v27);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v29 = v37.__r_.__value_.__l.__size_;
  v30 = strlen(v28);
  sub_20B8298D4(a3, v29 + v30);
  if (*(char *)(a3 + 23) < 0)
    a3 = *(_QWORD *)a3;
  if (v29)
  {
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v37;
    else
      v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    memmove((void *)a3, v31, v29);
  }
  v32 = (void *)(a3 + v29);
  if (v30)
    memmove(v32, v28, v30);
  *((_BYTE *)v32 + v30) = 0;
LABEL_88:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_20B8BA73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_20B8BA7AC@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, std::string *a6@<X8>)
{
  unint64_t v7;
  std::string *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  int v21;
  uint64_t v22;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v25;
  uint64_t v26;
  int v27;
  std::string::size_type result;
  unint64_t v29;
  BOOL v33;
  std::string __p;

  v7 = a3;
  v9 = a6;
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, 3 * a3 - 0x3333333333333333 * ((a4[1] - *a4) >> 3));
  v10 = *a4;
  if (a4[1] != *a4)
  {
    v11 = 0;
    v12 = 0;
    v13 = a2;
    v14 = v7;
    do
    {
      v15 = (int *)(v10 + 40 * v12);
      v16 = *((unsigned __int16 *)v15 + 12);
      v17 = *v15;
      v33 = *v15 == 5;
      if ((a5 & 1) == 0)
      {
        v19 = "xPERGx";
        v20 = 6;
        switch(v17)
        {
          case 3:
          case 9:
            v19 = "墸";
            v20 = 3;
            goto LABEL_38;
          case 4:
          case 11:
            goto LABEL_38;
          case 8:
            goto LABEL_13;
          default:
            goto LABEL_15;
        }
      }
      v18 = v17 == 4 || v17 == 11;
      if (v18)
      {
        v19 = "xPERGx";
        v20 = 6;
      }
      else if (v17 == 8)
      {
LABEL_13:
        v21 = *(unsigned __int16 *)(v10 + 40 * v12 + 30);
        if ((v21 - 1249) >= 3)
        {
          if (v21 == 1252)
            v19 = "xLOCx";
          else
            v19 = "xPROPNx";
          if (v21 == 1252)
            v20 = 5;
          else
            v20 = 7;
        }
        else
        {
          v19 = (&off_24C49BAD8)[(__int16)(v21 - 1249)];
          v20 = 6;
        }
      }
      else
      {
LABEL_15:
        if (v11)
        {
          v22 = v13 ? *((unsigned __int16 *)v15 + 12) : 0;
          v29 = v22;
          if (sub_20B8DA20C(v13, v22) && (v7 < 2 || !a2 || *a2 != 1396919808))
          {
            sub_20B8D15F4(v13, v29, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
LABEL_67:
            v9 = a6;
            std::string::append(a6, (const std::string::value_type *)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_69;
          }
        }
        if (v17 != 10)
        {
          if (v17 == 5)
          {
            if (v13)
              v25 = v16;
            else
              v25 = 0;
            (*(void (**)(std::string *__return_ptr, uint64_t *, _WORD *, uint64_t))(*a1 + 48))(&__p, a1, v13, v25);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
          }
          else
          {
            if (v14 && v13 && *v13 == 8451 && v7 && a2 && (*(_WORD *)a2 == 20309 || v7 >= 2 && *a2 == 814952554))
              v11 = 0;
            if (v13)
              v26 = v16;
            else
              v26 = 0;
            (*(void (**)(std::string *__return_ptr, uint64_t *, _WORD *, uint64_t, int *, BOOL))(*a1 + 40))(&__p, a1, v13, v26, v15, v11);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
          }
          goto LABEL_67;
        }
        v19 = "xPROPNx";
        v20 = 7;
      }
LABEL_38:
      v9 = a6;
      std::string::append(a6, v19, v20);
LABEL_69:
      if (v12 == -1 - 0x3333333333333333 * ((a4[1] - *a4) >> 3))
      {
        ++v12;
      }
      else
      {
        v27 = sub_20B8B2630(a1[11], *(unsigned __int16 *)(*a4 + 40 * v12 + 32), *(unsigned __int16 *)(*a4 + 40 * v12 + 70));
        ++v12;
        if (v27)
          std::string::append(v9, " ", 1uLL);
      }
      v18 = v13 == 0;
      a2 = v13;
      v13 += v16;
      v7 = v14;
      if (v18)
        v14 = 0;
      else
        v14 -= v16;
      v10 = *a4;
      v11 = v33;
    }
    while (v12 < 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3));
  }
  while (1)
  {
    result = std::string::find(v9, "気 に なる", 0, 0xEuLL);
    if (result == -1)
      break;
    std::string::replace(v9, result, 0xEuLL, "気になる", 0xCuLL);
  }
  return result;
}

void sub_20B8BABE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(a14 + 23) < 0)
    operator delete(*(void **)a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8BAC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v4, v6, v7, 0);
}

void sub_20B8BACC4(_QWORD *a1)
{
  sub_20B8BACE8(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8BACE8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_24C461790;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t sub_20B8BAD60(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v6;
  const void *v7;
  uint64_t v8;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v8 = result;
    v6 = *(_QWORD *)(a1 + 32);
    if (!v6)
      sub_20B80BB74();
    v7 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8);
    CFDictionaryAddValue(a2, CFSTR("acceptedCandidateTypingStyle"), v7);
    return 1;
  }
  return result;
}

uint64_t sub_20B8BADF8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B8BAE48(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B8BAEA8(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v8;
  void *v9;
  const void *v10;
  _BOOL8 result;
  char v12;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5 + a2;
  if (v3)
  {
    if (v6 >= v4)
    {
      if (!v4)
      {
        *(_QWORD *)(a1 + 16) = 0x2000;
        *(_QWORD *)(a1 + 24) = operator new[]();
        v4 = *(_QWORD *)(a1 + 16);
        v6 = *(_QWORD *)(a1 + 8) + a2;
      }
      do
      {
        v8 = v6 >= 2 * v4;
        v4 *= 2;
      }
      while (v8);
      *(_QWORD *)(a1 + 16) = v4;
      v9 = (void *)operator new[]();
      v10 = *(const void **)(a1 + 24);
      memcpy(v9, v10, *(_QWORD *)(a1 + 8));
      if (v10)
        MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
      *(_QWORD *)(a1 + 24) = v9;
    }
    return 1;
  }
  else
  {
    v8 = v6 >= v4;
    result = v6 < v4;
    v12 = v8;
    *(_BYTE *)(a1 + 33) = v12;
  }
  return result;
}

uint64_t sub_20B8BAF88(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C467230;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_20B8BAFDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C467230;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
    *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8BB040(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (sub_20B8BAEA8(a1, v4))
  {
    memcpy((void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 8)), __s, v4);
    *(_QWORD *)(a1 + 8) += v4;
  }
  return a1;
}

uint64_t sub_20B8BB0AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C466E40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0x3FE8000000000000;
  sub_20B827F10(a1 + 48);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  return a1;
}

void sub_20B8BB0FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8BB138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_24C466E40;
  v2 = a1 + 48;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](a1 + 160);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return a1;
}

void sub_20B8BB210(uint64_t a1)
{
  sub_20B8BB138(a1);
  JUMPOUT(0x20BD39CB0);
}

void **sub_20B8BB234(uint64_t a1)
{
  return sub_20B8715E0(a1 + 48);
}

BOOL sub_20B8BB23C(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;

  v4 = operator new();
  sub_20B892448(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v6 = sub_20B892714(v4, a2);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 + 40);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  }
  return v6;
}

void sub_20B8BB2E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C402015D7FELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8BB30C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v6;

  if (*(_QWORD *)(a2 + 8))
    v2 = *(_QWORD *)(a2 + 24) == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (!v2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    *(_QWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  }
  return v3;
}

uint64_t sub_20B8BB37C(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t sub_20B8BB39C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 2) & 1;
}

double sub_20B8BB3A8(uint64_t a1, float a2)
{
  double result;

  result = a2;
  *(double *)(a1 + 40) = result;
  return result;
}

float sub_20B8BB3B4(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t sub_20B8BB3C0(uint64_t result, unsigned int a2)
{
  if (a2 <= 2)
    *(_DWORD *)(result + 32) |= dword_20BA43924[a2];
  return result;
}

uint64_t sub_20B8BB3E4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 32);
  if ((v1 & 8) != 0)
    return 2;
  else
    return (v1 >> 1) & 1;
}

uint64_t sub_20B8BB3FC(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t sub_20B8BB41C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 5) & 1;
}

uint64_t sub_20B8BB428(uint64_t a1, uint64_t a2)
{
  return sub_20B86FE04(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 8), a2);
}

uint64_t sub_20B8BB434(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;

  if (!a2)
    return 0;
  v8 = (_QWORD *)sub_20B8BB4F0(a1);
  sub_20B8BB538(a1);
  if ((a4 & 2) == 0)
    (*(void (**)(_QWORD *))*v8)(v8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v8 + 80))(v8, a2, a3);
  if (sub_20B870088(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v8, a4, 0, 0))
    return (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  else
    return 0;
}

uint64_t sub_20B8BB4F0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 24);
  if (!result)
  {
    result = sub_20BA11000();
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3);
      return *(_QWORD *)(a1 + 24);
    }
  }
  return result;
}

uint64_t sub_20B8BB538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;

  v2 = sub_20B8BB4F0(a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 176))(v2, *(unsigned int *)(a1 + 32));
  v3 = sub_20B8BB4F0(a1);
  v4 = *(double *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 112))(v3, v4);
}

uint64_t sub_20B8BB580(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 a5, __int16 a6)
{
  _QWORD *v12;

  if (!a2)
    return 0;
  v12 = (_QWORD *)sub_20B8BB4F0(a1);
  sub_20B8BB538(a1);
  if ((a4 & 2) == 0)
    (*(void (**)(_QWORD *))*v12)(v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + 80))(v12, a2, a3);
  if (sub_20B870088(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v12, a4, a5, a6))
    return (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  else
    return 0;
}

uint64_t sub_20B8BB650(uint64_t a1, uint64_t a2, int a3)
{
  return sub_20B8712A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2, a3);
}

uint64_t sub_20B8BB65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA0BC7C(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2, a3);
}

uint64_t sub_20B8BB66C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  return sub_20BA0BD00(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2, a3);
}

void sub_20B8BB67C(uint64_t a1)
{
  sub_20B871268(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t sub_20B8BB688(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_20B871774(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 88), a2, a3);
}

uint64_t sub_20B8BB6A0(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = (void (***)(_QWORD))sub_20B8BB4F0(a1);
  (**v2)(v2);
  v3 = sub_20B8BB4F0(a1);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
  v5 = (_QWORD *)v4[2];
  v5[4] = 0;
  v5[5] = 0;
  v7 = v5[1];
  v6 = v5[2];
  if (v6 == v7)
  {
    v7 = v5[2];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x20BD39C80](v9, 0x1070C80C36FC988);
        v7 = v5[1];
        v6 = v5[2];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v5[2] = v7;
  v10 = (_QWORD *)v4[4];
  if (v10)
  {
    v10[4] = 0;
    v10[5] = 0;
    v12 = v10[1];
    v11 = v10[2];
    if (v11 == v12)
    {
      v12 = v10[2];
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(v12 + 8 * v13);
        if (v14)
        {
          MEMORY[0x20BD39C80](v14, 0x1020C80EDCEB4C7);
          v12 = v10[1];
          v11 = v10[2];
        }
        ++v13;
      }
      while (v13 < (v11 - v12) >> 3);
    }
    v10[2] = v12;
  }
  v15 = (_QWORD *)v4[6];
  if (v15)
  {
    v15[4] = 0;
    v15[5] = 0;
    v17 = v15[1];
    v16 = v15[2];
    if (v16 == v17)
    {
      v17 = v15[2];
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = *(_QWORD *)(v17 + 8 * v18);
        if (v19)
        {
          MEMORY[0x20BD39C80](v19, 0x1050C80717B85FCLL);
          v17 = v15[1];
          v16 = v15[2];
        }
        ++v18;
      }
      while (v18 < (v16 - v17) >> 3);
    }
    v15[2] = v17;
  }
  v20 = v4[8];
  if (v20)
  {
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
  }
  v21 = (_QWORD *)v4[10];
  if (v21)
  {
    v21[4] = 0;
    v21[5] = 0;
    v23 = v21[1];
    v22 = v21[2];
    if (v22 == v23)
    {
      v23 = v21[2];
    }
    else
    {
      v24 = 0;
      v25 = 8;
      do
      {
        v26 = *(_QWORD *)(v23 + v25);
        if (v26)
        {
          MEMORY[0x20BD39C80](v26, 0x1000C80BDFB0063);
          v23 = v21[1];
          v22 = v21[2];
        }
        ++v24;
        v25 += 16;
      }
      while (v24 < (v22 - v23) >> 4);
    }
    v21[2] = v23;
  }
  v27 = v4[12];
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v4[12] = 0;
  return 0;
}

uint64_t sub_20B8BB878(uint64_t a1, unsigned __int16 *a2, std::string::size_type a3, void *a4, size_t a5, int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v14 = sub_20B8BB4F0(a1);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 200))(v14);
  sub_20BA0AAE8(v13, v15, a2, a3, a4, a5, a6, a7);
  return 0;
}

unint64_t sub_20B8BB904(uint64_t a1, const void *a2, size_t a3, int a4, int a5, unsigned int a6, void *a7, unint64_t a8)
{
  return sub_20BA0B2A0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20B8BB914(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  return sub_20BA0B454(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2, a3, a4);
}

_BYTE *sub_20B8BB924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_20BA0AAA8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2, a3);
}

void sub_20B8BB934(uint64_t a1, unsigned __int16 *a2, unint64_t a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 88);
  if (v9)
    sub_20B9C54DC(v9, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_20B8BB958(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 1328);
  return !v1 || sub_20B8AC198(v1);
}

uint64_t sub_20B8BB988(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 1328);
  if (v1)
    sub_20B8AC0C0(v1);
  return 0;
}

uint64_t sub_20B8BB9B4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v3 = *(uint64_t **)(v2 + 8);
  for (i = *(uint64_t **)(v2 + 16); v3 != i; *(_DWORD *)(v5 + 712) = v7)
  {
    v6 = *v3++;
    v5 = v6;
    if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v6 + 752) - *(_QWORD *)(v6 + 744)) >> 3))
      v7 = 0;
    else
      v7 = a2;
  }
  return 0;
}

uint64_t sub_20B8BB9FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  result = 0xFFFFFFFFLL;
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(*(_QWORD *)v2 + 712);
    if (v5 != -1)
    {
      if ((_DWORD)result == -1)
      {
        result = *(unsigned int *)(*(_QWORD *)v2 + 712);
      }
      else if ((_DWORD)result == v5)
      {
        result = result;
      }
      else
      {
        result = 0xFFFFFFFFLL;
      }
    }
    v2 += 8;
  }
  return result;
}

uint64_t sub_20B8BBA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20BA0B56C(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2, a3);
}

BOOL sub_20B8BBA5C(uint64_t a1, uint64_t a2)
{
  return sub_20BA0BA9C(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2);
}

uint64_t sub_20B8BBA6C(uint64_t a1, uint64_t a2)
{
  return sub_20BA0BBC4(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80), a2);
}

uint64_t sub_20B8BBA7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 1304) = a2;
  return result;
}

uint64_t sub_20B8BBA90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 168) = a2;
  return result;
}

uint64_t sub_20B8BBAA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 176) = a2;
  return result;
}

uint64_t sub_20B8BBAB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 1312) = a2;
  return result;
}

uint64_t sub_20B8BBACC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 1320) = a2;
  return result;
}

BOOL sub_20B8BBAE0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 1320) != 0;
}

BOOL sub_20B8BBAFC(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  if (!v1)
    return 0;
  do
  {
    v2 = *(_DWORD *)(v1 + 20) == 9;
    if (*(_DWORD *)(v1 + 20) == 9)
      break;
    v1 = *(_QWORD *)(v1 + 40);
  }
  while (v1);
  return v2;
}

uint64_t sub_20B8BBB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1) < 1)
    return 0;
  if (a4)
  {
    v10 = sub_20B8BB4F0(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 152))(v10);
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, a2, a3, a5);
  }
  v12 = v11;
  if (!v11)
    return 0;
  v13 = sub_20B8BB4F0(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 144))(v13, v12);
  v14 = sub_20B8BB4F0(a1);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 200))(v14);
  v16 = (_QWORD *)sub_20B8BBC1C(v15);
  sub_20B88A500(v16, v12, a4, a3);
  return 1;
}

uint64_t sub_20B8BBC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 96);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &unk_24C4672F0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 48) = &unk_24C467580;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_QWORD *)(v1 + 88) = 0;
    *(_QWORD *)(v1 + 96) = 512;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 96) = v1;
  }
  return v1;
}

uint64_t sub_20B8BBCB4(_QWORD *a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  UChar *First;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(int (**)(_QWORD *))(*a1 + 280))(a1) <= 0)
  {
    v18 = a1[6];
    v17 = a1 + 6;
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(_QWORD *)(v18 - 24)), 0);
    v19 = sub_20B828F84(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/im/tagger.cpp", 63);
    sub_20B828F84(v19, (uint64_t)"(", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = sub_20B828F84(v20, (uint64_t)") [", 3);
    v22 = sub_20B828F84(v21, (uint64_t)"lattice_level() >= 1", 20);
    v23 = sub_20B828F84(v22, (uint64_t)"] ", 2);
    sub_20B828F84(v23, (uint64_t)"use -l option to obtain N-Best results. e.g., mecab -N10 -l1", 60);
    return 0;
  }
  v14 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v33 = 134218240;
    v34 = a3;
    v35 = 1024;
    v36 = a5 & 4;
    _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "[TaggerImpl::parseNBestInit] length:%lu (prefix:%d)", (uint8_t *)&v33, 0x12u);
    if (a4)
      goto LABEL_4;
  }
  else if (a4)
  {
LABEL_4:
    v15 = sub_20B8BB4F0((uint64_t)a1);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 152))(v15);
    goto LABEL_8;
  }
  v16 = (*(uint64_t (**)(_QWORD *, const UChar *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 16))(a1, a2, a3, a5, a6, a7);
LABEL_8:
  v24 = v16;
  if (!v16)
    return 0;
  v25 = sub_20B8BB4F0((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 144))(v25, v24);
  First = u_strFindFirst(a2, (unint64_t)(int)a3 >> 1, (const UChar *)"\t", 1);
  if (First)
    v27 = (char *)First - (char *)a2;
  else
    v27 = 0;
  if (First)
    v28 = -16;
  else
    v28 = -8;
  v29 = sub_20B8BB4F0((uint64_t)a1);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 200))(v29);
  v31 = (_QWORD *)sub_20B8BBC1C(v30);
  sub_20B88A500(v31, v24, v27 + a4, v28 + a3);
  return 1;
}

uint64_t sub_20B8BBEF8(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_20B8BB4F0(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
}

uint64_t sub_20B8BBF14(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 296);
}

uint64_t sub_20B8BBF28(char *a1)
{
  uint64_t v2;
  const char *v3;
  char v5;

  MEMORY[0x20BD39BFC](&v5);
  v2 = operator new();
  sub_20B8BB0AC(v2);
  if (!sub_20B8BB23C(v2, a1))
  {
    v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2);
    strncpy(byte_25472CA20, v3, 0xFFuLL)[255] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
    v2 = 0;
  }
  std::ios_base::Init::~Init((std::ios_base::Init *)&v5);
  return v2;
}

void sub_20B8BBFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  MEMORY[0x20BD39CB0](v13, 0x10F3C40EC662B3ELL);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

void sub_20B8BC004(_QWORD *a1)
{
  sub_20B8BC0E8(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8BC02C(_QWORD *a1)
{
  sub_20B8BC050(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8BC050(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &unk_24C467580;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD39C80](v2[v5], 0x1020C80E349F4B1);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20B8BC0E8(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C4672F0;
  sub_20B8BC050(a1 + 6);
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

const __CFDictionary *sub_20B8BC12C(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *TestingParameters;
  const __CFDictionary *MutableCopy;

  if (!a2)
    return 0;
  TestingParameters = (const __CFDictionary *)LMLanguageModelGetTestingParameters();
  MutableCopy = TestingParameters;
  if (TestingParameters)
  {
    if (CFDictionaryGetCount(TestingParameters))
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, MutableCopy);
      CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x24BE5EEE8]);
      return MutableCopy;
    }
    return 0;
  }
  return MutableCopy;
}

const void *sub_20B8BC194(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *TestingParameters;

  if (a2 && (TestingParameters = (const __CFDictionary *)LMLanguageModelGetTestingParameters()) != 0)
    return CFDictionaryGetValue(TestingParameters, (const void *)*MEMORY[0x24BE5EEE8]);
  else
    return 0;
}

void sub_20B8BC1D0()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8BC1E4(char *__s)
{
  unint64_t v1;
  _BOOL4 v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *p_p;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  _DWORD *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  unsigned __int8 *v24;
  uint64_t v26;
  unint64_t v28;
  _WORD *v29;
  uint64_t v31;
  const void *v32;
  _BYTE *v33;
  void *__p;
  unint64_t v38;
  unsigned __int8 v39;

  sub_20B80BBD0(&__p, __s);
  v1 = v39;
  v2 = (v39 & 0x80u) != 0;
  v3 = v38;
  if ((v39 & 0x80u) == 0)
    v4 = v39;
  else
    v4 = v38;
  if (v4)
  {
    v5 = 0;
    do
    {
      if (v2)
        p_p = __p;
      else
        p_p = &__p;
      v7 = p_p[v5];
      if ((v7 - 65) <= 0x19)
      {
        p_p[v5] = v7 + 32;
        v1 = v39;
        v3 = v38;
      }
      ++v5;
      v2 = (v1 & 0x80u) != 0;
      if ((v1 & 0x80u) == 0)
        v8 = v1;
      else
        v8 = v3;
    }
    while (v5 < v8);
  }
  if (v2)
    v9 = v3;
  else
    v9 = v1;
  switch(v9)
  {
    case 3uLL:
      v13 = !v2;
      v10 = (unsigned __int16 *)&__p;
      if (!v13)
        v10 = (unsigned __int16 *)__p;
      v11 = *v10;
      v12 = *((unsigned __int8 *)v10 + 2);
      v13 = v11 == 30053;
      v14 = 99;
      goto LABEL_32;
    case 4uLL:
      v13 = !v2;
      v15 = &__p;
      if (!v13)
        v15 = __p;
      if (*v15 == 1936288371)
        goto LABEL_64;
      goto LABEL_49;
    case 5uLL:
      v13 = !v2;
      v16 = (unsigned __int8 *)&__p;
      if (!v13)
        v16 = (unsigned __int8 *)__p;
      v17 = *(_DWORD *)v16;
      v18 = v16[4];
      v19 = v17 == 859402339;
      v20 = 50;
      goto LABEL_45;
    case 6uLL:
      v13 = !v2;
      v21 = (unsigned __int16 *)&__p;
      if (!v13)
        v21 = (unsigned __int16 *)__p;
      v22 = *(_DWORD *)v21;
      v12 = v21[2];
      v13 = v22 == 1600353637;
      v14 = 28778;
LABEL_32:
      if (!v13 || v12 != v14)
        goto LABEL_49;
      goto LABEL_65;
    case 9uLL:
      v13 = !v2;
      v24 = (unsigned __int8 *)&__p;
      if (!v13)
        v24 = (unsigned __int8 *)__p;
      v20 = 115;
      if (*(_QWORD *)v24 == 0x696A2D7466696873 && v24[8] == 115)
        goto LABEL_64;
      v26 = *(_QWORD *)v24;
      v18 = v24[8];
      v19 = v26 == 0x696A5F7466696873;
LABEL_45:
      if (v19 && v18 == v20)
      {
LABEL_64:
        v31 = 1;
        goto LABEL_90;
      }
LABEL_49:
      if ((v1 & 0x80u) == 0)
        v28 = v1;
      else
        v28 = v3;
      if (v28 != 4)
      {
        if (v28 != 5)
        {
          if (v28 == 6)
          {
            if ((v1 & 0x80u) == 0)
              v29 = &__p;
            else
              v29 = __p;
            if (*(_DWORD *)v29 == 761492837 && v29[2] == 28778)
            {
LABEL_65:
              v31 = 0;
              goto LABEL_90;
            }
            if (!memcmp(v29, "utf_16", 6uLL))
              goto LABEL_84;
          }
          goto LABEL_83;
        }
        if ((v1 & 0x80u) == 0)
          v33 = &__p;
        else
          v33 = __p;
        if (memcmp(v33, "utf_8", 5uLL))
        {
          if (*(_DWORD *)v33 != 761689205 || v33[4] != 56)
          {
            if (*(_DWORD *)v33 == 828798069 && v33[4] == 54)
              goto LABEL_84;
            goto LABEL_83;
          }
        }
LABEL_89:
        v31 = 2;
        goto LABEL_90;
      }
      if ((v1 & 0x80u) == 0)
        v32 = &__p;
      else
        v32 = __p;
      if (!memcmp(v32, "utf8", 4uLL))
        goto LABEL_89;
LABEL_83:
      if (sub_20B8B0E3C((const void **)&__p, "utf-16"))
      {
LABEL_84:
        v31 = 3;
        goto LABEL_90;
      }
      if (sub_20B8B0E3C((const void **)&__p, "utf16be")
        || sub_20B8B0E3C((const void **)&__p, "utf_16be")
        || sub_20B8B0E3C((const void **)&__p, "utf-16be"))
      {
        v31 = 5;
      }
      else if (sub_20B8B0E3C((const void **)&__p, "utf16le")
             || sub_20B8B0E3C((const void **)&__p, "utf_16le")
             || sub_20B8B0E3C((const void **)&__p, "utf-16le"))
      {
        v31 = 4;
      }
      else if (sub_20B8B0E3C((const void **)&__p, "ascii"))
      {
        v31 = 6;
      }
      else
      {
        v31 = 2;
      }
LABEL_90:
      if ((char)v39 < 0)
        operator delete(__p);
      return v31;
    default:
      goto LABEL_49;
  }
}

std::string *sub_20B8BC594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20B80ACE0(a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a3->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_13;
  }
  else
  {
    if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
      goto LABEL_13;
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = a3;
  else
    v6 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::push_back(a3, 47);
LABEL_13:
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  return std::string::append(a3, v8, v9);
}

void sub_20B8BC648(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8BC664(uint64_t a1)
{
  unsigned int v2;

  if (sub_20B8A9DA8(a1, "allocate-sentence"))
    v2 = 65;
  else
    v2 = 1;
  if (sub_20B8A9DA8(a1, "partial"))
    v2 |= 4u;
  if (sub_20B8A9DA8(a1, "all-morphs"))
    v2 |= 0x20u;
  if (sub_20B8A9DA8(a1, "marginal"))
    v2 |= 8u;
  if ((int)sub_20B86FCF4(a1, "nbest") <= 1)
    return v2;
  else
    return v2 | 2;
}

BOOL sub_20B8BC708(uint64_t a1)
{
  std::string::size_type v2;
  char v3;
  std::string::size_type size;
  std::string::size_type v5;
  char *v6;
  std::string::size_type v7;
  char *v8;
  std::string::size_type v9;
  std::string *p_str;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  char *v14;
  unsigned int v15;
  int v16;
  int64_t v17;
  std::string *v18;
  char v19;
  std::string *v20;
  int64_t v21;
  char *v22;
  int v23;
  std::string *v24;
  int64_t v25;
  char *v26;
  char *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  _BOOL8 v32;
  void *__p[2];
  char v35;
  std::string __str;
  std::string v37;
  std::string v38;
  _QWORD v39[20];

  v39[19] = *MEMORY[0x24BDAC8D0];
  sub_20B8938D8(a1, "rcfile", &v37);
  v2 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  v3 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  size = v37.__r_.__value_.__l.__size_;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v5 = v37.__r_.__value_.__l.__size_;
  if (!v5)
  {
    v6 = getenv("HOME");
    if (v6)
    {
      sub_20B80BBD0(&v38, v6);
      sub_20B80BBD0(__p, ".mecabrc");
      sub_20B8BC594((uint64_t)&v38, (uint64_t)__p, &__str);
      if (v35 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      sub_20B82EB18(&v38);
      if ((*((_BYTE *)&v38 + *(_QWORD *)(v38.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0)
        std::string::operator=(&v37, &__str);
      v38.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E0];
      *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words
                                + *(_QWORD *)(v38.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0]
                                                                                                  + 24);
      MEMORY[0x20BD399D4](&v38.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x20BD39C2C](v39);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v2 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      size = v37.__r_.__value_.__l.__size_;
      v3 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
  }
  if (v3 >= 0)
    v7 = v2;
  else
    v7 = size;
  if (!v7)
  {
    v8 = getenv("MECABRC");
    if (v8)
      sub_20B8A741C(&v37, v8);
  }
  sub_20B8938D8(a1, "dicdir", &__str);
  v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __str.__r_.__value_.__l.__size_;
  if (!v9)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 1;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 1;
      p_str = &__str;
    }
    LOWORD(p_str->__r_.__value_.__l.__data_) = 46;
  }
  LODWORD(v11) = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  v12 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    LODWORD(v11) = v37.__r_.__value_.__r.__words[1];
  v11 = v11;
  v13 = &v37;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v37.__r_.__value_.__r.__words[0];
  v14 = (char *)&v13[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if ((int)v11 < 1)
    {
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        v37.__r_.__value_.__l.__size_ = 1;
      }
      else
      {
        *((_BYTE *)&v37.__r_.__value_.__s + 23) = 1;
        v12 = &v37;
      }
      LOWORD(v12->__r_.__value_.__l.__data_) = 46;
      goto LABEL_42;
    }
    v15 = v11 - 1;
    v16 = v14[v11--];
  }
  while (v16 != 47);
  std::string::basic_string(&v38, &v37, 0, v15, (std::allocator<char> *)__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v37 = v38;
LABEL_42:
  sub_20B80BBD0(&v38, "$(rcpath)");
  v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &__str;
  else
    v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __str.__r_.__value_.__l.__size_;
  v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v38;
  else
    v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v21 = v38.__r_.__value_.__l.__size_;
  if (v21)
  {
    if (v17 >= v21)
    {
      v22 = (char *)v18 + v17;
      v23 = v20->__r_.__value_.__s.__data_[0];
      v24 = v18;
      do
      {
        v25 = v17 - v21;
        if (v25 == -1)
          break;
        v26 = (char *)memchr(v24, v23, v25 + 1);
        if (!v26)
          break;
        v27 = v26;
        if (!memcmp(v26, v20, v21))
        {
          if (v27 != v22)
          {
            v28 = v27 - (char *)v18;
            if (v27 - (char *)v18 != -1)
              goto LABEL_62;
          }
          break;
        }
        v24 = (std::string *)(v27 + 1);
        v17 = v22 - (v27 + 1);
      }
      while (v17 >= v21);
    }
  }
  else
  {
    v28 = 0;
LABEL_62:
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v37;
    else
      v29 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v30 = v37.__r_.__value_.__l.__size_;
    std::string::replace(&__str, v28, v21, (const std::string::value_type *)v29, v30);
    v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  if (v19 < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  sub_20B8B8684(a1, "dicdir", (uint64_t)&__str, 1);
  sub_20B80BBD0(__p, "dicrc");
  sub_20B8BC594((uint64_t)&__str, (uint64_t)__p, &v38);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v38;
  *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
  v38.__r_.__value_.__s.__data_[0] = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &__str;
  else
    v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v32 = sub_20B8B8198(a1, (const char *)v31);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return v32;
}

void sub_20B8BCB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_20B82EC24(&a29);
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

__CFString *sub_20B8BCC20(_QWORD *a1)
{
  __CFString *Mutable;
  int v3;
  uint64_t v4;
  const __CFString *v5;
  unsigned int v6;
  __CFString *v7;
  int i;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  v4 = *a1;
  if (v3)
  {
    while (1)
    {
      v5 = *(const __CFString **)(v4 + 112);
      if (v5)
        CFStringInsert(Mutable, 0, v5);
      a1 = (_QWORD *)a1[1];
      if (!a1)
        break;
      v4 = *a1;
    }
  }
  else
  {
    v6 = *(_DWORD *)(v4 + 80);
    v7 = Mutable;
    for (i = 0; ; i = 1)
    {
      sub_20B8BCCC0(v7, v6, i);
      a1 = (_QWORD *)a1[1];
      if (!a1)
        break;
      v6 = *(_DWORD *)(*a1 + 80);
      v7 = Mutable;
    }
  }
  return Mutable;
}

void sub_20B8BCCC0(__CFString *a1, unsigned int a2, int a3)
{
  CFStringRef v5;
  const __CFString *v6;

  if (a2 >= 0x3E9 && a2 - 1000 <= 0x1EF)
  {
    v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (&off_24C4A0588)[2 * a2 - 2000], 0x8000100u);
    if (v5)
    {
      v6 = v5;
      if (a3)
        CFStringInsert(a1, 0, CFSTR(" "));
      CFStringInsert(a1, 0, v6);
      CFRelease(v6);
    }
  }
}

void sub_20B8BCD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

int8x16_t *sub_20B8BCD84(const __CFURL *a1, __int8 a2)
{
  int8x16_t *v4;
  int8x16_t *v5;
  __int32 v6;
  const __CFURL *v7;
  char *v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  _QWORD *v13;
  const __CFArray *v14;
  uint64_t v15;
  const __CFString *v17;
  int32x2_t v18;
  int64x2_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  stat __buf;
  _QWORD v24[4];
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = (int8x16_t *)malloc_type_calloc(1uLL, 0x40uLL, 0x1070040B050C575uLL);
  v5 = v4;
  if (!v4)
    return v5;
  v4[1].i8[0] = a2;
  v6 = sub_20B908858(a1);
  v5[3].i32[2] = v6;
  if (v6 == -1)
  {
LABEL_13:
    free(v5);
    return 0;
  }
  v7 = CFURLCreateCopyAppendingPathComponent(0, a1, CFSTR("Keyword_aux.data"), 0);
  v8 = sub_20B8BD464(v7);
  CFRelease(v7);
  v5[3].i64[0] = (uint64_t)v8;
  v9 = v5[3].i32[2];
  if (v9 == -1)
  {
LABEL_12:
    free(v8);
    goto LABEL_13;
  }
  if (flock(v9, 6) == -1)
  {
    v8 = (char *)v5[3].i64[0];
    goto LABEL_12;
  }
  v10 = v5[3].i32[2];
  LOBYTE(__buf.st_dev) = 0;
  lseek(v10, 0, 0);
  read(v10, &__buf, 1uLL);
  if (LOBYTE(__buf.st_dev) == 1)
  {
    v11 = sub_20B8BD464(a1);
    sub_20B8BD500((DIR *)v11);
    free(v11);
  }
  v12 = v5[3].i32[2];
  LOBYTE(__buf.st_dev) = 1;
  lseek(v12, 0, 0);
  write(v12, &__buf, 1uLL);
  v13 = sub_20B8A205C(0, a1, 0);
  if (!v13)
  {
    free((void *)v5[3].i64[0]);
    flock(v5[3].i32[2], 8);
    goto LABEL_13;
  }
  v5->i64[1] = (uint64_t)v13;
  *(_OWORD *)&__buf.st_dev = xmmword_24C49BAF0;
  *(_OWORD *)&__buf.st_uid = *(_OWORD *)off_24C49BB00;
  v14 = CFArrayCreate(0, (const void **)&__buf, 4, MEMORY[0x24BDBD690]);
  sub_20B8A22DC(v5->i64[1], v14);
  CFRelease(v14);
  v21 = 0;
  v22 = 0;
  sub_20B8A2260(v5->i64[1], CFSTR("__??info??__"), (uint64_t)CFSTR("IDXExactMatch"));
  if ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *))(**(_QWORD **)(v5->i64[1] + 16) + 72))(*(_QWORD *)(v5->i64[1] + 16), *(_QWORD *)(v5->i64[1] + 40), 1, &v22, &v21) >= 1)
  {
    memset(v25, 0, sizeof(v25));
    sub_20B8A25B4(v5->i64[1], v22, v21, v25, v24);
    LODWORD(v15) = 0;
    switch(LOBYTE(v24[0]))
    {
      case 1:
        LODWORD(v15) = **(_BYTE **)&v25[0];
        break;
      case 2:
        LODWORD(v15) = (unsigned __int16)**(_WORD **)&v25[0];
        break;
      case 4:
        LODWORD(v15) = **(_DWORD **)&v25[0];
        break;
      case 8:
        v15 = **(_QWORD **)&v25[0];
        break;
      default:
        break;
    }
    v5[1].i32[2] = v15;
    v17 = CFStringCreateWithBytesNoCopy(0, *((const UInt8 **)&v25[0] + 1), v24[1], 0x600u, 0, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    v5[1].i32[1] = CFStringGetIntValue(v17);
    CFRelease(v17);
  }
  v18 = vdup_n_s32(stat((const char *)v5[3].i64[0], &__buf) == 0);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v5[2] = vandq_s8((int8x16_t)__buf.st_mtimespec, (int8x16_t)vcltzq_s64(vshlq_n_s64(v19, 0x3FuLL)));
  v20 = v5[3].i32[2];
  LOBYTE(__buf.st_dev) = 0;
  lseek(v20, 0, 0);
  write(v20, &__buf, 1uLL);
  flock(v5[3].i32[2], 8);
  v5->i64[0] = (uint64_t)CFRetain(a1);
  return v5;
}

uint64_t sub_20B8BD0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  CFIndex Length;
  UniChar *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[6];
  int v18;
  unsigned __int8 v19;
  _QWORD v20[4];
  _QWORD v21[500];
  __int128 v22;
  void *__s1[2];
  _OWORD v24[250];
  uint64_t v25;
  CFRange v26;

  v1 = MEMORY[0x24BDAC7A8]();
  v25 = *MEMORY[0x24BDAC8D0];
  result = *(unsigned int *)(v1 + 56);
  if ((_DWORD)result != -1)
  {
    v3 = v0;
    result = flock(result, 6);
    if ((_DWORD)result != -1)
    {
      memset(v24, 0, 512);
      *(_OWORD *)__s1 = 0u;
      v22 = 0u;
      Length = CFStringGetLength(CFSTR("__??info??__"));
      v5 = (UniChar *)operator new[]();
      v26.location = 0;
      v26.length = Length;
      CFStringGetCharacters(CFSTR("__??info??__"), v26, v5);
      v6 = *(_DWORD *)(v1 + 56);
      LOBYTE(v17[0]) = 1;
      lseek(v6, 0, 0);
      write(v6, v17, 1uLL);
      sub_20B8A2260(*(_QWORD *)(v1 + 8), 0, (uint64_t)CFSTR("IDXAllMatch"));
      v19 = 0;
      do
      {
        v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _OWORD *, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v1 + 8)
                                                                                                  + 16)
                                                                                    + 72))(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(v1 + 8) + 40), 500, v24, v21);
        v8 = v7;
        if (!v7)
          break;
        v9 = v19;
        if (v7 >= 1 && v19 == 0)
        {
          v11 = 0;
          do
          {
            sub_20B8A25B4(*(_QWORD *)(v1 + 8), *((_QWORD *)v24 + v11), v21[v11], &v22, v20);
            v12 = v20[2] >> 1;
            if (!__s1[0])
              v12 = 0;
            v17[0] = __s1[0];
            v17[1] = v12;
            if (v12 != Length || memcmp(__s1[0], v5, 2 * Length))
            {
              LODWORD(v13) = 0;
              v14 = v20[1] >> 1;
              if (!*((_QWORD *)&v22 + 1))
                v14 = 0;
              v17[2] = *((_QWORD *)&v22 + 1);
              v17[3] = v14;
              v15 = v20[3] >> 1;
              if (!__s1[1])
                v15 = 0;
              v17[4] = __s1[1];
              v17[5] = v15;
              switch(LOBYTE(v20[0]))
              {
                case 1:
                  LODWORD(v13) = *(unsigned __int8 *)v22;
                  break;
                case 2:
                  LODWORD(v13) = *(unsigned __int16 *)v22;
                  break;
                case 4:
                  LODWORD(v13) = *(_DWORD *)v22;
                  break;
                case 8:
                  v13 = *(_QWORD *)v22;
                  break;
                default:
                  break;
              }
              v18 = v13;
              (*(void (**)(uint64_t, _QWORD *, unsigned __int8 *))(v3 + 16))(v3, v17, &v19);
            }
            ++v11;
            v9 = v19;
          }
          while (v11 < v8 && !v19);
        }
      }
      while (!v9);
      v16 = *(_DWORD *)(v1 + 56);
      LOBYTE(v17[0]) = 0;
      lseek(v16, 0, 0);
      write(v16, v17, 1uLL);
      flock(*(_DWORD *)(v1 + 56), 8);
      return MEMORY[0x20BD39C80](v5, 0x1000C80BDFB0063);
    }
  }
  return result;
}

void sub_20B8BD430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

char *sub_20B8BD464(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFString *v2;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v5;

  v1 = CFURLCopyAbsoluteURL(a1);
  v2 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  CFRelease(v1);
  if (!v2)
    return 0;
  Length = CFStringGetLength(v2);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v5 = (char *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x3D13832BuLL);
  LODWORD(MaximumSizeForEncoding) = CFStringGetFileSystemRepresentation(v2, v5, MaximumSizeForEncoding);
  CFRelease(v2);
  if (!(_DWORD)MaximumSizeForEncoding)
  {
    free(v5);
    return 0;
  }
  return v5;
}

DIR *sub_20B8BD500(DIR *result)
{
  const std::__fs::filesystem::path *v1;
  std::error_code *v2;
  DIR *v3;
  size_t v4;
  char *v5;
  size_t v6;
  char *v7;
  dirent *v8;
  const char *d_name;
  stat v10;

  if (result)
  {
    v1 = (const std::__fs::filesystem::path *)result;
    if (lstat((const char *)result, &v10) < 0)
    {
      return 0;
    }
    else if ((v10.st_mode & 0xF000) == 0x4000)
    {
      result = opendir((const char *)v1);
      if (result)
      {
        v3 = result;
        v4 = strlen((const char *)v1) + 256;
        v5 = (char *)malloc_type_malloc(v4, 0x33C5FAC6uLL);
        strlcpy(v5, (const char *)v1, v4);
        v6 = strlen((const char *)v1);
        *(_WORD *)&v5[v6] = 47;
        v7 = &v5[v6 + 1];
        while (1)
        {
          v8 = readdir(v3);
          if (!v8)
            break;
          d_name = v8->d_name;
          if (strcmp(v8->d_name, "."))
          {
            if (strcmp(d_name, ".."))
            {
              strlcpy(v7, d_name, 0x100uLL);
              if (!sub_20B8BD500(v5))
              {
                free(v5);
                closedir(v3);
                return 0;
              }
            }
          }
        }
        free(v5);
        closedir(v3);
        return (DIR *)(rmdir((const char *)v1) >= 0);
      }
    }
    else
    {
      return (DIR *)!remove(v1, v2);
    }
  }
  return result;
}

uint64_t sub_20B8BD660(void *a1, char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  sub_20B8BD6A4(a1, a2, a3);
  v6 = sub_20B8BD6A4(a2, v4, v5);
  v7 = objc_alloc(MEMORY[0x24BDBCE70]);
  return MEMORY[0x24BEDD108](v7, sel_initWithObjects_forKeys_, v6);
}

uint64_t sub_20B8BD6A4(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  uint64_t v16;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3052000000;
  v14 = sub_20B8BD784;
  v15 = sub_20B8BD794;
  v16 = 0;
  v16 = objc_msgSend_array(MEMORY[0x24BDBCEB8], a2, a3);
  v6 = objc_msgSend_length(a1, v4, v5);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = sub_20B8BD7A0;
  v10[3] = &unk_24C49BB18;
  v10[4] = &v11;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v7, 0, v6, 2, v10);
  v8 = v12[5];
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_20B8BD76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20B8BD784(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_20B8BD794(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_20B8BD7A0(uint64_t a1, const char *a2)
{
  return objc_msgSend_addObject_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, (uint64_t)a2);
}

uint64_t MecabraInputKeyPropertiesGetInputKeys(int a1)
{
  if ((a1 - 2) > 0xE)
    return 0;
  else
    return (uint64_t)*(&off_24C49BBC0 + a1 - 2);
}

void *sub_20B8BD7D8(void *a1, uint64_t a2)
{
  void *v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v2 = a1;
  if (a1 && a2)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3052000000;
    v13 = sub_20B8BD784;
    v14 = sub_20B8BD794;
    v15 = 0;
    v15 = objc_alloc_init(MEMORY[0x24BDD16A8]);
    v6 = objc_msgSend_length(v2, v4, v5);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = sub_20B8BD8CC;
    v9[3] = &unk_24C49BB40;
    v9[4] = a2;
    v9[5] = &v10;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v2, v7, 0, v6, 2, v9);
    v2 = (void *)v11[5];
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_20B8BD8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8BD8CC(uint64_t a1, const char *a2)
{
  const char *v4;
  uint64_t v5;

  v5 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), a2, (uint64_t)a2);
  if (!v5)
    v5 = (uint64_t)a2;
  return objc_msgSend_appendString_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v4, v5);
}

void *MecabraInputKeyPropertiesCreateASCIIFromInputKeyString(unsigned int a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  dispatch_once_t *v6;
  void *v7;

  v3 = 0;
  if (a1 <= 0x10)
  {
    if (((1 << a1) & 0x8180) != 0)
    {
      if (qword_25472B330 == -1)
      {
        v4 = &qword_25472B328;
        goto LABEL_11;
      }
      v4 = &qword_25472B328;
      v6 = &qword_25472B330;
      v7 = &unk_24C49BB60;
LABEL_16:
      dispatch_once(v6, v7);
      goto LABEL_11;
    }
    if (((1 << a1) & 0x10200) != 0)
    {
      if (qword_25472B340 == -1)
      {
        v4 = &qword_25472B338;
LABEL_11:
        v3 = *v4;
        return sub_20B8BD7D8(a2, v3);
      }
      v4 = &qword_25472B338;
      v6 = &qword_25472B340;
      v7 = &unk_24C46CFB0;
      goto LABEL_16;
    }
    if (a1 == 10)
    {
      if (qword_25472B350 == -1)
      {
        v4 = &qword_25472B348;
        goto LABEL_11;
      }
      v4 = &qword_25472B348;
      v6 = &qword_25472B350;
      v7 = &unk_24C49BB80;
      goto LABEL_16;
    }
  }
  return sub_20B8BD7D8(a2, v3);
}

uint64_t sub_20B8BDA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B8BD660(CFSTR("⼀⼁⼃⼂乛一丨丿丶㇏問*＊匹"), CFSTR("1234512344***="), a3);
  qword_25472B328 = result;
  return result;
}

uint64_t sub_20B8BDA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B8BD660(CFSTR("手田水口廿卜山戈人心日尸木火土竹十大中金女月弓一重難ＸＺ"), CFSTR("qwertyuiopasdfghjklcvbnmzxxz"), a3);
  qword_25472B338 = result;
  return result;
}

uint64_t sub_20B8BDA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B8BD660(CFSTR("金人月白禾言立水火之工木大土王目日口田纟又女子已山"), CFSTR("qwertyuiopasdfghjklxcvbnm"), a3);
  qword_25472B348 = result;
  return result;
}

void *MecabraInputKeyPropertiesCreateInputKeyFromASCIIString(unsigned int a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  dispatch_once_t *v6;
  void *v7;

  v3 = 0;
  if (a1 <= 0x10)
  {
    if (((1 << a1) & 0x8180) != 0)
    {
      if (qword_25472B360 == -1)
      {
        v4 = &qword_25472B358;
        goto LABEL_11;
      }
      v4 = &qword_25472B358;
      v6 = &qword_25472B360;
      v7 = &unk_24C46CFD0;
LABEL_16:
      dispatch_once(v6, v7);
      goto LABEL_11;
    }
    if (((1 << a1) & 0x10200) != 0)
    {
      if (qword_25472B370 == -1)
      {
        v4 = &qword_25472B368;
LABEL_11:
        v3 = *v4;
        return sub_20B8BD7D8(a2, v3);
      }
      v4 = &qword_25472B368;
      v6 = &qword_25472B370;
      v7 = &unk_24C49BBA0;
      goto LABEL_16;
    }
    if (a1 == 10)
    {
      if (qword_25472B380 == -1)
      {
        v4 = &qword_25472B378;
        goto LABEL_11;
      }
      v4 = &qword_25472B378;
      v6 = &qword_25472B380;
      v7 = &unk_24C46CF50;
      goto LABEL_16;
    }
  }
  return sub_20B8BD7D8(a2, v3);
}

uint64_t sub_20B8BDB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B8BD660(CFSTR("12345"), CFSTR("⼀⼁⼃⼂乛"), a3);
  qword_25472B358 = result;
  return result;
}

uint64_t sub_20B8BDBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B8BD660(CFSTR("qwertyuiopasdfghjklcvbnmzxxz"), CFSTR("手田水口廿卜山戈人心日尸木火土竹十大中金女月弓一重難ＸＺ"), a3);
  qword_25472B368 = result;
  return result;
}

uint64_t sub_20B8BDBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_20B8BD660(CFSTR("qwertyuiopasdfghjklxcvbnm"), CFSTR("金人月白禾言立水火之工木大土王目日口田纟又女子已山"), a3);
  qword_25472B378 = result;
  return result;
}

uint64_t sub_20B8BDC08(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, CFStringRef theString, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, char a13, char a14)
{
  char *v17;
  char *v18;
  char *v19;
  CFStringRef Copy;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;

  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)a1 = &off_24C468308;
  *(_WORD *)(a1 + 48) = a6;
  *(_OWORD *)(a1 + 56) = 0u;
  v17 = (char *)(a1 + 56);
  v18 = (char *)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  v19 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  if (theString)
  {
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
    v21 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v21 = 0;
    Copy = 0;
  }
  *(_QWORD *)(a1 + 128) = Copy;
  v22 = 16;
  if (a12)
    v22 = 17;
  v23 = v21 | v22;
  if (a13)
    v23 |= 2uLL;
  if (a11)
    v23 |= 4uLL;
  if (a14)
    v23 |= 8uLL;
  *(_QWORD *)(a1 + 32) = v23;
  if (v17 != (char *)a8)
    sub_20B886194(v17, *(char **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 1);
  if (v18 != (char *)a9)
    sub_20B886194(v18, *(char **)a9, *(_QWORD *)(a9 + 8), (uint64_t)(*(_QWORD *)(a9 + 8) - *(_QWORD *)a9) >> 1);
  if (v19 != (char *)a10)
    sub_20B886194(v19, *(char **)a10, *(_QWORD *)(a10 + 8), (uint64_t)(*(_QWORD *)(a10 + 8) - *(_QWORD *)a10) >> 1);
  if (!a6)
  {
    v24 = *(char **)a9;
    v25 = *(char **)(a9 + 8);
    if (*(char **)a9 != v25)
    {
      v26 = *(unsigned __int16 *)(a1 + 48);
      do
      {
        v27 = *(unsigned __int16 *)v24;
        v24 += 2;
        v26 += v27;
        *(_WORD *)(a1 + 48) = v26;
      }
      while (v24 != v25);
    }
  }
  return a1;
}

void sub_20B8BDD88(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8BDDD8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  const __CFString *v6;
  CFStringRef Copy;

  *(_QWORD *)a1 = &off_24C467C40;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)a1 = &off_24C468308;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 1);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 1);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 1);
  v6 = *(const __CFString **)(a2 + 128);
  if (v6)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v6);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 128) = Copy;
  return a1;
}

void sub_20B8BDED0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8BDF1C(uint64_t a1, uint64_t a2, int a3)
{
  const __CFString *v5;
  CFStringRef Copy;

  *(_QWORD *)a1 = &off_24C467C40;
  *(_DWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)a1 = &off_24C468308;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 1);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 1);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 1);
  v5 = *(const __CFString **)(a2 + 128);
  if (v5)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v5);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 128) = Copy;
  return a1;
}

void sub_20B8BE018(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8BE064@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_20B87ACC8(a2, *(const void **)(a1 + 80), *(_QWORD *)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 1);
}

_QWORD *sub_20B8BE080@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 104;
  v3 = 80;
  if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 112))
    v3 = 104;
  else
    v2 = a1 + 80;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_20B87ACC8(a2, *(const void **)(a1 + v3), *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)(a1 + v3)) >> 1);
}

_QWORD *sub_20B8BE0C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_20B87ACC8(a2, *(const void **)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 1);
}

void sub_20B8BE0E4(uint64_t a1)
{
  sub_20B8BE118(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8BE108(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t sub_20B8BE110(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_20B8BE118(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24C468308;
  sub_20B87E150((const void **)(a1 + 128), 0);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B8BE17C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFURL *v11;
  uint64_t v12;
  char v13;
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  void *v29;
  const __CFURL *v30;
  const __CFString *v31;
  NSObject *v32;
  NSObject *v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  os_signpost_id_t v44;
  NSObject *v45;
  NSObject *v46;
  CFStringRef v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  const __CFURL *v57;
  const __CFURL *v58;
  const __CFURL *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  NSObject *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  const char *v74;
  NSObject *v75;
  uint32_t v76;
  NSObject *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  const __CFURL *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  NSObject *v95;
  NSObject *v96;
  NSObject *v97;
  os_signpost_id_t v98;
  NSObject *v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  NSObject *v104;
  NSObject *v105;
  char *v106;
  NSObject *v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  NSObject *v111;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  const __CFURL *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  CFStringRef v137;
  CFURLRef v138;
  CFURLRef v139;
  os_signpost_id_t v140;
  CFURLRef cf;
  char *v142;
  uint64_t *v143;
  __int128 v144;
  uint64_t *v145;
  os_signpost_id_t spid;
  char *v147;
  char *v148[2];
  unint64_t v149;
  CFURLRef v150;
  unint64_t v151;
  uint8_t v152[8];
  _BYTE buf[12];
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(0xDu);
  v5 = os_signpost_id_make_with_pointer(v4, (const void *)a1);
  v6 = sub_20B9A7C5C(0xDu);
  spid = v5;
  v7 = v5 - 1;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = v6;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v5, "MecabraJapaneseInit", "MecabraJapanese engine init", buf, 2u);
    }
  }
  v9 = operator new();
  sub_20B95C34C(v9, a1);
  *(_QWORD *)v9 = &off_24C461428;
  *(_QWORD *)(v9 + 1040) = 0;
  v10 = operator new();
  sub_20B96DA90(v10, CFSTR("ja"));
  *(_QWORD *)(v9 + 1048) = v10;
  *(_QWORD *)(v9 + 1056) = a2;
  v145 = (uint64_t *)(v9 + 1064);
  *(_OWORD *)(v9 + 1064) = 0u;
  v11 = *(const __CFURL **)(a1 + 16);
  sub_20B80627C((_QWORD *)(v9 + 1080));
  sub_20B7F8B20((_OWORD *)(v9 + 1088));
  *(_QWORD *)(v9 + 1144) = 0;
  *(_QWORD *)(v9 + 1136) = 0;
  *(_QWORD *)(v9 + 1152) = 0;
  sub_20B89E8FC(v9 + 1080, 0, v11);
  v12 = operator new();
  sub_20B8789BC(v12);
  *(_QWORD *)(v12 + 344) = 0;
  *(_QWORD *)(v9 + 1160) = v12;
  v143 = (uint64_t *)(v9 + 1168);
  *(_QWORD *)(v9 + 1168) = 0;
  *(_QWORD *)(v9 + 1184) = 0;
  *(_QWORD *)(v9 + 1176) = 0;
  if (*(_BYTE *)(a1 + 11))
    v13 = 1;
  else
    v13 = _os_feature_enabled_impl();
  *(_BYTE *)(v9 + 1192) = v13;
  *(_BYTE *)(v9 + 1193) = 0;
  v14 = (int *)(v9 + 184);
  *(_QWORD *)(v9 + 1200) = v9 + 184;
  sub_20B9037DC(v9 + 1208, *(const __CFURL **)(a1 + 16), v9 + 184);
  *(_QWORD *)(v9 + 3856) = 0;
  *(_OWORD *)(v9 + 3840) = 0u;
  *(_OWORD *)(v9 + 3824) = 0u;
  *(_OWORD *)(v9 + 3808) = 0u;
  v15 = (_QWORD *)operator new();
  *v15 = 10;
  *(_QWORD *)(v9 + 3864) = v15;
  v16 = (_QWORD *)operator new();
  sub_20B961A20(v16, v9 + 184);
  *(_QWORD *)(v9 + 3872) = v16;
  *(_QWORD *)(v9 + 3880) = 0;
  v17 = (_QWORD *)operator new();
  v18 = v9 + 1200;
  *v17 = v9 + 184;
  v17[1] = v9 + 1080;
  *(_QWORD *)(v9 + 3888) = v17;
  *(_QWORD *)(v9 + 3896) = v9 + 184;
  *(_QWORD *)(v9 + 3904) = v9 + 1200;
  *(_QWORD *)(v9 + 3912) = 0;
  *(_QWORD *)(v9 + 3920) = *(_QWORD *)(v9 + 3872);
  v19 = (_QWORD *)operator new();
  *v19 = &unk_24C461E58;
  *(_QWORD *)(v9 + 3928) = v19;
  v20 = (_QWORD *)operator new();
  *v20 = &unk_24C465298;
  *(_QWORD *)(v9 + 3936) = v20;
  v21 = operator new();
  sub_20B919DB8(v21, 0, CFSTR("ja"));
  *(_QWORD *)(v9 + 3944) = v21;
  v22 = (uint64_t *)operator new();
  sub_20B8A7978(v22, v9 + 184);
  sub_20B8BFDC8((uint64_t *)(v9 + 3880), (uint64_t)v22);
  v23 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_20B7F7000, v23, OS_LOG_TYPE_DEBUG, "Mecabra Japanese initialized.", buf, 2u);
  }
  v24 = sub_20B9A7C5C(0xDu);
  if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v25 = v24;
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v25, OS_SIGNPOST_INTERVAL_END, spid, "MecabraJapaneseInit", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v26 = sub_20B9A7C5C(0xDu);
  if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v27 = v26;
    if (os_signpost_enabled(v26))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v27, OS_SIGNPOST_INTERVAL_BEGIN, spid, "MecabraJapaneseOpen", "Open MecabraJapanese engine", buf, 2u);
    }
  }
  v28 = (char *)sub_20B8CF134(*(const __CFURL **)(a1 + 16));
  v148[1] = v28;
  if (!v28)
  {
    v32 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_20B7F7000, v32, OS_LOG_TYPE_FAULT, "Failed to retrieve system dictionary path.", buf, 2u);
    }
    goto LABEL_137;
  }
  *(_QWORD *)(v9 + 1040) = sub_20B8B2334(*(const __CFURL **)(a1 + 16));
  v29 = sub_20B896F94();
  v30 = CFURLCreateCopyAppendingPathComponent(0, (CFURLRef)v28, off_2547282A8, 0);
  *(_QWORD *)buf = v30;
  if (v30)
  {
    sub_20B95B9A8((uint64_t)v29, v30);
    CFRelease(v30);
    *(_QWORD *)(v9 + 1032) = v29;
    if (*(_BYTE *)(a1 + 6))
    {
      if (*v14 < 0)
        v31 = 0;
      else
        v31 = CFSTR("kanakb.dic");
    }
    else
    {
      v31 = 0;
    }
    sub_20B8D01A0((const __CFURL *)v28, v31, *(const __CFURL **)(a1 + 24), CFSTR("LexicalLearning_ja_JP.db"), 0, v148);
    if (!v148[0] || !sub_20B95E934(v9, v148[0], (int *)a1))
    {
      v40 = sub_20B9A7C5C(0);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
      {
        v47 = CFURLGetString((CFURLRef)v28);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v47;
        _os_log_fault_impl(&dword_20B7F7000, v40, OS_LOG_TYPE_FAULT, "Failed to open Mecabra engine. (System dictionary directory: %@)", buf, 0xCu);
      }
      v34 = 0;
      goto LABEL_131;
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 192) + 184))(*(_QWORD *)(v9 + 192), *(_QWORD *)(v9 + 1040));
    v35 = *(_QWORD *)(v9 + 192);
    v36 = (_QWORD *)operator new();
    *v36 = &off_24C4622E0;
    v36[1] = v35;
    sub_20B9F11B0((uint64_t)(v36 + 2), 0x2710uLL);
    v36[11] = v14;
    v37 = *(_QWORD *)(v9 + 1072);
    *(_QWORD *)(v9 + 1072) = v36;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    if (*(_BYTE *)(a1 + 8))
    {
LABEL_118:
      if (**(_BYTE **)(v9 + 1032))
      {
        v97 = sub_20B9A7C5C(0xDu);
        v98 = os_signpost_id_make_with_pointer(v97, (const void *)v9);
        v99 = sub_20B9A7C5C(0xDu);
        if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v100 = v99;
          if (os_signpost_enabled(v99))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_20B7F7000, v100, OS_SIGNPOST_INTERVAL_BEGIN, v98, "MecabraJapaneseWordCacheLoad", "Load word cache for MecabraJapanese", buf, 2u);
          }
        }
        sub_20B8D0008((const __CFURL *)v28, CFSTR("word_cache.dat"), (char **)buf);
        v101 = *(_QWORD *)buf;
        v102 = *v145;
        *v145 = *(_QWORD *)buf;
        if (v102)
        {
          MEMORY[0x20BD39C80](v102, 0x1000C8077774924);
          v101 = *v145;
        }
        if (!v101)
        {
          v103 = sub_20B9A7C5C(0);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_20B7F7000, v103, OS_LOG_TYPE_ERROR, "Failed to retrieve word cache file path.", buf, 2u);
          }
        }
        sub_20B8C71C4(v9);
        v104 = sub_20B9A7C5C(0xDu);
        if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v105 = v104;
          if (os_signpost_enabled(v104))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_20B7F7000, v105, OS_SIGNPOST_INTERVAL_END, v98, "MecabraJapaneseWordCacheLoad", (const char *)&unk_20BA9505F, buf, 2u);
          }
        }
      }
      v34 = 1;
LABEL_131:
      v106 = v148[0];
      v148[0] = 0;
      if (v106)
        MEMORY[0x20BD39C80](v106, 0x1000C8077774924);
      goto LABEL_133;
    }
    sub_20B8D0008((const __CFURL *)v28, CFSTR("pos_prediction.dat"), &v147);
    v142 = v147;
    if (v147)
    {
      v38 = operator new();
      sub_20B80627C((_QWORD *)v38);
      sub_20B7F8B20((_OWORD *)(v38 + 8));
      *(_QWORD *)(v38 + 56) = operator new[]();
      *(_QWORD *)(v38 + 64) = operator new[]();
      sub_20B806664((_QWORD **)v38, v142);
      v39 = *(_QWORD *)(v9 + 3848);
      *(_QWORD *)(v9 + 3848) = v38;
      if (v39)
        sub_20B8CEB78(v39);
    }
    else
    {
      v41 = sub_20B9A7C5C(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_20B7F7000, v41, OS_LOG_TYPE_ERROR, "Failed to retrieve POS prediction dictionary path.", buf, 2u);
      }
    }
    v42 = *(_QWORD *)(v9 + 176);
    if (v42 && *(_BYTE *)(v42 + 96))
    {
      v43 = sub_20B9A7C5C(0xDu);
      v44 = os_signpost_id_make_with_pointer(v43, (const void *)v9);
      v45 = sub_20B9A7C5C(0xDu);
      if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v46 = v45;
        if (os_signpost_enabled(v45))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v44, "MecabraJapaneseLearnerLoad", "Load learners for MecabraJapanese", buf, 2u);
        }
      }
      if (*(_QWORD *)(*(_QWORD *)(v9 + 176) + 192))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 192) + 160))(*(_QWORD *)(v9 + 192));
      }
      else
      {
        v48 = sub_20B9A7C5C(0);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_20B7F7000, v48, OS_LOG_TYPE_ERROR, "Failed to register an immutable dynamic dictionary.", buf, 2u);
        }
      }
      if (*(_QWORD *)(*(_QWORD *)(v9 + 176) + 200))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 192) + 160))(*(_QWORD *)(v9 + 192));
      }
      else
      {
        v49 = sub_20B9A7C5C(0);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_20B7F7000, v49, OS_LOG_TYPE_ERROR, "Failed to register a mutable dynamic dictionary.", buf, 2u);
        }
      }
      *(_QWORD *)v152 = *(_QWORD *)(v9 + 192);
      sub_20B8C9BB4(buf, v152, *(_QWORD *)(v9 + 176) + 248, v9 + 184, v9 + 264);
      v50 = *(_QWORD *)(v9 + 3856);
      *(_QWORD *)(v9 + 3856) = *(_QWORD *)buf;
      if (v50)
        sub_20B8CE648(v50);
      v51 = *(_QWORD *)(v9 + 176);
      v52 = (_QWORD *)operator new();
      *v52 = v51;
      v52[1] = v14;
      v52[2] = v9 + 168;
      v52[3] = v18;
      v53 = *(_QWORD *)(v9 + 704);
      *(_QWORD *)(v9 + 704) = v52;
      if (v53)
        MEMORY[0x20BD39CB0](v53, 0x70C40F770AEC6);
      sub_20B8C9C60((uint64_t *)buf, (uint64_t *)(*(_QWORD *)(v9 + 176) + 184), v9 + 184);
      v54 = *(_QWORD *)(v9 + 712);
      *(_QWORD *)(v9 + 712) = *(_QWORD *)buf;
      if (v54)
        sub_20B8CEBF4(v9 + 712, v54);
      v55 = sub_20B9A7C5C(0xDu);
      if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v56 = v55;
        if (os_signpost_enabled(v55))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v56, OS_SIGNPOST_INTERVAL_END, v44, "MecabraJapaneseLearnerLoad", (const char *)&unk_20BA9505F, buf, 2u);
        }
      }
    }
    v57 = *(const __CFURL **)(a1 + 40);
    if (v57)
      v58 = CFURLCopyAbsoluteURL(v57);
    else
      v58 = CFURLCreateCopyAppendingPathComponent(0, (CFURLRef)v28, off_254728288, 1u);
    v59 = v58;
    *(_QWORD *)v152 = 0;
    if (v58)
    {
      if (CFURLResourceIsReachable(v58, (CFErrorRef *)v152))
      {
        v60 = sub_20B9A7C5C(0xDu);
        v140 = os_signpost_id_make_with_pointer(v60, (const void *)v9);
        v61 = sub_20B9A7C5C(0xDu);
        if (v140 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v62 = v61;
          if (os_signpost_enabled(v61))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_20B7F7000, v62, OS_SIGNPOST_INTERVAL_BEGIN, v140, "MecabraJapaneseLanguageModelLoad", "Load language models for MecabraJapanese", buf, 2u);
          }
        }
        sub_20B8C9CDC(v59, off_254728290, (CFURLRef *)&v151);
        sub_20B8C9CDC(v59, off_2547282A0, &v150);
        sub_20B8C9CDC(v59, off_254728298, (CFURLRef *)&v149);
        v138 = (CFURLRef)v151;
        v139 = v150;
        cf = (CFURLRef)v149;
        if (!(v151 | v149) || !v150)
        {
          v80 = operator new();
          sub_20BA2F0C4(v80, v59, *(const void **)(a1 + 56), *(_QWORD *)(v9 + 1048), *(_QWORD *)(v9 + 192), 0);
          v81 = (_QWORD *)*v143;
          *v143 = v80;
          if (v81)
            sub_20B8CEC3C(v81);
          v82 = operator new();
          sub_20BA2F0C4(v82, v59, 0, *(_QWORD *)(v9 + 1048), *(_QWORD *)(v9 + 192), 0);
          v83 = *(_QWORD **)(v9 + 1176);
          *(_QWORD *)(v9 + 1176) = v82;
          if (v83)
            sub_20B8CEC3C(v83);
          v84 = *(const __CFURL **)(a1 + 16);
          v85 = operator new();
          sub_20B896E7C(v85, v84, v9 + 184, 1);
          v86 = *(_QWORD *)(v9 + 3824);
          *(_QWORD *)(v9 + 3824) = v85;
          if (v86)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
            v85 = *(_QWORD *)(v9 + 3824);
          }
          v144 = *(_OWORD *)v143;
          v87 = operator new();
          *(_QWORD *)v87 = &unk_24C462318;
          v88 = sub_20B896F94();
          *(_QWORD *)(v87 + 16) = v14;
          *(_QWORD *)v87 = &unk_24C462ED0;
          *(_QWORD *)(v87 + 8) = v88;
          *(_OWORD *)(v87 + 24) = v144;
          *(_QWORD *)(v87 + 40) = v85;
          v89 = *(_QWORD *)(v9 + 3832);
          *(_QWORD *)(v9 + 3832) = v87;
          if (v89)
            (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
          v90 = *(_QWORD *)(v9 + 1168);
          v91 = *(_QWORD *)(v9 + 1048);
          v92 = *(_QWORD *)(v9 + 1072);
          v93 = (_QWORD *)operator new();
          v93[2] = v91;
          v93[3] = v92;
          *v93 = &unk_24C464898;
          v93[1] = v14;
          v93[4] = v90;
          v93[5] = v18;
          v94 = *(_QWORD *)(v9 + 3840);
          *(_QWORD *)(v9 + 3840) = v93;
          if (!v94)
            goto LABEL_106;
LABEL_105:
          (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
LABEL_106:
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 192) + 160))(*(_QWORD *)(v9 + 192), *(_QWORD *)(*(_QWORD *)(v9 + 1168) + 88));
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 192) + 160))(*(_QWORD *)(v9 + 192), *(_QWORD *)(*(_QWORD *)(v9 + 1168) + 96));
          sub_20B9C4608(*(_QWORD *)(v9 + 1168), v9, (uint64_t)sub_20B8C9D68);
          *(_QWORD *)(*(_QWORD *)(v9 + 176) + 240) = *(_QWORD *)(v9 + 1168);
          v95 = sub_20B9A7C5C(0xDu);
          if (v140 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v96 = v95;
            if (os_signpost_enabled(v95))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_20B7F7000, v96, OS_SIGNPOST_INTERVAL_END, v140, "MecabraJapaneseLanguageModelLoad", (const char *)&unk_20BA9505F, buf, 2u);
            }
          }
          if (cf)
            CFRelease(cf);
          if (v139)
            CFRelease(v139);
          if (v138)
            CFRelease(v138);
LABEL_115:
          CFRelease(v59);
LABEL_116:
          if (v142)
            MEMORY[0x20BD39C80](v142, 0x1000C8077774924);
          goto LABEL_118;
        }
        v63 = operator new();
        sub_20BA2F0C4(v63, 0, *(const void **)(a1 + 56), *(_QWORD *)(v9 + 1048), *(_QWORD *)(v9 + 192), 2);
        v64 = (_QWORD *)*v143;
        *v143 = v63;
        if (v64)
          sub_20B8CEC3C(v64);
        v65 = operator new();
        sub_20B8CECE8(v65, v139);
        if (*(_BYTE *)(v9 + 1192) && cf)
        {
          v66 = sub_20B9A7C5C(7u);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_20B7F7000, v66, OS_LOG_TYPE_DEBUG, "Feature flag detected: useMontreal_JA", buf, 2u);
          }
          v67 = (_QWORD *)operator new();
          sub_20B944A4C((uint64_t)v67, cf);
          if (sub_20B945480(v67))
          {
            v68 = v67[1];
            v67[1] = v65;
            if (v68)
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
            v69 = *(_QWORD *)(v9 + 1184);
            *(_QWORD *)(v9 + 1184) = v67;
            v70 = (uint64_t *)(v9 + 3808);
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
            v71 = sub_20B9A7C5C(7u);
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              v72 = "Feature flag activated: useMontreal_JA = true";
LABEL_148:
              _os_log_debug_impl(&dword_20B7F7000, v71, OS_LOG_TYPE_DEBUG, v72, buf, 2u);
            }
          }
          else
          {
            v115 = sub_20B9A7C5C(7u);
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_debug_impl(&dword_20B7F7000, v115, OS_LOG_TYPE_DEBUG, "Feature flag is not enabled: useMontreal_JA = false", buf, 2u);
            }
            v116 = operator new();
            *(_QWORD *)buf = v65;
            sub_20B9AFAF4(v116, v138, (uint64_t *)buf);
            v70 = (uint64_t *)(v9 + 3808);
            if (*(_QWORD *)buf)
              (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
            v117 = *(_QWORD *)(v9 + 1184);
            *(_QWORD *)(v9 + 1184) = v116;
            if (v117)
              (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
            (*(void (**)(_QWORD *))(*v67 + 8))(v67);
          }
        }
        else
        {
          v113 = operator new();
          *(_QWORD *)buf = v65;
          sub_20B9AFAF4(v113, v138, (uint64_t *)buf);
          v70 = (uint64_t *)(v9 + 3808);
          if (*(_QWORD *)buf)
            (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
          v114 = *(_QWORD *)(v9 + 1184);
          *(_QWORD *)(v9 + 1184) = v113;
          if (v114)
            (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
          v71 = sub_20B9A7C5C(7u);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            v72 = "RNNLM is enabled";
            goto LABEL_148;
          }
        }
        v118 = *(const __CFURL **)(a1 + 16);
        v119 = operator new();
        sub_20B896E7C(v119, v118, v9 + 184, 0);
        v120 = *(_QWORD *)(v9 + 3824);
        *(_QWORD *)(v9 + 3824) = v119;
        if (v120)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
          v119 = *(_QWORD *)(v9 + 3824);
        }
        v121 = *(_QWORD *)(v9 + 1184);
        v122 = (_QWORD *)operator new();
        *v122 = &unk_24C461CA0;
        v122[1] = v121;
        v122[2] = v119;
        v122[3] = v14;
        v123 = *v70;
        *v70 = (uint64_t)v122;
        if (v123)
          (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
        v124 = (_QWORD *)*v143;
        v125 = (_QWORD *)operator new();
        *v125 = &unk_24C4628E0;
        v125[1] = v124;
        v126 = *(_QWORD *)(v9 + 3816);
        *(_QWORD *)(v9 + 3816) = v125;
        if (v126)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
          v125 = *(_QWORD **)(v9 + 3816);
        }
        v127 = *v70;
        v128 = (_QWORD *)operator new();
        *v128 = &unk_24C462318;
        v129 = sub_20B896F94();
        *v128 = &unk_24C461F08;
        v128[1] = v129;
        v128[2] = v14;
        v128[3] = v127;
        v128[4] = v125;
        v130 = *(_QWORD *)(v9 + 3832);
        *(_QWORD *)(v9 + 3832) = v128;
        if (v130)
          (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
        v131 = *(_QWORD *)(v9 + 1184);
        v132 = *(_QWORD *)(v9 + 1048);
        v133 = *(_QWORD *)(v9 + 1072);
        v134 = (_QWORD *)operator new();
        v134[2] = v132;
        v134[3] = v133;
        *v134 = &off_24C462340;
        v134[1] = v14;
        v134[4] = sub_20B896F94();
        v134[5] = v131;
        v135 = (_QWORD *)operator new();
        v136 = v134[5];
        *v135 = &unk_24C461F30;
        v135[1] = v14;
        v135[2] = v136;
        v134[6] = v135;
        v134[7] = 0;
        v94 = *(_QWORD *)(v9 + 3840);
        *(_QWORD *)(v9 + 3840) = v134;
        if (!v94)
          goto LABEL_106;
        goto LABEL_105;
      }
      v77 = sub_20B9A7C5C(7u);
      if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
      {
LABEL_88:
        v78 = (_QWORD *)*v143;
        *v143 = 0;
        if (v78)
          sub_20B8CEC3C(v78);
        v79 = *(_QWORD **)(v9 + 1176);
        *(_QWORD *)(v9 + 1176) = 0;
        if (v79)
          sub_20B8CEC3C(v79);
        if (*(_QWORD *)v152)
          CFRelease(*(CFTypeRef *)v152);
        if (!v59)
          goto LABEL_116;
        goto LABEL_115;
      }
      v137 = CFURLGetString(v59);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v137;
      v74 = "No static LM found at %@";
      v75 = v77;
      v76 = 12;
    }
    else
    {
      v73 = sub_20B9A7C5C(7u);
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
        goto LABEL_88;
      *(_WORD *)buf = 0;
      v74 = "Failed to retrieve static LM path";
      v75 = v73;
      v76 = 2;
    }
    _os_log_debug_impl(&dword_20B7F7000, v75, OS_LOG_TYPE_DEBUG, v74, buf, v76);
    goto LABEL_88;
  }
  v33 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v152 = 0;
    _os_log_fault_impl(&dword_20B7F7000, v33, OS_LOG_TYPE_FAULT, "Failed to retrieve settings file path.", v152, 2u);
  }
  v34 = 0;
LABEL_133:
  CFRelease(v28);
  if ((v34 & 1) != 0)
  {
    v107 = sub_20B9A7C5C(0xDu);
    if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v108 = v107;
      if (os_signpost_enabled(v107))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v108, OS_SIGNPOST_INTERVAL_END, spid, "MecabraJapaneseOpen", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
    return v9;
  }
LABEL_137:
  v109 = sub_20B8BFE4C(v9);
  MEMORY[0x20BD39CB0](v109, 0x10F3C4028D05E88);
  v110 = sub_20B9A7C5C(0xDu);
  if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v111 = v110;
    if (os_signpost_enabled(v110))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v111, OS_SIGNPOST_INTERVAL_END, spid, "MecabraJapaneseOpen", "Failed", buf, 2u);
    }
  }
  return 0;
}

